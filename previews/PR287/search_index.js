var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21371605120750914 ± 0.0014510132020224258\n   G2(1) = 0.9168750729145191 ± 0.0008504240854431494\n   G2(2) = 0.981080151575072 ± 0.0007703218798931989\n   G2(3) = 0.9903734998133091 ± 0.0010192565356393823\n   G2(4) = 0.981080151575072 ± 0.0007703218798931989\n   G2(5) = 0.9168750729145191 ± 0.0008504240854431494\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9850375615458185 ± 0.14719980576156702\n   Replica 2: -4.067887308504812 ± 0.12015727986842327\n   Replica 3: -4.00526151027055 ± 0.10620890966189837\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip430\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip431\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip432\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.58 2211.02,1003.58 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.335 2211.02,746.335 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.094 2211.02,489.094 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.853 2211.02,231.853 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.58 423.181,1003.58 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.335 423.181,746.335 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.094 423.181,489.094 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.853 423.181,231.853 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M290.043 1016.92 L306.363 1016.92 L306.363 1020.86 L284.418 1020.86 L284.418 1016.92 Q287.08 1014.17 291.664 1009.54 Q296.27 1004.88 297.451 1003.54 Q299.696 1001.02 300.576 999.283 Q301.478 997.524 301.478 995.834 Q301.478 993.079 299.534 991.343 Q297.613 989.607 294.511 989.607 Q292.312 989.607 289.858 990.371 Q287.427 991.135 284.65 992.686 L284.65 987.964 Q287.474 986.829 289.927 986.251 Q292.381 985.672 294.418 985.672 Q299.789 985.672 302.983 988.357 Q306.177 991.042 306.177 995.533 Q306.177 997.663 305.367 999.584 Q304.58 1001.48 302.474 1004.07 Q301.895 1004.75 298.793 1007.96 Q295.691 1011.16 290.043 1016.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M316.224 986.297 L334.58 986.297 L334.58 990.232 L320.506 990.232 L320.506 998.704 Q321.524 998.357 322.543 998.195 Q323.562 998.01 324.58 998.01 Q330.367 998.01 333.747 1001.18 Q337.126 1004.35 337.126 1009.77 Q337.126 1015.35 333.654 1018.45 Q330.182 1021.53 323.862 1021.53 Q321.687 1021.53 319.418 1021.16 Q317.173 1020.79 314.765 1020.05 L314.765 1015.35 Q316.849 1016.48 319.071 1017.04 Q321.293 1017.59 323.77 1017.59 Q327.774 1017.59 330.112 1015.49 Q332.45 1013.38 332.45 1009.77 Q332.45 1006.16 330.112 1004.05 Q327.774 1001.94 323.77 1001.94 Q321.895 1001.94 320.02 1002.36 Q318.168 1002.78 316.224 1003.66 L316.224 986.297 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 989.376 Q352.728 989.376 350.899 992.94 Q349.094 996.482 349.094 1003.61 Q349.094 1010.72 350.899 1014.28 Q352.728 1017.82 356.339 1017.82 Q359.973 1017.82 361.779 1014.28 Q363.608 1010.72 363.608 1003.61 Q363.608 996.482 361.779 992.94 Q359.973 989.376 356.339 989.376 M356.339 985.672 Q362.149 985.672 365.205 990.278 Q368.284 994.862 368.284 1003.61 Q368.284 1012.34 365.205 1016.94 Q362.149 1021.53 356.339 1021.53 Q350.529 1021.53 347.45 1016.94 Q344.395 1012.34 344.395 1003.61 Q344.395 994.862 347.45 990.278 Q350.529 985.672 356.339 985.672 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M286.062 729.055 L304.418 729.055 L304.418 732.991 L290.344 732.991 L290.344 741.463 Q291.363 741.116 292.381 740.954 Q293.4 740.768 294.418 740.768 Q300.205 740.768 303.585 743.94 Q306.964 747.111 306.964 752.528 Q306.964 758.106 303.492 761.208 Q300.02 764.287 293.701 764.287 Q291.525 764.287 289.256 763.916 Q287.011 763.546 284.603 762.805 L284.603 758.106 Q286.687 759.241 288.909 759.796 Q291.131 760.352 293.608 760.352 Q297.613 760.352 299.951 758.245 Q302.288 756.139 302.288 752.528 Q302.288 748.916 299.951 746.81 Q297.613 744.704 293.608 744.704 Q291.733 744.704 289.858 745.12 Q288.006 745.537 286.062 746.416 L286.062 729.055 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M326.177 732.134 Q322.566 732.134 320.737 735.699 Q318.932 739.241 318.932 746.37 Q318.932 753.477 320.737 757.041 Q322.566 760.583 326.177 760.583 Q329.811 760.583 331.617 757.041 Q333.446 753.477 333.446 746.37 Q333.446 739.241 331.617 735.699 Q329.811 732.134 326.177 732.134 M326.177 728.43 Q331.987 728.43 335.043 733.037 Q338.122 737.62 338.122 746.37 Q338.122 755.097 335.043 759.703 Q331.987 764.287 326.177 764.287 Q320.367 764.287 317.288 759.703 Q314.233 755.097 314.233 746.37 Q314.233 737.62 317.288 733.037 Q320.367 728.43 326.177 728.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 732.134 Q352.728 732.134 350.899 735.699 Q349.094 739.241 349.094 746.37 Q349.094 753.477 350.899 757.041 Q352.728 760.583 356.339 760.583 Q359.973 760.583 361.779 757.041 Q363.608 753.477 363.608 746.37 Q363.608 739.241 361.779 735.699 Q359.973 732.134 356.339 732.134 M356.339 728.43 Q362.149 728.43 365.205 733.037 Q368.284 737.62 368.284 746.37 Q368.284 755.097 365.205 759.703 Q362.149 764.287 356.339 764.287 Q350.529 764.287 347.45 759.703 Q344.395 755.097 344.395 746.37 Q344.395 737.62 347.45 733.037 Q350.529 728.43 356.339 728.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M284.835 471.814 L307.057 471.814 L307.057 473.805 L294.511 506.374 L289.627 506.374 L301.432 475.749 L284.835 475.749 L284.835 471.814 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M316.224 471.814 L334.58 471.814 L334.58 475.749 L320.506 475.749 L320.506 484.221 Q321.524 483.874 322.543 483.712 Q323.562 483.527 324.58 483.527 Q330.367 483.527 333.747 486.698 Q337.126 489.87 337.126 495.286 Q337.126 500.865 333.654 503.967 Q330.182 507.045 323.862 507.045 Q321.687 507.045 319.418 506.675 Q317.173 506.305 314.765 505.564 L314.765 500.865 Q316.849 501.999 319.071 502.555 Q321.293 503.11 323.77 503.11 Q327.774 503.11 330.112 501.004 Q332.45 498.897 332.45 495.286 Q332.45 491.675 330.112 489.569 Q327.774 487.462 323.77 487.462 Q321.895 487.462 320.02 487.879 Q318.168 488.295 316.224 489.175 L316.224 471.814 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 474.893 Q352.728 474.893 350.899 478.458 Q349.094 481.999 349.094 489.129 Q349.094 496.235 350.899 499.8 Q352.728 503.342 356.339 503.342 Q359.973 503.342 361.779 499.8 Q363.608 496.235 363.608 489.129 Q363.608 481.999 361.779 478.458 Q359.973 474.893 356.339 474.893 M356.339 471.189 Q362.149 471.189 365.205 475.796 Q368.284 480.379 368.284 489.129 Q368.284 497.856 365.205 502.462 Q362.149 507.045 356.339 507.045 Q350.529 507.045 347.45 502.462 Q344.395 497.856 344.395 489.129 Q344.395 480.379 347.45 475.796 Q350.529 471.189 356.339 471.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M256.664 245.198 L264.303 245.198 L264.303 218.832 L255.992 220.499 L255.992 216.239 L264.256 214.573 L268.932 214.573 L268.932 245.198 L276.571 245.198 L276.571 249.133 L256.664 249.133 L256.664 245.198 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M296.015 217.651 Q292.404 217.651 290.576 221.216 Q288.77 224.758 288.77 231.887 Q288.77 238.994 290.576 242.559 Q292.404 246.1 296.015 246.1 Q299.65 246.1 301.455 242.559 Q303.284 238.994 303.284 231.887 Q303.284 224.758 301.455 221.216 Q299.65 217.651 296.015 217.651 M296.015 213.948 Q301.826 213.948 304.881 218.554 Q307.96 223.138 307.96 231.887 Q307.96 240.614 304.881 245.221 Q301.826 249.804 296.015 249.804 Q290.205 249.804 287.127 245.221 Q284.071 240.614 284.071 231.887 Q284.071 223.138 287.127 218.554 Q290.205 213.948 296.015 213.948 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M326.177 217.651 Q322.566 217.651 320.737 221.216 Q318.932 224.758 318.932 231.887 Q318.932 238.994 320.737 242.559 Q322.566 246.1 326.177 246.1 Q329.811 246.1 331.617 242.559 Q333.446 238.994 333.446 231.887 Q333.446 224.758 331.617 221.216 Q329.811 217.651 326.177 217.651 M326.177 213.948 Q331.987 213.948 335.043 218.554 Q338.122 223.138 338.122 231.887 Q338.122 240.614 335.043 245.221 Q331.987 249.804 326.177 249.804 Q320.367 249.804 317.288 245.221 Q314.233 240.614 314.233 231.887 Q314.233 223.138 317.288 218.554 Q320.367 213.948 326.177 213.948 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M356.339 217.651 Q352.728 217.651 350.899 221.216 Q349.094 224.758 349.094 231.887 Q349.094 238.994 350.899 242.559 Q352.728 246.1 356.339 246.1 Q359.973 246.1 361.779 242.559 Q363.608 238.994 363.608 231.887 Q363.608 224.758 361.779 221.216 Q359.973 217.651 356.339 217.651 M356.339 213.948 Q362.149 213.948 365.205 218.554 Q368.284 223.138 368.284 231.887 Q368.284 240.614 365.205 245.221 Q362.149 249.804 356.339 249.804 Q350.529 249.804 347.45 245.221 Q344.395 240.614 344.395 231.887 Q344.395 223.138 347.45 218.554 Q350.529 213.948 356.339 213.948 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.853 4017.76,231.853 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1247.02 460.533,1246.43 461.101,1245.76 461.669,1245.02 462.238,1244.18 462.806,1243.28 463.375,1242.29 463.943,1241.2 464.511,1240.02 465.08,1238.73 465.648,1237.34 466.216,1235.83 466.785,1234.19 467.353,1232.43 467.921,1229.51 468.49,1227.45 469.058,1224.22 469.626,1220.82 470.195,1218.28 470.763,1214.54 471.331,1210.64 471.9,1206.56 472.468,1203.29 473.036,1199.87 473.605,1196.21 474.173,1192.42 474.741,1186.31 475.31,1181.95 475.878,1176.36 476.446,1171.58 477.015,1166.53 477.583,1161.29 478.152,1155.77 478.72,1150 479.288,1142.98 479.857,1135.77 480.425,1128.45 480.993,1119.85 481.562,1112.92 482.13,1104.61 482.698,1097.32 483.267,1086.73 483.835,1078 484.403,1070.04 484.972,1061.92 485.54,1052.49 486.108,1043.98 486.677,1035.5 487.245,1025.66 487.813,1012.66 488.382,1001.56 488.95,991.414 489.518,981.168 490.087,968.753 490.655,958.465 491.224,946.852 491.792,935.503 492.36,925.129 492.929,914.677 493.497,904.263 494.065,893.898 494.634,883.402 495.202,873.851 495.77,859.151 496.339,847.871 496.907,838.531 497.475,828.19 498.044,817.878 498.612,807.57 499.18,793.156 499.749,783.2 500.317,774.191 500.885,764.141 501.454,753.107 502.022,742.12 502.59,732.421 503.159,723.654 503.727,714.986 504.295,703.232 504.864,693.869 505.432,684.53 506.001,676.202 506.569,665.77 507.137,657.619 507.706,647.596 508.274,635.686 508.842,628.193 509.411,620.753 509.979,613.258 510.547,603.821 511.116,595.629 511.684,588.494 512.252,580.476 512.821,572.508 513.389,562.536 513.957,554.768 514.526,547.188 515.094,540.886 515.662,533.454 516.231,525.214 516.799,519.064 517.367,511.076 517.936,503.367 518.504,495.965 519.072,490.716 519.641,486.517 520.209,480.169 520.778,471.942 521.346,464.939 521.914,459.194 522.483,451.547 523.051,447.175 523.619,440.758 524.188,434.823 524.756,430.876 525.324,427.016 525.893,419.25 526.461,415.784 527.029,411.482 527.598,409.423 528.166,406.078 528.734,400.609 529.303,393.183 529.871,391.136 530.439,386.114 531.008,382.464 531.576,378.42 532.144,373.834 532.713,371.363 533.281,366.847 533.85,363.679 534.418,359.417 534.986,357.209 535.555,354.104 536.123,349.899 536.691,346.784 537.26,344.959 537.828,341.939 538.396,338.114 538.965,335.537 539.533,335.083 540.101,334.575 540.67,329.747 541.238,327.409 541.806,327.091 542.375,325.34 542.943,322.808 543.511,320.477 544.08,320.152 544.648,318.538 545.216,318.111 545.785,316.832 546.353,313.276 546.921,311.968 547.49,309.493 548.058,307.179 548.627,305.19 549.195,304.097 549.763,303.105 550.332,304.283 550.9,302.049 551.468,297.778 552.037,297.963 552.605,294.979 553.173,293.977 553.742,293.961 554.31,292.007 554.878,291.02 555.447,289.169 556.015,289.525 556.583,288.544 557.152,286.755 557.72,287.962 558.288,286.091 558.857,282.904 559.425,280.964 559.993,278.228 560.562,277.761 561.13,277.285 561.698,276.808 562.267,275.068 562.835,273.67 563.404,274.416 563.972,272.787 564.54,272.376 565.109,272.066 565.677,271.84 566.245,271.471 566.814,269.99 567.382,268.412 567.95,266.084 568.519,264.622 569.087,265.597 569.655,262.181 570.224,262.303 570.792,260.298 571.36,260.303 571.929,259.19 572.497,260.275 573.065,259.152 573.634,257.979 574.202,256.858 574.77,256.72 575.339,256.899 575.907,258.158 576.476,255.958 577.044,254.031 577.612,256.718 578.181,256.902 578.749,250.722 579.317,251.283 579.886,253.794 580.454,252.001 581.022,251.056 581.591,251.284 582.159,249.484 582.727,248.836 583.296,250.423 583.864,250.755 584.432,248.786 585.001,250.287 585.569,249.387 586.137,249.838 586.706,250.071 587.274,248.214 587.842,247.513 588.411,248.018 588.979,247.335 589.547,247.584 590.116,246.908 590.684,247.217 591.253,245.424 591.821,245.874 592.389,246.479 592.958,244.89 593.526,245.199 594.094,245.752 594.663,246.022 595.231,246.169 595.799,243.278 596.368,243.946 596.936,244.389 597.504,242.876 598.073,243.375 598.641,242.002 599.209,241.474 599.778,240.993 600.346,240.65 600.914,241.244 601.483,241.934 602.051,241.368 602.619,240.953 603.188,241.833 603.756,244.483 604.325,245.047 604.893,245.561 605.461,246.769 606.03,247.12 606.598,249.315 607.166,246.241 607.735,246.056 608.303,245.102 608.871,246.479 609.44,247.785 610.008,248.71 610.576,248.642 611.145,249.59 611.713,251.438 612.281,250.241 612.85,249.153 613.418,252.069 613.986,250.869 614.555,244.508 615.123,245.53 615.691,244.648 616.26,246.741 616.828,247.791 617.396,247.755 617.965,244.594 618.533,243.738 619.102,244.855 619.67,244.992 620.238,241.863 620.807,240.104 621.375,241.515 621.943,244.995 622.512,244.813 623.08,244.804 623.648,243.656 624.217,242.679 624.785,242.822 625.353,242.765 625.922,243.929 626.49,242.709 627.058,242.588 627.627,244.871 628.195,245.81 628.763,243.572 629.332,244.471 629.9,245.482 630.468,244.178 631.037,244.015 631.605,242.786 632.173,242.864 632.742,241.997 633.31,243.158 633.879,241.941 634.447,240.826 635.015,239.618 635.584,239.754 636.152,236.865 636.72,237.202 637.289,237.466 637.857,236.81 638.425,233.158 638.994,232.875 639.562,234.484 640.13,234.043 640.699,233.785 641.267,233.567 641.835,233.888 642.404,234.457 642.972,233.946 643.54,234.331 644.109,233.903 644.677,234.354 645.245,233.851 645.814,234.253 646.382,236.854 646.951,237.999 647.519,237.233 648.087,237.74 648.656,239.899 649.224,240.025 649.792,240.014 650.361,237.919 650.929,238.291 651.497,239.607 652.066,240.77 652.634,239.763 653.202,238.706 653.771,238.682 654.339,237.803 654.907,237.843 655.476,237.996 656.044,237.111 656.612,236.142 657.181,236.359 657.749,235.711 658.317,235.006 658.886,235.339 659.454,235.678 660.022,236.866 660.591,237.932 661.159,237.982 661.728,237.048 662.296,237.248 662.864,235.343 663.433,237.717 664.001,236.872 664.569,236.947 665.138,235.899 665.706,237.016 666.274,235.97 666.843,236.124 667.411,237.541 667.979,236.571 668.548,236.545 669.116,235.673 669.684,236.037 670.253,237.33 670.821,238.518 671.389,237.782 671.958,241.015 672.526,240.78 673.094,240.642 673.663,240.592 674.231,240.619 674.799,240.341 675.368,240.246 675.936,240.105 676.505,242.015 677.073,238.676 677.641,239.474 678.21,240.258 678.778,238.143 679.346,238.306 679.915,238.374 680.483,237.248 681.051,238.169 681.62,237.05 682.188,237.115 682.756,240.126 683.325,239.196 683.893,239.945 684.461,239.726 685.03,237.684 685.598,237.422 686.166,236.262 686.735,235.084 687.303,236.097 687.871,236.193 688.44,237.111 689.008,237.058 689.577,238.225 690.145,235.121 690.713,234.212 691.282,237.539 691.85,236.415 692.418,234.452 692.987,234.63 693.555,233.727 694.123,233.964 694.692,235.019 695.26,236.046 695.828,235.176 696.397,234.311 696.965,234.351 697.533,233.466 698.102,233.75 698.67,233.861 699.238,233.952 699.807,235.242 700.375,236.502 700.943,239.473 701.512,238.178 702.08,235.913 702.648,236.09 703.217,236.823 703.785,236.867 704.354,237.939 704.922,237.757 705.49,237.668 706.059,237.581 706.627,235.326 707.195,236.44 707.764,234.399 708.332,235.35 708.9,233.424 709.469,233.546 710.037,234.64 710.605,233.705 711.174,232.775 711.742,236.223 712.31,236.227 712.879,232.947 713.447,234.162 714.015,233.173 714.584,233.448 715.152,233.397 715.72,235.566 716.289,235.579 716.857,236.28 717.425,236.083 717.994,235.993 718.562,237.021 719.131,234.969 719.699,233.97 720.267,235.274 720.836,234.25 721.404,232.376 721.972,233.656 722.541,233.798 723.109,232.727 723.677,232.731 724.246,232.753 724.814,233.915 725.382,235.008 725.951,233.934 726.519,233.063 727.087,233.082 727.656,236.262 728.224,233.027 728.792,232.93 729.361,232.789 729.929,232.805 730.497,232.884 731.066,231.137 731.634,230.389 732.203,230.809 732.771,232.152 733.339,230.322 733.908,230.602 734.476,229.958 735.044,231.295 735.613,233.713 736.181,234.606 736.749,237.781 737.318,238.698 737.886,239.265 738.454,238.865 739.023,239.623 739.591,239.291 740.159,238.838 740.728,238.642 741.296,237.238 741.864,237.996 742.433,239.704 743.001,238.2 743.569,238.083 744.138,237.836 744.706,236.623 745.274,237.451 745.843,236.316 746.411,237.112 746.98,234.845 747.548,235.656 748.116,235.377 748.685,235.08 749.253,236.086 749.821,237.002 750.39,237.728 750.958,237.292 751.526,237.002 752.095,235.69 752.663,237.517 753.231,237.183 753.8,236.073 754.368,235.87 754.936,235.463 755.505,235.379 756.073,235.247 756.641,233.893 757.21,234.876 757.778,233.716 758.346,232.85 758.915,232.888 759.483,231.851 760.052,232.976 760.62,232.871 761.188,230.854 761.757,231.767 762.325,230.922 762.893,229.068 763.462,225.112 764.03,224.645 764.598,227.32 765.167,227.932 765.735,228.39 766.303,228.719 766.872,227.108 767.44,227.652 768.008,228.212 768.577,226.655 769.145,227.252 769.713,224.711 770.282,225.453 770.85,228.059 771.418,229.686 771.987,232.188 772.555,234.309 773.123,235.555 773.692,235.377 774.26,235.375 774.829,235.401 775.397,232.033 775.965,231.011 776.534,230.398 777.102,229.426 777.67,227.449 778.239,225.923 778.807,225.364 779.375,224.97 779.944,225.784 780.512,224.446 781.08,225.079 781.649,225.79 782.217,227.503 782.785,227.044 783.354,227.53 783.922,229.337 784.49,234.953 785.059,234.868 785.627,235.934 786.195,236.71 786.764,235.708 787.332,235.691 787.9,236.736 788.469,235.476 789.037,235.687 789.606,234.52 790.174,233.552 790.742,233.57 791.311,234.782 791.879,236.862 792.447,234.688 793.016,235.596 793.584,233.506 794.152,233.426 794.721,234.591 795.289,236.708 795.857,237.581 796.426,237.381 796.994,238.077 797.562,237.856 798.131,236.698 798.699,236.416 799.267,236.353 799.836,236.243 800.404,234.967 800.972,234.853 801.541,235.888 802.109,235.653 802.678,236.687 803.246,235.527 803.814,234.459 804.383,234.492 804.951,235.497 805.519,235.134 806.088,233.888 806.656,232.903 807.224,233.005 807.793,231.851 808.361,230.709 808.929,230.649 809.498,229.858 810.066,228.092 810.634,229.332 811.203,228.64 811.771,230.037 812.339,228.232 812.908,230.522 813.476,231.943 814.044,231.077 814.613,230.181 815.181,229.685 815.749,229.97 816.318,230.664 816.886,232.888 817.455,231.761 818.023,231.852 818.591,232.019 819.16,233.105 819.728,232.094 820.296,233.121 820.865,234.033 821.433,233.877 822.001,235.828 822.57,236.419 823.138,235.259 823.706,233.977 824.275,234.06 824.843,235.805 825.411,238.046 825.98,236.587 826.548,236.327 827.116,235.908 827.685,235.498 828.253,237.279 828.821,235.982 829.39,235.798 829.958,234.762 830.526,234.801 831.095,234.519 831.663,236.467 832.232,239.23 832.8,237.683 833.368,237.293 833.937,236.993 834.505,236.539 835.073,236.457 835.642,233.965 836.21,232.994 836.778,232.887 837.347,231.799 837.915,232.69 838.483,232.768 839.052,232.779 839.62,232.594 840.188,232.605 840.757,231.498 841.325,226.373 841.893,226.846 842.462,226.162 843.03,226.632 843.598,226.088 844.167,226.336 844.735,227.616 845.304,225.811 845.872,224.285 846.44,223.969 847.009,223.479 847.577,221.202 848.145,219.895 848.714,219.948 849.282,222.222 849.85,224.233 850.419,223.857 850.987,224.546 851.555,224.175 852.124,223.8 852.692,227.386 853.26,227.971 853.829,228.526 854.397,230.079 854.965,228.718 855.534,229.479 856.102,230.08 856.67,228.539 857.239,230.204 857.807,229.552 858.375,231.149 858.944,228.627 859.512,230.322 860.081,226.951 860.649,229.618 861.217,230.136 861.786,230.517 862.354,227.584 862.922,228.214 863.491,231.014 864.059,232.476 864.627,231.483 865.196,230.624 865.764,230.805 866.332,230.276 866.901,230.49 867.469,231.962 868.037,232.23 868.606,232.568 869.174,230.804 869.742,233.011 870.311,230.357 870.879,230.895 871.447,234.322 872.016,234.326 872.584,234.146 873.152,234.337 873.721,235.655 874.289,236.646 874.858,236.681 875.426,235.635 875.994,237.514 876.563,237.486 877.131,238.372 877.699,236.135 878.268,235.874 878.836,235.552 879.404,235.363 879.973,235.304 880.541,235.438 881.109,235.357 881.678,235.343 882.246,234.921 882.814,236.877 883.383,235.775 883.951,235.63 884.519,234.462 885.088,234.516 885.656,234.369 886.224,233.607 886.793,235.708 887.361,234.767 887.93,233.942 888.498,235.136 889.066,234.04 889.635,233.023 890.203,234.994 890.771,235.131 891.34,233.924 891.908,234.098 892.476,234.091 893.045,234.183 893.613,235.259 894.181,237.312 894.75,235.911 895.318,234.682 895.886,236.552 896.455,236.7 897.023,236.758 897.591,236.446 898.16,235.271 898.728,234.239 899.296,231.058 899.865,233.295 900.433,235.276 901.001,234.023 901.57,232.884 902.138,231.981 902.707,232.271 903.275,232.161 903.843,233.215 904.412,231.173 904.98,233.512 905.548,231.528 906.117,231.69 906.685,231.852 907.253,232.215 907.822,229.103 908.39,229.525 908.958,230.128 909.527,230.604 910.095,228.649 910.663,231.201 911.232,232.252 911.8,234.496 912.368,233.438 912.937,232.142 913.505,232.399 914.073,229.468 914.642,229.766 915.21,229.818 915.779,228.041 916.347,229.438 916.915,231.807 917.484,231.005 918.052,234.236 918.62,236.114 919.189,236.909 919.757,238.807 920.325,238.52 920.894,240.216 921.462,239.658 922.03,239.297 922.599,237.922 923.167,238.859 923.735,238.366 924.304,236.962 924.872,238.672 925.44,239.368 926.009,237.867 926.577,236.513 927.145,236.11 927.714,236.903 928.282,236.947 928.85,237.62 929.419,234.3 929.987,235.146 930.556,235.869 931.124,234.805 931.692,234.639 932.261,236.482 932.829,236.119 933.397,236.589 933.966,237.455 934.534,237.301 935.102,235.74 935.671,235.606 936.239,236.336 936.807,235.209 937.376,236.038 937.944,236.858 938.512,239.499 939.081,241.03 939.649,239.369 940.217,239.874 940.786,241.383 941.354,240.64 941.922,238.944 942.491,238.282 943.059,236.589 943.627,235.225 944.196,233.74 944.764,234.666 945.333,234.284 945.901,233.88 946.469,234.636 947.038,235.37 947.606,234.958 948.174,235.43 948.743,234.782 949.311,234.513 949.879,235.042 950.448,233.526 951.016,233.271 951.584,235.097 952.153,235.754 952.721,236.357 953.289,236.972 953.858,238.519 954.426,237.674 954.994,235.999 955.563,237.671 956.131,236.982 956.699,237.472 957.268,235.859 957.836,235.566 958.405,236.032 958.973,237.607 959.541,236.941 960.11,234.096 960.678,231.72 961.246,230.305 961.815,231.02 962.383,230.794 962.951,229.777 963.52,229.698 964.088,229.729 964.656,230.504 965.225,229.343 965.793,230.453 966.361,229.331 966.93,229.311 967.498,229.329 968.066,230.256 968.635,231.141 969.203,230.964 969.771,231.849 970.34,231.511 970.908,233.302 971.476,232.899 972.045,231.682 972.613,233.673 973.182,232.061 973.75,231.56 974.318,233.558 974.887,233.276 975.455,232.842 976.023,233.548 976.592,232.138 977.16,230.946 977.728,230.603 978.297,230.356 978.865,231.255 979.433,231.151 980.002,228.881 980.57,230.039 981.138,232.048 981.707,231.95 982.275,232.869 982.843,232.554 983.412,231.324 983.98,230.077 984.548,225.954 985.117,226.055 985.685,225.313 986.253,224.621 986.822,224.772 987.39,222.884 987.959,224.523 988.527,224.795 989.095,224.201 989.664,223.686 990.232,224.18 990.8,225.672 991.369,226.17 991.937,227.626 992.505,228.781 993.074,229.836 993.642,229.851 994.21,228.996 994.779,230.252 995.347,229.059 995.915,230.053 996.484,228.009 997.052,226.236 997.62,224.452 998.189,223.958 998.757,224.608 999.325,227.21 999.894,227.517 1000.46,227.833 1001.03,227.117 1001.6,226.243 1002.17,225.698 1002.74,225.069 1003.3,226.682 1003.87,227.332 1004.44,226.465 1005.01,227.944 1005.58,228.152 1006.15,228.547 1006.71,228.933 1007.28,230.25 1007.85,231.435 1008.42,231.796 1008.99,231.659 1009.56,232.744 1010.12,234.876 1010.69,235.643 1011.26,237.544 1011.83,235.224 1012.4,237.132 1012.97,234.8 1013.53,234.409 1014.1,234.276 1014.67,237.367 1015.24,236.054 1015.81,233.93 1016.38,233.539 1016.94,232.356 1017.51,234.408 1018.08,234.178 1018.65,233.087 1019.22,232.748 1019.79,231.476 1020.35,231.443 1020.92,232.623 1021.49,231.65 1022.06,232.641 1022.63,232.555 1023.2,233.839 1023.76,234.556 1024.33,234.255 1024.9,231.948 1025.47,232.197 1026.04,231.224 1026.61,231.161 1027.17,229.239 1027.74,229.291 1028.31,228.385 1028.88,229.749 1029.45,226.751 1030.02,229.297 1030.58,230.518 1031.15,229.641 1031.72,227.551 1032.29,226.736 1032.86,226.264 1033.43,224.786 1033.99,225.033 1034.56,226.71 1035.13,227.179 1035.7,227.613 1036.27,229.889 1036.84,230.127 1037.4,230.322 1037.97,231.652 1038.54,232.974 1039.11,232.917 1039.68,233.984 1040.25,233.814 1040.81,232.703 1041.38,235.733 1041.95,235.497 1042.52,234.095 1043.09,232.94 1043.66,231.76 1044.22,230.02 1044.79,231.314 1045.36,232.444 1045.93,231.335 1046.5,232.609 1047.07,234.549 1047.63,235.646 1048.2,235.462 1048.77,237.31 1049.34,235.934 1049.91,238.763 1050.48,238.223 1051.05,237.903 1051.61,236.24 1052.18,237.166 1052.75,236.962 1053.32,238.701 1053.89,239.418 1054.46,237.852 1055.02,240.703 1055.59,238.795 1056.16,236.983 1056.73,235.488 1057.3,235.362 1057.87,235.077 1058.43,233.71 1059,234.578 1059.57,236.547 1060.14,235.19 1060.71,234.859 1061.28,232.445 1061.84,234.52 1062.41,234.355 1062.98,232.875 1063.55,232.75 1064.12,232.6 1064.69,231.366 1065.25,232.421 1065.82,233.317 1066.39,231.199 1066.96,231.295 1067.53,232.356 1068.1,232.419 1068.66,231.416 1069.23,231.227 1069.8,231.168 1070.37,229.211 1070.94,227.088 1071.51,227.447 1072.07,228.812 1072.64,227.026 1073.21,227.354 1073.78,228.723 1074.35,228.64 1074.92,226.725 1075.48,225.015 1076.05,226.477 1076.62,226.852 1077.19,228.168 1077.76,227.346 1078.33,225.78 1078.89,226.147 1079.46,227.557 1080.03,227.96 1080.6,225.131 1081.17,225.754 1081.74,227.235 1082.3,226.78 1082.87,226.111 1083.44,225.621 1084.01,225.126 1084.58,227.729 1085.15,229.306 1085.71,231.646 1086.28,231.627 1086.85,233.719 1087.42,234.369 1087.99,233.362 1088.56,234.471 1089.12,233.396 1089.69,232.337 1090.26,231.21 1090.83,232.278 1091.4,230.379 1091.97,229.496 1092.53,230.51 1093.1,230.631 1093.67,231.801 1094.24,230.783 1094.81,229.99 1095.38,229.054 1095.94,228.073 1096.51,229.38 1097.08,228.279 1097.65,225.631 1098.22,226.329 1098.79,226.775 1099.35,227.348 1099.92,226.791 1100.49,228.048 1101.06,229.374 1101.63,230.453 1102.2,229.81 1102.76,231.074 1103.33,231.999 1103.9,234.055 1104.47,236.342 1105.04,235.177 1105.61,235.049 1106.17,234.033 1106.74,234.009 1107.31,236.066 1107.88,235.984 1108.45,238.166 1109.02,235.672 1109.58,235.612 1110.15,235.284 1110.72,236.143 1111.29,237.86 1111.86,237.542 1112.43,236.143 1112.99,236.938 1113.56,236.563 1114.13,236.139 1114.7,236.808 1115.27,236.609 1115.84,233.345 1116.4,232.001 1116.97,233.101 1117.54,232.045 1118.11,230.132 1118.68,230.168 1119.25,231.408 1119.81,230.435 1120.38,230.394 1120.95,230.593 1121.52,230.921 1122.09,229.721 1122.66,231.043 1123.23,230.083 1123.79,228.162 1124.36,228.689 1124.93,230.097 1125.5,232.439 1126.07,233.315 1126.64,233.323 1127.2,235.387 1127.77,233.22 1128.34,234.259 1128.91,232.765 1129.48,233.628 1130.05,234.653 1130.61,234.416 1131.18,234.378 1131.75,233.315 1132.32,233.5 1132.89,229.377 1133.46,231.581 1134.02,229.617 1134.59,228.662 1135.16,228.052 1135.73,227.419 1136.3,229.665 1136.87,229.853 1137.43,231.035 1138,233.13 1138.57,232.015 1139.14,234.014 1139.71,234.958 1140.28,235.937 1140.84,234.646 1141.41,233.263 1141.98,235.317 1142.55,233 1143.12,232.842 1143.69,233.031 1144.25,231.862 1144.82,229.721 1145.39,226.63 1145.96,227.873 1146.53,228.148 1147.1,231.53 1147.66,233.504 1148.23,232.397 1148.8,231.428 1149.37,231.43 1149.94,230.507 1150.51,226.472 1151.07,227.919 1151.64,227.441 1152.21,227.786 1152.78,227.049 1153.35,229.232 1153.92,229.604 1154.48,231.864 1155.05,230.924 1155.62,231.085 1156.19,231.316 1156.76,231.242 1157.33,232.387 1157.89,232.666 1158.46,232.672 1159.03,232.92 1159.6,233.031 1160.17,235.032 1160.74,235.962 1161.3,234.621 1161.87,235.267 1162.44,234.995 1163.01,234.638 1163.58,233.62 1164.15,234.628 1164.71,237.583 1165.28,236.181 1165.85,235.948 1166.42,236.635 1166.99,235.511 1167.56,234.509 1168.12,232.445 1168.69,231.433 1169.26,230.459 1169.83,231.335 1170.4,233.213 1170.97,234.335 1171.53,234.289 1172.1,235.089 1172.67,234.789 1173.24,236.657 1173.81,234.963 1174.38,234.691 1174.94,234.552 1175.51,234.347 1176.08,234.967 1176.65,232.85 1177.22,234.864 1177.79,234.784 1178.35,234.495 1178.92,235.533 1179.49,235.297 1180.06,234.049 1180.63,233.879 1181.2,230.737 1181.76,230.826 1182.33,230.711 1182.9,230.736 1183.47,230.633 1184.04,230.724 1184.61,230.652 1185.17,228.288 1185.74,227.335 1186.31,227.535 1186.88,228.678 1187.45,229.894 1188.02,228.897 1188.58,228.241 1189.15,229.276 1189.72,226.554 1190.29,228.074 1190.86,228.191 1191.43,229.425 1192,227.349 1192.56,228.452 1193.13,227.484 1193.7,227.766 1194.27,225.274 1194.84,226.707 1195.41,228.149 1195.97,230.517 1196.54,231.629 1197.11,232.911 1197.68,233.865 1198.25,230.623 1198.82,230.744 1199.38,231.083 1199.95,231.307 1200.52,231.262 1201.09,230.007 1201.66,230.194 1202.23,230.441 1202.79,232.781 1203.36,234.83 1203.93,234.545 1204.5,235.481 1205.07,235.097 1205.64,233.574 1206.2,230.352 1206.77,230.423 1207.34,228.356 1207.91,229.721 1208.48,228.795 1209.05,228.01 1209.61,230.341 1210.18,231.628 1210.75,229.825 1211.32,231.918 1211.89,229.857 1212.46,231.105 1213.02,233.346 1213.59,234.232 1214.16,235.192 1214.73,235.855 1215.3,234.564 1215.87,234.558 1216.43,236.546 1217,236.995 1217.57,234.626 1218.14,237.696 1218.71,237.391 1219.28,236.033 1219.84,238.735 1220.41,238.321 1220.98,235.569 1221.55,231.389 1222.12,231.379 1222.69,232.357 1223.25,233.248 1223.82,233.245 1224.39,232.917 1224.96,230.722 1225.53,232.823 1226.1,232.61 1226.66,233.665 1227.23,232.565 1227.8,233.505 1228.37,233.437 1228.94,234.069 1229.51,233.937 1230.07,234.017 1230.64,233.811 1231.21,233.753 1231.78,231.508 1232.35,233.501 1232.92,233.165 1233.48,232.294 1234.05,232.168 1234.62,233.124 1235.19,231.167 1235.76,231.119 1236.33,230.003 1236.89,232.184 1237.46,231.206 1238.03,229.317 1238.6,231.684 1239.17,231.818 1239.74,232.952 1240.3,232.819 1240.87,232.778 1241.44,231.543 1242.01,229.513 1242.58,230.822 1243.15,231.88 1243.71,231.835 1244.28,232.829 1244.85,233.693 1245.42,232.562 1245.99,232.686 1246.56,232.692 1247.12,231.686 1247.69,231.7 1248.26,233.841 1248.83,232.498 1249.4,231.211 1249.97,232.209 1250.53,232.141 1251.1,232.204 1251.67,229.921 1252.24,231.091 1252.81,229.005 1253.38,229.206 1253.94,231.403 1254.51,231.442 1255.08,231.599 1255.65,231.789 1256.22,231.833 1256.79,232.928 1257.35,231.652 1257.92,230.479 1258.49,231.672 1259.06,230.566 1259.63,231.565 1260.2,232.418 1260.76,231.398 1261.33,232.512 1261.9,232.324 1262.47,232.199 1263.04,230.069 1263.61,229.174 1264.18,230.571 1264.74,231.65 1265.31,229.678 1265.88,230.862 1266.45,232.974 1267.02,233.766 1267.59,235.765 1268.15,234.287 1268.72,235.128 1269.29,235.069 1269.86,234.769 1270.43,234.496 1271,232.142 1271.56,229.932 1272.13,231.03 1272.7,230.057 1273.27,230.206 1273.84,230.433 1274.41,230.663 1274.97,233.558 1275.54,231.148 1276.11,233.18 1276.68,234.128 1277.25,233.185 1277.82,231.097 1278.38,233.244 1278.95,232.35 1279.52,233.134 1280.09,232.094 1280.66,234.054 1281.23,233.836 1281.79,232.387 1282.36,231.424 1282.93,231.511 1283.5,232.304 1284.07,231.197 1284.64,230.255 1285.2,230.231 1285.77,230.432 1286.34,231.764 1286.91,231.6 1287.48,230.521 1288.05,228.568 1288.61,229.822 1289.18,231.027 1289.75,231.944 1290.32,233.916 1290.89,232.884 1291.46,230.906 1292.02,230.992 1292.59,229.139 1293.16,229.399 1293.73,227.571 1294.3,228.837 1294.87,228.892 1295.43,230.265 1296,232.533 1296.57,230.438 1297.14,230.666 1297.71,232.728 1298.28,232.407 1298.84,229.287 1299.41,228.511 1299.98,227.776 1300.55,229.12 1301.12,228.209 1301.69,229.429 1302.25,230.547 1302.82,231.597 1303.39,231.466 1303.96,230.323 1304.53,229.606 1305.1,229.809 1305.66,230.014 1306.23,230.244 1306.8,229.27 1307.37,228.675 1307.94,227.124 1308.51,226.397 1309.07,227.926 1309.64,229.291 1310.21,229.461 1310.78,229.78 1311.35,230.146 1311.92,231.436 1312.48,229.543 1313.05,229.638 1313.62,229.783 1314.19,228.117 1314.76,230.219 1315.33,228.278 1315.89,230.692 1316.46,231.079 1317.03,231.202 1317.6,232.311 1318.17,232.245 1318.74,231.384 1319.3,232.507 1319.87,231.519 1320.44,232.658 1321.01,235.631 1321.58,237.413 1322.15,239.24 1322.71,238.647 1323.28,236.378 1323.85,232.985 1324.42,231.782 1324.99,231.899 1325.56,232.14 1326.12,232.155 1326.69,232.309 1327.26,234.435 1327.83,234.389 1328.4,234.363 1328.97,233.35 1329.53,234.134 1330.1,234.098 1330.67,235.206 1331.24,233.835 1331.81,234.481 1332.38,233.188 1332.94,232.248 1333.51,228.105 1334.08,228.335 1334.65,228.562 1335.22,228.81 1335.79,232.227 1336.36,230.108 1336.92,232.095 1337.49,231.405 1338.06,231.585 1338.63,231.547 1339.2,229.243 1339.77,231.37 1340.33,231.203 1340.9,232.432 1341.47,231.289 1342.04,232.183 1342.61,232.067 1343.18,232.14 1343.74,232.205 1344.31,231.209 1344.88,232.452 1345.45,230.552 1346.02,232.771 1346.59,235.735 1347.15,236.469 1347.72,236.162 1348.29,236.889 1348.86,236.635 1349.43,235.414 1350,233.236 1350.56,233.146 1351.13,229.854 1351.7,230.898 1352.27,231.017 1352.84,230.109 1353.41,229.502 1353.97,232.689 1354.54,234.755 1355.11,234.578 1355.68,233.391 1356.25,232.268 1356.82,233.204 1357.38,232.113 1357.95,233.188 1358.52,232.133 1359.09,233.15 1359.66,233.114 1360.23,237.799 1360.79,235.241 1361.36,235.067 1361.93,232.597 1362.5,232.436 1363.07,228.442 1363.64,226.62 1364.2,227.797 1364.77,228.076 1365.34,227.256 1365.91,226.342 1366.48,226.814 1367.05,227.363 1367.61,228.74 1368.18,227.903 1368.75,227.202 1369.32,230.599 1369.89,232.732 1370.46,232.568 1371.02,232.585 1371.59,231.538 1372.16,232.559 1372.73,232.587 1373.3,232.651 1373.87,234.766 1374.43,234.584 1375,234.373 1375.57,233.376 1376.14,231.165 1376.71,232.248 1377.28,234.451 1377.84,233.4 1378.41,233.476 1378.98,232.396 1379.55,233.335 1380.12,232.406 1380.69,231.372 1381.25,232.354 1381.82,231.384 1382.39,231.39 1382.96,230.362 1383.53,231.415 1384.1,230.377 1384.66,231.604 1385.23,231.652 1385.8,234.647 1386.37,233.303 1386.94,232.486 1387.51,232.401 1388.07,233.354 1388.64,234.435 1389.21,234.257 1389.78,234.142 1390.35,233.043 1390.92,233.861 1391.48,233.559 1392.05,231.324 1392.62,230.543 1393.19,230.725 1393.76,229.667 1394.33,229.893 1394.89,230.005 1395.46,230.219 1396.03,227.474 1396.6,229.053 1397.17,228.099 1397.74,228.295 1398.3,227.827 1398.87,228.322 1399.44,229.751 1400.01,233.129 1400.58,234.228 1401.15,235.33 1401.71,234.102 1402.28,233.949 1402.85,233.612 1403.42,234.564 1403.99,232.368 1404.56,233.63 1405.13,233.653 1405.69,233.83 1406.26,236.722 1406.83,236.246 1407.4,236.857 1407.97,235.325 1408.54,235.105 1409.1,235.752 1409.67,233.263 1410.24,234.12 1410.81,232.91 1411.38,234.707 1411.95,233.439 1412.51,234.501 1413.08,234.235 1413.65,234.012 1414.22,232.849 1414.79,231.669 1415.36,231.502 1415.92,233.744 1416.49,231.614 1417.06,230.608 1417.63,230.73 1418.2,229.788 1418.77,230.06 1419.33,232.116 1419.9,233.368 1420.47,233.36 1421.04,232.027 1421.61,229.912 1422.18,229.91 1422.74,229.009 1423.31,229.258 1423.88,229.338 1424.45,229.028 1425.02,230.344 1425.59,231.441 1426.15,231.401 1426.72,230.168 1427.29,231.344 1427.86,231.283 1428.43,231.468 1429,231.409 1429.56,231.347 1430.13,232.345 1430.7,232.245 1431.27,232.43 1431.84,231.307 1432.41,229.406 1432.97,230.564 1433.54,230.847 1434.11,231.096 1434.68,229.17 1435.25,229.356 1435.82,228.503 1436.38,227.688 1436.95,227.825 1437.52,229.31 1438.09,228.561 1438.66,228.869 1439.23,230.068 1439.79,232.172 1440.36,233.258 1440.93,235.206 1441.5,234.935 1442.07,232.428 1442.64,233.421 1443.2,234.531 1443.77,234.188 1444.34,233.157 1444.91,233.98 1445.48,236.057 1446.05,235.618 1446.61,237.202 1447.18,236.791 1447.75,235.196 1448.32,235.644 1448.89,236.734 1449.46,235.349 1450.02,234.092 1450.59,235.088 1451.16,234.825 1451.73,234.511 1452.3,233.222 1452.87,234.021 1453.43,233.631 1454,234.316 1454.57,233.194 1455.14,234.157 1455.71,236.004 1456.28,235.543 1456.84,237.194 1457.41,237.783 1457.98,236.422 1458.55,235.93 1459.12,235.515 1459.69,234.441 1460.25,235.105 1460.82,235.907 1461.39,236.727 1461.96,234.212 1462.53,232.99 1463.1,231.794 1463.66,229.539 1464.23,229.38 1464.8,229.451 1465.37,230.434 1465.94,229.527 1466.51,230.618 1467.07,230.792 1467.64,231.669 1468.21,232.552 1468.78,231.207 1469.35,229.959 1469.92,231.127 1470.48,230.252 1471.05,230.141 1471.62,229.217 1472.19,230.37 1472.76,227.394 1473.33,226.569 1473.89,227.993 1474.46,228.114 1475.03,227.284 1475.6,225.573 1476.17,224.882 1476.74,224.363 1477.31,224.687 1477.87,225.229 1478.44,226.547 1479.01,229.933 1479.58,229.911 1480.15,230.998 1480.72,230.217 1481.28,230.46 1481.85,229.643 1482.42,230.863 1482.99,231.89 1483.56,234.013 1484.13,233.977 1484.69,234.683 1485.26,233.49 1485.83,233.325 1486.4,233.064 1486.97,230.698 1487.54,230.802 1488.1,231.811 1488.67,232.831 1489.24,234.844 1489.81,232.7 1490.38,233.615 1490.95,233.334 1491.51,234.334 1492.08,234.074 1492.65,233.758 1493.22,233.456 1493.79,232.252 1494.36,231.93 1494.92,231.839 1495.49,232.815 1496.06,234.832 1496.63,234.513 1497.2,232.119 1497.77,232.184 1498.33,234.182 1498.9,234.174 1499.47,235.613 1500.04,236.395 1500.61,233.961 1501.18,235.893 1501.74,235.318 1502.31,233.854 1502.88,231.794 1503.45,228.688 1504.02,231.008 1504.59,229.965 1505.15,231.205 1505.72,231.218 1506.29,227.943 1506.86,227.18 1507.43,227.499 1508,226.632 1508.56,227.002 1509.13,227.222 1509.7,228.52 1510.27,227.788 1510.84,226.777 1511.41,226.107 1511.97,225.418 1512.54,222.758 1513.11,224.446 1513.68,223.795 1514.25,227.341 1514.82,225.77 1515.38,225.23 1515.95,224.592 1516.52,225.258 1517.09,225.811 1517.66,222.39 1518.23,223.011 1518.79,224.914 1519.36,227.443 1519.93,228.023 1520.5,230.347 1521.07,227.434 1521.64,229.722 1522.2,231.944 1522.77,231.156 1523.34,232.399 1523.91,230.633 1524.48,228.741 1525.05,229.328 1525.61,228.851 1526.18,226.284 1526.75,228.875 1527.32,228.264 1527.89,227.509 1528.46,226.997 1529.02,227.653 1529.59,229.231 1530.16,227.383 1530.73,227.844 1531.3,229.224 1531.87,229.586 1532.43,228.854 1533,228.083 1533.57,229.608 1534.14,229.761 1534.71,232.255 1535.28,232.573 1535.84,233.568 1536.41,233.596 1536.98,234.659 1537.55,233.562 1538.12,234.814 1538.69,233.661 1539.25,235.932 1539.82,233.882 1540.39,232.858 1540.96,232.974 1541.53,233.197 1542.1,233.419 1542.66,233.478 1543.23,234.399 1543.8,233.376 1544.37,232.339 1544.94,232.652 1545.51,234.945 1546.08,237.022 1546.64,234.761 1547.21,234.866 1547.78,235.896 1548.35,237.854 1548.92,238.547 1549.49,239.081 1550.05,238.644 1550.62,237.398 1551.19,237.114 1551.76,236.883 1552.33,235.774 1552.9,237.468 1553.46,237.966 1554.03,238.62 1554.6,237.187 1555.17,235.909 1555.74,235.686 1556.31,236.226 1556.87,235.159 1557.44,234.842 1558.01,237.791 1558.58,238.536 1559.15,239.992 1559.72,238.401 1560.28,239.104 1560.85,238.511 1561.42,239.234 1561.99,238.685 1562.56,238.355 1563.13,239.161 1563.69,238.801 1564.26,237.206 1564.83,234.562 1565.4,234.382 1565.97,234.071 1566.54,232.702 1567.1,234.55 1567.67,236.257 1568.24,234.586 1568.81,231.234 1569.38,231.329 1569.95,232.472 1570.51,229.164 1571.08,228.207 1571.65,228.455 1572.22,228.621 1572.79,230.739 1573.36,230.889 1573.92,230.699 1574.49,230.524 1575.06,231.511 1575.63,232.658 1576.2,231.39 1576.77,229.291 1577.33,227.332 1577.9,228.753 1578.47,226.998 1579.04,228.395 1579.61,230.601 1580.18,231.825 1580.74,230.677 1581.31,229.61 1581.88,230.727 1582.45,231.858 1583.02,230.639 1583.59,233.654 1584.15,234.429 1584.72,234.102 1585.29,235.823 1585.86,235.517 1586.43,234.35 1587,236.176 1587.56,233.908 1588.13,233.445 1588.7,233.252 1589.27,233.142 1589.84,232.864 1590.41,232.786 1590.97,232.45 1591.54,232.243 1592.11,232.136 1592.68,232.185 1593.25,231.388 1593.82,231.159 1594.38,230.134 1594.95,232.319 1595.52,232.106 1596.09,232.133 1596.66,232.036 1597.23,234.071 1597.79,234.998 1598.36,232.753 1598.93,232.688 1599.5,231.407 1600.07,231.396 1600.64,230.481 1601.2,229.264 1601.77,229.345 1602.34,229.399 1602.91,228.535 1603.48,225.628 1604.05,226.204 1604.61,228.624 1605.18,228.769 1605.75,228.782 1606.32,230.106 1606.89,232.142 1607.46,234.235 1608.02,233.038 1608.59,234.021 1609.16,233.754 1609.73,232.42 1610.3,230.443 1610.87,232.518 1611.43,231.314 1612,230.328 1612.57,230.268 1613.14,231.582 1613.71,233.732 1614.28,233.42 1614.84,233.445 1615.41,231.103 1615.98,232.432 1616.55,229.403 1617.12,229.608 1617.69,230.563 1618.26,230.537 1618.82,230.63 1619.39,229.595 1619.96,230.684 1620.53,229.646 1621.1,232.766 1621.67,232.641 1622.23,231.707 1622.8,230.755 1623.37,229.819 1623.94,232.221 1624.51,230.931 1625.08,230.856 1625.64,229.979 1626.21,229.854 1626.78,230.089 1627.35,231.154 1627.92,231.304 1628.49,228.305 1629.05,230.506 1629.62,232.776 1630.19,231.786 1630.76,234.014 1631.33,236.899 1631.9,237.483 1632.46,235.157 1633.03,235.948 1633.6,235.705 1634.17,237.495 1634.74,235.93 1635.31,235.69 1635.87,234.181 1636.44,234.062 1637.01,232.664 1637.58,232.543 1638.15,232.518 1638.72,229.351 1639.28,229.637 1639.85,229.862 1640.42,228.802 1640.99,229.045 1641.56,227.205 1642.13,225.451 1642.69,226.749 1643.26,226.16 1643.83,228.466 1644.4,228.716 1644.97,229.047 1645.54,229.341 1646.1,227.398 1646.67,222.301 1647.24,221.976 1647.81,223.687 1648.38,226.429 1648.95,227.94 1649.51,229.312 1650.08,230.315 1650.65,228.549 1651.22,229.806 1651.79,232.096 1652.36,232.047 1652.92,231.14 1653.49,229.39 1654.06,228.722 1654.63,228.211 1655.2,227.472 1655.77,228.108 1656.33,228.361 1656.9,225.532 1657.47,227.104 1658.04,227.389 1658.61,226.927 1659.18,227.474 1659.74,227.023 1660.31,226.405 1660.88,228.052 1661.45,228.542 1662.02,233.123 1662.59,235.105 1663.15,235.041 1663.72,233.074 1664.29,234.226 1664.86,235.324 1665.43,236.435 1666,236.075 1666.56,236.044 1667.13,237.931 1667.7,236.195 1668.27,236.077 1668.84,234.783 1669.41,235.776 1669.97,233.632 1670.54,234.484 1671.11,234.009 1671.68,233.932 1672.25,234.731 1672.82,237.441 1673.38,236.772 1673.95,237.54 1674.52,235.086 1675.09,234.886 1675.66,239.866 1676.23,238.293 1676.79,236.809 1677.36,235.577 1677.93,235.476 1678.5,235.368 1679.07,236.273 1679.64,234.819 1680.2,232.49 1680.77,232.408 1681.34,232.453 1681.91,234.28 1682.48,233.877 1683.05,233.801 1683.61,234.641 1684.18,234.541 1684.75,234.392 1685.32,233.136 1685.89,231.956 1686.46,231.021 1687.02,229.8 1687.59,231.014 1688.16,231.114 1688.73,229.885 1689.3,224.704 1689.87,226.28 1690.44,226.507 1691,228.894 1691.57,228.058 1692.14,226.258 1692.71,228.548 1693.28,228.019 1693.85,227.433 1694.41,228.86 1694.98,229.167 1695.55,230.219 1696.12,228.338 1696.69,227.613 1697.26,226.936 1697.82,227.574 1698.39,226.819 1698.96,229.323 1699.53,230.379 1700.1,230.675 1700.67,231.847 1701.23,233.892 1701.8,236.083 1702.37,236.936 1702.94,236.675 1703.51,234.349 1704.08,231.215 1704.64,231.14 1705.21,230.14 1705.78,233.232 1706.35,234.287 1706.92,236.074 1707.49,235.731 1708.05,234.304 1708.62,233.133 1709.19,232.987 1709.76,233.074 1710.33,229.825 1710.9,232.129 1711.46,232.177 1712.03,233.147 1712.6,232.091 1713.17,228.958 1713.74,229.341 1714.31,231.457 1714.87,231.428 1715.44,231.258 1716.01,232.308 1716.58,232.461 1717.15,229.31 1717.72,229.448 1718.28,231.728 1718.85,233.865 1719.42,234.328 1719.99,232.281 1720.56,231.898 1721.13,230.871 1721.69,229.762 1722.26,230.139 1722.83,232.449 1723.4,233.605 1723.97,232.412 1724.54,230.65 1725.1,231.945 1725.67,234.082 1726.24,233.912 1726.81,233.828 1727.38,234.679 1727.95,233.439 1728.51,232.354 1729.08,232.272 1729.65,232.197 1730.22,232.265 1730.79,230.676 1731.36,231.443 1731.92,231.352 1732.49,230.337 1733.06,230.454 1733.63,228.271 1734.2,228.57 1734.77,231.92 1735.33,232.182 1735.9,231.223 1736.47,234.51 1737.04,234.464 1737.61,234.283 1738.18,235.17 1738.74,234.912 1739.31,235.815 1739.88,233.703 1740.45,233.734 1741.02,233.7 1741.59,232.328 1742.15,234.398 1742.72,235.281 1743.29,236.182 1743.86,233.814 1744.43,232.667 1745,231.702 1745.56,231.528 1746.13,232.672 1746.7,230.856 1747.27,228.935 1747.84,229.394 1748.41,230.494 1748.97,229.385 1749.54,229.365 1750.11,231.42 1750.68,229.214 1751.25,229.372 1751.82,229.611 1752.38,229.785 1752.95,229.777 1753.52,231.791 1754.09,231.941 1754.66,230.881 1755.23,229.944 1755.79,230.051 1756.36,231.031 1756.93,231.455 1757.5,231.67 1758.07,232.551 1758.64,233.548 1759.21,234.608 1759.77,236.462 1760.34,235.902 1760.91,239.527 1761.48,241.023 1762.05,239.03 1762.62,238.522 1763.18,238.106 1763.75,236.41 1764.32,236.012 1764.89,234.674 1765.46,235.437 1766.03,234.251 1766.59,232.204 1767.16,230.191 1767.73,230.128 1768.3,229.345 1768.87,228.442 1769.44,227.663 1770,230.055 1770.57,230.386 1771.14,230.411 1771.71,232.604 1772.28,232.358 1772.85,235.361 1773.41,234.153 1773.98,232.864 1774.55,233.553 1775.12,231.28 1775.69,231.197 1776.26,231.146 1776.82,229.062 1777.39,229.141 1777.96,231.202 1778.53,229.139 1779.1,228.254 1779.67,229.245 1780.23,228.389 1780.8,227.672 1781.37,226.105 1781.94,230.546 1782.51,230.59 1783.08,230.822 1783.64,231.043 1784.21,231.998 1784.78,232.112 1785.35,232.009 1785.92,233.114 1786.49,235.453 1787.05,234.005 1787.62,233.959 1788.19,235.824 1788.76,234.465 1789.33,233.257 1789.9,237.225 1790.46,237.041 1791.03,236.761 1791.6,238.344 1792.17,236.767 1792.74,234.661 1793.31,235.498 1793.87,233.194 1794.44,237.218 1795.01,234.361 1795.58,233.955 1796.15,233.891 1796.72,234.667 1797.28,234.503 1797.85,235.285 1798.42,233.875 1798.99,234.641 1799.56,237.284 1800.13,235.54 1800.69,235.046 1801.26,233.017 1801.83,231.909 1802.4,228.628 1802.97,228.599 1803.54,228.521 1804.1,229.727 1804.67,233.647 1805.24,234.472 1805.81,235.185 1806.38,232.883 1806.95,232.738 1807.51,231.468 1808.08,232.294 1808.65,232.357 1809.22,232.222 1809.79,231.989 1810.36,233.002 1810.92,233.97 1811.49,232.686 1812.06,232.462 1812.63,232.16 1813.2,231.988 1813.77,230.786 1814.33,229.721 1814.9,229.664 1815.47,229.803 1816.04,229.912 1816.61,230.15 1817.18,231.178 1817.74,231.217 1818.31,232.082 1818.88,231.729 1819.45,228.478 1820.02,229.662 1820.59,229.822 1821.15,227.868 1821.72,226.917 1822.29,227.273 1822.86,226.471 1823.43,226.908 1824,224.111 1824.56,223.595 1825.13,222.152 1825.7,223.929 1826.27,225.691 1826.84,226.132 1827.41,223.303 1827.97,224.766 1828.54,224.295 1829.11,223.648 1829.68,225.275 1830.25,225.631 1830.82,227.082 1831.39,225.452 1831.95,230.037 1832.52,229.371 1833.09,228.622 1833.66,227.809 1834.23,229.165 1834.8,230.451 1835.36,232.625 1835.93,231.508 1836.5,233.574 1837.07,235.692 1837.64,235.434 1838.21,236.521 1838.77,234.286 1839.34,233.129 1839.91,230.89 1840.48,231.96 1841.05,232.093 1841.62,233.26 1842.18,234.212 1842.75,234.27 1843.32,234.458 1843.89,234.278 1844.46,235.086 1845.03,234.053 1845.59,233.923 1846.16,235.061 1846.73,233.694 1847.3,233.72 1847.87,235.562 1848.44,237.498 1849,238.026 1849.57,236.56 1850.14,234.297 1850.71,232.914 1851.28,231.55 1851.85,229.871 1852.41,227.796 1852.98,227.07 1853.55,225.439 1854.12,225.885 1854.69,226.376 1855.26,227.938 1855.82,228.323 1856.39,231.621 1856.96,232.624 1857.53,234.587 1858.1,231.252 1858.67,232.361 1859.23,229.175 1859.8,231.433 1860.37,230.602 1860.94,231.764 1861.51,232.817 1862.08,233.668 1862.64,234.614 1863.21,234.374 1863.78,234.365 1864.35,234.122 1864.92,235.064 1865.49,234.664 1866.05,235.652 1866.62,234.358 1867.19,235.335 1867.76,235.14 1868.33,236.931 1868.9,234.257 1869.46,235.17 1870.03,234.057 1870.6,234.094 1871.17,234.111 1871.74,234.978 1872.31,233.627 1872.87,233.481 1873.44,233.497 1874.01,233.56 1874.58,232.482 1875.15,232.396 1875.72,231.25 1876.28,231.07 1876.85,229.13 1877.42,227.209 1877.99,229.885 1878.56,230.099 1879.13,230.365 1879.69,228.638 1880.26,228.982 1880.83,230.072 1881.4,229.402 1881.97,229.367 1882.54,230.462 1883.1,231.445 1883.67,228.721 1884.24,229.909 1884.81,228.086 1885.38,230.477 1885.95,230.652 1886.51,231.876 1887.08,230.851 1887.65,232.923 1888.22,230.786 1888.79,232.046 1889.36,230.946 1889.92,230.033 1890.49,230.096 1891.06,231.316 1891.63,230.301 1892.2,228.484 1892.77,226.586 1893.33,230.284 1893.9,229.227 1894.47,230.301 1895.04,230.419 1895.61,230.423 1896.18,229.45 1896.74,230.684 1897.31,229.718 1897.88,228.878 1898.45,232.353 1899.02,233.187 1899.59,236.166 1900.16,235.864 1900.72,234.621 1901.29,235.494 1901.86,234.233 1902.43,234.069 1903,236.076 1903.57,236.693 1904.13,237.532 1904.7,237.042 1905.27,235.782 1905.84,231.433 1906.41,230.411 1906.98,229.597 1907.54,230.858 1908.11,230.776 1908.68,231.869 1909.25,232.998 1909.82,232.867 1910.39,232.841 1910.95,232.617 1911.52,233.552 1912.09,233.305 1912.66,234.11 1913.23,233.101 1913.8,232.187 1914.36,232.139 1914.93,234.161 1915.5,234.88 1916.07,232.493 1916.64,232.393 1917.21,231.463 1917.77,233.501 1918.34,234.354 1918.91,232.968 1919.48,233.829 1920.05,230.489 1920.62,231.391 1921.18,231.117 1921.75,231.075 1922.32,232.135 1922.89,235.358 1923.46,235.318 1924.03,235.083 1924.59,233.761 1925.16,233.003 1925.73,230.787 1926.3,230.766 1926.87,230.824 1927.44,232.931 1928,230.645 1928.57,231.67 1929.14,229.711 1929.71,229.616 1930.28,225.461 1930.85,225.978 1931.41,226.106 1931.98,226.666 1932.55,227.108 1933.12,229.628 1933.69,231.871 1934.26,231.906 1934.82,230.022 1935.39,230.103 1935.96,230.267 1936.53,230.358 1937.1,229.339 1937.67,230.675 1938.23,233.031 1938.8,232 1939.37,231.832 1939.94,230.901 1940.51,229.798 1941.08,228.914 1941.64,229.115 1942.21,228.457 1942.78,227.776 1943.35,227.002 1943.92,227.473 1944.49,225.874 1945.05,226.169 1945.62,226.82 1946.19,229.064 1946.76,231.449 1947.33,232.481 1947.9,233.405 1948.46,231.191 1949.03,229.269 1949.6,230.293 1950.17,229.353 1950.74,231.741 1951.31,233.015 1951.87,236.398 1952.44,239.292 1953.01,238.089 1953.58,237.851 1954.15,237.403 1954.72,239.027 1955.28,235.641 1955.85,236.35 1956.42,235.902 1956.99,236.699 1957.56,237.435 1958.13,238.058 1958.69,236.817 1959.26,235.29 1959.83,235.868 1960.4,234.55 1960.97,234.219 1961.54,234.981 1962.1,235.05 1962.67,233.787 1963.24,234.609 1963.81,234.326 1964.38,235.138 1964.95,235.68 1965.51,234.352 1966.08,236.184 1966.65,233.522 1967.22,230.432 1967.79,230.355 1968.36,232.716 1968.92,232.562 1969.49,232.196 1970.06,234.133 1970.63,233.133 1971.2,230.882 1971.77,232.112 1972.34,235.086 1972.9,231.737 1973.47,231.602 1974.04,232.395 1974.61,230.229 1975.18,230.143 1975.75,230.185 1976.31,231.256 1976.88,232.188 1977.45,230.901 1978.02,229.438 1978.59,230.448 1979.16,231.259 1979.72,231.319 1980.29,231.13 1980.86,230.949 1981.43,229.896 1982,231.053 1982.57,232.02 1983.13,233.107 1983.7,230.991 1984.27,232.045 1984.84,230.756 1985.41,230.707 1985.98,231.673 1986.54,231.766 1987.11,230.502 1987.68,234.739 1988.25,233.622 1988.82,231.338 1989.39,231.169 1989.95,234.393 1990.52,235.439 1991.09,237.496 1991.66,237.971 1992.23,238.723 1992.8,237.24 1993.36,236.934 1993.93,237.481 1994.5,236.925 1995.07,236.605 1995.64,235.19 1996.21,234.939 1996.77,235.541 1997.34,236.355 1997.91,236.84 1998.48,236.529 1999.05,235.106 1999.62,234.493 2000.18,233.26 2000.75,233.172 2001.32,232.834 2001.89,232.885 2002.46,230.507 2003.03,230.072 2003.59,230.145 2004.16,231.512 2004.73,229.478 2005.3,228.325 2005.87,228.32 2006.44,228.744 2007,231.083 2007.57,231.13 2008.14,230.823 2008.71,229.705 2009.28,228.437 2009.85,228.485 2010.41,226.628 2010.98,226.893 2011.55,226.091 2012.12,223.233 2012.69,221.72 2013.26,223.695 2013.82,223.043 2014.39,222.598 2014.96,225.473 2015.53,223.615 2016.1,223.007 2016.67,226.871 2017.23,228.279 2017.8,229.395 2018.37,228.588 2018.94,229.002 2019.51,229.203 2020.08,229.35 2020.64,231.75 2021.21,233.678 2021.78,234.453 2022.35,235.377 2022.92,233.855 2023.49,233.766 2024.05,233.6 2024.62,234.529 2025.19,233.452 2025.76,232.325 2026.33,231.199 2026.9,231.23 2027.46,231.122 2028.03,230.191 2028.6,230.577 2029.17,230.773 2029.74,228.821 2030.31,230.107 2030.87,231.178 2031.44,234.317 2032.01,236.359 2032.58,236.832 2033.15,237.542 2033.72,234.97 2034.28,232.671 2034.85,232.508 2035.42,232.476 2035.99,231.392 2036.56,232.323 2037.13,234.161 2037.69,232.947 2038.26,233.224 2038.83,233.291 2039.4,232.301 2039.97,231.304 2040.54,231.543 2041.11,232.34 2041.67,230.359 2042.24,230.411 2042.81,230.437 2043.38,230.59 2043.95,231.614 2044.52,229.426 2045.08,228.604 2045.65,223.618 2046.22,224.999 2046.79,222.539 2047.36,223.34 2047.93,227.192 2048.49,229.384 2049.06,229.481 2049.63,226.52 2050.2,229.195 2050.77,229.556 2051.34,229.724 2051.9,229.826 2052.47,229.192 2053.04,229.5 2053.61,231.653 2054.18,231.717 2054.75,230.794 2055.31,231.953 2055.88,231.931 2056.45,233.14 2057.02,234.061 2057.59,236.061 2058.16,235.977 2058.72,235.512 2059.29,235.389 2059.86,238.146 2060.43,235.626 2061,234.497 2061.57,235.407 2062.13,236.127 2062.7,235.776 2063.27,236.411 2063.84,235.167 2064.41,235.95 2064.98,236.622 2065.54,234.18 2066.11,239.039 2066.68,236.541 2067.25,235.313 2067.82,234.083 2068.39,233.919 2068.95,235.853 2069.52,234.521 2070.09,232.283 2070.66,233.313 2071.23,233.317 2071.8,232.066 2072.36,232.041 2072.93,231.022 2073.5,231.305 2074.07,230.374 2074.64,231.493 2075.21,232.459 2075.77,232.465 2076.34,231.328 2076.91,231.501 2077.48,231.519 2078.05,231.576 2078.62,229.518 2079.18,229.33 2079.75,230.373 2080.32,228.284 2080.89,228.417 2081.46,225.731 2082.03,229.306 2082.59,229.507 2083.16,227.327 2083.73,225.51 2084.3,227.15 2084.87,227.371 2085.44,228.543 2086,227.896 2086.57,226.104 2087.14,228.485 2087.71,226.67 2088.28,224.746 2088.85,224.338 2089.41,224.728 2089.98,227.235 2090.55,228.805 2091.12,228.026 2091.69,228.299 2092.26,230.699 2092.82,229.98 2093.39,231.088 2093.96,231.115 2094.53,230.443 2095.1,229.671 2095.67,229.936 2096.23,230.166 2096.8,229.161 2097.37,228.374 2097.94,228.704 2098.51,229.914 2099.08,229.104 2099.64,229.574 2100.21,229.838 2100.78,230.058 2101.35,229.408 2101.92,229.517 2102.49,230.196 2103.05,230.426 2103.62,230.616 2104.19,231.631 2104.76,232.721 2105.33,233.673 2105.9,233.542 2106.46,233.559 2107.03,233.686 2107.6,234.679 2108.17,235.465 2108.74,236.575 2109.31,237.128 2109.87,238.824 2110.44,239.562 2111.01,237.992 2111.58,237.761 2112.15,235.428 2112.72,234.983 2113.29,235.782 2113.85,234.48 2114.42,235.39 2114.99,233.193 2115.56,233.23 2116.13,233.186 2116.7,233.86 2117.26,233.931 2117.83,233.841 2118.4,234.711 2118.97,232.517 2119.54,235.558 2120.11,236.438 2120.67,236.168 2121.24,234.744 2121.81,233.552 2122.38,234.598 2122.95,232.443 2123.52,232.425 2124.08,233.198 2124.65,231.054 2125.22,232.119 2125.79,232.133 2126.36,234.15 2126.93,233.014 2127.49,232.978 2128.06,232.881 2128.63,232.725 2129.2,232.553 2129.77,230.529 2130.34,231.675 2130.9,231.559 2131.47,231.289 2132.04,231.263 2132.61,230.247 2133.18,230.58 2133.75,229.819 2134.31,229.904 2134.88,232.129 2135.45,231.986 2136.02,233.06 2136.59,234.971 2137.16,233.785 2137.72,232.477 2138.29,232.336 2138.86,231.255 2139.43,230.225 2140,230.295 2140.57,230.372 2141.13,232.506 2141.7,232.681 2142.27,230.544 2142.84,228.434 2143.41,229.569 2143.98,231.482 2144.54,230.661 2145.11,229.635 2145.68,230.685 2146.25,230.603 2146.82,228.685 2147.39,228.953 2147.95,230.153 2148.52,230.758 2149.09,230.892 2149.66,230.072 2150.23,230.324 2150.8,229.542 2151.36,229.929 2151.93,231.368 2152.5,229.421 2153.07,229.428 2153.64,227.809 2154.21,228.189 2154.77,229.476 2155.34,230.903 2155.91,232.172 2156.48,233.437 2157.05,230.288 2157.62,229.484 2158.18,227.562 2158.75,227.077 2159.32,227.823 2159.89,227.896 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.039 ± 0.021\n  with uncertainty of ± 0.00189562376259986\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01409 ± (0.00357154, 0.00340815) (MC)\n  95% confidence interval: [-4.02115, -4.007] (MC)\n  linear error propagation: -4.01484 ± 0.0035018\n  |δ_y| = |0.00296543| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014088185643784, val_l = 0.007065396865506557, val_u = 0.007090209633159539)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip460\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip461\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip460)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip462\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1156.95 2211.02,1156.95 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1014.82 2211.02,1014.82 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,872.687 2211.02,872.687 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,730.558 2211.02,730.558 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,588.429 2211.02,588.429 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,446.3 2211.02,446.3 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,304.171 2211.02,304.171 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1156.95 365.751,1156.95 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1014.82 365.751,1014.82 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,872.687 365.751,872.687 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,730.558 365.751,730.558 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,588.429 365.751,588.429 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,446.3 365.751,446.3 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,304.171 365.751,304.171 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M298.909 1142.74 Q295.298 1142.74 293.469 1146.31 Q291.664 1149.85 291.664 1156.98 Q291.664 1164.09 293.469 1167.65 Q295.298 1171.19 298.909 1171.19 Q302.543 1171.19 304.349 1167.65 Q306.177 1164.09 306.177 1156.98 Q306.177 1149.85 304.349 1146.31 Q302.543 1142.74 298.909 1142.74 M298.909 1139.04 Q304.719 1139.04 307.775 1143.65 Q310.853 1148.23 310.853 1156.98 Q310.853 1165.71 307.775 1170.31 Q304.719 1174.9 298.909 1174.9 Q293.099 1174.9 290.02 1170.31 Q286.964 1165.71 286.964 1156.98 Q286.964 1148.23 290.02 1143.65 Q293.099 1139.04 298.909 1139.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M259.557 1028.16 L267.196 1028.16 L267.196 1001.8 L258.886 1003.46 L258.886 999.203 L267.15 997.536 L271.826 997.536 L271.826 1028.16 L279.465 1028.16 L279.465 1032.1 L259.557 1032.1 L259.557 1028.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 1000.61 Q295.298 1000.61 293.469 1004.18 Q291.664 1007.72 291.664 1014.85 Q291.664 1021.96 293.469 1025.52 Q295.298 1029.06 298.909 1029.06 Q302.543 1029.06 304.349 1025.52 Q306.177 1021.96 306.177 1014.85 Q306.177 1007.72 304.349 1004.18 Q302.543 1000.61 298.909 1000.61 M298.909 996.911 Q304.719 996.911 307.775 1001.52 Q310.853 1006.1 310.853 1014.85 Q310.853 1023.58 307.775 1028.18 Q304.719 1032.77 298.909 1032.77 Q293.099 1032.77 290.02 1028.18 Q286.964 1023.58 286.964 1014.85 Q286.964 1006.1 290.02 1001.52 Q293.099 996.911 298.909 996.911 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M262.775 886.032 L279.094 886.032 L279.094 889.967 L257.15 889.967 L257.15 886.032 Q259.812 883.277 264.395 878.648 Q269.002 873.995 270.182 872.652 Q272.428 870.129 273.307 868.393 Q274.21 866.634 274.21 864.944 Q274.21 862.189 272.266 860.453 Q270.344 858.717 267.242 858.717 Q265.043 858.717 262.59 859.481 Q260.159 860.245 257.381 861.796 L257.381 857.074 Q260.205 855.939 262.659 855.361 Q265.113 854.782 267.15 854.782 Q272.52 854.782 275.715 857.467 Q278.909 860.152 278.909 864.643 Q278.909 866.773 278.099 868.694 Q277.312 870.592 275.205 873.185 Q274.627 873.856 271.525 877.074 Q268.423 880.268 262.775 886.032 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 858.486 Q295.298 858.486 293.469 862.05 Q291.664 865.592 291.664 872.722 Q291.664 879.828 293.469 883.393 Q295.298 886.935 298.909 886.935 Q302.543 886.935 304.349 883.393 Q306.177 879.828 306.177 872.722 Q306.177 865.592 304.349 862.05 Q302.543 858.486 298.909 858.486 M298.909 854.782 Q304.719 854.782 307.775 859.388 Q310.853 863.972 310.853 872.722 Q310.853 881.449 307.775 886.055 Q304.719 890.638 298.909 890.638 Q293.099 890.638 290.02 886.055 Q286.964 881.449 286.964 872.722 Q286.964 863.972 290.02 859.388 Q293.099 854.782 298.909 854.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M272.914 729.204 Q276.27 729.921 278.145 732.19 Q280.043 734.458 280.043 737.792 Q280.043 742.907 276.525 745.708 Q273.006 748.509 266.525 748.509 Q264.349 748.509 262.034 748.069 Q259.742 747.653 257.289 746.796 L257.289 742.282 Q259.233 743.417 261.548 743.995 Q263.863 744.574 266.386 744.574 Q270.784 744.574 273.076 742.838 Q275.39 741.102 275.39 737.792 Q275.39 734.736 273.238 733.023 Q271.108 731.287 267.289 731.287 L263.261 731.287 L263.261 727.444 L267.474 727.444 Q270.923 727.444 272.752 726.079 Q274.58 724.69 274.58 722.097 Q274.58 719.435 272.682 718.023 Q270.807 716.588 267.289 716.588 Q265.367 716.588 263.168 717.005 Q260.969 717.421 258.33 718.301 L258.33 714.134 Q260.992 713.394 263.307 713.023 Q265.645 712.653 267.705 712.653 Q273.029 712.653 276.131 715.083 Q279.233 717.491 279.233 721.611 Q279.233 724.482 277.59 726.472 Q275.946 728.44 272.914 729.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 716.357 Q295.298 716.357 293.469 719.921 Q291.664 723.463 291.664 730.593 Q291.664 737.699 293.469 741.264 Q295.298 744.806 298.909 744.806 Q302.543 744.806 304.349 741.264 Q306.177 737.699 306.177 730.593 Q306.177 723.463 304.349 719.921 Q302.543 716.357 298.909 716.357 M298.909 712.653 Q304.719 712.653 307.775 717.259 Q310.853 721.843 310.853 730.593 Q310.853 739.319 307.775 743.926 Q304.719 748.509 298.909 748.509 Q293.099 748.509 290.02 743.926 Q286.964 739.319 286.964 730.593 Q286.964 721.843 290.02 717.259 Q293.099 712.653 298.909 712.653 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M271.594 575.223 L259.789 593.672 L271.594 593.672 L271.594 575.223 M270.367 571.149 L276.247 571.149 L276.247 593.672 L281.177 593.672 L281.177 597.561 L276.247 597.561 L276.247 605.709 L271.594 605.709 L271.594 597.561 L255.992 597.561 L255.992 593.047 L270.367 571.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 574.228 Q295.298 574.228 293.469 577.792 Q291.664 581.334 291.664 588.464 Q291.664 595.57 293.469 599.135 Q295.298 602.676 298.909 602.676 Q302.543 602.676 304.349 599.135 Q306.177 595.57 306.177 588.464 Q306.177 581.334 304.349 577.792 Q302.543 574.228 298.909 574.228 M298.909 570.524 Q304.719 570.524 307.775 575.13 Q310.853 579.714 310.853 588.464 Q310.853 597.19 307.775 601.797 Q304.719 606.38 298.909 606.38 Q293.099 606.38 290.02 601.797 Q286.964 597.19 286.964 588.464 Q286.964 579.714 290.02 575.13 Q293.099 570.524 298.909 570.524 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M258.793 429.02 L277.15 429.02 L277.15 432.955 L263.076 432.955 L263.076 441.427 Q264.094 441.08 265.113 440.918 Q266.131 440.733 267.15 440.733 Q272.937 440.733 276.316 443.904 Q279.696 447.075 279.696 452.492 Q279.696 458.071 276.224 461.172 Q272.752 464.251 266.432 464.251 Q264.256 464.251 261.988 463.881 Q259.742 463.51 257.335 462.77 L257.335 458.071 Q259.418 459.205 261.641 459.76 Q263.863 460.316 266.34 460.316 Q270.344 460.316 272.682 458.209 Q275.02 456.103 275.02 452.492 Q275.02 448.881 272.682 446.774 Q270.344 444.668 266.34 444.668 Q264.465 444.668 262.59 445.084 Q260.738 445.501 258.793 446.381 L258.793 429.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 432.098 Q295.298 432.098 293.469 435.663 Q291.664 439.205 291.664 446.334 Q291.664 453.441 293.469 457.006 Q295.298 460.547 298.909 460.547 Q302.543 460.547 304.349 457.006 Q306.177 453.441 306.177 446.334 Q306.177 439.205 304.349 435.663 Q302.543 432.098 298.909 432.098 M298.909 428.395 Q304.719 428.395 307.775 433.001 Q310.853 437.585 310.853 446.334 Q310.853 455.061 307.775 459.668 Q304.719 464.251 298.909 464.251 Q293.099 464.251 290.02 459.668 Q286.964 455.061 286.964 446.334 Q286.964 437.585 290.02 433.001 Q293.099 428.395 298.909 428.395 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M269.326 302.307 Q266.178 302.307 264.326 304.46 Q262.497 306.613 262.497 310.363 Q262.497 314.09 264.326 316.266 Q266.178 318.418 269.326 318.418 Q272.474 318.418 274.303 316.266 Q276.154 314.09 276.154 310.363 Q276.154 306.613 274.303 304.46 Q272.474 302.307 269.326 302.307 M278.608 287.655 L278.608 291.914 Q276.849 291.08 275.043 290.641 Q273.261 290.201 271.502 290.201 Q266.872 290.201 264.418 293.326 Q261.988 296.451 261.641 302.77 Q263.006 300.756 265.066 299.692 Q267.127 298.604 269.603 298.604 Q274.812 298.604 277.821 301.775 Q280.853 304.923 280.853 310.363 Q280.853 315.687 277.705 318.904 Q274.557 322.122 269.326 322.122 Q263.33 322.122 260.159 317.539 Q256.988 312.932 256.988 304.205 Q256.988 296.011 260.877 291.15 Q264.766 286.266 271.316 286.266 Q273.076 286.266 274.858 286.613 Q276.664 286.96 278.608 287.655 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M298.909 289.969 Q295.298 289.969 293.469 293.534 Q291.664 297.076 291.664 304.205 Q291.664 311.312 293.469 314.877 Q295.298 318.418 298.909 318.418 Q302.543 318.418 304.349 314.877 Q306.177 311.312 306.177 304.205 Q306.177 297.076 304.349 293.534 Q302.543 289.969 298.909 289.969 M298.909 286.266 Q304.719 286.266 307.775 290.872 Q310.853 295.455 310.853 304.205 Q310.853 312.932 307.775 317.539 Q304.719 322.122 298.909 322.122 Q293.099 322.122 290.02 317.539 Q286.964 312.932 286.964 304.205 Q286.964 295.455 290.02 290.872 Q293.099 286.266 298.909 286.266 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip462)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1052.22 400.199,956.01 400.786,867.734 401.372,786.858 401.958,712.891 402.545,645.375 403.131,583.89 403.718,528.041 404.304,567.321 404.891,517.375 405.477,473.451 406.063,432.804 406.65,397.593 407.236,365.08 407.823,336.276 408.409,310.94 408.995,288.844 409.582,269.774 410.168,253.528 410.755,239.918 411.341,228.763 411.927,219.895 412.514,251.915 413.1,246.574 413.687,275.648 414.273,302.813 414.86,300.231 415.446,325.622 416.032,348.816 416.619,370.794 417.205,371.754 417.792,373.148 418.378,376.516 418.964,379.801 419.551,417.399 420.137,423.537 420.724,444.587 421.31,451.635 421.896,459.8 422.483,468.213 423.069,477.681 423.656,487.805 424.242,508.331 424.829,527.937 425.415,546.06 426.001,572.356 426.588,582.879 427.174,602.117 427.761,612.161 428.347,643.113 428.933,659.473 429.52,669.614 430.106,679.646 430.693,695.947 431.279,706.093 431.865,715.168 432.452,730.219 433.038,759.057 433.625,777.444 434.211,790.615 434.798,803.432 435.384,824.185 435.97,835.695 436.557,851.557 437.143,865.745 437.73,875.967 438.316,886.055 438.902,895.658 439.489,904.789 440.075,914.051 440.662,920.226 441.248,941.229 441.835,951.958 442.421,957.134 443.007,964.941 443.594,972.555 444.18,980.07 444.767,997.732 445.353,1004.23 445.939,1008.45 446.526,1015.13 447.112,1024.05 447.699,1032.82 448.285,1038.73 448.871,1042.65 449.458,1046.44 450.044,1056.73 450.631,1062.11 451.217,1067.5 451.804,1070.96 452.39,1078.62 452.976,1081.94 453.563,1088.91 454.149,1099.45 454.736,1101.94 455.322,1104.43 455.908,1107.14 456.495,1113.39 457.081,1117.56 457.668,1120.01 458.254,1124.08 458.84,1128.18 459.427,1135.72 460.013,1139.73 460.6,1143.55 461.186,1145.43 461.773,1149.22 462.359,1154.39 462.945,1156.42 463.532,1161.4 464.118,1166.06 464.705,1170.37 465.291,1171.56 465.877,1171.28 466.464,1174.28 467.05,1180.16 467.637,1184.36 468.223,1186.87 468.809,1192.2 469.396,1192.99 469.982,1196.76 470.569,1199.96 471.155,1200.49 471.742,1200.99 472.328,1206.96 472.914,1207.15 473.501,1208.56 474.087,1207.01 474.674,1207.25 475.26,1210.42 475.846,1216.32 476.433,1215.18 477.019,1218.03 477.606,1219.16 478.192,1220.89 478.778,1223.41 479.365,1223.26 479.951,1225.82 480.538,1226.73 481.124,1229.1 481.711,1228.93 482.297,1229.96 482.883,1232.45 483.47,1233.63 484.056,1233.25 484.643,1234.42 485.229,1236.67 485.815,1237.42 486.402,1235.58 486.988,1233.81 487.575,1237.45 488.161,1238.08 488.748,1236.26 489.334,1236.23 489.92,1237.2 490.507,1237.97 491.093,1236.32 491.68,1236.27 492.266,1234.79 492.852,1234.37 493.439,1236.77 494.025,1236.5 494.612,1237.68 495.198,1238.71 495.784,1239.4 496.371,1239.04 496.957,1238.59 497.544,1235.53 498.13,1236.58 498.717,1240.12 499.303,1238.4 499.889,1240.47 500.476,1240.24 501.062,1238.84 501.649,1239.77 502.235,1239.58 502.821,1240.44 503.408,1238.71 503.994,1238.57 504.581,1239.42 505.167,1236.73 505.753,1237.68 506.34,1240.24 506.926,1241.38 507.513,1243.5 508.099,1243 508.686,1242.53 509.272,1242.06 509.858,1243.1 510.445,1243.76 511.031,1241.94 511.618,1242.9 512.204,1242.46 512.79,1241.91 513.377,1241.26 513.963,1240.8 514.55,1241.64 515.136,1242.62 515.722,1244.52 516.309,1245.45 516.895,1243.58 517.482,1246.8 518.068,1245.97 518.655,1247.62 519.241,1246.97 519.827,1247.63 520.414,1245.76 521,1246.42 521.587,1247.17 522.173,1247.88 522.759,1247.48 523.346,1246.71 523.932,1244.7 524.519,1246.65 525.105,1248.34 525.691,1244.74 526.278,1243.97 526.864,1250.53 527.451,1249.46 528.037,1246.14 528.624,1247.71 529.21,1248.35 529.796,1247.66 530.383,1249.29 530.969,1249.64 531.556,1247.44 532.142,1246.65 532.728,1248.48 533.315,1246.39 533.901,1247.01 534.488,1246.1 535.074,1245.43 535.661,1247.15 536.247,1247.59 536.833,1246.67 537.42,1247.09 538.006,1246.46 538.593,1246.88 539.179,1246.19 539.765,1247.9 540.352,1247.08 540.938,1246.08 541.525,1247.57 542.111,1246.93 542.697,1246 543.284,1245.38 543.87,1244.9 544.457,1247.88 545.043,1246.86 545.63,1246.09 546.216,1247.54 546.802,1246.72 547.389,1248.03 547.975,1248.4 548.562,1248.74 549.148,1248.93 549.734,1248.05 550.321,1247.06 550.907,1247.48 551.494,1247.74 552.08,1246.54 552.666,1243.3 553.253,1242.37 553.839,1241.49 554.426,1239.81 555.012,1239.07 555.599,1236.22 556.185,1239.35 556.771,1239.24 557.358,1240.01 557.944,1238.15 558.531,1236.33 559.117,1234.91 559.703,1234.61 560.29,1233.15 560.876,1230.64 561.463,1231.57 562.049,1232.41 562.635,1228.68 563.222,1229.61 563.808,1236.46 564.395,1235.01 564.981,1235.72 565.568,1233.04 566.154,1231.51 566.74,1231.2 567.327,1234.45 567.913,1235.15 568.5,1233.61 569.086,1233.16 569.672,1236.44 570.259,1238.22 570.845,1236.43 571.432,1232.25 572.018,1232.16 572.605,1231.89 573.191,1232.91 573.777,1233.76 574.364,1233.35 574.95,1233.18 575.537,1231.61 576.123,1232.73 576.709,1232.63 577.296,1229.78 577.882,1228.42 578.469,1230.67 579.055,1229.38 579.641,1227.94 580.228,1229.13 580.814,1229.04 581.401,1230.17 581.987,1229.84 582.574,1230.58 583.16,1229.04 583.746,1230.17 584.333,1231.21 584.919,1232.39 585.506,1232.06 586.092,1235.16 586.678,1234.67 587.265,1234.25 587.851,1234.87 588.438,1238.89 589.024,1239.18 589.61,1237.34 590.197,1237.78 590.783,1238.02 591.37,1238.23 591.956,1237.83 592.543,1237.14 593.129,1237.66 593.715,1237.18 594.302,1237.61 594.888,1237.05 595.475,1237.57 596.061,1237.07 596.647,1234.07 597.234,1232.66 597.82,1233.39 598.407,1232.7 598.993,1230.12 599.579,1229.8 600.166,1229.63 600.752,1231.83 601.339,1231.27 601.925,1229.63 602.512,1228.14 603.098,1229.09 603.684,1230.11 604.271,1229.99 604.857,1230.83 605.444,1230.66 606.03,1230.35 606.616,1231.22 607.203,1232.2 607.789,1231.86 608.376,1232.49 608.962,1233.2 609.548,1232.75 610.135,1232.29 610.721,1230.86 611.308,1229.54 611.894,1229.35 612.481,1230.28 613.067,1229.93 613.653,1231.97 614.24,1229.21 614.826,1230.03 615.413,1229.84 615.999,1230.91 616.585,1229.56 617.172,1230.63 617.758,1230.36 618.345,1228.66 618.931,1229.64 619.518,1229.56 620.104,1230.44 620.69,1229.95 621.277,1228.39 621.863,1226.92 622.45,1227.61 623.036,1223.81 623.622,1223.87 624.209,1223.83 624.795,1223.69 625.382,1223.47 625.968,1223.59 626.554,1223.51 627.141,1223.48 627.727,1221.13 628.314,1224.69 628.9,1223.64 629.487,1222.58 630.073,1224.79 630.659,1224.47 631.246,1224.25 631.832,1225.38 632.419,1224.22 633.005,1225.34 633.591,1225.16 634.178,1221.62 634.764,1222.5 635.351,1221.48 635.937,1221.55 636.523,1223.69 637.11,1223.86 637.696,1225.05 638.283,1226.29 638.869,1225.07 639.456,1224.87 640.042,1223.73 640.628,1223.67 641.215,1222.24 641.801,1225.61 642.388,1226.57 642.974,1222.75 643.56,1223.9 644.147,1226.01 644.733,1225.76 645.32,1226.71 645.906,1226.41 646.492,1225.17 647.079,1223.94 647.665,1224.83 648.252,1225.73 648.838,1225.63 649.425,1226.57 650.011,1226.22 650.597,1226.05 651.184,1225.9 651.77,1224.4 652.357,1222.9 652.943,1219.43 653.529,1220.73 654.116,1223.15 654.702,1222.86 655.289,1221.94 655.875,1221.78 656.462,1220.45 657.048,1220.53 657.634,1220.49 658.221,1220.46 658.807,1222.89 659.394,1221.55 659.98,1223.76 660.566,1222.63 661.153,1224.73 661.739,1224.56 662.326,1223.28 662.912,1224.28 663.498,1225.28 664.085,1221.37 664.671,1221.27 665.258,1224.88 665.844,1223.48 666.431,1224.55 667.017,1224.21 667.603,1224.23 668.19,1221.74 668.776,1221.65 669.363,1220.77 669.949,1220.9 670.535,1220.9 671.122,1219.65 671.708,1221.86 672.295,1222.92 672.881,1221.4 673.467,1222.48 674.054,1224.54 674.64,1223.08 675.227,1222.88 675.813,1224.05 676.4,1224.03 676.986,1223.98 677.572,1222.65 678.159,1221.37 678.745,1222.51 679.332,1223.45 679.918,1223.4 680.504,1219.78 681.091,1223.34 681.677,1223.42 682.264,1223.56 682.85,1223.52 683.436,1223.41 684.023,1225.36 684.609,1226.21 685.196,1225.77 685.782,1224.28 686.369,1226.34 686.955,1226.06 687.541,1226.81 688.128,1225.35 688.714,1222.63 689.301,1221.58 689.887,1217.93 690.473,1216.75 691.06,1215.96 691.646,1216.25 692.233,1215.23 692.819,1215.44 693.405,1215.79 693.992,1215.85 694.578,1217.3 695.165,1216.32 695.751,1214.24 696.338,1215.78 696.924,1215.77 697.51,1215.91 698.097,1217.15 698.683,1216.11 699.27,1217.27 699.856,1216.27 700.442,1218.72 701.029,1217.73 701.615,1217.97 702.202,1218.22 702.788,1217.01 703.375,1215.88 703.961,1214.95 704.547,1215.31 705.134,1215.52 705.72,1216.89 706.307,1214.74 706.893,1214.99 707.479,1216.13 708.066,1216.26 708.652,1216.64 709.239,1216.65 709.825,1216.72 710.411,1218.18 710.998,1217.02 711.584,1218.26 712.171,1219.2 712.757,1219.14 713.344,1220.28 713.93,1219.01 714.516,1219.11 715.103,1221.36 715.689,1220.35 716.276,1221.31 716.862,1223.41 717.448,1227.91 718.035,1228.58 718.621,1225.74 719.208,1225.16 719.794,1224.73 720.38,1224.44 720.967,1226.31 721.553,1225.81 722.14,1225.27 722.726,1227.1 723.313,1226.54 723.899,1229.49 724.485,1228.82 725.072,1226.04 725.658,1224.29 726.245,1221.52 726.831,1219.12 727.417,1217.66 728.004,1217.78 728.59,1217.7 729.177,1217.6 729.763,1221.32 730.349,1222.47 730.936,1223.18 731.522,1224.3 732.109,1226.58 732.695,1228.38 733.282,1229.14 733.868,1229.73 734.454,1228.97 735.041,1230.6 735.627,1230.05 736.214,1229.41 736.8,1227.62 737.386,1228.23 737.973,1227.79 738.559,1225.86 739.146,1219.58 739.732,1219.61 740.318,1218.33 740.905,1217.36 741.491,1218.39 742.078,1218.33 742.664,1217.06 743.251,1218.37 743.837,1218.06 744.423,1219.29 745.01,1220.33 745.596,1220.27 746.183,1218.86 746.769,1216.44 747.355,1218.79 747.942,1217.7 748.528,1219.98 749.115,1220.03 749.701,1218.68 750.288,1216.23 750.874,1215.13 751.46,1215.23 752.047,1214.32 752.633,1214.43 753.22,1215.61 753.806,1215.82 754.392,1215.79 754.979,1215.82 755.565,1217.16 756.152,1217.22 756.738,1215.99 757.324,1216.16 757.911,1214.91 758.497,1216.11 759.084,1217.24 759.67,1217.15 760.257,1215.95 760.843,1216.28 761.429,1217.62 762.016,1218.68 762.602,1218.55 763.189,1219.82 763.775,1221.11 764.361,1221.2 764.948,1222.12 765.534,1224.15 766.121,1222.84 766.707,1223.67 767.293,1222.17 767.88,1224.24 768.466,1221.74 769.053,1220.17 769.639,1221.15 770.226,1222.17 770.812,1222.77 771.398,1222.49 771.985,1221.75 772.571,1219.27 773.158,1220.52 773.744,1220.42 774.33,1220.23 774.917,1219.01 775.503,1220.12 776.09,1218.95 776.676,1217.9 777.262,1218.02 777.849,1215.77 778.435,1215.02 779.022,1216.23 779.608,1217.6 780.195,1217.46 780.781,1215.44 781.367,1212.81 781.954,1214.33 782.54,1214.52 783.127,1214.89 783.713,1215.27 784.299,1213.17 784.886,1214.52 785.472,1214.64 786.059,1215.72 786.645,1215.61 787.232,1215.87 787.818,1213.6 788.404,1210.37 788.991,1211.96 789.577,1212.27 790.164,1212.49 790.75,1212.89 791.336,1212.88 791.923,1215.6 792.509,1216.65 793.096,1216.74 793.682,1217.95 794.268,1216.94 794.855,1216.84 795.441,1216.8 796.028,1216.99 796.614,1216.96 797.201,1218.19 797.787,1223.96 798.373,1223.55 798.96,1224.43 799.546,1224.03 800.133,1224.75 800.719,1224.6 801.305,1223.29 801.892,1225.41 802.478,1227.25 803.065,1227.77 803.651,1228.49 804.237,1231.22 804.824,1232.91 805.41,1233.11 805.997,1230.84 806.583,1228.8 807.17,1229.39 807.756,1228.79 808.342,1229.37 808.929,1229.96 809.515,1226.12 810.102,1225.56 810.688,1225.02 811.274,1223.35 811.861,1224.92 812.447,1224.13 813.034,1223.51 813.62,1225.28 814.206,1223.48 814.793,1224.25 815.379,1222.51 815.966,1225.36 816.552,1223.52 817.139,1227.35 817.725,1224.46 818.311,1223.92 818.898,1223.53 819.484,1226.86 820.071,1226.25 820.657,1223.18 821.243,1221.55 821.83,1222.65 822.416,1223.63 823.003,1223.45 823.589,1224.07 824.175,1223.87 824.762,1222.24 825.348,1221.93 825.935,1221.54 826.521,1223.52 827.108,1221.05 827.694,1224.02 828.28,1223.44 828.867,1219.6 829.453,1219.54 830.04,1219.69 830.626,1219.42 831.212,1217.88 831.799,1216.67 832.385,1216.53 832.972,1217.6 833.558,1215.39 834.145,1215.3 834.731,1214.17 835.317,1216.56 835.904,1216.76 836.49,1217.03 837.077,1217.17 837.663,1217.16 838.249,1216.93 838.836,1216.94 839.422,1216.88 840.009,1217.28 840.595,1215 841.181,1216.13 841.768,1216.21 842.354,1217.45 842.941,1217.33 843.527,1217.44 844.114,1218.24 844.7,1215.83 845.286,1216.81 845.873,1217.67 846.459,1216.28 847.046,1217.44 847.632,1218.54 848.218,1216.29 848.805,1216.07 849.391,1217.36 849.978,1217.12 850.564,1217.07 851.15,1216.92 851.737,1215.65 852.323,1213.25 852.91,1214.72 853.496,1216.02 854.083,1213.84 854.669,1213.57 855.255,1213.4 855.842,1213.64 856.428,1214.87 857.015,1215.96 857.601,1219.49 858.187,1216.99 858.774,1214.72 859.36,1216.06 859.947,1217.3 860.533,1218.29 861.119,1217.96 861.706,1218.08 862.292,1216.88 862.879,1219.16 863.465,1216.53 864.052,1218.73 864.638,1218.56 865.224,1218.38 865.811,1217.97 866.397,1221.47 866.984,1221.05 867.57,1220.42 868.156,1219.93 868.743,1222.15 869.329,1219.35 869.916,1218.18 870.502,1215.64 871.089,1216.78 871.675,1218.2 872.261,1217.91 872.848,1221.2 873.434,1220.91 874.021,1220.9 874.607,1222.94 875.193,1221.46 875.78,1218.84 876.366,1219.75 876.953,1216.12 877.539,1213.95 878.125,1212.95 878.712,1210.69 879.298,1210.86 879.885,1208.79 880.471,1209.24 881.058,1209.47 881.644,1210.87 882.23,1209.67 882.817,1210.07 883.403,1211.52 883.99,1209.47 884.576,1208.53 885.162,1210.06 885.749,1211.47 886.335,1211.82 886.922,1210.83 887.508,1210.66 888.094,1209.79 888.681,1213.42 889.267,1212.41 889.854,1211.52 890.44,1212.63 891.027,1212.75 891.613,1210.61 892.199,1210.92 892.786,1210.29 893.372,1209.2 893.959,1209.25 894.545,1210.9 895.131,1210.97 895.718,1210.06 896.304,1211.23 896.891,1210.22 897.477,1209.2 898.063,1206.09 898.65,1204.18 899.236,1205.87 899.823,1205.13 900.409,1203.23 900.996,1203.87 901.582,1205.6 902.168,1206.19 902.755,1207.97 903.341,1209.41 903.928,1211.01 904.514,1209.92 905.1,1210.29 905.687,1210.69 906.273,1209.8 906.86,1208.9 907.446,1209.29 908.032,1208.69 908.619,1209.34 909.205,1209.58 909.792,1208.93 910.378,1210.57 910.965,1210.82 911.551,1208.72 912.137,1207.91 912.724,1207.14 913.31,1206.34 913.897,1204.48 914.483,1205.29 915.069,1207.06 915.656,1205.07 916.242,1205.72 916.829,1205.05 917.415,1206.75 918.002,1207 918.588,1206.39 919.174,1204.51 919.761,1205.14 920.347,1208.24 920.934,1210.88 921.52,1212.47 922.106,1211.7 922.693,1211.97 923.279,1213.14 923.866,1213.28 924.452,1213.29 925.038,1212.46 925.625,1213.8 926.211,1212.61 926.798,1213.9 927.384,1213.98 927.971,1214.01 928.557,1213.03 929.143,1212.07 929.73,1212.28 930.316,1211.3 930.903,1211.68 931.489,1209.67 932.075,1210.1 932.662,1211.44 933.248,1209.2 933.835,1210.98 934.421,1211.54 935.007,1209.29 935.594,1209.57 936.18,1210.03 936.767,1209.21 937.353,1210.77 937.94,1212.1 938.526,1212.51 939.112,1212.82 939.699,1211.84 940.285,1211.97 940.872,1214.54 941.458,1213.3 942.044,1211.08 942.631,1211.18 943.217,1210.15 943.804,1210.48 944.39,1211.85 944.976,1213.26 945.563,1217.93 946.149,1217.95 946.736,1218.91 947.322,1219.83 947.909,1219.82 948.495,1222.09 949.081,1220.45 949.668,1220.31 950.254,1221.13 950.841,1221.87 951.427,1221.5 952.013,1220 952.6,1219.58 953.186,1218.07 953.773,1216.86 954.359,1215.75 954.945,1215.77 955.532,1216.78 956.118,1215.43 956.705,1216.81 957.291,1215.75 957.878,1218.09 958.464,1220.16 959.05,1222.28 959.637,1223 960.223,1222.45 960.81,1219.69 961.396,1219.45 961.982,1219.19 962.569,1220.08 963.155,1221.17 963.742,1221.9 964.328,1222.74 964.915,1221.08 965.501,1220.47 966.087,1221.54 966.674,1220 967.26,1219.85 967.847,1219.49 968.433,1219.13 969.019,1217.71 969.606,1216.41 970.192,1216.01 970.779,1216.17 971.365,1214.95 971.951,1212.52 972.538,1211.59 973.124,1209.35 973.711,1211.85 974.297,1209.62 974.884,1212.14 975.47,1212.52 976.056,1212.61 976.643,1209.06 977.229,1210.42 977.816,1212.73 978.402,1213.13 978.988,1214.43 979.575,1212.1 980.161,1212.3 980.748,1213.48 981.334,1213.84 981.92,1215.25 982.507,1215.3 983.093,1213.98 983.68,1215.06 984.266,1213.94 984.853,1214.02 985.439,1212.56 986.025,1211.7 986.612,1211.98 987.198,1214.53 987.785,1214.25 988.371,1215.34 988.957,1215.43 989.544,1217.6 990.13,1217.6 990.717,1218.68 991.303,1217.22 991.889,1220.63 992.476,1217.89 993.062,1216.57 993.649,1217.59 994.235,1219.98 994.822,1220.99 995.408,1221.64 995.994,1223.41 996.581,1223.29 997.167,1221.56 997.754,1221.15 998.34,1220.77 998.926,1218.3 999.513,1218.08 1000.1,1217.9 1000.69,1216.43 1001.27,1214.95 1001.86,1214.99 1002.44,1213.76 1003.03,1213.9 1003.62,1215.11 1004.2,1211.67 1004.79,1211.85 1005.38,1213.36 1005.96,1214.61 1006.55,1215.92 1007.14,1217.88 1007.72,1216.46 1008.31,1215.2 1008.9,1216.44 1009.48,1215.01 1010.07,1212.81 1010.65,1211.51 1011.24,1211.63 1011.83,1209.46 1012.41,1210.9 1013,1207.6 1013.59,1208.06 1014.17,1208.28 1014.76,1210.03 1015.35,1208.89 1015.93,1209 1016.52,1206.91 1017.11,1205.95 1017.69,1207.56 1018.28,1204.19 1018.86,1206.16 1019.45,1208.06 1020.04,1209.64 1020.62,1209.7 1021.21,1209.94 1021.8,1211.42 1022.38,1210.4 1022.97,1208.11 1023.56,1209.54 1024.14,1209.84 1024.73,1212.5 1025.32,1210.14 1025.9,1210.27 1026.49,1211.89 1027.07,1212 1027.66,1212.15 1028.25,1213.53 1028.83,1212.35 1029.42,1211.33 1030.01,1213.68 1030.59,1213.59 1031.18,1212.41 1031.77,1212.32 1032.35,1213.44 1032.94,1213.66 1033.52,1213.74 1034.11,1215.96 1034.7,1218.4 1035.28,1218.11 1035.87,1216.67 1036.46,1218.74 1037.04,1218.48 1037.63,1217.04 1038.22,1217.21 1038.8,1219.43 1039.39,1221.46 1039.98,1219.97 1040.56,1219.67 1041.15,1218.3 1041.73,1219.3 1042.32,1221.16 1042.91,1220.88 1043.49,1219.43 1044.08,1219.07 1044.67,1222.33 1045.25,1221.78 1045.84,1220.25 1046.43,1220.86 1047.01,1221.72 1047.6,1222.4 1048.19,1223.09 1048.77,1220.32 1049.36,1218.64 1049.94,1216.06 1050.53,1216.09 1051.12,1213.73 1051.7,1212.96 1052.29,1214.04 1052.88,1212.75 1053.46,1213.91 1054.05,1215.07 1054.64,1216.33 1055.22,1215.14 1055.81,1217.27 1056.39,1218.3 1056.98,1217.21 1057.57,1217.1 1058.15,1215.81 1058.74,1216.96 1059.33,1217.88 1059.91,1218.97 1060.5,1220.13 1061.09,1218.75 1061.67,1220.04 1062.26,1223.09 1062.85,1222.44 1063.43,1222.06 1064.02,1221.53 1064.6,1222.26 1065.19,1220.96 1065.78,1219.55 1066.36,1218.39 1066.95,1219.15 1067.54,1217.77 1068.12,1216.75 1068.71,1214.42 1069.3,1211.79 1069.88,1213.01 1070.47,1213.08 1071.06,1214.15 1071.64,1214.13 1072.23,1211.76 1072.81,1211.76 1073.4,1209.2 1073.99,1211.88 1074.57,1211.86 1075.16,1212.15 1075.75,1211.1 1076.33,1209.06 1076.92,1209.29 1077.51,1210.75 1078.09,1209.76 1078.68,1210.07 1079.26,1210.44 1079.85,1209.59 1080.44,1209.71 1081.02,1213.29 1081.61,1214.77 1082.2,1213.53 1082.78,1214.69 1083.37,1216.84 1083.96,1216.84 1084.54,1215.48 1085.13,1216.59 1085.72,1216.67 1086.3,1216.47 1086.89,1216.13 1087.47,1217.5 1088.06,1216.06 1088.65,1217.16 1089.23,1219.36 1089.82,1218.85 1090.41,1217.34 1090.99,1214.74 1091.58,1213.73 1092.17,1213.69 1092.75,1211.33 1093.34,1213.7 1093.93,1212.5 1094.51,1214.13 1095.1,1213.13 1095.68,1211.94 1096.27,1212.14 1096.86,1212.13 1097.44,1213.27 1098.03,1213.03 1098.62,1217.64 1099.2,1215.22 1099.79,1217.43 1100.38,1218.56 1100.96,1219.31 1101.55,1220.11 1102.14,1217.68 1102.72,1217.52 1103.31,1216.23 1103.89,1213.89 1104.48,1215.12 1105.07,1212.86 1105.65,1211.74 1106.24,1210.57 1106.83,1211.94 1107.41,1213.44 1108,1211.08 1108.59,1213.62 1109.17,1213.78 1109.76,1213.54 1110.34,1214.84 1110.93,1217.24 1111.52,1220.76 1112.1,1219.48 1112.69,1219.26 1113.28,1215.54 1113.86,1213.32 1114.45,1214.53 1115.04,1215.61 1115.62,1215.62 1116.21,1216.67 1116.8,1221.23 1117.38,1219.73 1117.97,1220.35 1118.55,1220.06 1119.14,1220.98 1119.73,1218.63 1120.31,1218.27 1120.9,1215.78 1121.49,1216.84 1122.07,1216.67 1122.66,1216.43 1123.25,1216.53 1123.83,1215.25 1124.42,1214.92 1125.01,1214.9 1125.59,1214.6 1126.18,1214.45 1126.76,1212.17 1127.35,1211.04 1127.94,1212.47 1128.52,1211.68 1129.11,1211.91 1129.7,1212.24 1130.28,1213.33 1130.87,1212.15 1131.46,1208.75 1132.04,1210.21 1132.63,1210.38 1133.21,1209.51 1133.8,1210.67 1134.39,1211.73 1134.97,1214 1135.56,1215.12 1136.15,1216.23 1136.73,1215.28 1137.32,1213.17 1137.91,1211.87 1138.49,1211.87 1139.08,1210.91 1139.67,1211.18 1140.25,1209 1140.84,1210.81 1141.42,1211.05 1142.01,1211.14 1142.6,1211.32 1143.18,1210.56 1143.77,1212.88 1144.36,1210.59 1144.94,1210.61 1145.53,1210.87 1146.12,1209.64 1146.7,1209.82 1147.29,1211.16 1147.88,1211.3 1148.46,1214.8 1149.05,1214.72 1149.63,1214.88 1150.22,1214.87 1150.81,1215.01 1151.39,1214.94 1151.98,1215.05 1152.57,1217.73 1153.15,1218.88 1153.74,1218.75 1154.33,1217.57 1154.91,1216.27 1155.5,1217.43 1156.09,1218.23 1156.67,1217.15 1157.26,1220.26 1157.84,1218.68 1158.43,1218.63 1159.02,1217.32 1159.6,1219.71 1160.19,1218.57 1160.78,1219.73 1161.36,1219.51 1161.95,1222.39 1162.54,1220.93 1163.12,1219.43 1163.71,1216.85 1164.29,1215.62 1164.88,1214.18 1165.47,1213.08 1166.05,1216.69 1166.64,1216.59 1167.23,1216.23 1167.81,1215.99 1168.4,1216.06 1168.99,1217.48 1169.57,1217.31 1170.16,1217.07 1170.75,1214.47 1171.33,1212.13 1171.92,1212.39 1172.5,1211.27 1173.09,1211.62 1173.68,1213.27 1174.26,1216.87 1174.85,1216.82 1175.44,1219.17 1176.02,1217.72 1176.61,1218.81 1177.2,1219.76 1177.78,1217.22 1178.37,1215.8 1178.96,1217.84 1179.54,1215.53 1180.13,1217.85 1180.71,1216.48 1181.3,1213.97 1181.89,1212.94 1182.47,1211.8 1183.06,1210.98 1183.65,1212.35 1184.23,1212.3 1184.82,1209.99 1185.41,1209.38 1185.99,1211.94 1186.58,1208.41 1187.16,1208.62 1187.75,1210.04 1188.34,1206.88 1188.92,1207.2 1189.51,1210.17 1190.1,1214.81 1190.68,1214.83 1191.27,1213.74 1191.86,1212.72 1192.44,1212.7 1193.03,1213.04 1193.62,1215.49 1194.2,1213.14 1194.79,1213.36 1195.37,1212.16 1195.96,1213.36 1196.55,1212.28 1197.13,1212.32 1197.72,1211.57 1198.31,1211.67 1198.89,1211.54 1199.48,1211.72 1200.07,1211.74 1200.65,1214.23 1201.24,1211.99 1201.83,1212.34 1202.41,1213.29 1203,1213.42 1203.58,1212.34 1204.17,1214.51 1204.76,1214.58 1205.34,1215.86 1205.93,1213.44 1206.52,1214.53 1207.1,1216.68 1207.69,1214.07 1208.28,1213.92 1208.86,1212.64 1209.45,1212.77 1210.03,1212.79 1210.62,1214.16 1211.21,1216.46 1211.79,1215.03 1212.38,1213.86 1212.97,1213.91 1213.55,1212.79 1214.14,1211.8 1214.73,1213.03 1215.31,1212.88 1215.9,1212.85 1216.49,1213.97 1217.07,1213.96 1217.66,1211.55 1218.24,1213.02 1218.83,1214.45 1219.42,1213.34 1220,1213.41 1220.59,1213.33 1221.18,1215.9 1221.76,1214.62 1222.35,1216.99 1222.94,1216.82 1223.52,1214.41 1224.11,1214.38 1224.7,1214.21 1225.28,1214 1225.87,1213.95 1226.45,1212.72 1227.04,1214.13 1227.63,1215.46 1228.21,1214.14 1228.8,1215.39 1229.39,1214.3 1229.97,1213.34 1230.56,1214.48 1231.15,1213.23 1231.73,1213.43 1232.32,1213.56 1232.91,1215.95 1233.49,1217 1234.08,1215.49 1234.66,1214.3 1235.25,1216.52 1235.84,1215.24 1236.42,1212.88 1237.01,1211.96 1237.6,1209.66 1238.18,1211.24 1238.77,1210.24 1239.36,1210.23 1239.94,1210.5 1240.53,1210.75 1241.11,1213.34 1241.7,1215.83 1242.29,1214.63 1242.87,1215.75 1243.46,1215.62 1244.05,1215.4 1244.63,1215.17 1245.22,1211.93 1245.81,1214.61 1246.39,1212.34 1246.98,1211.24 1247.57,1212.25 1248.15,1214.58 1248.74,1212.17 1249.32,1213.15 1249.91,1212.26 1250.5,1213.4 1251.08,1211.18 1251.67,1211.38 1252.26,1212.97 1252.84,1214.05 1253.43,1213.96 1254.02,1213.07 1254.6,1214.31 1255.19,1215.39 1255.78,1215.45 1256.36,1215.26 1256.95,1213.79 1257.53,1213.97 1258.12,1215.2 1258.71,1217.42 1259.29,1216.08 1259.88,1214.77 1260.47,1213.76 1261.05,1211.53 1261.64,1212.65 1262.23,1214.86 1262.81,1214.78 1263.4,1216.88 1263.98,1216.65 1264.57,1218.76 1265.16,1217.43 1265.74,1217.44 1266.33,1215.96 1266.92,1213.44 1267.5,1215.78 1268.09,1215.56 1268.68,1213.26 1269.26,1213.6 1269.85,1217.1 1270.44,1218.03 1271.02,1218.93 1271.61,1217.51 1272.19,1218.6 1272.78,1217.31 1273.37,1216.1 1273.95,1214.95 1274.54,1215.1 1275.13,1216.4 1275.71,1217.24 1276.3,1217.06 1276.89,1216.87 1277.47,1216.65 1278.06,1217.79 1278.65,1218.51 1279.23,1220.32 1279.82,1221.24 1280.4,1219.65 1280.99,1218.2 1281.58,1218.07 1282.16,1217.76 1282.75,1217.39 1283.34,1215.98 1283.92,1218.12 1284.51,1218.06 1285.1,1217.95 1285.68,1219.87 1286.27,1217.59 1286.86,1219.8 1287.44,1217.17 1288.03,1216.76 1288.61,1216.64 1289.2,1215.4 1289.79,1215.47 1290.37,1216.43 1290.96,1215.17 1291.55,1216.27 1292.13,1215 1292.72,1211.62 1293.31,1209.52 1293.89,1207.32 1294.48,1207.83 1295.06,1210.25 1295.65,1213.99 1296.24,1215.32 1296.82,1215.19 1297.41,1214.92 1298,1214.89 1298.58,1214.71 1299.17,1212.3 1299.76,1212.3 1300.34,1212.27 1300.93,1213.36 1301.52,1212.44 1302.1,1212.43 1302.69,1211.13 1303.27,1212.6 1303.86,1211.83 1304.45,1213.23 1305.03,1214.26 1305.62,1218.92 1306.21,1218.74 1306.79,1218.56 1307.38,1218.36 1307.97,1214.58 1308.55,1216.96 1309.14,1214.76 1309.73,1215.53 1310.31,1215.34 1310.9,1215.38 1311.48,1217.98 1312.07,1215.65 1312.66,1215.85 1313.24,1214.48 1313.83,1215.75 1314.42,1214.76 1315,1214.88 1315.59,1214.79 1316.18,1214.71 1316.76,1215.83 1317.35,1214.44 1317.93,1216.57 1318.52,1214.1 1319.11,1210.73 1319.69,1209.81 1320.28,1210.06 1320.87,1209.14 1321.45,1209.31 1322.04,1210.59 1322.63,1212.97 1323.21,1213.04 1323.8,1216.72 1324.39,1215.59 1324.97,1215.48 1325.56,1216.52 1326.14,1217.24 1326.73,1213.7 1327.32,1211.35 1327.9,1211.49 1328.49,1212.77 1329.08,1214 1329.66,1212.94 1330.25,1214.14 1330.84,1212.92 1331.42,1214.08 1332.01,1212.93 1332.6,1212.94 1333.18,1207.61 1333.77,1210.38 1334.35,1210.5 1334.94,1213.22 1335.53,1213.38 1336.11,1217.86 1336.7,1219.98 1337.29,1218.78 1337.87,1218.55 1338.46,1219.56 1339.05,1220.68 1339.63,1220.28 1340.22,1219.77 1340.8,1218.33 1341.39,1219.33 1341.98,1220.21 1342.56,1216.49 1343.15,1214.12 1343.74,1214.28 1344.32,1214.25 1344.91,1215.41 1345.5,1214.27 1346.08,1214.22 1346.67,1214.13 1347.26,1211.73 1347.84,1211.87 1348.43,1212.05 1349.01,1213.12 1349.6,1215.57 1350.19,1214.37 1350.77,1211.87 1351.36,1213 1351.95,1212.88 1352.53,1214.07 1353.12,1212.99 1353.71,1214.01 1354.29,1215.16 1354.88,1214.07 1355.47,1215.15 1356.05,1215.15 1356.64,1216.32 1357.22,1215.17 1357.81,1216.35 1358.4,1215 1358.98,1214.95 1359.57,1211.57 1360.16,1213.03 1360.74,1213.92 1361.33,1214 1361.92,1212.91 1362.5,1211.66 1363.09,1211.8 1363.68,1211.88 1364.26,1213.07 1364.85,1212.12 1365.43,1212.42 1366.02,1214.9 1366.61,1215.79 1367.19,1215.62 1367.78,1216.83 1368.37,1216.62 1368.95,1216.54 1369.54,1216.34 1370.13,1219.46 1370.71,1217.79 1371.3,1218.92 1371.88,1218.78 1372.47,1219.39 1373.06,1218.92 1373.64,1217.39 1374.23,1213.63 1374.82,1212.36 1375.4,1211.06 1375.99,1212.37 1376.58,1212.5 1377.16,1212.83 1377.75,1211.72 1378.34,1214.14 1378.92,1212.7 1379.51,1212.64 1380.09,1212.4 1380.68,1209.08 1381.27,1209.51 1381.85,1208.72 1382.44,1210.35 1383.03,1210.52 1383.61,1209.72 1384.2,1212.44 1384.79,1211.44 1385.37,1212.76 1385.96,1210.71 1386.55,1212.08 1387.13,1210.84 1387.72,1211.08 1388.3,1211.28 1388.89,1212.55 1389.48,1213.86 1390.06,1214.05 1390.65,1211.53 1391.24,1213.89 1391.82,1215.03 1392.41,1214.92 1393,1216 1393.58,1215.74 1394.17,1213.46 1394.75,1212.05 1395.34,1212.02 1395.93,1213.49 1396.51,1215.87 1397.1,1215.92 1397.69,1216.97 1398.27,1216.75 1398.86,1216.72 1399.45,1217.12 1400.03,1215.71 1400.62,1214.5 1401.21,1214.56 1401.79,1215.96 1402.38,1214.67 1402.96,1214.75 1403.55,1214.56 1404.14,1214.63 1404.72,1214.71 1405.31,1213.6 1405.9,1213.7 1406.48,1213.48 1407.07,1214.73 1407.66,1216.89 1408.24,1215.64 1408.83,1215.35 1409.42,1215.09 1410,1217.27 1410.59,1217.12 1411.17,1218.14 1411.76,1219.13 1412.35,1219.06 1412.93,1217.48 1413.52,1218.38 1414.11,1218.11 1414.69,1216.83 1415.28,1214.5 1415.87,1213.26 1416.45,1211.03 1417.04,1211.26 1417.63,1214.03 1418.21,1212.89 1418.8,1211.6 1419.38,1211.93 1419.97,1213.04 1420.56,1212.09 1421.14,1209.69 1421.73,1210.1 1422.32,1208.22 1422.9,1208.57 1423.49,1210.26 1424.08,1209.68 1424.66,1208.36 1425.25,1209.82 1425.83,1211.17 1426.42,1209.99 1427.01,1210.22 1427.59,1210.51 1428.18,1211.9 1428.77,1210.97 1429.35,1211.36 1429.94,1210.55 1430.53,1211.76 1431.11,1210.64 1431.7,1208.51 1432.29,1208.94 1432.87,1206.98 1433.46,1206.2 1434.04,1207.61 1434.63,1208.06 1435.22,1208.44 1435.8,1209.58 1436.39,1208.77 1436.98,1207.79 1437.56,1206.77 1438.15,1209.51 1438.74,1210.84 1439.32,1212.16 1439.91,1214.7 1440.5,1214.93 1441.08,1214.9 1441.67,1213.85 1442.25,1214.9 1442.84,1213.73 1443.43,1213.56 1444.01,1212.59 1444.6,1211.6 1445.19,1213.1 1445.77,1214.52 1446.36,1213.25 1446.95,1214.25 1447.53,1214.41 1448.12,1215.49 1448.7,1214.25 1449.29,1217.63 1449.88,1218.65 1450.46,1217.17 1451.05,1217.12 1451.64,1218.13 1452.22,1220.15 1452.81,1221.06 1453.4,1221.8 1453.98,1221.6 1454.57,1221.15 1455.16,1219.82 1455.74,1216.13 1456.33,1216.2 1456.91,1215.02 1457.5,1215.92 1458.09,1215.68 1458.67,1216.63 1459.26,1215.31 1459.85,1214.17 1460.43,1211.78 1461.02,1211.77 1461.61,1210.92 1462.19,1212.21 1462.78,1212.36 1463.37,1212.62 1463.95,1215.26 1464.54,1215.17 1465.12,1214.06 1465.71,1212.91 1466.3,1210.61 1466.88,1212.97 1467.47,1211.91 1468.06,1212.19 1468.64,1211.03 1469.23,1211.27 1469.82,1211.58 1470.4,1211.88 1470.99,1213.2 1471.57,1213.55 1472.16,1213.65 1472.75,1212.55 1473.33,1210.26 1473.92,1210.55 1474.51,1213.19 1475.09,1213.11 1475.68,1210.85 1476.27,1210.81 1476.85,1209.13 1477.44,1208.16 1478.03,1210.82 1478.61,1208.58 1479.2,1209.15 1479.78,1210.72 1480.37,1213 1480.96,1216.5 1481.54,1213.96 1482.13,1215.15 1482.72,1213.8 1483.3,1213.8 1483.89,1217.49 1484.48,1218.44 1485.06,1218.18 1485.65,1219.25 1486.24,1218.95 1486.82,1218.81 1487.41,1217.46 1487.99,1218.35 1488.58,1219.58 1489.17,1220.44 1489.75,1221.34 1490.34,1224.45 1490.93,1222.77 1491.51,1223.66 1492.1,1219.86 1492.69,1221.72 1493.27,1222.46 1493.86,1223.32 1494.45,1222.74 1495.03,1222.26 1495.62,1226.22 1496.2,1225.74 1496.79,1223.8 1497.38,1221.12 1497.96,1220.57 1498.55,1218.04 1499.14,1221.35 1499.72,1218.87 1500.31,1216.42 1500.9,1217.31 1501.48,1215.92 1502.07,1217.9 1502.65,1220.05 1503.24,1219.46 1503.83,1220.05 1504.41,1223 1505,1220.22 1505.59,1220.97 1506.17,1221.89 1506.76,1222.57 1507.35,1221.94 1507.93,1220.26 1508.52,1222.39 1509.11,1221.97 1509.69,1220.51 1510.28,1220.16 1510.86,1221.03 1511.45,1221.97 1512.04,1220.33 1512.62,1220.21 1513.21,1217.45 1513.8,1217.08 1514.38,1215.94 1514.97,1215.87 1515.56,1214.63 1516.14,1215.81 1516.73,1214.36 1517.32,1215.6 1517.9,1212.99 1518.49,1215.22 1519.07,1216.33 1519.66,1216.17 1520.25,1215.9 1520.83,1215.62 1521.42,1215.52 1522.01,1214.44 1522.59,1215.54 1523.18,1216.67 1523.77,1216.31 1524.35,1213.7 1524.94,1211.29 1525.52,1213.73 1526.11,1213.55 1526.7,1212.31 1527.28,1210.01 1527.87,1209.09 1528.46,1208.33 1529.04,1208.67 1529.63,1209.93 1530.22,1210.13 1530.8,1210.28 1531.39,1211.42 1531.98,1209.42 1532.56,1208.73 1533.15,1207.85 1533.73,1209.32 1534.32,1210.65 1534.91,1210.82 1535.49,1210.12 1536.08,1211.23 1536.67,1211.51 1537.25,1208.11 1537.84,1207.13 1538.43,1205.33 1539.01,1206.96 1539.6,1206.01 1540.19,1206.53 1540.77,1205.56 1541.36,1206.02 1541.94,1206.24 1542.53,1205.18 1543.12,1205.43 1543.7,1207.08 1544.29,1209.96 1544.88,1210.1 1545.46,1210.39 1546.05,1211.89 1546.64,1209.79 1547.22,1207.8 1547.81,1209.59 1548.4,1213.31 1548.98,1213.22 1549.57,1211.94 1550.15,1215.65 1550.74,1216.79 1551.33,1216.59 1551.91,1216.48 1552.5,1214.16 1553.09,1214.02 1553.67,1214.26 1554.26,1214.48 1554.85,1213.4 1555.43,1212.11 1556.02,1213.52 1556.6,1215.89 1557.19,1218.15 1557.78,1216.66 1558.36,1218.69 1558.95,1217.23 1559.54,1214.83 1560.12,1213.48 1560.71,1214.77 1561.3,1216 1561.88,1214.79 1562.47,1213.54 1563.06,1214.91 1563.64,1211.54 1564.23,1210.63 1564.81,1210.94 1565.4,1208.94 1565.99,1209.2 1566.57,1210.44 1567.16,1208.32 1567.75,1210.79 1568.33,1211.27 1568.92,1211.45 1569.51,1211.54 1570.09,1211.83 1570.68,1211.89 1571.27,1212.25 1571.85,1212.47 1572.44,1212.58 1573.02,1212.52 1573.61,1213.41 1574.2,1213.68 1574.78,1214.85 1575.37,1212.43 1575.96,1212.66 1576.54,1212.62 1577.13,1212.72 1577.72,1210.42 1578.3,1209.33 1578.89,1211.79 1579.47,1211.85 1580.06,1213.27 1580.65,1213.29 1581.23,1214.33 1581.82,1215.73 1582.41,1215.7 1582.99,1215.69 1583.58,1216.72 1584.17,1220.05 1584.75,1219.55 1585.34,1216.95 1585.93,1216.86 1586.51,1216.92 1587.1,1215.49 1587.68,1213.24 1588.27,1210.87 1588.86,1212.17 1589.44,1211.03 1590.03,1211.29 1590.62,1212.75 1591.2,1214.97 1591.79,1212.66 1592.38,1214 1592.96,1215.12 1593.55,1215.22 1594.14,1213.78 1594.72,1211.36 1595.31,1211.67 1595.89,1211.61 1596.48,1214.21 1597.07,1212.73 1597.65,1216.13 1598.24,1215.96 1598.83,1214.93 1599.41,1214.99 1600,1214.91 1600.59,1216.1 1601.17,1214.93 1601.76,1216.12 1602.34,1212.66 1602.93,1212.78 1603.52,1213.81 1604.1,1214.89 1604.69,1215.97 1605.28,1213.31 1605.86,1214.75 1606.45,1214.86 1607.04,1215.87 1607.62,1216.05 1608.21,1215.83 1608.8,1214.67 1609.38,1214.51 1609.97,1217.9 1610.55,1215.5 1611.14,1212.97 1611.73,1214.07 1612.31,1211.56 1612.9,1208.25 1613.49,1207.47 1614.07,1209.98 1614.66,1209.01 1615.25,1209.2 1615.83,1207.09 1616.42,1208.73 1617.01,1208.91 1617.59,1210.54 1618.18,1210.62 1618.76,1212.15 1619.35,1212.27 1619.94,1212.28 1620.52,1215.83 1621.11,1215.56 1621.7,1215.36 1622.28,1216.6 1622.87,1216.39 1623.46,1218.52 1624.04,1220.59 1624.63,1219.27 1625.22,1220.05 1625.8,1217.58 1626.39,1217.38 1626.97,1217.07 1627.56,1216.81 1628.15,1219.04 1628.73,1224.85 1629.32,1225.42 1629.91,1223.73 1630.49,1220.84 1631.08,1219.26 1631.67,1217.81 1632.25,1216.73 1632.84,1218.75 1633.42,1217.41 1634.01,1214.88 1634.6,1214.93 1635.18,1215.95 1635.77,1217.93 1636.36,1218.74 1636.94,1219.38 1637.53,1220.29 1638.12,1219.67 1638.7,1219.47 1639.29,1222.72 1639.88,1221.1 1640.46,1220.88 1641.05,1221.5 1641.63,1221 1642.22,1221.6 1642.81,1222.4 1643.39,1220.67 1643.98,1220.2 1644.57,1215.12 1645.15,1212.85 1645.74,1212.85 1646.33,1215 1646.91,1213.68 1647.5,1212.38 1648.09,1211.05 1648.67,1211.35 1649.26,1211.29 1649.84,1209.06 1650.43,1210.9 1651.02,1210.93 1651.6,1212.3 1652.19,1211.12 1652.78,1213.45 1653.36,1212.45 1653.95,1212.93 1654.54,1212.97 1655.12,1212.02 1655.71,1208.89 1656.29,1209.52 1656.88,1208.54 1657.47,1211.2 1658.05,1211.35 1658.64,1205.64 1659.23,1207.25 1659.81,1208.79 1660.4,1210.07 1660.99,1210.1 1661.57,1210.15 1662.16,1209.04 1662.75,1210.59 1663.33,1213.15 1663.92,1213.23 1664.5,1213.17 1665.09,1211.09 1665.68,1211.5 1666.26,1211.54 1666.85,1210.54 1667.44,1210.6 1668.02,1210.7 1668.61,1212.07 1669.2,1213.37 1669.78,1214.42 1670.37,1215.81 1670.96,1214.49 1671.54,1214.4 1672.13,1215.8 1672.71,1221.66 1673.3,1220.05 1673.89,1219.92 1674.47,1217.35 1675.06,1218.36 1675.65,1220.46 1676.23,1218.02 1676.82,1218.68 1677.41,1219.42 1677.99,1217.92 1678.58,1217.64 1679.17,1216.52 1679.75,1218.67 1680.34,1219.56 1680.92,1220.41 1681.51,1219.8 1682.1,1220.75 1682.68,1218.05 1683.27,1216.91 1683.86,1216.61 1684.44,1215.32 1685.03,1213.01 1685.62,1210.49 1686.2,1209.43 1686.79,1209.61 1687.37,1212.14 1687.96,1215.62 1688.55,1215.72 1689.13,1216.86 1689.72,1213.41 1690.31,1212.19 1690.89,1210.11 1691.48,1210.41 1692.07,1211.94 1692.65,1213.2 1693.24,1213.34 1693.83,1213.22 1694.41,1216.85 1695,1214.3 1695.58,1214.24 1696.17,1213.14 1696.76,1214.3 1697.34,1217.82 1697.93,1217.46 1698.52,1215.13 1699.1,1215.17 1699.69,1215.37 1700.28,1214.2 1700.86,1214.02 1701.45,1217.55 1702.04,1217.46 1702.62,1214.94 1703.21,1212.53 1703.79,1211.97 1704.38,1214.22 1704.97,1214.65 1705.55,1215.8 1706.14,1217.07 1706.73,1216.69 1707.31,1214.13 1707.9,1212.81 1708.49,1214.12 1709.07,1216.09 1709.66,1214.66 1710.24,1212.25 1710.83,1212.39 1711.42,1212.44 1712,1211.43 1712.59,1212.77 1713.18,1213.96 1713.76,1214.04 1714.35,1214.12 1714.94,1214.03 1715.52,1215.81 1716.11,1214.98 1716.7,1215.09 1717.28,1216.24 1717.87,1216.14 1718.45,1218.63 1719.04,1218.37 1719.63,1214.67 1720.21,1214.38 1720.8,1215.45 1721.39,1211.76 1721.97,1211.75 1722.56,1211.9 1723.15,1210.84 1723.73,1211.06 1724.32,1209.97 1724.91,1212.27 1725.49,1212.19 1726.08,1212.19 1726.66,1213.7 1727.25,1211.35 1727.84,1210.29 1728.42,1209.2 1729.01,1211.78 1729.6,1213.03 1730.18,1214.1 1730.77,1214.3 1731.36,1213.02 1731.94,1215.05 1732.53,1217.23 1733.11,1216.78 1733.7,1215.6 1734.29,1216.87 1734.87,1216.95 1735.46,1214.69 1736.05,1217.18 1736.63,1217.07 1737.22,1216.85 1737.81,1216.7 1738.39,1216.76 1738.98,1214.54 1739.57,1214.37 1740.15,1215.56 1740.74,1216.64 1741.32,1216.56 1741.91,1215.5 1742.5,1215.04 1743.08,1214.8 1743.67,1213.81 1744.26,1212.67 1744.84,1211.44 1745.43,1209.28 1746.02,1209.81 1746.6,1205.61 1747.19,1203.74 1747.78,1205.8 1748.36,1206.22 1748.95,1206.55 1749.53,1208.33 1750.12,1208.68 1750.71,1210.1 1751.29,1209.17 1751.88,1210.44 1752.47,1212.69 1753.05,1214.95 1753.64,1215.06 1754.23,1215.98 1754.81,1217.05 1755.4,1218 1755.99,1215.4 1756.57,1215.07 1757.16,1215.07 1757.74,1212.63 1758.33,1212.9 1758.92,1209.49 1759.5,1210.78 1760.09,1212.19 1760.68,1211.39 1761.26,1213.91 1761.85,1214.02 1762.44,1214.09 1763.02,1216.45 1763.61,1216.42 1764.19,1214.16 1764.78,1216.5 1765.37,1217.55 1765.95,1216.52 1766.54,1217.54 1767.13,1218.42 1767.71,1220.27 1768.3,1215.41 1768.89,1215.39 1769.47,1215.15 1770.06,1214.93 1770.65,1213.87 1771.23,1213.74 1771.82,1213.85 1772.4,1212.6 1772.99,1209.93 1773.58,1211.49 1774.16,1211.49 1774.75,1209.33 1775.34,1210.78 1775.92,1212.09 1776.51,1207.57 1777.1,1207.66 1777.68,1207.86 1778.27,1205.96 1778.86,1207.6 1779.44,1209.88 1780.03,1208.87 1780.61,1211.39 1781.2,1206.81 1781.79,1209.93 1782.37,1210.33 1782.96,1210.36 1783.55,1209.43 1784.13,1209.56 1784.72,1208.61 1785.31,1210.13 1785.89,1209.22 1786.48,1206.17 1787.06,1208.02 1787.65,1208.5 1788.24,1210.72 1788.82,1211.94 1789.41,1215.63 1790,1215.74 1790.58,1215.9 1791.17,1214.62 1791.76,1210.25 1792.34,1209.27 1792.93,1208.41 1793.52,1210.94 1794.1,1211.08 1794.69,1212.49 1795.27,1211.57 1795.86,1211.49 1796.45,1211.63 1797.03,1211.88 1797.62,1210.74 1798.21,1209.62 1798.79,1211.02 1799.38,1211.26 1799.97,1211.58 1800.55,1211.77 1801.14,1213.12 1801.73,1214.34 1802.31,1214.45 1802.9,1214.35 1803.48,1214.27 1804.07,1214.04 1804.66,1212.92 1805.24,1212.89 1805.83,1211.93 1806.42,1212.33 1807,1215.99 1807.59,1214.73 1808.18,1214.6 1808.76,1216.84 1809.35,1217.99 1809.94,1217.7 1810.52,1218.7 1811.11,1218.33 1811.69,1221.58 1812.28,1222.32 1812.87,1224.12 1813.45,1222.35 1814.04,1220.55 1814.63,1220.19 1815.21,1223.48 1815.8,1222.03 1816.39,1222.72 1816.97,1223.61 1817.56,1221.97 1818.14,1221.71 1818.73,1220.22 1819.32,1222.16 1819.9,1217.15 1820.49,1217.94 1821.08,1218.84 1821.66,1219.82 1822.25,1218.39 1822.84,1217 1823.42,1214.58 1824.01,1215.82 1824.6,1213.5 1825.18,1211.07 1825.77,1211.27 1826.35,1209.96 1826.94,1212.39 1827.53,1213.64 1828.11,1216.14 1828.7,1214.95 1829.29,1214.8 1829.87,1213.48 1830.46,1212.37 1831.05,1212.25 1831.63,1211.99 1832.22,1212.13 1832.81,1211.17 1833.39,1212.26 1833.98,1212.36 1834.56,1211.03 1835.15,1212.5 1835.74,1212.43 1836.32,1210.31 1836.91,1208.04 1837.5,1207.31 1838.08,1208.84 1838.67,1211.29 1839.26,1212.8 1839.84,1214.31 1840.43,1216.21 1841.01,1218.59 1841.6,1219.49 1842.19,1221.42 1842.77,1221.07 1843.36,1220.65 1843.95,1219.02 1844.53,1218.67 1845.12,1215.04 1845.71,1213.91 1846.29,1211.68 1846.88,1215.38 1847.47,1214.14 1848.05,1217.72 1848.64,1215.24 1849.22,1216.18 1849.81,1214.9 1850.4,1213.72 1850.98,1212.73 1851.57,1211.63 1852.16,1211.84 1852.74,1211.79 1853.33,1212.01 1853.92,1210.89 1854.5,1211.28 1855.09,1210.1 1855.68,1211.48 1856.26,1210.31 1856.85,1210.46 1857.43,1208.36 1858.02,1211.27 1858.61,1210.19 1859.19,1211.37 1859.78,1211.28 1860.37,1211.21 1860.95,1210.18 1861.54,1211.64 1862.13,1211.76 1862.71,1211.71 1863.3,1211.6 1863.88,1212.78 1864.47,1212.86 1865.06,1214.14 1865.64,1214.36 1866.23,1216.56 1866.82,1218.78 1867.4,1215.87 1867.99,1215.68 1868.58,1215.42 1869.16,1217.39 1869.75,1217.08 1870.34,1215.91 1870.92,1216.71 1871.51,1216.8 1872.09,1215.62 1872.68,1214.55 1873.27,1217.62 1873.85,1216.35 1874.44,1218.45 1875.03,1215.84 1875.61,1215.67 1876.2,1214.32 1876.79,1215.48 1877.37,1213.16 1877.96,1215.55 1878.55,1214.15 1879.13,1215.39 1879.72,1216.43 1880.3,1216.4 1880.89,1215.07 1881.48,1216.22 1882.06,1218.3 1882.65,1220.5 1883.24,1216.47 1883.82,1217.69 1884.41,1216.54 1885,1216.44 1885.58,1216.47 1886.17,1217.6 1886.76,1216.26 1887.34,1217.37 1887.93,1218.36 1888.51,1214.52 1889.1,1213.57 1889.69,1210.17 1890.27,1210.42 1890.86,1211.73 1891.45,1210.68 1892.03,1212.03 1892.62,1212.16 1893.21,1209.84 1893.79,1209.05 1894.38,1207.99 1894.96,1208.42 1895.55,1209.73 1896.14,1214.56 1896.72,1215.72 1897.31,1216.67 1897.9,1215.3 1898.48,1215.41 1899.07,1214.2 1899.66,1212.93 1900.24,1213.05 1900.83,1213.06 1901.42,1213.29 1902,1212.22 1902.59,1212.46 1903.17,1211.52 1903.76,1212.61 1904.35,1213.61 1904.93,1213.66 1905.52,1211.37 1906.11,1210.51 1906.69,1213.13 1907.28,1213.23 1907.87,1214.27 1908.45,1211.98 1909.04,1210.98 1909.63,1212.49 1910.21,1211.49 1910.8,1215.21 1911.38,1214.23 1911.97,1214.55 1912.56,1214.61 1913.14,1213.43 1913.73,1209.79 1914.32,1209.76 1914.9,1209.94 1915.49,1211.37 1916.08,1212.18 1916.66,1214.65 1917.25,1214.7 1917.83,1214.66 1918.42,1212.31 1919.01,1214.86 1919.59,1213.73 1920.18,1215.94 1920.77,1216.09 1921.35,1220.81 1921.94,1220.37 1922.53,1220.36 1923.11,1219.85 1923.7,1219.47 1924.29,1216.75 1924.87,1214.27 1925.46,1214.23 1926.04,1216.35 1926.63,1216.3 1927.22,1216.15 1927.8,1216.09 1928.39,1217.27 1928.98,1215.82 1929.56,1213.19 1930.15,1214.33 1930.74,1214.51 1931.32,1215.56 1931.91,1216.82 1932.5,1217.86 1933.08,1217.7 1933.67,1218.5 1934.25,1219.34 1934.84,1220.3 1935.43,1219.88 1936.01,1221.77 1936.6,1221.57 1937.19,1220.96 1937.77,1218.56 1938.36,1215.93 1938.95,1214.78 1939.53,1213.72 1940.12,1216.18 1940.71,1218.36 1941.29,1217.27 1941.88,1218.36 1942.46,1215.73 1943.05,1214.29 1943.64,1210.44 1944.22,1207.06 1944.81,1208.26 1945.4,1208.39 1945.98,1208.77 1946.57,1206.8 1947.16,1210.48 1947.74,1209.59 1948.33,1210 1948.91,1209.01 1949.5,1208.07 1950.09,1207.24 1950.67,1208.51 1951.26,1210.13 1951.85,1209.4 1952.43,1210.8 1953.02,1211.11 1953.61,1210.2 1954.19,1210.05 1954.78,1211.41 1955.37,1210.44 1955.95,1210.69 1956.54,1209.72 1957.12,1209.04 1957.71,1210.45 1958.3,1208.33 1958.88,1211.24 1959.47,1214.69 1960.06,1214.8 1960.64,1212.18 1961.23,1212.33 1961.82,1212.73 1962.4,1210.53 1962.99,1211.61 1963.58,1214.12 1964.16,1212.76 1964.75,1209.39 1965.33,1213.1 1965.92,1213.26 1966.51,1212.37 1967.09,1214.8 1967.68,1214.93 1968.27,1214.92 1968.85,1213.75 1969.44,1212.71 1970.03,1214.16 1970.61,1215.82 1971.2,1214.74 1971.78,1213.86 1972.37,1213.8 1972.96,1214.03 1973.54,1214.25 1974.13,1215.45 1974.72,1214.2 1975.3,1213.12 1975.89,1211.89 1976.48,1214.25 1977.06,1213.08 1977.65,1214.53 1978.24,1214.61 1978.82,1213.55 1979.41,1213.45 1979.99,1214.87 1980.58,1210.12 1981.17,1211.32 1981.75,1213.86 1982.34,1214.06 1982.93,1210.44 1983.51,1209.2 1984.1,1206.79 1984.69,1206.13 1985.27,1205.14 1985.86,1206.67 1986.45,1206.9 1987.03,1206.16 1987.62,1206.67 1988.2,1206.92 1988.79,1208.41 1989.38,1208.62 1989.96,1207.87 1990.55,1206.87 1991.14,1206.22 1991.72,1206.46 1992.31,1207.97 1992.9,1208.59 1993.48,1209.93 1994.07,1209.99 1994.65,1210.35 1995.24,1210.27 1995.83,1212.92 1996.41,1213.44 1997,1213.4 1997.59,1211.9 1998.17,1214.2 1998.76,1215.54 1999.35,1215.63 1999.93,1215.23 2000.52,1212.67 2001.11,1212.63 2001.69,1212.99 2002.28,1214.27 2002.86,1215.75 2003.45,1215.77 2004.04,1217.93 2004.62,1217.74 2005.21,1218.75 2005.8,1222.08 2006.38,1223.96 2006.97,1221.97 2007.56,1222.88 2008.14,1223.57 2008.73,1220.56 2009.32,1222.78 2009.9,1223.64 2010.49,1219.51 2011.07,1218.04 2011.66,1216.87 2012.25,1217.83 2012.83,1217.43 2013.42,1217.27 2014.01,1217.16 2014.59,1214.52 2015.18,1212.34 2015.77,1211.43 2016.35,1210.33 2016.94,1211.97 2017.53,1212.03 2018.11,1212.17 2018.7,1211.08 2019.28,1212.24 2019.87,1213.48 2020.46,1214.73 2021.04,1214.71 2021.63,1214.85 2022.22,1215.91 2022.8,1215.52 2023.39,1215.32 2023.98,1217.54 2024.56,1216.16 2025.15,1215 2025.73,1211.47 2026.32,1209.11 2026.91,1208.47 2027.49,1207.56 2028.08,1210.34 2028.67,1212.87 2029.25,1213.03 2029.84,1213.06 2030.43,1214.26 2031.01,1213.22 2031.6,1211.14 2032.19,1212.46 2032.77,1212.12 2033.36,1212.02 2033.94,1213.1 2034.53,1214.22 2035.12,1213.96 2035.7,1213.07 2036.29,1215.29 2036.88,1215.26 2037.46,1215.26 2038.05,1215.12 2038.64,1214 2039.22,1216.47 2039.81,1217.44 2040.4,1223.1 2040.98,1221.74 2041.57,1224.64 2042.15,1223.95 2042.74,1219.83 2043.33,1217.47 2043.91,1217.41 2044.5,1220.79 2045.09,1217.9 2045.67,1217.56 2046.26,1217.42 2046.85,1217.35 2047.43,1218.11 2048.02,1217.82 2048.6,1215.45 2049.19,1215.38 2049.78,1216.42 2050.36,1215.14 2050.95,1215.16 2051.54,1213.8 2052.12,1212.73 2052.71,1210.42 2053.3,1210.42 2053.88,1210.86 2054.47,1210.92 2055.06,1207.71 2055.64,1210.43 2056.23,1211.62 2056.81,1210.53 2057.4,1209.64 2057.99,1209.94 2058.57,1209.14 2059.16,1210.44 2059.75,1209.49 2060.33,1208.63 2060.92,1211.29 2061.51,1205.74 2062.09,1208.41 2062.68,1209.7 2063.27,1211.01 2063.85,1211.14 2064.44,1208.91 2065.02,1210.33 2065.61,1212.8 2066.2,1211.63 2066.78,1211.59 2067.37,1212.97 2067.96,1212.99 2068.54,1214.14 2069.13,1213.83 2069.72,1214.9 2070.3,1213.67 2070.89,1212.59 2071.48,1212.57 2072.06,1213.84 2072.65,1213.65 2073.23,1213.64 2073.82,1213.58 2074.41,1215.91 2074.99,1216.17 2075.58,1215.05 2076.17,1217.43 2076.75,1217.36 2077.34,1220.45 2077.93,1216.57 2078.51,1216.4 2079.1,1218.9 2079.68,1221.04 2080.27,1219.34 2080.86,1219.2 2081.44,1217.98 2082.03,1218.78 2082.62,1220.88 2083.2,1218.33 2083.79,1220.44 2084.38,1222.71 2084.96,1223.33 2085.55,1223.06 2086.14,1220.4 2086.72,1218.74 2087.31,1219.69 2087.89,1219.46 2088.48,1216.84 2089.07,1217.68 2089.65,1216.47 2090.24,1216.46 2090.83,1217.23 2091.41,1218.13 2092,1217.88 2092.59,1217.66 2093.17,1218.83 2093.76,1219.78 2094.35,1219.48 2094.93,1218.19 2095.52,1219.14 2096.1,1218.68 2096.69,1218.43 2097.28,1218.23 2097.86,1219 2098.45,1218.93 2099.04,1218.22 2099.62,1217.99 2100.21,1217.81 2100.8,1216.7 2101.38,1215.47 2101.97,1214.38 2102.55,1214.49 2103.14,1214.43 2103.73,1214.25 2104.31,1213.09 2104.9,1212.13 2105.49,1210.8 2106.07,1210.07 2106.66,1208.03 2107.25,1207.04 2107.83,1208.65 2108.42,1208.77 2109.01,1211.28 2109.59,1211.71 2110.18,1210.73 2110.76,1212.12 2111.35,1211.03 2111.94,1213.44 2112.52,1213.36 2113.11,1213.38 2113.7,1212.59 2114.28,1212.47 2114.87,1212.52 2115.46,1211.5 2116.04,1213.91 2116.63,1210.46 2117.22,1209.38 2117.8,1209.59 2118.39,1211.1 2118.97,1212.39 2119.56,1211.17 2120.15,1213.54 2120.73,1213.55 2121.32,1212.66 2121.91,1215.05 2122.49,1213.87 2123.08,1213.84 2123.67,1211.56 2124.25,1212.79 2124.84,1212.81 2125.42,1212.89 2126.01,1213.05 2126.6,1213.22 2127.18,1215.49 2127.77,1214.22 2128.36,1214.36 2128.94,1214.67 2129.53,1214.71 2130.12,1215.87 2130.7,1215.53 2131.29,1216.41 2131.88,1216.36 2132.46,1213.9 2133.05,1214.05 2133.63,1212.84 2134.22,1210.66 2134.81,1211.93 2135.39,1213.36 2135.98,1213.51 2136.57,1214.71 2137.15,1215.89 2137.74,1215.84 2138.33,1215.79 2138.91,1213.42 2139.5,1213.21 2140.09,1215.6 2140.67,1218 2141.26,1216.8 2141.84,1214.7 2142.43,1215.63 2143.02,1216.81 2143.6,1215.68 2144.19,1215.79 2144.78,1217.98 2145.36,1217.75 2145.95,1216.46 2146.54,1215.82 2147.12,1215.69 2147.71,1216.64 2148.3,1216.39 2148.88,1217.31 2149.47,1216.92 2150.05,1215.34 2150.64,1217.55 2151.23,1217.59 2151.81,1219.46 2152.4,1219.13 2152.99,1217.76 2153.57,1216.21 2154.16,1214.8 2154.75,1213.37 2155.33,1216.88 2155.92,1217.82 2156.5,1220.03 2157.09,1220.67 2157.68,1219.94 2158.26,1219.94 \"/>\n<path clip-path=\"url(#clip462)\" d=\"M986.025 1214.65 L986.612 1214.65 L987.198 1214.65 L987.785 1214.65 L988.371 1214.65 L988.957 1214.65 L989.544 1214.65 L990.13 1214.65 L990.717 1214.65 L991.303 1214.65 L991.889 1214.65 L992.476 1214.65 L993.062 1214.65 L993.649 1214.65 L994.235 1214.65 L994.822 1214.65 L995.408 1214.65 L995.994 1214.65 L996.581 1214.65 L997.167 1214.65 L997.754 1214.65 L998.34 1214.65 L998.926 1214.65 L999.513 1214.65 L1000.1 1214.65 L1000.69 1214.65 L1001.27 1214.65 L1001.86 1214.65 L1002.44 1214.65 L1003.03 1214.65 L1003.62 1214.65 L1004.2 1214.65 L1004.79 1214.65 L1005.38 1214.65 L1005.96 1214.65 L1006.55 1214.65 L1007.14 1214.65 L1007.72 1214.65 L1008.31 1214.65 L1008.9 1214.65 L1009.48 1214.65 L1010.07 1214.65 L1010.65 1214.65 L1011.24 1214.65 L1011.83 1214.65 L1012.41 1214.65 L1013 1214.65 L1013.59 1214.65 L1014.17 1214.65 L1014.76 1214.65 L1015.35 1214.65 L1015.93 1214.65 L1016.52 1214.65 L1017.11 1214.65 L1017.69 1214.65 L1018.28 1214.65 L1018.86 1214.65 L1019.45 1214.65 L1020.04 1214.65 L1020.62 1214.65 L1021.21 1214.65 L1021.8 1214.65 L1022.38 1214.65 L1022.97 1214.65 L1023.56 1214.65 L1024.14 1214.65 L1024.73 1214.65 L1025.32 1214.65 L1025.9 1214.65 L1026.49 1214.65 L1027.07 1214.65 L1027.66 1214.65 L1028.25 1214.65 L1028.83 1214.65 L1029.42 1214.65 L1030.01 1214.65 L1030.59 1214.65 L1031.18 1214.65 L1031.77 1214.65 L1032.35 1214.65 L1032.94 1214.65 L1033.52 1214.65 L1034.11 1214.65 L1034.7 1214.65 L1035.28 1214.65 L1035.87 1214.65 L1036.46 1214.65 L1037.04 1214.65 L1037.63 1214.65 L1038.22 1214.65 L1038.8 1214.65 L1039.39 1214.65 L1039.98 1214.65 L1040.56 1214.65 L1041.15 1214.65 L1041.73 1214.65 L1042.32 1214.65 L1042.91 1214.65 L1043.49 1214.65 L1044.08 1214.65 L1044.67 1214.65 L1045.25 1214.65 L1045.84 1214.65 L1046.43 1214.65 L1047.01 1214.65 L1047.6 1214.65 L1048.19 1214.65 L1048.77 1214.65 L1049.36 1214.65 L1049.94 1214.65 L1050.53 1214.65 L1051.12 1214.65 L1051.7 1214.65 L1052.29 1214.65 L1052.88 1214.65 L1053.46 1214.65 L1054.05 1214.65 L1054.64 1214.65 L1055.22 1214.65 L1055.81 1214.65 L1056.39 1214.65 L1056.98 1214.65 L1057.57 1214.65 L1058.15 1214.65 L1058.74 1214.65 L1059.33 1214.65 L1059.91 1214.65 L1060.5 1214.65 L1061.09 1214.65 L1061.67 1214.65 L1062.26 1214.65 L1062.85 1214.65 L1063.43 1214.65 L1064.02 1214.65 L1064.6 1214.65 L1065.19 1214.65 L1065.78 1214.65 L1066.36 1214.65 L1066.95 1214.65 L1067.54 1214.65 L1068.12 1214.65 L1068.71 1214.65 L1069.3 1214.65 L1069.88 1214.65 L1070.47 1214.65 L1071.06 1214.65 L1071.64 1214.65 L1072.23 1214.65 L1072.81 1214.65 L1073.4 1214.65 L1073.99 1214.65 L1074.57 1214.65 L1075.16 1214.65 L1075.75 1214.65 L1076.33 1214.65 L1076.92 1214.65 L1077.51 1214.65 L1078.09 1214.65 L1078.68 1214.65 L1079.26 1214.65 L1079.85 1214.65 L1080.44 1214.65 L1081.02 1214.65 L1081.61 1214.65 L1082.2 1214.65 L1082.78 1214.65 L1083.37 1214.65 L1083.96 1214.65 L1084.54 1214.65 L1085.13 1214.65 L1085.72 1214.65 L1086.3 1214.65 L1086.89 1214.65 L1087.47 1214.65 L1088.06 1214.65 L1088.65 1214.65 L1089.23 1214.65 L1089.82 1214.65 L1090.41 1214.65 L1090.99 1214.65 L1091.58 1214.65 L1092.17 1214.65 L1092.75 1214.65 L1093.34 1214.65 L1093.93 1214.65 L1094.51 1214.65 L1095.1 1214.65 L1095.68 1214.65 L1096.27 1214.65 L1096.86 1214.65 L1097.44 1214.65 L1098.03 1214.65 L1098.62 1214.65 L1099.2 1214.65 L1099.79 1214.65 L1100.38 1214.65 L1100.96 1214.65 L1101.55 1214.65 L1102.14 1214.65 L1102.72 1214.65 L1103.31 1214.65 L1103.89 1214.65 L1104.48 1214.65 L1105.07 1214.65 L1105.65 1214.65 L1106.24 1214.65 L1106.83 1214.65 L1107.41 1214.65 L1108 1214.65 L1108.59 1214.65 L1109.17 1214.65 L1109.76 1214.65 L1110.34 1214.65 L1110.93 1214.65 L1111.52 1214.65 L1112.1 1214.65 L1112.69 1214.65 L1113.28 1214.65 L1113.86 1214.65 L1114.45 1214.65 L1115.04 1214.65 L1115.62 1214.65 L1116.21 1214.65 L1116.8 1214.65 L1117.38 1214.65 L1117.97 1214.65 L1118.55 1214.65 L1119.14 1214.65 L1119.73 1214.65 L1120.31 1214.65 L1120.9 1214.65 L1121.49 1214.65 L1122.07 1214.65 L1122.66 1214.65 L1123.25 1214.65 L1123.83 1214.65 L1124.42 1214.65 L1125.01 1214.65 L1125.59 1214.65 L1126.18 1214.65 L1126.76 1214.65 L1127.35 1214.65 L1127.94 1214.65 L1128.52 1214.65 L1129.11 1214.65 L1129.7 1214.65 L1130.28 1214.65 L1130.87 1214.65 L1131.46 1214.65 L1132.04 1214.65 L1132.63 1214.65 L1133.21 1214.65 L1133.8 1214.65 L1134.39 1214.65 L1134.97 1214.65 L1135.56 1214.65 L1136.15 1214.65 L1136.73 1214.65 L1137.32 1214.65 L1137.91 1214.65 L1138.49 1214.65 L1139.08 1214.65 L1139.67 1214.65 L1140.25 1214.65 L1140.84 1214.65 L1141.42 1214.65 L1142.01 1214.65 L1142.6 1214.65 L1143.18 1214.65 L1143.77 1214.65 L1144.36 1214.65 L1144.94 1214.65 L1145.53 1214.65 L1146.12 1214.65 L1146.7 1214.65 L1147.29 1214.65 L1147.88 1214.65 L1148.46 1214.65 L1149.05 1214.65 L1149.63 1214.65 L1150.22 1214.65 L1150.81 1214.65 L1151.39 1214.65 L1151.98 1214.65 L1152.57 1214.65 L1153.15 1214.65 L1153.74 1214.65 L1154.33 1214.65 L1154.91 1214.65 L1155.5 1214.65 L1156.09 1214.65 L1156.67 1214.65 L1157.26 1214.65 L1157.84 1214.65 L1158.43 1214.65 L1159.02 1214.65 L1159.6 1214.65 L1160.19 1214.65 L1160.78 1214.65 L1161.36 1214.65 L1161.95 1214.65 L1162.54 1214.65 L1163.12 1214.65 L1163.71 1214.65 L1164.29 1214.65 L1164.88 1214.65 L1165.47 1214.65 L1166.05 1214.65 L1166.64 1214.65 L1167.23 1214.65 L1167.81 1214.65 L1168.4 1214.65 L1168.99 1214.65 L1169.57 1214.65 L1170.16 1214.65 L1170.75 1214.65 L1171.33 1214.65 L1171.92 1214.65 L1172.5 1214.65 L1173.09 1214.65 L1173.68 1214.65 L1174.26 1214.65 L1174.85 1214.65 L1175.44 1214.65 L1176.02 1214.65 L1176.61 1214.65 L1177.2 1214.65 L1177.78 1214.65 L1178.37 1214.65 L1178.96 1214.65 L1179.54 1214.65 L1180.13 1214.65 L1180.71 1214.65 L1181.3 1214.65 L1181.89 1214.65 L1182.47 1214.65 L1183.06 1214.65 L1183.65 1214.65 L1184.23 1214.65 L1184.82 1214.65 L1185.41 1214.65 L1185.99 1214.65 L1186.58 1214.65 L1187.16 1214.65 L1187.75 1214.65 L1188.34 1214.65 L1188.92 1214.65 L1189.51 1214.65 L1190.1 1214.65 L1190.68 1214.65 L1191.27 1214.65 L1191.86 1214.65 L1192.44 1214.65 L1193.03 1214.65 L1193.62 1214.65 L1194.2 1214.65 L1194.79 1214.65 L1195.37 1214.65 L1195.96 1214.65 L1196.55 1214.65 L1197.13 1214.65 L1197.72 1214.65 L1198.31 1214.65 L1198.89 1214.65 L1199.48 1214.65 L1200.07 1214.65 L1200.65 1214.65 L1201.24 1214.65 L1201.83 1214.65 L1202.41 1214.65 L1203 1214.65 L1203.58 1214.65 L1204.17 1214.65 L1204.76 1214.65 L1205.34 1214.65 L1205.93 1214.65 L1206.52 1214.65 L1207.1 1214.65 L1207.69 1214.65 L1208.28 1214.65 L1208.86 1214.65 L1209.45 1214.65 L1210.03 1214.65 L1210.62 1214.65 L1211.21 1214.65 L1211.79 1214.65 L1212.38 1214.65 L1212.97 1214.65 L1213.55 1214.65 L1214.14 1214.65 L1214.73 1214.65 L1215.31 1214.65 L1215.9 1214.65 L1216.49 1214.65 L1217.07 1214.65 L1217.66 1214.65 L1218.24 1214.65 L1218.83 1214.65 L1219.42 1214.65 L1220 1214.65 L1220.59 1214.65 L1221.18 1214.65 L1221.76 1214.65 L1222.35 1214.65 L1222.94 1214.65 L1223.52 1214.65 L1224.11 1214.65 L1224.7 1214.65 L1225.28 1214.65 L1225.87 1214.65 L1226.45 1214.65 L1227.04 1214.65 L1227.63 1214.65 L1228.21 1214.65 L1228.8 1214.65 L1229.39 1214.65 L1229.97 1214.65 L1230.56 1214.65 L1231.15 1214.65 L1231.73 1214.65 L1232.32 1214.65 L1232.91 1214.65 L1233.49 1214.65 L1234.08 1214.65 L1234.66 1214.65 L1235.25 1214.65 L1235.84 1214.65 L1236.42 1214.65 L1237.01 1214.65 L1237.6 1214.65 L1238.18 1214.65 L1238.77 1214.65 L1239.36 1214.65 L1239.94 1214.65 L1240.53 1214.65 L1241.11 1214.65 L1241.7 1214.65 L1242.29 1214.65 L1242.87 1214.65 L1243.46 1214.65 L1244.05 1214.65 L1244.63 1214.65 L1245.22 1214.65 L1245.81 1214.65 L1246.39 1214.65 L1246.98 1214.65 L1247.57 1214.65 L1248.15 1214.65 L1248.74 1214.65 L1249.32 1214.65 L1249.91 1214.65 L1250.5 1214.65 L1251.08 1214.65 L1251.67 1214.65 L1252.26 1214.65 L1252.84 1214.65 L1253.43 1214.65 L1254.02 1214.65 L1254.6 1214.65 L1255.19 1214.65 L1255.78 1214.65 L1256.36 1214.65 L1256.95 1214.65 L1257.53 1214.65 L1258.12 1214.65 L1258.71 1214.65 L1259.29 1214.65 L1259.88 1214.65 L1260.47 1214.65 L1261.05 1214.65 L1261.64 1214.65 L1262.23 1214.65 L1262.81 1214.65 L1263.4 1214.65 L1263.98 1214.65 L1264.57 1214.65 L1265.16 1214.65 L1265.74 1214.65 L1266.33 1214.65 L1266.92 1214.65 L1267.5 1214.65 L1268.09 1214.65 L1268.68 1214.65 L1269.26 1214.65 L1269.85 1214.65 L1270.44 1214.65 L1271.02 1214.65 L1271.61 1214.65 L1272.19 1214.65 L1272.78 1214.65 L1273.37 1214.65 L1273.95 1214.65 L1274.54 1214.65 L1275.13 1214.65 L1275.71 1214.65 L1276.3 1214.65 L1276.89 1214.65 L1277.47 1214.65 L1278.06 1214.65 L1278.65 1214.65 L1279.23 1214.65 L1279.82 1214.65 L1280.4 1214.65 L1280.99 1214.65 L1281.58 1214.65 L1282.16 1214.65 L1282.75 1214.65 L1283.34 1214.65 L1283.92 1214.65 L1284.51 1214.65 L1285.1 1214.65 L1285.68 1214.65 L1286.27 1214.65 L1286.86 1214.65 L1287.44 1214.65 L1288.03 1214.65 L1288.61 1214.65 L1289.2 1214.65 L1289.79 1214.65 L1290.37 1214.65 L1290.96 1214.65 L1291.55 1214.65 L1292.13 1214.65 L1292.72 1214.65 L1293.31 1214.65 L1293.89 1214.65 L1294.48 1214.65 L1295.06 1214.65 L1295.65 1214.65 L1296.24 1214.65 L1296.82 1214.65 L1297.41 1214.65 L1298 1214.65 L1298.58 1214.65 L1299.17 1214.65 L1299.76 1214.65 L1300.34 1214.65 L1300.93 1214.65 L1301.52 1214.65 L1302.1 1214.65 L1302.69 1214.65 L1303.27 1214.65 L1303.86 1214.65 L1304.45 1214.65 L1305.03 1214.65 L1305.62 1214.65 L1306.21 1214.65 L1306.79 1214.65 L1307.38 1214.65 L1307.97 1214.65 L1308.55 1214.65 L1309.14 1214.65 L1309.73 1214.65 L1310.31 1214.65 L1310.9 1214.65 L1311.48 1214.65 L1312.07 1214.65 L1312.66 1214.65 L1313.24 1214.65 L1313.83 1214.65 L1314.42 1214.65 L1315 1214.65 L1315.59 1214.65 L1316.18 1214.65 L1316.76 1214.65 L1317.35 1214.65 L1317.93 1214.65 L1318.52 1214.65 L1319.11 1214.65 L1319.69 1214.65 L1320.28 1214.65 L1320.87 1214.65 L1321.45 1214.65 L1322.04 1214.65 L1322.63 1214.65 L1323.21 1214.65 L1323.8 1214.65 L1324.39 1214.65 L1324.97 1214.65 L1325.56 1214.65 L1326.14 1214.65 L1326.73 1214.65 L1327.32 1214.65 L1327.9 1214.65 L1328.49 1214.65 L1329.08 1214.65 L1329.66 1214.65 L1330.25 1214.65 L1330.84 1214.65 L1331.42 1214.65 L1332.01 1214.65 L1332.6 1214.65 L1333.18 1214.65 L1333.77 1214.65 L1334.35 1214.65 L1334.94 1214.65 L1335.53 1214.65 L1336.11 1214.65 L1336.7 1214.65 L1337.29 1214.65 L1337.87 1214.65 L1338.46 1214.65 L1339.05 1214.65 L1339.63 1214.65 L1340.22 1214.65 L1340.8 1214.65 L1341.39 1214.65 L1341.98 1214.65 L1342.56 1214.65 L1343.15 1214.65 L1343.74 1214.65 L1344.32 1214.65 L1344.91 1214.65 L1345.5 1214.65 L1346.08 1214.65 L1346.67 1214.65 L1347.26 1214.65 L1347.84 1214.65 L1348.43 1214.65 L1349.01 1214.65 L1349.6 1214.65 L1350.19 1214.65 L1350.77 1214.65 L1351.36 1214.65 L1351.95 1214.65 L1352.53 1214.65 L1353.12 1214.65 L1353.71 1214.65 L1354.29 1214.65 L1354.88 1214.65 L1355.47 1214.65 L1356.05 1214.65 L1356.64 1214.65 L1357.22 1214.65 L1357.81 1214.65 L1358.4 1214.65 L1358.98 1214.65 L1359.57 1214.65 L1360.16 1214.65 L1360.74 1214.65 L1361.33 1214.65 L1361.92 1214.65 L1362.5 1214.65 L1363.09 1214.65 L1363.68 1214.65 L1364.26 1214.65 L1364.85 1214.65 L1365.43 1214.65 L1366.02 1214.65 L1366.61 1214.65 L1367.19 1214.65 L1367.78 1214.65 L1368.37 1214.65 L1368.95 1214.65 L1369.54 1214.65 L1370.13 1214.65 L1370.71 1214.65 L1371.3 1214.65 L1371.88 1214.65 L1372.47 1214.65 L1373.06 1214.65 L1373.64 1214.65 L1374.23 1214.65 L1374.82 1214.65 L1375.4 1214.65 L1375.99 1214.65 L1376.58 1214.65 L1377.16 1214.65 L1377.75 1214.65 L1378.34 1214.65 L1378.92 1214.65 L1379.51 1214.65 L1380.09 1214.65 L1380.68 1214.65 L1381.27 1214.65 L1381.85 1214.65 L1382.44 1214.65 L1383.03 1214.65 L1383.61 1214.65 L1384.2 1214.65 L1384.79 1214.65 L1385.37 1214.65 L1385.96 1214.65 L1386.55 1214.65 L1387.13 1214.65 L1387.72 1214.65 L1388.3 1214.65 L1388.89 1214.65 L1389.48 1214.65 L1390.06 1214.65 L1390.65 1214.65 L1391.24 1214.65 L1391.82 1214.65 L1392.41 1214.65 L1393 1214.65 L1393.58 1214.65 L1394.17 1214.65 L1394.75 1214.65 L1395.34 1214.65 L1395.93 1214.65 L1396.51 1214.65 L1397.1 1214.65 L1397.69 1214.65 L1398.27 1214.65 L1398.86 1214.65 L1399.45 1214.65 L1400.03 1214.65 L1400.62 1214.65 L1401.21 1214.65 L1401.79 1214.65 L1402.38 1214.65 L1402.96 1214.65 L1403.55 1214.65 L1404.14 1214.65 L1404.72 1214.65 L1405.31 1214.65 L1405.9 1214.65 L1406.48 1214.65 L1407.07 1214.65 L1407.66 1214.65 L1408.24 1214.65 L1408.83 1214.65 L1409.42 1214.65 L1410 1214.65 L1410.59 1214.65 L1411.17 1214.65 L1411.76 1214.65 L1412.35 1214.65 L1412.93 1214.65 L1413.52 1214.65 L1414.11 1214.65 L1414.69 1214.65 L1415.28 1214.65 L1415.87 1214.65 L1416.45 1214.65 L1417.04 1214.65 L1417.63 1214.65 L1418.21 1214.65 L1418.8 1214.65 L1419.38 1214.65 L1419.97 1214.65 L1420.56 1214.65 L1421.14 1214.65 L1421.73 1214.65 L1422.32 1214.65 L1422.9 1214.65 L1423.49 1214.65 L1424.08 1214.65 L1424.66 1214.65 L1425.25 1214.65 L1425.83 1214.65 L1426.42 1214.65 L1427.01 1214.65 L1427.59 1214.65 L1428.18 1214.65 L1428.77 1214.65 L1429.35 1214.65 L1429.94 1214.65 L1430.53 1214.65 L1431.11 1214.65 L1431.7 1214.65 L1432.29 1214.65 L1432.87 1214.65 L1433.46 1214.65 L1434.04 1214.65 L1434.63 1214.65 L1435.22 1214.65 L1435.8 1214.65 L1436.39 1214.65 L1436.98 1214.65 L1437.56 1214.65 L1438.15 1214.65 L1438.74 1214.65 L1439.32 1214.65 L1439.91 1214.65 L1440.5 1214.65 L1441.08 1214.65 L1441.67 1214.65 L1442.25 1214.65 L1442.84 1214.65 L1443.43 1214.65 L1444.01 1214.65 L1444.6 1214.65 L1445.19 1214.65 L1445.77 1214.65 L1446.36 1214.65 L1446.95 1214.65 L1447.53 1214.65 L1448.12 1214.65 L1448.7 1214.65 L1449.29 1214.65 L1449.88 1214.65 L1450.46 1214.65 L1451.05 1214.65 L1451.64 1214.65 L1452.22 1214.65 L1452.81 1214.65 L1453.4 1214.65 L1453.98 1214.65 L1454.57 1214.65 L1455.16 1214.65 L1455.74 1214.65 L1456.33 1214.65 L1456.91 1214.65 L1457.5 1214.65 L1458.09 1214.65 L1458.67 1214.65 L1459.26 1214.65 L1459.85 1214.65 L1460.43 1214.65 L1461.02 1214.65 L1461.61 1214.65 L1462.19 1214.65 L1462.78 1214.65 L1463.37 1214.65 L1463.95 1214.65 L1464.54 1214.65 L1465.12 1214.65 L1465.71 1214.65 L1466.3 1214.65 L1466.88 1214.65 L1467.47 1214.65 L1468.06 1214.65 L1468.64 1214.65 L1469.23 1214.65 L1469.82 1214.65 L1470.4 1214.65 L1470.99 1214.65 L1471.57 1214.65 L1472.16 1214.65 L1472.75 1214.65 L1473.33 1214.65 L1473.92 1214.65 L1474.51 1214.65 L1475.09 1214.65 L1475.68 1214.65 L1476.27 1214.65 L1476.85 1214.65 L1477.44 1214.65 L1478.03 1214.65 L1478.61 1214.65 L1479.2 1214.65 L1479.78 1214.65 L1480.37 1214.65 L1480.96 1214.65 L1481.54 1214.65 L1482.13 1214.65 L1482.72 1214.65 L1483.3 1214.65 L1483.89 1214.65 L1484.48 1214.65 L1485.06 1214.65 L1485.65 1214.65 L1486.24 1214.65 L1486.82 1214.65 L1487.41 1214.65 L1487.99 1214.65 L1488.58 1214.65 L1489.17 1214.65 L1489.75 1214.65 L1490.34 1214.65 L1490.93 1214.65 L1491.51 1214.65 L1492.1 1214.65 L1492.69 1214.65 L1493.27 1214.65 L1493.86 1214.65 L1494.45 1214.65 L1495.03 1214.65 L1495.62 1214.65 L1496.2 1214.65 L1496.79 1214.65 L1497.38 1214.65 L1497.96 1214.65 L1498.55 1214.65 L1499.14 1214.65 L1499.72 1214.65 L1500.31 1214.65 L1500.9 1214.65 L1501.48 1214.65 L1502.07 1214.65 L1502.65 1214.65 L1503.24 1214.65 L1503.83 1214.65 L1504.41 1214.65 L1505 1214.65 L1505.59 1214.65 L1506.17 1214.65 L1506.76 1214.65 L1507.35 1214.65 L1507.93 1214.65 L1508.52 1214.65 L1509.11 1214.65 L1509.69 1214.65 L1510.28 1214.65 L1510.86 1214.65 L1511.45 1214.65 L1512.04 1214.65 L1512.62 1214.65 L1513.21 1214.65 L1513.8 1214.65 L1514.38 1214.65 L1514.97 1214.65 L1515.56 1214.65 L1516.14 1214.65 L1516.73 1214.65 L1517.32 1214.65 L1517.9 1214.65 L1518.49 1214.65 L1519.07 1214.65 L1519.66 1214.65 L1520.25 1214.65 L1520.83 1214.65 L1521.42 1214.65 L1522.01 1214.65 L1522.59 1214.65 L1523.18 1214.65 L1523.77 1214.65 L1524.35 1214.65 L1524.94 1214.65 L1525.52 1214.65 L1526.11 1214.65 L1526.7 1214.65 L1527.28 1214.65 L1527.87 1214.65 L1528.46 1214.65 L1529.04 1214.65 L1529.63 1214.65 L1530.22 1214.65 L1530.8 1214.65 L1531.39 1214.65 L1531.98 1214.65 L1532.56 1214.65 L1533.15 1214.65 L1533.73 1214.65 L1534.32 1214.65 L1534.91 1214.65 L1535.49 1214.65 L1536.08 1214.65 L1536.67 1214.65 L1537.25 1214.65 L1537.84 1214.65 L1538.43 1214.65 L1539.01 1214.65 L1539.6 1214.65 L1540.19 1214.65 L1540.77 1214.65 L1541.36 1214.65 L1541.94 1214.65 L1542.53 1214.65 L1543.12 1214.65 L1543.7 1214.65 L1544.29 1214.65 L1544.88 1214.65 L1545.46 1214.65 L1546.05 1214.65 L1546.64 1214.65 L1547.22 1214.65 L1547.81 1214.65 L1548.4 1214.65 L1548.98 1214.65 L1549.57 1214.65 L1550.15 1214.65 L1550.74 1214.65 L1551.33 1214.65 L1551.91 1214.65 L1552.5 1214.65 L1553.09 1214.65 L1553.67 1214.65 L1554.26 1214.65 L1554.85 1214.65 L1555.43 1214.65 L1556.02 1214.65 L1556.6 1214.65 L1557.19 1214.65 L1557.78 1214.65 L1558.36 1214.65 L1558.95 1214.65 L1559.54 1214.65 L1560.12 1214.65 L1560.71 1214.65 L1561.3 1214.65 L1561.88 1214.65 L1562.47 1214.65 L1563.06 1214.65 L1563.64 1214.65 L1564.23 1214.65 L1564.81 1214.65 L1565.4 1214.65 L1565.99 1214.65 L1566.57 1214.65 L1567.16 1214.65 L1567.75 1214.65 L1568.33 1214.65 L1568.92 1214.65 L1569.51 1214.65 L1570.09 1214.65 L1570.68 1214.65 L1571.27 1214.65 L1571.85 1214.65 L1572.44 1214.65 L1573.02 1214.65 L1573.61 1214.65 L1574.2 1214.65 L1574.78 1214.65 L1575.37 1214.65 L1575.96 1214.65 L1576.54 1214.65 L1577.13 1214.65 L1577.72 1214.65 L1578.3 1214.65 L1578.89 1214.65 L1579.47 1214.65 L1580.06 1214.65 L1580.65 1214.65 L1581.23 1214.65 L1581.82 1214.65 L1582.41 1214.65 L1582.99 1214.65 L1583.58 1214.65 L1584.17 1214.65 L1584.75 1214.65 L1585.34 1214.65 L1585.93 1214.65 L1586.51 1214.65 L1587.1 1214.65 L1587.68 1214.65 L1588.27 1214.65 L1588.86 1214.65 L1589.44 1214.65 L1590.03 1214.65 L1590.62 1214.65 L1591.2 1214.65 L1591.79 1214.65 L1592.38 1214.65 L1592.96 1214.65 L1593.55 1214.65 L1594.14 1214.65 L1594.72 1214.65 L1595.31 1214.65 L1595.89 1214.65 L1596.48 1214.65 L1597.07 1214.65 L1597.65 1214.65 L1598.24 1214.65 L1598.83 1214.65 L1599.41 1214.65 L1600 1214.65 L1600.59 1214.65 L1601.17 1214.65 L1601.76 1214.65 L1602.34 1214.65 L1602.93 1214.65 L1603.52 1214.65 L1604.1 1214.65 L1604.69 1214.65 L1605.28 1214.65 L1605.86 1214.65 L1606.45 1214.65 L1607.04 1214.65 L1607.62 1214.65 L1608.21 1214.65 L1608.8 1214.65 L1609.38 1214.65 L1609.97 1214.65 L1610.55 1214.65 L1611.14 1214.65 L1611.73 1214.65 L1612.31 1214.65 L1612.9 1214.65 L1613.49 1214.65 L1614.07 1214.65 L1614.66 1214.65 L1615.25 1214.65 L1615.83 1214.65 L1616.42 1214.65 L1617.01 1214.65 L1617.59 1214.65 L1618.18 1214.65 L1618.76 1214.65 L1619.35 1214.65 L1619.94 1214.65 L1620.52 1214.65 L1621.11 1214.65 L1621.7 1214.65 L1622.28 1214.65 L1622.87 1214.65 L1623.46 1214.65 L1624.04 1214.65 L1624.63 1214.65 L1625.22 1214.65 L1625.8 1214.65 L1626.39 1214.65 L1626.97 1214.65 L1627.56 1214.65 L1628.15 1214.65 L1628.73 1214.65 L1629.32 1214.65 L1629.91 1214.65 L1630.49 1214.65 L1631.08 1214.65 L1631.67 1214.65 L1632.25 1214.65 L1632.84 1214.65 L1633.42 1214.65 L1634.01 1214.65 L1634.6 1214.65 L1635.18 1214.65 L1635.77 1214.65 L1636.36 1214.65 L1636.94 1214.65 L1637.53 1214.65 L1638.12 1214.65 L1638.7 1214.65 L1639.29 1214.65 L1639.88 1214.65 L1640.46 1214.65 L1641.05 1214.65 L1641.63 1214.65 L1642.22 1214.65 L1642.81 1214.65 L1643.39 1214.65 L1643.98 1214.65 L1644.57 1214.65 L1645.15 1214.65 L1645.74 1214.65 L1646.33 1214.65 L1646.91 1214.65 L1647.5 1214.65 L1648.09 1214.65 L1648.67 1214.65 L1649.26 1214.65 L1649.84 1214.65 L1650.43 1214.65 L1651.02 1214.65 L1651.6 1214.65 L1652.19 1214.65 L1652.78 1214.65 L1653.36 1214.65 L1653.95 1214.65 L1654.54 1214.65 L1655.12 1214.65 L1655.71 1214.65 L1656.29 1214.65 L1656.88 1214.65 L1657.47 1214.65 L1658.05 1214.65 L1658.64 1214.65 L1659.23 1214.65 L1659.81 1214.65 L1660.4 1214.65 L1660.99 1214.65 L1661.57 1214.65 L1662.16 1214.65 L1662.75 1214.65 L1663.33 1214.65 L1663.92 1214.65 L1664.5 1214.65 L1665.09 1214.65 L1665.68 1214.65 L1666.26 1214.65 L1666.85 1214.65 L1667.44 1214.65 L1668.02 1214.65 L1668.61 1214.65 L1669.2 1214.65 L1669.78 1214.65 L1670.37 1214.65 L1670.96 1214.65 L1671.54 1214.65 L1672.13 1214.65 L1672.71 1214.65 L1673.3 1214.65 L1673.89 1214.65 L1674.47 1214.65 L1675.06 1214.65 L1675.65 1214.65 L1676.23 1214.65 L1676.82 1214.65 L1677.41 1214.65 L1677.99 1214.65 L1678.58 1214.65 L1679.17 1214.65 L1679.75 1214.65 L1680.34 1214.65 L1680.92 1214.65 L1681.51 1214.65 L1682.1 1214.65 L1682.68 1214.65 L1683.27 1214.65 L1683.86 1214.65 L1684.44 1214.65 L1685.03 1214.65 L1685.62 1214.65 L1686.2 1214.65 L1686.79 1214.65 L1687.37 1214.65 L1687.96 1214.65 L1688.55 1214.65 L1689.13 1214.65 L1689.72 1214.65 L1690.31 1214.65 L1690.89 1214.65 L1691.48 1214.65 L1692.07 1214.65 L1692.65 1214.65 L1693.24 1214.65 L1693.83 1214.65 L1694.41 1214.65 L1695 1214.65 L1695.58 1214.65 L1696.17 1214.65 L1696.76 1214.65 L1697.34 1214.65 L1697.93 1214.65 L1698.52 1214.65 L1699.1 1214.65 L1699.69 1214.65 L1700.28 1214.65 L1700.86 1214.65 L1701.45 1214.65 L1702.04 1214.65 L1702.62 1214.65 L1703.21 1214.65 L1703.79 1214.65 L1704.38 1214.65 L1704.97 1214.65 L1705.55 1214.65 L1706.14 1214.65 L1706.73 1214.65 L1707.31 1214.65 L1707.9 1214.65 L1708.49 1214.65 L1709.07 1214.65 L1709.66 1214.65 L1710.24 1214.65 L1710.83 1214.65 L1711.42 1214.65 L1712 1214.65 L1712.59 1214.65 L1713.18 1214.65 L1713.76 1214.65 L1714.35 1214.65 L1714.94 1214.65 L1715.52 1214.65 L1716.11 1214.65 L1716.7 1214.65 L1717.28 1214.65 L1717.87 1214.65 L1718.45 1214.65 L1719.04 1214.65 L1719.63 1214.65 L1720.21 1214.65 L1720.8 1214.65 L1721.39 1214.65 L1721.97 1214.65 L1722.56 1214.65 L1723.15 1214.65 L1723.73 1214.65 L1724.32 1214.65 L1724.91 1214.65 L1725.49 1214.65 L1726.08 1214.65 L1726.66 1214.65 L1727.25 1214.65 L1727.84 1214.65 L1728.42 1214.65 L1729.01 1214.65 L1729.6 1214.65 L1730.18 1214.65 L1730.77 1214.65 L1731.36 1214.65 L1731.94 1214.65 L1732.53 1214.65 L1733.11 1214.65 L1733.7 1214.65 L1734.29 1214.65 L1734.87 1214.65 L1735.46 1214.65 L1736.05 1214.65 L1736.63 1214.65 L1737.22 1214.65 L1737.81 1214.65 L1738.39 1214.65 L1738.98 1214.65 L1739.57 1214.65 L1740.15 1214.65 L1740.74 1214.65 L1741.32 1214.65 L1741.91 1214.65 L1742.5 1214.65 L1743.08 1214.65 L1743.67 1214.65 L1744.26 1214.65 L1744.84 1214.65 L1745.43 1214.65 L1746.02 1214.65 L1746.6 1214.65 L1747.19 1214.65 L1747.78 1214.65 L1748.36 1214.65 L1748.95 1214.65 L1749.53 1214.65 L1750.12 1214.65 L1750.71 1214.65 L1751.29 1214.65 L1751.88 1214.65 L1752.47 1214.65 L1753.05 1214.65 L1753.64 1214.65 L1754.23 1214.65 L1754.81 1214.65 L1755.4 1214.65 L1755.99 1214.65 L1756.57 1214.65 L1757.16 1214.65 L1757.74 1214.65 L1758.33 1214.65 L1758.92 1214.65 L1759.5 1214.65 L1760.09 1214.65 L1760.68 1214.65 L1761.26 1214.65 L1761.85 1214.65 L1762.44 1214.65 L1763.02 1214.65 L1763.61 1214.65 L1764.19 1214.65 L1764.78 1214.65 L1765.37 1214.65 L1765.95 1214.65 L1766.54 1214.65 L1767.13 1214.65 L1767.71 1214.65 L1768.3 1214.65 L1768.89 1214.65 L1769.47 1214.65 L1770.06 1214.65 L1770.65 1214.65 L1771.23 1214.65 L1771.82 1214.65 L1772.4 1214.65 L1772.99 1214.65 L1773.58 1214.65 L1774.16 1214.65 L1774.75 1214.65 L1775.34 1214.65 L1775.92 1214.65 L1776.51 1214.65 L1777.1 1214.65 L1777.68 1214.65 L1778.27 1214.65 L1778.86 1214.65 L1779.44 1214.65 L1780.03 1214.65 L1780.61 1214.65 L1781.2 1214.65 L1781.79 1214.65 L1782.37 1214.65 L1782.96 1214.65 L1783.55 1214.65 L1784.13 1214.65 L1784.72 1214.65 L1785.31 1214.65 L1785.89 1214.65 L1786.48 1214.65 L1787.06 1214.65 L1787.65 1214.65 L1788.24 1214.65 L1788.82 1214.65 L1789.41 1214.65 L1790 1214.65 L1790.58 1214.65 L1791.17 1214.65 L1791.76 1214.65 L1792.34 1214.65 L1792.93 1214.65 L1793.52 1214.65 L1794.1 1214.65 L1794.69 1214.65 L1795.27 1214.65 L1795.86 1214.65 L1796.45 1214.65 L1797.03 1214.65 L1797.62 1214.65 L1798.21 1214.65 L1798.79 1214.65 L1799.38 1214.65 L1799.97 1214.65 L1800.55 1214.65 L1801.14 1214.65 L1801.73 1214.65 L1802.31 1214.65 L1802.9 1214.65 L1803.48 1214.65 L1804.07 1214.65 L1804.66 1214.65 L1805.24 1214.65 L1805.83 1214.65 L1806.42 1214.65 L1807 1214.65 L1807.59 1214.65 L1808.18 1214.65 L1808.76 1214.65 L1809.35 1214.65 L1809.94 1214.65 L1810.52 1214.65 L1811.11 1214.65 L1811.69 1214.65 L1812.28 1214.65 L1812.87 1214.65 L1813.45 1214.65 L1814.04 1214.65 L1814.63 1214.65 L1815.21 1214.65 L1815.8 1214.65 L1816.39 1214.65 L1816.97 1214.65 L1817.56 1214.65 L1818.14 1214.65 L1818.73 1214.65 L1819.32 1214.65 L1819.9 1214.65 L1820.49 1214.65 L1821.08 1214.65 L1821.66 1214.65 L1822.25 1214.65 L1822.84 1214.65 L1823.42 1214.65 L1824.01 1214.65 L1824.6 1214.65 L1825.18 1214.65 L1825.77 1214.65 L1826.35 1214.65 L1826.94 1214.65 L1827.53 1214.65 L1828.11 1214.65 L1828.7 1214.65 L1829.29 1214.65 L1829.87 1214.65 L1830.46 1214.65 L1831.05 1214.65 L1831.63 1214.65 L1832.22 1214.65 L1832.81 1214.65 L1833.39 1214.65 L1833.98 1214.65 L1834.56 1214.65 L1835.15 1214.65 L1835.74 1214.65 L1836.32 1214.65 L1836.91 1214.65 L1837.5 1214.65 L1838.08 1214.65 L1838.67 1214.65 L1839.26 1214.65 L1839.84 1214.65 L1840.43 1214.65 L1841.01 1214.65 L1841.6 1214.65 L1842.19 1214.65 L1842.77 1214.65 L1843.36 1214.65 L1843.95 1214.65 L1844.53 1214.65 L1845.12 1214.65 L1845.71 1214.65 L1846.29 1214.65 L1846.88 1214.65 L1847.47 1214.65 L1848.05 1214.65 L1848.64 1214.65 L1849.22 1214.65 L1849.81 1214.65 L1850.4 1214.65 L1850.98 1214.65 L1851.57 1214.65 L1852.16 1214.65 L1852.74 1214.65 L1853.33 1214.65 L1853.92 1214.65 L1854.5 1214.65 L1855.09 1214.65 L1855.68 1214.65 L1856.26 1214.65 L1856.85 1214.65 L1857.43 1214.65 L1858.02 1214.65 L1858.61 1214.65 L1859.19 1214.65 L1859.78 1214.65 L1860.37 1214.65 L1860.95 1214.65 L1861.54 1214.65 L1862.13 1214.65 L1862.71 1214.65 L1863.3 1214.65 L1863.88 1214.65 L1864.47 1214.65 L1865.06 1214.65 L1865.64 1214.65 L1866.23 1214.65 L1866.82 1214.65 L1867.4 1214.65 L1867.99 1214.65 L1868.58 1214.65 L1869.16 1214.65 L1869.75 1214.65 L1870.34 1214.65 L1870.92 1214.65 L1871.51 1214.65 L1872.09 1214.65 L1872.68 1214.65 L1873.27 1214.65 L1873.85 1214.65 L1874.44 1214.65 L1875.03 1214.65 L1875.61 1214.65 L1876.2 1214.65 L1876.79 1214.65 L1877.37 1214.65 L1877.96 1214.65 L1878.55 1214.65 L1879.13 1214.65 L1879.72 1214.65 L1880.3 1214.65 L1880.89 1214.65 L1881.48 1214.65 L1882.06 1214.65 L1882.65 1214.65 L1883.24 1214.65 L1883.82 1214.65 L1884.41 1214.65 L1885 1214.65 L1885.58 1214.65 L1886.17 1214.65 L1886.76 1214.65 L1887.34 1214.65 L1887.93 1214.65 L1888.51 1214.65 L1889.1 1214.65 L1889.69 1214.65 L1890.27 1214.65 L1890.86 1214.65 L1891.45 1214.65 L1892.03 1214.65 L1892.62 1214.65 L1893.21 1214.65 L1893.79 1214.65 L1894.38 1214.65 L1894.96 1214.65 L1895.55 1214.65 L1896.14 1214.65 L1896.72 1214.65 L1897.31 1214.65 L1897.9 1214.65 L1898.48 1214.65 L1899.07 1214.65 L1899.66 1214.65 L1900.24 1214.65 L1900.83 1214.65 L1901.42 1214.65 L1902 1214.65 L1902.59 1214.65 L1903.17 1214.65 L1903.76 1214.65 L1904.35 1214.65 L1904.93 1214.65 L1905.52 1214.65 L1906.11 1214.65 L1906.69 1214.65 L1907.28 1214.65 L1907.87 1214.65 L1908.45 1214.65 L1909.04 1214.65 L1909.63 1214.65 L1910.21 1214.65 L1910.8 1214.65 L1911.38 1214.65 L1911.97 1214.65 L1912.56 1214.65 L1913.14 1214.65 L1913.73 1214.65 L1914.32 1214.65 L1914.9 1214.65 L1915.49 1214.65 L1916.08 1214.65 L1916.66 1214.65 L1917.25 1214.65 L1917.83 1214.65 L1918.42 1214.65 L1919.01 1214.65 L1919.59 1214.65 L1920.18 1214.65 L1920.77 1214.65 L1921.35 1214.65 L1921.94 1214.65 L1922.53 1214.65 L1923.11 1214.65 L1923.7 1214.65 L1924.29 1214.65 L1924.87 1214.65 L1925.46 1214.65 L1926.04 1214.65 L1926.63 1214.65 L1927.22 1214.65 L1927.8 1214.65 L1928.39 1214.65 L1928.98 1214.65 L1929.56 1214.65 L1930.15 1214.65 L1930.74 1214.65 L1931.32 1214.65 L1931.91 1214.65 L1932.5 1214.65 L1933.08 1214.65 L1933.67 1214.65 L1934.25 1214.65 L1934.84 1214.65 L1935.43 1214.65 L1936.01 1214.65 L1936.6 1214.65 L1937.19 1214.65 L1937.77 1214.65 L1938.36 1214.65 L1938.95 1214.65 L1939.53 1214.65 L1940.12 1214.65 L1940.71 1214.65 L1941.29 1214.65 L1941.88 1214.65 L1942.46 1214.65 L1943.05 1214.65 L1943.64 1214.65 L1944.22 1214.65 L1944.81 1214.65 L1945.4 1214.65 L1945.98 1214.65 L1946.57 1214.65 L1947.16 1214.65 L1947.74 1214.65 L1948.33 1214.65 L1948.91 1214.65 L1949.5 1214.65 L1950.09 1214.65 L1950.67 1214.65 L1951.26 1214.65 L1951.85 1214.65 L1952.43 1214.65 L1953.02 1214.65 L1953.61 1214.65 L1954.19 1214.65 L1954.78 1214.65 L1955.37 1214.65 L1955.95 1214.65 L1956.54 1214.65 L1957.12 1214.65 L1957.71 1214.65 L1958.3 1214.65 L1958.88 1214.65 L1959.47 1214.65 L1960.06 1214.65 L1960.64 1214.65 L1961.23 1214.65 L1961.82 1214.65 L1962.4 1214.65 L1962.99 1214.65 L1963.58 1214.65 L1964.16 1214.65 L1964.75 1214.65 L1965.33 1214.65 L1965.92 1214.65 L1966.51 1214.65 L1967.09 1214.65 L1967.68 1214.65 L1968.27 1214.65 L1968.85 1214.65 L1969.44 1214.65 L1970.03 1214.65 L1970.61 1214.65 L1971.2 1214.65 L1971.78 1214.65 L1972.37 1214.65 L1972.96 1214.65 L1973.54 1214.65 L1974.13 1214.65 L1974.72 1214.65 L1975.3 1214.65 L1975.89 1214.65 L1976.48 1214.65 L1977.06 1214.65 L1977.65 1214.65 L1978.24 1214.65 L1978.82 1214.65 L1979.41 1214.65 L1979.99 1214.65 L1980.58 1214.65 L1981.17 1214.65 L1981.75 1214.65 L1982.34 1214.65 L1982.93 1214.65 L1983.51 1214.65 L1984.1 1214.65 L1984.69 1214.65 L1985.27 1214.65 L1985.86 1214.65 L1986.45 1214.65 L1987.03 1214.65 L1987.62 1214.65 L1988.2 1214.65 L1988.79 1214.65 L1989.38 1214.65 L1989.96 1214.65 L1990.55 1214.65 L1991.14 1214.65 L1991.72 1214.65 L1992.31 1214.65 L1992.9 1214.65 L1993.48 1214.65 L1994.07 1214.65 L1994.65 1214.65 L1995.24 1214.65 L1995.83 1214.65 L1996.41 1214.65 L1997 1214.65 L1997.59 1214.65 L1998.17 1214.65 L1998.76 1214.65 L1999.35 1214.65 L1999.93 1214.65 L2000.52 1214.65 L2001.11 1214.65 L2001.69 1214.65 L2002.28 1214.65 L2002.86 1214.65 L2003.45 1214.65 L2004.04 1214.65 L2004.62 1214.65 L2005.21 1214.65 L2005.8 1214.65 L2006.38 1214.65 L2006.97 1214.65 L2007.56 1214.65 L2008.14 1214.65 L2008.73 1214.65 L2009.32 1214.65 L2009.9 1214.65 L2010.49 1214.65 L2011.07 1214.65 L2011.66 1214.65 L2012.25 1214.65 L2012.83 1214.65 L2013.42 1214.65 L2014.01 1214.65 L2014.59 1214.65 L2015.18 1214.65 L2015.77 1214.65 L2016.35 1214.65 L2016.94 1214.65 L2017.53 1214.65 L2018.11 1214.65 L2018.7 1214.65 L2019.28 1214.65 L2019.87 1214.65 L2020.46 1214.65 L2021.04 1214.65 L2021.63 1214.65 L2022.22 1214.65 L2022.8 1214.65 L2023.39 1214.65 L2023.98 1214.65 L2024.56 1214.65 L2025.15 1214.65 L2025.73 1214.65 L2026.32 1214.65 L2026.91 1214.65 L2027.49 1214.65 L2028.08 1214.65 L2028.67 1214.65 L2029.25 1214.65 L2029.84 1214.65 L2030.43 1214.65 L2031.01 1214.65 L2031.6 1214.65 L2032.19 1214.65 L2032.77 1214.65 L2033.36 1214.65 L2033.94 1214.65 L2034.53 1214.65 L2035.12 1214.65 L2035.7 1214.65 L2036.29 1214.65 L2036.88 1214.65 L2037.46 1214.65 L2038.05 1214.65 L2038.64 1214.65 L2039.22 1214.65 L2039.81 1214.65 L2040.4 1214.65 L2040.98 1214.65 L2041.57 1214.65 L2042.15 1214.65 L2042.74 1214.65 L2043.33 1214.65 L2043.91 1214.65 L2044.5 1214.65 L2045.09 1214.65 L2045.67 1214.65 L2046.26 1214.65 L2046.85 1214.65 L2047.43 1214.65 L2048.02 1214.65 L2048.6 1214.65 L2049.19 1214.65 L2049.78 1214.65 L2050.36 1214.65 L2050.95 1214.65 L2051.54 1214.65 L2052.12 1214.65 L2052.71 1214.65 L2053.3 1214.65 L2053.88 1214.65 L2054.47 1214.65 L2055.06 1214.65 L2055.64 1214.65 L2056.23 1214.65 L2056.81 1214.65 L2057.4 1214.65 L2057.99 1214.65 L2058.57 1214.65 L2059.16 1214.65 L2059.75 1214.65 L2060.33 1214.65 L2060.92 1214.65 L2061.51 1214.65 L2062.09 1214.65 L2062.68 1214.65 L2063.27 1214.65 L2063.85 1214.65 L2064.44 1214.65 L2065.02 1214.65 L2065.61 1214.65 L2066.2 1214.65 L2066.78 1214.65 L2067.37 1214.65 L2067.96 1214.65 L2068.54 1214.65 L2069.13 1214.65 L2069.72 1214.65 L2070.3 1214.65 L2070.89 1214.65 L2071.48 1214.65 L2072.06 1214.65 L2072.65 1214.65 L2073.23 1214.65 L2073.82 1214.65 L2074.41 1214.65 L2074.99 1214.65 L2075.58 1214.65 L2076.17 1214.65 L2076.75 1214.65 L2077.34 1214.65 L2077.93 1214.65 L2078.51 1214.65 L2079.1 1214.65 L2079.68 1214.65 L2080.27 1214.65 L2080.86 1214.65 L2081.44 1214.65 L2082.03 1214.65 L2082.62 1214.65 L2083.2 1214.65 L2083.79 1214.65 L2084.38 1214.65 L2084.96 1214.65 L2085.55 1214.65 L2086.14 1214.65 L2086.72 1214.65 L2087.31 1214.65 L2087.89 1214.65 L2088.48 1214.65 L2089.07 1214.65 L2089.65 1214.65 L2090.24 1214.65 L2090.83 1214.65 L2091.41 1214.65 L2092 1214.65 L2092.59 1214.65 L2093.17 1214.65 L2093.76 1214.65 L2094.35 1214.65 L2094.93 1214.65 L2095.52 1214.65 L2096.1 1214.65 L2096.69 1214.65 L2097.28 1214.65 L2097.86 1214.65 L2098.45 1214.65 L2099.04 1214.65 L2099.62 1214.65 L2100.21 1214.65 L2100.8 1214.65 L2101.38 1214.65 L2101.97 1214.65 L2102.55 1214.65 L2103.14 1214.65 L2103.73 1214.65 L2104.31 1214.65 L2104.9 1214.65 L2105.49 1214.65 L2106.07 1214.65 L2106.66 1214.65 L2107.25 1214.65 L2107.83 1214.65 L2108.42 1214.65 L2109.01 1214.65 L2109.59 1214.65 L2110.18 1214.65 L2110.76 1214.65 L2111.35 1214.65 L2111.94 1214.65 L2112.52 1214.65 L2113.11 1214.65 L2113.7 1214.65 L2114.28 1214.65 L2114.87 1214.65 L2115.46 1214.65 L2116.04 1214.65 L2116.63 1214.65 L2117.22 1214.65 L2117.8 1214.65 L2118.39 1214.65 L2118.97 1214.65 L2119.56 1214.65 L2120.15 1214.65 L2120.73 1214.65 L2121.32 1214.65 L2121.91 1214.65 L2122.49 1214.65 L2123.08 1214.65 L2123.67 1214.65 L2124.25 1214.65 L2124.84 1214.65 L2125.42 1214.65 L2126.01 1214.65 L2126.6 1214.65 L2127.18 1214.65 L2127.77 1214.65 L2128.36 1214.65 L2128.94 1214.65 L2129.53 1214.65 L2130.12 1214.65 L2130.7 1214.65 L2131.29 1214.65 L2131.88 1214.65 L2132.46 1214.65 L2133.05 1214.65 L2133.63 1214.65 L2134.22 1214.65 L2134.81 1214.65 L2135.39 1214.65 L2135.98 1214.65 L2136.57 1214.65 L2137.15 1214.65 L2137.74 1214.65 L2138.33 1214.65 L2138.91 1214.65 L2139.5 1214.65 L2140.09 1214.65 L2140.67 1214.65 L2141.26 1214.65 L2141.84 1214.65 L2142.43 1214.65 L2143.02 1214.65 L2143.6 1214.65 L2144.19 1214.65 L2144.78 1214.65 L2145.36 1214.65 L2145.95 1214.65 L2146.54 1214.65 L2147.12 1214.65 L2147.71 1214.65 L2148.3 1214.65 L2148.88 1214.65 L2149.47 1214.65 L2150.05 1214.65 L2150.64 1214.65 L2151.23 1214.65 L2151.81 1214.65 L2152.4 1214.65 L2152.99 1214.65 L2153.57 1214.65 L2154.16 1214.65 L2154.75 1214.65 L2155.33 1214.65 L2155.92 1214.65 L2156.5 1214.65 L2157.09 1214.65 L2157.68 1214.65 L2158.26 1214.65 L2158.26 1214.06 L2157.68 1214.06 L2157.09 1214.06 L2156.5 1214.06 L2155.92 1214.06 L2155.33 1214.06 L2154.75 1214.06 L2154.16 1214.06 L2153.57 1214.06 L2152.99 1214.06 L2152.4 1214.06 L2151.81 1214.06 L2151.23 1214.06 L2150.64 1214.06 L2150.05 1214.06 L2149.47 1214.06 L2148.88 1214.06 L2148.3 1214.06 L2147.71 1214.06 L2147.12 1214.06 L2146.54 1214.06 L2145.95 1214.06 L2145.36 1214.06 L2144.78 1214.06 L2144.19 1214.06 L2143.6 1214.06 L2143.02 1214.06 L2142.43 1214.06 L2141.84 1214.06 L2141.26 1214.06 L2140.67 1214.06 L2140.09 1214.06 L2139.5 1214.06 L2138.91 1214.06 L2138.33 1214.06 L2137.74 1214.06 L2137.15 1214.06 L2136.57 1214.06 L2135.98 1214.06 L2135.39 1214.06 L2134.81 1214.06 L2134.22 1214.06 L2133.63 1214.06 L2133.05 1214.06 L2132.46 1214.06 L2131.88 1214.06 L2131.29 1214.06 L2130.7 1214.06 L2130.12 1214.06 L2129.53 1214.06 L2128.94 1214.06 L2128.36 1214.06 L2127.77 1214.06 L2127.18 1214.06 L2126.6 1214.06 L2126.01 1214.06 L2125.42 1214.06 L2124.84 1214.06 L2124.25 1214.06 L2123.67 1214.06 L2123.08 1214.06 L2122.49 1214.06 L2121.91 1214.06 L2121.32 1214.06 L2120.73 1214.06 L2120.15 1214.06 L2119.56 1214.06 L2118.97 1214.06 L2118.39 1214.06 L2117.8 1214.06 L2117.22 1214.06 L2116.63 1214.06 L2116.04 1214.06 L2115.46 1214.06 L2114.87 1214.06 L2114.28 1214.06 L2113.7 1214.06 L2113.11 1214.06 L2112.52 1214.06 L2111.94 1214.06 L2111.35 1214.06 L2110.76 1214.06 L2110.18 1214.06 L2109.59 1214.06 L2109.01 1214.06 L2108.42 1214.06 L2107.83 1214.06 L2107.25 1214.06 L2106.66 1214.06 L2106.07 1214.06 L2105.49 1214.06 L2104.9 1214.06 L2104.31 1214.06 L2103.73 1214.06 L2103.14 1214.06 L2102.55 1214.06 L2101.97 1214.06 L2101.38 1214.06 L2100.8 1214.06 L2100.21 1214.06 L2099.62 1214.06 L2099.04 1214.06 L2098.45 1214.06 L2097.86 1214.06 L2097.28 1214.06 L2096.69 1214.06 L2096.1 1214.06 L2095.52 1214.06 L2094.93 1214.06 L2094.35 1214.06 L2093.76 1214.06 L2093.17 1214.06 L2092.59 1214.06 L2092 1214.06 L2091.41 1214.06 L2090.83 1214.06 L2090.24 1214.06 L2089.65 1214.06 L2089.07 1214.06 L2088.48 1214.06 L2087.89 1214.06 L2087.31 1214.06 L2086.72 1214.06 L2086.14 1214.06 L2085.55 1214.06 L2084.96 1214.06 L2084.38 1214.06 L2083.79 1214.06 L2083.2 1214.06 L2082.62 1214.06 L2082.03 1214.06 L2081.44 1214.06 L2080.86 1214.06 L2080.27 1214.06 L2079.68 1214.06 L2079.1 1214.06 L2078.51 1214.06 L2077.93 1214.06 L2077.34 1214.06 L2076.75 1214.06 L2076.17 1214.06 L2075.58 1214.06 L2074.99 1214.06 L2074.41 1214.06 L2073.82 1214.06 L2073.23 1214.06 L2072.65 1214.06 L2072.06 1214.06 L2071.48 1214.06 L2070.89 1214.06 L2070.3 1214.06 L2069.72 1214.06 L2069.13 1214.06 L2068.54 1214.06 L2067.96 1214.06 L2067.37 1214.06 L2066.78 1214.06 L2066.2 1214.06 L2065.61 1214.06 L2065.02 1214.06 L2064.44 1214.06 L2063.85 1214.06 L2063.27 1214.06 L2062.68 1214.06 L2062.09 1214.06 L2061.51 1214.06 L2060.92 1214.06 L2060.33 1214.06 L2059.75 1214.06 L2059.16 1214.06 L2058.57 1214.06 L2057.99 1214.06 L2057.4 1214.06 L2056.81 1214.06 L2056.23 1214.06 L2055.64 1214.06 L2055.06 1214.06 L2054.47 1214.06 L2053.88 1214.06 L2053.3 1214.06 L2052.71 1214.06 L2052.12 1214.06 L2051.54 1214.06 L2050.95 1214.06 L2050.36 1214.06 L2049.78 1214.06 L2049.19 1214.06 L2048.6 1214.06 L2048.02 1214.06 L2047.43 1214.06 L2046.85 1214.06 L2046.26 1214.06 L2045.67 1214.06 L2045.09 1214.06 L2044.5 1214.06 L2043.91 1214.06 L2043.33 1214.06 L2042.74 1214.06 L2042.15 1214.06 L2041.57 1214.06 L2040.98 1214.06 L2040.4 1214.06 L2039.81 1214.06 L2039.22 1214.06 L2038.64 1214.06 L2038.05 1214.06 L2037.46 1214.06 L2036.88 1214.06 L2036.29 1214.06 L2035.7 1214.06 L2035.12 1214.06 L2034.53 1214.06 L2033.94 1214.06 L2033.36 1214.06 L2032.77 1214.06 L2032.19 1214.06 L2031.6 1214.06 L2031.01 1214.06 L2030.43 1214.06 L2029.84 1214.06 L2029.25 1214.06 L2028.67 1214.06 L2028.08 1214.06 L2027.49 1214.06 L2026.91 1214.06 L2026.32 1214.06 L2025.73 1214.06 L2025.15 1214.06 L2024.56 1214.06 L2023.98 1214.06 L2023.39 1214.06 L2022.8 1214.06 L2022.22 1214.06 L2021.63 1214.06 L2021.04 1214.06 L2020.46 1214.06 L2019.87 1214.06 L2019.28 1214.06 L2018.7 1214.06 L2018.11 1214.06 L2017.53 1214.06 L2016.94 1214.06 L2016.35 1214.06 L2015.77 1214.06 L2015.18 1214.06 L2014.59 1214.06 L2014.01 1214.06 L2013.42 1214.06 L2012.83 1214.06 L2012.25 1214.06 L2011.66 1214.06 L2011.07 1214.06 L2010.49 1214.06 L2009.9 1214.06 L2009.32 1214.06 L2008.73 1214.06 L2008.14 1214.06 L2007.56 1214.06 L2006.97 1214.06 L2006.38 1214.06 L2005.8 1214.06 L2005.21 1214.06 L2004.62 1214.06 L2004.04 1214.06 L2003.45 1214.06 L2002.86 1214.06 L2002.28 1214.06 L2001.69 1214.06 L2001.11 1214.06 L2000.52 1214.06 L1999.93 1214.06 L1999.35 1214.06 L1998.76 1214.06 L1998.17 1214.06 L1997.59 1214.06 L1997 1214.06 L1996.41 1214.06 L1995.83 1214.06 L1995.24 1214.06 L1994.65 1214.06 L1994.07 1214.06 L1993.48 1214.06 L1992.9 1214.06 L1992.31 1214.06 L1991.72 1214.06 L1991.14 1214.06 L1990.55 1214.06 L1989.96 1214.06 L1989.38 1214.06 L1988.79 1214.06 L1988.2 1214.06 L1987.62 1214.06 L1987.03 1214.06 L1986.45 1214.06 L1985.86 1214.06 L1985.27 1214.06 L1984.69 1214.06 L1984.1 1214.06 L1983.51 1214.06 L1982.93 1214.06 L1982.34 1214.06 L1981.75 1214.06 L1981.17 1214.06 L1980.58 1214.06 L1979.99 1214.06 L1979.41 1214.06 L1978.82 1214.06 L1978.24 1214.06 L1977.65 1214.06 L1977.06 1214.06 L1976.48 1214.06 L1975.89 1214.06 L1975.3 1214.06 L1974.72 1214.06 L1974.13 1214.06 L1973.54 1214.06 L1972.96 1214.06 L1972.37 1214.06 L1971.78 1214.06 L1971.2 1214.06 L1970.61 1214.06 L1970.03 1214.06 L1969.44 1214.06 L1968.85 1214.06 L1968.27 1214.06 L1967.68 1214.06 L1967.09 1214.06 L1966.51 1214.06 L1965.92 1214.06 L1965.33 1214.06 L1964.75 1214.06 L1964.16 1214.06 L1963.58 1214.06 L1962.99 1214.06 L1962.4 1214.06 L1961.82 1214.06 L1961.23 1214.06 L1960.64 1214.06 L1960.06 1214.06 L1959.47 1214.06 L1958.88 1214.06 L1958.3 1214.06 L1957.71 1214.06 L1957.12 1214.06 L1956.54 1214.06 L1955.95 1214.06 L1955.37 1214.06 L1954.78 1214.06 L1954.19 1214.06 L1953.61 1214.06 L1953.02 1214.06 L1952.43 1214.06 L1951.85 1214.06 L1951.26 1214.06 L1950.67 1214.06 L1950.09 1214.06 L1949.5 1214.06 L1948.91 1214.06 L1948.33 1214.06 L1947.74 1214.06 L1947.16 1214.06 L1946.57 1214.06 L1945.98 1214.06 L1945.4 1214.06 L1944.81 1214.06 L1944.22 1214.06 L1943.64 1214.06 L1943.05 1214.06 L1942.46 1214.06 L1941.88 1214.06 L1941.29 1214.06 L1940.71 1214.06 L1940.12 1214.06 L1939.53 1214.06 L1938.95 1214.06 L1938.36 1214.06 L1937.77 1214.06 L1937.19 1214.06 L1936.6 1214.06 L1936.01 1214.06 L1935.43 1214.06 L1934.84 1214.06 L1934.25 1214.06 L1933.67 1214.06 L1933.08 1214.06 L1932.5 1214.06 L1931.91 1214.06 L1931.32 1214.06 L1930.74 1214.06 L1930.15 1214.06 L1929.56 1214.06 L1928.98 1214.06 L1928.39 1214.06 L1927.8 1214.06 L1927.22 1214.06 L1926.63 1214.06 L1926.04 1214.06 L1925.46 1214.06 L1924.87 1214.06 L1924.29 1214.06 L1923.7 1214.06 L1923.11 1214.06 L1922.53 1214.06 L1921.94 1214.06 L1921.35 1214.06 L1920.77 1214.06 L1920.18 1214.06 L1919.59 1214.06 L1919.01 1214.06 L1918.42 1214.06 L1917.83 1214.06 L1917.25 1214.06 L1916.66 1214.06 L1916.08 1214.06 L1915.49 1214.06 L1914.9 1214.06 L1914.32 1214.06 L1913.73 1214.06 L1913.14 1214.06 L1912.56 1214.06 L1911.97 1214.06 L1911.38 1214.06 L1910.8 1214.06 L1910.21 1214.06 L1909.63 1214.06 L1909.04 1214.06 L1908.45 1214.06 L1907.87 1214.06 L1907.28 1214.06 L1906.69 1214.06 L1906.11 1214.06 L1905.52 1214.06 L1904.93 1214.06 L1904.35 1214.06 L1903.76 1214.06 L1903.17 1214.06 L1902.59 1214.06 L1902 1214.06 L1901.42 1214.06 L1900.83 1214.06 L1900.24 1214.06 L1899.66 1214.06 L1899.07 1214.06 L1898.48 1214.06 L1897.9 1214.06 L1897.31 1214.06 L1896.72 1214.06 L1896.14 1214.06 L1895.55 1214.06 L1894.96 1214.06 L1894.38 1214.06 L1893.79 1214.06 L1893.21 1214.06 L1892.62 1214.06 L1892.03 1214.06 L1891.45 1214.06 L1890.86 1214.06 L1890.27 1214.06 L1889.69 1214.06 L1889.1 1214.06 L1888.51 1214.06 L1887.93 1214.06 L1887.34 1214.06 L1886.76 1214.06 L1886.17 1214.06 L1885.58 1214.06 L1885 1214.06 L1884.41 1214.06 L1883.82 1214.06 L1883.24 1214.06 L1882.65 1214.06 L1882.06 1214.06 L1881.48 1214.06 L1880.89 1214.06 L1880.3 1214.06 L1879.72 1214.06 L1879.13 1214.06 L1878.55 1214.06 L1877.96 1214.06 L1877.37 1214.06 L1876.79 1214.06 L1876.2 1214.06 L1875.61 1214.06 L1875.03 1214.06 L1874.44 1214.06 L1873.85 1214.06 L1873.27 1214.06 L1872.68 1214.06 L1872.09 1214.06 L1871.51 1214.06 L1870.92 1214.06 L1870.34 1214.06 L1869.75 1214.06 L1869.16 1214.06 L1868.58 1214.06 L1867.99 1214.06 L1867.4 1214.06 L1866.82 1214.06 L1866.23 1214.06 L1865.64 1214.06 L1865.06 1214.06 L1864.47 1214.06 L1863.88 1214.06 L1863.3 1214.06 L1862.71 1214.06 L1862.13 1214.06 L1861.54 1214.06 L1860.95 1214.06 L1860.37 1214.06 L1859.78 1214.06 L1859.19 1214.06 L1858.61 1214.06 L1858.02 1214.06 L1857.43 1214.06 L1856.85 1214.06 L1856.26 1214.06 L1855.68 1214.06 L1855.09 1214.06 L1854.5 1214.06 L1853.92 1214.06 L1853.33 1214.06 L1852.74 1214.06 L1852.16 1214.06 L1851.57 1214.06 L1850.98 1214.06 L1850.4 1214.06 L1849.81 1214.06 L1849.22 1214.06 L1848.64 1214.06 L1848.05 1214.06 L1847.47 1214.06 L1846.88 1214.06 L1846.29 1214.06 L1845.71 1214.06 L1845.12 1214.06 L1844.53 1214.06 L1843.95 1214.06 L1843.36 1214.06 L1842.77 1214.06 L1842.19 1214.06 L1841.6 1214.06 L1841.01 1214.06 L1840.43 1214.06 L1839.84 1214.06 L1839.26 1214.06 L1838.67 1214.06 L1838.08 1214.06 L1837.5 1214.06 L1836.91 1214.06 L1836.32 1214.06 L1835.74 1214.06 L1835.15 1214.06 L1834.56 1214.06 L1833.98 1214.06 L1833.39 1214.06 L1832.81 1214.06 L1832.22 1214.06 L1831.63 1214.06 L1831.05 1214.06 L1830.46 1214.06 L1829.87 1214.06 L1829.29 1214.06 L1828.7 1214.06 L1828.11 1214.06 L1827.53 1214.06 L1826.94 1214.06 L1826.35 1214.06 L1825.77 1214.06 L1825.18 1214.06 L1824.6 1214.06 L1824.01 1214.06 L1823.42 1214.06 L1822.84 1214.06 L1822.25 1214.06 L1821.66 1214.06 L1821.08 1214.06 L1820.49 1214.06 L1819.9 1214.06 L1819.32 1214.06 L1818.73 1214.06 L1818.14 1214.06 L1817.56 1214.06 L1816.97 1214.06 L1816.39 1214.06 L1815.8 1214.06 L1815.21 1214.06 L1814.63 1214.06 L1814.04 1214.06 L1813.45 1214.06 L1812.87 1214.06 L1812.28 1214.06 L1811.69 1214.06 L1811.11 1214.06 L1810.52 1214.06 L1809.94 1214.06 L1809.35 1214.06 L1808.76 1214.06 L1808.18 1214.06 L1807.59 1214.06 L1807 1214.06 L1806.42 1214.06 L1805.83 1214.06 L1805.24 1214.06 L1804.66 1214.06 L1804.07 1214.06 L1803.48 1214.06 L1802.9 1214.06 L1802.31 1214.06 L1801.73 1214.06 L1801.14 1214.06 L1800.55 1214.06 L1799.97 1214.06 L1799.38 1214.06 L1798.79 1214.06 L1798.21 1214.06 L1797.62 1214.06 L1797.03 1214.06 L1796.45 1214.06 L1795.86 1214.06 L1795.27 1214.06 L1794.69 1214.06 L1794.1 1214.06 L1793.52 1214.06 L1792.93 1214.06 L1792.34 1214.06 L1791.76 1214.06 L1791.17 1214.06 L1790.58 1214.06 L1790 1214.06 L1789.41 1214.06 L1788.82 1214.06 L1788.24 1214.06 L1787.65 1214.06 L1787.06 1214.06 L1786.48 1214.06 L1785.89 1214.06 L1785.31 1214.06 L1784.72 1214.06 L1784.13 1214.06 L1783.55 1214.06 L1782.96 1214.06 L1782.37 1214.06 L1781.79 1214.06 L1781.2 1214.06 L1780.61 1214.06 L1780.03 1214.06 L1779.44 1214.06 L1778.86 1214.06 L1778.27 1214.06 L1777.68 1214.06 L1777.1 1214.06 L1776.51 1214.06 L1775.92 1214.06 L1775.34 1214.06 L1774.75 1214.06 L1774.16 1214.06 L1773.58 1214.06 L1772.99 1214.06 L1772.4 1214.06 L1771.82 1214.06 L1771.23 1214.06 L1770.65 1214.06 L1770.06 1214.06 L1769.47 1214.06 L1768.89 1214.06 L1768.3 1214.06 L1767.71 1214.06 L1767.13 1214.06 L1766.54 1214.06 L1765.95 1214.06 L1765.37 1214.06 L1764.78 1214.06 L1764.19 1214.06 L1763.61 1214.06 L1763.02 1214.06 L1762.44 1214.06 L1761.85 1214.06 L1761.26 1214.06 L1760.68 1214.06 L1760.09 1214.06 L1759.5 1214.06 L1758.92 1214.06 L1758.33 1214.06 L1757.74 1214.06 L1757.16 1214.06 L1756.57 1214.06 L1755.99 1214.06 L1755.4 1214.06 L1754.81 1214.06 L1754.23 1214.06 L1753.64 1214.06 L1753.05 1214.06 L1752.47 1214.06 L1751.88 1214.06 L1751.29 1214.06 L1750.71 1214.06 L1750.12 1214.06 L1749.53 1214.06 L1748.95 1214.06 L1748.36 1214.06 L1747.78 1214.06 L1747.19 1214.06 L1746.6 1214.06 L1746.02 1214.06 L1745.43 1214.06 L1744.84 1214.06 L1744.26 1214.06 L1743.67 1214.06 L1743.08 1214.06 L1742.5 1214.06 L1741.91 1214.06 L1741.32 1214.06 L1740.74 1214.06 L1740.15 1214.06 L1739.57 1214.06 L1738.98 1214.06 L1738.39 1214.06 L1737.81 1214.06 L1737.22 1214.06 L1736.63 1214.06 L1736.05 1214.06 L1735.46 1214.06 L1734.87 1214.06 L1734.29 1214.06 L1733.7 1214.06 L1733.11 1214.06 L1732.53 1214.06 L1731.94 1214.06 L1731.36 1214.06 L1730.77 1214.06 L1730.18 1214.06 L1729.6 1214.06 L1729.01 1214.06 L1728.42 1214.06 L1727.84 1214.06 L1727.25 1214.06 L1726.66 1214.06 L1726.08 1214.06 L1725.49 1214.06 L1724.91 1214.06 L1724.32 1214.06 L1723.73 1214.06 L1723.15 1214.06 L1722.56 1214.06 L1721.97 1214.06 L1721.39 1214.06 L1720.8 1214.06 L1720.21 1214.06 L1719.63 1214.06 L1719.04 1214.06 L1718.45 1214.06 L1717.87 1214.06 L1717.28 1214.06 L1716.7 1214.06 L1716.11 1214.06 L1715.52 1214.06 L1714.94 1214.06 L1714.35 1214.06 L1713.76 1214.06 L1713.18 1214.06 L1712.59 1214.06 L1712 1214.06 L1711.42 1214.06 L1710.83 1214.06 L1710.24 1214.06 L1709.66 1214.06 L1709.07 1214.06 L1708.49 1214.06 L1707.9 1214.06 L1707.31 1214.06 L1706.73 1214.06 L1706.14 1214.06 L1705.55 1214.06 L1704.97 1214.06 L1704.38 1214.06 L1703.79 1214.06 L1703.21 1214.06 L1702.62 1214.06 L1702.04 1214.06 L1701.45 1214.06 L1700.86 1214.06 L1700.28 1214.06 L1699.69 1214.06 L1699.1 1214.06 L1698.52 1214.06 L1697.93 1214.06 L1697.34 1214.06 L1696.76 1214.06 L1696.17 1214.06 L1695.58 1214.06 L1695 1214.06 L1694.41 1214.06 L1693.83 1214.06 L1693.24 1214.06 L1692.65 1214.06 L1692.07 1214.06 L1691.48 1214.06 L1690.89 1214.06 L1690.31 1214.06 L1689.72 1214.06 L1689.13 1214.06 L1688.55 1214.06 L1687.96 1214.06 L1687.37 1214.06 L1686.79 1214.06 L1686.2 1214.06 L1685.62 1214.06 L1685.03 1214.06 L1684.44 1214.06 L1683.86 1214.06 L1683.27 1214.06 L1682.68 1214.06 L1682.1 1214.06 L1681.51 1214.06 L1680.92 1214.06 L1680.34 1214.06 L1679.75 1214.06 L1679.17 1214.06 L1678.58 1214.06 L1677.99 1214.06 L1677.41 1214.06 L1676.82 1214.06 L1676.23 1214.06 L1675.65 1214.06 L1675.06 1214.06 L1674.47 1214.06 L1673.89 1214.06 L1673.3 1214.06 L1672.71 1214.06 L1672.13 1214.06 L1671.54 1214.06 L1670.96 1214.06 L1670.37 1214.06 L1669.78 1214.06 L1669.2 1214.06 L1668.61 1214.06 L1668.02 1214.06 L1667.44 1214.06 L1666.85 1214.06 L1666.26 1214.06 L1665.68 1214.06 L1665.09 1214.06 L1664.5 1214.06 L1663.92 1214.06 L1663.33 1214.06 L1662.75 1214.06 L1662.16 1214.06 L1661.57 1214.06 L1660.99 1214.06 L1660.4 1214.06 L1659.81 1214.06 L1659.23 1214.06 L1658.64 1214.06 L1658.05 1214.06 L1657.47 1214.06 L1656.88 1214.06 L1656.29 1214.06 L1655.71 1214.06 L1655.12 1214.06 L1654.54 1214.06 L1653.95 1214.06 L1653.36 1214.06 L1652.78 1214.06 L1652.19 1214.06 L1651.6 1214.06 L1651.02 1214.06 L1650.43 1214.06 L1649.84 1214.06 L1649.26 1214.06 L1648.67 1214.06 L1648.09 1214.06 L1647.5 1214.06 L1646.91 1214.06 L1646.33 1214.06 L1645.74 1214.06 L1645.15 1214.06 L1644.57 1214.06 L1643.98 1214.06 L1643.39 1214.06 L1642.81 1214.06 L1642.22 1214.06 L1641.63 1214.06 L1641.05 1214.06 L1640.46 1214.06 L1639.88 1214.06 L1639.29 1214.06 L1638.7 1214.06 L1638.12 1214.06 L1637.53 1214.06 L1636.94 1214.06 L1636.36 1214.06 L1635.77 1214.06 L1635.18 1214.06 L1634.6 1214.06 L1634.01 1214.06 L1633.42 1214.06 L1632.84 1214.06 L1632.25 1214.06 L1631.67 1214.06 L1631.08 1214.06 L1630.49 1214.06 L1629.91 1214.06 L1629.32 1214.06 L1628.73 1214.06 L1628.15 1214.06 L1627.56 1214.06 L1626.97 1214.06 L1626.39 1214.06 L1625.8 1214.06 L1625.22 1214.06 L1624.63 1214.06 L1624.04 1214.06 L1623.46 1214.06 L1622.87 1214.06 L1622.28 1214.06 L1621.7 1214.06 L1621.11 1214.06 L1620.52 1214.06 L1619.94 1214.06 L1619.35 1214.06 L1618.76 1214.06 L1618.18 1214.06 L1617.59 1214.06 L1617.01 1214.06 L1616.42 1214.06 L1615.83 1214.06 L1615.25 1214.06 L1614.66 1214.06 L1614.07 1214.06 L1613.49 1214.06 L1612.9 1214.06 L1612.31 1214.06 L1611.73 1214.06 L1611.14 1214.06 L1610.55 1214.06 L1609.97 1214.06 L1609.38 1214.06 L1608.8 1214.06 L1608.21 1214.06 L1607.62 1214.06 L1607.04 1214.06 L1606.45 1214.06 L1605.86 1214.06 L1605.28 1214.06 L1604.69 1214.06 L1604.1 1214.06 L1603.52 1214.06 L1602.93 1214.06 L1602.34 1214.06 L1601.76 1214.06 L1601.17 1214.06 L1600.59 1214.06 L1600 1214.06 L1599.41 1214.06 L1598.83 1214.06 L1598.24 1214.06 L1597.65 1214.06 L1597.07 1214.06 L1596.48 1214.06 L1595.89 1214.06 L1595.31 1214.06 L1594.72 1214.06 L1594.14 1214.06 L1593.55 1214.06 L1592.96 1214.06 L1592.38 1214.06 L1591.79 1214.06 L1591.2 1214.06 L1590.62 1214.06 L1590.03 1214.06 L1589.44 1214.06 L1588.86 1214.06 L1588.27 1214.06 L1587.68 1214.06 L1587.1 1214.06 L1586.51 1214.06 L1585.93 1214.06 L1585.34 1214.06 L1584.75 1214.06 L1584.17 1214.06 L1583.58 1214.06 L1582.99 1214.06 L1582.41 1214.06 L1581.82 1214.06 L1581.23 1214.06 L1580.65 1214.06 L1580.06 1214.06 L1579.47 1214.06 L1578.89 1214.06 L1578.3 1214.06 L1577.72 1214.06 L1577.13 1214.06 L1576.54 1214.06 L1575.96 1214.06 L1575.37 1214.06 L1574.78 1214.06 L1574.2 1214.06 L1573.61 1214.06 L1573.02 1214.06 L1572.44 1214.06 L1571.85 1214.06 L1571.27 1214.06 L1570.68 1214.06 L1570.09 1214.06 L1569.51 1214.06 L1568.92 1214.06 L1568.33 1214.06 L1567.75 1214.06 L1567.16 1214.06 L1566.57 1214.06 L1565.99 1214.06 L1565.4 1214.06 L1564.81 1214.06 L1564.23 1214.06 L1563.64 1214.06 L1563.06 1214.06 L1562.47 1214.06 L1561.88 1214.06 L1561.3 1214.06 L1560.71 1214.06 L1560.12 1214.06 L1559.54 1214.06 L1558.95 1214.06 L1558.36 1214.06 L1557.78 1214.06 L1557.19 1214.06 L1556.6 1214.06 L1556.02 1214.06 L1555.43 1214.06 L1554.85 1214.06 L1554.26 1214.06 L1553.67 1214.06 L1553.09 1214.06 L1552.5 1214.06 L1551.91 1214.06 L1551.33 1214.06 L1550.74 1214.06 L1550.15 1214.06 L1549.57 1214.06 L1548.98 1214.06 L1548.4 1214.06 L1547.81 1214.06 L1547.22 1214.06 L1546.64 1214.06 L1546.05 1214.06 L1545.46 1214.06 L1544.88 1214.06 L1544.29 1214.06 L1543.7 1214.06 L1543.12 1214.06 L1542.53 1214.06 L1541.94 1214.06 L1541.36 1214.06 L1540.77 1214.06 L1540.19 1214.06 L1539.6 1214.06 L1539.01 1214.06 L1538.43 1214.06 L1537.84 1214.06 L1537.25 1214.06 L1536.67 1214.06 L1536.08 1214.06 L1535.49 1214.06 L1534.91 1214.06 L1534.32 1214.06 L1533.73 1214.06 L1533.15 1214.06 L1532.56 1214.06 L1531.98 1214.06 L1531.39 1214.06 L1530.8 1214.06 L1530.22 1214.06 L1529.63 1214.06 L1529.04 1214.06 L1528.46 1214.06 L1527.87 1214.06 L1527.28 1214.06 L1526.7 1214.06 L1526.11 1214.06 L1525.52 1214.06 L1524.94 1214.06 L1524.35 1214.06 L1523.77 1214.06 L1523.18 1214.06 L1522.59 1214.06 L1522.01 1214.06 L1521.42 1214.06 L1520.83 1214.06 L1520.25 1214.06 L1519.66 1214.06 L1519.07 1214.06 L1518.49 1214.06 L1517.9 1214.06 L1517.32 1214.06 L1516.73 1214.06 L1516.14 1214.06 L1515.56 1214.06 L1514.97 1214.06 L1514.38 1214.06 L1513.8 1214.06 L1513.21 1214.06 L1512.62 1214.06 L1512.04 1214.06 L1511.45 1214.06 L1510.86 1214.06 L1510.28 1214.06 L1509.69 1214.06 L1509.11 1214.06 L1508.52 1214.06 L1507.93 1214.06 L1507.35 1214.06 L1506.76 1214.06 L1506.17 1214.06 L1505.59 1214.06 L1505 1214.06 L1504.41 1214.06 L1503.83 1214.06 L1503.24 1214.06 L1502.65 1214.06 L1502.07 1214.06 L1501.48 1214.06 L1500.9 1214.06 L1500.31 1214.06 L1499.72 1214.06 L1499.14 1214.06 L1498.55 1214.06 L1497.96 1214.06 L1497.38 1214.06 L1496.79 1214.06 L1496.2 1214.06 L1495.62 1214.06 L1495.03 1214.06 L1494.45 1214.06 L1493.86 1214.06 L1493.27 1214.06 L1492.69 1214.06 L1492.1 1214.06 L1491.51 1214.06 L1490.93 1214.06 L1490.34 1214.06 L1489.75 1214.06 L1489.17 1214.06 L1488.58 1214.06 L1487.99 1214.06 L1487.41 1214.06 L1486.82 1214.06 L1486.24 1214.06 L1485.65 1214.06 L1485.06 1214.06 L1484.48 1214.06 L1483.89 1214.06 L1483.3 1214.06 L1482.72 1214.06 L1482.13 1214.06 L1481.54 1214.06 L1480.96 1214.06 L1480.37 1214.06 L1479.78 1214.06 L1479.2 1214.06 L1478.61 1214.06 L1478.03 1214.06 L1477.44 1214.06 L1476.85 1214.06 L1476.27 1214.06 L1475.68 1214.06 L1475.09 1214.06 L1474.51 1214.06 L1473.92 1214.06 L1473.33 1214.06 L1472.75 1214.06 L1472.16 1214.06 L1471.57 1214.06 L1470.99 1214.06 L1470.4 1214.06 L1469.82 1214.06 L1469.23 1214.06 L1468.64 1214.06 L1468.06 1214.06 L1467.47 1214.06 L1466.88 1214.06 L1466.3 1214.06 L1465.71 1214.06 L1465.12 1214.06 L1464.54 1214.06 L1463.95 1214.06 L1463.37 1214.06 L1462.78 1214.06 L1462.19 1214.06 L1461.61 1214.06 L1461.02 1214.06 L1460.43 1214.06 L1459.85 1214.06 L1459.26 1214.06 L1458.67 1214.06 L1458.09 1214.06 L1457.5 1214.06 L1456.91 1214.06 L1456.33 1214.06 L1455.74 1214.06 L1455.16 1214.06 L1454.57 1214.06 L1453.98 1214.06 L1453.4 1214.06 L1452.81 1214.06 L1452.22 1214.06 L1451.64 1214.06 L1451.05 1214.06 L1450.46 1214.06 L1449.88 1214.06 L1449.29 1214.06 L1448.7 1214.06 L1448.12 1214.06 L1447.53 1214.06 L1446.95 1214.06 L1446.36 1214.06 L1445.77 1214.06 L1445.19 1214.06 L1444.6 1214.06 L1444.01 1214.06 L1443.43 1214.06 L1442.84 1214.06 L1442.25 1214.06 L1441.67 1214.06 L1441.08 1214.06 L1440.5 1214.06 L1439.91 1214.06 L1439.32 1214.06 L1438.74 1214.06 L1438.15 1214.06 L1437.56 1214.06 L1436.98 1214.06 L1436.39 1214.06 L1435.8 1214.06 L1435.22 1214.06 L1434.63 1214.06 L1434.04 1214.06 L1433.46 1214.06 L1432.87 1214.06 L1432.29 1214.06 L1431.7 1214.06 L1431.11 1214.06 L1430.53 1214.06 L1429.94 1214.06 L1429.35 1214.06 L1428.77 1214.06 L1428.18 1214.06 L1427.59 1214.06 L1427.01 1214.06 L1426.42 1214.06 L1425.83 1214.06 L1425.25 1214.06 L1424.66 1214.06 L1424.08 1214.06 L1423.49 1214.06 L1422.9 1214.06 L1422.32 1214.06 L1421.73 1214.06 L1421.14 1214.06 L1420.56 1214.06 L1419.97 1214.06 L1419.38 1214.06 L1418.8 1214.06 L1418.21 1214.06 L1417.63 1214.06 L1417.04 1214.06 L1416.45 1214.06 L1415.87 1214.06 L1415.28 1214.06 L1414.69 1214.06 L1414.11 1214.06 L1413.52 1214.06 L1412.93 1214.06 L1412.35 1214.06 L1411.76 1214.06 L1411.17 1214.06 L1410.59 1214.06 L1410 1214.06 L1409.42 1214.06 L1408.83 1214.06 L1408.24 1214.06 L1407.66 1214.06 L1407.07 1214.06 L1406.48 1214.06 L1405.9 1214.06 L1405.31 1214.06 L1404.72 1214.06 L1404.14 1214.06 L1403.55 1214.06 L1402.96 1214.06 L1402.38 1214.06 L1401.79 1214.06 L1401.21 1214.06 L1400.62 1214.06 L1400.03 1214.06 L1399.45 1214.06 L1398.86 1214.06 L1398.27 1214.06 L1397.69 1214.06 L1397.1 1214.06 L1396.51 1214.06 L1395.93 1214.06 L1395.34 1214.06 L1394.75 1214.06 L1394.17 1214.06 L1393.58 1214.06 L1393 1214.06 L1392.41 1214.06 L1391.82 1214.06 L1391.24 1214.06 L1390.65 1214.06 L1390.06 1214.06 L1389.48 1214.06 L1388.89 1214.06 L1388.3 1214.06 L1387.72 1214.06 L1387.13 1214.06 L1386.55 1214.06 L1385.96 1214.06 L1385.37 1214.06 L1384.79 1214.06 L1384.2 1214.06 L1383.61 1214.06 L1383.03 1214.06 L1382.44 1214.06 L1381.85 1214.06 L1381.27 1214.06 L1380.68 1214.06 L1380.09 1214.06 L1379.51 1214.06 L1378.92 1214.06 L1378.34 1214.06 L1377.75 1214.06 L1377.16 1214.06 L1376.58 1214.06 L1375.99 1214.06 L1375.4 1214.06 L1374.82 1214.06 L1374.23 1214.06 L1373.64 1214.06 L1373.06 1214.06 L1372.47 1214.06 L1371.88 1214.06 L1371.3 1214.06 L1370.71 1214.06 L1370.13 1214.06 L1369.54 1214.06 L1368.95 1214.06 L1368.37 1214.06 L1367.78 1214.06 L1367.19 1214.06 L1366.61 1214.06 L1366.02 1214.06 L1365.43 1214.06 L1364.85 1214.06 L1364.26 1214.06 L1363.68 1214.06 L1363.09 1214.06 L1362.5 1214.06 L1361.92 1214.06 L1361.33 1214.06 L1360.74 1214.06 L1360.16 1214.06 L1359.57 1214.06 L1358.98 1214.06 L1358.4 1214.06 L1357.81 1214.06 L1357.22 1214.06 L1356.64 1214.06 L1356.05 1214.06 L1355.47 1214.06 L1354.88 1214.06 L1354.29 1214.06 L1353.71 1214.06 L1353.12 1214.06 L1352.53 1214.06 L1351.95 1214.06 L1351.36 1214.06 L1350.77 1214.06 L1350.19 1214.06 L1349.6 1214.06 L1349.01 1214.06 L1348.43 1214.06 L1347.84 1214.06 L1347.26 1214.06 L1346.67 1214.06 L1346.08 1214.06 L1345.5 1214.06 L1344.91 1214.06 L1344.32 1214.06 L1343.74 1214.06 L1343.15 1214.06 L1342.56 1214.06 L1341.98 1214.06 L1341.39 1214.06 L1340.8 1214.06 L1340.22 1214.06 L1339.63 1214.06 L1339.05 1214.06 L1338.46 1214.06 L1337.87 1214.06 L1337.29 1214.06 L1336.7 1214.06 L1336.11 1214.06 L1335.53 1214.06 L1334.94 1214.06 L1334.35 1214.06 L1333.77 1214.06 L1333.18 1214.06 L1332.6 1214.06 L1332.01 1214.06 L1331.42 1214.06 L1330.84 1214.06 L1330.25 1214.06 L1329.66 1214.06 L1329.08 1214.06 L1328.49 1214.06 L1327.9 1214.06 L1327.32 1214.06 L1326.73 1214.06 L1326.14 1214.06 L1325.56 1214.06 L1324.97 1214.06 L1324.39 1214.06 L1323.8 1214.06 L1323.21 1214.06 L1322.63 1214.06 L1322.04 1214.06 L1321.45 1214.06 L1320.87 1214.06 L1320.28 1214.06 L1319.69 1214.06 L1319.11 1214.06 L1318.52 1214.06 L1317.93 1214.06 L1317.35 1214.06 L1316.76 1214.06 L1316.18 1214.06 L1315.59 1214.06 L1315 1214.06 L1314.42 1214.06 L1313.83 1214.06 L1313.24 1214.06 L1312.66 1214.06 L1312.07 1214.06 L1311.48 1214.06 L1310.9 1214.06 L1310.31 1214.06 L1309.73 1214.06 L1309.14 1214.06 L1308.55 1214.06 L1307.97 1214.06 L1307.38 1214.06 L1306.79 1214.06 L1306.21 1214.06 L1305.62 1214.06 L1305.03 1214.06 L1304.45 1214.06 L1303.86 1214.06 L1303.27 1214.06 L1302.69 1214.06 L1302.1 1214.06 L1301.52 1214.06 L1300.93 1214.06 L1300.34 1214.06 L1299.76 1214.06 L1299.17 1214.06 L1298.58 1214.06 L1298 1214.06 L1297.41 1214.06 L1296.82 1214.06 L1296.24 1214.06 L1295.65 1214.06 L1295.06 1214.06 L1294.48 1214.06 L1293.89 1214.06 L1293.31 1214.06 L1292.72 1214.06 L1292.13 1214.06 L1291.55 1214.06 L1290.96 1214.06 L1290.37 1214.06 L1289.79 1214.06 L1289.2 1214.06 L1288.61 1214.06 L1288.03 1214.06 L1287.44 1214.06 L1286.86 1214.06 L1286.27 1214.06 L1285.68 1214.06 L1285.1 1214.06 L1284.51 1214.06 L1283.92 1214.06 L1283.34 1214.06 L1282.75 1214.06 L1282.16 1214.06 L1281.58 1214.06 L1280.99 1214.06 L1280.4 1214.06 L1279.82 1214.06 L1279.23 1214.06 L1278.65 1214.06 L1278.06 1214.06 L1277.47 1214.06 L1276.89 1214.06 L1276.3 1214.06 L1275.71 1214.06 L1275.13 1214.06 L1274.54 1214.06 L1273.95 1214.06 L1273.37 1214.06 L1272.78 1214.06 L1272.19 1214.06 L1271.61 1214.06 L1271.02 1214.06 L1270.44 1214.06 L1269.85 1214.06 L1269.26 1214.06 L1268.68 1214.06 L1268.09 1214.06 L1267.5 1214.06 L1266.92 1214.06 L1266.33 1214.06 L1265.74 1214.06 L1265.16 1214.06 L1264.57 1214.06 L1263.98 1214.06 L1263.4 1214.06 L1262.81 1214.06 L1262.23 1214.06 L1261.64 1214.06 L1261.05 1214.06 L1260.47 1214.06 L1259.88 1214.06 L1259.29 1214.06 L1258.71 1214.06 L1258.12 1214.06 L1257.53 1214.06 L1256.95 1214.06 L1256.36 1214.06 L1255.78 1214.06 L1255.19 1214.06 L1254.6 1214.06 L1254.02 1214.06 L1253.43 1214.06 L1252.84 1214.06 L1252.26 1214.06 L1251.67 1214.06 L1251.08 1214.06 L1250.5 1214.06 L1249.91 1214.06 L1249.32 1214.06 L1248.74 1214.06 L1248.15 1214.06 L1247.57 1214.06 L1246.98 1214.06 L1246.39 1214.06 L1245.81 1214.06 L1245.22 1214.06 L1244.63 1214.06 L1244.05 1214.06 L1243.46 1214.06 L1242.87 1214.06 L1242.29 1214.06 L1241.7 1214.06 L1241.11 1214.06 L1240.53 1214.06 L1239.94 1214.06 L1239.36 1214.06 L1238.77 1214.06 L1238.18 1214.06 L1237.6 1214.06 L1237.01 1214.06 L1236.42 1214.06 L1235.84 1214.06 L1235.25 1214.06 L1234.66 1214.06 L1234.08 1214.06 L1233.49 1214.06 L1232.91 1214.06 L1232.32 1214.06 L1231.73 1214.06 L1231.15 1214.06 L1230.56 1214.06 L1229.97 1214.06 L1229.39 1214.06 L1228.8 1214.06 L1228.21 1214.06 L1227.63 1214.06 L1227.04 1214.06 L1226.45 1214.06 L1225.87 1214.06 L1225.28 1214.06 L1224.7 1214.06 L1224.11 1214.06 L1223.52 1214.06 L1222.94 1214.06 L1222.35 1214.06 L1221.76 1214.06 L1221.18 1214.06 L1220.59 1214.06 L1220 1214.06 L1219.42 1214.06 L1218.83 1214.06 L1218.24 1214.06 L1217.66 1214.06 L1217.07 1214.06 L1216.49 1214.06 L1215.9 1214.06 L1215.31 1214.06 L1214.73 1214.06 L1214.14 1214.06 L1213.55 1214.06 L1212.97 1214.06 L1212.38 1214.06 L1211.79 1214.06 L1211.21 1214.06 L1210.62 1214.06 L1210.03 1214.06 L1209.45 1214.06 L1208.86 1214.06 L1208.28 1214.06 L1207.69 1214.06 L1207.1 1214.06 L1206.52 1214.06 L1205.93 1214.06 L1205.34 1214.06 L1204.76 1214.06 L1204.17 1214.06 L1203.58 1214.06 L1203 1214.06 L1202.41 1214.06 L1201.83 1214.06 L1201.24 1214.06 L1200.65 1214.06 L1200.07 1214.06 L1199.48 1214.06 L1198.89 1214.06 L1198.31 1214.06 L1197.72 1214.06 L1197.13 1214.06 L1196.55 1214.06 L1195.96 1214.06 L1195.37 1214.06 L1194.79 1214.06 L1194.2 1214.06 L1193.62 1214.06 L1193.03 1214.06 L1192.44 1214.06 L1191.86 1214.06 L1191.27 1214.06 L1190.68 1214.06 L1190.1 1214.06 L1189.51 1214.06 L1188.92 1214.06 L1188.34 1214.06 L1187.75 1214.06 L1187.16 1214.06 L1186.58 1214.06 L1185.99 1214.06 L1185.41 1214.06 L1184.82 1214.06 L1184.23 1214.06 L1183.65 1214.06 L1183.06 1214.06 L1182.47 1214.06 L1181.89 1214.06 L1181.3 1214.06 L1180.71 1214.06 L1180.13 1214.06 L1179.54 1214.06 L1178.96 1214.06 L1178.37 1214.06 L1177.78 1214.06 L1177.2 1214.06 L1176.61 1214.06 L1176.02 1214.06 L1175.44 1214.06 L1174.85 1214.06 L1174.26 1214.06 L1173.68 1214.06 L1173.09 1214.06 L1172.5 1214.06 L1171.92 1214.06 L1171.33 1214.06 L1170.75 1214.06 L1170.16 1214.06 L1169.57 1214.06 L1168.99 1214.06 L1168.4 1214.06 L1167.81 1214.06 L1167.23 1214.06 L1166.64 1214.06 L1166.05 1214.06 L1165.47 1214.06 L1164.88 1214.06 L1164.29 1214.06 L1163.71 1214.06 L1163.12 1214.06 L1162.54 1214.06 L1161.95 1214.06 L1161.36 1214.06 L1160.78 1214.06 L1160.19 1214.06 L1159.6 1214.06 L1159.02 1214.06 L1158.43 1214.06 L1157.84 1214.06 L1157.26 1214.06 L1156.67 1214.06 L1156.09 1214.06 L1155.5 1214.06 L1154.91 1214.06 L1154.33 1214.06 L1153.74 1214.06 L1153.15 1214.06 L1152.57 1214.06 L1151.98 1214.06 L1151.39 1214.06 L1150.81 1214.06 L1150.22 1214.06 L1149.63 1214.06 L1149.05 1214.06 L1148.46 1214.06 L1147.88 1214.06 L1147.29 1214.06 L1146.7 1214.06 L1146.12 1214.06 L1145.53 1214.06 L1144.94 1214.06 L1144.36 1214.06 L1143.77 1214.06 L1143.18 1214.06 L1142.6 1214.06 L1142.01 1214.06 L1141.42 1214.06 L1140.84 1214.06 L1140.25 1214.06 L1139.67 1214.06 L1139.08 1214.06 L1138.49 1214.06 L1137.91 1214.06 L1137.32 1214.06 L1136.73 1214.06 L1136.15 1214.06 L1135.56 1214.06 L1134.97 1214.06 L1134.39 1214.06 L1133.8 1214.06 L1133.21 1214.06 L1132.63 1214.06 L1132.04 1214.06 L1131.46 1214.06 L1130.87 1214.06 L1130.28 1214.06 L1129.7 1214.06 L1129.11 1214.06 L1128.52 1214.06 L1127.94 1214.06 L1127.35 1214.06 L1126.76 1214.06 L1126.18 1214.06 L1125.59 1214.06 L1125.01 1214.06 L1124.42 1214.06 L1123.83 1214.06 L1123.25 1214.06 L1122.66 1214.06 L1122.07 1214.06 L1121.49 1214.06 L1120.9 1214.06 L1120.31 1214.06 L1119.73 1214.06 L1119.14 1214.06 L1118.55 1214.06 L1117.97 1214.06 L1117.38 1214.06 L1116.8 1214.06 L1116.21 1214.06 L1115.62 1214.06 L1115.04 1214.06 L1114.45 1214.06 L1113.86 1214.06 L1113.28 1214.06 L1112.69 1214.06 L1112.1 1214.06 L1111.52 1214.06 L1110.93 1214.06 L1110.34 1214.06 L1109.76 1214.06 L1109.17 1214.06 L1108.59 1214.06 L1108 1214.06 L1107.41 1214.06 L1106.83 1214.06 L1106.24 1214.06 L1105.65 1214.06 L1105.07 1214.06 L1104.48 1214.06 L1103.89 1214.06 L1103.31 1214.06 L1102.72 1214.06 L1102.14 1214.06 L1101.55 1214.06 L1100.96 1214.06 L1100.38 1214.06 L1099.79 1214.06 L1099.2 1214.06 L1098.62 1214.06 L1098.03 1214.06 L1097.44 1214.06 L1096.86 1214.06 L1096.27 1214.06 L1095.68 1214.06 L1095.1 1214.06 L1094.51 1214.06 L1093.93 1214.06 L1093.34 1214.06 L1092.75 1214.06 L1092.17 1214.06 L1091.58 1214.06 L1090.99 1214.06 L1090.41 1214.06 L1089.82 1214.06 L1089.23 1214.06 L1088.65 1214.06 L1088.06 1214.06 L1087.47 1214.06 L1086.89 1214.06 L1086.3 1214.06 L1085.72 1214.06 L1085.13 1214.06 L1084.54 1214.06 L1083.96 1214.06 L1083.37 1214.06 L1082.78 1214.06 L1082.2 1214.06 L1081.61 1214.06 L1081.02 1214.06 L1080.44 1214.06 L1079.85 1214.06 L1079.26 1214.06 L1078.68 1214.06 L1078.09 1214.06 L1077.51 1214.06 L1076.92 1214.06 L1076.33 1214.06 L1075.75 1214.06 L1075.16 1214.06 L1074.57 1214.06 L1073.99 1214.06 L1073.4 1214.06 L1072.81 1214.06 L1072.23 1214.06 L1071.64 1214.06 L1071.06 1214.06 L1070.47 1214.06 L1069.88 1214.06 L1069.3 1214.06 L1068.71 1214.06 L1068.12 1214.06 L1067.54 1214.06 L1066.95 1214.06 L1066.36 1214.06 L1065.78 1214.06 L1065.19 1214.06 L1064.6 1214.06 L1064.02 1214.06 L1063.43 1214.06 L1062.85 1214.06 L1062.26 1214.06 L1061.67 1214.06 L1061.09 1214.06 L1060.5 1214.06 L1059.91 1214.06 L1059.33 1214.06 L1058.74 1214.06 L1058.15 1214.06 L1057.57 1214.06 L1056.98 1214.06 L1056.39 1214.06 L1055.81 1214.06 L1055.22 1214.06 L1054.64 1214.06 L1054.05 1214.06 L1053.46 1214.06 L1052.88 1214.06 L1052.29 1214.06 L1051.7 1214.06 L1051.12 1214.06 L1050.53 1214.06 L1049.94 1214.06 L1049.36 1214.06 L1048.77 1214.06 L1048.19 1214.06 L1047.6 1214.06 L1047.01 1214.06 L1046.43 1214.06 L1045.84 1214.06 L1045.25 1214.06 L1044.67 1214.06 L1044.08 1214.06 L1043.49 1214.06 L1042.91 1214.06 L1042.32 1214.06 L1041.73 1214.06 L1041.15 1214.06 L1040.56 1214.06 L1039.98 1214.06 L1039.39 1214.06 L1038.8 1214.06 L1038.22 1214.06 L1037.63 1214.06 L1037.04 1214.06 L1036.46 1214.06 L1035.87 1214.06 L1035.28 1214.06 L1034.7 1214.06 L1034.11 1214.06 L1033.52 1214.06 L1032.94 1214.06 L1032.35 1214.06 L1031.77 1214.06 L1031.18 1214.06 L1030.59 1214.06 L1030.01 1214.06 L1029.42 1214.06 L1028.83 1214.06 L1028.25 1214.06 L1027.66 1214.06 L1027.07 1214.06 L1026.49 1214.06 L1025.9 1214.06 L1025.32 1214.06 L1024.73 1214.06 L1024.14 1214.06 L1023.56 1214.06 L1022.97 1214.06 L1022.38 1214.06 L1021.8 1214.06 L1021.21 1214.06 L1020.62 1214.06 L1020.04 1214.06 L1019.45 1214.06 L1018.86 1214.06 L1018.28 1214.06 L1017.69 1214.06 L1017.11 1214.06 L1016.52 1214.06 L1015.93 1214.06 L1015.35 1214.06 L1014.76 1214.06 L1014.17 1214.06 L1013.59 1214.06 L1013 1214.06 L1012.41 1214.06 L1011.83 1214.06 L1011.24 1214.06 L1010.65 1214.06 L1010.07 1214.06 L1009.48 1214.06 L1008.9 1214.06 L1008.31 1214.06 L1007.72 1214.06 L1007.14 1214.06 L1006.55 1214.06 L1005.96 1214.06 L1005.38 1214.06 L1004.79 1214.06 L1004.2 1214.06 L1003.62 1214.06 L1003.03 1214.06 L1002.44 1214.06 L1001.86 1214.06 L1001.27 1214.06 L1000.69 1214.06 L1000.1 1214.06 L999.513 1214.06 L998.926 1214.06 L998.34 1214.06 L997.754 1214.06 L997.167 1214.06 L996.581 1214.06 L995.994 1214.06 L995.408 1214.06 L994.822 1214.06 L994.235 1214.06 L993.649 1214.06 L993.062 1214.06 L992.476 1214.06 L991.889 1214.06 L991.303 1214.06 L990.717 1214.06 L990.13 1214.06 L989.544 1214.06 L988.957 1214.06 L988.371 1214.06 L987.785 1214.06 L987.198 1214.06 L986.612 1214.06 L986.025 1214.06  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.36 986.612,1214.36 987.198,1214.36 987.785,1214.36 988.371,1214.36 988.957,1214.36 989.544,1214.36 990.13,1214.36 990.717,1214.36 991.303,1214.36 991.889,1214.36 992.476,1214.36 993.062,1214.36 993.649,1214.36 994.235,1214.36 994.822,1214.36 995.408,1214.36 995.994,1214.36 996.581,1214.36 997.167,1214.36 997.754,1214.36 998.34,1214.36 998.926,1214.36 999.513,1214.36 1000.1,1214.36 1000.69,1214.36 1001.27,1214.36 1001.86,1214.36 1002.44,1214.36 1003.03,1214.36 1003.62,1214.36 1004.2,1214.36 1004.79,1214.36 1005.38,1214.36 1005.96,1214.36 1006.55,1214.36 1007.14,1214.36 1007.72,1214.36 1008.31,1214.36 1008.9,1214.36 1009.48,1214.36 1010.07,1214.36 1010.65,1214.36 1011.24,1214.36 1011.83,1214.36 1012.41,1214.36 1013,1214.36 1013.59,1214.36 1014.17,1214.36 1014.76,1214.36 1015.35,1214.36 1015.93,1214.36 1016.52,1214.36 1017.11,1214.36 1017.69,1214.36 1018.28,1214.36 1018.86,1214.36 1019.45,1214.36 1020.04,1214.36 1020.62,1214.36 1021.21,1214.36 1021.8,1214.36 1022.38,1214.36 1022.97,1214.36 1023.56,1214.36 1024.14,1214.36 1024.73,1214.36 1025.32,1214.36 1025.9,1214.36 1026.49,1214.36 1027.07,1214.36 1027.66,1214.36 1028.25,1214.36 1028.83,1214.36 1029.42,1214.36 1030.01,1214.36 1030.59,1214.36 1031.18,1214.36 1031.77,1214.36 1032.35,1214.36 1032.94,1214.36 1033.52,1214.36 1034.11,1214.36 1034.7,1214.36 1035.28,1214.36 1035.87,1214.36 1036.46,1214.36 1037.04,1214.36 1037.63,1214.36 1038.22,1214.36 1038.8,1214.36 1039.39,1214.36 1039.98,1214.36 1040.56,1214.36 1041.15,1214.36 1041.73,1214.36 1042.32,1214.36 1042.91,1214.36 1043.49,1214.36 1044.08,1214.36 1044.67,1214.36 1045.25,1214.36 1045.84,1214.36 1046.43,1214.36 1047.01,1214.36 1047.6,1214.36 1048.19,1214.36 1048.77,1214.36 1049.36,1214.36 1049.94,1214.36 1050.53,1214.36 1051.12,1214.36 1051.7,1214.36 1052.29,1214.36 1052.88,1214.36 1053.46,1214.36 1054.05,1214.36 1054.64,1214.36 1055.22,1214.36 1055.81,1214.36 1056.39,1214.36 1056.98,1214.36 1057.57,1214.36 1058.15,1214.36 1058.74,1214.36 1059.33,1214.36 1059.91,1214.36 1060.5,1214.36 1061.09,1214.36 1061.67,1214.36 1062.26,1214.36 1062.85,1214.36 1063.43,1214.36 1064.02,1214.36 1064.6,1214.36 1065.19,1214.36 1065.78,1214.36 1066.36,1214.36 1066.95,1214.36 1067.54,1214.36 1068.12,1214.36 1068.71,1214.36 1069.3,1214.36 1069.88,1214.36 1070.47,1214.36 1071.06,1214.36 1071.64,1214.36 1072.23,1214.36 1072.81,1214.36 1073.4,1214.36 1073.99,1214.36 1074.57,1214.36 1075.16,1214.36 1075.75,1214.36 1076.33,1214.36 1076.92,1214.36 1077.51,1214.36 1078.09,1214.36 1078.68,1214.36 1079.26,1214.36 1079.85,1214.36 1080.44,1214.36 1081.02,1214.36 1081.61,1214.36 1082.2,1214.36 1082.78,1214.36 1083.37,1214.36 1083.96,1214.36 1084.54,1214.36 1085.13,1214.36 1085.72,1214.36 1086.3,1214.36 1086.89,1214.36 1087.47,1214.36 1088.06,1214.36 1088.65,1214.36 1089.23,1214.36 1089.82,1214.36 1090.41,1214.36 1090.99,1214.36 1091.58,1214.36 1092.17,1214.36 1092.75,1214.36 1093.34,1214.36 1093.93,1214.36 1094.51,1214.36 1095.1,1214.36 1095.68,1214.36 1096.27,1214.36 1096.86,1214.36 1097.44,1214.36 1098.03,1214.36 1098.62,1214.36 1099.2,1214.36 1099.79,1214.36 1100.38,1214.36 1100.96,1214.36 1101.55,1214.36 1102.14,1214.36 1102.72,1214.36 1103.31,1214.36 1103.89,1214.36 1104.48,1214.36 1105.07,1214.36 1105.65,1214.36 1106.24,1214.36 1106.83,1214.36 1107.41,1214.36 1108,1214.36 1108.59,1214.36 1109.17,1214.36 1109.76,1214.36 1110.34,1214.36 1110.93,1214.36 1111.52,1214.36 1112.1,1214.36 1112.69,1214.36 1113.28,1214.36 1113.86,1214.36 1114.45,1214.36 1115.04,1214.36 1115.62,1214.36 1116.21,1214.36 1116.8,1214.36 1117.38,1214.36 1117.97,1214.36 1118.55,1214.36 1119.14,1214.36 1119.73,1214.36 1120.31,1214.36 1120.9,1214.36 1121.49,1214.36 1122.07,1214.36 1122.66,1214.36 1123.25,1214.36 1123.83,1214.36 1124.42,1214.36 1125.01,1214.36 1125.59,1214.36 1126.18,1214.36 1126.76,1214.36 1127.35,1214.36 1127.94,1214.36 1128.52,1214.36 1129.11,1214.36 1129.7,1214.36 1130.28,1214.36 1130.87,1214.36 1131.46,1214.36 1132.04,1214.36 1132.63,1214.36 1133.21,1214.36 1133.8,1214.36 1134.39,1214.36 1134.97,1214.36 1135.56,1214.36 1136.15,1214.36 1136.73,1214.36 1137.32,1214.36 1137.91,1214.36 1138.49,1214.36 1139.08,1214.36 1139.67,1214.36 1140.25,1214.36 1140.84,1214.36 1141.42,1214.36 1142.01,1214.36 1142.6,1214.36 1143.18,1214.36 1143.77,1214.36 1144.36,1214.36 1144.94,1214.36 1145.53,1214.36 1146.12,1214.36 1146.7,1214.36 1147.29,1214.36 1147.88,1214.36 1148.46,1214.36 1149.05,1214.36 1149.63,1214.36 1150.22,1214.36 1150.81,1214.36 1151.39,1214.36 1151.98,1214.36 1152.57,1214.36 1153.15,1214.36 1153.74,1214.36 1154.33,1214.36 1154.91,1214.36 1155.5,1214.36 1156.09,1214.36 1156.67,1214.36 1157.26,1214.36 1157.84,1214.36 1158.43,1214.36 1159.02,1214.36 1159.6,1214.36 1160.19,1214.36 1160.78,1214.36 1161.36,1214.36 1161.95,1214.36 1162.54,1214.36 1163.12,1214.36 1163.71,1214.36 1164.29,1214.36 1164.88,1214.36 1165.47,1214.36 1166.05,1214.36 1166.64,1214.36 1167.23,1214.36 1167.81,1214.36 1168.4,1214.36 1168.99,1214.36 1169.57,1214.36 1170.16,1214.36 1170.75,1214.36 1171.33,1214.36 1171.92,1214.36 1172.5,1214.36 1173.09,1214.36 1173.68,1214.36 1174.26,1214.36 1174.85,1214.36 1175.44,1214.36 1176.02,1214.36 1176.61,1214.36 1177.2,1214.36 1177.78,1214.36 1178.37,1214.36 1178.96,1214.36 1179.54,1214.36 1180.13,1214.36 1180.71,1214.36 1181.3,1214.36 1181.89,1214.36 1182.47,1214.36 1183.06,1214.36 1183.65,1214.36 1184.23,1214.36 1184.82,1214.36 1185.41,1214.36 1185.99,1214.36 1186.58,1214.36 1187.16,1214.36 1187.75,1214.36 1188.34,1214.36 1188.92,1214.36 1189.51,1214.36 1190.1,1214.36 1190.68,1214.36 1191.27,1214.36 1191.86,1214.36 1192.44,1214.36 1193.03,1214.36 1193.62,1214.36 1194.2,1214.36 1194.79,1214.36 1195.37,1214.36 1195.96,1214.36 1196.55,1214.36 1197.13,1214.36 1197.72,1214.36 1198.31,1214.36 1198.89,1214.36 1199.48,1214.36 1200.07,1214.36 1200.65,1214.36 1201.24,1214.36 1201.83,1214.36 1202.41,1214.36 1203,1214.36 1203.58,1214.36 1204.17,1214.36 1204.76,1214.36 1205.34,1214.36 1205.93,1214.36 1206.52,1214.36 1207.1,1214.36 1207.69,1214.36 1208.28,1214.36 1208.86,1214.36 1209.45,1214.36 1210.03,1214.36 1210.62,1214.36 1211.21,1214.36 1211.79,1214.36 1212.38,1214.36 1212.97,1214.36 1213.55,1214.36 1214.14,1214.36 1214.73,1214.36 1215.31,1214.36 1215.9,1214.36 1216.49,1214.36 1217.07,1214.36 1217.66,1214.36 1218.24,1214.36 1218.83,1214.36 1219.42,1214.36 1220,1214.36 1220.59,1214.36 1221.18,1214.36 1221.76,1214.36 1222.35,1214.36 1222.94,1214.36 1223.52,1214.36 1224.11,1214.36 1224.7,1214.36 1225.28,1214.36 1225.87,1214.36 1226.45,1214.36 1227.04,1214.36 1227.63,1214.36 1228.21,1214.36 1228.8,1214.36 1229.39,1214.36 1229.97,1214.36 1230.56,1214.36 1231.15,1214.36 1231.73,1214.36 1232.32,1214.36 1232.91,1214.36 1233.49,1214.36 1234.08,1214.36 1234.66,1214.36 1235.25,1214.36 1235.84,1214.36 1236.42,1214.36 1237.01,1214.36 1237.6,1214.36 1238.18,1214.36 1238.77,1214.36 1239.36,1214.36 1239.94,1214.36 1240.53,1214.36 1241.11,1214.36 1241.7,1214.36 1242.29,1214.36 1242.87,1214.36 1243.46,1214.36 1244.05,1214.36 1244.63,1214.36 1245.22,1214.36 1245.81,1214.36 1246.39,1214.36 1246.98,1214.36 1247.57,1214.36 1248.15,1214.36 1248.74,1214.36 1249.32,1214.36 1249.91,1214.36 1250.5,1214.36 1251.08,1214.36 1251.67,1214.36 1252.26,1214.36 1252.84,1214.36 1253.43,1214.36 1254.02,1214.36 1254.6,1214.36 1255.19,1214.36 1255.78,1214.36 1256.36,1214.36 1256.95,1214.36 1257.53,1214.36 1258.12,1214.36 1258.71,1214.36 1259.29,1214.36 1259.88,1214.36 1260.47,1214.36 1261.05,1214.36 1261.64,1214.36 1262.23,1214.36 1262.81,1214.36 1263.4,1214.36 1263.98,1214.36 1264.57,1214.36 1265.16,1214.36 1265.74,1214.36 1266.33,1214.36 1266.92,1214.36 1267.5,1214.36 1268.09,1214.36 1268.68,1214.36 1269.26,1214.36 1269.85,1214.36 1270.44,1214.36 1271.02,1214.36 1271.61,1214.36 1272.19,1214.36 1272.78,1214.36 1273.37,1214.36 1273.95,1214.36 1274.54,1214.36 1275.13,1214.36 1275.71,1214.36 1276.3,1214.36 1276.89,1214.36 1277.47,1214.36 1278.06,1214.36 1278.65,1214.36 1279.23,1214.36 1279.82,1214.36 1280.4,1214.36 1280.99,1214.36 1281.58,1214.36 1282.16,1214.36 1282.75,1214.36 1283.34,1214.36 1283.92,1214.36 1284.51,1214.36 1285.1,1214.36 1285.68,1214.36 1286.27,1214.36 1286.86,1214.36 1287.44,1214.36 1288.03,1214.36 1288.61,1214.36 1289.2,1214.36 1289.79,1214.36 1290.37,1214.36 1290.96,1214.36 1291.55,1214.36 1292.13,1214.36 1292.72,1214.36 1293.31,1214.36 1293.89,1214.36 1294.48,1214.36 1295.06,1214.36 1295.65,1214.36 1296.24,1214.36 1296.82,1214.36 1297.41,1214.36 1298,1214.36 1298.58,1214.36 1299.17,1214.36 1299.76,1214.36 1300.34,1214.36 1300.93,1214.36 1301.52,1214.36 1302.1,1214.36 1302.69,1214.36 1303.27,1214.36 1303.86,1214.36 1304.45,1214.36 1305.03,1214.36 1305.62,1214.36 1306.21,1214.36 1306.79,1214.36 1307.38,1214.36 1307.97,1214.36 1308.55,1214.36 1309.14,1214.36 1309.73,1214.36 1310.31,1214.36 1310.9,1214.36 1311.48,1214.36 1312.07,1214.36 1312.66,1214.36 1313.24,1214.36 1313.83,1214.36 1314.42,1214.36 1315,1214.36 1315.59,1214.36 1316.18,1214.36 1316.76,1214.36 1317.35,1214.36 1317.93,1214.36 1318.52,1214.36 1319.11,1214.36 1319.69,1214.36 1320.28,1214.36 1320.87,1214.36 1321.45,1214.36 1322.04,1214.36 1322.63,1214.36 1323.21,1214.36 1323.8,1214.36 1324.39,1214.36 1324.97,1214.36 1325.56,1214.36 1326.14,1214.36 1326.73,1214.36 1327.32,1214.36 1327.9,1214.36 1328.49,1214.36 1329.08,1214.36 1329.66,1214.36 1330.25,1214.36 1330.84,1214.36 1331.42,1214.36 1332.01,1214.36 1332.6,1214.36 1333.18,1214.36 1333.77,1214.36 1334.35,1214.36 1334.94,1214.36 1335.53,1214.36 1336.11,1214.36 1336.7,1214.36 1337.29,1214.36 1337.87,1214.36 1338.46,1214.36 1339.05,1214.36 1339.63,1214.36 1340.22,1214.36 1340.8,1214.36 1341.39,1214.36 1341.98,1214.36 1342.56,1214.36 1343.15,1214.36 1343.74,1214.36 1344.32,1214.36 1344.91,1214.36 1345.5,1214.36 1346.08,1214.36 1346.67,1214.36 1347.26,1214.36 1347.84,1214.36 1348.43,1214.36 1349.01,1214.36 1349.6,1214.36 1350.19,1214.36 1350.77,1214.36 1351.36,1214.36 1351.95,1214.36 1352.53,1214.36 1353.12,1214.36 1353.71,1214.36 1354.29,1214.36 1354.88,1214.36 1355.47,1214.36 1356.05,1214.36 1356.64,1214.36 1357.22,1214.36 1357.81,1214.36 1358.4,1214.36 1358.98,1214.36 1359.57,1214.36 1360.16,1214.36 1360.74,1214.36 1361.33,1214.36 1361.92,1214.36 1362.5,1214.36 1363.09,1214.36 1363.68,1214.36 1364.26,1214.36 1364.85,1214.36 1365.43,1214.36 1366.02,1214.36 1366.61,1214.36 1367.19,1214.36 1367.78,1214.36 1368.37,1214.36 1368.95,1214.36 1369.54,1214.36 1370.13,1214.36 1370.71,1214.36 1371.3,1214.36 1371.88,1214.36 1372.47,1214.36 1373.06,1214.36 1373.64,1214.36 1374.23,1214.36 1374.82,1214.36 1375.4,1214.36 1375.99,1214.36 1376.58,1214.36 1377.16,1214.36 1377.75,1214.36 1378.34,1214.36 1378.92,1214.36 1379.51,1214.36 1380.09,1214.36 1380.68,1214.36 1381.27,1214.36 1381.85,1214.36 1382.44,1214.36 1383.03,1214.36 1383.61,1214.36 1384.2,1214.36 1384.79,1214.36 1385.37,1214.36 1385.96,1214.36 1386.55,1214.36 1387.13,1214.36 1387.72,1214.36 1388.3,1214.36 1388.89,1214.36 1389.48,1214.36 1390.06,1214.36 1390.65,1214.36 1391.24,1214.36 1391.82,1214.36 1392.41,1214.36 1393,1214.36 1393.58,1214.36 1394.17,1214.36 1394.75,1214.36 1395.34,1214.36 1395.93,1214.36 1396.51,1214.36 1397.1,1214.36 1397.69,1214.36 1398.27,1214.36 1398.86,1214.36 1399.45,1214.36 1400.03,1214.36 1400.62,1214.36 1401.21,1214.36 1401.79,1214.36 1402.38,1214.36 1402.96,1214.36 1403.55,1214.36 1404.14,1214.36 1404.72,1214.36 1405.31,1214.36 1405.9,1214.36 1406.48,1214.36 1407.07,1214.36 1407.66,1214.36 1408.24,1214.36 1408.83,1214.36 1409.42,1214.36 1410,1214.36 1410.59,1214.36 1411.17,1214.36 1411.76,1214.36 1412.35,1214.36 1412.93,1214.36 1413.52,1214.36 1414.11,1214.36 1414.69,1214.36 1415.28,1214.36 1415.87,1214.36 1416.45,1214.36 1417.04,1214.36 1417.63,1214.36 1418.21,1214.36 1418.8,1214.36 1419.38,1214.36 1419.97,1214.36 1420.56,1214.36 1421.14,1214.36 1421.73,1214.36 1422.32,1214.36 1422.9,1214.36 1423.49,1214.36 1424.08,1214.36 1424.66,1214.36 1425.25,1214.36 1425.83,1214.36 1426.42,1214.36 1427.01,1214.36 1427.59,1214.36 1428.18,1214.36 1428.77,1214.36 1429.35,1214.36 1429.94,1214.36 1430.53,1214.36 1431.11,1214.36 1431.7,1214.36 1432.29,1214.36 1432.87,1214.36 1433.46,1214.36 1434.04,1214.36 1434.63,1214.36 1435.22,1214.36 1435.8,1214.36 1436.39,1214.36 1436.98,1214.36 1437.56,1214.36 1438.15,1214.36 1438.74,1214.36 1439.32,1214.36 1439.91,1214.36 1440.5,1214.36 1441.08,1214.36 1441.67,1214.36 1442.25,1214.36 1442.84,1214.36 1443.43,1214.36 1444.01,1214.36 1444.6,1214.36 1445.19,1214.36 1445.77,1214.36 1446.36,1214.36 1446.95,1214.36 1447.53,1214.36 1448.12,1214.36 1448.7,1214.36 1449.29,1214.36 1449.88,1214.36 1450.46,1214.36 1451.05,1214.36 1451.64,1214.36 1452.22,1214.36 1452.81,1214.36 1453.4,1214.36 1453.98,1214.36 1454.57,1214.36 1455.16,1214.36 1455.74,1214.36 1456.33,1214.36 1456.91,1214.36 1457.5,1214.36 1458.09,1214.36 1458.67,1214.36 1459.26,1214.36 1459.85,1214.36 1460.43,1214.36 1461.02,1214.36 1461.61,1214.36 1462.19,1214.36 1462.78,1214.36 1463.37,1214.36 1463.95,1214.36 1464.54,1214.36 1465.12,1214.36 1465.71,1214.36 1466.3,1214.36 1466.88,1214.36 1467.47,1214.36 1468.06,1214.36 1468.64,1214.36 1469.23,1214.36 1469.82,1214.36 1470.4,1214.36 1470.99,1214.36 1471.57,1214.36 1472.16,1214.36 1472.75,1214.36 1473.33,1214.36 1473.92,1214.36 1474.51,1214.36 1475.09,1214.36 1475.68,1214.36 1476.27,1214.36 1476.85,1214.36 1477.44,1214.36 1478.03,1214.36 1478.61,1214.36 1479.2,1214.36 1479.78,1214.36 1480.37,1214.36 1480.96,1214.36 1481.54,1214.36 1482.13,1214.36 1482.72,1214.36 1483.3,1214.36 1483.89,1214.36 1484.48,1214.36 1485.06,1214.36 1485.65,1214.36 1486.24,1214.36 1486.82,1214.36 1487.41,1214.36 1487.99,1214.36 1488.58,1214.36 1489.17,1214.36 1489.75,1214.36 1490.34,1214.36 1490.93,1214.36 1491.51,1214.36 1492.1,1214.36 1492.69,1214.36 1493.27,1214.36 1493.86,1214.36 1494.45,1214.36 1495.03,1214.36 1495.62,1214.36 1496.2,1214.36 1496.79,1214.36 1497.38,1214.36 1497.96,1214.36 1498.55,1214.36 1499.14,1214.36 1499.72,1214.36 1500.31,1214.36 1500.9,1214.36 1501.48,1214.36 1502.07,1214.36 1502.65,1214.36 1503.24,1214.36 1503.83,1214.36 1504.41,1214.36 1505,1214.36 1505.59,1214.36 1506.17,1214.36 1506.76,1214.36 1507.35,1214.36 1507.93,1214.36 1508.52,1214.36 1509.11,1214.36 1509.69,1214.36 1510.28,1214.36 1510.86,1214.36 1511.45,1214.36 1512.04,1214.36 1512.62,1214.36 1513.21,1214.36 1513.8,1214.36 1514.38,1214.36 1514.97,1214.36 1515.56,1214.36 1516.14,1214.36 1516.73,1214.36 1517.32,1214.36 1517.9,1214.36 1518.49,1214.36 1519.07,1214.36 1519.66,1214.36 1520.25,1214.36 1520.83,1214.36 1521.42,1214.36 1522.01,1214.36 1522.59,1214.36 1523.18,1214.36 1523.77,1214.36 1524.35,1214.36 1524.94,1214.36 1525.52,1214.36 1526.11,1214.36 1526.7,1214.36 1527.28,1214.36 1527.87,1214.36 1528.46,1214.36 1529.04,1214.36 1529.63,1214.36 1530.22,1214.36 1530.8,1214.36 1531.39,1214.36 1531.98,1214.36 1532.56,1214.36 1533.15,1214.36 1533.73,1214.36 1534.32,1214.36 1534.91,1214.36 1535.49,1214.36 1536.08,1214.36 1536.67,1214.36 1537.25,1214.36 1537.84,1214.36 1538.43,1214.36 1539.01,1214.36 1539.6,1214.36 1540.19,1214.36 1540.77,1214.36 1541.36,1214.36 1541.94,1214.36 1542.53,1214.36 1543.12,1214.36 1543.7,1214.36 1544.29,1214.36 1544.88,1214.36 1545.46,1214.36 1546.05,1214.36 1546.64,1214.36 1547.22,1214.36 1547.81,1214.36 1548.4,1214.36 1548.98,1214.36 1549.57,1214.36 1550.15,1214.36 1550.74,1214.36 1551.33,1214.36 1551.91,1214.36 1552.5,1214.36 1553.09,1214.36 1553.67,1214.36 1554.26,1214.36 1554.85,1214.36 1555.43,1214.36 1556.02,1214.36 1556.6,1214.36 1557.19,1214.36 1557.78,1214.36 1558.36,1214.36 1558.95,1214.36 1559.54,1214.36 1560.12,1214.36 1560.71,1214.36 1561.3,1214.36 1561.88,1214.36 1562.47,1214.36 1563.06,1214.36 1563.64,1214.36 1564.23,1214.36 1564.81,1214.36 1565.4,1214.36 1565.99,1214.36 1566.57,1214.36 1567.16,1214.36 1567.75,1214.36 1568.33,1214.36 1568.92,1214.36 1569.51,1214.36 1570.09,1214.36 1570.68,1214.36 1571.27,1214.36 1571.85,1214.36 1572.44,1214.36 1573.02,1214.36 1573.61,1214.36 1574.2,1214.36 1574.78,1214.36 1575.37,1214.36 1575.96,1214.36 1576.54,1214.36 1577.13,1214.36 1577.72,1214.36 1578.3,1214.36 1578.89,1214.36 1579.47,1214.36 1580.06,1214.36 1580.65,1214.36 1581.23,1214.36 1581.82,1214.36 1582.41,1214.36 1582.99,1214.36 1583.58,1214.36 1584.17,1214.36 1584.75,1214.36 1585.34,1214.36 1585.93,1214.36 1586.51,1214.36 1587.1,1214.36 1587.68,1214.36 1588.27,1214.36 1588.86,1214.36 1589.44,1214.36 1590.03,1214.36 1590.62,1214.36 1591.2,1214.36 1591.79,1214.36 1592.38,1214.36 1592.96,1214.36 1593.55,1214.36 1594.14,1214.36 1594.72,1214.36 1595.31,1214.36 1595.89,1214.36 1596.48,1214.36 1597.07,1214.36 1597.65,1214.36 1598.24,1214.36 1598.83,1214.36 1599.41,1214.36 1600,1214.36 1600.59,1214.36 1601.17,1214.36 1601.76,1214.36 1602.34,1214.36 1602.93,1214.36 1603.52,1214.36 1604.1,1214.36 1604.69,1214.36 1605.28,1214.36 1605.86,1214.36 1606.45,1214.36 1607.04,1214.36 1607.62,1214.36 1608.21,1214.36 1608.8,1214.36 1609.38,1214.36 1609.97,1214.36 1610.55,1214.36 1611.14,1214.36 1611.73,1214.36 1612.31,1214.36 1612.9,1214.36 1613.49,1214.36 1614.07,1214.36 1614.66,1214.36 1615.25,1214.36 1615.83,1214.36 1616.42,1214.36 1617.01,1214.36 1617.59,1214.36 1618.18,1214.36 1618.76,1214.36 1619.35,1214.36 1619.94,1214.36 1620.52,1214.36 1621.11,1214.36 1621.7,1214.36 1622.28,1214.36 1622.87,1214.36 1623.46,1214.36 1624.04,1214.36 1624.63,1214.36 1625.22,1214.36 1625.8,1214.36 1626.39,1214.36 1626.97,1214.36 1627.56,1214.36 1628.15,1214.36 1628.73,1214.36 1629.32,1214.36 1629.91,1214.36 1630.49,1214.36 1631.08,1214.36 1631.67,1214.36 1632.25,1214.36 1632.84,1214.36 1633.42,1214.36 1634.01,1214.36 1634.6,1214.36 1635.18,1214.36 1635.77,1214.36 1636.36,1214.36 1636.94,1214.36 1637.53,1214.36 1638.12,1214.36 1638.7,1214.36 1639.29,1214.36 1639.88,1214.36 1640.46,1214.36 1641.05,1214.36 1641.63,1214.36 1642.22,1214.36 1642.81,1214.36 1643.39,1214.36 1643.98,1214.36 1644.57,1214.36 1645.15,1214.36 1645.74,1214.36 1646.33,1214.36 1646.91,1214.36 1647.5,1214.36 1648.09,1214.36 1648.67,1214.36 1649.26,1214.36 1649.84,1214.36 1650.43,1214.36 1651.02,1214.36 1651.6,1214.36 1652.19,1214.36 1652.78,1214.36 1653.36,1214.36 1653.95,1214.36 1654.54,1214.36 1655.12,1214.36 1655.71,1214.36 1656.29,1214.36 1656.88,1214.36 1657.47,1214.36 1658.05,1214.36 1658.64,1214.36 1659.23,1214.36 1659.81,1214.36 1660.4,1214.36 1660.99,1214.36 1661.57,1214.36 1662.16,1214.36 1662.75,1214.36 1663.33,1214.36 1663.92,1214.36 1664.5,1214.36 1665.09,1214.36 1665.68,1214.36 1666.26,1214.36 1666.85,1214.36 1667.44,1214.36 1668.02,1214.36 1668.61,1214.36 1669.2,1214.36 1669.78,1214.36 1670.37,1214.36 1670.96,1214.36 1671.54,1214.36 1672.13,1214.36 1672.71,1214.36 1673.3,1214.36 1673.89,1214.36 1674.47,1214.36 1675.06,1214.36 1675.65,1214.36 1676.23,1214.36 1676.82,1214.36 1677.41,1214.36 1677.99,1214.36 1678.58,1214.36 1679.17,1214.36 1679.75,1214.36 1680.34,1214.36 1680.92,1214.36 1681.51,1214.36 1682.1,1214.36 1682.68,1214.36 1683.27,1214.36 1683.86,1214.36 1684.44,1214.36 1685.03,1214.36 1685.62,1214.36 1686.2,1214.36 1686.79,1214.36 1687.37,1214.36 1687.96,1214.36 1688.55,1214.36 1689.13,1214.36 1689.72,1214.36 1690.31,1214.36 1690.89,1214.36 1691.48,1214.36 1692.07,1214.36 1692.65,1214.36 1693.24,1214.36 1693.83,1214.36 1694.41,1214.36 1695,1214.36 1695.58,1214.36 1696.17,1214.36 1696.76,1214.36 1697.34,1214.36 1697.93,1214.36 1698.52,1214.36 1699.1,1214.36 1699.69,1214.36 1700.28,1214.36 1700.86,1214.36 1701.45,1214.36 1702.04,1214.36 1702.62,1214.36 1703.21,1214.36 1703.79,1214.36 1704.38,1214.36 1704.97,1214.36 1705.55,1214.36 1706.14,1214.36 1706.73,1214.36 1707.31,1214.36 1707.9,1214.36 1708.49,1214.36 1709.07,1214.36 1709.66,1214.36 1710.24,1214.36 1710.83,1214.36 1711.42,1214.36 1712,1214.36 1712.59,1214.36 1713.18,1214.36 1713.76,1214.36 1714.35,1214.36 1714.94,1214.36 1715.52,1214.36 1716.11,1214.36 1716.7,1214.36 1717.28,1214.36 1717.87,1214.36 1718.45,1214.36 1719.04,1214.36 1719.63,1214.36 1720.21,1214.36 1720.8,1214.36 1721.39,1214.36 1721.97,1214.36 1722.56,1214.36 1723.15,1214.36 1723.73,1214.36 1724.32,1214.36 1724.91,1214.36 1725.49,1214.36 1726.08,1214.36 1726.66,1214.36 1727.25,1214.36 1727.84,1214.36 1728.42,1214.36 1729.01,1214.36 1729.6,1214.36 1730.18,1214.36 1730.77,1214.36 1731.36,1214.36 1731.94,1214.36 1732.53,1214.36 1733.11,1214.36 1733.7,1214.36 1734.29,1214.36 1734.87,1214.36 1735.46,1214.36 1736.05,1214.36 1736.63,1214.36 1737.22,1214.36 1737.81,1214.36 1738.39,1214.36 1738.98,1214.36 1739.57,1214.36 1740.15,1214.36 1740.74,1214.36 1741.32,1214.36 1741.91,1214.36 1742.5,1214.36 1743.08,1214.36 1743.67,1214.36 1744.26,1214.36 1744.84,1214.36 1745.43,1214.36 1746.02,1214.36 1746.6,1214.36 1747.19,1214.36 1747.78,1214.36 1748.36,1214.36 1748.95,1214.36 1749.53,1214.36 1750.12,1214.36 1750.71,1214.36 1751.29,1214.36 1751.88,1214.36 1752.47,1214.36 1753.05,1214.36 1753.64,1214.36 1754.23,1214.36 1754.81,1214.36 1755.4,1214.36 1755.99,1214.36 1756.57,1214.36 1757.16,1214.36 1757.74,1214.36 1758.33,1214.36 1758.92,1214.36 1759.5,1214.36 1760.09,1214.36 1760.68,1214.36 1761.26,1214.36 1761.85,1214.36 1762.44,1214.36 1763.02,1214.36 1763.61,1214.36 1764.19,1214.36 1764.78,1214.36 1765.37,1214.36 1765.95,1214.36 1766.54,1214.36 1767.13,1214.36 1767.71,1214.36 1768.3,1214.36 1768.89,1214.36 1769.47,1214.36 1770.06,1214.36 1770.65,1214.36 1771.23,1214.36 1771.82,1214.36 1772.4,1214.36 1772.99,1214.36 1773.58,1214.36 1774.16,1214.36 1774.75,1214.36 1775.34,1214.36 1775.92,1214.36 1776.51,1214.36 1777.1,1214.36 1777.68,1214.36 1778.27,1214.36 1778.86,1214.36 1779.44,1214.36 1780.03,1214.36 1780.61,1214.36 1781.2,1214.36 1781.79,1214.36 1782.37,1214.36 1782.96,1214.36 1783.55,1214.36 1784.13,1214.36 1784.72,1214.36 1785.31,1214.36 1785.89,1214.36 1786.48,1214.36 1787.06,1214.36 1787.65,1214.36 1788.24,1214.36 1788.82,1214.36 1789.41,1214.36 1790,1214.36 1790.58,1214.36 1791.17,1214.36 1791.76,1214.36 1792.34,1214.36 1792.93,1214.36 1793.52,1214.36 1794.1,1214.36 1794.69,1214.36 1795.27,1214.36 1795.86,1214.36 1796.45,1214.36 1797.03,1214.36 1797.62,1214.36 1798.21,1214.36 1798.79,1214.36 1799.38,1214.36 1799.97,1214.36 1800.55,1214.36 1801.14,1214.36 1801.73,1214.36 1802.31,1214.36 1802.9,1214.36 1803.48,1214.36 1804.07,1214.36 1804.66,1214.36 1805.24,1214.36 1805.83,1214.36 1806.42,1214.36 1807,1214.36 1807.59,1214.36 1808.18,1214.36 1808.76,1214.36 1809.35,1214.36 1809.94,1214.36 1810.52,1214.36 1811.11,1214.36 1811.69,1214.36 1812.28,1214.36 1812.87,1214.36 1813.45,1214.36 1814.04,1214.36 1814.63,1214.36 1815.21,1214.36 1815.8,1214.36 1816.39,1214.36 1816.97,1214.36 1817.56,1214.36 1818.14,1214.36 1818.73,1214.36 1819.32,1214.36 1819.9,1214.36 1820.49,1214.36 1821.08,1214.36 1821.66,1214.36 1822.25,1214.36 1822.84,1214.36 1823.42,1214.36 1824.01,1214.36 1824.6,1214.36 1825.18,1214.36 1825.77,1214.36 1826.35,1214.36 1826.94,1214.36 1827.53,1214.36 1828.11,1214.36 1828.7,1214.36 1829.29,1214.36 1829.87,1214.36 1830.46,1214.36 1831.05,1214.36 1831.63,1214.36 1832.22,1214.36 1832.81,1214.36 1833.39,1214.36 1833.98,1214.36 1834.56,1214.36 1835.15,1214.36 1835.74,1214.36 1836.32,1214.36 1836.91,1214.36 1837.5,1214.36 1838.08,1214.36 1838.67,1214.36 1839.26,1214.36 1839.84,1214.36 1840.43,1214.36 1841.01,1214.36 1841.6,1214.36 1842.19,1214.36 1842.77,1214.36 1843.36,1214.36 1843.95,1214.36 1844.53,1214.36 1845.12,1214.36 1845.71,1214.36 1846.29,1214.36 1846.88,1214.36 1847.47,1214.36 1848.05,1214.36 1848.64,1214.36 1849.22,1214.36 1849.81,1214.36 1850.4,1214.36 1850.98,1214.36 1851.57,1214.36 1852.16,1214.36 1852.74,1214.36 1853.33,1214.36 1853.92,1214.36 1854.5,1214.36 1855.09,1214.36 1855.68,1214.36 1856.26,1214.36 1856.85,1214.36 1857.43,1214.36 1858.02,1214.36 1858.61,1214.36 1859.19,1214.36 1859.78,1214.36 1860.37,1214.36 1860.95,1214.36 1861.54,1214.36 1862.13,1214.36 1862.71,1214.36 1863.3,1214.36 1863.88,1214.36 1864.47,1214.36 1865.06,1214.36 1865.64,1214.36 1866.23,1214.36 1866.82,1214.36 1867.4,1214.36 1867.99,1214.36 1868.58,1214.36 1869.16,1214.36 1869.75,1214.36 1870.34,1214.36 1870.92,1214.36 1871.51,1214.36 1872.09,1214.36 1872.68,1214.36 1873.27,1214.36 1873.85,1214.36 1874.44,1214.36 1875.03,1214.36 1875.61,1214.36 1876.2,1214.36 1876.79,1214.36 1877.37,1214.36 1877.96,1214.36 1878.55,1214.36 1879.13,1214.36 1879.72,1214.36 1880.3,1214.36 1880.89,1214.36 1881.48,1214.36 1882.06,1214.36 1882.65,1214.36 1883.24,1214.36 1883.82,1214.36 1884.41,1214.36 1885,1214.36 1885.58,1214.36 1886.17,1214.36 1886.76,1214.36 1887.34,1214.36 1887.93,1214.36 1888.51,1214.36 1889.1,1214.36 1889.69,1214.36 1890.27,1214.36 1890.86,1214.36 1891.45,1214.36 1892.03,1214.36 1892.62,1214.36 1893.21,1214.36 1893.79,1214.36 1894.38,1214.36 1894.96,1214.36 1895.55,1214.36 1896.14,1214.36 1896.72,1214.36 1897.31,1214.36 1897.9,1214.36 1898.48,1214.36 1899.07,1214.36 1899.66,1214.36 1900.24,1214.36 1900.83,1214.36 1901.42,1214.36 1902,1214.36 1902.59,1214.36 1903.17,1214.36 1903.76,1214.36 1904.35,1214.36 1904.93,1214.36 1905.52,1214.36 1906.11,1214.36 1906.69,1214.36 1907.28,1214.36 1907.87,1214.36 1908.45,1214.36 1909.04,1214.36 1909.63,1214.36 1910.21,1214.36 1910.8,1214.36 1911.38,1214.36 1911.97,1214.36 1912.56,1214.36 1913.14,1214.36 1913.73,1214.36 1914.32,1214.36 1914.9,1214.36 1915.49,1214.36 1916.08,1214.36 1916.66,1214.36 1917.25,1214.36 1917.83,1214.36 1918.42,1214.36 1919.01,1214.36 1919.59,1214.36 1920.18,1214.36 1920.77,1214.36 1921.35,1214.36 1921.94,1214.36 1922.53,1214.36 1923.11,1214.36 1923.7,1214.36 1924.29,1214.36 1924.87,1214.36 1925.46,1214.36 1926.04,1214.36 1926.63,1214.36 1927.22,1214.36 1927.8,1214.36 1928.39,1214.36 1928.98,1214.36 1929.56,1214.36 1930.15,1214.36 1930.74,1214.36 1931.32,1214.36 1931.91,1214.36 1932.5,1214.36 1933.08,1214.36 1933.67,1214.36 1934.25,1214.36 1934.84,1214.36 1935.43,1214.36 1936.01,1214.36 1936.6,1214.36 1937.19,1214.36 1937.77,1214.36 1938.36,1214.36 1938.95,1214.36 1939.53,1214.36 1940.12,1214.36 1940.71,1214.36 1941.29,1214.36 1941.88,1214.36 1942.46,1214.36 1943.05,1214.36 1943.64,1214.36 1944.22,1214.36 1944.81,1214.36 1945.4,1214.36 1945.98,1214.36 1946.57,1214.36 1947.16,1214.36 1947.74,1214.36 1948.33,1214.36 1948.91,1214.36 1949.5,1214.36 1950.09,1214.36 1950.67,1214.36 1951.26,1214.36 1951.85,1214.36 1952.43,1214.36 1953.02,1214.36 1953.61,1214.36 1954.19,1214.36 1954.78,1214.36 1955.37,1214.36 1955.95,1214.36 1956.54,1214.36 1957.12,1214.36 1957.71,1214.36 1958.3,1214.36 1958.88,1214.36 1959.47,1214.36 1960.06,1214.36 1960.64,1214.36 1961.23,1214.36 1961.82,1214.36 1962.4,1214.36 1962.99,1214.36 1963.58,1214.36 1964.16,1214.36 1964.75,1214.36 1965.33,1214.36 1965.92,1214.36 1966.51,1214.36 1967.09,1214.36 1967.68,1214.36 1968.27,1214.36 1968.85,1214.36 1969.44,1214.36 1970.03,1214.36 1970.61,1214.36 1971.2,1214.36 1971.78,1214.36 1972.37,1214.36 1972.96,1214.36 1973.54,1214.36 1974.13,1214.36 1974.72,1214.36 1975.3,1214.36 1975.89,1214.36 1976.48,1214.36 1977.06,1214.36 1977.65,1214.36 1978.24,1214.36 1978.82,1214.36 1979.41,1214.36 1979.99,1214.36 1980.58,1214.36 1981.17,1214.36 1981.75,1214.36 1982.34,1214.36 1982.93,1214.36 1983.51,1214.36 1984.1,1214.36 1984.69,1214.36 1985.27,1214.36 1985.86,1214.36 1986.45,1214.36 1987.03,1214.36 1987.62,1214.36 1988.2,1214.36 1988.79,1214.36 1989.38,1214.36 1989.96,1214.36 1990.55,1214.36 1991.14,1214.36 1991.72,1214.36 1992.31,1214.36 1992.9,1214.36 1993.48,1214.36 1994.07,1214.36 1994.65,1214.36 1995.24,1214.36 1995.83,1214.36 1996.41,1214.36 1997,1214.36 1997.59,1214.36 1998.17,1214.36 1998.76,1214.36 1999.35,1214.36 1999.93,1214.36 2000.52,1214.36 2001.11,1214.36 2001.69,1214.36 2002.28,1214.36 2002.86,1214.36 2003.45,1214.36 2004.04,1214.36 2004.62,1214.36 2005.21,1214.36 2005.8,1214.36 2006.38,1214.36 2006.97,1214.36 2007.56,1214.36 2008.14,1214.36 2008.73,1214.36 2009.32,1214.36 2009.9,1214.36 2010.49,1214.36 2011.07,1214.36 2011.66,1214.36 2012.25,1214.36 2012.83,1214.36 2013.42,1214.36 2014.01,1214.36 2014.59,1214.36 2015.18,1214.36 2015.77,1214.36 2016.35,1214.36 2016.94,1214.36 2017.53,1214.36 2018.11,1214.36 2018.7,1214.36 2019.28,1214.36 2019.87,1214.36 2020.46,1214.36 2021.04,1214.36 2021.63,1214.36 2022.22,1214.36 2022.8,1214.36 2023.39,1214.36 2023.98,1214.36 2024.56,1214.36 2025.15,1214.36 2025.73,1214.36 2026.32,1214.36 2026.91,1214.36 2027.49,1214.36 2028.08,1214.36 2028.67,1214.36 2029.25,1214.36 2029.84,1214.36 2030.43,1214.36 2031.01,1214.36 2031.6,1214.36 2032.19,1214.36 2032.77,1214.36 2033.36,1214.36 2033.94,1214.36 2034.53,1214.36 2035.12,1214.36 2035.7,1214.36 2036.29,1214.36 2036.88,1214.36 2037.46,1214.36 2038.05,1214.36 2038.64,1214.36 2039.22,1214.36 2039.81,1214.36 2040.4,1214.36 2040.98,1214.36 2041.57,1214.36 2042.15,1214.36 2042.74,1214.36 2043.33,1214.36 2043.91,1214.36 2044.5,1214.36 2045.09,1214.36 2045.67,1214.36 2046.26,1214.36 2046.85,1214.36 2047.43,1214.36 2048.02,1214.36 2048.6,1214.36 2049.19,1214.36 2049.78,1214.36 2050.36,1214.36 2050.95,1214.36 2051.54,1214.36 2052.12,1214.36 2052.71,1214.36 2053.3,1214.36 2053.88,1214.36 2054.47,1214.36 2055.06,1214.36 2055.64,1214.36 2056.23,1214.36 2056.81,1214.36 2057.4,1214.36 2057.99,1214.36 2058.57,1214.36 2059.16,1214.36 2059.75,1214.36 2060.33,1214.36 2060.92,1214.36 2061.51,1214.36 2062.09,1214.36 2062.68,1214.36 2063.27,1214.36 2063.85,1214.36 2064.44,1214.36 2065.02,1214.36 2065.61,1214.36 2066.2,1214.36 2066.78,1214.36 2067.37,1214.36 2067.96,1214.36 2068.54,1214.36 2069.13,1214.36 2069.72,1214.36 2070.3,1214.36 2070.89,1214.36 2071.48,1214.36 2072.06,1214.36 2072.65,1214.36 2073.23,1214.36 2073.82,1214.36 2074.41,1214.36 2074.99,1214.36 2075.58,1214.36 2076.17,1214.36 2076.75,1214.36 2077.34,1214.36 2077.93,1214.36 2078.51,1214.36 2079.1,1214.36 2079.68,1214.36 2080.27,1214.36 2080.86,1214.36 2081.44,1214.36 2082.03,1214.36 2082.62,1214.36 2083.2,1214.36 2083.79,1214.36 2084.38,1214.36 2084.96,1214.36 2085.55,1214.36 2086.14,1214.36 2086.72,1214.36 2087.31,1214.36 2087.89,1214.36 2088.48,1214.36 2089.07,1214.36 2089.65,1214.36 2090.24,1214.36 2090.83,1214.36 2091.41,1214.36 2092,1214.36 2092.59,1214.36 2093.17,1214.36 2093.76,1214.36 2094.35,1214.36 2094.93,1214.36 2095.52,1214.36 2096.1,1214.36 2096.69,1214.36 2097.28,1214.36 2097.86,1214.36 2098.45,1214.36 2099.04,1214.36 2099.62,1214.36 2100.21,1214.36 2100.8,1214.36 2101.38,1214.36 2101.97,1214.36 2102.55,1214.36 2103.14,1214.36 2103.73,1214.36 2104.31,1214.36 2104.9,1214.36 2105.49,1214.36 2106.07,1214.36 2106.66,1214.36 2107.25,1214.36 2107.83,1214.36 2108.42,1214.36 2109.01,1214.36 2109.59,1214.36 2110.18,1214.36 2110.76,1214.36 2111.35,1214.36 2111.94,1214.36 2112.52,1214.36 2113.11,1214.36 2113.7,1214.36 2114.28,1214.36 2114.87,1214.36 2115.46,1214.36 2116.04,1214.36 2116.63,1214.36 2117.22,1214.36 2117.8,1214.36 2118.39,1214.36 2118.97,1214.36 2119.56,1214.36 2120.15,1214.36 2120.73,1214.36 2121.32,1214.36 2121.91,1214.36 2122.49,1214.36 2123.08,1214.36 2123.67,1214.36 2124.25,1214.36 2124.84,1214.36 2125.42,1214.36 2126.01,1214.36 2126.6,1214.36 2127.18,1214.36 2127.77,1214.36 2128.36,1214.36 2128.94,1214.36 2129.53,1214.36 2130.12,1214.36 2130.7,1214.36 2131.29,1214.36 2131.88,1214.36 2132.46,1214.36 2133.05,1214.36 2133.63,1214.36 2134.22,1214.36 2134.81,1214.36 2135.39,1214.36 2135.98,1214.36 2136.57,1214.36 2137.15,1214.36 2137.74,1214.36 2138.33,1214.36 2138.91,1214.36 2139.5,1214.36 2140.09,1214.36 2140.67,1214.36 2141.26,1214.36 2141.84,1214.36 2142.43,1214.36 2143.02,1214.36 2143.6,1214.36 2144.19,1214.36 2144.78,1214.36 2145.36,1214.36 2145.95,1214.36 2146.54,1214.36 2147.12,1214.36 2147.71,1214.36 2148.3,1214.36 2148.88,1214.36 2149.47,1214.36 2150.05,1214.36 2150.64,1214.36 2151.23,1214.36 2151.81,1214.36 2152.4,1214.36 2152.99,1214.36 2153.57,1214.36 2154.16,1214.36 2154.75,1214.36 2155.33,1214.36 2155.92,1214.36 2156.5,1214.36 2157.09,1214.36 2157.68,1214.36 2158.26,1214.36 \"/>\n<path clip-path=\"url(#clip462)\" d=\"M986.025 1214.1 L986.612 1214.1 L987.198 1214.1 L987.785 1214.1 L988.371 1214.1 L988.957 1214.1 L989.544 1214.1 L990.13 1214.1 L990.717 1214.1 L991.303 1214.1 L991.889 1214.1 L992.476 1214.1 L993.062 1214.1 L993.649 1214.1 L994.235 1214.1 L994.822 1214.1 L995.408 1214.1 L995.994 1214.1 L996.581 1214.1 L997.167 1214.1 L997.754 1214.1 L998.34 1214.1 L998.926 1214.1 L999.513 1214.1 L1000.1 1214.1 L1000.69 1214.1 L1001.27 1214.1 L1001.86 1214.1 L1002.44 1214.1 L1003.03 1214.1 L1003.62 1214.1 L1004.2 1214.1 L1004.79 1214.1 L1005.38 1214.1 L1005.96 1214.1 L1006.55 1214.1 L1007.14 1214.1 L1007.72 1214.1 L1008.31 1214.1 L1008.9 1214.1 L1009.48 1214.1 L1010.07 1214.1 L1010.65 1214.1 L1011.24 1214.1 L1011.83 1214.1 L1012.41 1214.1 L1013 1214.1 L1013.59 1214.1 L1014.17 1214.1 L1014.76 1214.1 L1015.35 1214.1 L1015.93 1214.1 L1016.52 1214.1 L1017.11 1214.1 L1017.69 1214.1 L1018.28 1214.1 L1018.86 1214.1 L1019.45 1214.1 L1020.04 1214.1 L1020.62 1214.1 L1021.21 1214.1 L1021.8 1214.1 L1022.38 1214.1 L1022.97 1214.1 L1023.56 1214.1 L1024.14 1214.1 L1024.73 1214.1 L1025.32 1214.1 L1025.9 1214.1 L1026.49 1214.1 L1027.07 1214.1 L1027.66 1214.1 L1028.25 1214.1 L1028.83 1214.1 L1029.42 1214.1 L1030.01 1214.1 L1030.59 1214.1 L1031.18 1214.1 L1031.77 1214.1 L1032.35 1214.1 L1032.94 1214.1 L1033.52 1214.1 L1034.11 1214.1 L1034.7 1214.1 L1035.28 1214.1 L1035.87 1214.1 L1036.46 1214.1 L1037.04 1214.1 L1037.63 1214.1 L1038.22 1214.1 L1038.8 1214.1 L1039.39 1214.1 L1039.98 1214.1 L1040.56 1214.1 L1041.15 1214.1 L1041.73 1214.1 L1042.32 1214.1 L1042.91 1214.1 L1043.49 1214.1 L1044.08 1214.1 L1044.67 1214.1 L1045.25 1214.1 L1045.84 1214.1 L1046.43 1214.1 L1047.01 1214.1 L1047.6 1214.1 L1048.19 1214.1 L1048.77 1214.1 L1049.36 1214.1 L1049.94 1214.1 L1050.53 1214.1 L1051.12 1214.1 L1051.7 1214.1 L1052.29 1214.1 L1052.88 1214.1 L1053.46 1214.1 L1054.05 1214.1 L1054.64 1214.1 L1055.22 1214.1 L1055.81 1214.1 L1056.39 1214.1 L1056.98 1214.1 L1057.57 1214.1 L1058.15 1214.1 L1058.74 1214.1 L1059.33 1214.1 L1059.91 1214.1 L1060.5 1214.1 L1061.09 1214.1 L1061.67 1214.1 L1062.26 1214.1 L1062.85 1214.1 L1063.43 1214.1 L1064.02 1214.1 L1064.6 1214.1 L1065.19 1214.1 L1065.78 1214.1 L1066.36 1214.1 L1066.95 1214.1 L1067.54 1214.1 L1068.12 1214.1 L1068.71 1214.1 L1069.3 1214.1 L1069.88 1214.1 L1070.47 1214.1 L1071.06 1214.1 L1071.64 1214.1 L1072.23 1214.1 L1072.81 1214.1 L1073.4 1214.1 L1073.99 1214.1 L1074.57 1214.1 L1075.16 1214.1 L1075.75 1214.1 L1076.33 1214.1 L1076.92 1214.1 L1077.51 1214.1 L1078.09 1214.1 L1078.68 1214.1 L1079.26 1214.1 L1079.85 1214.1 L1080.44 1214.1 L1081.02 1214.1 L1081.61 1214.1 L1082.2 1214.1 L1082.78 1214.1 L1083.37 1214.1 L1083.96 1214.1 L1084.54 1214.1 L1085.13 1214.1 L1085.72 1214.1 L1086.3 1214.1 L1086.89 1214.1 L1087.47 1214.1 L1088.06 1214.1 L1088.65 1214.1 L1089.23 1214.1 L1089.82 1214.1 L1090.41 1214.1 L1090.99 1214.1 L1091.58 1214.1 L1092.17 1214.1 L1092.75 1214.1 L1093.34 1214.1 L1093.93 1214.1 L1094.51 1214.1 L1095.1 1214.1 L1095.68 1214.1 L1096.27 1214.1 L1096.86 1214.1 L1097.44 1214.1 L1098.03 1214.1 L1098.62 1214.1 L1099.2 1214.1 L1099.79 1214.1 L1100.38 1214.1 L1100.96 1214.1 L1101.55 1214.1 L1102.14 1214.1 L1102.72 1214.1 L1103.31 1214.1 L1103.89 1214.1 L1104.48 1214.1 L1105.07 1214.1 L1105.65 1214.1 L1106.24 1214.1 L1106.83 1214.1 L1107.41 1214.1 L1108 1214.1 L1108.59 1214.1 L1109.17 1214.1 L1109.76 1214.1 L1110.34 1214.1 L1110.93 1214.1 L1111.52 1214.1 L1112.1 1214.1 L1112.69 1214.1 L1113.28 1214.1 L1113.86 1214.1 L1114.45 1214.1 L1115.04 1214.1 L1115.62 1214.1 L1116.21 1214.1 L1116.8 1214.1 L1117.38 1214.1 L1117.97 1214.1 L1118.55 1214.1 L1119.14 1214.1 L1119.73 1214.1 L1120.31 1214.1 L1120.9 1214.1 L1121.49 1214.1 L1122.07 1214.1 L1122.66 1214.1 L1123.25 1214.1 L1123.83 1214.1 L1124.42 1214.1 L1125.01 1214.1 L1125.59 1214.1 L1126.18 1214.1 L1126.76 1214.1 L1127.35 1214.1 L1127.94 1214.1 L1128.52 1214.1 L1129.11 1214.1 L1129.7 1214.1 L1130.28 1214.1 L1130.87 1214.1 L1131.46 1214.1 L1132.04 1214.1 L1132.63 1214.1 L1133.21 1214.1 L1133.8 1214.1 L1134.39 1214.1 L1134.97 1214.1 L1135.56 1214.1 L1136.15 1214.1 L1136.73 1214.1 L1137.32 1214.1 L1137.91 1214.1 L1138.49 1214.1 L1139.08 1214.1 L1139.67 1214.1 L1140.25 1214.1 L1140.84 1214.1 L1141.42 1214.1 L1142.01 1214.1 L1142.6 1214.1 L1143.18 1214.1 L1143.77 1214.1 L1144.36 1214.1 L1144.94 1214.1 L1145.53 1214.1 L1146.12 1214.1 L1146.7 1214.1 L1147.29 1214.1 L1147.88 1214.1 L1148.46 1214.1 L1149.05 1214.1 L1149.63 1214.1 L1150.22 1214.1 L1150.81 1214.1 L1151.39 1214.1 L1151.98 1214.1 L1152.57 1214.1 L1153.15 1214.1 L1153.74 1214.1 L1154.33 1214.1 L1154.91 1214.1 L1155.5 1214.1 L1156.09 1214.1 L1156.67 1214.1 L1157.26 1214.1 L1157.84 1214.1 L1158.43 1214.1 L1159.02 1214.1 L1159.6 1214.1 L1160.19 1214.1 L1160.78 1214.1 L1161.36 1214.1 L1161.95 1214.1 L1162.54 1214.1 L1163.12 1214.1 L1163.71 1214.1 L1164.29 1214.1 L1164.88 1214.1 L1165.47 1214.1 L1166.05 1214.1 L1166.64 1214.1 L1167.23 1214.1 L1167.81 1214.1 L1168.4 1214.1 L1168.99 1214.1 L1169.57 1214.1 L1170.16 1214.1 L1170.75 1214.1 L1171.33 1214.1 L1171.92 1214.1 L1172.5 1214.1 L1173.09 1214.1 L1173.68 1214.1 L1174.26 1214.1 L1174.85 1214.1 L1175.44 1214.1 L1176.02 1214.1 L1176.61 1214.1 L1177.2 1214.1 L1177.78 1214.1 L1178.37 1214.1 L1178.96 1214.1 L1179.54 1214.1 L1180.13 1214.1 L1180.71 1214.1 L1181.3 1214.1 L1181.89 1214.1 L1182.47 1214.1 L1183.06 1214.1 L1183.65 1214.1 L1184.23 1214.1 L1184.82 1214.1 L1185.41 1214.1 L1185.99 1214.1 L1186.58 1214.1 L1187.16 1214.1 L1187.75 1214.1 L1188.34 1214.1 L1188.92 1214.1 L1189.51 1214.1 L1190.1 1214.1 L1190.68 1214.1 L1191.27 1214.1 L1191.86 1214.1 L1192.44 1214.1 L1193.03 1214.1 L1193.62 1214.1 L1194.2 1214.1 L1194.79 1214.1 L1195.37 1214.1 L1195.96 1214.1 L1196.55 1214.1 L1197.13 1214.1 L1197.72 1214.1 L1198.31 1214.1 L1198.89 1214.1 L1199.48 1214.1 L1200.07 1214.1 L1200.65 1214.1 L1201.24 1214.1 L1201.83 1214.1 L1202.41 1214.1 L1203 1214.1 L1203.58 1214.1 L1204.17 1214.1 L1204.76 1214.1 L1205.34 1214.1 L1205.93 1214.1 L1206.52 1214.1 L1207.1 1214.1 L1207.69 1214.1 L1208.28 1214.1 L1208.86 1214.1 L1209.45 1214.1 L1210.03 1214.1 L1210.62 1214.1 L1211.21 1214.1 L1211.79 1214.1 L1212.38 1214.1 L1212.97 1214.1 L1213.55 1214.1 L1214.14 1214.1 L1214.73 1214.1 L1215.31 1214.1 L1215.9 1214.1 L1216.49 1214.1 L1217.07 1214.1 L1217.66 1214.1 L1218.24 1214.1 L1218.83 1214.1 L1219.42 1214.1 L1220 1214.1 L1220.59 1214.1 L1221.18 1214.1 L1221.76 1214.1 L1222.35 1214.1 L1222.94 1214.1 L1223.52 1214.1 L1224.11 1214.1 L1224.7 1214.1 L1225.28 1214.1 L1225.87 1214.1 L1226.45 1214.1 L1227.04 1214.1 L1227.63 1214.1 L1228.21 1214.1 L1228.8 1214.1 L1229.39 1214.1 L1229.97 1214.1 L1230.56 1214.1 L1231.15 1214.1 L1231.73 1214.1 L1232.32 1214.1 L1232.91 1214.1 L1233.49 1214.1 L1234.08 1214.1 L1234.66 1214.1 L1235.25 1214.1 L1235.84 1214.1 L1236.42 1214.1 L1237.01 1214.1 L1237.6 1214.1 L1238.18 1214.1 L1238.77 1214.1 L1239.36 1214.1 L1239.94 1214.1 L1240.53 1214.1 L1241.11 1214.1 L1241.7 1214.1 L1242.29 1214.1 L1242.87 1214.1 L1243.46 1214.1 L1244.05 1214.1 L1244.63 1214.1 L1245.22 1214.1 L1245.81 1214.1 L1246.39 1214.1 L1246.98 1214.1 L1247.57 1214.1 L1248.15 1214.1 L1248.74 1214.1 L1249.32 1214.1 L1249.91 1214.1 L1250.5 1214.1 L1251.08 1214.1 L1251.67 1214.1 L1252.26 1214.1 L1252.84 1214.1 L1253.43 1214.1 L1254.02 1214.1 L1254.6 1214.1 L1255.19 1214.1 L1255.78 1214.1 L1256.36 1214.1 L1256.95 1214.1 L1257.53 1214.1 L1258.12 1214.1 L1258.71 1214.1 L1259.29 1214.1 L1259.88 1214.1 L1260.47 1214.1 L1261.05 1214.1 L1261.64 1214.1 L1262.23 1214.1 L1262.81 1214.1 L1263.4 1214.1 L1263.98 1214.1 L1264.57 1214.1 L1265.16 1214.1 L1265.74 1214.1 L1266.33 1214.1 L1266.92 1214.1 L1267.5 1214.1 L1268.09 1214.1 L1268.68 1214.1 L1269.26 1214.1 L1269.85 1214.1 L1270.44 1214.1 L1271.02 1214.1 L1271.61 1214.1 L1272.19 1214.1 L1272.78 1214.1 L1273.37 1214.1 L1273.95 1214.1 L1274.54 1214.1 L1275.13 1214.1 L1275.71 1214.1 L1276.3 1214.1 L1276.89 1214.1 L1277.47 1214.1 L1278.06 1214.1 L1278.65 1214.1 L1279.23 1214.1 L1279.82 1214.1 L1280.4 1214.1 L1280.99 1214.1 L1281.58 1214.1 L1282.16 1214.1 L1282.75 1214.1 L1283.34 1214.1 L1283.92 1214.1 L1284.51 1214.1 L1285.1 1214.1 L1285.68 1214.1 L1286.27 1214.1 L1286.86 1214.1 L1287.44 1214.1 L1288.03 1214.1 L1288.61 1214.1 L1289.2 1214.1 L1289.79 1214.1 L1290.37 1214.1 L1290.96 1214.1 L1291.55 1214.1 L1292.13 1214.1 L1292.72 1214.1 L1293.31 1214.1 L1293.89 1214.1 L1294.48 1214.1 L1295.06 1214.1 L1295.65 1214.1 L1296.24 1214.1 L1296.82 1214.1 L1297.41 1214.1 L1298 1214.1 L1298.58 1214.1 L1299.17 1214.1 L1299.76 1214.1 L1300.34 1214.1 L1300.93 1214.1 L1301.52 1214.1 L1302.1 1214.1 L1302.69 1214.1 L1303.27 1214.1 L1303.86 1214.1 L1304.45 1214.1 L1305.03 1214.1 L1305.62 1214.1 L1306.21 1214.1 L1306.79 1214.1 L1307.38 1214.1 L1307.97 1214.1 L1308.55 1214.1 L1309.14 1214.1 L1309.73 1214.1 L1310.31 1214.1 L1310.9 1214.1 L1311.48 1214.1 L1312.07 1214.1 L1312.66 1214.1 L1313.24 1214.1 L1313.83 1214.1 L1314.42 1214.1 L1315 1214.1 L1315.59 1214.1 L1316.18 1214.1 L1316.76 1214.1 L1317.35 1214.1 L1317.93 1214.1 L1318.52 1214.1 L1319.11 1214.1 L1319.69 1214.1 L1320.28 1214.1 L1320.87 1214.1 L1321.45 1214.1 L1322.04 1214.1 L1322.63 1214.1 L1323.21 1214.1 L1323.8 1214.1 L1324.39 1214.1 L1324.97 1214.1 L1325.56 1214.1 L1326.14 1214.1 L1326.73 1214.1 L1327.32 1214.1 L1327.9 1214.1 L1328.49 1214.1 L1329.08 1214.1 L1329.66 1214.1 L1330.25 1214.1 L1330.84 1214.1 L1331.42 1214.1 L1332.01 1214.1 L1332.6 1214.1 L1333.18 1214.1 L1333.77 1214.1 L1334.35 1214.1 L1334.94 1214.1 L1335.53 1214.1 L1336.11 1214.1 L1336.7 1214.1 L1337.29 1214.1 L1337.87 1214.1 L1338.46 1214.1 L1339.05 1214.1 L1339.63 1214.1 L1340.22 1214.1 L1340.8 1214.1 L1341.39 1214.1 L1341.98 1214.1 L1342.56 1214.1 L1343.15 1214.1 L1343.74 1214.1 L1344.32 1214.1 L1344.91 1214.1 L1345.5 1214.1 L1346.08 1214.1 L1346.67 1214.1 L1347.26 1214.1 L1347.84 1214.1 L1348.43 1214.1 L1349.01 1214.1 L1349.6 1214.1 L1350.19 1214.1 L1350.77 1214.1 L1351.36 1214.1 L1351.95 1214.1 L1352.53 1214.1 L1353.12 1214.1 L1353.71 1214.1 L1354.29 1214.1 L1354.88 1214.1 L1355.47 1214.1 L1356.05 1214.1 L1356.64 1214.1 L1357.22 1214.1 L1357.81 1214.1 L1358.4 1214.1 L1358.98 1214.1 L1359.57 1214.1 L1360.16 1214.1 L1360.74 1214.1 L1361.33 1214.1 L1361.92 1214.1 L1362.5 1214.1 L1363.09 1214.1 L1363.68 1214.1 L1364.26 1214.1 L1364.85 1214.1 L1365.43 1214.1 L1366.02 1214.1 L1366.61 1214.1 L1367.19 1214.1 L1367.78 1214.1 L1368.37 1214.1 L1368.95 1214.1 L1369.54 1214.1 L1370.13 1214.1 L1370.71 1214.1 L1371.3 1214.1 L1371.88 1214.1 L1372.47 1214.1 L1373.06 1214.1 L1373.64 1214.1 L1374.23 1214.1 L1374.82 1214.1 L1375.4 1214.1 L1375.99 1214.1 L1376.58 1214.1 L1377.16 1214.1 L1377.75 1214.1 L1378.34 1214.1 L1378.92 1214.1 L1379.51 1214.1 L1380.09 1214.1 L1380.68 1214.1 L1381.27 1214.1 L1381.85 1214.1 L1382.44 1214.1 L1383.03 1214.1 L1383.61 1214.1 L1384.2 1214.1 L1384.79 1214.1 L1385.37 1214.1 L1385.96 1214.1 L1386.55 1214.1 L1387.13 1214.1 L1387.72 1214.1 L1388.3 1214.1 L1388.89 1214.1 L1389.48 1214.1 L1390.06 1214.1 L1390.65 1214.1 L1391.24 1214.1 L1391.82 1214.1 L1392.41 1214.1 L1393 1214.1 L1393.58 1214.1 L1394.17 1214.1 L1394.75 1214.1 L1395.34 1214.1 L1395.93 1214.1 L1396.51 1214.1 L1397.1 1214.1 L1397.69 1214.1 L1398.27 1214.1 L1398.86 1214.1 L1399.45 1214.1 L1400.03 1214.1 L1400.62 1214.1 L1401.21 1214.1 L1401.79 1214.1 L1402.38 1214.1 L1402.96 1214.1 L1403.55 1214.1 L1404.14 1214.1 L1404.72 1214.1 L1405.31 1214.1 L1405.9 1214.1 L1406.48 1214.1 L1407.07 1214.1 L1407.66 1214.1 L1408.24 1214.1 L1408.83 1214.1 L1409.42 1214.1 L1410 1214.1 L1410.59 1214.1 L1411.17 1214.1 L1411.76 1214.1 L1412.35 1214.1 L1412.93 1214.1 L1413.52 1214.1 L1414.11 1214.1 L1414.69 1214.1 L1415.28 1214.1 L1415.87 1214.1 L1416.45 1214.1 L1417.04 1214.1 L1417.63 1214.1 L1418.21 1214.1 L1418.8 1214.1 L1419.38 1214.1 L1419.97 1214.1 L1420.56 1214.1 L1421.14 1214.1 L1421.73 1214.1 L1422.32 1214.1 L1422.9 1214.1 L1423.49 1214.1 L1424.08 1214.1 L1424.66 1214.1 L1425.25 1214.1 L1425.83 1214.1 L1426.42 1214.1 L1427.01 1214.1 L1427.59 1214.1 L1428.18 1214.1 L1428.77 1214.1 L1429.35 1214.1 L1429.94 1214.1 L1430.53 1214.1 L1431.11 1214.1 L1431.7 1214.1 L1432.29 1214.1 L1432.87 1214.1 L1433.46 1214.1 L1434.04 1214.1 L1434.63 1214.1 L1435.22 1214.1 L1435.8 1214.1 L1436.39 1214.1 L1436.98 1214.1 L1437.56 1214.1 L1438.15 1214.1 L1438.74 1214.1 L1439.32 1214.1 L1439.91 1214.1 L1440.5 1214.1 L1441.08 1214.1 L1441.67 1214.1 L1442.25 1214.1 L1442.84 1214.1 L1443.43 1214.1 L1444.01 1214.1 L1444.6 1214.1 L1445.19 1214.1 L1445.77 1214.1 L1446.36 1214.1 L1446.95 1214.1 L1447.53 1214.1 L1448.12 1214.1 L1448.7 1214.1 L1449.29 1214.1 L1449.88 1214.1 L1450.46 1214.1 L1451.05 1214.1 L1451.64 1214.1 L1452.22 1214.1 L1452.81 1214.1 L1453.4 1214.1 L1453.98 1214.1 L1454.57 1214.1 L1455.16 1214.1 L1455.74 1214.1 L1456.33 1214.1 L1456.91 1214.1 L1457.5 1214.1 L1458.09 1214.1 L1458.67 1214.1 L1459.26 1214.1 L1459.85 1214.1 L1460.43 1214.1 L1461.02 1214.1 L1461.61 1214.1 L1462.19 1214.1 L1462.78 1214.1 L1463.37 1214.1 L1463.95 1214.1 L1464.54 1214.1 L1465.12 1214.1 L1465.71 1214.1 L1466.3 1214.1 L1466.88 1214.1 L1467.47 1214.1 L1468.06 1214.1 L1468.64 1214.1 L1469.23 1214.1 L1469.82 1214.1 L1470.4 1214.1 L1470.99 1214.1 L1471.57 1214.1 L1472.16 1214.1 L1472.75 1214.1 L1473.33 1214.1 L1473.92 1214.1 L1474.51 1214.1 L1475.09 1214.1 L1475.68 1214.1 L1476.27 1214.1 L1476.85 1214.1 L1477.44 1214.1 L1478.03 1214.1 L1478.61 1214.1 L1479.2 1214.1 L1479.78 1214.1 L1480.37 1214.1 L1480.96 1214.1 L1481.54 1214.1 L1482.13 1214.1 L1482.72 1214.1 L1483.3 1214.1 L1483.89 1214.1 L1484.48 1214.1 L1485.06 1214.1 L1485.65 1214.1 L1486.24 1214.1 L1486.82 1214.1 L1487.41 1214.1 L1487.99 1214.1 L1488.58 1214.1 L1489.17 1214.1 L1489.75 1214.1 L1490.34 1214.1 L1490.93 1214.1 L1491.51 1214.1 L1492.1 1214.1 L1492.69 1214.1 L1493.27 1214.1 L1493.86 1214.1 L1494.45 1214.1 L1495.03 1214.1 L1495.62 1214.1 L1496.2 1214.1 L1496.79 1214.1 L1497.38 1214.1 L1497.96 1214.1 L1498.55 1214.1 L1499.14 1214.1 L1499.72 1214.1 L1500.31 1214.1 L1500.9 1214.1 L1501.48 1214.1 L1502.07 1214.1 L1502.65 1214.1 L1503.24 1214.1 L1503.83 1214.1 L1504.41 1214.1 L1505 1214.1 L1505.59 1214.1 L1506.17 1214.1 L1506.76 1214.1 L1507.35 1214.1 L1507.93 1214.1 L1508.52 1214.1 L1509.11 1214.1 L1509.69 1214.1 L1510.28 1214.1 L1510.86 1214.1 L1511.45 1214.1 L1512.04 1214.1 L1512.62 1214.1 L1513.21 1214.1 L1513.8 1214.1 L1514.38 1214.1 L1514.97 1214.1 L1515.56 1214.1 L1516.14 1214.1 L1516.73 1214.1 L1517.32 1214.1 L1517.9 1214.1 L1518.49 1214.1 L1519.07 1214.1 L1519.66 1214.1 L1520.25 1214.1 L1520.83 1214.1 L1521.42 1214.1 L1522.01 1214.1 L1522.59 1214.1 L1523.18 1214.1 L1523.77 1214.1 L1524.35 1214.1 L1524.94 1214.1 L1525.52 1214.1 L1526.11 1214.1 L1526.7 1214.1 L1527.28 1214.1 L1527.87 1214.1 L1528.46 1214.1 L1529.04 1214.1 L1529.63 1214.1 L1530.22 1214.1 L1530.8 1214.1 L1531.39 1214.1 L1531.98 1214.1 L1532.56 1214.1 L1533.15 1214.1 L1533.73 1214.1 L1534.32 1214.1 L1534.91 1214.1 L1535.49 1214.1 L1536.08 1214.1 L1536.67 1214.1 L1537.25 1214.1 L1537.84 1214.1 L1538.43 1214.1 L1539.01 1214.1 L1539.6 1214.1 L1540.19 1214.1 L1540.77 1214.1 L1541.36 1214.1 L1541.94 1214.1 L1542.53 1214.1 L1543.12 1214.1 L1543.7 1214.1 L1544.29 1214.1 L1544.88 1214.1 L1545.46 1214.1 L1546.05 1214.1 L1546.64 1214.1 L1547.22 1214.1 L1547.81 1214.1 L1548.4 1214.1 L1548.98 1214.1 L1549.57 1214.1 L1550.15 1214.1 L1550.74 1214.1 L1551.33 1214.1 L1551.91 1214.1 L1552.5 1214.1 L1553.09 1214.1 L1553.67 1214.1 L1554.26 1214.1 L1554.85 1214.1 L1555.43 1214.1 L1556.02 1214.1 L1556.6 1214.1 L1557.19 1214.1 L1557.78 1214.1 L1558.36 1214.1 L1558.95 1214.1 L1559.54 1214.1 L1560.12 1214.1 L1560.71 1214.1 L1561.3 1214.1 L1561.88 1214.1 L1562.47 1214.1 L1563.06 1214.1 L1563.64 1214.1 L1564.23 1214.1 L1564.81 1214.1 L1565.4 1214.1 L1565.99 1214.1 L1566.57 1214.1 L1567.16 1214.1 L1567.75 1214.1 L1568.33 1214.1 L1568.92 1214.1 L1569.51 1214.1 L1570.09 1214.1 L1570.68 1214.1 L1571.27 1214.1 L1571.85 1214.1 L1572.44 1214.1 L1573.02 1214.1 L1573.61 1214.1 L1574.2 1214.1 L1574.78 1214.1 L1575.37 1214.1 L1575.96 1214.1 L1576.54 1214.1 L1577.13 1214.1 L1577.72 1214.1 L1578.3 1214.1 L1578.89 1214.1 L1579.47 1214.1 L1580.06 1214.1 L1580.65 1214.1 L1581.23 1214.1 L1581.82 1214.1 L1582.41 1214.1 L1582.99 1214.1 L1583.58 1214.1 L1584.17 1214.1 L1584.75 1214.1 L1585.34 1214.1 L1585.93 1214.1 L1586.51 1214.1 L1587.1 1214.1 L1587.68 1214.1 L1588.27 1214.1 L1588.86 1214.1 L1589.44 1214.1 L1590.03 1214.1 L1590.62 1214.1 L1591.2 1214.1 L1591.79 1214.1 L1592.38 1214.1 L1592.96 1214.1 L1593.55 1214.1 L1594.14 1214.1 L1594.72 1214.1 L1595.31 1214.1 L1595.89 1214.1 L1596.48 1214.1 L1597.07 1214.1 L1597.65 1214.1 L1598.24 1214.1 L1598.83 1214.1 L1599.41 1214.1 L1600 1214.1 L1600.59 1214.1 L1601.17 1214.1 L1601.76 1214.1 L1602.34 1214.1 L1602.93 1214.1 L1603.52 1214.1 L1604.1 1214.1 L1604.69 1214.1 L1605.28 1214.1 L1605.86 1214.1 L1606.45 1214.1 L1607.04 1214.1 L1607.62 1214.1 L1608.21 1214.1 L1608.8 1214.1 L1609.38 1214.1 L1609.97 1214.1 L1610.55 1214.1 L1611.14 1214.1 L1611.73 1214.1 L1612.31 1214.1 L1612.9 1214.1 L1613.49 1214.1 L1614.07 1214.1 L1614.66 1214.1 L1615.25 1214.1 L1615.83 1214.1 L1616.42 1214.1 L1617.01 1214.1 L1617.59 1214.1 L1618.18 1214.1 L1618.76 1214.1 L1619.35 1214.1 L1619.94 1214.1 L1620.52 1214.1 L1621.11 1214.1 L1621.7 1214.1 L1622.28 1214.1 L1622.87 1214.1 L1623.46 1214.1 L1624.04 1214.1 L1624.63 1214.1 L1625.22 1214.1 L1625.8 1214.1 L1626.39 1214.1 L1626.97 1214.1 L1627.56 1214.1 L1628.15 1214.1 L1628.73 1214.1 L1629.32 1214.1 L1629.91 1214.1 L1630.49 1214.1 L1631.08 1214.1 L1631.67 1214.1 L1632.25 1214.1 L1632.84 1214.1 L1633.42 1214.1 L1634.01 1214.1 L1634.6 1214.1 L1635.18 1214.1 L1635.77 1214.1 L1636.36 1214.1 L1636.94 1214.1 L1637.53 1214.1 L1638.12 1214.1 L1638.7 1214.1 L1639.29 1214.1 L1639.88 1214.1 L1640.46 1214.1 L1641.05 1214.1 L1641.63 1214.1 L1642.22 1214.1 L1642.81 1214.1 L1643.39 1214.1 L1643.98 1214.1 L1644.57 1214.1 L1645.15 1214.1 L1645.74 1214.1 L1646.33 1214.1 L1646.91 1214.1 L1647.5 1214.1 L1648.09 1214.1 L1648.67 1214.1 L1649.26 1214.1 L1649.84 1214.1 L1650.43 1214.1 L1651.02 1214.1 L1651.6 1214.1 L1652.19 1214.1 L1652.78 1214.1 L1653.36 1214.1 L1653.95 1214.1 L1654.54 1214.1 L1655.12 1214.1 L1655.71 1214.1 L1656.29 1214.1 L1656.88 1214.1 L1657.47 1214.1 L1658.05 1214.1 L1658.64 1214.1 L1659.23 1214.1 L1659.81 1214.1 L1660.4 1214.1 L1660.99 1214.1 L1661.57 1214.1 L1662.16 1214.1 L1662.75 1214.1 L1663.33 1214.1 L1663.92 1214.1 L1664.5 1214.1 L1665.09 1214.1 L1665.68 1214.1 L1666.26 1214.1 L1666.85 1214.1 L1667.44 1214.1 L1668.02 1214.1 L1668.61 1214.1 L1669.2 1214.1 L1669.78 1214.1 L1670.37 1214.1 L1670.96 1214.1 L1671.54 1214.1 L1672.13 1214.1 L1672.71 1214.1 L1673.3 1214.1 L1673.89 1214.1 L1674.47 1214.1 L1675.06 1214.1 L1675.65 1214.1 L1676.23 1214.1 L1676.82 1214.1 L1677.41 1214.1 L1677.99 1214.1 L1678.58 1214.1 L1679.17 1214.1 L1679.75 1214.1 L1680.34 1214.1 L1680.92 1214.1 L1681.51 1214.1 L1682.1 1214.1 L1682.68 1214.1 L1683.27 1214.1 L1683.86 1214.1 L1684.44 1214.1 L1685.03 1214.1 L1685.62 1214.1 L1686.2 1214.1 L1686.79 1214.1 L1687.37 1214.1 L1687.96 1214.1 L1688.55 1214.1 L1689.13 1214.1 L1689.72 1214.1 L1690.31 1214.1 L1690.89 1214.1 L1691.48 1214.1 L1692.07 1214.1 L1692.65 1214.1 L1693.24 1214.1 L1693.83 1214.1 L1694.41 1214.1 L1695 1214.1 L1695.58 1214.1 L1696.17 1214.1 L1696.76 1214.1 L1697.34 1214.1 L1697.93 1214.1 L1698.52 1214.1 L1699.1 1214.1 L1699.69 1214.1 L1700.28 1214.1 L1700.86 1214.1 L1701.45 1214.1 L1702.04 1214.1 L1702.62 1214.1 L1703.21 1214.1 L1703.79 1214.1 L1704.38 1214.1 L1704.97 1214.1 L1705.55 1214.1 L1706.14 1214.1 L1706.73 1214.1 L1707.31 1214.1 L1707.9 1214.1 L1708.49 1214.1 L1709.07 1214.1 L1709.66 1214.1 L1710.24 1214.1 L1710.83 1214.1 L1711.42 1214.1 L1712 1214.1 L1712.59 1214.1 L1713.18 1214.1 L1713.76 1214.1 L1714.35 1214.1 L1714.94 1214.1 L1715.52 1214.1 L1716.11 1214.1 L1716.7 1214.1 L1717.28 1214.1 L1717.87 1214.1 L1718.45 1214.1 L1719.04 1214.1 L1719.63 1214.1 L1720.21 1214.1 L1720.8 1214.1 L1721.39 1214.1 L1721.97 1214.1 L1722.56 1214.1 L1723.15 1214.1 L1723.73 1214.1 L1724.32 1214.1 L1724.91 1214.1 L1725.49 1214.1 L1726.08 1214.1 L1726.66 1214.1 L1727.25 1214.1 L1727.84 1214.1 L1728.42 1214.1 L1729.01 1214.1 L1729.6 1214.1 L1730.18 1214.1 L1730.77 1214.1 L1731.36 1214.1 L1731.94 1214.1 L1732.53 1214.1 L1733.11 1214.1 L1733.7 1214.1 L1734.29 1214.1 L1734.87 1214.1 L1735.46 1214.1 L1736.05 1214.1 L1736.63 1214.1 L1737.22 1214.1 L1737.81 1214.1 L1738.39 1214.1 L1738.98 1214.1 L1739.57 1214.1 L1740.15 1214.1 L1740.74 1214.1 L1741.32 1214.1 L1741.91 1214.1 L1742.5 1214.1 L1743.08 1214.1 L1743.67 1214.1 L1744.26 1214.1 L1744.84 1214.1 L1745.43 1214.1 L1746.02 1214.1 L1746.6 1214.1 L1747.19 1214.1 L1747.78 1214.1 L1748.36 1214.1 L1748.95 1214.1 L1749.53 1214.1 L1750.12 1214.1 L1750.71 1214.1 L1751.29 1214.1 L1751.88 1214.1 L1752.47 1214.1 L1753.05 1214.1 L1753.64 1214.1 L1754.23 1214.1 L1754.81 1214.1 L1755.4 1214.1 L1755.99 1214.1 L1756.57 1214.1 L1757.16 1214.1 L1757.74 1214.1 L1758.33 1214.1 L1758.92 1214.1 L1759.5 1214.1 L1760.09 1214.1 L1760.68 1214.1 L1761.26 1214.1 L1761.85 1214.1 L1762.44 1214.1 L1763.02 1214.1 L1763.61 1214.1 L1764.19 1214.1 L1764.78 1214.1 L1765.37 1214.1 L1765.95 1214.1 L1766.54 1214.1 L1767.13 1214.1 L1767.71 1214.1 L1768.3 1214.1 L1768.89 1214.1 L1769.47 1214.1 L1770.06 1214.1 L1770.65 1214.1 L1771.23 1214.1 L1771.82 1214.1 L1772.4 1214.1 L1772.99 1214.1 L1773.58 1214.1 L1774.16 1214.1 L1774.75 1214.1 L1775.34 1214.1 L1775.92 1214.1 L1776.51 1214.1 L1777.1 1214.1 L1777.68 1214.1 L1778.27 1214.1 L1778.86 1214.1 L1779.44 1214.1 L1780.03 1214.1 L1780.61 1214.1 L1781.2 1214.1 L1781.79 1214.1 L1782.37 1214.1 L1782.96 1214.1 L1783.55 1214.1 L1784.13 1214.1 L1784.72 1214.1 L1785.31 1214.1 L1785.89 1214.1 L1786.48 1214.1 L1787.06 1214.1 L1787.65 1214.1 L1788.24 1214.1 L1788.82 1214.1 L1789.41 1214.1 L1790 1214.1 L1790.58 1214.1 L1791.17 1214.1 L1791.76 1214.1 L1792.34 1214.1 L1792.93 1214.1 L1793.52 1214.1 L1794.1 1214.1 L1794.69 1214.1 L1795.27 1214.1 L1795.86 1214.1 L1796.45 1214.1 L1797.03 1214.1 L1797.62 1214.1 L1798.21 1214.1 L1798.79 1214.1 L1799.38 1214.1 L1799.97 1214.1 L1800.55 1214.1 L1801.14 1214.1 L1801.73 1214.1 L1802.31 1214.1 L1802.9 1214.1 L1803.48 1214.1 L1804.07 1214.1 L1804.66 1214.1 L1805.24 1214.1 L1805.83 1214.1 L1806.42 1214.1 L1807 1214.1 L1807.59 1214.1 L1808.18 1214.1 L1808.76 1214.1 L1809.35 1214.1 L1809.94 1214.1 L1810.52 1214.1 L1811.11 1214.1 L1811.69 1214.1 L1812.28 1214.1 L1812.87 1214.1 L1813.45 1214.1 L1814.04 1214.1 L1814.63 1214.1 L1815.21 1214.1 L1815.8 1214.1 L1816.39 1214.1 L1816.97 1214.1 L1817.56 1214.1 L1818.14 1214.1 L1818.73 1214.1 L1819.32 1214.1 L1819.9 1214.1 L1820.49 1214.1 L1821.08 1214.1 L1821.66 1214.1 L1822.25 1214.1 L1822.84 1214.1 L1823.42 1214.1 L1824.01 1214.1 L1824.6 1214.1 L1825.18 1214.1 L1825.77 1214.1 L1826.35 1214.1 L1826.94 1214.1 L1827.53 1214.1 L1828.11 1214.1 L1828.7 1214.1 L1829.29 1214.1 L1829.87 1214.1 L1830.46 1214.1 L1831.05 1214.1 L1831.63 1214.1 L1832.22 1214.1 L1832.81 1214.1 L1833.39 1214.1 L1833.98 1214.1 L1834.56 1214.1 L1835.15 1214.1 L1835.74 1214.1 L1836.32 1214.1 L1836.91 1214.1 L1837.5 1214.1 L1838.08 1214.1 L1838.67 1214.1 L1839.26 1214.1 L1839.84 1214.1 L1840.43 1214.1 L1841.01 1214.1 L1841.6 1214.1 L1842.19 1214.1 L1842.77 1214.1 L1843.36 1214.1 L1843.95 1214.1 L1844.53 1214.1 L1845.12 1214.1 L1845.71 1214.1 L1846.29 1214.1 L1846.88 1214.1 L1847.47 1214.1 L1848.05 1214.1 L1848.64 1214.1 L1849.22 1214.1 L1849.81 1214.1 L1850.4 1214.1 L1850.98 1214.1 L1851.57 1214.1 L1852.16 1214.1 L1852.74 1214.1 L1853.33 1214.1 L1853.92 1214.1 L1854.5 1214.1 L1855.09 1214.1 L1855.68 1214.1 L1856.26 1214.1 L1856.85 1214.1 L1857.43 1214.1 L1858.02 1214.1 L1858.61 1214.1 L1859.19 1214.1 L1859.78 1214.1 L1860.37 1214.1 L1860.95 1214.1 L1861.54 1214.1 L1862.13 1214.1 L1862.71 1214.1 L1863.3 1214.1 L1863.88 1214.1 L1864.47 1214.1 L1865.06 1214.1 L1865.64 1214.1 L1866.23 1214.1 L1866.82 1214.1 L1867.4 1214.1 L1867.99 1214.1 L1868.58 1214.1 L1869.16 1214.1 L1869.75 1214.1 L1870.34 1214.1 L1870.92 1214.1 L1871.51 1214.1 L1872.09 1214.1 L1872.68 1214.1 L1873.27 1214.1 L1873.85 1214.1 L1874.44 1214.1 L1875.03 1214.1 L1875.61 1214.1 L1876.2 1214.1 L1876.79 1214.1 L1877.37 1214.1 L1877.96 1214.1 L1878.55 1214.1 L1879.13 1214.1 L1879.72 1214.1 L1880.3 1214.1 L1880.89 1214.1 L1881.48 1214.1 L1882.06 1214.1 L1882.65 1214.1 L1883.24 1214.1 L1883.82 1214.1 L1884.41 1214.1 L1885 1214.1 L1885.58 1214.1 L1886.17 1214.1 L1886.76 1214.1 L1887.34 1214.1 L1887.93 1214.1 L1888.51 1214.1 L1889.1 1214.1 L1889.69 1214.1 L1890.27 1214.1 L1890.86 1214.1 L1891.45 1214.1 L1892.03 1214.1 L1892.62 1214.1 L1893.21 1214.1 L1893.79 1214.1 L1894.38 1214.1 L1894.96 1214.1 L1895.55 1214.1 L1896.14 1214.1 L1896.72 1214.1 L1897.31 1214.1 L1897.9 1214.1 L1898.48 1214.1 L1899.07 1214.1 L1899.66 1214.1 L1900.24 1214.1 L1900.83 1214.1 L1901.42 1214.1 L1902 1214.1 L1902.59 1214.1 L1903.17 1214.1 L1903.76 1214.1 L1904.35 1214.1 L1904.93 1214.1 L1905.52 1214.1 L1906.11 1214.1 L1906.69 1214.1 L1907.28 1214.1 L1907.87 1214.1 L1908.45 1214.1 L1909.04 1214.1 L1909.63 1214.1 L1910.21 1214.1 L1910.8 1214.1 L1911.38 1214.1 L1911.97 1214.1 L1912.56 1214.1 L1913.14 1214.1 L1913.73 1214.1 L1914.32 1214.1 L1914.9 1214.1 L1915.49 1214.1 L1916.08 1214.1 L1916.66 1214.1 L1917.25 1214.1 L1917.83 1214.1 L1918.42 1214.1 L1919.01 1214.1 L1919.59 1214.1 L1920.18 1214.1 L1920.77 1214.1 L1921.35 1214.1 L1921.94 1214.1 L1922.53 1214.1 L1923.11 1214.1 L1923.7 1214.1 L1924.29 1214.1 L1924.87 1214.1 L1925.46 1214.1 L1926.04 1214.1 L1926.63 1214.1 L1927.22 1214.1 L1927.8 1214.1 L1928.39 1214.1 L1928.98 1214.1 L1929.56 1214.1 L1930.15 1214.1 L1930.74 1214.1 L1931.32 1214.1 L1931.91 1214.1 L1932.5 1214.1 L1933.08 1214.1 L1933.67 1214.1 L1934.25 1214.1 L1934.84 1214.1 L1935.43 1214.1 L1936.01 1214.1 L1936.6 1214.1 L1937.19 1214.1 L1937.77 1214.1 L1938.36 1214.1 L1938.95 1214.1 L1939.53 1214.1 L1940.12 1214.1 L1940.71 1214.1 L1941.29 1214.1 L1941.88 1214.1 L1942.46 1214.1 L1943.05 1214.1 L1943.64 1214.1 L1944.22 1214.1 L1944.81 1214.1 L1945.4 1214.1 L1945.98 1214.1 L1946.57 1214.1 L1947.16 1214.1 L1947.74 1214.1 L1948.33 1214.1 L1948.91 1214.1 L1949.5 1214.1 L1950.09 1214.1 L1950.67 1214.1 L1951.26 1214.1 L1951.85 1214.1 L1952.43 1214.1 L1953.02 1214.1 L1953.61 1214.1 L1954.19 1214.1 L1954.78 1214.1 L1955.37 1214.1 L1955.95 1214.1 L1956.54 1214.1 L1957.12 1214.1 L1957.71 1214.1 L1958.3 1214.1 L1958.88 1214.1 L1959.47 1214.1 L1960.06 1214.1 L1960.64 1214.1 L1961.23 1214.1 L1961.82 1214.1 L1962.4 1214.1 L1962.99 1214.1 L1963.58 1214.1 L1964.16 1214.1 L1964.75 1214.1 L1965.33 1214.1 L1965.92 1214.1 L1966.51 1214.1 L1967.09 1214.1 L1967.68 1214.1 L1968.27 1214.1 L1968.85 1214.1 L1969.44 1214.1 L1970.03 1214.1 L1970.61 1214.1 L1971.2 1214.1 L1971.78 1214.1 L1972.37 1214.1 L1972.96 1214.1 L1973.54 1214.1 L1974.13 1214.1 L1974.72 1214.1 L1975.3 1214.1 L1975.89 1214.1 L1976.48 1214.1 L1977.06 1214.1 L1977.65 1214.1 L1978.24 1214.1 L1978.82 1214.1 L1979.41 1214.1 L1979.99 1214.1 L1980.58 1214.1 L1981.17 1214.1 L1981.75 1214.1 L1982.34 1214.1 L1982.93 1214.1 L1983.51 1214.1 L1984.1 1214.1 L1984.69 1214.1 L1985.27 1214.1 L1985.86 1214.1 L1986.45 1214.1 L1987.03 1214.1 L1987.62 1214.1 L1988.2 1214.1 L1988.79 1214.1 L1989.38 1214.1 L1989.96 1214.1 L1990.55 1214.1 L1991.14 1214.1 L1991.72 1214.1 L1992.31 1214.1 L1992.9 1214.1 L1993.48 1214.1 L1994.07 1214.1 L1994.65 1214.1 L1995.24 1214.1 L1995.83 1214.1 L1996.41 1214.1 L1997 1214.1 L1997.59 1214.1 L1998.17 1214.1 L1998.76 1214.1 L1999.35 1214.1 L1999.93 1214.1 L2000.52 1214.1 L2001.11 1214.1 L2001.69 1214.1 L2002.28 1214.1 L2002.86 1214.1 L2003.45 1214.1 L2004.04 1214.1 L2004.62 1214.1 L2005.21 1214.1 L2005.8 1214.1 L2006.38 1214.1 L2006.97 1214.1 L2007.56 1214.1 L2008.14 1214.1 L2008.73 1214.1 L2009.32 1214.1 L2009.9 1214.1 L2010.49 1214.1 L2011.07 1214.1 L2011.66 1214.1 L2012.25 1214.1 L2012.83 1214.1 L2013.42 1214.1 L2014.01 1214.1 L2014.59 1214.1 L2015.18 1214.1 L2015.77 1214.1 L2016.35 1214.1 L2016.94 1214.1 L2017.53 1214.1 L2018.11 1214.1 L2018.7 1214.1 L2019.28 1214.1 L2019.87 1214.1 L2020.46 1214.1 L2021.04 1214.1 L2021.63 1214.1 L2022.22 1214.1 L2022.8 1214.1 L2023.39 1214.1 L2023.98 1214.1 L2024.56 1214.1 L2025.15 1214.1 L2025.73 1214.1 L2026.32 1214.1 L2026.91 1214.1 L2027.49 1214.1 L2028.08 1214.1 L2028.67 1214.1 L2029.25 1214.1 L2029.84 1214.1 L2030.43 1214.1 L2031.01 1214.1 L2031.6 1214.1 L2032.19 1214.1 L2032.77 1214.1 L2033.36 1214.1 L2033.94 1214.1 L2034.53 1214.1 L2035.12 1214.1 L2035.7 1214.1 L2036.29 1214.1 L2036.88 1214.1 L2037.46 1214.1 L2038.05 1214.1 L2038.64 1214.1 L2039.22 1214.1 L2039.81 1214.1 L2040.4 1214.1 L2040.98 1214.1 L2041.57 1214.1 L2042.15 1214.1 L2042.74 1214.1 L2043.33 1214.1 L2043.91 1214.1 L2044.5 1214.1 L2045.09 1214.1 L2045.67 1214.1 L2046.26 1214.1 L2046.85 1214.1 L2047.43 1214.1 L2048.02 1214.1 L2048.6 1214.1 L2049.19 1214.1 L2049.78 1214.1 L2050.36 1214.1 L2050.95 1214.1 L2051.54 1214.1 L2052.12 1214.1 L2052.71 1214.1 L2053.3 1214.1 L2053.88 1214.1 L2054.47 1214.1 L2055.06 1214.1 L2055.64 1214.1 L2056.23 1214.1 L2056.81 1214.1 L2057.4 1214.1 L2057.99 1214.1 L2058.57 1214.1 L2059.16 1214.1 L2059.75 1214.1 L2060.33 1214.1 L2060.92 1214.1 L2061.51 1214.1 L2062.09 1214.1 L2062.68 1214.1 L2063.27 1214.1 L2063.85 1214.1 L2064.44 1214.1 L2065.02 1214.1 L2065.61 1214.1 L2066.2 1214.1 L2066.78 1214.1 L2067.37 1214.1 L2067.96 1214.1 L2068.54 1214.1 L2069.13 1214.1 L2069.72 1214.1 L2070.3 1214.1 L2070.89 1214.1 L2071.48 1214.1 L2072.06 1214.1 L2072.65 1214.1 L2073.23 1214.1 L2073.82 1214.1 L2074.41 1214.1 L2074.99 1214.1 L2075.58 1214.1 L2076.17 1214.1 L2076.75 1214.1 L2077.34 1214.1 L2077.93 1214.1 L2078.51 1214.1 L2079.1 1214.1 L2079.68 1214.1 L2080.27 1214.1 L2080.86 1214.1 L2081.44 1214.1 L2082.03 1214.1 L2082.62 1214.1 L2083.2 1214.1 L2083.79 1214.1 L2084.38 1214.1 L2084.96 1214.1 L2085.55 1214.1 L2086.14 1214.1 L2086.72 1214.1 L2087.31 1214.1 L2087.89 1214.1 L2088.48 1214.1 L2089.07 1214.1 L2089.65 1214.1 L2090.24 1214.1 L2090.83 1214.1 L2091.41 1214.1 L2092 1214.1 L2092.59 1214.1 L2093.17 1214.1 L2093.76 1214.1 L2094.35 1214.1 L2094.93 1214.1 L2095.52 1214.1 L2096.1 1214.1 L2096.69 1214.1 L2097.28 1214.1 L2097.86 1214.1 L2098.45 1214.1 L2099.04 1214.1 L2099.62 1214.1 L2100.21 1214.1 L2100.8 1214.1 L2101.38 1214.1 L2101.97 1214.1 L2102.55 1214.1 L2103.14 1214.1 L2103.73 1214.1 L2104.31 1214.1 L2104.9 1214.1 L2105.49 1214.1 L2106.07 1214.1 L2106.66 1214.1 L2107.25 1214.1 L2107.83 1214.1 L2108.42 1214.1 L2109.01 1214.1 L2109.59 1214.1 L2110.18 1214.1 L2110.76 1214.1 L2111.35 1214.1 L2111.94 1214.1 L2112.52 1214.1 L2113.11 1214.1 L2113.7 1214.1 L2114.28 1214.1 L2114.87 1214.1 L2115.46 1214.1 L2116.04 1214.1 L2116.63 1214.1 L2117.22 1214.1 L2117.8 1214.1 L2118.39 1214.1 L2118.97 1214.1 L2119.56 1214.1 L2120.15 1214.1 L2120.73 1214.1 L2121.32 1214.1 L2121.91 1214.1 L2122.49 1214.1 L2123.08 1214.1 L2123.67 1214.1 L2124.25 1214.1 L2124.84 1214.1 L2125.42 1214.1 L2126.01 1214.1 L2126.6 1214.1 L2127.18 1214.1 L2127.77 1214.1 L2128.36 1214.1 L2128.94 1214.1 L2129.53 1214.1 L2130.12 1214.1 L2130.7 1214.1 L2131.29 1214.1 L2131.88 1214.1 L2132.46 1214.1 L2133.05 1214.1 L2133.63 1214.1 L2134.22 1214.1 L2134.81 1214.1 L2135.39 1214.1 L2135.98 1214.1 L2136.57 1214.1 L2137.15 1214.1 L2137.74 1214.1 L2138.33 1214.1 L2138.91 1214.1 L2139.5 1214.1 L2140.09 1214.1 L2140.67 1214.1 L2141.26 1214.1 L2141.84 1214.1 L2142.43 1214.1 L2143.02 1214.1 L2143.6 1214.1 L2144.19 1214.1 L2144.78 1214.1 L2145.36 1214.1 L2145.95 1214.1 L2146.54 1214.1 L2147.12 1214.1 L2147.71 1214.1 L2148.3 1214.1 L2148.88 1214.1 L2149.47 1214.1 L2150.05 1214.1 L2150.64 1214.1 L2151.23 1214.1 L2151.81 1214.1 L2152.4 1214.1 L2152.99 1214.1 L2153.57 1214.1 L2154.16 1214.1 L2154.75 1214.1 L2155.33 1214.1 L2155.92 1214.1 L2156.5 1214.1 L2157.09 1214.1 L2157.68 1214.1 L2158.26 1214.1 L2158.26 1213.9 L2157.68 1213.9 L2157.09 1213.9 L2156.5 1213.9 L2155.92 1213.9 L2155.33 1213.9 L2154.75 1213.9 L2154.16 1213.9 L2153.57 1213.9 L2152.99 1213.9 L2152.4 1213.9 L2151.81 1213.9 L2151.23 1213.9 L2150.64 1213.9 L2150.05 1213.9 L2149.47 1213.9 L2148.88 1213.9 L2148.3 1213.9 L2147.71 1213.9 L2147.12 1213.9 L2146.54 1213.9 L2145.95 1213.9 L2145.36 1213.9 L2144.78 1213.9 L2144.19 1213.9 L2143.6 1213.9 L2143.02 1213.9 L2142.43 1213.9 L2141.84 1213.9 L2141.26 1213.9 L2140.67 1213.9 L2140.09 1213.9 L2139.5 1213.9 L2138.91 1213.9 L2138.33 1213.9 L2137.74 1213.9 L2137.15 1213.9 L2136.57 1213.9 L2135.98 1213.9 L2135.39 1213.9 L2134.81 1213.9 L2134.22 1213.9 L2133.63 1213.9 L2133.05 1213.9 L2132.46 1213.9 L2131.88 1213.9 L2131.29 1213.9 L2130.7 1213.9 L2130.12 1213.9 L2129.53 1213.9 L2128.94 1213.9 L2128.36 1213.9 L2127.77 1213.9 L2127.18 1213.9 L2126.6 1213.9 L2126.01 1213.9 L2125.42 1213.9 L2124.84 1213.9 L2124.25 1213.9 L2123.67 1213.9 L2123.08 1213.9 L2122.49 1213.9 L2121.91 1213.9 L2121.32 1213.9 L2120.73 1213.9 L2120.15 1213.9 L2119.56 1213.9 L2118.97 1213.9 L2118.39 1213.9 L2117.8 1213.9 L2117.22 1213.9 L2116.63 1213.9 L2116.04 1213.9 L2115.46 1213.9 L2114.87 1213.9 L2114.28 1213.9 L2113.7 1213.9 L2113.11 1213.9 L2112.52 1213.9 L2111.94 1213.9 L2111.35 1213.9 L2110.76 1213.9 L2110.18 1213.9 L2109.59 1213.9 L2109.01 1213.9 L2108.42 1213.9 L2107.83 1213.9 L2107.25 1213.9 L2106.66 1213.9 L2106.07 1213.9 L2105.49 1213.9 L2104.9 1213.9 L2104.31 1213.9 L2103.73 1213.9 L2103.14 1213.9 L2102.55 1213.9 L2101.97 1213.9 L2101.38 1213.9 L2100.8 1213.9 L2100.21 1213.9 L2099.62 1213.9 L2099.04 1213.9 L2098.45 1213.9 L2097.86 1213.9 L2097.28 1213.9 L2096.69 1213.9 L2096.1 1213.9 L2095.52 1213.9 L2094.93 1213.9 L2094.35 1213.9 L2093.76 1213.9 L2093.17 1213.9 L2092.59 1213.9 L2092 1213.9 L2091.41 1213.9 L2090.83 1213.9 L2090.24 1213.9 L2089.65 1213.9 L2089.07 1213.9 L2088.48 1213.9 L2087.89 1213.9 L2087.31 1213.9 L2086.72 1213.9 L2086.14 1213.9 L2085.55 1213.9 L2084.96 1213.9 L2084.38 1213.9 L2083.79 1213.9 L2083.2 1213.9 L2082.62 1213.9 L2082.03 1213.9 L2081.44 1213.9 L2080.86 1213.9 L2080.27 1213.9 L2079.68 1213.9 L2079.1 1213.9 L2078.51 1213.9 L2077.93 1213.9 L2077.34 1213.9 L2076.75 1213.9 L2076.17 1213.9 L2075.58 1213.9 L2074.99 1213.9 L2074.41 1213.9 L2073.82 1213.9 L2073.23 1213.9 L2072.65 1213.9 L2072.06 1213.9 L2071.48 1213.9 L2070.89 1213.9 L2070.3 1213.9 L2069.72 1213.9 L2069.13 1213.9 L2068.54 1213.9 L2067.96 1213.9 L2067.37 1213.9 L2066.78 1213.9 L2066.2 1213.9 L2065.61 1213.9 L2065.02 1213.9 L2064.44 1213.9 L2063.85 1213.9 L2063.27 1213.9 L2062.68 1213.9 L2062.09 1213.9 L2061.51 1213.9 L2060.92 1213.9 L2060.33 1213.9 L2059.75 1213.9 L2059.16 1213.9 L2058.57 1213.9 L2057.99 1213.9 L2057.4 1213.9 L2056.81 1213.9 L2056.23 1213.9 L2055.64 1213.9 L2055.06 1213.9 L2054.47 1213.9 L2053.88 1213.9 L2053.3 1213.9 L2052.71 1213.9 L2052.12 1213.9 L2051.54 1213.9 L2050.95 1213.9 L2050.36 1213.9 L2049.78 1213.9 L2049.19 1213.9 L2048.6 1213.9 L2048.02 1213.9 L2047.43 1213.9 L2046.85 1213.9 L2046.26 1213.9 L2045.67 1213.9 L2045.09 1213.9 L2044.5 1213.9 L2043.91 1213.9 L2043.33 1213.9 L2042.74 1213.9 L2042.15 1213.9 L2041.57 1213.9 L2040.98 1213.9 L2040.4 1213.9 L2039.81 1213.9 L2039.22 1213.9 L2038.64 1213.9 L2038.05 1213.9 L2037.46 1213.9 L2036.88 1213.9 L2036.29 1213.9 L2035.7 1213.9 L2035.12 1213.9 L2034.53 1213.9 L2033.94 1213.9 L2033.36 1213.9 L2032.77 1213.9 L2032.19 1213.9 L2031.6 1213.9 L2031.01 1213.9 L2030.43 1213.9 L2029.84 1213.9 L2029.25 1213.9 L2028.67 1213.9 L2028.08 1213.9 L2027.49 1213.9 L2026.91 1213.9 L2026.32 1213.9 L2025.73 1213.9 L2025.15 1213.9 L2024.56 1213.9 L2023.98 1213.9 L2023.39 1213.9 L2022.8 1213.9 L2022.22 1213.9 L2021.63 1213.9 L2021.04 1213.9 L2020.46 1213.9 L2019.87 1213.9 L2019.28 1213.9 L2018.7 1213.9 L2018.11 1213.9 L2017.53 1213.9 L2016.94 1213.9 L2016.35 1213.9 L2015.77 1213.9 L2015.18 1213.9 L2014.59 1213.9 L2014.01 1213.9 L2013.42 1213.9 L2012.83 1213.9 L2012.25 1213.9 L2011.66 1213.9 L2011.07 1213.9 L2010.49 1213.9 L2009.9 1213.9 L2009.32 1213.9 L2008.73 1213.9 L2008.14 1213.9 L2007.56 1213.9 L2006.97 1213.9 L2006.38 1213.9 L2005.8 1213.9 L2005.21 1213.9 L2004.62 1213.9 L2004.04 1213.9 L2003.45 1213.9 L2002.86 1213.9 L2002.28 1213.9 L2001.69 1213.9 L2001.11 1213.9 L2000.52 1213.9 L1999.93 1213.9 L1999.35 1213.9 L1998.76 1213.9 L1998.17 1213.9 L1997.59 1213.9 L1997 1213.9 L1996.41 1213.9 L1995.83 1213.9 L1995.24 1213.9 L1994.65 1213.9 L1994.07 1213.9 L1993.48 1213.9 L1992.9 1213.9 L1992.31 1213.9 L1991.72 1213.9 L1991.14 1213.9 L1990.55 1213.9 L1989.96 1213.9 L1989.38 1213.9 L1988.79 1213.9 L1988.2 1213.9 L1987.62 1213.9 L1987.03 1213.9 L1986.45 1213.9 L1985.86 1213.9 L1985.27 1213.9 L1984.69 1213.9 L1984.1 1213.9 L1983.51 1213.9 L1982.93 1213.9 L1982.34 1213.9 L1981.75 1213.9 L1981.17 1213.9 L1980.58 1213.9 L1979.99 1213.9 L1979.41 1213.9 L1978.82 1213.9 L1978.24 1213.9 L1977.65 1213.9 L1977.06 1213.9 L1976.48 1213.9 L1975.89 1213.9 L1975.3 1213.9 L1974.72 1213.9 L1974.13 1213.9 L1973.54 1213.9 L1972.96 1213.9 L1972.37 1213.9 L1971.78 1213.9 L1971.2 1213.9 L1970.61 1213.9 L1970.03 1213.9 L1969.44 1213.9 L1968.85 1213.9 L1968.27 1213.9 L1967.68 1213.9 L1967.09 1213.9 L1966.51 1213.9 L1965.92 1213.9 L1965.33 1213.9 L1964.75 1213.9 L1964.16 1213.9 L1963.58 1213.9 L1962.99 1213.9 L1962.4 1213.9 L1961.82 1213.9 L1961.23 1213.9 L1960.64 1213.9 L1960.06 1213.9 L1959.47 1213.9 L1958.88 1213.9 L1958.3 1213.9 L1957.71 1213.9 L1957.12 1213.9 L1956.54 1213.9 L1955.95 1213.9 L1955.37 1213.9 L1954.78 1213.9 L1954.19 1213.9 L1953.61 1213.9 L1953.02 1213.9 L1952.43 1213.9 L1951.85 1213.9 L1951.26 1213.9 L1950.67 1213.9 L1950.09 1213.9 L1949.5 1213.9 L1948.91 1213.9 L1948.33 1213.9 L1947.74 1213.9 L1947.16 1213.9 L1946.57 1213.9 L1945.98 1213.9 L1945.4 1213.9 L1944.81 1213.9 L1944.22 1213.9 L1943.64 1213.9 L1943.05 1213.9 L1942.46 1213.9 L1941.88 1213.9 L1941.29 1213.9 L1940.71 1213.9 L1940.12 1213.9 L1939.53 1213.9 L1938.95 1213.9 L1938.36 1213.9 L1937.77 1213.9 L1937.19 1213.9 L1936.6 1213.9 L1936.01 1213.9 L1935.43 1213.9 L1934.84 1213.9 L1934.25 1213.9 L1933.67 1213.9 L1933.08 1213.9 L1932.5 1213.9 L1931.91 1213.9 L1931.32 1213.9 L1930.74 1213.9 L1930.15 1213.9 L1929.56 1213.9 L1928.98 1213.9 L1928.39 1213.9 L1927.8 1213.9 L1927.22 1213.9 L1926.63 1213.9 L1926.04 1213.9 L1925.46 1213.9 L1924.87 1213.9 L1924.29 1213.9 L1923.7 1213.9 L1923.11 1213.9 L1922.53 1213.9 L1921.94 1213.9 L1921.35 1213.9 L1920.77 1213.9 L1920.18 1213.9 L1919.59 1213.9 L1919.01 1213.9 L1918.42 1213.9 L1917.83 1213.9 L1917.25 1213.9 L1916.66 1213.9 L1916.08 1213.9 L1915.49 1213.9 L1914.9 1213.9 L1914.32 1213.9 L1913.73 1213.9 L1913.14 1213.9 L1912.56 1213.9 L1911.97 1213.9 L1911.38 1213.9 L1910.8 1213.9 L1910.21 1213.9 L1909.63 1213.9 L1909.04 1213.9 L1908.45 1213.9 L1907.87 1213.9 L1907.28 1213.9 L1906.69 1213.9 L1906.11 1213.9 L1905.52 1213.9 L1904.93 1213.9 L1904.35 1213.9 L1903.76 1213.9 L1903.17 1213.9 L1902.59 1213.9 L1902 1213.9 L1901.42 1213.9 L1900.83 1213.9 L1900.24 1213.9 L1899.66 1213.9 L1899.07 1213.9 L1898.48 1213.9 L1897.9 1213.9 L1897.31 1213.9 L1896.72 1213.9 L1896.14 1213.9 L1895.55 1213.9 L1894.96 1213.9 L1894.38 1213.9 L1893.79 1213.9 L1893.21 1213.9 L1892.62 1213.9 L1892.03 1213.9 L1891.45 1213.9 L1890.86 1213.9 L1890.27 1213.9 L1889.69 1213.9 L1889.1 1213.9 L1888.51 1213.9 L1887.93 1213.9 L1887.34 1213.9 L1886.76 1213.9 L1886.17 1213.9 L1885.58 1213.9 L1885 1213.9 L1884.41 1213.9 L1883.82 1213.9 L1883.24 1213.9 L1882.65 1213.9 L1882.06 1213.9 L1881.48 1213.9 L1880.89 1213.9 L1880.3 1213.9 L1879.72 1213.9 L1879.13 1213.9 L1878.55 1213.9 L1877.96 1213.9 L1877.37 1213.9 L1876.79 1213.9 L1876.2 1213.9 L1875.61 1213.9 L1875.03 1213.9 L1874.44 1213.9 L1873.85 1213.9 L1873.27 1213.9 L1872.68 1213.9 L1872.09 1213.9 L1871.51 1213.9 L1870.92 1213.9 L1870.34 1213.9 L1869.75 1213.9 L1869.16 1213.9 L1868.58 1213.9 L1867.99 1213.9 L1867.4 1213.9 L1866.82 1213.9 L1866.23 1213.9 L1865.64 1213.9 L1865.06 1213.9 L1864.47 1213.9 L1863.88 1213.9 L1863.3 1213.9 L1862.71 1213.9 L1862.13 1213.9 L1861.54 1213.9 L1860.95 1213.9 L1860.37 1213.9 L1859.78 1213.9 L1859.19 1213.9 L1858.61 1213.9 L1858.02 1213.9 L1857.43 1213.9 L1856.85 1213.9 L1856.26 1213.9 L1855.68 1213.9 L1855.09 1213.9 L1854.5 1213.9 L1853.92 1213.9 L1853.33 1213.9 L1852.74 1213.9 L1852.16 1213.9 L1851.57 1213.9 L1850.98 1213.9 L1850.4 1213.9 L1849.81 1213.9 L1849.22 1213.9 L1848.64 1213.9 L1848.05 1213.9 L1847.47 1213.9 L1846.88 1213.9 L1846.29 1213.9 L1845.71 1213.9 L1845.12 1213.9 L1844.53 1213.9 L1843.95 1213.9 L1843.36 1213.9 L1842.77 1213.9 L1842.19 1213.9 L1841.6 1213.9 L1841.01 1213.9 L1840.43 1213.9 L1839.84 1213.9 L1839.26 1213.9 L1838.67 1213.9 L1838.08 1213.9 L1837.5 1213.9 L1836.91 1213.9 L1836.32 1213.9 L1835.74 1213.9 L1835.15 1213.9 L1834.56 1213.9 L1833.98 1213.9 L1833.39 1213.9 L1832.81 1213.9 L1832.22 1213.9 L1831.63 1213.9 L1831.05 1213.9 L1830.46 1213.9 L1829.87 1213.9 L1829.29 1213.9 L1828.7 1213.9 L1828.11 1213.9 L1827.53 1213.9 L1826.94 1213.9 L1826.35 1213.9 L1825.77 1213.9 L1825.18 1213.9 L1824.6 1213.9 L1824.01 1213.9 L1823.42 1213.9 L1822.84 1213.9 L1822.25 1213.9 L1821.66 1213.9 L1821.08 1213.9 L1820.49 1213.9 L1819.9 1213.9 L1819.32 1213.9 L1818.73 1213.9 L1818.14 1213.9 L1817.56 1213.9 L1816.97 1213.9 L1816.39 1213.9 L1815.8 1213.9 L1815.21 1213.9 L1814.63 1213.9 L1814.04 1213.9 L1813.45 1213.9 L1812.87 1213.9 L1812.28 1213.9 L1811.69 1213.9 L1811.11 1213.9 L1810.52 1213.9 L1809.94 1213.9 L1809.35 1213.9 L1808.76 1213.9 L1808.18 1213.9 L1807.59 1213.9 L1807 1213.9 L1806.42 1213.9 L1805.83 1213.9 L1805.24 1213.9 L1804.66 1213.9 L1804.07 1213.9 L1803.48 1213.9 L1802.9 1213.9 L1802.31 1213.9 L1801.73 1213.9 L1801.14 1213.9 L1800.55 1213.9 L1799.97 1213.9 L1799.38 1213.9 L1798.79 1213.9 L1798.21 1213.9 L1797.62 1213.9 L1797.03 1213.9 L1796.45 1213.9 L1795.86 1213.9 L1795.27 1213.9 L1794.69 1213.9 L1794.1 1213.9 L1793.52 1213.9 L1792.93 1213.9 L1792.34 1213.9 L1791.76 1213.9 L1791.17 1213.9 L1790.58 1213.9 L1790 1213.9 L1789.41 1213.9 L1788.82 1213.9 L1788.24 1213.9 L1787.65 1213.9 L1787.06 1213.9 L1786.48 1213.9 L1785.89 1213.9 L1785.31 1213.9 L1784.72 1213.9 L1784.13 1213.9 L1783.55 1213.9 L1782.96 1213.9 L1782.37 1213.9 L1781.79 1213.9 L1781.2 1213.9 L1780.61 1213.9 L1780.03 1213.9 L1779.44 1213.9 L1778.86 1213.9 L1778.27 1213.9 L1777.68 1213.9 L1777.1 1213.9 L1776.51 1213.9 L1775.92 1213.9 L1775.34 1213.9 L1774.75 1213.9 L1774.16 1213.9 L1773.58 1213.9 L1772.99 1213.9 L1772.4 1213.9 L1771.82 1213.9 L1771.23 1213.9 L1770.65 1213.9 L1770.06 1213.9 L1769.47 1213.9 L1768.89 1213.9 L1768.3 1213.9 L1767.71 1213.9 L1767.13 1213.9 L1766.54 1213.9 L1765.95 1213.9 L1765.37 1213.9 L1764.78 1213.9 L1764.19 1213.9 L1763.61 1213.9 L1763.02 1213.9 L1762.44 1213.9 L1761.85 1213.9 L1761.26 1213.9 L1760.68 1213.9 L1760.09 1213.9 L1759.5 1213.9 L1758.92 1213.9 L1758.33 1213.9 L1757.74 1213.9 L1757.16 1213.9 L1756.57 1213.9 L1755.99 1213.9 L1755.4 1213.9 L1754.81 1213.9 L1754.23 1213.9 L1753.64 1213.9 L1753.05 1213.9 L1752.47 1213.9 L1751.88 1213.9 L1751.29 1213.9 L1750.71 1213.9 L1750.12 1213.9 L1749.53 1213.9 L1748.95 1213.9 L1748.36 1213.9 L1747.78 1213.9 L1747.19 1213.9 L1746.6 1213.9 L1746.02 1213.9 L1745.43 1213.9 L1744.84 1213.9 L1744.26 1213.9 L1743.67 1213.9 L1743.08 1213.9 L1742.5 1213.9 L1741.91 1213.9 L1741.32 1213.9 L1740.74 1213.9 L1740.15 1213.9 L1739.57 1213.9 L1738.98 1213.9 L1738.39 1213.9 L1737.81 1213.9 L1737.22 1213.9 L1736.63 1213.9 L1736.05 1213.9 L1735.46 1213.9 L1734.87 1213.9 L1734.29 1213.9 L1733.7 1213.9 L1733.11 1213.9 L1732.53 1213.9 L1731.94 1213.9 L1731.36 1213.9 L1730.77 1213.9 L1730.18 1213.9 L1729.6 1213.9 L1729.01 1213.9 L1728.42 1213.9 L1727.84 1213.9 L1727.25 1213.9 L1726.66 1213.9 L1726.08 1213.9 L1725.49 1213.9 L1724.91 1213.9 L1724.32 1213.9 L1723.73 1213.9 L1723.15 1213.9 L1722.56 1213.9 L1721.97 1213.9 L1721.39 1213.9 L1720.8 1213.9 L1720.21 1213.9 L1719.63 1213.9 L1719.04 1213.9 L1718.45 1213.9 L1717.87 1213.9 L1717.28 1213.9 L1716.7 1213.9 L1716.11 1213.9 L1715.52 1213.9 L1714.94 1213.9 L1714.35 1213.9 L1713.76 1213.9 L1713.18 1213.9 L1712.59 1213.9 L1712 1213.9 L1711.42 1213.9 L1710.83 1213.9 L1710.24 1213.9 L1709.66 1213.9 L1709.07 1213.9 L1708.49 1213.9 L1707.9 1213.9 L1707.31 1213.9 L1706.73 1213.9 L1706.14 1213.9 L1705.55 1213.9 L1704.97 1213.9 L1704.38 1213.9 L1703.79 1213.9 L1703.21 1213.9 L1702.62 1213.9 L1702.04 1213.9 L1701.45 1213.9 L1700.86 1213.9 L1700.28 1213.9 L1699.69 1213.9 L1699.1 1213.9 L1698.52 1213.9 L1697.93 1213.9 L1697.34 1213.9 L1696.76 1213.9 L1696.17 1213.9 L1695.58 1213.9 L1695 1213.9 L1694.41 1213.9 L1693.83 1213.9 L1693.24 1213.9 L1692.65 1213.9 L1692.07 1213.9 L1691.48 1213.9 L1690.89 1213.9 L1690.31 1213.9 L1689.72 1213.9 L1689.13 1213.9 L1688.55 1213.9 L1687.96 1213.9 L1687.37 1213.9 L1686.79 1213.9 L1686.2 1213.9 L1685.62 1213.9 L1685.03 1213.9 L1684.44 1213.9 L1683.86 1213.9 L1683.27 1213.9 L1682.68 1213.9 L1682.1 1213.9 L1681.51 1213.9 L1680.92 1213.9 L1680.34 1213.9 L1679.75 1213.9 L1679.17 1213.9 L1678.58 1213.9 L1677.99 1213.9 L1677.41 1213.9 L1676.82 1213.9 L1676.23 1213.9 L1675.65 1213.9 L1675.06 1213.9 L1674.47 1213.9 L1673.89 1213.9 L1673.3 1213.9 L1672.71 1213.9 L1672.13 1213.9 L1671.54 1213.9 L1670.96 1213.9 L1670.37 1213.9 L1669.78 1213.9 L1669.2 1213.9 L1668.61 1213.9 L1668.02 1213.9 L1667.44 1213.9 L1666.85 1213.9 L1666.26 1213.9 L1665.68 1213.9 L1665.09 1213.9 L1664.5 1213.9 L1663.92 1213.9 L1663.33 1213.9 L1662.75 1213.9 L1662.16 1213.9 L1661.57 1213.9 L1660.99 1213.9 L1660.4 1213.9 L1659.81 1213.9 L1659.23 1213.9 L1658.64 1213.9 L1658.05 1213.9 L1657.47 1213.9 L1656.88 1213.9 L1656.29 1213.9 L1655.71 1213.9 L1655.12 1213.9 L1654.54 1213.9 L1653.95 1213.9 L1653.36 1213.9 L1652.78 1213.9 L1652.19 1213.9 L1651.6 1213.9 L1651.02 1213.9 L1650.43 1213.9 L1649.84 1213.9 L1649.26 1213.9 L1648.67 1213.9 L1648.09 1213.9 L1647.5 1213.9 L1646.91 1213.9 L1646.33 1213.9 L1645.74 1213.9 L1645.15 1213.9 L1644.57 1213.9 L1643.98 1213.9 L1643.39 1213.9 L1642.81 1213.9 L1642.22 1213.9 L1641.63 1213.9 L1641.05 1213.9 L1640.46 1213.9 L1639.88 1213.9 L1639.29 1213.9 L1638.7 1213.9 L1638.12 1213.9 L1637.53 1213.9 L1636.94 1213.9 L1636.36 1213.9 L1635.77 1213.9 L1635.18 1213.9 L1634.6 1213.9 L1634.01 1213.9 L1633.42 1213.9 L1632.84 1213.9 L1632.25 1213.9 L1631.67 1213.9 L1631.08 1213.9 L1630.49 1213.9 L1629.91 1213.9 L1629.32 1213.9 L1628.73 1213.9 L1628.15 1213.9 L1627.56 1213.9 L1626.97 1213.9 L1626.39 1213.9 L1625.8 1213.9 L1625.22 1213.9 L1624.63 1213.9 L1624.04 1213.9 L1623.46 1213.9 L1622.87 1213.9 L1622.28 1213.9 L1621.7 1213.9 L1621.11 1213.9 L1620.52 1213.9 L1619.94 1213.9 L1619.35 1213.9 L1618.76 1213.9 L1618.18 1213.9 L1617.59 1213.9 L1617.01 1213.9 L1616.42 1213.9 L1615.83 1213.9 L1615.25 1213.9 L1614.66 1213.9 L1614.07 1213.9 L1613.49 1213.9 L1612.9 1213.9 L1612.31 1213.9 L1611.73 1213.9 L1611.14 1213.9 L1610.55 1213.9 L1609.97 1213.9 L1609.38 1213.9 L1608.8 1213.9 L1608.21 1213.9 L1607.62 1213.9 L1607.04 1213.9 L1606.45 1213.9 L1605.86 1213.9 L1605.28 1213.9 L1604.69 1213.9 L1604.1 1213.9 L1603.52 1213.9 L1602.93 1213.9 L1602.34 1213.9 L1601.76 1213.9 L1601.17 1213.9 L1600.59 1213.9 L1600 1213.9 L1599.41 1213.9 L1598.83 1213.9 L1598.24 1213.9 L1597.65 1213.9 L1597.07 1213.9 L1596.48 1213.9 L1595.89 1213.9 L1595.31 1213.9 L1594.72 1213.9 L1594.14 1213.9 L1593.55 1213.9 L1592.96 1213.9 L1592.38 1213.9 L1591.79 1213.9 L1591.2 1213.9 L1590.62 1213.9 L1590.03 1213.9 L1589.44 1213.9 L1588.86 1213.9 L1588.27 1213.9 L1587.68 1213.9 L1587.1 1213.9 L1586.51 1213.9 L1585.93 1213.9 L1585.34 1213.9 L1584.75 1213.9 L1584.17 1213.9 L1583.58 1213.9 L1582.99 1213.9 L1582.41 1213.9 L1581.82 1213.9 L1581.23 1213.9 L1580.65 1213.9 L1580.06 1213.9 L1579.47 1213.9 L1578.89 1213.9 L1578.3 1213.9 L1577.72 1213.9 L1577.13 1213.9 L1576.54 1213.9 L1575.96 1213.9 L1575.37 1213.9 L1574.78 1213.9 L1574.2 1213.9 L1573.61 1213.9 L1573.02 1213.9 L1572.44 1213.9 L1571.85 1213.9 L1571.27 1213.9 L1570.68 1213.9 L1570.09 1213.9 L1569.51 1213.9 L1568.92 1213.9 L1568.33 1213.9 L1567.75 1213.9 L1567.16 1213.9 L1566.57 1213.9 L1565.99 1213.9 L1565.4 1213.9 L1564.81 1213.9 L1564.23 1213.9 L1563.64 1213.9 L1563.06 1213.9 L1562.47 1213.9 L1561.88 1213.9 L1561.3 1213.9 L1560.71 1213.9 L1560.12 1213.9 L1559.54 1213.9 L1558.95 1213.9 L1558.36 1213.9 L1557.78 1213.9 L1557.19 1213.9 L1556.6 1213.9 L1556.02 1213.9 L1555.43 1213.9 L1554.85 1213.9 L1554.26 1213.9 L1553.67 1213.9 L1553.09 1213.9 L1552.5 1213.9 L1551.91 1213.9 L1551.33 1213.9 L1550.74 1213.9 L1550.15 1213.9 L1549.57 1213.9 L1548.98 1213.9 L1548.4 1213.9 L1547.81 1213.9 L1547.22 1213.9 L1546.64 1213.9 L1546.05 1213.9 L1545.46 1213.9 L1544.88 1213.9 L1544.29 1213.9 L1543.7 1213.9 L1543.12 1213.9 L1542.53 1213.9 L1541.94 1213.9 L1541.36 1213.9 L1540.77 1213.9 L1540.19 1213.9 L1539.6 1213.9 L1539.01 1213.9 L1538.43 1213.9 L1537.84 1213.9 L1537.25 1213.9 L1536.67 1213.9 L1536.08 1213.9 L1535.49 1213.9 L1534.91 1213.9 L1534.32 1213.9 L1533.73 1213.9 L1533.15 1213.9 L1532.56 1213.9 L1531.98 1213.9 L1531.39 1213.9 L1530.8 1213.9 L1530.22 1213.9 L1529.63 1213.9 L1529.04 1213.9 L1528.46 1213.9 L1527.87 1213.9 L1527.28 1213.9 L1526.7 1213.9 L1526.11 1213.9 L1525.52 1213.9 L1524.94 1213.9 L1524.35 1213.9 L1523.77 1213.9 L1523.18 1213.9 L1522.59 1213.9 L1522.01 1213.9 L1521.42 1213.9 L1520.83 1213.9 L1520.25 1213.9 L1519.66 1213.9 L1519.07 1213.9 L1518.49 1213.9 L1517.9 1213.9 L1517.32 1213.9 L1516.73 1213.9 L1516.14 1213.9 L1515.56 1213.9 L1514.97 1213.9 L1514.38 1213.9 L1513.8 1213.9 L1513.21 1213.9 L1512.62 1213.9 L1512.04 1213.9 L1511.45 1213.9 L1510.86 1213.9 L1510.28 1213.9 L1509.69 1213.9 L1509.11 1213.9 L1508.52 1213.9 L1507.93 1213.9 L1507.35 1213.9 L1506.76 1213.9 L1506.17 1213.9 L1505.59 1213.9 L1505 1213.9 L1504.41 1213.9 L1503.83 1213.9 L1503.24 1213.9 L1502.65 1213.9 L1502.07 1213.9 L1501.48 1213.9 L1500.9 1213.9 L1500.31 1213.9 L1499.72 1213.9 L1499.14 1213.9 L1498.55 1213.9 L1497.96 1213.9 L1497.38 1213.9 L1496.79 1213.9 L1496.2 1213.9 L1495.62 1213.9 L1495.03 1213.9 L1494.45 1213.9 L1493.86 1213.9 L1493.27 1213.9 L1492.69 1213.9 L1492.1 1213.9 L1491.51 1213.9 L1490.93 1213.9 L1490.34 1213.9 L1489.75 1213.9 L1489.17 1213.9 L1488.58 1213.9 L1487.99 1213.9 L1487.41 1213.9 L1486.82 1213.9 L1486.24 1213.9 L1485.65 1213.9 L1485.06 1213.9 L1484.48 1213.9 L1483.89 1213.9 L1483.3 1213.9 L1482.72 1213.9 L1482.13 1213.9 L1481.54 1213.9 L1480.96 1213.9 L1480.37 1213.9 L1479.78 1213.9 L1479.2 1213.9 L1478.61 1213.9 L1478.03 1213.9 L1477.44 1213.9 L1476.85 1213.9 L1476.27 1213.9 L1475.68 1213.9 L1475.09 1213.9 L1474.51 1213.9 L1473.92 1213.9 L1473.33 1213.9 L1472.75 1213.9 L1472.16 1213.9 L1471.57 1213.9 L1470.99 1213.9 L1470.4 1213.9 L1469.82 1213.9 L1469.23 1213.9 L1468.64 1213.9 L1468.06 1213.9 L1467.47 1213.9 L1466.88 1213.9 L1466.3 1213.9 L1465.71 1213.9 L1465.12 1213.9 L1464.54 1213.9 L1463.95 1213.9 L1463.37 1213.9 L1462.78 1213.9 L1462.19 1213.9 L1461.61 1213.9 L1461.02 1213.9 L1460.43 1213.9 L1459.85 1213.9 L1459.26 1213.9 L1458.67 1213.9 L1458.09 1213.9 L1457.5 1213.9 L1456.91 1213.9 L1456.33 1213.9 L1455.74 1213.9 L1455.16 1213.9 L1454.57 1213.9 L1453.98 1213.9 L1453.4 1213.9 L1452.81 1213.9 L1452.22 1213.9 L1451.64 1213.9 L1451.05 1213.9 L1450.46 1213.9 L1449.88 1213.9 L1449.29 1213.9 L1448.7 1213.9 L1448.12 1213.9 L1447.53 1213.9 L1446.95 1213.9 L1446.36 1213.9 L1445.77 1213.9 L1445.19 1213.9 L1444.6 1213.9 L1444.01 1213.9 L1443.43 1213.9 L1442.84 1213.9 L1442.25 1213.9 L1441.67 1213.9 L1441.08 1213.9 L1440.5 1213.9 L1439.91 1213.9 L1439.32 1213.9 L1438.74 1213.9 L1438.15 1213.9 L1437.56 1213.9 L1436.98 1213.9 L1436.39 1213.9 L1435.8 1213.9 L1435.22 1213.9 L1434.63 1213.9 L1434.04 1213.9 L1433.46 1213.9 L1432.87 1213.9 L1432.29 1213.9 L1431.7 1213.9 L1431.11 1213.9 L1430.53 1213.9 L1429.94 1213.9 L1429.35 1213.9 L1428.77 1213.9 L1428.18 1213.9 L1427.59 1213.9 L1427.01 1213.9 L1426.42 1213.9 L1425.83 1213.9 L1425.25 1213.9 L1424.66 1213.9 L1424.08 1213.9 L1423.49 1213.9 L1422.9 1213.9 L1422.32 1213.9 L1421.73 1213.9 L1421.14 1213.9 L1420.56 1213.9 L1419.97 1213.9 L1419.38 1213.9 L1418.8 1213.9 L1418.21 1213.9 L1417.63 1213.9 L1417.04 1213.9 L1416.45 1213.9 L1415.87 1213.9 L1415.28 1213.9 L1414.69 1213.9 L1414.11 1213.9 L1413.52 1213.9 L1412.93 1213.9 L1412.35 1213.9 L1411.76 1213.9 L1411.17 1213.9 L1410.59 1213.9 L1410 1213.9 L1409.42 1213.9 L1408.83 1213.9 L1408.24 1213.9 L1407.66 1213.9 L1407.07 1213.9 L1406.48 1213.9 L1405.9 1213.9 L1405.31 1213.9 L1404.72 1213.9 L1404.14 1213.9 L1403.55 1213.9 L1402.96 1213.9 L1402.38 1213.9 L1401.79 1213.9 L1401.21 1213.9 L1400.62 1213.9 L1400.03 1213.9 L1399.45 1213.9 L1398.86 1213.9 L1398.27 1213.9 L1397.69 1213.9 L1397.1 1213.9 L1396.51 1213.9 L1395.93 1213.9 L1395.34 1213.9 L1394.75 1213.9 L1394.17 1213.9 L1393.58 1213.9 L1393 1213.9 L1392.41 1213.9 L1391.82 1213.9 L1391.24 1213.9 L1390.65 1213.9 L1390.06 1213.9 L1389.48 1213.9 L1388.89 1213.9 L1388.3 1213.9 L1387.72 1213.9 L1387.13 1213.9 L1386.55 1213.9 L1385.96 1213.9 L1385.37 1213.9 L1384.79 1213.9 L1384.2 1213.9 L1383.61 1213.9 L1383.03 1213.9 L1382.44 1213.9 L1381.85 1213.9 L1381.27 1213.9 L1380.68 1213.9 L1380.09 1213.9 L1379.51 1213.9 L1378.92 1213.9 L1378.34 1213.9 L1377.75 1213.9 L1377.16 1213.9 L1376.58 1213.9 L1375.99 1213.9 L1375.4 1213.9 L1374.82 1213.9 L1374.23 1213.9 L1373.64 1213.9 L1373.06 1213.9 L1372.47 1213.9 L1371.88 1213.9 L1371.3 1213.9 L1370.71 1213.9 L1370.13 1213.9 L1369.54 1213.9 L1368.95 1213.9 L1368.37 1213.9 L1367.78 1213.9 L1367.19 1213.9 L1366.61 1213.9 L1366.02 1213.9 L1365.43 1213.9 L1364.85 1213.9 L1364.26 1213.9 L1363.68 1213.9 L1363.09 1213.9 L1362.5 1213.9 L1361.92 1213.9 L1361.33 1213.9 L1360.74 1213.9 L1360.16 1213.9 L1359.57 1213.9 L1358.98 1213.9 L1358.4 1213.9 L1357.81 1213.9 L1357.22 1213.9 L1356.64 1213.9 L1356.05 1213.9 L1355.47 1213.9 L1354.88 1213.9 L1354.29 1213.9 L1353.71 1213.9 L1353.12 1213.9 L1352.53 1213.9 L1351.95 1213.9 L1351.36 1213.9 L1350.77 1213.9 L1350.19 1213.9 L1349.6 1213.9 L1349.01 1213.9 L1348.43 1213.9 L1347.84 1213.9 L1347.26 1213.9 L1346.67 1213.9 L1346.08 1213.9 L1345.5 1213.9 L1344.91 1213.9 L1344.32 1213.9 L1343.74 1213.9 L1343.15 1213.9 L1342.56 1213.9 L1341.98 1213.9 L1341.39 1213.9 L1340.8 1213.9 L1340.22 1213.9 L1339.63 1213.9 L1339.05 1213.9 L1338.46 1213.9 L1337.87 1213.9 L1337.29 1213.9 L1336.7 1213.9 L1336.11 1213.9 L1335.53 1213.9 L1334.94 1213.9 L1334.35 1213.9 L1333.77 1213.9 L1333.18 1213.9 L1332.6 1213.9 L1332.01 1213.9 L1331.42 1213.9 L1330.84 1213.9 L1330.25 1213.9 L1329.66 1213.9 L1329.08 1213.9 L1328.49 1213.9 L1327.9 1213.9 L1327.32 1213.9 L1326.73 1213.9 L1326.14 1213.9 L1325.56 1213.9 L1324.97 1213.9 L1324.39 1213.9 L1323.8 1213.9 L1323.21 1213.9 L1322.63 1213.9 L1322.04 1213.9 L1321.45 1213.9 L1320.87 1213.9 L1320.28 1213.9 L1319.69 1213.9 L1319.11 1213.9 L1318.52 1213.9 L1317.93 1213.9 L1317.35 1213.9 L1316.76 1213.9 L1316.18 1213.9 L1315.59 1213.9 L1315 1213.9 L1314.42 1213.9 L1313.83 1213.9 L1313.24 1213.9 L1312.66 1213.9 L1312.07 1213.9 L1311.48 1213.9 L1310.9 1213.9 L1310.31 1213.9 L1309.73 1213.9 L1309.14 1213.9 L1308.55 1213.9 L1307.97 1213.9 L1307.38 1213.9 L1306.79 1213.9 L1306.21 1213.9 L1305.62 1213.9 L1305.03 1213.9 L1304.45 1213.9 L1303.86 1213.9 L1303.27 1213.9 L1302.69 1213.9 L1302.1 1213.9 L1301.52 1213.9 L1300.93 1213.9 L1300.34 1213.9 L1299.76 1213.9 L1299.17 1213.9 L1298.58 1213.9 L1298 1213.9 L1297.41 1213.9 L1296.82 1213.9 L1296.24 1213.9 L1295.65 1213.9 L1295.06 1213.9 L1294.48 1213.9 L1293.89 1213.9 L1293.31 1213.9 L1292.72 1213.9 L1292.13 1213.9 L1291.55 1213.9 L1290.96 1213.9 L1290.37 1213.9 L1289.79 1213.9 L1289.2 1213.9 L1288.61 1213.9 L1288.03 1213.9 L1287.44 1213.9 L1286.86 1213.9 L1286.27 1213.9 L1285.68 1213.9 L1285.1 1213.9 L1284.51 1213.9 L1283.92 1213.9 L1283.34 1213.9 L1282.75 1213.9 L1282.16 1213.9 L1281.58 1213.9 L1280.99 1213.9 L1280.4 1213.9 L1279.82 1213.9 L1279.23 1213.9 L1278.65 1213.9 L1278.06 1213.9 L1277.47 1213.9 L1276.89 1213.9 L1276.3 1213.9 L1275.71 1213.9 L1275.13 1213.9 L1274.54 1213.9 L1273.95 1213.9 L1273.37 1213.9 L1272.78 1213.9 L1272.19 1213.9 L1271.61 1213.9 L1271.02 1213.9 L1270.44 1213.9 L1269.85 1213.9 L1269.26 1213.9 L1268.68 1213.9 L1268.09 1213.9 L1267.5 1213.9 L1266.92 1213.9 L1266.33 1213.9 L1265.74 1213.9 L1265.16 1213.9 L1264.57 1213.9 L1263.98 1213.9 L1263.4 1213.9 L1262.81 1213.9 L1262.23 1213.9 L1261.64 1213.9 L1261.05 1213.9 L1260.47 1213.9 L1259.88 1213.9 L1259.29 1213.9 L1258.71 1213.9 L1258.12 1213.9 L1257.53 1213.9 L1256.95 1213.9 L1256.36 1213.9 L1255.78 1213.9 L1255.19 1213.9 L1254.6 1213.9 L1254.02 1213.9 L1253.43 1213.9 L1252.84 1213.9 L1252.26 1213.9 L1251.67 1213.9 L1251.08 1213.9 L1250.5 1213.9 L1249.91 1213.9 L1249.32 1213.9 L1248.74 1213.9 L1248.15 1213.9 L1247.57 1213.9 L1246.98 1213.9 L1246.39 1213.9 L1245.81 1213.9 L1245.22 1213.9 L1244.63 1213.9 L1244.05 1213.9 L1243.46 1213.9 L1242.87 1213.9 L1242.29 1213.9 L1241.7 1213.9 L1241.11 1213.9 L1240.53 1213.9 L1239.94 1213.9 L1239.36 1213.9 L1238.77 1213.9 L1238.18 1213.9 L1237.6 1213.9 L1237.01 1213.9 L1236.42 1213.9 L1235.84 1213.9 L1235.25 1213.9 L1234.66 1213.9 L1234.08 1213.9 L1233.49 1213.9 L1232.91 1213.9 L1232.32 1213.9 L1231.73 1213.9 L1231.15 1213.9 L1230.56 1213.9 L1229.97 1213.9 L1229.39 1213.9 L1228.8 1213.9 L1228.21 1213.9 L1227.63 1213.9 L1227.04 1213.9 L1226.45 1213.9 L1225.87 1213.9 L1225.28 1213.9 L1224.7 1213.9 L1224.11 1213.9 L1223.52 1213.9 L1222.94 1213.9 L1222.35 1213.9 L1221.76 1213.9 L1221.18 1213.9 L1220.59 1213.9 L1220 1213.9 L1219.42 1213.9 L1218.83 1213.9 L1218.24 1213.9 L1217.66 1213.9 L1217.07 1213.9 L1216.49 1213.9 L1215.9 1213.9 L1215.31 1213.9 L1214.73 1213.9 L1214.14 1213.9 L1213.55 1213.9 L1212.97 1213.9 L1212.38 1213.9 L1211.79 1213.9 L1211.21 1213.9 L1210.62 1213.9 L1210.03 1213.9 L1209.45 1213.9 L1208.86 1213.9 L1208.28 1213.9 L1207.69 1213.9 L1207.1 1213.9 L1206.52 1213.9 L1205.93 1213.9 L1205.34 1213.9 L1204.76 1213.9 L1204.17 1213.9 L1203.58 1213.9 L1203 1213.9 L1202.41 1213.9 L1201.83 1213.9 L1201.24 1213.9 L1200.65 1213.9 L1200.07 1213.9 L1199.48 1213.9 L1198.89 1213.9 L1198.31 1213.9 L1197.72 1213.9 L1197.13 1213.9 L1196.55 1213.9 L1195.96 1213.9 L1195.37 1213.9 L1194.79 1213.9 L1194.2 1213.9 L1193.62 1213.9 L1193.03 1213.9 L1192.44 1213.9 L1191.86 1213.9 L1191.27 1213.9 L1190.68 1213.9 L1190.1 1213.9 L1189.51 1213.9 L1188.92 1213.9 L1188.34 1213.9 L1187.75 1213.9 L1187.16 1213.9 L1186.58 1213.9 L1185.99 1213.9 L1185.41 1213.9 L1184.82 1213.9 L1184.23 1213.9 L1183.65 1213.9 L1183.06 1213.9 L1182.47 1213.9 L1181.89 1213.9 L1181.3 1213.9 L1180.71 1213.9 L1180.13 1213.9 L1179.54 1213.9 L1178.96 1213.9 L1178.37 1213.9 L1177.78 1213.9 L1177.2 1213.9 L1176.61 1213.9 L1176.02 1213.9 L1175.44 1213.9 L1174.85 1213.9 L1174.26 1213.9 L1173.68 1213.9 L1173.09 1213.9 L1172.5 1213.9 L1171.92 1213.9 L1171.33 1213.9 L1170.75 1213.9 L1170.16 1213.9 L1169.57 1213.9 L1168.99 1213.9 L1168.4 1213.9 L1167.81 1213.9 L1167.23 1213.9 L1166.64 1213.9 L1166.05 1213.9 L1165.47 1213.9 L1164.88 1213.9 L1164.29 1213.9 L1163.71 1213.9 L1163.12 1213.9 L1162.54 1213.9 L1161.95 1213.9 L1161.36 1213.9 L1160.78 1213.9 L1160.19 1213.9 L1159.6 1213.9 L1159.02 1213.9 L1158.43 1213.9 L1157.84 1213.9 L1157.26 1213.9 L1156.67 1213.9 L1156.09 1213.9 L1155.5 1213.9 L1154.91 1213.9 L1154.33 1213.9 L1153.74 1213.9 L1153.15 1213.9 L1152.57 1213.9 L1151.98 1213.9 L1151.39 1213.9 L1150.81 1213.9 L1150.22 1213.9 L1149.63 1213.9 L1149.05 1213.9 L1148.46 1213.9 L1147.88 1213.9 L1147.29 1213.9 L1146.7 1213.9 L1146.12 1213.9 L1145.53 1213.9 L1144.94 1213.9 L1144.36 1213.9 L1143.77 1213.9 L1143.18 1213.9 L1142.6 1213.9 L1142.01 1213.9 L1141.42 1213.9 L1140.84 1213.9 L1140.25 1213.9 L1139.67 1213.9 L1139.08 1213.9 L1138.49 1213.9 L1137.91 1213.9 L1137.32 1213.9 L1136.73 1213.9 L1136.15 1213.9 L1135.56 1213.9 L1134.97 1213.9 L1134.39 1213.9 L1133.8 1213.9 L1133.21 1213.9 L1132.63 1213.9 L1132.04 1213.9 L1131.46 1213.9 L1130.87 1213.9 L1130.28 1213.9 L1129.7 1213.9 L1129.11 1213.9 L1128.52 1213.9 L1127.94 1213.9 L1127.35 1213.9 L1126.76 1213.9 L1126.18 1213.9 L1125.59 1213.9 L1125.01 1213.9 L1124.42 1213.9 L1123.83 1213.9 L1123.25 1213.9 L1122.66 1213.9 L1122.07 1213.9 L1121.49 1213.9 L1120.9 1213.9 L1120.31 1213.9 L1119.73 1213.9 L1119.14 1213.9 L1118.55 1213.9 L1117.97 1213.9 L1117.38 1213.9 L1116.8 1213.9 L1116.21 1213.9 L1115.62 1213.9 L1115.04 1213.9 L1114.45 1213.9 L1113.86 1213.9 L1113.28 1213.9 L1112.69 1213.9 L1112.1 1213.9 L1111.52 1213.9 L1110.93 1213.9 L1110.34 1213.9 L1109.76 1213.9 L1109.17 1213.9 L1108.59 1213.9 L1108 1213.9 L1107.41 1213.9 L1106.83 1213.9 L1106.24 1213.9 L1105.65 1213.9 L1105.07 1213.9 L1104.48 1213.9 L1103.89 1213.9 L1103.31 1213.9 L1102.72 1213.9 L1102.14 1213.9 L1101.55 1213.9 L1100.96 1213.9 L1100.38 1213.9 L1099.79 1213.9 L1099.2 1213.9 L1098.62 1213.9 L1098.03 1213.9 L1097.44 1213.9 L1096.86 1213.9 L1096.27 1213.9 L1095.68 1213.9 L1095.1 1213.9 L1094.51 1213.9 L1093.93 1213.9 L1093.34 1213.9 L1092.75 1213.9 L1092.17 1213.9 L1091.58 1213.9 L1090.99 1213.9 L1090.41 1213.9 L1089.82 1213.9 L1089.23 1213.9 L1088.65 1213.9 L1088.06 1213.9 L1087.47 1213.9 L1086.89 1213.9 L1086.3 1213.9 L1085.72 1213.9 L1085.13 1213.9 L1084.54 1213.9 L1083.96 1213.9 L1083.37 1213.9 L1082.78 1213.9 L1082.2 1213.9 L1081.61 1213.9 L1081.02 1213.9 L1080.44 1213.9 L1079.85 1213.9 L1079.26 1213.9 L1078.68 1213.9 L1078.09 1213.9 L1077.51 1213.9 L1076.92 1213.9 L1076.33 1213.9 L1075.75 1213.9 L1075.16 1213.9 L1074.57 1213.9 L1073.99 1213.9 L1073.4 1213.9 L1072.81 1213.9 L1072.23 1213.9 L1071.64 1213.9 L1071.06 1213.9 L1070.47 1213.9 L1069.88 1213.9 L1069.3 1213.9 L1068.71 1213.9 L1068.12 1213.9 L1067.54 1213.9 L1066.95 1213.9 L1066.36 1213.9 L1065.78 1213.9 L1065.19 1213.9 L1064.6 1213.9 L1064.02 1213.9 L1063.43 1213.9 L1062.85 1213.9 L1062.26 1213.9 L1061.67 1213.9 L1061.09 1213.9 L1060.5 1213.9 L1059.91 1213.9 L1059.33 1213.9 L1058.74 1213.9 L1058.15 1213.9 L1057.57 1213.9 L1056.98 1213.9 L1056.39 1213.9 L1055.81 1213.9 L1055.22 1213.9 L1054.64 1213.9 L1054.05 1213.9 L1053.46 1213.9 L1052.88 1213.9 L1052.29 1213.9 L1051.7 1213.9 L1051.12 1213.9 L1050.53 1213.9 L1049.94 1213.9 L1049.36 1213.9 L1048.77 1213.9 L1048.19 1213.9 L1047.6 1213.9 L1047.01 1213.9 L1046.43 1213.9 L1045.84 1213.9 L1045.25 1213.9 L1044.67 1213.9 L1044.08 1213.9 L1043.49 1213.9 L1042.91 1213.9 L1042.32 1213.9 L1041.73 1213.9 L1041.15 1213.9 L1040.56 1213.9 L1039.98 1213.9 L1039.39 1213.9 L1038.8 1213.9 L1038.22 1213.9 L1037.63 1213.9 L1037.04 1213.9 L1036.46 1213.9 L1035.87 1213.9 L1035.28 1213.9 L1034.7 1213.9 L1034.11 1213.9 L1033.52 1213.9 L1032.94 1213.9 L1032.35 1213.9 L1031.77 1213.9 L1031.18 1213.9 L1030.59 1213.9 L1030.01 1213.9 L1029.42 1213.9 L1028.83 1213.9 L1028.25 1213.9 L1027.66 1213.9 L1027.07 1213.9 L1026.49 1213.9 L1025.9 1213.9 L1025.32 1213.9 L1024.73 1213.9 L1024.14 1213.9 L1023.56 1213.9 L1022.97 1213.9 L1022.38 1213.9 L1021.8 1213.9 L1021.21 1213.9 L1020.62 1213.9 L1020.04 1213.9 L1019.45 1213.9 L1018.86 1213.9 L1018.28 1213.9 L1017.69 1213.9 L1017.11 1213.9 L1016.52 1213.9 L1015.93 1213.9 L1015.35 1213.9 L1014.76 1213.9 L1014.17 1213.9 L1013.59 1213.9 L1013 1213.9 L1012.41 1213.9 L1011.83 1213.9 L1011.24 1213.9 L1010.65 1213.9 L1010.07 1213.9 L1009.48 1213.9 L1008.9 1213.9 L1008.31 1213.9 L1007.72 1213.9 L1007.14 1213.9 L1006.55 1213.9 L1005.96 1213.9 L1005.38 1213.9 L1004.79 1213.9 L1004.2 1213.9 L1003.62 1213.9 L1003.03 1213.9 L1002.44 1213.9 L1001.86 1213.9 L1001.27 1213.9 L1000.69 1213.9 L1000.1 1213.9 L999.513 1213.9 L998.926 1213.9 L998.34 1213.9 L997.754 1213.9 L997.167 1213.9 L996.581 1213.9 L995.994 1213.9 L995.408 1213.9 L994.822 1213.9 L994.235 1213.9 L993.649 1213.9 L993.062 1213.9 L992.476 1213.9 L991.889 1213.9 L991.303 1213.9 L990.717 1213.9 L990.13 1213.9 L989.544 1213.9 L988.957 1213.9 L988.371 1213.9 L987.785 1213.9 L987.198 1213.9 L986.612 1213.9 L986.025 1213.9  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214 986.612,1214 987.198,1214 987.785,1214 988.371,1214 988.957,1214 989.544,1214 990.13,1214 990.717,1214 991.303,1214 991.889,1214 992.476,1214 993.062,1214 993.649,1214 994.235,1214 994.822,1214 995.408,1214 995.994,1214 996.581,1214 997.167,1214 997.754,1214 998.34,1214 998.926,1214 999.513,1214 1000.1,1214 1000.69,1214 1001.27,1214 1001.86,1214 1002.44,1214 1003.03,1214 1003.62,1214 1004.2,1214 1004.79,1214 1005.38,1214 1005.96,1214 1006.55,1214 1007.14,1214 1007.72,1214 1008.31,1214 1008.9,1214 1009.48,1214 1010.07,1214 1010.65,1214 1011.24,1214 1011.83,1214 1012.41,1214 1013,1214 1013.59,1214 1014.17,1214 1014.76,1214 1015.35,1214 1015.93,1214 1016.52,1214 1017.11,1214 1017.69,1214 1018.28,1214 1018.86,1214 1019.45,1214 1020.04,1214 1020.62,1214 1021.21,1214 1021.8,1214 1022.38,1214 1022.97,1214 1023.56,1214 1024.14,1214 1024.73,1214 1025.32,1214 1025.9,1214 1026.49,1214 1027.07,1214 1027.66,1214 1028.25,1214 1028.83,1214 1029.42,1214 1030.01,1214 1030.59,1214 1031.18,1214 1031.77,1214 1032.35,1214 1032.94,1214 1033.52,1214 1034.11,1214 1034.7,1214 1035.28,1214 1035.87,1214 1036.46,1214 1037.04,1214 1037.63,1214 1038.22,1214 1038.8,1214 1039.39,1214 1039.98,1214 1040.56,1214 1041.15,1214 1041.73,1214 1042.32,1214 1042.91,1214 1043.49,1214 1044.08,1214 1044.67,1214 1045.25,1214 1045.84,1214 1046.43,1214 1047.01,1214 1047.6,1214 1048.19,1214 1048.77,1214 1049.36,1214 1049.94,1214 1050.53,1214 1051.12,1214 1051.7,1214 1052.29,1214 1052.88,1214 1053.46,1214 1054.05,1214 1054.64,1214 1055.22,1214 1055.81,1214 1056.39,1214 1056.98,1214 1057.57,1214 1058.15,1214 1058.74,1214 1059.33,1214 1059.91,1214 1060.5,1214 1061.09,1214 1061.67,1214 1062.26,1214 1062.85,1214 1063.43,1214 1064.02,1214 1064.6,1214 1065.19,1214 1065.78,1214 1066.36,1214 1066.95,1214 1067.54,1214 1068.12,1214 1068.71,1214 1069.3,1214 1069.88,1214 1070.47,1214 1071.06,1214 1071.64,1214 1072.23,1214 1072.81,1214 1073.4,1214 1073.99,1214 1074.57,1214 1075.16,1214 1075.75,1214 1076.33,1214 1076.92,1214 1077.51,1214 1078.09,1214 1078.68,1214 1079.26,1214 1079.85,1214 1080.44,1214 1081.02,1214 1081.61,1214 1082.2,1214 1082.78,1214 1083.37,1214 1083.96,1214 1084.54,1214 1085.13,1214 1085.72,1214 1086.3,1214 1086.89,1214 1087.47,1214 1088.06,1214 1088.65,1214 1089.23,1214 1089.82,1214 1090.41,1214 1090.99,1214 1091.58,1214 1092.17,1214 1092.75,1214 1093.34,1214 1093.93,1214 1094.51,1214 1095.1,1214 1095.68,1214 1096.27,1214 1096.86,1214 1097.44,1214 1098.03,1214 1098.62,1214 1099.2,1214 1099.79,1214 1100.38,1214 1100.96,1214 1101.55,1214 1102.14,1214 1102.72,1214 1103.31,1214 1103.89,1214 1104.48,1214 1105.07,1214 1105.65,1214 1106.24,1214 1106.83,1214 1107.41,1214 1108,1214 1108.59,1214 1109.17,1214 1109.76,1214 1110.34,1214 1110.93,1214 1111.52,1214 1112.1,1214 1112.69,1214 1113.28,1214 1113.86,1214 1114.45,1214 1115.04,1214 1115.62,1214 1116.21,1214 1116.8,1214 1117.38,1214 1117.97,1214 1118.55,1214 1119.14,1214 1119.73,1214 1120.31,1214 1120.9,1214 1121.49,1214 1122.07,1214 1122.66,1214 1123.25,1214 1123.83,1214 1124.42,1214 1125.01,1214 1125.59,1214 1126.18,1214 1126.76,1214 1127.35,1214 1127.94,1214 1128.52,1214 1129.11,1214 1129.7,1214 1130.28,1214 1130.87,1214 1131.46,1214 1132.04,1214 1132.63,1214 1133.21,1214 1133.8,1214 1134.39,1214 1134.97,1214 1135.56,1214 1136.15,1214 1136.73,1214 1137.32,1214 1137.91,1214 1138.49,1214 1139.08,1214 1139.67,1214 1140.25,1214 1140.84,1214 1141.42,1214 1142.01,1214 1142.6,1214 1143.18,1214 1143.77,1214 1144.36,1214 1144.94,1214 1145.53,1214 1146.12,1214 1146.7,1214 1147.29,1214 1147.88,1214 1148.46,1214 1149.05,1214 1149.63,1214 1150.22,1214 1150.81,1214 1151.39,1214 1151.98,1214 1152.57,1214 1153.15,1214 1153.74,1214 1154.33,1214 1154.91,1214 1155.5,1214 1156.09,1214 1156.67,1214 1157.26,1214 1157.84,1214 1158.43,1214 1159.02,1214 1159.6,1214 1160.19,1214 1160.78,1214 1161.36,1214 1161.95,1214 1162.54,1214 1163.12,1214 1163.71,1214 1164.29,1214 1164.88,1214 1165.47,1214 1166.05,1214 1166.64,1214 1167.23,1214 1167.81,1214 1168.4,1214 1168.99,1214 1169.57,1214 1170.16,1214 1170.75,1214 1171.33,1214 1171.92,1214 1172.5,1214 1173.09,1214 1173.68,1214 1174.26,1214 1174.85,1214 1175.44,1214 1176.02,1214 1176.61,1214 1177.2,1214 1177.78,1214 1178.37,1214 1178.96,1214 1179.54,1214 1180.13,1214 1180.71,1214 1181.3,1214 1181.89,1214 1182.47,1214 1183.06,1214 1183.65,1214 1184.23,1214 1184.82,1214 1185.41,1214 1185.99,1214 1186.58,1214 1187.16,1214 1187.75,1214 1188.34,1214 1188.92,1214 1189.51,1214 1190.1,1214 1190.68,1214 1191.27,1214 1191.86,1214 1192.44,1214 1193.03,1214 1193.62,1214 1194.2,1214 1194.79,1214 1195.37,1214 1195.96,1214 1196.55,1214 1197.13,1214 1197.72,1214 1198.31,1214 1198.89,1214 1199.48,1214 1200.07,1214 1200.65,1214 1201.24,1214 1201.83,1214 1202.41,1214 1203,1214 1203.58,1214 1204.17,1214 1204.76,1214 1205.34,1214 1205.93,1214 1206.52,1214 1207.1,1214 1207.69,1214 1208.28,1214 1208.86,1214 1209.45,1214 1210.03,1214 1210.62,1214 1211.21,1214 1211.79,1214 1212.38,1214 1212.97,1214 1213.55,1214 1214.14,1214 1214.73,1214 1215.31,1214 1215.9,1214 1216.49,1214 1217.07,1214 1217.66,1214 1218.24,1214 1218.83,1214 1219.42,1214 1220,1214 1220.59,1214 1221.18,1214 1221.76,1214 1222.35,1214 1222.94,1214 1223.52,1214 1224.11,1214 1224.7,1214 1225.28,1214 1225.87,1214 1226.45,1214 1227.04,1214 1227.63,1214 1228.21,1214 1228.8,1214 1229.39,1214 1229.97,1214 1230.56,1214 1231.15,1214 1231.73,1214 1232.32,1214 1232.91,1214 1233.49,1214 1234.08,1214 1234.66,1214 1235.25,1214 1235.84,1214 1236.42,1214 1237.01,1214 1237.6,1214 1238.18,1214 1238.77,1214 1239.36,1214 1239.94,1214 1240.53,1214 1241.11,1214 1241.7,1214 1242.29,1214 1242.87,1214 1243.46,1214 1244.05,1214 1244.63,1214 1245.22,1214 1245.81,1214 1246.39,1214 1246.98,1214 1247.57,1214 1248.15,1214 1248.74,1214 1249.32,1214 1249.91,1214 1250.5,1214 1251.08,1214 1251.67,1214 1252.26,1214 1252.84,1214 1253.43,1214 1254.02,1214 1254.6,1214 1255.19,1214 1255.78,1214 1256.36,1214 1256.95,1214 1257.53,1214 1258.12,1214 1258.71,1214 1259.29,1214 1259.88,1214 1260.47,1214 1261.05,1214 1261.64,1214 1262.23,1214 1262.81,1214 1263.4,1214 1263.98,1214 1264.57,1214 1265.16,1214 1265.74,1214 1266.33,1214 1266.92,1214 1267.5,1214 1268.09,1214 1268.68,1214 1269.26,1214 1269.85,1214 1270.44,1214 1271.02,1214 1271.61,1214 1272.19,1214 1272.78,1214 1273.37,1214 1273.95,1214 1274.54,1214 1275.13,1214 1275.71,1214 1276.3,1214 1276.89,1214 1277.47,1214 1278.06,1214 1278.65,1214 1279.23,1214 1279.82,1214 1280.4,1214 1280.99,1214 1281.58,1214 1282.16,1214 1282.75,1214 1283.34,1214 1283.92,1214 1284.51,1214 1285.1,1214 1285.68,1214 1286.27,1214 1286.86,1214 1287.44,1214 1288.03,1214 1288.61,1214 1289.2,1214 1289.79,1214 1290.37,1214 1290.96,1214 1291.55,1214 1292.13,1214 1292.72,1214 1293.31,1214 1293.89,1214 1294.48,1214 1295.06,1214 1295.65,1214 1296.24,1214 1296.82,1214 1297.41,1214 1298,1214 1298.58,1214 1299.17,1214 1299.76,1214 1300.34,1214 1300.93,1214 1301.52,1214 1302.1,1214 1302.69,1214 1303.27,1214 1303.86,1214 1304.45,1214 1305.03,1214 1305.62,1214 1306.21,1214 1306.79,1214 1307.38,1214 1307.97,1214 1308.55,1214 1309.14,1214 1309.73,1214 1310.31,1214 1310.9,1214 1311.48,1214 1312.07,1214 1312.66,1214 1313.24,1214 1313.83,1214 1314.42,1214 1315,1214 1315.59,1214 1316.18,1214 1316.76,1214 1317.35,1214 1317.93,1214 1318.52,1214 1319.11,1214 1319.69,1214 1320.28,1214 1320.87,1214 1321.45,1214 1322.04,1214 1322.63,1214 1323.21,1214 1323.8,1214 1324.39,1214 1324.97,1214 1325.56,1214 1326.14,1214 1326.73,1214 1327.32,1214 1327.9,1214 1328.49,1214 1329.08,1214 1329.66,1214 1330.25,1214 1330.84,1214 1331.42,1214 1332.01,1214 1332.6,1214 1333.18,1214 1333.77,1214 1334.35,1214 1334.94,1214 1335.53,1214 1336.11,1214 1336.7,1214 1337.29,1214 1337.87,1214 1338.46,1214 1339.05,1214 1339.63,1214 1340.22,1214 1340.8,1214 1341.39,1214 1341.98,1214 1342.56,1214 1343.15,1214 1343.74,1214 1344.32,1214 1344.91,1214 1345.5,1214 1346.08,1214 1346.67,1214 1347.26,1214 1347.84,1214 1348.43,1214 1349.01,1214 1349.6,1214 1350.19,1214 1350.77,1214 1351.36,1214 1351.95,1214 1352.53,1214 1353.12,1214 1353.71,1214 1354.29,1214 1354.88,1214 1355.47,1214 1356.05,1214 1356.64,1214 1357.22,1214 1357.81,1214 1358.4,1214 1358.98,1214 1359.57,1214 1360.16,1214 1360.74,1214 1361.33,1214 1361.92,1214 1362.5,1214 1363.09,1214 1363.68,1214 1364.26,1214 1364.85,1214 1365.43,1214 1366.02,1214 1366.61,1214 1367.19,1214 1367.78,1214 1368.37,1214 1368.95,1214 1369.54,1214 1370.13,1214 1370.71,1214 1371.3,1214 1371.88,1214 1372.47,1214 1373.06,1214 1373.64,1214 1374.23,1214 1374.82,1214 1375.4,1214 1375.99,1214 1376.58,1214 1377.16,1214 1377.75,1214 1378.34,1214 1378.92,1214 1379.51,1214 1380.09,1214 1380.68,1214 1381.27,1214 1381.85,1214 1382.44,1214 1383.03,1214 1383.61,1214 1384.2,1214 1384.79,1214 1385.37,1214 1385.96,1214 1386.55,1214 1387.13,1214 1387.72,1214 1388.3,1214 1388.89,1214 1389.48,1214 1390.06,1214 1390.65,1214 1391.24,1214 1391.82,1214 1392.41,1214 1393,1214 1393.58,1214 1394.17,1214 1394.75,1214 1395.34,1214 1395.93,1214 1396.51,1214 1397.1,1214 1397.69,1214 1398.27,1214 1398.86,1214 1399.45,1214 1400.03,1214 1400.62,1214 1401.21,1214 1401.79,1214 1402.38,1214 1402.96,1214 1403.55,1214 1404.14,1214 1404.72,1214 1405.31,1214 1405.9,1214 1406.48,1214 1407.07,1214 1407.66,1214 1408.24,1214 1408.83,1214 1409.42,1214 1410,1214 1410.59,1214 1411.17,1214 1411.76,1214 1412.35,1214 1412.93,1214 1413.52,1214 1414.11,1214 1414.69,1214 1415.28,1214 1415.87,1214 1416.45,1214 1417.04,1214 1417.63,1214 1418.21,1214 1418.8,1214 1419.38,1214 1419.97,1214 1420.56,1214 1421.14,1214 1421.73,1214 1422.32,1214 1422.9,1214 1423.49,1214 1424.08,1214 1424.66,1214 1425.25,1214 1425.83,1214 1426.42,1214 1427.01,1214 1427.59,1214 1428.18,1214 1428.77,1214 1429.35,1214 1429.94,1214 1430.53,1214 1431.11,1214 1431.7,1214 1432.29,1214 1432.87,1214 1433.46,1214 1434.04,1214 1434.63,1214 1435.22,1214 1435.8,1214 1436.39,1214 1436.98,1214 1437.56,1214 1438.15,1214 1438.74,1214 1439.32,1214 1439.91,1214 1440.5,1214 1441.08,1214 1441.67,1214 1442.25,1214 1442.84,1214 1443.43,1214 1444.01,1214 1444.6,1214 1445.19,1214 1445.77,1214 1446.36,1214 1446.95,1214 1447.53,1214 1448.12,1214 1448.7,1214 1449.29,1214 1449.88,1214 1450.46,1214 1451.05,1214 1451.64,1214 1452.22,1214 1452.81,1214 1453.4,1214 1453.98,1214 1454.57,1214 1455.16,1214 1455.74,1214 1456.33,1214 1456.91,1214 1457.5,1214 1458.09,1214 1458.67,1214 1459.26,1214 1459.85,1214 1460.43,1214 1461.02,1214 1461.61,1214 1462.19,1214 1462.78,1214 1463.37,1214 1463.95,1214 1464.54,1214 1465.12,1214 1465.71,1214 1466.3,1214 1466.88,1214 1467.47,1214 1468.06,1214 1468.64,1214 1469.23,1214 1469.82,1214 1470.4,1214 1470.99,1214 1471.57,1214 1472.16,1214 1472.75,1214 1473.33,1214 1473.92,1214 1474.51,1214 1475.09,1214 1475.68,1214 1476.27,1214 1476.85,1214 1477.44,1214 1478.03,1214 1478.61,1214 1479.2,1214 1479.78,1214 1480.37,1214 1480.96,1214 1481.54,1214 1482.13,1214 1482.72,1214 1483.3,1214 1483.89,1214 1484.48,1214 1485.06,1214 1485.65,1214 1486.24,1214 1486.82,1214 1487.41,1214 1487.99,1214 1488.58,1214 1489.17,1214 1489.75,1214 1490.34,1214 1490.93,1214 1491.51,1214 1492.1,1214 1492.69,1214 1493.27,1214 1493.86,1214 1494.45,1214 1495.03,1214 1495.62,1214 1496.2,1214 1496.79,1214 1497.38,1214 1497.96,1214 1498.55,1214 1499.14,1214 1499.72,1214 1500.31,1214 1500.9,1214 1501.48,1214 1502.07,1214 1502.65,1214 1503.24,1214 1503.83,1214 1504.41,1214 1505,1214 1505.59,1214 1506.17,1214 1506.76,1214 1507.35,1214 1507.93,1214 1508.52,1214 1509.11,1214 1509.69,1214 1510.28,1214 1510.86,1214 1511.45,1214 1512.04,1214 1512.62,1214 1513.21,1214 1513.8,1214 1514.38,1214 1514.97,1214 1515.56,1214 1516.14,1214 1516.73,1214 1517.32,1214 1517.9,1214 1518.49,1214 1519.07,1214 1519.66,1214 1520.25,1214 1520.83,1214 1521.42,1214 1522.01,1214 1522.59,1214 1523.18,1214 1523.77,1214 1524.35,1214 1524.94,1214 1525.52,1214 1526.11,1214 1526.7,1214 1527.28,1214 1527.87,1214 1528.46,1214 1529.04,1214 1529.63,1214 1530.22,1214 1530.8,1214 1531.39,1214 1531.98,1214 1532.56,1214 1533.15,1214 1533.73,1214 1534.32,1214 1534.91,1214 1535.49,1214 1536.08,1214 1536.67,1214 1537.25,1214 1537.84,1214 1538.43,1214 1539.01,1214 1539.6,1214 1540.19,1214 1540.77,1214 1541.36,1214 1541.94,1214 1542.53,1214 1543.12,1214 1543.7,1214 1544.29,1214 1544.88,1214 1545.46,1214 1546.05,1214 1546.64,1214 1547.22,1214 1547.81,1214 1548.4,1214 1548.98,1214 1549.57,1214 1550.15,1214 1550.74,1214 1551.33,1214 1551.91,1214 1552.5,1214 1553.09,1214 1553.67,1214 1554.26,1214 1554.85,1214 1555.43,1214 1556.02,1214 1556.6,1214 1557.19,1214 1557.78,1214 1558.36,1214 1558.95,1214 1559.54,1214 1560.12,1214 1560.71,1214 1561.3,1214 1561.88,1214 1562.47,1214 1563.06,1214 1563.64,1214 1564.23,1214 1564.81,1214 1565.4,1214 1565.99,1214 1566.57,1214 1567.16,1214 1567.75,1214 1568.33,1214 1568.92,1214 1569.51,1214 1570.09,1214 1570.68,1214 1571.27,1214 1571.85,1214 1572.44,1214 1573.02,1214 1573.61,1214 1574.2,1214 1574.78,1214 1575.37,1214 1575.96,1214 1576.54,1214 1577.13,1214 1577.72,1214 1578.3,1214 1578.89,1214 1579.47,1214 1580.06,1214 1580.65,1214 1581.23,1214 1581.82,1214 1582.41,1214 1582.99,1214 1583.58,1214 1584.17,1214 1584.75,1214 1585.34,1214 1585.93,1214 1586.51,1214 1587.1,1214 1587.68,1214 1588.27,1214 1588.86,1214 1589.44,1214 1590.03,1214 1590.62,1214 1591.2,1214 1591.79,1214 1592.38,1214 1592.96,1214 1593.55,1214 1594.14,1214 1594.72,1214 1595.31,1214 1595.89,1214 1596.48,1214 1597.07,1214 1597.65,1214 1598.24,1214 1598.83,1214 1599.41,1214 1600,1214 1600.59,1214 1601.17,1214 1601.76,1214 1602.34,1214 1602.93,1214 1603.52,1214 1604.1,1214 1604.69,1214 1605.28,1214 1605.86,1214 1606.45,1214 1607.04,1214 1607.62,1214 1608.21,1214 1608.8,1214 1609.38,1214 1609.97,1214 1610.55,1214 1611.14,1214 1611.73,1214 1612.31,1214 1612.9,1214 1613.49,1214 1614.07,1214 1614.66,1214 1615.25,1214 1615.83,1214 1616.42,1214 1617.01,1214 1617.59,1214 1618.18,1214 1618.76,1214 1619.35,1214 1619.94,1214 1620.52,1214 1621.11,1214 1621.7,1214 1622.28,1214 1622.87,1214 1623.46,1214 1624.04,1214 1624.63,1214 1625.22,1214 1625.8,1214 1626.39,1214 1626.97,1214 1627.56,1214 1628.15,1214 1628.73,1214 1629.32,1214 1629.91,1214 1630.49,1214 1631.08,1214 1631.67,1214 1632.25,1214 1632.84,1214 1633.42,1214 1634.01,1214 1634.6,1214 1635.18,1214 1635.77,1214 1636.36,1214 1636.94,1214 1637.53,1214 1638.12,1214 1638.7,1214 1639.29,1214 1639.88,1214 1640.46,1214 1641.05,1214 1641.63,1214 1642.22,1214 1642.81,1214 1643.39,1214 1643.98,1214 1644.57,1214 1645.15,1214 1645.74,1214 1646.33,1214 1646.91,1214 1647.5,1214 1648.09,1214 1648.67,1214 1649.26,1214 1649.84,1214 1650.43,1214 1651.02,1214 1651.6,1214 1652.19,1214 1652.78,1214 1653.36,1214 1653.95,1214 1654.54,1214 1655.12,1214 1655.71,1214 1656.29,1214 1656.88,1214 1657.47,1214 1658.05,1214 1658.64,1214 1659.23,1214 1659.81,1214 1660.4,1214 1660.99,1214 1661.57,1214 1662.16,1214 1662.75,1214 1663.33,1214 1663.92,1214 1664.5,1214 1665.09,1214 1665.68,1214 1666.26,1214 1666.85,1214 1667.44,1214 1668.02,1214 1668.61,1214 1669.2,1214 1669.78,1214 1670.37,1214 1670.96,1214 1671.54,1214 1672.13,1214 1672.71,1214 1673.3,1214 1673.89,1214 1674.47,1214 1675.06,1214 1675.65,1214 1676.23,1214 1676.82,1214 1677.41,1214 1677.99,1214 1678.58,1214 1679.17,1214 1679.75,1214 1680.34,1214 1680.92,1214 1681.51,1214 1682.1,1214 1682.68,1214 1683.27,1214 1683.86,1214 1684.44,1214 1685.03,1214 1685.62,1214 1686.2,1214 1686.79,1214 1687.37,1214 1687.96,1214 1688.55,1214 1689.13,1214 1689.72,1214 1690.31,1214 1690.89,1214 1691.48,1214 1692.07,1214 1692.65,1214 1693.24,1214 1693.83,1214 1694.41,1214 1695,1214 1695.58,1214 1696.17,1214 1696.76,1214 1697.34,1214 1697.93,1214 1698.52,1214 1699.1,1214 1699.69,1214 1700.28,1214 1700.86,1214 1701.45,1214 1702.04,1214 1702.62,1214 1703.21,1214 1703.79,1214 1704.38,1214 1704.97,1214 1705.55,1214 1706.14,1214 1706.73,1214 1707.31,1214 1707.9,1214 1708.49,1214 1709.07,1214 1709.66,1214 1710.24,1214 1710.83,1214 1711.42,1214 1712,1214 1712.59,1214 1713.18,1214 1713.76,1214 1714.35,1214 1714.94,1214 1715.52,1214 1716.11,1214 1716.7,1214 1717.28,1214 1717.87,1214 1718.45,1214 1719.04,1214 1719.63,1214 1720.21,1214 1720.8,1214 1721.39,1214 1721.97,1214 1722.56,1214 1723.15,1214 1723.73,1214 1724.32,1214 1724.91,1214 1725.49,1214 1726.08,1214 1726.66,1214 1727.25,1214 1727.84,1214 1728.42,1214 1729.01,1214 1729.6,1214 1730.18,1214 1730.77,1214 1731.36,1214 1731.94,1214 1732.53,1214 1733.11,1214 1733.7,1214 1734.29,1214 1734.87,1214 1735.46,1214 1736.05,1214 1736.63,1214 1737.22,1214 1737.81,1214 1738.39,1214 1738.98,1214 1739.57,1214 1740.15,1214 1740.74,1214 1741.32,1214 1741.91,1214 1742.5,1214 1743.08,1214 1743.67,1214 1744.26,1214 1744.84,1214 1745.43,1214 1746.02,1214 1746.6,1214 1747.19,1214 1747.78,1214 1748.36,1214 1748.95,1214 1749.53,1214 1750.12,1214 1750.71,1214 1751.29,1214 1751.88,1214 1752.47,1214 1753.05,1214 1753.64,1214 1754.23,1214 1754.81,1214 1755.4,1214 1755.99,1214 1756.57,1214 1757.16,1214 1757.74,1214 1758.33,1214 1758.92,1214 1759.5,1214 1760.09,1214 1760.68,1214 1761.26,1214 1761.85,1214 1762.44,1214 1763.02,1214 1763.61,1214 1764.19,1214 1764.78,1214 1765.37,1214 1765.95,1214 1766.54,1214 1767.13,1214 1767.71,1214 1768.3,1214 1768.89,1214 1769.47,1214 1770.06,1214 1770.65,1214 1771.23,1214 1771.82,1214 1772.4,1214 1772.99,1214 1773.58,1214 1774.16,1214 1774.75,1214 1775.34,1214 1775.92,1214 1776.51,1214 1777.1,1214 1777.68,1214 1778.27,1214 1778.86,1214 1779.44,1214 1780.03,1214 1780.61,1214 1781.2,1214 1781.79,1214 1782.37,1214 1782.96,1214 1783.55,1214 1784.13,1214 1784.72,1214 1785.31,1214 1785.89,1214 1786.48,1214 1787.06,1214 1787.65,1214 1788.24,1214 1788.82,1214 1789.41,1214 1790,1214 1790.58,1214 1791.17,1214 1791.76,1214 1792.34,1214 1792.93,1214 1793.52,1214 1794.1,1214 1794.69,1214 1795.27,1214 1795.86,1214 1796.45,1214 1797.03,1214 1797.62,1214 1798.21,1214 1798.79,1214 1799.38,1214 1799.97,1214 1800.55,1214 1801.14,1214 1801.73,1214 1802.31,1214 1802.9,1214 1803.48,1214 1804.07,1214 1804.66,1214 1805.24,1214 1805.83,1214 1806.42,1214 1807,1214 1807.59,1214 1808.18,1214 1808.76,1214 1809.35,1214 1809.94,1214 1810.52,1214 1811.11,1214 1811.69,1214 1812.28,1214 1812.87,1214 1813.45,1214 1814.04,1214 1814.63,1214 1815.21,1214 1815.8,1214 1816.39,1214 1816.97,1214 1817.56,1214 1818.14,1214 1818.73,1214 1819.32,1214 1819.9,1214 1820.49,1214 1821.08,1214 1821.66,1214 1822.25,1214 1822.84,1214 1823.42,1214 1824.01,1214 1824.6,1214 1825.18,1214 1825.77,1214 1826.35,1214 1826.94,1214 1827.53,1214 1828.11,1214 1828.7,1214 1829.29,1214 1829.87,1214 1830.46,1214 1831.05,1214 1831.63,1214 1832.22,1214 1832.81,1214 1833.39,1214 1833.98,1214 1834.56,1214 1835.15,1214 1835.74,1214 1836.32,1214 1836.91,1214 1837.5,1214 1838.08,1214 1838.67,1214 1839.26,1214 1839.84,1214 1840.43,1214 1841.01,1214 1841.6,1214 1842.19,1214 1842.77,1214 1843.36,1214 1843.95,1214 1844.53,1214 1845.12,1214 1845.71,1214 1846.29,1214 1846.88,1214 1847.47,1214 1848.05,1214 1848.64,1214 1849.22,1214 1849.81,1214 1850.4,1214 1850.98,1214 1851.57,1214 1852.16,1214 1852.74,1214 1853.33,1214 1853.92,1214 1854.5,1214 1855.09,1214 1855.68,1214 1856.26,1214 1856.85,1214 1857.43,1214 1858.02,1214 1858.61,1214 1859.19,1214 1859.78,1214 1860.37,1214 1860.95,1214 1861.54,1214 1862.13,1214 1862.71,1214 1863.3,1214 1863.88,1214 1864.47,1214 1865.06,1214 1865.64,1214 1866.23,1214 1866.82,1214 1867.4,1214 1867.99,1214 1868.58,1214 1869.16,1214 1869.75,1214 1870.34,1214 1870.92,1214 1871.51,1214 1872.09,1214 1872.68,1214 1873.27,1214 1873.85,1214 1874.44,1214 1875.03,1214 1875.61,1214 1876.2,1214 1876.79,1214 1877.37,1214 1877.96,1214 1878.55,1214 1879.13,1214 1879.72,1214 1880.3,1214 1880.89,1214 1881.48,1214 1882.06,1214 1882.65,1214 1883.24,1214 1883.82,1214 1884.41,1214 1885,1214 1885.58,1214 1886.17,1214 1886.76,1214 1887.34,1214 1887.93,1214 1888.51,1214 1889.1,1214 1889.69,1214 1890.27,1214 1890.86,1214 1891.45,1214 1892.03,1214 1892.62,1214 1893.21,1214 1893.79,1214 1894.38,1214 1894.96,1214 1895.55,1214 1896.14,1214 1896.72,1214 1897.31,1214 1897.9,1214 1898.48,1214 1899.07,1214 1899.66,1214 1900.24,1214 1900.83,1214 1901.42,1214 1902,1214 1902.59,1214 1903.17,1214 1903.76,1214 1904.35,1214 1904.93,1214 1905.52,1214 1906.11,1214 1906.69,1214 1907.28,1214 1907.87,1214 1908.45,1214 1909.04,1214 1909.63,1214 1910.21,1214 1910.8,1214 1911.38,1214 1911.97,1214 1912.56,1214 1913.14,1214 1913.73,1214 1914.32,1214 1914.9,1214 1915.49,1214 1916.08,1214 1916.66,1214 1917.25,1214 1917.83,1214 1918.42,1214 1919.01,1214 1919.59,1214 1920.18,1214 1920.77,1214 1921.35,1214 1921.94,1214 1922.53,1214 1923.11,1214 1923.7,1214 1924.29,1214 1924.87,1214 1925.46,1214 1926.04,1214 1926.63,1214 1927.22,1214 1927.8,1214 1928.39,1214 1928.98,1214 1929.56,1214 1930.15,1214 1930.74,1214 1931.32,1214 1931.91,1214 1932.5,1214 1933.08,1214 1933.67,1214 1934.25,1214 1934.84,1214 1935.43,1214 1936.01,1214 1936.6,1214 1937.19,1214 1937.77,1214 1938.36,1214 1938.95,1214 1939.53,1214 1940.12,1214 1940.71,1214 1941.29,1214 1941.88,1214 1942.46,1214 1943.05,1214 1943.64,1214 1944.22,1214 1944.81,1214 1945.4,1214 1945.98,1214 1946.57,1214 1947.16,1214 1947.74,1214 1948.33,1214 1948.91,1214 1949.5,1214 1950.09,1214 1950.67,1214 1951.26,1214 1951.85,1214 1952.43,1214 1953.02,1214 1953.61,1214 1954.19,1214 1954.78,1214 1955.37,1214 1955.95,1214 1956.54,1214 1957.12,1214 1957.71,1214 1958.3,1214 1958.88,1214 1959.47,1214 1960.06,1214 1960.64,1214 1961.23,1214 1961.82,1214 1962.4,1214 1962.99,1214 1963.58,1214 1964.16,1214 1964.75,1214 1965.33,1214 1965.92,1214 1966.51,1214 1967.09,1214 1967.68,1214 1968.27,1214 1968.85,1214 1969.44,1214 1970.03,1214 1970.61,1214 1971.2,1214 1971.78,1214 1972.37,1214 1972.96,1214 1973.54,1214 1974.13,1214 1974.72,1214 1975.3,1214 1975.89,1214 1976.48,1214 1977.06,1214 1977.65,1214 1978.24,1214 1978.82,1214 1979.41,1214 1979.99,1214 1980.58,1214 1981.17,1214 1981.75,1214 1982.34,1214 1982.93,1214 1983.51,1214 1984.1,1214 1984.69,1214 1985.27,1214 1985.86,1214 1986.45,1214 1987.03,1214 1987.62,1214 1988.2,1214 1988.79,1214 1989.38,1214 1989.96,1214 1990.55,1214 1991.14,1214 1991.72,1214 1992.31,1214 1992.9,1214 1993.48,1214 1994.07,1214 1994.65,1214 1995.24,1214 1995.83,1214 1996.41,1214 1997,1214 1997.59,1214 1998.17,1214 1998.76,1214 1999.35,1214 1999.93,1214 2000.52,1214 2001.11,1214 2001.69,1214 2002.28,1214 2002.86,1214 2003.45,1214 2004.04,1214 2004.62,1214 2005.21,1214 2005.8,1214 2006.38,1214 2006.97,1214 2007.56,1214 2008.14,1214 2008.73,1214 2009.32,1214 2009.9,1214 2010.49,1214 2011.07,1214 2011.66,1214 2012.25,1214 2012.83,1214 2013.42,1214 2014.01,1214 2014.59,1214 2015.18,1214 2015.77,1214 2016.35,1214 2016.94,1214 2017.53,1214 2018.11,1214 2018.7,1214 2019.28,1214 2019.87,1214 2020.46,1214 2021.04,1214 2021.63,1214 2022.22,1214 2022.8,1214 2023.39,1214 2023.98,1214 2024.56,1214 2025.15,1214 2025.73,1214 2026.32,1214 2026.91,1214 2027.49,1214 2028.08,1214 2028.67,1214 2029.25,1214 2029.84,1214 2030.43,1214 2031.01,1214 2031.6,1214 2032.19,1214 2032.77,1214 2033.36,1214 2033.94,1214 2034.53,1214 2035.12,1214 2035.7,1214 2036.29,1214 2036.88,1214 2037.46,1214 2038.05,1214 2038.64,1214 2039.22,1214 2039.81,1214 2040.4,1214 2040.98,1214 2041.57,1214 2042.15,1214 2042.74,1214 2043.33,1214 2043.91,1214 2044.5,1214 2045.09,1214 2045.67,1214 2046.26,1214 2046.85,1214 2047.43,1214 2048.02,1214 2048.6,1214 2049.19,1214 2049.78,1214 2050.36,1214 2050.95,1214 2051.54,1214 2052.12,1214 2052.71,1214 2053.3,1214 2053.88,1214 2054.47,1214 2055.06,1214 2055.64,1214 2056.23,1214 2056.81,1214 2057.4,1214 2057.99,1214 2058.57,1214 2059.16,1214 2059.75,1214 2060.33,1214 2060.92,1214 2061.51,1214 2062.09,1214 2062.68,1214 2063.27,1214 2063.85,1214 2064.44,1214 2065.02,1214 2065.61,1214 2066.2,1214 2066.78,1214 2067.37,1214 2067.96,1214 2068.54,1214 2069.13,1214 2069.72,1214 2070.3,1214 2070.89,1214 2071.48,1214 2072.06,1214 2072.65,1214 2073.23,1214 2073.82,1214 2074.41,1214 2074.99,1214 2075.58,1214 2076.17,1214 2076.75,1214 2077.34,1214 2077.93,1214 2078.51,1214 2079.1,1214 2079.68,1214 2080.27,1214 2080.86,1214 2081.44,1214 2082.03,1214 2082.62,1214 2083.2,1214 2083.79,1214 2084.38,1214 2084.96,1214 2085.55,1214 2086.14,1214 2086.72,1214 2087.31,1214 2087.89,1214 2088.48,1214 2089.07,1214 2089.65,1214 2090.24,1214 2090.83,1214 2091.41,1214 2092,1214 2092.59,1214 2093.17,1214 2093.76,1214 2094.35,1214 2094.93,1214 2095.52,1214 2096.1,1214 2096.69,1214 2097.28,1214 2097.86,1214 2098.45,1214 2099.04,1214 2099.62,1214 2100.21,1214 2100.8,1214 2101.38,1214 2101.97,1214 2102.55,1214 2103.14,1214 2103.73,1214 2104.31,1214 2104.9,1214 2105.49,1214 2106.07,1214 2106.66,1214 2107.25,1214 2107.83,1214 2108.42,1214 2109.01,1214 2109.59,1214 2110.18,1214 2110.76,1214 2111.35,1214 2111.94,1214 2112.52,1214 2113.11,1214 2113.7,1214 2114.28,1214 2114.87,1214 2115.46,1214 2116.04,1214 2116.63,1214 2117.22,1214 2117.8,1214 2118.39,1214 2118.97,1214 2119.56,1214 2120.15,1214 2120.73,1214 2121.32,1214 2121.91,1214 2122.49,1214 2123.08,1214 2123.67,1214 2124.25,1214 2124.84,1214 2125.42,1214 2126.01,1214 2126.6,1214 2127.18,1214 2127.77,1214 2128.36,1214 2128.94,1214 2129.53,1214 2130.12,1214 2130.7,1214 2131.29,1214 2131.88,1214 2132.46,1214 2133.05,1214 2133.63,1214 2134.22,1214 2134.81,1214 2135.39,1214 2135.98,1214 2136.57,1214 2137.15,1214 2137.74,1214 2138.33,1214 2138.91,1214 2139.5,1214 2140.09,1214 2140.67,1214 2141.26,1214 2141.84,1214 2142.43,1214 2143.02,1214 2143.6,1214 2144.19,1214 2144.78,1214 2145.36,1214 2145.95,1214 2146.54,1214 2147.12,1214 2147.71,1214 2148.3,1214 2148.88,1214 2149.47,1214 2150.05,1214 2150.64,1214 2151.23,1214 2151.81,1214 2152.4,1214 2152.99,1214 2153.57,1214 2154.16,1214 2154.75,1214 2155.33,1214 2155.92,1214 2156.5,1214 2157.09,1214 2157.68,1214 2158.26,1214 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.26,1198.16 1398.97,899.083 \"/>\n<polyline clip-path=\"url(#clip462)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.43 985.439,1198.16 2158.26,1198.16 2158.26,1229.43 985.439,1229.43 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip463\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip460)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip460)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip460)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip463)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9666.05 167.147,-10234.1 167.706,-10726.2 168.266,-11180.6 168.825,-11583.1 169.384,-11937.2 169.943,-12246 170.503,-12512.5 171.062,-12739.6 171.621,-12929.8 172.18,-13085.7 172.74,-13209.6 173.299,-12762.1 173.858,-12836.7 174.417,-12430.4 174.977,-12050.8 175.536,-12086.9 176.095,-11732 176.655,-11407.9 177.214,-11100.7 177.773,-11087.3 178.332,-11067.8 178.892,-11020.8 179.451,-10974.8 180.01,-10449.4 180.569,-10363.6 181.129,-10069.4 181.688,-9970.93 182.247,-9856.82 182.806,-9739.24 183.366,-9606.92 183.925,-9465.44 184.484,-9178.58 185.043,-8904.58 185.603,-8651.3 186.162,-8283.8 186.721,-8136.74 187.28,-7867.88 187.84,-7727.52 188.399,-7294.95 188.958,-7066.31 189.517,-6924.58 190.077,-6784.38 190.636,-6556.57 191.195,-6414.78 191.754,-6287.95 192.314,-6077.6 192.873,-5674.58 193.432,-5417.62 193.991,-5233.55 194.551,-5054.42 195.11,-4764.4 195.669,-4603.54 196.228,-4381.85 196.788,-4183.57 197.347,-4040.72 197.906,-3899.74 198.465,-3765.52 199.025,-3637.93 199.584,-3508.48 200.143,-3422.18 200.702,-3128.66 201.262,-2978.71 201.821,-2906.38 202.38,-2797.28 202.939,-2690.86 203.499,-2585.84 204.058,-2339 204.617,-2248.15 205.176,-2189.22 205.736,-2095.87 206.295,-1971.19 206.854,-1848.7 207.413,-1766.1 207.973,-1711.19 208.532,-1658.31 209.091,-1514.48 209.65,-1439.3 210.21,-1363.91 210.769,-1315.59 211.328,-1208.58 211.887,-1162.13 212.447,-1064.76 213.006,-917.451 213.565,-882.721 214.124,-847.803 214.684,-809.978 215.243,-722.674 215.802,-664.401 216.361,-630.113 216.921,-573.209 217.48,-515.959 218.039,-410.605 218.598,-354.508 219.158,-301.11 219.717,-274.916 220.276,-221.951 220.835,-149.619 221.395,-121.321 221.954,-51.7238 222.513,13.4562 223.072,73.7341 223.632,90.3136 224.191,86.3542 224.75,128.322 225.309,210.47 225.869,269.267 226.428,304.216 226.987,378.758 227.546,389.748 228.106,442.467 228.665,487.231 229.224,494.663 229.783,501.551 230.343,584.979 230.902,587.707 231.461,607.419 232.02,585.704 232.58,589.047 233.139,633.459 233.698,715.859 234.257,699.864 234.817,739.741 235.376,755.607 235.935,779.754 236.494,814.951 237.054,812.844 237.613,848.626 238.172,861.275 238.731,894.52 239.291,892.115 239.85,906.421 240.409,941.219 240.968,957.815 241.528,952.506 242.087,968.859 242.646,1000.23 243.205,1010.78 243.765,984.995 244.324,960.274 244.883,1011.11 245.442,1019.99 246.002,994.546 246.561,994.042 247.12,1007.59 247.679,1018.4 248.239,995.378 248.798,994.649 249.357,974.026 249.916,968.17 250.476,1001.71 251.035,997.869 251.594,1014.34 252.153,1028.78 252.713,1038.39 253.272,1033.42 253.831,1027.08 254.39,984.333 254.95,998.932 255.509,1048.52 256.068,1024.37 256.627,1053.42 257.187,1050.1 257.746,1030.57 258.305,1043.52 258.864,1040.87 259.424,1052.97 259.983,1028.81 260.542,1026.84 261.101,1038.62 261.661,1001.11 262.22,1014.43 262.779,1050.12 263.338,1066.08 263.898,1095.73 264.457,1088.77 265.016,1082.1 265.575,1075.61 266.135,1090.06 266.694,1099.38 267.253,1073.94 267.812,1087.27 268.372,1081.1 268.931,1073.41 269.49,1064.45 270.049,1057.9 270.609,1069.67 271.168,1083.46 271.727,1109.94 272.286,1122.99 272.846,1096.84 273.405,1141.78 273.964,1130.29 274.523,1153.25 275.083,1144.26 275.642,1153.37 276.201,1127.25 276.76,1136.53 277.32,1146.96 277.879,1156.89 278.438,1151.3 278.997,1140.62 279.557,1112.47 280.116,1139.75 280.675,1163.27 281.234,1113.04 281.794,1102.28 282.353,1193.93 282.912,1179.05 283.471,1132.62 284.031,1154.6 284.59,1163.48 285.149,1153.85 285.708,1176.65 286.268,1181.54 286.827,1150.82 287.386,1139.71 287.945,1165.37 288.505,1136.05 289.064,1144.73 289.623,1132.04 290.182,1122.7 290.742,1146.77 291.301,1152.89 291.86,1139.94 292.419,1145.83 292.979,1137.04 293.538,1142.95 294.097,1133.32 294.656,1157.18 295.216,1145.79 295.775,1131.76 296.334,1152.57 296.893,1143.59 297.453,1130.62 298.012,1121.99 298.571,1115.23 299.13,1156.9 299.69,1142.7 300.249,1131.89 300.808,1152.1 301.368,1140.72 301.927,1159 302.486,1164.25 303.045,1168.92 303.605,1171.52 304.164,1159.36 304.723,1145.46 305.282,1151.34 305.842,1154.98 306.401,1138.17 306.96,1092.86 307.519,1079.95 308.079,1067.63 308.638,1044.09 309.197,1033.83 309.756,993.941 310.316,1037.69 310.875,1036.17 311.434,1046.99 311.993,1020.87 312.553,995.438 313.112,975.671 313.671,971.513 314.23,951.103 314.79,915.919 315.349,929.02 315.908,940.733 316.467,888.554 317.027,901.522 317.586,997.36 318.145,977.117 318.704,986.938 319.264,949.546 319.823,928.116 320.382,923.742 320.941,969.29 321.501,978.976 322.06,957.468 322.619,951.241 323.178,997.004 323.738,1021.85 324.297,996.882 324.856,938.451 325.415,937.26 325.975,933.386 326.534,947.661 327.093,959.549 327.652,953.92 328.212,951.412 328.771,929.483 329.33,945.159 329.889,943.727 330.449,904.002 331.008,884.966 331.567,916.336 332.126,898.352 332.686,878.305 333.245,894.875 333.804,893.638 334.363,909.441 334.923,904.801 335.482,915.18 336.041,893.557 336.6,909.418 337.16,924.009 337.719,940.418 338.278,935.838 338.837,979.191 339.397,972.302 339.956,966.473 340.515,975.112 341.074,1031.27 341.634,1035.34 342.193,1009.63 342.752,1015.78 343.311,1019.18 343.871,1022.02 344.43,1016.42 344.989,1006.81 345.548,1014.08 346.108,1007.36 346.667,1013.34 347.226,1005.59 347.785,1012.76 348.345,1005.78 348.904,963.926 349.463,944.245 350.022,954.474 350.582,944.781 351.141,908.711 351.7,904.22 352.259,901.867 352.819,932.555 353.378,924.778 353.937,901.919 354.496,881.036 355.056,894.277 355.615,908.594 356.174,906.851 356.733,918.669 357.293,916.191 357.852,911.897 358.411,924.026 358.97,937.734 359.53,932.96 360.089,941.82 360.648,951.774 361.207,945.528 361.767,939.095 362.326,919.112 362.885,900.676 363.444,898.011 364.004,910.904 364.563,906.127 365.122,934.59 365.681,895.949 366.241,907.506 366.8,904.764 367.359,919.771 367.918,900.843 368.478,915.805 369.037,912.095 369.596,888.335 370.155,901.942 370.715,900.89 371.274,913.232 371.833,906.294 372.392,884.532 372.952,864.015 373.511,873.609 374.07,820.471 374.629,821.368 375.189,820.788 375.748,818.846 376.307,815.718 376.866,817.404 377.426,816.287 377.985,815.93 378.544,783.012 379.103,832.885 379.663,818.119 380.222,803.307 380.781,834.248 381.34,829.721 381.9,826.638 382.459,842.465 383.018,826.204 383.577,841.962 384.137,839.329 384.696,789.959 385.255,802.157 385.814,787.982 386.374,788.952 386.933,818.89 387.492,821.235 388.051,837.881 388.611,855.135 389.17,838.116 389.729,835.288 390.288,819.426 390.848,818.624 391.407,798.529 391.966,845.679 392.525,859.033 393.085,805.679 393.644,821.718 394.203,851.328 394.762,847.722 395.322,861.112 395.881,856.797 396.44,839.49 396.999,822.275 397.559,834.733 398.118,847.356 398.677,845.974 399.236,859.167 399.796,854.188 400.355,851.854 400.914,849.793 401.473,828.765 402.033,807.8 402.592,759.269 403.151,777.448 403.71,811.357 404.27,807.285 404.829,794.384 405.388,792.145 405.947,773.624 406.507,774.619 407.066,774.193 407.625,773.77 408.184,807.685 408.744,788.984 409.303,819.83 409.862,804.02 410.421,833.357 410.981,830.946 411.54,813.146 412.099,827.04 412.658,841.135 413.218,786.404 413.777,784.994 414.336,835.434 414.895,815.932 415.455,830.819 416.014,826.075 416.573,826.382 417.132,791.649 417.692,790.307 418.251,778.061 418.81,779.807 419.369,779.923 419.929,762.372 420.488,793.224 421.047,808.044 421.606,786.784 422.166,801.901 422.725,830.721 423.284,810.379 423.843,807.579 424.403,823.881 424.962,823.539 425.521,822.923 426.08,804.313 426.64,786.416 427.199,802.405 427.758,815.491 428.318,814.825 428.877,764.213 429.436,813.941 429.995,815.11 430.555,816.999 431.114,816.458 431.673,814.928 432.232,842.122 432.792,854.112 433.351,847.965 433.91,827.135 434.469,855.859 435.029,851.925 435.588,862.439 436.147,841.988 436.706,804.04 437.266,789.365 437.825,738.296 438.384,721.919 438.943,710.807 439.503,714.853 440.062,700.653 440.621,703.52 441.18,708.402 441.74,709.343 442.299,729.478 442.858,715.812 443.417,686.814 443.977,708.238 444.536,708.134 445.095,710.108 445.654,727.469 446.214,712.874 446.773,729.116 447.332,715.137 447.891,749.358 448.451,735.61 449.01,738.843 449.569,742.447 450.128,725.554 450.688,709.741 451.247,696.651 451.806,701.736 452.365,704.64 452.925,723.807 453.484,693.715 454.043,697.247 454.602,713.157 455.162,715.064 455.721,720.257 456.28,720.459 456.839,721.459 457.399,741.802 457.958,725.644 458.517,743.018 459.076,756.104 459.636,755.201 460.195,771.227 460.754,753.498 461.313,754.801 461.873,786.256 462.432,772.192 462.991,785.52 463.55,814.969 464.11,877.852 464.669,887.227 465.228,847.559 465.787,839.348 466.347,833.364 466.906,829.274 467.465,855.518 468.024,848.447 468.584,840.948 469.143,866.5 469.702,858.735 470.261,899.96 470.821,890.537 471.38,851.669 471.939,827.275 472.498,788.578 473.058,755.011 473.617,734.573 474.176,736.237 474.735,735.178 475.295,733.672 475.854,785.722 476.413,801.758 476.972,811.678 477.532,827.398 478.091,859.182 478.65,884.465 479.209,895.049 479.769,903.204 480.328,892.582 480.887,915.386 481.446,907.77 482.006,898.722 482.565,873.739 483.124,882.276 483.683,876.144 484.243,849.11 484.802,761.397 485.361,761.782 485.92,743.987 486.48,730.448 487.039,744.802 487.598,743.873 488.157,726.162 488.717,744.57 489.276,740.117 489.835,757.379 490.394,771.836 490.954,771.016 491.513,751.356 492.072,717.553 492.631,750.379 493.191,735.149 493.75,767 494.309,767.751 494.868,748.877 495.428,714.565 495.987,699.232 496.546,700.636 497.105,687.9 497.665,689.473 498.224,705.939 498.783,708.899 499.342,708.486 499.902,708.836 500.461,727.658 501.02,728.484 501.579,711.204 502.139,713.677 502.698,696.146 503.257,712.982 503.816,728.723 504.376,727.396 504.935,710.704 505.494,715.317 506.053,733.983 506.613,748.891 507.172,746.953 507.731,764.779 508.29,782.762 508.85,784.059 509.409,796.874 509.968,825.223 510.527,806.919 511.087,818.566 511.646,797.606 512.205,826.527 512.764,791.65 513.324,769.69 513.883,783.3 514.442,797.637 515.001,805.95 515.561,802.144 516.12,791.802 516.679,757.142 517.238,774.579 517.798,773.184 518.357,770.551 518.916,753.378 519.475,768.933 520.035,752.661 520.594,737.881 521.153,739.664 521.712,708.223 522.272,697.637 522.831,714.567 523.39,733.761 523.949,731.796 524.509,703.547 525.068,666.853 525.627,688.043 526.186,690.682 526.746,695.926 527.305,701.16 527.864,671.843 528.423,690.701 528.983,692.332 529.542,707.484 530.101,705.959 530.66,709.51 531.22,677.886 531.779,632.677 532.338,654.925 532.897,659.298 533.457,662.353 534.016,667.949 534.575,667.803 535.134,705.762 535.694,720.418 536.253,721.756 536.812,738.577 537.371,724.558 537.931,723.064 538.49,722.608 539.049,725.239 539.608,724.835 540.168,742.05 540.727,822.655 541.286,816.94 541.845,829.191 542.405,823.588 542.964,833.72 543.523,831.61 544.082,813.239 544.642,842.843 545.201,868.573 545.76,875.848 546.319,885.928 546.879,924.048 547.438,947.676 547.997,950.522 548.556,918.743 549.116,890.285 549.675,898.502 550.234,890.195 550.793,898.241 551.353,906.462 551.912,852.8 552.471,845.002 553.031,837.489 553.59,814.106 554.149,836.034 554.708,825.058 555.268,816.336 555.827,841.105 556.386,815.956 556.945,826.714 557.505,802.312 558.064,842.172 558.623,816.524 559.182,869.942 559.742,829.591 560.301,822.129 560.86,816.673 561.419,863.15 561.979,854.59 562.538,811.702 563.097,788.925 563.656,804.381 564.216,818.012 564.775,815.542 565.334,824.193 565.893,821.305 566.453,798.56 567.012,794.296 567.571,788.861 568.13,816.419 568.69,781.97 569.249,823.423 569.808,815.415 570.367,761.684 570.927,760.866 571.486,762.936 572.045,759.222 572.604,737.615 573.164,720.761 573.723,718.728 574.282,733.775 574.841,702.879 575.401,701.56 575.96,685.787 576.519,719.185 577.078,721.984 577.638,725.832 578.197,727.673 578.756,727.53 579.315,724.341 579.875,724.506 580.434,723.65 580.993,729.239 581.552,697.354 582.112,713.23 582.671,714.319 583.23,731.595 583.789,729.942 584.349,731.44 584.908,742.681 585.467,708.966 586.026,722.633 586.586,734.77 587.145,715.265 587.704,731.56 588.263,746.921 588.823,715.447 589.382,712.31 589.941,730.358 590.5,726.978 591.06,726.388 591.619,724.251 592.178,706.531 592.737,672.996 593.297,693.48 593.856,711.641 594.415,681.212 594.974,677.416 595.534,674.993 596.093,678.41 596.652,695.565 597.211,710.808 597.771,760.224 598.33,725.222 598.889,693.489 599.448,712.226 600.008,729.522 600.567,743.439 601.126,738.823 601.685,740.427 602.245,723.717 602.804,755.482 603.363,718.824 603.922,749.581 604.482,747.13 605.041,744.632 605.6,738.913 606.159,787.763 606.719,781.985 607.278,773.218 607.837,766.269 608.396,797.379 608.956,758.246 609.515,741.885 610.074,706.374 610.633,722.257 611.193,742.19 611.752,738.052 612.311,784.011 612.87,780.067 613.43,779.898 613.989,808.434 614.548,787.665 615.107,751.139 615.667,763.777 616.226,713.112 616.785,682.695 617.344,668.803 617.904,637.152 618.463,639.55 619.022,610.58 619.581,616.839 620.141,620.149 620.7,639.641 621.259,622.912 621.818,628.552 622.378,648.779 622.937,620.107 623.496,606.947 624.055,628.422 624.615,648.004 625.174,652.931 625.733,639.064 626.292,636.805 626.852,624.569 627.411,675.295 627.97,661.165 628.529,648.73 629.089,664.29 629.648,666.006 630.207,636.011 630.766,640.324 631.326,631.558 631.885,616.387 632.444,617.088 633.003,640.11 633.563,641.026 634.122,628.316 634.681,644.744 635.24,630.606 635.8,616.33 636.359,572.928 636.918,546.235 637.477,569.769 638.037,559.418 638.596,532.954 639.155,541.815 639.714,566.013 640.274,574.304 640.833,599.137 641.392,619.24 641.951,641.647 642.511,626.445 643.07,631.601 643.629,637.228 644.188,624.669 644.748,612.214 645.307,617.628 645.866,609.203 646.425,618.344 646.985,621.688 647.544,612.51 648.103,635.465 648.662,638.97 649.222,609.697 649.781,598.3 650.34,587.559 650.899,576.43 651.459,550.344 652.018,561.673 652.577,586.379 653.136,558.626 653.696,567.74 654.255,558.396 654.814,582.172 655.373,585.563 655.933,577.059 656.492,550.828 657.051,559.589 657.61,602.99 658.17,639.764 658.729,662.07 659.288,651.298 659.847,655.122 660.407,671.433 660.966,673.329 661.525,673.493 662.084,661.962 662.644,680.634 663.203,663.956 663.762,682.034 664.321,683.119 664.881,683.632 665.44,669.825 665.999,656.398 666.558,659.409 667.118,645.744 667.677,651.066 668.236,622.95 668.795,628.863 669.355,647.716 669.914,616.368 670.473,641.232 671.032,649.059 671.592,617.658 672.151,621.569 672.71,627.982 673.269,616.541 673.829,638.248 674.388,656.922 674.947,662.613 675.506,666.883 676.066,653.191 676.625,655.009 677.184,690.918 677.743,673.649 678.303,642.588 678.862,644.071 679.421,629.557 679.981,634.209 680.54,653.359 681.099,673.15 681.658,738.394 682.218,738.63 682.777,752.037 683.336,764.881 683.895,764.74 684.455,796.434 685.014,773.575 685.573,771.577 686.132,783.047 686.692,793.444 687.251,788.234 687.81,767.254 688.369,761.354 688.929,740.288 689.488,723.448 690.047,707.82 690.606,708.215 691.166,722.262 691.725,703.408 692.284,722.648 692.843,707.894 693.403,740.557 693.962,769.537 694.521,799.191 695.08,809.191 695.64,801.459 696.199,762.945 696.758,759.559 697.317,755.939 697.877,768.405 698.436,783.566 698.995,793.83 699.554,805.573 700.114,782.388 700.673,773.804 701.232,788.78 701.791,767.25 702.351,765.183 702.91,760.133 703.469,755.08 704.028,735.28 704.588,717.133 705.147,711.577 705.706,713.745 706.265,696.709 706.825,662.79 707.384,649.742 707.943,618.486 708.502,653.42 709.062,622.197 709.621,657.445 710.18,662.703 710.739,664.025 711.299,614.387 711.858,633.464 712.417,665.729 712.976,671.258 713.536,689.379 714.095,656.865 714.654,659.708 715.213,676.191 715.773,681.156 716.332,700.929 716.891,701.568 717.45,683.091 718.01,698.183 718.569,682.631 719.128,683.749 719.687,663.278 720.247,651.347 720.806,655.26 721.365,690.899 721.924,686.946 722.484,702.163 723.043,703.355 723.602,733.789 724.161,733.788 724.721,748.808 725.28,728.45 725.839,776.153 726.398,737.771 726.958,719.359 727.517,733.561 728.076,767.067 728.635,781.164 729.195,790.141 729.754,815.004 730.313,813.309 730.872,789.151 731.432,783.384 731.991,778.012 732.55,743.579 733.109,740.445 733.669,737.912 734.228,717.448 734.787,696.683 735.346,697.226 735.906,680.07 736.465,682.093 737.024,699.011 737.583,650.901 738.143,653.433 738.702,674.451 739.261,691.993 739.82,710.255 740.38,737.653 740.939,717.86 741.498,700.239 742.057,717.521 742.617,697.612 743.176,666.766 743.735,648.598 744.294,650.334 744.854,619.973 745.413,640.063 745.972,593.993 746.531,600.424 747.091,603.51 747.65,627.964 748.209,611.951 748.768,613.542 749.328,584.411 749.887,570.904 750.446,593.401 751.005,546.299 751.565,573.847 752.124,600.403 752.683,622.471 753.242,623.331 753.802,626.747 754.361,647.333 754.92,633.068 755.479,601.092 756.039,621.096 756.598,625.294 757.157,662.455 757.716,629.533 758.276,631.315 758.835,653.899 759.394,655.544 759.953,657.642 760.513,676.843 761.072,660.377 761.631,646.083 762.19,678.993 762.75,677.694 763.309,661.145 763.868,660.002 764.427,675.624 764.987,678.735 765.546,679.861 766.105,710.848 766.664,744.982 767.224,740.816 767.783,720.761 768.342,749.723 768.901,746.066 769.461,725.964 770.02,728.231 770.579,759.261 771.138,787.623 771.698,766.834 772.257,762.612 772.816,743.518 773.375,757.547 773.935,783.48 774.494,779.6 775.053,759.258 775.612,754.261 776.172,799.792 776.731,792.108 777.29,770.771 777.849,779.34 778.409,791.374 778.968,800.822 779.527,810.497 780.086,771.776 780.646,748.284 781.205,712.266 781.764,712.62 782.323,679.717 782.883,668.875 783.442,683.996 784.001,666.022 784.56,682.185 785.12,698.402 785.679,715.995 786.238,699.382 786.797,729.148 787.357,743.477 787.916,728.264 788.475,726.782 789.034,708.741 789.594,724.776 790.153,737.589 790.712,752.861 791.271,769.134 791.831,749.775 792.39,767.829 792.949,810.442 793.508,801.426 794.068,796.14 794.627,788.727 795.186,798.838 795.745,780.681 796.305,761.04 796.864,744.838 797.423,755.372 797.982,736.132 798.542,721.795 799.101,689.332 799.66,652.516 800.219,669.534 800.779,670.538 801.338,685.589 801.897,685.302 802.456,652.135 803.016,652.124 803.575,616.29 804.134,653.823 804.693,653.585 805.253,657.604 805.812,642.96 806.371,614.45 806.931,617.631 807.49,638.016 808.049,624.109 808.608,628.47 809.168,633.715 809.727,621.797 810.286,623.415 810.845,673.52 811.405,694.246 811.964,676.853 812.523,693.123 813.082,723.169 813.642,723.129 814.201,704.146 814.76,719.588 815.319,720.675 815.879,718.002 816.438,713.231 816.997,732.392 817.556,712.256 818.116,727.599 818.675,758.324 819.234,751.189 819.793,730.037 820.353,693.713 820.912,679.717 821.471,679.146 822.03,646.094 822.59,679.212 823.149,662.405 823.708,685.226 824.267,671.326 824.827,654.607 825.386,657.479 825.945,657.279 826.504,673.283 827.064,669.904 827.623,734.322 828.182,700.419 828.741,731.391 829.301,747.099 829.86,757.651 830.419,768.749 830.978,734.85 831.538,732.579 832.097,714.594 832.656,681.846 833.215,699.021 833.775,667.451 834.334,651.87 834.893,635.439 835.452,654.574 836.012,675.542 836.571,642.671 837.13,678.184 837.689,680.315 838.249,677.037 838.808,695.099 839.367,728.779 839.926,777.955 840.486,760.08 841.045,756.99 841.604,704.952 842.163,673.949 842.723,690.881 843.282,705.977 843.841,706.089 844.4,720.744 844.96,784.514 845.519,763.484 846.078,772.192 846.637,768.134 847.197,780.955 847.756,748.169 848.315,743.125 848.874,708.256 849.434,723.057 849.993,720.806 850.552,717.418 851.111,718.74 851.671,700.889 852.23,696.332 852.789,695.98 853.348,691.819 853.908,689.75 854.467,657.79 855.026,642.106 855.585,662.034 856.145,650.96 856.704,654.206 857.263,658.873 857.822,674.093 858.382,657.628 858.941,610.033 859.5,630.442 860.059,632.79 860.619,620.659 861.178,636.954 861.737,651.659 862.296,683.404 862.856,699.149 863.415,714.619 863.974,701.257 864.533,671.818 865.093,653.697 865.652,653.663 866.211,640.26 866.77,644 867.33,613.563 867.889,638.854 868.448,642.196 869.007,643.505 869.567,645.921 870.126,635.357 870.685,667.802 871.244,635.711 871.804,636.031 872.363,639.704 872.922,622.473 873.481,625.076 874.041,643.718 874.6,645.728 875.159,694.606 875.718,693.549 876.278,695.678 876.837,695.638 877.396,697.606 877.955,696.544 878.515,698.037 879.074,735.561 879.633,751.61 880.192,749.855 880.752,733.254 881.311,715.127 881.87,731.394 882.429,742.606 882.989,727.473 883.548,770.984 884.107,748.769 884.666,748.104 885.226,729.845 885.785,763.191 886.344,747.275 886.903,763.508 887.463,760.425 888.022,800.744 888.581,780.326 889.14,759.289 889.7,723.227 890.259,706.135 890.818,685.997 891.377,670.627 891.937,721.081 892.496,719.559 893.055,714.567 893.614,711.278 894.174,712.152 894.733,732.092 895.292,729.717 895.851,726.341 896.411,689.933 896.97,657.3 897.529,660.885 898.088,645.257 898.648,650.213 899.207,673.259 899.766,723.48 900.325,722.833 900.885,755.748 901.444,735.386 902.003,750.585 902.562,763.862 903.122,728.426 903.681,708.636 904.24,737.064 904.799,704.758 905.359,737.171 905.918,718.151 906.477,683.067 907.036,668.629 907.596,652.727 908.155,641.217 908.714,660.372 909.273,659.637 909.833,627.375 910.392,618.816 910.951,654.673 911.51,605.265 912.07,608.28 912.629,628.063 913.188,583.979 913.747,588.406 914.307,629.965 914.866,694.758 915.425,695.063 915.984,679.804 916.544,665.601 917.103,665.21 917.662,669.967 918.221,704.199 918.781,671.457 919.34,674.521 919.899,657.651 920.458,674.438 921.018,659.393 921.577,659.959 922.136,649.484 922.695,650.881 923.255,648.98 923.814,651.557 924.373,651.871 924.932,686.676 925.492,655.366 926.051,660.166 926.61,673.492 927.169,675.335 927.729,660.168 928.288,690.609 928.847,691.577 929.406,709.362 929.966,675.606 930.525,690.904 931.084,720.815 931.644,684.357 932.203,682.303 932.762,664.435 933.321,666.196 933.881,666.546 934.44,685.715 934.999,717.753 935.558,697.878 936.118,681.54 936.677,682.238 937.236,666.587 937.795,652.662 938.355,669.92 938.914,667.744 939.473,667.404 940.032,682.994 940.592,682.829 941.151,649.122 941.71,669.682 942.269,689.759 942.829,674.239 943.388,675.202 943.947,674.108 944.506,709.948 945.066,692.131 945.625,725.171 946.184,722.883 946.743,689.143 947.303,688.673 947.862,686.327 948.421,683.417 948.98,682.734 949.54,665.493 950.099,685.266 950.658,703.785 951.217,685.429 951.777,702.903 952.336,687.578 952.895,674.229 953.454,690.113 954.014,672.708 954.573,675.469 955.132,677.297 955.691,710.71 956.251,725.33 956.81,704.194 957.369,687.608 957.928,718.704 958.488,700.738 959.047,667.782 959.606,654.944 960.165,622.775 960.725,644.914 961.284,630.872 961.843,630.802 962.402,634.541 962.962,637.952 963.521,674.264 964.08,708.965 964.639,692.282 965.199,707.843 965.758,706.049 966.317,702.995 966.876,699.809 967.436,654.562 967.995,692.022 968.554,660.212 969.113,644.842 969.673,659.02 970.232,691.518 970.791,657.909 971.35,671.59 971.91,659.065 972.469,675.062 973.028,644.077 973.587,646.848 974.147,669.074 974.706,684.093 975.265,682.848 975.824,670.463 976.384,687.766 976.943,702.787 977.502,703.652 978.061,700.991 978.621,680.46 979.18,683.068 979.739,700.135 980.298,731.249 980.858,712.554 981.417,694.225 981.976,680.037 982.535,648.919 983.095,664.555 983.654,695.393 984.213,694.33 984.772,723.734 985.332,720.493 985.891,749.956 986.45,731.393 987.009,731.458 987.569,710.793 988.128,675.585 988.687,708.359 989.246,705.199 989.806,673.097 990.365,677.885 990.924,726.817 991.483,739.788 992.043,752.364 992.602,732.52 993.161,747.673 993.72,729.629 994.28,712.799 994.839,696.672 995.398,698.821 995.957,716.914 996.517,728.667 997.076,726.166 997.635,723.579 998.194,720.52 998.754,736.335 999.313,746.48 999.872,771.8 1000.43,784.646 1000.99,762.352 1001.55,742.123 1002.11,740.245 1002.67,735.98 1003.23,730.858 1003.79,711.093 1004.35,740.988 1004.91,740.215 1005.46,738.614 1006.02,765.43 1006.58,733.546 1007.14,764.555 1007.7,727.721 1008.26,721.979 1008.82,720.294 1009.38,703.02 1009.94,703.915 1010.5,717.354 1011.06,699.812 1011.62,715.173 1012.18,697.336 1012.73,650.155 1013.29,620.783 1013.85,590.096 1014.41,597.219 1014.97,631.049 1015.53,683.238 1016.09,701.855 1016.65,700.034 1017.21,696.227 1017.77,695.894 1018.33,693.378 1018.89,659.697 1019.45,659.62 1020.01,659.255 1020.56,674.454 1021.12,661.62 1021.68,661.488 1022.24,643.286 1022.8,663.916 1023.36,653.102 1023.92,672.692 1024.48,687.1 1025.04,752.136 1025.6,749.679 1026.16,747.198 1026.72,744.32 1027.28,691.502 1027.83,724.739 1028.39,693.998 1028.95,704.795 1029.51,702.099 1030.07,702.776 1030.63,739.114 1031.19,706.465 1031.75,709.25 1032.31,690.093 1032.87,707.918 1033.43,694.004 1033.99,695.735 1034.55,694.509 1035.1,693.398 1035.66,708.988 1036.22,689.608 1036.78,719.328 1037.34,684.781 1037.9,637.699 1038.46,624.892 1039.02,628.325 1039.58,615.485 1040.14,617.941 1040.7,635.771 1041.26,669.063 1041.82,670.056 1042.38,721.502 1042.93,705.69 1043.49,704.108 1044.05,718.662 1044.61,728.731 1045.17,679.303 1045.73,646.438 1046.29,648.329 1046.85,666.228 1047.41,683.45 1047.97,668.575 1048.53,685.362 1049.09,668.325 1049.65,684.545 1050.2,668.428 1050.76,668.588 1051.32,594.142 1051.88,632.788 1052.44,634.481 1053,672.476 1053.56,674.787 1054.12,737.426 1054.68,767.061 1055.24,750.219 1055.8,747.08 1056.36,761.111 1056.92,776.852 1057.48,771.16 1058.03,764.098 1058.59,743.876 1059.15,757.971 1059.71,770.184 1060.27,718.266 1060.83,685.056 1061.39,687.367 1061.95,686.884 1062.51,703.16 1063.07,687.161 1063.63,686.503 1064.19,685.266 1064.75,651.64 1065.3,653.623 1065.86,656.111 1066.42,671.071 1066.98,705.431 1067.54,688.584 1068.1,653.718 1068.66,669.505 1069.22,667.826 1069.78,684.353 1070.34,669.375 1070.9,683.563 1071.46,699.69 1072.02,684.371 1072.57,699.495 1073.13,699.548 1073.69,715.857 1074.25,699.745 1074.81,716.223 1075.37,697.359 1075.93,696.688 1076.49,649.513 1077.05,669.867 1077.61,682.295 1078.17,683.434 1078.73,668.241 1079.29,650.723 1079.85,652.73 1080.4,653.796 1080.96,670.436 1081.52,657.156 1082.08,661.305 1082.64,696.001 1083.2,708.467 1083.76,706.003 1084.32,722.992 1084.88,720.113 1085.44,718.96 1086,716.158 1086.56,759.783 1087.12,736.34 1087.67,752.176 1088.23,750.266 1088.79,758.702 1089.35,752.178 1089.91,730.816 1090.47,678.275 1091.03,660.544 1091.59,642.393 1092.15,660.713 1092.71,662.444 1093.27,667.105 1093.83,651.533 1094.39,685.339 1094.94,665.281 1095.5,664.368 1096.06,661.028 1096.62,614.698 1097.18,620.729 1097.74,609.7 1098.3,632.381 1098.86,634.778 1099.42,623.555 1099.98,661.646 1100.54,647.686 1101.1,666.088 1101.66,637.39 1102.22,656.527 1102.77,639.283 1103.33,642.652 1103.89,645.443 1104.45,663.126 1105.01,681.403 1105.57,684.09 1106.13,648.863 1106.69,681.854 1107.25,697.769 1107.81,696.232 1108.37,711.387 1108.93,707.746 1109.49,675.943 1110.04,656.127 1110.6,655.772 1111.16,676.334 1111.72,709.565 1112.28,710.192 1112.84,724.955 1113.4,721.919 1113.96,721.464 1114.52,727.101 1115.08,707.293 1115.64,690.486 1116.2,691.257 1116.76,710.788 1117.31,692.809 1117.87,693.927 1118.43,691.19 1118.99,692.228 1119.55,693.352 1120.11,677.785 1120.67,679.21 1121.23,676.167 1121.79,693.685 1122.35,723.75 1122.91,706.295 1123.47,702.243 1124.03,698.637 1124.59,729.156 1125.14,727.061 1125.7,741.234 1126.26,755.053 1126.82,754.188 1127.38,732.11 1127.94,744.657 1128.5,740.845 1129.06,722.925 1129.62,690.356 1130.18,673.138 1130.74,641.944 1131.3,645.179 1131.86,683.789 1132.41,667.952 1132.97,649.952 1133.53,654.531 1134.09,670.081 1134.65,656.692 1135.21,623.222 1135.77,628.856 1136.33,602.635 1136.89,607.487 1137.45,631.174 1138.01,623.063 1138.57,604.645 1139.13,625.051 1139.68,643.814 1140.24,627.388 1140.8,630.554 1141.36,634.592 1141.92,654.108 1142.48,641.076 1143.04,646.565 1143.6,635.207 1144.16,652.152 1144.72,636.537 1145.28,606.642 1145.84,612.647 1146.4,585.388 1146.96,574.394 1147.51,594.118 1148.07,600.476 1148.63,605.785 1149.19,621.607 1149.75,610.32 1150.31,596.634 1150.87,582.412 1151.43,620.663 1151.99,639.205 1152.55,657.702 1153.11,693.204 1153.67,696.416 1154.23,696.067 1154.78,681.351 1155.34,696.045 1155.9,679.619 1156.46,677.256 1157.02,663.774 1157.58,649.925 1158.14,670.901 1158.7,690.731 1159.26,672.942 1159.82,686.929 1160.38,689.173 1160.94,704.216 1161.5,686.914 1162.05,734.108 1162.61,748.42 1163.17,727.711 1163.73,726.999 1164.29,741.186 1164.85,769.398 1165.41,782.149 1165.97,792.405 1166.53,789.647 1167.09,783.377 1167.65,764.769 1168.21,713.258 1168.77,714.195 1169.33,697.699 1169.88,710.241 1170.44,706.92 1171,720.207 1171.56,701.695 1172.12,685.827 1172.68,652.347 1173.24,652.241 1173.8,640.433 1174.36,658.4 1174.92,660.5 1175.48,664.161 1176.04,701.057 1176.6,699.778 1177.15,684.219 1177.71,668.15 1178.27,636.07 1178.83,668.994 1179.39,654.287 1179.95,658.186 1180.51,641.939 1181.07,645.286 1181.63,649.576 1182.19,653.763 1182.75,672.253 1183.31,677.198 1183.87,678.598 1184.43,663.23 1184.98,631.105 1185.54,635.218 1186.1,672.16 1186.66,671.057 1187.22,639.431 1187.78,638.845 1188.34,615.395 1188.9,601.857 1189.46,638.923 1190.02,607.737 1190.58,615.584 1191.14,637.625 1191.7,669.488 1192.25,718.354 1192.81,682.869 1193.37,699.523 1193.93,680.607 1194.49,680.598 1195.05,732.265 1195.61,745.44 1196.17,741.874 1196.73,756.823 1197.29,752.624 1197.85,750.677 1198.41,731.731 1198.97,744.241 1199.52,761.361 1200.08,773.413 1200.64,785.971 1201.2,829.541 1201.76,805.958 1202.32,818.424 1202.88,765.377 1203.44,791.388 1204,801.726 1204.56,813.744 1205.12,805.559 1205.68,798.924 1206.24,854.265 1206.8,847.491 1207.35,820.455 1207.91,782.971 1208.47,775.241 1209.03,739.903 1209.59,786.122 1210.15,751.553 1210.71,717.25 1211.27,729.624 1211.83,710.271 1212.39,737.902 1212.95,768.026 1213.51,759.755 1214.07,768.038 1214.62,809.23 1215.18,770.3 1215.74,780.809 1216.3,793.761 1216.86,803.138 1217.42,794.34 1217.98,770.853 1218.54,800.677 1219.1,794.826 1219.66,774.392 1220.22,769.516 1220.78,781.714 1221.34,794.749 1221.89,771.956 1222.45,770.237 1223.01,731.63 1223.57,726.495 1224.13,710.578 1224.69,709.61 1225.25,692.297 1225.81,708.735 1226.37,688.45 1226.93,705.728 1227.49,669.3 1228.05,700.432 1228.61,715.945 1229.17,713.812 1229.72,709.94 1230.28,706.027 1230.84,704.608 1231.4,689.58 1231.96,704.936 1232.52,720.811 1233.08,715.739 1233.64,679.29 1234.2,645.498 1234.76,679.645 1235.32,677.082 1235.88,659.875 1236.44,627.634 1236.99,614.782 1237.55,604.244 1238.11,608.941 1238.67,626.57 1239.23,629.348 1239.79,631.382 1240.35,647.367 1240.91,619.355 1241.47,609.718 1242.03,597.461 1242.59,618.074 1243.15,636.634 1243.71,638.919 1244.26,629.183 1244.82,644.706 1245.38,648.686 1245.94,601.111 1246.5,587.466 1247.06,562.292 1247.62,585.004 1248.18,571.827 1248.74,578.991 1249.3,565.451 1249.86,571.884 1250.42,574.998 1250.98,560.189 1251.54,563.637 1252.09,586.759 1252.65,626.922 1253.21,628.924 1253.77,633.047 1254.33,653.961 1254.89,624.541 1255.45,596.727 1256.01,621.773 1256.57,673.784 1257.13,672.47 1257.69,654.639 1258.25,706.495 1258.81,722.351 1259.36,719.58 1259.92,718.033 1260.48,685.727 1261.04,683.708 1261.6,687.001 1262.16,690.114 1262.72,674.981 1263.28,657.026 1263.84,676.756 1264.4,709.905 1264.96,741.446 1265.52,720.548 1266.08,749.043 1266.63,728.608 1267.19,695.008 1267.75,676.124 1268.31,694.204 1268.87,711.347 1269.43,694.474 1269.99,677.014 1270.55,696.201 1271.11,649.083 1271.67,636.279 1272.23,640.655 1272.79,612.769 1273.35,616.379 1273.91,633.682 1274.46,604.051 1275.02,638.543 1275.58,645.214 1276.14,647.768 1276.7,649.071 1277.26,653.061 1277.82,653.974 1278.38,658.987 1278.94,662.059 1279.5,663.632 1280.06,662.763 1280.62,675.222 1281.18,678.959 1281.73,695.308 1282.29,661.44 1282.85,664.647 1283.41,664.151 1283.97,665.596 1284.53,633.445 1285.09,618.119 1285.65,652.572 1286.21,653.315 1286.77,673.24 1287.33,673.553 1287.89,688.097 1288.45,707.653 1289,707.184 1289.56,707.104 1290.12,721.434 1290.68,768.035 1291.24,760.94 1291.8,724.71 1292.36,723.437 1292.92,724.177 1293.48,704.32 1294.04,672.811 1294.6,639.708 1295.16,657.855 1295.72,641.987 1296.28,645.532 1296.83,665.977 1297.39,696.929 1297.95,664.694 1298.51,683.458 1299.07,699.132 1299.63,700.548 1300.19,680.356 1300.75,646.558 1301.31,650.891 1301.87,650.009 1302.43,686.423 1302.99,665.723 1303.55,713.217 1304.1,710.753 1304.66,696.431 1305.22,697.241 1305.78,696.183 1306.34,712.829 1306.9,696.397 1307.46,713.082 1308.02,664.652 1308.58,666.336 1309.14,680.82 1309.7,695.854 1310.26,710.901 1310.82,673.731 1311.38,693.931 1311.93,695.4 1312.49,709.505 1313.05,712.042 1313.61,708.967 1314.17,692.752 1314.73,690.601 1315.29,737.915 1315.85,704.426 1316.41,669.095 1316.97,684.413 1317.53,649.296 1318.09,603.03 1318.65,592.212 1319.2,627.265 1319.76,613.742 1320.32,616.314 1320.88,586.793 1321.44,609.814 1322,612.35 1322.56,635.016 1323.12,636.161 1323.68,657.544 1324.24,659.197 1324.8,659.368 1325.36,709.016 1325.92,705.287 1326.47,702.443 1327.03,719.705 1327.59,716.832 1328.15,746.583 1328.71,775.495 1329.27,757.129 1329.83,767.931 1330.39,733.522 1330.95,730.635 1331.51,726.401 1332.07,722.651 1332.63,753.923 1333.19,835.054 1333.75,843.055 1334.3,819.369 1334.86,778.972 1335.42,756.953 1335.98,736.613 1336.54,721.636 1337.1,749.866 1337.66,731.128 1338.22,695.726 1338.78,696.414 1339.34,710.648 1339.9,738.383 1340.46,749.642 1341.02,758.627 1341.57,771.345 1342.13,762.715 1342.69,759.896 1343.25,805.334 1343.81,782.641 1344.37,779.637 1344.93,788.258 1345.49,781.196 1346.05,789.616 1346.61,800.789 1347.17,776.651 1347.73,770.128 1348.29,699.052 1348.84,667.38 1349.4,667.389 1349.96,697.441 1350.52,678.888 1351.08,660.815 1351.64,642.173 1352.2,646.449 1352.76,645.622 1353.32,614.455 1353.88,640.058 1354.44,640.576 1355,659.729 1355.56,643.13 1356.12,675.788 1356.67,661.787 1357.23,668.468 1357.79,669.011 1358.35,655.764 1358.91,611.995 1359.47,620.861 1360.03,607.175 1360.59,644.242 1361.15,646.399 1361.71,566.599 1362.27,589.069 1362.83,610.577 1363.39,628.533 1363.94,628.981 1364.5,629.557 1365.06,614.162 1365.62,635.777 1366.18,671.609 1366.74,672.706 1367.3,671.83 1367.86,642.813 1368.42,648.439 1368.98,649.005 1369.54,635.135 1370.1,635.86 1370.66,637.379 1371.21,656.408 1371.77,674.626 1372.33,689.306 1372.89,708.77 1373.45,690.31 1374.01,688.997 1374.57,708.553 1375.13,790.414 1375.69,767.943 1376.25,766.101 1376.81,730.299 1377.37,744.337 1377.93,773.737 1378.49,739.544 1379.04,748.866 1379.6,759.24 1380.16,738.204 1380.72,734.299 1381.28,718.594 1381.84,748.651 1382.4,761.112 1382.96,773.044 1383.52,764.552 1384.08,777.714 1384.64,739.962 1385.2,724.142 1385.76,719.941 1386.31,701.847 1386.87,669.6 1387.43,634.357 1387.99,619.547 1388.55,622.107 1389.11,657.384 1389.67,706.025 1390.23,707.408 1390.79,723.361 1391.35,675.183 1391.91,658.119 1392.47,629.113 1393.03,633.234 1393.58,654.58 1394.14,672.299 1394.7,674.217 1395.26,672.498 1395.82,723.269 1396.38,687.642 1396.94,686.791 1397.5,671.394 1398.06,687.653 1398.62,736.855 1399.18,731.743 1399.74,699.235 1400.3,699.801 1400.86,702.622 1401.41,686.259 1401.97,683.711 1402.53,733.101 1403.09,731.73 1403.65,696.603 1404.21,662.948 1404.77,655.007 1405.33,686.529 1405.89,692.444 1406.45,708.599 1407.01,726.337 1407.57,721.053 1408.13,685.222 1408.68,666.809 1409.24,685.083 1409.8,712.653 1410.36,692.637 1410.92,658.902 1411.48,660.897 1412.04,661.591 1412.6,647.534 1413.16,666.242 1413.72,682.853 1414.28,683.993 1414.84,685.043 1415.4,683.863 1415.95,708.756 1416.51,697.061 1417.07,698.615 1417.63,714.739 1418.19,713.371 1418.75,748.11 1419.31,744.515 1419.87,692.846 1420.43,688.69 1420.99,703.692 1421.55,652.055 1422.11,651.967 1422.67,654.017 1423.23,639.254 1423.78,642.304 1424.34,627.085 1424.9,659.223 1425.46,658.158 1426.02,658.114 1426.58,679.173 1427.14,646.38 1427.7,631.635 1428.26,616.339 1428.82,652.401 1429.38,669.889 1429.94,684.847 1430.5,687.633 1431.05,669.717 1431.61,698.056 1432.17,728.573 1432.73,722.253 1433.29,705.725 1433.85,723.585 1434.41,724.658 1434.97,693.095 1435.53,727.935 1436.09,726.264 1436.65,723.262 1437.21,721.222 1437.77,721.992 1438.33,690.934 1438.88,688.588 1439.44,705.256 1440,720.289 1440.56,719.195 1441.12,704.342 1441.68,697.914 1442.24,694.661 1442.8,680.836 1443.36,664.892 1443.92,647.63 1444.48,617.475 1445.04,624.907 1445.6,566.216 1446.15,540.091 1446.71,568.879 1447.27,574.714 1447.83,579.251 1448.39,604.159 1448.95,609.049 1449.51,628.915 1450.07,615.986 1450.63,633.616 1451.19,665.155 1451.75,696.74 1452.31,698.244 1452.87,711.073 1453.42,726.043 1453.98,739.315 1454.54,703.031 1455.1,698.38 1455.66,698.451 1456.22,664.349 1456.78,668.005 1457.34,620.457 1457.9,638.442 1458.46,658.078 1459.02,646.887 1459.58,682.198 1460.14,683.681 1460.7,684.685 1461.25,717.678 1461.81,717.291 1462.37,685.711 1462.93,718.36 1463.49,733.088 1464.05,718.633 1464.61,732.886 1465.17,745.211 1465.73,771.067 1466.29,703.112 1466.85,702.832 1467.41,699.564 1467.97,696.415 1468.52,681.617 1469.08,679.779 1469.64,681.314 1470.2,663.849 1470.76,626.533 1471.32,648.292 1471.88,648.354 1472.44,618.231 1473,638.481 1473.56,656.748 1474.12,593.592 1474.68,594.845 1475.24,597.673 1475.79,571.076 1476.35,594.048 1476.91,625.825 1477.47,611.733 1478.03,646.984 1478.59,582.967 1479.15,626.486 1479.71,632.128 1480.27,632.491 1480.83,619.598 1481.39,621.32 1481.95,608.139 1482.51,629.361 1483.07,616.632 1483.62,573.97 1484.18,599.884 1484.74,606.556 1485.3,637.587 1485.86,654.701 1486.42,706.277 1486.98,707.735 1487.54,709.965 1488.1,692.043 1488.66,630.965 1489.22,617.381 1489.78,605.309 1490.34,640.621 1490.89,642.579 1491.45,662.322 1492.01,649.43 1492.57,648.3 1493.13,650.261 1493.69,653.825 1494.25,637.813 1494.81,622.189 1495.37,641.787 1495.93,645.067 1496.49,649.629 1497.05,652.242 1497.61,671.136 1498.16,688.216 1498.72,689.763 1499.28,688.262 1499.84,687.175 1500.4,684.032 1500.96,668.385 1501.52,667.984 1502.08,654.556 1502.64,660.038 1503.2,711.205 1503.76,693.645 1504.32,691.796 1504.88,723.113 1505.44,739.254 1505.99,735.196 1506.55,749.179 1507.11,743.985 1507.67,789.311 1508.23,799.748 1508.79,824.822 1509.35,800.056 1509.91,774.923 1510.47,769.919 1511.03,815.938 1511.59,795.7 1512.15,805.249 1512.71,817.683 1513.26,794.767 1513.82,791.214 1514.38,770.399 1514.94,797.405 1515.5,727.438 1516.06,738.47 1516.62,751.003 1517.18,764.756 1517.74,744.714 1518.3,725.319 1518.86,691.516 1519.42,708.883 1519.98,676.415 1520.53,642.433 1521.09,645.322 1521.65,627.023 1522.21,660.912 1522.77,678.409 1523.33,713.298 1523.89,696.748 1524.45,694.616 1525.01,676.15 1525.57,660.683 1526.13,659.038 1526.69,655.32 1527.25,657.357 1527.81,643.847 1528.36,659.155 1528.92,660.533 1529.48,641.922 1530.04,662.519 1530.6,661.544 1531.16,631.86 1531.72,600.085 1532.28,589.968 1532.84,611.276 1533.4,645.58 1533.96,666.656 1534.52,687.821 1535.08,714.336 1535.63,747.529 1536.19,760.166 1536.75,787.189 1537.31,782.185 1537.87,776.33 1538.43,753.53 1538.99,748.686 1539.55,697.922 1540.11,682.197 1540.67,650.98 1541.23,702.714 1541.79,685.437 1542.35,735.416 1542.9,700.727 1543.46,713.942 1544.02,696.024 1544.58,679.468 1545.14,665.743 1545.7,650.243 1546.26,653.186 1546.82,652.547 1547.38,655.606 1547.94,640.025 1548.5,645.347 1549.06,628.875 1549.62,648.143 1550.18,631.926 1550.73,633.939 1551.29,604.584 1551.85,645.286 1552.41,630.127 1552.97,646.679 1553.53,645.421 1554.09,644.45 1554.65,630.059 1555.21,650.431 1555.77,652.174 1556.33,651.423 1556.89,649.927 1557.45,666.394 1558,667.563 1558.56,685.441 1559.12,688.452 1559.68,719.206 1560.24,750.194 1560.8,709.617 1561.36,706.864 1561.92,703.207 1562.48,730.814 1563.04,726.403 1563.6,710.164 1564.16,721.234 1564.72,722.543 1565.28,706.091 1565.83,691.06 1566.39,734.013 1566.95,716.31 1567.51,745.553 1568.07,709.136 1568.63,706.807 1569.19,687.912 1569.75,704.052 1570.31,671.719 1570.87,705.051 1571.43,685.541 1571.99,702.795 1572.55,717.448 1573.1,717.013 1573.66,698.361 1574.22,714.497 1574.78,743.536 1575.34,774.339 1575.9,717.91 1576.46,734.999 1577.02,718.931 1577.58,717.552 1578.14,717.937 1578.7,733.671 1579.26,715.008 1579.82,730.568 1580.37,744.416 1580.93,690.665 1581.49,677.369 1582.05,629.888 1582.61,633.33 1583.17,651.743 1583.73,637.083 1584.29,655.877 1584.85,657.737 1585.41,625.331 1585.97,614.274 1586.53,599.488 1587.09,605.484 1587.65,623.82 1588.2,691.222 1588.76,707.439 1589.32,720.677 1589.88,701.544 1590.44,703.134 1591,686.263 1591.56,668.461 1592.12,670.178 1592.68,670.278 1593.24,673.5 1593.8,658.519 1594.36,661.895 1594.92,648.737 1595.47,663.954 1596.03,677.986 1596.59,678.64 1597.15,646.664 1597.71,634.591 1598.27,671.317 1598.83,672.695 1599.39,687.175 1599.95,655.186 1600.51,641.204 1601.07,662.309 1601.63,648.372 1602.19,700.398 1602.74,686.617 1603.3,691.074 1603.86,691.963 1604.42,675.503 1604.98,624.552 1605.54,624.112 1606.1,626.744 1606.66,646.628 1607.22,657.999 1607.78,692.551 1608.34,693.204 1608.9,692.626 1609.46,659.763 1610.02,695.423 1610.57,679.663 1611.13,710.545 1611.69,712.697 1612.25,778.562 1612.81,772.44 1613.37,772.25 1613.93,765.239 1614.49,759.91 1615.05,721.803 1615.61,687.205 1616.17,686.647 1616.73,716.274 1617.29,715.573 1617.84,713.534 1618.4,712.597 1618.96,729.073 1619.52,708.848 1620.08,672.088 1620.64,687.983 1621.2,690.574 1621.76,705.245 1622.32,722.889 1622.88,737.412 1623.44,735.157 1624,746.341 1624.56,758.072 1625.11,771.474 1625.67,765.574 1626.23,791.994 1626.79,789.211 1627.35,780.754 1627.91,747.093 1628.47,710.454 1629.03,694.316 1629.59,679.551 1630.15,713.964 1630.71,744.386 1631.27,729.097 1631.83,744.351 1632.39,707.548 1632.94,687.515 1633.5,633.711 1634.06,586.451 1634.62,603.226 1635.18,605.064 1635.74,610.308 1636.3,582.84 1636.86,634.246 1637.42,621.858 1637.98,627.545 1638.54,613.694 1639.1,600.534 1639.66,588.942 1640.21,606.668 1640.77,629.285 1641.33,619.087 1641.89,638.669 1642.45,643.066 1643.01,630.298 1643.57,628.234 1644.13,647.197 1644.69,633.619 1645.25,637.235 1645.81,623.636 1646.37,614.06 1646.93,633.855 1647.48,604.13 1648.04,644.842 1648.6,693.003 1649.16,694.656 1649.72,657.947 1650.28,660.1 1650.84,665.644 1651.4,634.993 1651.96,650.067 1652.52,685.138 1653.08,666.066 1653.64,619.062 1654.2,670.901 1654.76,673.063 1655.31,660.635 1655.87,694.57 1656.43,696.434 1656.99,696.293 1657.55,679.952 1658.11,665.462 1658.67,685.626 1659.23,708.93 1659.79,693.791 1660.35,681.456 1660.91,680.695 1661.47,683.841 1662.03,686.916 1662.58,703.757 1663.14,686.167 1663.7,671.178 1664.26,653.991 1664.82,686.939 1665.38,670.612 1665.94,690.851 1666.5,691.963 1667.06,677.109 1667.62,675.7 1668.18,695.625 1668.74,629.246 1669.3,645.984 1669.85,681.437 1670.41,684.257 1670.97,633.637 1671.53,616.328 1672.09,582.675 1672.65,573.399 1673.21,559.582 1673.77,580.957 1674.33,584.137 1674.89,573.892 1675.45,580.959 1676.01,584.457 1676.57,605.358 1677.13,608.29 1677.68,597.828 1678.24,583.807 1678.8,574.73 1679.36,578.11 1679.92,599.177 1680.48,607.842 1681.04,626.488 1681.6,627.446 1682.16,632.374 1682.72,631.254 1683.28,668.386 1683.84,675.646 1684.4,675.051 1684.95,654.063 1685.51,686.166 1686.07,705.02 1686.63,706.172 1687.19,700.618 1687.75,664.787 1688.31,664.285 1688.87,669.352 1689.43,687.243 1689.99,707.832 1690.55,708.123 1691.11,738.295 1691.67,735.749 1692.23,749.847 1692.78,796.339 1693.34,822.595 1693.9,794.877 1694.46,807.567 1695.02,817.234 1695.58,775.138 1696.14,806.153 1696.7,818.196 1697.26,760.458 1697.82,739.907 1698.38,723.479 1698.94,736.908 1699.5,731.419 1700.05,729.14 1700.61,727.649 1701.17,690.651 1701.73,660.293 1702.29,647.492 1702.85,632.092 1703.41,655.041 1703.97,655.831 1704.53,657.848 1705.09,642.65 1705.65,658.826 1706.21,676.102 1706.77,693.681 1707.32,693.403 1707.88,695.3 1708.44,710.162 1709,704.612 1709.56,701.92 1710.12,732.936 1710.68,713.662 1711.24,697.348 1711.8,648.079 1712.36,615.038 1712.92,606.148 1713.48,593.377 1714.04,632.301 1714.6,667.621 1715.15,669.93 1715.71,670.237 1716.27,687.123 1716.83,672.59 1717.39,643.466 1717.95,661.901 1718.51,657.194 1719.07,655.717 1719.63,670.88 1720.19,686.445 1720.75,682.853 1721.31,670.396 1721.87,701.432 1722.42,701.072 1722.98,701.1 1723.54,699.14 1724.1,683.404 1724.66,717.908 1725.22,731.558 1725.78,810.665 1726.34,791.601 1726.9,832.165 1727.46,822.528 1728.02,764.848 1728.58,731.881 1729.14,731.116 1729.69,778.319 1730.25,737.979 1730.81,733.134 1731.37,731.204 1731.93,730.252 1732.49,740.835 1733.05,736.826 1733.61,703.667 1734.17,702.722 1734.73,717.307 1735.29,699.379 1735.85,699.7 1736.41,680.62 1736.97,665.69 1737.52,633.395 1738.08,633.421 1738.64,639.507 1739.2,640.317 1739.76,595.576 1740.32,633.526 1740.88,650.188 1741.44,635.002 1742,622.511 1742.56,626.742 1743.12,615.481 1743.68,633.741 1744.24,620.337 1744.79,608.442 1745.35,645.561 1745.91,567.958 1746.47,605.307 1747.03,623.273 1747.59,641.633 1748.15,643.524 1748.71,612.326 1749.27,632.145 1749.83,666.619 1750.39,650.259 1750.95,649.746 1751.51,669.013 1752.06,669.338 1752.62,685.321 1753.18,681.122 1753.74,695.948 1754.3,678.794 1754.86,663.687 1755.42,663.405 1755.98,681.124 1756.54,678.56 1757.1,678.384 1757.66,677.586 1758.22,710.055 1758.78,713.732 1759.34,698.109 1759.89,731.391 1760.45,730.398 1761.01,773.58 1761.57,719.393 1762.13,717.021 1762.69,751.962 1763.25,781.828 1763.81,758.086 1764.37,756.063 1764.93,739.062 1765.49,750.232 1766.05,779.546 1766.61,743.986 1767.16,773.497 1767.72,805.207 1768.28,813.788 1768.84,809.997 1769.4,772.928 1769.96,749.703 1770.52,762.884 1771.08,759.773 1771.64,723.145 1772.2,734.818 1772.76,717.968 1773.32,717.779 1773.88,728.58 1774.43,741.155 1774.99,737.653 1775.55,734.629 1776.11,750.944 1776.67,764.139 1777.23,760.037 1777.79,741.982 1778.35,755.322 1778.91,748.775 1779.47,745.331 1780.03,742.495 1780.59,753.259 1781.15,752.311 1781.71,742.35 1782.26,739.254 1782.82,736.694 1783.38,721.103 1783.94,703.998 1784.5,688.715 1785.06,690.222 1785.62,689.423 1786.18,686.892 1786.74,670.654 1787.3,657.363 1787.86,638.685 1788.42,628.466 1788.98,599.957 1789.53,586.097 1790.09,608.594 1790.65,610.361 1791.21,645.452 1791.77,651.373 1792.33,637.774 1792.89,657.132 1793.45,641.942 1794.01,675.535 1794.57,674.543 1795.13,674.816 1795.69,663.758 1796.25,662.018 1796.8,662.801 1797.36,648.453 1797.92,682.182 1798.48,633.981 1799.04,618.915 1799.6,621.763 1800.16,642.932 1800.72,660.867 1801.28,643.824 1801.84,676.98 1802.4,677.079 1802.96,664.707 1803.52,698.07 1804.08,681.557 1804.63,681.253 1805.19,649.355 1805.75,666.56 1806.31,666.767 1806.87,667.949 1807.43,670.101 1807.99,672.541 1808.55,704.199 1809.11,686.573 1809.67,688.447 1810.23,692.795 1810.79,693.37 1811.35,709.536 1811.9,704.798 1812.46,717.169 1813.02,716.445 1813.58,682.028 1814.14,684.195 1814.7,667.229 1815.26,636.697 1815.82,654.455 1816.38,674.481 1816.94,676.516 1817.5,693.399 1818.06,709.791 1818.62,709.185 1819.18,708.45 1819.73,675.315 1820.29,672.353 1820.85,705.758 1821.41,739.31 1821.97,722.539 1822.53,693.158 1823.09,706.192 1823.65,722.691 1824.21,706.855 1824.77,708.511 1825.33,739.04 1825.89,735.818 1826.45,717.853 1827,708.86 1827.56,707.088 1828.12,720.287 1828.68,716.863 1829.24,729.638 1829.8,724.257 1830.36,702.223 1830.92,732.99 1831.48,733.63 1832.04,759.804 1832.6,755.087 1833.16,735.997 1833.72,714.291 1834.27,694.607 1834.83,674.557 1835.39,723.678 1835.95,736.794 1836.51,767.71 1837.07,776.642 1837.63,766.411 1838.19,766.507 \"/>\n<path clip-path=\"url(#clip463)\" d=\"M720.247 692.553 L720.806 692.553 L721.365 692.553 L721.924 692.553 L722.484 692.553 L723.043 692.553 L723.602 692.553 L724.161 692.553 L724.721 692.553 L725.28 692.553 L725.839 692.553 L726.398 692.553 L726.958 692.553 L727.517 692.553 L728.076 692.553 L728.635 692.553 L729.195 692.553 L729.754 692.553 L730.313 692.553 L730.872 692.553 L731.432 692.553 L731.991 692.553 L732.55 692.553 L733.109 692.553 L733.669 692.553 L734.228 692.553 L734.787 692.553 L735.346 692.553 L735.906 692.553 L736.465 692.553 L737.024 692.553 L737.583 692.553 L738.143 692.553 L738.702 692.553 L739.261 692.553 L739.82 692.553 L740.38 692.553 L740.939 692.553 L741.498 692.553 L742.057 692.553 L742.617 692.553 L743.176 692.553 L743.735 692.553 L744.294 692.553 L744.854 692.553 L745.413 692.553 L745.972 692.553 L746.531 692.553 L747.091 692.553 L747.65 692.553 L748.209 692.553 L748.768 692.553 L749.328 692.553 L749.887 692.553 L750.446 692.553 L751.005 692.553 L751.565 692.553 L752.124 692.553 L752.683 692.553 L753.242 692.553 L753.802 692.553 L754.361 692.553 L754.92 692.553 L755.479 692.553 L756.039 692.553 L756.598 692.553 L757.157 692.553 L757.716 692.553 L758.276 692.553 L758.835 692.553 L759.394 692.553 L759.953 692.553 L760.513 692.553 L761.072 692.553 L761.631 692.553 L762.19 692.553 L762.75 692.553 L763.309 692.553 L763.868 692.553 L764.427 692.553 L764.987 692.553 L765.546 692.553 L766.105 692.553 L766.664 692.553 L767.224 692.553 L767.783 692.553 L768.342 692.553 L768.901 692.553 L769.461 692.553 L770.02 692.553 L770.579 692.553 L771.138 692.553 L771.698 692.553 L772.257 692.553 L772.816 692.553 L773.375 692.553 L773.935 692.553 L774.494 692.553 L775.053 692.553 L775.612 692.553 L776.172 692.553 L776.731 692.553 L777.29 692.553 L777.849 692.553 L778.409 692.553 L778.968 692.553 L779.527 692.553 L780.086 692.553 L780.646 692.553 L781.205 692.553 L781.764 692.553 L782.323 692.553 L782.883 692.553 L783.442 692.553 L784.001 692.553 L784.56 692.553 L785.12 692.553 L785.679 692.553 L786.238 692.553 L786.797 692.553 L787.357 692.553 L787.916 692.553 L788.475 692.553 L789.034 692.553 L789.594 692.553 L790.153 692.553 L790.712 692.553 L791.271 692.553 L791.831 692.553 L792.39 692.553 L792.949 692.553 L793.508 692.553 L794.068 692.553 L794.627 692.553 L795.186 692.553 L795.745 692.553 L796.305 692.553 L796.864 692.553 L797.423 692.553 L797.982 692.553 L798.542 692.553 L799.101 692.553 L799.66 692.553 L800.219 692.553 L800.779 692.553 L801.338 692.553 L801.897 692.553 L802.456 692.553 L803.016 692.553 L803.575 692.553 L804.134 692.553 L804.693 692.553 L805.253 692.553 L805.812 692.553 L806.371 692.553 L806.931 692.553 L807.49 692.553 L808.049 692.553 L808.608 692.553 L809.168 692.553 L809.727 692.553 L810.286 692.553 L810.845 692.553 L811.405 692.553 L811.964 692.553 L812.523 692.553 L813.082 692.553 L813.642 692.553 L814.201 692.553 L814.76 692.553 L815.319 692.553 L815.879 692.553 L816.438 692.553 L816.997 692.553 L817.556 692.553 L818.116 692.553 L818.675 692.553 L819.234 692.553 L819.793 692.553 L820.353 692.553 L820.912 692.553 L821.471 692.553 L822.03 692.553 L822.59 692.553 L823.149 692.553 L823.708 692.553 L824.267 692.553 L824.827 692.553 L825.386 692.553 L825.945 692.553 L826.504 692.553 L827.064 692.553 L827.623 692.553 L828.182 692.553 L828.741 692.553 L829.301 692.553 L829.86 692.553 L830.419 692.553 L830.978 692.553 L831.538 692.553 L832.097 692.553 L832.656 692.553 L833.215 692.553 L833.775 692.553 L834.334 692.553 L834.893 692.553 L835.452 692.553 L836.012 692.553 L836.571 692.553 L837.13 692.553 L837.689 692.553 L838.249 692.553 L838.808 692.553 L839.367 692.553 L839.926 692.553 L840.486 692.553 L841.045 692.553 L841.604 692.553 L842.163 692.553 L842.723 692.553 L843.282 692.553 L843.841 692.553 L844.4 692.553 L844.96 692.553 L845.519 692.553 L846.078 692.553 L846.637 692.553 L847.197 692.553 L847.756 692.553 L848.315 692.553 L848.874 692.553 L849.434 692.553 L849.993 692.553 L850.552 692.553 L851.111 692.553 L851.671 692.553 L852.23 692.553 L852.789 692.553 L853.348 692.553 L853.908 692.553 L854.467 692.553 L855.026 692.553 L855.585 692.553 L856.145 692.553 L856.704 692.553 L857.263 692.553 L857.822 692.553 L858.382 692.553 L858.941 692.553 L859.5 692.553 L860.059 692.553 L860.619 692.553 L861.178 692.553 L861.737 692.553 L862.296 692.553 L862.856 692.553 L863.415 692.553 L863.974 692.553 L864.533 692.553 L865.093 692.553 L865.652 692.553 L866.211 692.553 L866.77 692.553 L867.33 692.553 L867.889 692.553 L868.448 692.553 L869.007 692.553 L869.567 692.553 L870.126 692.553 L870.685 692.553 L871.244 692.553 L871.804 692.553 L872.363 692.553 L872.922 692.553 L873.481 692.553 L874.041 692.553 L874.6 692.553 L875.159 692.553 L875.718 692.553 L876.278 692.553 L876.837 692.553 L877.396 692.553 L877.955 692.553 L878.515 692.553 L879.074 692.553 L879.633 692.553 L880.192 692.553 L880.752 692.553 L881.311 692.553 L881.87 692.553 L882.429 692.553 L882.989 692.553 L883.548 692.553 L884.107 692.553 L884.666 692.553 L885.226 692.553 L885.785 692.553 L886.344 692.553 L886.903 692.553 L887.463 692.553 L888.022 692.553 L888.581 692.553 L889.14 692.553 L889.7 692.553 L890.259 692.553 L890.818 692.553 L891.377 692.553 L891.937 692.553 L892.496 692.553 L893.055 692.553 L893.614 692.553 L894.174 692.553 L894.733 692.553 L895.292 692.553 L895.851 692.553 L896.411 692.553 L896.97 692.553 L897.529 692.553 L898.088 692.553 L898.648 692.553 L899.207 692.553 L899.766 692.553 L900.325 692.553 L900.885 692.553 L901.444 692.553 L902.003 692.553 L902.562 692.553 L903.122 692.553 L903.681 692.553 L904.24 692.553 L904.799 692.553 L905.359 692.553 L905.918 692.553 L906.477 692.553 L907.036 692.553 L907.596 692.553 L908.155 692.553 L908.714 692.553 L909.273 692.553 L909.833 692.553 L910.392 692.553 L910.951 692.553 L911.51 692.553 L912.07 692.553 L912.629 692.553 L913.188 692.553 L913.747 692.553 L914.307 692.553 L914.866 692.553 L915.425 692.553 L915.984 692.553 L916.544 692.553 L917.103 692.553 L917.662 692.553 L918.221 692.553 L918.781 692.553 L919.34 692.553 L919.899 692.553 L920.458 692.553 L921.018 692.553 L921.577 692.553 L922.136 692.553 L922.695 692.553 L923.255 692.553 L923.814 692.553 L924.373 692.553 L924.932 692.553 L925.492 692.553 L926.051 692.553 L926.61 692.553 L927.169 692.553 L927.729 692.553 L928.288 692.553 L928.847 692.553 L929.406 692.553 L929.966 692.553 L930.525 692.553 L931.084 692.553 L931.644 692.553 L932.203 692.553 L932.762 692.553 L933.321 692.553 L933.881 692.553 L934.44 692.553 L934.999 692.553 L935.558 692.553 L936.118 692.553 L936.677 692.553 L937.236 692.553 L937.795 692.553 L938.355 692.553 L938.914 692.553 L939.473 692.553 L940.032 692.553 L940.592 692.553 L941.151 692.553 L941.71 692.553 L942.269 692.553 L942.829 692.553 L943.388 692.553 L943.947 692.553 L944.506 692.553 L945.066 692.553 L945.625 692.553 L946.184 692.553 L946.743 692.553 L947.303 692.553 L947.862 692.553 L948.421 692.553 L948.98 692.553 L949.54 692.553 L950.099 692.553 L950.658 692.553 L951.217 692.553 L951.777 692.553 L952.336 692.553 L952.895 692.553 L953.454 692.553 L954.014 692.553 L954.573 692.553 L955.132 692.553 L955.691 692.553 L956.251 692.553 L956.81 692.553 L957.369 692.553 L957.928 692.553 L958.488 692.553 L959.047 692.553 L959.606 692.553 L960.165 692.553 L960.725 692.553 L961.284 692.553 L961.843 692.553 L962.402 692.553 L962.962 692.553 L963.521 692.553 L964.08 692.553 L964.639 692.553 L965.199 692.553 L965.758 692.553 L966.317 692.553 L966.876 692.553 L967.436 692.553 L967.995 692.553 L968.554 692.553 L969.113 692.553 L969.673 692.553 L970.232 692.553 L970.791 692.553 L971.35 692.553 L971.91 692.553 L972.469 692.553 L973.028 692.553 L973.587 692.553 L974.147 692.553 L974.706 692.553 L975.265 692.553 L975.824 692.553 L976.384 692.553 L976.943 692.553 L977.502 692.553 L978.061 692.553 L978.621 692.553 L979.18 692.553 L979.739 692.553 L980.298 692.553 L980.858 692.553 L981.417 692.553 L981.976 692.553 L982.535 692.553 L983.095 692.553 L983.654 692.553 L984.213 692.553 L984.772 692.553 L985.332 692.553 L985.891 692.553 L986.45 692.553 L987.009 692.553 L987.569 692.553 L988.128 692.553 L988.687 692.553 L989.246 692.553 L989.806 692.553 L990.365 692.553 L990.924 692.553 L991.483 692.553 L992.043 692.553 L992.602 692.553 L993.161 692.553 L993.72 692.553 L994.28 692.553 L994.839 692.553 L995.398 692.553 L995.957 692.553 L996.517 692.553 L997.076 692.553 L997.635 692.553 L998.194 692.553 L998.754 692.553 L999.313 692.553 L999.872 692.553 L1000.43 692.553 L1000.99 692.553 L1001.55 692.553 L1002.11 692.553 L1002.67 692.553 L1003.23 692.553 L1003.79 692.553 L1004.35 692.553 L1004.91 692.553 L1005.46 692.553 L1006.02 692.553 L1006.58 692.553 L1007.14 692.553 L1007.7 692.553 L1008.26 692.553 L1008.82 692.553 L1009.38 692.553 L1009.94 692.553 L1010.5 692.553 L1011.06 692.553 L1011.62 692.553 L1012.18 692.553 L1012.73 692.553 L1013.29 692.553 L1013.85 692.553 L1014.41 692.553 L1014.97 692.553 L1015.53 692.553 L1016.09 692.553 L1016.65 692.553 L1017.21 692.553 L1017.77 692.553 L1018.33 692.553 L1018.89 692.553 L1019.45 692.553 L1020.01 692.553 L1020.56 692.553 L1021.12 692.553 L1021.68 692.553 L1022.24 692.553 L1022.8 692.553 L1023.36 692.553 L1023.92 692.553 L1024.48 692.553 L1025.04 692.553 L1025.6 692.553 L1026.16 692.553 L1026.72 692.553 L1027.28 692.553 L1027.83 692.553 L1028.39 692.553 L1028.95 692.553 L1029.51 692.553 L1030.07 692.553 L1030.63 692.553 L1031.19 692.553 L1031.75 692.553 L1032.31 692.553 L1032.87 692.553 L1033.43 692.553 L1033.99 692.553 L1034.55 692.553 L1035.1 692.553 L1035.66 692.553 L1036.22 692.553 L1036.78 692.553 L1037.34 692.553 L1037.9 692.553 L1038.46 692.553 L1039.02 692.553 L1039.58 692.553 L1040.14 692.553 L1040.7 692.553 L1041.26 692.553 L1041.82 692.553 L1042.38 692.553 L1042.93 692.553 L1043.49 692.553 L1044.05 692.553 L1044.61 692.553 L1045.17 692.553 L1045.73 692.553 L1046.29 692.553 L1046.85 692.553 L1047.41 692.553 L1047.97 692.553 L1048.53 692.553 L1049.09 692.553 L1049.65 692.553 L1050.2 692.553 L1050.76 692.553 L1051.32 692.553 L1051.88 692.553 L1052.44 692.553 L1053 692.553 L1053.56 692.553 L1054.12 692.553 L1054.68 692.553 L1055.24 692.553 L1055.8 692.553 L1056.36 692.553 L1056.92 692.553 L1057.48 692.553 L1058.03 692.553 L1058.59 692.553 L1059.15 692.553 L1059.71 692.553 L1060.27 692.553 L1060.83 692.553 L1061.39 692.553 L1061.95 692.553 L1062.51 692.553 L1063.07 692.553 L1063.63 692.553 L1064.19 692.553 L1064.75 692.553 L1065.3 692.553 L1065.86 692.553 L1066.42 692.553 L1066.98 692.553 L1067.54 692.553 L1068.1 692.553 L1068.66 692.553 L1069.22 692.553 L1069.78 692.553 L1070.34 692.553 L1070.9 692.553 L1071.46 692.553 L1072.02 692.553 L1072.57 692.553 L1073.13 692.553 L1073.69 692.553 L1074.25 692.553 L1074.81 692.553 L1075.37 692.553 L1075.93 692.553 L1076.49 692.553 L1077.05 692.553 L1077.61 692.553 L1078.17 692.553 L1078.73 692.553 L1079.29 692.553 L1079.85 692.553 L1080.4 692.553 L1080.96 692.553 L1081.52 692.553 L1082.08 692.553 L1082.64 692.553 L1083.2 692.553 L1083.76 692.553 L1084.32 692.553 L1084.88 692.553 L1085.44 692.553 L1086 692.553 L1086.56 692.553 L1087.12 692.553 L1087.67 692.553 L1088.23 692.553 L1088.79 692.553 L1089.35 692.553 L1089.91 692.553 L1090.47 692.553 L1091.03 692.553 L1091.59 692.553 L1092.15 692.553 L1092.71 692.553 L1093.27 692.553 L1093.83 692.553 L1094.39 692.553 L1094.94 692.553 L1095.5 692.553 L1096.06 692.553 L1096.62 692.553 L1097.18 692.553 L1097.74 692.553 L1098.3 692.553 L1098.86 692.553 L1099.42 692.553 L1099.98 692.553 L1100.54 692.553 L1101.1 692.553 L1101.66 692.553 L1102.22 692.553 L1102.77 692.553 L1103.33 692.553 L1103.89 692.553 L1104.45 692.553 L1105.01 692.553 L1105.57 692.553 L1106.13 692.553 L1106.69 692.553 L1107.25 692.553 L1107.81 692.553 L1108.37 692.553 L1108.93 692.553 L1109.49 692.553 L1110.04 692.553 L1110.6 692.553 L1111.16 692.553 L1111.72 692.553 L1112.28 692.553 L1112.84 692.553 L1113.4 692.553 L1113.96 692.553 L1114.52 692.553 L1115.08 692.553 L1115.64 692.553 L1116.2 692.553 L1116.76 692.553 L1117.31 692.553 L1117.87 692.553 L1118.43 692.553 L1118.99 692.553 L1119.55 692.553 L1120.11 692.553 L1120.67 692.553 L1121.23 692.553 L1121.79 692.553 L1122.35 692.553 L1122.91 692.553 L1123.47 692.553 L1124.03 692.553 L1124.59 692.553 L1125.14 692.553 L1125.7 692.553 L1126.26 692.553 L1126.82 692.553 L1127.38 692.553 L1127.94 692.553 L1128.5 692.553 L1129.06 692.553 L1129.62 692.553 L1130.18 692.553 L1130.74 692.553 L1131.3 692.553 L1131.86 692.553 L1132.41 692.553 L1132.97 692.553 L1133.53 692.553 L1134.09 692.553 L1134.65 692.553 L1135.21 692.553 L1135.77 692.553 L1136.33 692.553 L1136.89 692.553 L1137.45 692.553 L1138.01 692.553 L1138.57 692.553 L1139.13 692.553 L1139.68 692.553 L1140.24 692.553 L1140.8 692.553 L1141.36 692.553 L1141.92 692.553 L1142.48 692.553 L1143.04 692.553 L1143.6 692.553 L1144.16 692.553 L1144.72 692.553 L1145.28 692.553 L1145.84 692.553 L1146.4 692.553 L1146.96 692.553 L1147.51 692.553 L1148.07 692.553 L1148.63 692.553 L1149.19 692.553 L1149.75 692.553 L1150.31 692.553 L1150.87 692.553 L1151.43 692.553 L1151.99 692.553 L1152.55 692.553 L1153.11 692.553 L1153.67 692.553 L1154.23 692.553 L1154.78 692.553 L1155.34 692.553 L1155.9 692.553 L1156.46 692.553 L1157.02 692.553 L1157.58 692.553 L1158.14 692.553 L1158.7 692.553 L1159.26 692.553 L1159.82 692.553 L1160.38 692.553 L1160.94 692.553 L1161.5 692.553 L1162.05 692.553 L1162.61 692.553 L1163.17 692.553 L1163.73 692.553 L1164.29 692.553 L1164.85 692.553 L1165.41 692.553 L1165.97 692.553 L1166.53 692.553 L1167.09 692.553 L1167.65 692.553 L1168.21 692.553 L1168.77 692.553 L1169.33 692.553 L1169.88 692.553 L1170.44 692.553 L1171 692.553 L1171.56 692.553 L1172.12 692.553 L1172.68 692.553 L1173.24 692.553 L1173.8 692.553 L1174.36 692.553 L1174.92 692.553 L1175.48 692.553 L1176.04 692.553 L1176.6 692.553 L1177.15 692.553 L1177.71 692.553 L1178.27 692.553 L1178.83 692.553 L1179.39 692.553 L1179.95 692.553 L1180.51 692.553 L1181.07 692.553 L1181.63 692.553 L1182.19 692.553 L1182.75 692.553 L1183.31 692.553 L1183.87 692.553 L1184.43 692.553 L1184.98 692.553 L1185.54 692.553 L1186.1 692.553 L1186.66 692.553 L1187.22 692.553 L1187.78 692.553 L1188.34 692.553 L1188.9 692.553 L1189.46 692.553 L1190.02 692.553 L1190.58 692.553 L1191.14 692.553 L1191.7 692.553 L1192.25 692.553 L1192.81 692.553 L1193.37 692.553 L1193.93 692.553 L1194.49 692.553 L1195.05 692.553 L1195.61 692.553 L1196.17 692.553 L1196.73 692.553 L1197.29 692.553 L1197.85 692.553 L1198.41 692.553 L1198.97 692.553 L1199.52 692.553 L1200.08 692.553 L1200.64 692.553 L1201.2 692.553 L1201.76 692.553 L1202.32 692.553 L1202.88 692.553 L1203.44 692.553 L1204 692.553 L1204.56 692.553 L1205.12 692.553 L1205.68 692.553 L1206.24 692.553 L1206.8 692.553 L1207.35 692.553 L1207.91 692.553 L1208.47 692.553 L1209.03 692.553 L1209.59 692.553 L1210.15 692.553 L1210.71 692.553 L1211.27 692.553 L1211.83 692.553 L1212.39 692.553 L1212.95 692.553 L1213.51 692.553 L1214.07 692.553 L1214.62 692.553 L1215.18 692.553 L1215.74 692.553 L1216.3 692.553 L1216.86 692.553 L1217.42 692.553 L1217.98 692.553 L1218.54 692.553 L1219.1 692.553 L1219.66 692.553 L1220.22 692.553 L1220.78 692.553 L1221.34 692.553 L1221.89 692.553 L1222.45 692.553 L1223.01 692.553 L1223.57 692.553 L1224.13 692.553 L1224.69 692.553 L1225.25 692.553 L1225.81 692.553 L1226.37 692.553 L1226.93 692.553 L1227.49 692.553 L1228.05 692.553 L1228.61 692.553 L1229.17 692.553 L1229.72 692.553 L1230.28 692.553 L1230.84 692.553 L1231.4 692.553 L1231.96 692.553 L1232.52 692.553 L1233.08 692.553 L1233.64 692.553 L1234.2 692.553 L1234.76 692.553 L1235.32 692.553 L1235.88 692.553 L1236.44 692.553 L1236.99 692.553 L1237.55 692.553 L1238.11 692.553 L1238.67 692.553 L1239.23 692.553 L1239.79 692.553 L1240.35 692.553 L1240.91 692.553 L1241.47 692.553 L1242.03 692.553 L1242.59 692.553 L1243.15 692.553 L1243.71 692.553 L1244.26 692.553 L1244.82 692.553 L1245.38 692.553 L1245.94 692.553 L1246.5 692.553 L1247.06 692.553 L1247.62 692.553 L1248.18 692.553 L1248.74 692.553 L1249.3 692.553 L1249.86 692.553 L1250.42 692.553 L1250.98 692.553 L1251.54 692.553 L1252.09 692.553 L1252.65 692.553 L1253.21 692.553 L1253.77 692.553 L1254.33 692.553 L1254.89 692.553 L1255.45 692.553 L1256.01 692.553 L1256.57 692.553 L1257.13 692.553 L1257.69 692.553 L1258.25 692.553 L1258.81 692.553 L1259.36 692.553 L1259.92 692.553 L1260.48 692.553 L1261.04 692.553 L1261.6 692.553 L1262.16 692.553 L1262.72 692.553 L1263.28 692.553 L1263.84 692.553 L1264.4 692.553 L1264.96 692.553 L1265.52 692.553 L1266.08 692.553 L1266.63 692.553 L1267.19 692.553 L1267.75 692.553 L1268.31 692.553 L1268.87 692.553 L1269.43 692.553 L1269.99 692.553 L1270.55 692.553 L1271.11 692.553 L1271.67 692.553 L1272.23 692.553 L1272.79 692.553 L1273.35 692.553 L1273.91 692.553 L1274.46 692.553 L1275.02 692.553 L1275.58 692.553 L1276.14 692.553 L1276.7 692.553 L1277.26 692.553 L1277.82 692.553 L1278.38 692.553 L1278.94 692.553 L1279.5 692.553 L1280.06 692.553 L1280.62 692.553 L1281.18 692.553 L1281.73 692.553 L1282.29 692.553 L1282.85 692.553 L1283.41 692.553 L1283.97 692.553 L1284.53 692.553 L1285.09 692.553 L1285.65 692.553 L1286.21 692.553 L1286.77 692.553 L1287.33 692.553 L1287.89 692.553 L1288.45 692.553 L1289 692.553 L1289.56 692.553 L1290.12 692.553 L1290.68 692.553 L1291.24 692.553 L1291.8 692.553 L1292.36 692.553 L1292.92 692.553 L1293.48 692.553 L1294.04 692.553 L1294.6 692.553 L1295.16 692.553 L1295.72 692.553 L1296.28 692.553 L1296.83 692.553 L1297.39 692.553 L1297.95 692.553 L1298.51 692.553 L1299.07 692.553 L1299.63 692.553 L1300.19 692.553 L1300.75 692.553 L1301.31 692.553 L1301.87 692.553 L1302.43 692.553 L1302.99 692.553 L1303.55 692.553 L1304.1 692.553 L1304.66 692.553 L1305.22 692.553 L1305.78 692.553 L1306.34 692.553 L1306.9 692.553 L1307.46 692.553 L1308.02 692.553 L1308.58 692.553 L1309.14 692.553 L1309.7 692.553 L1310.26 692.553 L1310.82 692.553 L1311.38 692.553 L1311.93 692.553 L1312.49 692.553 L1313.05 692.553 L1313.61 692.553 L1314.17 692.553 L1314.73 692.553 L1315.29 692.553 L1315.85 692.553 L1316.41 692.553 L1316.97 692.553 L1317.53 692.553 L1318.09 692.553 L1318.65 692.553 L1319.2 692.553 L1319.76 692.553 L1320.32 692.553 L1320.88 692.553 L1321.44 692.553 L1322 692.553 L1322.56 692.553 L1323.12 692.553 L1323.68 692.553 L1324.24 692.553 L1324.8 692.553 L1325.36 692.553 L1325.92 692.553 L1326.47 692.553 L1327.03 692.553 L1327.59 692.553 L1328.15 692.553 L1328.71 692.553 L1329.27 692.553 L1329.83 692.553 L1330.39 692.553 L1330.95 692.553 L1331.51 692.553 L1332.07 692.553 L1332.63 692.553 L1333.19 692.553 L1333.75 692.553 L1334.3 692.553 L1334.86 692.553 L1335.42 692.553 L1335.98 692.553 L1336.54 692.553 L1337.1 692.553 L1337.66 692.553 L1338.22 692.553 L1338.78 692.553 L1339.34 692.553 L1339.9 692.553 L1340.46 692.553 L1341.02 692.553 L1341.57 692.553 L1342.13 692.553 L1342.69 692.553 L1343.25 692.553 L1343.81 692.553 L1344.37 692.553 L1344.93 692.553 L1345.49 692.553 L1346.05 692.553 L1346.61 692.553 L1347.17 692.553 L1347.73 692.553 L1348.29 692.553 L1348.84 692.553 L1349.4 692.553 L1349.96 692.553 L1350.52 692.553 L1351.08 692.553 L1351.64 692.553 L1352.2 692.553 L1352.76 692.553 L1353.32 692.553 L1353.88 692.553 L1354.44 692.553 L1355 692.553 L1355.56 692.553 L1356.12 692.553 L1356.67 692.553 L1357.23 692.553 L1357.79 692.553 L1358.35 692.553 L1358.91 692.553 L1359.47 692.553 L1360.03 692.553 L1360.59 692.553 L1361.15 692.553 L1361.71 692.553 L1362.27 692.553 L1362.83 692.553 L1363.39 692.553 L1363.94 692.553 L1364.5 692.553 L1365.06 692.553 L1365.62 692.553 L1366.18 692.553 L1366.74 692.553 L1367.3 692.553 L1367.86 692.553 L1368.42 692.553 L1368.98 692.553 L1369.54 692.553 L1370.1 692.553 L1370.66 692.553 L1371.21 692.553 L1371.77 692.553 L1372.33 692.553 L1372.89 692.553 L1373.45 692.553 L1374.01 692.553 L1374.57 692.553 L1375.13 692.553 L1375.69 692.553 L1376.25 692.553 L1376.81 692.553 L1377.37 692.553 L1377.93 692.553 L1378.49 692.553 L1379.04 692.553 L1379.6 692.553 L1380.16 692.553 L1380.72 692.553 L1381.28 692.553 L1381.84 692.553 L1382.4 692.553 L1382.96 692.553 L1383.52 692.553 L1384.08 692.553 L1384.64 692.553 L1385.2 692.553 L1385.76 692.553 L1386.31 692.553 L1386.87 692.553 L1387.43 692.553 L1387.99 692.553 L1388.55 692.553 L1389.11 692.553 L1389.67 692.553 L1390.23 692.553 L1390.79 692.553 L1391.35 692.553 L1391.91 692.553 L1392.47 692.553 L1393.03 692.553 L1393.58 692.553 L1394.14 692.553 L1394.7 692.553 L1395.26 692.553 L1395.82 692.553 L1396.38 692.553 L1396.94 692.553 L1397.5 692.553 L1398.06 692.553 L1398.62 692.553 L1399.18 692.553 L1399.74 692.553 L1400.3 692.553 L1400.86 692.553 L1401.41 692.553 L1401.97 692.553 L1402.53 692.553 L1403.09 692.553 L1403.65 692.553 L1404.21 692.553 L1404.77 692.553 L1405.33 692.553 L1405.89 692.553 L1406.45 692.553 L1407.01 692.553 L1407.57 692.553 L1408.13 692.553 L1408.68 692.553 L1409.24 692.553 L1409.8 692.553 L1410.36 692.553 L1410.92 692.553 L1411.48 692.553 L1412.04 692.553 L1412.6 692.553 L1413.16 692.553 L1413.72 692.553 L1414.28 692.553 L1414.84 692.553 L1415.4 692.553 L1415.95 692.553 L1416.51 692.553 L1417.07 692.553 L1417.63 692.553 L1418.19 692.553 L1418.75 692.553 L1419.31 692.553 L1419.87 692.553 L1420.43 692.553 L1420.99 692.553 L1421.55 692.553 L1422.11 692.553 L1422.67 692.553 L1423.23 692.553 L1423.78 692.553 L1424.34 692.553 L1424.9 692.553 L1425.46 692.553 L1426.02 692.553 L1426.58 692.553 L1427.14 692.553 L1427.7 692.553 L1428.26 692.553 L1428.82 692.553 L1429.38 692.553 L1429.94 692.553 L1430.5 692.553 L1431.05 692.553 L1431.61 692.553 L1432.17 692.553 L1432.73 692.553 L1433.29 692.553 L1433.85 692.553 L1434.41 692.553 L1434.97 692.553 L1435.53 692.553 L1436.09 692.553 L1436.65 692.553 L1437.21 692.553 L1437.77 692.553 L1438.33 692.553 L1438.88 692.553 L1439.44 692.553 L1440 692.553 L1440.56 692.553 L1441.12 692.553 L1441.68 692.553 L1442.24 692.553 L1442.8 692.553 L1443.36 692.553 L1443.92 692.553 L1444.48 692.553 L1445.04 692.553 L1445.6 692.553 L1446.15 692.553 L1446.71 692.553 L1447.27 692.553 L1447.83 692.553 L1448.39 692.553 L1448.95 692.553 L1449.51 692.553 L1450.07 692.553 L1450.63 692.553 L1451.19 692.553 L1451.75 692.553 L1452.31 692.553 L1452.87 692.553 L1453.42 692.553 L1453.98 692.553 L1454.54 692.553 L1455.1 692.553 L1455.66 692.553 L1456.22 692.553 L1456.78 692.553 L1457.34 692.553 L1457.9 692.553 L1458.46 692.553 L1459.02 692.553 L1459.58 692.553 L1460.14 692.553 L1460.7 692.553 L1461.25 692.553 L1461.81 692.553 L1462.37 692.553 L1462.93 692.553 L1463.49 692.553 L1464.05 692.553 L1464.61 692.553 L1465.17 692.553 L1465.73 692.553 L1466.29 692.553 L1466.85 692.553 L1467.41 692.553 L1467.97 692.553 L1468.52 692.553 L1469.08 692.553 L1469.64 692.553 L1470.2 692.553 L1470.76 692.553 L1471.32 692.553 L1471.88 692.553 L1472.44 692.553 L1473 692.553 L1473.56 692.553 L1474.12 692.553 L1474.68 692.553 L1475.24 692.553 L1475.79 692.553 L1476.35 692.553 L1476.91 692.553 L1477.47 692.553 L1478.03 692.553 L1478.59 692.553 L1479.15 692.553 L1479.71 692.553 L1480.27 692.553 L1480.83 692.553 L1481.39 692.553 L1481.95 692.553 L1482.51 692.553 L1483.07 692.553 L1483.62 692.553 L1484.18 692.553 L1484.74 692.553 L1485.3 692.553 L1485.86 692.553 L1486.42 692.553 L1486.98 692.553 L1487.54 692.553 L1488.1 692.553 L1488.66 692.553 L1489.22 692.553 L1489.78 692.553 L1490.34 692.553 L1490.89 692.553 L1491.45 692.553 L1492.01 692.553 L1492.57 692.553 L1493.13 692.553 L1493.69 692.553 L1494.25 692.553 L1494.81 692.553 L1495.37 692.553 L1495.93 692.553 L1496.49 692.553 L1497.05 692.553 L1497.61 692.553 L1498.16 692.553 L1498.72 692.553 L1499.28 692.553 L1499.84 692.553 L1500.4 692.553 L1500.96 692.553 L1501.52 692.553 L1502.08 692.553 L1502.64 692.553 L1503.2 692.553 L1503.76 692.553 L1504.32 692.553 L1504.88 692.553 L1505.44 692.553 L1505.99 692.553 L1506.55 692.553 L1507.11 692.553 L1507.67 692.553 L1508.23 692.553 L1508.79 692.553 L1509.35 692.553 L1509.91 692.553 L1510.47 692.553 L1511.03 692.553 L1511.59 692.553 L1512.15 692.553 L1512.71 692.553 L1513.26 692.553 L1513.82 692.553 L1514.38 692.553 L1514.94 692.553 L1515.5 692.553 L1516.06 692.553 L1516.62 692.553 L1517.18 692.553 L1517.74 692.553 L1518.3 692.553 L1518.86 692.553 L1519.42 692.553 L1519.98 692.553 L1520.53 692.553 L1521.09 692.553 L1521.65 692.553 L1522.21 692.553 L1522.77 692.553 L1523.33 692.553 L1523.89 692.553 L1524.45 692.553 L1525.01 692.553 L1525.57 692.553 L1526.13 692.553 L1526.69 692.553 L1527.25 692.553 L1527.81 692.553 L1528.36 692.553 L1528.92 692.553 L1529.48 692.553 L1530.04 692.553 L1530.6 692.553 L1531.16 692.553 L1531.72 692.553 L1532.28 692.553 L1532.84 692.553 L1533.4 692.553 L1533.96 692.553 L1534.52 692.553 L1535.08 692.553 L1535.63 692.553 L1536.19 692.553 L1536.75 692.553 L1537.31 692.553 L1537.87 692.553 L1538.43 692.553 L1538.99 692.553 L1539.55 692.553 L1540.11 692.553 L1540.67 692.553 L1541.23 692.553 L1541.79 692.553 L1542.35 692.553 L1542.9 692.553 L1543.46 692.553 L1544.02 692.553 L1544.58 692.553 L1545.14 692.553 L1545.7 692.553 L1546.26 692.553 L1546.82 692.553 L1547.38 692.553 L1547.94 692.553 L1548.5 692.553 L1549.06 692.553 L1549.62 692.553 L1550.18 692.553 L1550.73 692.553 L1551.29 692.553 L1551.85 692.553 L1552.41 692.553 L1552.97 692.553 L1553.53 692.553 L1554.09 692.553 L1554.65 692.553 L1555.21 692.553 L1555.77 692.553 L1556.33 692.553 L1556.89 692.553 L1557.45 692.553 L1558 692.553 L1558.56 692.553 L1559.12 692.553 L1559.68 692.553 L1560.24 692.553 L1560.8 692.553 L1561.36 692.553 L1561.92 692.553 L1562.48 692.553 L1563.04 692.553 L1563.6 692.553 L1564.16 692.553 L1564.72 692.553 L1565.28 692.553 L1565.83 692.553 L1566.39 692.553 L1566.95 692.553 L1567.51 692.553 L1568.07 692.553 L1568.63 692.553 L1569.19 692.553 L1569.75 692.553 L1570.31 692.553 L1570.87 692.553 L1571.43 692.553 L1571.99 692.553 L1572.55 692.553 L1573.1 692.553 L1573.66 692.553 L1574.22 692.553 L1574.78 692.553 L1575.34 692.553 L1575.9 692.553 L1576.46 692.553 L1577.02 692.553 L1577.58 692.553 L1578.14 692.553 L1578.7 692.553 L1579.26 692.553 L1579.82 692.553 L1580.37 692.553 L1580.93 692.553 L1581.49 692.553 L1582.05 692.553 L1582.61 692.553 L1583.17 692.553 L1583.73 692.553 L1584.29 692.553 L1584.85 692.553 L1585.41 692.553 L1585.97 692.553 L1586.53 692.553 L1587.09 692.553 L1587.65 692.553 L1588.2 692.553 L1588.76 692.553 L1589.32 692.553 L1589.88 692.553 L1590.44 692.553 L1591 692.553 L1591.56 692.553 L1592.12 692.553 L1592.68 692.553 L1593.24 692.553 L1593.8 692.553 L1594.36 692.553 L1594.92 692.553 L1595.47 692.553 L1596.03 692.553 L1596.59 692.553 L1597.15 692.553 L1597.71 692.553 L1598.27 692.553 L1598.83 692.553 L1599.39 692.553 L1599.95 692.553 L1600.51 692.553 L1601.07 692.553 L1601.63 692.553 L1602.19 692.553 L1602.74 692.553 L1603.3 692.553 L1603.86 692.553 L1604.42 692.553 L1604.98 692.553 L1605.54 692.553 L1606.1 692.553 L1606.66 692.553 L1607.22 692.553 L1607.78 692.553 L1608.34 692.553 L1608.9 692.553 L1609.46 692.553 L1610.02 692.553 L1610.57 692.553 L1611.13 692.553 L1611.69 692.553 L1612.25 692.553 L1612.81 692.553 L1613.37 692.553 L1613.93 692.553 L1614.49 692.553 L1615.05 692.553 L1615.61 692.553 L1616.17 692.553 L1616.73 692.553 L1617.29 692.553 L1617.84 692.553 L1618.4 692.553 L1618.96 692.553 L1619.52 692.553 L1620.08 692.553 L1620.64 692.553 L1621.2 692.553 L1621.76 692.553 L1622.32 692.553 L1622.88 692.553 L1623.44 692.553 L1624 692.553 L1624.56 692.553 L1625.11 692.553 L1625.67 692.553 L1626.23 692.553 L1626.79 692.553 L1627.35 692.553 L1627.91 692.553 L1628.47 692.553 L1629.03 692.553 L1629.59 692.553 L1630.15 692.553 L1630.71 692.553 L1631.27 692.553 L1631.83 692.553 L1632.39 692.553 L1632.94 692.553 L1633.5 692.553 L1634.06 692.553 L1634.62 692.553 L1635.18 692.553 L1635.74 692.553 L1636.3 692.553 L1636.86 692.553 L1637.42 692.553 L1637.98 692.553 L1638.54 692.553 L1639.1 692.553 L1639.66 692.553 L1640.21 692.553 L1640.77 692.553 L1641.33 692.553 L1641.89 692.553 L1642.45 692.553 L1643.01 692.553 L1643.57 692.553 L1644.13 692.553 L1644.69 692.553 L1645.25 692.553 L1645.81 692.553 L1646.37 692.553 L1646.93 692.553 L1647.48 692.553 L1648.04 692.553 L1648.6 692.553 L1649.16 692.553 L1649.72 692.553 L1650.28 692.553 L1650.84 692.553 L1651.4 692.553 L1651.96 692.553 L1652.52 692.553 L1653.08 692.553 L1653.64 692.553 L1654.2 692.553 L1654.76 692.553 L1655.31 692.553 L1655.87 692.553 L1656.43 692.553 L1656.99 692.553 L1657.55 692.553 L1658.11 692.553 L1658.67 692.553 L1659.23 692.553 L1659.79 692.553 L1660.35 692.553 L1660.91 692.553 L1661.47 692.553 L1662.03 692.553 L1662.58 692.553 L1663.14 692.553 L1663.7 692.553 L1664.26 692.553 L1664.82 692.553 L1665.38 692.553 L1665.94 692.553 L1666.5 692.553 L1667.06 692.553 L1667.62 692.553 L1668.18 692.553 L1668.74 692.553 L1669.3 692.553 L1669.85 692.553 L1670.41 692.553 L1670.97 692.553 L1671.53 692.553 L1672.09 692.553 L1672.65 692.553 L1673.21 692.553 L1673.77 692.553 L1674.33 692.553 L1674.89 692.553 L1675.45 692.553 L1676.01 692.553 L1676.57 692.553 L1677.13 692.553 L1677.68 692.553 L1678.24 692.553 L1678.8 692.553 L1679.36 692.553 L1679.92 692.553 L1680.48 692.553 L1681.04 692.553 L1681.6 692.553 L1682.16 692.553 L1682.72 692.553 L1683.28 692.553 L1683.84 692.553 L1684.4 692.553 L1684.95 692.553 L1685.51 692.553 L1686.07 692.553 L1686.63 692.553 L1687.19 692.553 L1687.75 692.553 L1688.31 692.553 L1688.87 692.553 L1689.43 692.553 L1689.99 692.553 L1690.55 692.553 L1691.11 692.553 L1691.67 692.553 L1692.23 692.553 L1692.78 692.553 L1693.34 692.553 L1693.9 692.553 L1694.46 692.553 L1695.02 692.553 L1695.58 692.553 L1696.14 692.553 L1696.7 692.553 L1697.26 692.553 L1697.82 692.553 L1698.38 692.553 L1698.94 692.553 L1699.5 692.553 L1700.05 692.553 L1700.61 692.553 L1701.17 692.553 L1701.73 692.553 L1702.29 692.553 L1702.85 692.553 L1703.41 692.553 L1703.97 692.553 L1704.53 692.553 L1705.09 692.553 L1705.65 692.553 L1706.21 692.553 L1706.77 692.553 L1707.32 692.553 L1707.88 692.553 L1708.44 692.553 L1709 692.553 L1709.56 692.553 L1710.12 692.553 L1710.68 692.553 L1711.24 692.553 L1711.8 692.553 L1712.36 692.553 L1712.92 692.553 L1713.48 692.553 L1714.04 692.553 L1714.6 692.553 L1715.15 692.553 L1715.71 692.553 L1716.27 692.553 L1716.83 692.553 L1717.39 692.553 L1717.95 692.553 L1718.51 692.553 L1719.07 692.553 L1719.63 692.553 L1720.19 692.553 L1720.75 692.553 L1721.31 692.553 L1721.87 692.553 L1722.42 692.553 L1722.98 692.553 L1723.54 692.553 L1724.1 692.553 L1724.66 692.553 L1725.22 692.553 L1725.78 692.553 L1726.34 692.553 L1726.9 692.553 L1727.46 692.553 L1728.02 692.553 L1728.58 692.553 L1729.14 692.553 L1729.69 692.553 L1730.25 692.553 L1730.81 692.553 L1731.37 692.553 L1731.93 692.553 L1732.49 692.553 L1733.05 692.553 L1733.61 692.553 L1734.17 692.553 L1734.73 692.553 L1735.29 692.553 L1735.85 692.553 L1736.41 692.553 L1736.97 692.553 L1737.52 692.553 L1738.08 692.553 L1738.64 692.553 L1739.2 692.553 L1739.76 692.553 L1740.32 692.553 L1740.88 692.553 L1741.44 692.553 L1742 692.553 L1742.56 692.553 L1743.12 692.553 L1743.68 692.553 L1744.24 692.553 L1744.79 692.553 L1745.35 692.553 L1745.91 692.553 L1746.47 692.553 L1747.03 692.553 L1747.59 692.553 L1748.15 692.553 L1748.71 692.553 L1749.27 692.553 L1749.83 692.553 L1750.39 692.553 L1750.95 692.553 L1751.51 692.553 L1752.06 692.553 L1752.62 692.553 L1753.18 692.553 L1753.74 692.553 L1754.3 692.553 L1754.86 692.553 L1755.42 692.553 L1755.98 692.553 L1756.54 692.553 L1757.1 692.553 L1757.66 692.553 L1758.22 692.553 L1758.78 692.553 L1759.34 692.553 L1759.89 692.553 L1760.45 692.553 L1761.01 692.553 L1761.57 692.553 L1762.13 692.553 L1762.69 692.553 L1763.25 692.553 L1763.81 692.553 L1764.37 692.553 L1764.93 692.553 L1765.49 692.553 L1766.05 692.553 L1766.61 692.553 L1767.16 692.553 L1767.72 692.553 L1768.28 692.553 L1768.84 692.553 L1769.4 692.553 L1769.96 692.553 L1770.52 692.553 L1771.08 692.553 L1771.64 692.553 L1772.2 692.553 L1772.76 692.553 L1773.32 692.553 L1773.88 692.553 L1774.43 692.553 L1774.99 692.553 L1775.55 692.553 L1776.11 692.553 L1776.67 692.553 L1777.23 692.553 L1777.79 692.553 L1778.35 692.553 L1778.91 692.553 L1779.47 692.553 L1780.03 692.553 L1780.59 692.553 L1781.15 692.553 L1781.71 692.553 L1782.26 692.553 L1782.82 692.553 L1783.38 692.553 L1783.94 692.553 L1784.5 692.553 L1785.06 692.553 L1785.62 692.553 L1786.18 692.553 L1786.74 692.553 L1787.3 692.553 L1787.86 692.553 L1788.42 692.553 L1788.98 692.553 L1789.53 692.553 L1790.09 692.553 L1790.65 692.553 L1791.21 692.553 L1791.77 692.553 L1792.33 692.553 L1792.89 692.553 L1793.45 692.553 L1794.01 692.553 L1794.57 692.553 L1795.13 692.553 L1795.69 692.553 L1796.25 692.553 L1796.8 692.553 L1797.36 692.553 L1797.92 692.553 L1798.48 692.553 L1799.04 692.553 L1799.6 692.553 L1800.16 692.553 L1800.72 692.553 L1801.28 692.553 L1801.84 692.553 L1802.4 692.553 L1802.96 692.553 L1803.52 692.553 L1804.08 692.553 L1804.63 692.553 L1805.19 692.553 L1805.75 692.553 L1806.31 692.553 L1806.87 692.553 L1807.43 692.553 L1807.99 692.553 L1808.55 692.553 L1809.11 692.553 L1809.67 692.553 L1810.23 692.553 L1810.79 692.553 L1811.35 692.553 L1811.9 692.553 L1812.46 692.553 L1813.02 692.553 L1813.58 692.553 L1814.14 692.553 L1814.7 692.553 L1815.26 692.553 L1815.82 692.553 L1816.38 692.553 L1816.94 692.553 L1817.5 692.553 L1818.06 692.553 L1818.62 692.553 L1819.18 692.553 L1819.73 692.553 L1820.29 692.553 L1820.85 692.553 L1821.41 692.553 L1821.97 692.553 L1822.53 692.553 L1823.09 692.553 L1823.65 692.553 L1824.21 692.553 L1824.77 692.553 L1825.33 692.553 L1825.89 692.553 L1826.45 692.553 L1827 692.553 L1827.56 692.553 L1828.12 692.553 L1828.68 692.553 L1829.24 692.553 L1829.8 692.553 L1830.36 692.553 L1830.92 692.553 L1831.48 692.553 L1832.04 692.553 L1832.6 692.553 L1833.16 692.553 L1833.72 692.553 L1834.27 692.553 L1834.83 692.553 L1835.39 692.553 L1835.95 692.553 L1836.51 692.553 L1837.07 692.553 L1837.63 692.553 L1838.19 692.553 L1838.19 684.235 L1837.63 684.235 L1837.07 684.235 L1836.51 684.235 L1835.95 684.235 L1835.39 684.235 L1834.83 684.235 L1834.27 684.235 L1833.72 684.235 L1833.16 684.235 L1832.6 684.235 L1832.04 684.235 L1831.48 684.235 L1830.92 684.235 L1830.36 684.235 L1829.8 684.235 L1829.24 684.235 L1828.68 684.235 L1828.12 684.235 L1827.56 684.235 L1827 684.235 L1826.45 684.235 L1825.89 684.235 L1825.33 684.235 L1824.77 684.235 L1824.21 684.235 L1823.65 684.235 L1823.09 684.235 L1822.53 684.235 L1821.97 684.235 L1821.41 684.235 L1820.85 684.235 L1820.29 684.235 L1819.73 684.235 L1819.18 684.235 L1818.62 684.235 L1818.06 684.235 L1817.5 684.235 L1816.94 684.235 L1816.38 684.235 L1815.82 684.235 L1815.26 684.235 L1814.7 684.235 L1814.14 684.235 L1813.58 684.235 L1813.02 684.235 L1812.46 684.235 L1811.9 684.235 L1811.35 684.235 L1810.79 684.235 L1810.23 684.235 L1809.67 684.235 L1809.11 684.235 L1808.55 684.235 L1807.99 684.235 L1807.43 684.235 L1806.87 684.235 L1806.31 684.235 L1805.75 684.235 L1805.19 684.235 L1804.63 684.235 L1804.08 684.235 L1803.52 684.235 L1802.96 684.235 L1802.4 684.235 L1801.84 684.235 L1801.28 684.235 L1800.72 684.235 L1800.16 684.235 L1799.6 684.235 L1799.04 684.235 L1798.48 684.235 L1797.92 684.235 L1797.36 684.235 L1796.8 684.235 L1796.25 684.235 L1795.69 684.235 L1795.13 684.235 L1794.57 684.235 L1794.01 684.235 L1793.45 684.235 L1792.89 684.235 L1792.33 684.235 L1791.77 684.235 L1791.21 684.235 L1790.65 684.235 L1790.09 684.235 L1789.53 684.235 L1788.98 684.235 L1788.42 684.235 L1787.86 684.235 L1787.3 684.235 L1786.74 684.235 L1786.18 684.235 L1785.62 684.235 L1785.06 684.235 L1784.5 684.235 L1783.94 684.235 L1783.38 684.235 L1782.82 684.235 L1782.26 684.235 L1781.71 684.235 L1781.15 684.235 L1780.59 684.235 L1780.03 684.235 L1779.47 684.235 L1778.91 684.235 L1778.35 684.235 L1777.79 684.235 L1777.23 684.235 L1776.67 684.235 L1776.11 684.235 L1775.55 684.235 L1774.99 684.235 L1774.43 684.235 L1773.88 684.235 L1773.32 684.235 L1772.76 684.235 L1772.2 684.235 L1771.64 684.235 L1771.08 684.235 L1770.52 684.235 L1769.96 684.235 L1769.4 684.235 L1768.84 684.235 L1768.28 684.235 L1767.72 684.235 L1767.16 684.235 L1766.61 684.235 L1766.05 684.235 L1765.49 684.235 L1764.93 684.235 L1764.37 684.235 L1763.81 684.235 L1763.25 684.235 L1762.69 684.235 L1762.13 684.235 L1761.57 684.235 L1761.01 684.235 L1760.45 684.235 L1759.89 684.235 L1759.34 684.235 L1758.78 684.235 L1758.22 684.235 L1757.66 684.235 L1757.1 684.235 L1756.54 684.235 L1755.98 684.235 L1755.42 684.235 L1754.86 684.235 L1754.3 684.235 L1753.74 684.235 L1753.18 684.235 L1752.62 684.235 L1752.06 684.235 L1751.51 684.235 L1750.95 684.235 L1750.39 684.235 L1749.83 684.235 L1749.27 684.235 L1748.71 684.235 L1748.15 684.235 L1747.59 684.235 L1747.03 684.235 L1746.47 684.235 L1745.91 684.235 L1745.35 684.235 L1744.79 684.235 L1744.24 684.235 L1743.68 684.235 L1743.12 684.235 L1742.56 684.235 L1742 684.235 L1741.44 684.235 L1740.88 684.235 L1740.32 684.235 L1739.76 684.235 L1739.2 684.235 L1738.64 684.235 L1738.08 684.235 L1737.52 684.235 L1736.97 684.235 L1736.41 684.235 L1735.85 684.235 L1735.29 684.235 L1734.73 684.235 L1734.17 684.235 L1733.61 684.235 L1733.05 684.235 L1732.49 684.235 L1731.93 684.235 L1731.37 684.235 L1730.81 684.235 L1730.25 684.235 L1729.69 684.235 L1729.14 684.235 L1728.58 684.235 L1728.02 684.235 L1727.46 684.235 L1726.9 684.235 L1726.34 684.235 L1725.78 684.235 L1725.22 684.235 L1724.66 684.235 L1724.1 684.235 L1723.54 684.235 L1722.98 684.235 L1722.42 684.235 L1721.87 684.235 L1721.31 684.235 L1720.75 684.235 L1720.19 684.235 L1719.63 684.235 L1719.07 684.235 L1718.51 684.235 L1717.95 684.235 L1717.39 684.235 L1716.83 684.235 L1716.27 684.235 L1715.71 684.235 L1715.15 684.235 L1714.6 684.235 L1714.04 684.235 L1713.48 684.235 L1712.92 684.235 L1712.36 684.235 L1711.8 684.235 L1711.24 684.235 L1710.68 684.235 L1710.12 684.235 L1709.56 684.235 L1709 684.235 L1708.44 684.235 L1707.88 684.235 L1707.32 684.235 L1706.77 684.235 L1706.21 684.235 L1705.65 684.235 L1705.09 684.235 L1704.53 684.235 L1703.97 684.235 L1703.41 684.235 L1702.85 684.235 L1702.29 684.235 L1701.73 684.235 L1701.17 684.235 L1700.61 684.235 L1700.05 684.235 L1699.5 684.235 L1698.94 684.235 L1698.38 684.235 L1697.82 684.235 L1697.26 684.235 L1696.7 684.235 L1696.14 684.235 L1695.58 684.235 L1695.02 684.235 L1694.46 684.235 L1693.9 684.235 L1693.34 684.235 L1692.78 684.235 L1692.23 684.235 L1691.67 684.235 L1691.11 684.235 L1690.55 684.235 L1689.99 684.235 L1689.43 684.235 L1688.87 684.235 L1688.31 684.235 L1687.75 684.235 L1687.19 684.235 L1686.63 684.235 L1686.07 684.235 L1685.51 684.235 L1684.95 684.235 L1684.4 684.235 L1683.84 684.235 L1683.28 684.235 L1682.72 684.235 L1682.16 684.235 L1681.6 684.235 L1681.04 684.235 L1680.48 684.235 L1679.92 684.235 L1679.36 684.235 L1678.8 684.235 L1678.24 684.235 L1677.68 684.235 L1677.13 684.235 L1676.57 684.235 L1676.01 684.235 L1675.45 684.235 L1674.89 684.235 L1674.33 684.235 L1673.77 684.235 L1673.21 684.235 L1672.65 684.235 L1672.09 684.235 L1671.53 684.235 L1670.97 684.235 L1670.41 684.235 L1669.85 684.235 L1669.3 684.235 L1668.74 684.235 L1668.18 684.235 L1667.62 684.235 L1667.06 684.235 L1666.5 684.235 L1665.94 684.235 L1665.38 684.235 L1664.82 684.235 L1664.26 684.235 L1663.7 684.235 L1663.14 684.235 L1662.58 684.235 L1662.03 684.235 L1661.47 684.235 L1660.91 684.235 L1660.35 684.235 L1659.79 684.235 L1659.23 684.235 L1658.67 684.235 L1658.11 684.235 L1657.55 684.235 L1656.99 684.235 L1656.43 684.235 L1655.87 684.235 L1655.31 684.235 L1654.76 684.235 L1654.2 684.235 L1653.64 684.235 L1653.08 684.235 L1652.52 684.235 L1651.96 684.235 L1651.4 684.235 L1650.84 684.235 L1650.28 684.235 L1649.72 684.235 L1649.16 684.235 L1648.6 684.235 L1648.04 684.235 L1647.48 684.235 L1646.93 684.235 L1646.37 684.235 L1645.81 684.235 L1645.25 684.235 L1644.69 684.235 L1644.13 684.235 L1643.57 684.235 L1643.01 684.235 L1642.45 684.235 L1641.89 684.235 L1641.33 684.235 L1640.77 684.235 L1640.21 684.235 L1639.66 684.235 L1639.1 684.235 L1638.54 684.235 L1637.98 684.235 L1637.42 684.235 L1636.86 684.235 L1636.3 684.235 L1635.74 684.235 L1635.18 684.235 L1634.62 684.235 L1634.06 684.235 L1633.5 684.235 L1632.94 684.235 L1632.39 684.235 L1631.83 684.235 L1631.27 684.235 L1630.71 684.235 L1630.15 684.235 L1629.59 684.235 L1629.03 684.235 L1628.47 684.235 L1627.91 684.235 L1627.35 684.235 L1626.79 684.235 L1626.23 684.235 L1625.67 684.235 L1625.11 684.235 L1624.56 684.235 L1624 684.235 L1623.44 684.235 L1622.88 684.235 L1622.32 684.235 L1621.76 684.235 L1621.2 684.235 L1620.64 684.235 L1620.08 684.235 L1619.52 684.235 L1618.96 684.235 L1618.4 684.235 L1617.84 684.235 L1617.29 684.235 L1616.73 684.235 L1616.17 684.235 L1615.61 684.235 L1615.05 684.235 L1614.49 684.235 L1613.93 684.235 L1613.37 684.235 L1612.81 684.235 L1612.25 684.235 L1611.69 684.235 L1611.13 684.235 L1610.57 684.235 L1610.02 684.235 L1609.46 684.235 L1608.9 684.235 L1608.34 684.235 L1607.78 684.235 L1607.22 684.235 L1606.66 684.235 L1606.1 684.235 L1605.54 684.235 L1604.98 684.235 L1604.42 684.235 L1603.86 684.235 L1603.3 684.235 L1602.74 684.235 L1602.19 684.235 L1601.63 684.235 L1601.07 684.235 L1600.51 684.235 L1599.95 684.235 L1599.39 684.235 L1598.83 684.235 L1598.27 684.235 L1597.71 684.235 L1597.15 684.235 L1596.59 684.235 L1596.03 684.235 L1595.47 684.235 L1594.92 684.235 L1594.36 684.235 L1593.8 684.235 L1593.24 684.235 L1592.68 684.235 L1592.12 684.235 L1591.56 684.235 L1591 684.235 L1590.44 684.235 L1589.88 684.235 L1589.32 684.235 L1588.76 684.235 L1588.2 684.235 L1587.65 684.235 L1587.09 684.235 L1586.53 684.235 L1585.97 684.235 L1585.41 684.235 L1584.85 684.235 L1584.29 684.235 L1583.73 684.235 L1583.17 684.235 L1582.61 684.235 L1582.05 684.235 L1581.49 684.235 L1580.93 684.235 L1580.37 684.235 L1579.82 684.235 L1579.26 684.235 L1578.7 684.235 L1578.14 684.235 L1577.58 684.235 L1577.02 684.235 L1576.46 684.235 L1575.9 684.235 L1575.34 684.235 L1574.78 684.235 L1574.22 684.235 L1573.66 684.235 L1573.1 684.235 L1572.55 684.235 L1571.99 684.235 L1571.43 684.235 L1570.87 684.235 L1570.31 684.235 L1569.75 684.235 L1569.19 684.235 L1568.63 684.235 L1568.07 684.235 L1567.51 684.235 L1566.95 684.235 L1566.39 684.235 L1565.83 684.235 L1565.28 684.235 L1564.72 684.235 L1564.16 684.235 L1563.6 684.235 L1563.04 684.235 L1562.48 684.235 L1561.92 684.235 L1561.36 684.235 L1560.8 684.235 L1560.24 684.235 L1559.68 684.235 L1559.12 684.235 L1558.56 684.235 L1558 684.235 L1557.45 684.235 L1556.89 684.235 L1556.33 684.235 L1555.77 684.235 L1555.21 684.235 L1554.65 684.235 L1554.09 684.235 L1553.53 684.235 L1552.97 684.235 L1552.41 684.235 L1551.85 684.235 L1551.29 684.235 L1550.73 684.235 L1550.18 684.235 L1549.62 684.235 L1549.06 684.235 L1548.5 684.235 L1547.94 684.235 L1547.38 684.235 L1546.82 684.235 L1546.26 684.235 L1545.7 684.235 L1545.14 684.235 L1544.58 684.235 L1544.02 684.235 L1543.46 684.235 L1542.9 684.235 L1542.35 684.235 L1541.79 684.235 L1541.23 684.235 L1540.67 684.235 L1540.11 684.235 L1539.55 684.235 L1538.99 684.235 L1538.43 684.235 L1537.87 684.235 L1537.31 684.235 L1536.75 684.235 L1536.19 684.235 L1535.63 684.235 L1535.08 684.235 L1534.52 684.235 L1533.96 684.235 L1533.4 684.235 L1532.84 684.235 L1532.28 684.235 L1531.72 684.235 L1531.16 684.235 L1530.6 684.235 L1530.04 684.235 L1529.48 684.235 L1528.92 684.235 L1528.36 684.235 L1527.81 684.235 L1527.25 684.235 L1526.69 684.235 L1526.13 684.235 L1525.57 684.235 L1525.01 684.235 L1524.45 684.235 L1523.89 684.235 L1523.33 684.235 L1522.77 684.235 L1522.21 684.235 L1521.65 684.235 L1521.09 684.235 L1520.53 684.235 L1519.98 684.235 L1519.42 684.235 L1518.86 684.235 L1518.3 684.235 L1517.74 684.235 L1517.18 684.235 L1516.62 684.235 L1516.06 684.235 L1515.5 684.235 L1514.94 684.235 L1514.38 684.235 L1513.82 684.235 L1513.26 684.235 L1512.71 684.235 L1512.15 684.235 L1511.59 684.235 L1511.03 684.235 L1510.47 684.235 L1509.91 684.235 L1509.35 684.235 L1508.79 684.235 L1508.23 684.235 L1507.67 684.235 L1507.11 684.235 L1506.55 684.235 L1505.99 684.235 L1505.44 684.235 L1504.88 684.235 L1504.32 684.235 L1503.76 684.235 L1503.2 684.235 L1502.64 684.235 L1502.08 684.235 L1501.52 684.235 L1500.96 684.235 L1500.4 684.235 L1499.84 684.235 L1499.28 684.235 L1498.72 684.235 L1498.16 684.235 L1497.61 684.235 L1497.05 684.235 L1496.49 684.235 L1495.93 684.235 L1495.37 684.235 L1494.81 684.235 L1494.25 684.235 L1493.69 684.235 L1493.13 684.235 L1492.57 684.235 L1492.01 684.235 L1491.45 684.235 L1490.89 684.235 L1490.34 684.235 L1489.78 684.235 L1489.22 684.235 L1488.66 684.235 L1488.1 684.235 L1487.54 684.235 L1486.98 684.235 L1486.42 684.235 L1485.86 684.235 L1485.3 684.235 L1484.74 684.235 L1484.18 684.235 L1483.62 684.235 L1483.07 684.235 L1482.51 684.235 L1481.95 684.235 L1481.39 684.235 L1480.83 684.235 L1480.27 684.235 L1479.71 684.235 L1479.15 684.235 L1478.59 684.235 L1478.03 684.235 L1477.47 684.235 L1476.91 684.235 L1476.35 684.235 L1475.79 684.235 L1475.24 684.235 L1474.68 684.235 L1474.12 684.235 L1473.56 684.235 L1473 684.235 L1472.44 684.235 L1471.88 684.235 L1471.32 684.235 L1470.76 684.235 L1470.2 684.235 L1469.64 684.235 L1469.08 684.235 L1468.52 684.235 L1467.97 684.235 L1467.41 684.235 L1466.85 684.235 L1466.29 684.235 L1465.73 684.235 L1465.17 684.235 L1464.61 684.235 L1464.05 684.235 L1463.49 684.235 L1462.93 684.235 L1462.37 684.235 L1461.81 684.235 L1461.25 684.235 L1460.7 684.235 L1460.14 684.235 L1459.58 684.235 L1459.02 684.235 L1458.46 684.235 L1457.9 684.235 L1457.34 684.235 L1456.78 684.235 L1456.22 684.235 L1455.66 684.235 L1455.1 684.235 L1454.54 684.235 L1453.98 684.235 L1453.42 684.235 L1452.87 684.235 L1452.31 684.235 L1451.75 684.235 L1451.19 684.235 L1450.63 684.235 L1450.07 684.235 L1449.51 684.235 L1448.95 684.235 L1448.39 684.235 L1447.83 684.235 L1447.27 684.235 L1446.71 684.235 L1446.15 684.235 L1445.6 684.235 L1445.04 684.235 L1444.48 684.235 L1443.92 684.235 L1443.36 684.235 L1442.8 684.235 L1442.24 684.235 L1441.68 684.235 L1441.12 684.235 L1440.56 684.235 L1440 684.235 L1439.44 684.235 L1438.88 684.235 L1438.33 684.235 L1437.77 684.235 L1437.21 684.235 L1436.65 684.235 L1436.09 684.235 L1435.53 684.235 L1434.97 684.235 L1434.41 684.235 L1433.85 684.235 L1433.29 684.235 L1432.73 684.235 L1432.17 684.235 L1431.61 684.235 L1431.05 684.235 L1430.5 684.235 L1429.94 684.235 L1429.38 684.235 L1428.82 684.235 L1428.26 684.235 L1427.7 684.235 L1427.14 684.235 L1426.58 684.235 L1426.02 684.235 L1425.46 684.235 L1424.9 684.235 L1424.34 684.235 L1423.78 684.235 L1423.23 684.235 L1422.67 684.235 L1422.11 684.235 L1421.55 684.235 L1420.99 684.235 L1420.43 684.235 L1419.87 684.235 L1419.31 684.235 L1418.75 684.235 L1418.19 684.235 L1417.63 684.235 L1417.07 684.235 L1416.51 684.235 L1415.95 684.235 L1415.4 684.235 L1414.84 684.235 L1414.28 684.235 L1413.72 684.235 L1413.16 684.235 L1412.6 684.235 L1412.04 684.235 L1411.48 684.235 L1410.92 684.235 L1410.36 684.235 L1409.8 684.235 L1409.24 684.235 L1408.68 684.235 L1408.13 684.235 L1407.57 684.235 L1407.01 684.235 L1406.45 684.235 L1405.89 684.235 L1405.33 684.235 L1404.77 684.235 L1404.21 684.235 L1403.65 684.235 L1403.09 684.235 L1402.53 684.235 L1401.97 684.235 L1401.41 684.235 L1400.86 684.235 L1400.3 684.235 L1399.74 684.235 L1399.18 684.235 L1398.62 684.235 L1398.06 684.235 L1397.5 684.235 L1396.94 684.235 L1396.38 684.235 L1395.82 684.235 L1395.26 684.235 L1394.7 684.235 L1394.14 684.235 L1393.58 684.235 L1393.03 684.235 L1392.47 684.235 L1391.91 684.235 L1391.35 684.235 L1390.79 684.235 L1390.23 684.235 L1389.67 684.235 L1389.11 684.235 L1388.55 684.235 L1387.99 684.235 L1387.43 684.235 L1386.87 684.235 L1386.31 684.235 L1385.76 684.235 L1385.2 684.235 L1384.64 684.235 L1384.08 684.235 L1383.52 684.235 L1382.96 684.235 L1382.4 684.235 L1381.84 684.235 L1381.28 684.235 L1380.72 684.235 L1380.16 684.235 L1379.6 684.235 L1379.04 684.235 L1378.49 684.235 L1377.93 684.235 L1377.37 684.235 L1376.81 684.235 L1376.25 684.235 L1375.69 684.235 L1375.13 684.235 L1374.57 684.235 L1374.01 684.235 L1373.45 684.235 L1372.89 684.235 L1372.33 684.235 L1371.77 684.235 L1371.21 684.235 L1370.66 684.235 L1370.1 684.235 L1369.54 684.235 L1368.98 684.235 L1368.42 684.235 L1367.86 684.235 L1367.3 684.235 L1366.74 684.235 L1366.18 684.235 L1365.62 684.235 L1365.06 684.235 L1364.5 684.235 L1363.94 684.235 L1363.39 684.235 L1362.83 684.235 L1362.27 684.235 L1361.71 684.235 L1361.15 684.235 L1360.59 684.235 L1360.03 684.235 L1359.47 684.235 L1358.91 684.235 L1358.35 684.235 L1357.79 684.235 L1357.23 684.235 L1356.67 684.235 L1356.12 684.235 L1355.56 684.235 L1355 684.235 L1354.44 684.235 L1353.88 684.235 L1353.32 684.235 L1352.76 684.235 L1352.2 684.235 L1351.64 684.235 L1351.08 684.235 L1350.52 684.235 L1349.96 684.235 L1349.4 684.235 L1348.84 684.235 L1348.29 684.235 L1347.73 684.235 L1347.17 684.235 L1346.61 684.235 L1346.05 684.235 L1345.49 684.235 L1344.93 684.235 L1344.37 684.235 L1343.81 684.235 L1343.25 684.235 L1342.69 684.235 L1342.13 684.235 L1341.57 684.235 L1341.02 684.235 L1340.46 684.235 L1339.9 684.235 L1339.34 684.235 L1338.78 684.235 L1338.22 684.235 L1337.66 684.235 L1337.1 684.235 L1336.54 684.235 L1335.98 684.235 L1335.42 684.235 L1334.86 684.235 L1334.3 684.235 L1333.75 684.235 L1333.19 684.235 L1332.63 684.235 L1332.07 684.235 L1331.51 684.235 L1330.95 684.235 L1330.39 684.235 L1329.83 684.235 L1329.27 684.235 L1328.71 684.235 L1328.15 684.235 L1327.59 684.235 L1327.03 684.235 L1326.47 684.235 L1325.92 684.235 L1325.36 684.235 L1324.8 684.235 L1324.24 684.235 L1323.68 684.235 L1323.12 684.235 L1322.56 684.235 L1322 684.235 L1321.44 684.235 L1320.88 684.235 L1320.32 684.235 L1319.76 684.235 L1319.2 684.235 L1318.65 684.235 L1318.09 684.235 L1317.53 684.235 L1316.97 684.235 L1316.41 684.235 L1315.85 684.235 L1315.29 684.235 L1314.73 684.235 L1314.17 684.235 L1313.61 684.235 L1313.05 684.235 L1312.49 684.235 L1311.93 684.235 L1311.38 684.235 L1310.82 684.235 L1310.26 684.235 L1309.7 684.235 L1309.14 684.235 L1308.58 684.235 L1308.02 684.235 L1307.46 684.235 L1306.9 684.235 L1306.34 684.235 L1305.78 684.235 L1305.22 684.235 L1304.66 684.235 L1304.1 684.235 L1303.55 684.235 L1302.99 684.235 L1302.43 684.235 L1301.87 684.235 L1301.31 684.235 L1300.75 684.235 L1300.19 684.235 L1299.63 684.235 L1299.07 684.235 L1298.51 684.235 L1297.95 684.235 L1297.39 684.235 L1296.83 684.235 L1296.28 684.235 L1295.72 684.235 L1295.16 684.235 L1294.6 684.235 L1294.04 684.235 L1293.48 684.235 L1292.92 684.235 L1292.36 684.235 L1291.8 684.235 L1291.24 684.235 L1290.68 684.235 L1290.12 684.235 L1289.56 684.235 L1289 684.235 L1288.45 684.235 L1287.89 684.235 L1287.33 684.235 L1286.77 684.235 L1286.21 684.235 L1285.65 684.235 L1285.09 684.235 L1284.53 684.235 L1283.97 684.235 L1283.41 684.235 L1282.85 684.235 L1282.29 684.235 L1281.73 684.235 L1281.18 684.235 L1280.62 684.235 L1280.06 684.235 L1279.5 684.235 L1278.94 684.235 L1278.38 684.235 L1277.82 684.235 L1277.26 684.235 L1276.7 684.235 L1276.14 684.235 L1275.58 684.235 L1275.02 684.235 L1274.46 684.235 L1273.91 684.235 L1273.35 684.235 L1272.79 684.235 L1272.23 684.235 L1271.67 684.235 L1271.11 684.235 L1270.55 684.235 L1269.99 684.235 L1269.43 684.235 L1268.87 684.235 L1268.31 684.235 L1267.75 684.235 L1267.19 684.235 L1266.63 684.235 L1266.08 684.235 L1265.52 684.235 L1264.96 684.235 L1264.4 684.235 L1263.84 684.235 L1263.28 684.235 L1262.72 684.235 L1262.16 684.235 L1261.6 684.235 L1261.04 684.235 L1260.48 684.235 L1259.92 684.235 L1259.36 684.235 L1258.81 684.235 L1258.25 684.235 L1257.69 684.235 L1257.13 684.235 L1256.57 684.235 L1256.01 684.235 L1255.45 684.235 L1254.89 684.235 L1254.33 684.235 L1253.77 684.235 L1253.21 684.235 L1252.65 684.235 L1252.09 684.235 L1251.54 684.235 L1250.98 684.235 L1250.42 684.235 L1249.86 684.235 L1249.3 684.235 L1248.74 684.235 L1248.18 684.235 L1247.62 684.235 L1247.06 684.235 L1246.5 684.235 L1245.94 684.235 L1245.38 684.235 L1244.82 684.235 L1244.26 684.235 L1243.71 684.235 L1243.15 684.235 L1242.59 684.235 L1242.03 684.235 L1241.47 684.235 L1240.91 684.235 L1240.35 684.235 L1239.79 684.235 L1239.23 684.235 L1238.67 684.235 L1238.11 684.235 L1237.55 684.235 L1236.99 684.235 L1236.44 684.235 L1235.88 684.235 L1235.32 684.235 L1234.76 684.235 L1234.2 684.235 L1233.64 684.235 L1233.08 684.235 L1232.52 684.235 L1231.96 684.235 L1231.4 684.235 L1230.84 684.235 L1230.28 684.235 L1229.72 684.235 L1229.17 684.235 L1228.61 684.235 L1228.05 684.235 L1227.49 684.235 L1226.93 684.235 L1226.37 684.235 L1225.81 684.235 L1225.25 684.235 L1224.69 684.235 L1224.13 684.235 L1223.57 684.235 L1223.01 684.235 L1222.45 684.235 L1221.89 684.235 L1221.34 684.235 L1220.78 684.235 L1220.22 684.235 L1219.66 684.235 L1219.1 684.235 L1218.54 684.235 L1217.98 684.235 L1217.42 684.235 L1216.86 684.235 L1216.3 684.235 L1215.74 684.235 L1215.18 684.235 L1214.62 684.235 L1214.07 684.235 L1213.51 684.235 L1212.95 684.235 L1212.39 684.235 L1211.83 684.235 L1211.27 684.235 L1210.71 684.235 L1210.15 684.235 L1209.59 684.235 L1209.03 684.235 L1208.47 684.235 L1207.91 684.235 L1207.35 684.235 L1206.8 684.235 L1206.24 684.235 L1205.68 684.235 L1205.12 684.235 L1204.56 684.235 L1204 684.235 L1203.44 684.235 L1202.88 684.235 L1202.32 684.235 L1201.76 684.235 L1201.2 684.235 L1200.64 684.235 L1200.08 684.235 L1199.52 684.235 L1198.97 684.235 L1198.41 684.235 L1197.85 684.235 L1197.29 684.235 L1196.73 684.235 L1196.17 684.235 L1195.61 684.235 L1195.05 684.235 L1194.49 684.235 L1193.93 684.235 L1193.37 684.235 L1192.81 684.235 L1192.25 684.235 L1191.7 684.235 L1191.14 684.235 L1190.58 684.235 L1190.02 684.235 L1189.46 684.235 L1188.9 684.235 L1188.34 684.235 L1187.78 684.235 L1187.22 684.235 L1186.66 684.235 L1186.1 684.235 L1185.54 684.235 L1184.98 684.235 L1184.43 684.235 L1183.87 684.235 L1183.31 684.235 L1182.75 684.235 L1182.19 684.235 L1181.63 684.235 L1181.07 684.235 L1180.51 684.235 L1179.95 684.235 L1179.39 684.235 L1178.83 684.235 L1178.27 684.235 L1177.71 684.235 L1177.15 684.235 L1176.6 684.235 L1176.04 684.235 L1175.48 684.235 L1174.92 684.235 L1174.36 684.235 L1173.8 684.235 L1173.24 684.235 L1172.68 684.235 L1172.12 684.235 L1171.56 684.235 L1171 684.235 L1170.44 684.235 L1169.88 684.235 L1169.33 684.235 L1168.77 684.235 L1168.21 684.235 L1167.65 684.235 L1167.09 684.235 L1166.53 684.235 L1165.97 684.235 L1165.41 684.235 L1164.85 684.235 L1164.29 684.235 L1163.73 684.235 L1163.17 684.235 L1162.61 684.235 L1162.05 684.235 L1161.5 684.235 L1160.94 684.235 L1160.38 684.235 L1159.82 684.235 L1159.26 684.235 L1158.7 684.235 L1158.14 684.235 L1157.58 684.235 L1157.02 684.235 L1156.46 684.235 L1155.9 684.235 L1155.34 684.235 L1154.78 684.235 L1154.23 684.235 L1153.67 684.235 L1153.11 684.235 L1152.55 684.235 L1151.99 684.235 L1151.43 684.235 L1150.87 684.235 L1150.31 684.235 L1149.75 684.235 L1149.19 684.235 L1148.63 684.235 L1148.07 684.235 L1147.51 684.235 L1146.96 684.235 L1146.4 684.235 L1145.84 684.235 L1145.28 684.235 L1144.72 684.235 L1144.16 684.235 L1143.6 684.235 L1143.04 684.235 L1142.48 684.235 L1141.92 684.235 L1141.36 684.235 L1140.8 684.235 L1140.24 684.235 L1139.68 684.235 L1139.13 684.235 L1138.57 684.235 L1138.01 684.235 L1137.45 684.235 L1136.89 684.235 L1136.33 684.235 L1135.77 684.235 L1135.21 684.235 L1134.65 684.235 L1134.09 684.235 L1133.53 684.235 L1132.97 684.235 L1132.41 684.235 L1131.86 684.235 L1131.3 684.235 L1130.74 684.235 L1130.18 684.235 L1129.62 684.235 L1129.06 684.235 L1128.5 684.235 L1127.94 684.235 L1127.38 684.235 L1126.82 684.235 L1126.26 684.235 L1125.7 684.235 L1125.14 684.235 L1124.59 684.235 L1124.03 684.235 L1123.47 684.235 L1122.91 684.235 L1122.35 684.235 L1121.79 684.235 L1121.23 684.235 L1120.67 684.235 L1120.11 684.235 L1119.55 684.235 L1118.99 684.235 L1118.43 684.235 L1117.87 684.235 L1117.31 684.235 L1116.76 684.235 L1116.2 684.235 L1115.64 684.235 L1115.08 684.235 L1114.52 684.235 L1113.96 684.235 L1113.4 684.235 L1112.84 684.235 L1112.28 684.235 L1111.72 684.235 L1111.16 684.235 L1110.6 684.235 L1110.04 684.235 L1109.49 684.235 L1108.93 684.235 L1108.37 684.235 L1107.81 684.235 L1107.25 684.235 L1106.69 684.235 L1106.13 684.235 L1105.57 684.235 L1105.01 684.235 L1104.45 684.235 L1103.89 684.235 L1103.33 684.235 L1102.77 684.235 L1102.22 684.235 L1101.66 684.235 L1101.1 684.235 L1100.54 684.235 L1099.98 684.235 L1099.42 684.235 L1098.86 684.235 L1098.3 684.235 L1097.74 684.235 L1097.18 684.235 L1096.62 684.235 L1096.06 684.235 L1095.5 684.235 L1094.94 684.235 L1094.39 684.235 L1093.83 684.235 L1093.27 684.235 L1092.71 684.235 L1092.15 684.235 L1091.59 684.235 L1091.03 684.235 L1090.47 684.235 L1089.91 684.235 L1089.35 684.235 L1088.79 684.235 L1088.23 684.235 L1087.67 684.235 L1087.12 684.235 L1086.56 684.235 L1086 684.235 L1085.44 684.235 L1084.88 684.235 L1084.32 684.235 L1083.76 684.235 L1083.2 684.235 L1082.64 684.235 L1082.08 684.235 L1081.52 684.235 L1080.96 684.235 L1080.4 684.235 L1079.85 684.235 L1079.29 684.235 L1078.73 684.235 L1078.17 684.235 L1077.61 684.235 L1077.05 684.235 L1076.49 684.235 L1075.93 684.235 L1075.37 684.235 L1074.81 684.235 L1074.25 684.235 L1073.69 684.235 L1073.13 684.235 L1072.57 684.235 L1072.02 684.235 L1071.46 684.235 L1070.9 684.235 L1070.34 684.235 L1069.78 684.235 L1069.22 684.235 L1068.66 684.235 L1068.1 684.235 L1067.54 684.235 L1066.98 684.235 L1066.42 684.235 L1065.86 684.235 L1065.3 684.235 L1064.75 684.235 L1064.19 684.235 L1063.63 684.235 L1063.07 684.235 L1062.51 684.235 L1061.95 684.235 L1061.39 684.235 L1060.83 684.235 L1060.27 684.235 L1059.71 684.235 L1059.15 684.235 L1058.59 684.235 L1058.03 684.235 L1057.48 684.235 L1056.92 684.235 L1056.36 684.235 L1055.8 684.235 L1055.24 684.235 L1054.68 684.235 L1054.12 684.235 L1053.56 684.235 L1053 684.235 L1052.44 684.235 L1051.88 684.235 L1051.32 684.235 L1050.76 684.235 L1050.2 684.235 L1049.65 684.235 L1049.09 684.235 L1048.53 684.235 L1047.97 684.235 L1047.41 684.235 L1046.85 684.235 L1046.29 684.235 L1045.73 684.235 L1045.17 684.235 L1044.61 684.235 L1044.05 684.235 L1043.49 684.235 L1042.93 684.235 L1042.38 684.235 L1041.82 684.235 L1041.26 684.235 L1040.7 684.235 L1040.14 684.235 L1039.58 684.235 L1039.02 684.235 L1038.46 684.235 L1037.9 684.235 L1037.34 684.235 L1036.78 684.235 L1036.22 684.235 L1035.66 684.235 L1035.1 684.235 L1034.55 684.235 L1033.99 684.235 L1033.43 684.235 L1032.87 684.235 L1032.31 684.235 L1031.75 684.235 L1031.19 684.235 L1030.63 684.235 L1030.07 684.235 L1029.51 684.235 L1028.95 684.235 L1028.39 684.235 L1027.83 684.235 L1027.28 684.235 L1026.72 684.235 L1026.16 684.235 L1025.6 684.235 L1025.04 684.235 L1024.48 684.235 L1023.92 684.235 L1023.36 684.235 L1022.8 684.235 L1022.24 684.235 L1021.68 684.235 L1021.12 684.235 L1020.56 684.235 L1020.01 684.235 L1019.45 684.235 L1018.89 684.235 L1018.33 684.235 L1017.77 684.235 L1017.21 684.235 L1016.65 684.235 L1016.09 684.235 L1015.53 684.235 L1014.97 684.235 L1014.41 684.235 L1013.85 684.235 L1013.29 684.235 L1012.73 684.235 L1012.18 684.235 L1011.62 684.235 L1011.06 684.235 L1010.5 684.235 L1009.94 684.235 L1009.38 684.235 L1008.82 684.235 L1008.26 684.235 L1007.7 684.235 L1007.14 684.235 L1006.58 684.235 L1006.02 684.235 L1005.46 684.235 L1004.91 684.235 L1004.35 684.235 L1003.79 684.235 L1003.23 684.235 L1002.67 684.235 L1002.11 684.235 L1001.55 684.235 L1000.99 684.235 L1000.43 684.235 L999.872 684.235 L999.313 684.235 L998.754 684.235 L998.194 684.235 L997.635 684.235 L997.076 684.235 L996.517 684.235 L995.957 684.235 L995.398 684.235 L994.839 684.235 L994.28 684.235 L993.72 684.235 L993.161 684.235 L992.602 684.235 L992.043 684.235 L991.483 684.235 L990.924 684.235 L990.365 684.235 L989.806 684.235 L989.246 684.235 L988.687 684.235 L988.128 684.235 L987.569 684.235 L987.009 684.235 L986.45 684.235 L985.891 684.235 L985.332 684.235 L984.772 684.235 L984.213 684.235 L983.654 684.235 L983.095 684.235 L982.535 684.235 L981.976 684.235 L981.417 684.235 L980.858 684.235 L980.298 684.235 L979.739 684.235 L979.18 684.235 L978.621 684.235 L978.061 684.235 L977.502 684.235 L976.943 684.235 L976.384 684.235 L975.824 684.235 L975.265 684.235 L974.706 684.235 L974.147 684.235 L973.587 684.235 L973.028 684.235 L972.469 684.235 L971.91 684.235 L971.35 684.235 L970.791 684.235 L970.232 684.235 L969.673 684.235 L969.113 684.235 L968.554 684.235 L967.995 684.235 L967.436 684.235 L966.876 684.235 L966.317 684.235 L965.758 684.235 L965.199 684.235 L964.639 684.235 L964.08 684.235 L963.521 684.235 L962.962 684.235 L962.402 684.235 L961.843 684.235 L961.284 684.235 L960.725 684.235 L960.165 684.235 L959.606 684.235 L959.047 684.235 L958.488 684.235 L957.928 684.235 L957.369 684.235 L956.81 684.235 L956.251 684.235 L955.691 684.235 L955.132 684.235 L954.573 684.235 L954.014 684.235 L953.454 684.235 L952.895 684.235 L952.336 684.235 L951.777 684.235 L951.217 684.235 L950.658 684.235 L950.099 684.235 L949.54 684.235 L948.98 684.235 L948.421 684.235 L947.862 684.235 L947.303 684.235 L946.743 684.235 L946.184 684.235 L945.625 684.235 L945.066 684.235 L944.506 684.235 L943.947 684.235 L943.388 684.235 L942.829 684.235 L942.269 684.235 L941.71 684.235 L941.151 684.235 L940.592 684.235 L940.032 684.235 L939.473 684.235 L938.914 684.235 L938.355 684.235 L937.795 684.235 L937.236 684.235 L936.677 684.235 L936.118 684.235 L935.558 684.235 L934.999 684.235 L934.44 684.235 L933.881 684.235 L933.321 684.235 L932.762 684.235 L932.203 684.235 L931.644 684.235 L931.084 684.235 L930.525 684.235 L929.966 684.235 L929.406 684.235 L928.847 684.235 L928.288 684.235 L927.729 684.235 L927.169 684.235 L926.61 684.235 L926.051 684.235 L925.492 684.235 L924.932 684.235 L924.373 684.235 L923.814 684.235 L923.255 684.235 L922.695 684.235 L922.136 684.235 L921.577 684.235 L921.018 684.235 L920.458 684.235 L919.899 684.235 L919.34 684.235 L918.781 684.235 L918.221 684.235 L917.662 684.235 L917.103 684.235 L916.544 684.235 L915.984 684.235 L915.425 684.235 L914.866 684.235 L914.307 684.235 L913.747 684.235 L913.188 684.235 L912.629 684.235 L912.07 684.235 L911.51 684.235 L910.951 684.235 L910.392 684.235 L909.833 684.235 L909.273 684.235 L908.714 684.235 L908.155 684.235 L907.596 684.235 L907.036 684.235 L906.477 684.235 L905.918 684.235 L905.359 684.235 L904.799 684.235 L904.24 684.235 L903.681 684.235 L903.122 684.235 L902.562 684.235 L902.003 684.235 L901.444 684.235 L900.885 684.235 L900.325 684.235 L899.766 684.235 L899.207 684.235 L898.648 684.235 L898.088 684.235 L897.529 684.235 L896.97 684.235 L896.411 684.235 L895.851 684.235 L895.292 684.235 L894.733 684.235 L894.174 684.235 L893.614 684.235 L893.055 684.235 L892.496 684.235 L891.937 684.235 L891.377 684.235 L890.818 684.235 L890.259 684.235 L889.7 684.235 L889.14 684.235 L888.581 684.235 L888.022 684.235 L887.463 684.235 L886.903 684.235 L886.344 684.235 L885.785 684.235 L885.226 684.235 L884.666 684.235 L884.107 684.235 L883.548 684.235 L882.989 684.235 L882.429 684.235 L881.87 684.235 L881.311 684.235 L880.752 684.235 L880.192 684.235 L879.633 684.235 L879.074 684.235 L878.515 684.235 L877.955 684.235 L877.396 684.235 L876.837 684.235 L876.278 684.235 L875.718 684.235 L875.159 684.235 L874.6 684.235 L874.041 684.235 L873.481 684.235 L872.922 684.235 L872.363 684.235 L871.804 684.235 L871.244 684.235 L870.685 684.235 L870.126 684.235 L869.567 684.235 L869.007 684.235 L868.448 684.235 L867.889 684.235 L867.33 684.235 L866.77 684.235 L866.211 684.235 L865.652 684.235 L865.093 684.235 L864.533 684.235 L863.974 684.235 L863.415 684.235 L862.856 684.235 L862.296 684.235 L861.737 684.235 L861.178 684.235 L860.619 684.235 L860.059 684.235 L859.5 684.235 L858.941 684.235 L858.382 684.235 L857.822 684.235 L857.263 684.235 L856.704 684.235 L856.145 684.235 L855.585 684.235 L855.026 684.235 L854.467 684.235 L853.908 684.235 L853.348 684.235 L852.789 684.235 L852.23 684.235 L851.671 684.235 L851.111 684.235 L850.552 684.235 L849.993 684.235 L849.434 684.235 L848.874 684.235 L848.315 684.235 L847.756 684.235 L847.197 684.235 L846.637 684.235 L846.078 684.235 L845.519 684.235 L844.96 684.235 L844.4 684.235 L843.841 684.235 L843.282 684.235 L842.723 684.235 L842.163 684.235 L841.604 684.235 L841.045 684.235 L840.486 684.235 L839.926 684.235 L839.367 684.235 L838.808 684.235 L838.249 684.235 L837.689 684.235 L837.13 684.235 L836.571 684.235 L836.012 684.235 L835.452 684.235 L834.893 684.235 L834.334 684.235 L833.775 684.235 L833.215 684.235 L832.656 684.235 L832.097 684.235 L831.538 684.235 L830.978 684.235 L830.419 684.235 L829.86 684.235 L829.301 684.235 L828.741 684.235 L828.182 684.235 L827.623 684.235 L827.064 684.235 L826.504 684.235 L825.945 684.235 L825.386 684.235 L824.827 684.235 L824.267 684.235 L823.708 684.235 L823.149 684.235 L822.59 684.235 L822.03 684.235 L821.471 684.235 L820.912 684.235 L820.353 684.235 L819.793 684.235 L819.234 684.235 L818.675 684.235 L818.116 684.235 L817.556 684.235 L816.997 684.235 L816.438 684.235 L815.879 684.235 L815.319 684.235 L814.76 684.235 L814.201 684.235 L813.642 684.235 L813.082 684.235 L812.523 684.235 L811.964 684.235 L811.405 684.235 L810.845 684.235 L810.286 684.235 L809.727 684.235 L809.168 684.235 L808.608 684.235 L808.049 684.235 L807.49 684.235 L806.931 684.235 L806.371 684.235 L805.812 684.235 L805.253 684.235 L804.693 684.235 L804.134 684.235 L803.575 684.235 L803.016 684.235 L802.456 684.235 L801.897 684.235 L801.338 684.235 L800.779 684.235 L800.219 684.235 L799.66 684.235 L799.101 684.235 L798.542 684.235 L797.982 684.235 L797.423 684.235 L796.864 684.235 L796.305 684.235 L795.745 684.235 L795.186 684.235 L794.627 684.235 L794.068 684.235 L793.508 684.235 L792.949 684.235 L792.39 684.235 L791.831 684.235 L791.271 684.235 L790.712 684.235 L790.153 684.235 L789.594 684.235 L789.034 684.235 L788.475 684.235 L787.916 684.235 L787.357 684.235 L786.797 684.235 L786.238 684.235 L785.679 684.235 L785.12 684.235 L784.56 684.235 L784.001 684.235 L783.442 684.235 L782.883 684.235 L782.323 684.235 L781.764 684.235 L781.205 684.235 L780.646 684.235 L780.086 684.235 L779.527 684.235 L778.968 684.235 L778.409 684.235 L777.849 684.235 L777.29 684.235 L776.731 684.235 L776.172 684.235 L775.612 684.235 L775.053 684.235 L774.494 684.235 L773.935 684.235 L773.375 684.235 L772.816 684.235 L772.257 684.235 L771.698 684.235 L771.138 684.235 L770.579 684.235 L770.02 684.235 L769.461 684.235 L768.901 684.235 L768.342 684.235 L767.783 684.235 L767.224 684.235 L766.664 684.235 L766.105 684.235 L765.546 684.235 L764.987 684.235 L764.427 684.235 L763.868 684.235 L763.309 684.235 L762.75 684.235 L762.19 684.235 L761.631 684.235 L761.072 684.235 L760.513 684.235 L759.953 684.235 L759.394 684.235 L758.835 684.235 L758.276 684.235 L757.716 684.235 L757.157 684.235 L756.598 684.235 L756.039 684.235 L755.479 684.235 L754.92 684.235 L754.361 684.235 L753.802 684.235 L753.242 684.235 L752.683 684.235 L752.124 684.235 L751.565 684.235 L751.005 684.235 L750.446 684.235 L749.887 684.235 L749.328 684.235 L748.768 684.235 L748.209 684.235 L747.65 684.235 L747.091 684.235 L746.531 684.235 L745.972 684.235 L745.413 684.235 L744.854 684.235 L744.294 684.235 L743.735 684.235 L743.176 684.235 L742.617 684.235 L742.057 684.235 L741.498 684.235 L740.939 684.235 L740.38 684.235 L739.82 684.235 L739.261 684.235 L738.702 684.235 L738.143 684.235 L737.583 684.235 L737.024 684.235 L736.465 684.235 L735.906 684.235 L735.346 684.235 L734.787 684.235 L734.228 684.235 L733.669 684.235 L733.109 684.235 L732.55 684.235 L731.991 684.235 L731.432 684.235 L730.872 684.235 L730.313 684.235 L729.754 684.235 L729.195 684.235 L728.635 684.235 L728.076 684.235 L727.517 684.235 L726.958 684.235 L726.398 684.235 L725.839 684.235 L725.28 684.235 L724.721 684.235 L724.161 684.235 L723.602 684.235 L723.043 684.235 L722.484 684.235 L721.924 684.235 L721.365 684.235 L720.806 684.235 L720.247 684.235  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.394 720.806,688.394 721.365,688.394 721.924,688.394 722.484,688.394 723.043,688.394 723.602,688.394 724.161,688.394 724.721,688.394 725.28,688.394 725.839,688.394 726.398,688.394 726.958,688.394 727.517,688.394 728.076,688.394 728.635,688.394 729.195,688.394 729.754,688.394 730.313,688.394 730.872,688.394 731.432,688.394 731.991,688.394 732.55,688.394 733.109,688.394 733.669,688.394 734.228,688.394 734.787,688.394 735.346,688.394 735.906,688.394 736.465,688.394 737.024,688.394 737.583,688.394 738.143,688.394 738.702,688.394 739.261,688.394 739.82,688.394 740.38,688.394 740.939,688.394 741.498,688.394 742.057,688.394 742.617,688.394 743.176,688.394 743.735,688.394 744.294,688.394 744.854,688.394 745.413,688.394 745.972,688.394 746.531,688.394 747.091,688.394 747.65,688.394 748.209,688.394 748.768,688.394 749.328,688.394 749.887,688.394 750.446,688.394 751.005,688.394 751.565,688.394 752.124,688.394 752.683,688.394 753.242,688.394 753.802,688.394 754.361,688.394 754.92,688.394 755.479,688.394 756.039,688.394 756.598,688.394 757.157,688.394 757.716,688.394 758.276,688.394 758.835,688.394 759.394,688.394 759.953,688.394 760.513,688.394 761.072,688.394 761.631,688.394 762.19,688.394 762.75,688.394 763.309,688.394 763.868,688.394 764.427,688.394 764.987,688.394 765.546,688.394 766.105,688.394 766.664,688.394 767.224,688.394 767.783,688.394 768.342,688.394 768.901,688.394 769.461,688.394 770.02,688.394 770.579,688.394 771.138,688.394 771.698,688.394 772.257,688.394 772.816,688.394 773.375,688.394 773.935,688.394 774.494,688.394 775.053,688.394 775.612,688.394 776.172,688.394 776.731,688.394 777.29,688.394 777.849,688.394 778.409,688.394 778.968,688.394 779.527,688.394 780.086,688.394 780.646,688.394 781.205,688.394 781.764,688.394 782.323,688.394 782.883,688.394 783.442,688.394 784.001,688.394 784.56,688.394 785.12,688.394 785.679,688.394 786.238,688.394 786.797,688.394 787.357,688.394 787.916,688.394 788.475,688.394 789.034,688.394 789.594,688.394 790.153,688.394 790.712,688.394 791.271,688.394 791.831,688.394 792.39,688.394 792.949,688.394 793.508,688.394 794.068,688.394 794.627,688.394 795.186,688.394 795.745,688.394 796.305,688.394 796.864,688.394 797.423,688.394 797.982,688.394 798.542,688.394 799.101,688.394 799.66,688.394 800.219,688.394 800.779,688.394 801.338,688.394 801.897,688.394 802.456,688.394 803.016,688.394 803.575,688.394 804.134,688.394 804.693,688.394 805.253,688.394 805.812,688.394 806.371,688.394 806.931,688.394 807.49,688.394 808.049,688.394 808.608,688.394 809.168,688.394 809.727,688.394 810.286,688.394 810.845,688.394 811.405,688.394 811.964,688.394 812.523,688.394 813.082,688.394 813.642,688.394 814.201,688.394 814.76,688.394 815.319,688.394 815.879,688.394 816.438,688.394 816.997,688.394 817.556,688.394 818.116,688.394 818.675,688.394 819.234,688.394 819.793,688.394 820.353,688.394 820.912,688.394 821.471,688.394 822.03,688.394 822.59,688.394 823.149,688.394 823.708,688.394 824.267,688.394 824.827,688.394 825.386,688.394 825.945,688.394 826.504,688.394 827.064,688.394 827.623,688.394 828.182,688.394 828.741,688.394 829.301,688.394 829.86,688.394 830.419,688.394 830.978,688.394 831.538,688.394 832.097,688.394 832.656,688.394 833.215,688.394 833.775,688.394 834.334,688.394 834.893,688.394 835.452,688.394 836.012,688.394 836.571,688.394 837.13,688.394 837.689,688.394 838.249,688.394 838.808,688.394 839.367,688.394 839.926,688.394 840.486,688.394 841.045,688.394 841.604,688.394 842.163,688.394 842.723,688.394 843.282,688.394 843.841,688.394 844.4,688.394 844.96,688.394 845.519,688.394 846.078,688.394 846.637,688.394 847.197,688.394 847.756,688.394 848.315,688.394 848.874,688.394 849.434,688.394 849.993,688.394 850.552,688.394 851.111,688.394 851.671,688.394 852.23,688.394 852.789,688.394 853.348,688.394 853.908,688.394 854.467,688.394 855.026,688.394 855.585,688.394 856.145,688.394 856.704,688.394 857.263,688.394 857.822,688.394 858.382,688.394 858.941,688.394 859.5,688.394 860.059,688.394 860.619,688.394 861.178,688.394 861.737,688.394 862.296,688.394 862.856,688.394 863.415,688.394 863.974,688.394 864.533,688.394 865.093,688.394 865.652,688.394 866.211,688.394 866.77,688.394 867.33,688.394 867.889,688.394 868.448,688.394 869.007,688.394 869.567,688.394 870.126,688.394 870.685,688.394 871.244,688.394 871.804,688.394 872.363,688.394 872.922,688.394 873.481,688.394 874.041,688.394 874.6,688.394 875.159,688.394 875.718,688.394 876.278,688.394 876.837,688.394 877.396,688.394 877.955,688.394 878.515,688.394 879.074,688.394 879.633,688.394 880.192,688.394 880.752,688.394 881.311,688.394 881.87,688.394 882.429,688.394 882.989,688.394 883.548,688.394 884.107,688.394 884.666,688.394 885.226,688.394 885.785,688.394 886.344,688.394 886.903,688.394 887.463,688.394 888.022,688.394 888.581,688.394 889.14,688.394 889.7,688.394 890.259,688.394 890.818,688.394 891.377,688.394 891.937,688.394 892.496,688.394 893.055,688.394 893.614,688.394 894.174,688.394 894.733,688.394 895.292,688.394 895.851,688.394 896.411,688.394 896.97,688.394 897.529,688.394 898.088,688.394 898.648,688.394 899.207,688.394 899.766,688.394 900.325,688.394 900.885,688.394 901.444,688.394 902.003,688.394 902.562,688.394 903.122,688.394 903.681,688.394 904.24,688.394 904.799,688.394 905.359,688.394 905.918,688.394 906.477,688.394 907.036,688.394 907.596,688.394 908.155,688.394 908.714,688.394 909.273,688.394 909.833,688.394 910.392,688.394 910.951,688.394 911.51,688.394 912.07,688.394 912.629,688.394 913.188,688.394 913.747,688.394 914.307,688.394 914.866,688.394 915.425,688.394 915.984,688.394 916.544,688.394 917.103,688.394 917.662,688.394 918.221,688.394 918.781,688.394 919.34,688.394 919.899,688.394 920.458,688.394 921.018,688.394 921.577,688.394 922.136,688.394 922.695,688.394 923.255,688.394 923.814,688.394 924.373,688.394 924.932,688.394 925.492,688.394 926.051,688.394 926.61,688.394 927.169,688.394 927.729,688.394 928.288,688.394 928.847,688.394 929.406,688.394 929.966,688.394 930.525,688.394 931.084,688.394 931.644,688.394 932.203,688.394 932.762,688.394 933.321,688.394 933.881,688.394 934.44,688.394 934.999,688.394 935.558,688.394 936.118,688.394 936.677,688.394 937.236,688.394 937.795,688.394 938.355,688.394 938.914,688.394 939.473,688.394 940.032,688.394 940.592,688.394 941.151,688.394 941.71,688.394 942.269,688.394 942.829,688.394 943.388,688.394 943.947,688.394 944.506,688.394 945.066,688.394 945.625,688.394 946.184,688.394 946.743,688.394 947.303,688.394 947.862,688.394 948.421,688.394 948.98,688.394 949.54,688.394 950.099,688.394 950.658,688.394 951.217,688.394 951.777,688.394 952.336,688.394 952.895,688.394 953.454,688.394 954.014,688.394 954.573,688.394 955.132,688.394 955.691,688.394 956.251,688.394 956.81,688.394 957.369,688.394 957.928,688.394 958.488,688.394 959.047,688.394 959.606,688.394 960.165,688.394 960.725,688.394 961.284,688.394 961.843,688.394 962.402,688.394 962.962,688.394 963.521,688.394 964.08,688.394 964.639,688.394 965.199,688.394 965.758,688.394 966.317,688.394 966.876,688.394 967.436,688.394 967.995,688.394 968.554,688.394 969.113,688.394 969.673,688.394 970.232,688.394 970.791,688.394 971.35,688.394 971.91,688.394 972.469,688.394 973.028,688.394 973.587,688.394 974.147,688.394 974.706,688.394 975.265,688.394 975.824,688.394 976.384,688.394 976.943,688.394 977.502,688.394 978.061,688.394 978.621,688.394 979.18,688.394 979.739,688.394 980.298,688.394 980.858,688.394 981.417,688.394 981.976,688.394 982.535,688.394 983.095,688.394 983.654,688.394 984.213,688.394 984.772,688.394 985.332,688.394 985.891,688.394 986.45,688.394 987.009,688.394 987.569,688.394 988.128,688.394 988.687,688.394 989.246,688.394 989.806,688.394 990.365,688.394 990.924,688.394 991.483,688.394 992.043,688.394 992.602,688.394 993.161,688.394 993.72,688.394 994.28,688.394 994.839,688.394 995.398,688.394 995.957,688.394 996.517,688.394 997.076,688.394 997.635,688.394 998.194,688.394 998.754,688.394 999.313,688.394 999.872,688.394 1000.43,688.394 1000.99,688.394 1001.55,688.394 1002.11,688.394 1002.67,688.394 1003.23,688.394 1003.79,688.394 1004.35,688.394 1004.91,688.394 1005.46,688.394 1006.02,688.394 1006.58,688.394 1007.14,688.394 1007.7,688.394 1008.26,688.394 1008.82,688.394 1009.38,688.394 1009.94,688.394 1010.5,688.394 1011.06,688.394 1011.62,688.394 1012.18,688.394 1012.73,688.394 1013.29,688.394 1013.85,688.394 1014.41,688.394 1014.97,688.394 1015.53,688.394 1016.09,688.394 1016.65,688.394 1017.21,688.394 1017.77,688.394 1018.33,688.394 1018.89,688.394 1019.45,688.394 1020.01,688.394 1020.56,688.394 1021.12,688.394 1021.68,688.394 1022.24,688.394 1022.8,688.394 1023.36,688.394 1023.92,688.394 1024.48,688.394 1025.04,688.394 1025.6,688.394 1026.16,688.394 1026.72,688.394 1027.28,688.394 1027.83,688.394 1028.39,688.394 1028.95,688.394 1029.51,688.394 1030.07,688.394 1030.63,688.394 1031.19,688.394 1031.75,688.394 1032.31,688.394 1032.87,688.394 1033.43,688.394 1033.99,688.394 1034.55,688.394 1035.1,688.394 1035.66,688.394 1036.22,688.394 1036.78,688.394 1037.34,688.394 1037.9,688.394 1038.46,688.394 1039.02,688.394 1039.58,688.394 1040.14,688.394 1040.7,688.394 1041.26,688.394 1041.82,688.394 1042.38,688.394 1042.93,688.394 1043.49,688.394 1044.05,688.394 1044.61,688.394 1045.17,688.394 1045.73,688.394 1046.29,688.394 1046.85,688.394 1047.41,688.394 1047.97,688.394 1048.53,688.394 1049.09,688.394 1049.65,688.394 1050.2,688.394 1050.76,688.394 1051.32,688.394 1051.88,688.394 1052.44,688.394 1053,688.394 1053.56,688.394 1054.12,688.394 1054.68,688.394 1055.24,688.394 1055.8,688.394 1056.36,688.394 1056.92,688.394 1057.48,688.394 1058.03,688.394 1058.59,688.394 1059.15,688.394 1059.71,688.394 1060.27,688.394 1060.83,688.394 1061.39,688.394 1061.95,688.394 1062.51,688.394 1063.07,688.394 1063.63,688.394 1064.19,688.394 1064.75,688.394 1065.3,688.394 1065.86,688.394 1066.42,688.394 1066.98,688.394 1067.54,688.394 1068.1,688.394 1068.66,688.394 1069.22,688.394 1069.78,688.394 1070.34,688.394 1070.9,688.394 1071.46,688.394 1072.02,688.394 1072.57,688.394 1073.13,688.394 1073.69,688.394 1074.25,688.394 1074.81,688.394 1075.37,688.394 1075.93,688.394 1076.49,688.394 1077.05,688.394 1077.61,688.394 1078.17,688.394 1078.73,688.394 1079.29,688.394 1079.85,688.394 1080.4,688.394 1080.96,688.394 1081.52,688.394 1082.08,688.394 1082.64,688.394 1083.2,688.394 1083.76,688.394 1084.32,688.394 1084.88,688.394 1085.44,688.394 1086,688.394 1086.56,688.394 1087.12,688.394 1087.67,688.394 1088.23,688.394 1088.79,688.394 1089.35,688.394 1089.91,688.394 1090.47,688.394 1091.03,688.394 1091.59,688.394 1092.15,688.394 1092.71,688.394 1093.27,688.394 1093.83,688.394 1094.39,688.394 1094.94,688.394 1095.5,688.394 1096.06,688.394 1096.62,688.394 1097.18,688.394 1097.74,688.394 1098.3,688.394 1098.86,688.394 1099.42,688.394 1099.98,688.394 1100.54,688.394 1101.1,688.394 1101.66,688.394 1102.22,688.394 1102.77,688.394 1103.33,688.394 1103.89,688.394 1104.45,688.394 1105.01,688.394 1105.57,688.394 1106.13,688.394 1106.69,688.394 1107.25,688.394 1107.81,688.394 1108.37,688.394 1108.93,688.394 1109.49,688.394 1110.04,688.394 1110.6,688.394 1111.16,688.394 1111.72,688.394 1112.28,688.394 1112.84,688.394 1113.4,688.394 1113.96,688.394 1114.52,688.394 1115.08,688.394 1115.64,688.394 1116.2,688.394 1116.76,688.394 1117.31,688.394 1117.87,688.394 1118.43,688.394 1118.99,688.394 1119.55,688.394 1120.11,688.394 1120.67,688.394 1121.23,688.394 1121.79,688.394 1122.35,688.394 1122.91,688.394 1123.47,688.394 1124.03,688.394 1124.59,688.394 1125.14,688.394 1125.7,688.394 1126.26,688.394 1126.82,688.394 1127.38,688.394 1127.94,688.394 1128.5,688.394 1129.06,688.394 1129.62,688.394 1130.18,688.394 1130.74,688.394 1131.3,688.394 1131.86,688.394 1132.41,688.394 1132.97,688.394 1133.53,688.394 1134.09,688.394 1134.65,688.394 1135.21,688.394 1135.77,688.394 1136.33,688.394 1136.89,688.394 1137.45,688.394 1138.01,688.394 1138.57,688.394 1139.13,688.394 1139.68,688.394 1140.24,688.394 1140.8,688.394 1141.36,688.394 1141.92,688.394 1142.48,688.394 1143.04,688.394 1143.6,688.394 1144.16,688.394 1144.72,688.394 1145.28,688.394 1145.84,688.394 1146.4,688.394 1146.96,688.394 1147.51,688.394 1148.07,688.394 1148.63,688.394 1149.19,688.394 1149.75,688.394 1150.31,688.394 1150.87,688.394 1151.43,688.394 1151.99,688.394 1152.55,688.394 1153.11,688.394 1153.67,688.394 1154.23,688.394 1154.78,688.394 1155.34,688.394 1155.9,688.394 1156.46,688.394 1157.02,688.394 1157.58,688.394 1158.14,688.394 1158.7,688.394 1159.26,688.394 1159.82,688.394 1160.38,688.394 1160.94,688.394 1161.5,688.394 1162.05,688.394 1162.61,688.394 1163.17,688.394 1163.73,688.394 1164.29,688.394 1164.85,688.394 1165.41,688.394 1165.97,688.394 1166.53,688.394 1167.09,688.394 1167.65,688.394 1168.21,688.394 1168.77,688.394 1169.33,688.394 1169.88,688.394 1170.44,688.394 1171,688.394 1171.56,688.394 1172.12,688.394 1172.68,688.394 1173.24,688.394 1173.8,688.394 1174.36,688.394 1174.92,688.394 1175.48,688.394 1176.04,688.394 1176.6,688.394 1177.15,688.394 1177.71,688.394 1178.27,688.394 1178.83,688.394 1179.39,688.394 1179.95,688.394 1180.51,688.394 1181.07,688.394 1181.63,688.394 1182.19,688.394 1182.75,688.394 1183.31,688.394 1183.87,688.394 1184.43,688.394 1184.98,688.394 1185.54,688.394 1186.1,688.394 1186.66,688.394 1187.22,688.394 1187.78,688.394 1188.34,688.394 1188.9,688.394 1189.46,688.394 1190.02,688.394 1190.58,688.394 1191.14,688.394 1191.7,688.394 1192.25,688.394 1192.81,688.394 1193.37,688.394 1193.93,688.394 1194.49,688.394 1195.05,688.394 1195.61,688.394 1196.17,688.394 1196.73,688.394 1197.29,688.394 1197.85,688.394 1198.41,688.394 1198.97,688.394 1199.52,688.394 1200.08,688.394 1200.64,688.394 1201.2,688.394 1201.76,688.394 1202.32,688.394 1202.88,688.394 1203.44,688.394 1204,688.394 1204.56,688.394 1205.12,688.394 1205.68,688.394 1206.24,688.394 1206.8,688.394 1207.35,688.394 1207.91,688.394 1208.47,688.394 1209.03,688.394 1209.59,688.394 1210.15,688.394 1210.71,688.394 1211.27,688.394 1211.83,688.394 1212.39,688.394 1212.95,688.394 1213.51,688.394 1214.07,688.394 1214.62,688.394 1215.18,688.394 1215.74,688.394 1216.3,688.394 1216.86,688.394 1217.42,688.394 1217.98,688.394 1218.54,688.394 1219.1,688.394 1219.66,688.394 1220.22,688.394 1220.78,688.394 1221.34,688.394 1221.89,688.394 1222.45,688.394 1223.01,688.394 1223.57,688.394 1224.13,688.394 1224.69,688.394 1225.25,688.394 1225.81,688.394 1226.37,688.394 1226.93,688.394 1227.49,688.394 1228.05,688.394 1228.61,688.394 1229.17,688.394 1229.72,688.394 1230.28,688.394 1230.84,688.394 1231.4,688.394 1231.96,688.394 1232.52,688.394 1233.08,688.394 1233.64,688.394 1234.2,688.394 1234.76,688.394 1235.32,688.394 1235.88,688.394 1236.44,688.394 1236.99,688.394 1237.55,688.394 1238.11,688.394 1238.67,688.394 1239.23,688.394 1239.79,688.394 1240.35,688.394 1240.91,688.394 1241.47,688.394 1242.03,688.394 1242.59,688.394 1243.15,688.394 1243.71,688.394 1244.26,688.394 1244.82,688.394 1245.38,688.394 1245.94,688.394 1246.5,688.394 1247.06,688.394 1247.62,688.394 1248.18,688.394 1248.74,688.394 1249.3,688.394 1249.86,688.394 1250.42,688.394 1250.98,688.394 1251.54,688.394 1252.09,688.394 1252.65,688.394 1253.21,688.394 1253.77,688.394 1254.33,688.394 1254.89,688.394 1255.45,688.394 1256.01,688.394 1256.57,688.394 1257.13,688.394 1257.69,688.394 1258.25,688.394 1258.81,688.394 1259.36,688.394 1259.92,688.394 1260.48,688.394 1261.04,688.394 1261.6,688.394 1262.16,688.394 1262.72,688.394 1263.28,688.394 1263.84,688.394 1264.4,688.394 1264.96,688.394 1265.52,688.394 1266.08,688.394 1266.63,688.394 1267.19,688.394 1267.75,688.394 1268.31,688.394 1268.87,688.394 1269.43,688.394 1269.99,688.394 1270.55,688.394 1271.11,688.394 1271.67,688.394 1272.23,688.394 1272.79,688.394 1273.35,688.394 1273.91,688.394 1274.46,688.394 1275.02,688.394 1275.58,688.394 1276.14,688.394 1276.7,688.394 1277.26,688.394 1277.82,688.394 1278.38,688.394 1278.94,688.394 1279.5,688.394 1280.06,688.394 1280.62,688.394 1281.18,688.394 1281.73,688.394 1282.29,688.394 1282.85,688.394 1283.41,688.394 1283.97,688.394 1284.53,688.394 1285.09,688.394 1285.65,688.394 1286.21,688.394 1286.77,688.394 1287.33,688.394 1287.89,688.394 1288.45,688.394 1289,688.394 1289.56,688.394 1290.12,688.394 1290.68,688.394 1291.24,688.394 1291.8,688.394 1292.36,688.394 1292.92,688.394 1293.48,688.394 1294.04,688.394 1294.6,688.394 1295.16,688.394 1295.72,688.394 1296.28,688.394 1296.83,688.394 1297.39,688.394 1297.95,688.394 1298.51,688.394 1299.07,688.394 1299.63,688.394 1300.19,688.394 1300.75,688.394 1301.31,688.394 1301.87,688.394 1302.43,688.394 1302.99,688.394 1303.55,688.394 1304.1,688.394 1304.66,688.394 1305.22,688.394 1305.78,688.394 1306.34,688.394 1306.9,688.394 1307.46,688.394 1308.02,688.394 1308.58,688.394 1309.14,688.394 1309.7,688.394 1310.26,688.394 1310.82,688.394 1311.38,688.394 1311.93,688.394 1312.49,688.394 1313.05,688.394 1313.61,688.394 1314.17,688.394 1314.73,688.394 1315.29,688.394 1315.85,688.394 1316.41,688.394 1316.97,688.394 1317.53,688.394 1318.09,688.394 1318.65,688.394 1319.2,688.394 1319.76,688.394 1320.32,688.394 1320.88,688.394 1321.44,688.394 1322,688.394 1322.56,688.394 1323.12,688.394 1323.68,688.394 1324.24,688.394 1324.8,688.394 1325.36,688.394 1325.92,688.394 1326.47,688.394 1327.03,688.394 1327.59,688.394 1328.15,688.394 1328.71,688.394 1329.27,688.394 1329.83,688.394 1330.39,688.394 1330.95,688.394 1331.51,688.394 1332.07,688.394 1332.63,688.394 1333.19,688.394 1333.75,688.394 1334.3,688.394 1334.86,688.394 1335.42,688.394 1335.98,688.394 1336.54,688.394 1337.1,688.394 1337.66,688.394 1338.22,688.394 1338.78,688.394 1339.34,688.394 1339.9,688.394 1340.46,688.394 1341.02,688.394 1341.57,688.394 1342.13,688.394 1342.69,688.394 1343.25,688.394 1343.81,688.394 1344.37,688.394 1344.93,688.394 1345.49,688.394 1346.05,688.394 1346.61,688.394 1347.17,688.394 1347.73,688.394 1348.29,688.394 1348.84,688.394 1349.4,688.394 1349.96,688.394 1350.52,688.394 1351.08,688.394 1351.64,688.394 1352.2,688.394 1352.76,688.394 1353.32,688.394 1353.88,688.394 1354.44,688.394 1355,688.394 1355.56,688.394 1356.12,688.394 1356.67,688.394 1357.23,688.394 1357.79,688.394 1358.35,688.394 1358.91,688.394 1359.47,688.394 1360.03,688.394 1360.59,688.394 1361.15,688.394 1361.71,688.394 1362.27,688.394 1362.83,688.394 1363.39,688.394 1363.94,688.394 1364.5,688.394 1365.06,688.394 1365.62,688.394 1366.18,688.394 1366.74,688.394 1367.3,688.394 1367.86,688.394 1368.42,688.394 1368.98,688.394 1369.54,688.394 1370.1,688.394 1370.66,688.394 1371.21,688.394 1371.77,688.394 1372.33,688.394 1372.89,688.394 1373.45,688.394 1374.01,688.394 1374.57,688.394 1375.13,688.394 1375.69,688.394 1376.25,688.394 1376.81,688.394 1377.37,688.394 1377.93,688.394 1378.49,688.394 1379.04,688.394 1379.6,688.394 1380.16,688.394 1380.72,688.394 1381.28,688.394 1381.84,688.394 1382.4,688.394 1382.96,688.394 1383.52,688.394 1384.08,688.394 1384.64,688.394 1385.2,688.394 1385.76,688.394 1386.31,688.394 1386.87,688.394 1387.43,688.394 1387.99,688.394 1388.55,688.394 1389.11,688.394 1389.67,688.394 1390.23,688.394 1390.79,688.394 1391.35,688.394 1391.91,688.394 1392.47,688.394 1393.03,688.394 1393.58,688.394 1394.14,688.394 1394.7,688.394 1395.26,688.394 1395.82,688.394 1396.38,688.394 1396.94,688.394 1397.5,688.394 1398.06,688.394 1398.62,688.394 1399.18,688.394 1399.74,688.394 1400.3,688.394 1400.86,688.394 1401.41,688.394 1401.97,688.394 1402.53,688.394 1403.09,688.394 1403.65,688.394 1404.21,688.394 1404.77,688.394 1405.33,688.394 1405.89,688.394 1406.45,688.394 1407.01,688.394 1407.57,688.394 1408.13,688.394 1408.68,688.394 1409.24,688.394 1409.8,688.394 1410.36,688.394 1410.92,688.394 1411.48,688.394 1412.04,688.394 1412.6,688.394 1413.16,688.394 1413.72,688.394 1414.28,688.394 1414.84,688.394 1415.4,688.394 1415.95,688.394 1416.51,688.394 1417.07,688.394 1417.63,688.394 1418.19,688.394 1418.75,688.394 1419.31,688.394 1419.87,688.394 1420.43,688.394 1420.99,688.394 1421.55,688.394 1422.11,688.394 1422.67,688.394 1423.23,688.394 1423.78,688.394 1424.34,688.394 1424.9,688.394 1425.46,688.394 1426.02,688.394 1426.58,688.394 1427.14,688.394 1427.7,688.394 1428.26,688.394 1428.82,688.394 1429.38,688.394 1429.94,688.394 1430.5,688.394 1431.05,688.394 1431.61,688.394 1432.17,688.394 1432.73,688.394 1433.29,688.394 1433.85,688.394 1434.41,688.394 1434.97,688.394 1435.53,688.394 1436.09,688.394 1436.65,688.394 1437.21,688.394 1437.77,688.394 1438.33,688.394 1438.88,688.394 1439.44,688.394 1440,688.394 1440.56,688.394 1441.12,688.394 1441.68,688.394 1442.24,688.394 1442.8,688.394 1443.36,688.394 1443.92,688.394 1444.48,688.394 1445.04,688.394 1445.6,688.394 1446.15,688.394 1446.71,688.394 1447.27,688.394 1447.83,688.394 1448.39,688.394 1448.95,688.394 1449.51,688.394 1450.07,688.394 1450.63,688.394 1451.19,688.394 1451.75,688.394 1452.31,688.394 1452.87,688.394 1453.42,688.394 1453.98,688.394 1454.54,688.394 1455.1,688.394 1455.66,688.394 1456.22,688.394 1456.78,688.394 1457.34,688.394 1457.9,688.394 1458.46,688.394 1459.02,688.394 1459.58,688.394 1460.14,688.394 1460.7,688.394 1461.25,688.394 1461.81,688.394 1462.37,688.394 1462.93,688.394 1463.49,688.394 1464.05,688.394 1464.61,688.394 1465.17,688.394 1465.73,688.394 1466.29,688.394 1466.85,688.394 1467.41,688.394 1467.97,688.394 1468.52,688.394 1469.08,688.394 1469.64,688.394 1470.2,688.394 1470.76,688.394 1471.32,688.394 1471.88,688.394 1472.44,688.394 1473,688.394 1473.56,688.394 1474.12,688.394 1474.68,688.394 1475.24,688.394 1475.79,688.394 1476.35,688.394 1476.91,688.394 1477.47,688.394 1478.03,688.394 1478.59,688.394 1479.15,688.394 1479.71,688.394 1480.27,688.394 1480.83,688.394 1481.39,688.394 1481.95,688.394 1482.51,688.394 1483.07,688.394 1483.62,688.394 1484.18,688.394 1484.74,688.394 1485.3,688.394 1485.86,688.394 1486.42,688.394 1486.98,688.394 1487.54,688.394 1488.1,688.394 1488.66,688.394 1489.22,688.394 1489.78,688.394 1490.34,688.394 1490.89,688.394 1491.45,688.394 1492.01,688.394 1492.57,688.394 1493.13,688.394 1493.69,688.394 1494.25,688.394 1494.81,688.394 1495.37,688.394 1495.93,688.394 1496.49,688.394 1497.05,688.394 1497.61,688.394 1498.16,688.394 1498.72,688.394 1499.28,688.394 1499.84,688.394 1500.4,688.394 1500.96,688.394 1501.52,688.394 1502.08,688.394 1502.64,688.394 1503.2,688.394 1503.76,688.394 1504.32,688.394 1504.88,688.394 1505.44,688.394 1505.99,688.394 1506.55,688.394 1507.11,688.394 1507.67,688.394 1508.23,688.394 1508.79,688.394 1509.35,688.394 1509.91,688.394 1510.47,688.394 1511.03,688.394 1511.59,688.394 1512.15,688.394 1512.71,688.394 1513.26,688.394 1513.82,688.394 1514.38,688.394 1514.94,688.394 1515.5,688.394 1516.06,688.394 1516.62,688.394 1517.18,688.394 1517.74,688.394 1518.3,688.394 1518.86,688.394 1519.42,688.394 1519.98,688.394 1520.53,688.394 1521.09,688.394 1521.65,688.394 1522.21,688.394 1522.77,688.394 1523.33,688.394 1523.89,688.394 1524.45,688.394 1525.01,688.394 1525.57,688.394 1526.13,688.394 1526.69,688.394 1527.25,688.394 1527.81,688.394 1528.36,688.394 1528.92,688.394 1529.48,688.394 1530.04,688.394 1530.6,688.394 1531.16,688.394 1531.72,688.394 1532.28,688.394 1532.84,688.394 1533.4,688.394 1533.96,688.394 1534.52,688.394 1535.08,688.394 1535.63,688.394 1536.19,688.394 1536.75,688.394 1537.31,688.394 1537.87,688.394 1538.43,688.394 1538.99,688.394 1539.55,688.394 1540.11,688.394 1540.67,688.394 1541.23,688.394 1541.79,688.394 1542.35,688.394 1542.9,688.394 1543.46,688.394 1544.02,688.394 1544.58,688.394 1545.14,688.394 1545.7,688.394 1546.26,688.394 1546.82,688.394 1547.38,688.394 1547.94,688.394 1548.5,688.394 1549.06,688.394 1549.62,688.394 1550.18,688.394 1550.73,688.394 1551.29,688.394 1551.85,688.394 1552.41,688.394 1552.97,688.394 1553.53,688.394 1554.09,688.394 1554.65,688.394 1555.21,688.394 1555.77,688.394 1556.33,688.394 1556.89,688.394 1557.45,688.394 1558,688.394 1558.56,688.394 1559.12,688.394 1559.68,688.394 1560.24,688.394 1560.8,688.394 1561.36,688.394 1561.92,688.394 1562.48,688.394 1563.04,688.394 1563.6,688.394 1564.16,688.394 1564.72,688.394 1565.28,688.394 1565.83,688.394 1566.39,688.394 1566.95,688.394 1567.51,688.394 1568.07,688.394 1568.63,688.394 1569.19,688.394 1569.75,688.394 1570.31,688.394 1570.87,688.394 1571.43,688.394 1571.99,688.394 1572.55,688.394 1573.1,688.394 1573.66,688.394 1574.22,688.394 1574.78,688.394 1575.34,688.394 1575.9,688.394 1576.46,688.394 1577.02,688.394 1577.58,688.394 1578.14,688.394 1578.7,688.394 1579.26,688.394 1579.82,688.394 1580.37,688.394 1580.93,688.394 1581.49,688.394 1582.05,688.394 1582.61,688.394 1583.17,688.394 1583.73,688.394 1584.29,688.394 1584.85,688.394 1585.41,688.394 1585.97,688.394 1586.53,688.394 1587.09,688.394 1587.65,688.394 1588.2,688.394 1588.76,688.394 1589.32,688.394 1589.88,688.394 1590.44,688.394 1591,688.394 1591.56,688.394 1592.12,688.394 1592.68,688.394 1593.24,688.394 1593.8,688.394 1594.36,688.394 1594.92,688.394 1595.47,688.394 1596.03,688.394 1596.59,688.394 1597.15,688.394 1597.71,688.394 1598.27,688.394 1598.83,688.394 1599.39,688.394 1599.95,688.394 1600.51,688.394 1601.07,688.394 1601.63,688.394 1602.19,688.394 1602.74,688.394 1603.3,688.394 1603.86,688.394 1604.42,688.394 1604.98,688.394 1605.54,688.394 1606.1,688.394 1606.66,688.394 1607.22,688.394 1607.78,688.394 1608.34,688.394 1608.9,688.394 1609.46,688.394 1610.02,688.394 1610.57,688.394 1611.13,688.394 1611.69,688.394 1612.25,688.394 1612.81,688.394 1613.37,688.394 1613.93,688.394 1614.49,688.394 1615.05,688.394 1615.61,688.394 1616.17,688.394 1616.73,688.394 1617.29,688.394 1617.84,688.394 1618.4,688.394 1618.96,688.394 1619.52,688.394 1620.08,688.394 1620.64,688.394 1621.2,688.394 1621.76,688.394 1622.32,688.394 1622.88,688.394 1623.44,688.394 1624,688.394 1624.56,688.394 1625.11,688.394 1625.67,688.394 1626.23,688.394 1626.79,688.394 1627.35,688.394 1627.91,688.394 1628.47,688.394 1629.03,688.394 1629.59,688.394 1630.15,688.394 1630.71,688.394 1631.27,688.394 1631.83,688.394 1632.39,688.394 1632.94,688.394 1633.5,688.394 1634.06,688.394 1634.62,688.394 1635.18,688.394 1635.74,688.394 1636.3,688.394 1636.86,688.394 1637.42,688.394 1637.98,688.394 1638.54,688.394 1639.1,688.394 1639.66,688.394 1640.21,688.394 1640.77,688.394 1641.33,688.394 1641.89,688.394 1642.45,688.394 1643.01,688.394 1643.57,688.394 1644.13,688.394 1644.69,688.394 1645.25,688.394 1645.81,688.394 1646.37,688.394 1646.93,688.394 1647.48,688.394 1648.04,688.394 1648.6,688.394 1649.16,688.394 1649.72,688.394 1650.28,688.394 1650.84,688.394 1651.4,688.394 1651.96,688.394 1652.52,688.394 1653.08,688.394 1653.64,688.394 1654.2,688.394 1654.76,688.394 1655.31,688.394 1655.87,688.394 1656.43,688.394 1656.99,688.394 1657.55,688.394 1658.11,688.394 1658.67,688.394 1659.23,688.394 1659.79,688.394 1660.35,688.394 1660.91,688.394 1661.47,688.394 1662.03,688.394 1662.58,688.394 1663.14,688.394 1663.7,688.394 1664.26,688.394 1664.82,688.394 1665.38,688.394 1665.94,688.394 1666.5,688.394 1667.06,688.394 1667.62,688.394 1668.18,688.394 1668.74,688.394 1669.3,688.394 1669.85,688.394 1670.41,688.394 1670.97,688.394 1671.53,688.394 1672.09,688.394 1672.65,688.394 1673.21,688.394 1673.77,688.394 1674.33,688.394 1674.89,688.394 1675.45,688.394 1676.01,688.394 1676.57,688.394 1677.13,688.394 1677.68,688.394 1678.24,688.394 1678.8,688.394 1679.36,688.394 1679.92,688.394 1680.48,688.394 1681.04,688.394 1681.6,688.394 1682.16,688.394 1682.72,688.394 1683.28,688.394 1683.84,688.394 1684.4,688.394 1684.95,688.394 1685.51,688.394 1686.07,688.394 1686.63,688.394 1687.19,688.394 1687.75,688.394 1688.31,688.394 1688.87,688.394 1689.43,688.394 1689.99,688.394 1690.55,688.394 1691.11,688.394 1691.67,688.394 1692.23,688.394 1692.78,688.394 1693.34,688.394 1693.9,688.394 1694.46,688.394 1695.02,688.394 1695.58,688.394 1696.14,688.394 1696.7,688.394 1697.26,688.394 1697.82,688.394 1698.38,688.394 1698.94,688.394 1699.5,688.394 1700.05,688.394 1700.61,688.394 1701.17,688.394 1701.73,688.394 1702.29,688.394 1702.85,688.394 1703.41,688.394 1703.97,688.394 1704.53,688.394 1705.09,688.394 1705.65,688.394 1706.21,688.394 1706.77,688.394 1707.32,688.394 1707.88,688.394 1708.44,688.394 1709,688.394 1709.56,688.394 1710.12,688.394 1710.68,688.394 1711.24,688.394 1711.8,688.394 1712.36,688.394 1712.92,688.394 1713.48,688.394 1714.04,688.394 1714.6,688.394 1715.15,688.394 1715.71,688.394 1716.27,688.394 1716.83,688.394 1717.39,688.394 1717.95,688.394 1718.51,688.394 1719.07,688.394 1719.63,688.394 1720.19,688.394 1720.75,688.394 1721.31,688.394 1721.87,688.394 1722.42,688.394 1722.98,688.394 1723.54,688.394 1724.1,688.394 1724.66,688.394 1725.22,688.394 1725.78,688.394 1726.34,688.394 1726.9,688.394 1727.46,688.394 1728.02,688.394 1728.58,688.394 1729.14,688.394 1729.69,688.394 1730.25,688.394 1730.81,688.394 1731.37,688.394 1731.93,688.394 1732.49,688.394 1733.05,688.394 1733.61,688.394 1734.17,688.394 1734.73,688.394 1735.29,688.394 1735.85,688.394 1736.41,688.394 1736.97,688.394 1737.52,688.394 1738.08,688.394 1738.64,688.394 1739.2,688.394 1739.76,688.394 1740.32,688.394 1740.88,688.394 1741.44,688.394 1742,688.394 1742.56,688.394 1743.12,688.394 1743.68,688.394 1744.24,688.394 1744.79,688.394 1745.35,688.394 1745.91,688.394 1746.47,688.394 1747.03,688.394 1747.59,688.394 1748.15,688.394 1748.71,688.394 1749.27,688.394 1749.83,688.394 1750.39,688.394 1750.95,688.394 1751.51,688.394 1752.06,688.394 1752.62,688.394 1753.18,688.394 1753.74,688.394 1754.3,688.394 1754.86,688.394 1755.42,688.394 1755.98,688.394 1756.54,688.394 1757.1,688.394 1757.66,688.394 1758.22,688.394 1758.78,688.394 1759.34,688.394 1759.89,688.394 1760.45,688.394 1761.01,688.394 1761.57,688.394 1762.13,688.394 1762.69,688.394 1763.25,688.394 1763.81,688.394 1764.37,688.394 1764.93,688.394 1765.49,688.394 1766.05,688.394 1766.61,688.394 1767.16,688.394 1767.72,688.394 1768.28,688.394 1768.84,688.394 1769.4,688.394 1769.96,688.394 1770.52,688.394 1771.08,688.394 1771.64,688.394 1772.2,688.394 1772.76,688.394 1773.32,688.394 1773.88,688.394 1774.43,688.394 1774.99,688.394 1775.55,688.394 1776.11,688.394 1776.67,688.394 1777.23,688.394 1777.79,688.394 1778.35,688.394 1778.91,688.394 1779.47,688.394 1780.03,688.394 1780.59,688.394 1781.15,688.394 1781.71,688.394 1782.26,688.394 1782.82,688.394 1783.38,688.394 1783.94,688.394 1784.5,688.394 1785.06,688.394 1785.62,688.394 1786.18,688.394 1786.74,688.394 1787.3,688.394 1787.86,688.394 1788.42,688.394 1788.98,688.394 1789.53,688.394 1790.09,688.394 1790.65,688.394 1791.21,688.394 1791.77,688.394 1792.33,688.394 1792.89,688.394 1793.45,688.394 1794.01,688.394 1794.57,688.394 1795.13,688.394 1795.69,688.394 1796.25,688.394 1796.8,688.394 1797.36,688.394 1797.92,688.394 1798.48,688.394 1799.04,688.394 1799.6,688.394 1800.16,688.394 1800.72,688.394 1801.28,688.394 1801.84,688.394 1802.4,688.394 1802.96,688.394 1803.52,688.394 1804.08,688.394 1804.63,688.394 1805.19,688.394 1805.75,688.394 1806.31,688.394 1806.87,688.394 1807.43,688.394 1807.99,688.394 1808.55,688.394 1809.11,688.394 1809.67,688.394 1810.23,688.394 1810.79,688.394 1811.35,688.394 1811.9,688.394 1812.46,688.394 1813.02,688.394 1813.58,688.394 1814.14,688.394 1814.7,688.394 1815.26,688.394 1815.82,688.394 1816.38,688.394 1816.94,688.394 1817.5,688.394 1818.06,688.394 1818.62,688.394 1819.18,688.394 1819.73,688.394 1820.29,688.394 1820.85,688.394 1821.41,688.394 1821.97,688.394 1822.53,688.394 1823.09,688.394 1823.65,688.394 1824.21,688.394 1824.77,688.394 1825.33,688.394 1825.89,688.394 1826.45,688.394 1827,688.394 1827.56,688.394 1828.12,688.394 1828.68,688.394 1829.24,688.394 1829.8,688.394 1830.36,688.394 1830.92,688.394 1831.48,688.394 1832.04,688.394 1832.6,688.394 1833.16,688.394 1833.72,688.394 1834.27,688.394 1834.83,688.394 1835.39,688.394 1835.95,688.394 1836.51,688.394 1837.07,688.394 1837.63,688.394 1838.19,688.394 \"/>\n<path clip-path=\"url(#clip463)\" d=\"M720.247 684.79 L720.806 684.79 L721.365 684.79 L721.924 684.79 L722.484 684.79 L723.043 684.79 L723.602 684.79 L724.161 684.79 L724.721 684.79 L725.28 684.79 L725.839 684.79 L726.398 684.79 L726.958 684.79 L727.517 684.79 L728.076 684.79 L728.635 684.79 L729.195 684.79 L729.754 684.79 L730.313 684.79 L730.872 684.79 L731.432 684.79 L731.991 684.79 L732.55 684.79 L733.109 684.79 L733.669 684.79 L734.228 684.79 L734.787 684.79 L735.346 684.79 L735.906 684.79 L736.465 684.79 L737.024 684.79 L737.583 684.79 L738.143 684.79 L738.702 684.79 L739.261 684.79 L739.82 684.79 L740.38 684.79 L740.939 684.79 L741.498 684.79 L742.057 684.79 L742.617 684.79 L743.176 684.79 L743.735 684.79 L744.294 684.79 L744.854 684.79 L745.413 684.79 L745.972 684.79 L746.531 684.79 L747.091 684.79 L747.65 684.79 L748.209 684.79 L748.768 684.79 L749.328 684.79 L749.887 684.79 L750.446 684.79 L751.005 684.79 L751.565 684.79 L752.124 684.79 L752.683 684.79 L753.242 684.79 L753.802 684.79 L754.361 684.79 L754.92 684.79 L755.479 684.79 L756.039 684.79 L756.598 684.79 L757.157 684.79 L757.716 684.79 L758.276 684.79 L758.835 684.79 L759.394 684.79 L759.953 684.79 L760.513 684.79 L761.072 684.79 L761.631 684.79 L762.19 684.79 L762.75 684.79 L763.309 684.79 L763.868 684.79 L764.427 684.79 L764.987 684.79 L765.546 684.79 L766.105 684.79 L766.664 684.79 L767.224 684.79 L767.783 684.79 L768.342 684.79 L768.901 684.79 L769.461 684.79 L770.02 684.79 L770.579 684.79 L771.138 684.79 L771.698 684.79 L772.257 684.79 L772.816 684.79 L773.375 684.79 L773.935 684.79 L774.494 684.79 L775.053 684.79 L775.612 684.79 L776.172 684.79 L776.731 684.79 L777.29 684.79 L777.849 684.79 L778.409 684.79 L778.968 684.79 L779.527 684.79 L780.086 684.79 L780.646 684.79 L781.205 684.79 L781.764 684.79 L782.323 684.79 L782.883 684.79 L783.442 684.79 L784.001 684.79 L784.56 684.79 L785.12 684.79 L785.679 684.79 L786.238 684.79 L786.797 684.79 L787.357 684.79 L787.916 684.79 L788.475 684.79 L789.034 684.79 L789.594 684.79 L790.153 684.79 L790.712 684.79 L791.271 684.79 L791.831 684.79 L792.39 684.79 L792.949 684.79 L793.508 684.79 L794.068 684.79 L794.627 684.79 L795.186 684.79 L795.745 684.79 L796.305 684.79 L796.864 684.79 L797.423 684.79 L797.982 684.79 L798.542 684.79 L799.101 684.79 L799.66 684.79 L800.219 684.79 L800.779 684.79 L801.338 684.79 L801.897 684.79 L802.456 684.79 L803.016 684.79 L803.575 684.79 L804.134 684.79 L804.693 684.79 L805.253 684.79 L805.812 684.79 L806.371 684.79 L806.931 684.79 L807.49 684.79 L808.049 684.79 L808.608 684.79 L809.168 684.79 L809.727 684.79 L810.286 684.79 L810.845 684.79 L811.405 684.79 L811.964 684.79 L812.523 684.79 L813.082 684.79 L813.642 684.79 L814.201 684.79 L814.76 684.79 L815.319 684.79 L815.879 684.79 L816.438 684.79 L816.997 684.79 L817.556 684.79 L818.116 684.79 L818.675 684.79 L819.234 684.79 L819.793 684.79 L820.353 684.79 L820.912 684.79 L821.471 684.79 L822.03 684.79 L822.59 684.79 L823.149 684.79 L823.708 684.79 L824.267 684.79 L824.827 684.79 L825.386 684.79 L825.945 684.79 L826.504 684.79 L827.064 684.79 L827.623 684.79 L828.182 684.79 L828.741 684.79 L829.301 684.79 L829.86 684.79 L830.419 684.79 L830.978 684.79 L831.538 684.79 L832.097 684.79 L832.656 684.79 L833.215 684.79 L833.775 684.79 L834.334 684.79 L834.893 684.79 L835.452 684.79 L836.012 684.79 L836.571 684.79 L837.13 684.79 L837.689 684.79 L838.249 684.79 L838.808 684.79 L839.367 684.79 L839.926 684.79 L840.486 684.79 L841.045 684.79 L841.604 684.79 L842.163 684.79 L842.723 684.79 L843.282 684.79 L843.841 684.79 L844.4 684.79 L844.96 684.79 L845.519 684.79 L846.078 684.79 L846.637 684.79 L847.197 684.79 L847.756 684.79 L848.315 684.79 L848.874 684.79 L849.434 684.79 L849.993 684.79 L850.552 684.79 L851.111 684.79 L851.671 684.79 L852.23 684.79 L852.789 684.79 L853.348 684.79 L853.908 684.79 L854.467 684.79 L855.026 684.79 L855.585 684.79 L856.145 684.79 L856.704 684.79 L857.263 684.79 L857.822 684.79 L858.382 684.79 L858.941 684.79 L859.5 684.79 L860.059 684.79 L860.619 684.79 L861.178 684.79 L861.737 684.79 L862.296 684.79 L862.856 684.79 L863.415 684.79 L863.974 684.79 L864.533 684.79 L865.093 684.79 L865.652 684.79 L866.211 684.79 L866.77 684.79 L867.33 684.79 L867.889 684.79 L868.448 684.79 L869.007 684.79 L869.567 684.79 L870.126 684.79 L870.685 684.79 L871.244 684.79 L871.804 684.79 L872.363 684.79 L872.922 684.79 L873.481 684.79 L874.041 684.79 L874.6 684.79 L875.159 684.79 L875.718 684.79 L876.278 684.79 L876.837 684.79 L877.396 684.79 L877.955 684.79 L878.515 684.79 L879.074 684.79 L879.633 684.79 L880.192 684.79 L880.752 684.79 L881.311 684.79 L881.87 684.79 L882.429 684.79 L882.989 684.79 L883.548 684.79 L884.107 684.79 L884.666 684.79 L885.226 684.79 L885.785 684.79 L886.344 684.79 L886.903 684.79 L887.463 684.79 L888.022 684.79 L888.581 684.79 L889.14 684.79 L889.7 684.79 L890.259 684.79 L890.818 684.79 L891.377 684.79 L891.937 684.79 L892.496 684.79 L893.055 684.79 L893.614 684.79 L894.174 684.79 L894.733 684.79 L895.292 684.79 L895.851 684.79 L896.411 684.79 L896.97 684.79 L897.529 684.79 L898.088 684.79 L898.648 684.79 L899.207 684.79 L899.766 684.79 L900.325 684.79 L900.885 684.79 L901.444 684.79 L902.003 684.79 L902.562 684.79 L903.122 684.79 L903.681 684.79 L904.24 684.79 L904.799 684.79 L905.359 684.79 L905.918 684.79 L906.477 684.79 L907.036 684.79 L907.596 684.79 L908.155 684.79 L908.714 684.79 L909.273 684.79 L909.833 684.79 L910.392 684.79 L910.951 684.79 L911.51 684.79 L912.07 684.79 L912.629 684.79 L913.188 684.79 L913.747 684.79 L914.307 684.79 L914.866 684.79 L915.425 684.79 L915.984 684.79 L916.544 684.79 L917.103 684.79 L917.662 684.79 L918.221 684.79 L918.781 684.79 L919.34 684.79 L919.899 684.79 L920.458 684.79 L921.018 684.79 L921.577 684.79 L922.136 684.79 L922.695 684.79 L923.255 684.79 L923.814 684.79 L924.373 684.79 L924.932 684.79 L925.492 684.79 L926.051 684.79 L926.61 684.79 L927.169 684.79 L927.729 684.79 L928.288 684.79 L928.847 684.79 L929.406 684.79 L929.966 684.79 L930.525 684.79 L931.084 684.79 L931.644 684.79 L932.203 684.79 L932.762 684.79 L933.321 684.79 L933.881 684.79 L934.44 684.79 L934.999 684.79 L935.558 684.79 L936.118 684.79 L936.677 684.79 L937.236 684.79 L937.795 684.79 L938.355 684.79 L938.914 684.79 L939.473 684.79 L940.032 684.79 L940.592 684.79 L941.151 684.79 L941.71 684.79 L942.269 684.79 L942.829 684.79 L943.388 684.79 L943.947 684.79 L944.506 684.79 L945.066 684.79 L945.625 684.79 L946.184 684.79 L946.743 684.79 L947.303 684.79 L947.862 684.79 L948.421 684.79 L948.98 684.79 L949.54 684.79 L950.099 684.79 L950.658 684.79 L951.217 684.79 L951.777 684.79 L952.336 684.79 L952.895 684.79 L953.454 684.79 L954.014 684.79 L954.573 684.79 L955.132 684.79 L955.691 684.79 L956.251 684.79 L956.81 684.79 L957.369 684.79 L957.928 684.79 L958.488 684.79 L959.047 684.79 L959.606 684.79 L960.165 684.79 L960.725 684.79 L961.284 684.79 L961.843 684.79 L962.402 684.79 L962.962 684.79 L963.521 684.79 L964.08 684.79 L964.639 684.79 L965.199 684.79 L965.758 684.79 L966.317 684.79 L966.876 684.79 L967.436 684.79 L967.995 684.79 L968.554 684.79 L969.113 684.79 L969.673 684.79 L970.232 684.79 L970.791 684.79 L971.35 684.79 L971.91 684.79 L972.469 684.79 L973.028 684.79 L973.587 684.79 L974.147 684.79 L974.706 684.79 L975.265 684.79 L975.824 684.79 L976.384 684.79 L976.943 684.79 L977.502 684.79 L978.061 684.79 L978.621 684.79 L979.18 684.79 L979.739 684.79 L980.298 684.79 L980.858 684.79 L981.417 684.79 L981.976 684.79 L982.535 684.79 L983.095 684.79 L983.654 684.79 L984.213 684.79 L984.772 684.79 L985.332 684.79 L985.891 684.79 L986.45 684.79 L987.009 684.79 L987.569 684.79 L988.128 684.79 L988.687 684.79 L989.246 684.79 L989.806 684.79 L990.365 684.79 L990.924 684.79 L991.483 684.79 L992.043 684.79 L992.602 684.79 L993.161 684.79 L993.72 684.79 L994.28 684.79 L994.839 684.79 L995.398 684.79 L995.957 684.79 L996.517 684.79 L997.076 684.79 L997.635 684.79 L998.194 684.79 L998.754 684.79 L999.313 684.79 L999.872 684.79 L1000.43 684.79 L1000.99 684.79 L1001.55 684.79 L1002.11 684.79 L1002.67 684.79 L1003.23 684.79 L1003.79 684.79 L1004.35 684.79 L1004.91 684.79 L1005.46 684.79 L1006.02 684.79 L1006.58 684.79 L1007.14 684.79 L1007.7 684.79 L1008.26 684.79 L1008.82 684.79 L1009.38 684.79 L1009.94 684.79 L1010.5 684.79 L1011.06 684.79 L1011.62 684.79 L1012.18 684.79 L1012.73 684.79 L1013.29 684.79 L1013.85 684.79 L1014.41 684.79 L1014.97 684.79 L1015.53 684.79 L1016.09 684.79 L1016.65 684.79 L1017.21 684.79 L1017.77 684.79 L1018.33 684.79 L1018.89 684.79 L1019.45 684.79 L1020.01 684.79 L1020.56 684.79 L1021.12 684.79 L1021.68 684.79 L1022.24 684.79 L1022.8 684.79 L1023.36 684.79 L1023.92 684.79 L1024.48 684.79 L1025.04 684.79 L1025.6 684.79 L1026.16 684.79 L1026.72 684.79 L1027.28 684.79 L1027.83 684.79 L1028.39 684.79 L1028.95 684.79 L1029.51 684.79 L1030.07 684.79 L1030.63 684.79 L1031.19 684.79 L1031.75 684.79 L1032.31 684.79 L1032.87 684.79 L1033.43 684.79 L1033.99 684.79 L1034.55 684.79 L1035.1 684.79 L1035.66 684.79 L1036.22 684.79 L1036.78 684.79 L1037.34 684.79 L1037.9 684.79 L1038.46 684.79 L1039.02 684.79 L1039.58 684.79 L1040.14 684.79 L1040.7 684.79 L1041.26 684.79 L1041.82 684.79 L1042.38 684.79 L1042.93 684.79 L1043.49 684.79 L1044.05 684.79 L1044.61 684.79 L1045.17 684.79 L1045.73 684.79 L1046.29 684.79 L1046.85 684.79 L1047.41 684.79 L1047.97 684.79 L1048.53 684.79 L1049.09 684.79 L1049.65 684.79 L1050.2 684.79 L1050.76 684.79 L1051.32 684.79 L1051.88 684.79 L1052.44 684.79 L1053 684.79 L1053.56 684.79 L1054.12 684.79 L1054.68 684.79 L1055.24 684.79 L1055.8 684.79 L1056.36 684.79 L1056.92 684.79 L1057.48 684.79 L1058.03 684.79 L1058.59 684.79 L1059.15 684.79 L1059.71 684.79 L1060.27 684.79 L1060.83 684.79 L1061.39 684.79 L1061.95 684.79 L1062.51 684.79 L1063.07 684.79 L1063.63 684.79 L1064.19 684.79 L1064.75 684.79 L1065.3 684.79 L1065.86 684.79 L1066.42 684.79 L1066.98 684.79 L1067.54 684.79 L1068.1 684.79 L1068.66 684.79 L1069.22 684.79 L1069.78 684.79 L1070.34 684.79 L1070.9 684.79 L1071.46 684.79 L1072.02 684.79 L1072.57 684.79 L1073.13 684.79 L1073.69 684.79 L1074.25 684.79 L1074.81 684.79 L1075.37 684.79 L1075.93 684.79 L1076.49 684.79 L1077.05 684.79 L1077.61 684.79 L1078.17 684.79 L1078.73 684.79 L1079.29 684.79 L1079.85 684.79 L1080.4 684.79 L1080.96 684.79 L1081.52 684.79 L1082.08 684.79 L1082.64 684.79 L1083.2 684.79 L1083.76 684.79 L1084.32 684.79 L1084.88 684.79 L1085.44 684.79 L1086 684.79 L1086.56 684.79 L1087.12 684.79 L1087.67 684.79 L1088.23 684.79 L1088.79 684.79 L1089.35 684.79 L1089.91 684.79 L1090.47 684.79 L1091.03 684.79 L1091.59 684.79 L1092.15 684.79 L1092.71 684.79 L1093.27 684.79 L1093.83 684.79 L1094.39 684.79 L1094.94 684.79 L1095.5 684.79 L1096.06 684.79 L1096.62 684.79 L1097.18 684.79 L1097.74 684.79 L1098.3 684.79 L1098.86 684.79 L1099.42 684.79 L1099.98 684.79 L1100.54 684.79 L1101.1 684.79 L1101.66 684.79 L1102.22 684.79 L1102.77 684.79 L1103.33 684.79 L1103.89 684.79 L1104.45 684.79 L1105.01 684.79 L1105.57 684.79 L1106.13 684.79 L1106.69 684.79 L1107.25 684.79 L1107.81 684.79 L1108.37 684.79 L1108.93 684.79 L1109.49 684.79 L1110.04 684.79 L1110.6 684.79 L1111.16 684.79 L1111.72 684.79 L1112.28 684.79 L1112.84 684.79 L1113.4 684.79 L1113.96 684.79 L1114.52 684.79 L1115.08 684.79 L1115.64 684.79 L1116.2 684.79 L1116.76 684.79 L1117.31 684.79 L1117.87 684.79 L1118.43 684.79 L1118.99 684.79 L1119.55 684.79 L1120.11 684.79 L1120.67 684.79 L1121.23 684.79 L1121.79 684.79 L1122.35 684.79 L1122.91 684.79 L1123.47 684.79 L1124.03 684.79 L1124.59 684.79 L1125.14 684.79 L1125.7 684.79 L1126.26 684.79 L1126.82 684.79 L1127.38 684.79 L1127.94 684.79 L1128.5 684.79 L1129.06 684.79 L1129.62 684.79 L1130.18 684.79 L1130.74 684.79 L1131.3 684.79 L1131.86 684.79 L1132.41 684.79 L1132.97 684.79 L1133.53 684.79 L1134.09 684.79 L1134.65 684.79 L1135.21 684.79 L1135.77 684.79 L1136.33 684.79 L1136.89 684.79 L1137.45 684.79 L1138.01 684.79 L1138.57 684.79 L1139.13 684.79 L1139.68 684.79 L1140.24 684.79 L1140.8 684.79 L1141.36 684.79 L1141.92 684.79 L1142.48 684.79 L1143.04 684.79 L1143.6 684.79 L1144.16 684.79 L1144.72 684.79 L1145.28 684.79 L1145.84 684.79 L1146.4 684.79 L1146.96 684.79 L1147.51 684.79 L1148.07 684.79 L1148.63 684.79 L1149.19 684.79 L1149.75 684.79 L1150.31 684.79 L1150.87 684.79 L1151.43 684.79 L1151.99 684.79 L1152.55 684.79 L1153.11 684.79 L1153.67 684.79 L1154.23 684.79 L1154.78 684.79 L1155.34 684.79 L1155.9 684.79 L1156.46 684.79 L1157.02 684.79 L1157.58 684.79 L1158.14 684.79 L1158.7 684.79 L1159.26 684.79 L1159.82 684.79 L1160.38 684.79 L1160.94 684.79 L1161.5 684.79 L1162.05 684.79 L1162.61 684.79 L1163.17 684.79 L1163.73 684.79 L1164.29 684.79 L1164.85 684.79 L1165.41 684.79 L1165.97 684.79 L1166.53 684.79 L1167.09 684.79 L1167.65 684.79 L1168.21 684.79 L1168.77 684.79 L1169.33 684.79 L1169.88 684.79 L1170.44 684.79 L1171 684.79 L1171.56 684.79 L1172.12 684.79 L1172.68 684.79 L1173.24 684.79 L1173.8 684.79 L1174.36 684.79 L1174.92 684.79 L1175.48 684.79 L1176.04 684.79 L1176.6 684.79 L1177.15 684.79 L1177.71 684.79 L1178.27 684.79 L1178.83 684.79 L1179.39 684.79 L1179.95 684.79 L1180.51 684.79 L1181.07 684.79 L1181.63 684.79 L1182.19 684.79 L1182.75 684.79 L1183.31 684.79 L1183.87 684.79 L1184.43 684.79 L1184.98 684.79 L1185.54 684.79 L1186.1 684.79 L1186.66 684.79 L1187.22 684.79 L1187.78 684.79 L1188.34 684.79 L1188.9 684.79 L1189.46 684.79 L1190.02 684.79 L1190.58 684.79 L1191.14 684.79 L1191.7 684.79 L1192.25 684.79 L1192.81 684.79 L1193.37 684.79 L1193.93 684.79 L1194.49 684.79 L1195.05 684.79 L1195.61 684.79 L1196.17 684.79 L1196.73 684.79 L1197.29 684.79 L1197.85 684.79 L1198.41 684.79 L1198.97 684.79 L1199.52 684.79 L1200.08 684.79 L1200.64 684.79 L1201.2 684.79 L1201.76 684.79 L1202.32 684.79 L1202.88 684.79 L1203.44 684.79 L1204 684.79 L1204.56 684.79 L1205.12 684.79 L1205.68 684.79 L1206.24 684.79 L1206.8 684.79 L1207.35 684.79 L1207.91 684.79 L1208.47 684.79 L1209.03 684.79 L1209.59 684.79 L1210.15 684.79 L1210.71 684.79 L1211.27 684.79 L1211.83 684.79 L1212.39 684.79 L1212.95 684.79 L1213.51 684.79 L1214.07 684.79 L1214.62 684.79 L1215.18 684.79 L1215.74 684.79 L1216.3 684.79 L1216.86 684.79 L1217.42 684.79 L1217.98 684.79 L1218.54 684.79 L1219.1 684.79 L1219.66 684.79 L1220.22 684.79 L1220.78 684.79 L1221.34 684.79 L1221.89 684.79 L1222.45 684.79 L1223.01 684.79 L1223.57 684.79 L1224.13 684.79 L1224.69 684.79 L1225.25 684.79 L1225.81 684.79 L1226.37 684.79 L1226.93 684.79 L1227.49 684.79 L1228.05 684.79 L1228.61 684.79 L1229.17 684.79 L1229.72 684.79 L1230.28 684.79 L1230.84 684.79 L1231.4 684.79 L1231.96 684.79 L1232.52 684.79 L1233.08 684.79 L1233.64 684.79 L1234.2 684.79 L1234.76 684.79 L1235.32 684.79 L1235.88 684.79 L1236.44 684.79 L1236.99 684.79 L1237.55 684.79 L1238.11 684.79 L1238.67 684.79 L1239.23 684.79 L1239.79 684.79 L1240.35 684.79 L1240.91 684.79 L1241.47 684.79 L1242.03 684.79 L1242.59 684.79 L1243.15 684.79 L1243.71 684.79 L1244.26 684.79 L1244.82 684.79 L1245.38 684.79 L1245.94 684.79 L1246.5 684.79 L1247.06 684.79 L1247.62 684.79 L1248.18 684.79 L1248.74 684.79 L1249.3 684.79 L1249.86 684.79 L1250.42 684.79 L1250.98 684.79 L1251.54 684.79 L1252.09 684.79 L1252.65 684.79 L1253.21 684.79 L1253.77 684.79 L1254.33 684.79 L1254.89 684.79 L1255.45 684.79 L1256.01 684.79 L1256.57 684.79 L1257.13 684.79 L1257.69 684.79 L1258.25 684.79 L1258.81 684.79 L1259.36 684.79 L1259.92 684.79 L1260.48 684.79 L1261.04 684.79 L1261.6 684.79 L1262.16 684.79 L1262.72 684.79 L1263.28 684.79 L1263.84 684.79 L1264.4 684.79 L1264.96 684.79 L1265.52 684.79 L1266.08 684.79 L1266.63 684.79 L1267.19 684.79 L1267.75 684.79 L1268.31 684.79 L1268.87 684.79 L1269.43 684.79 L1269.99 684.79 L1270.55 684.79 L1271.11 684.79 L1271.67 684.79 L1272.23 684.79 L1272.79 684.79 L1273.35 684.79 L1273.91 684.79 L1274.46 684.79 L1275.02 684.79 L1275.58 684.79 L1276.14 684.79 L1276.7 684.79 L1277.26 684.79 L1277.82 684.79 L1278.38 684.79 L1278.94 684.79 L1279.5 684.79 L1280.06 684.79 L1280.62 684.79 L1281.18 684.79 L1281.73 684.79 L1282.29 684.79 L1282.85 684.79 L1283.41 684.79 L1283.97 684.79 L1284.53 684.79 L1285.09 684.79 L1285.65 684.79 L1286.21 684.79 L1286.77 684.79 L1287.33 684.79 L1287.89 684.79 L1288.45 684.79 L1289 684.79 L1289.56 684.79 L1290.12 684.79 L1290.68 684.79 L1291.24 684.79 L1291.8 684.79 L1292.36 684.79 L1292.92 684.79 L1293.48 684.79 L1294.04 684.79 L1294.6 684.79 L1295.16 684.79 L1295.72 684.79 L1296.28 684.79 L1296.83 684.79 L1297.39 684.79 L1297.95 684.79 L1298.51 684.79 L1299.07 684.79 L1299.63 684.79 L1300.19 684.79 L1300.75 684.79 L1301.31 684.79 L1301.87 684.79 L1302.43 684.79 L1302.99 684.79 L1303.55 684.79 L1304.1 684.79 L1304.66 684.79 L1305.22 684.79 L1305.78 684.79 L1306.34 684.79 L1306.9 684.79 L1307.46 684.79 L1308.02 684.79 L1308.58 684.79 L1309.14 684.79 L1309.7 684.79 L1310.26 684.79 L1310.82 684.79 L1311.38 684.79 L1311.93 684.79 L1312.49 684.79 L1313.05 684.79 L1313.61 684.79 L1314.17 684.79 L1314.73 684.79 L1315.29 684.79 L1315.85 684.79 L1316.41 684.79 L1316.97 684.79 L1317.53 684.79 L1318.09 684.79 L1318.65 684.79 L1319.2 684.79 L1319.76 684.79 L1320.32 684.79 L1320.88 684.79 L1321.44 684.79 L1322 684.79 L1322.56 684.79 L1323.12 684.79 L1323.68 684.79 L1324.24 684.79 L1324.8 684.79 L1325.36 684.79 L1325.92 684.79 L1326.47 684.79 L1327.03 684.79 L1327.59 684.79 L1328.15 684.79 L1328.71 684.79 L1329.27 684.79 L1329.83 684.79 L1330.39 684.79 L1330.95 684.79 L1331.51 684.79 L1332.07 684.79 L1332.63 684.79 L1333.19 684.79 L1333.75 684.79 L1334.3 684.79 L1334.86 684.79 L1335.42 684.79 L1335.98 684.79 L1336.54 684.79 L1337.1 684.79 L1337.66 684.79 L1338.22 684.79 L1338.78 684.79 L1339.34 684.79 L1339.9 684.79 L1340.46 684.79 L1341.02 684.79 L1341.57 684.79 L1342.13 684.79 L1342.69 684.79 L1343.25 684.79 L1343.81 684.79 L1344.37 684.79 L1344.93 684.79 L1345.49 684.79 L1346.05 684.79 L1346.61 684.79 L1347.17 684.79 L1347.73 684.79 L1348.29 684.79 L1348.84 684.79 L1349.4 684.79 L1349.96 684.79 L1350.52 684.79 L1351.08 684.79 L1351.64 684.79 L1352.2 684.79 L1352.76 684.79 L1353.32 684.79 L1353.88 684.79 L1354.44 684.79 L1355 684.79 L1355.56 684.79 L1356.12 684.79 L1356.67 684.79 L1357.23 684.79 L1357.79 684.79 L1358.35 684.79 L1358.91 684.79 L1359.47 684.79 L1360.03 684.79 L1360.59 684.79 L1361.15 684.79 L1361.71 684.79 L1362.27 684.79 L1362.83 684.79 L1363.39 684.79 L1363.94 684.79 L1364.5 684.79 L1365.06 684.79 L1365.62 684.79 L1366.18 684.79 L1366.74 684.79 L1367.3 684.79 L1367.86 684.79 L1368.42 684.79 L1368.98 684.79 L1369.54 684.79 L1370.1 684.79 L1370.66 684.79 L1371.21 684.79 L1371.77 684.79 L1372.33 684.79 L1372.89 684.79 L1373.45 684.79 L1374.01 684.79 L1374.57 684.79 L1375.13 684.79 L1375.69 684.79 L1376.25 684.79 L1376.81 684.79 L1377.37 684.79 L1377.93 684.79 L1378.49 684.79 L1379.04 684.79 L1379.6 684.79 L1380.16 684.79 L1380.72 684.79 L1381.28 684.79 L1381.84 684.79 L1382.4 684.79 L1382.96 684.79 L1383.52 684.79 L1384.08 684.79 L1384.64 684.79 L1385.2 684.79 L1385.76 684.79 L1386.31 684.79 L1386.87 684.79 L1387.43 684.79 L1387.99 684.79 L1388.55 684.79 L1389.11 684.79 L1389.67 684.79 L1390.23 684.79 L1390.79 684.79 L1391.35 684.79 L1391.91 684.79 L1392.47 684.79 L1393.03 684.79 L1393.58 684.79 L1394.14 684.79 L1394.7 684.79 L1395.26 684.79 L1395.82 684.79 L1396.38 684.79 L1396.94 684.79 L1397.5 684.79 L1398.06 684.79 L1398.62 684.79 L1399.18 684.79 L1399.74 684.79 L1400.3 684.79 L1400.86 684.79 L1401.41 684.79 L1401.97 684.79 L1402.53 684.79 L1403.09 684.79 L1403.65 684.79 L1404.21 684.79 L1404.77 684.79 L1405.33 684.79 L1405.89 684.79 L1406.45 684.79 L1407.01 684.79 L1407.57 684.79 L1408.13 684.79 L1408.68 684.79 L1409.24 684.79 L1409.8 684.79 L1410.36 684.79 L1410.92 684.79 L1411.48 684.79 L1412.04 684.79 L1412.6 684.79 L1413.16 684.79 L1413.72 684.79 L1414.28 684.79 L1414.84 684.79 L1415.4 684.79 L1415.95 684.79 L1416.51 684.79 L1417.07 684.79 L1417.63 684.79 L1418.19 684.79 L1418.75 684.79 L1419.31 684.79 L1419.87 684.79 L1420.43 684.79 L1420.99 684.79 L1421.55 684.79 L1422.11 684.79 L1422.67 684.79 L1423.23 684.79 L1423.78 684.79 L1424.34 684.79 L1424.9 684.79 L1425.46 684.79 L1426.02 684.79 L1426.58 684.79 L1427.14 684.79 L1427.7 684.79 L1428.26 684.79 L1428.82 684.79 L1429.38 684.79 L1429.94 684.79 L1430.5 684.79 L1431.05 684.79 L1431.61 684.79 L1432.17 684.79 L1432.73 684.79 L1433.29 684.79 L1433.85 684.79 L1434.41 684.79 L1434.97 684.79 L1435.53 684.79 L1436.09 684.79 L1436.65 684.79 L1437.21 684.79 L1437.77 684.79 L1438.33 684.79 L1438.88 684.79 L1439.44 684.79 L1440 684.79 L1440.56 684.79 L1441.12 684.79 L1441.68 684.79 L1442.24 684.79 L1442.8 684.79 L1443.36 684.79 L1443.92 684.79 L1444.48 684.79 L1445.04 684.79 L1445.6 684.79 L1446.15 684.79 L1446.71 684.79 L1447.27 684.79 L1447.83 684.79 L1448.39 684.79 L1448.95 684.79 L1449.51 684.79 L1450.07 684.79 L1450.63 684.79 L1451.19 684.79 L1451.75 684.79 L1452.31 684.79 L1452.87 684.79 L1453.42 684.79 L1453.98 684.79 L1454.54 684.79 L1455.1 684.79 L1455.66 684.79 L1456.22 684.79 L1456.78 684.79 L1457.34 684.79 L1457.9 684.79 L1458.46 684.79 L1459.02 684.79 L1459.58 684.79 L1460.14 684.79 L1460.7 684.79 L1461.25 684.79 L1461.81 684.79 L1462.37 684.79 L1462.93 684.79 L1463.49 684.79 L1464.05 684.79 L1464.61 684.79 L1465.17 684.79 L1465.73 684.79 L1466.29 684.79 L1466.85 684.79 L1467.41 684.79 L1467.97 684.79 L1468.52 684.79 L1469.08 684.79 L1469.64 684.79 L1470.2 684.79 L1470.76 684.79 L1471.32 684.79 L1471.88 684.79 L1472.44 684.79 L1473 684.79 L1473.56 684.79 L1474.12 684.79 L1474.68 684.79 L1475.24 684.79 L1475.79 684.79 L1476.35 684.79 L1476.91 684.79 L1477.47 684.79 L1478.03 684.79 L1478.59 684.79 L1479.15 684.79 L1479.71 684.79 L1480.27 684.79 L1480.83 684.79 L1481.39 684.79 L1481.95 684.79 L1482.51 684.79 L1483.07 684.79 L1483.62 684.79 L1484.18 684.79 L1484.74 684.79 L1485.3 684.79 L1485.86 684.79 L1486.42 684.79 L1486.98 684.79 L1487.54 684.79 L1488.1 684.79 L1488.66 684.79 L1489.22 684.79 L1489.78 684.79 L1490.34 684.79 L1490.89 684.79 L1491.45 684.79 L1492.01 684.79 L1492.57 684.79 L1493.13 684.79 L1493.69 684.79 L1494.25 684.79 L1494.81 684.79 L1495.37 684.79 L1495.93 684.79 L1496.49 684.79 L1497.05 684.79 L1497.61 684.79 L1498.16 684.79 L1498.72 684.79 L1499.28 684.79 L1499.84 684.79 L1500.4 684.79 L1500.96 684.79 L1501.52 684.79 L1502.08 684.79 L1502.64 684.79 L1503.2 684.79 L1503.76 684.79 L1504.32 684.79 L1504.88 684.79 L1505.44 684.79 L1505.99 684.79 L1506.55 684.79 L1507.11 684.79 L1507.67 684.79 L1508.23 684.79 L1508.79 684.79 L1509.35 684.79 L1509.91 684.79 L1510.47 684.79 L1511.03 684.79 L1511.59 684.79 L1512.15 684.79 L1512.71 684.79 L1513.26 684.79 L1513.82 684.79 L1514.38 684.79 L1514.94 684.79 L1515.5 684.79 L1516.06 684.79 L1516.62 684.79 L1517.18 684.79 L1517.74 684.79 L1518.3 684.79 L1518.86 684.79 L1519.42 684.79 L1519.98 684.79 L1520.53 684.79 L1521.09 684.79 L1521.65 684.79 L1522.21 684.79 L1522.77 684.79 L1523.33 684.79 L1523.89 684.79 L1524.45 684.79 L1525.01 684.79 L1525.57 684.79 L1526.13 684.79 L1526.69 684.79 L1527.25 684.79 L1527.81 684.79 L1528.36 684.79 L1528.92 684.79 L1529.48 684.79 L1530.04 684.79 L1530.6 684.79 L1531.16 684.79 L1531.72 684.79 L1532.28 684.79 L1532.84 684.79 L1533.4 684.79 L1533.96 684.79 L1534.52 684.79 L1535.08 684.79 L1535.63 684.79 L1536.19 684.79 L1536.75 684.79 L1537.31 684.79 L1537.87 684.79 L1538.43 684.79 L1538.99 684.79 L1539.55 684.79 L1540.11 684.79 L1540.67 684.79 L1541.23 684.79 L1541.79 684.79 L1542.35 684.79 L1542.9 684.79 L1543.46 684.79 L1544.02 684.79 L1544.58 684.79 L1545.14 684.79 L1545.7 684.79 L1546.26 684.79 L1546.82 684.79 L1547.38 684.79 L1547.94 684.79 L1548.5 684.79 L1549.06 684.79 L1549.62 684.79 L1550.18 684.79 L1550.73 684.79 L1551.29 684.79 L1551.85 684.79 L1552.41 684.79 L1552.97 684.79 L1553.53 684.79 L1554.09 684.79 L1554.65 684.79 L1555.21 684.79 L1555.77 684.79 L1556.33 684.79 L1556.89 684.79 L1557.45 684.79 L1558 684.79 L1558.56 684.79 L1559.12 684.79 L1559.68 684.79 L1560.24 684.79 L1560.8 684.79 L1561.36 684.79 L1561.92 684.79 L1562.48 684.79 L1563.04 684.79 L1563.6 684.79 L1564.16 684.79 L1564.72 684.79 L1565.28 684.79 L1565.83 684.79 L1566.39 684.79 L1566.95 684.79 L1567.51 684.79 L1568.07 684.79 L1568.63 684.79 L1569.19 684.79 L1569.75 684.79 L1570.31 684.79 L1570.87 684.79 L1571.43 684.79 L1571.99 684.79 L1572.55 684.79 L1573.1 684.79 L1573.66 684.79 L1574.22 684.79 L1574.78 684.79 L1575.34 684.79 L1575.9 684.79 L1576.46 684.79 L1577.02 684.79 L1577.58 684.79 L1578.14 684.79 L1578.7 684.79 L1579.26 684.79 L1579.82 684.79 L1580.37 684.79 L1580.93 684.79 L1581.49 684.79 L1582.05 684.79 L1582.61 684.79 L1583.17 684.79 L1583.73 684.79 L1584.29 684.79 L1584.85 684.79 L1585.41 684.79 L1585.97 684.79 L1586.53 684.79 L1587.09 684.79 L1587.65 684.79 L1588.2 684.79 L1588.76 684.79 L1589.32 684.79 L1589.88 684.79 L1590.44 684.79 L1591 684.79 L1591.56 684.79 L1592.12 684.79 L1592.68 684.79 L1593.24 684.79 L1593.8 684.79 L1594.36 684.79 L1594.92 684.79 L1595.47 684.79 L1596.03 684.79 L1596.59 684.79 L1597.15 684.79 L1597.71 684.79 L1598.27 684.79 L1598.83 684.79 L1599.39 684.79 L1599.95 684.79 L1600.51 684.79 L1601.07 684.79 L1601.63 684.79 L1602.19 684.79 L1602.74 684.79 L1603.3 684.79 L1603.86 684.79 L1604.42 684.79 L1604.98 684.79 L1605.54 684.79 L1606.1 684.79 L1606.66 684.79 L1607.22 684.79 L1607.78 684.79 L1608.34 684.79 L1608.9 684.79 L1609.46 684.79 L1610.02 684.79 L1610.57 684.79 L1611.13 684.79 L1611.69 684.79 L1612.25 684.79 L1612.81 684.79 L1613.37 684.79 L1613.93 684.79 L1614.49 684.79 L1615.05 684.79 L1615.61 684.79 L1616.17 684.79 L1616.73 684.79 L1617.29 684.79 L1617.84 684.79 L1618.4 684.79 L1618.96 684.79 L1619.52 684.79 L1620.08 684.79 L1620.64 684.79 L1621.2 684.79 L1621.76 684.79 L1622.32 684.79 L1622.88 684.79 L1623.44 684.79 L1624 684.79 L1624.56 684.79 L1625.11 684.79 L1625.67 684.79 L1626.23 684.79 L1626.79 684.79 L1627.35 684.79 L1627.91 684.79 L1628.47 684.79 L1629.03 684.79 L1629.59 684.79 L1630.15 684.79 L1630.71 684.79 L1631.27 684.79 L1631.83 684.79 L1632.39 684.79 L1632.94 684.79 L1633.5 684.79 L1634.06 684.79 L1634.62 684.79 L1635.18 684.79 L1635.74 684.79 L1636.3 684.79 L1636.86 684.79 L1637.42 684.79 L1637.98 684.79 L1638.54 684.79 L1639.1 684.79 L1639.66 684.79 L1640.21 684.79 L1640.77 684.79 L1641.33 684.79 L1641.89 684.79 L1642.45 684.79 L1643.01 684.79 L1643.57 684.79 L1644.13 684.79 L1644.69 684.79 L1645.25 684.79 L1645.81 684.79 L1646.37 684.79 L1646.93 684.79 L1647.48 684.79 L1648.04 684.79 L1648.6 684.79 L1649.16 684.79 L1649.72 684.79 L1650.28 684.79 L1650.84 684.79 L1651.4 684.79 L1651.96 684.79 L1652.52 684.79 L1653.08 684.79 L1653.64 684.79 L1654.2 684.79 L1654.76 684.79 L1655.31 684.79 L1655.87 684.79 L1656.43 684.79 L1656.99 684.79 L1657.55 684.79 L1658.11 684.79 L1658.67 684.79 L1659.23 684.79 L1659.79 684.79 L1660.35 684.79 L1660.91 684.79 L1661.47 684.79 L1662.03 684.79 L1662.58 684.79 L1663.14 684.79 L1663.7 684.79 L1664.26 684.79 L1664.82 684.79 L1665.38 684.79 L1665.94 684.79 L1666.5 684.79 L1667.06 684.79 L1667.62 684.79 L1668.18 684.79 L1668.74 684.79 L1669.3 684.79 L1669.85 684.79 L1670.41 684.79 L1670.97 684.79 L1671.53 684.79 L1672.09 684.79 L1672.65 684.79 L1673.21 684.79 L1673.77 684.79 L1674.33 684.79 L1674.89 684.79 L1675.45 684.79 L1676.01 684.79 L1676.57 684.79 L1677.13 684.79 L1677.68 684.79 L1678.24 684.79 L1678.8 684.79 L1679.36 684.79 L1679.92 684.79 L1680.48 684.79 L1681.04 684.79 L1681.6 684.79 L1682.16 684.79 L1682.72 684.79 L1683.28 684.79 L1683.84 684.79 L1684.4 684.79 L1684.95 684.79 L1685.51 684.79 L1686.07 684.79 L1686.63 684.79 L1687.19 684.79 L1687.75 684.79 L1688.31 684.79 L1688.87 684.79 L1689.43 684.79 L1689.99 684.79 L1690.55 684.79 L1691.11 684.79 L1691.67 684.79 L1692.23 684.79 L1692.78 684.79 L1693.34 684.79 L1693.9 684.79 L1694.46 684.79 L1695.02 684.79 L1695.58 684.79 L1696.14 684.79 L1696.7 684.79 L1697.26 684.79 L1697.82 684.79 L1698.38 684.79 L1698.94 684.79 L1699.5 684.79 L1700.05 684.79 L1700.61 684.79 L1701.17 684.79 L1701.73 684.79 L1702.29 684.79 L1702.85 684.79 L1703.41 684.79 L1703.97 684.79 L1704.53 684.79 L1705.09 684.79 L1705.65 684.79 L1706.21 684.79 L1706.77 684.79 L1707.32 684.79 L1707.88 684.79 L1708.44 684.79 L1709 684.79 L1709.56 684.79 L1710.12 684.79 L1710.68 684.79 L1711.24 684.79 L1711.8 684.79 L1712.36 684.79 L1712.92 684.79 L1713.48 684.79 L1714.04 684.79 L1714.6 684.79 L1715.15 684.79 L1715.71 684.79 L1716.27 684.79 L1716.83 684.79 L1717.39 684.79 L1717.95 684.79 L1718.51 684.79 L1719.07 684.79 L1719.63 684.79 L1720.19 684.79 L1720.75 684.79 L1721.31 684.79 L1721.87 684.79 L1722.42 684.79 L1722.98 684.79 L1723.54 684.79 L1724.1 684.79 L1724.66 684.79 L1725.22 684.79 L1725.78 684.79 L1726.34 684.79 L1726.9 684.79 L1727.46 684.79 L1728.02 684.79 L1728.58 684.79 L1729.14 684.79 L1729.69 684.79 L1730.25 684.79 L1730.81 684.79 L1731.37 684.79 L1731.93 684.79 L1732.49 684.79 L1733.05 684.79 L1733.61 684.79 L1734.17 684.79 L1734.73 684.79 L1735.29 684.79 L1735.85 684.79 L1736.41 684.79 L1736.97 684.79 L1737.52 684.79 L1738.08 684.79 L1738.64 684.79 L1739.2 684.79 L1739.76 684.79 L1740.32 684.79 L1740.88 684.79 L1741.44 684.79 L1742 684.79 L1742.56 684.79 L1743.12 684.79 L1743.68 684.79 L1744.24 684.79 L1744.79 684.79 L1745.35 684.79 L1745.91 684.79 L1746.47 684.79 L1747.03 684.79 L1747.59 684.79 L1748.15 684.79 L1748.71 684.79 L1749.27 684.79 L1749.83 684.79 L1750.39 684.79 L1750.95 684.79 L1751.51 684.79 L1752.06 684.79 L1752.62 684.79 L1753.18 684.79 L1753.74 684.79 L1754.3 684.79 L1754.86 684.79 L1755.42 684.79 L1755.98 684.79 L1756.54 684.79 L1757.1 684.79 L1757.66 684.79 L1758.22 684.79 L1758.78 684.79 L1759.34 684.79 L1759.89 684.79 L1760.45 684.79 L1761.01 684.79 L1761.57 684.79 L1762.13 684.79 L1762.69 684.79 L1763.25 684.79 L1763.81 684.79 L1764.37 684.79 L1764.93 684.79 L1765.49 684.79 L1766.05 684.79 L1766.61 684.79 L1767.16 684.79 L1767.72 684.79 L1768.28 684.79 L1768.84 684.79 L1769.4 684.79 L1769.96 684.79 L1770.52 684.79 L1771.08 684.79 L1771.64 684.79 L1772.2 684.79 L1772.76 684.79 L1773.32 684.79 L1773.88 684.79 L1774.43 684.79 L1774.99 684.79 L1775.55 684.79 L1776.11 684.79 L1776.67 684.79 L1777.23 684.79 L1777.79 684.79 L1778.35 684.79 L1778.91 684.79 L1779.47 684.79 L1780.03 684.79 L1780.59 684.79 L1781.15 684.79 L1781.71 684.79 L1782.26 684.79 L1782.82 684.79 L1783.38 684.79 L1783.94 684.79 L1784.5 684.79 L1785.06 684.79 L1785.62 684.79 L1786.18 684.79 L1786.74 684.79 L1787.3 684.79 L1787.86 684.79 L1788.42 684.79 L1788.98 684.79 L1789.53 684.79 L1790.09 684.79 L1790.65 684.79 L1791.21 684.79 L1791.77 684.79 L1792.33 684.79 L1792.89 684.79 L1793.45 684.79 L1794.01 684.79 L1794.57 684.79 L1795.13 684.79 L1795.69 684.79 L1796.25 684.79 L1796.8 684.79 L1797.36 684.79 L1797.92 684.79 L1798.48 684.79 L1799.04 684.79 L1799.6 684.79 L1800.16 684.79 L1800.72 684.79 L1801.28 684.79 L1801.84 684.79 L1802.4 684.79 L1802.96 684.79 L1803.52 684.79 L1804.08 684.79 L1804.63 684.79 L1805.19 684.79 L1805.75 684.79 L1806.31 684.79 L1806.87 684.79 L1807.43 684.79 L1807.99 684.79 L1808.55 684.79 L1809.11 684.79 L1809.67 684.79 L1810.23 684.79 L1810.79 684.79 L1811.35 684.79 L1811.9 684.79 L1812.46 684.79 L1813.02 684.79 L1813.58 684.79 L1814.14 684.79 L1814.7 684.79 L1815.26 684.79 L1815.82 684.79 L1816.38 684.79 L1816.94 684.79 L1817.5 684.79 L1818.06 684.79 L1818.62 684.79 L1819.18 684.79 L1819.73 684.79 L1820.29 684.79 L1820.85 684.79 L1821.41 684.79 L1821.97 684.79 L1822.53 684.79 L1823.09 684.79 L1823.65 684.79 L1824.21 684.79 L1824.77 684.79 L1825.33 684.79 L1825.89 684.79 L1826.45 684.79 L1827 684.79 L1827.56 684.79 L1828.12 684.79 L1828.68 684.79 L1829.24 684.79 L1829.8 684.79 L1830.36 684.79 L1830.92 684.79 L1831.48 684.79 L1832.04 684.79 L1832.6 684.79 L1833.16 684.79 L1833.72 684.79 L1834.27 684.79 L1834.83 684.79 L1835.39 684.79 L1835.95 684.79 L1836.51 684.79 L1837.07 684.79 L1837.63 684.79 L1838.19 684.79 L1838.19 681.978 L1837.63 681.978 L1837.07 681.978 L1836.51 681.978 L1835.95 681.978 L1835.39 681.978 L1834.83 681.978 L1834.27 681.978 L1833.72 681.978 L1833.16 681.978 L1832.6 681.978 L1832.04 681.978 L1831.48 681.978 L1830.92 681.978 L1830.36 681.978 L1829.8 681.978 L1829.24 681.978 L1828.68 681.978 L1828.12 681.978 L1827.56 681.978 L1827 681.978 L1826.45 681.978 L1825.89 681.978 L1825.33 681.978 L1824.77 681.978 L1824.21 681.978 L1823.65 681.978 L1823.09 681.978 L1822.53 681.978 L1821.97 681.978 L1821.41 681.978 L1820.85 681.978 L1820.29 681.978 L1819.73 681.978 L1819.18 681.978 L1818.62 681.978 L1818.06 681.978 L1817.5 681.978 L1816.94 681.978 L1816.38 681.978 L1815.82 681.978 L1815.26 681.978 L1814.7 681.978 L1814.14 681.978 L1813.58 681.978 L1813.02 681.978 L1812.46 681.978 L1811.9 681.978 L1811.35 681.978 L1810.79 681.978 L1810.23 681.978 L1809.67 681.978 L1809.11 681.978 L1808.55 681.978 L1807.99 681.978 L1807.43 681.978 L1806.87 681.978 L1806.31 681.978 L1805.75 681.978 L1805.19 681.978 L1804.63 681.978 L1804.08 681.978 L1803.52 681.978 L1802.96 681.978 L1802.4 681.978 L1801.84 681.978 L1801.28 681.978 L1800.72 681.978 L1800.16 681.978 L1799.6 681.978 L1799.04 681.978 L1798.48 681.978 L1797.92 681.978 L1797.36 681.978 L1796.8 681.978 L1796.25 681.978 L1795.69 681.978 L1795.13 681.978 L1794.57 681.978 L1794.01 681.978 L1793.45 681.978 L1792.89 681.978 L1792.33 681.978 L1791.77 681.978 L1791.21 681.978 L1790.65 681.978 L1790.09 681.978 L1789.53 681.978 L1788.98 681.978 L1788.42 681.978 L1787.86 681.978 L1787.3 681.978 L1786.74 681.978 L1786.18 681.978 L1785.62 681.978 L1785.06 681.978 L1784.5 681.978 L1783.94 681.978 L1783.38 681.978 L1782.82 681.978 L1782.26 681.978 L1781.71 681.978 L1781.15 681.978 L1780.59 681.978 L1780.03 681.978 L1779.47 681.978 L1778.91 681.978 L1778.35 681.978 L1777.79 681.978 L1777.23 681.978 L1776.67 681.978 L1776.11 681.978 L1775.55 681.978 L1774.99 681.978 L1774.43 681.978 L1773.88 681.978 L1773.32 681.978 L1772.76 681.978 L1772.2 681.978 L1771.64 681.978 L1771.08 681.978 L1770.52 681.978 L1769.96 681.978 L1769.4 681.978 L1768.84 681.978 L1768.28 681.978 L1767.72 681.978 L1767.16 681.978 L1766.61 681.978 L1766.05 681.978 L1765.49 681.978 L1764.93 681.978 L1764.37 681.978 L1763.81 681.978 L1763.25 681.978 L1762.69 681.978 L1762.13 681.978 L1761.57 681.978 L1761.01 681.978 L1760.45 681.978 L1759.89 681.978 L1759.34 681.978 L1758.78 681.978 L1758.22 681.978 L1757.66 681.978 L1757.1 681.978 L1756.54 681.978 L1755.98 681.978 L1755.42 681.978 L1754.86 681.978 L1754.3 681.978 L1753.74 681.978 L1753.18 681.978 L1752.62 681.978 L1752.06 681.978 L1751.51 681.978 L1750.95 681.978 L1750.39 681.978 L1749.83 681.978 L1749.27 681.978 L1748.71 681.978 L1748.15 681.978 L1747.59 681.978 L1747.03 681.978 L1746.47 681.978 L1745.91 681.978 L1745.35 681.978 L1744.79 681.978 L1744.24 681.978 L1743.68 681.978 L1743.12 681.978 L1742.56 681.978 L1742 681.978 L1741.44 681.978 L1740.88 681.978 L1740.32 681.978 L1739.76 681.978 L1739.2 681.978 L1738.64 681.978 L1738.08 681.978 L1737.52 681.978 L1736.97 681.978 L1736.41 681.978 L1735.85 681.978 L1735.29 681.978 L1734.73 681.978 L1734.17 681.978 L1733.61 681.978 L1733.05 681.978 L1732.49 681.978 L1731.93 681.978 L1731.37 681.978 L1730.81 681.978 L1730.25 681.978 L1729.69 681.978 L1729.14 681.978 L1728.58 681.978 L1728.02 681.978 L1727.46 681.978 L1726.9 681.978 L1726.34 681.978 L1725.78 681.978 L1725.22 681.978 L1724.66 681.978 L1724.1 681.978 L1723.54 681.978 L1722.98 681.978 L1722.42 681.978 L1721.87 681.978 L1721.31 681.978 L1720.75 681.978 L1720.19 681.978 L1719.63 681.978 L1719.07 681.978 L1718.51 681.978 L1717.95 681.978 L1717.39 681.978 L1716.83 681.978 L1716.27 681.978 L1715.71 681.978 L1715.15 681.978 L1714.6 681.978 L1714.04 681.978 L1713.48 681.978 L1712.92 681.978 L1712.36 681.978 L1711.8 681.978 L1711.24 681.978 L1710.68 681.978 L1710.12 681.978 L1709.56 681.978 L1709 681.978 L1708.44 681.978 L1707.88 681.978 L1707.32 681.978 L1706.77 681.978 L1706.21 681.978 L1705.65 681.978 L1705.09 681.978 L1704.53 681.978 L1703.97 681.978 L1703.41 681.978 L1702.85 681.978 L1702.29 681.978 L1701.73 681.978 L1701.17 681.978 L1700.61 681.978 L1700.05 681.978 L1699.5 681.978 L1698.94 681.978 L1698.38 681.978 L1697.82 681.978 L1697.26 681.978 L1696.7 681.978 L1696.14 681.978 L1695.58 681.978 L1695.02 681.978 L1694.46 681.978 L1693.9 681.978 L1693.34 681.978 L1692.78 681.978 L1692.23 681.978 L1691.67 681.978 L1691.11 681.978 L1690.55 681.978 L1689.99 681.978 L1689.43 681.978 L1688.87 681.978 L1688.31 681.978 L1687.75 681.978 L1687.19 681.978 L1686.63 681.978 L1686.07 681.978 L1685.51 681.978 L1684.95 681.978 L1684.4 681.978 L1683.84 681.978 L1683.28 681.978 L1682.72 681.978 L1682.16 681.978 L1681.6 681.978 L1681.04 681.978 L1680.48 681.978 L1679.92 681.978 L1679.36 681.978 L1678.8 681.978 L1678.24 681.978 L1677.68 681.978 L1677.13 681.978 L1676.57 681.978 L1676.01 681.978 L1675.45 681.978 L1674.89 681.978 L1674.33 681.978 L1673.77 681.978 L1673.21 681.978 L1672.65 681.978 L1672.09 681.978 L1671.53 681.978 L1670.97 681.978 L1670.41 681.978 L1669.85 681.978 L1669.3 681.978 L1668.74 681.978 L1668.18 681.978 L1667.62 681.978 L1667.06 681.978 L1666.5 681.978 L1665.94 681.978 L1665.38 681.978 L1664.82 681.978 L1664.26 681.978 L1663.7 681.978 L1663.14 681.978 L1662.58 681.978 L1662.03 681.978 L1661.47 681.978 L1660.91 681.978 L1660.35 681.978 L1659.79 681.978 L1659.23 681.978 L1658.67 681.978 L1658.11 681.978 L1657.55 681.978 L1656.99 681.978 L1656.43 681.978 L1655.87 681.978 L1655.31 681.978 L1654.76 681.978 L1654.2 681.978 L1653.64 681.978 L1653.08 681.978 L1652.52 681.978 L1651.96 681.978 L1651.4 681.978 L1650.84 681.978 L1650.28 681.978 L1649.72 681.978 L1649.16 681.978 L1648.6 681.978 L1648.04 681.978 L1647.48 681.978 L1646.93 681.978 L1646.37 681.978 L1645.81 681.978 L1645.25 681.978 L1644.69 681.978 L1644.13 681.978 L1643.57 681.978 L1643.01 681.978 L1642.45 681.978 L1641.89 681.978 L1641.33 681.978 L1640.77 681.978 L1640.21 681.978 L1639.66 681.978 L1639.1 681.978 L1638.54 681.978 L1637.98 681.978 L1637.42 681.978 L1636.86 681.978 L1636.3 681.978 L1635.74 681.978 L1635.18 681.978 L1634.62 681.978 L1634.06 681.978 L1633.5 681.978 L1632.94 681.978 L1632.39 681.978 L1631.83 681.978 L1631.27 681.978 L1630.71 681.978 L1630.15 681.978 L1629.59 681.978 L1629.03 681.978 L1628.47 681.978 L1627.91 681.978 L1627.35 681.978 L1626.79 681.978 L1626.23 681.978 L1625.67 681.978 L1625.11 681.978 L1624.56 681.978 L1624 681.978 L1623.44 681.978 L1622.88 681.978 L1622.32 681.978 L1621.76 681.978 L1621.2 681.978 L1620.64 681.978 L1620.08 681.978 L1619.52 681.978 L1618.96 681.978 L1618.4 681.978 L1617.84 681.978 L1617.29 681.978 L1616.73 681.978 L1616.17 681.978 L1615.61 681.978 L1615.05 681.978 L1614.49 681.978 L1613.93 681.978 L1613.37 681.978 L1612.81 681.978 L1612.25 681.978 L1611.69 681.978 L1611.13 681.978 L1610.57 681.978 L1610.02 681.978 L1609.46 681.978 L1608.9 681.978 L1608.34 681.978 L1607.78 681.978 L1607.22 681.978 L1606.66 681.978 L1606.1 681.978 L1605.54 681.978 L1604.98 681.978 L1604.42 681.978 L1603.86 681.978 L1603.3 681.978 L1602.74 681.978 L1602.19 681.978 L1601.63 681.978 L1601.07 681.978 L1600.51 681.978 L1599.95 681.978 L1599.39 681.978 L1598.83 681.978 L1598.27 681.978 L1597.71 681.978 L1597.15 681.978 L1596.59 681.978 L1596.03 681.978 L1595.47 681.978 L1594.92 681.978 L1594.36 681.978 L1593.8 681.978 L1593.24 681.978 L1592.68 681.978 L1592.12 681.978 L1591.56 681.978 L1591 681.978 L1590.44 681.978 L1589.88 681.978 L1589.32 681.978 L1588.76 681.978 L1588.2 681.978 L1587.65 681.978 L1587.09 681.978 L1586.53 681.978 L1585.97 681.978 L1585.41 681.978 L1584.85 681.978 L1584.29 681.978 L1583.73 681.978 L1583.17 681.978 L1582.61 681.978 L1582.05 681.978 L1581.49 681.978 L1580.93 681.978 L1580.37 681.978 L1579.82 681.978 L1579.26 681.978 L1578.7 681.978 L1578.14 681.978 L1577.58 681.978 L1577.02 681.978 L1576.46 681.978 L1575.9 681.978 L1575.34 681.978 L1574.78 681.978 L1574.22 681.978 L1573.66 681.978 L1573.1 681.978 L1572.55 681.978 L1571.99 681.978 L1571.43 681.978 L1570.87 681.978 L1570.31 681.978 L1569.75 681.978 L1569.19 681.978 L1568.63 681.978 L1568.07 681.978 L1567.51 681.978 L1566.95 681.978 L1566.39 681.978 L1565.83 681.978 L1565.28 681.978 L1564.72 681.978 L1564.16 681.978 L1563.6 681.978 L1563.04 681.978 L1562.48 681.978 L1561.92 681.978 L1561.36 681.978 L1560.8 681.978 L1560.24 681.978 L1559.68 681.978 L1559.12 681.978 L1558.56 681.978 L1558 681.978 L1557.45 681.978 L1556.89 681.978 L1556.33 681.978 L1555.77 681.978 L1555.21 681.978 L1554.65 681.978 L1554.09 681.978 L1553.53 681.978 L1552.97 681.978 L1552.41 681.978 L1551.85 681.978 L1551.29 681.978 L1550.73 681.978 L1550.18 681.978 L1549.62 681.978 L1549.06 681.978 L1548.5 681.978 L1547.94 681.978 L1547.38 681.978 L1546.82 681.978 L1546.26 681.978 L1545.7 681.978 L1545.14 681.978 L1544.58 681.978 L1544.02 681.978 L1543.46 681.978 L1542.9 681.978 L1542.35 681.978 L1541.79 681.978 L1541.23 681.978 L1540.67 681.978 L1540.11 681.978 L1539.55 681.978 L1538.99 681.978 L1538.43 681.978 L1537.87 681.978 L1537.31 681.978 L1536.75 681.978 L1536.19 681.978 L1535.63 681.978 L1535.08 681.978 L1534.52 681.978 L1533.96 681.978 L1533.4 681.978 L1532.84 681.978 L1532.28 681.978 L1531.72 681.978 L1531.16 681.978 L1530.6 681.978 L1530.04 681.978 L1529.48 681.978 L1528.92 681.978 L1528.36 681.978 L1527.81 681.978 L1527.25 681.978 L1526.69 681.978 L1526.13 681.978 L1525.57 681.978 L1525.01 681.978 L1524.45 681.978 L1523.89 681.978 L1523.33 681.978 L1522.77 681.978 L1522.21 681.978 L1521.65 681.978 L1521.09 681.978 L1520.53 681.978 L1519.98 681.978 L1519.42 681.978 L1518.86 681.978 L1518.3 681.978 L1517.74 681.978 L1517.18 681.978 L1516.62 681.978 L1516.06 681.978 L1515.5 681.978 L1514.94 681.978 L1514.38 681.978 L1513.82 681.978 L1513.26 681.978 L1512.71 681.978 L1512.15 681.978 L1511.59 681.978 L1511.03 681.978 L1510.47 681.978 L1509.91 681.978 L1509.35 681.978 L1508.79 681.978 L1508.23 681.978 L1507.67 681.978 L1507.11 681.978 L1506.55 681.978 L1505.99 681.978 L1505.44 681.978 L1504.88 681.978 L1504.32 681.978 L1503.76 681.978 L1503.2 681.978 L1502.64 681.978 L1502.08 681.978 L1501.52 681.978 L1500.96 681.978 L1500.4 681.978 L1499.84 681.978 L1499.28 681.978 L1498.72 681.978 L1498.16 681.978 L1497.61 681.978 L1497.05 681.978 L1496.49 681.978 L1495.93 681.978 L1495.37 681.978 L1494.81 681.978 L1494.25 681.978 L1493.69 681.978 L1493.13 681.978 L1492.57 681.978 L1492.01 681.978 L1491.45 681.978 L1490.89 681.978 L1490.34 681.978 L1489.78 681.978 L1489.22 681.978 L1488.66 681.978 L1488.1 681.978 L1487.54 681.978 L1486.98 681.978 L1486.42 681.978 L1485.86 681.978 L1485.3 681.978 L1484.74 681.978 L1484.18 681.978 L1483.62 681.978 L1483.07 681.978 L1482.51 681.978 L1481.95 681.978 L1481.39 681.978 L1480.83 681.978 L1480.27 681.978 L1479.71 681.978 L1479.15 681.978 L1478.59 681.978 L1478.03 681.978 L1477.47 681.978 L1476.91 681.978 L1476.35 681.978 L1475.79 681.978 L1475.24 681.978 L1474.68 681.978 L1474.12 681.978 L1473.56 681.978 L1473 681.978 L1472.44 681.978 L1471.88 681.978 L1471.32 681.978 L1470.76 681.978 L1470.2 681.978 L1469.64 681.978 L1469.08 681.978 L1468.52 681.978 L1467.97 681.978 L1467.41 681.978 L1466.85 681.978 L1466.29 681.978 L1465.73 681.978 L1465.17 681.978 L1464.61 681.978 L1464.05 681.978 L1463.49 681.978 L1462.93 681.978 L1462.37 681.978 L1461.81 681.978 L1461.25 681.978 L1460.7 681.978 L1460.14 681.978 L1459.58 681.978 L1459.02 681.978 L1458.46 681.978 L1457.9 681.978 L1457.34 681.978 L1456.78 681.978 L1456.22 681.978 L1455.66 681.978 L1455.1 681.978 L1454.54 681.978 L1453.98 681.978 L1453.42 681.978 L1452.87 681.978 L1452.31 681.978 L1451.75 681.978 L1451.19 681.978 L1450.63 681.978 L1450.07 681.978 L1449.51 681.978 L1448.95 681.978 L1448.39 681.978 L1447.83 681.978 L1447.27 681.978 L1446.71 681.978 L1446.15 681.978 L1445.6 681.978 L1445.04 681.978 L1444.48 681.978 L1443.92 681.978 L1443.36 681.978 L1442.8 681.978 L1442.24 681.978 L1441.68 681.978 L1441.12 681.978 L1440.56 681.978 L1440 681.978 L1439.44 681.978 L1438.88 681.978 L1438.33 681.978 L1437.77 681.978 L1437.21 681.978 L1436.65 681.978 L1436.09 681.978 L1435.53 681.978 L1434.97 681.978 L1434.41 681.978 L1433.85 681.978 L1433.29 681.978 L1432.73 681.978 L1432.17 681.978 L1431.61 681.978 L1431.05 681.978 L1430.5 681.978 L1429.94 681.978 L1429.38 681.978 L1428.82 681.978 L1428.26 681.978 L1427.7 681.978 L1427.14 681.978 L1426.58 681.978 L1426.02 681.978 L1425.46 681.978 L1424.9 681.978 L1424.34 681.978 L1423.78 681.978 L1423.23 681.978 L1422.67 681.978 L1422.11 681.978 L1421.55 681.978 L1420.99 681.978 L1420.43 681.978 L1419.87 681.978 L1419.31 681.978 L1418.75 681.978 L1418.19 681.978 L1417.63 681.978 L1417.07 681.978 L1416.51 681.978 L1415.95 681.978 L1415.4 681.978 L1414.84 681.978 L1414.28 681.978 L1413.72 681.978 L1413.16 681.978 L1412.6 681.978 L1412.04 681.978 L1411.48 681.978 L1410.92 681.978 L1410.36 681.978 L1409.8 681.978 L1409.24 681.978 L1408.68 681.978 L1408.13 681.978 L1407.57 681.978 L1407.01 681.978 L1406.45 681.978 L1405.89 681.978 L1405.33 681.978 L1404.77 681.978 L1404.21 681.978 L1403.65 681.978 L1403.09 681.978 L1402.53 681.978 L1401.97 681.978 L1401.41 681.978 L1400.86 681.978 L1400.3 681.978 L1399.74 681.978 L1399.18 681.978 L1398.62 681.978 L1398.06 681.978 L1397.5 681.978 L1396.94 681.978 L1396.38 681.978 L1395.82 681.978 L1395.26 681.978 L1394.7 681.978 L1394.14 681.978 L1393.58 681.978 L1393.03 681.978 L1392.47 681.978 L1391.91 681.978 L1391.35 681.978 L1390.79 681.978 L1390.23 681.978 L1389.67 681.978 L1389.11 681.978 L1388.55 681.978 L1387.99 681.978 L1387.43 681.978 L1386.87 681.978 L1386.31 681.978 L1385.76 681.978 L1385.2 681.978 L1384.64 681.978 L1384.08 681.978 L1383.52 681.978 L1382.96 681.978 L1382.4 681.978 L1381.84 681.978 L1381.28 681.978 L1380.72 681.978 L1380.16 681.978 L1379.6 681.978 L1379.04 681.978 L1378.49 681.978 L1377.93 681.978 L1377.37 681.978 L1376.81 681.978 L1376.25 681.978 L1375.69 681.978 L1375.13 681.978 L1374.57 681.978 L1374.01 681.978 L1373.45 681.978 L1372.89 681.978 L1372.33 681.978 L1371.77 681.978 L1371.21 681.978 L1370.66 681.978 L1370.1 681.978 L1369.54 681.978 L1368.98 681.978 L1368.42 681.978 L1367.86 681.978 L1367.3 681.978 L1366.74 681.978 L1366.18 681.978 L1365.62 681.978 L1365.06 681.978 L1364.5 681.978 L1363.94 681.978 L1363.39 681.978 L1362.83 681.978 L1362.27 681.978 L1361.71 681.978 L1361.15 681.978 L1360.59 681.978 L1360.03 681.978 L1359.47 681.978 L1358.91 681.978 L1358.35 681.978 L1357.79 681.978 L1357.23 681.978 L1356.67 681.978 L1356.12 681.978 L1355.56 681.978 L1355 681.978 L1354.44 681.978 L1353.88 681.978 L1353.32 681.978 L1352.76 681.978 L1352.2 681.978 L1351.64 681.978 L1351.08 681.978 L1350.52 681.978 L1349.96 681.978 L1349.4 681.978 L1348.84 681.978 L1348.29 681.978 L1347.73 681.978 L1347.17 681.978 L1346.61 681.978 L1346.05 681.978 L1345.49 681.978 L1344.93 681.978 L1344.37 681.978 L1343.81 681.978 L1343.25 681.978 L1342.69 681.978 L1342.13 681.978 L1341.57 681.978 L1341.02 681.978 L1340.46 681.978 L1339.9 681.978 L1339.34 681.978 L1338.78 681.978 L1338.22 681.978 L1337.66 681.978 L1337.1 681.978 L1336.54 681.978 L1335.98 681.978 L1335.42 681.978 L1334.86 681.978 L1334.3 681.978 L1333.75 681.978 L1333.19 681.978 L1332.63 681.978 L1332.07 681.978 L1331.51 681.978 L1330.95 681.978 L1330.39 681.978 L1329.83 681.978 L1329.27 681.978 L1328.71 681.978 L1328.15 681.978 L1327.59 681.978 L1327.03 681.978 L1326.47 681.978 L1325.92 681.978 L1325.36 681.978 L1324.8 681.978 L1324.24 681.978 L1323.68 681.978 L1323.12 681.978 L1322.56 681.978 L1322 681.978 L1321.44 681.978 L1320.88 681.978 L1320.32 681.978 L1319.76 681.978 L1319.2 681.978 L1318.65 681.978 L1318.09 681.978 L1317.53 681.978 L1316.97 681.978 L1316.41 681.978 L1315.85 681.978 L1315.29 681.978 L1314.73 681.978 L1314.17 681.978 L1313.61 681.978 L1313.05 681.978 L1312.49 681.978 L1311.93 681.978 L1311.38 681.978 L1310.82 681.978 L1310.26 681.978 L1309.7 681.978 L1309.14 681.978 L1308.58 681.978 L1308.02 681.978 L1307.46 681.978 L1306.9 681.978 L1306.34 681.978 L1305.78 681.978 L1305.22 681.978 L1304.66 681.978 L1304.1 681.978 L1303.55 681.978 L1302.99 681.978 L1302.43 681.978 L1301.87 681.978 L1301.31 681.978 L1300.75 681.978 L1300.19 681.978 L1299.63 681.978 L1299.07 681.978 L1298.51 681.978 L1297.95 681.978 L1297.39 681.978 L1296.83 681.978 L1296.28 681.978 L1295.72 681.978 L1295.16 681.978 L1294.6 681.978 L1294.04 681.978 L1293.48 681.978 L1292.92 681.978 L1292.36 681.978 L1291.8 681.978 L1291.24 681.978 L1290.68 681.978 L1290.12 681.978 L1289.56 681.978 L1289 681.978 L1288.45 681.978 L1287.89 681.978 L1287.33 681.978 L1286.77 681.978 L1286.21 681.978 L1285.65 681.978 L1285.09 681.978 L1284.53 681.978 L1283.97 681.978 L1283.41 681.978 L1282.85 681.978 L1282.29 681.978 L1281.73 681.978 L1281.18 681.978 L1280.62 681.978 L1280.06 681.978 L1279.5 681.978 L1278.94 681.978 L1278.38 681.978 L1277.82 681.978 L1277.26 681.978 L1276.7 681.978 L1276.14 681.978 L1275.58 681.978 L1275.02 681.978 L1274.46 681.978 L1273.91 681.978 L1273.35 681.978 L1272.79 681.978 L1272.23 681.978 L1271.67 681.978 L1271.11 681.978 L1270.55 681.978 L1269.99 681.978 L1269.43 681.978 L1268.87 681.978 L1268.31 681.978 L1267.75 681.978 L1267.19 681.978 L1266.63 681.978 L1266.08 681.978 L1265.52 681.978 L1264.96 681.978 L1264.4 681.978 L1263.84 681.978 L1263.28 681.978 L1262.72 681.978 L1262.16 681.978 L1261.6 681.978 L1261.04 681.978 L1260.48 681.978 L1259.92 681.978 L1259.36 681.978 L1258.81 681.978 L1258.25 681.978 L1257.69 681.978 L1257.13 681.978 L1256.57 681.978 L1256.01 681.978 L1255.45 681.978 L1254.89 681.978 L1254.33 681.978 L1253.77 681.978 L1253.21 681.978 L1252.65 681.978 L1252.09 681.978 L1251.54 681.978 L1250.98 681.978 L1250.42 681.978 L1249.86 681.978 L1249.3 681.978 L1248.74 681.978 L1248.18 681.978 L1247.62 681.978 L1247.06 681.978 L1246.5 681.978 L1245.94 681.978 L1245.38 681.978 L1244.82 681.978 L1244.26 681.978 L1243.71 681.978 L1243.15 681.978 L1242.59 681.978 L1242.03 681.978 L1241.47 681.978 L1240.91 681.978 L1240.35 681.978 L1239.79 681.978 L1239.23 681.978 L1238.67 681.978 L1238.11 681.978 L1237.55 681.978 L1236.99 681.978 L1236.44 681.978 L1235.88 681.978 L1235.32 681.978 L1234.76 681.978 L1234.2 681.978 L1233.64 681.978 L1233.08 681.978 L1232.52 681.978 L1231.96 681.978 L1231.4 681.978 L1230.84 681.978 L1230.28 681.978 L1229.72 681.978 L1229.17 681.978 L1228.61 681.978 L1228.05 681.978 L1227.49 681.978 L1226.93 681.978 L1226.37 681.978 L1225.81 681.978 L1225.25 681.978 L1224.69 681.978 L1224.13 681.978 L1223.57 681.978 L1223.01 681.978 L1222.45 681.978 L1221.89 681.978 L1221.34 681.978 L1220.78 681.978 L1220.22 681.978 L1219.66 681.978 L1219.1 681.978 L1218.54 681.978 L1217.98 681.978 L1217.42 681.978 L1216.86 681.978 L1216.3 681.978 L1215.74 681.978 L1215.18 681.978 L1214.62 681.978 L1214.07 681.978 L1213.51 681.978 L1212.95 681.978 L1212.39 681.978 L1211.83 681.978 L1211.27 681.978 L1210.71 681.978 L1210.15 681.978 L1209.59 681.978 L1209.03 681.978 L1208.47 681.978 L1207.91 681.978 L1207.35 681.978 L1206.8 681.978 L1206.24 681.978 L1205.68 681.978 L1205.12 681.978 L1204.56 681.978 L1204 681.978 L1203.44 681.978 L1202.88 681.978 L1202.32 681.978 L1201.76 681.978 L1201.2 681.978 L1200.64 681.978 L1200.08 681.978 L1199.52 681.978 L1198.97 681.978 L1198.41 681.978 L1197.85 681.978 L1197.29 681.978 L1196.73 681.978 L1196.17 681.978 L1195.61 681.978 L1195.05 681.978 L1194.49 681.978 L1193.93 681.978 L1193.37 681.978 L1192.81 681.978 L1192.25 681.978 L1191.7 681.978 L1191.14 681.978 L1190.58 681.978 L1190.02 681.978 L1189.46 681.978 L1188.9 681.978 L1188.34 681.978 L1187.78 681.978 L1187.22 681.978 L1186.66 681.978 L1186.1 681.978 L1185.54 681.978 L1184.98 681.978 L1184.43 681.978 L1183.87 681.978 L1183.31 681.978 L1182.75 681.978 L1182.19 681.978 L1181.63 681.978 L1181.07 681.978 L1180.51 681.978 L1179.95 681.978 L1179.39 681.978 L1178.83 681.978 L1178.27 681.978 L1177.71 681.978 L1177.15 681.978 L1176.6 681.978 L1176.04 681.978 L1175.48 681.978 L1174.92 681.978 L1174.36 681.978 L1173.8 681.978 L1173.24 681.978 L1172.68 681.978 L1172.12 681.978 L1171.56 681.978 L1171 681.978 L1170.44 681.978 L1169.88 681.978 L1169.33 681.978 L1168.77 681.978 L1168.21 681.978 L1167.65 681.978 L1167.09 681.978 L1166.53 681.978 L1165.97 681.978 L1165.41 681.978 L1164.85 681.978 L1164.29 681.978 L1163.73 681.978 L1163.17 681.978 L1162.61 681.978 L1162.05 681.978 L1161.5 681.978 L1160.94 681.978 L1160.38 681.978 L1159.82 681.978 L1159.26 681.978 L1158.7 681.978 L1158.14 681.978 L1157.58 681.978 L1157.02 681.978 L1156.46 681.978 L1155.9 681.978 L1155.34 681.978 L1154.78 681.978 L1154.23 681.978 L1153.67 681.978 L1153.11 681.978 L1152.55 681.978 L1151.99 681.978 L1151.43 681.978 L1150.87 681.978 L1150.31 681.978 L1149.75 681.978 L1149.19 681.978 L1148.63 681.978 L1148.07 681.978 L1147.51 681.978 L1146.96 681.978 L1146.4 681.978 L1145.84 681.978 L1145.28 681.978 L1144.72 681.978 L1144.16 681.978 L1143.6 681.978 L1143.04 681.978 L1142.48 681.978 L1141.92 681.978 L1141.36 681.978 L1140.8 681.978 L1140.24 681.978 L1139.68 681.978 L1139.13 681.978 L1138.57 681.978 L1138.01 681.978 L1137.45 681.978 L1136.89 681.978 L1136.33 681.978 L1135.77 681.978 L1135.21 681.978 L1134.65 681.978 L1134.09 681.978 L1133.53 681.978 L1132.97 681.978 L1132.41 681.978 L1131.86 681.978 L1131.3 681.978 L1130.74 681.978 L1130.18 681.978 L1129.62 681.978 L1129.06 681.978 L1128.5 681.978 L1127.94 681.978 L1127.38 681.978 L1126.82 681.978 L1126.26 681.978 L1125.7 681.978 L1125.14 681.978 L1124.59 681.978 L1124.03 681.978 L1123.47 681.978 L1122.91 681.978 L1122.35 681.978 L1121.79 681.978 L1121.23 681.978 L1120.67 681.978 L1120.11 681.978 L1119.55 681.978 L1118.99 681.978 L1118.43 681.978 L1117.87 681.978 L1117.31 681.978 L1116.76 681.978 L1116.2 681.978 L1115.64 681.978 L1115.08 681.978 L1114.52 681.978 L1113.96 681.978 L1113.4 681.978 L1112.84 681.978 L1112.28 681.978 L1111.72 681.978 L1111.16 681.978 L1110.6 681.978 L1110.04 681.978 L1109.49 681.978 L1108.93 681.978 L1108.37 681.978 L1107.81 681.978 L1107.25 681.978 L1106.69 681.978 L1106.13 681.978 L1105.57 681.978 L1105.01 681.978 L1104.45 681.978 L1103.89 681.978 L1103.33 681.978 L1102.77 681.978 L1102.22 681.978 L1101.66 681.978 L1101.1 681.978 L1100.54 681.978 L1099.98 681.978 L1099.42 681.978 L1098.86 681.978 L1098.3 681.978 L1097.74 681.978 L1097.18 681.978 L1096.62 681.978 L1096.06 681.978 L1095.5 681.978 L1094.94 681.978 L1094.39 681.978 L1093.83 681.978 L1093.27 681.978 L1092.71 681.978 L1092.15 681.978 L1091.59 681.978 L1091.03 681.978 L1090.47 681.978 L1089.91 681.978 L1089.35 681.978 L1088.79 681.978 L1088.23 681.978 L1087.67 681.978 L1087.12 681.978 L1086.56 681.978 L1086 681.978 L1085.44 681.978 L1084.88 681.978 L1084.32 681.978 L1083.76 681.978 L1083.2 681.978 L1082.64 681.978 L1082.08 681.978 L1081.52 681.978 L1080.96 681.978 L1080.4 681.978 L1079.85 681.978 L1079.29 681.978 L1078.73 681.978 L1078.17 681.978 L1077.61 681.978 L1077.05 681.978 L1076.49 681.978 L1075.93 681.978 L1075.37 681.978 L1074.81 681.978 L1074.25 681.978 L1073.69 681.978 L1073.13 681.978 L1072.57 681.978 L1072.02 681.978 L1071.46 681.978 L1070.9 681.978 L1070.34 681.978 L1069.78 681.978 L1069.22 681.978 L1068.66 681.978 L1068.1 681.978 L1067.54 681.978 L1066.98 681.978 L1066.42 681.978 L1065.86 681.978 L1065.3 681.978 L1064.75 681.978 L1064.19 681.978 L1063.63 681.978 L1063.07 681.978 L1062.51 681.978 L1061.95 681.978 L1061.39 681.978 L1060.83 681.978 L1060.27 681.978 L1059.71 681.978 L1059.15 681.978 L1058.59 681.978 L1058.03 681.978 L1057.48 681.978 L1056.92 681.978 L1056.36 681.978 L1055.8 681.978 L1055.24 681.978 L1054.68 681.978 L1054.12 681.978 L1053.56 681.978 L1053 681.978 L1052.44 681.978 L1051.88 681.978 L1051.32 681.978 L1050.76 681.978 L1050.2 681.978 L1049.65 681.978 L1049.09 681.978 L1048.53 681.978 L1047.97 681.978 L1047.41 681.978 L1046.85 681.978 L1046.29 681.978 L1045.73 681.978 L1045.17 681.978 L1044.61 681.978 L1044.05 681.978 L1043.49 681.978 L1042.93 681.978 L1042.38 681.978 L1041.82 681.978 L1041.26 681.978 L1040.7 681.978 L1040.14 681.978 L1039.58 681.978 L1039.02 681.978 L1038.46 681.978 L1037.9 681.978 L1037.34 681.978 L1036.78 681.978 L1036.22 681.978 L1035.66 681.978 L1035.1 681.978 L1034.55 681.978 L1033.99 681.978 L1033.43 681.978 L1032.87 681.978 L1032.31 681.978 L1031.75 681.978 L1031.19 681.978 L1030.63 681.978 L1030.07 681.978 L1029.51 681.978 L1028.95 681.978 L1028.39 681.978 L1027.83 681.978 L1027.28 681.978 L1026.72 681.978 L1026.16 681.978 L1025.6 681.978 L1025.04 681.978 L1024.48 681.978 L1023.92 681.978 L1023.36 681.978 L1022.8 681.978 L1022.24 681.978 L1021.68 681.978 L1021.12 681.978 L1020.56 681.978 L1020.01 681.978 L1019.45 681.978 L1018.89 681.978 L1018.33 681.978 L1017.77 681.978 L1017.21 681.978 L1016.65 681.978 L1016.09 681.978 L1015.53 681.978 L1014.97 681.978 L1014.41 681.978 L1013.85 681.978 L1013.29 681.978 L1012.73 681.978 L1012.18 681.978 L1011.62 681.978 L1011.06 681.978 L1010.5 681.978 L1009.94 681.978 L1009.38 681.978 L1008.82 681.978 L1008.26 681.978 L1007.7 681.978 L1007.14 681.978 L1006.58 681.978 L1006.02 681.978 L1005.46 681.978 L1004.91 681.978 L1004.35 681.978 L1003.79 681.978 L1003.23 681.978 L1002.67 681.978 L1002.11 681.978 L1001.55 681.978 L1000.99 681.978 L1000.43 681.978 L999.872 681.978 L999.313 681.978 L998.754 681.978 L998.194 681.978 L997.635 681.978 L997.076 681.978 L996.517 681.978 L995.957 681.978 L995.398 681.978 L994.839 681.978 L994.28 681.978 L993.72 681.978 L993.161 681.978 L992.602 681.978 L992.043 681.978 L991.483 681.978 L990.924 681.978 L990.365 681.978 L989.806 681.978 L989.246 681.978 L988.687 681.978 L988.128 681.978 L987.569 681.978 L987.009 681.978 L986.45 681.978 L985.891 681.978 L985.332 681.978 L984.772 681.978 L984.213 681.978 L983.654 681.978 L983.095 681.978 L982.535 681.978 L981.976 681.978 L981.417 681.978 L980.858 681.978 L980.298 681.978 L979.739 681.978 L979.18 681.978 L978.621 681.978 L978.061 681.978 L977.502 681.978 L976.943 681.978 L976.384 681.978 L975.824 681.978 L975.265 681.978 L974.706 681.978 L974.147 681.978 L973.587 681.978 L973.028 681.978 L972.469 681.978 L971.91 681.978 L971.35 681.978 L970.791 681.978 L970.232 681.978 L969.673 681.978 L969.113 681.978 L968.554 681.978 L967.995 681.978 L967.436 681.978 L966.876 681.978 L966.317 681.978 L965.758 681.978 L965.199 681.978 L964.639 681.978 L964.08 681.978 L963.521 681.978 L962.962 681.978 L962.402 681.978 L961.843 681.978 L961.284 681.978 L960.725 681.978 L960.165 681.978 L959.606 681.978 L959.047 681.978 L958.488 681.978 L957.928 681.978 L957.369 681.978 L956.81 681.978 L956.251 681.978 L955.691 681.978 L955.132 681.978 L954.573 681.978 L954.014 681.978 L953.454 681.978 L952.895 681.978 L952.336 681.978 L951.777 681.978 L951.217 681.978 L950.658 681.978 L950.099 681.978 L949.54 681.978 L948.98 681.978 L948.421 681.978 L947.862 681.978 L947.303 681.978 L946.743 681.978 L946.184 681.978 L945.625 681.978 L945.066 681.978 L944.506 681.978 L943.947 681.978 L943.388 681.978 L942.829 681.978 L942.269 681.978 L941.71 681.978 L941.151 681.978 L940.592 681.978 L940.032 681.978 L939.473 681.978 L938.914 681.978 L938.355 681.978 L937.795 681.978 L937.236 681.978 L936.677 681.978 L936.118 681.978 L935.558 681.978 L934.999 681.978 L934.44 681.978 L933.881 681.978 L933.321 681.978 L932.762 681.978 L932.203 681.978 L931.644 681.978 L931.084 681.978 L930.525 681.978 L929.966 681.978 L929.406 681.978 L928.847 681.978 L928.288 681.978 L927.729 681.978 L927.169 681.978 L926.61 681.978 L926.051 681.978 L925.492 681.978 L924.932 681.978 L924.373 681.978 L923.814 681.978 L923.255 681.978 L922.695 681.978 L922.136 681.978 L921.577 681.978 L921.018 681.978 L920.458 681.978 L919.899 681.978 L919.34 681.978 L918.781 681.978 L918.221 681.978 L917.662 681.978 L917.103 681.978 L916.544 681.978 L915.984 681.978 L915.425 681.978 L914.866 681.978 L914.307 681.978 L913.747 681.978 L913.188 681.978 L912.629 681.978 L912.07 681.978 L911.51 681.978 L910.951 681.978 L910.392 681.978 L909.833 681.978 L909.273 681.978 L908.714 681.978 L908.155 681.978 L907.596 681.978 L907.036 681.978 L906.477 681.978 L905.918 681.978 L905.359 681.978 L904.799 681.978 L904.24 681.978 L903.681 681.978 L903.122 681.978 L902.562 681.978 L902.003 681.978 L901.444 681.978 L900.885 681.978 L900.325 681.978 L899.766 681.978 L899.207 681.978 L898.648 681.978 L898.088 681.978 L897.529 681.978 L896.97 681.978 L896.411 681.978 L895.851 681.978 L895.292 681.978 L894.733 681.978 L894.174 681.978 L893.614 681.978 L893.055 681.978 L892.496 681.978 L891.937 681.978 L891.377 681.978 L890.818 681.978 L890.259 681.978 L889.7 681.978 L889.14 681.978 L888.581 681.978 L888.022 681.978 L887.463 681.978 L886.903 681.978 L886.344 681.978 L885.785 681.978 L885.226 681.978 L884.666 681.978 L884.107 681.978 L883.548 681.978 L882.989 681.978 L882.429 681.978 L881.87 681.978 L881.311 681.978 L880.752 681.978 L880.192 681.978 L879.633 681.978 L879.074 681.978 L878.515 681.978 L877.955 681.978 L877.396 681.978 L876.837 681.978 L876.278 681.978 L875.718 681.978 L875.159 681.978 L874.6 681.978 L874.041 681.978 L873.481 681.978 L872.922 681.978 L872.363 681.978 L871.804 681.978 L871.244 681.978 L870.685 681.978 L870.126 681.978 L869.567 681.978 L869.007 681.978 L868.448 681.978 L867.889 681.978 L867.33 681.978 L866.77 681.978 L866.211 681.978 L865.652 681.978 L865.093 681.978 L864.533 681.978 L863.974 681.978 L863.415 681.978 L862.856 681.978 L862.296 681.978 L861.737 681.978 L861.178 681.978 L860.619 681.978 L860.059 681.978 L859.5 681.978 L858.941 681.978 L858.382 681.978 L857.822 681.978 L857.263 681.978 L856.704 681.978 L856.145 681.978 L855.585 681.978 L855.026 681.978 L854.467 681.978 L853.908 681.978 L853.348 681.978 L852.789 681.978 L852.23 681.978 L851.671 681.978 L851.111 681.978 L850.552 681.978 L849.993 681.978 L849.434 681.978 L848.874 681.978 L848.315 681.978 L847.756 681.978 L847.197 681.978 L846.637 681.978 L846.078 681.978 L845.519 681.978 L844.96 681.978 L844.4 681.978 L843.841 681.978 L843.282 681.978 L842.723 681.978 L842.163 681.978 L841.604 681.978 L841.045 681.978 L840.486 681.978 L839.926 681.978 L839.367 681.978 L838.808 681.978 L838.249 681.978 L837.689 681.978 L837.13 681.978 L836.571 681.978 L836.012 681.978 L835.452 681.978 L834.893 681.978 L834.334 681.978 L833.775 681.978 L833.215 681.978 L832.656 681.978 L832.097 681.978 L831.538 681.978 L830.978 681.978 L830.419 681.978 L829.86 681.978 L829.301 681.978 L828.741 681.978 L828.182 681.978 L827.623 681.978 L827.064 681.978 L826.504 681.978 L825.945 681.978 L825.386 681.978 L824.827 681.978 L824.267 681.978 L823.708 681.978 L823.149 681.978 L822.59 681.978 L822.03 681.978 L821.471 681.978 L820.912 681.978 L820.353 681.978 L819.793 681.978 L819.234 681.978 L818.675 681.978 L818.116 681.978 L817.556 681.978 L816.997 681.978 L816.438 681.978 L815.879 681.978 L815.319 681.978 L814.76 681.978 L814.201 681.978 L813.642 681.978 L813.082 681.978 L812.523 681.978 L811.964 681.978 L811.405 681.978 L810.845 681.978 L810.286 681.978 L809.727 681.978 L809.168 681.978 L808.608 681.978 L808.049 681.978 L807.49 681.978 L806.931 681.978 L806.371 681.978 L805.812 681.978 L805.253 681.978 L804.693 681.978 L804.134 681.978 L803.575 681.978 L803.016 681.978 L802.456 681.978 L801.897 681.978 L801.338 681.978 L800.779 681.978 L800.219 681.978 L799.66 681.978 L799.101 681.978 L798.542 681.978 L797.982 681.978 L797.423 681.978 L796.864 681.978 L796.305 681.978 L795.745 681.978 L795.186 681.978 L794.627 681.978 L794.068 681.978 L793.508 681.978 L792.949 681.978 L792.39 681.978 L791.831 681.978 L791.271 681.978 L790.712 681.978 L790.153 681.978 L789.594 681.978 L789.034 681.978 L788.475 681.978 L787.916 681.978 L787.357 681.978 L786.797 681.978 L786.238 681.978 L785.679 681.978 L785.12 681.978 L784.56 681.978 L784.001 681.978 L783.442 681.978 L782.883 681.978 L782.323 681.978 L781.764 681.978 L781.205 681.978 L780.646 681.978 L780.086 681.978 L779.527 681.978 L778.968 681.978 L778.409 681.978 L777.849 681.978 L777.29 681.978 L776.731 681.978 L776.172 681.978 L775.612 681.978 L775.053 681.978 L774.494 681.978 L773.935 681.978 L773.375 681.978 L772.816 681.978 L772.257 681.978 L771.698 681.978 L771.138 681.978 L770.579 681.978 L770.02 681.978 L769.461 681.978 L768.901 681.978 L768.342 681.978 L767.783 681.978 L767.224 681.978 L766.664 681.978 L766.105 681.978 L765.546 681.978 L764.987 681.978 L764.427 681.978 L763.868 681.978 L763.309 681.978 L762.75 681.978 L762.19 681.978 L761.631 681.978 L761.072 681.978 L760.513 681.978 L759.953 681.978 L759.394 681.978 L758.835 681.978 L758.276 681.978 L757.716 681.978 L757.157 681.978 L756.598 681.978 L756.039 681.978 L755.479 681.978 L754.92 681.978 L754.361 681.978 L753.802 681.978 L753.242 681.978 L752.683 681.978 L752.124 681.978 L751.565 681.978 L751.005 681.978 L750.446 681.978 L749.887 681.978 L749.328 681.978 L748.768 681.978 L748.209 681.978 L747.65 681.978 L747.091 681.978 L746.531 681.978 L745.972 681.978 L745.413 681.978 L744.854 681.978 L744.294 681.978 L743.735 681.978 L743.176 681.978 L742.617 681.978 L742.057 681.978 L741.498 681.978 L740.939 681.978 L740.38 681.978 L739.82 681.978 L739.261 681.978 L738.702 681.978 L738.143 681.978 L737.583 681.978 L737.024 681.978 L736.465 681.978 L735.906 681.978 L735.346 681.978 L734.787 681.978 L734.228 681.978 L733.669 681.978 L733.109 681.978 L732.55 681.978 L731.991 681.978 L731.432 681.978 L730.872 681.978 L730.313 681.978 L729.754 681.978 L729.195 681.978 L728.635 681.978 L728.076 681.978 L727.517 681.978 L726.958 681.978 L726.398 681.978 L725.839 681.978 L725.28 681.978 L724.721 681.978 L724.161 681.978 L723.602 681.978 L723.043 681.978 L722.484 681.978 L721.924 681.978 L721.365 681.978 L720.806 681.978 L720.247 681.978  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip463)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.387 720.806,683.387 721.365,683.387 721.924,683.387 722.484,683.387 723.043,683.387 723.602,683.387 724.161,683.387 724.721,683.387 725.28,683.387 725.839,683.387 726.398,683.387 726.958,683.387 727.517,683.387 728.076,683.387 728.635,683.387 729.195,683.387 729.754,683.387 730.313,683.387 730.872,683.387 731.432,683.387 731.991,683.387 732.55,683.387 733.109,683.387 733.669,683.387 734.228,683.387 734.787,683.387 735.346,683.387 735.906,683.387 736.465,683.387 737.024,683.387 737.583,683.387 738.143,683.387 738.702,683.387 739.261,683.387 739.82,683.387 740.38,683.387 740.939,683.387 741.498,683.387 742.057,683.387 742.617,683.387 743.176,683.387 743.735,683.387 744.294,683.387 744.854,683.387 745.413,683.387 745.972,683.387 746.531,683.387 747.091,683.387 747.65,683.387 748.209,683.387 748.768,683.387 749.328,683.387 749.887,683.387 750.446,683.387 751.005,683.387 751.565,683.387 752.124,683.387 752.683,683.387 753.242,683.387 753.802,683.387 754.361,683.387 754.92,683.387 755.479,683.387 756.039,683.387 756.598,683.387 757.157,683.387 757.716,683.387 758.276,683.387 758.835,683.387 759.394,683.387 759.953,683.387 760.513,683.387 761.072,683.387 761.631,683.387 762.19,683.387 762.75,683.387 763.309,683.387 763.868,683.387 764.427,683.387 764.987,683.387 765.546,683.387 766.105,683.387 766.664,683.387 767.224,683.387 767.783,683.387 768.342,683.387 768.901,683.387 769.461,683.387 770.02,683.387 770.579,683.387 771.138,683.387 771.698,683.387 772.257,683.387 772.816,683.387 773.375,683.387 773.935,683.387 774.494,683.387 775.053,683.387 775.612,683.387 776.172,683.387 776.731,683.387 777.29,683.387 777.849,683.387 778.409,683.387 778.968,683.387 779.527,683.387 780.086,683.387 780.646,683.387 781.205,683.387 781.764,683.387 782.323,683.387 782.883,683.387 783.442,683.387 784.001,683.387 784.56,683.387 785.12,683.387 785.679,683.387 786.238,683.387 786.797,683.387 787.357,683.387 787.916,683.387 788.475,683.387 789.034,683.387 789.594,683.387 790.153,683.387 790.712,683.387 791.271,683.387 791.831,683.387 792.39,683.387 792.949,683.387 793.508,683.387 794.068,683.387 794.627,683.387 795.186,683.387 795.745,683.387 796.305,683.387 796.864,683.387 797.423,683.387 797.982,683.387 798.542,683.387 799.101,683.387 799.66,683.387 800.219,683.387 800.779,683.387 801.338,683.387 801.897,683.387 802.456,683.387 803.016,683.387 803.575,683.387 804.134,683.387 804.693,683.387 805.253,683.387 805.812,683.387 806.371,683.387 806.931,683.387 807.49,683.387 808.049,683.387 808.608,683.387 809.168,683.387 809.727,683.387 810.286,683.387 810.845,683.387 811.405,683.387 811.964,683.387 812.523,683.387 813.082,683.387 813.642,683.387 814.201,683.387 814.76,683.387 815.319,683.387 815.879,683.387 816.438,683.387 816.997,683.387 817.556,683.387 818.116,683.387 818.675,683.387 819.234,683.387 819.793,683.387 820.353,683.387 820.912,683.387 821.471,683.387 822.03,683.387 822.59,683.387 823.149,683.387 823.708,683.387 824.267,683.387 824.827,683.387 825.386,683.387 825.945,683.387 826.504,683.387 827.064,683.387 827.623,683.387 828.182,683.387 828.741,683.387 829.301,683.387 829.86,683.387 830.419,683.387 830.978,683.387 831.538,683.387 832.097,683.387 832.656,683.387 833.215,683.387 833.775,683.387 834.334,683.387 834.893,683.387 835.452,683.387 836.012,683.387 836.571,683.387 837.13,683.387 837.689,683.387 838.249,683.387 838.808,683.387 839.367,683.387 839.926,683.387 840.486,683.387 841.045,683.387 841.604,683.387 842.163,683.387 842.723,683.387 843.282,683.387 843.841,683.387 844.4,683.387 844.96,683.387 845.519,683.387 846.078,683.387 846.637,683.387 847.197,683.387 847.756,683.387 848.315,683.387 848.874,683.387 849.434,683.387 849.993,683.387 850.552,683.387 851.111,683.387 851.671,683.387 852.23,683.387 852.789,683.387 853.348,683.387 853.908,683.387 854.467,683.387 855.026,683.387 855.585,683.387 856.145,683.387 856.704,683.387 857.263,683.387 857.822,683.387 858.382,683.387 858.941,683.387 859.5,683.387 860.059,683.387 860.619,683.387 861.178,683.387 861.737,683.387 862.296,683.387 862.856,683.387 863.415,683.387 863.974,683.387 864.533,683.387 865.093,683.387 865.652,683.387 866.211,683.387 866.77,683.387 867.33,683.387 867.889,683.387 868.448,683.387 869.007,683.387 869.567,683.387 870.126,683.387 870.685,683.387 871.244,683.387 871.804,683.387 872.363,683.387 872.922,683.387 873.481,683.387 874.041,683.387 874.6,683.387 875.159,683.387 875.718,683.387 876.278,683.387 876.837,683.387 877.396,683.387 877.955,683.387 878.515,683.387 879.074,683.387 879.633,683.387 880.192,683.387 880.752,683.387 881.311,683.387 881.87,683.387 882.429,683.387 882.989,683.387 883.548,683.387 884.107,683.387 884.666,683.387 885.226,683.387 885.785,683.387 886.344,683.387 886.903,683.387 887.463,683.387 888.022,683.387 888.581,683.387 889.14,683.387 889.7,683.387 890.259,683.387 890.818,683.387 891.377,683.387 891.937,683.387 892.496,683.387 893.055,683.387 893.614,683.387 894.174,683.387 894.733,683.387 895.292,683.387 895.851,683.387 896.411,683.387 896.97,683.387 897.529,683.387 898.088,683.387 898.648,683.387 899.207,683.387 899.766,683.387 900.325,683.387 900.885,683.387 901.444,683.387 902.003,683.387 902.562,683.387 903.122,683.387 903.681,683.387 904.24,683.387 904.799,683.387 905.359,683.387 905.918,683.387 906.477,683.387 907.036,683.387 907.596,683.387 908.155,683.387 908.714,683.387 909.273,683.387 909.833,683.387 910.392,683.387 910.951,683.387 911.51,683.387 912.07,683.387 912.629,683.387 913.188,683.387 913.747,683.387 914.307,683.387 914.866,683.387 915.425,683.387 915.984,683.387 916.544,683.387 917.103,683.387 917.662,683.387 918.221,683.387 918.781,683.387 919.34,683.387 919.899,683.387 920.458,683.387 921.018,683.387 921.577,683.387 922.136,683.387 922.695,683.387 923.255,683.387 923.814,683.387 924.373,683.387 924.932,683.387 925.492,683.387 926.051,683.387 926.61,683.387 927.169,683.387 927.729,683.387 928.288,683.387 928.847,683.387 929.406,683.387 929.966,683.387 930.525,683.387 931.084,683.387 931.644,683.387 932.203,683.387 932.762,683.387 933.321,683.387 933.881,683.387 934.44,683.387 934.999,683.387 935.558,683.387 936.118,683.387 936.677,683.387 937.236,683.387 937.795,683.387 938.355,683.387 938.914,683.387 939.473,683.387 940.032,683.387 940.592,683.387 941.151,683.387 941.71,683.387 942.269,683.387 942.829,683.387 943.388,683.387 943.947,683.387 944.506,683.387 945.066,683.387 945.625,683.387 946.184,683.387 946.743,683.387 947.303,683.387 947.862,683.387 948.421,683.387 948.98,683.387 949.54,683.387 950.099,683.387 950.658,683.387 951.217,683.387 951.777,683.387 952.336,683.387 952.895,683.387 953.454,683.387 954.014,683.387 954.573,683.387 955.132,683.387 955.691,683.387 956.251,683.387 956.81,683.387 957.369,683.387 957.928,683.387 958.488,683.387 959.047,683.387 959.606,683.387 960.165,683.387 960.725,683.387 961.284,683.387 961.843,683.387 962.402,683.387 962.962,683.387 963.521,683.387 964.08,683.387 964.639,683.387 965.199,683.387 965.758,683.387 966.317,683.387 966.876,683.387 967.436,683.387 967.995,683.387 968.554,683.387 969.113,683.387 969.673,683.387 970.232,683.387 970.791,683.387 971.35,683.387 971.91,683.387 972.469,683.387 973.028,683.387 973.587,683.387 974.147,683.387 974.706,683.387 975.265,683.387 975.824,683.387 976.384,683.387 976.943,683.387 977.502,683.387 978.061,683.387 978.621,683.387 979.18,683.387 979.739,683.387 980.298,683.387 980.858,683.387 981.417,683.387 981.976,683.387 982.535,683.387 983.095,683.387 983.654,683.387 984.213,683.387 984.772,683.387 985.332,683.387 985.891,683.387 986.45,683.387 987.009,683.387 987.569,683.387 988.128,683.387 988.687,683.387 989.246,683.387 989.806,683.387 990.365,683.387 990.924,683.387 991.483,683.387 992.043,683.387 992.602,683.387 993.161,683.387 993.72,683.387 994.28,683.387 994.839,683.387 995.398,683.387 995.957,683.387 996.517,683.387 997.076,683.387 997.635,683.387 998.194,683.387 998.754,683.387 999.313,683.387 999.872,683.387 1000.43,683.387 1000.99,683.387 1001.55,683.387 1002.11,683.387 1002.67,683.387 1003.23,683.387 1003.79,683.387 1004.35,683.387 1004.91,683.387 1005.46,683.387 1006.02,683.387 1006.58,683.387 1007.14,683.387 1007.7,683.387 1008.26,683.387 1008.82,683.387 1009.38,683.387 1009.94,683.387 1010.5,683.387 1011.06,683.387 1011.62,683.387 1012.18,683.387 1012.73,683.387 1013.29,683.387 1013.85,683.387 1014.41,683.387 1014.97,683.387 1015.53,683.387 1016.09,683.387 1016.65,683.387 1017.21,683.387 1017.77,683.387 1018.33,683.387 1018.89,683.387 1019.45,683.387 1020.01,683.387 1020.56,683.387 1021.12,683.387 1021.68,683.387 1022.24,683.387 1022.8,683.387 1023.36,683.387 1023.92,683.387 1024.48,683.387 1025.04,683.387 1025.6,683.387 1026.16,683.387 1026.72,683.387 1027.28,683.387 1027.83,683.387 1028.39,683.387 1028.95,683.387 1029.51,683.387 1030.07,683.387 1030.63,683.387 1031.19,683.387 1031.75,683.387 1032.31,683.387 1032.87,683.387 1033.43,683.387 1033.99,683.387 1034.55,683.387 1035.1,683.387 1035.66,683.387 1036.22,683.387 1036.78,683.387 1037.34,683.387 1037.9,683.387 1038.46,683.387 1039.02,683.387 1039.58,683.387 1040.14,683.387 1040.7,683.387 1041.26,683.387 1041.82,683.387 1042.38,683.387 1042.93,683.387 1043.49,683.387 1044.05,683.387 1044.61,683.387 1045.17,683.387 1045.73,683.387 1046.29,683.387 1046.85,683.387 1047.41,683.387 1047.97,683.387 1048.53,683.387 1049.09,683.387 1049.65,683.387 1050.2,683.387 1050.76,683.387 1051.32,683.387 1051.88,683.387 1052.44,683.387 1053,683.387 1053.56,683.387 1054.12,683.387 1054.68,683.387 1055.24,683.387 1055.8,683.387 1056.36,683.387 1056.92,683.387 1057.48,683.387 1058.03,683.387 1058.59,683.387 1059.15,683.387 1059.71,683.387 1060.27,683.387 1060.83,683.387 1061.39,683.387 1061.95,683.387 1062.51,683.387 1063.07,683.387 1063.63,683.387 1064.19,683.387 1064.75,683.387 1065.3,683.387 1065.86,683.387 1066.42,683.387 1066.98,683.387 1067.54,683.387 1068.1,683.387 1068.66,683.387 1069.22,683.387 1069.78,683.387 1070.34,683.387 1070.9,683.387 1071.46,683.387 1072.02,683.387 1072.57,683.387 1073.13,683.387 1073.69,683.387 1074.25,683.387 1074.81,683.387 1075.37,683.387 1075.93,683.387 1076.49,683.387 1077.05,683.387 1077.61,683.387 1078.17,683.387 1078.73,683.387 1079.29,683.387 1079.85,683.387 1080.4,683.387 1080.96,683.387 1081.52,683.387 1082.08,683.387 1082.64,683.387 1083.2,683.387 1083.76,683.387 1084.32,683.387 1084.88,683.387 1085.44,683.387 1086,683.387 1086.56,683.387 1087.12,683.387 1087.67,683.387 1088.23,683.387 1088.79,683.387 1089.35,683.387 1089.91,683.387 1090.47,683.387 1091.03,683.387 1091.59,683.387 1092.15,683.387 1092.71,683.387 1093.27,683.387 1093.83,683.387 1094.39,683.387 1094.94,683.387 1095.5,683.387 1096.06,683.387 1096.62,683.387 1097.18,683.387 1097.74,683.387 1098.3,683.387 1098.86,683.387 1099.42,683.387 1099.98,683.387 1100.54,683.387 1101.1,683.387 1101.66,683.387 1102.22,683.387 1102.77,683.387 1103.33,683.387 1103.89,683.387 1104.45,683.387 1105.01,683.387 1105.57,683.387 1106.13,683.387 1106.69,683.387 1107.25,683.387 1107.81,683.387 1108.37,683.387 1108.93,683.387 1109.49,683.387 1110.04,683.387 1110.6,683.387 1111.16,683.387 1111.72,683.387 1112.28,683.387 1112.84,683.387 1113.4,683.387 1113.96,683.387 1114.52,683.387 1115.08,683.387 1115.64,683.387 1116.2,683.387 1116.76,683.387 1117.31,683.387 1117.87,683.387 1118.43,683.387 1118.99,683.387 1119.55,683.387 1120.11,683.387 1120.67,683.387 1121.23,683.387 1121.79,683.387 1122.35,683.387 1122.91,683.387 1123.47,683.387 1124.03,683.387 1124.59,683.387 1125.14,683.387 1125.7,683.387 1126.26,683.387 1126.82,683.387 1127.38,683.387 1127.94,683.387 1128.5,683.387 1129.06,683.387 1129.62,683.387 1130.18,683.387 1130.74,683.387 1131.3,683.387 1131.86,683.387 1132.41,683.387 1132.97,683.387 1133.53,683.387 1134.09,683.387 1134.65,683.387 1135.21,683.387 1135.77,683.387 1136.33,683.387 1136.89,683.387 1137.45,683.387 1138.01,683.387 1138.57,683.387 1139.13,683.387 1139.68,683.387 1140.24,683.387 1140.8,683.387 1141.36,683.387 1141.92,683.387 1142.48,683.387 1143.04,683.387 1143.6,683.387 1144.16,683.387 1144.72,683.387 1145.28,683.387 1145.84,683.387 1146.4,683.387 1146.96,683.387 1147.51,683.387 1148.07,683.387 1148.63,683.387 1149.19,683.387 1149.75,683.387 1150.31,683.387 1150.87,683.387 1151.43,683.387 1151.99,683.387 1152.55,683.387 1153.11,683.387 1153.67,683.387 1154.23,683.387 1154.78,683.387 1155.34,683.387 1155.9,683.387 1156.46,683.387 1157.02,683.387 1157.58,683.387 1158.14,683.387 1158.7,683.387 1159.26,683.387 1159.82,683.387 1160.38,683.387 1160.94,683.387 1161.5,683.387 1162.05,683.387 1162.61,683.387 1163.17,683.387 1163.73,683.387 1164.29,683.387 1164.85,683.387 1165.41,683.387 1165.97,683.387 1166.53,683.387 1167.09,683.387 1167.65,683.387 1168.21,683.387 1168.77,683.387 1169.33,683.387 1169.88,683.387 1170.44,683.387 1171,683.387 1171.56,683.387 1172.12,683.387 1172.68,683.387 1173.24,683.387 1173.8,683.387 1174.36,683.387 1174.92,683.387 1175.48,683.387 1176.04,683.387 1176.6,683.387 1177.15,683.387 1177.71,683.387 1178.27,683.387 1178.83,683.387 1179.39,683.387 1179.95,683.387 1180.51,683.387 1181.07,683.387 1181.63,683.387 1182.19,683.387 1182.75,683.387 1183.31,683.387 1183.87,683.387 1184.43,683.387 1184.98,683.387 1185.54,683.387 1186.1,683.387 1186.66,683.387 1187.22,683.387 1187.78,683.387 1188.34,683.387 1188.9,683.387 1189.46,683.387 1190.02,683.387 1190.58,683.387 1191.14,683.387 1191.7,683.387 1192.25,683.387 1192.81,683.387 1193.37,683.387 1193.93,683.387 1194.49,683.387 1195.05,683.387 1195.61,683.387 1196.17,683.387 1196.73,683.387 1197.29,683.387 1197.85,683.387 1198.41,683.387 1198.97,683.387 1199.52,683.387 1200.08,683.387 1200.64,683.387 1201.2,683.387 1201.76,683.387 1202.32,683.387 1202.88,683.387 1203.44,683.387 1204,683.387 1204.56,683.387 1205.12,683.387 1205.68,683.387 1206.24,683.387 1206.8,683.387 1207.35,683.387 1207.91,683.387 1208.47,683.387 1209.03,683.387 1209.59,683.387 1210.15,683.387 1210.71,683.387 1211.27,683.387 1211.83,683.387 1212.39,683.387 1212.95,683.387 1213.51,683.387 1214.07,683.387 1214.62,683.387 1215.18,683.387 1215.74,683.387 1216.3,683.387 1216.86,683.387 1217.42,683.387 1217.98,683.387 1218.54,683.387 1219.1,683.387 1219.66,683.387 1220.22,683.387 1220.78,683.387 1221.34,683.387 1221.89,683.387 1222.45,683.387 1223.01,683.387 1223.57,683.387 1224.13,683.387 1224.69,683.387 1225.25,683.387 1225.81,683.387 1226.37,683.387 1226.93,683.387 1227.49,683.387 1228.05,683.387 1228.61,683.387 1229.17,683.387 1229.72,683.387 1230.28,683.387 1230.84,683.387 1231.4,683.387 1231.96,683.387 1232.52,683.387 1233.08,683.387 1233.64,683.387 1234.2,683.387 1234.76,683.387 1235.32,683.387 1235.88,683.387 1236.44,683.387 1236.99,683.387 1237.55,683.387 1238.11,683.387 1238.67,683.387 1239.23,683.387 1239.79,683.387 1240.35,683.387 1240.91,683.387 1241.47,683.387 1242.03,683.387 1242.59,683.387 1243.15,683.387 1243.71,683.387 1244.26,683.387 1244.82,683.387 1245.38,683.387 1245.94,683.387 1246.5,683.387 1247.06,683.387 1247.62,683.387 1248.18,683.387 1248.74,683.387 1249.3,683.387 1249.86,683.387 1250.42,683.387 1250.98,683.387 1251.54,683.387 1252.09,683.387 1252.65,683.387 1253.21,683.387 1253.77,683.387 1254.33,683.387 1254.89,683.387 1255.45,683.387 1256.01,683.387 1256.57,683.387 1257.13,683.387 1257.69,683.387 1258.25,683.387 1258.81,683.387 1259.36,683.387 1259.92,683.387 1260.48,683.387 1261.04,683.387 1261.6,683.387 1262.16,683.387 1262.72,683.387 1263.28,683.387 1263.84,683.387 1264.4,683.387 1264.96,683.387 1265.52,683.387 1266.08,683.387 1266.63,683.387 1267.19,683.387 1267.75,683.387 1268.31,683.387 1268.87,683.387 1269.43,683.387 1269.99,683.387 1270.55,683.387 1271.11,683.387 1271.67,683.387 1272.23,683.387 1272.79,683.387 1273.35,683.387 1273.91,683.387 1274.46,683.387 1275.02,683.387 1275.58,683.387 1276.14,683.387 1276.7,683.387 1277.26,683.387 1277.82,683.387 1278.38,683.387 1278.94,683.387 1279.5,683.387 1280.06,683.387 1280.62,683.387 1281.18,683.387 1281.73,683.387 1282.29,683.387 1282.85,683.387 1283.41,683.387 1283.97,683.387 1284.53,683.387 1285.09,683.387 1285.65,683.387 1286.21,683.387 1286.77,683.387 1287.33,683.387 1287.89,683.387 1288.45,683.387 1289,683.387 1289.56,683.387 1290.12,683.387 1290.68,683.387 1291.24,683.387 1291.8,683.387 1292.36,683.387 1292.92,683.387 1293.48,683.387 1294.04,683.387 1294.6,683.387 1295.16,683.387 1295.72,683.387 1296.28,683.387 1296.83,683.387 1297.39,683.387 1297.95,683.387 1298.51,683.387 1299.07,683.387 1299.63,683.387 1300.19,683.387 1300.75,683.387 1301.31,683.387 1301.87,683.387 1302.43,683.387 1302.99,683.387 1303.55,683.387 1304.1,683.387 1304.66,683.387 1305.22,683.387 1305.78,683.387 1306.34,683.387 1306.9,683.387 1307.46,683.387 1308.02,683.387 1308.58,683.387 1309.14,683.387 1309.7,683.387 1310.26,683.387 1310.82,683.387 1311.38,683.387 1311.93,683.387 1312.49,683.387 1313.05,683.387 1313.61,683.387 1314.17,683.387 1314.73,683.387 1315.29,683.387 1315.85,683.387 1316.41,683.387 1316.97,683.387 1317.53,683.387 1318.09,683.387 1318.65,683.387 1319.2,683.387 1319.76,683.387 1320.32,683.387 1320.88,683.387 1321.44,683.387 1322,683.387 1322.56,683.387 1323.12,683.387 1323.68,683.387 1324.24,683.387 1324.8,683.387 1325.36,683.387 1325.92,683.387 1326.47,683.387 1327.03,683.387 1327.59,683.387 1328.15,683.387 1328.71,683.387 1329.27,683.387 1329.83,683.387 1330.39,683.387 1330.95,683.387 1331.51,683.387 1332.07,683.387 1332.63,683.387 1333.19,683.387 1333.75,683.387 1334.3,683.387 1334.86,683.387 1335.42,683.387 1335.98,683.387 1336.54,683.387 1337.1,683.387 1337.66,683.387 1338.22,683.387 1338.78,683.387 1339.34,683.387 1339.9,683.387 1340.46,683.387 1341.02,683.387 1341.57,683.387 1342.13,683.387 1342.69,683.387 1343.25,683.387 1343.81,683.387 1344.37,683.387 1344.93,683.387 1345.49,683.387 1346.05,683.387 1346.61,683.387 1347.17,683.387 1347.73,683.387 1348.29,683.387 1348.84,683.387 1349.4,683.387 1349.96,683.387 1350.52,683.387 1351.08,683.387 1351.64,683.387 1352.2,683.387 1352.76,683.387 1353.32,683.387 1353.88,683.387 1354.44,683.387 1355,683.387 1355.56,683.387 1356.12,683.387 1356.67,683.387 1357.23,683.387 1357.79,683.387 1358.35,683.387 1358.91,683.387 1359.47,683.387 1360.03,683.387 1360.59,683.387 1361.15,683.387 1361.71,683.387 1362.27,683.387 1362.83,683.387 1363.39,683.387 1363.94,683.387 1364.5,683.387 1365.06,683.387 1365.62,683.387 1366.18,683.387 1366.74,683.387 1367.3,683.387 1367.86,683.387 1368.42,683.387 1368.98,683.387 1369.54,683.387 1370.1,683.387 1370.66,683.387 1371.21,683.387 1371.77,683.387 1372.33,683.387 1372.89,683.387 1373.45,683.387 1374.01,683.387 1374.57,683.387 1375.13,683.387 1375.69,683.387 1376.25,683.387 1376.81,683.387 1377.37,683.387 1377.93,683.387 1378.49,683.387 1379.04,683.387 1379.6,683.387 1380.16,683.387 1380.72,683.387 1381.28,683.387 1381.84,683.387 1382.4,683.387 1382.96,683.387 1383.52,683.387 1384.08,683.387 1384.64,683.387 1385.2,683.387 1385.76,683.387 1386.31,683.387 1386.87,683.387 1387.43,683.387 1387.99,683.387 1388.55,683.387 1389.11,683.387 1389.67,683.387 1390.23,683.387 1390.79,683.387 1391.35,683.387 1391.91,683.387 1392.47,683.387 1393.03,683.387 1393.58,683.387 1394.14,683.387 1394.7,683.387 1395.26,683.387 1395.82,683.387 1396.38,683.387 1396.94,683.387 1397.5,683.387 1398.06,683.387 1398.62,683.387 1399.18,683.387 1399.74,683.387 1400.3,683.387 1400.86,683.387 1401.41,683.387 1401.97,683.387 1402.53,683.387 1403.09,683.387 1403.65,683.387 1404.21,683.387 1404.77,683.387 1405.33,683.387 1405.89,683.387 1406.45,683.387 1407.01,683.387 1407.57,683.387 1408.13,683.387 1408.68,683.387 1409.24,683.387 1409.8,683.387 1410.36,683.387 1410.92,683.387 1411.48,683.387 1412.04,683.387 1412.6,683.387 1413.16,683.387 1413.72,683.387 1414.28,683.387 1414.84,683.387 1415.4,683.387 1415.95,683.387 1416.51,683.387 1417.07,683.387 1417.63,683.387 1418.19,683.387 1418.75,683.387 1419.31,683.387 1419.87,683.387 1420.43,683.387 1420.99,683.387 1421.55,683.387 1422.11,683.387 1422.67,683.387 1423.23,683.387 1423.78,683.387 1424.34,683.387 1424.9,683.387 1425.46,683.387 1426.02,683.387 1426.58,683.387 1427.14,683.387 1427.7,683.387 1428.26,683.387 1428.82,683.387 1429.38,683.387 1429.94,683.387 1430.5,683.387 1431.05,683.387 1431.61,683.387 1432.17,683.387 1432.73,683.387 1433.29,683.387 1433.85,683.387 1434.41,683.387 1434.97,683.387 1435.53,683.387 1436.09,683.387 1436.65,683.387 1437.21,683.387 1437.77,683.387 1438.33,683.387 1438.88,683.387 1439.44,683.387 1440,683.387 1440.56,683.387 1441.12,683.387 1441.68,683.387 1442.24,683.387 1442.8,683.387 1443.36,683.387 1443.92,683.387 1444.48,683.387 1445.04,683.387 1445.6,683.387 1446.15,683.387 1446.71,683.387 1447.27,683.387 1447.83,683.387 1448.39,683.387 1448.95,683.387 1449.51,683.387 1450.07,683.387 1450.63,683.387 1451.19,683.387 1451.75,683.387 1452.31,683.387 1452.87,683.387 1453.42,683.387 1453.98,683.387 1454.54,683.387 1455.1,683.387 1455.66,683.387 1456.22,683.387 1456.78,683.387 1457.34,683.387 1457.9,683.387 1458.46,683.387 1459.02,683.387 1459.58,683.387 1460.14,683.387 1460.7,683.387 1461.25,683.387 1461.81,683.387 1462.37,683.387 1462.93,683.387 1463.49,683.387 1464.05,683.387 1464.61,683.387 1465.17,683.387 1465.73,683.387 1466.29,683.387 1466.85,683.387 1467.41,683.387 1467.97,683.387 1468.52,683.387 1469.08,683.387 1469.64,683.387 1470.2,683.387 1470.76,683.387 1471.32,683.387 1471.88,683.387 1472.44,683.387 1473,683.387 1473.56,683.387 1474.12,683.387 1474.68,683.387 1475.24,683.387 1475.79,683.387 1476.35,683.387 1476.91,683.387 1477.47,683.387 1478.03,683.387 1478.59,683.387 1479.15,683.387 1479.71,683.387 1480.27,683.387 1480.83,683.387 1481.39,683.387 1481.95,683.387 1482.51,683.387 1483.07,683.387 1483.62,683.387 1484.18,683.387 1484.74,683.387 1485.3,683.387 1485.86,683.387 1486.42,683.387 1486.98,683.387 1487.54,683.387 1488.1,683.387 1488.66,683.387 1489.22,683.387 1489.78,683.387 1490.34,683.387 1490.89,683.387 1491.45,683.387 1492.01,683.387 1492.57,683.387 1493.13,683.387 1493.69,683.387 1494.25,683.387 1494.81,683.387 1495.37,683.387 1495.93,683.387 1496.49,683.387 1497.05,683.387 1497.61,683.387 1498.16,683.387 1498.72,683.387 1499.28,683.387 1499.84,683.387 1500.4,683.387 1500.96,683.387 1501.52,683.387 1502.08,683.387 1502.64,683.387 1503.2,683.387 1503.76,683.387 1504.32,683.387 1504.88,683.387 1505.44,683.387 1505.99,683.387 1506.55,683.387 1507.11,683.387 1507.67,683.387 1508.23,683.387 1508.79,683.387 1509.35,683.387 1509.91,683.387 1510.47,683.387 1511.03,683.387 1511.59,683.387 1512.15,683.387 1512.71,683.387 1513.26,683.387 1513.82,683.387 1514.38,683.387 1514.94,683.387 1515.5,683.387 1516.06,683.387 1516.62,683.387 1517.18,683.387 1517.74,683.387 1518.3,683.387 1518.86,683.387 1519.42,683.387 1519.98,683.387 1520.53,683.387 1521.09,683.387 1521.65,683.387 1522.21,683.387 1522.77,683.387 1523.33,683.387 1523.89,683.387 1524.45,683.387 1525.01,683.387 1525.57,683.387 1526.13,683.387 1526.69,683.387 1527.25,683.387 1527.81,683.387 1528.36,683.387 1528.92,683.387 1529.48,683.387 1530.04,683.387 1530.6,683.387 1531.16,683.387 1531.72,683.387 1532.28,683.387 1532.84,683.387 1533.4,683.387 1533.96,683.387 1534.52,683.387 1535.08,683.387 1535.63,683.387 1536.19,683.387 1536.75,683.387 1537.31,683.387 1537.87,683.387 1538.43,683.387 1538.99,683.387 1539.55,683.387 1540.11,683.387 1540.67,683.387 1541.23,683.387 1541.79,683.387 1542.35,683.387 1542.9,683.387 1543.46,683.387 1544.02,683.387 1544.58,683.387 1545.14,683.387 1545.7,683.387 1546.26,683.387 1546.82,683.387 1547.38,683.387 1547.94,683.387 1548.5,683.387 1549.06,683.387 1549.62,683.387 1550.18,683.387 1550.73,683.387 1551.29,683.387 1551.85,683.387 1552.41,683.387 1552.97,683.387 1553.53,683.387 1554.09,683.387 1554.65,683.387 1555.21,683.387 1555.77,683.387 1556.33,683.387 1556.89,683.387 1557.45,683.387 1558,683.387 1558.56,683.387 1559.12,683.387 1559.68,683.387 1560.24,683.387 1560.8,683.387 1561.36,683.387 1561.92,683.387 1562.48,683.387 1563.04,683.387 1563.6,683.387 1564.16,683.387 1564.72,683.387 1565.28,683.387 1565.83,683.387 1566.39,683.387 1566.95,683.387 1567.51,683.387 1568.07,683.387 1568.63,683.387 1569.19,683.387 1569.75,683.387 1570.31,683.387 1570.87,683.387 1571.43,683.387 1571.99,683.387 1572.55,683.387 1573.1,683.387 1573.66,683.387 1574.22,683.387 1574.78,683.387 1575.34,683.387 1575.9,683.387 1576.46,683.387 1577.02,683.387 1577.58,683.387 1578.14,683.387 1578.7,683.387 1579.26,683.387 1579.82,683.387 1580.37,683.387 1580.93,683.387 1581.49,683.387 1582.05,683.387 1582.61,683.387 1583.17,683.387 1583.73,683.387 1584.29,683.387 1584.85,683.387 1585.41,683.387 1585.97,683.387 1586.53,683.387 1587.09,683.387 1587.65,683.387 1588.2,683.387 1588.76,683.387 1589.32,683.387 1589.88,683.387 1590.44,683.387 1591,683.387 1591.56,683.387 1592.12,683.387 1592.68,683.387 1593.24,683.387 1593.8,683.387 1594.36,683.387 1594.92,683.387 1595.47,683.387 1596.03,683.387 1596.59,683.387 1597.15,683.387 1597.71,683.387 1598.27,683.387 1598.83,683.387 1599.39,683.387 1599.95,683.387 1600.51,683.387 1601.07,683.387 1601.63,683.387 1602.19,683.387 1602.74,683.387 1603.3,683.387 1603.86,683.387 1604.42,683.387 1604.98,683.387 1605.54,683.387 1606.1,683.387 1606.66,683.387 1607.22,683.387 1607.78,683.387 1608.34,683.387 1608.9,683.387 1609.46,683.387 1610.02,683.387 1610.57,683.387 1611.13,683.387 1611.69,683.387 1612.25,683.387 1612.81,683.387 1613.37,683.387 1613.93,683.387 1614.49,683.387 1615.05,683.387 1615.61,683.387 1616.17,683.387 1616.73,683.387 1617.29,683.387 1617.84,683.387 1618.4,683.387 1618.96,683.387 1619.52,683.387 1620.08,683.387 1620.64,683.387 1621.2,683.387 1621.76,683.387 1622.32,683.387 1622.88,683.387 1623.44,683.387 1624,683.387 1624.56,683.387 1625.11,683.387 1625.67,683.387 1626.23,683.387 1626.79,683.387 1627.35,683.387 1627.91,683.387 1628.47,683.387 1629.03,683.387 1629.59,683.387 1630.15,683.387 1630.71,683.387 1631.27,683.387 1631.83,683.387 1632.39,683.387 1632.94,683.387 1633.5,683.387 1634.06,683.387 1634.62,683.387 1635.18,683.387 1635.74,683.387 1636.3,683.387 1636.86,683.387 1637.42,683.387 1637.98,683.387 1638.54,683.387 1639.1,683.387 1639.66,683.387 1640.21,683.387 1640.77,683.387 1641.33,683.387 1641.89,683.387 1642.45,683.387 1643.01,683.387 1643.57,683.387 1644.13,683.387 1644.69,683.387 1645.25,683.387 1645.81,683.387 1646.37,683.387 1646.93,683.387 1647.48,683.387 1648.04,683.387 1648.6,683.387 1649.16,683.387 1649.72,683.387 1650.28,683.387 1650.84,683.387 1651.4,683.387 1651.96,683.387 1652.52,683.387 1653.08,683.387 1653.64,683.387 1654.2,683.387 1654.76,683.387 1655.31,683.387 1655.87,683.387 1656.43,683.387 1656.99,683.387 1657.55,683.387 1658.11,683.387 1658.67,683.387 1659.23,683.387 1659.79,683.387 1660.35,683.387 1660.91,683.387 1661.47,683.387 1662.03,683.387 1662.58,683.387 1663.14,683.387 1663.7,683.387 1664.26,683.387 1664.82,683.387 1665.38,683.387 1665.94,683.387 1666.5,683.387 1667.06,683.387 1667.62,683.387 1668.18,683.387 1668.74,683.387 1669.3,683.387 1669.85,683.387 1670.41,683.387 1670.97,683.387 1671.53,683.387 1672.09,683.387 1672.65,683.387 1673.21,683.387 1673.77,683.387 1674.33,683.387 1674.89,683.387 1675.45,683.387 1676.01,683.387 1676.57,683.387 1677.13,683.387 1677.68,683.387 1678.24,683.387 1678.8,683.387 1679.36,683.387 1679.92,683.387 1680.48,683.387 1681.04,683.387 1681.6,683.387 1682.16,683.387 1682.72,683.387 1683.28,683.387 1683.84,683.387 1684.4,683.387 1684.95,683.387 1685.51,683.387 1686.07,683.387 1686.63,683.387 1687.19,683.387 1687.75,683.387 1688.31,683.387 1688.87,683.387 1689.43,683.387 1689.99,683.387 1690.55,683.387 1691.11,683.387 1691.67,683.387 1692.23,683.387 1692.78,683.387 1693.34,683.387 1693.9,683.387 1694.46,683.387 1695.02,683.387 1695.58,683.387 1696.14,683.387 1696.7,683.387 1697.26,683.387 1697.82,683.387 1698.38,683.387 1698.94,683.387 1699.5,683.387 1700.05,683.387 1700.61,683.387 1701.17,683.387 1701.73,683.387 1702.29,683.387 1702.85,683.387 1703.41,683.387 1703.97,683.387 1704.53,683.387 1705.09,683.387 1705.65,683.387 1706.21,683.387 1706.77,683.387 1707.32,683.387 1707.88,683.387 1708.44,683.387 1709,683.387 1709.56,683.387 1710.12,683.387 1710.68,683.387 1711.24,683.387 1711.8,683.387 1712.36,683.387 1712.92,683.387 1713.48,683.387 1714.04,683.387 1714.6,683.387 1715.15,683.387 1715.71,683.387 1716.27,683.387 1716.83,683.387 1717.39,683.387 1717.95,683.387 1718.51,683.387 1719.07,683.387 1719.63,683.387 1720.19,683.387 1720.75,683.387 1721.31,683.387 1721.87,683.387 1722.42,683.387 1722.98,683.387 1723.54,683.387 1724.1,683.387 1724.66,683.387 1725.22,683.387 1725.78,683.387 1726.34,683.387 1726.9,683.387 1727.46,683.387 1728.02,683.387 1728.58,683.387 1729.14,683.387 1729.69,683.387 1730.25,683.387 1730.81,683.387 1731.37,683.387 1731.93,683.387 1732.49,683.387 1733.05,683.387 1733.61,683.387 1734.17,683.387 1734.73,683.387 1735.29,683.387 1735.85,683.387 1736.41,683.387 1736.97,683.387 1737.52,683.387 1738.08,683.387 1738.64,683.387 1739.2,683.387 1739.76,683.387 1740.32,683.387 1740.88,683.387 1741.44,683.387 1742,683.387 1742.56,683.387 1743.12,683.387 1743.68,683.387 1744.24,683.387 1744.79,683.387 1745.35,683.387 1745.91,683.387 1746.47,683.387 1747.03,683.387 1747.59,683.387 1748.15,683.387 1748.71,683.387 1749.27,683.387 1749.83,683.387 1750.39,683.387 1750.95,683.387 1751.51,683.387 1752.06,683.387 1752.62,683.387 1753.18,683.387 1753.74,683.387 1754.3,683.387 1754.86,683.387 1755.42,683.387 1755.98,683.387 1756.54,683.387 1757.1,683.387 1757.66,683.387 1758.22,683.387 1758.78,683.387 1759.34,683.387 1759.89,683.387 1760.45,683.387 1761.01,683.387 1761.57,683.387 1762.13,683.387 1762.69,683.387 1763.25,683.387 1763.81,683.387 1764.37,683.387 1764.93,683.387 1765.49,683.387 1766.05,683.387 1766.61,683.387 1767.16,683.387 1767.72,683.387 1768.28,683.387 1768.84,683.387 1769.4,683.387 1769.96,683.387 1770.52,683.387 1771.08,683.387 1771.64,683.387 1772.2,683.387 1772.76,683.387 1773.32,683.387 1773.88,683.387 1774.43,683.387 1774.99,683.387 1775.55,683.387 1776.11,683.387 1776.67,683.387 1777.23,683.387 1777.79,683.387 1778.35,683.387 1778.91,683.387 1779.47,683.387 1780.03,683.387 1780.59,683.387 1781.15,683.387 1781.71,683.387 1782.26,683.387 1782.82,683.387 1783.38,683.387 1783.94,683.387 1784.5,683.387 1785.06,683.387 1785.62,683.387 1786.18,683.387 1786.74,683.387 1787.3,683.387 1787.86,683.387 1788.42,683.387 1788.98,683.387 1789.53,683.387 1790.09,683.387 1790.65,683.387 1791.21,683.387 1791.77,683.387 1792.33,683.387 1792.89,683.387 1793.45,683.387 1794.01,683.387 1794.57,683.387 1795.13,683.387 1795.69,683.387 1796.25,683.387 1796.8,683.387 1797.36,683.387 1797.92,683.387 1798.48,683.387 1799.04,683.387 1799.6,683.387 1800.16,683.387 1800.72,683.387 1801.28,683.387 1801.84,683.387 1802.4,683.387 1802.96,683.387 1803.52,683.387 1804.08,683.387 1804.63,683.387 1805.19,683.387 1805.75,683.387 1806.31,683.387 1806.87,683.387 1807.43,683.387 1807.99,683.387 1808.55,683.387 1809.11,683.387 1809.67,683.387 1810.23,683.387 1810.79,683.387 1811.35,683.387 1811.9,683.387 1812.46,683.387 1813.02,683.387 1813.58,683.387 1814.14,683.387 1814.7,683.387 1815.26,683.387 1815.82,683.387 1816.38,683.387 1816.94,683.387 1817.5,683.387 1818.06,683.387 1818.62,683.387 1819.18,683.387 1819.73,683.387 1820.29,683.387 1820.85,683.387 1821.41,683.387 1821.97,683.387 1822.53,683.387 1823.09,683.387 1823.65,683.387 1824.21,683.387 1824.77,683.387 1825.33,683.387 1825.89,683.387 1826.45,683.387 1827,683.387 1827.56,683.387 1828.12,683.387 1828.68,683.387 1829.24,683.387 1829.8,683.387 1830.36,683.387 1830.92,683.387 1831.48,683.387 1832.04,683.387 1832.6,683.387 1833.16,683.387 1833.72,683.387 1834.27,683.387 1834.83,683.387 1835.39,683.387 1835.95,683.387 1836.51,683.387 1837.07,683.387 1837.63,683.387 1838.19,683.387 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.039295352623191 ± 0.02093784881067433\nProjected Energy: -4.014088185643784 ± (0.007065396865506557, 0.007090209633159539)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.941919</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4785e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2622e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.4136e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">5.08e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.374e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.2804e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832164\n -3.3631242916133672\n -0.7590191922770781\n  0.13584182219621788\n  0.15789998694608087\n  0.8767114411781378\n  1.530592997097333\n  1.5835732611867375\n  3.072870330325867\n  3.1256726539518356\n  4.862107221562168\n  6.260694850380593\n  6.402671211183116\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^8, cutoff, filter, max_depth, stop_after, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Without this argument, the order is random and may change between invocations of the function! Any additional keyword arguments are passed on to Base.sort!.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
