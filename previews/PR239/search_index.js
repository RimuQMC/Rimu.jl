var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the two-body correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables are calculated using the \"replica trick\" whereby several copies or \"replicas\" of the model are run simultaneously. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\ninitial_vector = DVec(initial_address => 1)\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we run FCIQMC.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H, initial_vector;\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21613155078119725 ± 0.01085821157566204\n   G2(1) = 0.9169697523770443 ± 0.0038806082210552633\n   G2(2) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(3) = 0.9850696504200039 ± 0.0021126795728271214\n   G2(4) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(5) = 0.9169697523770443 ± 0.0038806082210552633\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is highest at d=3 which is the longest possible separation with periodic boundary conditions.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.822539185245795 ± 0.22458214092101125\n   Replica 2: -4.0952774782992565 ± 0.20113200040556367\n   Replica 3: -4.003586035974758 ± 0.20727140414134074\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equllibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlaststep = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a timestep size. FCIQMC does not have a timestep error, however, the timestep needs to be small enough, or the computation might diverge. If the timestep is too small, however, the computation might take a long time to equillibrate. The appropriate timestep size is problem-dependent and is best determined throgh experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dτ = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as a starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables are passed into the lomc! function with the post_step keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}[fs\"|1 1 1 1 1 1⟩\" => 10.0]), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}[fs\"|1 1 1 1 2 0⟩\" => -14.142135623730951, fs\"|0 2 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 1 0 2⟩\" => -14.142135623730951, fs\"|1 2 0 1 1 1⟩\" => -14.142135623730951, fs\"|2 0 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 2 0 1⟩\" => -14.142135623730951, fs\"|1 1 2 0 1 1⟩\" => -14.142135623730951, fs\"|1 1 0 2 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 0 2 1⟩\" => -14.142135623730951, fs\"|1 0 2 1 1 1⟩\" => -14.142135623730951, fs\"|2 1 1 1 1 0⟩\" => -14.142135623730951, fs\"|0 1 1 1 1 2⟩\" => -14.142135623730951]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this example, we seed the random number generator in order to get reproducible results. This should not be done for actual computations.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Random\nRandom.seed!(17);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finally, we can start the FCIQMC run.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df, state = lomc!(\n    H, initial_vector;\n    laststep,\n    dτ,\n    targetwalkers,\n    post_step,\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, df is a DataFrame containing the time series data, while state contains the internal state of FCIQMC, which can be used to continue computations.","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline([targetwalkers], label=\"targetwalkers\", color=2, linestyle=:dash)\nplot!(df.steps, df.norm, label=\"norm\", ylabel=\"norm\", xlabel=\"steps\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"165.712,1505.26 165.712,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.5,1505.26 873.5,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1581.29,1505.26 1581.29,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"165.712,1505.26 165.712,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.5,1505.26 873.5,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1581.29,1505.26 1581.29,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M165.712 1536.18 Q162.101 1536.18 160.272 1539.74 Q158.467 1543.28 158.467 1550.41 Q158.467 1557.52 160.272 1561.09 Q162.101 1564.63 165.712 1564.63 Q169.346 1564.63 171.152 1561.09 Q172.981 1557.52 172.981 1550.41 Q172.981 1543.28 171.152 1539.74 Q169.346 1536.18 165.712 1536.18 M165.712 1532.47 Q171.522 1532.47 174.578 1537.08 Q177.656 1541.66 177.656 1550.41 Q177.656 1559.14 174.578 1563.75 Q171.522 1568.33 165.712 1568.33 Q159.902 1568.33 156.823 1563.75 Q153.768 1559.14 153.768 1550.41 Q153.768 1541.66 156.823 1537.08 Q159.902 1532.47 165.712 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M818.026 1563.72 L825.665 1563.72 L825.665 1537.36 L817.355 1539.03 L817.355 1534.77 L825.618 1533.1 L830.294 1533.1 L830.294 1563.72 L837.933 1563.72 L837.933 1567.66 L818.026 1567.66 L818.026 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M857.378 1536.18 Q853.766 1536.18 851.938 1539.74 Q850.132 1543.28 850.132 1550.41 Q850.132 1557.52 851.938 1561.09 Q853.766 1564.63 857.378 1564.63 Q861.012 1564.63 862.817 1561.09 Q864.646 1557.52 864.646 1550.41 Q864.646 1543.28 862.817 1539.74 Q861.012 1536.18 857.378 1536.18 M857.378 1532.47 Q863.188 1532.47 866.243 1537.08 Q869.322 1541.66 869.322 1550.41 Q869.322 1559.14 866.243 1563.75 Q863.188 1568.33 857.378 1568.33 Q851.567 1568.33 848.489 1563.75 Q845.433 1559.14 845.433 1550.41 Q845.433 1541.66 848.489 1537.08 Q851.567 1532.47 857.378 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M887.539 1536.18 Q883.928 1536.18 882.1 1539.74 Q880.294 1543.28 880.294 1550.41 Q880.294 1557.52 882.1 1561.09 Q883.928 1564.63 887.539 1564.63 Q891.174 1564.63 892.979 1561.09 Q894.808 1557.52 894.808 1550.41 Q894.808 1543.28 892.979 1539.74 Q891.174 1536.18 887.539 1536.18 M887.539 1532.47 Q893.35 1532.47 896.405 1537.08 Q899.484 1541.66 899.484 1550.41 Q899.484 1559.14 896.405 1563.75 Q893.35 1568.33 887.539 1568.33 Q881.729 1568.33 878.651 1563.75 Q875.595 1559.14 875.595 1550.41 Q875.595 1541.66 878.651 1537.08 Q881.729 1532.47 887.539 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M917.701 1536.18 Q914.09 1536.18 912.261 1539.74 Q910.456 1543.28 910.456 1550.41 Q910.456 1557.52 912.261 1561.09 Q914.09 1564.63 917.701 1564.63 Q921.336 1564.63 923.141 1561.09 Q924.97 1557.52 924.97 1550.41 Q924.97 1543.28 923.141 1539.74 Q921.336 1536.18 917.701 1536.18 M917.701 1532.47 Q923.511 1532.47 926.567 1537.08 Q929.646 1541.66 929.646 1550.41 Q929.646 1559.14 926.567 1563.75 Q923.511 1568.33 917.701 1568.33 Q911.891 1568.33 908.812 1563.75 Q905.757 1559.14 905.757 1550.41 Q905.757 1541.66 908.812 1537.08 Q911.891 1532.47 917.701 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1529.9 1563.72 L1546.22 1563.72 L1546.22 1567.66 L1524.27 1567.66 L1524.27 1563.72 Q1526.94 1560.97 1531.52 1556.34 Q1536.13 1551.69 1537.31 1550.35 Q1539.55 1547.82 1540.43 1546.09 Q1541.33 1544.33 1541.33 1542.64 Q1541.33 1539.88 1539.39 1538.15 Q1537.47 1536.41 1534.37 1536.41 Q1532.17 1536.41 1529.71 1537.17 Q1527.28 1537.94 1524.51 1539.49 L1524.51 1534.77 Q1527.33 1533.63 1529.78 1533.05 Q1532.24 1532.47 1534.27 1532.47 Q1539.64 1532.47 1542.84 1535.16 Q1546.03 1537.85 1546.03 1542.34 Q1546.03 1544.47 1545.22 1546.39 Q1544.44 1548.28 1542.33 1550.88 Q1541.75 1551.55 1538.65 1554.77 Q1535.55 1557.96 1529.9 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1566.03 1536.18 Q1562.42 1536.18 1560.59 1539.74 Q1558.79 1543.28 1558.79 1550.41 Q1558.79 1557.52 1560.59 1561.09 Q1562.42 1564.63 1566.03 1564.63 Q1569.67 1564.63 1571.47 1561.09 Q1573.3 1557.52 1573.3 1550.41 Q1573.3 1543.28 1571.47 1539.74 Q1569.67 1536.18 1566.03 1536.18 M1566.03 1532.47 Q1571.84 1532.47 1574.9 1537.08 Q1577.98 1541.66 1577.98 1550.41 Q1577.98 1559.14 1574.9 1563.75 Q1571.84 1568.33 1566.03 1568.33 Q1560.22 1568.33 1557.14 1563.75 Q1554.09 1559.14 1554.09 1550.41 Q1554.09 1541.66 1557.14 1537.08 Q1560.22 1532.47 1566.03 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1596.2 1536.18 Q1592.58 1536.18 1590.76 1539.74 Q1588.95 1543.28 1588.95 1550.41 Q1588.95 1557.52 1590.76 1561.09 Q1592.58 1564.63 1596.2 1564.63 Q1599.83 1564.63 1601.64 1561.09 Q1603.46 1557.52 1603.46 1550.41 Q1603.46 1543.28 1601.64 1539.74 Q1599.83 1536.18 1596.2 1536.18 M1596.2 1532.47 Q1602.01 1532.47 1605.06 1537.08 Q1608.14 1541.66 1608.14 1550.41 Q1608.14 1559.14 1605.06 1563.75 Q1602.01 1568.33 1596.2 1568.33 Q1590.39 1568.33 1587.31 1563.75 Q1584.25 1559.14 1584.25 1550.41 Q1584.25 1541.66 1587.31 1537.08 Q1590.39 1532.47 1596.2 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1626.36 1536.18 Q1622.75 1536.18 1620.92 1539.74 Q1619.11 1543.28 1619.11 1550.41 Q1619.11 1557.52 1620.92 1561.09 Q1622.75 1564.63 1626.36 1564.63 Q1629.99 1564.63 1631.8 1561.09 Q1633.63 1557.52 1633.63 1550.41 Q1633.63 1543.28 1631.8 1539.74 Q1629.99 1536.18 1626.36 1536.18 M1626.36 1532.47 Q1632.17 1532.47 1635.22 1537.08 Q1638.3 1541.66 1638.3 1550.41 Q1638.3 1559.14 1635.22 1563.75 Q1632.17 1568.33 1626.36 1568.33 Q1620.55 1568.33 1617.47 1563.75 Q1614.41 1559.14 1614.41 1550.41 Q1614.41 1541.66 1617.47 1537.08 Q1620.55 1532.47 1626.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2247.76 1549.03 Q2251.11 1549.74 2252.99 1552.01 Q2254.89 1554.28 2254.89 1557.61 Q2254.89 1562.73 2251.37 1565.53 Q2247.85 1568.33 2241.37 1568.33 Q2239.19 1568.33 2236.88 1567.89 Q2234.59 1567.47 2232.13 1566.62 L2232.13 1562.1 Q2234.08 1563.24 2236.39 1563.82 Q2238.71 1564.4 2241.23 1564.4 Q2245.63 1564.4 2247.92 1562.66 Q2250.23 1560.92 2250.23 1557.61 Q2250.23 1554.56 2248.08 1552.85 Q2245.95 1551.11 2242.13 1551.11 L2238.1 1551.11 L2238.1 1547.27 L2242.32 1547.27 Q2245.77 1547.27 2247.59 1545.9 Q2249.42 1544.51 2249.42 1541.92 Q2249.42 1539.26 2247.53 1537.85 Q2245.65 1536.41 2242.13 1536.41 Q2240.21 1536.41 2238.01 1536.83 Q2235.81 1537.24 2233.17 1538.12 L2233.17 1533.96 Q2235.84 1533.22 2238.15 1532.85 Q2240.49 1532.47 2242.55 1532.47 Q2247.87 1532.47 2250.97 1534.91 Q2254.08 1537.31 2254.08 1541.43 Q2254.08 1544.3 2252.43 1546.29 Q2250.79 1548.26 2247.76 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2273.75 1536.18 Q2270.14 1536.18 2268.31 1539.74 Q2266.51 1543.28 2266.51 1550.41 Q2266.51 1557.52 2268.31 1561.09 Q2270.14 1564.63 2273.75 1564.63 Q2277.39 1564.63 2279.19 1561.09 Q2281.02 1557.52 2281.02 1550.41 Q2281.02 1543.28 2279.19 1539.74 Q2277.39 1536.18 2273.75 1536.18 M2273.75 1532.47 Q2279.56 1532.47 2282.62 1537.08 Q2285.7 1541.66 2285.7 1550.41 Q2285.7 1559.14 2282.62 1563.75 Q2279.56 1568.33 2273.75 1568.33 Q2267.94 1568.33 2264.86 1563.75 Q2261.81 1559.14 2261.81 1550.41 Q2261.81 1541.66 2264.86 1537.08 Q2267.94 1532.47 2273.75 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2303.91 1536.18 Q2300.3 1536.18 2298.47 1539.74 Q2296.67 1543.28 2296.67 1550.41 Q2296.67 1557.52 2298.47 1561.09 Q2300.3 1564.63 2303.91 1564.63 Q2307.55 1564.63 2309.35 1561.09 Q2311.18 1557.52 2311.18 1550.41 Q2311.18 1543.28 2309.35 1539.74 Q2307.55 1536.18 2303.91 1536.18 M2303.91 1532.47 Q2309.72 1532.47 2312.78 1537.08 Q2315.86 1541.66 2315.86 1550.41 Q2315.86 1559.14 2312.78 1563.75 Q2309.72 1568.33 2303.91 1568.33 Q2298.1 1568.33 2295.03 1563.75 Q2291.97 1559.14 2291.97 1550.41 Q2291.97 1541.66 2295.03 1537.08 Q2298.1 1532.47 2303.91 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2334.08 1536.18 Q2330.46 1536.18 2328.64 1539.74 Q2326.83 1543.28 2326.83 1550.41 Q2326.83 1557.52 2328.64 1561.09 Q2330.46 1564.63 2334.08 1564.63 Q2337.71 1564.63 2339.52 1561.09 Q2341.34 1557.52 2341.34 1550.41 Q2341.34 1543.28 2339.52 1539.74 Q2337.71 1536.18 2334.08 1536.18 M2334.08 1532.47 Q2339.89 1532.47 2342.94 1537.08 Q2346.02 1541.66 2346.02 1550.41 Q2346.02 1559.14 2342.94 1563.75 Q2339.89 1568.33 2334.08 1568.33 Q2328.27 1568.33 2325.19 1563.75 Q2322.13 1559.14 2322.13 1550.41 Q2322.13 1541.66 2325.19 1537.08 Q2328.27 1532.47 2334.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1168.96 1615.53 L1168.96 1621.06 Q1166.48 1619.79 1163.8 1619.15 Q1161.13 1618.52 1158.27 1618.52 Q1153.91 1618.52 1151.71 1619.85 Q1149.55 1621.19 1149.55 1623.87 Q1149.55 1625.9 1151.1 1627.08 Q1152.66 1628.23 1157.38 1629.28 L1159.38 1629.72 Q1165.62 1631.06 1168.23 1633.51 Q1170.87 1635.93 1170.87 1640.29 Q1170.87 1645.25 1166.92 1648.15 Q1163.01 1651.05 1156.13 1651.05 Q1153.27 1651.05 1150.15 1650.47 Q1147.06 1649.93 1143.63 1648.82 L1143.63 1642.77 Q1146.87 1644.46 1150.02 1645.32 Q1153.17 1646.15 1156.26 1646.15 Q1160.4 1646.15 1162.63 1644.74 Q1164.85 1643.31 1164.85 1640.73 Q1164.85 1638.35 1163.23 1637.07 Q1161.64 1635.8 1156.2 1634.62 L1154.16 1634.15 Q1148.72 1633 1146.3 1630.64 Q1143.88 1628.26 1143.88 1624.12 Q1143.88 1619.09 1147.44 1616.35 Q1151.01 1613.62 1157.57 1613.62 Q1160.81 1613.62 1163.68 1614.09 Q1166.54 1614.57 1168.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1185.99 1604.35 L1185.99 1614.48 L1198.05 1614.48 L1198.05 1619.03 L1185.99 1619.03 L1185.99 1638.38 Q1185.99 1642.74 1187.17 1643.98 Q1188.38 1645.22 1192.04 1645.22 L1198.05 1645.22 L1198.05 1650.12 L1192.04 1650.12 Q1185.26 1650.12 1182.68 1647.61 Q1180.1 1645.06 1180.1 1638.38 L1180.1 1619.03 L1175.8 1619.03 L1175.8 1614.48 L1180.1 1614.48 L1180.1 1604.35 L1185.99 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1236.25 1630.84 L1236.25 1633.7 L1209.32 1633.7 Q1209.7 1639.75 1212.95 1642.93 Q1216.23 1646.08 1222.05 1646.08 Q1225.42 1646.08 1228.58 1645.25 Q1231.76 1644.43 1234.88 1642.77 L1234.88 1648.31 Q1231.73 1649.65 1228.42 1650.35 Q1225.11 1651.05 1221.7 1651.05 Q1213.17 1651.05 1208.17 1646.08 Q1203.21 1641.12 1203.21 1632.65 Q1203.21 1623.9 1207.92 1618.77 Q1212.66 1613.62 1220.68 1613.62 Q1227.88 1613.62 1232.04 1618.26 Q1236.25 1622.88 1236.25 1630.84 M1230.39 1629.12 Q1230.33 1624.31 1227.68 1621.45 Q1225.07 1618.58 1220.75 1618.58 Q1215.84 1618.58 1212.88 1621.35 Q1209.96 1624.12 1209.51 1629.15 L1230.39 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1251.52 1644.78 L1251.52 1663.68 L1245.64 1663.68 L1245.64 1614.48 L1251.52 1614.48 L1251.52 1619.89 Q1253.37 1616.7 1256.17 1615.18 Q1259 1613.62 1262.92 1613.62 Q1269.41 1613.62 1273.45 1618.77 Q1277.53 1623.93 1277.53 1632.33 Q1277.53 1640.73 1273.45 1645.89 Q1269.41 1651.05 1262.92 1651.05 Q1259 1651.05 1256.17 1649.52 Q1253.37 1647.96 1251.52 1644.78 M1271.45 1632.33 Q1271.45 1625.87 1268.78 1622.21 Q1266.13 1618.52 1261.49 1618.52 Q1256.84 1618.52 1254.17 1622.21 Q1251.52 1625.87 1251.52 1632.33 Q1251.52 1638.79 1254.17 1642.48 Q1256.84 1646.15 1261.49 1646.15 Q1266.13 1646.15 1268.78 1642.48 Q1271.45 1638.79 1271.45 1632.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1309.96 1615.53 L1309.96 1621.06 Q1307.48 1619.79 1304.8 1619.15 Q1302.13 1618.52 1299.27 1618.52 Q1294.91 1618.52 1292.71 1619.85 Q1290.55 1621.19 1290.55 1623.87 Q1290.55 1625.9 1292.11 1627.08 Q1293.66 1628.23 1298.38 1629.28 L1300.38 1629.72 Q1306.62 1631.06 1309.23 1633.51 Q1311.87 1635.93 1311.87 1640.29 Q1311.87 1645.25 1307.92 1648.15 Q1304.01 1651.05 1297.13 1651.05 Q1294.27 1651.05 1291.15 1650.47 Q1288.06 1649.93 1284.63 1648.82 L1284.63 1642.77 Q1287.87 1644.46 1291.02 1645.32 Q1294.17 1646.15 1297.26 1646.15 Q1301.4 1646.15 1303.63 1644.74 Q1305.86 1643.31 1305.86 1640.73 Q1305.86 1638.35 1304.23 1637.07 Q1302.64 1635.8 1297.2 1634.62 L1295.16 1634.15 Q1289.72 1633 1287.3 1630.64 Q1284.88 1628.26 1284.88 1624.12 Q1284.88 1619.09 1288.45 1616.35 Q1292.01 1613.62 1298.57 1613.62 Q1301.81 1613.62 1304.68 1614.09 Q1307.54 1614.57 1309.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1477.74 2352.76,1477.74 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1134.18 2352.76,1134.18 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,790.629 2352.76,790.629 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,447.075 2352.76,447.075 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,103.521 2352.76,103.521 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1477.74 121.638,1477.74 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1134.18 121.638,1134.18 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,790.629 121.638,790.629 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,447.075 121.638,447.075 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,103.521 121.638,103.521 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M54.7958 1463.54 Q51.1847 1463.54 49.356 1467.1 Q47.5504 1470.64 47.5504 1477.77 Q47.5504 1484.88 49.356 1488.44 Q51.1847 1491.99 54.7958 1491.99 Q58.43 1491.99 60.2356 1488.44 Q62.0643 1484.88 62.0643 1477.77 Q62.0643 1470.64 60.2356 1467.1 Q58.43 1463.54 54.7958 1463.54 M54.7958 1459.83 Q60.6059 1459.83 63.6615 1464.44 Q66.7402 1469.02 66.7402 1477.77 Q66.7402 1486.5 63.6615 1491.11 Q60.6059 1495.69 54.7958 1495.69 Q48.9856 1495.69 45.9069 1491.11 Q42.8514 1486.5 42.8514 1477.77 Q42.8514 1469.02 45.9069 1464.44 Q48.9856 1459.83 54.7958 1459.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-11.5002 1147.53 L4.81919 1147.53 L4.81919 1151.46 L-17.1251 1151.46 L-17.1251 1147.53 Q-14.4631 1144.77 -9.8798 1140.14 Q-5.27335 1135.49 -4.0928 1134.15 Q-1.84744 1131.63 -0.967813 1129.89 Q-0.0650401 1128.13 -0.0650401 1126.44 Q-0.0650401 1123.69 -2.00947 1121.95 Q-3.93076 1120.21 -7.0326 1120.21 Q-9.23166 1120.21 -11.6853 1120.98 Q-14.1159 1121.74 -16.8937 1123.29 L-16.8937 1118.57 Q-14.0696 1117.44 -11.6159 1116.86 Q-9.16221 1116.28 -7.12519 1116.28 Q-1.75485 1116.28 1.43958 1118.96 Q4.63401 1121.65 4.63401 1126.14 Q4.63401 1128.27 3.82383 1130.19 Q3.0368 1132.09 0.930325 1134.68 Q0.351624 1135.35 -2.75021 1138.57 Q-5.85205 1141.76 -11.5002 1147.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M14.6803 1116.9 L33.0366 1116.9 L33.0366 1120.84 L18.9626 1120.84 L18.9626 1129.31 Q19.9811 1128.96 20.9997 1128.8 Q22.0182 1128.62 23.0367 1128.62 Q28.8237 1128.62 32.2033 1131.79 Q35.5829 1134.96 35.5829 1140.38 Q35.5829 1145.95 32.1107 1149.06 Q28.6385 1152.13 22.3191 1152.13 Q20.1432 1152.13 17.8747 1151.76 Q15.6293 1151.39 13.2219 1150.65 L13.2219 1145.95 Q15.3052 1147.09 17.5275 1147.64 Q19.7497 1148.2 22.2265 1148.2 Q26.2311 1148.2 28.5691 1146.09 Q30.907 1143.99 30.907 1140.38 Q30.907 1136.76 28.5691 1134.66 Q26.2311 1132.55 22.2265 1132.55 Q20.3515 1132.55 18.4765 1132.97 Q16.6247 1133.38 14.6803 1134.26 L14.6803 1116.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 1119.98 Q51.1847 1119.98 49.356 1123.55 Q47.5504 1127.09 47.5504 1134.22 Q47.5504 1141.32 49.356 1144.89 Q51.1847 1148.43 54.7958 1148.43 Q58.43 1148.43 60.2356 1144.89 Q62.0643 1141.32 62.0643 1134.22 Q62.0643 1127.09 60.2356 1123.55 Q58.43 1119.98 54.7958 1119.98 M54.7958 1116.28 Q60.6059 1116.28 63.6615 1120.88 Q66.7402 1125.47 66.7402 1134.22 Q66.7402 1142.94 63.6615 1147.55 Q60.6059 1152.13 54.7958 1152.13 Q48.9856 1152.13 45.9069 1147.55 Q42.8514 1142.94 42.8514 1134.22 Q42.8514 1125.47 45.9069 1120.88 Q48.9856 1116.28 54.7958 1116.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-15.4816 773.349 L2.87476 773.349 L2.87476 777.284 L-11.1992 777.284 L-11.1992 785.757 Q-10.1807 785.409 -9.16221 785.247 Q-8.1437 785.062 -7.12519 785.062 Q-1.33818 785.062 2.04143 788.234 Q5.42104 791.405 5.42104 796.821 Q5.42104 802.4 1.94884 805.502 Q-1.52337 808.581 -7.84278 808.581 Q-10.0187 808.581 -12.2872 808.21 Q-14.5326 807.84 -16.9399 807.099 L-16.9399 802.4 Q-14.8566 803.534 -12.6344 804.09 Q-10.4122 804.645 -7.93537 804.645 Q-3.93076 804.645 -1.59281 802.539 Q0.745141 800.433 0.745141 796.821 Q0.745141 793.21 -1.59281 791.104 Q-3.93076 788.997 -7.93537 788.997 Q-9.81036 788.997 -11.6853 789.414 Q-13.5372 789.831 -15.4816 790.71 L-15.4816 773.349 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M24.6339 776.428 Q21.0228 776.428 19.1941 779.993 Q17.3886 783.534 17.3886 790.664 Q17.3886 797.77 19.1941 801.335 Q21.0228 804.877 24.6339 804.877 Q28.2681 804.877 30.0737 801.335 Q31.9024 797.77 31.9024 790.664 Q31.9024 783.534 30.0737 779.993 Q28.2681 776.428 24.6339 776.428 M24.6339 772.724 Q30.4441 772.724 33.4996 777.331 Q36.5783 781.914 36.5783 790.664 Q36.5783 799.391 33.4996 803.997 Q30.4441 808.581 24.6339 808.581 Q18.8237 808.581 15.7451 803.997 Q12.6895 799.391 12.6895 790.664 Q12.6895 781.914 15.7451 777.331 Q18.8237 772.724 24.6339 772.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 776.428 Q51.1847 776.428 49.356 779.993 Q47.5504 783.534 47.5504 790.664 Q47.5504 797.77 49.356 801.335 Q51.1847 804.877 54.7958 804.877 Q58.43 804.877 60.2356 801.335 Q62.0643 797.77 62.0643 790.664 Q62.0643 783.534 60.2356 779.993 Q58.43 776.428 54.7958 776.428 M54.7958 772.724 Q60.6059 772.724 63.6615 777.331 Q66.7402 781.914 66.7402 790.664 Q66.7402 799.391 63.6615 803.997 Q60.6059 808.581 54.7958 808.581 Q48.9856 808.581 45.9069 803.997 Q42.8514 799.391 42.8514 790.664 Q42.8514 781.914 45.9069 777.331 Q48.9856 772.724 54.7958 772.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-16.7085 429.795 L5.51363 429.795 L5.51363 431.786 L-7.0326 464.355 L-11.9168 464.355 L-0.111336 433.73 L-16.7085 433.73 L-16.7085 429.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M14.6803 429.795 L33.0366 429.795 L33.0366 433.73 L18.9626 433.73 L18.9626 442.203 Q19.9811 441.855 20.9997 441.693 Q22.0182 441.508 23.0367 441.508 Q28.8237 441.508 32.2033 444.679 Q35.5829 447.851 35.5829 453.267 Q35.5829 458.846 32.1107 461.948 Q28.6385 465.027 22.3191 465.027 Q20.1432 465.027 17.8747 464.656 Q15.6293 464.286 13.2219 463.545 L13.2219 458.846 Q15.3052 459.98 17.5275 460.536 Q19.7497 461.091 22.2265 461.091 Q26.2311 461.091 28.5691 458.985 Q30.907 456.878 30.907 453.267 Q30.907 449.656 28.5691 447.55 Q26.2311 445.443 22.2265 445.443 Q20.3515 445.443 18.4765 445.86 Q16.6247 446.277 14.6803 447.156 L14.6803 429.795 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 432.874 Q51.1847 432.874 49.356 436.439 Q47.5504 439.98 47.5504 447.11 Q47.5504 454.216 49.356 457.781 Q51.1847 461.323 54.7958 461.323 Q58.43 461.323 60.2356 457.781 Q62.0643 454.216 62.0643 447.11 Q62.0643 439.98 60.2356 436.439 Q58.43 432.874 54.7958 432.874 M54.7958 429.17 Q60.6059 429.17 63.6615 433.777 Q66.7402 438.36 66.7402 447.11 Q66.7402 455.837 63.6615 460.443 Q60.6059 465.027 54.7958 465.027 Q48.9856 465.027 45.9069 460.443 Q42.8514 455.837 42.8514 447.11 Q42.8514 438.36 45.9069 433.777 Q48.9856 429.17 54.7958 429.17 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-44.8796 116.866 L-37.2408 116.866 L-37.2408 90.5005 L-45.5509 92.1671 L-45.5509 87.9079 L-37.2871 86.2413 L-32.6112 86.2413 L-32.6112 116.866 L-24.9723 116.866 L-24.9723 120.801 L-44.8796 120.801 L-44.8796 116.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-5.52797 89.3199 Q-9.13907 89.3199 -10.9678 92.8847 Q-12.7733 96.4264 -12.7733 103.556 Q-12.7733 110.662 -10.9678 114.227 Q-9.13907 117.769 -5.52797 117.769 Q-1.89373 117.769 -0.0881881 114.227 Q1.74051 110.662 1.74051 103.556 Q1.74051 96.4264 -0.0881881 92.8847 Q-1.89373 89.3199 -5.52797 89.3199 M-5.52797 85.6163 Q0.28218 85.6163 3.33772 90.2227 Q6.41641 94.806 6.41641 103.556 Q6.41641 112.283 3.33772 116.889 Q0.28218 121.473 -5.52797 121.473 Q-11.3381 121.473 -14.4168 116.889 Q-17.4724 112.283 -17.4724 103.556 Q-17.4724 94.806 -14.4168 90.2227 Q-11.3381 85.6163 -5.52797 85.6163 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M24.6339 89.3199 Q21.0228 89.3199 19.1941 92.8847 Q17.3886 96.4264 17.3886 103.556 Q17.3886 110.662 19.1941 114.227 Q21.0228 117.769 24.6339 117.769 Q28.2681 117.769 30.0737 114.227 Q31.9024 110.662 31.9024 103.556 Q31.9024 96.4264 30.0737 92.8847 Q28.2681 89.3199 24.6339 89.3199 M24.6339 85.6163 Q30.4441 85.6163 33.4996 90.2227 Q36.5783 94.806 36.5783 103.556 Q36.5783 112.283 33.4996 116.889 Q30.4441 121.473 24.6339 121.473 Q18.8237 121.473 15.7451 116.889 Q12.6895 112.283 12.6895 103.556 Q12.6895 94.806 15.7451 90.2227 Q18.8237 85.6163 24.6339 85.6163 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 89.3199 Q51.1847 89.3199 49.356 92.8847 Q47.5504 96.4264 47.5504 103.556 Q47.5504 110.662 49.356 114.227 Q51.1847 117.769 54.7958 117.769 Q58.43 117.769 60.2356 114.227 Q62.0643 110.662 62.0643 103.556 Q62.0643 96.4264 60.2356 92.8847 Q58.43 89.3199 54.7958 89.3199 M54.7958 85.6163 Q60.6059 85.6163 63.6615 90.2227 Q66.7402 94.806 66.7402 103.556 Q66.7402 112.283 63.6615 116.889 Q60.6059 121.473 54.7958 121.473 Q48.9856 121.473 45.9069 116.889 Q42.8514 112.283 42.8514 103.556 Q42.8514 94.806 45.9069 90.2227 Q48.9856 85.6163 54.7958 85.6163 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-117.323 825.841 L-95.8069 825.841 L-95.8069 831.697 L-117.132 831.697 Q-122.193 831.697 -124.707 833.671 Q-127.222 835.644 -127.222 839.591 Q-127.222 844.333 -124.198 847.07 Q-121.174 849.808 -115.954 849.808 L-95.8069 849.808 L-95.8069 855.696 L-131.455 855.696 L-131.455 849.808 L-125.917 849.808 Q-129.131 847.707 -130.723 844.874 Q-132.314 842.01 -132.314 838.286 Q-132.314 832.143 -128.495 828.992 Q-124.707 825.841 -117.323 825.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-127.349 800.346 Q-127.349 805.057 -123.657 807.794 Q-119.997 810.531 -113.599 810.531 Q-107.202 810.531 -103.509 807.826 Q-99.8491 805.089 -99.8491 800.346 Q-99.8491 795.667 -103.541 792.93 Q-107.233 790.193 -113.599 790.193 Q-119.933 790.193 -123.625 792.93 Q-127.349 795.667 -127.349 800.346 M-132.314 800.346 Q-132.314 792.707 -127.349 788.347 Q-122.384 783.986 -113.599 783.986 Q-104.846 783.986 -99.8491 788.347 Q-94.8839 792.707 -94.8839 800.346 Q-94.8839 808.017 -99.8491 812.377 Q-104.846 816.706 -113.599 816.706 Q-122.384 816.706 -127.349 812.377 Q-132.314 808.017 -132.314 800.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-125.98 753.622 Q-126.553 754.609 -126.808 755.786 Q-127.094 756.932 -127.094 758.333 Q-127.094 763.298 -123.848 765.971 Q-120.633 768.613 -114.586 768.613 L-95.8069 768.613 L-95.8069 774.501 L-131.455 774.501 L-131.455 768.613 L-125.917 768.613 Q-129.163 766.767 -130.723 763.807 Q-132.314 760.847 -132.314 756.614 Q-132.314 756.009 -132.219 755.277 Q-132.155 754.545 -131.996 753.654 L-125.98 753.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-124.612 720.87 Q-128.558 718.674 -130.436 715.619 Q-132.314 712.563 -132.314 708.425 Q-132.314 702.855 -128.399 699.832 Q-124.516 696.808 -117.323 696.808 L-95.8069 696.808 L-95.8069 702.696 L-117.132 702.696 Q-122.256 702.696 -124.739 704.51 Q-127.222 706.325 -127.222 710.049 Q-127.222 714.6 -124.198 717.242 Q-121.174 719.884 -115.954 719.884 L-95.8069 719.884 L-95.8069 725.772 L-117.132 725.772 Q-122.288 725.772 -124.739 727.586 Q-127.222 729.4 -127.222 733.188 Q-127.222 737.676 -124.166 740.318 Q-121.142 742.959 -115.954 742.959 L-95.8069 742.959 L-95.8069 748.848 L-131.455 748.848 L-131.455 742.959 L-125.917 742.959 Q-129.195 740.954 -130.755 738.153 Q-132.314 735.352 -132.314 731.501 Q-132.314 727.618 -130.341 724.913 Q-128.367 722.175 -124.612 720.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-2147.28,103.521 4602.77,103.521 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1464 167.128,1462.52 167.835,1462.38 168.543,1462.19 169.251,1461.89 169.959,1461.45 170.667,1459.58 171.374,1459.05 172.082,1458.39 172.79,1457.68 173.498,1456.85 174.206,1454.53 174.913,1452.17 175.621,1451.14 176.329,1449.96 177.037,1448.66 177.744,1447.21 178.452,1445.62 179.16,1443.88 179.868,1441.99 180.576,1439.94 181.283,1437.75 181.991,1433.98 182.699,1430.06 183.407,1427.37 184.115,1424.47 184.822,1421.4 185.53,1418.09 186.238,1414.5 186.946,1410.7 187.653,1406.7 188.361,1402.42 189.069,1397.81 189.777,1390.29 190.485,1385.21 191.192,1378.38 191.9,1372.63 192.608,1365.24 193.316,1357.6 194.024,1349.6 194.731,1341.03 195.439,1333.66 196.147,1325.89 196.855,1317.83 197.563,1309.44 198.27,1300.86 198.978,1291.99 199.686,1275.86 200.394,1266.41 201.101,1256.69 201.809,1245.28 202.517,1232.3 203.225,1220.23 203.933,1208.14 204.64,1195.74 205.348,1183.11 206.056,1170.38 206.764,1158.67 207.472,1144.11 208.179,1129.56 208.887,1116.07 209.595,1102.58 210.303,1088.94 211.01,1076.61 211.718,1063.99 212.426,1049.92 213.134,1034.26 213.842,1017.33 214.549,1003.37 215.257,987.805 215.965,973.417 216.673,956.368 217.381,940.961 218.088,926.894 218.796,908.758 219.504,893.61 220.212,878.738 220.92,863.882 221.627,849.262 222.335,831.961 223.043,820.246 223.751,805.784 224.458,792.73 225.166,777.117 225.874,761.539 226.582,747.398 227.29,735.213 227.997,725.645 228.705,714.671 229.413,700.738 230.121,687.23 230.829,675.101 231.536,663.051 232.244,648.337 232.952,634.033 233.66,621.447 234.368,608.85 235.075,597.914 235.783,588.533 236.491,578.177 237.199,569.127 237.906,556.032 238.614,544.524 239.322,535.958 240.03,525.901 240.738,517.523 241.445,507.881 242.153,496.543 242.861,488.603 243.569,480.574 244.277,471.427 244.984,460.929 245.692,452.173 246.4,444.774 247.108,436.008 247.815,426.273 248.523,419.606 249.231,408.846 249.939,402.46 250.647,394.891 251.354,390.094 252.062,381.411 252.77,375.359 253.478,365.64 254.186,357.481 254.893,352.567 255.601,345.984 256.309,341.058 257.017,334.748 257.725,330.09 258.432,325.553 259.14,320.942 259.848,313.537 260.556,307.869 261.263,305.096 261.971,300.78 262.679,296.698 263.387,288.633 264.095,284.745 264.802,280.863 265.51,275.708 266.218,268.109 266.926,263.787 267.634,256.689 268.341,253.877 269.049,249.936 269.757,244.68 270.465,243.753 271.172,238.64 271.88,237.497 272.588,236.752 273.296,235.687 274.004,231.834 274.711,228.125 275.419,225.894 276.127,222.212 276.835,216.033 277.543,212.881 278.25,210.117 278.958,207.118 279.666,202.653 280.374,201.001 281.082,198.441 281.789,195.718 282.497,194.227 283.205,187.701 283.913,185.543 284.62,184.814 285.328,183.937 286.036,183.364 286.744,182.447 287.452,180.165 288.159,179.293 288.867,178.488 289.575,178.938 290.283,176.534 290.991,175.488 291.698,173.508 292.406,171.396 293.114,173.328 293.822,170.73 294.529,168.694 295.237,167.738 295.945,165.663 296.653,164.63 297.361,159.657 298.068,157.9 298.776,156.049 299.484,155.7 300.192,155.322 300.9,153.634 301.607,150.696 302.315,150.779 303.023,149.393 303.731,146.79 304.439,144.342 305.146,144.4 305.854,144.517 306.562,144.779 307.27,144.893 307.977,142.256 308.685,143.87 309.393,141.09 310.101,141.215 310.809,141.254 311.516,141.047 312.224,139.625 312.932,139.87 313.64,138.564 314.348,135.951 315.055,139.302 315.763,134.952 316.471,134.343 317.179,133.351 317.886,133.944 318.594,134.199 319.302,132.72 320.01,132.991 320.718,135.963 321.425,135.707 322.133,131.769 322.841,131.932 323.549,128.057 324.257,128.556 324.964,131.934 325.672,132.215 326.38,131.075 327.088,132.655 327.796,131.365 328.503,130.192 329.211,130.184 329.919,128.996 330.627,129.225 331.334,131.761 332.042,134.5 332.75,135.109 333.458,136.348 334.166,134.395 334.873,134.278 335.581,136.719 336.289,136.069 336.997,134.185 337.705,133.796 338.412,129.362 339.12,128.883 339.828,130.478 340.536,129.214 341.243,126.166 341.951,125.944 342.659,124.503 343.367,123.239 344.075,124.444 344.782,124.323 345.49,125.716 346.198,122.742 346.906,122.727 347.614,124.181 348.321,126.589 349.029,126.625 349.737,126.47 350.445,126.332 351.153,128.832 351.86,128.654 352.568,126.766 353.276,125.047 353.984,123.234 354.691,122.882 355.399,122.665 356.107,122.381 356.815,124.929 357.523,123.246 358.23,121.908 358.938,120.321 359.646,116.073 360.354,116.548 361.062,116.498 361.769,116.592 362.477,116.673 363.185,113.87 363.893,114.149 364.601,114.629 365.308,113.727 366.016,113.895 366.724,112.896 367.432,111.702 368.139,109.119 368.847,110.799 369.555,109.889 370.263,110.566 370.971,111.301 371.678,109.196 372.386,111.336 373.094,111.772 373.802,112.054 374.51,112.555 375.217,110.393 375.925,110.891 376.633,111.717 377.341,112.14 378.048,108.541 378.756,110.123 379.464,110.702 380.172,111 380.88,111.247 381.587,111.556 382.295,112.028 383.003,112.258 383.711,112.741 384.419,116.014 385.126,114.707 385.834,112.35 386.542,111.399 387.25,111.73 387.958,113.616 388.665,111.228 389.373,111.754 390.081,113.368 390.789,113.643 391.496,115.24 392.204,112.489 392.912,106.147 393.62,108.577 394.328,109.262 395.035,106.845 395.743,108.719 396.451,110.6 397.159,109.192 397.867,108.227 398.574,108.818 399.282,110.578 399.99,110.709 400.698,111.035 401.405,108.653 402.113,106.609 402.821,105.892 403.529,105.223 404.237,105.916 404.944,104.994 405.652,103.134 406.36,109.493 407.068,111.267 407.776,110.167 408.483,110.44 409.191,111.799 409.899,112.088 410.607,114.993 411.315,115.267 412.022,116.617 412.73,115.157 413.438,112.636 414.146,108.903 414.853,110.694 415.561,109.466 416.269,109.904 416.977,107.838 417.685,108.158 418.392,109.97 419.1,108.845 419.808,110.793 420.516,109.621 421.224,109.97 421.931,113.109 422.639,114.542 423.347,114.811 424.055,115.987 424.762,115.74 425.47,115.393 426.178,115.3 426.886,113.674 427.594,112.351 428.301,112.312 429.009,112.52 429.717,115.223 430.425,109.524 431.133,109.885 431.84,110.069 432.548,107.628 433.256,109.339 433.964,109.787 434.672,105.843 435.379,106.464 436.087,106.565 436.795,107.138 437.503,107.384 438.21,105.342 438.918,105.688 439.626,106.661 440.334,105.636 441.042,104.562 441.749,103.935 442.457,104.258 443.165,102.356 443.873,103.127 444.581,103.902 445.288,103.227 445.996,101.112 446.704,103.313 447.412,106.896 448.119,108.553 448.827,111.576 449.535,111.698 450.243,113.363 450.951,113.275 451.658,113.045 452.366,114.561 453.074,114.548 453.782,110.141 454.49,108.926 455.197,110.425 455.905,107.767 456.613,110.926 457.321,112.242 458.029,111.027 458.736,108.287 459.444,108.788 460.152,110.121 460.86,108.932 461.567,108.956 462.275,110.444 462.983,109.126 463.691,110.657 464.399,110.654 465.106,110.54 465.814,111.945 466.522,111.706 467.23,111.762 467.938,113.304 468.645,111.623 469.353,111.798 470.061,111.572 470.769,107.453 471.476,107.763 472.184,107.643 472.892,107.75 473.6,106.569 474.308,108.406 475.015,108.645 475.723,111.388 476.431,112.675 477.139,113.506 477.847,115.951 478.554,115.45 479.262,115.139 479.97,114.514 480.678,114.133 481.386,112.614 482.093,113.792 482.801,113.483 483.509,111.75 484.217,108.755 484.924,108.627 485.632,108.514 486.34,108.588 487.048,107.216 487.756,108.602 488.463,108.518 489.171,112.509 489.879,110.845 490.587,111.949 491.295,114.31 492.002,113.727 492.71,110.511 493.418,111.722 494.126,111.23 494.834,110.705 495.541,107.77 496.249,104.807 496.957,105.922 497.665,107.258 498.372,106.989 499.08,108.234 499.788,108.115 500.496,109.261 501.204,109.064 501.911,110.476 502.619,111.506 503.327,109.535 504.035,110.445 504.743,107.405 505.45,106.161 506.158,103.589 506.866,104.171 507.574,104.479 508.281,107.288 508.989,104.566 509.697,103.625 510.405,102.489 511.113,102.68 511.82,103.163 512.528,103.245 513.236,103.522 513.944,107.625 514.652,107.841 515.359,107.768 516.067,109.074 516.775,110.442 517.483,108.807 518.191,106 518.898,104.408 519.606,107.339 520.314,105.748 521.022,107.364 521.729,105.995 522.437,106.105 523.145,108.883 523.853,105.867 524.561,104.383 525.268,103.117 525.976,103.387 526.684,102.235 527.392,102.728 528.1,107.056 528.807,101.741 529.515,99.3613 530.223,98.2168 530.931,97.616 531.638,99.8425 532.346,100.374 533.054,99.5043 533.762,100.293 534.47,95.3808 535.177,96.1456 535.885,96.9641 536.593,93.6641 537.301,91.7873 538.009,95.63 538.716,96.5419 539.424,97.1941 540.132,100.839 540.84,101.587 541.548,103.071 542.255,104.967 542.963,105.259 543.671,105.363 544.379,104.07 545.086,108.41 545.794,105.569 546.502,105.801 547.21,105.837 547.918,107.305 548.625,106.38 549.333,109.536 550.041,110.951 550.749,110.738 551.457,111.786 552.164,111.363 552.872,110.899 553.58,107.602 554.288,109.076 554.995,109.062 555.703,107.71 556.411,107.543 557.119,106.299 557.827,103.54 558.534,108.313 559.242,105.485 559.95,107.044 560.658,106.965 561.366,109.639 562.073,110.688 562.781,109.122 563.489,107.486 564.197,104.405 564.905,104.36 565.612,103.411 566.32,104.869 567.028,106.367 567.736,106.724 568.443,108.031 569.151,112.096 569.859,111.477 570.567,111.118 571.275,109.35 571.982,109.191 572.69,107.249 573.398,103.223 574.106,104.63 574.814,104.633 575.521,104.419 576.229,103.14 576.937,102.334 577.645,105.506 578.352,107.03 579.06,109.684 579.768,109.336 580.476,108.848 581.184,109.889 581.891,109.587 582.599,108.225 583.307,108.224 584.015,107.96 584.723,107.879 585.43,106.213 586.138,103.514 586.846,100.899 587.554,101.371 588.262,101.72 588.969,102.052 589.677,103.837 590.385,102.64 591.093,102.871 591.8,103.259 592.508,106.135 593.216,106.167 593.924,106.248 594.632,106.09 595.339,105.975 596.047,103.474 596.755,106.325 597.463,107.383 598.171,107.334 598.878,107.239 599.586,105.865 600.294,109.8 601.002,112.33 601.71,108.931 602.417,110.058 603.125,109.964 603.833,106.088 604.541,104.607 605.248,104.492 605.956,100.256 606.664,100.682 607.372,102.129 608.08,103.937 608.787,102.373 609.495,102.877 610.203,102.929 610.911,104.343 611.619,101.83 612.326,102.06 613.034,102.263 613.742,102.364 614.45,100.996 615.157,98.3059 615.865,99.6773 616.573,97.3179 617.281,96.3159 617.989,94.4462 618.696,95.3879 619.404,98.6467 620.112,97.5936 620.82,102.151 621.528,106.354 622.235,106.427 622.943,107.87 623.651,107.283 624.359,105.617 625.067,105.727 625.774,107.244 626.482,109.883 627.19,108.368 627.898,106.615 628.605,107.927 629.313,107.866 630.021,106.192 630.729,107.541 631.437,105.92 632.144,107.283 632.852,110.028 633.56,109.819 634.268,110.327 634.976,110.205 635.683,110.323 636.391,109.848 637.099,110.934 637.807,110.3 638.514,114.335 639.222,112.103 639.93,110.186 640.638,108.621 641.346,109.649 642.053,109.616 642.761,110.655 643.469,110.301 644.177,108.678 644.885,109.743 645.592,107.568 646.3,108.548 647.008,112.407 647.716,111.739 648.424,113.824 649.131,111.919 649.839,111.236 650.547,108.973 651.255,110.152 651.962,108.544 652.67,108.166 653.378,106.294 654.086,103.571 654.794,106.218 655.501,107.523 656.209,108.532 656.917,108.183 657.625,107.594 658.333,104.433 659.04,104.064 659.748,103.89 660.456,103.821 661.164,102.393 661.871,101.22 662.579,100.051 663.287,96.1188 663.995,96.5966 664.703,97.1647 665.41,96.2368 666.118,99.3515 666.826,98.511 667.534,97.2624 668.242,99.1799 668.949,100.963 669.657,99.4679 670.365,98.0066 671.073,97.0235 671.781,100.073 672.488,103.404 673.196,103.455 673.904,100.683 674.612,103.478 675.319,102.162 676.027,99.6109 676.735,101.166 677.443,100.09 678.151,100.451 678.858,102.022 679.566,102.407 680.274,101.235 680.982,102.71 681.69,105.688 682.397,106.856 683.105,109.246 683.813,108.65 684.521,105.727 685.228,106.88 685.936,104.144 686.644,102.869 687.352,102.964 688.06,104.625 688.767,108.82 689.475,104.357 690.183,104.393 690.891,102.929 691.599,103.288 692.306,100.764 693.014,101.045 693.722,101.186 694.43,101.485 695.138,105.625 695.845,102.564 696.553,102.866 697.261,105.721 697.969,103.134 698.676,103.258 699.384,103.276 700.092,106.008 700.8,105.886 701.508,104.468 702.215,102.99 702.923,104.634 703.631,105.884 704.339,103.044 705.047,100.309 705.754,103.287 706.462,100.599 707.17,104.984 707.878,104.881 708.585,103.375 709.293,106.032 710.001,105.871 710.709,105.747 711.417,107.305 712.124,107.045 712.832,104.115 713.54,102.467 714.248,100.03 714.956,104.654 715.663,104.691 716.371,104.642 717.079,104.558 717.787,104.736 718.495,107.444 719.202,104.441 719.91,104.573 720.618,103.445 721.326,102.134 722.033,103.472 722.741,102.347 723.449,100.907 724.157,99.3723 724.865,99.6426 725.572,101.198 726.28,99.9716 726.988,100.391 727.696,97.9323 728.404,99.5267 729.111,99.9536 729.819,98.9962 730.527,99.4846 731.235,101.045 731.943,99.7188 732.65,97.5285 733.358,96.6934 734.066,98.9729 734.774,98.0708 735.481,98.7079 736.189,100.657 736.897,95.6081 737.605,96.162 738.313,98.2968 739.02,100.15 739.728,102.02 740.436,109.29 741.144,106.027 741.852,107.12 742.559,105.739 743.267,105.78 743.975,107.1 744.683,107.386 745.39,107.071 746.098,105.507 746.806,108.338 747.514,104.05 748.222,104.159 748.929,103.175 749.637,104.876 750.345,103.557 751.053,103.21 751.761,106.347 752.468,106.386 753.176,107.769 753.884,106.123 754.592,104.339 755.3,105.986 756.007,107.036 756.715,109.601 757.423,109.174 758.131,112.802 758.838,110.825 759.546,111.7 760.254,111.302 760.962,108.339 761.67,109.68 762.377,107.982 763.085,107.781 763.793,107.789 764.501,105.84 765.209,108.709 765.916,107.121 766.624,108.208 767.332,109.209 768.04,109.056 768.747,106.214 769.455,105.885 770.163,105.705 770.871,107.012 771.579,103.951 772.286,102.756 772.994,101.375 773.702,101.662 774.41,101.796 775.118,100.656 775.825,101.976 776.533,104.703 777.241,103.498 777.949,100.775 778.657,99.6379 779.364,101.035 780.072,101.162 780.78,101.711 781.488,104.559 782.195,103.51 782.903,100.982 783.611,101.639 784.319,101.778 785.027,104.713 785.734,104.868 786.442,104.95 787.15,105.027 787.858,106.393 788.566,106.189 789.273,108.818 789.981,106.85 790.689,106.822 791.397,106.513 792.104,106.236 792.812,107.725 793.52,107.328 794.228,107.041 794.936,105.376 795.643,100.877 796.351,102.48 797.059,101.304 797.767,104.083 798.475,104.051 799.182,103.798 799.89,102.442 800.598,102.596 801.306,106.878 802.014,100.504 802.721,103.435 803.429,100.894 804.137,98.4779 804.845,97.8818 805.552,95.6324 806.26,94.8232 806.968,92.8061 807.676,93.4688 808.384,94.0313 809.091,96.0606 809.799,95.3683 810.507,94.8254 811.215,96.6957 811.923,98.9436 812.63,101.91 813.338,102.171 814.046,102.398 814.754,105.085 815.461,103.619 816.169,98.1045 816.877,96.1141 817.585,95.1433 818.293,97.053 819,96.1448 819.708,97.9783 820.416,97.2241 821.124,96.3374 821.832,97.1198 822.539,97.844 823.247,102.455 823.955,101.126 824.663,100.028 825.371,97.6431 826.078,96.7119 826.786,97.2421 827.494,99.2349 828.202,102.657 828.909,100.144 829.617,100.488 830.325,102.119 831.033,99.953 831.741,99.1534 832.448,101.118 833.156,101.457 833.864,103.16 834.572,104.762 835.28,103.843 835.987,106.499 836.695,107.88 837.403,107.884 838.111,109.321 838.818,109.181 839.526,111.861 840.234,111.423 840.942,109.684 841.65,112.174 842.357,113.017 843.065,112.872 843.773,113.827 844.481,110.79 845.189,112.894 845.896,112.592 846.604,114.416 847.312,116.599 848.02,114.435 848.728,115.068 849.435,113.011 850.143,111.098 850.851,110.796 851.559,113.165 852.266,115.099 852.974,114.302 853.682,116.415 854.39,111.362 855.098,109.177 855.805,110.347 856.513,108.409 857.221,109.498 857.929,107.744 858.637,108.765 859.344,108.608 860.052,109.324 860.76,110.032 861.468,106.751 862.176,106.552 862.883,104.905 863.591,103.28 864.299,104.489 865.007,107.129 865.714,106.473 866.422,104.873 867.13,107.018 867.838,106.416 868.546,105.997 869.253,105.796 869.961,105.402 870.669,104.205 871.377,104.229 872.085,105.307 872.792,103.957 873.5,106.216 874.208,107.326 874.916,104.522 875.623,103.097 876.331,99.0379 877.039,100.674 877.747,99.625 878.455,102.657 879.162,102.327 879.87,103.548 880.578,103.233 881.286,103.278 881.994,99.0605 882.701,99.0942 883.409,100.467 884.117,100.312 884.825,97.8386 885.533,98.2097 886.24,95.7576 886.948,96.1163 887.656,95.2607 888.364,95.6144 889.071,96.452 889.779,96.8334 890.487,100.101 891.195,100.153 891.903,97.7456 892.61,98.2481 893.318,98.7043 894.026,98.932 894.734,99.2613 895.442,99.5279 896.149,102.879 896.857,107.218 897.565,107.24 898.273,106.932 898.98,106.873 899.688,105.422 900.396,103.827 901.104,106.819 901.812,106.715 902.519,107.839 903.227,108.992 903.935,108.719 904.643,108.163 905.351,107.816 906.058,108.907 906.766,108.348 907.474,111.912 908.182,110.044 908.89,109.429 909.597,108.767 910.305,106.986 911.013,104.903 911.721,100.359 912.428,99.4079 913.136,98.4543 913.844,97.3192 914.552,97.6983 915.26,97.9187 915.967,98.3089 916.675,101.285 917.383,101.434 918.091,103.118 918.799,103.144 919.506,103.153 920.214,101.837 920.922,100.511 921.63,99.2963 922.337,98.3342 923.045,99.7595 923.753,102.733 924.461,101.474 925.169,101.625 925.876,103.15 926.584,104.573 927.292,104.625 928,102.102 928.708,102.587 929.415,102.666 930.123,102.761 930.831,101.474 931.539,103.285 932.247,104.785 932.954,103.566 933.662,104.98 934.37,106.152 935.078,105.78 935.785,104.35 936.493,106.688 937.201,108.038 937.909,106.272 938.617,108.956 939.324,110.217 940.032,109.546 940.74,110.475 941.448,109.886 942.156,109.455 942.863,108.733 943.571,111.287 944.279,110.746 944.987,111.517 945.694,112.396 946.402,108.677 947.11,106.873 947.818,106.677 948.526,105.125 949.233,104.966 949.941,101.995 950.649,103.614 951.357,103.455 952.065,103.313 952.772,106.827 953.48,107.868 954.188,105.996 954.896,105.621 955.604,106.865 956.311,105.198 957.019,107.905 957.727,108.621 958.435,109.683 959.142,109.422 959.85,107.361 960.558,107.149 961.266,106.734 961.974,107.785 962.681,107.019 963.389,105.375 964.097,105.11 964.805,107.526 965.513,104.365 966.22,104.171 966.928,103.621 967.636,103.334 968.344,101.978 969.051,98.0802 969.759,93.0289 970.467,92.1599 971.175,91.6691 971.883,93.7269 972.59,94.4466 973.298,95.1495 974.006,94.2645 974.714,93.5673 975.422,93.1665 976.129,93.6178 976.837,95.6219 977.545,96.009 978.253,97.8979 978.961,98.5077 979.668,93.5295 980.376,94.3506 981.084,95.0911 981.792,95.8506 982.499,98.991 983.207,99.2979 983.915,97.0469 984.623,95.0218 985.331,95.8292 986.038,96.614 986.746,95.8928 987.454,94.8133 988.162,95.439 988.87,96.046 989.577,99.2502 990.285,98.4224 990.993,97.6078 991.701,99.4092 992.409,99.9202 993.116,103.163 993.824,103.504 994.532,107.725 995.24,106.569 995.947,107.946 996.655,110.875 997.363,107.718 998.071,106.252 998.779,104.802 999.486,104.992 1000.19,105.023 1000.9,104.994 1001.61,106.492 1002.32,108.654 1003.03,109.593 1003.73,110.552 1004.44,113.129 1005.15,112.598 1005.86,111.825 1006.56,111.175 1007.27,109.051 1007.98,109.078 1008.69,109.713 1009.4,109.425 1010.1,109.096 1010.81,107.462 1011.52,107.294 1012.23,108.391 1012.93,106.609 1013.64,109.125 1014.35,110.103 1015.06,108.109 1015.77,107.89 1016.47,104.935 1017.18,99.522 1017.89,97.1666 1018.6,101.638 1019.3,101.635 1020.01,102.995 1020.72,93.5652 1021.43,91.6974 1022.14,93.7053 1022.84,95.7077 1023.55,96.2014 1024.26,95.2697 1024.97,95.8856 1025.67,93.9892 1026.38,97.5579 1027.09,99.2741 1027.8,98.2547 1028.51,98.6737 1029.21,99.0929 1029.92,101.169 1030.63,101.262 1031.34,102.695 1032.04,102.92 1032.75,104.296 1033.46,105.611 1034.17,105.694 1034.88,109.871 1035.58,109.48 1036.29,109.399 1037,109.044 1037.71,107.422 1038.41,108.645 1039.12,109.848 1039.83,109.433 1040.54,110.395 1041.25,111.165 1041.95,109.269 1042.66,112.916 1043.37,110.937 1044.08,105.08 1044.78,106.246 1045.49,106.003 1046.2,106.136 1046.91,104.949 1047.62,105.141 1048.32,105.161 1049.03,107.765 1049.74,108.989 1050.45,108.645 1051.15,106.996 1051.86,103.871 1052.57,105.096 1053.28,106.332 1053.99,104.851 1054.69,106.377 1055.4,109.187 1056.11,109.971 1056.82,109.479 1057.53,107.677 1058.23,104.544 1058.94,104.405 1059.65,104.044 1060.36,102.448 1061.06,101.058 1061.77,99.9828 1062.48,101.66 1063.19,101.935 1063.9,103.253 1064.6,105.845 1065.31,105.474 1066.02,102.832 1066.73,104.52 1067.43,101.942 1068.14,99.6233 1068.85,98.6857 1069.56,99.0808 1070.27,98.1497 1070.97,95.8141 1071.68,92.4137 1072.39,94.2922 1073.1,94.8957 1073.8,96.6987 1074.51,94.2866 1075.22,97.5233 1075.93,99.1947 1076.64,102.532 1077.34,102.434 1078.05,104.001 1078.76,102.618 1079.47,105.495 1080.17,102.521 1080.88,102.41 1081.59,99.8011 1082.3,103.942 1083.01,102.695 1083.71,104.407 1084.42,103.291 1085.13,99.1378 1085.84,102.305 1086.54,100.753 1087.25,102.356 1087.96,103.801 1088.67,102.745 1089.38,102.736 1090.08,104.417 1090.79,103.082 1091.5,100.547 1092.21,96.7821 1092.91,97.2736 1093.62,95.283 1094.33,95.9804 1095.04,96.466 1095.75,95.7122 1096.45,96.261 1097.16,97.045 1097.87,94.6421 1098.58,94.1197 1099.28,94.9824 1099.99,92.8928 1100.7,91.1776 1101.41,96.5348 1102.12,96.0704 1102.82,99.438 1103.53,99.71 1104.24,102.942 1104.95,102.902 1105.65,107.187 1106.36,107.09 1107.07,107.066 1107.78,108.471 1108.49,106.903 1109.19,107.996 1109.9,107.792 1110.61,113.184 1111.32,115.582 1112.02,110.697 1112.73,108.984 1113.44,108.762 1114.15,108.449 1114.86,106.972 1115.56,108.503 1116.27,109.085 1116.98,109.039 1117.69,110.145 1118.39,105.747 1119.1,105.493 1119.81,105.274 1120.52,108.032 1121.23,107.987 1121.93,109.182 1122.64,107.823 1123.35,110.327 1124.06,112.397 1124.76,111.842 1125.47,111.419 1126.18,109.36 1126.89,109.153 1127.6,108.586 1128.3,108.063 1129.01,110.598 1129.72,108.616 1130.43,105.556 1131.13,103.827 1131.84,105.185 1132.55,105.248 1133.26,105.078 1133.97,105.047 1134.67,103.596 1135.38,106.361 1136.09,106.109 1136.8,107.391 1137.51,109.768 1138.21,109.252 1138.92,108.931 1139.63,108.485 1140.34,107.923 1141.04,107.613 1141.75,107.13 1142.46,102.913 1143.17,102.608 1143.88,101.151 1144.58,101.047 1145.29,101.132 1146,101.164 1146.71,101.367 1147.41,98.802 1148.12,99.0009 1148.83,99.1358 1149.54,100.908 1150.25,99.8441 1150.95,98.815 1151.66,99.0718 1152.37,98.2673 1153.08,99.6643 1153.78,99.8087 1154.49,100.055 1155.2,99.304 1155.91,99.322 1156.62,99.7152 1157.32,99.8596 1158.03,100.17 1158.74,96.4575 1159.45,98.2741 1160.15,97.369 1160.86,96.5015 1161.57,101.033 1162.28,98.4012 1162.99,93.2476 1163.69,95.2704 1164.4,96.2816 1165.11,96.9896 1165.82,96.0881 1166.52,96.7365 1167.23,100 1167.94,101.722 1168.65,99.1063 1169.36,101.063 1170.06,102.675 1170.77,102.751 1171.48,103.03 1172.19,105.933 1172.89,104.329 1173.6,102.975 1174.31,108.621 1175.02,107.067 1175.73,103.043 1176.43,101.995 1177.14,101.062 1177.85,105.463 1178.56,105.572 1179.26,105.593 1179.97,107.24 1180.68,107.173 1181.39,110.088 1182.1,112.541 1182.8,110.951 1183.51,110.264 1184.22,109.757 1184.93,109.135 1185.63,103.512 1186.34,105.337 1187.05,107.925 1187.76,106.307 1188.47,107.807 1189.17,107.586 1189.88,108.73 1190.59,105.59 1191.3,105.227 1192,106.453 1192.71,107.477 1193.42,110.226 1194.13,111.138 1194.84,110.359 1195.54,109.559 1196.25,106.255 1196.96,104.559 1197.67,105.901 1198.37,105.571 1199.08,103.956 1199.79,102.691 1200.5,105.416 1201.21,103.726 1201.91,100.867 1202.62,100.87 1203.33,99.4388 1204.04,95.2851 1204.74,95.679 1205.45,97.6406 1206.16,96.9229 1206.87,97.386 1207.58,100.29 1208.28,100.667 1208.99,102.481 1209.7,102.44 1210.41,102.482 1211.12,103.778 1211.82,103.614 1212.53,102.165 1213.24,102.361 1213.95,103.873 1214.65,102.352 1215.36,99.5239 1216.07,99.6709 1216.78,104.069 1217.49,104.116 1218.19,104.323 1218.9,103.198 1219.61,101.653 1220.32,106.005 1221.02,105.757 1221.73,104.481 1222.44,103.218 1223.15,103.26 1223.86,104.672 1224.56,106.227 1225.27,108.7 1225.98,108.088 1226.69,108.849 1227.39,104.465 1228.1,105.617 1228.81,104.038 1229.52,104.273 1230.23,104.185 1230.93,101.865 1231.64,102.084 1232.35,102.131 1233.06,102.561 1233.76,105.175 1234.47,106.457 1235.18,106.382 1235.89,110.374 1236.6,108.811 1237.3,105.726 1238.01,104.515 1238.72,100.206 1239.43,99.3591 1240.13,98.2108 1240.84,100.171 1241.55,103.386 1242.26,103.604 1242.97,103.646 1243.67,104.807 1244.38,104.704 1245.09,104.77 1245.8,104.579 1246.5,105.793 1247.21,108.708 1247.92,113.816 1248.63,112.959 1249.34,113.763 1250.04,114.407 1250.75,111.987 1251.46,114.085 1252.17,117.294 1252.87,117.363 1253.58,116.306 1254.29,115.213 1255,118.429 1255.71,113.121 1256.41,115.036 1257.12,113.834 1257.83,112.795 1258.54,111.977 1259.24,111.221 1259.95,108.887 1260.66,109.614 1261.37,110.713 1262.08,111.36 1262.78,110.535 1263.49,109.794 1264.2,107.766 1264.91,105.795 1265.61,101.103 1266.32,101.127 1267.03,102.409 1267.74,105.228 1268.45,106.222 1269.15,105.624 1269.86,103.786 1270.57,105.019 1271.28,105.924 1271.98,107.125 1272.69,106.519 1273.4,105.823 1274.11,108.096 1274.82,107.36 1275.52,105.686 1276.23,106.708 1276.94,106.524 1277.65,105.825 1278.35,104.042 1279.06,102.5 1279.77,102.122 1280.48,103.214 1281.19,101.624 1281.89,101.406 1282.6,101.046 1283.31,101.234 1284.02,99.7286 1284.72,97.1659 1285.43,94.6138 1286.14,93.648 1286.85,94.5154 1287.56,95.0053 1288.26,93.7608 1288.97,91.4858 1289.68,90.8193 1290.39,91.3612 1291.1,94.8148 1291.8,95.0241 1292.51,95.8388 1293.22,96.1969 1293.93,95.6054 1294.63,96.0249 1295.34,90.8692 1296.05,91.6503 1296.76,90.9782 1297.47,91.6903 1298.17,88.5087 1298.88,89.5947 1299.59,90.595 1300.3,91.3452 1301,91.2078 1301.71,89.3887 1302.42,90.4952 1303.13,95.4764 1303.84,95.8565 1304.54,93.6646 1305.25,97.3259 1305.96,100.583 1306.67,103.544 1307.37,103.629 1308.08,102.65 1308.79,101.508 1309.5,103.173 1310.21,104.657 1310.91,106.029 1311.62,103.178 1312.33,104.905 1313.04,106.169 1313.74,100.871 1314.45,101.119 1315.16,99.8438 1315.87,101.456 1316.58,103.036 1317.28,104.777 1317.99,102.078 1318.7,103.836 1319.41,105.35 1320.11,102.855 1320.82,104.536 1321.53,104.334 1322.24,101.554 1322.95,102.941 1323.65,101.72 1324.36,102.054 1325.07,103.961 1325.78,102.773 1326.48,101.542 1327.19,104.467 1327.9,107.141 1328.61,109.506 1329.32,110.679 1330.02,110.103 1330.73,109.542 1331.44,107.884 1332.15,107.625 1332.85,107.37 1333.56,109.923 1334.27,109.586 1334.98,107.785 1335.69,107.218 1336.39,105.651 1337.1,105.494 1337.81,105.636 1338.52,108.183 1339.22,106.521 1339.93,106.142 1340.64,101.844 1341.35,103.334 1342.06,104.857 1342.76,102.468 1343.47,101.149 1344.18,102.624 1344.89,102.671 1345.59,102.838 1346.3,104.509 1347.01,105.773 1347.72,104.402 1348.43,100.357 1349.13,100.665 1349.84,102.135 1350.55,100.899 1351.26,99.6878 1351.96,102.55 1352.67,102.648 1353.38,101.557 1354.09,102.821 1354.8,106.876 1355.5,108.062 1356.21,106.402 1356.92,106.173 1357.63,107.458 1358.33,107.128 1359.04,107.06 1359.75,102.706 1360.46,101.293 1361.17,102.861 1361.87,104.497 1362.58,104.39 1363.29,105.65 1364,108.593 1364.71,108.438 1365.41,109.495 1366.12,107.602 1366.83,106.074 1367.54,104.784 1368.24,104.769 1368.95,101.671 1369.66,104.491 1370.37,106.941 1371.08,109.345 1371.78,106.156 1372.49,107.245 1373.2,105.645 1373.91,104.201 1374.61,105.185 1375.32,107.834 1376.03,107.906 1376.74,111.64 1377.45,106.878 1378.15,108.098 1378.86,106.45 1379.57,107.189 1380.28,106.587 1380.98,107.33 1381.69,107.11 1382.4,106.958 1383.11,108.205 1383.82,107.638 1384.52,107.348 1385.23,105.49 1385.94,105.487 1386.65,104.162 1387.35,105.059 1388.06,103.194 1388.77,102.772 1389.48,102.805 1390.19,102.684 1390.89,102.963 1391.6,101.425 1392.31,101.552 1393.02,100.001 1393.72,99.9903 1394.43,102.807 1395.14,104.014 1395.85,105.277 1396.56,106.733 1397.26,107.778 1397.97,107.128 1398.68,105.454 1399.39,105.303 1400.09,103.868 1400.8,102.456 1401.51,102.283 1402.22,103.768 1402.93,104.82 1403.63,106.075 1404.34,107.097 1405.05,106.569 1405.76,105.641 1406.46,102.907 1407.17,105.521 1407.88,105.486 1408.59,103.931 1409.3,103.565 1410,103.045 1410.71,103.031 1411.42,103.013 1412.13,103.02 1412.83,102.891 1413.54,102.793 1414.25,102.664 1414.96,99.623 1415.67,98.4533 1416.37,97.2841 1417.08,96.0433 1417.79,97.8692 1418.5,99.3844 1419.2,98.4082 1419.91,101.259 1420.62,96.868 1421.33,95.8801 1422.04,93.5684 1422.74,91.5229 1423.45,92.253 1424.16,94.5939 1424.87,94.7606 1425.57,96.8454 1426.28,97.1132 1426.99,101.648 1427.7,105.987 1428.41,104.293 1429.11,101.466 1429.82,97.659 1430.53,96.7881 1431.24,97.4661 1431.94,98.0926 1432.65,93.0058 1433.36,92.4712 1434.07,94.6391 1434.78,96.6266 1435.48,101.373 1436.19,102.882 1436.9,100.449 1437.61,102.207 1438.31,104.117 1439.02,104.154 1439.73,104.479 1440.44,102.931 1441.15,101.686 1441.85,99.234 1442.56,97.9707 1443.27,98.407 1443.98,97.7548 1444.69,98.081 1445.39,98.5115 1446.1,96.2934 1446.81,98.6539 1447.52,98.0153 1448.22,102.872 1448.93,101.843 1449.64,102.029 1450.35,102.167 1451.06,105.161 1451.76,105.289 1452.47,108.094 1453.18,109.035 1453.89,108.676 1454.59,108.581 1455.3,109.988 1456.01,112.61 1456.72,112.144 1457.43,110.54 1458.13,109.96 1458.84,112.729 1459.55,115.098 1460.26,114.347 1460.96,115.223 1461.67,113.024 1462.38,113.433 1463.09,114.049 1463.8,117.361 1464.5,114.939 1465.21,114.286 1465.92,113.568 1466.63,107.602 1467.33,107.418 1468.04,107.029 1468.75,106.818 1469.46,106.334 1470.17,101.73 1470.87,100.733 1471.58,97.8392 1472.29,99.4301 1473,97.3749 1473.7,99.2487 1474.41,96.8503 1475.12,97.455 1475.83,96.1605 1476.54,96.7195 1477.24,97.1888 1477.95,99.1564 1478.66,96.8374 1479.37,96.0741 1480.07,95.1144 1480.78,96.9818 1481.49,99.0099 1482.2,98.051 1482.91,98.3417 1483.61,100.085 1484.32,98.7123 1485.03,100.683 1485.74,101.138 1486.44,102.581 1487.15,102.649 1487.86,104.012 1488.57,102.479 1489.28,100.983 1489.98,102.601 1490.69,102.777 1491.4,103.024 1492.11,105.736 1492.81,105.934 1493.52,104.314 1494.23,104.335 1494.94,105.682 1495.65,104.122 1496.35,104.139 1497.06,102.8 1497.77,104.042 1498.48,106.543 1499.18,106.51 1499.89,107.613 1500.6,109.954 1501.31,111.04 1502.02,108.841 1502.72,106.983 1503.43,103.897 1504.14,105.311 1504.85,105.077 1505.55,103.735 1506.26,102.399 1506.97,102.707 1507.68,101.433 1508.39,101.781 1509.09,99.4094 1509.8,101.346 1510.51,100.291 1511.22,99.6371 1511.92,98.537 1512.63,97.7404 1513.34,91.3666 1514.05,92.1663 1514.76,93.0782 1515.46,97.0438 1516.17,97.9705 1516.88,94.3558 1517.59,96.1766 1518.3,97.9338 1519,94.1605 1519.71,96.3028 1520.42,97.0909 1521.13,98.893 1521.83,99.6901 1522.54,96.1776 1523.25,96.6015 1523.96,97.5244 1524.67,96.8807 1525.37,97.6812 1526.08,101.293 1526.79,101.382 1527.5,101.957 1528.2,103.653 1528.91,106.279 1529.62,105.207 1530.33,108.264 1531.04,107.029 1531.74,108.583 1532.45,105.657 1533.16,106.875 1533.87,112.412 1534.57,113.402 1535.28,111.11 1535.99,109.447 1536.7,112.15 1537.41,114.127 1538.11,113.144 1538.82,111.168 1539.53,111.934 1540.24,112.944 1540.94,113.524 1541.65,116.006 1542.36,113.773 1543.07,113.018 1543.78,116.583 1544.48,118.158 1545.19,116.867 1545.9,115.891 1546.61,114.755 1547.31,115.386 1548.02,116.118 1548.73,112.165 1549.44,108.841 1550.15,108.478 1550.85,108.235 1551.56,107.999 1552.27,104.935 1552.98,104.563 1553.68,104.144 1554.39,106.438 1555.1,104.97 1555.81,104.888 1556.52,104.782 1557.22,103.363 1557.93,103.636 1558.64,102.231 1559.35,100.743 1560.05,100.893 1560.76,98.4385 1561.47,97.0401 1562.18,97.5284 1562.89,100.681 1563.59,99.36 1564.3,99.6073 1565.01,99.8449 1565.72,99.9093 1566.42,101.336 1567.13,102.877 1567.84,104.201 1568.55,103.908 1569.26,103.699 1569.96,106.104 1570.67,104.333 1571.38,108.274 1572.09,106.5 1572.79,103.594 1573.5,102.089 1574.21,100.45 1574.92,99.2458 1575.63,100.694 1576.33,101.117 1577.04,98.6101 1577.75,98.8033 1578.46,101.53 1579.16,100.462 1579.87,97.9811 1580.58,98.5271 1581.29,100.48 1582,97.8415 1582.7,95.5048 1583.41,97.3716 1584.12,97.8408 1584.83,102.245 1585.53,101.152 1586.24,100.96 1586.95,98.213 1587.66,96.0618 1588.37,93.8862 1589.07,93.503 1589.78,93.8354 1590.49,98.5926 1591.2,99.2894 1591.9,99.4721 1592.61,102.493 1593.32,100.049 1594.03,100.648 1594.74,100.965 1595.44,99.7697 1596.15,99.9728 1596.86,98.8059 1597.57,97.793 1598.28,96.9616 1598.98,94.7563 1599.69,95.7526 1600.4,96.552 1601.11,101.508 1601.81,106.021 1602.52,106.152 1603.23,106.019 1603.94,107.503 1604.65,104.309 1605.35,104.291 1606.06,101.402 1606.77,104.537 1607.48,101.786 1608.18,101.762 1608.89,100.55 1609.6,102.405 1610.31,102.669 1611.02,101.523 1611.72,101.684 1612.43,101.931 1613.14,104.758 1613.85,104.8 1614.55,104.555 1615.26,104.488 1615.97,104.585 1616.68,103.395 1617.39,105.036 1618.09,105.082 1618.8,105.327 1619.51,105.408 1620.22,104.083 1620.92,100.183 1621.63,106.286 1622.34,107.607 1623.05,109.025 1623.76,108.965 1624.46,107.311 1625.17,106.904 1625.88,106.927 1626.59,106.737 1627.29,108.095 1628,107.868 1628.71,107.416 1629.42,107.033 1630.13,108.104 1630.83,107.979 1631.54,110.879 1632.25,113.392 1632.96,112.651 1633.66,113.203 1634.37,112.794 1635.08,114.654 1635.79,112.49 1636.5,113.37 1637.2,111.347 1637.91,112.583 1638.62,110.591 1639.33,109.775 1640.03,107.998 1640.74,107.809 1641.45,108.84 1642.16,109.624 1642.87,107.63 1643.57,107.033 1644.28,105.244 1644.99,106.156 1645.7,107.245 1646.4,104.26 1647.11,102.655 1647.82,105.101 1648.53,102.293 1649.24,103.628 1649.94,103.655 1650.65,103.538 1651.36,102.215 1652.07,104.752 1652.77,105.821 1653.48,106.841 1654.19,107.967 1654.9,108.888 1655.61,109.887 1656.31,107.743 1657.02,108.774 1657.73,108.388 1658.44,106.819 1659.14,104.912 1659.85,103.491 1660.56,100.923 1661.27,102.154 1661.98,102.031 1662.68,97.9064 1663.39,99.8038 1664.1,101.251 1664.81,101.481 1665.51,101.737 1666.22,100.46 1666.93,101.698 1667.64,104.444 1668.35,102.624 1669.05,101.19 1669.76,101.456 1670.47,102.861 1671.18,101.447 1671.89,99.7531 1672.59,101.147 1673.3,98.204 1674.01,101.059 1674.72,99.7719 1675.42,98.5958 1676.13,97.519 1676.84,101.678 1677.55,107.421 1678.26,108.081 1678.96,106.034 1679.67,107.253 1680.38,107.073 1681.09,106.642 1681.79,107.514 1682.5,107.152 1683.21,106.674 1683.92,104.648 1684.63,107.136 1685.33,105.443 1686.04,105.387 1686.75,105.232 1687.46,100.816 1688.16,99.789 1688.87,97.199 1689.58,97.5519 1690.29,98.9271 1691,98.9724 1691.7,100.653 1692.41,99.4448 1693.12,98.6911 1693.83,100.299 1694.53,100.721 1695.24,99.2537 1695.95,99.3226 1696.66,98.1501 1697.37,98.4383 1698.07,98.9207 1698.78,100.473 1699.49,104.91 1700.2,101.998 1700.9,102.032 1701.61,100.754 1702.32,104.881 1703.03,104.779 1703.74,104.482 1704.44,101.616 1705.15,101.805 1705.86,106.017 1706.57,104.604 1707.27,104.628 1707.98,104.343 1708.69,103.912 1709.4,105.2 1710.11,102.301 1710.81,100.948 1711.52,101.22 1712.23,104.208 1712.94,102.994 1713.64,101.343 1714.35,98.6839 1715.06,100.298 1715.77,96.3827 1716.48,98.0426 1717.18,94.1484 1717.89,97.7193 1718.6,99.5639 1719.31,98.4499 1720.01,100.164 1720.72,100.457 1721.43,101.916 1722.14,106.009 1722.85,106.059 1723.55,107.562 1724.26,108.519 1724.97,107.032 1725.68,106.668 1726.38,104.796 1727.09,104.849 1727.8,103.139 1728.51,103.281 1729.22,100.408 1729.92,100.523 1730.63,100.613 1731.34,100.977 1732.05,103.901 1732.75,101.38 1733.46,100.401 1734.17,98.9295 1734.88,100.668 1735.59,102.214 1736.29,100.965 1737,101.5 1737.71,101.615 1738.42,103.034 1739.12,101.872 1739.83,103.436 1740.54,103.686 1741.25,106.596 1741.96,109.136 1742.66,107.532 1743.37,107.15 1744.08,107.331 1744.79,108.536 1745.49,110.939 1746.2,110.478 1746.91,110.188 1747.62,109.377 1748.33,109.061 1749.03,108.556 1749.74,108.093 1750.45,107.792 1751.16,104.885 1751.87,104.891 1752.57,105.962 1753.28,103.077 1753.99,101.563 1754.7,100.274 1755.4,97.9264 1756.11,99.5969 1756.82,98.0832 1757.53,97.0351 1758.24,96.4677 1758.94,98.1339 1759.65,98.3905 1760.36,98.925 1761.07,100.629 1761.77,102.564 1762.48,105.53 1763.19,105.536 1763.9,106.767 1764.61,105.129 1765.31,103.679 1766.02,99.5929 1766.73,100.057 1767.44,100.528 1768.14,102.292 1768.85,101.333 1769.56,101.534 1770.27,101.906 1770.98,105.001 1771.68,103.46 1772.39,103.666 1773.1,103.941 1773.81,102.755 1774.51,102.78 1775.22,103.023 1775.93,101.482 1776.64,104.315 1777.35,103.072 1778.05,104.414 1778.76,104.247 1779.47,101.193 1780.18,101.464 1780.88,105.762 1781.59,104.44 1782.3,104.818 1783.01,104.66 1783.72,102.104 1784.42,103.687 1785.13,103.873 1785.84,103.647 1786.55,106.466 1787.25,106.373 1787.96,104.963 1788.67,106.257 1789.38,108.845 1790.09,109.99 1790.79,110.793 1791.5,109.131 1792.21,107.078 1792.92,106.688 1793.62,110.648 1794.33,110.128 1795.04,112.252 1795.75,113 1796.46,112.574 1797.16,111.936 1797.87,114.249 1798.58,111.513 1799.29,112.501 1799.99,111.66 1800.7,109.622 1801.41,105.886 1802.12,102.876 1802.83,104.184 1803.53,102.614 1804.24,103.895 1804.95,101.034 1805.66,103.765 1806.36,103.851 1807.07,100.843 1807.78,100.83 1808.49,103.624 1809.2,102.452 1809.9,102.204 1810.61,102.482 1811.32,102.477 1812.03,101.158 1812.73,101.234 1813.44,101.316 1814.15,101.801 1814.86,100.87 1815.57,101.083 1816.27,102.475 1816.98,106.429 1817.69,104.675 1818.4,105.506 1819.1,105.367 1819.81,102.482 1820.52,102.551 1821.23,101.127 1821.94,97.3802 1822.64,99.2097 1823.35,99.5848 1824.06,101.229 1824.77,101.188 1825.48,104.077 1826.18,103.9 1826.89,105.011 1827.6,102.263 1828.31,103.775 1829.01,104.892 1829.72,104.894 1830.43,105.884 1831.14,104.4 1831.85,104.167 1832.55,104.142 1833.26,105.714 1833.97,104.19 1834.68,105.496 1835.38,105.212 1836.09,104.766 1836.8,104.235 1837.51,102.544 1838.22,101.047 1838.92,102.806 1839.63,102.644 1840.34,101.15 1841.05,99.7333 1841.75,102.801 1842.46,101.144 1843.17,99.8118 1843.88,100.06 1844.59,101.581 1845.29,97.4848 1846,97.7699 1846.71,102.349 1847.42,103.833 1848.12,102.256 1848.83,102.207 1849.54,102.167 1850.25,103.584 1850.96,102.285 1851.66,102.099 1852.37,100.96 1853.08,98.4358 1853.79,100.27 1854.49,97.7241 1855.2,97.007 1855.91,94.4933 1856.62,95.183 1857.33,98.4312 1858.03,100.331 1858.74,97.793 1859.45,98.2908 1860.16,96.0245 1860.86,97.9061 1861.57,98.334 1862.28,101.545 1862.99,105.852 1863.7,108.466 1864.4,109.498 1865.11,110.142 1865.82,112.396 1866.53,108.062 1867.23,109.021 1867.94,105.88 1868.65,104.056 1869.36,103.855 1870.07,103.902 1870.77,105.128 1871.48,107.63 1872.19,107.219 1872.9,108.243 1873.6,109.112 1874.31,107.005 1875.02,109.574 1875.73,110.616 1876.44,107.16 1877.14,108.216 1877.85,110.612 1878.56,108.604 1879.27,106.692 1879.97,106.42 1880.68,106.059 1881.39,107.239 1882.1,108.311 1882.81,106.475 1883.51,103.668 1884.22,107.441 1884.93,105.78 1885.64,102.805 1886.34,104.043 1887.05,104.319 1887.76,106.947 1888.47,106.663 1889.18,106.564 1889.88,107.65 1890.59,107.373 1891.3,108.156 1892.01,103.649 1892.71,104.666 1893.42,101.586 1894.13,100.352 1894.84,101.554 1895.55,100.123 1896.25,97.3723 1896.96,96.3335 1897.67,101.042 1898.38,100.875 1899.08,98.0853 1899.79,101.014 1900.5,99.6728 1901.21,100.13 1901.92,100.565 1902.62,100.856 1903.33,102.459 1904.04,99.7597 1904.75,100.472 1905.46,102.226 1906.16,104.832 1906.87,103.186 1907.58,103.067 1908.29,104.362 1908.99,104.49 1909.7,104.565 1910.41,106.049 1911.12,108.463 1911.83,110.979 1912.53,107.733 1913.24,110.016 1913.95,108.108 1914.66,107.497 1915.36,107.304 1916.07,107.102 1916.78,106.474 1917.49,106.111 1918.2,111.377 1918.9,110.667 1919.61,109.941 1920.32,106.582 1921.03,106.134 1921.73,106.128 1922.44,107.226 1923.15,105.53 1923.86,105.206 1924.57,102.091 1925.27,97.9396 1925.98,102.208 1926.69,101.919 1927.4,101.768 1928.1,100.119 1928.81,100.114 1929.52,100.241 1930.23,99.095 1930.94,98.1129 1931.64,101.218 1932.35,102.667 1933.06,102.606 1933.77,101.287 1934.47,97.1849 1935.18,98.852 1935.89,98.0858 1936.6,101.048 1937.31,102.567 1938.01,102.386 1938.72,106.742 1939.43,105.233 1940.14,102.317 1940.84,102.23 1941.55,102.428 1942.26,100.965 1942.97,102.414 1943.68,103.943 1944.38,102.307 1945.09,102.071 1945.8,102.022 1946.51,102.186 1947.21,100.842 1947.92,99.3524 1948.63,93.9282 1949.34,96.4194 1950.05,94.5432 1950.75,90.9912 1951.46,89.1051 1952.17,88.9541 1952.88,92.5703 1953.58,96.1382 1954.29,98.0847 1955,101.111 1955.71,101.247 1956.42,101.321 1957.12,101.806 1957.83,100.884 1958.54,102.275 1959.25,103.867 1959.95,101.22 1960.66,102.945 1961.37,104.413 1962.08,104.588 1962.79,102.987 1963.49,98.4481 1964.2,101.595 1964.91,103.22 1965.62,106.211 1966.32,103.147 1967.03,104.564 1967.74,103.089 1968.45,103.113 1969.16,104.489 1969.86,105.77 1970.57,104.372 1971.28,102.902 1971.99,102.952 1972.69,107.073 1973.4,103.053 1974.11,101.649 1974.82,100.711 1975.53,99.614 1976.23,99.9163 1976.94,100.221 1977.65,100.223 1978.36,100.291 1979.07,100.404 1979.77,100.755 1980.48,103.813 1981.19,101.083 1981.9,101.171 1982.6,101.345 1983.31,101.867 1984.02,103.581 1984.73,103.825 1985.44,105.509 1986.14,105.346 1986.85,105.337 1987.56,103.955 1988.27,101.271 1988.97,104.406 1989.68,107.162 1990.39,106.877 1991.1,106.65 1991.81,107.511 1992.51,107.265 1993.22,105.698 1993.93,105.618 1994.64,104.06 1995.34,106.842 1996.05,106.483 1996.76,106.534 1997.47,106.471 1998.18,104.735 1998.88,103.244 1999.59,101.845 2000.3,102.024 2001.01,103.56 2001.71,103.321 2002.42,103.462 2003.13,102.064 2003.84,101.93 2004.55,104.534 2005.25,101.446 2005.96,100.273 2006.67,99.2546 2007.38,99.5819 2008.08,101.34 2008.79,100.305 2009.5,99.1856 2010.21,100.885 2010.92,101.075 2011.62,100.109 2012.33,99.3973 2013.04,101.227 2013.75,103.01 2014.45,101.899 2015.16,100.576 2015.87,102.347 2016.58,100.887 2017.29,98.1596 2017.99,98.7179 2018.7,96.5509 2019.41,98.5366 2020.12,100.177 2020.82,103.088 2021.53,103.233 2022.24,103.52 2022.95,103.702 2023.66,106.457 2024.36,106.423 2025.07,107.834 2025.78,102.434 2026.49,101.118 2027.19,101.302 2027.9,102.816 2028.61,104.625 2029.32,103.418 2030.03,102.026 2030.73,102.683 2031.44,100.056 2032.15,100.512 2032.86,102.056 2033.56,100.951 2034.27,102.744 2034.98,98.9242 2035.69,105.144 2036.4,105.041 2037.1,105.009 2037.81,106.425 2038.52,102.438 2039.23,99.4805 2039.93,101.272 2040.64,101.52 2041.35,102.013 2042.06,104.693 2042.77,106.01 2043.47,105.807 2044.18,106.91 2044.89,107.967 2045.6,109.233 2046.3,106.132 2047.01,106.125 2047.72,103.209 2048.43,105.999 2049.14,103.058 2049.84,102.971 2050.55,104.395 2051.26,102.657 2051.97,104.29 2052.68,105.777 2053.38,109.776 2054.09,113.713 2054.8,109.068 2055.51,110.186 2056.21,113.689 2056.92,114.619 2057.63,116.631 2058.34,115.719 2059.05,113.498 2059.75,112.831 2060.46,110.98 2061.17,110.322 2061.88,112.708 2062.58,113.463 2063.29,111.656 2064,113.849 2064.71,111.458 2065.42,107.904 2066.12,113.015 2066.83,112.038 2067.54,111.372 2068.25,112.2 2068.95,112.704 2069.66,113.268 2070.37,112.243 2071.08,112.693 2071.79,110.718 2072.49,109.902 2073.2,110.99 2073.91,110.074 2074.62,106.73 2075.32,104.92 2076.03,106.086 2076.74,106.932 2077.45,106.548 2078.16,106.304 2078.86,101.852 2079.57,101.796 2080.28,102.87 2080.99,103.015 2081.69,101.739 2082.4,103.068 2083.11,101.764 2083.82,104.801 2084.53,104.418 2085.23,104.233 2085.94,102.335 2086.65,103.662 2087.36,102.257 2088.06,103.615 2088.77,100.592 2089.48,100.68 2090.19,99.6321 2090.9,99.5983 2091.6,98.5985 2092.31,100.046 2093.02,98.5185 2093.73,100.073 2094.43,100.172 2095.14,100.037 2095.85,100.211 2096.56,103.054 2097.27,101.578 2097.97,101.422 2098.68,102.759 2099.39,102.53 2100.1,102.418 2100.8,103.625 2101.51,102.198 2102.22,102.257 2102.93,100.906 2103.64,100.985 2104.34,101.211 2105.05,99.6846 2105.76,100.904 2106.47,101.144 2107.17,100.14 2107.88,100.34 2108.59,97.9451 2109.3,98.3803 2110.01,99.9361 2110.71,96.1769 2111.42,96.4245 2112.13,96.651 2112.84,94.2248 2113.54,96.1294 2114.25,99.0468 2114.96,102.184 2115.67,106.234 2116.38,103.339 2117.08,100.578 2117.79,97.6712 2118.5,98.0581 2119.21,95.6045 2119.91,95.0294 2120.62,95.5895 2121.33,99.2351 2122.04,102.157 2122.75,100.733 2123.45,100.851 2124.16,102.567 2124.87,105.433 2125.58,106.774 2126.28,104.969 2126.99,103.564 2127.7,102.14 2128.41,106.398 2129.12,107.61 2129.82,108.331 2130.53,106.843 2131.24,103.801 2131.95,103.366 2132.66,101.769 2133.36,100.794 2134.07,99.7095 2134.78,100.981 2135.49,104.145 2136.19,102.856 2136.9,101.175 2137.61,102.852 2138.32,100.288 2139.03,101.854 2139.73,100.929 2140.44,99.7898 2141.15,98.5579 2141.86,99.1794 2142.56,99.6436 2143.27,97.0587 2143.98,94.5929 2144.69,95.4084 2145.4,96.2528 2146.1,95.7013 2146.81,97.8339 2147.52,98.3866 2148.23,98.8278 2148.93,103.477 2149.64,102.033 2150.35,101.981 2151.06,102.143 2151.77,102.197 2152.47,100.734 2153.18,98.2749 2153.89,98.6663 2154.6,97.5442 2155.3,99.2427 2156.01,99.6571 2156.72,101.525 2157.43,98.9678 2158.14,100.671 2158.84,101.119 2159.55,101.475 2160.26,102.005 2160.97,103.605 2161.67,99.4966 2162.38,98.098 2163.09,95.8233 2163.8,93.8836 2164.51,96.1597 2165.21,96.6857 2165.92,98.6299 2166.63,97.4722 2167.34,101.003 2168.04,101.374 2168.75,102.885 2169.46,101.639 2170.17,104.708 2170.88,104.998 2171.58,105.36 2172.29,106.842 2173,105.359 2173.71,103.006 2174.41,103.326 2175.12,103.53 2175.83,106.459 2176.54,106.571 2177.25,107.7 2177.95,108.758 2178.66,109.732 2179.37,108.163 2180.08,110.774 2180.78,114.35 2181.49,112.372 2182.2,113.34 2182.91,112.909 2183.62,113.689 2184.32,113.294 2185.03,114.193 2185.74,116.238 2186.45,117.134 2187.15,117.378 2187.86,116.93 2188.57,120.435 2189.28,120.455 2189.99,120.617 2190.69,119.313 2191.4,118.274 2192.11,115.751 2192.82,114.564 2193.52,114.028 2194.23,110.419 2194.94,111.292 2195.65,110.617 2196.36,108.438 2197.06,107.872 2197.77,110.113 2198.48,112.33 2199.19,112.795 2199.89,110.484 2200.6,108.318 2201.31,106.544 2202.02,103.278 2202.73,98.8951 2203.43,100.304 2204.14,100.322 2204.85,100.257 2205.56,99.0077 2206.27,99.0549 2206.97,100.807 2207.68,98.4065 2208.39,97.5462 2209.1,96.3672 2209.8,98.1027 2210.51,98.3725 2211.22,96.9371 2211.93,95.7637 2212.64,94.8694 2213.34,95.43 2214.05,94.7953 2214.76,95.0252 2215.47,96.8889 2216.17,100.259 2216.88,100.447 2217.59,99.2697 2218.3,99.353 2219.01,99.6002 2219.71,97.1226 2220.42,96.3587 2221.13,95.127 2221.84,97.0072 2222.54,100.397 2223.25,100.711 2223.96,98.0678 2224.67,98.3963 2225.38,96.0539 2226.08,96.4145 2226.79,97.0105 2227.5,101.593 2228.21,103.128 2228.91,101.593 2229.62,101.629 2230.33,97.5343 2231.04,98.112 2231.75,97.1703 2232.45,99.1058 2233.16,100.985 2233.87,104.176 2234.58,105.349 2235.28,105.136 2235.99,103.791 2236.7,102.533 2237.41,101.168 2238.12,99.7402 2238.82,102.93 2239.53,106.872 2240.24,109.417 2240.95,109.162 2241.65,110.215 2242.36,108.466 2243.07,108.074 2243.78,106.56 2244.49,107.516 2245.19,107.225 2245.9,108.303 2246.61,107.969 2247.32,111.84 2248.02,112.662 2248.73,111.99 2249.44,111.696 2250.15,112.634 2250.86,110.636 2251.56,107.501 2252.27,107.397 2252.98,101.705 2253.69,98.9666 2254.39,96.829 2255.1,100.185 2255.81,100.29 2256.52,101.519 2257.23,102.867 2257.93,102.637 2258.64,101.401 2259.35,102.807 2260.06,102.682 2260.76,101.273 2261.47,104.314 2262.18,102.98 2262.89,99.1418 2263.6,100.982 2264.3,101.272 2265.01,101.201 2265.72,98.9173 2266.43,99.3536 2267.13,100.724 2267.84,102.324 2268.55,102.289 2269.26,103.802 2269.97,106.561 2270.67,107.875 2271.38,110.24 2272.09,105.562 2272.8,105.438 2273.5,102.809 2274.21,104.075 2274.92,108.108 2275.63,107.939 2276.34,109.138 2277.04,108.504 2277.75,107.911 2278.46,107.608 2279.17,110.228 2279.87,109.719 2280.58,106.738 2281.29,106.566 2282,106.443 2282.71,106.11 2283.41,105.997 2284.12,107.236 2284.83,105.576 2285.54,103.657 2286.25,102.184 2286.95,101.662 2287.66,103.024 2288.37,104.352 2289.08,102.737 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1732.08 1456.66 L2277.76 1456.66 L2277.76 1301.14 L1732.08 1301.14  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1732.08,1456.66 2277.76,1456.66 2277.76,1301.14 1732.08,1301.14 1732.08,1456.66 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1757.08,1352.98 1907.09,1352.98 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1939.49 1336.97 L1939.49 1344.33 L1948.27 1344.33 L1948.27 1347.64 L1939.49 1347.64 L1939.49 1361.72 Q1939.49 1364.89 1940.35 1365.79 Q1941.23 1366.69 1943.89 1366.69 L1948.27 1366.69 L1948.27 1370.26 L1943.89 1370.26 Q1938.96 1370.26 1937.09 1368.43 Q1935.21 1366.58 1935.21 1361.72 L1935.21 1347.64 L1932.09 1347.64 L1932.09 1344.33 L1935.21 1344.33 L1935.21 1336.97 L1939.49 1336.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1965.65 1357.23 Q1960.49 1357.23 1958.5 1358.41 Q1956.51 1359.59 1956.51 1362.44 Q1956.51 1364.7 1957.99 1366.05 Q1959.49 1367.37 1962.06 1367.37 Q1965.6 1367.37 1967.73 1364.87 Q1969.89 1362.34 1969.89 1358.18 L1969.89 1357.23 L1965.65 1357.23 M1974.15 1355.47 L1974.15 1370.26 L1969.89 1370.26 L1969.89 1366.32 Q1968.43 1368.69 1966.25 1369.82 Q1964.08 1370.93 1960.93 1370.93 Q1956.95 1370.93 1954.59 1368.71 Q1952.25 1366.46 1952.25 1362.71 Q1952.25 1358.34 1955.16 1356.12 Q1958.1 1353.89 1963.91 1353.89 L1969.89 1353.89 L1969.89 1353.48 Q1969.89 1350.54 1967.94 1348.94 Q1966.02 1347.32 1962.53 1347.32 Q1960.3 1347.32 1958.2 1347.85 Q1956.09 1348.38 1954.15 1349.45 L1954.15 1345.51 Q1956.48 1344.61 1958.68 1344.17 Q1960.88 1343.71 1962.97 1343.71 Q1968.59 1343.71 1971.37 1346.63 Q1974.15 1349.54 1974.15 1355.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1997.94 1348.31 Q1997.22 1347.9 1996.37 1347.71 Q1995.53 1347.5 1994.52 1347.5 Q1990.9 1347.5 1988.96 1349.87 Q1987.04 1352.2 1987.04 1356.6 L1987.04 1370.26 L1982.76 1370.26 L1982.76 1344.33 L1987.04 1344.33 L1987.04 1348.36 Q1988.38 1346 1990.53 1344.87 Q1992.69 1343.71 1995.77 1343.71 Q1996.21 1343.71 1996.74 1343.78 Q1997.27 1343.82 1997.92 1343.94 L1997.94 1348.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2018.64 1357 Q2018.64 1352.37 2016.71 1349.82 Q2014.82 1347.27 2011.37 1347.27 Q2007.94 1347.27 2006.02 1349.82 Q2004.12 1352.37 2004.12 1357 Q2004.12 1361.6 2006.02 1364.15 Q2007.94 1366.69 2011.37 1366.69 Q2014.82 1366.69 2016.71 1364.15 Q2018.64 1361.6 2018.64 1357 M2022.9 1367.04 Q2022.9 1373.66 2019.96 1376.88 Q2017.02 1380.12 2010.95 1380.12 Q2008.71 1380.12 2006.71 1379.77 Q2004.72 1379.45 2002.85 1378.75 L2002.85 1374.61 Q2004.72 1375.63 2006.55 1376.12 Q2008.38 1376.6 2010.28 1376.6 Q2014.47 1376.6 2016.55 1374.4 Q2018.64 1372.23 2018.64 1367.81 L2018.64 1365.7 Q2017.32 1367.99 2015.26 1369.13 Q2013.2 1370.26 2010.33 1370.26 Q2005.56 1370.26 2002.64 1366.63 Q1999.72 1362.99 1999.72 1357 Q1999.72 1350.98 2002.64 1347.34 Q2005.56 1343.71 2010.33 1343.71 Q2013.2 1343.71 2015.26 1344.84 Q2017.32 1345.98 2018.64 1348.27 L2018.64 1344.33 L2022.9 1344.33 L2022.9 1367.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2053.84 1356.23 L2053.84 1358.31 L2034.26 1358.31 Q2034.54 1362.71 2036.9 1365.03 Q2039.28 1367.32 2043.52 1367.32 Q2045.97 1367.32 2048.27 1366.72 Q2050.58 1366.12 2052.85 1364.91 L2052.85 1368.94 Q2050.56 1369.91 2048.15 1370.42 Q2045.74 1370.93 2043.27 1370.93 Q2037.06 1370.93 2033.43 1367.32 Q2029.82 1363.71 2029.82 1357.55 Q2029.82 1351.19 2033.24 1347.46 Q2036.69 1343.71 2042.52 1343.71 Q2047.76 1343.71 2050.79 1347.09 Q2053.84 1350.44 2053.84 1356.23 M2049.58 1354.98 Q2049.54 1351.49 2047.62 1349.4 Q2045.72 1347.32 2042.57 1347.32 Q2039.01 1347.32 2036.85 1349.33 Q2034.72 1351.35 2034.4 1355 L2049.58 1354.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2065.05 1336.97 L2065.05 1344.33 L2073.82 1344.33 L2073.82 1347.64 L2065.05 1347.64 L2065.05 1361.72 Q2065.05 1364.89 2065.9 1365.79 Q2066.78 1366.69 2069.45 1366.69 L2073.82 1366.69 L2073.82 1370.26 L2069.45 1370.26 Q2064.52 1370.26 2062.64 1368.43 Q2060.77 1366.58 2060.77 1361.72 L2060.77 1347.64 L2057.64 1347.64 L2057.64 1344.33 L2060.77 1344.33 L2060.77 1336.97 L2065.05 1336.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2076.95 1344.33 L2081.21 1344.33 L2086.53 1364.56 L2091.83 1344.33 L2096.85 1344.33 L2102.18 1364.56 L2107.48 1344.33 L2111.74 1344.33 L2104.96 1370.26 L2099.93 1370.26 L2094.35 1349.01 L2088.75 1370.26 L2083.73 1370.26 L2076.95 1344.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2129.98 1357.23 Q2124.82 1357.23 2122.83 1358.41 Q2120.83 1359.59 2120.83 1362.44 Q2120.83 1364.7 2122.32 1366.05 Q2123.82 1367.37 2126.39 1367.37 Q2129.93 1367.37 2132.06 1364.87 Q2134.21 1362.34 2134.21 1358.18 L2134.21 1357.23 L2129.98 1357.23 M2138.47 1355.47 L2138.47 1370.26 L2134.21 1370.26 L2134.21 1366.32 Q2132.76 1368.69 2130.58 1369.82 Q2128.4 1370.93 2125.26 1370.93 Q2121.27 1370.93 2118.91 1368.71 Q2116.58 1366.46 2116.58 1362.71 Q2116.58 1358.34 2119.49 1356.12 Q2122.43 1353.89 2128.24 1353.89 L2134.21 1353.89 L2134.21 1353.48 Q2134.21 1350.54 2132.27 1348.94 Q2130.35 1347.32 2126.85 1347.32 Q2124.63 1347.32 2122.52 1347.85 Q2120.42 1348.38 2118.47 1349.45 L2118.47 1345.51 Q2120.81 1344.61 2123.01 1344.17 Q2125.21 1343.71 2127.29 1343.71 Q2132.92 1343.71 2135.7 1346.63 Q2138.47 1349.54 2138.47 1355.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2147.25 1334.24 L2151.51 1334.24 L2151.51 1370.26 L2147.25 1370.26 L2147.25 1334.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2160.26 1334.24 L2164.54 1334.24 L2164.54 1355.51 L2177.25 1344.33 L2182.69 1344.33 L2168.94 1356.46 L2183.26 1370.26 L2177.71 1370.26 L2164.54 1357.6 L2164.54 1370.26 L2160.26 1370.26 L2160.26 1334.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2208.36 1356.23 L2208.36 1358.31 L2188.77 1358.31 Q2189.05 1362.71 2191.41 1365.03 Q2193.8 1367.32 2198.03 1367.32 Q2200.49 1367.32 2202.78 1366.72 Q2205.09 1366.12 2207.36 1364.91 L2207.36 1368.94 Q2205.07 1369.91 2202.66 1370.42 Q2200.26 1370.93 2197.78 1370.93 Q2191.57 1370.93 2187.94 1367.32 Q2184.33 1363.71 2184.33 1357.55 Q2184.33 1351.19 2187.76 1347.46 Q2191.2 1343.71 2197.04 1343.71 Q2202.27 1343.71 2205.3 1347.09 Q2208.36 1350.44 2208.36 1356.23 M2204.1 1354.98 Q2204.05 1351.49 2202.13 1349.4 Q2200.23 1347.32 2197.08 1347.32 Q2193.52 1347.32 2191.37 1349.33 Q2189.24 1351.35 2188.91 1355 L2204.1 1354.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2230.37 1348.31 Q2229.65 1347.9 2228.8 1347.71 Q2227.96 1347.5 2226.95 1347.5 Q2223.33 1347.5 2221.39 1349.87 Q2219.47 1352.2 2219.47 1356.6 L2219.47 1370.26 L2215.19 1370.26 L2215.19 1344.33 L2219.47 1344.33 L2219.47 1348.36 Q2220.81 1346 2222.96 1344.87 Q2225.12 1343.71 2228.2 1343.71 Q2228.63 1343.71 2229.17 1343.78 Q2229.7 1343.82 2230.35 1343.94 L2230.37 1348.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2251.37 1345.1 L2251.37 1349.13 Q2249.56 1348.2 2247.62 1347.74 Q2245.67 1347.27 2243.59 1347.27 Q2240.42 1347.27 2238.82 1348.25 Q2237.25 1349.22 2237.25 1351.16 Q2237.25 1352.64 2238.38 1353.5 Q2239.51 1354.33 2242.94 1355.1 L2244.4 1355.42 Q2248.94 1356.39 2250.83 1358.18 Q2252.76 1359.94 2252.76 1363.11 Q2252.76 1366.72 2249.88 1368.82 Q2247.04 1370.93 2242.04 1370.93 Q2239.95 1370.93 2237.69 1370.51 Q2235.44 1370.12 2232.94 1369.31 L2232.94 1364.91 Q2235.3 1366.14 2237.59 1366.76 Q2239.88 1367.37 2242.13 1367.37 Q2245.14 1367.37 2246.76 1366.35 Q2248.38 1365.31 2248.38 1363.43 Q2248.38 1361.69 2247.2 1360.77 Q2246.04 1359.84 2242.08 1358.99 L2240.6 1358.64 Q2236.64 1357.81 2234.88 1356.09 Q2233.13 1354.36 2233.13 1351.35 Q2233.13 1347.69 2235.72 1345.7 Q2238.31 1343.71 2243.08 1343.71 Q2245.44 1343.71 2247.52 1344.06 Q2249.61 1344.4 2251.37 1345.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1757.08,1404.82 1907.09,1404.82 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1953.8 1406.45 L1953.8 1422.1 L1949.54 1422.1 L1949.54 1406.59 Q1949.54 1402.91 1948.1 1401.08 Q1946.67 1399.25 1943.8 1399.25 Q1940.35 1399.25 1938.36 1401.45 Q1936.37 1403.65 1936.37 1407.45 L1936.37 1422.1 L1932.09 1422.1 L1932.09 1396.17 L1936.37 1396.17 L1936.37 1400.2 Q1937.9 1397.86 1939.96 1396.71 Q1942.04 1395.55 1944.75 1395.55 Q1949.22 1395.55 1951.51 1398.33 Q1953.8 1401.08 1953.8 1406.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1972.34 1399.16 Q1968.91 1399.16 1966.92 1401.84 Q1964.93 1404.51 1964.93 1409.16 Q1964.93 1413.81 1966.9 1416.5 Q1968.89 1419.16 1972.34 1419.16 Q1975.74 1419.16 1977.73 1416.47 Q1979.72 1413.79 1979.72 1409.16 Q1979.72 1404.55 1977.73 1401.87 Q1975.74 1399.16 1972.34 1399.16 M1972.34 1395.55 Q1977.9 1395.55 1981.07 1399.16 Q1984.24 1402.77 1984.24 1409.16 Q1984.24 1415.53 1981.07 1419.16 Q1977.9 1422.77 1972.34 1422.77 Q1966.76 1422.77 1963.59 1419.16 Q1960.44 1415.53 1960.44 1409.16 Q1960.44 1402.77 1963.59 1399.16 Q1966.76 1395.55 1972.34 1395.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2006.32 1400.15 Q2005.6 1399.74 2004.75 1399.55 Q2003.91 1399.34 2002.9 1399.34 Q1999.28 1399.34 1997.34 1401.71 Q1995.42 1404.04 1995.42 1408.44 L1995.42 1422.1 L1991.14 1422.1 L1991.14 1396.17 L1995.42 1396.17 L1995.42 1400.2 Q1996.76 1397.84 1998.91 1396.71 Q2001.07 1395.55 2004.15 1395.55 Q2004.59 1395.55 2005.12 1395.62 Q2005.65 1395.66 2006.3 1395.78 L2006.32 1400.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2030.14 1401.15 Q2031.74 1398.28 2033.96 1396.91 Q2036.18 1395.55 2039.19 1395.55 Q2043.24 1395.55 2045.44 1398.4 Q2047.64 1401.22 2047.64 1406.45 L2047.64 1422.1 L2043.36 1422.1 L2043.36 1406.59 Q2043.36 1402.86 2042.04 1401.06 Q2040.72 1399.25 2038.01 1399.25 Q2034.7 1399.25 2032.78 1401.45 Q2030.86 1403.65 2030.86 1407.45 L2030.86 1422.1 L2026.58 1422.1 L2026.58 1406.59 Q2026.58 1402.84 2025.26 1401.06 Q2023.94 1399.25 2021.18 1399.25 Q2017.92 1399.25 2016 1401.47 Q2014.08 1403.67 2014.08 1407.45 L2014.08 1422.1 L2009.79 1422.1 L2009.79 1396.17 L2014.08 1396.17 L2014.08 1400.2 Q2015.53 1397.82 2017.57 1396.68 Q2019.61 1395.55 2022.41 1395.55 Q2025.23 1395.55 2027.2 1396.98 Q2029.19 1398.42 2030.14 1401.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This is done by performing blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.028\n  with uncertainty of ± 0.0025028718411415646\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables. Thankfully, the complications are handled by the following functions.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01631 ± (0.00212832, 0.00206379) (MC)\n  95% confidence interval: [-4.02062, -4.01212]) (MC)\n  linear error propagation: -4.01637 ± 0.00215589\n  |δ_y| = |0.00243897| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016314467689392, val_l = 0.004304544683139788, val_u = 0.00419639764247659)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\")\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected_energy\",\n)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip050\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip051\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip052\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"165.712,1505.26 165.712,47.2441 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.5,1505.26 873.5,47.2441 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1581.29,1505.26 1581.29,47.2441 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"165.712,1505.26 165.712,1486.36 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.5,1505.26 873.5,1486.36 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1581.29,1505.26 1581.29,1486.36 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M165.712 1536.18 Q162.101 1536.18 160.272 1539.74 Q158.467 1543.28 158.467 1550.41 Q158.467 1557.52 160.272 1561.09 Q162.101 1564.63 165.712 1564.63 Q169.346 1564.63 171.152 1561.09 Q172.981 1557.52 172.981 1550.41 Q172.981 1543.28 171.152 1539.74 Q169.346 1536.18 165.712 1536.18 M165.712 1532.47 Q171.522 1532.47 174.578 1537.08 Q177.656 1541.66 177.656 1550.41 Q177.656 1559.14 174.578 1563.75 Q171.522 1568.33 165.712 1568.33 Q159.902 1568.33 156.823 1563.75 Q153.768 1559.14 153.768 1550.41 Q153.768 1541.66 156.823 1537.08 Q159.902 1532.47 165.712 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M818.026 1563.72 L825.665 1563.72 L825.665 1537.36 L817.355 1539.03 L817.355 1534.77 L825.618 1533.1 L830.294 1533.1 L830.294 1563.72 L837.933 1563.72 L837.933 1567.66 L818.026 1567.66 L818.026 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M857.378 1536.18 Q853.766 1536.18 851.938 1539.74 Q850.132 1543.28 850.132 1550.41 Q850.132 1557.52 851.938 1561.09 Q853.766 1564.63 857.378 1564.63 Q861.012 1564.63 862.817 1561.09 Q864.646 1557.52 864.646 1550.41 Q864.646 1543.28 862.817 1539.74 Q861.012 1536.18 857.378 1536.18 M857.378 1532.47 Q863.188 1532.47 866.243 1537.08 Q869.322 1541.66 869.322 1550.41 Q869.322 1559.14 866.243 1563.75 Q863.188 1568.33 857.378 1568.33 Q851.567 1568.33 848.489 1563.75 Q845.433 1559.14 845.433 1550.41 Q845.433 1541.66 848.489 1537.08 Q851.567 1532.47 857.378 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M887.539 1536.18 Q883.928 1536.18 882.1 1539.74 Q880.294 1543.28 880.294 1550.41 Q880.294 1557.52 882.1 1561.09 Q883.928 1564.63 887.539 1564.63 Q891.174 1564.63 892.979 1561.09 Q894.808 1557.52 894.808 1550.41 Q894.808 1543.28 892.979 1539.74 Q891.174 1536.18 887.539 1536.18 M887.539 1532.47 Q893.35 1532.47 896.405 1537.08 Q899.484 1541.66 899.484 1550.41 Q899.484 1559.14 896.405 1563.75 Q893.35 1568.33 887.539 1568.33 Q881.729 1568.33 878.651 1563.75 Q875.595 1559.14 875.595 1550.41 Q875.595 1541.66 878.651 1537.08 Q881.729 1532.47 887.539 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M917.701 1536.18 Q914.09 1536.18 912.261 1539.74 Q910.456 1543.28 910.456 1550.41 Q910.456 1557.52 912.261 1561.09 Q914.09 1564.63 917.701 1564.63 Q921.336 1564.63 923.141 1561.09 Q924.97 1557.52 924.97 1550.41 Q924.97 1543.28 923.141 1539.74 Q921.336 1536.18 917.701 1536.18 M917.701 1532.47 Q923.511 1532.47 926.567 1537.08 Q929.646 1541.66 929.646 1550.41 Q929.646 1559.14 926.567 1563.75 Q923.511 1568.33 917.701 1568.33 Q911.891 1568.33 908.812 1563.75 Q905.757 1559.14 905.757 1550.41 Q905.757 1541.66 908.812 1537.08 Q911.891 1532.47 917.701 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1529.9 1563.72 L1546.22 1563.72 L1546.22 1567.66 L1524.27 1567.66 L1524.27 1563.72 Q1526.94 1560.97 1531.52 1556.34 Q1536.13 1551.69 1537.31 1550.35 Q1539.55 1547.82 1540.43 1546.09 Q1541.33 1544.33 1541.33 1542.64 Q1541.33 1539.88 1539.39 1538.15 Q1537.47 1536.41 1534.37 1536.41 Q1532.17 1536.41 1529.71 1537.17 Q1527.28 1537.94 1524.51 1539.49 L1524.51 1534.77 Q1527.33 1533.63 1529.78 1533.05 Q1532.24 1532.47 1534.27 1532.47 Q1539.64 1532.47 1542.84 1535.16 Q1546.03 1537.85 1546.03 1542.34 Q1546.03 1544.47 1545.22 1546.39 Q1544.44 1548.28 1542.33 1550.88 Q1541.75 1551.55 1538.65 1554.77 Q1535.55 1557.96 1529.9 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1566.03 1536.18 Q1562.42 1536.18 1560.59 1539.74 Q1558.79 1543.28 1558.79 1550.41 Q1558.79 1557.52 1560.59 1561.09 Q1562.42 1564.63 1566.03 1564.63 Q1569.67 1564.63 1571.47 1561.09 Q1573.3 1557.52 1573.3 1550.41 Q1573.3 1543.28 1571.47 1539.74 Q1569.67 1536.18 1566.03 1536.18 M1566.03 1532.47 Q1571.84 1532.47 1574.9 1537.08 Q1577.98 1541.66 1577.98 1550.41 Q1577.98 1559.14 1574.9 1563.75 Q1571.84 1568.33 1566.03 1568.33 Q1560.22 1568.33 1557.14 1563.75 Q1554.09 1559.14 1554.09 1550.41 Q1554.09 1541.66 1557.14 1537.08 Q1560.22 1532.47 1566.03 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1596.2 1536.18 Q1592.58 1536.18 1590.76 1539.74 Q1588.95 1543.28 1588.95 1550.41 Q1588.95 1557.52 1590.76 1561.09 Q1592.58 1564.63 1596.2 1564.63 Q1599.83 1564.63 1601.64 1561.09 Q1603.46 1557.52 1603.46 1550.41 Q1603.46 1543.28 1601.64 1539.74 Q1599.83 1536.18 1596.2 1536.18 M1596.2 1532.47 Q1602.01 1532.47 1605.06 1537.08 Q1608.14 1541.66 1608.14 1550.41 Q1608.14 1559.14 1605.06 1563.75 Q1602.01 1568.33 1596.2 1568.33 Q1590.39 1568.33 1587.31 1563.75 Q1584.25 1559.14 1584.25 1550.41 Q1584.25 1541.66 1587.31 1537.08 Q1590.39 1532.47 1596.2 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1626.36 1536.18 Q1622.75 1536.18 1620.92 1539.74 Q1619.11 1543.28 1619.11 1550.41 Q1619.11 1557.52 1620.92 1561.09 Q1622.75 1564.63 1626.36 1564.63 Q1629.99 1564.63 1631.8 1561.09 Q1633.63 1557.52 1633.63 1550.41 Q1633.63 1543.28 1631.8 1539.74 Q1629.99 1536.18 1626.36 1536.18 M1626.36 1532.47 Q1632.17 1532.47 1635.22 1537.08 Q1638.3 1541.66 1638.3 1550.41 Q1638.3 1559.14 1635.22 1563.75 Q1632.17 1568.33 1626.36 1568.33 Q1620.55 1568.33 1617.47 1563.75 Q1614.41 1559.14 1614.41 1550.41 Q1614.41 1541.66 1617.47 1537.08 Q1620.55 1532.47 1626.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2247.76 1549.03 Q2251.11 1549.74 2252.99 1552.01 Q2254.89 1554.28 2254.89 1557.61 Q2254.89 1562.73 2251.37 1565.53 Q2247.85 1568.33 2241.37 1568.33 Q2239.19 1568.33 2236.88 1567.89 Q2234.59 1567.47 2232.13 1566.62 L2232.13 1562.1 Q2234.08 1563.24 2236.39 1563.82 Q2238.71 1564.4 2241.23 1564.4 Q2245.63 1564.4 2247.92 1562.66 Q2250.23 1560.92 2250.23 1557.61 Q2250.23 1554.56 2248.08 1552.85 Q2245.95 1551.11 2242.13 1551.11 L2238.1 1551.11 L2238.1 1547.27 L2242.32 1547.27 Q2245.77 1547.27 2247.59 1545.9 Q2249.42 1544.51 2249.42 1541.92 Q2249.42 1539.26 2247.53 1537.85 Q2245.65 1536.41 2242.13 1536.41 Q2240.21 1536.41 2238.01 1536.83 Q2235.81 1537.24 2233.17 1538.12 L2233.17 1533.96 Q2235.84 1533.22 2238.15 1532.85 Q2240.49 1532.47 2242.55 1532.47 Q2247.87 1532.47 2250.97 1534.91 Q2254.08 1537.31 2254.08 1541.43 Q2254.08 1544.3 2252.43 1546.29 Q2250.79 1548.26 2247.76 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2273.75 1536.18 Q2270.14 1536.18 2268.31 1539.74 Q2266.51 1543.28 2266.51 1550.41 Q2266.51 1557.52 2268.31 1561.09 Q2270.14 1564.63 2273.75 1564.63 Q2277.39 1564.63 2279.19 1561.09 Q2281.02 1557.52 2281.02 1550.41 Q2281.02 1543.28 2279.19 1539.74 Q2277.39 1536.18 2273.75 1536.18 M2273.75 1532.47 Q2279.56 1532.47 2282.62 1537.08 Q2285.7 1541.66 2285.7 1550.41 Q2285.7 1559.14 2282.62 1563.75 Q2279.56 1568.33 2273.75 1568.33 Q2267.94 1568.33 2264.86 1563.75 Q2261.81 1559.14 2261.81 1550.41 Q2261.81 1541.66 2264.86 1537.08 Q2267.94 1532.47 2273.75 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2303.91 1536.18 Q2300.3 1536.18 2298.47 1539.74 Q2296.67 1543.28 2296.67 1550.41 Q2296.67 1557.52 2298.47 1561.09 Q2300.3 1564.63 2303.91 1564.63 Q2307.55 1564.63 2309.35 1561.09 Q2311.18 1557.52 2311.18 1550.41 Q2311.18 1543.28 2309.35 1539.74 Q2307.55 1536.18 2303.91 1536.18 M2303.91 1532.47 Q2309.72 1532.47 2312.78 1537.08 Q2315.86 1541.66 2315.86 1550.41 Q2315.86 1559.14 2312.78 1563.75 Q2309.72 1568.33 2303.91 1568.33 Q2298.1 1568.33 2295.03 1563.75 Q2291.97 1559.14 2291.97 1550.41 Q2291.97 1541.66 2295.03 1537.08 Q2298.1 1532.47 2303.91 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2334.08 1536.18 Q2330.46 1536.18 2328.64 1539.74 Q2326.83 1543.28 2326.83 1550.41 Q2326.83 1557.52 2328.64 1561.09 Q2330.46 1564.63 2334.08 1564.63 Q2337.71 1564.63 2339.52 1561.09 Q2341.34 1557.52 2341.34 1550.41 Q2341.34 1543.28 2339.52 1539.74 Q2337.71 1536.18 2334.08 1536.18 M2334.08 1532.47 Q2339.89 1532.47 2342.94 1537.08 Q2346.02 1541.66 2346.02 1550.41 Q2346.02 1559.14 2342.94 1563.75 Q2339.89 1568.33 2334.08 1568.33 Q2328.27 1568.33 2325.19 1563.75 Q2322.13 1559.14 2322.13 1550.41 Q2322.13 1541.66 2325.19 1537.08 Q2328.27 1532.47 2334.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1168.96 1615.53 L1168.96 1621.06 Q1166.48 1619.79 1163.8 1619.15 Q1161.13 1618.52 1158.27 1618.52 Q1153.91 1618.52 1151.71 1619.85 Q1149.55 1621.19 1149.55 1623.87 Q1149.55 1625.9 1151.1 1627.08 Q1152.66 1628.23 1157.38 1629.28 L1159.38 1629.72 Q1165.62 1631.06 1168.23 1633.51 Q1170.87 1635.93 1170.87 1640.29 Q1170.87 1645.25 1166.92 1648.15 Q1163.01 1651.05 1156.13 1651.05 Q1153.27 1651.05 1150.15 1650.47 Q1147.06 1649.93 1143.63 1648.82 L1143.63 1642.77 Q1146.87 1644.46 1150.02 1645.32 Q1153.17 1646.15 1156.26 1646.15 Q1160.4 1646.15 1162.63 1644.74 Q1164.85 1643.31 1164.85 1640.73 Q1164.85 1638.35 1163.23 1637.07 Q1161.64 1635.8 1156.2 1634.62 L1154.16 1634.15 Q1148.72 1633 1146.3 1630.64 Q1143.88 1628.26 1143.88 1624.12 Q1143.88 1619.09 1147.44 1616.35 Q1151.01 1613.62 1157.57 1613.62 Q1160.81 1613.62 1163.68 1614.09 Q1166.54 1614.57 1168.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1185.99 1604.35 L1185.99 1614.48 L1198.05 1614.48 L1198.05 1619.03 L1185.99 1619.03 L1185.99 1638.38 Q1185.99 1642.74 1187.17 1643.98 Q1188.38 1645.22 1192.04 1645.22 L1198.05 1645.22 L1198.05 1650.12 L1192.04 1650.12 Q1185.26 1650.12 1182.68 1647.61 Q1180.1 1645.06 1180.1 1638.38 L1180.1 1619.03 L1175.8 1619.03 L1175.8 1614.48 L1180.1 1614.48 L1180.1 1604.35 L1185.99 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1236.25 1630.84 L1236.25 1633.7 L1209.32 1633.7 Q1209.7 1639.75 1212.95 1642.93 Q1216.23 1646.08 1222.05 1646.08 Q1225.42 1646.08 1228.58 1645.25 Q1231.76 1644.43 1234.88 1642.77 L1234.88 1648.31 Q1231.73 1649.65 1228.42 1650.35 Q1225.11 1651.05 1221.7 1651.05 Q1213.17 1651.05 1208.17 1646.08 Q1203.21 1641.12 1203.21 1632.65 Q1203.21 1623.9 1207.92 1618.77 Q1212.66 1613.62 1220.68 1613.62 Q1227.88 1613.62 1232.04 1618.26 Q1236.25 1622.88 1236.25 1630.84 M1230.39 1629.12 Q1230.33 1624.31 1227.68 1621.45 Q1225.07 1618.58 1220.75 1618.58 Q1215.84 1618.58 1212.88 1621.35 Q1209.96 1624.12 1209.51 1629.15 L1230.39 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1251.52 1644.78 L1251.52 1663.68 L1245.64 1663.68 L1245.64 1614.48 L1251.52 1614.48 L1251.52 1619.89 Q1253.37 1616.7 1256.17 1615.18 Q1259 1613.62 1262.92 1613.62 Q1269.41 1613.62 1273.45 1618.77 Q1277.53 1623.93 1277.53 1632.33 Q1277.53 1640.73 1273.45 1645.89 Q1269.41 1651.05 1262.92 1651.05 Q1259 1651.05 1256.17 1649.52 Q1253.37 1647.96 1251.52 1644.78 M1271.45 1632.33 Q1271.45 1625.87 1268.78 1622.21 Q1266.13 1618.52 1261.49 1618.52 Q1256.84 1618.52 1254.17 1622.21 Q1251.52 1625.87 1251.52 1632.33 Q1251.52 1638.79 1254.17 1642.48 Q1256.84 1646.15 1261.49 1646.15 Q1266.13 1646.15 1268.78 1642.48 Q1271.45 1638.79 1271.45 1632.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1309.96 1615.53 L1309.96 1621.06 Q1307.48 1619.79 1304.8 1619.15 Q1302.13 1618.52 1299.27 1618.52 Q1294.91 1618.52 1292.71 1619.85 Q1290.55 1621.19 1290.55 1623.87 Q1290.55 1625.9 1292.11 1627.08 Q1293.66 1628.23 1298.38 1629.28 L1300.38 1629.72 Q1306.62 1631.06 1309.23 1633.51 Q1311.87 1635.93 1311.87 1640.29 Q1311.87 1645.25 1307.92 1648.15 Q1304.01 1651.05 1297.13 1651.05 Q1294.27 1651.05 1291.15 1650.47 Q1288.06 1649.93 1284.63 1648.82 L1284.63 1642.77 Q1287.87 1644.46 1291.02 1645.32 Q1294.17 1646.15 1297.26 1646.15 Q1301.4 1646.15 1303.63 1644.74 Q1305.86 1643.31 1305.86 1640.73 Q1305.86 1638.35 1304.23 1637.07 Q1302.64 1635.8 1297.2 1634.62 L1295.16 1634.15 Q1289.72 1633 1287.3 1630.64 Q1284.88 1628.26 1284.88 1624.12 Q1284.88 1619.09 1288.45 1616.35 Q1292.01 1613.62 1298.57 1613.62 Q1301.81 1613.62 1304.68 1614.09 Q1307.54 1614.57 1309.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1327.19 2352.76,1327.19 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1116.36 2352.76,1116.36 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,905.536 2352.76,905.536 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,694.712 2352.76,694.712 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,483.887 2352.76,483.887 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,273.062 2352.76,273.062 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,62.2376 2352.76,62.2376 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1327.19 121.638,1327.19 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1116.36 121.638,1116.36 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,905.536 121.638,905.536 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,694.712 121.638,694.712 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,483.887 121.638,483.887 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,273.062 121.638,273.062 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,62.2376 121.638,62.2376 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M54.7958 1312.98 Q51.1847 1312.98 49.356 1316.55 Q47.5504 1320.09 47.5504 1327.22 Q47.5504 1334.33 49.356 1337.89 Q51.1847 1341.43 54.7958 1341.43 Q58.43 1341.43 60.2356 1337.89 Q62.0643 1334.33 62.0643 1327.22 Q62.0643 1320.09 60.2356 1316.55 Q58.43 1312.98 54.7958 1312.98 M54.7958 1309.28 Q60.6059 1309.28 63.6615 1313.89 Q66.7402 1318.47 66.7402 1327.22 Q66.7402 1335.95 63.6615 1340.55 Q60.6059 1345.14 54.7958 1345.14 Q48.9856 1345.14 45.9069 1340.55 Q42.8514 1335.95 42.8514 1327.22 Q42.8514 1318.47 45.9069 1313.89 Q48.9856 1309.28 54.7958 1309.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M15.4441 1129.71 L23.083 1129.71 L23.083 1103.34 L14.7728 1105.01 L14.7728 1100.75 L23.0367 1099.08 L27.7126 1099.08 L27.7126 1129.71 L35.3514 1129.71 L35.3514 1133.64 L15.4441 1133.64 L15.4441 1129.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 1102.16 Q51.1847 1102.16 49.356 1105.72 Q47.5504 1109.27 47.5504 1116.4 Q47.5504 1123.5 49.356 1127.07 Q51.1847 1130.61 54.7958 1130.61 Q58.43 1130.61 60.2356 1127.07 Q62.0643 1123.5 62.0643 1116.4 Q62.0643 1109.27 60.2356 1105.72 Q58.43 1102.16 54.7958 1102.16 M54.7958 1098.46 Q60.6059 1098.46 63.6615 1103.06 Q66.7402 1107.65 66.7402 1116.4 Q66.7402 1125.12 63.6615 1129.73 Q60.6059 1134.31 54.7958 1134.31 Q48.9856 1134.31 45.9069 1129.73 Q42.8514 1125.12 42.8514 1116.4 Q42.8514 1107.65 45.9069 1103.06 Q48.9856 1098.46 54.7958 1098.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M18.6617 918.881 L34.9811 918.881 L34.9811 922.816 L13.0367 922.816 L13.0367 918.881 Q15.6988 916.126 20.2821 911.497 Q24.8885 906.844 26.0691 905.501 Q28.3144 902.978 29.1941 901.242 Q30.0968 899.483 30.0968 897.793 Q30.0968 895.038 28.1524 893.302 Q26.2311 891.566 23.1293 891.566 Q20.9302 891.566 18.4765 892.33 Q16.046 893.094 13.2682 894.645 L13.2682 889.923 Q16.0923 888.789 18.546 888.21 Q20.9997 887.631 23.0367 887.631 Q28.407 887.631 31.6015 890.316 Q34.7959 893.001 34.7959 897.492 Q34.7959 899.622 33.9857 901.543 Q33.1987 903.441 31.0922 906.034 Q30.5135 906.705 27.4117 909.923 Q24.3098 913.117 18.6617 918.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 891.335 Q51.1847 891.335 49.356 894.9 Q47.5504 898.441 47.5504 905.571 Q47.5504 912.677 49.356 916.242 Q51.1847 919.784 54.7958 919.784 Q58.43 919.784 60.2356 916.242 Q62.0643 912.677 62.0643 905.571 Q62.0643 898.441 60.2356 894.9 Q58.43 891.335 54.7958 891.335 M54.7958 887.631 Q60.6059 887.631 63.6615 892.238 Q66.7402 896.821 66.7402 905.571 Q66.7402 914.298 63.6615 918.904 Q60.6059 923.487 54.7958 923.487 Q48.9856 923.487 45.9069 918.904 Q42.8514 914.298 42.8514 905.571 Q42.8514 896.821 45.9069 892.238 Q48.9856 887.631 54.7958 887.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M28.8005 693.357 Q32.157 694.075 34.032 696.343 Q35.9301 698.612 35.9301 701.945 Q35.9301 707.061 32.4116 709.862 Q28.8931 712.663 22.4117 712.663 Q20.2358 712.663 17.921 712.223 Q15.6293 711.806 13.1756 710.95 L13.1756 706.436 Q15.1201 707.57 17.4349 708.149 Q19.7497 708.728 22.2728 708.728 Q26.6709 708.728 28.9626 706.992 Q31.2774 705.255 31.2774 701.945 Q31.2774 698.89 29.1246 697.177 Q26.995 695.441 23.1756 695.441 L19.1478 695.441 L19.1478 691.598 L23.3608 691.598 Q26.8098 691.598 28.6385 690.232 Q30.4672 688.843 30.4672 686.251 Q30.4672 683.589 28.5691 682.177 Q26.6941 680.742 23.1756 680.742 Q21.2543 680.742 19.0552 681.158 Q16.8562 681.575 14.2173 682.455 L14.2173 678.288 Q16.8793 677.547 19.1941 677.177 Q21.5321 676.807 23.5922 676.807 Q28.9163 676.807 32.0181 679.237 Q35.12 681.644 35.12 685.765 Q35.12 688.635 33.4764 690.626 Q31.8329 692.593 28.8005 693.357 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 680.51 Q51.1847 680.51 49.356 684.075 Q47.5504 687.617 47.5504 694.746 Q47.5504 701.853 49.356 705.417 Q51.1847 708.959 54.7958 708.959 Q58.43 708.959 60.2356 705.417 Q62.0643 701.853 62.0643 694.746 Q62.0643 687.617 60.2356 684.075 Q58.43 680.51 54.7958 680.51 M54.7958 676.807 Q60.6059 676.807 63.6615 681.413 Q66.7402 685.996 66.7402 694.746 Q66.7402 703.473 63.6615 708.079 Q60.6059 712.663 54.7958 712.663 Q48.9856 712.663 45.9069 708.079 Q42.8514 703.473 42.8514 694.746 Q42.8514 685.996 45.9069 681.413 Q48.9856 676.807 54.7958 676.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M27.4811 470.681 L15.6756 489.13 L27.4811 489.13 L27.4811 470.681 M26.2543 466.607 L32.1339 466.607 L32.1339 489.13 L37.0644 489.13 L37.0644 493.019 L32.1339 493.019 L32.1339 501.167 L27.4811 501.167 L27.4811 493.019 L11.8793 493.019 L11.8793 488.505 L26.2543 466.607 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 469.686 Q51.1847 469.686 49.356 473.25 Q47.5504 476.792 47.5504 483.922 Q47.5504 491.028 49.356 494.593 Q51.1847 498.134 54.7958 498.134 Q58.43 498.134 60.2356 494.593 Q62.0643 491.028 62.0643 483.922 Q62.0643 476.792 60.2356 473.25 Q58.43 469.686 54.7958 469.686 M54.7958 465.982 Q60.6059 465.982 63.6615 470.588 Q66.7402 475.172 66.7402 483.922 Q66.7402 492.648 63.6615 497.255 Q60.6059 501.838 54.7958 501.838 Q48.9856 501.838 45.9069 497.255 Q42.8514 492.648 42.8514 483.922 Q42.8514 475.172 45.9069 470.588 Q48.9856 465.982 54.7958 465.982 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M14.6803 255.782 L33.0366 255.782 L33.0366 259.717 L18.9626 259.717 L18.9626 268.19 Q19.9811 267.842 20.9997 267.68 Q22.0182 267.495 23.0367 267.495 Q28.8237 267.495 32.2033 270.666 Q35.5829 273.838 35.5829 279.254 Q35.5829 284.833 32.1107 287.935 Q28.6385 291.014 22.3191 291.014 Q20.1432 291.014 17.8747 290.643 Q15.6293 290.273 13.2219 289.532 L13.2219 284.833 Q15.3052 285.967 17.5275 286.523 Q19.7497 287.078 22.2265 287.078 Q26.2311 287.078 28.5691 284.972 Q30.907 282.865 30.907 279.254 Q30.907 275.643 28.5691 273.537 Q26.2311 271.43 22.2265 271.43 Q20.3515 271.43 18.4765 271.847 Q16.6247 272.264 14.6803 273.143 L14.6803 255.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 258.861 Q51.1847 258.861 49.356 262.426 Q47.5504 265.967 47.5504 273.097 Q47.5504 280.203 49.356 283.768 Q51.1847 287.31 54.7958 287.31 Q58.43 287.31 60.2356 283.768 Q62.0643 280.203 62.0643 273.097 Q62.0643 265.967 60.2356 262.426 Q58.43 258.861 54.7958 258.861 M54.7958 255.157 Q60.6059 255.157 63.6615 259.764 Q66.7402 264.347 66.7402 273.097 Q66.7402 281.824 63.6615 286.43 Q60.6059 291.014 54.7958 291.014 Q48.9856 291.014 45.9069 286.43 Q42.8514 281.824 42.8514 273.097 Q42.8514 264.347 45.9069 259.764 Q48.9856 255.157 54.7958 255.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M25.2126 60.3742 Q22.0645 60.3742 20.2126 62.527 Q18.3839 64.6797 18.3839 68.4297 Q18.3839 72.1566 20.2126 74.3325 Q22.0645 76.4852 25.2126 76.4852 Q28.3607 76.4852 30.1894 74.3325 Q32.0413 72.1566 32.0413 68.4297 Q32.0413 64.6797 30.1894 62.527 Q28.3607 60.3742 25.2126 60.3742 M34.495 45.7215 L34.495 49.9807 Q32.7357 49.1474 30.9302 48.7076 Q29.1478 48.2678 27.3885 48.2678 Q22.7589 48.2678 20.3052 51.3928 Q17.8747 54.5178 17.5275 60.8372 Q18.8932 58.8233 20.9534 57.7585 Q23.0135 56.6705 25.4904 56.6705 Q30.6987 56.6705 33.7079 59.8418 Q36.7403 62.9899 36.7403 68.4297 Q36.7403 73.7538 33.5922 76.9713 Q30.4441 80.1889 25.2126 80.1889 Q19.2173 80.1889 16.046 75.6056 Q12.8747 70.9992 12.8747 62.2723 Q12.8747 54.0779 16.7636 49.2169 Q20.6524 44.3326 27.2033 44.3326 Q28.9626 44.3326 30.745 44.6799 Q32.5505 45.0271 34.495 45.7215 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M54.7958 48.0363 Q51.1847 48.0363 49.356 51.6011 Q47.5504 55.1428 47.5504 62.2723 Q47.5504 69.3788 49.356 72.9436 Q51.1847 76.4852 54.7958 76.4852 Q58.43 76.4852 60.2356 72.9436 Q62.0643 69.3788 62.0643 62.2723 Q62.0643 55.1428 60.2356 51.6011 Q58.43 48.0363 54.7958 48.0363 M54.7958 44.3326 Q60.6059 44.3326 63.6615 48.9391 Q66.7402 53.5224 66.7402 62.2723 Q66.7402 70.9992 63.6615 75.6056 Q60.6059 80.1889 54.7958 80.1889 Q48.9856 80.1889 45.9069 75.6056 Q42.8514 70.9992 42.8514 62.2723 Q42.8514 53.5224 45.9069 48.9391 Q48.9856 44.3326 54.7958 44.3326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-57.6648 854.009 L-54.8002 854.009 L-54.8002 880.936 Q-48.7528 880.554 -45.5699 877.308 Q-42.4189 874.029 -42.4189 868.205 Q-42.4189 864.831 -43.2464 861.68 Q-44.074 858.497 -45.7291 855.378 L-40.1909 855.378 Q-38.8541 858.529 -38.1539 861.839 Q-37.4536 865.149 -37.4536 868.555 Q-37.4536 877.085 -42.4189 882.082 Q-47.3841 887.047 -55.8505 887.047 Q-64.6034 887.047 -69.7278 882.336 Q-74.884 877.594 -74.884 869.573 Q-74.884 862.38 -70.237 858.21 Q-65.6219 854.009 -57.6648 854.009 M-59.3835 859.866 Q-64.1896 859.929 -67.0542 862.571 Q-69.9187 865.181 -69.9187 869.51 Q-69.9187 874.411 -67.1497 877.371 Q-64.3806 880.299 -59.3517 880.745 L-59.3835 859.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-59.8927 814.764 L-38.3767 814.764 L-38.3767 820.621 L-59.7018 820.621 Q-64.7625 820.621 -67.277 822.594 Q-69.7914 824.568 -69.7914 828.514 Q-69.7914 833.257 -66.7677 835.994 Q-63.744 838.731 -58.5241 838.731 L-38.3767 838.731 L-38.3767 844.62 L-74.0246 844.62 L-74.0246 838.731 L-68.4865 838.731 Q-71.7011 836.631 -73.2926 833.798 Q-74.884 830.933 -74.884 827.209 Q-74.884 821.067 -71.0646 817.916 Q-67.277 814.764 -59.8927 814.764 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-57.6648 772.592 L-54.8002 772.592 L-54.8002 799.519 Q-48.7528 799.137 -45.5699 795.89 Q-42.4189 792.612 -42.4189 786.787 Q-42.4189 783.413 -43.2464 780.262 Q-44.074 777.08 -45.7291 773.96 L-40.1909 773.96 Q-38.8541 777.111 -38.1539 780.422 Q-37.4536 783.732 -37.4536 787.137 Q-37.4536 795.667 -42.4189 800.664 Q-47.3841 805.63 -55.8505 805.63 Q-64.6034 805.63 -69.7278 800.919 Q-74.884 796.177 -74.884 788.156 Q-74.884 780.963 -70.237 776.793 Q-65.6219 772.592 -57.6648 772.592 M-59.3835 778.448 Q-64.1896 778.512 -67.0542 781.154 Q-69.9187 783.764 -69.9187 788.092 Q-69.9187 792.994 -67.1497 795.954 Q-64.3806 798.882 -59.3517 799.328 L-59.3835 778.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-68.5501 742.323 Q-69.123 743.309 -69.3777 744.487 Q-69.6641 745.633 -69.6641 747.033 Q-69.6641 751.999 -66.4176 754.672 Q-63.2029 757.314 -57.1555 757.314 L-38.3767 757.314 L-38.3767 763.202 L-74.0246 763.202 L-74.0246 757.314 L-68.4865 757.314 Q-71.733 755.468 -73.2926 752.508 Q-74.884 749.548 -74.884 745.315 Q-74.884 744.71 -74.7885 743.978 Q-74.7248 743.246 -74.5657 742.355 L-68.5501 742.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-56.6144 713.868 Q-62.9801 713.868 -66.4813 716.51 Q-69.9824 719.12 -69.9824 723.862 Q-69.9824 728.573 -66.4813 731.215 Q-62.9801 733.825 -56.6144 733.825 Q-50.2805 733.825 -46.7794 731.215 Q-43.2783 728.573 -43.2783 723.862 Q-43.2783 719.12 -46.7794 716.51 Q-50.2805 713.868 -56.6144 713.868 M-42.8008 708.012 Q-33.6979 708.012 -29.2737 712.054 Q-24.8177 716.096 -24.8177 724.435 Q-24.8177 727.522 -25.2951 730.26 Q-25.7407 732.997 -26.6956 735.575 L-32.3929 735.575 Q-30.9924 732.997 -30.324 730.483 Q-29.6556 727.968 -29.6556 725.358 Q-29.6556 719.597 -32.6794 716.733 Q-35.6712 713.868 -41.7505 713.868 L-44.6469 713.868 Q-41.4959 715.682 -39.9363 718.515 Q-38.3767 721.348 -38.3767 725.294 Q-38.3767 731.851 -43.3737 735.862 Q-48.3708 739.872 -56.6144 739.872 Q-64.8898 739.872 -69.8869 735.862 Q-74.884 731.851 -74.884 725.294 Q-74.884 721.348 -73.3244 718.515 Q-71.7648 715.682 -68.6138 713.868 L-74.0246 713.868 L-74.0246 708.012 L-42.8008 708.012 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M-35.0665 681.116 Q-28.7008 683.599 -26.7592 685.954 Q-24.8177 688.31 -24.8177 692.256 L-24.8177 696.935 L-29.7193 696.935 L-29.7193 693.498 Q-29.7193 691.079 -30.8651 689.742 Q-32.011 688.405 -36.276 686.782 L-38.9496 685.732 L-74.0246 700.15 L-74.0246 693.943 L-46.1428 682.803 L-74.0246 671.663 L-74.0246 665.457 L-35.0665 681.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1171.84 167.128,1191.95 167.835,1055.4 168.543,924.889 169.251,807.486 169.959,703.106 170.667,740.713 171.374,644.649 172.082,559.183 172.79,477.334 173.498,405.006 174.206,444.699 174.913,473.557 175.621,407.26 176.329,348.525 177.037,295.826 177.744,249.642 178.452,208.54 179.16,172.364 179.868,140.946 180.576,113.783 181.283,89.6034 181.991,125.03 182.699,156.598 183.407,137.398 184.115,122.194 184.822,109.174 185.53,99.6579 186.238,94.3247 186.946,90.8706 187.653,88.5087 188.361,89.2956 189.069,93.6077 189.777,152.231 190.485,156.542 191.192,188.062 191.9,196.254 192.608,226.413 193.316,255.037 194.024,283.654 194.731,315.039 195.439,327.487 196.147,341.794 196.855,356.524 197.563,371.881 198.27,386.667 198.978,401.626 199.686,477.406 200.394,491.362 201.101,505.621 201.809,530.53 202.517,564.061 203.225,588.552 203.933,611.012 204.64,633.444 205.348,655.355 206.056,676.206 206.764,690.003 207.472,717.537 208.179,743.219 208.887,762.277 209.595,780.272 210.303,797.9 211.01,809.012 211.718,820.779 212.426,837.828 213.134,860.317 213.842,886.599 214.549,901.112 215.257,920.762 215.965,935.767 216.673,959.15 217.381,976.557 218.088,989.35 218.796,1014.24 219.504,1029.7 220.212,1044.09 220.92,1058.23 221.627,1071.54 222.335,1091.86 223.043,1097.32 223.751,1109.88 224.458,1118.85 225.166,1134.13 225.874,1149.24 226.582,1160.89 227.29,1168.04 227.997,1169.3 228.705,1173.89 229.413,1185.17 230.121,1195.59 230.829,1203.13 231.536,1210.63 232.244,1223.78 232.952,1236.17 233.66,1245.18 234.368,1254.35 235.075,1260.4 235.783,1263.61 236.491,1268.85 237.199,1271.77 237.906,1282.43 238.614,1290.31 239.322,1292.97 240.03,1298.5 240.738,1301.19 241.445,1306.28 242.153,1314.52 242.861,1317.02 243.569,1319.84 244.277,1324.73 244.984,1332.07 245.692,1336.66 246.4,1339.16 247.108,1344.07 247.815,1350.73 248.523,1352.57 249.231,1361.16 249.939,1362.93 250.647,1366.72 251.354,1366.29 252.062,1372.08 252.77,1373.93 253.478,1381.6 254.186,1387.03 254.893,1387.67 255.601,1390.96 256.309,1391.88 257.017,1395.01 257.725,1395.79 258.432,1396.5 259.14,1397.42 259.848,1402.59 260.556,1405.35 261.263,1404 261.971,1404.96 262.679,1405.69 263.387,1412.29 264.095,1413.03 264.802,1413.85 265.51,1416.58 266.218,1422.9 266.926,1424.74 267.634,1430.58 268.341,1430.55 269.049,1432.18 269.757,1435.72 270.465,1433.36 271.172,1436.84 271.88,1434.94 272.588,1432.51 273.296,1430.55 274.004,1432.47 274.711,1434.27 275.419,1434.14 276.127,1436.04 276.835,1441.44 277.543,1442.85 278.25,1443.81 278.958,1445.15 279.666,1448.54 280.374,1448.24 281.082,1449.21 281.789,1450.45 282.497,1450.11 283.205,1456.53 283.913,1457.27 284.62,1456.17 285.328,1455.28 286.036,1454 286.744,1453.2 287.452,1454.24 288.159,1453.46 288.867,1452.61 289.575,1450.12 290.283,1451.4 290.991,1450.94 291.698,1451.74 292.406,1452.76 293.114,1448.51 293.822,1450.17 294.529,1451.16 295.237,1450.77 295.945,1451.88 296.653,1451.67 297.361,1456.64 298.068,1457.53 298.776,1458.58 299.484,1457.72 300.192,1456.9 300.9,1457.8 301.607,1460.36 302.315,1459.07 303.023,1459.69 303.731,1461.91 304.439,1464 305.146,1462.9 305.854,1461.73 306.562,1460.37 307.27,1459.2 307.977,1461.57 308.685,1458.52 309.393,1461.1 310.101,1460 310.809,1459.01 311.516,1458.34 312.224,1459.24 312.932,1458.02 313.64,1458.8 314.348,1461.28 315.055,1456.17 315.763,1460.86 316.471,1460.86 317.179,1461.37 317.886,1459.87 318.594,1458.79 319.302,1459.92 320.01,1458.85 320.718,1454.31 321.425,1453.83 322.133,1458.08 322.841,1457.17 323.549,1461.41 324.257,1460.16 324.964,1455.23 325.672,1454.17 326.38,1454.91 327.088,1452.21 327.796,1453.14 328.503,1453.94 329.211,1453.29 329.919,1454.15 330.627,1453.22 331.334,1449.35 332.042,1445.14 332.75,1443.59 333.458,1441.22 334.166,1442.91 334.873,1442.29 335.581,1438.4 336.289,1438.41 336.997,1440.01 337.705,1439.75 338.412,1444.67 339.12,1444.64 339.828,1441.97 340.536,1442.92 341.243,1446.17 341.951,1445.89 342.659,1447.17 343.367,1448.25 344.075,1446.23 344.782,1445.87 345.49,1443.59 346.198,1446.82 346.906,1446.36 347.614,1444.04 348.321,1440.46 349.029,1439.85 349.737,1439.47 350.445,1439.08 351.153,1435.33 351.86,1434.93 352.568,1436.71 353.276,1438.33 353.984,1440.1 354.691,1440.06 355.399,1439.85 356.107,1439.74 356.815,1436.04 357.523,1437.65 358.23,1438.86 358.938,1440.42 359.646,1445.38 360.354,1444.47 361.062,1444.21 361.769,1443.77 362.477,1443.34 363.185,1446.56 363.893,1445.95 364.601,1445.08 365.308,1445.95 366.016,1445.49 366.724,1446.49 367.432,1447.76 368.139,1450.81 368.847,1448.56 369.555,1449.53 370.263,1448.52 370.971,1447.42 371.678,1449.88 372.386,1447.04 373.094,1446.3 373.802,1445.74 374.51,1444.9 375.217,1447.4 375.925,1446.61 376.633,1445.39 377.341,1444.65 378.048,1448.97 378.756,1446.85 379.464,1445.96 380.172,1445.41 380.88,1444.92 381.587,1444.34 382.295,1443.54 383.003,1443.05 383.711,1442.22 384.419,1437.87 385.126,1439.21 385.834,1441.9 386.542,1442.89 387.25,1442.27 387.958,1439.7 388.665,1442.46 389.373,1441.6 390.081,1439.37 390.789,1438.78 391.496,1436.51 392.204,1439.69 392.912,1447.45 393.62,1444.33 394.328,1443.35 395.035,1446.24 395.743,1443.81 396.451,1441.31 397.159,1442.91 397.867,1443.98 398.574,1443.12 399.282,1440.78 399.99,1440.44 400.698,1439.85 401.405,1442.67 402.113,1445.11 402.821,1445.93 403.529,1446.71 404.237,1445.8 404.944,1446.9 405.652,1449.19 406.36,1441.22 407.068,1438.84 407.776,1440.04 408.483,1439.53 409.191,1437.65 409.899,1437.08 410.607,1433.21 411.315,1432.58 412.022,1430.58 412.73,1432.1 413.438,1435 414.146,1439.47 414.853,1437.09 415.561,1438.45 416.269,1437.76 416.977,1440.2 417.685,1439.69 418.392,1437.3 419.1,1438.55 419.808,1435.97 420.516,1437.27 421.224,1436.68 421.931,1432.57 422.639,1430.52 423.347,1429.91 424.055,1428.15 424.762,1428.15 425.47,1428.29 426.178,1428.12 426.886,1429.88 427.594,1431.29 428.301,1431.13 429.009,1430.65 429.717,1427.02 430.425,1433.91 431.133,1433.31 431.84,1432.92 432.548,1435.83 433.256,1433.58 433.964,1432.87 434.672,1437.67 435.379,1436.83 436.087,1436.63 436.795,1435.84 437.503,1435.44 438.21,1437.91 438.918,1437.43 439.626,1436.16 440.334,1437.36 441.042,1438.66 441.749,1439.42 442.457,1439 443.165,1441.37 443.873,1440.43 444.581,1439.47 445.288,1440.3 445.996,1442.96 446.704,1440.26 447.412,1435.78 448.119,1433.61 448.827,1429.69 449.535,1429.34 450.243,1427.04 450.951,1426.91 451.658,1426.96 452.366,1424.81 453.074,1424.55 453.782,1429.83 454.49,1431.2 455.197,1429.18 455.905,1432.35 456.613,1428.27 457.321,1426.44 458.029,1427.75 458.736,1431.01 459.444,1430.27 460.152,1428.46 460.86,1429.79 461.567,1429.63 462.275,1427.63 462.983,1429.11 463.691,1427.05 464.399,1426.88 465.106,1426.84 465.814,1424.9 466.522,1425 467.23,1424.72 467.938,1422.58 468.645,1424.45 469.353,1424.04 470.061,1424.12 470.769,1429.1 471.476,1428.61 472.184,1428.66 472.892,1428.42 473.6,1429.8 474.308,1427.42 475.015,1427 475.723,1423.42 476.431,1421.61 477.139,1420.33 477.847,1417 478.554,1417.33 479.262,1417.43 479.97,1417.93 480.678,1418.14 481.386,1419.79 482.093,1418.08 482.801,1418.22 483.509,1420.16 484.217,1423.73 484.924,1423.76 485.632,1423.77 486.34,1423.56 487.048,1425.16 487.756,1423.33 488.463,1423.31 489.171,1418.16 489.879,1420.03 490.587,1418.46 491.295,1415.28 492.002,1415.75 492.71,1419.55 493.418,1417.85 494.126,1418.27 494.834,1418.74 495.541,1422.25 496.249,1425.87 496.957,1424.44 497.665,1422.7 498.372,1422.95 499.08,1421.3 499.788,1421.33 500.496,1419.78 501.204,1419.89 501.911,1417.98 502.619,1416.51 503.327,1418.79 504.035,1417.5 504.743,1421.15 505.45,1422.62 506.158,1425.77 506.866,1425.04 507.574,1424.64 508.281,1421.1 508.989,1424.42 509.697,1425.57 510.405,1426.99 511.113,1426.77 511.82,1426.19 512.528,1426.1 513.236,1425.76 513.944,1420.61 514.652,1420.24 515.359,1420.23 516.067,1418.48 516.775,1416.62 517.483,1418.51 518.191,1421.9 518.898,1423.84 519.606,1420.14 520.314,1422.04 521.022,1419.96 521.729,1421.58 522.437,1421.38 523.145,1417.83 523.853,1421.49 524.561,1423.29 525.268,1424.85 525.976,1424.53 526.684,1425.97 527.392,1425.39 528.1,1419.98 528.807,1426.55 529.515,1429.57 530.223,1431.1 530.931,1431.98 531.638,1429.35 532.346,1428.77 533.054,1429.93 533.762,1429.05 534.47,1435.25 535.177,1434.5 535.885,1433.66 536.593,1437.93 537.301,1440.5 538.009,1436.01 538.716,1435.07 539.424,1434.43 540.132,1430.03 540.84,1429.16 541.548,1427.35 542.255,1424.99 542.963,1424.59 543.671,1424.42 544.379,1425.99 545.086,1420.53 545.794,1423.98 546.502,1423.64 547.21,1423.54 547.918,1421.64 548.625,1422.71 549.333,1418.67 550.041,1416.74 550.749,1416.83 551.457,1415.33 552.164,1415.66 552.872,1416.05 553.58,1420.02 554.288,1418.06 554.995,1417.94 555.703,1419.51 556.411,1419.61 557.119,1421.08 557.827,1424.47 558.534,1418.48 559.242,1421.91 559.95,1419.91 560.658,1419.92 561.366,1416.48 562.073,1415.01 562.781,1416.8 563.489,1418.72 564.197,1422.48 564.905,1422.52 565.612,1423.68 566.32,1421.86 567.028,1419.95 567.736,1419.43 568.443,1417.71 569.151,1412.49 569.859,1413.06 570.567,1413.31 571.275,1415.35 571.982,1415.41 572.69,1417.71 573.398,1422.66 574.106,1420.91 574.814,1420.88 575.521,1421.12 576.229,1422.7 576.937,1423.71 577.645,1419.77 578.352,1417.81 579.06,1414.39 579.768,1414.68 580.476,1415.15 581.184,1413.71 581.891,1413.93 582.599,1415.49 583.307,1415.38 584.015,1415.59 584.723,1415.59 585.43,1417.57 586.138,1420.89 586.846,1424.16 587.554,1423.63 588.262,1423.25 588.969,1422.88 589.677,1420.68 590.385,1422.17 591.093,1421.9 591.8,1421.43 592.508,1417.84 593.216,1417.73 593.924,1417.56 594.632,1417.7 595.339,1417.78 596.047,1420.85 596.755,1417.28 597.463,1415.88 598.171,1415.85 598.878,1415.87 599.586,1417.51 600.294,1412.51 601.002,1409.17 601.71,1413.23 602.417,1411.68 603.125,1411.64 603.833,1416.35 604.541,1418.14 605.248,1418.26 605.956,1423.53 606.664,1423.08 607.372,1421.34 608.08,1419.11 608.787,1421.06 609.495,1420.46 610.203,1420.41 610.911,1418.65 611.619,1421.78 612.326,1421.53 613.034,1421.31 613.742,1421.22 614.45,1422.96 615.157,1426.38 615.865,1424.79 616.573,1427.83 617.281,1429.23 617.989,1431.73 618.696,1430.78 619.404,1426.92 620.112,1428.35 620.82,1422.81 621.528,1417.58 622.235,1417.42 622.943,1415.53 623.651,1416.17 624.359,1418.16 625.067,1417.97 625.774,1416.02 626.482,1412.61 627.19,1414.36 627.898,1416.44 628.605,1414.72 629.313,1414.68 630.021,1416.68 630.729,1414.92 631.437,1416.85 632.144,1415.09 632.852,1411.54 633.56,1411.65 634.268,1410.85 634.976,1410.84 635.683,1410.53 636.391,1410.96 637.099,1409.43 637.807,1410.05 638.514,1404.8 639.222,1407.35 639.93,1409.55 640.638,1411.35 641.346,1409.93 642.053,1409.82 642.761,1408.37 643.469,1408.64 644.177,1410.51 644.885,1409.05 645.592,1411.63 646.3,1410.3 647.008,1405.32 647.716,1405.94 648.424,1403.11 649.131,1405.26 649.839,1405.91 650.547,1408.57 651.255,1406.95 651.962,1408.81 652.67,1409.16 653.378,1411.4 654.086,1414.74 654.794,1411.42 655.501,1409.72 656.209,1408.35 656.917,1408.67 657.625,1409.29 658.333,1413.16 659.04,1413.6 659.748,1413.8 660.456,1413.88 661.164,1415.66 661.871,1417.15 662.579,1418.67 663.287,1423.66 663.995,1423.24 664.703,1422.7 665.41,1424.02 666.118,1420.31 666.826,1421.46 667.534,1423.14 668.242,1420.9 668.949,1418.78 669.657,1420.71 670.365,1422.64 671.073,1424 671.781,1420.35 672.488,1416.27 673.196,1416.21 673.904,1419.68 674.612,1416.25 675.319,1417.9 676.027,1421.12 676.735,1419.28 677.443,1420.68 678.151,1420.31 678.858,1418.42 679.566,1417.98 680.274,1419.47 680.982,1417.68 681.69,1413.97 682.397,1412.45 683.105,1409.37 683.813,1409.98 684.521,1413.52 685.228,1412.02 685.936,1415.37 686.644,1416.95 687.352,1416.85 688.06,1414.78 688.767,1409.49 689.475,1414.96 690.183,1414.89 690.891,1416.7 691.599,1416.27 692.306,1419.43 693.014,1419.15 693.722,1419.03 694.43,1418.72 695.138,1413.58 695.845,1417.36 696.553,1417.01 697.261,1413.45 697.969,1416.64 698.676,1416.49 699.384,1416.48 700.092,1413.06 700.8,1413.15 701.508,1414.87 702.215,1416.7 702.923,1414.65 703.631,1413.06 704.339,1416.56 705.047,1419.99 705.754,1416.34 706.462,1419.71 707.17,1414.3 707.878,1414.39 708.585,1416.24 709.293,1412.92 710.001,1413.06 710.709,1413.15 711.417,1411.14 712.124,1411.38 712.832,1414.96 713.54,1417.01 714.248,1420.08 714.956,1414.39 715.663,1414.31 716.371,1414.35 717.079,1414.42 717.787,1414.17 718.495,1410.75 719.202,1414.42 719.91,1414.23 720.618,1415.62 721.326,1417.26 722.033,1415.62 722.741,1417.03 723.449,1418.86 724.157,1420.84 724.865,1420.6 725.572,1418.75 726.28,1420.34 726.988,1419.91 727.696,1423.05 728.404,1421.2 729.111,1420.76 729.819,1422.05 730.527,1421.55 731.235,1419.7 731.943,1421.41 732.65,1424.24 733.358,1425.43 734.066,1422.75 734.774,1423.99 735.481,1423.33 736.189,1421.01 736.897,1427.38 737.605,1426.88 738.313,1424.4 739.02,1422.22 739.728,1419.96 740.436,1410.89 741.144,1414.84 741.852,1413.41 742.559,1415.05 743.267,1414.95 743.975,1413.24 744.683,1412.79 745.39,1413.09 746.098,1414.96 746.806,1411.36 747.514,1416.62 748.222,1416.47 748.929,1417.69 749.637,1415.57 750.345,1417.18 751.053,1417.62 751.761,1413.7 752.468,1413.58 753.176,1411.77 753.884,1413.73 754.592,1415.91 755.3,1413.82 756.007,1412.44 756.715,1409.13 757.423,1409.52 758.131,1404.82 758.838,1407.08 759.546,1405.8 760.254,1406.1 760.962,1409.63 761.67,1407.83 762.377,1409.81 763.085,1409.95 763.793,1409.84 764.501,1412.18 765.209,1408.52 765.916,1410.39 766.624,1408.93 767.332,1407.56 768.04,1407.61 768.747,1411.04 769.455,1411.39 770.163,1411.56 770.871,1409.86 771.579,1413.62 772.286,1415.1 772.994,1416.85 773.702,1416.54 774.41,1416.42 775.118,1417.89 775.825,1416.31 776.533,1412.93 777.241,1414.41 777.949,1417.82 778.657,1419.3 779.364,1417.65 780.072,1417.56 780.78,1416.93 781.488,1413.41 782.195,1414.7 782.903,1417.86 783.611,1417.1 784.319,1416.97 785.027,1413.34 785.734,1413.12 786.442,1412.98 787.15,1412.85 787.858,1411.1 788.566,1411.29 789.273,1407.92 789.981,1410.26 790.689,1410.21 791.397,1410.52 792.104,1410.8 792.812,1408.86 793.52,1409.26 794.228,1409.52 794.936,1411.52 795.643,1417.11 796.351,1415.17 797.059,1416.67 797.767,1413.24 798.475,1413.27 799.182,1413.57 799.89,1415.26 800.598,1415.1 801.306,1409.76 802.014,1417.65 802.721,1414.06 803.429,1417.24 804.137,1420.32 804.845,1421.19 805.552,1424.13 806.26,1425.33 806.968,1428.05 807.676,1427.49 808.384,1427.03 809.091,1424.74 809.799,1425.79 810.507,1426.66 811.215,1424.55 811.923,1421.91 812.63,1418.32 813.338,1418.03 814.046,1417.78 814.754,1414.44 815.461,1416.24 816.169,1423.13 816.877,1425.74 817.585,1427.13 818.293,1424.96 819,1426.25 819.708,1424.14 820.416,1425.22 821.124,1426.48 821.832,1425.68 822.539,1424.93 823.247,1419.32 823.955,1421 824.663,1422.43 825.371,1425.49 826.078,1426.8 826.786,1426.31 827.494,1423.97 828.202,1419.8 828.909,1422.97 829.617,1422.62 830.325,1420.65 831.033,1423.4 831.741,1424.48 832.448,1422.13 833.156,1421.77 833.864,1419.69 834.572,1417.69 835.28,1418.81 835.987,1415.48 836.695,1413.67 837.403,1413.56 838.111,1411.64 838.818,1411.68 839.526,1408.17 840.234,1408.51 840.942,1410.51 841.65,1407.22 842.357,1405.95 843.065,1405.89 843.773,1404.46 844.481,1408.03 845.189,1405.2 845.896,1405.35 846.604,1402.83 847.312,1399.81 848.02,1402.22 848.728,1401.15 849.435,1403.46 850.143,1405.63 850.851,1405.83 851.559,1402.66 852.266,1399.99 852.974,1400.71 853.682,1397.77 854.39,1403.83 855.098,1406.38 855.805,1404.77 856.513,1407.04 857.221,1405.55 857.929,1407.61 858.637,1406.23 859.344,1406.29 860.052,1405.27 860.76,1404.23 861.468,1408.2 862.176,1408.37 862.883,1410.36 863.591,1412.36 864.299,1410.85 865.007,1407.52 865.714,1408.25 866.422,1410.19 867.13,1407.46 867.838,1408.13 868.546,1408.59 869.253,1408.78 869.961,1409.22 870.669,1410.67 871.377,1410.62 872.085,1409.25 872.792,1410.9 873.5,1408.06 874.208,1406.6 874.916,1410.02 875.623,1411.78 876.331,1416.87 877.039,1414.93 877.747,1416.31 878.455,1412.62 879.162,1413.05 879.87,1411.55 880.578,1411.95 881.286,1411.9 881.994,1417.18 882.701,1417.24 883.409,1415.64 884.117,1415.91 884.825,1419.07 885.533,1418.75 886.24,1421.93 886.948,1421.68 887.656,1422.92 888.364,1422.68 889.071,1421.84 889.779,1421.53 890.487,1417.62 891.195,1417.64 891.903,1420.73 892.61,1420.24 893.318,1419.8 894.026,1419.64 894.734,1419.34 895.442,1419.11 896.149,1415.02 896.857,1409.6 897.565,1409.48 898.273,1409.77 898.98,1409.76 899.688,1411.5 900.396,1413.45 901.104,1409.69 901.812,1409.74 902.519,1408.25 903.227,1406.7 903.935,1406.91 904.643,1407.48 905.351,1407.8 906.058,1406.32 906.766,1406.89 907.474,1402.29 908.182,1404.44 908.89,1405.05 909.597,1405.74 910.305,1407.84 911.013,1410.37 911.721,1416.02 912.428,1417.29 913.136,1418.58 913.844,1420.12 914.552,1419.8 915.26,1419.66 915.967,1419.32 916.675,1415.73 917.383,1415.6 918.091,1413.54 918.799,1413.52 919.506,1413.52 920.214,1415.17 920.922,1416.87 921.63,1418.46 922.337,1419.76 923.045,1418.11 923.753,1414.49 924.461,1416.08 925.169,1415.94 925.876,1414.08 926.584,1412.31 927.292,1412.22 928,1415.35 928.708,1414.78 929.415,1414.7 930.123,1414.61 930.831,1416.23 931.539,1414.02 932.247,1412.15 932.954,1413.64 933.662,1411.87 934.37,1410.36 935.078,1410.77 935.785,1412.5 936.493,1409.55 937.201,1407.78 937.909,1409.88 938.617,1406.45 939.324,1404.73 940.032,1405.41 940.74,1404.09 941.448,1404.66 942.156,1405.04 942.863,1405.81 943.571,1402.47 944.279,1402.96 944.987,1401.81 945.694,1400.5 946.402,1404.96 947.11,1407.1 947.818,1407.27 948.526,1409.13 949.233,1409.29 949.941,1412.98 950.649,1410.99 951.357,1411.19 952.065,1411.37 952.772,1406.97 953.48,1405.58 954.188,1407.82 954.896,1408.23 955.604,1406.62 956.311,1408.63 957.019,1405.19 957.727,1404.18 958.435,1402.72 959.142,1402.9 959.85,1405.34 960.558,1405.52 961.266,1405.95 961.974,1404.55 962.681,1405.41 963.389,1407.38 964.097,1407.67 964.805,1404.6 965.513,1408.46 966.22,1408.69 966.928,1409.36 967.636,1409.72 968.344,1411.42 969.051,1416.32 969.759,1422.74 970.467,1424.08 971.175,1424.97 971.883,1422.7 972.59,1422.04 973.298,1421.39 974.006,1422.7 974.714,1423.79 975.422,1424.53 976.129,1424.22 976.837,1421.97 977.545,1421.69 978.253,1419.52 978.961,1418.89 979.668,1425.21 980.376,1424.44 981.084,1423.74 981.792,1423 982.499,1419.28 983.207,1419 983.915,1421.91 984.623,1424.59 985.331,1423.8 986.038,1423.01 986.746,1424.08 987.454,1425.61 988.162,1425.04 988.87,1424.48 989.577,1420.67 990.285,1421.81 990.993,1422.95 991.701,1420.85 992.409,1420.31 993.116,1416.34 993.824,1415.93 994.532,1410.64 995.24,1411.98 995.947,1410.18 996.655,1406.39 997.363,1410.18 998.071,1411.91 998.779,1413.66 999.486,1413.39 1000.19,1413.32 1000.9,1413.32 1001.61,1411.4 1002.32,1408.62 1003.03,1407.31 1003.73,1405.95 1004.44,1402.54 1005.15,1402.97 1005.86,1403.72 1006.56,1404.33 1007.27,1406.82 1007.98,1406.65 1008.69,1405.71 1009.4,1405.92 1010.1,1406.19 1010.81,1408.1 1011.52,1408.22 1012.23,1406.75 1012.93,1408.87 1013.64,1405.63 1014.35,1404.26 1015.06,1406.61 1015.77,1406.77 1016.47,1410.37 1017.18,1417.1 1017.89,1420.14 1018.6,1414.71 1019.3,1414.76 1020.01,1413.11 1020.72,1424.88 1021.43,1427.45 1022.14,1425.24 1022.84,1422.99 1023.55,1422.57 1024.26,1423.91 1024.97,1423.34 1025.67,1425.89 1026.38,1421.68 1027.09,1419.68 1027.8,1421.06 1028.51,1420.67 1029.21,1420.26 1029.92,1417.78 1030.63,1417.72 1031.34,1415.98 1032.04,1415.72 1032.75,1414.01 1033.46,1412.35 1034.17,1412.19 1034.88,1406.89 1035.58,1407.23 1036.29,1407.18 1037,1407.48 1037.71,1409.39 1038.41,1407.75 1039.12,1406.12 1039.83,1406.48 1040.54,1405.13 1041.25,1403.99 1041.95,1406.19 1042.66,1401.45 1043.37,1403.72 1044.08,1410.89 1044.78,1409.39 1045.49,1409.63 1046.2,1409.4 1046.91,1410.82 1047.62,1410.55 1048.32,1410.48 1049.03,1407.17 1049.74,1405.53 1050.45,1405.83 1051.15,1407.78 1051.86,1411.61 1052.57,1410.06 1053.28,1408.48 1053.99,1410.26 1054.69,1408.32 1055.4,1404.72 1056.11,1403.59 1056.82,1404.05 1057.53,1406.17 1058.23,1410 1058.94,1410.15 1059.65,1410.58 1060.36,1412.56 1061.06,1414.33 1061.77,1415.73 1062.48,1413.72 1063.19,1413.42 1063.9,1411.81 1064.6,1408.57 1065.31,1408.98 1066.02,1412.24 1066.73,1410.14 1067.43,1413.35 1068.14,1416.28 1068.85,1417.55 1069.56,1417.17 1070.27,1418.44 1070.97,1421.49 1071.68,1425.9 1072.39,1423.84 1073.1,1423.31 1073.8,1421.28 1074.51,1424.45 1075.22,1420.65 1075.93,1418.71 1076.64,1414.65 1077.34,1414.79 1078.05,1412.86 1078.76,1414.58 1079.47,1411 1080.17,1414.67 1080.88,1414.84 1081.59,1418.12 1082.3,1413.04 1083.01,1414.59 1083.71,1412.46 1084.42,1413.84 1085.13,1419.04 1085.84,1415.19 1086.54,1417.16 1087.25,1415.22 1087.96,1413.44 1088.67,1414.76 1089.38,1414.79 1090.08,1412.7 1090.79,1414.35 1091.5,1417.53 1092.21,1422.3 1092.91,1421.85 1093.62,1424.48 1094.33,1423.82 1095.04,1423.4 1095.75,1424.51 1096.45,1424.02 1097.16,1423.22 1097.87,1426.37 1098.58,1427.24 1099.28,1426.39 1099.99,1429.2 1100.7,1431.59 1101.41,1425.23 1102.12,1425.98 1102.82,1421.96 1103.53,1421.72 1104.24,1417.78 1104.95,1417.84 1105.65,1412.49 1106.36,1412.52 1107.07,1412.46 1107.78,1410.61 1108.49,1412.46 1109.19,1411 1109.9,1411.15 1110.61,1404.26 1111.32,1400.99 1112.02,1406.86 1112.73,1408.83 1113.44,1408.98 1114.15,1409.24 1114.86,1410.98 1115.56,1408.97 1116.27,1408.12 1116.98,1408.04 1117.69,1406.51 1118.39,1411.87 1119.1,1412.13 1119.81,1412.36 1120.52,1408.86 1121.23,1408.8 1121.93,1407.19 1122.64,1408.76 1123.35,1405.51 1124.06,1402.73 1124.76,1403.21 1125.47,1403.54 1126.18,1405.94 1126.89,1406.05 1127.6,1406.63 1128.3,1407.16 1129.01,1403.86 1129.72,1406.18 1130.43,1409.89 1131.13,1412.01 1131.84,1410.3 1132.55,1410.18 1133.26,1410.35 1133.97,1410.35 1134.67,1412.13 1135.38,1408.67 1136.09,1408.91 1136.8,1407.24 1137.51,1404.16 1138.21,1404.65 1138.92,1404.92 1139.63,1405.34 1140.34,1405.93 1141.04,1406.21 1141.75,1406.71 1142.46,1411.91 1143.17,1412.31 1143.88,1414.15 1144.58,1414.34 1145.29,1414.29 1146,1414.31 1146.71,1414.12 1147.41,1417.37 1148.12,1417.24 1148.83,1417.18 1149.54,1415.08 1150.25,1416.47 1150.95,1417.84 1151.66,1417.64 1152.37,1418.75 1153.08,1417.14 1153.78,1417.05 1154.49,1416.84 1155.2,1417.86 1155.91,1417.94 1156.62,1417.55 1157.32,1417.46 1158.03,1417.17 1158.74,1421.88 1159.45,1419.79 1160.15,1421.04 1160.86,1422.28 1161.57,1416.79 1162.28,1420.14 1162.99,1426.68 1163.69,1424.42 1164.4,1423.36 1165.11,1422.66 1165.82,1423.94 1166.52,1423.31 1167.23,1419.41 1167.94,1417.34 1168.65,1420.66 1169.36,1418.32 1170.06,1416.37 1170.77,1416.29 1171.48,1415.96 1172.19,1412.34 1172.89,1414.29 1173.6,1415.96 1174.31,1408.9 1175.02,1410.72 1175.73,1415.68 1176.43,1417 1177.14,1418.21 1177.85,1412.76 1178.56,1412.57 1179.26,1412.5 1179.97,1410.38 1180.68,1410.37 1181.39,1406.62 1182.1,1403.37 1182.8,1405.15 1183.51,1405.83 1184.22,1406.3 1184.93,1406.93 1185.63,1413.85 1186.34,1411.56 1187.05,1408.27 1187.76,1410.19 1188.47,1408.24 1189.17,1408.41 1189.88,1406.88 1190.59,1410.69 1191.3,1411.09 1192,1409.51 1192.71,1408.16 1193.42,1404.6 1194.13,1403.29 1194.84,1404.08 1195.54,1404.92 1196.25,1408.92 1196.96,1410.98 1197.67,1409.28 1198.37,1409.63 1199.08,1411.6 1199.79,1413.18 1200.5,1409.78 1201.21,1411.85 1201.91,1415.43 1202.62,1415.49 1203.33,1417.34 1204.04,1422.62 1204.74,1422.33 1205.45,1420.08 1206.16,1421.11 1206.87,1420.7 1207.58,1417.23 1208.28,1416.83 1208.99,1414.64 1209.7,1414.71 1210.41,1414.69 1211.12,1413.09 1211.82,1413.29 1212.53,1415.1 1213.24,1414.89 1213.95,1413.03 1214.65,1414.92 1215.36,1418.48 1216.07,1418.4 1216.78,1412.99 1217.49,1412.92 1218.19,1412.65 1218.9,1414.03 1219.61,1415.98 1220.32,1410.57 1221.02,1410.82 1221.73,1412.37 1222.44,1413.92 1223.15,1413.88 1223.86,1412.12 1224.56,1410.14 1225.27,1406.97 1225.98,1407.61 1226.69,1406.54 1227.39,1411.91 1228.1,1410.44 1228.81,1412.37 1229.52,1412.06 1230.23,1412.16 1230.93,1415.04 1231.64,1414.81 1232.35,1414.79 1233.06,1414.28 1233.76,1411.03 1234.47,1409.38 1235.18,1409.41 1235.89,1404.32 1236.6,1406.12 1237.3,1409.86 1238.01,1411.32 1238.72,1416.69 1239.43,1417.83 1240.13,1419.36 1240.84,1417.05 1241.55,1413.11 1242.26,1412.84 1242.97,1412.78 1243.67,1411.33 1244.38,1411.43 1245.09,1411.31 1245.8,1411.52 1246.5,1409.97 1247.21,1406.26 1247.92,1399.7 1248.63,1400.53 1249.34,1399.28 1250.04,1398.22 1250.75,1401 1251.46,1398.15 1252.17,1393.83 1252.87,1393.41 1253.58,1394.4 1254.29,1395.47 1255,1391.11 1255.71,1397.45 1256.41,1394.8 1257.12,1396.03 1257.83,1397.09 1258.54,1397.89 1259.24,1398.63 1259.95,1401.38 1260.66,1400.33 1261.37,1398.8 1262.08,1397.81 1262.78,1398.65 1263.49,1399.41 1264.2,1401.81 1264.91,1404.18 1265.61,1409.99 1266.32,1410.02 1267.03,1408.48 1267.74,1404.98 1268.45,1403.69 1269.15,1404.37 1269.86,1406.62 1270.57,1405.07 1271.28,1403.9 1271.98,1402.33 1272.69,1403.01 1273.4,1403.81 1274.11,1400.9 1274.82,1401.71 1275.52,1403.71 1276.23,1402.38 1276.94,1402.53 1277.65,1403.34 1278.35,1405.51 1279.06,1407.43 1279.77,1407.93 1280.48,1406.6 1281.19,1408.59 1281.89,1408.91 1282.6,1409.41 1283.31,1409.24 1284.02,1411.18 1284.72,1414.47 1285.43,1417.8 1286.14,1419.22 1286.85,1418.38 1287.56,1417.99 1288.26,1419.75 1288.97,1422.81 1289.68,1423.93 1290.39,1423.57 1291.1,1419.58 1291.8,1419.53 1292.51,1418.72 1293.22,1418.47 1293.93,1419.38 1294.63,1419.05 1295.34,1425.64 1296.05,1424.98 1296.76,1426.11 1297.47,1425.53 1298.17,1429.76 1298.88,1428.78 1299.59,1427.88 1300.3,1427.27 1301,1427.74 1301.71,1430.29 1302.42,1429.27 1303.13,1423.4 1303.84,1423.12 1304.54,1426.04 1305.25,1421.72 1305.96,1417.81 1306.67,1414.18 1307.37,1414.07 1308.08,1415.29 1308.79,1416.74 1309.5,1414.71 1310.21,1412.86 1310.91,1411.11 1311.62,1414.62 1312.33,1412.47 1313.04,1410.85 1313.74,1417.42 1314.45,1417.17 1315.16,1418.82 1315.87,1416.9 1316.58,1414.97 1317.28,1412.81 1317.99,1416.15 1318.7,1413.99 1319.41,1412.08 1320.11,1415.16 1320.82,1413.08 1321.53,1413.3 1322.24,1416.76 1322.95,1415.08 1323.65,1416.62 1324.36,1416.24 1325.07,1413.89 1325.78,1415.37 1326.48,1416.93 1327.19,1413.32 1327.9,1409.94 1328.61,1406.88 1329.32,1405.26 1330.02,1405.81 1330.73,1406.35 1331.44,1408.28 1332.15,1408.5 1332.85,1408.72 1333.56,1405.42 1334.27,1405.69 1334.98,1407.8 1335.69,1408.41 1336.39,1410.28 1337.1,1410.43 1337.81,1410.2 1338.52,1406.95 1339.22,1408.92 1339.93,1409.32 1340.64,1414.64 1341.35,1412.82 1342.06,1410.92 1342.76,1413.88 1343.47,1415.55 1344.18,1413.76 1344.89,1413.73 1345.59,1413.54 1346.3,1411.46 1347.01,1409.86 1347.72,1411.52 1348.43,1416.56 1349.13,1416.25 1349.84,1414.48 1350.55,1416.06 1351.26,1417.64 1351.96,1414.15 1352.67,1414.06 1353.38,1415.44 1354.09,1413.91 1354.8,1408.85 1355.5,1407.27 1356.21,1409.25 1356.92,1409.46 1357.63,1407.78 1358.33,1408.1 1359.04,1408.1 1359.75,1413.47 1360.46,1415.26 1361.17,1413.35 1361.87,1411.32 1362.58,1411.43 1363.29,1409.83 1364,1406.08 1364.71,1406.15 1365.41,1404.7 1366.12,1406.93 1366.83,1408.75 1367.54,1410.3 1368.24,1410.29 1368.95,1414.14 1369.66,1410.65 1370.37,1407.56 1371.08,1404.46 1371.78,1408.32 1372.49,1406.89 1373.2,1408.8 1373.91,1410.56 1374.61,1409.31 1375.32,1405.94 1376.03,1405.75 1376.74,1400.95 1377.45,1406.73 1378.15,1405.12 1378.86,1407.07 1379.57,1406.07 1380.28,1406.74 1380.98,1405.73 1381.69,1405.91 1382.4,1406.02 1383.11,1404.37 1383.82,1404.96 1384.52,1405.23 1385.23,1407.46 1385.94,1407.42 1386.65,1409.03 1387.35,1407.89 1388.06,1410.19 1388.77,1410.72 1389.48,1410.7 1390.19,1410.87 1390.89,1410.54 1391.6,1412.48 1392.31,1412.37 1393.02,1414.36 1393.72,1414.46 1394.43,1411.02 1395.14,1409.53 1395.85,1407.94 1396.56,1406.07 1397.26,1404.68 1397.97,1405.39 1398.68,1407.4 1399.39,1407.54 1400.09,1409.3 1400.8,1411.05 1401.51,1411.3 1402.22,1409.47 1402.93,1408.14 1403.63,1406.54 1404.34,1405.19 1405.05,1405.77 1405.76,1406.86 1406.46,1410.23 1407.17,1406.97 1407.88,1406.97 1408.59,1408.87 1409.3,1409.31 1410,1409.96 1410.71,1409.99 1411.42,1410.03 1412.13,1410.03 1412.83,1410.2 1413.54,1410.34 1414.25,1410.52 1414.96,1414.34 1415.67,1415.9 1416.37,1417.48 1417.08,1419.18 1417.79,1417.09 1418.5,1415.34 1419.2,1416.65 1419.91,1413.22 1420.62,1418.76 1421.33,1420.15 1422.04,1423.21 1422.74,1426 1423.45,1425.38 1424.16,1422.75 1424.87,1422.76 1425.57,1420.38 1426.28,1420.21 1426.99,1414.71 1427.7,1409.32 1428.41,1411.38 1429.11,1414.9 1429.82,1419.7 1430.53,1420.93 1431.24,1420.25 1431.94,1419.62 1432.65,1426.08 1433.36,1427 1434.07,1424.58 1434.78,1422.32 1435.48,1416.57 1436.19,1414.74 1436.9,1417.79 1437.61,1415.67 1438.31,1413.31 1439.02,1413.25 1439.73,1412.83 1440.44,1414.74 1441.15,1416.31 1441.85,1419.42 1442.56,1421.1 1443.27,1420.7 1443.98,1421.63 1444.69,1421.37 1445.39,1420.96 1446.1,1423.85 1446.81,1421.09 1447.52,1422 1448.22,1416.07 1448.93,1417.37 1449.64,1417.18 1450.35,1417.05 1451.06,1413.33 1451.76,1413.13 1452.47,1409.57 1453.18,1408.27 1453.89,1408.59 1454.59,1408.58 1455.3,1406.69 1456.01,1403.23 1456.72,1403.59 1457.43,1405.4 1458.13,1405.96 1458.84,1402.31 1459.55,1399.09 1460.26,1399.76 1460.96,1398.39 1461.67,1400.87 1462.38,1400.12 1463.09,1399.1 1463.8,1394.66 1464.5,1397.38 1465.21,1397.92 1465.92,1398.56 1466.63,1405.82 1467.33,1405.95 1468.04,1406.34 1468.75,1406.52 1469.46,1407.05 1470.17,1412.74 1470.87,1414.03 1471.58,1417.71 1472.29,1415.87 1473,1418.53 1473.7,1416.35 1474.41,1419.44 1475.12,1418.85 1475.83,1420.61 1476.54,1420.1 1477.24,1419.68 1477.95,1417.38 1478.66,1420.38 1479.37,1421.49 1480.07,1422.87 1480.78,1420.75 1481.49,1418.38 1482.2,1419.69 1482.91,1419.46 1483.61,1417.41 1484.32,1419.21 1485.03,1416.87 1485.74,1416.37 1486.44,1414.62 1487.15,1414.56 1487.86,1412.87 1488.57,1414.78 1489.28,1416.68 1489.98,1414.72 1490.69,1414.52 1491.4,1414.23 1492.11,1410.84 1492.81,1410.54 1493.52,1412.51 1494.23,1412.46 1494.94,1410.76 1495.65,1412.66 1496.35,1412.62 1497.06,1414.28 1497.77,1412.75 1498.48,1409.6 1499.18,1409.57 1499.89,1408.11 1500.6,1405.07 1501.31,1403.54 1502.02,1406.12 1502.72,1408.32 1503.43,1412.11 1504.14,1410.33 1504.85,1410.58 1505.55,1412.22 1506.26,1413.89 1506.97,1413.53 1507.68,1415.14 1508.39,1414.76 1509.09,1417.76 1509.8,1415.44 1510.51,1416.82 1511.22,1417.71 1511.92,1419.18 1512.63,1420.3 1513.34,1428.36 1514.05,1427.67 1514.76,1426.81 1515.46,1422.14 1516.17,1421.14 1516.88,1425.78 1517.59,1423.73 1518.3,1421.72 1519,1426.56 1519.71,1424.12 1520.42,1423.32 1521.13,1421.23 1521.83,1420.35 1522.54,1424.82 1523.25,1424.47 1523.96,1423.49 1524.67,1424.44 1525.37,1423.61 1526.08,1419.24 1526.79,1419.18 1527.5,1418.52 1528.2,1416.43 1528.91,1413.14 1529.62,1414.42 1530.33,1410.54 1531.04,1411.97 1531.74,1409.94 1532.45,1413.48 1533.16,1411.9 1533.87,1404.86 1534.57,1403.39 1535.28,1406.04 1535.99,1407.94 1536.7,1404.39 1537.41,1401.69 1538.11,1402.67 1538.82,1404.92 1539.53,1403.77 1540.24,1402.29 1540.94,1401.32 1541.65,1397.94 1542.36,1400.45 1543.07,1401.15 1543.78,1396.42 1544.48,1394.11 1545.19,1395.38 1545.9,1396.28 1546.61,1397.41 1547.31,1396.34 1548.02,1395.12 1548.73,1399.8 1549.44,1403.77 1550.15,1404.09 1550.85,1404.28 1551.56,1404.46 1552.27,1408.19 1552.98,1408.62 1553.68,1409.12 1554.39,1406.23 1555.1,1408 1555.81,1408.07 1556.52,1408.17 1557.22,1409.91 1557.93,1409.57 1558.64,1411.33 1559.35,1413.22 1560.05,1413.1 1560.76,1416.23 1561.47,1418.1 1562.18,1417.65 1562.89,1413.86 1563.59,1415.58 1564.3,1415.37 1565.01,1415.17 1565.72,1415.18 1566.42,1413.49 1567.13,1411.61 1567.84,1409.97 1568.55,1410.32 1569.26,1410.58 1569.96,1407.56 1570.67,1409.71 1571.38,1404.75 1572.09,1406.86 1572.79,1410.43 1573.5,1412.31 1574.21,1414.4 1574.92,1415.97 1575.63,1414.27 1576.33,1413.81 1577.04,1417 1577.75,1416.88 1578.46,1413.59 1579.16,1414.97 1579.87,1418.14 1580.58,1417.6 1581.29,1415.28 1582,1418.65 1582.7,1421.7 1583.41,1419.57 1584.12,1419.14 1584.83,1413.78 1585.53,1415.17 1586.24,1415.47 1586.95,1418.96 1587.66,1421.78 1588.37,1424.66 1589.07,1425.38 1589.78,1425.21 1590.49,1419.52 1591.2,1418.77 1591.9,1418.65 1592.61,1414.97 1593.32,1418.05 1594.03,1417.39 1594.74,1417.06 1595.44,1418.62 1596.15,1418.46 1596.86,1420 1597.57,1421.38 1598.28,1422.56 1598.98,1425.46 1599.69,1424.44 1600.4,1423.63 1601.11,1417.62 1601.81,1412.02 1602.52,1411.79 1603.23,1411.89 1603.94,1409.97 1604.65,1413.88 1605.35,1413.88 1606.06,1417.48 1606.77,1413.61 1607.48,1417.02 1608.18,1417.1 1608.89,1418.65 1609.6,1416.41 1610.31,1416.11 1611.02,1417.56 1611.72,1417.41 1612.43,1417.14 1613.14,1413.64 1613.85,1413.56 1614.55,1413.84 1615.26,1413.9 1615.97,1413.75 1616.68,1415.21 1617.39,1413.16 1618.09,1413.07 1618.8,1412.72 1619.51,1412.58 1620.22,1414.19 1620.92,1419.05 1621.63,1411.5 1622.34,1409.77 1623.05,1407.89 1623.76,1407.83 1624.46,1409.77 1625.17,1410.19 1625.88,1410.08 1626.59,1410.23 1627.29,1408.45 1628,1408.62 1628.71,1409.08 1629.42,1409.47 1630.13,1408.04 1630.83,1408.08 1631.54,1404.32 1632.25,1400.98 1632.96,1401.67 1633.66,1400.75 1634.37,1401.03 1635.08,1398.45 1635.79,1400.91 1636.5,1399.58 1637.2,1401.88 1637.91,1400.13 1638.62,1402.42 1639.33,1403.27 1640.03,1405.35 1640.74,1405.48 1641.45,1404.08 1642.16,1402.96 1642.87,1405.32 1643.57,1405.96 1644.28,1408.12 1644.99,1406.94 1645.7,1405.51 1646.4,1409.16 1647.11,1411.15 1647.82,1408.11 1648.53,1411.58 1649.24,1409.94 1649.94,1409.9 1650.65,1410.05 1651.36,1411.7 1652.07,1408.56 1652.77,1407.19 1653.48,1405.85 1654.19,1404.36 1654.9,1403.09 1655.61,1401.7 1656.31,1404.24 1657.02,1402.84 1657.73,1403.2 1658.44,1405.05 1659.14,1407.36 1659.85,1409.11 1660.56,1412.32 1661.27,1410.84 1661.98,1411.03 1662.68,1416.22 1663.39,1413.99 1664.1,1412.27 1664.81,1412.04 1665.51,1411.77 1666.22,1413.41 1666.93,1411.94 1667.64,1408.54 1668.35,1410.8 1669.05,1412.62 1669.76,1412.34 1670.47,1410.63 1671.18,1412.42 1671.89,1414.58 1672.59,1412.94 1673.3,1416.67 1674.01,1413.23 1674.72,1414.9 1675.42,1416.46 1676.13,1417.93 1676.84,1412.88 1677.55,1405.73 1678.26,1404.81 1678.96,1407.26 1679.67,1405.67 1680.38,1405.81 1681.09,1406.26 1681.79,1405.09 1682.5,1405.44 1683.21,1405.96 1683.92,1408.42 1684.63,1405.27 1685.33,1407.31 1686.04,1407.33 1686.75,1407.48 1687.46,1412.96 1688.16,1414.31 1688.87,1417.63 1689.58,1417.35 1690.29,1415.78 1691,1415.83 1691.7,1413.85 1692.41,1415.43 1693.12,1416.47 1693.83,1414.58 1694.53,1414.13 1695.24,1416.03 1695.95,1416.05 1696.66,1417.62 1697.37,1417.39 1698.07,1416.91 1698.78,1415.09 1699.49,1409.61 1700.2,1413.22 1700.9,1413.21 1701.61,1414.85 1702.32,1409.75 1703.03,1409.85 1703.74,1410.19 1704.44,1413.75 1705.15,1413.56 1705.86,1408.33 1706.57,1410.04 1707.27,1409.98 1707.98,1410.31 1708.69,1410.83 1709.4,1409.21 1710.11,1412.8 1710.81,1414.52 1711.52,1414.24 1712.23,1410.56 1712.94,1412.06 1713.64,1414.14 1714.35,1417.52 1715.06,1415.62 1715.77,1420.58 1716.48,1418.69 1717.18,1423.67 1717.89,1419.45 1718.6,1417.29 1719.31,1418.78 1720.01,1416.77 1720.72,1416.48 1721.43,1414.74 1722.14,1409.65 1722.85,1409.53 1723.55,1407.58 1724.26,1406.28 1724.97,1408.02 1725.68,1408.39 1726.38,1410.66 1727.09,1410.56 1727.8,1412.67 1728.51,1412.5 1729.22,1416.1 1729.92,1416.03 1730.63,1415.99 1731.34,1415.61 1732.05,1412.02 1732.75,1415.16 1733.46,1416.44 1734.17,1418.35 1734.88,1416.29 1735.59,1414.43 1736.29,1416.02 1737,1415.42 1737.71,1415.32 1738.42,1413.59 1739.12,1415.06 1739.83,1413.14 1740.54,1412.83 1741.25,1409.18 1741.96,1405.92 1742.66,1407.79 1743.37,1408.17 1744.08,1407.86 1744.79,1406.25 1745.49,1403.11 1746.2,1403.5 1746.91,1403.7 1747.62,1404.55 1748.33,1404.81 1749.03,1405.3 1749.74,1405.76 1750.45,1406.03 1751.16,1409.57 1751.87,1409.53 1752.57,1408.15 1753.28,1411.71 1753.99,1413.61 1754.7,1415.27 1755.4,1418.28 1756.11,1416.33 1756.82,1418.32 1757.53,1419.76 1758.24,1420.62 1758.94,1418.72 1759.65,1418.53 1760.36,1417.99 1761.07,1415.97 1761.77,1413.63 1762.48,1409.94 1763.19,1409.88 1763.9,1408.29 1764.61,1410.26 1765.31,1412.04 1766.02,1417.14 1766.73,1416.66 1767.44,1416.15 1768.14,1414.02 1768.85,1415.25 1769.56,1415.05 1770.27,1414.64 1770.98,1410.8 1771.68,1412.7 1772.39,1412.44 1773.1,1412.09 1773.81,1413.57 1774.51,1413.55 1775.22,1413.27 1775.93,1415.21 1776.64,1411.71 1777.35,1413.25 1778.05,1411.58 1778.76,1411.77 1779.47,1415.57 1780.18,1415.29 1780.88,1409.96 1781.59,1411.56 1782.3,1411.06 1783.01,1411.23 1783.72,1414.4 1784.42,1412.46 1785.13,1412.22 1785.84,1412.49 1786.55,1408.96 1787.25,1409 1787.96,1410.7 1788.67,1409.04 1789.38,1405.73 1790.09,1404.15 1790.79,1402.99 1791.5,1404.9 1792.21,1407.34 1792.92,1407.74 1793.62,1402.69 1794.33,1403.17 1795.04,1400.33 1795.75,1399.17 1796.46,1399.47 1797.16,1400.05 1797.87,1396.93 1798.58,1400.12 1799.29,1398.67 1799.99,1399.51 1800.7,1401.88 1801.41,1406.42 1802.12,1410.13 1802.83,1408.51 1803.53,1410.46 1804.24,1408.88 1804.95,1412.45 1805.66,1409.09 1806.36,1408.98 1807.07,1412.73 1807.78,1412.81 1808.49,1409.39 1809.2,1410.85 1809.9,1411.19 1810.61,1410.87 1811.32,1410.9 1812.03,1412.58 1812.73,1412.54 1813.44,1412.49 1814.15,1411.94 1814.86,1413.15 1815.57,1412.95 1816.27,1411.27 1816.98,1406.34 1817.69,1408.47 1818.4,1407.4 1819.1,1407.52 1819.81,1411.09 1820.52,1411.03 1821.23,1412.83 1821.94,1417.57 1822.64,1415.44 1823.35,1415.07 1824.06,1413.12 1824.77,1413.22 1825.48,1409.67 1826.18,1409.87 1826.89,1408.47 1827.6,1411.88 1828.31,1410.02 1829.01,1408.61 1829.72,1408.58 1830.43,1407.3 1831.14,1409.1 1831.85,1409.37 1832.55,1409.39 1833.26,1407.4 1833.97,1409.26 1834.68,1407.61 1835.38,1407.91 1836.09,1408.43 1836.8,1409.07 1837.51,1411.16 1838.22,1413.06 1838.92,1410.92 1839.63,1411.14 1840.34,1413.03 1841.05,1414.86 1841.75,1411.12 1842.46,1413.21 1843.17,1414.93 1843.88,1414.71 1844.59,1412.89 1845.29,1418.06 1846,1417.85 1846.71,1412.27 1847.42,1410.44 1848.12,1412.41 1848.83,1412.5 1849.54,1412.58 1850.25,1410.84 1850.96,1412.47 1851.66,1412.73 1852.37,1414.19 1853.08,1417.4 1853.79,1415.24 1854.49,1418.49 1855.2,1419.53 1855.91,1422.82 1856.62,1422.18 1857.33,1418.34 1858.03,1416.09 1858.74,1419.34 1859.45,1418.86 1860.16,1421.81 1860.86,1419.65 1861.57,1419.25 1862.28,1415.37 1862.99,1410.03 1863.7,1406.69 1864.4,1405.27 1865.11,1404.31 1865.82,1401.31 1866.53,1406.55 1867.23,1405.23 1867.94,1409.04 1868.65,1411.27 1869.36,1411.5 1870.07,1411.44 1870.77,1409.89 1871.48,1406.71 1872.19,1407.13 1872.9,1405.75 1873.6,1404.54 1874.31,1407.05 1875.02,1403.74 1875.73,1402.28 1876.44,1406.45 1877.14,1405.03 1877.85,1401.91 1878.56,1404.26 1879.27,1406.53 1879.97,1406.8 1880.68,1407.18 1881.39,1405.63 1882.1,1404.2 1882.81,1406.38 1883.51,1409.83 1884.22,1405.09 1884.93,1407.08 1885.64,1410.75 1886.34,1409.22 1887.05,1408.86 1887.76,1405.55 1888.47,1405.82 1889.18,1405.87 1889.88,1404.43 1890.59,1404.68 1891.3,1403.6 1892.01,1409.14 1892.71,1407.86 1893.42,1411.69 1894.13,1413.28 1894.84,1411.85 1895.55,1413.69 1896.25,1417.2 1896.96,1418.65 1897.67,1412.95 1898.38,1413.22 1899.08,1416.77 1899.79,1413.24 1900.5,1414.98 1901.21,1414.5 1901.92,1414.04 1902.62,1413.75 1903.33,1411.81 1904.04,1415.21 1904.75,1414.42 1905.46,1412.3 1906.16,1409.07 1906.87,1411.1 1907.58,1411.25 1908.29,1409.64 1908.99,1409.46 1909.7,1409.34 1910.41,1407.46 1911.12,1404.37 1911.83,1401.08 1912.53,1404.98 1913.24,1402 1913.95,1404.24 1914.66,1404.9 1915.36,1405.04 1916.07,1405.2 1916.78,1405.9 1917.49,1406.29 1918.2,1399.6 1918.9,1400.31 1919.61,1401.04 1920.32,1405.1 1921.03,1405.59 1921.73,1405.53 1922.44,1404.09 1923.15,1406.13 1923.86,1406.49 1924.57,1410.34 1925.27,1415.56 1925.98,1410.37 1926.69,1410.76 1927.4,1410.99 1928.1,1413.09 1928.81,1413.19 1929.52,1413.11 1930.23,1414.62 1930.94,1415.95 1931.64,1412.21 1932.35,1410.46 1933.06,1410.55 1933.77,1412.22 1934.47,1417.4 1935.18,1415.48 1935.89,1416.55 1936.6,1412.98 1937.31,1411.14 1938.01,1411.39 1938.72,1405.96 1939.43,1407.78 1940.14,1411.38 1940.84,1411.52 1941.55,1411.31 1942.26,1413.16 1942.97,1411.41 1943.68,1409.53 1944.38,1411.56 1945.09,1411.89 1945.8,1411.99 1946.51,1411.82 1947.21,1413.53 1947.92,1415.46 1948.63,1422.32 1949.34,1419.45 1950.05,1421.96 1950.75,1426.59 1951.46,1429.24 1952.17,1429.77 1952.88,1425.65 1953.58,1421.48 1954.29,1419.23 1955,1415.59 1955.71,1415.48 1956.42,1415.44 1957.12,1414.89 1957.83,1416.08 1958.54,1414.41 1959.25,1412.45 1959.95,1415.75 1960.66,1413.65 1961.37,1411.82 1962.08,1411.58 1962.79,1413.56 1963.49,1419.24 1964.2,1415.44 1964.91,1413.45 1965.62,1409.71 1966.32,1413.49 1967.03,1411.72 1967.74,1413.54 1968.45,1413.52 1969.16,1411.81 1969.86,1410.18 1970.57,1411.88 1971.28,1413.7 1971.99,1413.65 1972.69,1408.5 1973.4,1413.45 1974.11,1415.22 1974.82,1416.44 1975.53,1417.88 1976.23,1417.59 1976.94,1417.3 1977.65,1417.38 1978.36,1417.38 1979.07,1417.31 1979.77,1416.95 1980.48,1413.2 1981.19,1416.6 1981.9,1416.55 1982.6,1416.39 1983.31,1415.79 1984.02,1413.69 1984.73,1413.38 1985.44,1411.26 1986.14,1411.42 1986.85,1411.39 1987.56,1413.07 1988.27,1416.42 1988.97,1412.55 1989.68,1409.08 1990.39,1409.34 1991.1,1409.55 1991.81,1408.39 1992.51,1408.6 1993.22,1410.47 1993.93,1410.52 1994.64,1412.42 1995.34,1408.92 1996.05,1409.29 1996.76,1409.15 1997.47,1409.16 1998.18,1411.26 1998.88,1413.1 1999.59,1414.86 2000.3,1414.67 2001.01,1412.79 2001.71,1413.09 2002.42,1412.92 2003.13,1414.67 2003.84,1414.87 2004.55,1411.65 2005.25,1415.49 2005.96,1417 2006.67,1418.36 2007.38,1418.05 2008.08,1415.95 2008.79,1417.3 2009.5,1418.78 2010.21,1416.76 2010.92,1416.59 2011.62,1417.85 2012.33,1418.83 2013.04,1416.64 2013.75,1414.47 2014.45,1415.87 2015.16,1417.56 2015.87,1415.42 2016.58,1417.28 2017.29,1420.75 2017.99,1420.18 2018.7,1423 2019.41,1420.69 2020.12,1418.77 2020.82,1415.21 2021.53,1415.04 2022.24,1414.69 2022.95,1414.46 2023.66,1411 2024.36,1410.98 2025.07,1409.13 2025.78,1415.79 2026.49,1417.47 2027.19,1417.29 2027.9,1415.46 2028.61,1413.21 2029.32,1414.69 2030.03,1416.44 2030.73,1415.65 2031.44,1418.96 2032.15,1418.47 2032.86,1416.62 2033.56,1418.03 2034.27,1415.85 2034.98,1420.65 2035.69,1412.98 2036.4,1413.07 2037.1,1413.07 2037.81,1411.26 2038.52,1416.18 2039.23,1419.91 2039.93,1417.77 2040.64,1417.51 2041.35,1416.95 2042.06,1413.63 2042.77,1411.95 2043.47,1412.14 2044.18,1410.7 2044.89,1409.29 2045.6,1407.59 2046.3,1411.35 2047.01,1411.29 2047.72,1414.88 2048.43,1411.39 2049.14,1415.01 2049.84,1415.13 2050.55,1413.36 2051.26,1415.52 2051.97,1413.5 2052.68,1411.61 2053.38,1406.54 2054.09,1401.43 2054.8,1407.02 2055.51,1405.48 2056.21,1400.9 2056.92,1399.48 2057.63,1396.67 2058.34,1397.49 2059.05,1400 2059.75,1400.59 2060.46,1402.69 2061.17,1403.34 2061.88,1400.17 2062.58,1398.99 2063.29,1401.02 2064,1398.06 2064.71,1400.81 2065.42,1405.09 2066.12,1398.55 2066.83,1399.55 2067.54,1400.18 2068.25,1398.94 2068.95,1398.09 2069.66,1397.15 2070.37,1398.21 2071.08,1397.42 2071.79,1399.69 2072.49,1400.54 2073.2,1399.01 2073.91,1399.98 2074.62,1404.02 2075.32,1406.21 2076.03,1404.71 2076.74,1403.59 2077.45,1403.99 2078.16,1404.22 2078.86,1409.73 2079.57,1409.84 2080.28,1408.54 2080.99,1408.37 2081.69,1409.98 2082.4,1408.36 2083.11,1410 2083.82,1406.24 2084.53,1406.69 2085.23,1406.9 2085.94,1409.26 2086.65,1407.63 2087.36,1409.38 2088.06,1407.71 2088.77,1411.49 2089.48,1411.45 2090.19,1412.83 2090.9,1412.97 2091.6,1414.31 2092.31,1412.63 2093.02,1414.62 2093.73,1412.8 2094.43,1412.76 2095.14,1413.01 2095.85,1412.88 2096.56,1409.41 2097.27,1411.27 2097.97,1411.51 2098.68,1409.89 2099.39,1410.19 2100.1,1410.36 2100.8,1408.88 2101.51,1410.66 2102.22,1410.62 2102.93,1412.34 2103.64,1412.3 2104.34,1412.08 2105.05,1414.05 2105.76,1412.62 2106.47,1412.38 2107.17,1413.69 2107.88,1413.53 2108.59,1416.59 2109.3,1416.19 2110.01,1414.37 2110.71,1419.15 2111.42,1419.02 2112.13,1418.91 2112.84,1422.1 2113.54,1419.96 2114.25,1416.5 2114.96,1412.69 2115.67,1407.65 2116.38,1411.21 2117.08,1414.67 2117.79,1418.37 2118.5,1418.03 2119.21,1421.22 2119.91,1422.13 2120.62,1421.64 2121.33,1417.29 2122.04,1413.74 2122.75,1415.56 2123.45,1415.48 2124.16,1413.4 2124.87,1409.83 2125.58,1408.11 2126.28,1410.29 2126.99,1412.01 2127.7,1413.79 2128.41,1408.49 2129.12,1406.9 2129.82,1405.9 2130.53,1407.65 2131.24,1411.38 2131.95,1411.92 2132.66,1413.92 2133.36,1415.18 2134.07,1416.6 2134.78,1415.11 2135.49,1411.21 2136.19,1412.81 2136.9,1414.93 2137.61,1412.89 2138.32,1416.11 2139.03,1414.23 2139.73,1415.43 2140.44,1416.91 2141.15,1418.54 2141.86,1417.89 2142.56,1417.42 2143.27,1420.73 2143.98,1423.96 2144.69,1423.17 2145.4,1422.31 2146.1,1423.18 2146.81,1420.71 2147.52,1420.16 2148.23,1419.74 2148.93,1414.04 2149.64,1415.85 2150.35,1415.95 2151.06,1415.79 2151.77,1415.75 2152.47,1417.62 2153.18,1420.75 2153.89,1420.39 2154.6,1421.91 2155.3,1419.94 2156.01,1419.53 2156.72,1417.29 2157.43,1420.53 2158.14,1418.52 2158.84,1418.03 2159.55,1417.64 2160.26,1417.03 2160.97,1415.06 2161.67,1420.2 2162.38,1422.04 2163.09,1425.01 2163.8,1427.61 2164.51,1425.01 2165.21,1424.54 2165.92,1422.28 2166.63,1423.85 2167.34,1419.59 2168.04,1419.19 2168.75,1417.35 2169.46,1418.92 2170.17,1415.13 2170.88,1414.73 2171.58,1414.24 2172.29,1412.34 2173,1414.12 2173.71,1417.02 2174.41,1416.63 2175.12,1416.38 2175.83,1412.71 2176.54,1412.5 2177.25,1411.01 2177.95,1409.58 2178.66,1408.22 2179.37,1410.04 2180.08,1406.65 2180.78,1401.96 2181.49,1404.19 2182.2,1402.75 2182.91,1403.05 2183.62,1401.84 2184.32,1402.08 2185.03,1400.71 2185.74,1397.86 2186.45,1396.42 2187.15,1395.77 2187.86,1396 2188.57,1391.23 2189.28,1390.79 2189.99,1390.16 2190.69,1391.39 2191.4,1392.32 2192.11,1395.14 2192.82,1396.34 2193.52,1396.75 2194.23,1401.03 2194.94,1399.77 2195.65,1400.42 2196.36,1402.99 2197.06,1403.58 2197.77,1400.66 2198.48,1397.7 2199.19,1396.9 2199.89,1399.58 2200.6,1402.13 2201.31,1404.24 2202.02,1408.26 2202.73,1413.74 2203.43,1412.1 2204.14,1412.15 2204.85,1412.31 2205.56,1413.95 2206.27,1414.01 2206.97,1411.93 2207.68,1414.99 2208.39,1416.19 2209.1,1417.8 2209.8,1415.82 2210.51,1415.61 2211.22,1417.53 2211.93,1419.15 2212.64,1420.45 2213.34,1419.97 2214.05,1420.96 2214.76,1420.88 2215.47,1418.77 2216.17,1414.73 2216.88,1414.57 2217.59,1416.12 2218.3,1416.12 2219.01,1415.91 2219.71,1419.1 2220.42,1420.21 2221.13,1421.92 2221.84,1419.78 2222.54,1415.71 2223.25,1415.4 2223.96,1418.76 2224.67,1418.49 2225.38,1421.53 2226.08,1421.27 2226.79,1420.7 2227.5,1415.14 2228.21,1413.27 2228.91,1415.2 2229.62,1415.2 2230.33,1420.35 2231.04,1419.78 2231.75,1421.09 2232.45,1418.83 2233.16,1416.59 2233.87,1412.66 2234.58,1411.18 2235.28,1411.4 2235.99,1413.04 2236.7,1414.61 2237.41,1416.34 2238.12,1418.18 2238.82,1414.29 2239.53,1409.36 2240.24,1406.08 2240.95,1406.26 2241.65,1404.8 2242.36,1406.83 2243.07,1407.2 2243.78,1408.99 2244.49,1407.72 2245.19,1407.98 2245.9,1406.54 2246.61,1406.84 2247.32,1401.86 2248.02,1400.62 2248.73,1401.24 2249.44,1401.41 2250.15,1400.02 2250.86,1402.31 2251.56,1406.08 2252.27,1406.11 2252.98,1413.15 2253.69,1416.61 2254.39,1419.39 2255.1,1415.37 2255.81,1415.32 2256.52,1413.86 2257.23,1412.22 2257.93,1412.53 2258.64,1414.1 2259.35,1412.39 2260.06,1412.56 2260.76,1414.35 2261.47,1410.6 2262.18,1412.25 2262.89,1417.06 2263.6,1414.87 2264.3,1414.57 2265.01,1414.71 2265.72,1417.62 2266.43,1417.19 2267.13,1415.58 2267.84,1413.65 2268.55,1413.72 2269.26,1411.86 2269.97,1408.39 2270.67,1406.67 2271.38,1403.59 2272.09,1409.3 2272.8,1409.4 2273.5,1412.65 2274.21,1411.08 2274.92,1406.01 2275.63,1406.11 2276.34,1404.49 2277.04,1405.15 2277.75,1405.77 2278.46,1406.05 2279.17,1402.65 2279.87,1403.13 2280.58,1406.72 2281.29,1406.86 2282,1406.94 2282.71,1407.28 2283.41,1407.36 2284.12,1405.75 2284.83,1407.74 2285.54,1410.09 2286.25,1411.93 2286.95,1412.62 2287.66,1410.96 2288.37,1409.31 2289.08,1411.31 \"/>\n<path clip-path=\"url(#clip052)\" d=\"M874.208 1412.69 L874.916 1412.69 L875.623 1412.69 L876.331 1412.69 L877.039 1412.69 L877.747 1412.69 L878.455 1412.69 L879.162 1412.69 L879.87 1412.69 L880.578 1412.69 L881.286 1412.69 L881.994 1412.69 L882.701 1412.69 L883.409 1412.69 L884.117 1412.69 L884.825 1412.69 L885.533 1412.69 L886.24 1412.69 L886.948 1412.69 L887.656 1412.69 L888.364 1412.69 L889.071 1412.69 L889.779 1412.69 L890.487 1412.69 L891.195 1412.69 L891.903 1412.69 L892.61 1412.69 L893.318 1412.69 L894.026 1412.69 L894.734 1412.69 L895.442 1412.69 L896.149 1412.69 L896.857 1412.69 L897.565 1412.69 L898.273 1412.69 L898.98 1412.69 L899.688 1412.69 L900.396 1412.69 L901.104 1412.69 L901.812 1412.69 L902.519 1412.69 L903.227 1412.69 L903.935 1412.69 L904.643 1412.69 L905.351 1412.69 L906.058 1412.69 L906.766 1412.69 L907.474 1412.69 L908.182 1412.69 L908.89 1412.69 L909.597 1412.69 L910.305 1412.69 L911.013 1412.69 L911.721 1412.69 L912.428 1412.69 L913.136 1412.69 L913.844 1412.69 L914.552 1412.69 L915.26 1412.69 L915.967 1412.69 L916.675 1412.69 L917.383 1412.69 L918.091 1412.69 L918.799 1412.69 L919.506 1412.69 L920.214 1412.69 L920.922 1412.69 L921.63 1412.69 L922.337 1412.69 L923.045 1412.69 L923.753 1412.69 L924.461 1412.69 L925.169 1412.69 L925.876 1412.69 L926.584 1412.69 L927.292 1412.69 L928 1412.69 L928.708 1412.69 L929.415 1412.69 L930.123 1412.69 L930.831 1412.69 L931.539 1412.69 L932.247 1412.69 L932.954 1412.69 L933.662 1412.69 L934.37 1412.69 L935.078 1412.69 L935.785 1412.69 L936.493 1412.69 L937.201 1412.69 L937.909 1412.69 L938.617 1412.69 L939.324 1412.69 L940.032 1412.69 L940.74 1412.69 L941.448 1412.69 L942.156 1412.69 L942.863 1412.69 L943.571 1412.69 L944.279 1412.69 L944.987 1412.69 L945.694 1412.69 L946.402 1412.69 L947.11 1412.69 L947.818 1412.69 L948.526 1412.69 L949.233 1412.69 L949.941 1412.69 L950.649 1412.69 L951.357 1412.69 L952.065 1412.69 L952.772 1412.69 L953.48 1412.69 L954.188 1412.69 L954.896 1412.69 L955.604 1412.69 L956.311 1412.69 L957.019 1412.69 L957.727 1412.69 L958.435 1412.69 L959.142 1412.69 L959.85 1412.69 L960.558 1412.69 L961.266 1412.69 L961.974 1412.69 L962.681 1412.69 L963.389 1412.69 L964.097 1412.69 L964.805 1412.69 L965.513 1412.69 L966.22 1412.69 L966.928 1412.69 L967.636 1412.69 L968.344 1412.69 L969.051 1412.69 L969.759 1412.69 L970.467 1412.69 L971.175 1412.69 L971.883 1412.69 L972.59 1412.69 L973.298 1412.69 L974.006 1412.69 L974.714 1412.69 L975.422 1412.69 L976.129 1412.69 L976.837 1412.69 L977.545 1412.69 L978.253 1412.69 L978.961 1412.69 L979.668 1412.69 L980.376 1412.69 L981.084 1412.69 L981.792 1412.69 L982.499 1412.69 L983.207 1412.69 L983.915 1412.69 L984.623 1412.69 L985.331 1412.69 L986.038 1412.69 L986.746 1412.69 L987.454 1412.69 L988.162 1412.69 L988.87 1412.69 L989.577 1412.69 L990.285 1412.69 L990.993 1412.69 L991.701 1412.69 L992.409 1412.69 L993.116 1412.69 L993.824 1412.69 L994.532 1412.69 L995.24 1412.69 L995.947 1412.69 L996.655 1412.69 L997.363 1412.69 L998.071 1412.69 L998.779 1412.69 L999.486 1412.69 L1000.19 1412.69 L1000.9 1412.69 L1001.61 1412.69 L1002.32 1412.69 L1003.03 1412.69 L1003.73 1412.69 L1004.44 1412.69 L1005.15 1412.69 L1005.86 1412.69 L1006.56 1412.69 L1007.27 1412.69 L1007.98 1412.69 L1008.69 1412.69 L1009.4 1412.69 L1010.1 1412.69 L1010.81 1412.69 L1011.52 1412.69 L1012.23 1412.69 L1012.93 1412.69 L1013.64 1412.69 L1014.35 1412.69 L1015.06 1412.69 L1015.77 1412.69 L1016.47 1412.69 L1017.18 1412.69 L1017.89 1412.69 L1018.6 1412.69 L1019.3 1412.69 L1020.01 1412.69 L1020.72 1412.69 L1021.43 1412.69 L1022.14 1412.69 L1022.84 1412.69 L1023.55 1412.69 L1024.26 1412.69 L1024.97 1412.69 L1025.67 1412.69 L1026.38 1412.69 L1027.09 1412.69 L1027.8 1412.69 L1028.51 1412.69 L1029.21 1412.69 L1029.92 1412.69 L1030.63 1412.69 L1031.34 1412.69 L1032.04 1412.69 L1032.75 1412.69 L1033.46 1412.69 L1034.17 1412.69 L1034.88 1412.69 L1035.58 1412.69 L1036.29 1412.69 L1037 1412.69 L1037.71 1412.69 L1038.41 1412.69 L1039.12 1412.69 L1039.83 1412.69 L1040.54 1412.69 L1041.25 1412.69 L1041.95 1412.69 L1042.66 1412.69 L1043.37 1412.69 L1044.08 1412.69 L1044.78 1412.69 L1045.49 1412.69 L1046.2 1412.69 L1046.91 1412.69 L1047.62 1412.69 L1048.32 1412.69 L1049.03 1412.69 L1049.74 1412.69 L1050.45 1412.69 L1051.15 1412.69 L1051.86 1412.69 L1052.57 1412.69 L1053.28 1412.69 L1053.99 1412.69 L1054.69 1412.69 L1055.4 1412.69 L1056.11 1412.69 L1056.82 1412.69 L1057.53 1412.69 L1058.23 1412.69 L1058.94 1412.69 L1059.65 1412.69 L1060.36 1412.69 L1061.06 1412.69 L1061.77 1412.69 L1062.48 1412.69 L1063.19 1412.69 L1063.9 1412.69 L1064.6 1412.69 L1065.31 1412.69 L1066.02 1412.69 L1066.73 1412.69 L1067.43 1412.69 L1068.14 1412.69 L1068.85 1412.69 L1069.56 1412.69 L1070.27 1412.69 L1070.97 1412.69 L1071.68 1412.69 L1072.39 1412.69 L1073.1 1412.69 L1073.8 1412.69 L1074.51 1412.69 L1075.22 1412.69 L1075.93 1412.69 L1076.64 1412.69 L1077.34 1412.69 L1078.05 1412.69 L1078.76 1412.69 L1079.47 1412.69 L1080.17 1412.69 L1080.88 1412.69 L1081.59 1412.69 L1082.3 1412.69 L1083.01 1412.69 L1083.71 1412.69 L1084.42 1412.69 L1085.13 1412.69 L1085.84 1412.69 L1086.54 1412.69 L1087.25 1412.69 L1087.96 1412.69 L1088.67 1412.69 L1089.38 1412.69 L1090.08 1412.69 L1090.79 1412.69 L1091.5 1412.69 L1092.21 1412.69 L1092.91 1412.69 L1093.62 1412.69 L1094.33 1412.69 L1095.04 1412.69 L1095.75 1412.69 L1096.45 1412.69 L1097.16 1412.69 L1097.87 1412.69 L1098.58 1412.69 L1099.28 1412.69 L1099.99 1412.69 L1100.7 1412.69 L1101.41 1412.69 L1102.12 1412.69 L1102.82 1412.69 L1103.53 1412.69 L1104.24 1412.69 L1104.95 1412.69 L1105.65 1412.69 L1106.36 1412.69 L1107.07 1412.69 L1107.78 1412.69 L1108.49 1412.69 L1109.19 1412.69 L1109.9 1412.69 L1110.61 1412.69 L1111.32 1412.69 L1112.02 1412.69 L1112.73 1412.69 L1113.44 1412.69 L1114.15 1412.69 L1114.86 1412.69 L1115.56 1412.69 L1116.27 1412.69 L1116.98 1412.69 L1117.69 1412.69 L1118.39 1412.69 L1119.1 1412.69 L1119.81 1412.69 L1120.52 1412.69 L1121.23 1412.69 L1121.93 1412.69 L1122.64 1412.69 L1123.35 1412.69 L1124.06 1412.69 L1124.76 1412.69 L1125.47 1412.69 L1126.18 1412.69 L1126.89 1412.69 L1127.6 1412.69 L1128.3 1412.69 L1129.01 1412.69 L1129.72 1412.69 L1130.43 1412.69 L1131.13 1412.69 L1131.84 1412.69 L1132.55 1412.69 L1133.26 1412.69 L1133.97 1412.69 L1134.67 1412.69 L1135.38 1412.69 L1136.09 1412.69 L1136.8 1412.69 L1137.51 1412.69 L1138.21 1412.69 L1138.92 1412.69 L1139.63 1412.69 L1140.34 1412.69 L1141.04 1412.69 L1141.75 1412.69 L1142.46 1412.69 L1143.17 1412.69 L1143.88 1412.69 L1144.58 1412.69 L1145.29 1412.69 L1146 1412.69 L1146.71 1412.69 L1147.41 1412.69 L1148.12 1412.69 L1148.83 1412.69 L1149.54 1412.69 L1150.25 1412.69 L1150.95 1412.69 L1151.66 1412.69 L1152.37 1412.69 L1153.08 1412.69 L1153.78 1412.69 L1154.49 1412.69 L1155.2 1412.69 L1155.91 1412.69 L1156.62 1412.69 L1157.32 1412.69 L1158.03 1412.69 L1158.74 1412.69 L1159.45 1412.69 L1160.15 1412.69 L1160.86 1412.69 L1161.57 1412.69 L1162.28 1412.69 L1162.99 1412.69 L1163.69 1412.69 L1164.4 1412.69 L1165.11 1412.69 L1165.82 1412.69 L1166.52 1412.69 L1167.23 1412.69 L1167.94 1412.69 L1168.65 1412.69 L1169.36 1412.69 L1170.06 1412.69 L1170.77 1412.69 L1171.48 1412.69 L1172.19 1412.69 L1172.89 1412.69 L1173.6 1412.69 L1174.31 1412.69 L1175.02 1412.69 L1175.73 1412.69 L1176.43 1412.69 L1177.14 1412.69 L1177.85 1412.69 L1178.56 1412.69 L1179.26 1412.69 L1179.97 1412.69 L1180.68 1412.69 L1181.39 1412.69 L1182.1 1412.69 L1182.8 1412.69 L1183.51 1412.69 L1184.22 1412.69 L1184.93 1412.69 L1185.63 1412.69 L1186.34 1412.69 L1187.05 1412.69 L1187.76 1412.69 L1188.47 1412.69 L1189.17 1412.69 L1189.88 1412.69 L1190.59 1412.69 L1191.3 1412.69 L1192 1412.69 L1192.71 1412.69 L1193.42 1412.69 L1194.13 1412.69 L1194.84 1412.69 L1195.54 1412.69 L1196.25 1412.69 L1196.96 1412.69 L1197.67 1412.69 L1198.37 1412.69 L1199.08 1412.69 L1199.79 1412.69 L1200.5 1412.69 L1201.21 1412.69 L1201.91 1412.69 L1202.62 1412.69 L1203.33 1412.69 L1204.04 1412.69 L1204.74 1412.69 L1205.45 1412.69 L1206.16 1412.69 L1206.87 1412.69 L1207.58 1412.69 L1208.28 1412.69 L1208.99 1412.69 L1209.7 1412.69 L1210.41 1412.69 L1211.12 1412.69 L1211.82 1412.69 L1212.53 1412.69 L1213.24 1412.69 L1213.95 1412.69 L1214.65 1412.69 L1215.36 1412.69 L1216.07 1412.69 L1216.78 1412.69 L1217.49 1412.69 L1218.19 1412.69 L1218.9 1412.69 L1219.61 1412.69 L1220.32 1412.69 L1221.02 1412.69 L1221.73 1412.69 L1222.44 1412.69 L1223.15 1412.69 L1223.86 1412.69 L1224.56 1412.69 L1225.27 1412.69 L1225.98 1412.69 L1226.69 1412.69 L1227.39 1412.69 L1228.1 1412.69 L1228.81 1412.69 L1229.52 1412.69 L1230.23 1412.69 L1230.93 1412.69 L1231.64 1412.69 L1232.35 1412.69 L1233.06 1412.69 L1233.76 1412.69 L1234.47 1412.69 L1235.18 1412.69 L1235.89 1412.69 L1236.6 1412.69 L1237.3 1412.69 L1238.01 1412.69 L1238.72 1412.69 L1239.43 1412.69 L1240.13 1412.69 L1240.84 1412.69 L1241.55 1412.69 L1242.26 1412.69 L1242.97 1412.69 L1243.67 1412.69 L1244.38 1412.69 L1245.09 1412.69 L1245.8 1412.69 L1246.5 1412.69 L1247.21 1412.69 L1247.92 1412.69 L1248.63 1412.69 L1249.34 1412.69 L1250.04 1412.69 L1250.75 1412.69 L1251.46 1412.69 L1252.17 1412.69 L1252.87 1412.69 L1253.58 1412.69 L1254.29 1412.69 L1255 1412.69 L1255.71 1412.69 L1256.41 1412.69 L1257.12 1412.69 L1257.83 1412.69 L1258.54 1412.69 L1259.24 1412.69 L1259.95 1412.69 L1260.66 1412.69 L1261.37 1412.69 L1262.08 1412.69 L1262.78 1412.69 L1263.49 1412.69 L1264.2 1412.69 L1264.91 1412.69 L1265.61 1412.69 L1266.32 1412.69 L1267.03 1412.69 L1267.74 1412.69 L1268.45 1412.69 L1269.15 1412.69 L1269.86 1412.69 L1270.57 1412.69 L1271.28 1412.69 L1271.98 1412.69 L1272.69 1412.69 L1273.4 1412.69 L1274.11 1412.69 L1274.82 1412.69 L1275.52 1412.69 L1276.23 1412.69 L1276.94 1412.69 L1277.65 1412.69 L1278.35 1412.69 L1279.06 1412.69 L1279.77 1412.69 L1280.48 1412.69 L1281.19 1412.69 L1281.89 1412.69 L1282.6 1412.69 L1283.31 1412.69 L1284.02 1412.69 L1284.72 1412.69 L1285.43 1412.69 L1286.14 1412.69 L1286.85 1412.69 L1287.56 1412.69 L1288.26 1412.69 L1288.97 1412.69 L1289.68 1412.69 L1290.39 1412.69 L1291.1 1412.69 L1291.8 1412.69 L1292.51 1412.69 L1293.22 1412.69 L1293.93 1412.69 L1294.63 1412.69 L1295.34 1412.69 L1296.05 1412.69 L1296.76 1412.69 L1297.47 1412.69 L1298.17 1412.69 L1298.88 1412.69 L1299.59 1412.69 L1300.3 1412.69 L1301 1412.69 L1301.71 1412.69 L1302.42 1412.69 L1303.13 1412.69 L1303.84 1412.69 L1304.54 1412.69 L1305.25 1412.69 L1305.96 1412.69 L1306.67 1412.69 L1307.37 1412.69 L1308.08 1412.69 L1308.79 1412.69 L1309.5 1412.69 L1310.21 1412.69 L1310.91 1412.69 L1311.62 1412.69 L1312.33 1412.69 L1313.04 1412.69 L1313.74 1412.69 L1314.45 1412.69 L1315.16 1412.69 L1315.87 1412.69 L1316.58 1412.69 L1317.28 1412.69 L1317.99 1412.69 L1318.7 1412.69 L1319.41 1412.69 L1320.11 1412.69 L1320.82 1412.69 L1321.53 1412.69 L1322.24 1412.69 L1322.95 1412.69 L1323.65 1412.69 L1324.36 1412.69 L1325.07 1412.69 L1325.78 1412.69 L1326.48 1412.69 L1327.19 1412.69 L1327.9 1412.69 L1328.61 1412.69 L1329.32 1412.69 L1330.02 1412.69 L1330.73 1412.69 L1331.44 1412.69 L1332.15 1412.69 L1332.85 1412.69 L1333.56 1412.69 L1334.27 1412.69 L1334.98 1412.69 L1335.69 1412.69 L1336.39 1412.69 L1337.1 1412.69 L1337.81 1412.69 L1338.52 1412.69 L1339.22 1412.69 L1339.93 1412.69 L1340.64 1412.69 L1341.35 1412.69 L1342.06 1412.69 L1342.76 1412.69 L1343.47 1412.69 L1344.18 1412.69 L1344.89 1412.69 L1345.59 1412.69 L1346.3 1412.69 L1347.01 1412.69 L1347.72 1412.69 L1348.43 1412.69 L1349.13 1412.69 L1349.84 1412.69 L1350.55 1412.69 L1351.26 1412.69 L1351.96 1412.69 L1352.67 1412.69 L1353.38 1412.69 L1354.09 1412.69 L1354.8 1412.69 L1355.5 1412.69 L1356.21 1412.69 L1356.92 1412.69 L1357.63 1412.69 L1358.33 1412.69 L1359.04 1412.69 L1359.75 1412.69 L1360.46 1412.69 L1361.17 1412.69 L1361.87 1412.69 L1362.58 1412.69 L1363.29 1412.69 L1364 1412.69 L1364.71 1412.69 L1365.41 1412.69 L1366.12 1412.69 L1366.83 1412.69 L1367.54 1412.69 L1368.24 1412.69 L1368.95 1412.69 L1369.66 1412.69 L1370.37 1412.69 L1371.08 1412.69 L1371.78 1412.69 L1372.49 1412.69 L1373.2 1412.69 L1373.91 1412.69 L1374.61 1412.69 L1375.32 1412.69 L1376.03 1412.69 L1376.74 1412.69 L1377.45 1412.69 L1378.15 1412.69 L1378.86 1412.69 L1379.57 1412.69 L1380.28 1412.69 L1380.98 1412.69 L1381.69 1412.69 L1382.4 1412.69 L1383.11 1412.69 L1383.82 1412.69 L1384.52 1412.69 L1385.23 1412.69 L1385.94 1412.69 L1386.65 1412.69 L1387.35 1412.69 L1388.06 1412.69 L1388.77 1412.69 L1389.48 1412.69 L1390.19 1412.69 L1390.89 1412.69 L1391.6 1412.69 L1392.31 1412.69 L1393.02 1412.69 L1393.72 1412.69 L1394.43 1412.69 L1395.14 1412.69 L1395.85 1412.69 L1396.56 1412.69 L1397.26 1412.69 L1397.97 1412.69 L1398.68 1412.69 L1399.39 1412.69 L1400.09 1412.69 L1400.8 1412.69 L1401.51 1412.69 L1402.22 1412.69 L1402.93 1412.69 L1403.63 1412.69 L1404.34 1412.69 L1405.05 1412.69 L1405.76 1412.69 L1406.46 1412.69 L1407.17 1412.69 L1407.88 1412.69 L1408.59 1412.69 L1409.3 1412.69 L1410 1412.69 L1410.71 1412.69 L1411.42 1412.69 L1412.13 1412.69 L1412.83 1412.69 L1413.54 1412.69 L1414.25 1412.69 L1414.96 1412.69 L1415.67 1412.69 L1416.37 1412.69 L1417.08 1412.69 L1417.79 1412.69 L1418.5 1412.69 L1419.2 1412.69 L1419.91 1412.69 L1420.62 1412.69 L1421.33 1412.69 L1422.04 1412.69 L1422.74 1412.69 L1423.45 1412.69 L1424.16 1412.69 L1424.87 1412.69 L1425.57 1412.69 L1426.28 1412.69 L1426.99 1412.69 L1427.7 1412.69 L1428.41 1412.69 L1429.11 1412.69 L1429.82 1412.69 L1430.53 1412.69 L1431.24 1412.69 L1431.94 1412.69 L1432.65 1412.69 L1433.36 1412.69 L1434.07 1412.69 L1434.78 1412.69 L1435.48 1412.69 L1436.19 1412.69 L1436.9 1412.69 L1437.61 1412.69 L1438.31 1412.69 L1439.02 1412.69 L1439.73 1412.69 L1440.44 1412.69 L1441.15 1412.69 L1441.85 1412.69 L1442.56 1412.69 L1443.27 1412.69 L1443.98 1412.69 L1444.69 1412.69 L1445.39 1412.69 L1446.1 1412.69 L1446.81 1412.69 L1447.52 1412.69 L1448.22 1412.69 L1448.93 1412.69 L1449.64 1412.69 L1450.35 1412.69 L1451.06 1412.69 L1451.76 1412.69 L1452.47 1412.69 L1453.18 1412.69 L1453.89 1412.69 L1454.59 1412.69 L1455.3 1412.69 L1456.01 1412.69 L1456.72 1412.69 L1457.43 1412.69 L1458.13 1412.69 L1458.84 1412.69 L1459.55 1412.69 L1460.26 1412.69 L1460.96 1412.69 L1461.67 1412.69 L1462.38 1412.69 L1463.09 1412.69 L1463.8 1412.69 L1464.5 1412.69 L1465.21 1412.69 L1465.92 1412.69 L1466.63 1412.69 L1467.33 1412.69 L1468.04 1412.69 L1468.75 1412.69 L1469.46 1412.69 L1470.17 1412.69 L1470.87 1412.69 L1471.58 1412.69 L1472.29 1412.69 L1473 1412.69 L1473.7 1412.69 L1474.41 1412.69 L1475.12 1412.69 L1475.83 1412.69 L1476.54 1412.69 L1477.24 1412.69 L1477.95 1412.69 L1478.66 1412.69 L1479.37 1412.69 L1480.07 1412.69 L1480.78 1412.69 L1481.49 1412.69 L1482.2 1412.69 L1482.91 1412.69 L1483.61 1412.69 L1484.32 1412.69 L1485.03 1412.69 L1485.74 1412.69 L1486.44 1412.69 L1487.15 1412.69 L1487.86 1412.69 L1488.57 1412.69 L1489.28 1412.69 L1489.98 1412.69 L1490.69 1412.69 L1491.4 1412.69 L1492.11 1412.69 L1492.81 1412.69 L1493.52 1412.69 L1494.23 1412.69 L1494.94 1412.69 L1495.65 1412.69 L1496.35 1412.69 L1497.06 1412.69 L1497.77 1412.69 L1498.48 1412.69 L1499.18 1412.69 L1499.89 1412.69 L1500.6 1412.69 L1501.31 1412.69 L1502.02 1412.69 L1502.72 1412.69 L1503.43 1412.69 L1504.14 1412.69 L1504.85 1412.69 L1505.55 1412.69 L1506.26 1412.69 L1506.97 1412.69 L1507.68 1412.69 L1508.39 1412.69 L1509.09 1412.69 L1509.8 1412.69 L1510.51 1412.69 L1511.22 1412.69 L1511.92 1412.69 L1512.63 1412.69 L1513.34 1412.69 L1514.05 1412.69 L1514.76 1412.69 L1515.46 1412.69 L1516.17 1412.69 L1516.88 1412.69 L1517.59 1412.69 L1518.3 1412.69 L1519 1412.69 L1519.71 1412.69 L1520.42 1412.69 L1521.13 1412.69 L1521.83 1412.69 L1522.54 1412.69 L1523.25 1412.69 L1523.96 1412.69 L1524.67 1412.69 L1525.37 1412.69 L1526.08 1412.69 L1526.79 1412.69 L1527.5 1412.69 L1528.2 1412.69 L1528.91 1412.69 L1529.62 1412.69 L1530.33 1412.69 L1531.04 1412.69 L1531.74 1412.69 L1532.45 1412.69 L1533.16 1412.69 L1533.87 1412.69 L1534.57 1412.69 L1535.28 1412.69 L1535.99 1412.69 L1536.7 1412.69 L1537.41 1412.69 L1538.11 1412.69 L1538.82 1412.69 L1539.53 1412.69 L1540.24 1412.69 L1540.94 1412.69 L1541.65 1412.69 L1542.36 1412.69 L1543.07 1412.69 L1543.78 1412.69 L1544.48 1412.69 L1545.19 1412.69 L1545.9 1412.69 L1546.61 1412.69 L1547.31 1412.69 L1548.02 1412.69 L1548.73 1412.69 L1549.44 1412.69 L1550.15 1412.69 L1550.85 1412.69 L1551.56 1412.69 L1552.27 1412.69 L1552.98 1412.69 L1553.68 1412.69 L1554.39 1412.69 L1555.1 1412.69 L1555.81 1412.69 L1556.52 1412.69 L1557.22 1412.69 L1557.93 1412.69 L1558.64 1412.69 L1559.35 1412.69 L1560.05 1412.69 L1560.76 1412.69 L1561.47 1412.69 L1562.18 1412.69 L1562.89 1412.69 L1563.59 1412.69 L1564.3 1412.69 L1565.01 1412.69 L1565.72 1412.69 L1566.42 1412.69 L1567.13 1412.69 L1567.84 1412.69 L1568.55 1412.69 L1569.26 1412.69 L1569.96 1412.69 L1570.67 1412.69 L1571.38 1412.69 L1572.09 1412.69 L1572.79 1412.69 L1573.5 1412.69 L1574.21 1412.69 L1574.92 1412.69 L1575.63 1412.69 L1576.33 1412.69 L1577.04 1412.69 L1577.75 1412.69 L1578.46 1412.69 L1579.16 1412.69 L1579.87 1412.69 L1580.58 1412.69 L1581.29 1412.69 L1582 1412.69 L1582.7 1412.69 L1583.41 1412.69 L1584.12 1412.69 L1584.83 1412.69 L1585.53 1412.69 L1586.24 1412.69 L1586.95 1412.69 L1587.66 1412.69 L1588.37 1412.69 L1589.07 1412.69 L1589.78 1412.69 L1590.49 1412.69 L1591.2 1412.69 L1591.9 1412.69 L1592.61 1412.69 L1593.32 1412.69 L1594.03 1412.69 L1594.74 1412.69 L1595.44 1412.69 L1596.15 1412.69 L1596.86 1412.69 L1597.57 1412.69 L1598.28 1412.69 L1598.98 1412.69 L1599.69 1412.69 L1600.4 1412.69 L1601.11 1412.69 L1601.81 1412.69 L1602.52 1412.69 L1603.23 1412.69 L1603.94 1412.69 L1604.65 1412.69 L1605.35 1412.69 L1606.06 1412.69 L1606.77 1412.69 L1607.48 1412.69 L1608.18 1412.69 L1608.89 1412.69 L1609.6 1412.69 L1610.31 1412.69 L1611.02 1412.69 L1611.72 1412.69 L1612.43 1412.69 L1613.14 1412.69 L1613.85 1412.69 L1614.55 1412.69 L1615.26 1412.69 L1615.97 1412.69 L1616.68 1412.69 L1617.39 1412.69 L1618.09 1412.69 L1618.8 1412.69 L1619.51 1412.69 L1620.22 1412.69 L1620.92 1412.69 L1621.63 1412.69 L1622.34 1412.69 L1623.05 1412.69 L1623.76 1412.69 L1624.46 1412.69 L1625.17 1412.69 L1625.88 1412.69 L1626.59 1412.69 L1627.29 1412.69 L1628 1412.69 L1628.71 1412.69 L1629.42 1412.69 L1630.13 1412.69 L1630.83 1412.69 L1631.54 1412.69 L1632.25 1412.69 L1632.96 1412.69 L1633.66 1412.69 L1634.37 1412.69 L1635.08 1412.69 L1635.79 1412.69 L1636.5 1412.69 L1637.2 1412.69 L1637.91 1412.69 L1638.62 1412.69 L1639.33 1412.69 L1640.03 1412.69 L1640.74 1412.69 L1641.45 1412.69 L1642.16 1412.69 L1642.87 1412.69 L1643.57 1412.69 L1644.28 1412.69 L1644.99 1412.69 L1645.7 1412.69 L1646.4 1412.69 L1647.11 1412.69 L1647.82 1412.69 L1648.53 1412.69 L1649.24 1412.69 L1649.94 1412.69 L1650.65 1412.69 L1651.36 1412.69 L1652.07 1412.69 L1652.77 1412.69 L1653.48 1412.69 L1654.19 1412.69 L1654.9 1412.69 L1655.61 1412.69 L1656.31 1412.69 L1657.02 1412.69 L1657.73 1412.69 L1658.44 1412.69 L1659.14 1412.69 L1659.85 1412.69 L1660.56 1412.69 L1661.27 1412.69 L1661.98 1412.69 L1662.68 1412.69 L1663.39 1412.69 L1664.1 1412.69 L1664.81 1412.69 L1665.51 1412.69 L1666.22 1412.69 L1666.93 1412.69 L1667.64 1412.69 L1668.35 1412.69 L1669.05 1412.69 L1669.76 1412.69 L1670.47 1412.69 L1671.18 1412.69 L1671.89 1412.69 L1672.59 1412.69 L1673.3 1412.69 L1674.01 1412.69 L1674.72 1412.69 L1675.42 1412.69 L1676.13 1412.69 L1676.84 1412.69 L1677.55 1412.69 L1678.26 1412.69 L1678.96 1412.69 L1679.67 1412.69 L1680.38 1412.69 L1681.09 1412.69 L1681.79 1412.69 L1682.5 1412.69 L1683.21 1412.69 L1683.92 1412.69 L1684.63 1412.69 L1685.33 1412.69 L1686.04 1412.69 L1686.75 1412.69 L1687.46 1412.69 L1688.16 1412.69 L1688.87 1412.69 L1689.58 1412.69 L1690.29 1412.69 L1691 1412.69 L1691.7 1412.69 L1692.41 1412.69 L1693.12 1412.69 L1693.83 1412.69 L1694.53 1412.69 L1695.24 1412.69 L1695.95 1412.69 L1696.66 1412.69 L1697.37 1412.69 L1698.07 1412.69 L1698.78 1412.69 L1699.49 1412.69 L1700.2 1412.69 L1700.9 1412.69 L1701.61 1412.69 L1702.32 1412.69 L1703.03 1412.69 L1703.74 1412.69 L1704.44 1412.69 L1705.15 1412.69 L1705.86 1412.69 L1706.57 1412.69 L1707.27 1412.69 L1707.98 1412.69 L1708.69 1412.69 L1709.4 1412.69 L1710.11 1412.69 L1710.81 1412.69 L1711.52 1412.69 L1712.23 1412.69 L1712.94 1412.69 L1713.64 1412.69 L1714.35 1412.69 L1715.06 1412.69 L1715.77 1412.69 L1716.48 1412.69 L1717.18 1412.69 L1717.89 1412.69 L1718.6 1412.69 L1719.31 1412.69 L1720.01 1412.69 L1720.72 1412.69 L1721.43 1412.69 L1722.14 1412.69 L1722.85 1412.69 L1723.55 1412.69 L1724.26 1412.69 L1724.97 1412.69 L1725.68 1412.69 L1726.38 1412.69 L1727.09 1412.69 L1727.8 1412.69 L1728.51 1412.69 L1729.22 1412.69 L1729.92 1412.69 L1730.63 1412.69 L1731.34 1412.69 L1732.05 1412.69 L1732.75 1412.69 L1733.46 1412.69 L1734.17 1412.69 L1734.88 1412.69 L1735.59 1412.69 L1736.29 1412.69 L1737 1412.69 L1737.71 1412.69 L1738.42 1412.69 L1739.12 1412.69 L1739.83 1412.69 L1740.54 1412.69 L1741.25 1412.69 L1741.96 1412.69 L1742.66 1412.69 L1743.37 1412.69 L1744.08 1412.69 L1744.79 1412.69 L1745.49 1412.69 L1746.2 1412.69 L1746.91 1412.69 L1747.62 1412.69 L1748.33 1412.69 L1749.03 1412.69 L1749.74 1412.69 L1750.45 1412.69 L1751.16 1412.69 L1751.87 1412.69 L1752.57 1412.69 L1753.28 1412.69 L1753.99 1412.69 L1754.7 1412.69 L1755.4 1412.69 L1756.11 1412.69 L1756.82 1412.69 L1757.53 1412.69 L1758.24 1412.69 L1758.94 1412.69 L1759.65 1412.69 L1760.36 1412.69 L1761.07 1412.69 L1761.77 1412.69 L1762.48 1412.69 L1763.19 1412.69 L1763.9 1412.69 L1764.61 1412.69 L1765.31 1412.69 L1766.02 1412.69 L1766.73 1412.69 L1767.44 1412.69 L1768.14 1412.69 L1768.85 1412.69 L1769.56 1412.69 L1770.27 1412.69 L1770.98 1412.69 L1771.68 1412.69 L1772.39 1412.69 L1773.1 1412.69 L1773.81 1412.69 L1774.51 1412.69 L1775.22 1412.69 L1775.93 1412.69 L1776.64 1412.69 L1777.35 1412.69 L1778.05 1412.69 L1778.76 1412.69 L1779.47 1412.69 L1780.18 1412.69 L1780.88 1412.69 L1781.59 1412.69 L1782.3 1412.69 L1783.01 1412.69 L1783.72 1412.69 L1784.42 1412.69 L1785.13 1412.69 L1785.84 1412.69 L1786.55 1412.69 L1787.25 1412.69 L1787.96 1412.69 L1788.67 1412.69 L1789.38 1412.69 L1790.09 1412.69 L1790.79 1412.69 L1791.5 1412.69 L1792.21 1412.69 L1792.92 1412.69 L1793.62 1412.69 L1794.33 1412.69 L1795.04 1412.69 L1795.75 1412.69 L1796.46 1412.69 L1797.16 1412.69 L1797.87 1412.69 L1798.58 1412.69 L1799.29 1412.69 L1799.99 1412.69 L1800.7 1412.69 L1801.41 1412.69 L1802.12 1412.69 L1802.83 1412.69 L1803.53 1412.69 L1804.24 1412.69 L1804.95 1412.69 L1805.66 1412.69 L1806.36 1412.69 L1807.07 1412.69 L1807.78 1412.69 L1808.49 1412.69 L1809.2 1412.69 L1809.9 1412.69 L1810.61 1412.69 L1811.32 1412.69 L1812.03 1412.69 L1812.73 1412.69 L1813.44 1412.69 L1814.15 1412.69 L1814.86 1412.69 L1815.57 1412.69 L1816.27 1412.69 L1816.98 1412.69 L1817.69 1412.69 L1818.4 1412.69 L1819.1 1412.69 L1819.81 1412.69 L1820.52 1412.69 L1821.23 1412.69 L1821.94 1412.69 L1822.64 1412.69 L1823.35 1412.69 L1824.06 1412.69 L1824.77 1412.69 L1825.48 1412.69 L1826.18 1412.69 L1826.89 1412.69 L1827.6 1412.69 L1828.31 1412.69 L1829.01 1412.69 L1829.72 1412.69 L1830.43 1412.69 L1831.14 1412.69 L1831.85 1412.69 L1832.55 1412.69 L1833.26 1412.69 L1833.97 1412.69 L1834.68 1412.69 L1835.38 1412.69 L1836.09 1412.69 L1836.8 1412.69 L1837.51 1412.69 L1838.22 1412.69 L1838.92 1412.69 L1839.63 1412.69 L1840.34 1412.69 L1841.05 1412.69 L1841.75 1412.69 L1842.46 1412.69 L1843.17 1412.69 L1843.88 1412.69 L1844.59 1412.69 L1845.29 1412.69 L1846 1412.69 L1846.71 1412.69 L1847.42 1412.69 L1848.12 1412.69 L1848.83 1412.69 L1849.54 1412.69 L1850.25 1412.69 L1850.96 1412.69 L1851.66 1412.69 L1852.37 1412.69 L1853.08 1412.69 L1853.79 1412.69 L1854.49 1412.69 L1855.2 1412.69 L1855.91 1412.69 L1856.62 1412.69 L1857.33 1412.69 L1858.03 1412.69 L1858.74 1412.69 L1859.45 1412.69 L1860.16 1412.69 L1860.86 1412.69 L1861.57 1412.69 L1862.28 1412.69 L1862.99 1412.69 L1863.7 1412.69 L1864.4 1412.69 L1865.11 1412.69 L1865.82 1412.69 L1866.53 1412.69 L1867.23 1412.69 L1867.94 1412.69 L1868.65 1412.69 L1869.36 1412.69 L1870.07 1412.69 L1870.77 1412.69 L1871.48 1412.69 L1872.19 1412.69 L1872.9 1412.69 L1873.6 1412.69 L1874.31 1412.69 L1875.02 1412.69 L1875.73 1412.69 L1876.44 1412.69 L1877.14 1412.69 L1877.85 1412.69 L1878.56 1412.69 L1879.27 1412.69 L1879.97 1412.69 L1880.68 1412.69 L1881.39 1412.69 L1882.1 1412.69 L1882.81 1412.69 L1883.51 1412.69 L1884.22 1412.69 L1884.93 1412.69 L1885.64 1412.69 L1886.34 1412.69 L1887.05 1412.69 L1887.76 1412.69 L1888.47 1412.69 L1889.18 1412.69 L1889.88 1412.69 L1890.59 1412.69 L1891.3 1412.69 L1892.01 1412.69 L1892.71 1412.69 L1893.42 1412.69 L1894.13 1412.69 L1894.84 1412.69 L1895.55 1412.69 L1896.25 1412.69 L1896.96 1412.69 L1897.67 1412.69 L1898.38 1412.69 L1899.08 1412.69 L1899.79 1412.69 L1900.5 1412.69 L1901.21 1412.69 L1901.92 1412.69 L1902.62 1412.69 L1903.33 1412.69 L1904.04 1412.69 L1904.75 1412.69 L1905.46 1412.69 L1906.16 1412.69 L1906.87 1412.69 L1907.58 1412.69 L1908.29 1412.69 L1908.99 1412.69 L1909.7 1412.69 L1910.41 1412.69 L1911.12 1412.69 L1911.83 1412.69 L1912.53 1412.69 L1913.24 1412.69 L1913.95 1412.69 L1914.66 1412.69 L1915.36 1412.69 L1916.07 1412.69 L1916.78 1412.69 L1917.49 1412.69 L1918.2 1412.69 L1918.9 1412.69 L1919.61 1412.69 L1920.32 1412.69 L1921.03 1412.69 L1921.73 1412.69 L1922.44 1412.69 L1923.15 1412.69 L1923.86 1412.69 L1924.57 1412.69 L1925.27 1412.69 L1925.98 1412.69 L1926.69 1412.69 L1927.4 1412.69 L1928.1 1412.69 L1928.81 1412.69 L1929.52 1412.69 L1930.23 1412.69 L1930.94 1412.69 L1931.64 1412.69 L1932.35 1412.69 L1933.06 1412.69 L1933.77 1412.69 L1934.47 1412.69 L1935.18 1412.69 L1935.89 1412.69 L1936.6 1412.69 L1937.31 1412.69 L1938.01 1412.69 L1938.72 1412.69 L1939.43 1412.69 L1940.14 1412.69 L1940.84 1412.69 L1941.55 1412.69 L1942.26 1412.69 L1942.97 1412.69 L1943.68 1412.69 L1944.38 1412.69 L1945.09 1412.69 L1945.8 1412.69 L1946.51 1412.69 L1947.21 1412.69 L1947.92 1412.69 L1948.63 1412.69 L1949.34 1412.69 L1950.05 1412.69 L1950.75 1412.69 L1951.46 1412.69 L1952.17 1412.69 L1952.88 1412.69 L1953.58 1412.69 L1954.29 1412.69 L1955 1412.69 L1955.71 1412.69 L1956.42 1412.69 L1957.12 1412.69 L1957.83 1412.69 L1958.54 1412.69 L1959.25 1412.69 L1959.95 1412.69 L1960.66 1412.69 L1961.37 1412.69 L1962.08 1412.69 L1962.79 1412.69 L1963.49 1412.69 L1964.2 1412.69 L1964.91 1412.69 L1965.62 1412.69 L1966.32 1412.69 L1967.03 1412.69 L1967.74 1412.69 L1968.45 1412.69 L1969.16 1412.69 L1969.86 1412.69 L1970.57 1412.69 L1971.28 1412.69 L1971.99 1412.69 L1972.69 1412.69 L1973.4 1412.69 L1974.11 1412.69 L1974.82 1412.69 L1975.53 1412.69 L1976.23 1412.69 L1976.94 1412.69 L1977.65 1412.69 L1978.36 1412.69 L1979.07 1412.69 L1979.77 1412.69 L1980.48 1412.69 L1981.19 1412.69 L1981.9 1412.69 L1982.6 1412.69 L1983.31 1412.69 L1984.02 1412.69 L1984.73 1412.69 L1985.44 1412.69 L1986.14 1412.69 L1986.85 1412.69 L1987.56 1412.69 L1988.27 1412.69 L1988.97 1412.69 L1989.68 1412.69 L1990.39 1412.69 L1991.1 1412.69 L1991.81 1412.69 L1992.51 1412.69 L1993.22 1412.69 L1993.93 1412.69 L1994.64 1412.69 L1995.34 1412.69 L1996.05 1412.69 L1996.76 1412.69 L1997.47 1412.69 L1998.18 1412.69 L1998.88 1412.69 L1999.59 1412.69 L2000.3 1412.69 L2001.01 1412.69 L2001.71 1412.69 L2002.42 1412.69 L2003.13 1412.69 L2003.84 1412.69 L2004.55 1412.69 L2005.25 1412.69 L2005.96 1412.69 L2006.67 1412.69 L2007.38 1412.69 L2008.08 1412.69 L2008.79 1412.69 L2009.5 1412.69 L2010.21 1412.69 L2010.92 1412.69 L2011.62 1412.69 L2012.33 1412.69 L2013.04 1412.69 L2013.75 1412.69 L2014.45 1412.69 L2015.16 1412.69 L2015.87 1412.69 L2016.58 1412.69 L2017.29 1412.69 L2017.99 1412.69 L2018.7 1412.69 L2019.41 1412.69 L2020.12 1412.69 L2020.82 1412.69 L2021.53 1412.69 L2022.24 1412.69 L2022.95 1412.69 L2023.66 1412.69 L2024.36 1412.69 L2025.07 1412.69 L2025.78 1412.69 L2026.49 1412.69 L2027.19 1412.69 L2027.9 1412.69 L2028.61 1412.69 L2029.32 1412.69 L2030.03 1412.69 L2030.73 1412.69 L2031.44 1412.69 L2032.15 1412.69 L2032.86 1412.69 L2033.56 1412.69 L2034.27 1412.69 L2034.98 1412.69 L2035.69 1412.69 L2036.4 1412.69 L2037.1 1412.69 L2037.81 1412.69 L2038.52 1412.69 L2039.23 1412.69 L2039.93 1412.69 L2040.64 1412.69 L2041.35 1412.69 L2042.06 1412.69 L2042.77 1412.69 L2043.47 1412.69 L2044.18 1412.69 L2044.89 1412.69 L2045.6 1412.69 L2046.3 1412.69 L2047.01 1412.69 L2047.72 1412.69 L2048.43 1412.69 L2049.14 1412.69 L2049.84 1412.69 L2050.55 1412.69 L2051.26 1412.69 L2051.97 1412.69 L2052.68 1412.69 L2053.38 1412.69 L2054.09 1412.69 L2054.8 1412.69 L2055.51 1412.69 L2056.21 1412.69 L2056.92 1412.69 L2057.63 1412.69 L2058.34 1412.69 L2059.05 1412.69 L2059.75 1412.69 L2060.46 1412.69 L2061.17 1412.69 L2061.88 1412.69 L2062.58 1412.69 L2063.29 1412.69 L2064 1412.69 L2064.71 1412.69 L2065.42 1412.69 L2066.12 1412.69 L2066.83 1412.69 L2067.54 1412.69 L2068.25 1412.69 L2068.95 1412.69 L2069.66 1412.69 L2070.37 1412.69 L2071.08 1412.69 L2071.79 1412.69 L2072.49 1412.69 L2073.2 1412.69 L2073.91 1412.69 L2074.62 1412.69 L2075.32 1412.69 L2076.03 1412.69 L2076.74 1412.69 L2077.45 1412.69 L2078.16 1412.69 L2078.86 1412.69 L2079.57 1412.69 L2080.28 1412.69 L2080.99 1412.69 L2081.69 1412.69 L2082.4 1412.69 L2083.11 1412.69 L2083.82 1412.69 L2084.53 1412.69 L2085.23 1412.69 L2085.94 1412.69 L2086.65 1412.69 L2087.36 1412.69 L2088.06 1412.69 L2088.77 1412.69 L2089.48 1412.69 L2090.19 1412.69 L2090.9 1412.69 L2091.6 1412.69 L2092.31 1412.69 L2093.02 1412.69 L2093.73 1412.69 L2094.43 1412.69 L2095.14 1412.69 L2095.85 1412.69 L2096.56 1412.69 L2097.27 1412.69 L2097.97 1412.69 L2098.68 1412.69 L2099.39 1412.69 L2100.1 1412.69 L2100.8 1412.69 L2101.51 1412.69 L2102.22 1412.69 L2102.93 1412.69 L2103.64 1412.69 L2104.34 1412.69 L2105.05 1412.69 L2105.76 1412.69 L2106.47 1412.69 L2107.17 1412.69 L2107.88 1412.69 L2108.59 1412.69 L2109.3 1412.69 L2110.01 1412.69 L2110.71 1412.69 L2111.42 1412.69 L2112.13 1412.69 L2112.84 1412.69 L2113.54 1412.69 L2114.25 1412.69 L2114.96 1412.69 L2115.67 1412.69 L2116.38 1412.69 L2117.08 1412.69 L2117.79 1412.69 L2118.5 1412.69 L2119.21 1412.69 L2119.91 1412.69 L2120.62 1412.69 L2121.33 1412.69 L2122.04 1412.69 L2122.75 1412.69 L2123.45 1412.69 L2124.16 1412.69 L2124.87 1412.69 L2125.58 1412.69 L2126.28 1412.69 L2126.99 1412.69 L2127.7 1412.69 L2128.41 1412.69 L2129.12 1412.69 L2129.82 1412.69 L2130.53 1412.69 L2131.24 1412.69 L2131.95 1412.69 L2132.66 1412.69 L2133.36 1412.69 L2134.07 1412.69 L2134.78 1412.69 L2135.49 1412.69 L2136.19 1412.69 L2136.9 1412.69 L2137.61 1412.69 L2138.32 1412.69 L2139.03 1412.69 L2139.73 1412.69 L2140.44 1412.69 L2141.15 1412.69 L2141.86 1412.69 L2142.56 1412.69 L2143.27 1412.69 L2143.98 1412.69 L2144.69 1412.69 L2145.4 1412.69 L2146.1 1412.69 L2146.81 1412.69 L2147.52 1412.69 L2148.23 1412.69 L2148.93 1412.69 L2149.64 1412.69 L2150.35 1412.69 L2151.06 1412.69 L2151.77 1412.69 L2152.47 1412.69 L2153.18 1412.69 L2153.89 1412.69 L2154.6 1412.69 L2155.3 1412.69 L2156.01 1412.69 L2156.72 1412.69 L2157.43 1412.69 L2158.14 1412.69 L2158.84 1412.69 L2159.55 1412.69 L2160.26 1412.69 L2160.97 1412.69 L2161.67 1412.69 L2162.38 1412.69 L2163.09 1412.69 L2163.8 1412.69 L2164.51 1412.69 L2165.21 1412.69 L2165.92 1412.69 L2166.63 1412.69 L2167.34 1412.69 L2168.04 1412.69 L2168.75 1412.69 L2169.46 1412.69 L2170.17 1412.69 L2170.88 1412.69 L2171.58 1412.69 L2172.29 1412.69 L2173 1412.69 L2173.71 1412.69 L2174.41 1412.69 L2175.12 1412.69 L2175.83 1412.69 L2176.54 1412.69 L2177.25 1412.69 L2177.95 1412.69 L2178.66 1412.69 L2179.37 1412.69 L2180.08 1412.69 L2180.78 1412.69 L2181.49 1412.69 L2182.2 1412.69 L2182.91 1412.69 L2183.62 1412.69 L2184.32 1412.69 L2185.03 1412.69 L2185.74 1412.69 L2186.45 1412.69 L2187.15 1412.69 L2187.86 1412.69 L2188.57 1412.69 L2189.28 1412.69 L2189.99 1412.69 L2190.69 1412.69 L2191.4 1412.69 L2192.11 1412.69 L2192.82 1412.69 L2193.52 1412.69 L2194.23 1412.69 L2194.94 1412.69 L2195.65 1412.69 L2196.36 1412.69 L2197.06 1412.69 L2197.77 1412.69 L2198.48 1412.69 L2199.19 1412.69 L2199.89 1412.69 L2200.6 1412.69 L2201.31 1412.69 L2202.02 1412.69 L2202.73 1412.69 L2203.43 1412.69 L2204.14 1412.69 L2204.85 1412.69 L2205.56 1412.69 L2206.27 1412.69 L2206.97 1412.69 L2207.68 1412.69 L2208.39 1412.69 L2209.1 1412.69 L2209.8 1412.69 L2210.51 1412.69 L2211.22 1412.69 L2211.93 1412.69 L2212.64 1412.69 L2213.34 1412.69 L2214.05 1412.69 L2214.76 1412.69 L2215.47 1412.69 L2216.17 1412.69 L2216.88 1412.69 L2217.59 1412.69 L2218.3 1412.69 L2219.01 1412.69 L2219.71 1412.69 L2220.42 1412.69 L2221.13 1412.69 L2221.84 1412.69 L2222.54 1412.69 L2223.25 1412.69 L2223.96 1412.69 L2224.67 1412.69 L2225.38 1412.69 L2226.08 1412.69 L2226.79 1412.69 L2227.5 1412.69 L2228.21 1412.69 L2228.91 1412.69 L2229.62 1412.69 L2230.33 1412.69 L2231.04 1412.69 L2231.75 1412.69 L2232.45 1412.69 L2233.16 1412.69 L2233.87 1412.69 L2234.58 1412.69 L2235.28 1412.69 L2235.99 1412.69 L2236.7 1412.69 L2237.41 1412.69 L2238.12 1412.69 L2238.82 1412.69 L2239.53 1412.69 L2240.24 1412.69 L2240.95 1412.69 L2241.65 1412.69 L2242.36 1412.69 L2243.07 1412.69 L2243.78 1412.69 L2244.49 1412.69 L2245.19 1412.69 L2245.9 1412.69 L2246.61 1412.69 L2247.32 1412.69 L2248.02 1412.69 L2248.73 1412.69 L2249.44 1412.69 L2250.15 1412.69 L2250.86 1412.69 L2251.56 1412.69 L2252.27 1412.69 L2252.98 1412.69 L2253.69 1412.69 L2254.39 1412.69 L2255.1 1412.69 L2255.81 1412.69 L2256.52 1412.69 L2257.23 1412.69 L2257.93 1412.69 L2258.64 1412.69 L2259.35 1412.69 L2260.06 1412.69 L2260.76 1412.69 L2261.47 1412.69 L2262.18 1412.69 L2262.89 1412.69 L2263.6 1412.69 L2264.3 1412.69 L2265.01 1412.69 L2265.72 1412.69 L2266.43 1412.69 L2267.13 1412.69 L2267.84 1412.69 L2268.55 1412.69 L2269.26 1412.69 L2269.97 1412.69 L2270.67 1412.69 L2271.38 1412.69 L2272.09 1412.69 L2272.8 1412.69 L2273.5 1412.69 L2274.21 1412.69 L2274.92 1412.69 L2275.63 1412.69 L2276.34 1412.69 L2277.04 1412.69 L2277.75 1412.69 L2278.46 1412.69 L2279.17 1412.69 L2279.87 1412.69 L2280.58 1412.69 L2281.29 1412.69 L2282 1412.69 L2282.71 1412.69 L2283.41 1412.69 L2284.12 1412.69 L2284.83 1412.69 L2285.54 1412.69 L2286.25 1412.69 L2286.95 1412.69 L2287.66 1412.69 L2288.37 1412.69 L2289.08 1412.69 L2289.08 1411.52 L2288.37 1411.52 L2287.66 1411.52 L2286.95 1411.52 L2286.25 1411.52 L2285.54 1411.52 L2284.83 1411.52 L2284.12 1411.52 L2283.41 1411.52 L2282.71 1411.52 L2282 1411.52 L2281.29 1411.52 L2280.58 1411.52 L2279.87 1411.52 L2279.17 1411.52 L2278.46 1411.52 L2277.75 1411.52 L2277.04 1411.52 L2276.34 1411.52 L2275.63 1411.52 L2274.92 1411.52 L2274.21 1411.52 L2273.5 1411.52 L2272.8 1411.52 L2272.09 1411.52 L2271.38 1411.52 L2270.67 1411.52 L2269.97 1411.52 L2269.26 1411.52 L2268.55 1411.52 L2267.84 1411.52 L2267.13 1411.52 L2266.43 1411.52 L2265.72 1411.52 L2265.01 1411.52 L2264.3 1411.52 L2263.6 1411.52 L2262.89 1411.52 L2262.18 1411.52 L2261.47 1411.52 L2260.76 1411.52 L2260.06 1411.52 L2259.35 1411.52 L2258.64 1411.52 L2257.93 1411.52 L2257.23 1411.52 L2256.52 1411.52 L2255.81 1411.52 L2255.1 1411.52 L2254.39 1411.52 L2253.69 1411.52 L2252.98 1411.52 L2252.27 1411.52 L2251.56 1411.52 L2250.86 1411.52 L2250.15 1411.52 L2249.44 1411.52 L2248.73 1411.52 L2248.02 1411.52 L2247.32 1411.52 L2246.61 1411.52 L2245.9 1411.52 L2245.19 1411.52 L2244.49 1411.52 L2243.78 1411.52 L2243.07 1411.52 L2242.36 1411.52 L2241.65 1411.52 L2240.95 1411.52 L2240.24 1411.52 L2239.53 1411.52 L2238.82 1411.52 L2238.12 1411.52 L2237.41 1411.52 L2236.7 1411.52 L2235.99 1411.52 L2235.28 1411.52 L2234.58 1411.52 L2233.87 1411.52 L2233.16 1411.52 L2232.45 1411.52 L2231.75 1411.52 L2231.04 1411.52 L2230.33 1411.52 L2229.62 1411.52 L2228.91 1411.52 L2228.21 1411.52 L2227.5 1411.52 L2226.79 1411.52 L2226.08 1411.52 L2225.38 1411.52 L2224.67 1411.52 L2223.96 1411.52 L2223.25 1411.52 L2222.54 1411.52 L2221.84 1411.52 L2221.13 1411.52 L2220.42 1411.52 L2219.71 1411.52 L2219.01 1411.52 L2218.3 1411.52 L2217.59 1411.52 L2216.88 1411.52 L2216.17 1411.52 L2215.47 1411.52 L2214.76 1411.52 L2214.05 1411.52 L2213.34 1411.52 L2212.64 1411.52 L2211.93 1411.52 L2211.22 1411.52 L2210.51 1411.52 L2209.8 1411.52 L2209.1 1411.52 L2208.39 1411.52 L2207.68 1411.52 L2206.97 1411.52 L2206.27 1411.52 L2205.56 1411.52 L2204.85 1411.52 L2204.14 1411.52 L2203.43 1411.52 L2202.73 1411.52 L2202.02 1411.52 L2201.31 1411.52 L2200.6 1411.52 L2199.89 1411.52 L2199.19 1411.52 L2198.48 1411.52 L2197.77 1411.52 L2197.06 1411.52 L2196.36 1411.52 L2195.65 1411.52 L2194.94 1411.52 L2194.23 1411.52 L2193.52 1411.52 L2192.82 1411.52 L2192.11 1411.52 L2191.4 1411.52 L2190.69 1411.52 L2189.99 1411.52 L2189.28 1411.52 L2188.57 1411.52 L2187.86 1411.52 L2187.15 1411.52 L2186.45 1411.52 L2185.74 1411.52 L2185.03 1411.52 L2184.32 1411.52 L2183.62 1411.52 L2182.91 1411.52 L2182.2 1411.52 L2181.49 1411.52 L2180.78 1411.52 L2180.08 1411.52 L2179.37 1411.52 L2178.66 1411.52 L2177.95 1411.52 L2177.25 1411.52 L2176.54 1411.52 L2175.83 1411.52 L2175.12 1411.52 L2174.41 1411.52 L2173.71 1411.52 L2173 1411.52 L2172.29 1411.52 L2171.58 1411.52 L2170.88 1411.52 L2170.17 1411.52 L2169.46 1411.52 L2168.75 1411.52 L2168.04 1411.52 L2167.34 1411.52 L2166.63 1411.52 L2165.92 1411.52 L2165.21 1411.52 L2164.51 1411.52 L2163.8 1411.52 L2163.09 1411.52 L2162.38 1411.52 L2161.67 1411.52 L2160.97 1411.52 L2160.26 1411.52 L2159.55 1411.52 L2158.84 1411.52 L2158.14 1411.52 L2157.43 1411.52 L2156.72 1411.52 L2156.01 1411.52 L2155.3 1411.52 L2154.6 1411.52 L2153.89 1411.52 L2153.18 1411.52 L2152.47 1411.52 L2151.77 1411.52 L2151.06 1411.52 L2150.35 1411.52 L2149.64 1411.52 L2148.93 1411.52 L2148.23 1411.52 L2147.52 1411.52 L2146.81 1411.52 L2146.1 1411.52 L2145.4 1411.52 L2144.69 1411.52 L2143.98 1411.52 L2143.27 1411.52 L2142.56 1411.52 L2141.86 1411.52 L2141.15 1411.52 L2140.44 1411.52 L2139.73 1411.52 L2139.03 1411.52 L2138.32 1411.52 L2137.61 1411.52 L2136.9 1411.52 L2136.19 1411.52 L2135.49 1411.52 L2134.78 1411.52 L2134.07 1411.52 L2133.36 1411.52 L2132.66 1411.52 L2131.95 1411.52 L2131.24 1411.52 L2130.53 1411.52 L2129.82 1411.52 L2129.12 1411.52 L2128.41 1411.52 L2127.7 1411.52 L2126.99 1411.52 L2126.28 1411.52 L2125.58 1411.52 L2124.87 1411.52 L2124.16 1411.52 L2123.45 1411.52 L2122.75 1411.52 L2122.04 1411.52 L2121.33 1411.52 L2120.62 1411.52 L2119.91 1411.52 L2119.21 1411.52 L2118.5 1411.52 L2117.79 1411.52 L2117.08 1411.52 L2116.38 1411.52 L2115.67 1411.52 L2114.96 1411.52 L2114.25 1411.52 L2113.54 1411.52 L2112.84 1411.52 L2112.13 1411.52 L2111.42 1411.52 L2110.71 1411.52 L2110.01 1411.52 L2109.3 1411.52 L2108.59 1411.52 L2107.88 1411.52 L2107.17 1411.52 L2106.47 1411.52 L2105.76 1411.52 L2105.05 1411.52 L2104.34 1411.52 L2103.64 1411.52 L2102.93 1411.52 L2102.22 1411.52 L2101.51 1411.52 L2100.8 1411.52 L2100.1 1411.52 L2099.39 1411.52 L2098.68 1411.52 L2097.97 1411.52 L2097.27 1411.52 L2096.56 1411.52 L2095.85 1411.52 L2095.14 1411.52 L2094.43 1411.52 L2093.73 1411.52 L2093.02 1411.52 L2092.31 1411.52 L2091.6 1411.52 L2090.9 1411.52 L2090.19 1411.52 L2089.48 1411.52 L2088.77 1411.52 L2088.06 1411.52 L2087.36 1411.52 L2086.65 1411.52 L2085.94 1411.52 L2085.23 1411.52 L2084.53 1411.52 L2083.82 1411.52 L2083.11 1411.52 L2082.4 1411.52 L2081.69 1411.52 L2080.99 1411.52 L2080.28 1411.52 L2079.57 1411.52 L2078.86 1411.52 L2078.16 1411.52 L2077.45 1411.52 L2076.74 1411.52 L2076.03 1411.52 L2075.32 1411.52 L2074.62 1411.52 L2073.91 1411.52 L2073.2 1411.52 L2072.49 1411.52 L2071.79 1411.52 L2071.08 1411.52 L2070.37 1411.52 L2069.66 1411.52 L2068.95 1411.52 L2068.25 1411.52 L2067.54 1411.52 L2066.83 1411.52 L2066.12 1411.52 L2065.42 1411.52 L2064.71 1411.52 L2064 1411.52 L2063.29 1411.52 L2062.58 1411.52 L2061.88 1411.52 L2061.17 1411.52 L2060.46 1411.52 L2059.75 1411.52 L2059.05 1411.52 L2058.34 1411.52 L2057.63 1411.52 L2056.92 1411.52 L2056.21 1411.52 L2055.51 1411.52 L2054.8 1411.52 L2054.09 1411.52 L2053.38 1411.52 L2052.68 1411.52 L2051.97 1411.52 L2051.26 1411.52 L2050.55 1411.52 L2049.84 1411.52 L2049.14 1411.52 L2048.43 1411.52 L2047.72 1411.52 L2047.01 1411.52 L2046.3 1411.52 L2045.6 1411.52 L2044.89 1411.52 L2044.18 1411.52 L2043.47 1411.52 L2042.77 1411.52 L2042.06 1411.52 L2041.35 1411.52 L2040.64 1411.52 L2039.93 1411.52 L2039.23 1411.52 L2038.52 1411.52 L2037.81 1411.52 L2037.1 1411.52 L2036.4 1411.52 L2035.69 1411.52 L2034.98 1411.52 L2034.27 1411.52 L2033.56 1411.52 L2032.86 1411.52 L2032.15 1411.52 L2031.44 1411.52 L2030.73 1411.52 L2030.03 1411.52 L2029.32 1411.52 L2028.61 1411.52 L2027.9 1411.52 L2027.19 1411.52 L2026.49 1411.52 L2025.78 1411.52 L2025.07 1411.52 L2024.36 1411.52 L2023.66 1411.52 L2022.95 1411.52 L2022.24 1411.52 L2021.53 1411.52 L2020.82 1411.52 L2020.12 1411.52 L2019.41 1411.52 L2018.7 1411.52 L2017.99 1411.52 L2017.29 1411.52 L2016.58 1411.52 L2015.87 1411.52 L2015.16 1411.52 L2014.45 1411.52 L2013.75 1411.52 L2013.04 1411.52 L2012.33 1411.52 L2011.62 1411.52 L2010.92 1411.52 L2010.21 1411.52 L2009.5 1411.52 L2008.79 1411.52 L2008.08 1411.52 L2007.38 1411.52 L2006.67 1411.52 L2005.96 1411.52 L2005.25 1411.52 L2004.55 1411.52 L2003.84 1411.52 L2003.13 1411.52 L2002.42 1411.52 L2001.71 1411.52 L2001.01 1411.52 L2000.3 1411.52 L1999.59 1411.52 L1998.88 1411.52 L1998.18 1411.52 L1997.47 1411.52 L1996.76 1411.52 L1996.05 1411.52 L1995.34 1411.52 L1994.64 1411.52 L1993.93 1411.52 L1993.22 1411.52 L1992.51 1411.52 L1991.81 1411.52 L1991.1 1411.52 L1990.39 1411.52 L1989.68 1411.52 L1988.97 1411.52 L1988.27 1411.52 L1987.56 1411.52 L1986.85 1411.52 L1986.14 1411.52 L1985.44 1411.52 L1984.73 1411.52 L1984.02 1411.52 L1983.31 1411.52 L1982.6 1411.52 L1981.9 1411.52 L1981.19 1411.52 L1980.48 1411.52 L1979.77 1411.52 L1979.07 1411.52 L1978.36 1411.52 L1977.65 1411.52 L1976.94 1411.52 L1976.23 1411.52 L1975.53 1411.52 L1974.82 1411.52 L1974.11 1411.52 L1973.4 1411.52 L1972.69 1411.52 L1971.99 1411.52 L1971.28 1411.52 L1970.57 1411.52 L1969.86 1411.52 L1969.16 1411.52 L1968.45 1411.52 L1967.74 1411.52 L1967.03 1411.52 L1966.32 1411.52 L1965.62 1411.52 L1964.91 1411.52 L1964.2 1411.52 L1963.49 1411.52 L1962.79 1411.52 L1962.08 1411.52 L1961.37 1411.52 L1960.66 1411.52 L1959.95 1411.52 L1959.25 1411.52 L1958.54 1411.52 L1957.83 1411.52 L1957.12 1411.52 L1956.42 1411.52 L1955.71 1411.52 L1955 1411.52 L1954.29 1411.52 L1953.58 1411.52 L1952.88 1411.52 L1952.17 1411.52 L1951.46 1411.52 L1950.75 1411.52 L1950.05 1411.52 L1949.34 1411.52 L1948.63 1411.52 L1947.92 1411.52 L1947.21 1411.52 L1946.51 1411.52 L1945.8 1411.52 L1945.09 1411.52 L1944.38 1411.52 L1943.68 1411.52 L1942.97 1411.52 L1942.26 1411.52 L1941.55 1411.52 L1940.84 1411.52 L1940.14 1411.52 L1939.43 1411.52 L1938.72 1411.52 L1938.01 1411.52 L1937.31 1411.52 L1936.6 1411.52 L1935.89 1411.52 L1935.18 1411.52 L1934.47 1411.52 L1933.77 1411.52 L1933.06 1411.52 L1932.35 1411.52 L1931.64 1411.52 L1930.94 1411.52 L1930.23 1411.52 L1929.52 1411.52 L1928.81 1411.52 L1928.1 1411.52 L1927.4 1411.52 L1926.69 1411.52 L1925.98 1411.52 L1925.27 1411.52 L1924.57 1411.52 L1923.86 1411.52 L1923.15 1411.52 L1922.44 1411.52 L1921.73 1411.52 L1921.03 1411.52 L1920.32 1411.52 L1919.61 1411.52 L1918.9 1411.52 L1918.2 1411.52 L1917.49 1411.52 L1916.78 1411.52 L1916.07 1411.52 L1915.36 1411.52 L1914.66 1411.52 L1913.95 1411.52 L1913.24 1411.52 L1912.53 1411.52 L1911.83 1411.52 L1911.12 1411.52 L1910.41 1411.52 L1909.7 1411.52 L1908.99 1411.52 L1908.29 1411.52 L1907.58 1411.52 L1906.87 1411.52 L1906.16 1411.52 L1905.46 1411.52 L1904.75 1411.52 L1904.04 1411.52 L1903.33 1411.52 L1902.62 1411.52 L1901.92 1411.52 L1901.21 1411.52 L1900.5 1411.52 L1899.79 1411.52 L1899.08 1411.52 L1898.38 1411.52 L1897.67 1411.52 L1896.96 1411.52 L1896.25 1411.52 L1895.55 1411.52 L1894.84 1411.52 L1894.13 1411.52 L1893.42 1411.52 L1892.71 1411.52 L1892.01 1411.52 L1891.3 1411.52 L1890.59 1411.52 L1889.88 1411.52 L1889.18 1411.52 L1888.47 1411.52 L1887.76 1411.52 L1887.05 1411.52 L1886.34 1411.52 L1885.64 1411.52 L1884.93 1411.52 L1884.22 1411.52 L1883.51 1411.52 L1882.81 1411.52 L1882.1 1411.52 L1881.39 1411.52 L1880.68 1411.52 L1879.97 1411.52 L1879.27 1411.52 L1878.56 1411.52 L1877.85 1411.52 L1877.14 1411.52 L1876.44 1411.52 L1875.73 1411.52 L1875.02 1411.52 L1874.31 1411.52 L1873.6 1411.52 L1872.9 1411.52 L1872.19 1411.52 L1871.48 1411.52 L1870.77 1411.52 L1870.07 1411.52 L1869.36 1411.52 L1868.65 1411.52 L1867.94 1411.52 L1867.23 1411.52 L1866.53 1411.52 L1865.82 1411.52 L1865.11 1411.52 L1864.4 1411.52 L1863.7 1411.52 L1862.99 1411.52 L1862.28 1411.52 L1861.57 1411.52 L1860.86 1411.52 L1860.16 1411.52 L1859.45 1411.52 L1858.74 1411.52 L1858.03 1411.52 L1857.33 1411.52 L1856.62 1411.52 L1855.91 1411.52 L1855.2 1411.52 L1854.49 1411.52 L1853.79 1411.52 L1853.08 1411.52 L1852.37 1411.52 L1851.66 1411.52 L1850.96 1411.52 L1850.25 1411.52 L1849.54 1411.52 L1848.83 1411.52 L1848.12 1411.52 L1847.42 1411.52 L1846.71 1411.52 L1846 1411.52 L1845.29 1411.52 L1844.59 1411.52 L1843.88 1411.52 L1843.17 1411.52 L1842.46 1411.52 L1841.75 1411.52 L1841.05 1411.52 L1840.34 1411.52 L1839.63 1411.52 L1838.92 1411.52 L1838.22 1411.52 L1837.51 1411.52 L1836.8 1411.52 L1836.09 1411.52 L1835.38 1411.52 L1834.68 1411.52 L1833.97 1411.52 L1833.26 1411.52 L1832.55 1411.52 L1831.85 1411.52 L1831.14 1411.52 L1830.43 1411.52 L1829.72 1411.52 L1829.01 1411.52 L1828.31 1411.52 L1827.6 1411.52 L1826.89 1411.52 L1826.18 1411.52 L1825.48 1411.52 L1824.77 1411.52 L1824.06 1411.52 L1823.35 1411.52 L1822.64 1411.52 L1821.94 1411.52 L1821.23 1411.52 L1820.52 1411.52 L1819.81 1411.52 L1819.1 1411.52 L1818.4 1411.52 L1817.69 1411.52 L1816.98 1411.52 L1816.27 1411.52 L1815.57 1411.52 L1814.86 1411.52 L1814.15 1411.52 L1813.44 1411.52 L1812.73 1411.52 L1812.03 1411.52 L1811.32 1411.52 L1810.61 1411.52 L1809.9 1411.52 L1809.2 1411.52 L1808.49 1411.52 L1807.78 1411.52 L1807.07 1411.52 L1806.36 1411.52 L1805.66 1411.52 L1804.95 1411.52 L1804.24 1411.52 L1803.53 1411.52 L1802.83 1411.52 L1802.12 1411.52 L1801.41 1411.52 L1800.7 1411.52 L1799.99 1411.52 L1799.29 1411.52 L1798.58 1411.52 L1797.87 1411.52 L1797.16 1411.52 L1796.46 1411.52 L1795.75 1411.52 L1795.04 1411.52 L1794.33 1411.52 L1793.62 1411.52 L1792.92 1411.52 L1792.21 1411.52 L1791.5 1411.52 L1790.79 1411.52 L1790.09 1411.52 L1789.38 1411.52 L1788.67 1411.52 L1787.96 1411.52 L1787.25 1411.52 L1786.55 1411.52 L1785.84 1411.52 L1785.13 1411.52 L1784.42 1411.52 L1783.72 1411.52 L1783.01 1411.52 L1782.3 1411.52 L1781.59 1411.52 L1780.88 1411.52 L1780.18 1411.52 L1779.47 1411.52 L1778.76 1411.52 L1778.05 1411.52 L1777.35 1411.52 L1776.64 1411.52 L1775.93 1411.52 L1775.22 1411.52 L1774.51 1411.52 L1773.81 1411.52 L1773.1 1411.52 L1772.39 1411.52 L1771.68 1411.52 L1770.98 1411.52 L1770.27 1411.52 L1769.56 1411.52 L1768.85 1411.52 L1768.14 1411.52 L1767.44 1411.52 L1766.73 1411.52 L1766.02 1411.52 L1765.31 1411.52 L1764.61 1411.52 L1763.9 1411.52 L1763.19 1411.52 L1762.48 1411.52 L1761.77 1411.52 L1761.07 1411.52 L1760.36 1411.52 L1759.65 1411.52 L1758.94 1411.52 L1758.24 1411.52 L1757.53 1411.52 L1756.82 1411.52 L1756.11 1411.52 L1755.4 1411.52 L1754.7 1411.52 L1753.99 1411.52 L1753.28 1411.52 L1752.57 1411.52 L1751.87 1411.52 L1751.16 1411.52 L1750.45 1411.52 L1749.74 1411.52 L1749.03 1411.52 L1748.33 1411.52 L1747.62 1411.52 L1746.91 1411.52 L1746.2 1411.52 L1745.49 1411.52 L1744.79 1411.52 L1744.08 1411.52 L1743.37 1411.52 L1742.66 1411.52 L1741.96 1411.52 L1741.25 1411.52 L1740.54 1411.52 L1739.83 1411.52 L1739.12 1411.52 L1738.42 1411.52 L1737.71 1411.52 L1737 1411.52 L1736.29 1411.52 L1735.59 1411.52 L1734.88 1411.52 L1734.17 1411.52 L1733.46 1411.52 L1732.75 1411.52 L1732.05 1411.52 L1731.34 1411.52 L1730.63 1411.52 L1729.92 1411.52 L1729.22 1411.52 L1728.51 1411.52 L1727.8 1411.52 L1727.09 1411.52 L1726.38 1411.52 L1725.68 1411.52 L1724.97 1411.52 L1724.26 1411.52 L1723.55 1411.52 L1722.85 1411.52 L1722.14 1411.52 L1721.43 1411.52 L1720.72 1411.52 L1720.01 1411.52 L1719.31 1411.52 L1718.6 1411.52 L1717.89 1411.52 L1717.18 1411.52 L1716.48 1411.52 L1715.77 1411.52 L1715.06 1411.52 L1714.35 1411.52 L1713.64 1411.52 L1712.94 1411.52 L1712.23 1411.52 L1711.52 1411.52 L1710.81 1411.52 L1710.11 1411.52 L1709.4 1411.52 L1708.69 1411.52 L1707.98 1411.52 L1707.27 1411.52 L1706.57 1411.52 L1705.86 1411.52 L1705.15 1411.52 L1704.44 1411.52 L1703.74 1411.52 L1703.03 1411.52 L1702.32 1411.52 L1701.61 1411.52 L1700.9 1411.52 L1700.2 1411.52 L1699.49 1411.52 L1698.78 1411.52 L1698.07 1411.52 L1697.37 1411.52 L1696.66 1411.52 L1695.95 1411.52 L1695.24 1411.52 L1694.53 1411.52 L1693.83 1411.52 L1693.12 1411.52 L1692.41 1411.52 L1691.7 1411.52 L1691 1411.52 L1690.29 1411.52 L1689.58 1411.52 L1688.87 1411.52 L1688.16 1411.52 L1687.46 1411.52 L1686.75 1411.52 L1686.04 1411.52 L1685.33 1411.52 L1684.63 1411.52 L1683.92 1411.52 L1683.21 1411.52 L1682.5 1411.52 L1681.79 1411.52 L1681.09 1411.52 L1680.38 1411.52 L1679.67 1411.52 L1678.96 1411.52 L1678.26 1411.52 L1677.55 1411.52 L1676.84 1411.52 L1676.13 1411.52 L1675.42 1411.52 L1674.72 1411.52 L1674.01 1411.52 L1673.3 1411.52 L1672.59 1411.52 L1671.89 1411.52 L1671.18 1411.52 L1670.47 1411.52 L1669.76 1411.52 L1669.05 1411.52 L1668.35 1411.52 L1667.64 1411.52 L1666.93 1411.52 L1666.22 1411.52 L1665.51 1411.52 L1664.81 1411.52 L1664.1 1411.52 L1663.39 1411.52 L1662.68 1411.52 L1661.98 1411.52 L1661.27 1411.52 L1660.56 1411.52 L1659.85 1411.52 L1659.14 1411.52 L1658.44 1411.52 L1657.73 1411.52 L1657.02 1411.52 L1656.31 1411.52 L1655.61 1411.52 L1654.9 1411.52 L1654.19 1411.52 L1653.48 1411.52 L1652.77 1411.52 L1652.07 1411.52 L1651.36 1411.52 L1650.65 1411.52 L1649.94 1411.52 L1649.24 1411.52 L1648.53 1411.52 L1647.82 1411.52 L1647.11 1411.52 L1646.4 1411.52 L1645.7 1411.52 L1644.99 1411.52 L1644.28 1411.52 L1643.57 1411.52 L1642.87 1411.52 L1642.16 1411.52 L1641.45 1411.52 L1640.74 1411.52 L1640.03 1411.52 L1639.33 1411.52 L1638.62 1411.52 L1637.91 1411.52 L1637.2 1411.52 L1636.5 1411.52 L1635.79 1411.52 L1635.08 1411.52 L1634.37 1411.52 L1633.66 1411.52 L1632.96 1411.52 L1632.25 1411.52 L1631.54 1411.52 L1630.83 1411.52 L1630.13 1411.52 L1629.42 1411.52 L1628.71 1411.52 L1628 1411.52 L1627.29 1411.52 L1626.59 1411.52 L1625.88 1411.52 L1625.17 1411.52 L1624.46 1411.52 L1623.76 1411.52 L1623.05 1411.52 L1622.34 1411.52 L1621.63 1411.52 L1620.92 1411.52 L1620.22 1411.52 L1619.51 1411.52 L1618.8 1411.52 L1618.09 1411.52 L1617.39 1411.52 L1616.68 1411.52 L1615.97 1411.52 L1615.26 1411.52 L1614.55 1411.52 L1613.85 1411.52 L1613.14 1411.52 L1612.43 1411.52 L1611.72 1411.52 L1611.02 1411.52 L1610.31 1411.52 L1609.6 1411.52 L1608.89 1411.52 L1608.18 1411.52 L1607.48 1411.52 L1606.77 1411.52 L1606.06 1411.52 L1605.35 1411.52 L1604.65 1411.52 L1603.94 1411.52 L1603.23 1411.52 L1602.52 1411.52 L1601.81 1411.52 L1601.11 1411.52 L1600.4 1411.52 L1599.69 1411.52 L1598.98 1411.52 L1598.28 1411.52 L1597.57 1411.52 L1596.86 1411.52 L1596.15 1411.52 L1595.44 1411.52 L1594.74 1411.52 L1594.03 1411.52 L1593.32 1411.52 L1592.61 1411.52 L1591.9 1411.52 L1591.2 1411.52 L1590.49 1411.52 L1589.78 1411.52 L1589.07 1411.52 L1588.37 1411.52 L1587.66 1411.52 L1586.95 1411.52 L1586.24 1411.52 L1585.53 1411.52 L1584.83 1411.52 L1584.12 1411.52 L1583.41 1411.52 L1582.7 1411.52 L1582 1411.52 L1581.29 1411.52 L1580.58 1411.52 L1579.87 1411.52 L1579.16 1411.52 L1578.46 1411.52 L1577.75 1411.52 L1577.04 1411.52 L1576.33 1411.52 L1575.63 1411.52 L1574.92 1411.52 L1574.21 1411.52 L1573.5 1411.52 L1572.79 1411.52 L1572.09 1411.52 L1571.38 1411.52 L1570.67 1411.52 L1569.96 1411.52 L1569.26 1411.52 L1568.55 1411.52 L1567.84 1411.52 L1567.13 1411.52 L1566.42 1411.52 L1565.72 1411.52 L1565.01 1411.52 L1564.3 1411.52 L1563.59 1411.52 L1562.89 1411.52 L1562.18 1411.52 L1561.47 1411.52 L1560.76 1411.52 L1560.05 1411.52 L1559.35 1411.52 L1558.64 1411.52 L1557.93 1411.52 L1557.22 1411.52 L1556.52 1411.52 L1555.81 1411.52 L1555.1 1411.52 L1554.39 1411.52 L1553.68 1411.52 L1552.98 1411.52 L1552.27 1411.52 L1551.56 1411.52 L1550.85 1411.52 L1550.15 1411.52 L1549.44 1411.52 L1548.73 1411.52 L1548.02 1411.52 L1547.31 1411.52 L1546.61 1411.52 L1545.9 1411.52 L1545.19 1411.52 L1544.48 1411.52 L1543.78 1411.52 L1543.07 1411.52 L1542.36 1411.52 L1541.65 1411.52 L1540.94 1411.52 L1540.24 1411.52 L1539.53 1411.52 L1538.82 1411.52 L1538.11 1411.52 L1537.41 1411.52 L1536.7 1411.52 L1535.99 1411.52 L1535.28 1411.52 L1534.57 1411.52 L1533.87 1411.52 L1533.16 1411.52 L1532.45 1411.52 L1531.74 1411.52 L1531.04 1411.52 L1530.33 1411.52 L1529.62 1411.52 L1528.91 1411.52 L1528.2 1411.52 L1527.5 1411.52 L1526.79 1411.52 L1526.08 1411.52 L1525.37 1411.52 L1524.67 1411.52 L1523.96 1411.52 L1523.25 1411.52 L1522.54 1411.52 L1521.83 1411.52 L1521.13 1411.52 L1520.42 1411.52 L1519.71 1411.52 L1519 1411.52 L1518.3 1411.52 L1517.59 1411.52 L1516.88 1411.52 L1516.17 1411.52 L1515.46 1411.52 L1514.76 1411.52 L1514.05 1411.52 L1513.34 1411.52 L1512.63 1411.52 L1511.92 1411.52 L1511.22 1411.52 L1510.51 1411.52 L1509.8 1411.52 L1509.09 1411.52 L1508.39 1411.52 L1507.68 1411.52 L1506.97 1411.52 L1506.26 1411.52 L1505.55 1411.52 L1504.85 1411.52 L1504.14 1411.52 L1503.43 1411.52 L1502.72 1411.52 L1502.02 1411.52 L1501.31 1411.52 L1500.6 1411.52 L1499.89 1411.52 L1499.18 1411.52 L1498.48 1411.52 L1497.77 1411.52 L1497.06 1411.52 L1496.35 1411.52 L1495.65 1411.52 L1494.94 1411.52 L1494.23 1411.52 L1493.52 1411.52 L1492.81 1411.52 L1492.11 1411.52 L1491.4 1411.52 L1490.69 1411.52 L1489.98 1411.52 L1489.28 1411.52 L1488.57 1411.52 L1487.86 1411.52 L1487.15 1411.52 L1486.44 1411.52 L1485.74 1411.52 L1485.03 1411.52 L1484.32 1411.52 L1483.61 1411.52 L1482.91 1411.52 L1482.2 1411.52 L1481.49 1411.52 L1480.78 1411.52 L1480.07 1411.52 L1479.37 1411.52 L1478.66 1411.52 L1477.95 1411.52 L1477.24 1411.52 L1476.54 1411.52 L1475.83 1411.52 L1475.12 1411.52 L1474.41 1411.52 L1473.7 1411.52 L1473 1411.52 L1472.29 1411.52 L1471.58 1411.52 L1470.87 1411.52 L1470.17 1411.52 L1469.46 1411.52 L1468.75 1411.52 L1468.04 1411.52 L1467.33 1411.52 L1466.63 1411.52 L1465.92 1411.52 L1465.21 1411.52 L1464.5 1411.52 L1463.8 1411.52 L1463.09 1411.52 L1462.38 1411.52 L1461.67 1411.52 L1460.96 1411.52 L1460.26 1411.52 L1459.55 1411.52 L1458.84 1411.52 L1458.13 1411.52 L1457.43 1411.52 L1456.72 1411.52 L1456.01 1411.52 L1455.3 1411.52 L1454.59 1411.52 L1453.89 1411.52 L1453.18 1411.52 L1452.47 1411.52 L1451.76 1411.52 L1451.06 1411.52 L1450.35 1411.52 L1449.64 1411.52 L1448.93 1411.52 L1448.22 1411.52 L1447.52 1411.52 L1446.81 1411.52 L1446.1 1411.52 L1445.39 1411.52 L1444.69 1411.52 L1443.98 1411.52 L1443.27 1411.52 L1442.56 1411.52 L1441.85 1411.52 L1441.15 1411.52 L1440.44 1411.52 L1439.73 1411.52 L1439.02 1411.52 L1438.31 1411.52 L1437.61 1411.52 L1436.9 1411.52 L1436.19 1411.52 L1435.48 1411.52 L1434.78 1411.52 L1434.07 1411.52 L1433.36 1411.52 L1432.65 1411.52 L1431.94 1411.52 L1431.24 1411.52 L1430.53 1411.52 L1429.82 1411.52 L1429.11 1411.52 L1428.41 1411.52 L1427.7 1411.52 L1426.99 1411.52 L1426.28 1411.52 L1425.57 1411.52 L1424.87 1411.52 L1424.16 1411.52 L1423.45 1411.52 L1422.74 1411.52 L1422.04 1411.52 L1421.33 1411.52 L1420.62 1411.52 L1419.91 1411.52 L1419.2 1411.52 L1418.5 1411.52 L1417.79 1411.52 L1417.08 1411.52 L1416.37 1411.52 L1415.67 1411.52 L1414.96 1411.52 L1414.25 1411.52 L1413.54 1411.52 L1412.83 1411.52 L1412.13 1411.52 L1411.42 1411.52 L1410.71 1411.52 L1410 1411.52 L1409.3 1411.52 L1408.59 1411.52 L1407.88 1411.52 L1407.17 1411.52 L1406.46 1411.52 L1405.76 1411.52 L1405.05 1411.52 L1404.34 1411.52 L1403.63 1411.52 L1402.93 1411.52 L1402.22 1411.52 L1401.51 1411.52 L1400.8 1411.52 L1400.09 1411.52 L1399.39 1411.52 L1398.68 1411.52 L1397.97 1411.52 L1397.26 1411.52 L1396.56 1411.52 L1395.85 1411.52 L1395.14 1411.52 L1394.43 1411.52 L1393.72 1411.52 L1393.02 1411.52 L1392.31 1411.52 L1391.6 1411.52 L1390.89 1411.52 L1390.19 1411.52 L1389.48 1411.52 L1388.77 1411.52 L1388.06 1411.52 L1387.35 1411.52 L1386.65 1411.52 L1385.94 1411.52 L1385.23 1411.52 L1384.52 1411.52 L1383.82 1411.52 L1383.11 1411.52 L1382.4 1411.52 L1381.69 1411.52 L1380.98 1411.52 L1380.28 1411.52 L1379.57 1411.52 L1378.86 1411.52 L1378.15 1411.52 L1377.45 1411.52 L1376.74 1411.52 L1376.03 1411.52 L1375.32 1411.52 L1374.61 1411.52 L1373.91 1411.52 L1373.2 1411.52 L1372.49 1411.52 L1371.78 1411.52 L1371.08 1411.52 L1370.37 1411.52 L1369.66 1411.52 L1368.95 1411.52 L1368.24 1411.52 L1367.54 1411.52 L1366.83 1411.52 L1366.12 1411.52 L1365.41 1411.52 L1364.71 1411.52 L1364 1411.52 L1363.29 1411.52 L1362.58 1411.52 L1361.87 1411.52 L1361.17 1411.52 L1360.46 1411.52 L1359.75 1411.52 L1359.04 1411.52 L1358.33 1411.52 L1357.63 1411.52 L1356.92 1411.52 L1356.21 1411.52 L1355.5 1411.52 L1354.8 1411.52 L1354.09 1411.52 L1353.38 1411.52 L1352.67 1411.52 L1351.96 1411.52 L1351.26 1411.52 L1350.55 1411.52 L1349.84 1411.52 L1349.13 1411.52 L1348.43 1411.52 L1347.72 1411.52 L1347.01 1411.52 L1346.3 1411.52 L1345.59 1411.52 L1344.89 1411.52 L1344.18 1411.52 L1343.47 1411.52 L1342.76 1411.52 L1342.06 1411.52 L1341.35 1411.52 L1340.64 1411.52 L1339.93 1411.52 L1339.22 1411.52 L1338.52 1411.52 L1337.81 1411.52 L1337.1 1411.52 L1336.39 1411.52 L1335.69 1411.52 L1334.98 1411.52 L1334.27 1411.52 L1333.56 1411.52 L1332.85 1411.52 L1332.15 1411.52 L1331.44 1411.52 L1330.73 1411.52 L1330.02 1411.52 L1329.32 1411.52 L1328.61 1411.52 L1327.9 1411.52 L1327.19 1411.52 L1326.48 1411.52 L1325.78 1411.52 L1325.07 1411.52 L1324.36 1411.52 L1323.65 1411.52 L1322.95 1411.52 L1322.24 1411.52 L1321.53 1411.52 L1320.82 1411.52 L1320.11 1411.52 L1319.41 1411.52 L1318.7 1411.52 L1317.99 1411.52 L1317.28 1411.52 L1316.58 1411.52 L1315.87 1411.52 L1315.16 1411.52 L1314.45 1411.52 L1313.74 1411.52 L1313.04 1411.52 L1312.33 1411.52 L1311.62 1411.52 L1310.91 1411.52 L1310.21 1411.52 L1309.5 1411.52 L1308.79 1411.52 L1308.08 1411.52 L1307.37 1411.52 L1306.67 1411.52 L1305.96 1411.52 L1305.25 1411.52 L1304.54 1411.52 L1303.84 1411.52 L1303.13 1411.52 L1302.42 1411.52 L1301.71 1411.52 L1301 1411.52 L1300.3 1411.52 L1299.59 1411.52 L1298.88 1411.52 L1298.17 1411.52 L1297.47 1411.52 L1296.76 1411.52 L1296.05 1411.52 L1295.34 1411.52 L1294.63 1411.52 L1293.93 1411.52 L1293.22 1411.52 L1292.51 1411.52 L1291.8 1411.52 L1291.1 1411.52 L1290.39 1411.52 L1289.68 1411.52 L1288.97 1411.52 L1288.26 1411.52 L1287.56 1411.52 L1286.85 1411.52 L1286.14 1411.52 L1285.43 1411.52 L1284.72 1411.52 L1284.02 1411.52 L1283.31 1411.52 L1282.6 1411.52 L1281.89 1411.52 L1281.19 1411.52 L1280.48 1411.52 L1279.77 1411.52 L1279.06 1411.52 L1278.35 1411.52 L1277.65 1411.52 L1276.94 1411.52 L1276.23 1411.52 L1275.52 1411.52 L1274.82 1411.52 L1274.11 1411.52 L1273.4 1411.52 L1272.69 1411.52 L1271.98 1411.52 L1271.28 1411.52 L1270.57 1411.52 L1269.86 1411.52 L1269.15 1411.52 L1268.45 1411.52 L1267.74 1411.52 L1267.03 1411.52 L1266.32 1411.52 L1265.61 1411.52 L1264.91 1411.52 L1264.2 1411.52 L1263.49 1411.52 L1262.78 1411.52 L1262.08 1411.52 L1261.37 1411.52 L1260.66 1411.52 L1259.95 1411.52 L1259.24 1411.52 L1258.54 1411.52 L1257.83 1411.52 L1257.12 1411.52 L1256.41 1411.52 L1255.71 1411.52 L1255 1411.52 L1254.29 1411.52 L1253.58 1411.52 L1252.87 1411.52 L1252.17 1411.52 L1251.46 1411.52 L1250.75 1411.52 L1250.04 1411.52 L1249.34 1411.52 L1248.63 1411.52 L1247.92 1411.52 L1247.21 1411.52 L1246.5 1411.52 L1245.8 1411.52 L1245.09 1411.52 L1244.38 1411.52 L1243.67 1411.52 L1242.97 1411.52 L1242.26 1411.52 L1241.55 1411.52 L1240.84 1411.52 L1240.13 1411.52 L1239.43 1411.52 L1238.72 1411.52 L1238.01 1411.52 L1237.3 1411.52 L1236.6 1411.52 L1235.89 1411.52 L1235.18 1411.52 L1234.47 1411.52 L1233.76 1411.52 L1233.06 1411.52 L1232.35 1411.52 L1231.64 1411.52 L1230.93 1411.52 L1230.23 1411.52 L1229.52 1411.52 L1228.81 1411.52 L1228.1 1411.52 L1227.39 1411.52 L1226.69 1411.52 L1225.98 1411.52 L1225.27 1411.52 L1224.56 1411.52 L1223.86 1411.52 L1223.15 1411.52 L1222.44 1411.52 L1221.73 1411.52 L1221.02 1411.52 L1220.32 1411.52 L1219.61 1411.52 L1218.9 1411.52 L1218.19 1411.52 L1217.49 1411.52 L1216.78 1411.52 L1216.07 1411.52 L1215.36 1411.52 L1214.65 1411.52 L1213.95 1411.52 L1213.24 1411.52 L1212.53 1411.52 L1211.82 1411.52 L1211.12 1411.52 L1210.41 1411.52 L1209.7 1411.52 L1208.99 1411.52 L1208.28 1411.52 L1207.58 1411.52 L1206.87 1411.52 L1206.16 1411.52 L1205.45 1411.52 L1204.74 1411.52 L1204.04 1411.52 L1203.33 1411.52 L1202.62 1411.52 L1201.91 1411.52 L1201.21 1411.52 L1200.5 1411.52 L1199.79 1411.52 L1199.08 1411.52 L1198.37 1411.52 L1197.67 1411.52 L1196.96 1411.52 L1196.25 1411.52 L1195.54 1411.52 L1194.84 1411.52 L1194.13 1411.52 L1193.42 1411.52 L1192.71 1411.52 L1192 1411.52 L1191.3 1411.52 L1190.59 1411.52 L1189.88 1411.52 L1189.17 1411.52 L1188.47 1411.52 L1187.76 1411.52 L1187.05 1411.52 L1186.34 1411.52 L1185.63 1411.52 L1184.93 1411.52 L1184.22 1411.52 L1183.51 1411.52 L1182.8 1411.52 L1182.1 1411.52 L1181.39 1411.52 L1180.68 1411.52 L1179.97 1411.52 L1179.26 1411.52 L1178.56 1411.52 L1177.85 1411.52 L1177.14 1411.52 L1176.43 1411.52 L1175.73 1411.52 L1175.02 1411.52 L1174.31 1411.52 L1173.6 1411.52 L1172.89 1411.52 L1172.19 1411.52 L1171.48 1411.52 L1170.77 1411.52 L1170.06 1411.52 L1169.36 1411.52 L1168.65 1411.52 L1167.94 1411.52 L1167.23 1411.52 L1166.52 1411.52 L1165.82 1411.52 L1165.11 1411.52 L1164.4 1411.52 L1163.69 1411.52 L1162.99 1411.52 L1162.28 1411.52 L1161.57 1411.52 L1160.86 1411.52 L1160.15 1411.52 L1159.45 1411.52 L1158.74 1411.52 L1158.03 1411.52 L1157.32 1411.52 L1156.62 1411.52 L1155.91 1411.52 L1155.2 1411.52 L1154.49 1411.52 L1153.78 1411.52 L1153.08 1411.52 L1152.37 1411.52 L1151.66 1411.52 L1150.95 1411.52 L1150.25 1411.52 L1149.54 1411.52 L1148.83 1411.52 L1148.12 1411.52 L1147.41 1411.52 L1146.71 1411.52 L1146 1411.52 L1145.29 1411.52 L1144.58 1411.52 L1143.88 1411.52 L1143.17 1411.52 L1142.46 1411.52 L1141.75 1411.52 L1141.04 1411.52 L1140.34 1411.52 L1139.63 1411.52 L1138.92 1411.52 L1138.21 1411.52 L1137.51 1411.52 L1136.8 1411.52 L1136.09 1411.52 L1135.38 1411.52 L1134.67 1411.52 L1133.97 1411.52 L1133.26 1411.52 L1132.55 1411.52 L1131.84 1411.52 L1131.13 1411.52 L1130.43 1411.52 L1129.72 1411.52 L1129.01 1411.52 L1128.3 1411.52 L1127.6 1411.52 L1126.89 1411.52 L1126.18 1411.52 L1125.47 1411.52 L1124.76 1411.52 L1124.06 1411.52 L1123.35 1411.52 L1122.64 1411.52 L1121.93 1411.52 L1121.23 1411.52 L1120.52 1411.52 L1119.81 1411.52 L1119.1 1411.52 L1118.39 1411.52 L1117.69 1411.52 L1116.98 1411.52 L1116.27 1411.52 L1115.56 1411.52 L1114.86 1411.52 L1114.15 1411.52 L1113.44 1411.52 L1112.73 1411.52 L1112.02 1411.52 L1111.32 1411.52 L1110.61 1411.52 L1109.9 1411.52 L1109.19 1411.52 L1108.49 1411.52 L1107.78 1411.52 L1107.07 1411.52 L1106.36 1411.52 L1105.65 1411.52 L1104.95 1411.52 L1104.24 1411.52 L1103.53 1411.52 L1102.82 1411.52 L1102.12 1411.52 L1101.41 1411.52 L1100.7 1411.52 L1099.99 1411.52 L1099.28 1411.52 L1098.58 1411.52 L1097.87 1411.52 L1097.16 1411.52 L1096.45 1411.52 L1095.75 1411.52 L1095.04 1411.52 L1094.33 1411.52 L1093.62 1411.52 L1092.91 1411.52 L1092.21 1411.52 L1091.5 1411.52 L1090.79 1411.52 L1090.08 1411.52 L1089.38 1411.52 L1088.67 1411.52 L1087.96 1411.52 L1087.25 1411.52 L1086.54 1411.52 L1085.84 1411.52 L1085.13 1411.52 L1084.42 1411.52 L1083.71 1411.52 L1083.01 1411.52 L1082.3 1411.52 L1081.59 1411.52 L1080.88 1411.52 L1080.17 1411.52 L1079.47 1411.52 L1078.76 1411.52 L1078.05 1411.52 L1077.34 1411.52 L1076.64 1411.52 L1075.93 1411.52 L1075.22 1411.52 L1074.51 1411.52 L1073.8 1411.52 L1073.1 1411.52 L1072.39 1411.52 L1071.68 1411.52 L1070.97 1411.52 L1070.27 1411.52 L1069.56 1411.52 L1068.85 1411.52 L1068.14 1411.52 L1067.43 1411.52 L1066.73 1411.52 L1066.02 1411.52 L1065.31 1411.52 L1064.6 1411.52 L1063.9 1411.52 L1063.19 1411.52 L1062.48 1411.52 L1061.77 1411.52 L1061.06 1411.52 L1060.36 1411.52 L1059.65 1411.52 L1058.94 1411.52 L1058.23 1411.52 L1057.53 1411.52 L1056.82 1411.52 L1056.11 1411.52 L1055.4 1411.52 L1054.69 1411.52 L1053.99 1411.52 L1053.28 1411.52 L1052.57 1411.52 L1051.86 1411.52 L1051.15 1411.52 L1050.45 1411.52 L1049.74 1411.52 L1049.03 1411.52 L1048.32 1411.52 L1047.62 1411.52 L1046.91 1411.52 L1046.2 1411.52 L1045.49 1411.52 L1044.78 1411.52 L1044.08 1411.52 L1043.37 1411.52 L1042.66 1411.52 L1041.95 1411.52 L1041.25 1411.52 L1040.54 1411.52 L1039.83 1411.52 L1039.12 1411.52 L1038.41 1411.52 L1037.71 1411.52 L1037 1411.52 L1036.29 1411.52 L1035.58 1411.52 L1034.88 1411.52 L1034.17 1411.52 L1033.46 1411.52 L1032.75 1411.52 L1032.04 1411.52 L1031.34 1411.52 L1030.63 1411.52 L1029.92 1411.52 L1029.21 1411.52 L1028.51 1411.52 L1027.8 1411.52 L1027.09 1411.52 L1026.38 1411.52 L1025.67 1411.52 L1024.97 1411.52 L1024.26 1411.52 L1023.55 1411.52 L1022.84 1411.52 L1022.14 1411.52 L1021.43 1411.52 L1020.72 1411.52 L1020.01 1411.52 L1019.3 1411.52 L1018.6 1411.52 L1017.89 1411.52 L1017.18 1411.52 L1016.47 1411.52 L1015.77 1411.52 L1015.06 1411.52 L1014.35 1411.52 L1013.64 1411.52 L1012.93 1411.52 L1012.23 1411.52 L1011.52 1411.52 L1010.81 1411.52 L1010.1 1411.52 L1009.4 1411.52 L1008.69 1411.52 L1007.98 1411.52 L1007.27 1411.52 L1006.56 1411.52 L1005.86 1411.52 L1005.15 1411.52 L1004.44 1411.52 L1003.73 1411.52 L1003.03 1411.52 L1002.32 1411.52 L1001.61 1411.52 L1000.9 1411.52 L1000.19 1411.52 L999.486 1411.52 L998.779 1411.52 L998.071 1411.52 L997.363 1411.52 L996.655 1411.52 L995.947 1411.52 L995.24 1411.52 L994.532 1411.52 L993.824 1411.52 L993.116 1411.52 L992.409 1411.52 L991.701 1411.52 L990.993 1411.52 L990.285 1411.52 L989.577 1411.52 L988.87 1411.52 L988.162 1411.52 L987.454 1411.52 L986.746 1411.52 L986.038 1411.52 L985.331 1411.52 L984.623 1411.52 L983.915 1411.52 L983.207 1411.52 L982.499 1411.52 L981.792 1411.52 L981.084 1411.52 L980.376 1411.52 L979.668 1411.52 L978.961 1411.52 L978.253 1411.52 L977.545 1411.52 L976.837 1411.52 L976.129 1411.52 L975.422 1411.52 L974.714 1411.52 L974.006 1411.52 L973.298 1411.52 L972.59 1411.52 L971.883 1411.52 L971.175 1411.52 L970.467 1411.52 L969.759 1411.52 L969.051 1411.52 L968.344 1411.52 L967.636 1411.52 L966.928 1411.52 L966.22 1411.52 L965.513 1411.52 L964.805 1411.52 L964.097 1411.52 L963.389 1411.52 L962.681 1411.52 L961.974 1411.52 L961.266 1411.52 L960.558 1411.52 L959.85 1411.52 L959.142 1411.52 L958.435 1411.52 L957.727 1411.52 L957.019 1411.52 L956.311 1411.52 L955.604 1411.52 L954.896 1411.52 L954.188 1411.52 L953.48 1411.52 L952.772 1411.52 L952.065 1411.52 L951.357 1411.52 L950.649 1411.52 L949.941 1411.52 L949.233 1411.52 L948.526 1411.52 L947.818 1411.52 L947.11 1411.52 L946.402 1411.52 L945.694 1411.52 L944.987 1411.52 L944.279 1411.52 L943.571 1411.52 L942.863 1411.52 L942.156 1411.52 L941.448 1411.52 L940.74 1411.52 L940.032 1411.52 L939.324 1411.52 L938.617 1411.52 L937.909 1411.52 L937.201 1411.52 L936.493 1411.52 L935.785 1411.52 L935.078 1411.52 L934.37 1411.52 L933.662 1411.52 L932.954 1411.52 L932.247 1411.52 L931.539 1411.52 L930.831 1411.52 L930.123 1411.52 L929.415 1411.52 L928.708 1411.52 L928 1411.52 L927.292 1411.52 L926.584 1411.52 L925.876 1411.52 L925.169 1411.52 L924.461 1411.52 L923.753 1411.52 L923.045 1411.52 L922.337 1411.52 L921.63 1411.52 L920.922 1411.52 L920.214 1411.52 L919.506 1411.52 L918.799 1411.52 L918.091 1411.52 L917.383 1411.52 L916.675 1411.52 L915.967 1411.52 L915.26 1411.52 L914.552 1411.52 L913.844 1411.52 L913.136 1411.52 L912.428 1411.52 L911.721 1411.52 L911.013 1411.52 L910.305 1411.52 L909.597 1411.52 L908.89 1411.52 L908.182 1411.52 L907.474 1411.52 L906.766 1411.52 L906.058 1411.52 L905.351 1411.52 L904.643 1411.52 L903.935 1411.52 L903.227 1411.52 L902.519 1411.52 L901.812 1411.52 L901.104 1411.52 L900.396 1411.52 L899.688 1411.52 L898.98 1411.52 L898.273 1411.52 L897.565 1411.52 L896.857 1411.52 L896.149 1411.52 L895.442 1411.52 L894.734 1411.52 L894.026 1411.52 L893.318 1411.52 L892.61 1411.52 L891.903 1411.52 L891.195 1411.52 L890.487 1411.52 L889.779 1411.52 L889.071 1411.52 L888.364 1411.52 L887.656 1411.52 L886.948 1411.52 L886.24 1411.52 L885.533 1411.52 L884.825 1411.52 L884.117 1411.52 L883.409 1411.52 L882.701 1411.52 L881.994 1411.52 L881.286 1411.52 L880.578 1411.52 L879.87 1411.52 L879.162 1411.52 L878.455 1411.52 L877.747 1411.52 L877.039 1411.52 L876.331 1411.52 L875.623 1411.52 L874.916 1411.52 L874.208 1411.52  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"874.208,1412.1 874.916,1412.1 875.623,1412.1 876.331,1412.1 877.039,1412.1 877.747,1412.1 878.455,1412.1 879.162,1412.1 879.87,1412.1 880.578,1412.1 881.286,1412.1 881.994,1412.1 882.701,1412.1 883.409,1412.1 884.117,1412.1 884.825,1412.1 885.533,1412.1 886.24,1412.1 886.948,1412.1 887.656,1412.1 888.364,1412.1 889.071,1412.1 889.779,1412.1 890.487,1412.1 891.195,1412.1 891.903,1412.1 892.61,1412.1 893.318,1412.1 894.026,1412.1 894.734,1412.1 895.442,1412.1 896.149,1412.1 896.857,1412.1 897.565,1412.1 898.273,1412.1 898.98,1412.1 899.688,1412.1 900.396,1412.1 901.104,1412.1 901.812,1412.1 902.519,1412.1 903.227,1412.1 903.935,1412.1 904.643,1412.1 905.351,1412.1 906.058,1412.1 906.766,1412.1 907.474,1412.1 908.182,1412.1 908.89,1412.1 909.597,1412.1 910.305,1412.1 911.013,1412.1 911.721,1412.1 912.428,1412.1 913.136,1412.1 913.844,1412.1 914.552,1412.1 915.26,1412.1 915.967,1412.1 916.675,1412.1 917.383,1412.1 918.091,1412.1 918.799,1412.1 919.506,1412.1 920.214,1412.1 920.922,1412.1 921.63,1412.1 922.337,1412.1 923.045,1412.1 923.753,1412.1 924.461,1412.1 925.169,1412.1 925.876,1412.1 926.584,1412.1 927.292,1412.1 928,1412.1 928.708,1412.1 929.415,1412.1 930.123,1412.1 930.831,1412.1 931.539,1412.1 932.247,1412.1 932.954,1412.1 933.662,1412.1 934.37,1412.1 935.078,1412.1 935.785,1412.1 936.493,1412.1 937.201,1412.1 937.909,1412.1 938.617,1412.1 939.324,1412.1 940.032,1412.1 940.74,1412.1 941.448,1412.1 942.156,1412.1 942.863,1412.1 943.571,1412.1 944.279,1412.1 944.987,1412.1 945.694,1412.1 946.402,1412.1 947.11,1412.1 947.818,1412.1 948.526,1412.1 949.233,1412.1 949.941,1412.1 950.649,1412.1 951.357,1412.1 952.065,1412.1 952.772,1412.1 953.48,1412.1 954.188,1412.1 954.896,1412.1 955.604,1412.1 956.311,1412.1 957.019,1412.1 957.727,1412.1 958.435,1412.1 959.142,1412.1 959.85,1412.1 960.558,1412.1 961.266,1412.1 961.974,1412.1 962.681,1412.1 963.389,1412.1 964.097,1412.1 964.805,1412.1 965.513,1412.1 966.22,1412.1 966.928,1412.1 967.636,1412.1 968.344,1412.1 969.051,1412.1 969.759,1412.1 970.467,1412.1 971.175,1412.1 971.883,1412.1 972.59,1412.1 973.298,1412.1 974.006,1412.1 974.714,1412.1 975.422,1412.1 976.129,1412.1 976.837,1412.1 977.545,1412.1 978.253,1412.1 978.961,1412.1 979.668,1412.1 980.376,1412.1 981.084,1412.1 981.792,1412.1 982.499,1412.1 983.207,1412.1 983.915,1412.1 984.623,1412.1 985.331,1412.1 986.038,1412.1 986.746,1412.1 987.454,1412.1 988.162,1412.1 988.87,1412.1 989.577,1412.1 990.285,1412.1 990.993,1412.1 991.701,1412.1 992.409,1412.1 993.116,1412.1 993.824,1412.1 994.532,1412.1 995.24,1412.1 995.947,1412.1 996.655,1412.1 997.363,1412.1 998.071,1412.1 998.779,1412.1 999.486,1412.1 1000.19,1412.1 1000.9,1412.1 1001.61,1412.1 1002.32,1412.1 1003.03,1412.1 1003.73,1412.1 1004.44,1412.1 1005.15,1412.1 1005.86,1412.1 1006.56,1412.1 1007.27,1412.1 1007.98,1412.1 1008.69,1412.1 1009.4,1412.1 1010.1,1412.1 1010.81,1412.1 1011.52,1412.1 1012.23,1412.1 1012.93,1412.1 1013.64,1412.1 1014.35,1412.1 1015.06,1412.1 1015.77,1412.1 1016.47,1412.1 1017.18,1412.1 1017.89,1412.1 1018.6,1412.1 1019.3,1412.1 1020.01,1412.1 1020.72,1412.1 1021.43,1412.1 1022.14,1412.1 1022.84,1412.1 1023.55,1412.1 1024.26,1412.1 1024.97,1412.1 1025.67,1412.1 1026.38,1412.1 1027.09,1412.1 1027.8,1412.1 1028.51,1412.1 1029.21,1412.1 1029.92,1412.1 1030.63,1412.1 1031.34,1412.1 1032.04,1412.1 1032.75,1412.1 1033.46,1412.1 1034.17,1412.1 1034.88,1412.1 1035.58,1412.1 1036.29,1412.1 1037,1412.1 1037.71,1412.1 1038.41,1412.1 1039.12,1412.1 1039.83,1412.1 1040.54,1412.1 1041.25,1412.1 1041.95,1412.1 1042.66,1412.1 1043.37,1412.1 1044.08,1412.1 1044.78,1412.1 1045.49,1412.1 1046.2,1412.1 1046.91,1412.1 1047.62,1412.1 1048.32,1412.1 1049.03,1412.1 1049.74,1412.1 1050.45,1412.1 1051.15,1412.1 1051.86,1412.1 1052.57,1412.1 1053.28,1412.1 1053.99,1412.1 1054.69,1412.1 1055.4,1412.1 1056.11,1412.1 1056.82,1412.1 1057.53,1412.1 1058.23,1412.1 1058.94,1412.1 1059.65,1412.1 1060.36,1412.1 1061.06,1412.1 1061.77,1412.1 1062.48,1412.1 1063.19,1412.1 1063.9,1412.1 1064.6,1412.1 1065.31,1412.1 1066.02,1412.1 1066.73,1412.1 1067.43,1412.1 1068.14,1412.1 1068.85,1412.1 1069.56,1412.1 1070.27,1412.1 1070.97,1412.1 1071.68,1412.1 1072.39,1412.1 1073.1,1412.1 1073.8,1412.1 1074.51,1412.1 1075.22,1412.1 1075.93,1412.1 1076.64,1412.1 1077.34,1412.1 1078.05,1412.1 1078.76,1412.1 1079.47,1412.1 1080.17,1412.1 1080.88,1412.1 1081.59,1412.1 1082.3,1412.1 1083.01,1412.1 1083.71,1412.1 1084.42,1412.1 1085.13,1412.1 1085.84,1412.1 1086.54,1412.1 1087.25,1412.1 1087.96,1412.1 1088.67,1412.1 1089.38,1412.1 1090.08,1412.1 1090.79,1412.1 1091.5,1412.1 1092.21,1412.1 1092.91,1412.1 1093.62,1412.1 1094.33,1412.1 1095.04,1412.1 1095.75,1412.1 1096.45,1412.1 1097.16,1412.1 1097.87,1412.1 1098.58,1412.1 1099.28,1412.1 1099.99,1412.1 1100.7,1412.1 1101.41,1412.1 1102.12,1412.1 1102.82,1412.1 1103.53,1412.1 1104.24,1412.1 1104.95,1412.1 1105.65,1412.1 1106.36,1412.1 1107.07,1412.1 1107.78,1412.1 1108.49,1412.1 1109.19,1412.1 1109.9,1412.1 1110.61,1412.1 1111.32,1412.1 1112.02,1412.1 1112.73,1412.1 1113.44,1412.1 1114.15,1412.1 1114.86,1412.1 1115.56,1412.1 1116.27,1412.1 1116.98,1412.1 1117.69,1412.1 1118.39,1412.1 1119.1,1412.1 1119.81,1412.1 1120.52,1412.1 1121.23,1412.1 1121.93,1412.1 1122.64,1412.1 1123.35,1412.1 1124.06,1412.1 1124.76,1412.1 1125.47,1412.1 1126.18,1412.1 1126.89,1412.1 1127.6,1412.1 1128.3,1412.1 1129.01,1412.1 1129.72,1412.1 1130.43,1412.1 1131.13,1412.1 1131.84,1412.1 1132.55,1412.1 1133.26,1412.1 1133.97,1412.1 1134.67,1412.1 1135.38,1412.1 1136.09,1412.1 1136.8,1412.1 1137.51,1412.1 1138.21,1412.1 1138.92,1412.1 1139.63,1412.1 1140.34,1412.1 1141.04,1412.1 1141.75,1412.1 1142.46,1412.1 1143.17,1412.1 1143.88,1412.1 1144.58,1412.1 1145.29,1412.1 1146,1412.1 1146.71,1412.1 1147.41,1412.1 1148.12,1412.1 1148.83,1412.1 1149.54,1412.1 1150.25,1412.1 1150.95,1412.1 1151.66,1412.1 1152.37,1412.1 1153.08,1412.1 1153.78,1412.1 1154.49,1412.1 1155.2,1412.1 1155.91,1412.1 1156.62,1412.1 1157.32,1412.1 1158.03,1412.1 1158.74,1412.1 1159.45,1412.1 1160.15,1412.1 1160.86,1412.1 1161.57,1412.1 1162.28,1412.1 1162.99,1412.1 1163.69,1412.1 1164.4,1412.1 1165.11,1412.1 1165.82,1412.1 1166.52,1412.1 1167.23,1412.1 1167.94,1412.1 1168.65,1412.1 1169.36,1412.1 1170.06,1412.1 1170.77,1412.1 1171.48,1412.1 1172.19,1412.1 1172.89,1412.1 1173.6,1412.1 1174.31,1412.1 1175.02,1412.1 1175.73,1412.1 1176.43,1412.1 1177.14,1412.1 1177.85,1412.1 1178.56,1412.1 1179.26,1412.1 1179.97,1412.1 1180.68,1412.1 1181.39,1412.1 1182.1,1412.1 1182.8,1412.1 1183.51,1412.1 1184.22,1412.1 1184.93,1412.1 1185.63,1412.1 1186.34,1412.1 1187.05,1412.1 1187.76,1412.1 1188.47,1412.1 1189.17,1412.1 1189.88,1412.1 1190.59,1412.1 1191.3,1412.1 1192,1412.1 1192.71,1412.1 1193.42,1412.1 1194.13,1412.1 1194.84,1412.1 1195.54,1412.1 1196.25,1412.1 1196.96,1412.1 1197.67,1412.1 1198.37,1412.1 1199.08,1412.1 1199.79,1412.1 1200.5,1412.1 1201.21,1412.1 1201.91,1412.1 1202.62,1412.1 1203.33,1412.1 1204.04,1412.1 1204.74,1412.1 1205.45,1412.1 1206.16,1412.1 1206.87,1412.1 1207.58,1412.1 1208.28,1412.1 1208.99,1412.1 1209.7,1412.1 1210.41,1412.1 1211.12,1412.1 1211.82,1412.1 1212.53,1412.1 1213.24,1412.1 1213.95,1412.1 1214.65,1412.1 1215.36,1412.1 1216.07,1412.1 1216.78,1412.1 1217.49,1412.1 1218.19,1412.1 1218.9,1412.1 1219.61,1412.1 1220.32,1412.1 1221.02,1412.1 1221.73,1412.1 1222.44,1412.1 1223.15,1412.1 1223.86,1412.1 1224.56,1412.1 1225.27,1412.1 1225.98,1412.1 1226.69,1412.1 1227.39,1412.1 1228.1,1412.1 1228.81,1412.1 1229.52,1412.1 1230.23,1412.1 1230.93,1412.1 1231.64,1412.1 1232.35,1412.1 1233.06,1412.1 1233.76,1412.1 1234.47,1412.1 1235.18,1412.1 1235.89,1412.1 1236.6,1412.1 1237.3,1412.1 1238.01,1412.1 1238.72,1412.1 1239.43,1412.1 1240.13,1412.1 1240.84,1412.1 1241.55,1412.1 1242.26,1412.1 1242.97,1412.1 1243.67,1412.1 1244.38,1412.1 1245.09,1412.1 1245.8,1412.1 1246.5,1412.1 1247.21,1412.1 1247.92,1412.1 1248.63,1412.1 1249.34,1412.1 1250.04,1412.1 1250.75,1412.1 1251.46,1412.1 1252.17,1412.1 1252.87,1412.1 1253.58,1412.1 1254.29,1412.1 1255,1412.1 1255.71,1412.1 1256.41,1412.1 1257.12,1412.1 1257.83,1412.1 1258.54,1412.1 1259.24,1412.1 1259.95,1412.1 1260.66,1412.1 1261.37,1412.1 1262.08,1412.1 1262.78,1412.1 1263.49,1412.1 1264.2,1412.1 1264.91,1412.1 1265.61,1412.1 1266.32,1412.1 1267.03,1412.1 1267.74,1412.1 1268.45,1412.1 1269.15,1412.1 1269.86,1412.1 1270.57,1412.1 1271.28,1412.1 1271.98,1412.1 1272.69,1412.1 1273.4,1412.1 1274.11,1412.1 1274.82,1412.1 1275.52,1412.1 1276.23,1412.1 1276.94,1412.1 1277.65,1412.1 1278.35,1412.1 1279.06,1412.1 1279.77,1412.1 1280.48,1412.1 1281.19,1412.1 1281.89,1412.1 1282.6,1412.1 1283.31,1412.1 1284.02,1412.1 1284.72,1412.1 1285.43,1412.1 1286.14,1412.1 1286.85,1412.1 1287.56,1412.1 1288.26,1412.1 1288.97,1412.1 1289.68,1412.1 1290.39,1412.1 1291.1,1412.1 1291.8,1412.1 1292.51,1412.1 1293.22,1412.1 1293.93,1412.1 1294.63,1412.1 1295.34,1412.1 1296.05,1412.1 1296.76,1412.1 1297.47,1412.1 1298.17,1412.1 1298.88,1412.1 1299.59,1412.1 1300.3,1412.1 1301,1412.1 1301.71,1412.1 1302.42,1412.1 1303.13,1412.1 1303.84,1412.1 1304.54,1412.1 1305.25,1412.1 1305.96,1412.1 1306.67,1412.1 1307.37,1412.1 1308.08,1412.1 1308.79,1412.1 1309.5,1412.1 1310.21,1412.1 1310.91,1412.1 1311.62,1412.1 1312.33,1412.1 1313.04,1412.1 1313.74,1412.1 1314.45,1412.1 1315.16,1412.1 1315.87,1412.1 1316.58,1412.1 1317.28,1412.1 1317.99,1412.1 1318.7,1412.1 1319.41,1412.1 1320.11,1412.1 1320.82,1412.1 1321.53,1412.1 1322.24,1412.1 1322.95,1412.1 1323.65,1412.1 1324.36,1412.1 1325.07,1412.1 1325.78,1412.1 1326.48,1412.1 1327.19,1412.1 1327.9,1412.1 1328.61,1412.1 1329.32,1412.1 1330.02,1412.1 1330.73,1412.1 1331.44,1412.1 1332.15,1412.1 1332.85,1412.1 1333.56,1412.1 1334.27,1412.1 1334.98,1412.1 1335.69,1412.1 1336.39,1412.1 1337.1,1412.1 1337.81,1412.1 1338.52,1412.1 1339.22,1412.1 1339.93,1412.1 1340.64,1412.1 1341.35,1412.1 1342.06,1412.1 1342.76,1412.1 1343.47,1412.1 1344.18,1412.1 1344.89,1412.1 1345.59,1412.1 1346.3,1412.1 1347.01,1412.1 1347.72,1412.1 1348.43,1412.1 1349.13,1412.1 1349.84,1412.1 1350.55,1412.1 1351.26,1412.1 1351.96,1412.1 1352.67,1412.1 1353.38,1412.1 1354.09,1412.1 1354.8,1412.1 1355.5,1412.1 1356.21,1412.1 1356.92,1412.1 1357.63,1412.1 1358.33,1412.1 1359.04,1412.1 1359.75,1412.1 1360.46,1412.1 1361.17,1412.1 1361.87,1412.1 1362.58,1412.1 1363.29,1412.1 1364,1412.1 1364.71,1412.1 1365.41,1412.1 1366.12,1412.1 1366.83,1412.1 1367.54,1412.1 1368.24,1412.1 1368.95,1412.1 1369.66,1412.1 1370.37,1412.1 1371.08,1412.1 1371.78,1412.1 1372.49,1412.1 1373.2,1412.1 1373.91,1412.1 1374.61,1412.1 1375.32,1412.1 1376.03,1412.1 1376.74,1412.1 1377.45,1412.1 1378.15,1412.1 1378.86,1412.1 1379.57,1412.1 1380.28,1412.1 1380.98,1412.1 1381.69,1412.1 1382.4,1412.1 1383.11,1412.1 1383.82,1412.1 1384.52,1412.1 1385.23,1412.1 1385.94,1412.1 1386.65,1412.1 1387.35,1412.1 1388.06,1412.1 1388.77,1412.1 1389.48,1412.1 1390.19,1412.1 1390.89,1412.1 1391.6,1412.1 1392.31,1412.1 1393.02,1412.1 1393.72,1412.1 1394.43,1412.1 1395.14,1412.1 1395.85,1412.1 1396.56,1412.1 1397.26,1412.1 1397.97,1412.1 1398.68,1412.1 1399.39,1412.1 1400.09,1412.1 1400.8,1412.1 1401.51,1412.1 1402.22,1412.1 1402.93,1412.1 1403.63,1412.1 1404.34,1412.1 1405.05,1412.1 1405.76,1412.1 1406.46,1412.1 1407.17,1412.1 1407.88,1412.1 1408.59,1412.1 1409.3,1412.1 1410,1412.1 1410.71,1412.1 1411.42,1412.1 1412.13,1412.1 1412.83,1412.1 1413.54,1412.1 1414.25,1412.1 1414.96,1412.1 1415.67,1412.1 1416.37,1412.1 1417.08,1412.1 1417.79,1412.1 1418.5,1412.1 1419.2,1412.1 1419.91,1412.1 1420.62,1412.1 1421.33,1412.1 1422.04,1412.1 1422.74,1412.1 1423.45,1412.1 1424.16,1412.1 1424.87,1412.1 1425.57,1412.1 1426.28,1412.1 1426.99,1412.1 1427.7,1412.1 1428.41,1412.1 1429.11,1412.1 1429.82,1412.1 1430.53,1412.1 1431.24,1412.1 1431.94,1412.1 1432.65,1412.1 1433.36,1412.1 1434.07,1412.1 1434.78,1412.1 1435.48,1412.1 1436.19,1412.1 1436.9,1412.1 1437.61,1412.1 1438.31,1412.1 1439.02,1412.1 1439.73,1412.1 1440.44,1412.1 1441.15,1412.1 1441.85,1412.1 1442.56,1412.1 1443.27,1412.1 1443.98,1412.1 1444.69,1412.1 1445.39,1412.1 1446.1,1412.1 1446.81,1412.1 1447.52,1412.1 1448.22,1412.1 1448.93,1412.1 1449.64,1412.1 1450.35,1412.1 1451.06,1412.1 1451.76,1412.1 1452.47,1412.1 1453.18,1412.1 1453.89,1412.1 1454.59,1412.1 1455.3,1412.1 1456.01,1412.1 1456.72,1412.1 1457.43,1412.1 1458.13,1412.1 1458.84,1412.1 1459.55,1412.1 1460.26,1412.1 1460.96,1412.1 1461.67,1412.1 1462.38,1412.1 1463.09,1412.1 1463.8,1412.1 1464.5,1412.1 1465.21,1412.1 1465.92,1412.1 1466.63,1412.1 1467.33,1412.1 1468.04,1412.1 1468.75,1412.1 1469.46,1412.1 1470.17,1412.1 1470.87,1412.1 1471.58,1412.1 1472.29,1412.1 1473,1412.1 1473.7,1412.1 1474.41,1412.1 1475.12,1412.1 1475.83,1412.1 1476.54,1412.1 1477.24,1412.1 1477.95,1412.1 1478.66,1412.1 1479.37,1412.1 1480.07,1412.1 1480.78,1412.1 1481.49,1412.1 1482.2,1412.1 1482.91,1412.1 1483.61,1412.1 1484.32,1412.1 1485.03,1412.1 1485.74,1412.1 1486.44,1412.1 1487.15,1412.1 1487.86,1412.1 1488.57,1412.1 1489.28,1412.1 1489.98,1412.1 1490.69,1412.1 1491.4,1412.1 1492.11,1412.1 1492.81,1412.1 1493.52,1412.1 1494.23,1412.1 1494.94,1412.1 1495.65,1412.1 1496.35,1412.1 1497.06,1412.1 1497.77,1412.1 1498.48,1412.1 1499.18,1412.1 1499.89,1412.1 1500.6,1412.1 1501.31,1412.1 1502.02,1412.1 1502.72,1412.1 1503.43,1412.1 1504.14,1412.1 1504.85,1412.1 1505.55,1412.1 1506.26,1412.1 1506.97,1412.1 1507.68,1412.1 1508.39,1412.1 1509.09,1412.1 1509.8,1412.1 1510.51,1412.1 1511.22,1412.1 1511.92,1412.1 1512.63,1412.1 1513.34,1412.1 1514.05,1412.1 1514.76,1412.1 1515.46,1412.1 1516.17,1412.1 1516.88,1412.1 1517.59,1412.1 1518.3,1412.1 1519,1412.1 1519.71,1412.1 1520.42,1412.1 1521.13,1412.1 1521.83,1412.1 1522.54,1412.1 1523.25,1412.1 1523.96,1412.1 1524.67,1412.1 1525.37,1412.1 1526.08,1412.1 1526.79,1412.1 1527.5,1412.1 1528.2,1412.1 1528.91,1412.1 1529.62,1412.1 1530.33,1412.1 1531.04,1412.1 1531.74,1412.1 1532.45,1412.1 1533.16,1412.1 1533.87,1412.1 1534.57,1412.1 1535.28,1412.1 1535.99,1412.1 1536.7,1412.1 1537.41,1412.1 1538.11,1412.1 1538.82,1412.1 1539.53,1412.1 1540.24,1412.1 1540.94,1412.1 1541.65,1412.1 1542.36,1412.1 1543.07,1412.1 1543.78,1412.1 1544.48,1412.1 1545.19,1412.1 1545.9,1412.1 1546.61,1412.1 1547.31,1412.1 1548.02,1412.1 1548.73,1412.1 1549.44,1412.1 1550.15,1412.1 1550.85,1412.1 1551.56,1412.1 1552.27,1412.1 1552.98,1412.1 1553.68,1412.1 1554.39,1412.1 1555.1,1412.1 1555.81,1412.1 1556.52,1412.1 1557.22,1412.1 1557.93,1412.1 1558.64,1412.1 1559.35,1412.1 1560.05,1412.1 1560.76,1412.1 1561.47,1412.1 1562.18,1412.1 1562.89,1412.1 1563.59,1412.1 1564.3,1412.1 1565.01,1412.1 1565.72,1412.1 1566.42,1412.1 1567.13,1412.1 1567.84,1412.1 1568.55,1412.1 1569.26,1412.1 1569.96,1412.1 1570.67,1412.1 1571.38,1412.1 1572.09,1412.1 1572.79,1412.1 1573.5,1412.1 1574.21,1412.1 1574.92,1412.1 1575.63,1412.1 1576.33,1412.1 1577.04,1412.1 1577.75,1412.1 1578.46,1412.1 1579.16,1412.1 1579.87,1412.1 1580.58,1412.1 1581.29,1412.1 1582,1412.1 1582.7,1412.1 1583.41,1412.1 1584.12,1412.1 1584.83,1412.1 1585.53,1412.1 1586.24,1412.1 1586.95,1412.1 1587.66,1412.1 1588.37,1412.1 1589.07,1412.1 1589.78,1412.1 1590.49,1412.1 1591.2,1412.1 1591.9,1412.1 1592.61,1412.1 1593.32,1412.1 1594.03,1412.1 1594.74,1412.1 1595.44,1412.1 1596.15,1412.1 1596.86,1412.1 1597.57,1412.1 1598.28,1412.1 1598.98,1412.1 1599.69,1412.1 1600.4,1412.1 1601.11,1412.1 1601.81,1412.1 1602.52,1412.1 1603.23,1412.1 1603.94,1412.1 1604.65,1412.1 1605.35,1412.1 1606.06,1412.1 1606.77,1412.1 1607.48,1412.1 1608.18,1412.1 1608.89,1412.1 1609.6,1412.1 1610.31,1412.1 1611.02,1412.1 1611.72,1412.1 1612.43,1412.1 1613.14,1412.1 1613.85,1412.1 1614.55,1412.1 1615.26,1412.1 1615.97,1412.1 1616.68,1412.1 1617.39,1412.1 1618.09,1412.1 1618.8,1412.1 1619.51,1412.1 1620.22,1412.1 1620.92,1412.1 1621.63,1412.1 1622.34,1412.1 1623.05,1412.1 1623.76,1412.1 1624.46,1412.1 1625.17,1412.1 1625.88,1412.1 1626.59,1412.1 1627.29,1412.1 1628,1412.1 1628.71,1412.1 1629.42,1412.1 1630.13,1412.1 1630.83,1412.1 1631.54,1412.1 1632.25,1412.1 1632.96,1412.1 1633.66,1412.1 1634.37,1412.1 1635.08,1412.1 1635.79,1412.1 1636.5,1412.1 1637.2,1412.1 1637.91,1412.1 1638.62,1412.1 1639.33,1412.1 1640.03,1412.1 1640.74,1412.1 1641.45,1412.1 1642.16,1412.1 1642.87,1412.1 1643.57,1412.1 1644.28,1412.1 1644.99,1412.1 1645.7,1412.1 1646.4,1412.1 1647.11,1412.1 1647.82,1412.1 1648.53,1412.1 1649.24,1412.1 1649.94,1412.1 1650.65,1412.1 1651.36,1412.1 1652.07,1412.1 1652.77,1412.1 1653.48,1412.1 1654.19,1412.1 1654.9,1412.1 1655.61,1412.1 1656.31,1412.1 1657.02,1412.1 1657.73,1412.1 1658.44,1412.1 1659.14,1412.1 1659.85,1412.1 1660.56,1412.1 1661.27,1412.1 1661.98,1412.1 1662.68,1412.1 1663.39,1412.1 1664.1,1412.1 1664.81,1412.1 1665.51,1412.1 1666.22,1412.1 1666.93,1412.1 1667.64,1412.1 1668.35,1412.1 1669.05,1412.1 1669.76,1412.1 1670.47,1412.1 1671.18,1412.1 1671.89,1412.1 1672.59,1412.1 1673.3,1412.1 1674.01,1412.1 1674.72,1412.1 1675.42,1412.1 1676.13,1412.1 1676.84,1412.1 1677.55,1412.1 1678.26,1412.1 1678.96,1412.1 1679.67,1412.1 1680.38,1412.1 1681.09,1412.1 1681.79,1412.1 1682.5,1412.1 1683.21,1412.1 1683.92,1412.1 1684.63,1412.1 1685.33,1412.1 1686.04,1412.1 1686.75,1412.1 1687.46,1412.1 1688.16,1412.1 1688.87,1412.1 1689.58,1412.1 1690.29,1412.1 1691,1412.1 1691.7,1412.1 1692.41,1412.1 1693.12,1412.1 1693.83,1412.1 1694.53,1412.1 1695.24,1412.1 1695.95,1412.1 1696.66,1412.1 1697.37,1412.1 1698.07,1412.1 1698.78,1412.1 1699.49,1412.1 1700.2,1412.1 1700.9,1412.1 1701.61,1412.1 1702.32,1412.1 1703.03,1412.1 1703.74,1412.1 1704.44,1412.1 1705.15,1412.1 1705.86,1412.1 1706.57,1412.1 1707.27,1412.1 1707.98,1412.1 1708.69,1412.1 1709.4,1412.1 1710.11,1412.1 1710.81,1412.1 1711.52,1412.1 1712.23,1412.1 1712.94,1412.1 1713.64,1412.1 1714.35,1412.1 1715.06,1412.1 1715.77,1412.1 1716.48,1412.1 1717.18,1412.1 1717.89,1412.1 1718.6,1412.1 1719.31,1412.1 1720.01,1412.1 1720.72,1412.1 1721.43,1412.1 1722.14,1412.1 1722.85,1412.1 1723.55,1412.1 1724.26,1412.1 1724.97,1412.1 1725.68,1412.1 1726.38,1412.1 1727.09,1412.1 1727.8,1412.1 1728.51,1412.1 1729.22,1412.1 1729.92,1412.1 1730.63,1412.1 1731.34,1412.1 1732.05,1412.1 1732.75,1412.1 1733.46,1412.1 1734.17,1412.1 1734.88,1412.1 1735.59,1412.1 1736.29,1412.1 1737,1412.1 1737.71,1412.1 1738.42,1412.1 1739.12,1412.1 1739.83,1412.1 1740.54,1412.1 1741.25,1412.1 1741.96,1412.1 1742.66,1412.1 1743.37,1412.1 1744.08,1412.1 1744.79,1412.1 1745.49,1412.1 1746.2,1412.1 1746.91,1412.1 1747.62,1412.1 1748.33,1412.1 1749.03,1412.1 1749.74,1412.1 1750.45,1412.1 1751.16,1412.1 1751.87,1412.1 1752.57,1412.1 1753.28,1412.1 1753.99,1412.1 1754.7,1412.1 1755.4,1412.1 1756.11,1412.1 1756.82,1412.1 1757.53,1412.1 1758.24,1412.1 1758.94,1412.1 1759.65,1412.1 1760.36,1412.1 1761.07,1412.1 1761.77,1412.1 1762.48,1412.1 1763.19,1412.1 1763.9,1412.1 1764.61,1412.1 1765.31,1412.1 1766.02,1412.1 1766.73,1412.1 1767.44,1412.1 1768.14,1412.1 1768.85,1412.1 1769.56,1412.1 1770.27,1412.1 1770.98,1412.1 1771.68,1412.1 1772.39,1412.1 1773.1,1412.1 1773.81,1412.1 1774.51,1412.1 1775.22,1412.1 1775.93,1412.1 1776.64,1412.1 1777.35,1412.1 1778.05,1412.1 1778.76,1412.1 1779.47,1412.1 1780.18,1412.1 1780.88,1412.1 1781.59,1412.1 1782.3,1412.1 1783.01,1412.1 1783.72,1412.1 1784.42,1412.1 1785.13,1412.1 1785.84,1412.1 1786.55,1412.1 1787.25,1412.1 1787.96,1412.1 1788.67,1412.1 1789.38,1412.1 1790.09,1412.1 1790.79,1412.1 1791.5,1412.1 1792.21,1412.1 1792.92,1412.1 1793.62,1412.1 1794.33,1412.1 1795.04,1412.1 1795.75,1412.1 1796.46,1412.1 1797.16,1412.1 1797.87,1412.1 1798.58,1412.1 1799.29,1412.1 1799.99,1412.1 1800.7,1412.1 1801.41,1412.1 1802.12,1412.1 1802.83,1412.1 1803.53,1412.1 1804.24,1412.1 1804.95,1412.1 1805.66,1412.1 1806.36,1412.1 1807.07,1412.1 1807.78,1412.1 1808.49,1412.1 1809.2,1412.1 1809.9,1412.1 1810.61,1412.1 1811.32,1412.1 1812.03,1412.1 1812.73,1412.1 1813.44,1412.1 1814.15,1412.1 1814.86,1412.1 1815.57,1412.1 1816.27,1412.1 1816.98,1412.1 1817.69,1412.1 1818.4,1412.1 1819.1,1412.1 1819.81,1412.1 1820.52,1412.1 1821.23,1412.1 1821.94,1412.1 1822.64,1412.1 1823.35,1412.1 1824.06,1412.1 1824.77,1412.1 1825.48,1412.1 1826.18,1412.1 1826.89,1412.1 1827.6,1412.1 1828.31,1412.1 1829.01,1412.1 1829.72,1412.1 1830.43,1412.1 1831.14,1412.1 1831.85,1412.1 1832.55,1412.1 1833.26,1412.1 1833.97,1412.1 1834.68,1412.1 1835.38,1412.1 1836.09,1412.1 1836.8,1412.1 1837.51,1412.1 1838.22,1412.1 1838.92,1412.1 1839.63,1412.1 1840.34,1412.1 1841.05,1412.1 1841.75,1412.1 1842.46,1412.1 1843.17,1412.1 1843.88,1412.1 1844.59,1412.1 1845.29,1412.1 1846,1412.1 1846.71,1412.1 1847.42,1412.1 1848.12,1412.1 1848.83,1412.1 1849.54,1412.1 1850.25,1412.1 1850.96,1412.1 1851.66,1412.1 1852.37,1412.1 1853.08,1412.1 1853.79,1412.1 1854.49,1412.1 1855.2,1412.1 1855.91,1412.1 1856.62,1412.1 1857.33,1412.1 1858.03,1412.1 1858.74,1412.1 1859.45,1412.1 1860.16,1412.1 1860.86,1412.1 1861.57,1412.1 1862.28,1412.1 1862.99,1412.1 1863.7,1412.1 1864.4,1412.1 1865.11,1412.1 1865.82,1412.1 1866.53,1412.1 1867.23,1412.1 1867.94,1412.1 1868.65,1412.1 1869.36,1412.1 1870.07,1412.1 1870.77,1412.1 1871.48,1412.1 1872.19,1412.1 1872.9,1412.1 1873.6,1412.1 1874.31,1412.1 1875.02,1412.1 1875.73,1412.1 1876.44,1412.1 1877.14,1412.1 1877.85,1412.1 1878.56,1412.1 1879.27,1412.1 1879.97,1412.1 1880.68,1412.1 1881.39,1412.1 1882.1,1412.1 1882.81,1412.1 1883.51,1412.1 1884.22,1412.1 1884.93,1412.1 1885.64,1412.1 1886.34,1412.1 1887.05,1412.1 1887.76,1412.1 1888.47,1412.1 1889.18,1412.1 1889.88,1412.1 1890.59,1412.1 1891.3,1412.1 1892.01,1412.1 1892.71,1412.1 1893.42,1412.1 1894.13,1412.1 1894.84,1412.1 1895.55,1412.1 1896.25,1412.1 1896.96,1412.1 1897.67,1412.1 1898.38,1412.1 1899.08,1412.1 1899.79,1412.1 1900.5,1412.1 1901.21,1412.1 1901.92,1412.1 1902.62,1412.1 1903.33,1412.1 1904.04,1412.1 1904.75,1412.1 1905.46,1412.1 1906.16,1412.1 1906.87,1412.1 1907.58,1412.1 1908.29,1412.1 1908.99,1412.1 1909.7,1412.1 1910.41,1412.1 1911.12,1412.1 1911.83,1412.1 1912.53,1412.1 1913.24,1412.1 1913.95,1412.1 1914.66,1412.1 1915.36,1412.1 1916.07,1412.1 1916.78,1412.1 1917.49,1412.1 1918.2,1412.1 1918.9,1412.1 1919.61,1412.1 1920.32,1412.1 1921.03,1412.1 1921.73,1412.1 1922.44,1412.1 1923.15,1412.1 1923.86,1412.1 1924.57,1412.1 1925.27,1412.1 1925.98,1412.1 1926.69,1412.1 1927.4,1412.1 1928.1,1412.1 1928.81,1412.1 1929.52,1412.1 1930.23,1412.1 1930.94,1412.1 1931.64,1412.1 1932.35,1412.1 1933.06,1412.1 1933.77,1412.1 1934.47,1412.1 1935.18,1412.1 1935.89,1412.1 1936.6,1412.1 1937.31,1412.1 1938.01,1412.1 1938.72,1412.1 1939.43,1412.1 1940.14,1412.1 1940.84,1412.1 1941.55,1412.1 1942.26,1412.1 1942.97,1412.1 1943.68,1412.1 1944.38,1412.1 1945.09,1412.1 1945.8,1412.1 1946.51,1412.1 1947.21,1412.1 1947.92,1412.1 1948.63,1412.1 1949.34,1412.1 1950.05,1412.1 1950.75,1412.1 1951.46,1412.1 1952.17,1412.1 1952.88,1412.1 1953.58,1412.1 1954.29,1412.1 1955,1412.1 1955.71,1412.1 1956.42,1412.1 1957.12,1412.1 1957.83,1412.1 1958.54,1412.1 1959.25,1412.1 1959.95,1412.1 1960.66,1412.1 1961.37,1412.1 1962.08,1412.1 1962.79,1412.1 1963.49,1412.1 1964.2,1412.1 1964.91,1412.1 1965.62,1412.1 1966.32,1412.1 1967.03,1412.1 1967.74,1412.1 1968.45,1412.1 1969.16,1412.1 1969.86,1412.1 1970.57,1412.1 1971.28,1412.1 1971.99,1412.1 1972.69,1412.1 1973.4,1412.1 1974.11,1412.1 1974.82,1412.1 1975.53,1412.1 1976.23,1412.1 1976.94,1412.1 1977.65,1412.1 1978.36,1412.1 1979.07,1412.1 1979.77,1412.1 1980.48,1412.1 1981.19,1412.1 1981.9,1412.1 1982.6,1412.1 1983.31,1412.1 1984.02,1412.1 1984.73,1412.1 1985.44,1412.1 1986.14,1412.1 1986.85,1412.1 1987.56,1412.1 1988.27,1412.1 1988.97,1412.1 1989.68,1412.1 1990.39,1412.1 1991.1,1412.1 1991.81,1412.1 1992.51,1412.1 1993.22,1412.1 1993.93,1412.1 1994.64,1412.1 1995.34,1412.1 1996.05,1412.1 1996.76,1412.1 1997.47,1412.1 1998.18,1412.1 1998.88,1412.1 1999.59,1412.1 2000.3,1412.1 2001.01,1412.1 2001.71,1412.1 2002.42,1412.1 2003.13,1412.1 2003.84,1412.1 2004.55,1412.1 2005.25,1412.1 2005.96,1412.1 2006.67,1412.1 2007.38,1412.1 2008.08,1412.1 2008.79,1412.1 2009.5,1412.1 2010.21,1412.1 2010.92,1412.1 2011.62,1412.1 2012.33,1412.1 2013.04,1412.1 2013.75,1412.1 2014.45,1412.1 2015.16,1412.1 2015.87,1412.1 2016.58,1412.1 2017.29,1412.1 2017.99,1412.1 2018.7,1412.1 2019.41,1412.1 2020.12,1412.1 2020.82,1412.1 2021.53,1412.1 2022.24,1412.1 2022.95,1412.1 2023.66,1412.1 2024.36,1412.1 2025.07,1412.1 2025.78,1412.1 2026.49,1412.1 2027.19,1412.1 2027.9,1412.1 2028.61,1412.1 2029.32,1412.1 2030.03,1412.1 2030.73,1412.1 2031.44,1412.1 2032.15,1412.1 2032.86,1412.1 2033.56,1412.1 2034.27,1412.1 2034.98,1412.1 2035.69,1412.1 2036.4,1412.1 2037.1,1412.1 2037.81,1412.1 2038.52,1412.1 2039.23,1412.1 2039.93,1412.1 2040.64,1412.1 2041.35,1412.1 2042.06,1412.1 2042.77,1412.1 2043.47,1412.1 2044.18,1412.1 2044.89,1412.1 2045.6,1412.1 2046.3,1412.1 2047.01,1412.1 2047.72,1412.1 2048.43,1412.1 2049.14,1412.1 2049.84,1412.1 2050.55,1412.1 2051.26,1412.1 2051.97,1412.1 2052.68,1412.1 2053.38,1412.1 2054.09,1412.1 2054.8,1412.1 2055.51,1412.1 2056.21,1412.1 2056.92,1412.1 2057.63,1412.1 2058.34,1412.1 2059.05,1412.1 2059.75,1412.1 2060.46,1412.1 2061.17,1412.1 2061.88,1412.1 2062.58,1412.1 2063.29,1412.1 2064,1412.1 2064.71,1412.1 2065.42,1412.1 2066.12,1412.1 2066.83,1412.1 2067.54,1412.1 2068.25,1412.1 2068.95,1412.1 2069.66,1412.1 2070.37,1412.1 2071.08,1412.1 2071.79,1412.1 2072.49,1412.1 2073.2,1412.1 2073.91,1412.1 2074.62,1412.1 2075.32,1412.1 2076.03,1412.1 2076.74,1412.1 2077.45,1412.1 2078.16,1412.1 2078.86,1412.1 2079.57,1412.1 2080.28,1412.1 2080.99,1412.1 2081.69,1412.1 2082.4,1412.1 2083.11,1412.1 2083.82,1412.1 2084.53,1412.1 2085.23,1412.1 2085.94,1412.1 2086.65,1412.1 2087.36,1412.1 2088.06,1412.1 2088.77,1412.1 2089.48,1412.1 2090.19,1412.1 2090.9,1412.1 2091.6,1412.1 2092.31,1412.1 2093.02,1412.1 2093.73,1412.1 2094.43,1412.1 2095.14,1412.1 2095.85,1412.1 2096.56,1412.1 2097.27,1412.1 2097.97,1412.1 2098.68,1412.1 2099.39,1412.1 2100.1,1412.1 2100.8,1412.1 2101.51,1412.1 2102.22,1412.1 2102.93,1412.1 2103.64,1412.1 2104.34,1412.1 2105.05,1412.1 2105.76,1412.1 2106.47,1412.1 2107.17,1412.1 2107.88,1412.1 2108.59,1412.1 2109.3,1412.1 2110.01,1412.1 2110.71,1412.1 2111.42,1412.1 2112.13,1412.1 2112.84,1412.1 2113.54,1412.1 2114.25,1412.1 2114.96,1412.1 2115.67,1412.1 2116.38,1412.1 2117.08,1412.1 2117.79,1412.1 2118.5,1412.1 2119.21,1412.1 2119.91,1412.1 2120.62,1412.1 2121.33,1412.1 2122.04,1412.1 2122.75,1412.1 2123.45,1412.1 2124.16,1412.1 2124.87,1412.1 2125.58,1412.1 2126.28,1412.1 2126.99,1412.1 2127.7,1412.1 2128.41,1412.1 2129.12,1412.1 2129.82,1412.1 2130.53,1412.1 2131.24,1412.1 2131.95,1412.1 2132.66,1412.1 2133.36,1412.1 2134.07,1412.1 2134.78,1412.1 2135.49,1412.1 2136.19,1412.1 2136.9,1412.1 2137.61,1412.1 2138.32,1412.1 2139.03,1412.1 2139.73,1412.1 2140.44,1412.1 2141.15,1412.1 2141.86,1412.1 2142.56,1412.1 2143.27,1412.1 2143.98,1412.1 2144.69,1412.1 2145.4,1412.1 2146.1,1412.1 2146.81,1412.1 2147.52,1412.1 2148.23,1412.1 2148.93,1412.1 2149.64,1412.1 2150.35,1412.1 2151.06,1412.1 2151.77,1412.1 2152.47,1412.1 2153.18,1412.1 2153.89,1412.1 2154.6,1412.1 2155.3,1412.1 2156.01,1412.1 2156.72,1412.1 2157.43,1412.1 2158.14,1412.1 2158.84,1412.1 2159.55,1412.1 2160.26,1412.1 2160.97,1412.1 2161.67,1412.1 2162.38,1412.1 2163.09,1412.1 2163.8,1412.1 2164.51,1412.1 2165.21,1412.1 2165.92,1412.1 2166.63,1412.1 2167.34,1412.1 2168.04,1412.1 2168.75,1412.1 2169.46,1412.1 2170.17,1412.1 2170.88,1412.1 2171.58,1412.1 2172.29,1412.1 2173,1412.1 2173.71,1412.1 2174.41,1412.1 2175.12,1412.1 2175.83,1412.1 2176.54,1412.1 2177.25,1412.1 2177.95,1412.1 2178.66,1412.1 2179.37,1412.1 2180.08,1412.1 2180.78,1412.1 2181.49,1412.1 2182.2,1412.1 2182.91,1412.1 2183.62,1412.1 2184.32,1412.1 2185.03,1412.1 2185.74,1412.1 2186.45,1412.1 2187.15,1412.1 2187.86,1412.1 2188.57,1412.1 2189.28,1412.1 2189.99,1412.1 2190.69,1412.1 2191.4,1412.1 2192.11,1412.1 2192.82,1412.1 2193.52,1412.1 2194.23,1412.1 2194.94,1412.1 2195.65,1412.1 2196.36,1412.1 2197.06,1412.1 2197.77,1412.1 2198.48,1412.1 2199.19,1412.1 2199.89,1412.1 2200.6,1412.1 2201.31,1412.1 2202.02,1412.1 2202.73,1412.1 2203.43,1412.1 2204.14,1412.1 2204.85,1412.1 2205.56,1412.1 2206.27,1412.1 2206.97,1412.1 2207.68,1412.1 2208.39,1412.1 2209.1,1412.1 2209.8,1412.1 2210.51,1412.1 2211.22,1412.1 2211.93,1412.1 2212.64,1412.1 2213.34,1412.1 2214.05,1412.1 2214.76,1412.1 2215.47,1412.1 2216.17,1412.1 2216.88,1412.1 2217.59,1412.1 2218.3,1412.1 2219.01,1412.1 2219.71,1412.1 2220.42,1412.1 2221.13,1412.1 2221.84,1412.1 2222.54,1412.1 2223.25,1412.1 2223.96,1412.1 2224.67,1412.1 2225.38,1412.1 2226.08,1412.1 2226.79,1412.1 2227.5,1412.1 2228.21,1412.1 2228.91,1412.1 2229.62,1412.1 2230.33,1412.1 2231.04,1412.1 2231.75,1412.1 2232.45,1412.1 2233.16,1412.1 2233.87,1412.1 2234.58,1412.1 2235.28,1412.1 2235.99,1412.1 2236.7,1412.1 2237.41,1412.1 2238.12,1412.1 2238.82,1412.1 2239.53,1412.1 2240.24,1412.1 2240.95,1412.1 2241.65,1412.1 2242.36,1412.1 2243.07,1412.1 2243.78,1412.1 2244.49,1412.1 2245.19,1412.1 2245.9,1412.1 2246.61,1412.1 2247.32,1412.1 2248.02,1412.1 2248.73,1412.1 2249.44,1412.1 2250.15,1412.1 2250.86,1412.1 2251.56,1412.1 2252.27,1412.1 2252.98,1412.1 2253.69,1412.1 2254.39,1412.1 2255.1,1412.1 2255.81,1412.1 2256.52,1412.1 2257.23,1412.1 2257.93,1412.1 2258.64,1412.1 2259.35,1412.1 2260.06,1412.1 2260.76,1412.1 2261.47,1412.1 2262.18,1412.1 2262.89,1412.1 2263.6,1412.1 2264.3,1412.1 2265.01,1412.1 2265.72,1412.1 2266.43,1412.1 2267.13,1412.1 2267.84,1412.1 2268.55,1412.1 2269.26,1412.1 2269.97,1412.1 2270.67,1412.1 2271.38,1412.1 2272.09,1412.1 2272.8,1412.1 2273.5,1412.1 2274.21,1412.1 2274.92,1412.1 2275.63,1412.1 2276.34,1412.1 2277.04,1412.1 2277.75,1412.1 2278.46,1412.1 2279.17,1412.1 2279.87,1412.1 2280.58,1412.1 2281.29,1412.1 2282,1412.1 2282.71,1412.1 2283.41,1412.1 2284.12,1412.1 2284.83,1412.1 2285.54,1412.1 2286.25,1412.1 2286.95,1412.1 2287.66,1412.1 2288.37,1412.1 2289.08,1412.1 \"/>\n<path clip-path=\"url(#clip052)\" d=\"M874.208 1411.95 L874.916 1411.95 L875.623 1411.95 L876.331 1411.95 L877.039 1411.95 L877.747 1411.95 L878.455 1411.95 L879.162 1411.95 L879.87 1411.95 L880.578 1411.95 L881.286 1411.95 L881.994 1411.95 L882.701 1411.95 L883.409 1411.95 L884.117 1411.95 L884.825 1411.95 L885.533 1411.95 L886.24 1411.95 L886.948 1411.95 L887.656 1411.95 L888.364 1411.95 L889.071 1411.95 L889.779 1411.95 L890.487 1411.95 L891.195 1411.95 L891.903 1411.95 L892.61 1411.95 L893.318 1411.95 L894.026 1411.95 L894.734 1411.95 L895.442 1411.95 L896.149 1411.95 L896.857 1411.95 L897.565 1411.95 L898.273 1411.95 L898.98 1411.95 L899.688 1411.95 L900.396 1411.95 L901.104 1411.95 L901.812 1411.95 L902.519 1411.95 L903.227 1411.95 L903.935 1411.95 L904.643 1411.95 L905.351 1411.95 L906.058 1411.95 L906.766 1411.95 L907.474 1411.95 L908.182 1411.95 L908.89 1411.95 L909.597 1411.95 L910.305 1411.95 L911.013 1411.95 L911.721 1411.95 L912.428 1411.95 L913.136 1411.95 L913.844 1411.95 L914.552 1411.95 L915.26 1411.95 L915.967 1411.95 L916.675 1411.95 L917.383 1411.95 L918.091 1411.95 L918.799 1411.95 L919.506 1411.95 L920.214 1411.95 L920.922 1411.95 L921.63 1411.95 L922.337 1411.95 L923.045 1411.95 L923.753 1411.95 L924.461 1411.95 L925.169 1411.95 L925.876 1411.95 L926.584 1411.95 L927.292 1411.95 L928 1411.95 L928.708 1411.95 L929.415 1411.95 L930.123 1411.95 L930.831 1411.95 L931.539 1411.95 L932.247 1411.95 L932.954 1411.95 L933.662 1411.95 L934.37 1411.95 L935.078 1411.95 L935.785 1411.95 L936.493 1411.95 L937.201 1411.95 L937.909 1411.95 L938.617 1411.95 L939.324 1411.95 L940.032 1411.95 L940.74 1411.95 L941.448 1411.95 L942.156 1411.95 L942.863 1411.95 L943.571 1411.95 L944.279 1411.95 L944.987 1411.95 L945.694 1411.95 L946.402 1411.95 L947.11 1411.95 L947.818 1411.95 L948.526 1411.95 L949.233 1411.95 L949.941 1411.95 L950.649 1411.95 L951.357 1411.95 L952.065 1411.95 L952.772 1411.95 L953.48 1411.95 L954.188 1411.95 L954.896 1411.95 L955.604 1411.95 L956.311 1411.95 L957.019 1411.95 L957.727 1411.95 L958.435 1411.95 L959.142 1411.95 L959.85 1411.95 L960.558 1411.95 L961.266 1411.95 L961.974 1411.95 L962.681 1411.95 L963.389 1411.95 L964.097 1411.95 L964.805 1411.95 L965.513 1411.95 L966.22 1411.95 L966.928 1411.95 L967.636 1411.95 L968.344 1411.95 L969.051 1411.95 L969.759 1411.95 L970.467 1411.95 L971.175 1411.95 L971.883 1411.95 L972.59 1411.95 L973.298 1411.95 L974.006 1411.95 L974.714 1411.95 L975.422 1411.95 L976.129 1411.95 L976.837 1411.95 L977.545 1411.95 L978.253 1411.95 L978.961 1411.95 L979.668 1411.95 L980.376 1411.95 L981.084 1411.95 L981.792 1411.95 L982.499 1411.95 L983.207 1411.95 L983.915 1411.95 L984.623 1411.95 L985.331 1411.95 L986.038 1411.95 L986.746 1411.95 L987.454 1411.95 L988.162 1411.95 L988.87 1411.95 L989.577 1411.95 L990.285 1411.95 L990.993 1411.95 L991.701 1411.95 L992.409 1411.95 L993.116 1411.95 L993.824 1411.95 L994.532 1411.95 L995.24 1411.95 L995.947 1411.95 L996.655 1411.95 L997.363 1411.95 L998.071 1411.95 L998.779 1411.95 L999.486 1411.95 L1000.19 1411.95 L1000.9 1411.95 L1001.61 1411.95 L1002.32 1411.95 L1003.03 1411.95 L1003.73 1411.95 L1004.44 1411.95 L1005.15 1411.95 L1005.86 1411.95 L1006.56 1411.95 L1007.27 1411.95 L1007.98 1411.95 L1008.69 1411.95 L1009.4 1411.95 L1010.1 1411.95 L1010.81 1411.95 L1011.52 1411.95 L1012.23 1411.95 L1012.93 1411.95 L1013.64 1411.95 L1014.35 1411.95 L1015.06 1411.95 L1015.77 1411.95 L1016.47 1411.95 L1017.18 1411.95 L1017.89 1411.95 L1018.6 1411.95 L1019.3 1411.95 L1020.01 1411.95 L1020.72 1411.95 L1021.43 1411.95 L1022.14 1411.95 L1022.84 1411.95 L1023.55 1411.95 L1024.26 1411.95 L1024.97 1411.95 L1025.67 1411.95 L1026.38 1411.95 L1027.09 1411.95 L1027.8 1411.95 L1028.51 1411.95 L1029.21 1411.95 L1029.92 1411.95 L1030.63 1411.95 L1031.34 1411.95 L1032.04 1411.95 L1032.75 1411.95 L1033.46 1411.95 L1034.17 1411.95 L1034.88 1411.95 L1035.58 1411.95 L1036.29 1411.95 L1037 1411.95 L1037.71 1411.95 L1038.41 1411.95 L1039.12 1411.95 L1039.83 1411.95 L1040.54 1411.95 L1041.25 1411.95 L1041.95 1411.95 L1042.66 1411.95 L1043.37 1411.95 L1044.08 1411.95 L1044.78 1411.95 L1045.49 1411.95 L1046.2 1411.95 L1046.91 1411.95 L1047.62 1411.95 L1048.32 1411.95 L1049.03 1411.95 L1049.74 1411.95 L1050.45 1411.95 L1051.15 1411.95 L1051.86 1411.95 L1052.57 1411.95 L1053.28 1411.95 L1053.99 1411.95 L1054.69 1411.95 L1055.4 1411.95 L1056.11 1411.95 L1056.82 1411.95 L1057.53 1411.95 L1058.23 1411.95 L1058.94 1411.95 L1059.65 1411.95 L1060.36 1411.95 L1061.06 1411.95 L1061.77 1411.95 L1062.48 1411.95 L1063.19 1411.95 L1063.9 1411.95 L1064.6 1411.95 L1065.31 1411.95 L1066.02 1411.95 L1066.73 1411.95 L1067.43 1411.95 L1068.14 1411.95 L1068.85 1411.95 L1069.56 1411.95 L1070.27 1411.95 L1070.97 1411.95 L1071.68 1411.95 L1072.39 1411.95 L1073.1 1411.95 L1073.8 1411.95 L1074.51 1411.95 L1075.22 1411.95 L1075.93 1411.95 L1076.64 1411.95 L1077.34 1411.95 L1078.05 1411.95 L1078.76 1411.95 L1079.47 1411.95 L1080.17 1411.95 L1080.88 1411.95 L1081.59 1411.95 L1082.3 1411.95 L1083.01 1411.95 L1083.71 1411.95 L1084.42 1411.95 L1085.13 1411.95 L1085.84 1411.95 L1086.54 1411.95 L1087.25 1411.95 L1087.96 1411.95 L1088.67 1411.95 L1089.38 1411.95 L1090.08 1411.95 L1090.79 1411.95 L1091.5 1411.95 L1092.21 1411.95 L1092.91 1411.95 L1093.62 1411.95 L1094.33 1411.95 L1095.04 1411.95 L1095.75 1411.95 L1096.45 1411.95 L1097.16 1411.95 L1097.87 1411.95 L1098.58 1411.95 L1099.28 1411.95 L1099.99 1411.95 L1100.7 1411.95 L1101.41 1411.95 L1102.12 1411.95 L1102.82 1411.95 L1103.53 1411.95 L1104.24 1411.95 L1104.95 1411.95 L1105.65 1411.95 L1106.36 1411.95 L1107.07 1411.95 L1107.78 1411.95 L1108.49 1411.95 L1109.19 1411.95 L1109.9 1411.95 L1110.61 1411.95 L1111.32 1411.95 L1112.02 1411.95 L1112.73 1411.95 L1113.44 1411.95 L1114.15 1411.95 L1114.86 1411.95 L1115.56 1411.95 L1116.27 1411.95 L1116.98 1411.95 L1117.69 1411.95 L1118.39 1411.95 L1119.1 1411.95 L1119.81 1411.95 L1120.52 1411.95 L1121.23 1411.95 L1121.93 1411.95 L1122.64 1411.95 L1123.35 1411.95 L1124.06 1411.95 L1124.76 1411.95 L1125.47 1411.95 L1126.18 1411.95 L1126.89 1411.95 L1127.6 1411.95 L1128.3 1411.95 L1129.01 1411.95 L1129.72 1411.95 L1130.43 1411.95 L1131.13 1411.95 L1131.84 1411.95 L1132.55 1411.95 L1133.26 1411.95 L1133.97 1411.95 L1134.67 1411.95 L1135.38 1411.95 L1136.09 1411.95 L1136.8 1411.95 L1137.51 1411.95 L1138.21 1411.95 L1138.92 1411.95 L1139.63 1411.95 L1140.34 1411.95 L1141.04 1411.95 L1141.75 1411.95 L1142.46 1411.95 L1143.17 1411.95 L1143.88 1411.95 L1144.58 1411.95 L1145.29 1411.95 L1146 1411.95 L1146.71 1411.95 L1147.41 1411.95 L1148.12 1411.95 L1148.83 1411.95 L1149.54 1411.95 L1150.25 1411.95 L1150.95 1411.95 L1151.66 1411.95 L1152.37 1411.95 L1153.08 1411.95 L1153.78 1411.95 L1154.49 1411.95 L1155.2 1411.95 L1155.91 1411.95 L1156.62 1411.95 L1157.32 1411.95 L1158.03 1411.95 L1158.74 1411.95 L1159.45 1411.95 L1160.15 1411.95 L1160.86 1411.95 L1161.57 1411.95 L1162.28 1411.95 L1162.99 1411.95 L1163.69 1411.95 L1164.4 1411.95 L1165.11 1411.95 L1165.82 1411.95 L1166.52 1411.95 L1167.23 1411.95 L1167.94 1411.95 L1168.65 1411.95 L1169.36 1411.95 L1170.06 1411.95 L1170.77 1411.95 L1171.48 1411.95 L1172.19 1411.95 L1172.89 1411.95 L1173.6 1411.95 L1174.31 1411.95 L1175.02 1411.95 L1175.73 1411.95 L1176.43 1411.95 L1177.14 1411.95 L1177.85 1411.95 L1178.56 1411.95 L1179.26 1411.95 L1179.97 1411.95 L1180.68 1411.95 L1181.39 1411.95 L1182.1 1411.95 L1182.8 1411.95 L1183.51 1411.95 L1184.22 1411.95 L1184.93 1411.95 L1185.63 1411.95 L1186.34 1411.95 L1187.05 1411.95 L1187.76 1411.95 L1188.47 1411.95 L1189.17 1411.95 L1189.88 1411.95 L1190.59 1411.95 L1191.3 1411.95 L1192 1411.95 L1192.71 1411.95 L1193.42 1411.95 L1194.13 1411.95 L1194.84 1411.95 L1195.54 1411.95 L1196.25 1411.95 L1196.96 1411.95 L1197.67 1411.95 L1198.37 1411.95 L1199.08 1411.95 L1199.79 1411.95 L1200.5 1411.95 L1201.21 1411.95 L1201.91 1411.95 L1202.62 1411.95 L1203.33 1411.95 L1204.04 1411.95 L1204.74 1411.95 L1205.45 1411.95 L1206.16 1411.95 L1206.87 1411.95 L1207.58 1411.95 L1208.28 1411.95 L1208.99 1411.95 L1209.7 1411.95 L1210.41 1411.95 L1211.12 1411.95 L1211.82 1411.95 L1212.53 1411.95 L1213.24 1411.95 L1213.95 1411.95 L1214.65 1411.95 L1215.36 1411.95 L1216.07 1411.95 L1216.78 1411.95 L1217.49 1411.95 L1218.19 1411.95 L1218.9 1411.95 L1219.61 1411.95 L1220.32 1411.95 L1221.02 1411.95 L1221.73 1411.95 L1222.44 1411.95 L1223.15 1411.95 L1223.86 1411.95 L1224.56 1411.95 L1225.27 1411.95 L1225.98 1411.95 L1226.69 1411.95 L1227.39 1411.95 L1228.1 1411.95 L1228.81 1411.95 L1229.52 1411.95 L1230.23 1411.95 L1230.93 1411.95 L1231.64 1411.95 L1232.35 1411.95 L1233.06 1411.95 L1233.76 1411.95 L1234.47 1411.95 L1235.18 1411.95 L1235.89 1411.95 L1236.6 1411.95 L1237.3 1411.95 L1238.01 1411.95 L1238.72 1411.95 L1239.43 1411.95 L1240.13 1411.95 L1240.84 1411.95 L1241.55 1411.95 L1242.26 1411.95 L1242.97 1411.95 L1243.67 1411.95 L1244.38 1411.95 L1245.09 1411.95 L1245.8 1411.95 L1246.5 1411.95 L1247.21 1411.95 L1247.92 1411.95 L1248.63 1411.95 L1249.34 1411.95 L1250.04 1411.95 L1250.75 1411.95 L1251.46 1411.95 L1252.17 1411.95 L1252.87 1411.95 L1253.58 1411.95 L1254.29 1411.95 L1255 1411.95 L1255.71 1411.95 L1256.41 1411.95 L1257.12 1411.95 L1257.83 1411.95 L1258.54 1411.95 L1259.24 1411.95 L1259.95 1411.95 L1260.66 1411.95 L1261.37 1411.95 L1262.08 1411.95 L1262.78 1411.95 L1263.49 1411.95 L1264.2 1411.95 L1264.91 1411.95 L1265.61 1411.95 L1266.32 1411.95 L1267.03 1411.95 L1267.74 1411.95 L1268.45 1411.95 L1269.15 1411.95 L1269.86 1411.95 L1270.57 1411.95 L1271.28 1411.95 L1271.98 1411.95 L1272.69 1411.95 L1273.4 1411.95 L1274.11 1411.95 L1274.82 1411.95 L1275.52 1411.95 L1276.23 1411.95 L1276.94 1411.95 L1277.65 1411.95 L1278.35 1411.95 L1279.06 1411.95 L1279.77 1411.95 L1280.48 1411.95 L1281.19 1411.95 L1281.89 1411.95 L1282.6 1411.95 L1283.31 1411.95 L1284.02 1411.95 L1284.72 1411.95 L1285.43 1411.95 L1286.14 1411.95 L1286.85 1411.95 L1287.56 1411.95 L1288.26 1411.95 L1288.97 1411.95 L1289.68 1411.95 L1290.39 1411.95 L1291.1 1411.95 L1291.8 1411.95 L1292.51 1411.95 L1293.22 1411.95 L1293.93 1411.95 L1294.63 1411.95 L1295.34 1411.95 L1296.05 1411.95 L1296.76 1411.95 L1297.47 1411.95 L1298.17 1411.95 L1298.88 1411.95 L1299.59 1411.95 L1300.3 1411.95 L1301 1411.95 L1301.71 1411.95 L1302.42 1411.95 L1303.13 1411.95 L1303.84 1411.95 L1304.54 1411.95 L1305.25 1411.95 L1305.96 1411.95 L1306.67 1411.95 L1307.37 1411.95 L1308.08 1411.95 L1308.79 1411.95 L1309.5 1411.95 L1310.21 1411.95 L1310.91 1411.95 L1311.62 1411.95 L1312.33 1411.95 L1313.04 1411.95 L1313.74 1411.95 L1314.45 1411.95 L1315.16 1411.95 L1315.87 1411.95 L1316.58 1411.95 L1317.28 1411.95 L1317.99 1411.95 L1318.7 1411.95 L1319.41 1411.95 L1320.11 1411.95 L1320.82 1411.95 L1321.53 1411.95 L1322.24 1411.95 L1322.95 1411.95 L1323.65 1411.95 L1324.36 1411.95 L1325.07 1411.95 L1325.78 1411.95 L1326.48 1411.95 L1327.19 1411.95 L1327.9 1411.95 L1328.61 1411.95 L1329.32 1411.95 L1330.02 1411.95 L1330.73 1411.95 L1331.44 1411.95 L1332.15 1411.95 L1332.85 1411.95 L1333.56 1411.95 L1334.27 1411.95 L1334.98 1411.95 L1335.69 1411.95 L1336.39 1411.95 L1337.1 1411.95 L1337.81 1411.95 L1338.52 1411.95 L1339.22 1411.95 L1339.93 1411.95 L1340.64 1411.95 L1341.35 1411.95 L1342.06 1411.95 L1342.76 1411.95 L1343.47 1411.95 L1344.18 1411.95 L1344.89 1411.95 L1345.59 1411.95 L1346.3 1411.95 L1347.01 1411.95 L1347.72 1411.95 L1348.43 1411.95 L1349.13 1411.95 L1349.84 1411.95 L1350.55 1411.95 L1351.26 1411.95 L1351.96 1411.95 L1352.67 1411.95 L1353.38 1411.95 L1354.09 1411.95 L1354.8 1411.95 L1355.5 1411.95 L1356.21 1411.95 L1356.92 1411.95 L1357.63 1411.95 L1358.33 1411.95 L1359.04 1411.95 L1359.75 1411.95 L1360.46 1411.95 L1361.17 1411.95 L1361.87 1411.95 L1362.58 1411.95 L1363.29 1411.95 L1364 1411.95 L1364.71 1411.95 L1365.41 1411.95 L1366.12 1411.95 L1366.83 1411.95 L1367.54 1411.95 L1368.24 1411.95 L1368.95 1411.95 L1369.66 1411.95 L1370.37 1411.95 L1371.08 1411.95 L1371.78 1411.95 L1372.49 1411.95 L1373.2 1411.95 L1373.91 1411.95 L1374.61 1411.95 L1375.32 1411.95 L1376.03 1411.95 L1376.74 1411.95 L1377.45 1411.95 L1378.15 1411.95 L1378.86 1411.95 L1379.57 1411.95 L1380.28 1411.95 L1380.98 1411.95 L1381.69 1411.95 L1382.4 1411.95 L1383.11 1411.95 L1383.82 1411.95 L1384.52 1411.95 L1385.23 1411.95 L1385.94 1411.95 L1386.65 1411.95 L1387.35 1411.95 L1388.06 1411.95 L1388.77 1411.95 L1389.48 1411.95 L1390.19 1411.95 L1390.89 1411.95 L1391.6 1411.95 L1392.31 1411.95 L1393.02 1411.95 L1393.72 1411.95 L1394.43 1411.95 L1395.14 1411.95 L1395.85 1411.95 L1396.56 1411.95 L1397.26 1411.95 L1397.97 1411.95 L1398.68 1411.95 L1399.39 1411.95 L1400.09 1411.95 L1400.8 1411.95 L1401.51 1411.95 L1402.22 1411.95 L1402.93 1411.95 L1403.63 1411.95 L1404.34 1411.95 L1405.05 1411.95 L1405.76 1411.95 L1406.46 1411.95 L1407.17 1411.95 L1407.88 1411.95 L1408.59 1411.95 L1409.3 1411.95 L1410 1411.95 L1410.71 1411.95 L1411.42 1411.95 L1412.13 1411.95 L1412.83 1411.95 L1413.54 1411.95 L1414.25 1411.95 L1414.96 1411.95 L1415.67 1411.95 L1416.37 1411.95 L1417.08 1411.95 L1417.79 1411.95 L1418.5 1411.95 L1419.2 1411.95 L1419.91 1411.95 L1420.62 1411.95 L1421.33 1411.95 L1422.04 1411.95 L1422.74 1411.95 L1423.45 1411.95 L1424.16 1411.95 L1424.87 1411.95 L1425.57 1411.95 L1426.28 1411.95 L1426.99 1411.95 L1427.7 1411.95 L1428.41 1411.95 L1429.11 1411.95 L1429.82 1411.95 L1430.53 1411.95 L1431.24 1411.95 L1431.94 1411.95 L1432.65 1411.95 L1433.36 1411.95 L1434.07 1411.95 L1434.78 1411.95 L1435.48 1411.95 L1436.19 1411.95 L1436.9 1411.95 L1437.61 1411.95 L1438.31 1411.95 L1439.02 1411.95 L1439.73 1411.95 L1440.44 1411.95 L1441.15 1411.95 L1441.85 1411.95 L1442.56 1411.95 L1443.27 1411.95 L1443.98 1411.95 L1444.69 1411.95 L1445.39 1411.95 L1446.1 1411.95 L1446.81 1411.95 L1447.52 1411.95 L1448.22 1411.95 L1448.93 1411.95 L1449.64 1411.95 L1450.35 1411.95 L1451.06 1411.95 L1451.76 1411.95 L1452.47 1411.95 L1453.18 1411.95 L1453.89 1411.95 L1454.59 1411.95 L1455.3 1411.95 L1456.01 1411.95 L1456.72 1411.95 L1457.43 1411.95 L1458.13 1411.95 L1458.84 1411.95 L1459.55 1411.95 L1460.26 1411.95 L1460.96 1411.95 L1461.67 1411.95 L1462.38 1411.95 L1463.09 1411.95 L1463.8 1411.95 L1464.5 1411.95 L1465.21 1411.95 L1465.92 1411.95 L1466.63 1411.95 L1467.33 1411.95 L1468.04 1411.95 L1468.75 1411.95 L1469.46 1411.95 L1470.17 1411.95 L1470.87 1411.95 L1471.58 1411.95 L1472.29 1411.95 L1473 1411.95 L1473.7 1411.95 L1474.41 1411.95 L1475.12 1411.95 L1475.83 1411.95 L1476.54 1411.95 L1477.24 1411.95 L1477.95 1411.95 L1478.66 1411.95 L1479.37 1411.95 L1480.07 1411.95 L1480.78 1411.95 L1481.49 1411.95 L1482.2 1411.95 L1482.91 1411.95 L1483.61 1411.95 L1484.32 1411.95 L1485.03 1411.95 L1485.74 1411.95 L1486.44 1411.95 L1487.15 1411.95 L1487.86 1411.95 L1488.57 1411.95 L1489.28 1411.95 L1489.98 1411.95 L1490.69 1411.95 L1491.4 1411.95 L1492.11 1411.95 L1492.81 1411.95 L1493.52 1411.95 L1494.23 1411.95 L1494.94 1411.95 L1495.65 1411.95 L1496.35 1411.95 L1497.06 1411.95 L1497.77 1411.95 L1498.48 1411.95 L1499.18 1411.95 L1499.89 1411.95 L1500.6 1411.95 L1501.31 1411.95 L1502.02 1411.95 L1502.72 1411.95 L1503.43 1411.95 L1504.14 1411.95 L1504.85 1411.95 L1505.55 1411.95 L1506.26 1411.95 L1506.97 1411.95 L1507.68 1411.95 L1508.39 1411.95 L1509.09 1411.95 L1509.8 1411.95 L1510.51 1411.95 L1511.22 1411.95 L1511.92 1411.95 L1512.63 1411.95 L1513.34 1411.95 L1514.05 1411.95 L1514.76 1411.95 L1515.46 1411.95 L1516.17 1411.95 L1516.88 1411.95 L1517.59 1411.95 L1518.3 1411.95 L1519 1411.95 L1519.71 1411.95 L1520.42 1411.95 L1521.13 1411.95 L1521.83 1411.95 L1522.54 1411.95 L1523.25 1411.95 L1523.96 1411.95 L1524.67 1411.95 L1525.37 1411.95 L1526.08 1411.95 L1526.79 1411.95 L1527.5 1411.95 L1528.2 1411.95 L1528.91 1411.95 L1529.62 1411.95 L1530.33 1411.95 L1531.04 1411.95 L1531.74 1411.95 L1532.45 1411.95 L1533.16 1411.95 L1533.87 1411.95 L1534.57 1411.95 L1535.28 1411.95 L1535.99 1411.95 L1536.7 1411.95 L1537.41 1411.95 L1538.11 1411.95 L1538.82 1411.95 L1539.53 1411.95 L1540.24 1411.95 L1540.94 1411.95 L1541.65 1411.95 L1542.36 1411.95 L1543.07 1411.95 L1543.78 1411.95 L1544.48 1411.95 L1545.19 1411.95 L1545.9 1411.95 L1546.61 1411.95 L1547.31 1411.95 L1548.02 1411.95 L1548.73 1411.95 L1549.44 1411.95 L1550.15 1411.95 L1550.85 1411.95 L1551.56 1411.95 L1552.27 1411.95 L1552.98 1411.95 L1553.68 1411.95 L1554.39 1411.95 L1555.1 1411.95 L1555.81 1411.95 L1556.52 1411.95 L1557.22 1411.95 L1557.93 1411.95 L1558.64 1411.95 L1559.35 1411.95 L1560.05 1411.95 L1560.76 1411.95 L1561.47 1411.95 L1562.18 1411.95 L1562.89 1411.95 L1563.59 1411.95 L1564.3 1411.95 L1565.01 1411.95 L1565.72 1411.95 L1566.42 1411.95 L1567.13 1411.95 L1567.84 1411.95 L1568.55 1411.95 L1569.26 1411.95 L1569.96 1411.95 L1570.67 1411.95 L1571.38 1411.95 L1572.09 1411.95 L1572.79 1411.95 L1573.5 1411.95 L1574.21 1411.95 L1574.92 1411.95 L1575.63 1411.95 L1576.33 1411.95 L1577.04 1411.95 L1577.75 1411.95 L1578.46 1411.95 L1579.16 1411.95 L1579.87 1411.95 L1580.58 1411.95 L1581.29 1411.95 L1582 1411.95 L1582.7 1411.95 L1583.41 1411.95 L1584.12 1411.95 L1584.83 1411.95 L1585.53 1411.95 L1586.24 1411.95 L1586.95 1411.95 L1587.66 1411.95 L1588.37 1411.95 L1589.07 1411.95 L1589.78 1411.95 L1590.49 1411.95 L1591.2 1411.95 L1591.9 1411.95 L1592.61 1411.95 L1593.32 1411.95 L1594.03 1411.95 L1594.74 1411.95 L1595.44 1411.95 L1596.15 1411.95 L1596.86 1411.95 L1597.57 1411.95 L1598.28 1411.95 L1598.98 1411.95 L1599.69 1411.95 L1600.4 1411.95 L1601.11 1411.95 L1601.81 1411.95 L1602.52 1411.95 L1603.23 1411.95 L1603.94 1411.95 L1604.65 1411.95 L1605.35 1411.95 L1606.06 1411.95 L1606.77 1411.95 L1607.48 1411.95 L1608.18 1411.95 L1608.89 1411.95 L1609.6 1411.95 L1610.31 1411.95 L1611.02 1411.95 L1611.72 1411.95 L1612.43 1411.95 L1613.14 1411.95 L1613.85 1411.95 L1614.55 1411.95 L1615.26 1411.95 L1615.97 1411.95 L1616.68 1411.95 L1617.39 1411.95 L1618.09 1411.95 L1618.8 1411.95 L1619.51 1411.95 L1620.22 1411.95 L1620.92 1411.95 L1621.63 1411.95 L1622.34 1411.95 L1623.05 1411.95 L1623.76 1411.95 L1624.46 1411.95 L1625.17 1411.95 L1625.88 1411.95 L1626.59 1411.95 L1627.29 1411.95 L1628 1411.95 L1628.71 1411.95 L1629.42 1411.95 L1630.13 1411.95 L1630.83 1411.95 L1631.54 1411.95 L1632.25 1411.95 L1632.96 1411.95 L1633.66 1411.95 L1634.37 1411.95 L1635.08 1411.95 L1635.79 1411.95 L1636.5 1411.95 L1637.2 1411.95 L1637.91 1411.95 L1638.62 1411.95 L1639.33 1411.95 L1640.03 1411.95 L1640.74 1411.95 L1641.45 1411.95 L1642.16 1411.95 L1642.87 1411.95 L1643.57 1411.95 L1644.28 1411.95 L1644.99 1411.95 L1645.7 1411.95 L1646.4 1411.95 L1647.11 1411.95 L1647.82 1411.95 L1648.53 1411.95 L1649.24 1411.95 L1649.94 1411.95 L1650.65 1411.95 L1651.36 1411.95 L1652.07 1411.95 L1652.77 1411.95 L1653.48 1411.95 L1654.19 1411.95 L1654.9 1411.95 L1655.61 1411.95 L1656.31 1411.95 L1657.02 1411.95 L1657.73 1411.95 L1658.44 1411.95 L1659.14 1411.95 L1659.85 1411.95 L1660.56 1411.95 L1661.27 1411.95 L1661.98 1411.95 L1662.68 1411.95 L1663.39 1411.95 L1664.1 1411.95 L1664.81 1411.95 L1665.51 1411.95 L1666.22 1411.95 L1666.93 1411.95 L1667.64 1411.95 L1668.35 1411.95 L1669.05 1411.95 L1669.76 1411.95 L1670.47 1411.95 L1671.18 1411.95 L1671.89 1411.95 L1672.59 1411.95 L1673.3 1411.95 L1674.01 1411.95 L1674.72 1411.95 L1675.42 1411.95 L1676.13 1411.95 L1676.84 1411.95 L1677.55 1411.95 L1678.26 1411.95 L1678.96 1411.95 L1679.67 1411.95 L1680.38 1411.95 L1681.09 1411.95 L1681.79 1411.95 L1682.5 1411.95 L1683.21 1411.95 L1683.92 1411.95 L1684.63 1411.95 L1685.33 1411.95 L1686.04 1411.95 L1686.75 1411.95 L1687.46 1411.95 L1688.16 1411.95 L1688.87 1411.95 L1689.58 1411.95 L1690.29 1411.95 L1691 1411.95 L1691.7 1411.95 L1692.41 1411.95 L1693.12 1411.95 L1693.83 1411.95 L1694.53 1411.95 L1695.24 1411.95 L1695.95 1411.95 L1696.66 1411.95 L1697.37 1411.95 L1698.07 1411.95 L1698.78 1411.95 L1699.49 1411.95 L1700.2 1411.95 L1700.9 1411.95 L1701.61 1411.95 L1702.32 1411.95 L1703.03 1411.95 L1703.74 1411.95 L1704.44 1411.95 L1705.15 1411.95 L1705.86 1411.95 L1706.57 1411.95 L1707.27 1411.95 L1707.98 1411.95 L1708.69 1411.95 L1709.4 1411.95 L1710.11 1411.95 L1710.81 1411.95 L1711.52 1411.95 L1712.23 1411.95 L1712.94 1411.95 L1713.64 1411.95 L1714.35 1411.95 L1715.06 1411.95 L1715.77 1411.95 L1716.48 1411.95 L1717.18 1411.95 L1717.89 1411.95 L1718.6 1411.95 L1719.31 1411.95 L1720.01 1411.95 L1720.72 1411.95 L1721.43 1411.95 L1722.14 1411.95 L1722.85 1411.95 L1723.55 1411.95 L1724.26 1411.95 L1724.97 1411.95 L1725.68 1411.95 L1726.38 1411.95 L1727.09 1411.95 L1727.8 1411.95 L1728.51 1411.95 L1729.22 1411.95 L1729.92 1411.95 L1730.63 1411.95 L1731.34 1411.95 L1732.05 1411.95 L1732.75 1411.95 L1733.46 1411.95 L1734.17 1411.95 L1734.88 1411.95 L1735.59 1411.95 L1736.29 1411.95 L1737 1411.95 L1737.71 1411.95 L1738.42 1411.95 L1739.12 1411.95 L1739.83 1411.95 L1740.54 1411.95 L1741.25 1411.95 L1741.96 1411.95 L1742.66 1411.95 L1743.37 1411.95 L1744.08 1411.95 L1744.79 1411.95 L1745.49 1411.95 L1746.2 1411.95 L1746.91 1411.95 L1747.62 1411.95 L1748.33 1411.95 L1749.03 1411.95 L1749.74 1411.95 L1750.45 1411.95 L1751.16 1411.95 L1751.87 1411.95 L1752.57 1411.95 L1753.28 1411.95 L1753.99 1411.95 L1754.7 1411.95 L1755.4 1411.95 L1756.11 1411.95 L1756.82 1411.95 L1757.53 1411.95 L1758.24 1411.95 L1758.94 1411.95 L1759.65 1411.95 L1760.36 1411.95 L1761.07 1411.95 L1761.77 1411.95 L1762.48 1411.95 L1763.19 1411.95 L1763.9 1411.95 L1764.61 1411.95 L1765.31 1411.95 L1766.02 1411.95 L1766.73 1411.95 L1767.44 1411.95 L1768.14 1411.95 L1768.85 1411.95 L1769.56 1411.95 L1770.27 1411.95 L1770.98 1411.95 L1771.68 1411.95 L1772.39 1411.95 L1773.1 1411.95 L1773.81 1411.95 L1774.51 1411.95 L1775.22 1411.95 L1775.93 1411.95 L1776.64 1411.95 L1777.35 1411.95 L1778.05 1411.95 L1778.76 1411.95 L1779.47 1411.95 L1780.18 1411.95 L1780.88 1411.95 L1781.59 1411.95 L1782.3 1411.95 L1783.01 1411.95 L1783.72 1411.95 L1784.42 1411.95 L1785.13 1411.95 L1785.84 1411.95 L1786.55 1411.95 L1787.25 1411.95 L1787.96 1411.95 L1788.67 1411.95 L1789.38 1411.95 L1790.09 1411.95 L1790.79 1411.95 L1791.5 1411.95 L1792.21 1411.95 L1792.92 1411.95 L1793.62 1411.95 L1794.33 1411.95 L1795.04 1411.95 L1795.75 1411.95 L1796.46 1411.95 L1797.16 1411.95 L1797.87 1411.95 L1798.58 1411.95 L1799.29 1411.95 L1799.99 1411.95 L1800.7 1411.95 L1801.41 1411.95 L1802.12 1411.95 L1802.83 1411.95 L1803.53 1411.95 L1804.24 1411.95 L1804.95 1411.95 L1805.66 1411.95 L1806.36 1411.95 L1807.07 1411.95 L1807.78 1411.95 L1808.49 1411.95 L1809.2 1411.95 L1809.9 1411.95 L1810.61 1411.95 L1811.32 1411.95 L1812.03 1411.95 L1812.73 1411.95 L1813.44 1411.95 L1814.15 1411.95 L1814.86 1411.95 L1815.57 1411.95 L1816.27 1411.95 L1816.98 1411.95 L1817.69 1411.95 L1818.4 1411.95 L1819.1 1411.95 L1819.81 1411.95 L1820.52 1411.95 L1821.23 1411.95 L1821.94 1411.95 L1822.64 1411.95 L1823.35 1411.95 L1824.06 1411.95 L1824.77 1411.95 L1825.48 1411.95 L1826.18 1411.95 L1826.89 1411.95 L1827.6 1411.95 L1828.31 1411.95 L1829.01 1411.95 L1829.72 1411.95 L1830.43 1411.95 L1831.14 1411.95 L1831.85 1411.95 L1832.55 1411.95 L1833.26 1411.95 L1833.97 1411.95 L1834.68 1411.95 L1835.38 1411.95 L1836.09 1411.95 L1836.8 1411.95 L1837.51 1411.95 L1838.22 1411.95 L1838.92 1411.95 L1839.63 1411.95 L1840.34 1411.95 L1841.05 1411.95 L1841.75 1411.95 L1842.46 1411.95 L1843.17 1411.95 L1843.88 1411.95 L1844.59 1411.95 L1845.29 1411.95 L1846 1411.95 L1846.71 1411.95 L1847.42 1411.95 L1848.12 1411.95 L1848.83 1411.95 L1849.54 1411.95 L1850.25 1411.95 L1850.96 1411.95 L1851.66 1411.95 L1852.37 1411.95 L1853.08 1411.95 L1853.79 1411.95 L1854.49 1411.95 L1855.2 1411.95 L1855.91 1411.95 L1856.62 1411.95 L1857.33 1411.95 L1858.03 1411.95 L1858.74 1411.95 L1859.45 1411.95 L1860.16 1411.95 L1860.86 1411.95 L1861.57 1411.95 L1862.28 1411.95 L1862.99 1411.95 L1863.7 1411.95 L1864.4 1411.95 L1865.11 1411.95 L1865.82 1411.95 L1866.53 1411.95 L1867.23 1411.95 L1867.94 1411.95 L1868.65 1411.95 L1869.36 1411.95 L1870.07 1411.95 L1870.77 1411.95 L1871.48 1411.95 L1872.19 1411.95 L1872.9 1411.95 L1873.6 1411.95 L1874.31 1411.95 L1875.02 1411.95 L1875.73 1411.95 L1876.44 1411.95 L1877.14 1411.95 L1877.85 1411.95 L1878.56 1411.95 L1879.27 1411.95 L1879.97 1411.95 L1880.68 1411.95 L1881.39 1411.95 L1882.1 1411.95 L1882.81 1411.95 L1883.51 1411.95 L1884.22 1411.95 L1884.93 1411.95 L1885.64 1411.95 L1886.34 1411.95 L1887.05 1411.95 L1887.76 1411.95 L1888.47 1411.95 L1889.18 1411.95 L1889.88 1411.95 L1890.59 1411.95 L1891.3 1411.95 L1892.01 1411.95 L1892.71 1411.95 L1893.42 1411.95 L1894.13 1411.95 L1894.84 1411.95 L1895.55 1411.95 L1896.25 1411.95 L1896.96 1411.95 L1897.67 1411.95 L1898.38 1411.95 L1899.08 1411.95 L1899.79 1411.95 L1900.5 1411.95 L1901.21 1411.95 L1901.92 1411.95 L1902.62 1411.95 L1903.33 1411.95 L1904.04 1411.95 L1904.75 1411.95 L1905.46 1411.95 L1906.16 1411.95 L1906.87 1411.95 L1907.58 1411.95 L1908.29 1411.95 L1908.99 1411.95 L1909.7 1411.95 L1910.41 1411.95 L1911.12 1411.95 L1911.83 1411.95 L1912.53 1411.95 L1913.24 1411.95 L1913.95 1411.95 L1914.66 1411.95 L1915.36 1411.95 L1916.07 1411.95 L1916.78 1411.95 L1917.49 1411.95 L1918.2 1411.95 L1918.9 1411.95 L1919.61 1411.95 L1920.32 1411.95 L1921.03 1411.95 L1921.73 1411.95 L1922.44 1411.95 L1923.15 1411.95 L1923.86 1411.95 L1924.57 1411.95 L1925.27 1411.95 L1925.98 1411.95 L1926.69 1411.95 L1927.4 1411.95 L1928.1 1411.95 L1928.81 1411.95 L1929.52 1411.95 L1930.23 1411.95 L1930.94 1411.95 L1931.64 1411.95 L1932.35 1411.95 L1933.06 1411.95 L1933.77 1411.95 L1934.47 1411.95 L1935.18 1411.95 L1935.89 1411.95 L1936.6 1411.95 L1937.31 1411.95 L1938.01 1411.95 L1938.72 1411.95 L1939.43 1411.95 L1940.14 1411.95 L1940.84 1411.95 L1941.55 1411.95 L1942.26 1411.95 L1942.97 1411.95 L1943.68 1411.95 L1944.38 1411.95 L1945.09 1411.95 L1945.8 1411.95 L1946.51 1411.95 L1947.21 1411.95 L1947.92 1411.95 L1948.63 1411.95 L1949.34 1411.95 L1950.05 1411.95 L1950.75 1411.95 L1951.46 1411.95 L1952.17 1411.95 L1952.88 1411.95 L1953.58 1411.95 L1954.29 1411.95 L1955 1411.95 L1955.71 1411.95 L1956.42 1411.95 L1957.12 1411.95 L1957.83 1411.95 L1958.54 1411.95 L1959.25 1411.95 L1959.95 1411.95 L1960.66 1411.95 L1961.37 1411.95 L1962.08 1411.95 L1962.79 1411.95 L1963.49 1411.95 L1964.2 1411.95 L1964.91 1411.95 L1965.62 1411.95 L1966.32 1411.95 L1967.03 1411.95 L1967.74 1411.95 L1968.45 1411.95 L1969.16 1411.95 L1969.86 1411.95 L1970.57 1411.95 L1971.28 1411.95 L1971.99 1411.95 L1972.69 1411.95 L1973.4 1411.95 L1974.11 1411.95 L1974.82 1411.95 L1975.53 1411.95 L1976.23 1411.95 L1976.94 1411.95 L1977.65 1411.95 L1978.36 1411.95 L1979.07 1411.95 L1979.77 1411.95 L1980.48 1411.95 L1981.19 1411.95 L1981.9 1411.95 L1982.6 1411.95 L1983.31 1411.95 L1984.02 1411.95 L1984.73 1411.95 L1985.44 1411.95 L1986.14 1411.95 L1986.85 1411.95 L1987.56 1411.95 L1988.27 1411.95 L1988.97 1411.95 L1989.68 1411.95 L1990.39 1411.95 L1991.1 1411.95 L1991.81 1411.95 L1992.51 1411.95 L1993.22 1411.95 L1993.93 1411.95 L1994.64 1411.95 L1995.34 1411.95 L1996.05 1411.95 L1996.76 1411.95 L1997.47 1411.95 L1998.18 1411.95 L1998.88 1411.95 L1999.59 1411.95 L2000.3 1411.95 L2001.01 1411.95 L2001.71 1411.95 L2002.42 1411.95 L2003.13 1411.95 L2003.84 1411.95 L2004.55 1411.95 L2005.25 1411.95 L2005.96 1411.95 L2006.67 1411.95 L2007.38 1411.95 L2008.08 1411.95 L2008.79 1411.95 L2009.5 1411.95 L2010.21 1411.95 L2010.92 1411.95 L2011.62 1411.95 L2012.33 1411.95 L2013.04 1411.95 L2013.75 1411.95 L2014.45 1411.95 L2015.16 1411.95 L2015.87 1411.95 L2016.58 1411.95 L2017.29 1411.95 L2017.99 1411.95 L2018.7 1411.95 L2019.41 1411.95 L2020.12 1411.95 L2020.82 1411.95 L2021.53 1411.95 L2022.24 1411.95 L2022.95 1411.95 L2023.66 1411.95 L2024.36 1411.95 L2025.07 1411.95 L2025.78 1411.95 L2026.49 1411.95 L2027.19 1411.95 L2027.9 1411.95 L2028.61 1411.95 L2029.32 1411.95 L2030.03 1411.95 L2030.73 1411.95 L2031.44 1411.95 L2032.15 1411.95 L2032.86 1411.95 L2033.56 1411.95 L2034.27 1411.95 L2034.98 1411.95 L2035.69 1411.95 L2036.4 1411.95 L2037.1 1411.95 L2037.81 1411.95 L2038.52 1411.95 L2039.23 1411.95 L2039.93 1411.95 L2040.64 1411.95 L2041.35 1411.95 L2042.06 1411.95 L2042.77 1411.95 L2043.47 1411.95 L2044.18 1411.95 L2044.89 1411.95 L2045.6 1411.95 L2046.3 1411.95 L2047.01 1411.95 L2047.72 1411.95 L2048.43 1411.95 L2049.14 1411.95 L2049.84 1411.95 L2050.55 1411.95 L2051.26 1411.95 L2051.97 1411.95 L2052.68 1411.95 L2053.38 1411.95 L2054.09 1411.95 L2054.8 1411.95 L2055.51 1411.95 L2056.21 1411.95 L2056.92 1411.95 L2057.63 1411.95 L2058.34 1411.95 L2059.05 1411.95 L2059.75 1411.95 L2060.46 1411.95 L2061.17 1411.95 L2061.88 1411.95 L2062.58 1411.95 L2063.29 1411.95 L2064 1411.95 L2064.71 1411.95 L2065.42 1411.95 L2066.12 1411.95 L2066.83 1411.95 L2067.54 1411.95 L2068.25 1411.95 L2068.95 1411.95 L2069.66 1411.95 L2070.37 1411.95 L2071.08 1411.95 L2071.79 1411.95 L2072.49 1411.95 L2073.2 1411.95 L2073.91 1411.95 L2074.62 1411.95 L2075.32 1411.95 L2076.03 1411.95 L2076.74 1411.95 L2077.45 1411.95 L2078.16 1411.95 L2078.86 1411.95 L2079.57 1411.95 L2080.28 1411.95 L2080.99 1411.95 L2081.69 1411.95 L2082.4 1411.95 L2083.11 1411.95 L2083.82 1411.95 L2084.53 1411.95 L2085.23 1411.95 L2085.94 1411.95 L2086.65 1411.95 L2087.36 1411.95 L2088.06 1411.95 L2088.77 1411.95 L2089.48 1411.95 L2090.19 1411.95 L2090.9 1411.95 L2091.6 1411.95 L2092.31 1411.95 L2093.02 1411.95 L2093.73 1411.95 L2094.43 1411.95 L2095.14 1411.95 L2095.85 1411.95 L2096.56 1411.95 L2097.27 1411.95 L2097.97 1411.95 L2098.68 1411.95 L2099.39 1411.95 L2100.1 1411.95 L2100.8 1411.95 L2101.51 1411.95 L2102.22 1411.95 L2102.93 1411.95 L2103.64 1411.95 L2104.34 1411.95 L2105.05 1411.95 L2105.76 1411.95 L2106.47 1411.95 L2107.17 1411.95 L2107.88 1411.95 L2108.59 1411.95 L2109.3 1411.95 L2110.01 1411.95 L2110.71 1411.95 L2111.42 1411.95 L2112.13 1411.95 L2112.84 1411.95 L2113.54 1411.95 L2114.25 1411.95 L2114.96 1411.95 L2115.67 1411.95 L2116.38 1411.95 L2117.08 1411.95 L2117.79 1411.95 L2118.5 1411.95 L2119.21 1411.95 L2119.91 1411.95 L2120.62 1411.95 L2121.33 1411.95 L2122.04 1411.95 L2122.75 1411.95 L2123.45 1411.95 L2124.16 1411.95 L2124.87 1411.95 L2125.58 1411.95 L2126.28 1411.95 L2126.99 1411.95 L2127.7 1411.95 L2128.41 1411.95 L2129.12 1411.95 L2129.82 1411.95 L2130.53 1411.95 L2131.24 1411.95 L2131.95 1411.95 L2132.66 1411.95 L2133.36 1411.95 L2134.07 1411.95 L2134.78 1411.95 L2135.49 1411.95 L2136.19 1411.95 L2136.9 1411.95 L2137.61 1411.95 L2138.32 1411.95 L2139.03 1411.95 L2139.73 1411.95 L2140.44 1411.95 L2141.15 1411.95 L2141.86 1411.95 L2142.56 1411.95 L2143.27 1411.95 L2143.98 1411.95 L2144.69 1411.95 L2145.4 1411.95 L2146.1 1411.95 L2146.81 1411.95 L2147.52 1411.95 L2148.23 1411.95 L2148.93 1411.95 L2149.64 1411.95 L2150.35 1411.95 L2151.06 1411.95 L2151.77 1411.95 L2152.47 1411.95 L2153.18 1411.95 L2153.89 1411.95 L2154.6 1411.95 L2155.3 1411.95 L2156.01 1411.95 L2156.72 1411.95 L2157.43 1411.95 L2158.14 1411.95 L2158.84 1411.95 L2159.55 1411.95 L2160.26 1411.95 L2160.97 1411.95 L2161.67 1411.95 L2162.38 1411.95 L2163.09 1411.95 L2163.8 1411.95 L2164.51 1411.95 L2165.21 1411.95 L2165.92 1411.95 L2166.63 1411.95 L2167.34 1411.95 L2168.04 1411.95 L2168.75 1411.95 L2169.46 1411.95 L2170.17 1411.95 L2170.88 1411.95 L2171.58 1411.95 L2172.29 1411.95 L2173 1411.95 L2173.71 1411.95 L2174.41 1411.95 L2175.12 1411.95 L2175.83 1411.95 L2176.54 1411.95 L2177.25 1411.95 L2177.95 1411.95 L2178.66 1411.95 L2179.37 1411.95 L2180.08 1411.95 L2180.78 1411.95 L2181.49 1411.95 L2182.2 1411.95 L2182.91 1411.95 L2183.62 1411.95 L2184.32 1411.95 L2185.03 1411.95 L2185.74 1411.95 L2186.45 1411.95 L2187.15 1411.95 L2187.86 1411.95 L2188.57 1411.95 L2189.28 1411.95 L2189.99 1411.95 L2190.69 1411.95 L2191.4 1411.95 L2192.11 1411.95 L2192.82 1411.95 L2193.52 1411.95 L2194.23 1411.95 L2194.94 1411.95 L2195.65 1411.95 L2196.36 1411.95 L2197.06 1411.95 L2197.77 1411.95 L2198.48 1411.95 L2199.19 1411.95 L2199.89 1411.95 L2200.6 1411.95 L2201.31 1411.95 L2202.02 1411.95 L2202.73 1411.95 L2203.43 1411.95 L2204.14 1411.95 L2204.85 1411.95 L2205.56 1411.95 L2206.27 1411.95 L2206.97 1411.95 L2207.68 1411.95 L2208.39 1411.95 L2209.1 1411.95 L2209.8 1411.95 L2210.51 1411.95 L2211.22 1411.95 L2211.93 1411.95 L2212.64 1411.95 L2213.34 1411.95 L2214.05 1411.95 L2214.76 1411.95 L2215.47 1411.95 L2216.17 1411.95 L2216.88 1411.95 L2217.59 1411.95 L2218.3 1411.95 L2219.01 1411.95 L2219.71 1411.95 L2220.42 1411.95 L2221.13 1411.95 L2221.84 1411.95 L2222.54 1411.95 L2223.25 1411.95 L2223.96 1411.95 L2224.67 1411.95 L2225.38 1411.95 L2226.08 1411.95 L2226.79 1411.95 L2227.5 1411.95 L2228.21 1411.95 L2228.91 1411.95 L2229.62 1411.95 L2230.33 1411.95 L2231.04 1411.95 L2231.75 1411.95 L2232.45 1411.95 L2233.16 1411.95 L2233.87 1411.95 L2234.58 1411.95 L2235.28 1411.95 L2235.99 1411.95 L2236.7 1411.95 L2237.41 1411.95 L2238.12 1411.95 L2238.82 1411.95 L2239.53 1411.95 L2240.24 1411.95 L2240.95 1411.95 L2241.65 1411.95 L2242.36 1411.95 L2243.07 1411.95 L2243.78 1411.95 L2244.49 1411.95 L2245.19 1411.95 L2245.9 1411.95 L2246.61 1411.95 L2247.32 1411.95 L2248.02 1411.95 L2248.73 1411.95 L2249.44 1411.95 L2250.15 1411.95 L2250.86 1411.95 L2251.56 1411.95 L2252.27 1411.95 L2252.98 1411.95 L2253.69 1411.95 L2254.39 1411.95 L2255.1 1411.95 L2255.81 1411.95 L2256.52 1411.95 L2257.23 1411.95 L2257.93 1411.95 L2258.64 1411.95 L2259.35 1411.95 L2260.06 1411.95 L2260.76 1411.95 L2261.47 1411.95 L2262.18 1411.95 L2262.89 1411.95 L2263.6 1411.95 L2264.3 1411.95 L2265.01 1411.95 L2265.72 1411.95 L2266.43 1411.95 L2267.13 1411.95 L2267.84 1411.95 L2268.55 1411.95 L2269.26 1411.95 L2269.97 1411.95 L2270.67 1411.95 L2271.38 1411.95 L2272.09 1411.95 L2272.8 1411.95 L2273.5 1411.95 L2274.21 1411.95 L2274.92 1411.95 L2275.63 1411.95 L2276.34 1411.95 L2277.04 1411.95 L2277.75 1411.95 L2278.46 1411.95 L2279.17 1411.95 L2279.87 1411.95 L2280.58 1411.95 L2281.29 1411.95 L2282 1411.95 L2282.71 1411.95 L2283.41 1411.95 L2284.12 1411.95 L2284.83 1411.95 L2285.54 1411.95 L2286.25 1411.95 L2286.95 1411.95 L2287.66 1411.95 L2288.37 1411.95 L2289.08 1411.95 L2289.08 1411.77 L2288.37 1411.77 L2287.66 1411.77 L2286.95 1411.77 L2286.25 1411.77 L2285.54 1411.77 L2284.83 1411.77 L2284.12 1411.77 L2283.41 1411.77 L2282.71 1411.77 L2282 1411.77 L2281.29 1411.77 L2280.58 1411.77 L2279.87 1411.77 L2279.17 1411.77 L2278.46 1411.77 L2277.75 1411.77 L2277.04 1411.77 L2276.34 1411.77 L2275.63 1411.77 L2274.92 1411.77 L2274.21 1411.77 L2273.5 1411.77 L2272.8 1411.77 L2272.09 1411.77 L2271.38 1411.77 L2270.67 1411.77 L2269.97 1411.77 L2269.26 1411.77 L2268.55 1411.77 L2267.84 1411.77 L2267.13 1411.77 L2266.43 1411.77 L2265.72 1411.77 L2265.01 1411.77 L2264.3 1411.77 L2263.6 1411.77 L2262.89 1411.77 L2262.18 1411.77 L2261.47 1411.77 L2260.76 1411.77 L2260.06 1411.77 L2259.35 1411.77 L2258.64 1411.77 L2257.93 1411.77 L2257.23 1411.77 L2256.52 1411.77 L2255.81 1411.77 L2255.1 1411.77 L2254.39 1411.77 L2253.69 1411.77 L2252.98 1411.77 L2252.27 1411.77 L2251.56 1411.77 L2250.86 1411.77 L2250.15 1411.77 L2249.44 1411.77 L2248.73 1411.77 L2248.02 1411.77 L2247.32 1411.77 L2246.61 1411.77 L2245.9 1411.77 L2245.19 1411.77 L2244.49 1411.77 L2243.78 1411.77 L2243.07 1411.77 L2242.36 1411.77 L2241.65 1411.77 L2240.95 1411.77 L2240.24 1411.77 L2239.53 1411.77 L2238.82 1411.77 L2238.12 1411.77 L2237.41 1411.77 L2236.7 1411.77 L2235.99 1411.77 L2235.28 1411.77 L2234.58 1411.77 L2233.87 1411.77 L2233.16 1411.77 L2232.45 1411.77 L2231.75 1411.77 L2231.04 1411.77 L2230.33 1411.77 L2229.62 1411.77 L2228.91 1411.77 L2228.21 1411.77 L2227.5 1411.77 L2226.79 1411.77 L2226.08 1411.77 L2225.38 1411.77 L2224.67 1411.77 L2223.96 1411.77 L2223.25 1411.77 L2222.54 1411.77 L2221.84 1411.77 L2221.13 1411.77 L2220.42 1411.77 L2219.71 1411.77 L2219.01 1411.77 L2218.3 1411.77 L2217.59 1411.77 L2216.88 1411.77 L2216.17 1411.77 L2215.47 1411.77 L2214.76 1411.77 L2214.05 1411.77 L2213.34 1411.77 L2212.64 1411.77 L2211.93 1411.77 L2211.22 1411.77 L2210.51 1411.77 L2209.8 1411.77 L2209.1 1411.77 L2208.39 1411.77 L2207.68 1411.77 L2206.97 1411.77 L2206.27 1411.77 L2205.56 1411.77 L2204.85 1411.77 L2204.14 1411.77 L2203.43 1411.77 L2202.73 1411.77 L2202.02 1411.77 L2201.31 1411.77 L2200.6 1411.77 L2199.89 1411.77 L2199.19 1411.77 L2198.48 1411.77 L2197.77 1411.77 L2197.06 1411.77 L2196.36 1411.77 L2195.65 1411.77 L2194.94 1411.77 L2194.23 1411.77 L2193.52 1411.77 L2192.82 1411.77 L2192.11 1411.77 L2191.4 1411.77 L2190.69 1411.77 L2189.99 1411.77 L2189.28 1411.77 L2188.57 1411.77 L2187.86 1411.77 L2187.15 1411.77 L2186.45 1411.77 L2185.74 1411.77 L2185.03 1411.77 L2184.32 1411.77 L2183.62 1411.77 L2182.91 1411.77 L2182.2 1411.77 L2181.49 1411.77 L2180.78 1411.77 L2180.08 1411.77 L2179.37 1411.77 L2178.66 1411.77 L2177.95 1411.77 L2177.25 1411.77 L2176.54 1411.77 L2175.83 1411.77 L2175.12 1411.77 L2174.41 1411.77 L2173.71 1411.77 L2173 1411.77 L2172.29 1411.77 L2171.58 1411.77 L2170.88 1411.77 L2170.17 1411.77 L2169.46 1411.77 L2168.75 1411.77 L2168.04 1411.77 L2167.34 1411.77 L2166.63 1411.77 L2165.92 1411.77 L2165.21 1411.77 L2164.51 1411.77 L2163.8 1411.77 L2163.09 1411.77 L2162.38 1411.77 L2161.67 1411.77 L2160.97 1411.77 L2160.26 1411.77 L2159.55 1411.77 L2158.84 1411.77 L2158.14 1411.77 L2157.43 1411.77 L2156.72 1411.77 L2156.01 1411.77 L2155.3 1411.77 L2154.6 1411.77 L2153.89 1411.77 L2153.18 1411.77 L2152.47 1411.77 L2151.77 1411.77 L2151.06 1411.77 L2150.35 1411.77 L2149.64 1411.77 L2148.93 1411.77 L2148.23 1411.77 L2147.52 1411.77 L2146.81 1411.77 L2146.1 1411.77 L2145.4 1411.77 L2144.69 1411.77 L2143.98 1411.77 L2143.27 1411.77 L2142.56 1411.77 L2141.86 1411.77 L2141.15 1411.77 L2140.44 1411.77 L2139.73 1411.77 L2139.03 1411.77 L2138.32 1411.77 L2137.61 1411.77 L2136.9 1411.77 L2136.19 1411.77 L2135.49 1411.77 L2134.78 1411.77 L2134.07 1411.77 L2133.36 1411.77 L2132.66 1411.77 L2131.95 1411.77 L2131.24 1411.77 L2130.53 1411.77 L2129.82 1411.77 L2129.12 1411.77 L2128.41 1411.77 L2127.7 1411.77 L2126.99 1411.77 L2126.28 1411.77 L2125.58 1411.77 L2124.87 1411.77 L2124.16 1411.77 L2123.45 1411.77 L2122.75 1411.77 L2122.04 1411.77 L2121.33 1411.77 L2120.62 1411.77 L2119.91 1411.77 L2119.21 1411.77 L2118.5 1411.77 L2117.79 1411.77 L2117.08 1411.77 L2116.38 1411.77 L2115.67 1411.77 L2114.96 1411.77 L2114.25 1411.77 L2113.54 1411.77 L2112.84 1411.77 L2112.13 1411.77 L2111.42 1411.77 L2110.71 1411.77 L2110.01 1411.77 L2109.3 1411.77 L2108.59 1411.77 L2107.88 1411.77 L2107.17 1411.77 L2106.47 1411.77 L2105.76 1411.77 L2105.05 1411.77 L2104.34 1411.77 L2103.64 1411.77 L2102.93 1411.77 L2102.22 1411.77 L2101.51 1411.77 L2100.8 1411.77 L2100.1 1411.77 L2099.39 1411.77 L2098.68 1411.77 L2097.97 1411.77 L2097.27 1411.77 L2096.56 1411.77 L2095.85 1411.77 L2095.14 1411.77 L2094.43 1411.77 L2093.73 1411.77 L2093.02 1411.77 L2092.31 1411.77 L2091.6 1411.77 L2090.9 1411.77 L2090.19 1411.77 L2089.48 1411.77 L2088.77 1411.77 L2088.06 1411.77 L2087.36 1411.77 L2086.65 1411.77 L2085.94 1411.77 L2085.23 1411.77 L2084.53 1411.77 L2083.82 1411.77 L2083.11 1411.77 L2082.4 1411.77 L2081.69 1411.77 L2080.99 1411.77 L2080.28 1411.77 L2079.57 1411.77 L2078.86 1411.77 L2078.16 1411.77 L2077.45 1411.77 L2076.74 1411.77 L2076.03 1411.77 L2075.32 1411.77 L2074.62 1411.77 L2073.91 1411.77 L2073.2 1411.77 L2072.49 1411.77 L2071.79 1411.77 L2071.08 1411.77 L2070.37 1411.77 L2069.66 1411.77 L2068.95 1411.77 L2068.25 1411.77 L2067.54 1411.77 L2066.83 1411.77 L2066.12 1411.77 L2065.42 1411.77 L2064.71 1411.77 L2064 1411.77 L2063.29 1411.77 L2062.58 1411.77 L2061.88 1411.77 L2061.17 1411.77 L2060.46 1411.77 L2059.75 1411.77 L2059.05 1411.77 L2058.34 1411.77 L2057.63 1411.77 L2056.92 1411.77 L2056.21 1411.77 L2055.51 1411.77 L2054.8 1411.77 L2054.09 1411.77 L2053.38 1411.77 L2052.68 1411.77 L2051.97 1411.77 L2051.26 1411.77 L2050.55 1411.77 L2049.84 1411.77 L2049.14 1411.77 L2048.43 1411.77 L2047.72 1411.77 L2047.01 1411.77 L2046.3 1411.77 L2045.6 1411.77 L2044.89 1411.77 L2044.18 1411.77 L2043.47 1411.77 L2042.77 1411.77 L2042.06 1411.77 L2041.35 1411.77 L2040.64 1411.77 L2039.93 1411.77 L2039.23 1411.77 L2038.52 1411.77 L2037.81 1411.77 L2037.1 1411.77 L2036.4 1411.77 L2035.69 1411.77 L2034.98 1411.77 L2034.27 1411.77 L2033.56 1411.77 L2032.86 1411.77 L2032.15 1411.77 L2031.44 1411.77 L2030.73 1411.77 L2030.03 1411.77 L2029.32 1411.77 L2028.61 1411.77 L2027.9 1411.77 L2027.19 1411.77 L2026.49 1411.77 L2025.78 1411.77 L2025.07 1411.77 L2024.36 1411.77 L2023.66 1411.77 L2022.95 1411.77 L2022.24 1411.77 L2021.53 1411.77 L2020.82 1411.77 L2020.12 1411.77 L2019.41 1411.77 L2018.7 1411.77 L2017.99 1411.77 L2017.29 1411.77 L2016.58 1411.77 L2015.87 1411.77 L2015.16 1411.77 L2014.45 1411.77 L2013.75 1411.77 L2013.04 1411.77 L2012.33 1411.77 L2011.62 1411.77 L2010.92 1411.77 L2010.21 1411.77 L2009.5 1411.77 L2008.79 1411.77 L2008.08 1411.77 L2007.38 1411.77 L2006.67 1411.77 L2005.96 1411.77 L2005.25 1411.77 L2004.55 1411.77 L2003.84 1411.77 L2003.13 1411.77 L2002.42 1411.77 L2001.71 1411.77 L2001.01 1411.77 L2000.3 1411.77 L1999.59 1411.77 L1998.88 1411.77 L1998.18 1411.77 L1997.47 1411.77 L1996.76 1411.77 L1996.05 1411.77 L1995.34 1411.77 L1994.64 1411.77 L1993.93 1411.77 L1993.22 1411.77 L1992.51 1411.77 L1991.81 1411.77 L1991.1 1411.77 L1990.39 1411.77 L1989.68 1411.77 L1988.97 1411.77 L1988.27 1411.77 L1987.56 1411.77 L1986.85 1411.77 L1986.14 1411.77 L1985.44 1411.77 L1984.73 1411.77 L1984.02 1411.77 L1983.31 1411.77 L1982.6 1411.77 L1981.9 1411.77 L1981.19 1411.77 L1980.48 1411.77 L1979.77 1411.77 L1979.07 1411.77 L1978.36 1411.77 L1977.65 1411.77 L1976.94 1411.77 L1976.23 1411.77 L1975.53 1411.77 L1974.82 1411.77 L1974.11 1411.77 L1973.4 1411.77 L1972.69 1411.77 L1971.99 1411.77 L1971.28 1411.77 L1970.57 1411.77 L1969.86 1411.77 L1969.16 1411.77 L1968.45 1411.77 L1967.74 1411.77 L1967.03 1411.77 L1966.32 1411.77 L1965.62 1411.77 L1964.91 1411.77 L1964.2 1411.77 L1963.49 1411.77 L1962.79 1411.77 L1962.08 1411.77 L1961.37 1411.77 L1960.66 1411.77 L1959.95 1411.77 L1959.25 1411.77 L1958.54 1411.77 L1957.83 1411.77 L1957.12 1411.77 L1956.42 1411.77 L1955.71 1411.77 L1955 1411.77 L1954.29 1411.77 L1953.58 1411.77 L1952.88 1411.77 L1952.17 1411.77 L1951.46 1411.77 L1950.75 1411.77 L1950.05 1411.77 L1949.34 1411.77 L1948.63 1411.77 L1947.92 1411.77 L1947.21 1411.77 L1946.51 1411.77 L1945.8 1411.77 L1945.09 1411.77 L1944.38 1411.77 L1943.68 1411.77 L1942.97 1411.77 L1942.26 1411.77 L1941.55 1411.77 L1940.84 1411.77 L1940.14 1411.77 L1939.43 1411.77 L1938.72 1411.77 L1938.01 1411.77 L1937.31 1411.77 L1936.6 1411.77 L1935.89 1411.77 L1935.18 1411.77 L1934.47 1411.77 L1933.77 1411.77 L1933.06 1411.77 L1932.35 1411.77 L1931.64 1411.77 L1930.94 1411.77 L1930.23 1411.77 L1929.52 1411.77 L1928.81 1411.77 L1928.1 1411.77 L1927.4 1411.77 L1926.69 1411.77 L1925.98 1411.77 L1925.27 1411.77 L1924.57 1411.77 L1923.86 1411.77 L1923.15 1411.77 L1922.44 1411.77 L1921.73 1411.77 L1921.03 1411.77 L1920.32 1411.77 L1919.61 1411.77 L1918.9 1411.77 L1918.2 1411.77 L1917.49 1411.77 L1916.78 1411.77 L1916.07 1411.77 L1915.36 1411.77 L1914.66 1411.77 L1913.95 1411.77 L1913.24 1411.77 L1912.53 1411.77 L1911.83 1411.77 L1911.12 1411.77 L1910.41 1411.77 L1909.7 1411.77 L1908.99 1411.77 L1908.29 1411.77 L1907.58 1411.77 L1906.87 1411.77 L1906.16 1411.77 L1905.46 1411.77 L1904.75 1411.77 L1904.04 1411.77 L1903.33 1411.77 L1902.62 1411.77 L1901.92 1411.77 L1901.21 1411.77 L1900.5 1411.77 L1899.79 1411.77 L1899.08 1411.77 L1898.38 1411.77 L1897.67 1411.77 L1896.96 1411.77 L1896.25 1411.77 L1895.55 1411.77 L1894.84 1411.77 L1894.13 1411.77 L1893.42 1411.77 L1892.71 1411.77 L1892.01 1411.77 L1891.3 1411.77 L1890.59 1411.77 L1889.88 1411.77 L1889.18 1411.77 L1888.47 1411.77 L1887.76 1411.77 L1887.05 1411.77 L1886.34 1411.77 L1885.64 1411.77 L1884.93 1411.77 L1884.22 1411.77 L1883.51 1411.77 L1882.81 1411.77 L1882.1 1411.77 L1881.39 1411.77 L1880.68 1411.77 L1879.97 1411.77 L1879.27 1411.77 L1878.56 1411.77 L1877.85 1411.77 L1877.14 1411.77 L1876.44 1411.77 L1875.73 1411.77 L1875.02 1411.77 L1874.31 1411.77 L1873.6 1411.77 L1872.9 1411.77 L1872.19 1411.77 L1871.48 1411.77 L1870.77 1411.77 L1870.07 1411.77 L1869.36 1411.77 L1868.65 1411.77 L1867.94 1411.77 L1867.23 1411.77 L1866.53 1411.77 L1865.82 1411.77 L1865.11 1411.77 L1864.4 1411.77 L1863.7 1411.77 L1862.99 1411.77 L1862.28 1411.77 L1861.57 1411.77 L1860.86 1411.77 L1860.16 1411.77 L1859.45 1411.77 L1858.74 1411.77 L1858.03 1411.77 L1857.33 1411.77 L1856.62 1411.77 L1855.91 1411.77 L1855.2 1411.77 L1854.49 1411.77 L1853.79 1411.77 L1853.08 1411.77 L1852.37 1411.77 L1851.66 1411.77 L1850.96 1411.77 L1850.25 1411.77 L1849.54 1411.77 L1848.83 1411.77 L1848.12 1411.77 L1847.42 1411.77 L1846.71 1411.77 L1846 1411.77 L1845.29 1411.77 L1844.59 1411.77 L1843.88 1411.77 L1843.17 1411.77 L1842.46 1411.77 L1841.75 1411.77 L1841.05 1411.77 L1840.34 1411.77 L1839.63 1411.77 L1838.92 1411.77 L1838.22 1411.77 L1837.51 1411.77 L1836.8 1411.77 L1836.09 1411.77 L1835.38 1411.77 L1834.68 1411.77 L1833.97 1411.77 L1833.26 1411.77 L1832.55 1411.77 L1831.85 1411.77 L1831.14 1411.77 L1830.43 1411.77 L1829.72 1411.77 L1829.01 1411.77 L1828.31 1411.77 L1827.6 1411.77 L1826.89 1411.77 L1826.18 1411.77 L1825.48 1411.77 L1824.77 1411.77 L1824.06 1411.77 L1823.35 1411.77 L1822.64 1411.77 L1821.94 1411.77 L1821.23 1411.77 L1820.52 1411.77 L1819.81 1411.77 L1819.1 1411.77 L1818.4 1411.77 L1817.69 1411.77 L1816.98 1411.77 L1816.27 1411.77 L1815.57 1411.77 L1814.86 1411.77 L1814.15 1411.77 L1813.44 1411.77 L1812.73 1411.77 L1812.03 1411.77 L1811.32 1411.77 L1810.61 1411.77 L1809.9 1411.77 L1809.2 1411.77 L1808.49 1411.77 L1807.78 1411.77 L1807.07 1411.77 L1806.36 1411.77 L1805.66 1411.77 L1804.95 1411.77 L1804.24 1411.77 L1803.53 1411.77 L1802.83 1411.77 L1802.12 1411.77 L1801.41 1411.77 L1800.7 1411.77 L1799.99 1411.77 L1799.29 1411.77 L1798.58 1411.77 L1797.87 1411.77 L1797.16 1411.77 L1796.46 1411.77 L1795.75 1411.77 L1795.04 1411.77 L1794.33 1411.77 L1793.62 1411.77 L1792.92 1411.77 L1792.21 1411.77 L1791.5 1411.77 L1790.79 1411.77 L1790.09 1411.77 L1789.38 1411.77 L1788.67 1411.77 L1787.96 1411.77 L1787.25 1411.77 L1786.55 1411.77 L1785.84 1411.77 L1785.13 1411.77 L1784.42 1411.77 L1783.72 1411.77 L1783.01 1411.77 L1782.3 1411.77 L1781.59 1411.77 L1780.88 1411.77 L1780.18 1411.77 L1779.47 1411.77 L1778.76 1411.77 L1778.05 1411.77 L1777.35 1411.77 L1776.64 1411.77 L1775.93 1411.77 L1775.22 1411.77 L1774.51 1411.77 L1773.81 1411.77 L1773.1 1411.77 L1772.39 1411.77 L1771.68 1411.77 L1770.98 1411.77 L1770.27 1411.77 L1769.56 1411.77 L1768.85 1411.77 L1768.14 1411.77 L1767.44 1411.77 L1766.73 1411.77 L1766.02 1411.77 L1765.31 1411.77 L1764.61 1411.77 L1763.9 1411.77 L1763.19 1411.77 L1762.48 1411.77 L1761.77 1411.77 L1761.07 1411.77 L1760.36 1411.77 L1759.65 1411.77 L1758.94 1411.77 L1758.24 1411.77 L1757.53 1411.77 L1756.82 1411.77 L1756.11 1411.77 L1755.4 1411.77 L1754.7 1411.77 L1753.99 1411.77 L1753.28 1411.77 L1752.57 1411.77 L1751.87 1411.77 L1751.16 1411.77 L1750.45 1411.77 L1749.74 1411.77 L1749.03 1411.77 L1748.33 1411.77 L1747.62 1411.77 L1746.91 1411.77 L1746.2 1411.77 L1745.49 1411.77 L1744.79 1411.77 L1744.08 1411.77 L1743.37 1411.77 L1742.66 1411.77 L1741.96 1411.77 L1741.25 1411.77 L1740.54 1411.77 L1739.83 1411.77 L1739.12 1411.77 L1738.42 1411.77 L1737.71 1411.77 L1737 1411.77 L1736.29 1411.77 L1735.59 1411.77 L1734.88 1411.77 L1734.17 1411.77 L1733.46 1411.77 L1732.75 1411.77 L1732.05 1411.77 L1731.34 1411.77 L1730.63 1411.77 L1729.92 1411.77 L1729.22 1411.77 L1728.51 1411.77 L1727.8 1411.77 L1727.09 1411.77 L1726.38 1411.77 L1725.68 1411.77 L1724.97 1411.77 L1724.26 1411.77 L1723.55 1411.77 L1722.85 1411.77 L1722.14 1411.77 L1721.43 1411.77 L1720.72 1411.77 L1720.01 1411.77 L1719.31 1411.77 L1718.6 1411.77 L1717.89 1411.77 L1717.18 1411.77 L1716.48 1411.77 L1715.77 1411.77 L1715.06 1411.77 L1714.35 1411.77 L1713.64 1411.77 L1712.94 1411.77 L1712.23 1411.77 L1711.52 1411.77 L1710.81 1411.77 L1710.11 1411.77 L1709.4 1411.77 L1708.69 1411.77 L1707.98 1411.77 L1707.27 1411.77 L1706.57 1411.77 L1705.86 1411.77 L1705.15 1411.77 L1704.44 1411.77 L1703.74 1411.77 L1703.03 1411.77 L1702.32 1411.77 L1701.61 1411.77 L1700.9 1411.77 L1700.2 1411.77 L1699.49 1411.77 L1698.78 1411.77 L1698.07 1411.77 L1697.37 1411.77 L1696.66 1411.77 L1695.95 1411.77 L1695.24 1411.77 L1694.53 1411.77 L1693.83 1411.77 L1693.12 1411.77 L1692.41 1411.77 L1691.7 1411.77 L1691 1411.77 L1690.29 1411.77 L1689.58 1411.77 L1688.87 1411.77 L1688.16 1411.77 L1687.46 1411.77 L1686.75 1411.77 L1686.04 1411.77 L1685.33 1411.77 L1684.63 1411.77 L1683.92 1411.77 L1683.21 1411.77 L1682.5 1411.77 L1681.79 1411.77 L1681.09 1411.77 L1680.38 1411.77 L1679.67 1411.77 L1678.96 1411.77 L1678.26 1411.77 L1677.55 1411.77 L1676.84 1411.77 L1676.13 1411.77 L1675.42 1411.77 L1674.72 1411.77 L1674.01 1411.77 L1673.3 1411.77 L1672.59 1411.77 L1671.89 1411.77 L1671.18 1411.77 L1670.47 1411.77 L1669.76 1411.77 L1669.05 1411.77 L1668.35 1411.77 L1667.64 1411.77 L1666.93 1411.77 L1666.22 1411.77 L1665.51 1411.77 L1664.81 1411.77 L1664.1 1411.77 L1663.39 1411.77 L1662.68 1411.77 L1661.98 1411.77 L1661.27 1411.77 L1660.56 1411.77 L1659.85 1411.77 L1659.14 1411.77 L1658.44 1411.77 L1657.73 1411.77 L1657.02 1411.77 L1656.31 1411.77 L1655.61 1411.77 L1654.9 1411.77 L1654.19 1411.77 L1653.48 1411.77 L1652.77 1411.77 L1652.07 1411.77 L1651.36 1411.77 L1650.65 1411.77 L1649.94 1411.77 L1649.24 1411.77 L1648.53 1411.77 L1647.82 1411.77 L1647.11 1411.77 L1646.4 1411.77 L1645.7 1411.77 L1644.99 1411.77 L1644.28 1411.77 L1643.57 1411.77 L1642.87 1411.77 L1642.16 1411.77 L1641.45 1411.77 L1640.74 1411.77 L1640.03 1411.77 L1639.33 1411.77 L1638.62 1411.77 L1637.91 1411.77 L1637.2 1411.77 L1636.5 1411.77 L1635.79 1411.77 L1635.08 1411.77 L1634.37 1411.77 L1633.66 1411.77 L1632.96 1411.77 L1632.25 1411.77 L1631.54 1411.77 L1630.83 1411.77 L1630.13 1411.77 L1629.42 1411.77 L1628.71 1411.77 L1628 1411.77 L1627.29 1411.77 L1626.59 1411.77 L1625.88 1411.77 L1625.17 1411.77 L1624.46 1411.77 L1623.76 1411.77 L1623.05 1411.77 L1622.34 1411.77 L1621.63 1411.77 L1620.92 1411.77 L1620.22 1411.77 L1619.51 1411.77 L1618.8 1411.77 L1618.09 1411.77 L1617.39 1411.77 L1616.68 1411.77 L1615.97 1411.77 L1615.26 1411.77 L1614.55 1411.77 L1613.85 1411.77 L1613.14 1411.77 L1612.43 1411.77 L1611.72 1411.77 L1611.02 1411.77 L1610.31 1411.77 L1609.6 1411.77 L1608.89 1411.77 L1608.18 1411.77 L1607.48 1411.77 L1606.77 1411.77 L1606.06 1411.77 L1605.35 1411.77 L1604.65 1411.77 L1603.94 1411.77 L1603.23 1411.77 L1602.52 1411.77 L1601.81 1411.77 L1601.11 1411.77 L1600.4 1411.77 L1599.69 1411.77 L1598.98 1411.77 L1598.28 1411.77 L1597.57 1411.77 L1596.86 1411.77 L1596.15 1411.77 L1595.44 1411.77 L1594.74 1411.77 L1594.03 1411.77 L1593.32 1411.77 L1592.61 1411.77 L1591.9 1411.77 L1591.2 1411.77 L1590.49 1411.77 L1589.78 1411.77 L1589.07 1411.77 L1588.37 1411.77 L1587.66 1411.77 L1586.95 1411.77 L1586.24 1411.77 L1585.53 1411.77 L1584.83 1411.77 L1584.12 1411.77 L1583.41 1411.77 L1582.7 1411.77 L1582 1411.77 L1581.29 1411.77 L1580.58 1411.77 L1579.87 1411.77 L1579.16 1411.77 L1578.46 1411.77 L1577.75 1411.77 L1577.04 1411.77 L1576.33 1411.77 L1575.63 1411.77 L1574.92 1411.77 L1574.21 1411.77 L1573.5 1411.77 L1572.79 1411.77 L1572.09 1411.77 L1571.38 1411.77 L1570.67 1411.77 L1569.96 1411.77 L1569.26 1411.77 L1568.55 1411.77 L1567.84 1411.77 L1567.13 1411.77 L1566.42 1411.77 L1565.72 1411.77 L1565.01 1411.77 L1564.3 1411.77 L1563.59 1411.77 L1562.89 1411.77 L1562.18 1411.77 L1561.47 1411.77 L1560.76 1411.77 L1560.05 1411.77 L1559.35 1411.77 L1558.64 1411.77 L1557.93 1411.77 L1557.22 1411.77 L1556.52 1411.77 L1555.81 1411.77 L1555.1 1411.77 L1554.39 1411.77 L1553.68 1411.77 L1552.98 1411.77 L1552.27 1411.77 L1551.56 1411.77 L1550.85 1411.77 L1550.15 1411.77 L1549.44 1411.77 L1548.73 1411.77 L1548.02 1411.77 L1547.31 1411.77 L1546.61 1411.77 L1545.9 1411.77 L1545.19 1411.77 L1544.48 1411.77 L1543.78 1411.77 L1543.07 1411.77 L1542.36 1411.77 L1541.65 1411.77 L1540.94 1411.77 L1540.24 1411.77 L1539.53 1411.77 L1538.82 1411.77 L1538.11 1411.77 L1537.41 1411.77 L1536.7 1411.77 L1535.99 1411.77 L1535.28 1411.77 L1534.57 1411.77 L1533.87 1411.77 L1533.16 1411.77 L1532.45 1411.77 L1531.74 1411.77 L1531.04 1411.77 L1530.33 1411.77 L1529.62 1411.77 L1528.91 1411.77 L1528.2 1411.77 L1527.5 1411.77 L1526.79 1411.77 L1526.08 1411.77 L1525.37 1411.77 L1524.67 1411.77 L1523.96 1411.77 L1523.25 1411.77 L1522.54 1411.77 L1521.83 1411.77 L1521.13 1411.77 L1520.42 1411.77 L1519.71 1411.77 L1519 1411.77 L1518.3 1411.77 L1517.59 1411.77 L1516.88 1411.77 L1516.17 1411.77 L1515.46 1411.77 L1514.76 1411.77 L1514.05 1411.77 L1513.34 1411.77 L1512.63 1411.77 L1511.92 1411.77 L1511.22 1411.77 L1510.51 1411.77 L1509.8 1411.77 L1509.09 1411.77 L1508.39 1411.77 L1507.68 1411.77 L1506.97 1411.77 L1506.26 1411.77 L1505.55 1411.77 L1504.85 1411.77 L1504.14 1411.77 L1503.43 1411.77 L1502.72 1411.77 L1502.02 1411.77 L1501.31 1411.77 L1500.6 1411.77 L1499.89 1411.77 L1499.18 1411.77 L1498.48 1411.77 L1497.77 1411.77 L1497.06 1411.77 L1496.35 1411.77 L1495.65 1411.77 L1494.94 1411.77 L1494.23 1411.77 L1493.52 1411.77 L1492.81 1411.77 L1492.11 1411.77 L1491.4 1411.77 L1490.69 1411.77 L1489.98 1411.77 L1489.28 1411.77 L1488.57 1411.77 L1487.86 1411.77 L1487.15 1411.77 L1486.44 1411.77 L1485.74 1411.77 L1485.03 1411.77 L1484.32 1411.77 L1483.61 1411.77 L1482.91 1411.77 L1482.2 1411.77 L1481.49 1411.77 L1480.78 1411.77 L1480.07 1411.77 L1479.37 1411.77 L1478.66 1411.77 L1477.95 1411.77 L1477.24 1411.77 L1476.54 1411.77 L1475.83 1411.77 L1475.12 1411.77 L1474.41 1411.77 L1473.7 1411.77 L1473 1411.77 L1472.29 1411.77 L1471.58 1411.77 L1470.87 1411.77 L1470.17 1411.77 L1469.46 1411.77 L1468.75 1411.77 L1468.04 1411.77 L1467.33 1411.77 L1466.63 1411.77 L1465.92 1411.77 L1465.21 1411.77 L1464.5 1411.77 L1463.8 1411.77 L1463.09 1411.77 L1462.38 1411.77 L1461.67 1411.77 L1460.96 1411.77 L1460.26 1411.77 L1459.55 1411.77 L1458.84 1411.77 L1458.13 1411.77 L1457.43 1411.77 L1456.72 1411.77 L1456.01 1411.77 L1455.3 1411.77 L1454.59 1411.77 L1453.89 1411.77 L1453.18 1411.77 L1452.47 1411.77 L1451.76 1411.77 L1451.06 1411.77 L1450.35 1411.77 L1449.64 1411.77 L1448.93 1411.77 L1448.22 1411.77 L1447.52 1411.77 L1446.81 1411.77 L1446.1 1411.77 L1445.39 1411.77 L1444.69 1411.77 L1443.98 1411.77 L1443.27 1411.77 L1442.56 1411.77 L1441.85 1411.77 L1441.15 1411.77 L1440.44 1411.77 L1439.73 1411.77 L1439.02 1411.77 L1438.31 1411.77 L1437.61 1411.77 L1436.9 1411.77 L1436.19 1411.77 L1435.48 1411.77 L1434.78 1411.77 L1434.07 1411.77 L1433.36 1411.77 L1432.65 1411.77 L1431.94 1411.77 L1431.24 1411.77 L1430.53 1411.77 L1429.82 1411.77 L1429.11 1411.77 L1428.41 1411.77 L1427.7 1411.77 L1426.99 1411.77 L1426.28 1411.77 L1425.57 1411.77 L1424.87 1411.77 L1424.16 1411.77 L1423.45 1411.77 L1422.74 1411.77 L1422.04 1411.77 L1421.33 1411.77 L1420.62 1411.77 L1419.91 1411.77 L1419.2 1411.77 L1418.5 1411.77 L1417.79 1411.77 L1417.08 1411.77 L1416.37 1411.77 L1415.67 1411.77 L1414.96 1411.77 L1414.25 1411.77 L1413.54 1411.77 L1412.83 1411.77 L1412.13 1411.77 L1411.42 1411.77 L1410.71 1411.77 L1410 1411.77 L1409.3 1411.77 L1408.59 1411.77 L1407.88 1411.77 L1407.17 1411.77 L1406.46 1411.77 L1405.76 1411.77 L1405.05 1411.77 L1404.34 1411.77 L1403.63 1411.77 L1402.93 1411.77 L1402.22 1411.77 L1401.51 1411.77 L1400.8 1411.77 L1400.09 1411.77 L1399.39 1411.77 L1398.68 1411.77 L1397.97 1411.77 L1397.26 1411.77 L1396.56 1411.77 L1395.85 1411.77 L1395.14 1411.77 L1394.43 1411.77 L1393.72 1411.77 L1393.02 1411.77 L1392.31 1411.77 L1391.6 1411.77 L1390.89 1411.77 L1390.19 1411.77 L1389.48 1411.77 L1388.77 1411.77 L1388.06 1411.77 L1387.35 1411.77 L1386.65 1411.77 L1385.94 1411.77 L1385.23 1411.77 L1384.52 1411.77 L1383.82 1411.77 L1383.11 1411.77 L1382.4 1411.77 L1381.69 1411.77 L1380.98 1411.77 L1380.28 1411.77 L1379.57 1411.77 L1378.86 1411.77 L1378.15 1411.77 L1377.45 1411.77 L1376.74 1411.77 L1376.03 1411.77 L1375.32 1411.77 L1374.61 1411.77 L1373.91 1411.77 L1373.2 1411.77 L1372.49 1411.77 L1371.78 1411.77 L1371.08 1411.77 L1370.37 1411.77 L1369.66 1411.77 L1368.95 1411.77 L1368.24 1411.77 L1367.54 1411.77 L1366.83 1411.77 L1366.12 1411.77 L1365.41 1411.77 L1364.71 1411.77 L1364 1411.77 L1363.29 1411.77 L1362.58 1411.77 L1361.87 1411.77 L1361.17 1411.77 L1360.46 1411.77 L1359.75 1411.77 L1359.04 1411.77 L1358.33 1411.77 L1357.63 1411.77 L1356.92 1411.77 L1356.21 1411.77 L1355.5 1411.77 L1354.8 1411.77 L1354.09 1411.77 L1353.38 1411.77 L1352.67 1411.77 L1351.96 1411.77 L1351.26 1411.77 L1350.55 1411.77 L1349.84 1411.77 L1349.13 1411.77 L1348.43 1411.77 L1347.72 1411.77 L1347.01 1411.77 L1346.3 1411.77 L1345.59 1411.77 L1344.89 1411.77 L1344.18 1411.77 L1343.47 1411.77 L1342.76 1411.77 L1342.06 1411.77 L1341.35 1411.77 L1340.64 1411.77 L1339.93 1411.77 L1339.22 1411.77 L1338.52 1411.77 L1337.81 1411.77 L1337.1 1411.77 L1336.39 1411.77 L1335.69 1411.77 L1334.98 1411.77 L1334.27 1411.77 L1333.56 1411.77 L1332.85 1411.77 L1332.15 1411.77 L1331.44 1411.77 L1330.73 1411.77 L1330.02 1411.77 L1329.32 1411.77 L1328.61 1411.77 L1327.9 1411.77 L1327.19 1411.77 L1326.48 1411.77 L1325.78 1411.77 L1325.07 1411.77 L1324.36 1411.77 L1323.65 1411.77 L1322.95 1411.77 L1322.24 1411.77 L1321.53 1411.77 L1320.82 1411.77 L1320.11 1411.77 L1319.41 1411.77 L1318.7 1411.77 L1317.99 1411.77 L1317.28 1411.77 L1316.58 1411.77 L1315.87 1411.77 L1315.16 1411.77 L1314.45 1411.77 L1313.74 1411.77 L1313.04 1411.77 L1312.33 1411.77 L1311.62 1411.77 L1310.91 1411.77 L1310.21 1411.77 L1309.5 1411.77 L1308.79 1411.77 L1308.08 1411.77 L1307.37 1411.77 L1306.67 1411.77 L1305.96 1411.77 L1305.25 1411.77 L1304.54 1411.77 L1303.84 1411.77 L1303.13 1411.77 L1302.42 1411.77 L1301.71 1411.77 L1301 1411.77 L1300.3 1411.77 L1299.59 1411.77 L1298.88 1411.77 L1298.17 1411.77 L1297.47 1411.77 L1296.76 1411.77 L1296.05 1411.77 L1295.34 1411.77 L1294.63 1411.77 L1293.93 1411.77 L1293.22 1411.77 L1292.51 1411.77 L1291.8 1411.77 L1291.1 1411.77 L1290.39 1411.77 L1289.68 1411.77 L1288.97 1411.77 L1288.26 1411.77 L1287.56 1411.77 L1286.85 1411.77 L1286.14 1411.77 L1285.43 1411.77 L1284.72 1411.77 L1284.02 1411.77 L1283.31 1411.77 L1282.6 1411.77 L1281.89 1411.77 L1281.19 1411.77 L1280.48 1411.77 L1279.77 1411.77 L1279.06 1411.77 L1278.35 1411.77 L1277.65 1411.77 L1276.94 1411.77 L1276.23 1411.77 L1275.52 1411.77 L1274.82 1411.77 L1274.11 1411.77 L1273.4 1411.77 L1272.69 1411.77 L1271.98 1411.77 L1271.28 1411.77 L1270.57 1411.77 L1269.86 1411.77 L1269.15 1411.77 L1268.45 1411.77 L1267.74 1411.77 L1267.03 1411.77 L1266.32 1411.77 L1265.61 1411.77 L1264.91 1411.77 L1264.2 1411.77 L1263.49 1411.77 L1262.78 1411.77 L1262.08 1411.77 L1261.37 1411.77 L1260.66 1411.77 L1259.95 1411.77 L1259.24 1411.77 L1258.54 1411.77 L1257.83 1411.77 L1257.12 1411.77 L1256.41 1411.77 L1255.71 1411.77 L1255 1411.77 L1254.29 1411.77 L1253.58 1411.77 L1252.87 1411.77 L1252.17 1411.77 L1251.46 1411.77 L1250.75 1411.77 L1250.04 1411.77 L1249.34 1411.77 L1248.63 1411.77 L1247.92 1411.77 L1247.21 1411.77 L1246.5 1411.77 L1245.8 1411.77 L1245.09 1411.77 L1244.38 1411.77 L1243.67 1411.77 L1242.97 1411.77 L1242.26 1411.77 L1241.55 1411.77 L1240.84 1411.77 L1240.13 1411.77 L1239.43 1411.77 L1238.72 1411.77 L1238.01 1411.77 L1237.3 1411.77 L1236.6 1411.77 L1235.89 1411.77 L1235.18 1411.77 L1234.47 1411.77 L1233.76 1411.77 L1233.06 1411.77 L1232.35 1411.77 L1231.64 1411.77 L1230.93 1411.77 L1230.23 1411.77 L1229.52 1411.77 L1228.81 1411.77 L1228.1 1411.77 L1227.39 1411.77 L1226.69 1411.77 L1225.98 1411.77 L1225.27 1411.77 L1224.56 1411.77 L1223.86 1411.77 L1223.15 1411.77 L1222.44 1411.77 L1221.73 1411.77 L1221.02 1411.77 L1220.32 1411.77 L1219.61 1411.77 L1218.9 1411.77 L1218.19 1411.77 L1217.49 1411.77 L1216.78 1411.77 L1216.07 1411.77 L1215.36 1411.77 L1214.65 1411.77 L1213.95 1411.77 L1213.24 1411.77 L1212.53 1411.77 L1211.82 1411.77 L1211.12 1411.77 L1210.41 1411.77 L1209.7 1411.77 L1208.99 1411.77 L1208.28 1411.77 L1207.58 1411.77 L1206.87 1411.77 L1206.16 1411.77 L1205.45 1411.77 L1204.74 1411.77 L1204.04 1411.77 L1203.33 1411.77 L1202.62 1411.77 L1201.91 1411.77 L1201.21 1411.77 L1200.5 1411.77 L1199.79 1411.77 L1199.08 1411.77 L1198.37 1411.77 L1197.67 1411.77 L1196.96 1411.77 L1196.25 1411.77 L1195.54 1411.77 L1194.84 1411.77 L1194.13 1411.77 L1193.42 1411.77 L1192.71 1411.77 L1192 1411.77 L1191.3 1411.77 L1190.59 1411.77 L1189.88 1411.77 L1189.17 1411.77 L1188.47 1411.77 L1187.76 1411.77 L1187.05 1411.77 L1186.34 1411.77 L1185.63 1411.77 L1184.93 1411.77 L1184.22 1411.77 L1183.51 1411.77 L1182.8 1411.77 L1182.1 1411.77 L1181.39 1411.77 L1180.68 1411.77 L1179.97 1411.77 L1179.26 1411.77 L1178.56 1411.77 L1177.85 1411.77 L1177.14 1411.77 L1176.43 1411.77 L1175.73 1411.77 L1175.02 1411.77 L1174.31 1411.77 L1173.6 1411.77 L1172.89 1411.77 L1172.19 1411.77 L1171.48 1411.77 L1170.77 1411.77 L1170.06 1411.77 L1169.36 1411.77 L1168.65 1411.77 L1167.94 1411.77 L1167.23 1411.77 L1166.52 1411.77 L1165.82 1411.77 L1165.11 1411.77 L1164.4 1411.77 L1163.69 1411.77 L1162.99 1411.77 L1162.28 1411.77 L1161.57 1411.77 L1160.86 1411.77 L1160.15 1411.77 L1159.45 1411.77 L1158.74 1411.77 L1158.03 1411.77 L1157.32 1411.77 L1156.62 1411.77 L1155.91 1411.77 L1155.2 1411.77 L1154.49 1411.77 L1153.78 1411.77 L1153.08 1411.77 L1152.37 1411.77 L1151.66 1411.77 L1150.95 1411.77 L1150.25 1411.77 L1149.54 1411.77 L1148.83 1411.77 L1148.12 1411.77 L1147.41 1411.77 L1146.71 1411.77 L1146 1411.77 L1145.29 1411.77 L1144.58 1411.77 L1143.88 1411.77 L1143.17 1411.77 L1142.46 1411.77 L1141.75 1411.77 L1141.04 1411.77 L1140.34 1411.77 L1139.63 1411.77 L1138.92 1411.77 L1138.21 1411.77 L1137.51 1411.77 L1136.8 1411.77 L1136.09 1411.77 L1135.38 1411.77 L1134.67 1411.77 L1133.97 1411.77 L1133.26 1411.77 L1132.55 1411.77 L1131.84 1411.77 L1131.13 1411.77 L1130.43 1411.77 L1129.72 1411.77 L1129.01 1411.77 L1128.3 1411.77 L1127.6 1411.77 L1126.89 1411.77 L1126.18 1411.77 L1125.47 1411.77 L1124.76 1411.77 L1124.06 1411.77 L1123.35 1411.77 L1122.64 1411.77 L1121.93 1411.77 L1121.23 1411.77 L1120.52 1411.77 L1119.81 1411.77 L1119.1 1411.77 L1118.39 1411.77 L1117.69 1411.77 L1116.98 1411.77 L1116.27 1411.77 L1115.56 1411.77 L1114.86 1411.77 L1114.15 1411.77 L1113.44 1411.77 L1112.73 1411.77 L1112.02 1411.77 L1111.32 1411.77 L1110.61 1411.77 L1109.9 1411.77 L1109.19 1411.77 L1108.49 1411.77 L1107.78 1411.77 L1107.07 1411.77 L1106.36 1411.77 L1105.65 1411.77 L1104.95 1411.77 L1104.24 1411.77 L1103.53 1411.77 L1102.82 1411.77 L1102.12 1411.77 L1101.41 1411.77 L1100.7 1411.77 L1099.99 1411.77 L1099.28 1411.77 L1098.58 1411.77 L1097.87 1411.77 L1097.16 1411.77 L1096.45 1411.77 L1095.75 1411.77 L1095.04 1411.77 L1094.33 1411.77 L1093.62 1411.77 L1092.91 1411.77 L1092.21 1411.77 L1091.5 1411.77 L1090.79 1411.77 L1090.08 1411.77 L1089.38 1411.77 L1088.67 1411.77 L1087.96 1411.77 L1087.25 1411.77 L1086.54 1411.77 L1085.84 1411.77 L1085.13 1411.77 L1084.42 1411.77 L1083.71 1411.77 L1083.01 1411.77 L1082.3 1411.77 L1081.59 1411.77 L1080.88 1411.77 L1080.17 1411.77 L1079.47 1411.77 L1078.76 1411.77 L1078.05 1411.77 L1077.34 1411.77 L1076.64 1411.77 L1075.93 1411.77 L1075.22 1411.77 L1074.51 1411.77 L1073.8 1411.77 L1073.1 1411.77 L1072.39 1411.77 L1071.68 1411.77 L1070.97 1411.77 L1070.27 1411.77 L1069.56 1411.77 L1068.85 1411.77 L1068.14 1411.77 L1067.43 1411.77 L1066.73 1411.77 L1066.02 1411.77 L1065.31 1411.77 L1064.6 1411.77 L1063.9 1411.77 L1063.19 1411.77 L1062.48 1411.77 L1061.77 1411.77 L1061.06 1411.77 L1060.36 1411.77 L1059.65 1411.77 L1058.94 1411.77 L1058.23 1411.77 L1057.53 1411.77 L1056.82 1411.77 L1056.11 1411.77 L1055.4 1411.77 L1054.69 1411.77 L1053.99 1411.77 L1053.28 1411.77 L1052.57 1411.77 L1051.86 1411.77 L1051.15 1411.77 L1050.45 1411.77 L1049.74 1411.77 L1049.03 1411.77 L1048.32 1411.77 L1047.62 1411.77 L1046.91 1411.77 L1046.2 1411.77 L1045.49 1411.77 L1044.78 1411.77 L1044.08 1411.77 L1043.37 1411.77 L1042.66 1411.77 L1041.95 1411.77 L1041.25 1411.77 L1040.54 1411.77 L1039.83 1411.77 L1039.12 1411.77 L1038.41 1411.77 L1037.71 1411.77 L1037 1411.77 L1036.29 1411.77 L1035.58 1411.77 L1034.88 1411.77 L1034.17 1411.77 L1033.46 1411.77 L1032.75 1411.77 L1032.04 1411.77 L1031.34 1411.77 L1030.63 1411.77 L1029.92 1411.77 L1029.21 1411.77 L1028.51 1411.77 L1027.8 1411.77 L1027.09 1411.77 L1026.38 1411.77 L1025.67 1411.77 L1024.97 1411.77 L1024.26 1411.77 L1023.55 1411.77 L1022.84 1411.77 L1022.14 1411.77 L1021.43 1411.77 L1020.72 1411.77 L1020.01 1411.77 L1019.3 1411.77 L1018.6 1411.77 L1017.89 1411.77 L1017.18 1411.77 L1016.47 1411.77 L1015.77 1411.77 L1015.06 1411.77 L1014.35 1411.77 L1013.64 1411.77 L1012.93 1411.77 L1012.23 1411.77 L1011.52 1411.77 L1010.81 1411.77 L1010.1 1411.77 L1009.4 1411.77 L1008.69 1411.77 L1007.98 1411.77 L1007.27 1411.77 L1006.56 1411.77 L1005.86 1411.77 L1005.15 1411.77 L1004.44 1411.77 L1003.73 1411.77 L1003.03 1411.77 L1002.32 1411.77 L1001.61 1411.77 L1000.9 1411.77 L1000.19 1411.77 L999.486 1411.77 L998.779 1411.77 L998.071 1411.77 L997.363 1411.77 L996.655 1411.77 L995.947 1411.77 L995.24 1411.77 L994.532 1411.77 L993.824 1411.77 L993.116 1411.77 L992.409 1411.77 L991.701 1411.77 L990.993 1411.77 L990.285 1411.77 L989.577 1411.77 L988.87 1411.77 L988.162 1411.77 L987.454 1411.77 L986.746 1411.77 L986.038 1411.77 L985.331 1411.77 L984.623 1411.77 L983.915 1411.77 L983.207 1411.77 L982.499 1411.77 L981.792 1411.77 L981.084 1411.77 L980.376 1411.77 L979.668 1411.77 L978.961 1411.77 L978.253 1411.77 L977.545 1411.77 L976.837 1411.77 L976.129 1411.77 L975.422 1411.77 L974.714 1411.77 L974.006 1411.77 L973.298 1411.77 L972.59 1411.77 L971.883 1411.77 L971.175 1411.77 L970.467 1411.77 L969.759 1411.77 L969.051 1411.77 L968.344 1411.77 L967.636 1411.77 L966.928 1411.77 L966.22 1411.77 L965.513 1411.77 L964.805 1411.77 L964.097 1411.77 L963.389 1411.77 L962.681 1411.77 L961.974 1411.77 L961.266 1411.77 L960.558 1411.77 L959.85 1411.77 L959.142 1411.77 L958.435 1411.77 L957.727 1411.77 L957.019 1411.77 L956.311 1411.77 L955.604 1411.77 L954.896 1411.77 L954.188 1411.77 L953.48 1411.77 L952.772 1411.77 L952.065 1411.77 L951.357 1411.77 L950.649 1411.77 L949.941 1411.77 L949.233 1411.77 L948.526 1411.77 L947.818 1411.77 L947.11 1411.77 L946.402 1411.77 L945.694 1411.77 L944.987 1411.77 L944.279 1411.77 L943.571 1411.77 L942.863 1411.77 L942.156 1411.77 L941.448 1411.77 L940.74 1411.77 L940.032 1411.77 L939.324 1411.77 L938.617 1411.77 L937.909 1411.77 L937.201 1411.77 L936.493 1411.77 L935.785 1411.77 L935.078 1411.77 L934.37 1411.77 L933.662 1411.77 L932.954 1411.77 L932.247 1411.77 L931.539 1411.77 L930.831 1411.77 L930.123 1411.77 L929.415 1411.77 L928.708 1411.77 L928 1411.77 L927.292 1411.77 L926.584 1411.77 L925.876 1411.77 L925.169 1411.77 L924.461 1411.77 L923.753 1411.77 L923.045 1411.77 L922.337 1411.77 L921.63 1411.77 L920.922 1411.77 L920.214 1411.77 L919.506 1411.77 L918.799 1411.77 L918.091 1411.77 L917.383 1411.77 L916.675 1411.77 L915.967 1411.77 L915.26 1411.77 L914.552 1411.77 L913.844 1411.77 L913.136 1411.77 L912.428 1411.77 L911.721 1411.77 L911.013 1411.77 L910.305 1411.77 L909.597 1411.77 L908.89 1411.77 L908.182 1411.77 L907.474 1411.77 L906.766 1411.77 L906.058 1411.77 L905.351 1411.77 L904.643 1411.77 L903.935 1411.77 L903.227 1411.77 L902.519 1411.77 L901.812 1411.77 L901.104 1411.77 L900.396 1411.77 L899.688 1411.77 L898.98 1411.77 L898.273 1411.77 L897.565 1411.77 L896.857 1411.77 L896.149 1411.77 L895.442 1411.77 L894.734 1411.77 L894.026 1411.77 L893.318 1411.77 L892.61 1411.77 L891.903 1411.77 L891.195 1411.77 L890.487 1411.77 L889.779 1411.77 L889.071 1411.77 L888.364 1411.77 L887.656 1411.77 L886.948 1411.77 L886.24 1411.77 L885.533 1411.77 L884.825 1411.77 L884.117 1411.77 L883.409 1411.77 L882.701 1411.77 L881.994 1411.77 L881.286 1411.77 L880.578 1411.77 L879.87 1411.77 L879.162 1411.77 L878.455 1411.77 L877.747 1411.77 L877.039 1411.77 L876.331 1411.77 L875.623 1411.77 L874.916 1411.77 L874.208 1411.77  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"874.208,1411.86 874.916,1411.86 875.623,1411.86 876.331,1411.86 877.039,1411.86 877.747,1411.86 878.455,1411.86 879.162,1411.86 879.87,1411.86 880.578,1411.86 881.286,1411.86 881.994,1411.86 882.701,1411.86 883.409,1411.86 884.117,1411.86 884.825,1411.86 885.533,1411.86 886.24,1411.86 886.948,1411.86 887.656,1411.86 888.364,1411.86 889.071,1411.86 889.779,1411.86 890.487,1411.86 891.195,1411.86 891.903,1411.86 892.61,1411.86 893.318,1411.86 894.026,1411.86 894.734,1411.86 895.442,1411.86 896.149,1411.86 896.857,1411.86 897.565,1411.86 898.273,1411.86 898.98,1411.86 899.688,1411.86 900.396,1411.86 901.104,1411.86 901.812,1411.86 902.519,1411.86 903.227,1411.86 903.935,1411.86 904.643,1411.86 905.351,1411.86 906.058,1411.86 906.766,1411.86 907.474,1411.86 908.182,1411.86 908.89,1411.86 909.597,1411.86 910.305,1411.86 911.013,1411.86 911.721,1411.86 912.428,1411.86 913.136,1411.86 913.844,1411.86 914.552,1411.86 915.26,1411.86 915.967,1411.86 916.675,1411.86 917.383,1411.86 918.091,1411.86 918.799,1411.86 919.506,1411.86 920.214,1411.86 920.922,1411.86 921.63,1411.86 922.337,1411.86 923.045,1411.86 923.753,1411.86 924.461,1411.86 925.169,1411.86 925.876,1411.86 926.584,1411.86 927.292,1411.86 928,1411.86 928.708,1411.86 929.415,1411.86 930.123,1411.86 930.831,1411.86 931.539,1411.86 932.247,1411.86 932.954,1411.86 933.662,1411.86 934.37,1411.86 935.078,1411.86 935.785,1411.86 936.493,1411.86 937.201,1411.86 937.909,1411.86 938.617,1411.86 939.324,1411.86 940.032,1411.86 940.74,1411.86 941.448,1411.86 942.156,1411.86 942.863,1411.86 943.571,1411.86 944.279,1411.86 944.987,1411.86 945.694,1411.86 946.402,1411.86 947.11,1411.86 947.818,1411.86 948.526,1411.86 949.233,1411.86 949.941,1411.86 950.649,1411.86 951.357,1411.86 952.065,1411.86 952.772,1411.86 953.48,1411.86 954.188,1411.86 954.896,1411.86 955.604,1411.86 956.311,1411.86 957.019,1411.86 957.727,1411.86 958.435,1411.86 959.142,1411.86 959.85,1411.86 960.558,1411.86 961.266,1411.86 961.974,1411.86 962.681,1411.86 963.389,1411.86 964.097,1411.86 964.805,1411.86 965.513,1411.86 966.22,1411.86 966.928,1411.86 967.636,1411.86 968.344,1411.86 969.051,1411.86 969.759,1411.86 970.467,1411.86 971.175,1411.86 971.883,1411.86 972.59,1411.86 973.298,1411.86 974.006,1411.86 974.714,1411.86 975.422,1411.86 976.129,1411.86 976.837,1411.86 977.545,1411.86 978.253,1411.86 978.961,1411.86 979.668,1411.86 980.376,1411.86 981.084,1411.86 981.792,1411.86 982.499,1411.86 983.207,1411.86 983.915,1411.86 984.623,1411.86 985.331,1411.86 986.038,1411.86 986.746,1411.86 987.454,1411.86 988.162,1411.86 988.87,1411.86 989.577,1411.86 990.285,1411.86 990.993,1411.86 991.701,1411.86 992.409,1411.86 993.116,1411.86 993.824,1411.86 994.532,1411.86 995.24,1411.86 995.947,1411.86 996.655,1411.86 997.363,1411.86 998.071,1411.86 998.779,1411.86 999.486,1411.86 1000.19,1411.86 1000.9,1411.86 1001.61,1411.86 1002.32,1411.86 1003.03,1411.86 1003.73,1411.86 1004.44,1411.86 1005.15,1411.86 1005.86,1411.86 1006.56,1411.86 1007.27,1411.86 1007.98,1411.86 1008.69,1411.86 1009.4,1411.86 1010.1,1411.86 1010.81,1411.86 1011.52,1411.86 1012.23,1411.86 1012.93,1411.86 1013.64,1411.86 1014.35,1411.86 1015.06,1411.86 1015.77,1411.86 1016.47,1411.86 1017.18,1411.86 1017.89,1411.86 1018.6,1411.86 1019.3,1411.86 1020.01,1411.86 1020.72,1411.86 1021.43,1411.86 1022.14,1411.86 1022.84,1411.86 1023.55,1411.86 1024.26,1411.86 1024.97,1411.86 1025.67,1411.86 1026.38,1411.86 1027.09,1411.86 1027.8,1411.86 1028.51,1411.86 1029.21,1411.86 1029.92,1411.86 1030.63,1411.86 1031.34,1411.86 1032.04,1411.86 1032.75,1411.86 1033.46,1411.86 1034.17,1411.86 1034.88,1411.86 1035.58,1411.86 1036.29,1411.86 1037,1411.86 1037.71,1411.86 1038.41,1411.86 1039.12,1411.86 1039.83,1411.86 1040.54,1411.86 1041.25,1411.86 1041.95,1411.86 1042.66,1411.86 1043.37,1411.86 1044.08,1411.86 1044.78,1411.86 1045.49,1411.86 1046.2,1411.86 1046.91,1411.86 1047.62,1411.86 1048.32,1411.86 1049.03,1411.86 1049.74,1411.86 1050.45,1411.86 1051.15,1411.86 1051.86,1411.86 1052.57,1411.86 1053.28,1411.86 1053.99,1411.86 1054.69,1411.86 1055.4,1411.86 1056.11,1411.86 1056.82,1411.86 1057.53,1411.86 1058.23,1411.86 1058.94,1411.86 1059.65,1411.86 1060.36,1411.86 1061.06,1411.86 1061.77,1411.86 1062.48,1411.86 1063.19,1411.86 1063.9,1411.86 1064.6,1411.86 1065.31,1411.86 1066.02,1411.86 1066.73,1411.86 1067.43,1411.86 1068.14,1411.86 1068.85,1411.86 1069.56,1411.86 1070.27,1411.86 1070.97,1411.86 1071.68,1411.86 1072.39,1411.86 1073.1,1411.86 1073.8,1411.86 1074.51,1411.86 1075.22,1411.86 1075.93,1411.86 1076.64,1411.86 1077.34,1411.86 1078.05,1411.86 1078.76,1411.86 1079.47,1411.86 1080.17,1411.86 1080.88,1411.86 1081.59,1411.86 1082.3,1411.86 1083.01,1411.86 1083.71,1411.86 1084.42,1411.86 1085.13,1411.86 1085.84,1411.86 1086.54,1411.86 1087.25,1411.86 1087.96,1411.86 1088.67,1411.86 1089.38,1411.86 1090.08,1411.86 1090.79,1411.86 1091.5,1411.86 1092.21,1411.86 1092.91,1411.86 1093.62,1411.86 1094.33,1411.86 1095.04,1411.86 1095.75,1411.86 1096.45,1411.86 1097.16,1411.86 1097.87,1411.86 1098.58,1411.86 1099.28,1411.86 1099.99,1411.86 1100.7,1411.86 1101.41,1411.86 1102.12,1411.86 1102.82,1411.86 1103.53,1411.86 1104.24,1411.86 1104.95,1411.86 1105.65,1411.86 1106.36,1411.86 1107.07,1411.86 1107.78,1411.86 1108.49,1411.86 1109.19,1411.86 1109.9,1411.86 1110.61,1411.86 1111.32,1411.86 1112.02,1411.86 1112.73,1411.86 1113.44,1411.86 1114.15,1411.86 1114.86,1411.86 1115.56,1411.86 1116.27,1411.86 1116.98,1411.86 1117.69,1411.86 1118.39,1411.86 1119.1,1411.86 1119.81,1411.86 1120.52,1411.86 1121.23,1411.86 1121.93,1411.86 1122.64,1411.86 1123.35,1411.86 1124.06,1411.86 1124.76,1411.86 1125.47,1411.86 1126.18,1411.86 1126.89,1411.86 1127.6,1411.86 1128.3,1411.86 1129.01,1411.86 1129.72,1411.86 1130.43,1411.86 1131.13,1411.86 1131.84,1411.86 1132.55,1411.86 1133.26,1411.86 1133.97,1411.86 1134.67,1411.86 1135.38,1411.86 1136.09,1411.86 1136.8,1411.86 1137.51,1411.86 1138.21,1411.86 1138.92,1411.86 1139.63,1411.86 1140.34,1411.86 1141.04,1411.86 1141.75,1411.86 1142.46,1411.86 1143.17,1411.86 1143.88,1411.86 1144.58,1411.86 1145.29,1411.86 1146,1411.86 1146.71,1411.86 1147.41,1411.86 1148.12,1411.86 1148.83,1411.86 1149.54,1411.86 1150.25,1411.86 1150.95,1411.86 1151.66,1411.86 1152.37,1411.86 1153.08,1411.86 1153.78,1411.86 1154.49,1411.86 1155.2,1411.86 1155.91,1411.86 1156.62,1411.86 1157.32,1411.86 1158.03,1411.86 1158.74,1411.86 1159.45,1411.86 1160.15,1411.86 1160.86,1411.86 1161.57,1411.86 1162.28,1411.86 1162.99,1411.86 1163.69,1411.86 1164.4,1411.86 1165.11,1411.86 1165.82,1411.86 1166.52,1411.86 1167.23,1411.86 1167.94,1411.86 1168.65,1411.86 1169.36,1411.86 1170.06,1411.86 1170.77,1411.86 1171.48,1411.86 1172.19,1411.86 1172.89,1411.86 1173.6,1411.86 1174.31,1411.86 1175.02,1411.86 1175.73,1411.86 1176.43,1411.86 1177.14,1411.86 1177.85,1411.86 1178.56,1411.86 1179.26,1411.86 1179.97,1411.86 1180.68,1411.86 1181.39,1411.86 1182.1,1411.86 1182.8,1411.86 1183.51,1411.86 1184.22,1411.86 1184.93,1411.86 1185.63,1411.86 1186.34,1411.86 1187.05,1411.86 1187.76,1411.86 1188.47,1411.86 1189.17,1411.86 1189.88,1411.86 1190.59,1411.86 1191.3,1411.86 1192,1411.86 1192.71,1411.86 1193.42,1411.86 1194.13,1411.86 1194.84,1411.86 1195.54,1411.86 1196.25,1411.86 1196.96,1411.86 1197.67,1411.86 1198.37,1411.86 1199.08,1411.86 1199.79,1411.86 1200.5,1411.86 1201.21,1411.86 1201.91,1411.86 1202.62,1411.86 1203.33,1411.86 1204.04,1411.86 1204.74,1411.86 1205.45,1411.86 1206.16,1411.86 1206.87,1411.86 1207.58,1411.86 1208.28,1411.86 1208.99,1411.86 1209.7,1411.86 1210.41,1411.86 1211.12,1411.86 1211.82,1411.86 1212.53,1411.86 1213.24,1411.86 1213.95,1411.86 1214.65,1411.86 1215.36,1411.86 1216.07,1411.86 1216.78,1411.86 1217.49,1411.86 1218.19,1411.86 1218.9,1411.86 1219.61,1411.86 1220.32,1411.86 1221.02,1411.86 1221.73,1411.86 1222.44,1411.86 1223.15,1411.86 1223.86,1411.86 1224.56,1411.86 1225.27,1411.86 1225.98,1411.86 1226.69,1411.86 1227.39,1411.86 1228.1,1411.86 1228.81,1411.86 1229.52,1411.86 1230.23,1411.86 1230.93,1411.86 1231.64,1411.86 1232.35,1411.86 1233.06,1411.86 1233.76,1411.86 1234.47,1411.86 1235.18,1411.86 1235.89,1411.86 1236.6,1411.86 1237.3,1411.86 1238.01,1411.86 1238.72,1411.86 1239.43,1411.86 1240.13,1411.86 1240.84,1411.86 1241.55,1411.86 1242.26,1411.86 1242.97,1411.86 1243.67,1411.86 1244.38,1411.86 1245.09,1411.86 1245.8,1411.86 1246.5,1411.86 1247.21,1411.86 1247.92,1411.86 1248.63,1411.86 1249.34,1411.86 1250.04,1411.86 1250.75,1411.86 1251.46,1411.86 1252.17,1411.86 1252.87,1411.86 1253.58,1411.86 1254.29,1411.86 1255,1411.86 1255.71,1411.86 1256.41,1411.86 1257.12,1411.86 1257.83,1411.86 1258.54,1411.86 1259.24,1411.86 1259.95,1411.86 1260.66,1411.86 1261.37,1411.86 1262.08,1411.86 1262.78,1411.86 1263.49,1411.86 1264.2,1411.86 1264.91,1411.86 1265.61,1411.86 1266.32,1411.86 1267.03,1411.86 1267.74,1411.86 1268.45,1411.86 1269.15,1411.86 1269.86,1411.86 1270.57,1411.86 1271.28,1411.86 1271.98,1411.86 1272.69,1411.86 1273.4,1411.86 1274.11,1411.86 1274.82,1411.86 1275.52,1411.86 1276.23,1411.86 1276.94,1411.86 1277.65,1411.86 1278.35,1411.86 1279.06,1411.86 1279.77,1411.86 1280.48,1411.86 1281.19,1411.86 1281.89,1411.86 1282.6,1411.86 1283.31,1411.86 1284.02,1411.86 1284.72,1411.86 1285.43,1411.86 1286.14,1411.86 1286.85,1411.86 1287.56,1411.86 1288.26,1411.86 1288.97,1411.86 1289.68,1411.86 1290.39,1411.86 1291.1,1411.86 1291.8,1411.86 1292.51,1411.86 1293.22,1411.86 1293.93,1411.86 1294.63,1411.86 1295.34,1411.86 1296.05,1411.86 1296.76,1411.86 1297.47,1411.86 1298.17,1411.86 1298.88,1411.86 1299.59,1411.86 1300.3,1411.86 1301,1411.86 1301.71,1411.86 1302.42,1411.86 1303.13,1411.86 1303.84,1411.86 1304.54,1411.86 1305.25,1411.86 1305.96,1411.86 1306.67,1411.86 1307.37,1411.86 1308.08,1411.86 1308.79,1411.86 1309.5,1411.86 1310.21,1411.86 1310.91,1411.86 1311.62,1411.86 1312.33,1411.86 1313.04,1411.86 1313.74,1411.86 1314.45,1411.86 1315.16,1411.86 1315.87,1411.86 1316.58,1411.86 1317.28,1411.86 1317.99,1411.86 1318.7,1411.86 1319.41,1411.86 1320.11,1411.86 1320.82,1411.86 1321.53,1411.86 1322.24,1411.86 1322.95,1411.86 1323.65,1411.86 1324.36,1411.86 1325.07,1411.86 1325.78,1411.86 1326.48,1411.86 1327.19,1411.86 1327.9,1411.86 1328.61,1411.86 1329.32,1411.86 1330.02,1411.86 1330.73,1411.86 1331.44,1411.86 1332.15,1411.86 1332.85,1411.86 1333.56,1411.86 1334.27,1411.86 1334.98,1411.86 1335.69,1411.86 1336.39,1411.86 1337.1,1411.86 1337.81,1411.86 1338.52,1411.86 1339.22,1411.86 1339.93,1411.86 1340.64,1411.86 1341.35,1411.86 1342.06,1411.86 1342.76,1411.86 1343.47,1411.86 1344.18,1411.86 1344.89,1411.86 1345.59,1411.86 1346.3,1411.86 1347.01,1411.86 1347.72,1411.86 1348.43,1411.86 1349.13,1411.86 1349.84,1411.86 1350.55,1411.86 1351.26,1411.86 1351.96,1411.86 1352.67,1411.86 1353.38,1411.86 1354.09,1411.86 1354.8,1411.86 1355.5,1411.86 1356.21,1411.86 1356.92,1411.86 1357.63,1411.86 1358.33,1411.86 1359.04,1411.86 1359.75,1411.86 1360.46,1411.86 1361.17,1411.86 1361.87,1411.86 1362.58,1411.86 1363.29,1411.86 1364,1411.86 1364.71,1411.86 1365.41,1411.86 1366.12,1411.86 1366.83,1411.86 1367.54,1411.86 1368.24,1411.86 1368.95,1411.86 1369.66,1411.86 1370.37,1411.86 1371.08,1411.86 1371.78,1411.86 1372.49,1411.86 1373.2,1411.86 1373.91,1411.86 1374.61,1411.86 1375.32,1411.86 1376.03,1411.86 1376.74,1411.86 1377.45,1411.86 1378.15,1411.86 1378.86,1411.86 1379.57,1411.86 1380.28,1411.86 1380.98,1411.86 1381.69,1411.86 1382.4,1411.86 1383.11,1411.86 1383.82,1411.86 1384.52,1411.86 1385.23,1411.86 1385.94,1411.86 1386.65,1411.86 1387.35,1411.86 1388.06,1411.86 1388.77,1411.86 1389.48,1411.86 1390.19,1411.86 1390.89,1411.86 1391.6,1411.86 1392.31,1411.86 1393.02,1411.86 1393.72,1411.86 1394.43,1411.86 1395.14,1411.86 1395.85,1411.86 1396.56,1411.86 1397.26,1411.86 1397.97,1411.86 1398.68,1411.86 1399.39,1411.86 1400.09,1411.86 1400.8,1411.86 1401.51,1411.86 1402.22,1411.86 1402.93,1411.86 1403.63,1411.86 1404.34,1411.86 1405.05,1411.86 1405.76,1411.86 1406.46,1411.86 1407.17,1411.86 1407.88,1411.86 1408.59,1411.86 1409.3,1411.86 1410,1411.86 1410.71,1411.86 1411.42,1411.86 1412.13,1411.86 1412.83,1411.86 1413.54,1411.86 1414.25,1411.86 1414.96,1411.86 1415.67,1411.86 1416.37,1411.86 1417.08,1411.86 1417.79,1411.86 1418.5,1411.86 1419.2,1411.86 1419.91,1411.86 1420.62,1411.86 1421.33,1411.86 1422.04,1411.86 1422.74,1411.86 1423.45,1411.86 1424.16,1411.86 1424.87,1411.86 1425.57,1411.86 1426.28,1411.86 1426.99,1411.86 1427.7,1411.86 1428.41,1411.86 1429.11,1411.86 1429.82,1411.86 1430.53,1411.86 1431.24,1411.86 1431.94,1411.86 1432.65,1411.86 1433.36,1411.86 1434.07,1411.86 1434.78,1411.86 1435.48,1411.86 1436.19,1411.86 1436.9,1411.86 1437.61,1411.86 1438.31,1411.86 1439.02,1411.86 1439.73,1411.86 1440.44,1411.86 1441.15,1411.86 1441.85,1411.86 1442.56,1411.86 1443.27,1411.86 1443.98,1411.86 1444.69,1411.86 1445.39,1411.86 1446.1,1411.86 1446.81,1411.86 1447.52,1411.86 1448.22,1411.86 1448.93,1411.86 1449.64,1411.86 1450.35,1411.86 1451.06,1411.86 1451.76,1411.86 1452.47,1411.86 1453.18,1411.86 1453.89,1411.86 1454.59,1411.86 1455.3,1411.86 1456.01,1411.86 1456.72,1411.86 1457.43,1411.86 1458.13,1411.86 1458.84,1411.86 1459.55,1411.86 1460.26,1411.86 1460.96,1411.86 1461.67,1411.86 1462.38,1411.86 1463.09,1411.86 1463.8,1411.86 1464.5,1411.86 1465.21,1411.86 1465.92,1411.86 1466.63,1411.86 1467.33,1411.86 1468.04,1411.86 1468.75,1411.86 1469.46,1411.86 1470.17,1411.86 1470.87,1411.86 1471.58,1411.86 1472.29,1411.86 1473,1411.86 1473.7,1411.86 1474.41,1411.86 1475.12,1411.86 1475.83,1411.86 1476.54,1411.86 1477.24,1411.86 1477.95,1411.86 1478.66,1411.86 1479.37,1411.86 1480.07,1411.86 1480.78,1411.86 1481.49,1411.86 1482.2,1411.86 1482.91,1411.86 1483.61,1411.86 1484.32,1411.86 1485.03,1411.86 1485.74,1411.86 1486.44,1411.86 1487.15,1411.86 1487.86,1411.86 1488.57,1411.86 1489.28,1411.86 1489.98,1411.86 1490.69,1411.86 1491.4,1411.86 1492.11,1411.86 1492.81,1411.86 1493.52,1411.86 1494.23,1411.86 1494.94,1411.86 1495.65,1411.86 1496.35,1411.86 1497.06,1411.86 1497.77,1411.86 1498.48,1411.86 1499.18,1411.86 1499.89,1411.86 1500.6,1411.86 1501.31,1411.86 1502.02,1411.86 1502.72,1411.86 1503.43,1411.86 1504.14,1411.86 1504.85,1411.86 1505.55,1411.86 1506.26,1411.86 1506.97,1411.86 1507.68,1411.86 1508.39,1411.86 1509.09,1411.86 1509.8,1411.86 1510.51,1411.86 1511.22,1411.86 1511.92,1411.86 1512.63,1411.86 1513.34,1411.86 1514.05,1411.86 1514.76,1411.86 1515.46,1411.86 1516.17,1411.86 1516.88,1411.86 1517.59,1411.86 1518.3,1411.86 1519,1411.86 1519.71,1411.86 1520.42,1411.86 1521.13,1411.86 1521.83,1411.86 1522.54,1411.86 1523.25,1411.86 1523.96,1411.86 1524.67,1411.86 1525.37,1411.86 1526.08,1411.86 1526.79,1411.86 1527.5,1411.86 1528.2,1411.86 1528.91,1411.86 1529.62,1411.86 1530.33,1411.86 1531.04,1411.86 1531.74,1411.86 1532.45,1411.86 1533.16,1411.86 1533.87,1411.86 1534.57,1411.86 1535.28,1411.86 1535.99,1411.86 1536.7,1411.86 1537.41,1411.86 1538.11,1411.86 1538.82,1411.86 1539.53,1411.86 1540.24,1411.86 1540.94,1411.86 1541.65,1411.86 1542.36,1411.86 1543.07,1411.86 1543.78,1411.86 1544.48,1411.86 1545.19,1411.86 1545.9,1411.86 1546.61,1411.86 1547.31,1411.86 1548.02,1411.86 1548.73,1411.86 1549.44,1411.86 1550.15,1411.86 1550.85,1411.86 1551.56,1411.86 1552.27,1411.86 1552.98,1411.86 1553.68,1411.86 1554.39,1411.86 1555.1,1411.86 1555.81,1411.86 1556.52,1411.86 1557.22,1411.86 1557.93,1411.86 1558.64,1411.86 1559.35,1411.86 1560.05,1411.86 1560.76,1411.86 1561.47,1411.86 1562.18,1411.86 1562.89,1411.86 1563.59,1411.86 1564.3,1411.86 1565.01,1411.86 1565.72,1411.86 1566.42,1411.86 1567.13,1411.86 1567.84,1411.86 1568.55,1411.86 1569.26,1411.86 1569.96,1411.86 1570.67,1411.86 1571.38,1411.86 1572.09,1411.86 1572.79,1411.86 1573.5,1411.86 1574.21,1411.86 1574.92,1411.86 1575.63,1411.86 1576.33,1411.86 1577.04,1411.86 1577.75,1411.86 1578.46,1411.86 1579.16,1411.86 1579.87,1411.86 1580.58,1411.86 1581.29,1411.86 1582,1411.86 1582.7,1411.86 1583.41,1411.86 1584.12,1411.86 1584.83,1411.86 1585.53,1411.86 1586.24,1411.86 1586.95,1411.86 1587.66,1411.86 1588.37,1411.86 1589.07,1411.86 1589.78,1411.86 1590.49,1411.86 1591.2,1411.86 1591.9,1411.86 1592.61,1411.86 1593.32,1411.86 1594.03,1411.86 1594.74,1411.86 1595.44,1411.86 1596.15,1411.86 1596.86,1411.86 1597.57,1411.86 1598.28,1411.86 1598.98,1411.86 1599.69,1411.86 1600.4,1411.86 1601.11,1411.86 1601.81,1411.86 1602.52,1411.86 1603.23,1411.86 1603.94,1411.86 1604.65,1411.86 1605.35,1411.86 1606.06,1411.86 1606.77,1411.86 1607.48,1411.86 1608.18,1411.86 1608.89,1411.86 1609.6,1411.86 1610.31,1411.86 1611.02,1411.86 1611.72,1411.86 1612.43,1411.86 1613.14,1411.86 1613.85,1411.86 1614.55,1411.86 1615.26,1411.86 1615.97,1411.86 1616.68,1411.86 1617.39,1411.86 1618.09,1411.86 1618.8,1411.86 1619.51,1411.86 1620.22,1411.86 1620.92,1411.86 1621.63,1411.86 1622.34,1411.86 1623.05,1411.86 1623.76,1411.86 1624.46,1411.86 1625.17,1411.86 1625.88,1411.86 1626.59,1411.86 1627.29,1411.86 1628,1411.86 1628.71,1411.86 1629.42,1411.86 1630.13,1411.86 1630.83,1411.86 1631.54,1411.86 1632.25,1411.86 1632.96,1411.86 1633.66,1411.86 1634.37,1411.86 1635.08,1411.86 1635.79,1411.86 1636.5,1411.86 1637.2,1411.86 1637.91,1411.86 1638.62,1411.86 1639.33,1411.86 1640.03,1411.86 1640.74,1411.86 1641.45,1411.86 1642.16,1411.86 1642.87,1411.86 1643.57,1411.86 1644.28,1411.86 1644.99,1411.86 1645.7,1411.86 1646.4,1411.86 1647.11,1411.86 1647.82,1411.86 1648.53,1411.86 1649.24,1411.86 1649.94,1411.86 1650.65,1411.86 1651.36,1411.86 1652.07,1411.86 1652.77,1411.86 1653.48,1411.86 1654.19,1411.86 1654.9,1411.86 1655.61,1411.86 1656.31,1411.86 1657.02,1411.86 1657.73,1411.86 1658.44,1411.86 1659.14,1411.86 1659.85,1411.86 1660.56,1411.86 1661.27,1411.86 1661.98,1411.86 1662.68,1411.86 1663.39,1411.86 1664.1,1411.86 1664.81,1411.86 1665.51,1411.86 1666.22,1411.86 1666.93,1411.86 1667.64,1411.86 1668.35,1411.86 1669.05,1411.86 1669.76,1411.86 1670.47,1411.86 1671.18,1411.86 1671.89,1411.86 1672.59,1411.86 1673.3,1411.86 1674.01,1411.86 1674.72,1411.86 1675.42,1411.86 1676.13,1411.86 1676.84,1411.86 1677.55,1411.86 1678.26,1411.86 1678.96,1411.86 1679.67,1411.86 1680.38,1411.86 1681.09,1411.86 1681.79,1411.86 1682.5,1411.86 1683.21,1411.86 1683.92,1411.86 1684.63,1411.86 1685.33,1411.86 1686.04,1411.86 1686.75,1411.86 1687.46,1411.86 1688.16,1411.86 1688.87,1411.86 1689.58,1411.86 1690.29,1411.86 1691,1411.86 1691.7,1411.86 1692.41,1411.86 1693.12,1411.86 1693.83,1411.86 1694.53,1411.86 1695.24,1411.86 1695.95,1411.86 1696.66,1411.86 1697.37,1411.86 1698.07,1411.86 1698.78,1411.86 1699.49,1411.86 1700.2,1411.86 1700.9,1411.86 1701.61,1411.86 1702.32,1411.86 1703.03,1411.86 1703.74,1411.86 1704.44,1411.86 1705.15,1411.86 1705.86,1411.86 1706.57,1411.86 1707.27,1411.86 1707.98,1411.86 1708.69,1411.86 1709.4,1411.86 1710.11,1411.86 1710.81,1411.86 1711.52,1411.86 1712.23,1411.86 1712.94,1411.86 1713.64,1411.86 1714.35,1411.86 1715.06,1411.86 1715.77,1411.86 1716.48,1411.86 1717.18,1411.86 1717.89,1411.86 1718.6,1411.86 1719.31,1411.86 1720.01,1411.86 1720.72,1411.86 1721.43,1411.86 1722.14,1411.86 1722.85,1411.86 1723.55,1411.86 1724.26,1411.86 1724.97,1411.86 1725.68,1411.86 1726.38,1411.86 1727.09,1411.86 1727.8,1411.86 1728.51,1411.86 1729.22,1411.86 1729.92,1411.86 1730.63,1411.86 1731.34,1411.86 1732.05,1411.86 1732.75,1411.86 1733.46,1411.86 1734.17,1411.86 1734.88,1411.86 1735.59,1411.86 1736.29,1411.86 1737,1411.86 1737.71,1411.86 1738.42,1411.86 1739.12,1411.86 1739.83,1411.86 1740.54,1411.86 1741.25,1411.86 1741.96,1411.86 1742.66,1411.86 1743.37,1411.86 1744.08,1411.86 1744.79,1411.86 1745.49,1411.86 1746.2,1411.86 1746.91,1411.86 1747.62,1411.86 1748.33,1411.86 1749.03,1411.86 1749.74,1411.86 1750.45,1411.86 1751.16,1411.86 1751.87,1411.86 1752.57,1411.86 1753.28,1411.86 1753.99,1411.86 1754.7,1411.86 1755.4,1411.86 1756.11,1411.86 1756.82,1411.86 1757.53,1411.86 1758.24,1411.86 1758.94,1411.86 1759.65,1411.86 1760.36,1411.86 1761.07,1411.86 1761.77,1411.86 1762.48,1411.86 1763.19,1411.86 1763.9,1411.86 1764.61,1411.86 1765.31,1411.86 1766.02,1411.86 1766.73,1411.86 1767.44,1411.86 1768.14,1411.86 1768.85,1411.86 1769.56,1411.86 1770.27,1411.86 1770.98,1411.86 1771.68,1411.86 1772.39,1411.86 1773.1,1411.86 1773.81,1411.86 1774.51,1411.86 1775.22,1411.86 1775.93,1411.86 1776.64,1411.86 1777.35,1411.86 1778.05,1411.86 1778.76,1411.86 1779.47,1411.86 1780.18,1411.86 1780.88,1411.86 1781.59,1411.86 1782.3,1411.86 1783.01,1411.86 1783.72,1411.86 1784.42,1411.86 1785.13,1411.86 1785.84,1411.86 1786.55,1411.86 1787.25,1411.86 1787.96,1411.86 1788.67,1411.86 1789.38,1411.86 1790.09,1411.86 1790.79,1411.86 1791.5,1411.86 1792.21,1411.86 1792.92,1411.86 1793.62,1411.86 1794.33,1411.86 1795.04,1411.86 1795.75,1411.86 1796.46,1411.86 1797.16,1411.86 1797.87,1411.86 1798.58,1411.86 1799.29,1411.86 1799.99,1411.86 1800.7,1411.86 1801.41,1411.86 1802.12,1411.86 1802.83,1411.86 1803.53,1411.86 1804.24,1411.86 1804.95,1411.86 1805.66,1411.86 1806.36,1411.86 1807.07,1411.86 1807.78,1411.86 1808.49,1411.86 1809.2,1411.86 1809.9,1411.86 1810.61,1411.86 1811.32,1411.86 1812.03,1411.86 1812.73,1411.86 1813.44,1411.86 1814.15,1411.86 1814.86,1411.86 1815.57,1411.86 1816.27,1411.86 1816.98,1411.86 1817.69,1411.86 1818.4,1411.86 1819.1,1411.86 1819.81,1411.86 1820.52,1411.86 1821.23,1411.86 1821.94,1411.86 1822.64,1411.86 1823.35,1411.86 1824.06,1411.86 1824.77,1411.86 1825.48,1411.86 1826.18,1411.86 1826.89,1411.86 1827.6,1411.86 1828.31,1411.86 1829.01,1411.86 1829.72,1411.86 1830.43,1411.86 1831.14,1411.86 1831.85,1411.86 1832.55,1411.86 1833.26,1411.86 1833.97,1411.86 1834.68,1411.86 1835.38,1411.86 1836.09,1411.86 1836.8,1411.86 1837.51,1411.86 1838.22,1411.86 1838.92,1411.86 1839.63,1411.86 1840.34,1411.86 1841.05,1411.86 1841.75,1411.86 1842.46,1411.86 1843.17,1411.86 1843.88,1411.86 1844.59,1411.86 1845.29,1411.86 1846,1411.86 1846.71,1411.86 1847.42,1411.86 1848.12,1411.86 1848.83,1411.86 1849.54,1411.86 1850.25,1411.86 1850.96,1411.86 1851.66,1411.86 1852.37,1411.86 1853.08,1411.86 1853.79,1411.86 1854.49,1411.86 1855.2,1411.86 1855.91,1411.86 1856.62,1411.86 1857.33,1411.86 1858.03,1411.86 1858.74,1411.86 1859.45,1411.86 1860.16,1411.86 1860.86,1411.86 1861.57,1411.86 1862.28,1411.86 1862.99,1411.86 1863.7,1411.86 1864.4,1411.86 1865.11,1411.86 1865.82,1411.86 1866.53,1411.86 1867.23,1411.86 1867.94,1411.86 1868.65,1411.86 1869.36,1411.86 1870.07,1411.86 1870.77,1411.86 1871.48,1411.86 1872.19,1411.86 1872.9,1411.86 1873.6,1411.86 1874.31,1411.86 1875.02,1411.86 1875.73,1411.86 1876.44,1411.86 1877.14,1411.86 1877.85,1411.86 1878.56,1411.86 1879.27,1411.86 1879.97,1411.86 1880.68,1411.86 1881.39,1411.86 1882.1,1411.86 1882.81,1411.86 1883.51,1411.86 1884.22,1411.86 1884.93,1411.86 1885.64,1411.86 1886.34,1411.86 1887.05,1411.86 1887.76,1411.86 1888.47,1411.86 1889.18,1411.86 1889.88,1411.86 1890.59,1411.86 1891.3,1411.86 1892.01,1411.86 1892.71,1411.86 1893.42,1411.86 1894.13,1411.86 1894.84,1411.86 1895.55,1411.86 1896.25,1411.86 1896.96,1411.86 1897.67,1411.86 1898.38,1411.86 1899.08,1411.86 1899.79,1411.86 1900.5,1411.86 1901.21,1411.86 1901.92,1411.86 1902.62,1411.86 1903.33,1411.86 1904.04,1411.86 1904.75,1411.86 1905.46,1411.86 1906.16,1411.86 1906.87,1411.86 1907.58,1411.86 1908.29,1411.86 1908.99,1411.86 1909.7,1411.86 1910.41,1411.86 1911.12,1411.86 1911.83,1411.86 1912.53,1411.86 1913.24,1411.86 1913.95,1411.86 1914.66,1411.86 1915.36,1411.86 1916.07,1411.86 1916.78,1411.86 1917.49,1411.86 1918.2,1411.86 1918.9,1411.86 1919.61,1411.86 1920.32,1411.86 1921.03,1411.86 1921.73,1411.86 1922.44,1411.86 1923.15,1411.86 1923.86,1411.86 1924.57,1411.86 1925.27,1411.86 1925.98,1411.86 1926.69,1411.86 1927.4,1411.86 1928.1,1411.86 1928.81,1411.86 1929.52,1411.86 1930.23,1411.86 1930.94,1411.86 1931.64,1411.86 1932.35,1411.86 1933.06,1411.86 1933.77,1411.86 1934.47,1411.86 1935.18,1411.86 1935.89,1411.86 1936.6,1411.86 1937.31,1411.86 1938.01,1411.86 1938.72,1411.86 1939.43,1411.86 1940.14,1411.86 1940.84,1411.86 1941.55,1411.86 1942.26,1411.86 1942.97,1411.86 1943.68,1411.86 1944.38,1411.86 1945.09,1411.86 1945.8,1411.86 1946.51,1411.86 1947.21,1411.86 1947.92,1411.86 1948.63,1411.86 1949.34,1411.86 1950.05,1411.86 1950.75,1411.86 1951.46,1411.86 1952.17,1411.86 1952.88,1411.86 1953.58,1411.86 1954.29,1411.86 1955,1411.86 1955.71,1411.86 1956.42,1411.86 1957.12,1411.86 1957.83,1411.86 1958.54,1411.86 1959.25,1411.86 1959.95,1411.86 1960.66,1411.86 1961.37,1411.86 1962.08,1411.86 1962.79,1411.86 1963.49,1411.86 1964.2,1411.86 1964.91,1411.86 1965.62,1411.86 1966.32,1411.86 1967.03,1411.86 1967.74,1411.86 1968.45,1411.86 1969.16,1411.86 1969.86,1411.86 1970.57,1411.86 1971.28,1411.86 1971.99,1411.86 1972.69,1411.86 1973.4,1411.86 1974.11,1411.86 1974.82,1411.86 1975.53,1411.86 1976.23,1411.86 1976.94,1411.86 1977.65,1411.86 1978.36,1411.86 1979.07,1411.86 1979.77,1411.86 1980.48,1411.86 1981.19,1411.86 1981.9,1411.86 1982.6,1411.86 1983.31,1411.86 1984.02,1411.86 1984.73,1411.86 1985.44,1411.86 1986.14,1411.86 1986.85,1411.86 1987.56,1411.86 1988.27,1411.86 1988.97,1411.86 1989.68,1411.86 1990.39,1411.86 1991.1,1411.86 1991.81,1411.86 1992.51,1411.86 1993.22,1411.86 1993.93,1411.86 1994.64,1411.86 1995.34,1411.86 1996.05,1411.86 1996.76,1411.86 1997.47,1411.86 1998.18,1411.86 1998.88,1411.86 1999.59,1411.86 2000.3,1411.86 2001.01,1411.86 2001.71,1411.86 2002.42,1411.86 2003.13,1411.86 2003.84,1411.86 2004.55,1411.86 2005.25,1411.86 2005.96,1411.86 2006.67,1411.86 2007.38,1411.86 2008.08,1411.86 2008.79,1411.86 2009.5,1411.86 2010.21,1411.86 2010.92,1411.86 2011.62,1411.86 2012.33,1411.86 2013.04,1411.86 2013.75,1411.86 2014.45,1411.86 2015.16,1411.86 2015.87,1411.86 2016.58,1411.86 2017.29,1411.86 2017.99,1411.86 2018.7,1411.86 2019.41,1411.86 2020.12,1411.86 2020.82,1411.86 2021.53,1411.86 2022.24,1411.86 2022.95,1411.86 2023.66,1411.86 2024.36,1411.86 2025.07,1411.86 2025.78,1411.86 2026.49,1411.86 2027.19,1411.86 2027.9,1411.86 2028.61,1411.86 2029.32,1411.86 2030.03,1411.86 2030.73,1411.86 2031.44,1411.86 2032.15,1411.86 2032.86,1411.86 2033.56,1411.86 2034.27,1411.86 2034.98,1411.86 2035.69,1411.86 2036.4,1411.86 2037.1,1411.86 2037.81,1411.86 2038.52,1411.86 2039.23,1411.86 2039.93,1411.86 2040.64,1411.86 2041.35,1411.86 2042.06,1411.86 2042.77,1411.86 2043.47,1411.86 2044.18,1411.86 2044.89,1411.86 2045.6,1411.86 2046.3,1411.86 2047.01,1411.86 2047.72,1411.86 2048.43,1411.86 2049.14,1411.86 2049.84,1411.86 2050.55,1411.86 2051.26,1411.86 2051.97,1411.86 2052.68,1411.86 2053.38,1411.86 2054.09,1411.86 2054.8,1411.86 2055.51,1411.86 2056.21,1411.86 2056.92,1411.86 2057.63,1411.86 2058.34,1411.86 2059.05,1411.86 2059.75,1411.86 2060.46,1411.86 2061.17,1411.86 2061.88,1411.86 2062.58,1411.86 2063.29,1411.86 2064,1411.86 2064.71,1411.86 2065.42,1411.86 2066.12,1411.86 2066.83,1411.86 2067.54,1411.86 2068.25,1411.86 2068.95,1411.86 2069.66,1411.86 2070.37,1411.86 2071.08,1411.86 2071.79,1411.86 2072.49,1411.86 2073.2,1411.86 2073.91,1411.86 2074.62,1411.86 2075.32,1411.86 2076.03,1411.86 2076.74,1411.86 2077.45,1411.86 2078.16,1411.86 2078.86,1411.86 2079.57,1411.86 2080.28,1411.86 2080.99,1411.86 2081.69,1411.86 2082.4,1411.86 2083.11,1411.86 2083.82,1411.86 2084.53,1411.86 2085.23,1411.86 2085.94,1411.86 2086.65,1411.86 2087.36,1411.86 2088.06,1411.86 2088.77,1411.86 2089.48,1411.86 2090.19,1411.86 2090.9,1411.86 2091.6,1411.86 2092.31,1411.86 2093.02,1411.86 2093.73,1411.86 2094.43,1411.86 2095.14,1411.86 2095.85,1411.86 2096.56,1411.86 2097.27,1411.86 2097.97,1411.86 2098.68,1411.86 2099.39,1411.86 2100.1,1411.86 2100.8,1411.86 2101.51,1411.86 2102.22,1411.86 2102.93,1411.86 2103.64,1411.86 2104.34,1411.86 2105.05,1411.86 2105.76,1411.86 2106.47,1411.86 2107.17,1411.86 2107.88,1411.86 2108.59,1411.86 2109.3,1411.86 2110.01,1411.86 2110.71,1411.86 2111.42,1411.86 2112.13,1411.86 2112.84,1411.86 2113.54,1411.86 2114.25,1411.86 2114.96,1411.86 2115.67,1411.86 2116.38,1411.86 2117.08,1411.86 2117.79,1411.86 2118.5,1411.86 2119.21,1411.86 2119.91,1411.86 2120.62,1411.86 2121.33,1411.86 2122.04,1411.86 2122.75,1411.86 2123.45,1411.86 2124.16,1411.86 2124.87,1411.86 2125.58,1411.86 2126.28,1411.86 2126.99,1411.86 2127.7,1411.86 2128.41,1411.86 2129.12,1411.86 2129.82,1411.86 2130.53,1411.86 2131.24,1411.86 2131.95,1411.86 2132.66,1411.86 2133.36,1411.86 2134.07,1411.86 2134.78,1411.86 2135.49,1411.86 2136.19,1411.86 2136.9,1411.86 2137.61,1411.86 2138.32,1411.86 2139.03,1411.86 2139.73,1411.86 2140.44,1411.86 2141.15,1411.86 2141.86,1411.86 2142.56,1411.86 2143.27,1411.86 2143.98,1411.86 2144.69,1411.86 2145.4,1411.86 2146.1,1411.86 2146.81,1411.86 2147.52,1411.86 2148.23,1411.86 2148.93,1411.86 2149.64,1411.86 2150.35,1411.86 2151.06,1411.86 2151.77,1411.86 2152.47,1411.86 2153.18,1411.86 2153.89,1411.86 2154.6,1411.86 2155.3,1411.86 2156.01,1411.86 2156.72,1411.86 2157.43,1411.86 2158.14,1411.86 2158.84,1411.86 2159.55,1411.86 2160.26,1411.86 2160.97,1411.86 2161.67,1411.86 2162.38,1411.86 2163.09,1411.86 2163.8,1411.86 2164.51,1411.86 2165.21,1411.86 2165.92,1411.86 2166.63,1411.86 2167.34,1411.86 2168.04,1411.86 2168.75,1411.86 2169.46,1411.86 2170.17,1411.86 2170.88,1411.86 2171.58,1411.86 2172.29,1411.86 2173,1411.86 2173.71,1411.86 2174.41,1411.86 2175.12,1411.86 2175.83,1411.86 2176.54,1411.86 2177.25,1411.86 2177.95,1411.86 2178.66,1411.86 2179.37,1411.86 2180.08,1411.86 2180.78,1411.86 2181.49,1411.86 2182.2,1411.86 2182.91,1411.86 2183.62,1411.86 2184.32,1411.86 2185.03,1411.86 2185.74,1411.86 2186.45,1411.86 2187.15,1411.86 2187.86,1411.86 2188.57,1411.86 2189.28,1411.86 2189.99,1411.86 2190.69,1411.86 2191.4,1411.86 2192.11,1411.86 2192.82,1411.86 2193.52,1411.86 2194.23,1411.86 2194.94,1411.86 2195.65,1411.86 2196.36,1411.86 2197.06,1411.86 2197.77,1411.86 2198.48,1411.86 2199.19,1411.86 2199.89,1411.86 2200.6,1411.86 2201.31,1411.86 2202.02,1411.86 2202.73,1411.86 2203.43,1411.86 2204.14,1411.86 2204.85,1411.86 2205.56,1411.86 2206.27,1411.86 2206.97,1411.86 2207.68,1411.86 2208.39,1411.86 2209.1,1411.86 2209.8,1411.86 2210.51,1411.86 2211.22,1411.86 2211.93,1411.86 2212.64,1411.86 2213.34,1411.86 2214.05,1411.86 2214.76,1411.86 2215.47,1411.86 2216.17,1411.86 2216.88,1411.86 2217.59,1411.86 2218.3,1411.86 2219.01,1411.86 2219.71,1411.86 2220.42,1411.86 2221.13,1411.86 2221.84,1411.86 2222.54,1411.86 2223.25,1411.86 2223.96,1411.86 2224.67,1411.86 2225.38,1411.86 2226.08,1411.86 2226.79,1411.86 2227.5,1411.86 2228.21,1411.86 2228.91,1411.86 2229.62,1411.86 2230.33,1411.86 2231.04,1411.86 2231.75,1411.86 2232.45,1411.86 2233.16,1411.86 2233.87,1411.86 2234.58,1411.86 2235.28,1411.86 2235.99,1411.86 2236.7,1411.86 2237.41,1411.86 2238.12,1411.86 2238.82,1411.86 2239.53,1411.86 2240.24,1411.86 2240.95,1411.86 2241.65,1411.86 2242.36,1411.86 2243.07,1411.86 2243.78,1411.86 2244.49,1411.86 2245.19,1411.86 2245.9,1411.86 2246.61,1411.86 2247.32,1411.86 2248.02,1411.86 2248.73,1411.86 2249.44,1411.86 2250.15,1411.86 2250.86,1411.86 2251.56,1411.86 2252.27,1411.86 2252.98,1411.86 2253.69,1411.86 2254.39,1411.86 2255.1,1411.86 2255.81,1411.86 2256.52,1411.86 2257.23,1411.86 2257.93,1411.86 2258.64,1411.86 2259.35,1411.86 2260.06,1411.86 2260.76,1411.86 2261.47,1411.86 2262.18,1411.86 2262.89,1411.86 2263.6,1411.86 2264.3,1411.86 2265.01,1411.86 2265.72,1411.86 2266.43,1411.86 2267.13,1411.86 2267.84,1411.86 2268.55,1411.86 2269.26,1411.86 2269.97,1411.86 2270.67,1411.86 2271.38,1411.86 2272.09,1411.86 2272.8,1411.86 2273.5,1411.86 2274.21,1411.86 2274.92,1411.86 2275.63,1411.86 2276.34,1411.86 2277.04,1411.86 2277.75,1411.86 2278.46,1411.86 2279.17,1411.86 2279.87,1411.86 2280.58,1411.86 2281.29,1411.86 2282,1411.86 2282.71,1411.86 2283.41,1411.86 2284.12,1411.86 2284.83,1411.86 2285.54,1411.86 2286.25,1411.86 2286.95,1411.86 2287.66,1411.86 2288.37,1411.86 2289.08,1411.86 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1645.79 303.205 L2277.76 303.205 L2277.76 95.8446 L1645.79 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.79,303.205 2277.76,303.205 2277.76,95.8446 1645.79,95.8446 1645.79,303.205 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,147.685 1820.79,147.685 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1864.22 139.803 L1864.22 143.83 Q1862.41 142.905 1860.47 142.442 Q1858.52 141.979 1856.44 141.979 Q1853.27 141.979 1851.67 142.951 Q1850.1 143.923 1850.1 145.867 Q1850.1 147.349 1851.23 148.205 Q1852.36 149.039 1855.79 149.803 L1857.25 150.127 Q1861.79 151.099 1863.68 152.881 Q1865.6 154.641 1865.6 157.812 Q1865.6 161.423 1862.73 163.529 Q1859.89 165.636 1854.89 165.636 Q1852.8 165.636 1850.54 165.219 Q1848.29 164.826 1845.79 164.016 L1845.79 159.617 Q1848.15 160.844 1850.44 161.469 Q1852.73 162.071 1854.98 162.071 Q1857.99 162.071 1859.61 161.053 Q1861.23 160.011 1861.23 158.136 Q1861.23 156.4 1860.05 155.474 Q1858.89 154.548 1854.93 153.692 L1853.45 153.344 Q1849.49 152.511 1847.73 150.798 Q1845.97 149.062 1845.97 146.053 Q1845.97 142.395 1848.57 140.405 Q1851.16 138.414 1855.93 138.414 Q1858.29 138.414 1860.37 138.761 Q1862.46 139.108 1864.22 139.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1893.94 149.317 L1893.94 164.965 L1889.68 164.965 L1889.68 149.455 Q1889.68 145.775 1888.24 143.946 Q1886.81 142.118 1883.94 142.118 Q1880.49 142.118 1878.5 144.317 Q1876.51 146.516 1876.51 150.312 L1876.51 164.965 L1872.22 164.965 L1872.22 128.946 L1876.51 128.946 L1876.51 143.067 Q1878.03 140.729 1880.1 139.571 Q1882.18 138.414 1884.89 138.414 Q1889.35 138.414 1891.65 141.192 Q1893.94 143.946 1893.94 149.317 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1902.43 139.039 L1906.69 139.039 L1906.69 164.965 L1902.43 164.965 L1902.43 139.039 M1902.43 128.946 L1906.69 128.946 L1906.69 134.34 L1902.43 134.34 L1902.43 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1928.73 128.946 L1928.73 132.488 L1924.66 132.488 Q1922.36 132.488 1921.46 133.414 Q1920.58 134.34 1920.58 136.747 L1920.58 139.039 L1927.59 139.039 L1927.59 142.349 L1920.58 142.349 L1920.58 164.965 L1916.3 164.965 L1916.3 142.349 L1912.22 142.349 L1912.22 139.039 L1916.3 139.039 L1916.3 137.233 Q1916.3 132.905 1918.31 130.937 Q1920.33 128.946 1924.7 128.946 L1928.73 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1935.67 131.678 L1935.67 139.039 L1944.45 139.039 L1944.45 142.349 L1935.67 142.349 L1935.67 156.423 Q1935.67 159.594 1936.53 160.497 Q1937.41 161.4 1940.07 161.4 L1944.45 161.4 L1944.45 164.965 L1940.07 164.965 Q1935.14 164.965 1933.27 163.136 Q1931.39 161.284 1931.39 156.423 L1931.39 142.349 L1928.27 142.349 L1928.27 139.039 L1931.39 139.039 L1931.39 131.678 L1935.67 131.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,199.525 1820.79,199.525 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1864.22 191.643 L1864.22 195.67 Q1862.41 194.745 1860.47 194.282 Q1858.52 193.819 1856.44 193.819 Q1853.27 193.819 1851.67 194.791 Q1850.1 195.763 1850.1 197.707 Q1850.1 199.189 1851.23 200.045 Q1852.36 200.879 1855.79 201.643 L1857.25 201.967 Q1861.79 202.939 1863.68 204.721 Q1865.6 206.481 1865.6 209.652 Q1865.6 213.263 1862.73 215.369 Q1859.89 217.476 1854.89 217.476 Q1852.8 217.476 1850.54 217.059 Q1848.29 216.666 1845.79 215.856 L1845.79 211.457 Q1848.15 212.684 1850.44 213.309 Q1852.73 213.911 1854.98 213.911 Q1857.99 213.911 1859.61 212.893 Q1861.23 211.851 1861.23 209.976 Q1861.23 208.24 1860.05 207.314 Q1858.89 206.388 1854.93 205.532 L1853.45 205.184 Q1849.49 204.351 1847.73 202.638 Q1845.97 200.902 1845.97 197.893 Q1845.97 194.235 1848.57 192.245 Q1851.16 190.254 1855.93 190.254 Q1858.29 190.254 1860.37 190.601 Q1862.46 190.948 1864.22 191.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1893.94 201.157 L1893.94 216.805 L1889.68 216.805 L1889.68 201.295 Q1889.68 197.615 1888.24 195.786 Q1886.81 193.958 1883.94 193.958 Q1880.49 193.958 1878.5 196.157 Q1876.51 198.356 1876.51 202.152 L1876.51 216.805 L1872.22 216.805 L1872.22 180.786 L1876.51 180.786 L1876.51 194.907 Q1878.03 192.569 1880.1 191.411 Q1882.18 190.254 1884.89 190.254 Q1889.35 190.254 1891.65 193.032 Q1893.94 195.786 1893.94 201.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1902.43 190.879 L1906.69 190.879 L1906.69 216.805 L1902.43 216.805 L1902.43 190.879 M1902.43 180.786 L1906.69 180.786 L1906.69 186.18 L1902.43 186.18 L1902.43 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1928.73 180.786 L1928.73 184.328 L1924.66 184.328 Q1922.36 184.328 1921.46 185.254 Q1920.58 186.18 1920.58 188.587 L1920.58 190.879 L1927.59 190.879 L1927.59 194.189 L1920.58 194.189 L1920.58 216.805 L1916.3 216.805 L1916.3 194.189 L1912.22 194.189 L1912.22 190.879 L1916.3 190.879 L1916.3 189.073 Q1916.3 184.745 1918.31 182.777 Q1920.33 180.786 1924.7 180.786 L1928.73 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1935.67 183.518 L1935.67 190.879 L1944.45 190.879 L1944.45 194.189 L1935.67 194.189 L1935.67 208.263 Q1935.67 211.434 1936.53 212.337 Q1937.41 213.24 1940.07 213.24 L1944.45 213.24 L1944.45 216.805 L1940.07 216.805 Q1935.14 216.805 1933.27 214.976 Q1931.39 213.124 1931.39 208.263 L1931.39 194.189 L1928.27 194.189 L1928.27 190.879 L1931.39 190.879 L1931.39 183.518 L1935.67 183.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1985.3 195.856 Q1986.9 192.985 1989.12 191.62 Q1991.34 190.254 1994.35 190.254 Q1998.4 190.254 2000.6 193.101 Q2002.8 195.925 2002.8 201.157 L2002.8 216.805 L1998.52 216.805 L1998.52 201.295 Q1998.52 197.569 1997.2 195.763 Q1995.88 193.958 1993.17 193.958 Q1989.86 193.958 1987.94 196.157 Q1986.02 198.356 1986.02 202.152 L1986.02 216.805 L1981.74 216.805 L1981.74 201.295 Q1981.74 197.545 1980.42 195.763 Q1979.1 193.958 1976.34 193.958 Q1973.08 193.958 1971.16 196.18 Q1969.24 198.379 1969.24 202.152 L1969.24 216.805 L1964.96 216.805 L1964.96 190.879 L1969.24 190.879 L1969.24 194.907 Q1970.7 192.522 1972.73 191.388 Q1974.77 190.254 1977.57 190.254 Q1980.4 190.254 1982.36 191.689 Q1984.35 193.124 1985.3 195.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2033.47 202.777 L2033.47 204.86 L2013.89 204.86 Q2014.17 209.258 2016.53 211.573 Q2018.91 213.865 2023.15 213.865 Q2025.6 213.865 2027.9 213.263 Q2030.21 212.661 2032.48 211.457 L2032.48 215.485 Q2030.19 216.457 2027.78 216.967 Q2025.37 217.476 2022.9 217.476 Q2016.69 217.476 2013.06 213.865 Q2009.45 210.254 2009.45 204.096 Q2009.45 197.731 2012.87 194.004 Q2016.32 190.254 2022.15 190.254 Q2027.39 190.254 2030.42 193.633 Q2033.47 196.99 2033.47 202.777 M2029.21 201.527 Q2029.17 198.032 2027.25 195.948 Q2025.35 193.865 2022.2 193.865 Q2018.64 193.865 2016.48 195.879 Q2014.35 197.893 2014.03 201.55 L2029.21 201.527 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2052.25 203.772 Q2047.09 203.772 2045.09 204.953 Q2043.1 206.133 2043.1 208.981 Q2043.1 211.249 2044.59 212.592 Q2046.09 213.911 2048.66 213.911 Q2052.2 213.911 2054.33 211.411 Q2056.48 208.888 2056.48 204.721 L2056.48 203.772 L2052.25 203.772 M2060.74 202.013 L2060.74 216.805 L2056.48 216.805 L2056.48 212.869 Q2055.02 215.231 2052.85 216.365 Q2050.67 217.476 2047.52 217.476 Q2043.54 217.476 2041.18 215.254 Q2038.84 213.008 2038.84 209.258 Q2038.84 204.883 2041.76 202.661 Q2044.7 200.439 2050.51 200.439 L2056.48 200.439 L2056.48 200.022 Q2056.48 197.083 2054.54 195.485 Q2052.62 193.865 2049.12 193.865 Q2046.9 193.865 2044.79 194.397 Q2042.69 194.93 2040.74 195.995 L2040.74 192.059 Q2043.08 191.157 2045.28 190.717 Q2047.48 190.254 2049.56 190.254 Q2055.19 190.254 2057.96 193.17 Q2060.74 196.087 2060.74 202.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2091.07 201.157 L2091.07 216.805 L2086.81 216.805 L2086.81 201.295 Q2086.81 197.615 2085.37 195.786 Q2083.94 193.958 2081.07 193.958 Q2077.62 193.958 2075.63 196.157 Q2073.64 198.356 2073.64 202.152 L2073.64 216.805 L2069.35 216.805 L2069.35 190.879 L2073.64 190.879 L2073.64 194.907 Q2075.16 192.569 2077.22 191.411 Q2079.31 190.254 2082.02 190.254 Q2086.48 190.254 2088.77 193.032 Q2091.07 195.786 2091.07 201.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,251.365 1820.79,251.365 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1850.07 264.756 L1850.07 278.506 L1845.79 278.506 L1845.79 242.719 L1850.07 242.719 L1850.07 246.654 Q1851.41 244.339 1853.45 243.228 Q1855.51 242.094 1858.36 242.094 Q1863.08 242.094 1866.02 245.844 Q1868.98 249.594 1868.98 255.705 Q1868.98 261.816 1866.02 265.566 Q1863.08 269.316 1858.36 269.316 Q1855.51 269.316 1853.45 268.205 Q1851.41 267.071 1850.07 264.756 M1864.56 255.705 Q1864.56 251.006 1862.62 248.344 Q1860.7 245.659 1857.32 245.659 Q1853.94 245.659 1851.99 248.344 Q1850.07 251.006 1850.07 255.705 Q1850.07 260.404 1851.99 263.089 Q1853.94 265.751 1857.32 265.751 Q1860.7 265.751 1862.62 263.089 Q1864.56 260.404 1864.56 255.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1891.07 246.7 Q1890.35 246.284 1889.49 246.098 Q1888.66 245.89 1887.64 245.89 Q1884.03 245.89 1882.09 248.251 Q1880.16 250.589 1880.16 254.987 L1880.16 268.645 L1875.88 268.645 L1875.88 242.719 L1880.16 242.719 L1880.16 246.747 Q1881.51 244.385 1883.66 243.251 Q1885.81 242.094 1888.89 242.094 Q1889.33 242.094 1889.86 242.163 Q1890.4 242.21 1891.04 242.325 L1891.07 246.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1904.54 245.705 Q1901.11 245.705 1899.12 248.39 Q1897.13 251.052 1897.13 255.705 Q1897.13 260.358 1899.1 263.043 Q1901.09 265.705 1904.54 265.705 Q1907.94 265.705 1909.93 263.02 Q1911.92 260.334 1911.92 255.705 Q1911.92 251.098 1909.93 248.413 Q1907.94 245.705 1904.54 245.705 M1904.54 242.094 Q1910.1 242.094 1913.27 245.705 Q1916.44 249.316 1916.44 255.705 Q1916.44 262.071 1913.27 265.705 Q1910.1 269.316 1904.54 269.316 Q1898.96 269.316 1895.79 265.705 Q1892.64 262.071 1892.64 255.705 Q1892.64 249.316 1895.79 245.705 Q1898.96 242.094 1904.54 242.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1923.5 242.719 L1927.76 242.719 L1927.76 269.108 Q1927.76 274.061 1925.86 276.283 Q1923.98 278.506 1919.79 278.506 L1918.17 278.506 L1918.17 274.895 L1919.31 274.895 Q1921.74 274.895 1922.62 273.76 Q1923.5 272.649 1923.5 269.108 L1923.5 242.719 M1923.5 232.626 L1927.76 232.626 L1927.76 238.02 L1923.5 238.02 L1923.5 232.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1958.84 254.617 L1958.84 256.7 L1939.26 256.7 Q1939.54 261.098 1941.9 263.413 Q1944.28 265.705 1948.52 265.705 Q1950.97 265.705 1953.27 265.103 Q1955.58 264.501 1957.85 263.297 L1957.85 267.325 Q1955.56 268.297 1953.15 268.807 Q1950.74 269.316 1948.27 269.316 Q1942.06 269.316 1938.43 265.705 Q1934.82 262.094 1934.82 255.936 Q1934.82 249.571 1938.24 245.844 Q1941.69 242.094 1947.53 242.094 Q1952.76 242.094 1955.79 245.473 Q1958.84 248.83 1958.84 254.617 M1954.59 253.367 Q1954.54 249.872 1952.62 247.788 Q1950.72 245.705 1947.57 245.705 Q1944.01 245.705 1941.85 247.719 Q1939.72 249.733 1939.4 253.39 L1954.59 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1984.49 243.714 L1984.49 247.696 Q1982.69 246.7 1980.86 246.214 Q1979.05 245.705 1977.2 245.705 Q1973.06 245.705 1970.77 248.344 Q1968.47 250.96 1968.47 255.705 Q1968.47 260.45 1970.77 263.089 Q1973.06 265.705 1977.2 265.705 Q1979.05 265.705 1980.86 265.219 Q1982.69 264.709 1984.49 263.714 L1984.49 267.649 Q1982.71 268.483 1980.79 268.899 Q1978.89 269.316 1976.74 269.316 Q1970.88 269.316 1967.43 265.635 Q1963.98 261.955 1963.98 255.705 Q1963.98 249.362 1967.46 245.728 Q1970.95 242.094 1977.02 242.094 Q1978.98 242.094 1980.86 242.511 Q1982.73 242.904 1984.49 243.714 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1996.11 235.358 L1996.11 242.719 L2004.89 242.719 L2004.89 246.029 L1996.11 246.029 L1996.11 260.103 Q1996.11 263.274 1996.97 264.177 Q1997.85 265.08 2000.51 265.08 L2004.89 265.08 L2004.89 268.645 L2000.51 268.645 Q1995.58 268.645 1993.71 266.816 Q1991.83 264.964 1991.83 260.103 L1991.83 246.029 L1988.71 246.029 L1988.71 242.719 L1991.83 242.719 L1991.83 235.358 L1996.11 235.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2032.66 254.617 L2032.66 256.7 L2013.08 256.7 Q2013.36 261.098 2015.72 263.413 Q2018.1 265.705 2022.34 265.705 Q2024.79 265.705 2027.09 265.103 Q2029.4 264.501 2031.67 263.297 L2031.67 267.325 Q2029.38 268.297 2026.97 268.807 Q2024.56 269.316 2022.09 269.316 Q2015.88 269.316 2012.25 265.705 Q2008.64 262.094 2008.64 255.936 Q2008.64 249.571 2012.06 245.844 Q2015.51 242.094 2021.34 242.094 Q2026.58 242.094 2029.61 245.473 Q2032.66 248.83 2032.66 254.617 M2028.4 253.367 Q2028.36 249.872 2026.44 247.788 Q2024.54 245.705 2021.39 245.705 Q2017.83 245.705 2015.67 247.719 Q2013.54 249.733 2013.22 253.39 L2028.4 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2056.71 246.654 L2056.71 232.626 L2060.97 232.626 L2060.97 268.645 L2056.71 268.645 L2056.71 264.756 Q2055.37 267.071 2053.31 268.205 Q2051.27 269.316 2048.4 269.316 Q2043.71 269.316 2040.74 265.566 Q2037.8 261.816 2037.8 255.705 Q2037.8 249.594 2040.74 245.844 Q2043.71 242.094 2048.4 242.094 Q2051.27 242.094 2053.31 243.228 Q2055.37 244.339 2056.71 246.654 M2042.2 255.705 Q2042.2 260.404 2044.12 263.089 Q2046.07 265.751 2049.45 265.751 Q2052.83 265.751 2054.77 263.089 Q2056.71 260.404 2056.71 255.705 Q2056.71 251.006 2054.77 248.344 Q2052.83 245.659 2049.45 245.659 Q2046.07 245.659 2044.12 248.344 Q2042.2 251.006 2042.2 255.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2089.45 276.515 L2089.45 279.825 L2064.82 279.825 L2064.82 276.515 L2089.45 276.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2115.63 254.617 L2115.63 256.7 L2096.04 256.7 Q2096.32 261.098 2098.68 263.413 Q2101.07 265.705 2105.3 265.705 Q2107.76 265.705 2110.05 265.103 Q2112.36 264.501 2114.63 263.297 L2114.63 267.325 Q2112.34 268.297 2109.93 268.807 Q2107.52 269.316 2105.05 269.316 Q2098.84 269.316 2095.21 265.705 Q2091.6 262.094 2091.6 255.936 Q2091.6 249.571 2095.02 245.844 Q2098.47 242.094 2104.31 242.094 Q2109.54 242.094 2112.57 245.473 Q2115.63 248.83 2115.63 254.617 M2111.37 253.367 Q2111.32 249.872 2109.4 247.788 Q2107.5 245.705 2104.35 245.705 Q2100.79 245.705 2098.64 247.719 Q2096.51 249.733 2096.18 253.39 L2111.37 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2144.17 252.997 L2144.17 268.645 L2139.91 268.645 L2139.91 253.135 Q2139.91 249.455 2138.47 247.626 Q2137.04 245.798 2134.17 245.798 Q2130.72 245.798 2128.73 247.997 Q2126.74 250.196 2126.74 253.992 L2126.74 268.645 L2122.45 268.645 L2122.45 242.719 L2126.74 242.719 L2126.74 246.747 Q2128.27 244.409 2130.33 243.251 Q2132.41 242.094 2135.12 242.094 Q2139.58 242.094 2141.88 244.872 Q2144.17 247.626 2144.17 252.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2174.84 254.617 L2174.84 256.7 L2155.26 256.7 Q2155.53 261.098 2157.89 263.413 Q2160.28 265.705 2164.51 265.705 Q2166.97 265.705 2169.26 265.103 Q2171.58 264.501 2173.84 263.297 L2173.84 267.325 Q2171.55 268.297 2169.14 268.807 Q2166.74 269.316 2164.26 269.316 Q2158.06 269.316 2154.42 265.705 Q2150.81 262.094 2150.81 255.936 Q2150.81 249.571 2154.24 245.844 Q2157.69 242.094 2163.52 242.094 Q2168.75 242.094 2171.78 245.473 Q2174.84 248.83 2174.84 254.617 M2170.58 253.367 Q2170.53 249.872 2168.61 247.788 Q2166.71 245.705 2163.57 245.705 Q2160 245.705 2157.85 247.719 Q2155.72 249.733 2155.39 253.39 L2170.58 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2196.85 246.7 Q2196.14 246.284 2195.28 246.098 Q2194.45 245.89 2193.43 245.89 Q2189.82 245.89 2187.87 248.251 Q2185.95 250.589 2185.95 254.987 L2185.95 268.645 L2181.67 268.645 L2181.67 242.719 L2185.95 242.719 L2185.95 246.747 Q2187.29 244.385 2189.45 243.251 Q2191.6 242.094 2194.68 242.094 Q2195.12 242.094 2195.65 242.163 Q2196.18 242.21 2196.83 242.325 L2196.85 246.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2217.55 255.381 Q2217.55 250.751 2215.63 248.205 Q2213.73 245.659 2210.28 245.659 Q2206.85 245.659 2204.93 248.205 Q2203.03 250.751 2203.03 255.381 Q2203.03 259.987 2204.93 262.534 Q2206.85 265.08 2210.28 265.08 Q2213.73 265.08 2215.63 262.534 Q2217.55 259.987 2217.55 255.381 M2221.81 265.427 Q2221.81 272.047 2218.87 275.265 Q2215.93 278.506 2209.86 278.506 Q2207.62 278.506 2205.63 278.158 Q2203.64 277.834 2201.76 277.14 L2201.76 272.996 Q2203.64 274.015 2205.46 274.501 Q2207.29 274.987 2209.19 274.987 Q2213.38 274.987 2215.46 272.788 Q2217.55 270.612 2217.55 266.191 L2217.55 264.084 Q2216.23 266.376 2214.17 267.51 Q2212.11 268.645 2209.24 268.645 Q2204.47 268.645 2201.55 265.01 Q2198.64 261.376 2198.64 255.381 Q2198.64 249.362 2201.55 245.728 Q2204.47 242.094 2209.24 242.094 Q2212.11 242.094 2214.17 243.228 Q2216.23 244.362 2217.55 246.654 L2217.55 242.719 L2221.81 242.719 L2221.81 265.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2241.37 271.052 Q2239.56 275.682 2237.85 277.094 Q2236.13 278.506 2233.26 278.506 L2229.86 278.506 L2229.86 274.941 L2232.36 274.941 Q2234.12 274.941 2235.09 274.108 Q2236.07 273.274 2237.25 270.172 L2238.01 268.228 L2227.52 242.719 L2232.04 242.719 L2240.14 262.997 L2248.24 242.719 L2252.76 242.719 L2241.37 271.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other an the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalisation in the example \"Exact diagonalisation\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using LinearAlgebra\nexact_energy = eigvals(Matrix(H))[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906392","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027923810504714 ± 0.027645123065160745\nProjected Energy: -4.016314467689392 ± (0.004304544683139788, 0.00419639764247659)\nExact Energy: -4.021502406906392\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-Rimu/StatsTools","page":"StatsTools","title":"Module Rimu/StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module Rimu/StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h; \n    shift_name=:shift, \n    norm_name=:norm, \n    dτ=df.dτ[end], \n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names  of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj, \n    vproj_name=:vproj, \n    shift_name=:shift, \n    dτ=df.dτ[end], \n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame  returned by lomc!. The keyword arguments hproj_name, vproj_name, and  shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\", \n    vec_name=\"dot\", \n    h=0,\n    skip=0, \n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)  \n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas. \n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n)  and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector  holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector  holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by  lomc!. The keyword arguments shift_name, op_name and vec_name can be used to  change the names of the relevant columns, see AllOverlaps for default  formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific  reweighting depth can be set with keyword argument h. The default is h = 0 which  calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique  described in Umrigar et al. (1993).  Reweighting is done over h time steps and length(shift) - skip time steps are used  for the blocking analysis done with ratio_of_means().  dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ... \nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use a dummy groundstate address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.385195</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.6582e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7593e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.866e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.505e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.705e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.055e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999989\n -0.9999999999999982\n -0.9999999999999973\n  1.0\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.526707-0.23646im       2.77556e-17-0.204124im             0.0+0.0im          0.526707+0.23646im       2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.372438+0.167202im              0.0-0.288675im             0.0+0.0im         -0.372438-0.167202im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+2.77556e-17im   -1.2326e-32+2.77556e-17im          0.0+0.353553im          0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      1.11022e-16+1.66533e-16im           0.0-0.612372im             0.0+0.0im       5.55112e-17+2.77556e-17im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   1.11022e-16-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im          0.0-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im               0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im               0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.167202-0.372438im         0.288675-1.95105e-16im          0.0+0.0im         -0.167202+0.372438im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im       0.23646+0.526707im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.23646-0.526707im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im               0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 7.155734338400866e-18\n 2.7755575615628883e-17\n 0.15915494309189537\n 0.15915494309189543\n 0.15915494309189548","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalisation","page":"Exact diagonalisation","title":"Example 4: Exact diagonalisation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When working with smaller systems, or when multiple eigenvalues of a system are required, one can use an exact diagonalisation method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalisation","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Before performing exact diagonalisation, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalisation and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRep","page":"Exact diagonalisation","title":"The BasisSetRep","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRep under the hood. The BasisSetRep, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRep only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr = BasisSetRep(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To access the matrix or basis, access the sm and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.sm","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalisation","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalisation","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770728\n  0.1358418221962303\n  0.15789998694609153\n  0.8767114411781431\n  1.5305929970973349\n  1.583573261186749\n  3.072870330325868\n  3.1256726539518525\n  4.862107221562181\n  6.260694850380592\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -5.46153e-15  -0.0221221  -0.0697193   3.30753e-15  -0.0314466   -3.25591e-16  -0.0360987   -0.0161557  -1.08119e-16  -0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     5.97476e-14   0.225254   -0.132826   -3.44233e-17   0.00292026  -2.22083e-15  -0.0861158   -0.0907789  -2.63831e-16  -0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -1.1734e-13   -0.447424   -0.63969     4.40954e-14  -0.383444    -7.21042e-15  -0.431051    -0.181167   -5.40614e-16  -0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166     -0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166     -0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     2.5354e-14    0.1111     -0.172508   -2.60229e-14   0.207974     2.57978e-15   0.0848902   -0.149153   -5.57509e-16  -0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -2.14419e-14  -0.0847116   0.082999    3.13063e-14  -0.274424     5.10554e-15   0.575786    -0.61385    -1.11262e-15  -0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   1.10167e-14   0.0427486   0.0110863  -7.64953e-15   0.0663108    1.04296e-15   0.00167015   0.0832916   1.47632e-15   0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536   -0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046     -0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046     -0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536   -0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalisation","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Arpack\n\nnum_eigvals = 3\n\nsm = sparse(ham)\nvals_ar, vecs_ar = eigs(sm; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613358\n -0.759019192277075","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sm, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133637\n -0.7590191922770888\n  0.1358418221962161\n  0.1578999869460862\n  0.8767114411781414\n  1.530592997097334\n  1.583573261186733\n  3.0728703303258573\n  3.1256726539518374\n  4.862107221562171\n  6.260694850380592\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If diagonalisation takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalisation","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalisation.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalisation","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.97986399832162\n -3.363124291613361\n -0.7590191922770769\n  0.15789998694608018\n  0.8767114411781443\n  1.5835732611867421\n  3.125672653951844\n  4.862107221562177\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"4-element Vector{Float64}:\n 0.13584182219621782\n 1.5305929970973278\n 3.0728703303258604\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalisation","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"5-element Vector{Float64}:\n 0.006686138945087796\n 0.033070399772041674\n 3.920486922565741\n 0.03307039977204166\n 0.0066861389450878495","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_dvec(filename, dv) Save dict vector in BSON format.\nRimuIO.load_dvec(filename) Load BSON file into dict vector.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_dvec-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_dvec","text":"RimuIO.load_dvec(filename) -> AbstractDVec\n\nLoad AbstractDVec stored in BSON.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrames.DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_dvec-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_dvec","text":"RimuIO.save_dvec(filename, dvec)\n\nSave dvec in BSON format.\n\nNotes\n\nOnly the localpart is saved. You may need to re-wrap the result in MPIData if using MPI.\nWhen using this function with MPI, make sure to save the vectors from different ranks to different files, e.g. by saving as RimuIO.save_dvec(\"filename-$(mpi_rank()).bson\", dvec).\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"module Hamiltonians\n\nThis module defines Hamiltonian types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nG2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Usage-with-FCIQMC-and-exact-diagonalisation","page":"Hamiltonians","title":"Usage with FCIQMC and exact diagonalisation","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"In order to define a specific model Hamiltonian with relevant parameters for the model, instantiate the model like this in the input file:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"hubb = HubbardReal1D(BoseFS((1,2,0,3)); u=1.0, t=1.0)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian hubb is now ready to be used for FCIQMC in lomc! and for exact diagonalisation with KrylovKit.jl directly, or after transforming into a sparse matrix first with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using SparseArrays\nsh = sparse(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"or into a full matrix with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using LinearAlgebra\nfh = Matrix(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This functionality relies on","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.BasisSetRep\nsparse\nMatrix","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BasisSetRep","page":"Hamiltonians","title":"Rimu.Hamiltonians.BasisSetRep","text":"BasisSetRep(\n    h::AbstractHamiltonian, addr=starting_address(h);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRep(h::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator h with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsm: sparse matrix representing h in the basis basis\nbasis: vector of addresses\nh: the Hamiltonian\n\nExample\n\njulia> h = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRep(h)\nBasisSetRep(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRep(h, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRep(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#SparseArrays.sparse","page":"Hamiltonians","title":"SparseArrays.sparse","text":"sparse(h::AbstractHamiltonian, addr=starting_address(h); kwargs...)\nsparse(bsr::BasisSetRep)\n\nReturn a sparse matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.Matrix","page":"Hamiltonians","title":"Base.Matrix","text":"Matrix(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4, kwargs...)\nMatrix(bsr::BasisSetRep)\n\nReturn a dense matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"If only the basis is required and not the matrix representation it is more efficient to use","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.build_basis","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.build_basis","page":"Hamiltonians","title":"Rimu.Hamiltonians.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRep.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented LatticeGeometrys for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"G2MomCorrelator\nG2RealCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with  AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see  G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice  separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling  number and barn = NM is the mean filling number of lattice sites with N particles and  M lattice sites (or modes). \n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nMethods that need to be implemented:\n\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer)\ndiagonal_element(::AbstractHamiltonian, address)\nstarting_address(::AbstractHamiltonian)\n\nOptional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRep: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over reachable off-diagonal matrix elements of type <:AbstractOffdiagonals. Defaults to returning Offdiagonals(h, a)\n\nSee also\n\nOffdiagonals\nAbstractOffdiagonals\n\njulia> addr = BoseFS((3,2,1));\n\n\njulia> H = HubbardReal1D(addr);\n\n\njulia> h = offdiagonals(H, addr)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, add)\n\nCompute the diagonal matrix element of the linear operator ham at address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> diagonal_element(H, addr)\n8.666666666666664\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. Part of the AbstractHamiltonian interface. When called on an AbstractMatrix return the index of the lowest diagonal element.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> addr == starting_address(H)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, add)\n\nCompute the number of number of reachable configurations from address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> num_offdiagonals(H, addr)\n10\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nLOStructure speficies properties of the linear operator op. If a special structure is known this can speed up calculations. Implemented structures are:\n\nIsDiagonal: The operator is diagonal.\nIsHermitian: The operator is complex and Hermitian or real and symmetric.\nAdjointKnown: The operator is not Hermitian, but its adjoint is implemented.\nAdjointUnknown: adjoint for this operator is not implemented.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(BoseFS((1,2,3)))\n28\n\njulia> dimension(HubbardReal1D(BoseFS((1,2,3))))\n28\n\njulia> dimension(HubbardReal1D(near_uniform(BoseFS{200,100})))\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> dimension(HubbardReal1D(near_uniform(BoseFS{200,100})))|>Float64\n1.3860838210861882e81\n\nInterface\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr).\n\nSee also BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h. Part of the AbstractHamiltonian interface. Defaults to typeof(starting_address(h)).\n\nOverload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\ndot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address)\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the possibly non-zero off-diagonal matrix elements of the column of ham indexed by add.\n\nThis is the default implementation defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also\n\noffdiagonals\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"LatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nnum_dimensions\nneighbour_site","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LatticeGeometry","page":"Hamiltonians","title":"Rimu.Hamiltonians.LatticeGeometry","text":"abstract type LatticeGeometry{D}\n\nA LatticeGeometry controls which sites in an AbstractFockAddress are considered to be neighbours.\n\nCurrently only supported by HubbardRealSpace.\n\nAvailable implementations\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nInterface to implement\n\nBase.size: return the lattice size.\nneighbour_site(::LatticeGeometry, ::Int, ::Int)\nnum_dimensions(::LatticeGeometry)\nnum_neighbours(::LatticeGeometry)\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(size...) <: LatticeGeometry\n\nRectangular lattice with periodic boundary conditions of size size.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nThis is the default geometry used by HubbardRealSpace.\n\nExample\n\njulia> lattice = PeriodicBoundaries(5, 4) # 2D lattice of size 5 × 4\nPeriodicBoundaries(5, 4)\n\njulia> num_neighbours(lattice)\n4\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n5\n\njulia> neighbour_site(lattice, 1, 3)\n6\n\njulia> neighbour_site(lattice, 1, 4)\n16\n\nSee also\n\nLatticeGeometry\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nneighbour_site\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries\n\nRectangular lattice with hard wall boundary conditions of size size. neighbour_site() will return 0 for some neighbours of boundary sites.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nExample\n\njulia> lattice = HardwallBoundaries(5) # 1D lattice of size 5\nHardwallBoundaries(5)\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n0\n\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nLadderBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(size...; subgeometry=PeriodicBoundaries) <: LatticeGeometry\n\nLattice geometry where the first dimension is of size 2 and has hardwall boundary conditions. Using this geometry is more efficient than using HardwallBoundaries with a size of 2, as it does not generate rejected neighbours.\n\nIn other dimensions, it behaves like its subgeometry, which can be any LatticeGeometry.\n\nExample\n\njulia> lattice = LadderBoundaries(2, 3, 4) # 3D lattice of size 2 × 3 × 4\nLadderBoundaries(2, 3, 4)\n\njulia> num_neighbours(lattice)\n5\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n3\n\njulia> neighbour_site(lattice, 1, 3)\n5\n\njulia> neighbour_site(lattice, 1, 4)\n7\n\njulia> neighbour_site(lattice, 1, 5)\n19\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_neighbours","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_neighbours","text":"num_neighbours(geom::LatticeGeometry)\n\nReturn the number of neighbours each lattice site has in this geometry.\n\nNote that for efficiency reasons, all sites are expected to have the same number of neighbours. If some of the neighbours are invalid, this is handled by having neighbour_site return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_dimensions","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_dimensions","text":"num_dimensions(geom::LatticeGeometry)\n\nReturn the number of dimensions of the lattice in this geometry.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbour_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbour_site","text":"neighbour_site(geom::LatticeGeometry, site, i)\n\nFind the i-th neighbour of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions  and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Modifying-the-Project.toml-file","page":"Code testing","title":"Modifying the Project.toml file","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"In order for the testing code to be able to run on the cloud server, external packages that are accessed in the code with using or import need to be installed first. This is done in the script actions.yml via the package manager, based on the information contained in the file test/Project.toml. More packages can be added to this file using the package manager in the following way: Say we want to install the package DelimitedFiles. At the Julia REPL, type the following:","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"julia> cd(\"test\")\njulia> ]\n(v1.0) pkg> activate .\n(test) pkg> add DelimitedFiles","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"This will a new line to the file Project.toml with the name of the package and the corresponding uuid. When Pipelines now runs the commands in yml script, it will install the package DelimitedFiles before running the runtest.jl script.","category":"page"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s11\"}} where var\"#s11\", Tuple{Vararg{Int64, var\"#s10\"}} where var\"#s10\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.11.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (\\hat{A}_1, ..., \\hat{A}_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a replica after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step(::PostStepStrategy, ::ReplicaState).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.QMCState","page":"API","title":"Rimu.QMCState","text":"QMCState\n\nHolds all information needed to run lomc!, except the dataframe. Holds an NTuple of ReplicaStates, the Hamiltonian, and various strategies that control the algorithm. Constructed and returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState(v, wm, pnorm, params, id)\n\nStruct that holds all information needed for an independent run of the algorithm.\n\nCan be advanced a step forward with advance!.\n\nFields\n\nhamiltonian: the model Hamiltonian.\nv: vector.\npv: vector from the previous step.\nwm: working memory.\npnorm: previous walker number (see walkernumber).\nparams: the FciqmcRunStrategy.\nid: string ID appended to reported column names.\n\nSee also QMCState, ReplicaStrategy, replica_stats, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\n\nInternal structure that holds the temporary reported values as well as metadata.\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_r_strat\nreport!\nreport_after_step\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"Abstract type for defining the strategy for updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TripleLogUpdate","page":"API","title":"Rimu.TripleLogUpdate","text":"TripleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, η = 0.01) <: ShiftStrategy\n\nStrategy for updating the shift according to the extended log formula with damping parameters ζ, ξ, and η.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n- fracηdτlnleft(fracℜ(Ψ^n+1)_1^2 + ℑ(Ψ^n+1)_1^2\nℜ(Ψ^n)_1^2 + ℑ(Ψ^n)_1^2right)\n\nwhere N_mathrmw is the walkernumber(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, s_strat)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{Any, Rimu.QMCState, Rimu.ReplicaState}","page":"API","title":"Rimu.advance!","text":"advance!(report::Report, state::QMCState, replica::ReplicaState)\n\nAdvance the replica by one step. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsStochasticInteger(),\n    initiator=NonInitiator(),\n    threading=nothing\n)\n\nReturn a default starting vector for lomc!. The default choice for the starting vector is\n\nv = PDVec(address => 10; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => 10; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => 10; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and [InitiatorRule].\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::QMCState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a QMCState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nreplica::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy.\nr_strat::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a QMCState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 11)\n\njulia> size(df2)\n(200, 11)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nparams::FciqmcRunStrategy = RunTillLastStep(laststep = 100, dτ = 0.01, shift = diagonal_element(ham, address) - basic parameters of simulation state, see FciqmcRunStrategy. Parameter values are overridden by explicit keyword arguments laststep, dτ, shift; is mutated.\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step","page":"API","title":"Rimu.post_step","text":"post_step(::PostStepStrategy, ::ReplicaState) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_r_strat-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_r_strat","text":"refine_r_strat(r_strat::ReportingStrategy) -> r_strat\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, replicas::NTuple{N,ReplicaState}) -> (names, values)\n\nReturn the names and values of statistics related to N replicas consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also ReplicaState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step-Tuple{ReportingStrategy, Vararg{Any}}","page":"API","title":"Rimu.report_after_step","text":"report_after_step(::ReportingStrategy, step, report, state)\n\nThis function is called at the very end of a step, after reporting_interval steps. For example, it can be used to print some information to stdout.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nThrows an error if key already exists.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift","page":"API","title":"Rimu.update_shift","text":"update_shift(s <: ShiftStrategy, shift, shiftMode, tnorm, pnorm, dτ, step, df, v_new, v_old)\n\nUpdate the shift according to strategy s. See ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Rimu/StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground-state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"r_strat = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|1 0 0 0 8 0 0 0 1 0⟩\" => 5.692099788303083, fs\"|0 0 0 0 8 0 0 0 0 2⟩\" => 4.024922359499621, fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 7.0, fs\"|0 0 1 0 8 0 1 0 0 0⟩\" => 5.692099788303083, fs\"|0 0 0 1 8 1 0 0 0 0⟩\" => 5.692099788303083, fs\"|0 1 0 0 8 0 0 1 0 0⟩\" => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; r_strat, s_strat, post_step, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\nwalkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
