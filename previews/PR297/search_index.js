var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21561293829010036 ± 0.0013924822363860225\n   G2(1) = 0.9154113570677479 ± 0.0007143241947062752\n   G2(2) = 0.9832217754705912 ± 0.0006205870028410027\n   G2(3) = 0.9871207966332218 ± 0.0011239353834050301\n   G2(4) = 0.9832217754705912 ± 0.0006205870028410027\n   G2(5) = 0.9154113570677479 ± 0.0007143241947062752\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.048418748282094 ± 0.1633665507426357\n   Replica 2: -4.038232706019012 ± 0.11347403013872635\n   Replica 3: -4.077687889199645 ± 0.1447482175852204\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip300\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip301\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip302\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.28 2211.02,1003.28 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.736 2211.02,745.736 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.188 2211.02,488.188 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.641 2211.02,230.641 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.28 423.181,1003.28 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.736 423.181,745.736 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.188 423.181,488.188 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.641 423.181,230.641 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M290.043 1016.63 L306.363 1016.63 L306.363 1020.56 L284.418 1020.56 L284.418 1016.63 Q287.08 1013.87 291.664 1009.24 Q296.27 1004.59 297.451 1003.25 Q299.696 1000.73 300.576 998.989 Q301.478 997.23 301.478 995.54 Q301.478 992.785 299.534 991.049 Q297.613 989.313 294.511 989.313 Q292.312 989.313 289.858 990.077 Q287.427 990.841 284.65 992.392 L284.65 987.67 Q287.474 986.535 289.927 985.957 Q292.381 985.378 294.418 985.378 Q299.789 985.378 302.983 988.063 Q306.177 990.748 306.177 995.239 Q306.177 997.369 305.367 999.29 Q304.58 1001.19 302.474 1003.78 Q301.895 1004.45 298.793 1007.67 Q295.691 1010.86 290.043 1016.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 986.003 L334.58 986.003 L334.58 989.938 L320.506 989.938 L320.506 998.41 Q321.524 998.063 322.543 997.901 Q323.562 997.716 324.58 997.716 Q330.367 997.716 333.747 1000.89 Q337.126 1004.06 337.126 1009.48 Q337.126 1015.05 333.654 1018.16 Q330.182 1021.23 323.862 1021.23 Q321.687 1021.23 319.418 1020.86 Q317.173 1020.49 314.765 1019.75 L314.765 1015.05 Q316.849 1016.19 319.071 1016.74 Q321.293 1017.3 323.77 1017.3 Q327.774 1017.3 330.112 1015.19 Q332.45 1013.09 332.45 1009.48 Q332.45 1005.86 330.112 1003.76 Q327.774 1001.65 323.77 1001.65 Q321.895 1001.65 320.02 1002.07 Q318.168 1002.48 316.224 1003.36 L316.224 986.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 989.082 Q352.728 989.082 350.899 992.647 Q349.094 996.188 349.094 1003.32 Q349.094 1010.42 350.899 1013.99 Q352.728 1017.53 356.339 1017.53 Q359.973 1017.53 361.779 1013.99 Q363.608 1010.42 363.608 1003.32 Q363.608 996.188 361.779 992.647 Q359.973 989.082 356.339 989.082 M356.339 985.378 Q362.149 985.378 365.205 989.985 Q368.284 994.568 368.284 1003.32 Q368.284 1012.04 365.205 1016.65 Q362.149 1021.23 356.339 1021.23 Q350.529 1021.23 347.45 1016.65 Q344.395 1012.04 344.395 1003.32 Q344.395 994.568 347.45 989.985 Q350.529 985.378 356.339 985.378 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M286.062 728.456 L304.418 728.456 L304.418 732.391 L290.344 732.391 L290.344 740.863 Q291.363 740.516 292.381 740.354 Q293.4 740.169 294.418 740.169 Q300.205 740.169 303.585 743.34 Q306.964 746.511 306.964 751.928 Q306.964 757.506 303.492 760.608 Q300.02 763.687 293.701 763.687 Q291.525 763.687 289.256 763.317 Q287.011 762.946 284.603 762.206 L284.603 757.506 Q286.687 758.641 288.909 759.196 Q291.131 759.752 293.608 759.752 Q297.613 759.752 299.951 757.645 Q302.288 755.539 302.288 751.928 Q302.288 748.317 299.951 746.21 Q297.613 744.104 293.608 744.104 Q291.733 744.104 289.858 744.52 Q288.006 744.937 286.062 745.817 L286.062 728.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 731.534 Q322.566 731.534 320.737 735.099 Q318.932 738.641 318.932 745.77 Q318.932 752.877 320.737 756.442 Q322.566 759.983 326.177 759.983 Q329.811 759.983 331.617 756.442 Q333.446 752.877 333.446 745.77 Q333.446 738.641 331.617 735.099 Q329.811 731.534 326.177 731.534 M326.177 727.831 Q331.987 727.831 335.043 732.437 Q338.122 737.02 338.122 745.77 Q338.122 754.497 335.043 759.104 Q331.987 763.687 326.177 763.687 Q320.367 763.687 317.288 759.104 Q314.233 754.497 314.233 745.77 Q314.233 737.02 317.288 732.437 Q320.367 727.831 326.177 727.831 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 731.534 Q352.728 731.534 350.899 735.099 Q349.094 738.641 349.094 745.77 Q349.094 752.877 350.899 756.442 Q352.728 759.983 356.339 759.983 Q359.973 759.983 361.779 756.442 Q363.608 752.877 363.608 745.77 Q363.608 738.641 361.779 735.099 Q359.973 731.534 356.339 731.534 M356.339 727.831 Q362.149 727.831 365.205 732.437 Q368.284 737.02 368.284 745.77 Q368.284 754.497 365.205 759.104 Q362.149 763.687 356.339 763.687 Q350.529 763.687 347.45 759.104 Q344.395 754.497 344.395 745.77 Q344.395 737.02 347.45 732.437 Q350.529 727.831 356.339 727.831 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M284.835 470.908 L307.057 470.908 L307.057 472.899 L294.511 505.468 L289.627 505.468 L301.432 474.843 L284.835 474.843 L284.835 470.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M316.224 470.908 L334.58 470.908 L334.58 474.843 L320.506 474.843 L320.506 483.316 Q321.524 482.968 322.543 482.806 Q323.562 482.621 324.58 482.621 Q330.367 482.621 333.747 485.793 Q337.126 488.964 337.126 494.38 Q337.126 499.959 333.654 503.061 Q330.182 506.14 323.862 506.14 Q321.687 506.14 319.418 505.769 Q317.173 505.399 314.765 504.658 L314.765 499.959 Q316.849 501.093 319.071 501.649 Q321.293 502.204 323.77 502.204 Q327.774 502.204 330.112 500.098 Q332.45 497.992 332.45 494.38 Q332.45 490.769 330.112 488.663 Q327.774 486.556 323.77 486.556 Q321.895 486.556 320.02 486.973 Q318.168 487.39 316.224 488.269 L316.224 470.908 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 473.987 Q352.728 473.987 350.899 477.552 Q349.094 481.093 349.094 488.223 Q349.094 495.329 350.899 498.894 Q352.728 502.436 356.339 502.436 Q359.973 502.436 361.779 498.894 Q363.608 495.329 363.608 488.223 Q363.608 481.093 361.779 477.552 Q359.973 473.987 356.339 473.987 M356.339 470.283 Q362.149 470.283 365.205 474.89 Q368.284 479.473 368.284 488.223 Q368.284 496.95 365.205 501.556 Q362.149 506.14 356.339 506.14 Q350.529 506.14 347.45 501.556 Q344.395 496.95 344.395 488.223 Q344.395 479.473 347.45 474.89 Q350.529 470.283 356.339 470.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M256.664 243.986 L264.303 243.986 L264.303 217.62 L255.992 219.287 L255.992 215.028 L264.256 213.361 L268.932 213.361 L268.932 243.986 L276.571 243.986 L276.571 247.921 L256.664 247.921 L256.664 243.986 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M296.015 216.44 Q292.404 216.44 290.576 220.004 Q288.77 223.546 288.77 230.676 Q288.77 237.782 290.576 241.347 Q292.404 244.889 296.015 244.889 Q299.65 244.889 301.455 241.347 Q303.284 237.782 303.284 230.676 Q303.284 223.546 301.455 220.004 Q299.65 216.44 296.015 216.44 M296.015 212.736 Q301.826 212.736 304.881 217.342 Q307.96 221.926 307.96 230.676 Q307.96 239.402 304.881 244.009 Q301.826 248.592 296.015 248.592 Q290.205 248.592 287.127 244.009 Q284.071 239.402 284.071 230.676 Q284.071 221.926 287.127 217.342 Q290.205 212.736 296.015 212.736 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M326.177 216.44 Q322.566 216.44 320.737 220.004 Q318.932 223.546 318.932 230.676 Q318.932 237.782 320.737 241.347 Q322.566 244.889 326.177 244.889 Q329.811 244.889 331.617 241.347 Q333.446 237.782 333.446 230.676 Q333.446 223.546 331.617 220.004 Q329.811 216.44 326.177 216.44 M326.177 212.736 Q331.987 212.736 335.043 217.342 Q338.122 221.926 338.122 230.676 Q338.122 239.402 335.043 244.009 Q331.987 248.592 326.177 248.592 Q320.367 248.592 317.288 244.009 Q314.233 239.402 314.233 230.676 Q314.233 221.926 317.288 217.342 Q320.367 212.736 326.177 212.736 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M356.339 216.44 Q352.728 216.44 350.899 220.004 Q349.094 223.546 349.094 230.676 Q349.094 237.782 350.899 241.347 Q352.728 244.889 356.339 244.889 Q359.973 244.889 361.779 241.347 Q363.608 237.782 363.608 230.676 Q363.608 223.546 361.779 220.004 Q359.973 216.44 356.339 216.44 M356.339 212.736 Q362.149 212.736 365.205 217.342 Q368.284 221.926 368.284 230.676 Q368.284 239.402 365.205 244.009 Q362.149 248.592 356.339 248.592 Q350.529 248.592 347.45 244.009 Q344.395 239.402 344.395 230.676 Q344.395 221.926 347.45 217.342 Q350.529 212.736 356.339 212.736 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.641 4017.76,230.641 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.55 459.964,1247.06 460.533,1246.48 461.101,1245.82 461.669,1244.05 462.238,1243.25 462.806,1242.36 463.375,1241.38 463.943,1238.25 464.511,1237.11 465.08,1235.83 465.648,1233.41 466.216,1230.91 466.785,1229.33 467.353,1227.56 467.921,1225.69 468.49,1223.71 469.058,1221.58 469.626,1219.3 470.195,1216.86 470.763,1214.26 471.331,1211.5 471.9,1207.5 472.468,1203.34 473.036,1200.09 473.605,1194.56 474.173,1190.94 474.741,1187.1 475.31,1182.02 475.878,1177.72 476.446,1173.21 477.015,1167.42 477.583,1160.39 478.152,1154.06 478.72,1148.7 479.288,1143.08 479.857,1137.21 480.425,1130.09 480.993,1122.82 481.562,1116.4 482.13,1108.73 482.698,1100.82 483.267,1092.59 483.835,1085.15 484.403,1074.51 484.972,1066.8 485.54,1058.91 486.108,1050.87 486.677,1042.5 487.245,1034.06 487.813,1024.34 488.382,1015.63 488.95,1005.61 489.518,994.42 490.087,984.238 490.655,974.928 491.224,963.47 491.792,953.094 492.36,942.629 492.929,933.172 493.497,921.48 494.065,910.774 494.634,898.048 495.202,887.322 495.77,876.635 496.339,866.956 496.907,856.188 497.475,846.509 498.044,835.79 498.612,825.08 499.18,813.384 499.749,800.602 500.317,789.032 500.885,776.424 501.454,765.033 502.022,751.763 502.59,736.736 503.159,728.294 503.727,718.749 504.295,707.302 504.864,695.918 505.432,686.476 506.001,678.226 506.569,666.911 507.137,656.96 507.706,649.194 508.274,640.382 508.842,633.839 509.411,626.276 509.979,618.759 510.547,610.215 511.116,602.765 511.684,594.354 512.252,584.028 512.821,574.113 513.389,566.339 513.957,558.749 514.526,550.292 515.094,544.038 515.662,535.758 516.231,527.74 516.799,519.98 517.367,512.169 517.936,505.605 518.504,500.129 519.072,493.922 519.641,487.51 520.209,480.483 520.778,475.697 521.346,470.641 521.914,465.853 522.483,459.114 523.051,453.499 523.619,449 524.188,444.551 524.756,439.026 525.324,432.724 525.893,428.457 526.461,422.188 527.029,418.894 527.598,413.769 528.166,410.004 528.734,405.166 529.303,399.513 529.871,395.004 530.439,390.83 531.008,389.567 531.576,386.257 532.144,379.855 532.713,374.721 533.281,370.85 533.85,366.108 534.418,361.328 534.986,359.102 535.555,353.782 536.123,354.641 536.691,350.388 537.26,347.25 537.828,343.173 538.396,339.25 538.965,335.507 539.533,334.052 540.101,330.588 540.67,327.891 541.238,324.448 541.806,320.238 542.375,317.153 542.943,313.081 543.511,314.249 544.08,313.284 544.648,310.089 545.216,310.105 545.785,308.188 546.353,306.202 546.921,305.331 547.49,301.408 548.058,299.762 548.627,298.93 549.195,296.918 549.763,294.281 550.332,293.693 550.9,290.934 551.468,289.324 552.037,289.942 552.605,289.25 553.173,287.536 553.742,286.153 554.31,287.777 554.878,285.879 555.447,285.132 556.015,284.498 556.583,282.634 557.152,282.143 557.72,280.757 558.288,279.161 558.857,279.793 559.425,275.083 559.993,274.759 560.562,272.397 561.13,269.062 561.698,269.044 562.267,268.892 562.835,266.828 563.404,267.739 563.972,266.592 564.54,265.431 565.109,265.392 565.677,264.455 566.245,265.564 566.814,265.454 567.382,265.384 567.95,264.219 568.519,262.088 569.087,260.985 569.655,259.181 570.224,258.242 570.792,259.491 571.36,258.517 571.929,258.677 572.497,258.955 573.065,259.161 573.634,256.974 574.202,257.961 574.77,257.996 575.339,257.946 575.907,262 576.476,261.794 577.044,261.388 577.612,260.924 578.181,262.576 578.749,259.689 579.317,260.37 579.886,260.996 580.454,260.497 581.022,255.792 581.591,256.687 582.159,257.424 582.727,256.902 583.296,257.56 583.864,257.051 584.432,255.561 585.001,256.271 585.569,254.838 586.137,254.572 586.706,252.448 587.274,254.334 587.842,254.944 588.411,254.395 588.979,252.706 589.547,250.509 590.116,253.481 590.684,253.006 591.253,249.637 591.821,248.401 592.389,247.296 592.958,246.336 593.526,246.536 594.094,246.489 594.663,246.582 595.231,243.471 595.799,242.631 596.368,243.854 596.936,242.9 597.504,245.349 598.073,246.23 598.641,245.098 599.209,246.278 599.778,245.198 600.346,243.969 600.914,242.796 601.483,243.225 602.051,242.371 602.619,241.551 603.188,241.809 603.756,240.864 604.325,235.794 604.893,235.172 605.461,236.866 606.03,236.328 606.598,237.961 607.166,237.537 607.735,238.056 608.303,237.31 608.871,240.039 609.44,239.32 610.008,239.633 610.576,239.831 611.145,238.992 611.713,239.437 612.281,240.638 612.85,240.859 613.418,239.049 613.986,239.059 614.555,238.299 615.123,235.405 615.691,239.031 616.26,237.169 616.828,238.628 617.396,241.125 617.965,242.189 618.533,240.047 619.102,240.352 619.67,241.444 620.238,242.663 620.807,240.478 621.375,240.461 621.943,237.53 622.512,236.67 623.08,236.128 623.648,234.317 624.217,233.697 624.785,235.217 625.353,235.603 625.922,235.345 626.49,236.657 627.058,236.044 627.627,237.462 628.195,235.695 628.763,235.2 629.332,235.809 629.9,237.403 630.468,238.74 631.037,240.011 631.605,239.139 632.173,240.281 632.742,241.236 633.31,242.376 633.879,240.091 634.447,238.948 635.015,237.158 635.584,236.628 636.152,236.938 636.72,237.235 637.289,237.362 637.857,236.648 638.425,238.208 638.994,236.319 639.562,234.517 640.13,236.028 640.699,235.288 641.267,235.623 641.835,236.043 642.404,233.394 642.972,234.903 643.54,236.347 644.109,235.657 644.677,235.991 645.245,234.256 645.814,235.893 646.382,235.163 646.951,233.581 647.519,234.132 648.087,234.459 648.656,235.802 649.224,236.154 649.792,233.361 650.361,232.68 650.929,232.211 651.497,231.87 652.066,232.567 652.634,233.019 653.202,233.48 653.771,234.062 654.339,234.374 654.907,231.662 655.476,232.307 656.044,229.596 656.612,231.503 657.181,231.821 657.749,232.063 658.317,232.808 658.886,232.189 659.454,232.517 660.022,233.057 660.591,233.47 661.159,236.035 661.728,236.257 662.296,237.557 662.864,237.103 663.433,238.257 664.001,238.494 664.569,239.594 665.138,239.609 665.706,239.681 666.274,242.767 666.843,243.701 667.411,244.427 667.979,247.053 668.548,245.165 669.116,244.608 669.684,244.266 670.253,243.627 670.821,242.965 671.389,243.631 671.958,241.144 672.526,241.893 673.094,241.678 673.663,241.315 674.231,240.937 674.799,240.725 675.368,240.369 675.936,241.193 676.505,242.87 677.073,240.444 677.641,241.066 678.21,239.741 678.778,239.548 679.346,240.181 679.915,239.7 680.483,240.388 681.051,240.037 681.62,238.819 682.188,238.565 682.756,238.256 683.325,236.971 683.893,237.806 684.461,235.641 685.03,235.325 685.598,234.121 686.166,234.19 686.735,233.316 687.303,231.21 687.871,231.382 688.44,230.476 689.008,231.905 689.577,231.232 690.145,232.447 690.713,231.395 691.282,232.548 691.85,231.832 692.418,231.075 692.987,231.385 693.555,228.451 694.123,229.835 694.692,230.043 695.26,233.338 695.828,232.374 696.397,232.335 696.965,234.491 697.533,233.624 698.102,235.695 698.67,235.517 699.238,233.579 699.807,232.58 700.375,232.686 700.943,232.775 701.512,233.056 702.08,232.126 702.648,233.263 703.217,233.254 703.785,233.216 704.354,234.201 704.922,231.198 705.49,234.543 706.059,234.411 706.627,235.346 707.195,235.344 707.764,234.198 708.332,234.159 708.9,236.044 709.469,236.832 710.037,235.508 710.605,235.46 711.174,236.335 711.742,234.273 712.31,233.193 712.879,234.105 713.447,234.131 714.015,232.017 714.584,235.382 715.152,236.174 715.72,234.204 716.289,233.158 716.857,233.232 717.425,233.249 717.994,233.356 718.562,233.201 719.131,233.221 719.699,233.162 720.267,233.304 720.836,230.236 721.404,229.579 721.972,227.914 722.541,228.337 723.109,228.677 723.677,228.083 724.246,229.499 724.814,230.747 725.382,230.991 725.951,229.139 726.519,227.248 727.087,226.816 727.656,228.425 728.224,227.724 728.792,227.124 729.361,226.412 729.929,227.06 730.497,227.674 731.066,227.084 731.634,227.579 732.203,227.006 732.771,226.356 733.339,229.126 733.908,227.336 734.476,226.885 735.044,228.414 735.613,227.779 736.181,229.384 736.749,230.044 737.318,231.476 737.886,230.767 738.454,230.884 739.023,228.96 739.591,228.194 740.159,227.648 740.728,228.329 741.296,227.876 741.864,228.385 742.433,229.006 743.001,229.239 743.569,229.738 744.138,231.157 744.706,232.58 745.274,231.703 745.843,232.965 746.411,234.122 746.98,233.181 747.548,232.367 748.116,233.874 748.685,232.837 749.253,234.048 749.821,235.363 750.39,237.561 750.958,238.617 751.526,238.36 752.095,236.945 752.663,236.789 753.231,237.606 753.8,237.56 754.368,239.585 754.936,239.244 755.505,238.839 756.073,239.649 756.641,239.284 757.21,238.63 757.778,239.46 758.346,241.18 758.915,241.555 759.483,240.978 760.052,241.477 760.62,239.688 761.188,237.817 761.757,239.462 762.325,235.508 762.893,235.104 763.462,233.895 764.03,234.727 764.598,233.588 765.167,234.526 765.735,233.202 766.303,234.137 766.872,233.115 767.44,232.06 768.008,233.126 768.577,234.982 769.145,235.743 769.713,235.581 770.282,234.461 770.85,234.347 771.418,234.215 771.987,235.098 772.555,233.854 773.123,232.882 773.692,232.722 774.26,230.652 774.829,231.586 775.397,230.686 775.965,229.92 776.534,231.022 777.102,232.06 777.67,233.083 778.239,232.952 778.807,232.703 779.375,232.675 779.944,232.772 780.512,233.779 781.08,234.693 781.649,232.636 782.217,231.548 782.785,232.684 783.354,232.602 783.922,233.673 784.49,233.523 785.059,233.471 785.627,233.407 786.195,235.365 786.764,232.011 787.332,232.906 787.9,232.732 788.469,232.643 789.037,232.453 789.606,232.34 790.174,231.077 790.742,230.087 791.311,231.31 791.879,230.354 792.447,231.566 793.016,229.725 793.584,228.763 794.152,230.032 794.721,229.103 795.289,228.183 795.857,229.393 796.426,229.704 796.994,228.754 797.562,230.884 798.131,232.845 798.699,233.69 799.267,233.509 799.836,233.503 800.404,232.451 800.972,233.398 801.541,234.176 802.109,233.04 802.678,232.789 803.246,233.774 803.814,233.681 804.383,234.494 804.951,234.238 805.519,233.027 806.088,232.837 806.656,232.489 807.224,232.5 807.793,233.584 808.361,235.391 808.929,235.109 809.498,232.805 810.066,232.674 810.634,231.558 811.203,234.617 811.771,233.391 812.339,233.294 812.908,232.18 813.476,233.198 814.044,234.142 814.613,230.795 815.181,229.819 815.749,227.833 816.318,227.973 816.886,228.381 817.455,228.548 818.023,230.783 818.591,230.838 819.16,230.909 819.728,230.001 820.296,229.278 820.865,230.292 821.433,230.306 822.001,231.342 822.57,234.391 823.138,234.202 823.706,231.703 824.275,230.408 824.843,228.053 825.411,228.334 825.98,227.616 826.548,227.745 827.116,229.13 827.685,228.318 828.253,229.547 828.821,226.745 829.39,229.21 829.958,229.387 830.526,229.307 831.095,229.654 831.663,228.84 832.232,228.861 832.8,229.007 833.368,230.107 833.937,232.031 834.505,229.927 835.073,227.683 835.642,225.57 836.21,226.068 836.778,226.504 837.347,228.065 837.915,228.44 838.483,228.565 839.052,231.909 839.62,232.022 840.188,232.059 840.757,233.181 841.325,233.299 841.893,230.938 842.462,230.9 843.03,230.961 843.598,233.066 844.167,234.995 844.735,234.642 845.304,234.256 845.872,233.978 846.44,234.593 847.009,236.384 847.577,234.937 848.145,233.522 848.714,231.327 849.282,231.095 849.85,231.069 850.419,233.149 850.987,232.959 851.555,230.668 852.124,231.807 852.692,231.665 853.26,227.534 853.829,227.727 854.397,229.066 854.965,229.417 855.534,230.662 856.102,230.617 856.67,230.492 857.239,231.651 857.807,229.733 858.375,227.802 858.944,227.222 859.512,227.497 860.081,228.828 860.649,230.156 861.217,231.347 861.786,233.222 862.354,232.098 862.922,230.86 863.491,230.96 864.059,230.648 864.627,230.864 865.196,229.844 865.764,229.17 866.332,227.484 866.901,227.474 867.469,227.85 868.037,230.123 868.606,228.234 869.174,228.655 869.742,228.037 870.311,227.312 870.879,228.768 871.447,228.003 872.016,230.462 872.584,230.722 873.152,230.914 873.721,229.945 874.289,230.087 874.858,231.239 875.426,230.35 875.994,230.512 876.563,228.752 877.131,230.002 877.699,228.308 878.268,229.686 878.836,227.807 879.404,229.207 879.973,232.435 880.541,232.431 881.109,233.444 881.678,234.514 882.246,232.198 882.814,232.453 883.383,230.382 883.951,230.399 884.519,230.451 885.088,229.679 885.656,231.067 886.224,229.028 886.793,229.332 887.361,230.704 887.93,230.942 888.498,233.099 889.066,231.018 889.635,230.215 890.203,228.343 890.771,227.778 891.34,231.169 891.908,231.101 892.476,229.044 893.045,227.175 893.613,227.429 894.181,226.79 894.75,229.397 895.318,228.697 895.886,228.958 896.455,228.198 897.023,229.427 897.591,230.622 898.16,229.606 898.728,230.943 899.296,230.784 899.865,231.743 900.433,230.784 901.001,232.929 901.57,229.908 902.138,230.114 902.707,227.262 903.275,226.736 903.843,228.99 904.412,229.182 904.98,230.478 905.548,232.729 906.117,233.689 906.685,232.646 907.253,235.916 907.822,234.607 908.39,233.32 908.958,234.464 909.527,235.45 910.095,236.319 910.663,238.275 911.232,236.964 911.8,233.385 912.368,234.347 912.937,233.29 913.505,234.252 914.073,236.083 914.642,233.646 915.21,235.741 915.779,236.476 916.347,236.172 916.915,235.667 917.484,236.556 918.052,237.374 918.62,235.713 919.189,236.322 919.757,235.011 920.325,234.828 920.894,238.745 921.462,239.365 922.03,238.571 922.599,236.779 923.167,235.173 923.735,234.715 924.304,233.357 924.872,233.164 925.44,231.004 926.009,230.881 926.577,231.872 927.145,229.643 927.714,227.74 928.282,226.93 928.85,226.154 929.419,225.68 929.987,224.786 930.556,225.129 931.124,223.511 931.692,223.127 932.261,221.957 932.829,224.851 933.397,226.347 933.966,226.762 934.534,227.11 935.102,226.488 935.671,226.847 936.239,230.391 936.807,230.597 937.376,233.001 937.944,231.829 938.512,230.058 939.081,230.32 939.649,227.442 940.217,228.929 940.786,228.025 941.354,228.111 941.922,229.573 942.491,229.517 943.059,229.772 943.627,232.155 944.196,231.164 944.764,232.207 945.333,231.209 945.901,231.116 946.469,229.255 947.038,229.681 947.606,229.883 948.174,229 948.743,226.976 949.311,230.458 949.879,232.611 950.448,232.619 951.016,232.657 951.584,232.564 952.153,229.473 952.721,229.7 953.289,232.089 953.858,234.152 954.426,235.09 954.994,234.835 955.563,234.426 956.131,233.997 956.699,232.75 957.268,230.578 957.836,231.778 958.405,232.935 958.973,233.93 959.541,234.607 960.11,233.403 960.678,236.351 961.246,237.083 961.815,235.576 962.383,235.275 962.951,235.897 963.52,232.371 964.088,232.412 964.656,232.182 965.225,234.002 965.793,233.907 966.361,233.563 966.93,235.645 967.498,236.241 968.066,236.75 968.635,236.061 969.203,236.71 969.771,236.319 970.34,233.943 970.908,232.657 971.476,232.442 972.045,233.319 972.613,232.029 973.182,232.795 973.75,232.694 974.318,231.67 974.887,230.519 975.455,228.488 976.023,230.608 976.592,230.501 977.16,229.237 977.728,228.416 978.297,226.608 978.865,228.064 979.433,228.515 980.002,228.697 980.57,228.647 981.138,230.794 981.707,230.995 982.275,229.892 982.843,230.884 983.412,228.846 983.98,228.992 984.548,226.136 985.117,228.632 985.685,229.912 986.253,229.905 986.822,228.846 987.39,229.92 987.959,230.909 988.527,229.866 989.095,229.93 989.664,229.978 990.232,229.799 990.8,230.264 991.369,229.288 991.937,228.492 992.505,227.661 993.074,227.86 993.642,230.094 994.21,231.28 994.779,231.37 995.347,227.469 995.915,226.901 996.484,228.131 997.052,230.097 997.62,228.965 998.189,229.036 998.757,228.163 999.325,229.116 999.894,226.104 1000.46,224.555 1001.03,228.1 1001.6,230.433 1002.17,228.582 1002.74,228.969 1003.3,231.234 1003.87,232.228 1004.44,232.471 1005.01,230.276 1005.58,233.612 1006.15,233.58 1006.71,233.38 1007.28,232.083 1007.85,230.997 1008.42,230.855 1008.99,228.909 1009.56,228.966 1010.12,230.234 1010.69,228.247 1011.26,228.479 1011.83,230.839 1012.4,232.055 1012.97,232.093 1013.53,232.215 1014.1,234.186 1014.67,237.036 1015.24,234.641 1015.81,233.425 1016.38,236.36 1016.94,237.886 1017.51,237.382 1018.08,238.039 1018.65,236.561 1019.22,236.399 1019.79,236.859 1020.35,235.4 1020.92,234.985 1021.49,236.516 1022.06,237.083 1022.63,236.417 1023.2,236.998 1023.76,236.359 1024.33,237.119 1024.9,236.516 1025.47,235.126 1026.04,231.469 1026.61,229.266 1027.17,230.449 1027.74,229.597 1028.31,230.423 1028.88,230.454 1029.45,230.269 1030.02,231.196 1030.58,230.135 1031.15,230.381 1031.72,230.253 1032.29,229.178 1032.86,230.311 1033.43,228.197 1033.99,227.04 1034.56,226.148 1035.13,224.207 1035.7,224.762 1036.27,227.049 1036.84,227.07 1037.4,227.241 1037.97,226.518 1038.54,227.736 1039.11,231.039 1039.68,234.995 1040.25,235.659 1040.81,234.156 1041.38,232.727 1041.95,234.581 1042.52,232.4 1043.09,231.21 1043.66,234.078 1044.22,232.831 1044.79,232.515 1045.36,231.444 1045.93,231.366 1046.5,230.262 1047.07,230.244 1047.63,230.152 1048.2,230.187 1048.77,230.165 1049.34,230.038 1049.91,230.127 1050.48,231.251 1051.05,231 1051.61,231.804 1052.18,231.715 1052.75,231.504 1053.32,231.641 1053.89,231.488 1054.46,230.57 1055.02,231.582 1055.59,231.359 1056.16,231.105 1056.73,229.98 1057.3,227.841 1057.87,228.905 1058.43,229.062 1059,229.094 1059.57,228.283 1060.14,231.432 1060.71,232.271 1061.28,233.093 1061.84,231.747 1062.41,232.548 1062.98,230.091 1063.55,230.169 1064.12,228.237 1064.69,228.276 1065.25,229.448 1065.82,226.512 1066.39,226.67 1066.96,228.999 1067.53,229.342 1068.1,228.087 1068.66,228.213 1069.23,226.462 1069.8,223.876 1070.37,224.37 1070.94,225.837 1071.51,225.091 1072.07,227.605 1072.64,226.829 1073.21,229.011 1073.78,230.284 1074.35,229.4 1074.92,229.515 1075.48,229.78 1076.05,229.954 1076.62,229.212 1077.19,230.185 1077.76,230.403 1078.33,231.539 1078.89,231.5 1079.46,229.359 1080.03,230.313 1080.6,232.303 1081.17,235.294 1081.74,235.946 1082.3,237.492 1082.87,237.077 1083.44,236.498 1084.01,236.304 1084.58,236.863 1085.15,235.49 1085.71,235.158 1086.28,233.672 1086.85,233.472 1087.42,233.351 1087.99,234.312 1088.56,235.235 1089.12,234.728 1089.69,234.213 1090.26,233.962 1090.83,233.675 1091.4,232.3 1091.97,233.147 1092.53,234.917 1093.1,234.502 1093.67,232.113 1094.24,230.955 1094.81,229.935 1095.38,229.882 1095.94,228.717 1096.51,228.704 1097.08,227.811 1097.65,230.191 1098.22,232.364 1098.79,232.056 1099.35,231.912 1099.92,230.833 1100.49,230.633 1101.06,229.483 1101.63,229.363 1102.2,229.28 1102.76,230.323 1103.33,229.071 1103.9,229.16 1104.47,233.105 1105.04,234.012 1105.61,230.571 1106.17,231.602 1106.74,229.352 1107.31,226.544 1107.88,225.837 1108.45,227.22 1109.02,226.38 1109.58,227.636 1110.15,226.572 1110.72,226.805 1111.29,227.347 1111.86,225.363 1112.43,227.77 1112.99,226.793 1113.56,227.975 1114.13,228.112 1114.7,229.167 1115.27,229.344 1115.84,229.37 1116.4,227.742 1116.97,226.093 1117.54,227.39 1118.11,228.565 1118.68,228.889 1119.25,228.211 1119.81,227.374 1120.38,227.727 1120.95,228.889 1121.52,229.009 1122.09,230.198 1122.66,231.201 1123.23,233.009 1123.79,232.891 1124.36,231.477 1124.93,231.473 1125.5,231.655 1126.07,234.762 1126.64,233.386 1127.2,234.337 1127.77,234.166 1128.34,230.915 1128.91,230.643 1129.48,230.545 1130.05,231.683 1130.61,230.646 1131.18,231.579 1131.75,233.717 1132.32,233.675 1132.89,232.437 1133.46,232.228 1134.02,231.842 1134.59,231.746 1135.16,232.439 1135.73,229.245 1136.3,229.212 1136.87,229.471 1137.43,231.598 1138,230.989 1138.57,231.965 1139.14,232.003 1139.71,230.797 1140.28,228.811 1140.84,229.006 1141.41,228.211 1141.98,228.36 1142.55,228.422 1143.12,229.728 1143.69,223.847 1144.25,224.283 1144.82,225.832 1145.39,228.129 1145.96,226.431 1146.53,225.629 1147.1,228.431 1147.66,228.475 1148.23,230.709 1148.8,231.852 1149.37,232.813 1149.94,232.607 1150.51,231.446 1151.07,228.406 1151.64,227.831 1152.21,227.058 1152.78,228.445 1153.35,226.701 1153.92,227.196 1154.48,226.641 1155.05,224.834 1155.62,225.154 1156.19,223.387 1156.76,225.018 1157.33,225.6 1157.89,224.728 1158.46,226.485 1159.03,226.748 1159.6,227.126 1160.17,229.561 1160.74,229.769 1161.3,228.95 1161.87,228.185 1162.44,225.313 1163.01,223.944 1163.58,226.895 1164.15,225.376 1164.71,226.881 1165.28,228.398 1165.85,225.694 1166.42,229.35 1166.99,230.521 1167.56,230.754 1168.12,230.879 1168.69,231.799 1169.26,231.962 1169.83,230.974 1170.4,229.92 1170.97,229.162 1171.53,229.53 1172.1,230.822 1172.67,229.633 1173.24,230.865 1173.81,229.125 1174.38,229.288 1174.94,229.623 1175.51,228.023 1176.08,227.224 1176.65,227.845 1177.22,230.468 1177.79,232.853 1178.35,231.701 1178.92,232.71 1179.49,233.766 1180.06,232.649 1180.63,235.604 1181.2,236.327 1181.76,234.93 1182.33,233.593 1182.9,236.227 1183.47,237.005 1184.04,235.687 1184.61,234.466 1185.17,233.275 1185.74,232.376 1186.31,232.433 1186.88,232.284 1187.45,231.331 1188.02,231.344 1188.58,232.362 1189.15,230.249 1189.72,233.551 1190.29,234.555 1190.86,235.136 1191.43,234.839 1192,236.702 1192.56,237.485 1193.13,239.288 1193.7,238.65 1194.27,239.198 1194.84,238.544 1195.41,238.214 1195.97,236.585 1196.54,237.31 1197.11,234.975 1197.68,234.695 1198.25,236.61 1198.82,234.024 1199.38,235.73 1199.95,234.348 1200.52,234.159 1201.09,233.138 1201.66,233.869 1202.23,234.629 1202.79,233.28 1203.36,234.167 1203.93,234.858 1204.5,233.556 1205.07,233.347 1205.64,232.993 1206.2,233.913 1206.77,231.599 1207.34,231.427 1207.91,231.482 1208.48,232.41 1209.05,232.102 1209.61,228.888 1210.18,229.061 1210.75,230.228 1211.32,230.265 1211.89,231.234 1212.46,230.092 1213.02,229.942 1213.59,229.083 1214.16,229.153 1214.73,233.197 1215.3,233.068 1215.87,233.915 1216.43,233.555 1217,233.114 1217.57,232.705 1218.14,231.469 1218.71,231.232 1219.28,232.256 1219.84,231.207 1220.41,234.059 1220.98,233.662 1221.55,232.219 1222.12,232.176 1222.69,233.121 1223.25,232.732 1223.82,232.637 1224.39,231.511 1224.96,233.377 1225.53,231.967 1226.1,233.145 1226.66,236.226 1227.23,235.573 1227.8,234.065 1228.37,234.523 1228.94,233.845 1229.51,230.618 1230.07,231.357 1230.64,230.989 1231.21,231.889 1231.78,229.596 1232.35,226.306 1232.92,226.565 1233.48,224.613 1234.05,224.935 1234.62,225.315 1235.19,226.585 1235.76,225.799 1236.33,224.994 1236.89,227.134 1237.46,228.239 1238.03,227.229 1238.6,227.512 1239.17,229.731 1239.74,231.479 1240.3,231.313 1240.87,226.904 1241.44,226.283 1242.01,225.78 1242.58,226.957 1243.15,228.263 1243.71,228.336 1244.28,226.466 1244.85,226.582 1245.42,225.664 1245.99,225.871 1246.56,224.265 1247.12,224.63 1247.69,225.968 1248.26,228.403 1248.83,224.282 1249.4,225.938 1249.97,225.175 1250.53,223.425 1251.1,226.052 1251.67,228.416 1252.24,227.597 1252.81,227.96 1253.38,228.405 1253.94,226.701 1254.51,226.172 1255.08,225.577 1255.65,225.945 1256.22,225.393 1256.79,227.807 1257.35,228.186 1257.92,228.445 1258.49,227.831 1259.06,228.116 1259.63,228.398 1260.2,231.817 1260.76,230.821 1261.33,232.061 1261.9,231.948 1262.47,231.91 1263.04,232.771 1263.61,232.563 1264.18,232.469 1264.74,234.508 1265.31,234.477 1265.88,234.189 1266.45,233.011 1267.02,232.096 1267.59,232.08 1268.15,231.046 1268.72,232.226 1269.29,229.882 1269.86,231.177 1270.43,232.124 1271,231.985 1271.56,230.972 1272.13,230.146 1272.7,231.506 1273.27,231.475 1273.84,232.47 1274.41,230.456 1274.97,232.612 1275.54,232.455 1276.11,233.28 1276.68,233.141 1277.25,230.986 1277.82,236.035 1278.38,235.85 1278.95,238.639 1279.52,238.039 1280.09,237.624 1280.66,238.282 1281.23,238.662 1281.79,236.193 1282.36,234.67 1282.93,235.517 1283.5,235.433 1284.07,235.071 1284.64,233.492 1285.2,233.183 1285.77,233.08 1286.34,233.648 1286.91,233.254 1287.48,236.146 1288.05,232.438 1288.61,233.011 1289.18,232.675 1289.75,230.653 1290.32,228.258 1290.89,228.095 1291.46,228.19 1292.02,227.196 1292.59,225.365 1293.16,224.637 1293.73,222.742 1294.3,224.19 1294.87,225.344 1295.43,226.648 1296,226.965 1296.57,227.151 1297.14,226.396 1297.71,229.804 1298.28,232.072 1298.84,231.236 1299.41,231.343 1299.98,232.01 1300.55,231.806 1301.12,234.828 1301.69,235.434 1302.25,234.954 1302.82,235.176 1303.39,234.72 1303.96,233.247 1304.53,233.873 1305.1,231.677 1305.66,231.613 1306.23,230.543 1306.8,231.413 1307.37,232.187 1307.94,235.125 1308.51,234.719 1309.07,234.219 1309.64,233.112 1310.21,232.779 1310.78,233.57 1311.35,234.385 1311.92,234.88 1312.48,235.674 1313.05,236.173 1313.62,235.751 1314.19,236.352 1314.76,236.067 1315.33,233.566 1315.89,233.315 1316.46,229.838 1317.03,229.665 1317.6,229.597 1318.17,229.577 1318.74,229.492 1319.3,228.432 1319.87,228.495 1320.44,229.957 1321.01,229.896 1321.58,227.659 1322.15,226.957 1322.71,226.349 1323.28,226.602 1323.85,225.694 1324.42,225.819 1324.99,225.046 1325.56,224.354 1326.12,226.044 1326.69,224.369 1327.26,226.789 1327.83,227.961 1328.4,229.373 1328.97,229.536 1329.53,230.677 1330.1,230.588 1330.67,231.672 1331.24,230.766 1331.81,229.837 1332.38,227.883 1332.94,229.017 1333.51,228.097 1334.08,228.235 1334.65,227.57 1335.22,226.638 1335.79,226.95 1336.36,229.12 1336.92,228.323 1337.49,227.417 1338.06,228.569 1338.63,226.673 1339.2,228.889 1339.77,228.073 1340.33,227.218 1340.9,228.573 1341.47,226.608 1342.04,230.05 1342.61,230.384 1343.18,230.479 1343.74,229.497 1344.31,229.768 1344.88,227.922 1345.45,228.971 1346.02,227.042 1346.59,229.339 1347.15,230.332 1347.72,231.551 1348.29,230.524 1348.86,231.361 1349.43,230.206 1350,230.521 1350.56,230.434 1351.13,230.381 1351.7,225.461 1352.27,226.92 1352.84,228.228 1353.41,229.48 1353.97,227.807 1354.54,227.931 1355.11,227.114 1355.68,225.412 1356.25,224.907 1356.82,225.532 1357.38,224.037 1357.95,223.689 1358.52,223.469 1359.09,223.86 1359.66,225.531 1360.23,226.83 1360.79,226.273 1361.36,225.706 1361.93,226.382 1362.5,227.922 1363.07,230.388 1363.64,231.548 1364.2,231.544 1364.77,230.504 1365.34,232.862 1365.91,233.763 1366.48,232.522 1367.05,235.673 1367.61,236.649 1368.18,236.393 1368.75,235.24 1369.32,233.086 1369.89,234.146 1370.46,234.236 1371.02,231.891 1371.59,233.868 1372.16,231.532 1372.73,230.395 1373.3,229.454 1373.87,229.331 1374.43,228.269 1375,227.403 1375.57,229.804 1376.14,232.215 1376.71,235.014 1377.28,235.817 1377.84,234.506 1378.41,238.375 1378.98,236.006 1379.55,236.773 1380.12,236.154 1380.69,232.701 1381.25,232.831 1381.82,232.799 1382.39,230.741 1382.96,235.078 1383.53,234.764 1384.1,234.459 1384.66,231.322 1385.23,228.048 1385.8,228.276 1386.37,230.626 1386.94,230.568 1387.51,230.614 1388.07,229.737 1388.64,231.936 1389.21,231.852 1389.78,229.849 1390.35,229.912 1390.92,229.857 1391.48,226.845 1392.05,226.122 1392.62,225.478 1393.19,224.992 1393.76,225.529 1394.33,225.061 1394.89,225.304 1395.46,225.749 1396.03,227.881 1396.6,228.145 1397.17,227.56 1397.74,227.828 1398.3,228.059 1398.87,225.305 1399.44,226.631 1400.01,228.022 1400.58,227.189 1401.15,226.522 1401.71,223.835 1402.28,223.091 1402.85,225.959 1403.42,228.388 1403.99,227.574 1404.56,226.731 1405.13,227.294 1405.69,229.694 1406.26,227.913 1406.83,227.423 1407.4,227.833 1407.97,227.196 1408.54,229.573 1409.1,231.864 1409.67,231.879 1410.24,231.873 1410.81,231.736 1411.38,229.732 1411.95,227.963 1412.51,228.311 1413.08,232.922 1413.65,231.037 1414.22,232.236 1414.79,235.493 1415.36,236.243 1415.92,237.071 1416.49,235.527 1417.06,236.326 1417.63,235.956 1418.2,235.607 1418.77,234.38 1419.33,234.36 1419.9,233.154 1420.47,231.992 1421.04,234.073 1421.61,235.102 1422.18,234.64 1422.74,233.304 1423.31,233.259 1423.88,235.09 1424.45,236.956 1425.02,234.422 1425.59,234.269 1426.15,235.056 1426.72,235.874 1427.29,234.175 1427.86,234.887 1428.43,233.546 1429,231.207 1429.56,231.968 1430.13,232.783 1430.7,232.57 1431.27,235.354 1431.84,236.159 1432.41,237.722 1432.97,237.252 1433.54,237.883 1434.11,238.236 1434.68,236.279 1435.25,237.96 1435.82,238.316 1436.38,236.698 1436.95,235.132 1437.52,236.928 1438.09,236.57 1438.66,233.892 1439.23,233.648 1439.79,234.432 1440.36,233.152 1440.93,233.917 1441.5,234.509 1442.07,234.463 1442.64,234.322 1443.2,233.989 1443.77,235.835 1444.34,235.347 1444.91,235.934 1445.48,233.379 1446.05,233.019 1446.61,233.696 1447.18,233.324 1447.75,231.78 1448.32,230.629 1448.89,228.493 1449.46,228.4 1450.02,229.528 1450.59,228.603 1451.16,228.588 1451.73,227.573 1452.3,225.626 1452.87,222.52 1453.43,223.894 1454,227.326 1454.57,231.591 1455.14,231.502 1455.71,230.241 1456.28,231.272 1456.84,230.114 1457.41,229.974 1457.98,228.801 1458.55,226.977 1459.12,228.136 1459.69,227.119 1460.25,226.239 1460.82,226.306 1461.39,227.705 1461.96,226.885 1462.53,227.056 1463.1,230.478 1463.66,230.577 1464.23,229.538 1464.8,230.277 1465.37,232.356 1465.94,233.27 1466.51,229.138 1467.07,230.258 1467.64,230.297 1468.21,231.172 1468.78,230.186 1469.35,230.116 1469.92,232.237 1470.48,232.108 1471.05,233.043 1471.62,232.933 1472.19,233.599 1472.76,232.204 1473.33,233.061 1473.89,231.769 1474.46,229.574 1475.03,226.462 1475.6,225.816 1476.17,227.069 1476.74,228.361 1477.31,229.443 1477.87,227.44 1478.44,225.66 1479.01,224.885 1479.58,224.514 1480.15,225.848 1480.72,222.098 1481.28,224.681 1481.85,223.203 1482.42,223.927 1482.99,225.402 1483.56,223.582 1484.13,225.137 1484.69,223.424 1485.26,225.134 1485.83,227.788 1486.4,226.05 1486.97,224.591 1487.54,222.885 1488.1,224.699 1488.67,227.2 1489.24,226.592 1489.81,229.043 1490.38,229.174 1490.95,229.416 1491.51,230.649 1492.08,229.715 1492.65,229.054 1493.22,230.172 1493.79,231.305 1494.36,230.397 1494.92,230.605 1495.49,229.676 1496.06,228.857 1496.63,227.906 1497.2,227.269 1497.77,229.501 1498.33,229.571 1498.9,231.647 1499.47,232.707 1500.04,234.739 1500.61,234.482 1501.18,234.265 1501.74,235.059 1502.31,236.908 1502.88,236.337 1503.45,235.094 1504.02,234.905 1504.59,233.804 1505.15,232.728 1505.72,231.663 1506.29,232.714 1506.86,230.69 1507.43,231.702 1508,231.72 1508.56,233.634 1509.13,234.55 1509.7,234.348 1510.27,236.27 1510.84,236.865 1511.41,235.388 1511.97,234.996 1512.54,234.759 1513.11,234.502 1513.68,234.215 1514.25,233.177 1514.82,233.877 1515.38,233.631 1515.95,233.327 1516.52,232.282 1517.09,235.883 1517.66,236.444 1518.23,236.968 1518.79,237.482 1519.36,237.02 1519.93,235.555 1520.5,234.337 1521.07,234.782 1521.64,237.426 1522.2,235.655 1522.77,235.402 1523.34,236.112 1523.91,236.675 1524.48,237.276 1525.05,236.754 1525.61,236.162 1526.18,233.765 1526.75,234.69 1527.32,233.08 1527.89,234.785 1528.46,235.351 1529.02,234.987 1529.59,233.487 1530.16,234.241 1530.73,235.93 1531.3,236.392 1531.87,232.803 1532.43,230.242 1533,229.94 1533.57,229.836 1534.14,228.862 1534.71,228.674 1535.28,225.633 1535.84,226.703 1536.41,226.816 1536.98,227.852 1537.55,227.137 1538.12,227.13 1538.69,227.392 1539.25,225.231 1539.82,225.534 1540.39,225.672 1540.96,226.86 1541.53,226.914 1542.1,225.752 1542.66,222.75 1543.23,221.258 1543.8,222.067 1544.37,220.328 1544.94,219.895 1545.51,220.758 1546.08,223.577 1546.64,223.934 1547.21,225.467 1547.78,224.695 1548.35,224.907 1548.92,224.436 1549.49,224.659 1550.05,224.026 1550.62,226.485 1551.19,228.939 1551.76,228.969 1552.33,225.91 1552.9,226.188 1553.46,228.775 1554.03,228.952 1554.6,230.053 1555.17,231.16 1555.74,231.254 1556.31,231.323 1556.87,228.247 1557.44,227.427 1558.01,228.569 1558.58,230.724 1559.15,230.725 1559.72,227.701 1560.28,228.864 1560.85,230.025 1561.42,230.392 1561.99,232.626 1562.56,231.565 1563.13,232.515 1563.69,234.493 1564.26,233.403 1564.83,235.424 1565.4,237.207 1565.97,236.659 1566.54,237.035 1567.1,234.762 1567.67,235.444 1568.24,235.991 1568.81,237.718 1569.38,238.389 1569.95,237.696 1570.51,237.112 1571.08,235.444 1571.65,236.027 1572.22,235.537 1572.79,236.301 1573.36,236.782 1573.92,236.3 1574.49,236.864 1575.06,234.264 1575.63,233.856 1576.2,233.524 1576.77,233.176 1577.33,232.921 1577.9,232.874 1578.47,231.531 1579.04,231.429 1579.61,234.531 1580.18,235.25 1580.74,234.789 1581.31,234.529 1581.88,234.145 1582.45,233.928 1583.02,235.64 1583.59,231.953 1584.15,230.64 1584.72,232.687 1585.29,230.408 1585.86,229.065 1586.43,229.991 1587,228.807 1587.56,231.731 1588.13,229.501 1588.7,229.467 1589.27,226.25 1589.84,226.32 1590.41,226.593 1590.97,226.555 1591.54,228.356 1592.11,230.465 1592.68,230.501 1593.25,232.465 1593.82,232.206 1594.38,228.866 1594.95,226.896 1595.52,228.01 1596.09,231.495 1596.66,233.018 1597.23,229.578 1597.79,229.566 1598.36,229.482 1598.93,228.372 1599.5,230.382 1600.07,232.317 1600.64,232.067 1601.2,229.572 1601.77,229.63 1602.34,228.603 1602.91,227.552 1603.48,228.742 1604.05,228.898 1604.61,227.865 1605.18,228.153 1605.75,227.424 1606.32,228.553 1606.89,227.559 1607.46,228.539 1608.02,228.737 1608.59,230.984 1609.16,230.764 1609.73,233.598 1610.3,234.493 1610.87,233.975 1611.43,234.598 1612,236.439 1612.57,236.861 1613.14,238.142 1613.71,235.397 1614.28,233.99 1614.84,234.828 1615.41,233.321 1615.98,232.989 1616.55,230.629 1617.12,230.323 1617.69,230.254 1618.26,229.23 1618.82,228.082 1619.39,227.158 1619.96,226.598 1620.53,224.931 1621.1,224.239 1621.67,225.448 1622.23,223.787 1622.8,224.218 1623.37,222.556 1623.94,220.982 1624.51,222.76 1625.08,224.446 1625.64,225.234 1626.21,225.795 1626.78,226.205 1627.35,226.556 1627.92,228.909 1628.49,226.611 1629.05,228.663 1629.62,230.681 1630.19,232.678 1630.76,232.474 1631.33,233.412 1631.9,233.166 1632.46,231.948 1633.03,232.76 1633.6,232.588 1634.17,235.408 1634.74,235.041 1635.31,234.813 1635.87,234.267 1636.44,234.056 1637.01,233.773 1637.58,231.368 1638.15,229.141 1638.72,231.327 1639.28,229.072 1639.85,228.022 1640.42,224.922 1640.99,224.378 1641.56,226.898 1642.13,226.017 1642.69,227.41 1643.26,229.46 1643.83,228.518 1644.4,229.744 1644.97,231.832 1645.54,235.886 1646.1,237.549 1646.67,237.045 1647.24,237.545 1647.81,236.013 1648.38,236.364 1648.95,236.856 1649.51,234.339 1650.08,231.73 1650.65,231.581 1651.22,229.547 1651.79,230.552 1652.36,230.707 1652.92,231.79 1653.49,230.517 1654.06,229.541 1654.63,228.581 1655.2,225.798 1655.77,226.376 1656.33,225.359 1656.9,228.105 1657.47,228.253 1658.04,226.501 1658.61,226.699 1659.18,229.089 1659.74,228.241 1660.31,228.595 1660.88,228.713 1661.45,228.674 1662.02,230.045 1662.59,228.071 1663.15,227.15 1663.72,227.104 1664.29,228.365 1664.86,229.403 1665.43,229.59 1666,230.754 1666.56,230.709 1667.13,231.598 1667.7,232.563 1668.27,231.439 1668.84,231.403 1669.41,230.259 1669.97,230.256 1670.54,230.449 1671.11,231.403 1671.68,231.354 1672.25,231.286 1672.82,229.045 1673.38,230.257 1673.95,230.062 1674.52,233.113 1675.09,230.625 1675.66,230.437 1676.23,228.527 1676.79,227.672 1677.36,225.935 1677.93,226.393 1678.5,226.476 1679.07,226.689 1679.64,225.943 1680.2,228.374 1680.77,229.566 1681.34,230.626 1681.91,232.62 1682.48,231.713 1683.05,232.809 1683.61,232.812 1684.18,230.619 1684.75,229.594 1685.32,229.763 1685.89,231.959 1686.46,229.819 1687.02,228.667 1687.59,228.865 1688.16,229.934 1688.73,228.391 1689.3,228.507 1689.87,228.908 1690.44,226.023 1691,224.295 1691.57,224.676 1692.14,226.271 1692.71,226.724 1693.28,227.099 1693.85,228.633 1694.41,229.864 1694.98,230.985 1695.55,230.855 1696.12,230.796 1696.69,230.733 1697.26,229.639 1697.82,231.892 1698.39,233.983 1698.96,238.037 1699.53,238.434 1700.1,236.034 1700.67,235.726 1701.23,233.569 1701.8,234.685 1702.37,233.533 1702.94,233.323 1703.51,234.385 1704.08,233.116 1704.64,233.79 1705.21,233.7 1705.78,232.507 1706.35,229.23 1706.92,226.556 1707.49,225.004 1708.05,226.583 1708.62,228.098 1709.19,228.045 1709.76,229.353 1710.33,228.442 1710.9,228.396 1711.46,228.411 1712.03,225.537 1712.6,223.881 1713.17,224.381 1713.74,224.879 1714.31,224.559 1714.87,225.248 1715.44,227.808 1716.01,230.316 1716.58,231.447 1717.15,232.545 1717.72,233.458 1718.28,234.438 1718.85,234.156 1719.42,232.932 1719.99,233.763 1720.56,231.508 1721.13,231.205 1721.69,229.127 1722.26,229.444 1722.83,228.584 1723.4,228.592 1723.97,227.765 1724.54,230.358 1725.1,230.619 1725.67,229.7 1726.24,229.876 1726.81,229.172 1727.38,227.568 1727.95,228.901 1728.51,228.872 1729.08,229.161 1729.65,229.113 1730.22,230.484 1730.79,230.518 1731.36,229.515 1731.92,230.608 1732.49,230.642 1733.06,232.75 1733.63,232.796 1734.2,231.987 1734.77,229.823 1735.33,228.923 1735.9,230.327 1736.47,227.29 1737.04,227.671 1737.61,229.179 1738.18,230.351 1738.74,231.524 1739.31,231.563 1739.88,230.493 1740.45,229.287 1741.02,227.487 1741.59,225.79 1742.15,226.262 1742.72,228.715 1743.29,229.96 1743.86,230.026 1744.43,232.29 1745,232.167 1745.56,233.293 1746.13,234.153 1746.7,234.03 1747.27,234.885 1747.84,235.787 1748.41,234.34 1748.97,234.237 1749.54,234.04 1750.11,234.92 1750.68,232.619 1751.25,233.489 1751.82,232.072 1752.38,231.232 1752.95,232.247 1753.52,232.314 1754.09,232.272 1754.66,233.259 1755.23,233.185 1755.79,233.992 1756.36,233.795 1756.93,234.559 1757.5,232.263 1758.07,234.392 1758.64,234.321 1759.21,231.782 1759.77,233.547 1760.34,234.489 1760.91,235.163 1761.48,234.875 1762.05,234.881 1762.62,236.724 1763.18,237.551 1763.75,235.911 1764.32,237.614 1764.89,237.909 1765.46,238.288 1766.03,238.629 1766.59,236.945 1767.16,236.354 1767.73,236.933 1768.3,236.17 1768.87,235.731 1769.44,236.153 1770,234.56 1770.57,235.312 1771.14,236.751 1771.71,236.037 1772.28,235.411 1772.85,235.944 1773.41,233.412 1773.98,232.097 1774.55,231.605 1775.12,232.467 1775.69,230.203 1776.26,227.915 1776.82,226.965 1777.39,225.985 1777.96,225.196 1778.53,226.287 1779.1,229.263 1779.67,228.132 1780.23,228.177 1780.8,227.147 1781.37,227.369 1781.94,226.508 1782.51,224.655 1783.08,222.845 1783.64,222.163 1784.21,225.815 1784.78,225.87 1785.35,223.058 1785.92,224.316 1786.49,224.825 1787.05,225.02 1787.62,226.26 1788.19,227.487 1788.76,227.567 1789.33,226.751 1789.9,225.892 1790.46,226.878 1791.03,226.948 1791.6,228.245 1792.17,225.249 1792.74,226.604 1793.31,225.993 1793.87,227.506 1794.44,227.78 1795.01,227.996 1795.58,229.197 1796.15,228.452 1796.72,229.557 1797.28,230.793 1797.85,229.76 1798.42,228.729 1798.99,226.718 1799.56,224.74 1800.13,223.009 1800.69,220.374 1801.26,223.232 1801.83,223.782 1802.4,225.271 1802.97,226.638 1803.54,226.902 1804.1,226.165 1804.67,225.725 1805.24,225.225 1805.81,226.688 1806.38,232.384 1806.95,234.166 1807.51,234.051 1808.08,232.804 1808.65,234.89 1809.22,235.847 1809.79,235.649 1810.36,235.44 1810.92,237.176 1811.49,236.835 1812.06,237.548 1812.63,237.104 1813.2,235.661 1813.77,234.183 1814.33,233.7 1814.9,233.55 1815.47,233.283 1816.04,233.054 1816.61,231.89 1817.18,232.832 1817.74,232.855 1818.31,234.888 1818.88,233.471 1819.45,232.32 1820.02,232.306 1820.59,233.247 1821.15,232.009 1821.72,231.684 1822.29,231.518 1822.86,231.477 1823.43,231.581 1824,232.26 1824.56,232.259 1825.13,231.94 1825.7,231.649 1826.27,229.382 1826.84,230.631 1827.41,227.6 1827.97,227.796 1828.54,226.084 1829.11,228.411 1829.68,228.617 1830.25,229.807 1830.82,227.743 1831.39,229.071 1831.95,230.166 1832.52,232.325 1833.09,232.325 1833.66,232.431 1834.23,236.563 1834.8,236.259 1835.36,234.801 1835.93,233.246 1836.5,234.084 1837.07,232.906 1837.64,232.744 1838.21,231.416 1838.77,230.385 1839.34,229.204 1839.91,228.22 1840.48,229.708 1841.05,229.841 1841.62,226.878 1842.18,227.374 1842.75,228.714 1843.32,228.563 1843.89,227.489 1844.46,227.694 1845.03,226.897 1845.59,228.926 1846.16,230.069 1846.73,231.146 1847.3,231.265 1847.87,228.954 1848.44,229.097 1849,231.066 1849.57,227.904 1850.14,229.014 1850.71,229.091 1851.28,226.176 1851.85,227.405 1852.41,227.871 1852.98,228.251 1853.55,229.502 1854.12,229.484 1854.69,230.555 1855.26,229.418 1855.82,229.534 1856.39,229.761 1856.96,229.695 1857.53,229.678 1858.1,229.652 1858.67,228.762 1859.23,229.101 1859.8,228.351 1860.37,227.486 1860.94,227.801 1861.51,228.224 1862.08,227.783 1862.64,231.226 1863.21,233.12 1863.78,232.914 1864.35,230.791 1864.92,232.996 1865.49,232.892 1866.05,231.695 1866.62,231.716 1867.19,232.776 1867.76,231.517 1868.33,230.596 1868.9,231.849 1869.46,228.837 1870.03,227.936 1870.6,227.215 1871.17,229.53 1871.74,230.704 1872.31,233.71 1872.87,234.403 1873.44,234.418 1874.01,233.12 1874.58,233.997 1875.15,233.86 1875.72,231.637 1876.28,230.504 1876.85,227.417 1877.42,227.642 1877.99,229.854 1878.56,229.854 1879.13,229.118 1879.69,232.414 1880.26,235.404 1880.83,236.334 1881.4,236.874 1881.97,236.569 1882.54,236.127 1883.1,234.629 1883.67,233.233 1884.24,234.153 1884.81,233.865 1885.38,233.612 1885.95,234.487 1886.51,234.33 1887.08,234.119 1887.65,231.935 1888.22,232.049 1888.79,231.998 1889.36,230.985 1889.92,229.828 1890.49,229.967 1891.06,230.043 1891.63,229.954 1892.2,228.841 1892.77,229.919 1893.33,229.892 1893.9,228.952 1894.47,230.269 1895.04,231.263 1895.61,228.214 1896.18,229.312 1896.74,228.591 1897.31,228.748 1897.88,227.858 1898.45,226.967 1899.02,225.293 1899.59,226.722 1900.16,227.136 1900.72,229.369 1901.29,231.535 1901.86,230.396 1902.43,230.444 1903,231.445 1903.57,231.404 1904.13,231.188 1904.7,232.335 1905.27,232.201 1905.84,228.994 1906.41,230.09 1906.98,228.039 1907.54,225.498 1908.11,225.731 1908.68,225.068 1909.25,224.459 1909.82,226.075 1910.39,224.511 1910.95,227.274 1911.52,225.564 1912.09,225.967 1912.66,223.158 1913.23,224.883 1913.8,226.254 1914.36,227.686 1914.93,225.949 1915.5,228.415 1916.07,229.839 1916.64,229.131 1917.21,229.543 1917.77,228.662 1918.34,233.101 1918.91,232.249 1919.48,233.442 1920.05,234.349 1920.62,236.086 1921.18,237.033 1921.75,234.489 1922.32,234.317 1922.89,231.95 1923.46,232.932 1924.03,230.977 1924.59,231.988 1925.16,234.003 1925.73,232.603 1926.3,233.442 1926.87,235.615 1927.44,235.257 1928,235.836 1928.57,234.496 1929.14,235.485 1929.71,236.335 1930.28,234.946 1930.85,234.275 1931.41,232.993 1931.98,235.98 1932.55,237.77 1933.12,236.216 1933.69,236.009 1934.26,236.743 1934.82,235.449 1935.39,236.131 1935.96,235.922 1936.53,233.36 1937.1,233.934 1937.67,233.83 1938.23,232.647 1938.8,231.551 1939.37,230.567 1939.94,231.717 1940.51,231.64 1941.08,232.449 1941.64,232.323 1942.21,231.054 1942.78,231.795 1943.35,233.71 1943.92,232.342 1944.49,233.158 1945.05,233.77 1945.62,233.467 1946.19,233.233 1946.76,232.886 1947.33,232.51 1947.9,231.377 1948.46,230.198 1949.03,226.929 1949.6,227.246 1950.17,226.247 1950.74,226.531 1951.31,227.845 1951.87,227.923 1952.44,229.018 1953.01,229.173 1953.58,229.255 1954.15,225.03 1954.72,224.41 1955.28,224.711 1955.85,225.057 1956.42,223.476 1956.99,225.106 1957.56,226.489 1958.13,225.827 1958.69,227.013 1959.26,226.352 1959.83,228.668 1960.4,228.732 1960.97,229.544 1961.54,233.677 1962.1,233.454 1962.67,234.094 1963.24,231.789 1963.81,232.7 1964.38,232.559 1964.95,230.245 1965.51,229.146 1966.08,229.439 1966.65,228.422 1967.22,227.529 1967.79,231.943 1968.36,231.953 1968.92,231.781 1969.49,230.702 1970.06,230.8 1970.63,233.846 1971.2,233.651 1971.77,233.458 1972.34,229.99 1972.9,230.943 1973.47,230.83 1974.04,229.993 1974.61,230.045 1975.18,231.096 1975.75,229.992 1976.31,231.724 1976.88,231.513 1977.45,230.451 1978.02,228.591 1978.59,227.719 1979.16,230.857 1979.72,230.995 1980.29,229.925 1980.86,230.996 1981.43,230.112 1982,230.062 1982.57,230.328 1983.13,229.219 1983.7,231.162 1984.27,232.077 1984.84,233.881 1985.41,232.614 1985.98,230.463 1986.54,229.555 1987.11,228.68 1987.68,226.642 1988.25,228.935 1988.82,231.09 1989.39,231.829 1989.95,232.833 1990.52,233.636 1991.09,233.369 1991.66,234.282 1992.23,233.022 1992.8,231.743 1993.36,231.445 1993.93,231.396 1994.5,233.414 1995.07,235.236 1995.64,231.975 1996.21,230.86 1996.77,230.824 1997.34,231.904 1997.91,230.95 1998.48,231.742 1999.05,231.818 1999.62,231.412 2000.18,232.411 2000.75,233.117 2001.32,232.787 2001.89,229.455 2002.46,229.486 2003.03,228.459 2003.59,228.45 2004.16,230.716 2004.73,231.692 2005.3,231.37 2005.87,232.25 2006.44,232.988 2007,232.885 2007.57,230.775 2008.14,233.902 2008.71,232.526 2009.28,232.216 2009.85,231.903 2010.41,231.815 2010.98,231.791 2011.55,231.729 2012.12,231.547 2012.69,230.275 2013.26,233.39 2013.82,234.021 2014.39,233.822 2014.96,232.594 2015.53,234.418 2016.1,233.954 2016.67,232.586 2017.23,232.339 2017.8,231.091 2018.37,231.159 2018.94,231.062 2019.51,229.841 2020.08,227.802 2020.64,230.349 2021.21,230.192 2021.78,231.145 2022.35,232.099 2022.92,233.006 2023.49,233.677 2024.05,232.262 2024.62,232.05 2025.19,233.025 2025.76,235.834 2026.33,231.299 2026.9,231.394 2027.46,230.231 2028.03,230.055 2028.6,229.043 2029.17,230.114 2029.74,230.315 2030.31,230.025 2030.87,228.623 2031.44,229.951 2032.01,229.59 2032.58,228.486 2033.15,229.399 2033.72,232.585 2034.28,232.6 2034.85,233.427 2035.42,232.116 2035.99,231.967 2036.56,230.875 2037.13,230.679 2037.69,232.799 2038.26,232.486 2038.83,233.216 2039.4,231.645 2039.97,231.461 2040.54,231.434 2041.11,231.16 2041.67,230.917 2042.24,232.781 2042.81,233.608 2043.38,232.146 2043.95,233.188 2044.52,231.76 2045.08,229.658 2045.65,233.862 2046.22,234.405 2046.79,233.953 2047.36,233.573 2047.93,233.251 2048.49,230.768 2049.06,229.475 2049.63,229.303 2050.2,228.411 2050.77,227.342 2051.34,227.627 2051.9,226.776 2052.47,226.914 2053.04,227.108 2053.61,225.28 2054.18,225.448 2054.75,224.679 2055.31,225.096 2055.88,226.265 2056.45,226.562 2057.02,224.677 2057.59,226.176 2058.16,227.331 2058.72,228.627 2059.29,228.618 2059.86,230.608 2060.43,230.339 2061,227.159 2061.57,227.58 2062.13,227.53 2062.7,229.833 2063.27,229.191 2063.84,230.398 2064.41,229.409 2064.98,229.323 2065.54,228.256 2066.11,227.424 2066.68,227.665 2067.25,225.732 2067.82,224.97 2068.39,226.164 2068.95,227.404 2069.52,226.551 2070.09,227.744 2070.66,227.071 2071.23,227.288 2071.8,229.759 2072.36,229.769 2072.93,230.074 2073.5,230.118 2074.07,229.019 2074.64,229.023 2075.21,229.069 2075.77,229.299 2076.34,229.455 2076.91,230.391 2077.48,229.606 2078.05,229.451 2078.62,228.424 2079.18,230.638 2079.75,231.368 2080.32,231.262 2080.89,230.177 2081.46,227.092 2082.03,229.433 2082.59,227.304 2083.16,226.596 2083.73,228.927 2084.3,226.986 2084.87,227.473 2085.44,228.726 2086,230.729 2086.57,231.828 2087.14,231.807 2087.71,229.527 2088.28,229.639 2088.85,230.998 2089.41,229.896 2089.98,230.943 2090.55,229.955 2091.12,231.025 2091.69,232.057 2092.26,231.064 2092.82,232.158 2093.39,233.164 2093.96,231.964 2094.53,230.839 2095.1,228.983 2095.67,231.285 2096.23,231.461 2096.8,231.469 2097.37,233.388 2097.94,232.036 2098.51,231.896 2099.08,231.802 2099.64,231.601 2100.21,233.616 2100.78,232.384 2101.35,232.376 2101.92,234.337 2102.49,234.073 2103.05,234.956 2103.62,233.62 2104.19,231.511 2104.76,231.648 2105.33,232.542 2105.9,232.27 2106.46,234.212 2107.03,233.086 2107.6,231.928 2108.17,231.014 2108.74,231.049 2109.31,230.917 2109.87,229.9 2110.44,230.084 2111.01,229.091 2111.58,230.343 2112.15,231.236 2112.72,231.294 2113.29,227.915 2113.85,228.071 2114.42,227.293 2114.99,227.401 2115.56,229.593 2116.13,230.014 2116.7,230.207 2117.26,230.141 2117.83,228.164 2118.4,230.468 2118.97,233.558 2119.54,231.456 2120.11,231.393 2120.67,233.295 2121.24,233.029 2121.81,233.798 2122.38,231.407 2122.95,231.515 2123.52,230.384 2124.08,229.684 2124.65,229.724 2125.22,229.989 2125.79,232.061 2126.36,232.191 2126.93,232.068 2127.49,230.82 2128.06,229.865 2128.63,231.727 2129.2,230.643 2129.77,228.595 2130.34,226.811 2130.9,226.109 2131.47,226.486 2132.04,227.672 2132.61,229.061 2133.18,228.038 2133.75,229.53 2134.31,229.64 2134.88,229.772 2135.45,230.111 2136.02,228.065 2136.59,228.182 2137.16,229.168 2137.72,229.281 2138.29,228.431 2138.86,226.478 2139.43,227.889 2140,227.292 2140.57,227.348 2141.13,226.634 2141.7,226.947 2142.27,227.439 2142.84,228.855 2143.41,228.045 2143.98,230.279 2144.54,230.154 2145.11,231.23 2145.68,232.125 2146.25,231.172 2146.82,231.029 2147.39,230.063 2147.95,231.157 2148.52,229.086 2149.09,227.192 2149.66,227.628 2150.23,230.069 2150.8,231.216 2151.36,231.258 2151.93,232.294 2152.5,230.245 2153.07,229.381 2153.64,228.461 2154.21,230.815 2154.77,229.826 2155.34,230.988 2155.91,230.185 2156.48,229.19 2157.05,229.348 2157.62,226.348 2158.18,225.618 2158.75,224.958 2159.32,225.539 2159.89,224.844 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.025\n  with uncertainty of ± 0.0022188745671897587\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0141 ± (0.00320815, 0.00319075) (MC)\n  95% confidence interval: [-4.02051, -4.00792] (MC)\n  linear error propagation: -4.01392 ± 0.00321357\n  |δ_y| = |0.0022673| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014103904548319, val_l = 0.006405960522489984, val_u = 0.0061804975088763925)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip330\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip331\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip332\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.7 2211.02,1143.7 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,977.62 2211.02,977.62 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,811.536 2211.02,811.536 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,645.452 2211.02,645.452 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,479.367 2211.02,479.367 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,313.283 2211.02,313.283 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.7 365.751,1143.7 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,977.62 365.751,977.62 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,811.536 365.751,811.536 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,645.452 365.751,645.452 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,479.367 365.751,479.367 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,313.283 365.751,313.283 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M298.909 1129.5 Q295.298 1129.5 293.469 1133.07 Q291.664 1136.61 291.664 1143.74 Q291.664 1150.85 293.469 1154.41 Q295.298 1157.95 298.909 1157.95 Q302.543 1157.95 304.349 1154.41 Q306.177 1150.85 306.177 1143.74 Q306.177 1136.61 304.349 1133.07 Q302.543 1129.5 298.909 1129.5 M298.909 1125.8 Q304.719 1125.8 307.775 1130.41 Q310.853 1134.99 310.853 1143.74 Q310.853 1152.47 307.775 1157.07 Q304.719 1161.66 298.909 1161.66 Q293.099 1161.66 290.02 1157.07 Q286.964 1152.47 286.964 1143.74 Q286.964 1134.99 290.02 1130.41 Q293.099 1125.8 298.909 1125.8 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M259.557 990.965 L267.196 990.965 L267.196 964.599 L258.886 966.266 L258.886 962.007 L267.15 960.34 L271.826 960.34 L271.826 990.965 L279.465 990.965 L279.465 994.9 L259.557 994.9 L259.557 990.965 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 963.419 Q295.298 963.419 293.469 966.984 Q291.664 970.525 291.664 977.655 Q291.664 984.761 293.469 988.326 Q295.298 991.868 298.909 991.868 Q302.543 991.868 304.349 988.326 Q306.177 984.761 306.177 977.655 Q306.177 970.525 304.349 966.984 Q302.543 963.419 298.909 963.419 M298.909 959.715 Q304.719 959.715 307.775 964.322 Q310.853 968.905 310.853 977.655 Q310.853 986.382 307.775 990.988 Q304.719 995.572 298.909 995.572 Q293.099 995.572 290.02 990.988 Q286.964 986.382 286.964 977.655 Q286.964 968.905 290.02 964.322 Q293.099 959.715 298.909 959.715 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M262.775 824.881 L279.094 824.881 L279.094 828.816 L257.15 828.816 L257.15 824.881 Q259.812 822.126 264.395 817.497 Q269.002 812.844 270.182 811.501 Q272.428 808.978 273.307 807.242 Q274.21 805.483 274.21 803.793 Q274.21 801.038 272.266 799.302 Q270.344 797.566 267.242 797.566 Q265.043 797.566 262.59 798.33 Q260.159 799.094 257.381 800.645 L257.381 795.923 Q260.205 794.788 262.659 794.21 Q265.113 793.631 267.15 793.631 Q272.52 793.631 275.715 796.316 Q278.909 799.001 278.909 803.492 Q278.909 805.622 278.099 807.543 Q277.312 809.441 275.205 812.034 Q274.627 812.705 271.525 815.922 Q268.423 819.117 262.775 824.881 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 797.335 Q295.298 797.335 293.469 800.899 Q291.664 804.441 291.664 811.571 Q291.664 818.677 293.469 822.242 Q295.298 825.784 298.909 825.784 Q302.543 825.784 304.349 822.242 Q306.177 818.677 306.177 811.571 Q306.177 804.441 304.349 800.899 Q302.543 797.335 298.909 797.335 M298.909 793.631 Q304.719 793.631 307.775 798.237 Q310.853 802.821 310.853 811.571 Q310.853 820.297 307.775 824.904 Q304.719 829.487 298.909 829.487 Q293.099 829.487 290.02 824.904 Q286.964 820.297 286.964 811.571 Q286.964 802.821 290.02 798.237 Q293.099 793.631 298.909 793.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M272.914 644.097 Q276.27 644.815 278.145 647.084 Q280.043 649.352 280.043 652.685 Q280.043 657.801 276.525 660.602 Q273.006 663.403 266.525 663.403 Q264.349 663.403 262.034 662.963 Q259.742 662.546 257.289 661.69 L257.289 657.176 Q259.233 658.31 261.548 658.889 Q263.863 659.468 266.386 659.468 Q270.784 659.468 273.076 657.732 Q275.39 655.996 275.39 652.685 Q275.39 649.63 273.238 647.917 Q271.108 646.181 267.289 646.181 L263.261 646.181 L263.261 642.338 L267.474 642.338 Q270.923 642.338 272.752 640.972 Q274.58 639.584 274.58 636.991 Q274.58 634.329 272.682 632.917 Q270.807 631.482 267.289 631.482 Q265.367 631.482 263.168 631.898 Q260.969 632.315 258.33 633.195 L258.33 629.028 Q260.992 628.287 263.307 627.917 Q265.645 627.547 267.705 627.547 Q273.029 627.547 276.131 629.977 Q279.233 632.385 279.233 636.505 Q279.233 639.375 277.59 641.366 Q275.946 643.334 272.914 644.097 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 631.25 Q295.298 631.25 293.469 634.815 Q291.664 638.357 291.664 645.486 Q291.664 652.593 293.469 656.158 Q295.298 659.699 298.909 659.699 Q302.543 659.699 304.349 656.158 Q306.177 652.593 306.177 645.486 Q306.177 638.357 304.349 634.815 Q302.543 631.25 298.909 631.25 M298.909 627.547 Q304.719 627.547 307.775 632.153 Q310.853 636.736 310.853 645.486 Q310.853 654.213 307.775 658.82 Q304.719 663.403 298.909 663.403 Q293.099 663.403 290.02 658.82 Q286.964 654.213 286.964 645.486 Q286.964 636.736 290.02 632.153 Q293.099 627.547 298.909 627.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M271.594 466.161 L259.789 484.61 L271.594 484.61 L271.594 466.161 M270.367 462.087 L276.247 462.087 L276.247 484.61 L281.177 484.61 L281.177 488.499 L276.247 488.499 L276.247 496.647 L271.594 496.647 L271.594 488.499 L255.992 488.499 L255.992 483.985 L270.367 462.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 465.166 Q295.298 465.166 293.469 468.731 Q291.664 472.272 291.664 479.402 Q291.664 486.508 293.469 490.073 Q295.298 493.615 298.909 493.615 Q302.543 493.615 304.349 490.073 Q306.177 486.508 306.177 479.402 Q306.177 472.272 304.349 468.731 Q302.543 465.166 298.909 465.166 M298.909 461.462 Q304.719 461.462 307.775 466.069 Q310.853 470.652 310.853 479.402 Q310.853 488.129 307.775 492.735 Q304.719 497.319 298.909 497.319 Q293.099 497.319 290.02 492.735 Q286.964 488.129 286.964 479.402 Q286.964 470.652 290.02 466.069 Q293.099 461.462 298.909 461.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M258.793 296.003 L277.15 296.003 L277.15 299.938 L263.076 299.938 L263.076 308.41 Q264.094 308.063 265.113 307.901 Q266.131 307.716 267.15 307.716 Q272.937 307.716 276.316 310.887 Q279.696 314.058 279.696 319.475 Q279.696 325.054 276.224 328.156 Q272.752 331.234 266.432 331.234 Q264.256 331.234 261.988 330.864 Q259.742 330.494 257.335 329.753 L257.335 325.054 Q259.418 326.188 261.641 326.744 Q263.863 327.299 266.34 327.299 Q270.344 327.299 272.682 325.193 Q275.02 323.086 275.02 319.475 Q275.02 315.864 272.682 313.757 Q270.344 311.651 266.34 311.651 Q264.465 311.651 262.59 312.068 Q260.738 312.484 258.793 313.364 L258.793 296.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M298.909 299.082 Q295.298 299.082 293.469 302.646 Q291.664 306.188 291.664 313.318 Q291.664 320.424 293.469 323.989 Q295.298 327.531 298.909 327.531 Q302.543 327.531 304.349 323.989 Q306.177 320.424 306.177 313.318 Q306.177 306.188 304.349 302.646 Q302.543 299.082 298.909 299.082 M298.909 295.378 Q304.719 295.378 307.775 299.984 Q310.853 304.568 310.853 313.318 Q310.853 322.044 307.775 326.651 Q304.719 331.234 298.909 331.234 Q293.099 331.234 290.02 326.651 Q286.964 322.044 286.964 313.318 Q286.964 304.568 290.02 299.984 Q293.099 295.378 298.909 295.378 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip332)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.33 400.199,908.903 400.786,805.748 401.372,711.241 401.958,624.807 402.545,545.912 403.131,474.063 403.718,518.267 404.304,452.122 404.891,393.842 405.477,341.215 406.063,379.725 406.65,333.377 407.236,291.855 407.823,254.847 408.409,351.745 408.995,317.352 409.582,288.189 410.168,314.351 410.755,336.329 411.341,312.267 411.927,293.634 412.514,276.246 413.1,260.951 413.687,248.245 414.273,237.949 414.86,229.895 415.446,223.927 416.032,219.895 416.619,244.633 417.205,267.775 417.792,265.697 418.378,308.467 418.964,307.69 419.551,308.681 420.137,328.852 420.724,332.591 421.31,337.214 421.896,358.514 422.483,393.046 423.069,414.037 423.656,420.23 424.242,427.471 424.829,435.846 425.415,455.4 426.001,473.875 426.588,482.063 427.174,499.951 427.761,517.846 428.347,536.357 428.933,546.788 429.52,579.507 430.106,589.033 430.693,598.638 431.279,608.275 431.865,618.97 432.452,629.163 433.038,645.825 433.625,655.718 434.211,671.881 434.798,692.941 435.384,707.831 435.97,717.754 436.557,736.946 437.143,750.412 437.73,763.623 438.316,772.095 438.902,789.171 439.489,801.761 440.075,821.469 440.662,833.225 441.248,844.495 441.835,852.004 442.421,863.008 443.007,870.211 443.594,880.625 444.18,890.824 444.767,903.857 445.353,919.868 445.939,932.104 446.526,947.092 447.112,958.541 447.699,974.903 448.285,995.597 448.871,999.294 449.458,1005.84 450.044,1017.09 450.631,1028.18 451.217,1034.67 451.804,1038.48 452.39,1049.4 452.976,1057.28 453.563,1060.41 454.149,1065.94 454.736,1066.68 455.322,1069.73 455.908,1072.82 456.495,1078.17 457.081,1081.39 457.668,1086.69 458.254,1095.95 458.84,1104.5 459.427,1108.98 460.013,1113.23 460.6,1119.27 461.186,1121.27 461.773,1127.2 462.359,1132.77 462.945,1138 463.532,1143.45 464.118,1146.8 464.705,1148.34 465.291,1151.3 465.877,1154.74 466.464,1159.38 467.05,1160.28 467.637,1161.76 468.223,1162.9 468.809,1167.45 469.396,1170.25 469.982,1171.3 470.569,1172.38 471.155,1175.34 471.742,1179.68 472.328,1180.85 472.914,1185.35 473.501,1185.2 474.087,1188.06 474.674,1188.87 475.26,1191.47 475.846,1195.46 476.433,1197.78 477.019,1199.68 477.606,1197.15 478.192,1197.84 478.778,1203.37 479.365,1207.09 479.951,1208.99 480.538,1212.31 481.124,1215.78 481.711,1215.53 482.297,1219.96 482.883,1215.29 483.47,1218.23 484.056,1219.61 484.643,1222.45 485.229,1225.16 485.815,1227.69 486.402,1226.97 486.988,1229.21 487.575,1230.43 488.161,1232.78 488.748,1236.33 489.334,1238.35 489.92,1241.85 490.507,1237.96 491.093,1237.09 491.68,1239.43 492.266,1237.28 492.852,1237.88 493.439,1238.62 494.025,1237.83 494.612,1241.38 495.198,1241.82 495.784,1241.14 496.371,1242.15 496.957,1244.09 497.544,1243.22 498.13,1245.4 498.717,1246.04 499.303,1243.62 499.889,1243.01 500.476,1243.85 501.062,1244.26 501.649,1240.53 502.235,1241.65 502.821,1241.23 503.408,1240.66 503.994,1241.82 504.581,1241.12 505.167,1241.68 505.753,1242.56 506.34,1240.4 506.926,1245.6 507.513,1244.87 508.099,1246.95 508.686,1250.42 509.272,1249.43 509.858,1248.63 510.445,1250.44 511.031,1248.25 511.618,1248.84 512.204,1249.47 512.79,1248.61 513.377,1248.98 513.963,1246.58 514.55,1245.81 515.136,1245 515.722,1245.67 516.309,1247.68 516.895,1248.36 517.482,1250.01 518.068,1250.53 518.655,1248.12 519.241,1248.68 519.827,1247.74 520.414,1246.62 521,1245.61 521.587,1247.82 522.173,1245.8 522.759,1245.03 523.346,1244.38 523.932,1238.18 524.519,1237.64 525.105,1237.37 525.691,1237.2 526.278,1234.16 526.864,1237.24 527.451,1235.56 528.037,1233.93 528.624,1233.81 529.21,1239.39 529.796,1237.53 530.383,1235.85 530.969,1235.86 531.556,1234.28 532.142,1234.27 532.728,1235.59 533.315,1233.98 533.901,1235.24 534.488,1234.97 535.074,1237.2 535.661,1234.1 536.247,1232.66 536.833,1232.76 537.42,1234.41 538.006,1236.79 538.593,1232.28 539.179,1232.32 539.765,1236.26 540.352,1237.42 540.938,1238.44 541.525,1239.29 542.111,1238.61 542.697,1238.26 543.284,1237.73 543.87,1241.46 544.457,1242.25 545.043,1240.31 545.63,1241.23 546.216,1237.65 546.802,1236.09 547.389,1237.2 547.975,1235.25 548.562,1236.29 549.148,1237.55 549.734,1238.76 550.321,1237.88 550.907,1238.69 551.494,1239.47 552.08,1238.85 552.666,1239.81 553.253,1246.27 553.839,1246.96 554.426,1244.6 555.012,1245.15 555.599,1242.84 556.185,1243.21 556.771,1242.35 557.358,1243.14 557.944,1239.35 558.531,1240.06 559.117,1239.42 559.703,1238.93 560.29,1239.8 560.876,1239 561.463,1237.17 562.049,1236.62 562.635,1238.76 563.222,1238.53 563.808,1239.32 564.395,1242.95 564.981,1238.02 565.568,1240.28 566.154,1238.17 566.74,1234.65 567.327,1232.97 567.913,1235.51 568.5,1234.86 569.086,1233.16 569.672,1231.26 570.259,1233.85 570.845,1233.62 571.432,1237.25 572.018,1238.21 572.605,1238.77 573.191,1241.02 573.777,1241.75 574.364,1239.66 574.95,1239.03 575.537,1239.25 576.123,1237.39 576.709,1238.04 577.296,1236.03 577.882,1238.19 578.469,1238.71 579.055,1237.79 579.641,1235.55 580.228,1233.6 580.814,1231.71 581.401,1232.62 581.987,1230.88 582.574,1229.37 583.16,1227.58 583.746,1230.31 584.333,1231.58 584.919,1233.74 585.506,1234.27 586.092,1233.7 586.678,1233.15 587.265,1232.81 587.851,1233.58 588.438,1231.36 589.024,1233.66 589.61,1235.9 590.197,1233.8 590.783,1234.64 591.37,1234.08 591.956,1233.39 592.543,1236.75 593.129,1234.69 593.715,1232.67 594.302,1233.44 594.888,1232.86 595.475,1235.02 596.061,1232.76 596.647,1233.59 597.234,1235.56 597.82,1234.76 598.407,1234.24 598.993,1232.36 599.579,1231.77 600.166,1235.31 600.752,1236.14 601.339,1236.71 601.925,1237.11 602.512,1236.16 603.098,1235.52 603.684,1234.85 604.271,1234.01 604.857,1233.51 605.444,1236.99 606.03,1236.11 606.616,1239.64 607.203,1237.15 607.789,1236.71 608.376,1236.36 608.962,1235.35 609.548,1236.11 610.135,1235.63 610.721,1234.87 611.308,1234.27 611.894,1230.8 612.481,1230.37 613.067,1228.51 613.653,1228.93 614.24,1227.23 614.826,1226.72 615.413,1225.06 615.999,1224.81 616.585,1224.48 617.172,1220.14 617.758,1218.58 618.345,1217.28 618.931,1213.41 619.518,1215.51 620.104,1215.87 620.69,1215.97 621.277,1216.46 621.863,1217.01 622.45,1215.8 623.036,1218.77 623.622,1217.51 624.209,1217.5 624.795,1217.7 625.382,1217.92 625.968,1217.94 626.554,1218.15 627.141,1216.8 627.727,1214.3 628.314,1217.21 628.9,1216.13 629.487,1217.62 630.073,1217.64 630.659,1216.56 631.246,1216.96 631.832,1215.81 632.419,1216.02 633.005,1217.39 633.591,1217.52 634.178,1217.72 634.764,1219.23 635.351,1217.96 635.937,1220.64 636.523,1220.93 637.11,1222.4 637.696,1222.21 638.283,1223.28 638.869,1225.98 639.456,1225.74 640.042,1226.91 640.628,1225.04 641.215,1225.89 641.801,1224.28 642.388,1225.62 642.974,1224.08 643.56,1224.97 644.147,1225.94 644.733,1225.52 645.32,1229.35 645.906,1227.59 646.492,1227.34 647.079,1223.02 647.665,1224.22 648.252,1224.22 648.838,1221.34 649.425,1222.38 650.011,1219.57 650.597,1219.67 651.184,1222.11 651.77,1223.35 652.357,1223.16 652.943,1222.99 653.529,1222.56 654.116,1223.73 654.702,1222.19 655.289,1222.13 655.875,1222.12 656.462,1220.75 657.048,1224.62 657.634,1220.19 658.221,1220.27 658.807,1218.93 659.394,1218.82 659.98,1220.21 660.566,1220.17 661.153,1217.58 661.739,1216.4 662.326,1217.99 662.912,1217.93 663.498,1216.65 664.085,1219.23 664.671,1220.56 665.258,1219.29 665.844,1219.17 666.431,1221.86 667.017,1217.39 667.603,1216.22 668.19,1218.68 668.776,1219.97 669.363,1219.8 669.949,1219.71 670.535,1219.51 671.122,1219.64 671.708,1219.55 672.295,1219.56 672.881,1219.31 673.467,1223.28 674.054,1224.15 674.64,1226.37 675.227,1225.88 675.813,1225.49 676.4,1226.32 676.986,1224.53 677.572,1222.92 678.159,1222.6 678.745,1225.02 679.332,1227.54 679.918,1228.19 680.504,1226.18 681.091,1227.16 681.677,1228.02 682.264,1229.05 682.85,1228.31 683.436,1227.59 684.023,1228.44 684.609,1227.89 685.196,1228.72 685.782,1229.66 686.369,1226.14 686.955,1228.53 687.541,1229.2 688.128,1227.29 688.714,1228.18 689.301,1226.15 689.887,1225.31 690.473,1223.45 691.06,1224.36 691.646,1224.2 692.233,1226.72 692.819,1227.77 693.405,1228.55 693.992,1227.74 694.578,1228.39 695.165,1227.79 695.751,1227.04 696.338,1226.77 696.924,1226.15 697.51,1224.31 698.097,1222.42 698.683,1223.53 699.27,1221.84 699.856,1220.25 700.442,1221.4 701.029,1222.41 701.615,1220.38 702.202,1221.66 702.788,1220.01 703.375,1218.18 703.961,1215.15 704.547,1213.57 705.134,1213.71 705.72,1215.38 706.307,1215.43 706.893,1214.18 707.479,1214.07 708.066,1211.2 708.652,1211.42 709.239,1211.74 709.825,1210.45 710.411,1210.7 710.998,1211.34 711.584,1210.04 712.171,1207.52 712.757,1206.75 713.344,1207.24 713.93,1206.31 714.516,1208.4 715.103,1210.65 715.689,1208.28 716.276,1213.29 716.862,1213.7 717.448,1215.18 718.035,1214 718.621,1215.39 719.208,1214.08 719.794,1215.73 720.38,1214.43 720.967,1215.68 721.553,1217.01 722.14,1215.57 722.726,1213.05 723.313,1211.94 723.899,1212.02 724.485,1213.37 725.072,1213.42 725.658,1213.5 726.245,1212.24 726.831,1213.77 727.417,1214.97 728.004,1215.12 728.59,1217.8 729.177,1216.56 729.763,1217.73 730.349,1218.73 730.936,1217.3 731.522,1215.92 732.109,1214.54 732.695,1214.65 733.282,1214.92 733.868,1214.9 734.454,1214.72 735.041,1213.34 735.627,1212.05 736.214,1214.66 736.8,1216.04 737.386,1214.52 737.973,1214.58 738.559,1213.11 739.146,1213.23 739.732,1213.23 740.318,1213.24 740.905,1210.58 741.491,1214.89 742.078,1213.67 742.664,1213.84 743.251,1213.9 743.837,1214.1 744.423,1214.21 745.01,1215.82 745.596,1217.12 746.183,1215.52 746.769,1216.76 747.355,1215.17 747.942,1217.57 748.528,1218.86 749.115,1217.24 749.701,1218.48 750.288,1219.72 750.874,1218.2 751.46,1217.82 752.047,1219.09 752.633,1216.34 753.22,1213.76 753.806,1212.58 754.392,1212.74 754.979,1212.68 755.565,1213.99 756.152,1212.7 756.738,1211.6 757.324,1213.01 757.911,1213.27 758.497,1211.92 759.084,1211.96 759.67,1210.81 760.257,1211.05 760.843,1212.55 761.429,1212.74 762.016,1213.14 762.602,1213.08 763.189,1211.6 763.775,1209.14 764.361,1209.39 764.948,1212.32 765.534,1212.43 766.121,1213.85 766.707,1209.79 767.293,1211.31 767.88,1211.37 768.466,1212.77 769.053,1211.38 769.639,1210.07 770.226,1214.39 770.812,1215.67 771.398,1218.3 771.985,1218.19 772.571,1217.72 773.158,1217.56 773.744,1214.68 774.33,1214.6 774.917,1214.51 775.503,1215.69 776.09,1216.66 776.676,1215.36 777.262,1215.35 777.849,1214 778.435,1209.96 779.022,1210.11 779.608,1213.32 780.195,1214.99 780.781,1218.09 781.367,1217.79 781.954,1218.79 782.54,1218.7 783.127,1216.96 783.713,1218.06 784.299,1216.51 784.886,1220.21 785.472,1217.08 786.059,1216.88 786.645,1217.02 787.232,1216.6 787.818,1217.69 788.404,1217.71 788.991,1217.57 789.577,1216.16 790.164,1213.64 790.75,1216.38 791.336,1219.34 791.923,1222.19 792.509,1221.67 793.096,1221.21 793.682,1219.27 794.268,1218.85 794.855,1218.74 795.441,1214.39 796.028,1214.21 796.614,1214.13 797.201,1212.61 797.787,1212.39 798.373,1215.43 798.96,1215.48 799.546,1215.39 800.133,1212.61 800.719,1210 801.305,1210.35 801.892,1210.76 802.478,1211.03 803.065,1210.14 803.651,1207.67 804.237,1209.43 804.824,1211.19 805.41,1214.01 805.997,1214.29 806.583,1214.32 807.17,1211.56 807.756,1211.75 808.342,1214.71 808.929,1213.21 809.515,1213.36 810.102,1218.77 810.688,1218.59 811.274,1216.91 811.861,1216.49 812.447,1214.89 813.034,1214.94 813.62,1215.11 814.206,1213.59 814.793,1216.08 815.379,1218.64 815.966,1219.48 816.552,1219.21 817.139,1217.54 817.725,1215.84 818.311,1214.29 818.898,1211.8 819.484,1213.21 820.071,1214.81 820.657,1214.67 821.243,1215.07 821.83,1214.79 822.416,1216.12 823.003,1217.03 823.589,1219.28 824.175,1219.37 824.762,1218.96 825.348,1216.05 825.935,1218.54 826.521,1218.05 827.108,1218.91 827.694,1219.93 828.28,1218.11 828.867,1219.16 829.453,1216 830.04,1215.66 830.626,1215.41 831.212,1216.67 831.799,1216.5 832.385,1215 832.972,1216.16 833.558,1215.95 834.145,1218.27 834.731,1216.67 835.317,1218.92 835.904,1217.17 836.49,1219.66 837.077,1217.89 837.663,1213.68 838.249,1213.64 838.836,1212.26 839.422,1210.78 840.009,1213.73 840.595,1213.35 841.181,1216.03 841.768,1216.02 842.354,1215.96 842.941,1216.98 843.527,1215.17 844.114,1217.85 844.7,1217.49 845.286,1215.72 845.873,1215.4 846.459,1212.55 847.046,1215.23 847.632,1216.28 848.218,1218.75 848.805,1219.55 849.391,1215.17 849.978,1215.24 850.564,1217.93 851.15,1220.43 851.737,1220.18 852.323,1221.11 852.91,1217.78 853.496,1218.74 854.083,1218.44 854.669,1219.48 855.255,1217.93 855.842,1216.39 856.428,1217.73 857.015,1216 857.601,1216.2 858.187,1214.93 858.774,1216.17 859.36,1213.34 859.947,1217.26 860.533,1217 861.119,1220.76 861.706,1221.54 862.292,1218.68 862.879,1218.47 863.465,1216.81 864.052,1213.85 864.638,1212.53 865.224,1213.82 865.811,1209.46 866.397,1211.05 866.984,1212.64 867.57,1211.07 868.156,1209.66 868.743,1208.39 869.329,1205.65 869.916,1207.19 870.502,1211.76 871.089,1210.42 871.675,1211.72 872.261,1210.38 872.848,1207.87 873.434,1210.94 874.021,1208.1 874.607,1207 875.193,1207.25 875.78,1207.77 876.366,1206.47 876.953,1205.23 877.539,1207.25 878.125,1206.32 878.712,1207.9 879.298,1208.03 879.885,1202.74 880.471,1201.71 881.058,1202.54 881.644,1204.7 882.23,1206.67 882.817,1207.16 883.403,1208.84 883.99,1209.03 884.576,1211.81 885.162,1211.96 885.749,1210.65 886.335,1213.55 886.922,1216.08 887.508,1217.21 888.094,1218.32 888.681,1219.06 889.267,1220.36 889.854,1220.06 890.44,1222.32 891.027,1223 891.613,1224.72 892.199,1221.17 892.786,1219.36 893.372,1218.92 893.959,1218.57 894.545,1219.47 895.131,1219.11 895.718,1214.55 896.304,1214.29 896.891,1211.12 897.477,1212.61 898.063,1214.91 898.65,1214.58 899.236,1218.37 899.823,1216.5 900.409,1217.73 900.996,1217.68 901.582,1215.83 902.168,1215.93 902.755,1215.62 903.341,1212.51 903.928,1213.77 904.514,1212.39 905.1,1213.66 905.687,1213.77 906.273,1216.2 906.86,1215.68 907.446,1215.44 908.032,1216.62 908.619,1219.32 909.205,1214.84 909.792,1212.01 910.378,1211.95 910.965,1211.85 911.551,1211.92 912.137,1215.94 912.724,1215.67 913.31,1212.55 913.897,1209.79 914.483,1208.46 915.069,1208.68 915.656,1209.11 916.242,1209.58 916.829,1211.14 917.415,1213.95 918.002,1212.37 918.588,1210.81 919.174,1209.44 919.761,1208.46 920.347,1209.95 920.934,1205.98 921.52,1204.87 922.106,1206.7 922.693,1206.97 923.279,1206.02 923.866,1210.54 924.452,1210.44 925.038,1210.7 925.625,1208.26 926.211,1208.3 926.798,1208.67 927.384,1205.84 927.971,1204.93 928.557,1204.11 929.143,1204.86 929.73,1203.86 930.316,1204.22 930.903,1207.22 931.489,1208.83 932.075,1209.06 932.662,1207.85 933.248,1209.49 933.835,1208.44 934.421,1208.52 935.007,1209.81 935.594,1211.3 936.18,1213.98 936.767,1211.25 937.353,1211.39 937.94,1213.05 938.526,1214.17 939.112,1216.59 939.699,1214.79 940.285,1214.26 940.872,1214.08 941.458,1214.19 942.044,1211.42 942.631,1211.16 943.217,1212.6 943.804,1211.31 944.39,1213.99 944.976,1213.84 945.563,1217.63 946.149,1214.47 946.736,1212.84 947.322,1212.87 947.909,1214.28 948.495,1212.91 949.081,1211.63 949.668,1213 950.254,1212.93 950.841,1212.89 951.427,1213.14 952.013,1212.55 952.6,1213.84 953.186,1214.92 953.773,1216.07 954.359,1215.89 954.945,1213.02 955.532,1211.48 956.118,1211.34 956.705,1216.45 957.291,1217.27 957.878,1215.76 958.464,1213.24 959.05,1214.74 959.637,1214.69 960.223,1215.88 960.81,1214.69 961.396,1218.68 961.982,1220.83 962.569,1216.34 963.155,1213.34 963.742,1215.78 964.328,1215.32 964.915,1212.39 965.501,1211.06 966.087,1210.7 966.674,1213.54 967.26,1209.16 967.847,1209.12 968.433,1209.31 969.019,1210.95 969.606,1212.34 970.192,1212.52 970.779,1215.07 971.365,1215.04 971.951,1213.42 972.538,1216.04 973.124,1215.8 973.711,1212.75 974.297,1211.15 974.884,1211.06 975.47,1210.86 976.056,1208.22 976.643,1204.36 977.229,1207.36 977.816,1208.87 978.402,1204.92 978.988,1202.75 979.575,1203.23 980.161,1202.18 980.748,1203.95 981.334,1204.01 981.92,1203.25 982.507,1205.02 983.093,1205.45 983.68,1203.31 984.266,1202.41 984.853,1203.12 985.439,1202.2 986.025,1202.89 986.612,1201.73 987.198,1202.36 987.785,1204.05 988.371,1208.76 988.957,1211.63 989.544,1210.11 990.13,1211.24 990.717,1210.18 991.303,1210.14 991.889,1210.39 992.476,1209.18 993.062,1210.56 993.649,1210.25 994.235,1210.43 994.822,1211.85 995.408,1210.4 995.994,1213.18 996.581,1214.77 997.167,1216.03 997.754,1218.68 998.34,1218.12 998.926,1215.28 999.513,1215.34 1000.1,1215.21 1000.69,1216.25 1001.27,1214.76 1001.86,1210.49 1002.44,1205.26 1003.03,1204.27 1003.62,1206.13 1004.2,1207.92 1004.79,1205.42 1005.38,1208.2 1005.96,1209.72 1006.55,1205.93 1007.14,1207.48 1007.72,1207.84 1008.31,1209.2 1008.9,1209.29 1009.48,1210.72 1010.07,1210.75 1010.65,1210.88 1011.24,1210.85 1011.83,1210.89 1012.41,1211.07 1013,1210.97 1013.59,1209.5 1014.17,1209.82 1014.76,1208.75 1015.35,1208.84 1015.93,1209.09 1016.52,1208.89 1017.11,1209.06 1017.69,1210.25 1018.28,1208.92 1018.86,1209.19 1019.45,1209.5 1020.04,1210.97 1020.62,1213.8 1021.21,1212.47 1021.8,1212.31 1022.38,1212.31 1022.97,1213.41 1023.56,1209.34 1024.14,1208.21 1024.73,1207.08 1025.32,1208.79 1025.9,1207.71 1026.49,1210.9 1027.07,1210.81 1027.66,1213.36 1028.25,1213.37 1028.83,1211.89 1029.42,1215.77 1030.01,1215.67 1030.59,1212.72 1031.18,1212.31 1031.77,1213.99 1032.35,1213.89 1032.94,1216.25 1033.52,1219.74 1034.11,1219.27 1034.7,1217.51 1035.28,1218.61 1035.87,1215.46 1036.46,1216.56 1037.04,1213.79 1037.63,1212.16 1038.22,1213.33 1038.8,1213.21 1039.39,1212.9 1039.98,1212.69 1040.56,1213.68 1041.15,1212.44 1041.73,1212.16 1042.32,1210.68 1042.91,1210.7 1043.49,1213.5 1044.08,1212.28 1044.67,1209.67 1045.25,1205.68 1045.84,1204.69 1046.43,1202.51 1047.01,1202.88 1047.6,1203.48 1048.19,1203.59 1048.77,1202.7 1049.36,1204.36 1049.94,1204.67 1050.53,1206.52 1051.12,1206.7 1051.7,1206.79 1052.29,1205.45 1052.88,1204.14 1053.46,1204.69 1054.05,1205.26 1054.64,1205.5 1055.22,1205.79 1055.81,1207.53 1056.39,1206.37 1056.98,1203.97 1057.57,1204.4 1058.15,1207.46 1058.74,1208.94 1059.33,1210.28 1059.91,1210.36 1060.5,1211.91 1061.09,1211.98 1061.67,1213.2 1062.26,1210.15 1062.85,1207.3 1063.43,1207.66 1064.02,1207.82 1064.6,1209.2 1065.19,1209.46 1065.78,1210.97 1066.36,1211.16 1066.95,1211.3 1067.54,1209.97 1068.12,1211.62 1068.71,1211.54 1069.3,1206.39 1069.88,1205.13 1070.47,1209.58 1071.06,1208.22 1071.64,1211.16 1072.23,1214.87 1072.81,1215.91 1073.4,1214.22 1073.99,1215.41 1074.57,1213.87 1075.16,1215.34 1075.75,1215.14 1076.33,1214.53 1076.92,1217.21 1077.51,1214.19 1078.09,1215.55 1078.68,1214.1 1079.26,1213.99 1079.85,1212.67 1080.44,1212.47 1081.02,1212.47 1081.61,1214.64 1082.2,1216.88 1082.78,1215.3 1083.37,1213.84 1083.96,1213.47 1084.54,1214.4 1085.13,1215.56 1085.72,1215.18 1086.3,1213.73 1086.89,1213.62 1087.47,1212.1 1088.06,1210.79 1088.65,1208.4 1089.23,1208.49 1089.82,1210.29 1090.41,1210.28 1090.99,1210.02 1091.58,1205.89 1092.17,1207.6 1092.75,1206.28 1093.34,1206.41 1093.93,1210.6 1094.51,1210.95 1095.1,1211.08 1095.68,1209.59 1096.27,1210.92 1096.86,1209.7 1097.44,1206.85 1098.03,1206.83 1098.62,1208.38 1099.2,1208.61 1099.79,1209.08 1100.38,1209.18 1100.96,1208.23 1101.55,1212.39 1102.14,1212.47 1102.72,1212.17 1103.31,1209.4 1103.89,1210.18 1104.48,1208.88 1105.07,1208.8 1105.65,1210.35 1106.24,1212.96 1106.83,1212.75 1107.41,1213.83 1108,1213.7 1108.59,1213.68 1109.17,1212.02 1109.76,1219.75 1110.34,1219.36 1110.93,1217.49 1111.52,1214.6 1112.1,1216.9 1112.69,1218.05 1113.28,1214.51 1113.86,1214.51 1114.45,1211.63 1115.04,1210.12 1115.62,1208.83 1116.21,1209.04 1116.8,1210.52 1117.38,1214.5 1117.97,1215.31 1118.55,1216.39 1119.14,1214.67 1119.73,1217.01 1120.31,1216.46 1120.9,1217.28 1121.49,1219.75 1122.07,1219.48 1122.66,1221.93 1123.25,1219.98 1123.83,1219.37 1124.42,1220.64 1125.01,1218.49 1125.59,1218.25 1126.18,1217.86 1126.76,1214.75 1127.35,1214.51 1127.94,1215.6 1128.52,1216.65 1129.11,1220.48 1129.7,1222.41 1130.28,1218.72 1130.87,1220.8 1131.46,1218.97 1132.04,1217.07 1132.63,1220.68 1133.21,1216.01 1133.8,1214.5 1134.39,1214.2 1134.97,1214.03 1135.56,1212.81 1136.15,1212.57 1136.73,1213.84 1137.32,1215.22 1137.91,1216.23 1138.49,1215.78 1139.08,1214.11 1139.67,1215.67 1140.25,1214.08 1140.84,1216.36 1141.42,1216.19 1142.01,1215.78 1142.6,1217.91 1143.18,1219.02 1143.77,1218.3 1144.36,1214.92 1144.94,1211.79 1145.53,1213.25 1146.12,1211.89 1146.7,1210.44 1147.29,1211.84 1147.88,1207.88 1148.46,1206.8 1149.05,1208.5 1149.63,1210.15 1150.22,1206.6 1150.81,1205.42 1151.39,1207 1151.98,1208.49 1152.57,1209.96 1153.15,1211.08 1153.74,1210.96 1154.33,1211.11 1154.91,1212.32 1155.5,1212.28 1156.09,1210.92 1156.67,1213.66 1157.26,1209.32 1157.84,1207.92 1158.43,1207.05 1159.02,1207.33 1159.6,1204.76 1160.19,1203.56 1160.78,1201 1161.36,1201.62 1161.95,1200.69 1162.54,1201.33 1163.12,1201.56 1163.71,1203.53 1164.29,1202.41 1164.88,1205.33 1165.47,1205.59 1166.05,1202.95 1166.64,1206.21 1167.23,1203.87 1167.81,1205.57 1168.4,1205.72 1168.99,1206.98 1169.57,1205.95 1170.16,1204.86 1170.75,1206.54 1171.33,1205.3 1171.92,1204.29 1172.5,1205.9 1173.09,1206.11 1173.68,1206.5 1174.26,1205.23 1174.85,1208.19 1175.44,1208.4 1176.02,1208.3 1176.61,1207.06 1177.2,1207.42 1177.78,1211.61 1178.37,1211.43 1178.96,1209.93 1179.54,1209.9 1180.13,1208.63 1180.71,1210.12 1181.3,1210.33 1181.89,1211.48 1182.47,1211.42 1183.06,1206.14 1183.65,1206.24 1184.23,1205.06 1184.82,1205.45 1185.41,1205.96 1185.99,1206.44 1186.58,1208.01 1187.16,1208.3 1187.75,1206.94 1188.34,1208.28 1188.92,1204.5 1189.51,1204.94 1190.1,1206.76 1190.68,1206.78 1191.27,1205.49 1191.86,1205.94 1192.44,1206.01 1193.03,1207.45 1193.62,1204.96 1194.2,1206.75 1194.79,1205.17 1195.37,1201.03 1195.96,1201.75 1196.55,1203.62 1197.13,1202.92 1197.72,1203.72 1198.31,1207.89 1198.89,1206.91 1199.48,1207.38 1200.07,1206.19 1200.65,1209.17 1201.24,1213.51 1201.83,1213.29 1202.41,1215.95 1203,1215.68 1203.58,1215.33 1204.17,1213.8 1204.76,1214.94 1205.34,1216.12 1205.93,1213.46 1206.52,1212.1 1207.1,1213.49 1207.69,1213.2 1208.28,1210.37 1208.86,1208.09 1209.45,1208.29 1210.03,1214.07 1210.62,1214.98 1211.21,1215.75 1211.79,1214.33 1212.38,1212.71 1212.97,1212.68 1213.55,1215.19 1214.14,1215.14 1214.73,1216.45 1215.31,1216.31 1215.9,1218.53 1216.49,1218.22 1217.07,1216.62 1217.66,1213.55 1218.24,1219.01 1218.83,1217 1219.42,1218.12 1220,1220.55 1220.59,1217.3 1221.18,1214.32 1221.76,1215.45 1222.35,1215.05 1222.94,1214.54 1223.52,1216.83 1224.11,1217.63 1224.7,1218.52 1225.28,1218.17 1225.87,1219.01 1226.45,1215.98 1227.04,1215.56 1227.63,1215.28 1228.21,1216.15 1228.8,1215.84 1229.39,1215.54 1229.97,1211.1 1230.56,1212.38 1231.15,1210.74 1231.73,1210.86 1232.32,1210.87 1232.91,1209.71 1233.49,1209.93 1234.08,1210 1234.66,1207.26 1235.25,1207.2 1235.84,1207.48 1236.42,1208.95 1237.01,1210.09 1237.6,1210.07 1238.18,1211.4 1238.77,1209.83 1239.36,1212.88 1239.94,1211.2 1240.53,1209.93 1241.11,1210.08 1241.7,1211.38 1242.29,1212.46 1242.87,1210.68 1243.46,1210.7 1244.05,1209.37 1244.63,1211.97 1245.22,1209.14 1245.81,1209.29 1246.39,1208.16 1246.98,1208.27 1247.57,1211.05 1248.15,1204.38 1248.74,1204.48 1249.32,1200.65 1249.91,1201.24 1250.5,1201.6 1251.08,1200.55 1251.67,1199.85 1252.26,1202.91 1252.84,1204.78 1253.43,1203.56 1254.02,1203.54 1254.6,1203.9 1255.19,1205.86 1255.78,1206.2 1256.36,1206.27 1256.95,1205.46 1257.53,1205.9 1258.12,1202.01 1258.71,1206.76 1259.29,1205.96 1259.88,1206.35 1260.47,1208.95 1261.05,1212.1 1261.64,1212.38 1262.23,1212.32 1262.81,1213.68 1263.4,1216.17 1263.98,1217.26 1264.57,1219.89 1265.16,1218.2 1265.74,1216.86 1266.33,1215.29 1266.92,1214.97 1267.5,1214.82 1268.09,1215.9 1268.68,1211.54 1269.26,1208.58 1269.85,1209.64 1270.44,1209.49 1271.02,1208.59 1271.61,1208.82 1272.19,1204.81 1272.78,1203.9 1273.37,1204.41 1273.95,1204 1274.54,1204.49 1275.13,1206.33 1275.71,1205.43 1276.3,1208.25 1276.89,1208.3 1277.47,1209.69 1278.06,1208.54 1278.65,1207.5 1279.23,1203.59 1279.82,1204.01 1280.4,1204.56 1280.99,1205.93 1281.58,1206.31 1282.16,1205.21 1282.75,1204.06 1283.34,1203.31 1283.92,1202.15 1284.51,1201.36 1285.1,1201.77 1285.68,1200.85 1286.27,1201.08 1286.86,1204.24 1287.44,1204.49 1288.03,1209 1288.61,1209.25 1289.2,1209.37 1289.79,1209.42 1290.37,1209.56 1290.96,1210.98 1291.55,1210.95 1292.13,1209.09 1292.72,1209.19 1293.31,1212.14 1293.89,1213.14 1294.48,1214.03 1295.06,1213.81 1295.65,1215.11 1296.24,1215.07 1296.82,1216.21 1297.41,1217.25 1298,1215.2 1298.58,1217.51 1299.17,1214.51 1299.76,1213.07 1300.34,1211.28 1300.93,1211.1 1301.52,1209.63 1302.1,1209.75 1302.69,1208.32 1303.27,1209.49 1303.86,1210.71 1304.45,1213.29 1305.03,1211.88 1305.62,1213.13 1306.21,1213.01 1306.79,1213.95 1307.38,1215.25 1307.97,1214.94 1308.55,1212.19 1309.14,1213.27 1309.73,1214.52 1310.31,1213.09 1310.9,1215.63 1311.48,1212.83 1312.07,1213.94 1312.66,1215.13 1313.24,1213.44 1313.83,1216.07 1314.42,1211.66 1315,1211.23 1315.59,1211.12 1316.18,1212.41 1316.76,1212.09 1317.35,1214.53 1317.93,1213.22 1318.52,1215.8 1319.11,1212.88 1319.69,1211.6 1320.28,1210.01 1320.87,1211.34 1321.45,1210.24 1322.04,1211.74 1322.63,1211.34 1323.21,1211.45 1323.8,1211.53 1324.39,1217.99 1324.97,1216.21 1325.56,1214.59 1326.14,1213.01 1326.73,1215.24 1327.32,1215.15 1327.9,1216.29 1328.49,1218.61 1329.08,1219.41 1329.66,1218.74 1330.25,1220.82 1330.84,1221.45 1331.42,1221.91 1332.01,1221.59 1332.6,1219.58 1333.18,1218 1333.77,1218.83 1334.35,1219.69 1334.94,1218.93 1335.53,1217.02 1336.11,1213.85 1336.7,1212.33 1337.29,1212.31 1337.87,1213.66 1338.46,1210.56 1339.05,1209.31 1339.63,1210.87 1340.22,1206.66 1340.8,1205.24 1341.39,1205.42 1341.98,1206.8 1342.56,1209.52 1343.15,1208.06 1343.74,1207.85 1344.32,1210.85 1344.91,1208.21 1345.5,1211.21 1346.08,1212.68 1346.67,1213.92 1347.26,1214.12 1347.84,1215.54 1348.43,1216.74 1349.01,1213.67 1349.6,1210.52 1350.19,1206.79 1350.77,1205.61 1351.36,1207.21 1351.95,1201.99 1352.53,1204.93 1353.12,1203.78 1353.71,1204.44 1354.29,1208.85 1354.88,1208.63 1355.47,1208.61 1356.05,1211.27 1356.64,1205.55 1357.22,1205.85 1357.81,1206.15 1358.4,1210.18 1358.98,1214.47 1359.57,1214.24 1360.16,1211.21 1360.74,1211.28 1361.33,1211.23 1361.92,1212.38 1362.5,1209.51 1363.09,1209.59 1363.68,1212.19 1364.26,1212.13 1364.85,1212.22 1365.43,1216.19 1366.02,1217.24 1366.61,1218.2 1367.19,1218.97 1367.78,1218.41 1368.37,1219.15 1368.95,1218.98 1369.54,1218.53 1370.13,1215.87 1370.71,1215.59 1371.3,1216.42 1371.88,1216.15 1372.47,1215.92 1373.06,1219.59 1373.64,1218 1374.23,1216.28 1374.82,1217.44 1375.4,1218.4 1375.99,1222.02 1376.58,1223.17 1377.16,1219.61 1377.75,1216.55 1378.34,1217.67 1378.92,1218.86 1379.51,1218.22 1380.09,1215.16 1380.68,1217.52 1381.27,1218.23 1381.85,1217.78 1382.44,1218.68 1383.03,1215.65 1383.61,1212.67 1384.2,1212.62 1384.79,1212.59 1385.37,1212.74 1385.96,1215.35 1386.55,1217.69 1387.13,1217.31 1387.72,1211.3 1388.3,1213.72 1388.89,1212.14 1389.48,1207.8 1390.06,1206.68 1390.65,1205.44 1391.24,1207.31 1391.82,1206.13 1392.41,1206.47 1393,1206.8 1393.58,1208.29 1394.17,1208.22 1394.75,1209.72 1395.34,1211.18 1395.93,1208.4 1396.51,1206.96 1397.1,1207.45 1397.69,1209.11 1398.27,1209.1 1398.86,1206.62 1399.45,1204.03 1400.03,1207.22 1400.62,1207.32 1401.21,1206.19 1401.79,1205 1402.38,1207.11 1402.96,1206.07 1403.55,1207.74 1404.14,1210.74 1404.72,1209.73 1405.31,1208.62 1405.9,1208.84 1406.48,1205.12 1407.07,1203.93 1407.66,1201.72 1408.24,1202.16 1408.83,1201.15 1409.42,1200.5 1410,1202.89 1410.59,1200.52 1411.17,1199.86 1411.76,1201.8 1412.35,1203.72 1412.93,1201.23 1413.52,1201.54 1414.11,1204.92 1414.69,1205.16 1415.28,1204.05 1415.87,1205.64 1416.45,1204.57 1417.04,1203.7 1417.63,1203.66 1418.21,1203.75 1418.8,1204.09 1419.38,1201.57 1419.97,1202.08 1420.56,1201.18 1421.14,1204.42 1421.73,1204.82 1422.32,1203.87 1422.9,1204.28 1423.49,1206.24 1424.08,1207.73 1424.66,1210.54 1425.25,1210.72 1425.83,1209.29 1426.42,1210.54 1427.01,1210.61 1427.59,1211.99 1428.18,1214.62 1428.77,1218.81 1429.35,1217.23 1429.94,1212.91 1430.53,1207.39 1431.11,1207.48 1431.7,1209.12 1432.29,1207.77 1432.87,1209.28 1433.46,1209.48 1434.04,1211.03 1434.63,1213.48 1435.22,1212.05 1435.8,1213.45 1436.39,1214.69 1436.98,1214.72 1437.56,1212.99 1438.15,1214.15 1438.74,1214.02 1439.32,1209.62 1439.91,1209.49 1440.5,1210.86 1441.08,1209.92 1441.67,1207.19 1442.25,1205.94 1442.84,1211.31 1443.43,1209.88 1444.01,1209.84 1444.6,1208.69 1445.19,1209.98 1445.77,1210.08 1446.36,1207.3 1446.95,1207.43 1447.53,1206.16 1448.12,1206.24 1448.7,1205.31 1449.29,1207.07 1449.88,1205.9 1450.46,1207.54 1451.05,1210.4 1451.64,1214.51 1452.22,1215.46 1452.81,1213.94 1453.4,1212.34 1453.98,1210.98 1454.57,1213.64 1455.16,1216.05 1455.74,1217.2 1456.33,1217.83 1456.91,1216.24 1457.5,1221.27 1458.09,1218.11 1458.67,1220.2 1459.26,1219.44 1459.85,1217.69 1460.43,1220.2 1461.02,1218.35 1461.61,1220.73 1462.19,1218.68 1462.78,1215.34 1463.37,1217.7 1463.95,1219.72 1464.54,1222.11 1465.12,1219.94 1465.71,1216.82 1466.3,1217.7 1466.88,1214.59 1467.47,1214.46 1468.06,1214.18 1468.64,1212.59 1469.23,1213.82 1469.82,1214.71 1470.4,1213.28 1470.99,1211.8 1471.57,1212.98 1472.16,1212.71 1472.75,1213.94 1473.33,1215.04 1473.92,1216.33 1474.51,1217.24 1475.09,1214.39 1475.68,1214.33 1476.27,1211.63 1476.85,1210.21 1477.44,1207.47 1478.03,1207.7 1478.61,1207.89 1479.2,1206.75 1479.78,1204.19 1480.37,1204.78 1480.96,1206.28 1481.54,1206.41 1482.13,1207.76 1482.72,1209.09 1483.3,1210.44 1483.89,1209.03 1484.48,1211.64 1485.06,1210.31 1485.65,1210.26 1486.24,1207.71 1486.82,1206.42 1487.41,1206.59 1487.99,1203.95 1488.58,1203.02 1489.17,1204.81 1489.75,1205.21 1490.34,1205.41 1490.93,1205.64 1491.51,1205.92 1492.1,1207.2 1492.69,1206.21 1493.27,1206.45 1493.86,1206.77 1494.45,1208.08 1495.03,1203.29 1495.62,1202.41 1496.2,1201.56 1496.79,1200.72 1497.38,1201.15 1497.96,1202.93 1498.55,1204.41 1499.14,1203.73 1499.72,1200.12 1500.31,1202.29 1500.9,1202.5 1501.48,1201.43 1502.07,1200.55 1502.65,1199.6 1503.24,1200.11 1503.83,1200.74 1504.41,1203.76 1505,1202.46 1505.59,1204.48 1506.17,1202.17 1506.76,1201.31 1507.35,1201.67 1507.93,1203.54 1508.52,1202.47 1509.11,1200.15 1509.69,1199.4 1510.28,1203.99 1510.86,1207.31 1511.45,1207.71 1512.04,1207.87 1512.62,1209.17 1513.21,1209.46 1513.8,1213.5 1514.38,1212.23 1514.97,1212.18 1515.56,1210.92 1516.14,1211.93 1516.73,1212.03 1517.32,1211.78 1517.9,1214.69 1518.49,1214.43 1519.07,1214.38 1519.66,1212.96 1520.25,1212.98 1520.83,1214.6 1521.42,1218.65 1522.01,1220.8 1522.59,1219.99 1523.18,1222.47 1523.77,1223.3 1524.35,1222.45 1524.94,1219.03 1525.52,1218.74 1526.11,1216.91 1526.7,1218.05 1527.28,1217.93 1527.87,1218.69 1528.46,1218.56 1529.04,1219.54 1529.63,1216.5 1530.22,1213.38 1530.8,1213.39 1531.39,1217.44 1531.98,1217.2 1532.56,1213.92 1533.15,1213.74 1533.73,1212.34 1534.32,1210.89 1534.91,1210.76 1535.49,1210.65 1536.08,1214.68 1536.67,1215.81 1537.25,1214.4 1537.84,1211.62 1538.43,1211.62 1539.01,1215.59 1539.6,1214.13 1540.19,1212.65 1540.77,1212.19 1541.36,1209.25 1541.94,1210.6 1542.53,1209.32 1543.12,1206.67 1543.7,1208.01 1544.29,1205.27 1544.88,1202.78 1545.46,1203.34 1546.05,1202.69 1546.64,1205.53 1547.22,1204.52 1547.81,1203.67 1548.4,1201.25 1548.98,1200.17 1549.57,1200.89 1550.15,1201.48 1550.74,1203.52 1551.33,1202.63 1551.91,1203.14 1552.5,1202 1553.09,1201.22 1553.67,1201.69 1554.26,1200.8 1554.85,1204.08 1555.43,1204.52 1556.02,1204.88 1556.6,1205.26 1557.19,1205.53 1557.78,1205.54 1558.36,1207.25 1558.95,1207.36 1559.54,1203.25 1560.12,1202.2 1560.71,1202.69 1561.3,1202.92 1561.88,1203.33 1562.47,1203.53 1563.06,1201.18 1563.64,1205.92 1564.23,1207.61 1564.81,1204.92 1565.4,1207.86 1565.99,1209.63 1566.57,1208.46 1567.16,1210.03 1567.75,1206.23 1568.33,1209.14 1568.92,1209.21 1569.51,1213.46 1570.09,1213.49 1570.68,1213.24 1571.27,1213.39 1571.85,1211.13 1572.44,1208.42 1573.02,1208.38 1573.61,1205.8 1574.2,1206.09 1574.78,1210.45 1575.37,1213.08 1575.96,1211.71 1576.54,1207.2 1577.13,1205.17 1577.72,1209.64 1578.3,1209.68 1578.89,1209.82 1579.47,1211.31 1580.06,1208.72 1580.65,1206.18 1581.23,1206.47 1581.82,1209.71 1582.41,1209.67 1582.99,1211.04 1583.58,1212.47 1584.17,1210.99 1584.75,1210.83 1585.34,1212.24 1585.93,1211.93 1586.51,1212.95 1587.1,1211.55 1587.68,1212.91 1588.27,1211.7 1588.86,1211.5 1589.44,1208.59 1590.03,1208.87 1590.62,1205.14 1591.2,1203.88 1591.79,1204.46 1592.38,1203.55 1592.96,1201.02 1593.55,1200.31 1594.14,1198.45 1594.72,1201.89 1595.31,1203.63 1595.89,1202.43 1596.48,1204.31 1597.07,1204.68 1597.65,1207.73 1598.24,1208.13 1598.83,1208.23 1599.41,1209.59 1600,1211.13 1600.59,1212.41 1601.17,1213.23 1601.76,1215.52 1602.34,1216.57 1602.93,1215.15 1603.52,1217.46 1604.1,1217.07 1604.69,1219.41 1605.28,1221.67 1605.86,1219.6 1606.45,1217.6 1607.04,1216.73 1607.62,1216.13 1608.21,1215.72 1608.8,1215.37 1609.38,1212.39 1609.97,1215.45 1610.55,1212.86 1611.14,1210.26 1611.73,1207.63 1612.31,1207.85 1612.9,1206.56 1613.49,1206.82 1614.07,1208.36 1614.66,1207.25 1615.25,1207.43 1615.83,1203.65 1616.42,1204.02 1617.01,1204.2 1617.59,1204.82 1618.18,1205 1618.76,1205.29 1619.35,1208.37 1619.94,1211.28 1620.52,1208.45 1621.11,1211.4 1621.7,1212.81 1622.28,1216.94 1622.87,1217.8 1623.46,1214.66 1624.04,1215.91 1624.63,1214.21 1625.22,1211.6 1625.8,1212.87 1626.39,1211.31 1626.97,1208.59 1627.56,1203.21 1628.15,1200.87 1628.73,1201.36 1629.32,1200.53 1629.91,1202.38 1630.49,1201.78 1631.08,1200.98 1631.67,1204.15 1632.25,1207.49 1632.84,1207.66 1633.42,1210.31 1634.01,1209.02 1634.6,1208.82 1635.18,1207.39 1635.77,1209.03 1636.36,1210.32 1636.94,1211.61 1637.53,1215.31 1638.12,1214.68 1638.7,1216.12 1639.29,1212.66 1639.88,1212.53 1640.46,1214.89 1641.05,1214.73 1641.63,1211.7 1642.22,1212.85 1642.81,1212.45 1643.39,1212.35 1643.98,1212.45 1644.57,1210.7 1645.15,1213.31 1645.74,1214.58 1646.33,1214.73 1646.91,1213.17 1647.5,1211.86 1648.09,1211.65 1648.67,1210.15 1649.26,1210.2 1649.84,1209.03 1650.43,1207.73 1651.02,1209.17 1651.6,1209.19 1652.19,1210.68 1652.78,1210.69 1653.36,1210.45 1653.95,1209.2 1654.54,1209.24 1655.12,1209.31 1655.71,1212.24 1656.29,1210.69 1656.88,1210.96 1657.47,1206.96 1658.05,1210.17 1658.64,1210.42 1659.23,1212.93 1659.81,1214.11 1660.4,1216.46 1660.99,1215.98 1661.57,1215.98 1662.16,1215.81 1662.75,1216.89 1663.33,1213.82 1663.92,1212.32 1664.5,1210.95 1665.09,1208.33 1665.68,1209.47 1666.26,1208 1666.85,1207.94 1667.44,1210.77 1668.02,1212.12 1668.61,1211.92 1669.2,1209.06 1669.78,1211.84 1670.37,1213.37 1670.96,1213.16 1671.54,1211.8 1672.13,1213.85 1672.71,1213.76 1673.3,1213.28 1673.89,1217.11 1674.47,1219.49 1675.06,1219.16 1675.65,1217.22 1676.23,1216.74 1676.82,1216.35 1677.41,1214.43 1677.99,1212.86 1678.58,1211.41 1679.17,1211.57 1679.75,1211.64 1680.34,1211.72 1680.92,1213.16 1681.51,1210.22 1682.1,1207.43 1682.68,1201.98 1683.27,1201.27 1683.86,1204.24 1684.44,1204.51 1685.03,1207.23 1685.62,1205.68 1686.2,1207.09 1686.79,1207.3 1687.37,1205.83 1687.96,1207.4 1688.55,1206.45 1689.13,1206.49 1689.72,1207.98 1690.31,1212.25 1690.89,1215.79 1691.48,1217.93 1692.07,1216.01 1692.65,1214.12 1693.24,1214.26 1693.83,1212.61 1694.41,1213.84 1695,1213.96 1695.58,1213.99 1696.17,1217.82 1696.76,1220.11 1697.34,1219.63 1697.93,1219.14 1698.52,1219.71 1699.1,1218.97 1699.69,1215.75 1700.28,1212.53 1700.86,1211.05 1701.45,1209.58 1702.04,1208.33 1702.62,1206.96 1703.21,1207.24 1703.79,1208.76 1704.38,1207.61 1704.97,1210.5 1705.55,1210.87 1706.14,1213.59 1706.73,1213.22 1707.31,1214.38 1707.9,1214.42 1708.49,1215.56 1709.07,1212.22 1709.66,1211.89 1710.24,1213.1 1710.83,1212.89 1711.42,1213.83 1712,1215.98 1712.59,1214.31 1713.18,1214.39 1713.76,1214.06 1714.35,1214.16 1714.94,1212.39 1715.52,1212.35 1716.11,1213.68 1716.7,1212.27 1717.28,1212.22 1717.87,1209.45 1718.45,1209.33 1719.04,1210.34 1719.63,1213.16 1720.21,1214.36 1720.8,1212.56 1721.39,1216.56 1721.97,1216.14 1722.56,1214.24 1723.15,1212.74 1723.73,1211.2 1724.32,1211.13 1724.91,1212.51 1725.49,1214.1 1726.08,1216.5 1726.66,1218.8 1727.25,1218.31 1727.84,1215.21 1728.42,1213.62 1729.01,1213.55 1729.6,1210.59 1730.18,1210.7 1730.77,1209.18 1731.36,1207.98 1731.94,1208.05 1732.53,1206.83 1733.11,1205.53 1733.7,1207.31 1734.29,1207.35 1734.87,1207.52 1735.46,1206.27 1736.05,1209.19 1736.63,1208 1737.22,1209.79 1737.81,1210.86 1738.39,1209.51 1738.98,1209.38 1739.57,1209.39 1740.15,1208.05 1740.74,1208.08 1741.32,1206.94 1741.91,1207.12 1742.5,1206.03 1743.08,1208.96 1743.67,1206.11 1744.26,1206.1 1744.84,1209.36 1745.43,1207 1746.02,1205.68 1746.6,1204.69 1747.19,1204.96 1747.78,1204.84 1748.36,1202.29 1748.95,1201.04 1749.53,1203.03 1750.12,1200.64 1750.71,1200.07 1751.29,1199.38 1751.88,1198.73 1752.47,1200.75 1753.05,1201.37 1753.64,1200.46 1754.23,1201.31 1754.81,1201.74 1755.4,1201.05 1755.99,1203.02 1756.57,1201.92 1757.16,1199.9 1757.74,1200.68 1758.33,1201.37 1758.92,1200.54 1759.5,1203.75 1760.09,1205.41 1760.68,1206.02 1761.26,1204.86 1761.85,1207.8 1762.44,1210.81 1763.02,1212.13 1763.61,1213.51 1764.19,1214.66 1764.78,1213.37 1765.37,1209.58 1765.95,1211.1 1766.54,1211.11 1767.13,1212.52 1767.71,1212.32 1768.3,1213.53 1768.89,1216.06 1769.47,1218.58 1770.06,1219.67 1770.65,1215.12 1771.23,1215.17 1771.82,1218.97 1772.4,1217.52 1772.99,1217.02 1773.58,1216.91 1774.16,1215.43 1774.75,1213.94 1775.34,1213.91 1775.92,1215.06 1776.51,1216.29 1777.1,1215.12 1777.68,1215.13 1778.27,1213.52 1778.86,1217.51 1779.44,1215.87 1780.03,1216.78 1780.61,1214.91 1781.2,1214.63 1781.79,1214.42 1782.37,1212.92 1782.96,1213.93 1783.55,1212.54 1784.13,1210.94 1784.72,1212.29 1785.31,1213.67 1785.89,1216.36 1786.48,1219.05 1787.06,1221.46 1787.65,1225.09 1788.24,1221.63 1788.82,1221.1 1789.41,1219.33 1790,1217.68 1790.58,1217.44 1791.17,1218.5 1791.76,1219.19 1792.34,1219.97 1792.93,1218.19 1793.52,1210.81 1794.1,1208.42 1794.69,1208.48 1795.27,1210.03 1795.86,1207.23 1796.45,1205.85 1797.03,1205.98 1797.62,1206.12 1798.21,1203.7 1798.79,1203.99 1799.38,1202.88 1799.97,1203.29 1800.55,1205.03 1801.14,1206.85 1801.73,1207.4 1802.31,1207.52 1802.9,1207.8 1803.48,1208.03 1804.07,1209.5 1804.66,1208.23 1805.24,1208.14 1805.83,1205.4 1806.42,1207.16 1807,1208.61 1807.59,1208.58 1808.18,1207.3 1808.76,1208.86 1809.35,1209.26 1809.94,1209.45 1810.52,1209.48 1811.11,1209.32 1811.69,1208.4 1812.28,1208.36 1812.87,1208.74 1813.45,1209.09 1814.04,1212.05 1814.63,1210.44 1815.21,1214.42 1815.8,1214.24 1816.39,1216.56 1816.97,1213.62 1817.56,1213.41 1818.14,1211.9 1818.73,1214.63 1819.32,1212.96 1819.9,1211.56 1820.49,1208.73 1821.08,1208.69 1821.66,1208.51 1822.25,1203 1822.84,1203.25 1823.42,1205.04 1824.01,1206.98 1824.6,1205.81 1825.18,1207.27 1825.77,1207.43 1826.35,1209.12 1826.94,1210.46 1827.53,1212.02 1828.11,1213.35 1828.7,1211.46 1829.29,1211.31 1829.87,1215.21 1830.46,1214.66 1831.05,1212.99 1831.63,1213.23 1832.22,1214.7 1832.81,1214.51 1833.39,1215.63 1833.98,1213.06 1834.56,1211.61 1835.15,1210.21 1835.74,1210.04 1836.32,1213.06 1836.91,1212.91 1837.5,1210.36 1838.08,1214.51 1838.67,1213.12 1839.26,1213.06 1839.84,1216.93 1840.43,1215.43 1841.01,1214.9 1841.6,1214.48 1842.19,1212.89 1842.77,1212.95 1843.36,1211.57 1843.95,1213.07 1844.53,1212.94 1845.12,1212.68 1845.71,1212.78 1846.29,1212.83 1846.88,1212.89 1847.47,1214.08 1848.05,1213.69 1848.64,1214.71 1849.22,1215.91 1849.81,1215.57 1850.4,1215.09 1850.98,1215.73 1851.57,1211.28 1852.16,1208.77 1852.74,1208.98 1853.33,1211.72 1853.92,1208.81 1854.5,1208.89 1855.09,1210.41 1855.68,1210.35 1856.26,1208.93 1856.85,1210.53 1857.43,1211.72 1858.02,1210.07 1858.61,1214 1859.19,1215.23 1859.78,1216.25 1860.37,1213.29 1860.95,1211.78 1861.54,1207.82 1862.13,1206.82 1862.71,1206.71 1863.3,1208.32 1863.88,1207.1 1864.47,1207.2 1865.06,1210.04 1865.64,1211.51 1866.23,1215.57 1866.82,1215.35 1867.4,1212.53 1867.99,1212.55 1868.58,1213.53 1869.16,1209.24 1869.75,1205.24 1870.34,1203.89 1870.92,1203.03 1871.51,1203.27 1872.09,1203.7 1872.68,1205.54 1873.27,1207.28 1873.85,1206 1874.44,1206.29 1875.03,1206.54 1875.61,1205.31 1876.2,1205.42 1876.79,1205.6 1877.37,1208.39 1877.96,1208.21 1878.55,1208.24 1879.13,1209.54 1879.72,1211.05 1880.3,1210.89 1880.89,1210.8 1881.48,1210.94 1882.06,1212.42 1882.65,1211.05 1883.24,1211.1 1883.82,1212.36 1884.41,1210.67 1885,1209.37 1885.58,1213.36 1886.17,1211.98 1886.76,1212.96 1887.34,1212.81 1887.93,1214.03 1888.51,1215.27 1889.1,1217.55 1889.69,1215.82 1890.27,1215.38 1890.86,1212.54 1891.45,1209.72 1892.03,1211.2 1892.62,1211.14 1893.21,1209.83 1893.79,1209.86 1894.38,1210.13 1894.96,1208.6 1895.55,1208.73 1896.14,1212.91 1896.72,1211.52 1897.31,1214.22 1897.9,1217.62 1898.48,1217.45 1899.07,1218.44 1899.66,1219.38 1900.24,1217.43 1900.83,1219.59 1901.42,1216.13 1902,1218.46 1902.59,1218.06 1903.17,1221.85 1903.76,1219.79 1904.35,1218.14 1904.93,1216.38 1905.52,1218.73 1906.11,1215.62 1906.69,1213.81 1907.28,1214.76 1907.87,1214.26 1908.45,1215.44 1909.04,1209.65 1909.63,1210.71 1910.21,1209.1 1910.8,1207.83 1911.38,1205.44 1911.97,1204.04 1912.56,1207.24 1913.14,1207.37 1913.73,1210.39 1914.32,1209.07 1914.9,1211.58 1915.49,1210.24 1916.08,1207.55 1916.66,1209.31 1917.25,1208.15 1917.83,1205.21 1918.42,1205.56 1919.01,1204.67 1919.59,1206.31 1920.18,1204.9 1920.77,1203.65 1921.35,1205.34 1921.94,1206.12 1922.53,1207.71 1923.11,1203.71 1923.7,1201.2 1924.29,1203.08 1924.87,1203.2 1925.46,1202.09 1926.04,1203.65 1926.63,1202.62 1927.22,1202.76 1927.8,1206 1928.39,1205.18 1928.98,1205.23 1929.56,1206.71 1930.15,1208.1 1930.74,1209.37 1931.32,1207.86 1931.91,1207.93 1932.5,1206.84 1933.08,1206.96 1933.67,1208.59 1934.25,1207.6 1934.84,1205.05 1935.43,1206.77 1936.01,1205.65 1936.6,1204.78 1937.19,1205.1 1937.77,1205.33 1938.36,1205.72 1938.95,1206.16 1939.53,1207.61 1940.12,1209.14 1940.71,1213.44 1941.29,1213.12 1941.88,1214.52 1942.46,1214.26 1943.05,1212.64 1943.64,1212.61 1944.22,1211.25 1944.81,1211.08 1945.4,1211.01 1945.98,1216.59 1946.57,1217.54 1947.16,1217.31 1947.74,1217.01 1948.33,1219.22 1948.91,1217.27 1949.5,1215.6 1950.09,1216.58 1950.67,1215.15 1951.26,1216.11 1951.85,1213.18 1952.43,1213.15 1953.02,1212.13 1953.61,1206.72 1954.19,1206.93 1954.78,1206.02 1955.37,1208.97 1955.95,1207.74 1956.54,1207.87 1957.12,1210.86 1957.71,1212.32 1958.3,1211.97 1958.88,1213.34 1959.47,1214.57 1960.06,1208.85 1960.64,1208.8 1961.23,1208.99 1961.82,1210.38 1962.4,1210.25 1962.99,1206.24 1963.58,1206.41 1964.16,1206.59 1964.75,1211.08 1965.33,1209.85 1965.92,1209.99 1966.51,1211.08 1967.09,1211.03 1967.68,1209.66 1968.27,1211.1 1968.85,1208.84 1969.44,1209.09 1970.03,1210.47 1970.61,1212.92 1971.2,1214.11 1971.78,1210.07 1972.37,1209.88 1972.96,1211.28 1973.54,1209.89 1974.13,1211.04 1974.72,1211.12 1975.3,1210.78 1975.89,1212.25 1976.48,1209.73 1977.06,1208.51 1977.65,1206.1 1978.24,1207.68 1978.82,1210.47 1979.41,1211.66 1979.99,1212.84 1980.58,1215.57 1981.17,1212.66 1981.75,1209.87 1982.34,1208.89 1982.93,1207.53 1983.51,1206.42 1984.1,1206.69 1984.69,1205.42 1985.27,1206.99 1985.86,1208.61 1986.45,1208.97 1987.03,1209.02 1987.62,1206.34 1988.2,1203.86 1988.79,1208.04 1989.38,1209.48 1989.96,1209.52 1990.55,1208.09 1991.14,1209.32 1991.72,1208.27 1992.31,1208.14 1992.9,1208.64 1993.48,1207.31 1994.07,1206.33 1994.65,1206.7 1995.24,1211.03 1995.83,1211.02 1996.41,1212.4 1997,1212.47 1997.59,1209.55 1998.17,1208.26 1998.76,1208.66 1999.35,1207.48 1999.93,1206.46 2000.52,1206.54 2001.11,1209.26 2001.69,1205.14 2002.28,1206.87 2002.86,1207.23 2003.45,1207.6 2004.04,1207.68 2004.62,1207.68 2005.21,1207.73 2005.8,1207.95 2006.38,1209.6 2006.97,1205.5 2007.56,1204.6 2008.14,1204.78 2008.73,1206.31 2009.32,1203.86 2009.9,1204.37 2010.49,1206.09 2011.07,1206.36 2011.66,1207.96 2012.25,1207.86 2012.83,1207.98 2013.42,1209.57 2014.01,1212.27 2014.59,1209 2015.18,1209.21 2015.77,1207.97 2016.35,1206.7 2016.94,1205.47 2017.53,1204.52 2018.11,1206.31 2018.7,1206.55 2019.28,1205.23 2019.87,1201.45 2020.46,1207.3 2021.04,1207.16 2021.63,1208.67 2022.22,1208.91 2022.8,1210.26 2023.39,1208.89 2023.98,1208.64 2024.56,1209.03 2025.15,1210.89 2025.73,1209.2 2026.32,1209.69 2026.91,1211.17 2027.49,1210.02 2028.08,1205.86 2028.67,1205.79 2029.25,1204.65 2029.84,1206.31 2030.43,1206.47 2031.01,1207.87 2031.6,1208.12 2032.19,1205.33 2032.77,1205.68 2033.36,1204.67 2033.94,1206.68 2034.53,1206.9 2035.12,1206.91 2035.7,1207.25 2036.29,1207.56 2036.88,1205.09 2037.46,1203.95 2038.05,1205.8 2038.64,1204.39 2039.22,1206.2 2039.81,1208.94 2040.4,1203.43 2040.98,1202.63 2041.57,1203.13 2042.15,1203.54 2042.74,1203.89 2043.33,1207.1 2043.91,1208.79 2044.5,1209.05 2045.09,1210.25 2045.67,1211.71 2046.26,1211.43 2046.85,1212.62 2047.43,1212.54 2048.02,1212.38 2048.6,1214.86 2049.19,1214.78 2049.78,1215.92 2050.36,1215.53 2050.95,1214.14 2051.54,1213.87 2052.12,1216.44 2052.71,1214.63 2053.3,1213.23 2053.88,1211.62 2054.47,1211.68 2055.06,1209.12 2055.64,1209.47 2056.23,1213.65 2056.81,1213.19 2057.4,1213.34 2057.99,1210.39 2058.57,1211.26 2059.16,1209.71 2059.75,1211.01 2060.33,1211.16 2060.92,1212.59 2061.51,1213.75 2062.09,1213.51 2062.68,1216.12 2063.27,1217.25 2063.85,1215.83 2064.44,1214.32 2065.02,1215.52 2065.61,1214.06 2066.2,1215.02 2066.78,1214.83 2067.37,1211.67 2067.96,1211.68 2068.54,1211.3 2069.13,1211.26 2069.72,1212.72 2070.3,1212.75 2070.89,1212.73 2071.48,1212.47 2072.06,1212.3 2072.65,1211.1 2073.23,1212.14 2073.82,1212.37 2074.41,1213.75 2074.99,1210.9 2075.58,1209.94 2076.17,1210.06 2076.75,1211.47 2077.34,1215.53 2077.93,1212.55 2078.51,1215.38 2079.1,1216.39 2079.68,1213.44 2080.27,1216.03 2080.86,1215.48 2081.44,1213.92 2082.03,1211.34 2082.62,1209.89 2083.2,1209.89 2083.79,1212.85 2084.38,1212.74 2084.96,1210.98 2085.55,1212.41 2086.14,1211.06 2086.72,1212.35 2087.31,1210.96 2087.89,1209.59 2088.48,1210.86 2089.07,1209.41 2089.65,1208.04 2090.24,1209.56 2090.83,1211.01 2091.41,1213.44 2092,1210.46 2092.59,1210.21 2093.17,1210.18 2093.76,1207.63 2094.35,1209.34 2094.93,1209.49 2095.52,1209.58 2096.1,1209.81 2096.69,1207.13 2097.28,1208.68 2097.86,1208.65 2098.45,1206.02 2099.04,1206.27 2099.62,1205.01 2100.21,1206.67 2100.8,1209.37 2101.38,1209.17 2101.97,1207.96 2102.55,1208.27 2103.14,1205.67 2103.73,1207.06 2104.31,1208.53 2104.9,1209.7 2105.49,1209.64 2106.07,1209.8 2106.66,1211.13 2107.25,1210.91 2107.83,1212.23 2108.42,1210.62 2109.01,1209.46 2109.59,1209.36 2110.18,1213.79 2110.76,1213.65 2111.35,1214.74 2111.94,1214.69 2112.52,1211.89 2113.11,1211.37 2113.7,1211.13 2114.28,1211.23 2114.87,1213.84 2115.46,1210.87 2116.04,1206.81 2116.63,1209.5 2117.22,1209.56 2117.8,1207.04 2118.39,1207.32 2118.97,1206.24 2119.56,1209.31 2120.15,1209.15 2120.73,1210.62 2121.32,1211.54 2121.91,1211.52 2122.49,1211.19 2123.08,1208.48 2123.67,1208.27 2124.25,1208.4 2124.84,1210 2125.42,1211.25 2126.01,1208.82 2126.6,1210.22 2127.18,1212.91 2127.77,1215.31 2128.36,1216.33 2128.94,1215.95 2129.53,1214.5 2130.12,1212.75 2130.7,1214.14 2131.29,1212.24 2131.88,1212.13 2132.46,1211.98 2133.05,1211.56 2133.63,1214.26 2134.22,1214.17 2134.81,1212.94 2135.39,1212.83 2135.98,1213.98 2136.57,1216.6 2137.15,1214.86 2137.74,1215.71 2138.33,1215.72 2138.91,1216.74 2139.5,1216.44 2140.09,1215.89 2140.67,1214.11 2141.26,1215.22 2141.84,1212.35 2142.43,1212.53 2143.02,1211.12 2143.6,1209.93 2144.19,1211.15 2144.78,1211.32 2145.36,1212.58 2145.95,1211.16 2146.54,1213.87 2147.12,1216.39 2147.71,1215.91 2148.3,1212.78 2148.88,1211.29 2149.47,1211.22 2150.05,1209.84 2150.64,1212.49 2151.23,1213.64 2151.81,1214.88 2152.4,1211.84 2152.99,1213.14 2153.57,1211.63 2154.16,1212.68 2154.75,1214 2155.33,1213.83 2155.92,1217.8 2156.5,1218.86 2157.09,1219.85 2157.68,1219.24 2158.26,1220.28 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1210.98 L986.612 1210.98 L987.198 1210.98 L987.785 1210.98 L988.371 1210.98 L988.957 1210.98 L989.544 1210.98 L990.13 1210.98 L990.717 1210.98 L991.303 1210.98 L991.889 1210.98 L992.476 1210.98 L993.062 1210.98 L993.649 1210.98 L994.235 1210.98 L994.822 1210.98 L995.408 1210.98 L995.994 1210.98 L996.581 1210.98 L997.167 1210.98 L997.754 1210.98 L998.34 1210.98 L998.926 1210.98 L999.513 1210.98 L1000.1 1210.98 L1000.69 1210.98 L1001.27 1210.98 L1001.86 1210.98 L1002.44 1210.98 L1003.03 1210.98 L1003.62 1210.98 L1004.2 1210.98 L1004.79 1210.98 L1005.38 1210.98 L1005.96 1210.98 L1006.55 1210.98 L1007.14 1210.98 L1007.72 1210.98 L1008.31 1210.98 L1008.9 1210.98 L1009.48 1210.98 L1010.07 1210.98 L1010.65 1210.98 L1011.24 1210.98 L1011.83 1210.98 L1012.41 1210.98 L1013 1210.98 L1013.59 1210.98 L1014.17 1210.98 L1014.76 1210.98 L1015.35 1210.98 L1015.93 1210.98 L1016.52 1210.98 L1017.11 1210.98 L1017.69 1210.98 L1018.28 1210.98 L1018.86 1210.98 L1019.45 1210.98 L1020.04 1210.98 L1020.62 1210.98 L1021.21 1210.98 L1021.8 1210.98 L1022.38 1210.98 L1022.97 1210.98 L1023.56 1210.98 L1024.14 1210.98 L1024.73 1210.98 L1025.32 1210.98 L1025.9 1210.98 L1026.49 1210.98 L1027.07 1210.98 L1027.66 1210.98 L1028.25 1210.98 L1028.83 1210.98 L1029.42 1210.98 L1030.01 1210.98 L1030.59 1210.98 L1031.18 1210.98 L1031.77 1210.98 L1032.35 1210.98 L1032.94 1210.98 L1033.52 1210.98 L1034.11 1210.98 L1034.7 1210.98 L1035.28 1210.98 L1035.87 1210.98 L1036.46 1210.98 L1037.04 1210.98 L1037.63 1210.98 L1038.22 1210.98 L1038.8 1210.98 L1039.39 1210.98 L1039.98 1210.98 L1040.56 1210.98 L1041.15 1210.98 L1041.73 1210.98 L1042.32 1210.98 L1042.91 1210.98 L1043.49 1210.98 L1044.08 1210.98 L1044.67 1210.98 L1045.25 1210.98 L1045.84 1210.98 L1046.43 1210.98 L1047.01 1210.98 L1047.6 1210.98 L1048.19 1210.98 L1048.77 1210.98 L1049.36 1210.98 L1049.94 1210.98 L1050.53 1210.98 L1051.12 1210.98 L1051.7 1210.98 L1052.29 1210.98 L1052.88 1210.98 L1053.46 1210.98 L1054.05 1210.98 L1054.64 1210.98 L1055.22 1210.98 L1055.81 1210.98 L1056.39 1210.98 L1056.98 1210.98 L1057.57 1210.98 L1058.15 1210.98 L1058.74 1210.98 L1059.33 1210.98 L1059.91 1210.98 L1060.5 1210.98 L1061.09 1210.98 L1061.67 1210.98 L1062.26 1210.98 L1062.85 1210.98 L1063.43 1210.98 L1064.02 1210.98 L1064.6 1210.98 L1065.19 1210.98 L1065.78 1210.98 L1066.36 1210.98 L1066.95 1210.98 L1067.54 1210.98 L1068.12 1210.98 L1068.71 1210.98 L1069.3 1210.98 L1069.88 1210.98 L1070.47 1210.98 L1071.06 1210.98 L1071.64 1210.98 L1072.23 1210.98 L1072.81 1210.98 L1073.4 1210.98 L1073.99 1210.98 L1074.57 1210.98 L1075.16 1210.98 L1075.75 1210.98 L1076.33 1210.98 L1076.92 1210.98 L1077.51 1210.98 L1078.09 1210.98 L1078.68 1210.98 L1079.26 1210.98 L1079.85 1210.98 L1080.44 1210.98 L1081.02 1210.98 L1081.61 1210.98 L1082.2 1210.98 L1082.78 1210.98 L1083.37 1210.98 L1083.96 1210.98 L1084.54 1210.98 L1085.13 1210.98 L1085.72 1210.98 L1086.3 1210.98 L1086.89 1210.98 L1087.47 1210.98 L1088.06 1210.98 L1088.65 1210.98 L1089.23 1210.98 L1089.82 1210.98 L1090.41 1210.98 L1090.99 1210.98 L1091.58 1210.98 L1092.17 1210.98 L1092.75 1210.98 L1093.34 1210.98 L1093.93 1210.98 L1094.51 1210.98 L1095.1 1210.98 L1095.68 1210.98 L1096.27 1210.98 L1096.86 1210.98 L1097.44 1210.98 L1098.03 1210.98 L1098.62 1210.98 L1099.2 1210.98 L1099.79 1210.98 L1100.38 1210.98 L1100.96 1210.98 L1101.55 1210.98 L1102.14 1210.98 L1102.72 1210.98 L1103.31 1210.98 L1103.89 1210.98 L1104.48 1210.98 L1105.07 1210.98 L1105.65 1210.98 L1106.24 1210.98 L1106.83 1210.98 L1107.41 1210.98 L1108 1210.98 L1108.59 1210.98 L1109.17 1210.98 L1109.76 1210.98 L1110.34 1210.98 L1110.93 1210.98 L1111.52 1210.98 L1112.1 1210.98 L1112.69 1210.98 L1113.28 1210.98 L1113.86 1210.98 L1114.45 1210.98 L1115.04 1210.98 L1115.62 1210.98 L1116.21 1210.98 L1116.8 1210.98 L1117.38 1210.98 L1117.97 1210.98 L1118.55 1210.98 L1119.14 1210.98 L1119.73 1210.98 L1120.31 1210.98 L1120.9 1210.98 L1121.49 1210.98 L1122.07 1210.98 L1122.66 1210.98 L1123.25 1210.98 L1123.83 1210.98 L1124.42 1210.98 L1125.01 1210.98 L1125.59 1210.98 L1126.18 1210.98 L1126.76 1210.98 L1127.35 1210.98 L1127.94 1210.98 L1128.52 1210.98 L1129.11 1210.98 L1129.7 1210.98 L1130.28 1210.98 L1130.87 1210.98 L1131.46 1210.98 L1132.04 1210.98 L1132.63 1210.98 L1133.21 1210.98 L1133.8 1210.98 L1134.39 1210.98 L1134.97 1210.98 L1135.56 1210.98 L1136.15 1210.98 L1136.73 1210.98 L1137.32 1210.98 L1137.91 1210.98 L1138.49 1210.98 L1139.08 1210.98 L1139.67 1210.98 L1140.25 1210.98 L1140.84 1210.98 L1141.42 1210.98 L1142.01 1210.98 L1142.6 1210.98 L1143.18 1210.98 L1143.77 1210.98 L1144.36 1210.98 L1144.94 1210.98 L1145.53 1210.98 L1146.12 1210.98 L1146.7 1210.98 L1147.29 1210.98 L1147.88 1210.98 L1148.46 1210.98 L1149.05 1210.98 L1149.63 1210.98 L1150.22 1210.98 L1150.81 1210.98 L1151.39 1210.98 L1151.98 1210.98 L1152.57 1210.98 L1153.15 1210.98 L1153.74 1210.98 L1154.33 1210.98 L1154.91 1210.98 L1155.5 1210.98 L1156.09 1210.98 L1156.67 1210.98 L1157.26 1210.98 L1157.84 1210.98 L1158.43 1210.98 L1159.02 1210.98 L1159.6 1210.98 L1160.19 1210.98 L1160.78 1210.98 L1161.36 1210.98 L1161.95 1210.98 L1162.54 1210.98 L1163.12 1210.98 L1163.71 1210.98 L1164.29 1210.98 L1164.88 1210.98 L1165.47 1210.98 L1166.05 1210.98 L1166.64 1210.98 L1167.23 1210.98 L1167.81 1210.98 L1168.4 1210.98 L1168.99 1210.98 L1169.57 1210.98 L1170.16 1210.98 L1170.75 1210.98 L1171.33 1210.98 L1171.92 1210.98 L1172.5 1210.98 L1173.09 1210.98 L1173.68 1210.98 L1174.26 1210.98 L1174.85 1210.98 L1175.44 1210.98 L1176.02 1210.98 L1176.61 1210.98 L1177.2 1210.98 L1177.78 1210.98 L1178.37 1210.98 L1178.96 1210.98 L1179.54 1210.98 L1180.13 1210.98 L1180.71 1210.98 L1181.3 1210.98 L1181.89 1210.98 L1182.47 1210.98 L1183.06 1210.98 L1183.65 1210.98 L1184.23 1210.98 L1184.82 1210.98 L1185.41 1210.98 L1185.99 1210.98 L1186.58 1210.98 L1187.16 1210.98 L1187.75 1210.98 L1188.34 1210.98 L1188.92 1210.98 L1189.51 1210.98 L1190.1 1210.98 L1190.68 1210.98 L1191.27 1210.98 L1191.86 1210.98 L1192.44 1210.98 L1193.03 1210.98 L1193.62 1210.98 L1194.2 1210.98 L1194.79 1210.98 L1195.37 1210.98 L1195.96 1210.98 L1196.55 1210.98 L1197.13 1210.98 L1197.72 1210.98 L1198.31 1210.98 L1198.89 1210.98 L1199.48 1210.98 L1200.07 1210.98 L1200.65 1210.98 L1201.24 1210.98 L1201.83 1210.98 L1202.41 1210.98 L1203 1210.98 L1203.58 1210.98 L1204.17 1210.98 L1204.76 1210.98 L1205.34 1210.98 L1205.93 1210.98 L1206.52 1210.98 L1207.1 1210.98 L1207.69 1210.98 L1208.28 1210.98 L1208.86 1210.98 L1209.45 1210.98 L1210.03 1210.98 L1210.62 1210.98 L1211.21 1210.98 L1211.79 1210.98 L1212.38 1210.98 L1212.97 1210.98 L1213.55 1210.98 L1214.14 1210.98 L1214.73 1210.98 L1215.31 1210.98 L1215.9 1210.98 L1216.49 1210.98 L1217.07 1210.98 L1217.66 1210.98 L1218.24 1210.98 L1218.83 1210.98 L1219.42 1210.98 L1220 1210.98 L1220.59 1210.98 L1221.18 1210.98 L1221.76 1210.98 L1222.35 1210.98 L1222.94 1210.98 L1223.52 1210.98 L1224.11 1210.98 L1224.7 1210.98 L1225.28 1210.98 L1225.87 1210.98 L1226.45 1210.98 L1227.04 1210.98 L1227.63 1210.98 L1228.21 1210.98 L1228.8 1210.98 L1229.39 1210.98 L1229.97 1210.98 L1230.56 1210.98 L1231.15 1210.98 L1231.73 1210.98 L1232.32 1210.98 L1232.91 1210.98 L1233.49 1210.98 L1234.08 1210.98 L1234.66 1210.98 L1235.25 1210.98 L1235.84 1210.98 L1236.42 1210.98 L1237.01 1210.98 L1237.6 1210.98 L1238.18 1210.98 L1238.77 1210.98 L1239.36 1210.98 L1239.94 1210.98 L1240.53 1210.98 L1241.11 1210.98 L1241.7 1210.98 L1242.29 1210.98 L1242.87 1210.98 L1243.46 1210.98 L1244.05 1210.98 L1244.63 1210.98 L1245.22 1210.98 L1245.81 1210.98 L1246.39 1210.98 L1246.98 1210.98 L1247.57 1210.98 L1248.15 1210.98 L1248.74 1210.98 L1249.32 1210.98 L1249.91 1210.98 L1250.5 1210.98 L1251.08 1210.98 L1251.67 1210.98 L1252.26 1210.98 L1252.84 1210.98 L1253.43 1210.98 L1254.02 1210.98 L1254.6 1210.98 L1255.19 1210.98 L1255.78 1210.98 L1256.36 1210.98 L1256.95 1210.98 L1257.53 1210.98 L1258.12 1210.98 L1258.71 1210.98 L1259.29 1210.98 L1259.88 1210.98 L1260.47 1210.98 L1261.05 1210.98 L1261.64 1210.98 L1262.23 1210.98 L1262.81 1210.98 L1263.4 1210.98 L1263.98 1210.98 L1264.57 1210.98 L1265.16 1210.98 L1265.74 1210.98 L1266.33 1210.98 L1266.92 1210.98 L1267.5 1210.98 L1268.09 1210.98 L1268.68 1210.98 L1269.26 1210.98 L1269.85 1210.98 L1270.44 1210.98 L1271.02 1210.98 L1271.61 1210.98 L1272.19 1210.98 L1272.78 1210.98 L1273.37 1210.98 L1273.95 1210.98 L1274.54 1210.98 L1275.13 1210.98 L1275.71 1210.98 L1276.3 1210.98 L1276.89 1210.98 L1277.47 1210.98 L1278.06 1210.98 L1278.65 1210.98 L1279.23 1210.98 L1279.82 1210.98 L1280.4 1210.98 L1280.99 1210.98 L1281.58 1210.98 L1282.16 1210.98 L1282.75 1210.98 L1283.34 1210.98 L1283.92 1210.98 L1284.51 1210.98 L1285.1 1210.98 L1285.68 1210.98 L1286.27 1210.98 L1286.86 1210.98 L1287.44 1210.98 L1288.03 1210.98 L1288.61 1210.98 L1289.2 1210.98 L1289.79 1210.98 L1290.37 1210.98 L1290.96 1210.98 L1291.55 1210.98 L1292.13 1210.98 L1292.72 1210.98 L1293.31 1210.98 L1293.89 1210.98 L1294.48 1210.98 L1295.06 1210.98 L1295.65 1210.98 L1296.24 1210.98 L1296.82 1210.98 L1297.41 1210.98 L1298 1210.98 L1298.58 1210.98 L1299.17 1210.98 L1299.76 1210.98 L1300.34 1210.98 L1300.93 1210.98 L1301.52 1210.98 L1302.1 1210.98 L1302.69 1210.98 L1303.27 1210.98 L1303.86 1210.98 L1304.45 1210.98 L1305.03 1210.98 L1305.62 1210.98 L1306.21 1210.98 L1306.79 1210.98 L1307.38 1210.98 L1307.97 1210.98 L1308.55 1210.98 L1309.14 1210.98 L1309.73 1210.98 L1310.31 1210.98 L1310.9 1210.98 L1311.48 1210.98 L1312.07 1210.98 L1312.66 1210.98 L1313.24 1210.98 L1313.83 1210.98 L1314.42 1210.98 L1315 1210.98 L1315.59 1210.98 L1316.18 1210.98 L1316.76 1210.98 L1317.35 1210.98 L1317.93 1210.98 L1318.52 1210.98 L1319.11 1210.98 L1319.69 1210.98 L1320.28 1210.98 L1320.87 1210.98 L1321.45 1210.98 L1322.04 1210.98 L1322.63 1210.98 L1323.21 1210.98 L1323.8 1210.98 L1324.39 1210.98 L1324.97 1210.98 L1325.56 1210.98 L1326.14 1210.98 L1326.73 1210.98 L1327.32 1210.98 L1327.9 1210.98 L1328.49 1210.98 L1329.08 1210.98 L1329.66 1210.98 L1330.25 1210.98 L1330.84 1210.98 L1331.42 1210.98 L1332.01 1210.98 L1332.6 1210.98 L1333.18 1210.98 L1333.77 1210.98 L1334.35 1210.98 L1334.94 1210.98 L1335.53 1210.98 L1336.11 1210.98 L1336.7 1210.98 L1337.29 1210.98 L1337.87 1210.98 L1338.46 1210.98 L1339.05 1210.98 L1339.63 1210.98 L1340.22 1210.98 L1340.8 1210.98 L1341.39 1210.98 L1341.98 1210.98 L1342.56 1210.98 L1343.15 1210.98 L1343.74 1210.98 L1344.32 1210.98 L1344.91 1210.98 L1345.5 1210.98 L1346.08 1210.98 L1346.67 1210.98 L1347.26 1210.98 L1347.84 1210.98 L1348.43 1210.98 L1349.01 1210.98 L1349.6 1210.98 L1350.19 1210.98 L1350.77 1210.98 L1351.36 1210.98 L1351.95 1210.98 L1352.53 1210.98 L1353.12 1210.98 L1353.71 1210.98 L1354.29 1210.98 L1354.88 1210.98 L1355.47 1210.98 L1356.05 1210.98 L1356.64 1210.98 L1357.22 1210.98 L1357.81 1210.98 L1358.4 1210.98 L1358.98 1210.98 L1359.57 1210.98 L1360.16 1210.98 L1360.74 1210.98 L1361.33 1210.98 L1361.92 1210.98 L1362.5 1210.98 L1363.09 1210.98 L1363.68 1210.98 L1364.26 1210.98 L1364.85 1210.98 L1365.43 1210.98 L1366.02 1210.98 L1366.61 1210.98 L1367.19 1210.98 L1367.78 1210.98 L1368.37 1210.98 L1368.95 1210.98 L1369.54 1210.98 L1370.13 1210.98 L1370.71 1210.98 L1371.3 1210.98 L1371.88 1210.98 L1372.47 1210.98 L1373.06 1210.98 L1373.64 1210.98 L1374.23 1210.98 L1374.82 1210.98 L1375.4 1210.98 L1375.99 1210.98 L1376.58 1210.98 L1377.16 1210.98 L1377.75 1210.98 L1378.34 1210.98 L1378.92 1210.98 L1379.51 1210.98 L1380.09 1210.98 L1380.68 1210.98 L1381.27 1210.98 L1381.85 1210.98 L1382.44 1210.98 L1383.03 1210.98 L1383.61 1210.98 L1384.2 1210.98 L1384.79 1210.98 L1385.37 1210.98 L1385.96 1210.98 L1386.55 1210.98 L1387.13 1210.98 L1387.72 1210.98 L1388.3 1210.98 L1388.89 1210.98 L1389.48 1210.98 L1390.06 1210.98 L1390.65 1210.98 L1391.24 1210.98 L1391.82 1210.98 L1392.41 1210.98 L1393 1210.98 L1393.58 1210.98 L1394.17 1210.98 L1394.75 1210.98 L1395.34 1210.98 L1395.93 1210.98 L1396.51 1210.98 L1397.1 1210.98 L1397.69 1210.98 L1398.27 1210.98 L1398.86 1210.98 L1399.45 1210.98 L1400.03 1210.98 L1400.62 1210.98 L1401.21 1210.98 L1401.79 1210.98 L1402.38 1210.98 L1402.96 1210.98 L1403.55 1210.98 L1404.14 1210.98 L1404.72 1210.98 L1405.31 1210.98 L1405.9 1210.98 L1406.48 1210.98 L1407.07 1210.98 L1407.66 1210.98 L1408.24 1210.98 L1408.83 1210.98 L1409.42 1210.98 L1410 1210.98 L1410.59 1210.98 L1411.17 1210.98 L1411.76 1210.98 L1412.35 1210.98 L1412.93 1210.98 L1413.52 1210.98 L1414.11 1210.98 L1414.69 1210.98 L1415.28 1210.98 L1415.87 1210.98 L1416.45 1210.98 L1417.04 1210.98 L1417.63 1210.98 L1418.21 1210.98 L1418.8 1210.98 L1419.38 1210.98 L1419.97 1210.98 L1420.56 1210.98 L1421.14 1210.98 L1421.73 1210.98 L1422.32 1210.98 L1422.9 1210.98 L1423.49 1210.98 L1424.08 1210.98 L1424.66 1210.98 L1425.25 1210.98 L1425.83 1210.98 L1426.42 1210.98 L1427.01 1210.98 L1427.59 1210.98 L1428.18 1210.98 L1428.77 1210.98 L1429.35 1210.98 L1429.94 1210.98 L1430.53 1210.98 L1431.11 1210.98 L1431.7 1210.98 L1432.29 1210.98 L1432.87 1210.98 L1433.46 1210.98 L1434.04 1210.98 L1434.63 1210.98 L1435.22 1210.98 L1435.8 1210.98 L1436.39 1210.98 L1436.98 1210.98 L1437.56 1210.98 L1438.15 1210.98 L1438.74 1210.98 L1439.32 1210.98 L1439.91 1210.98 L1440.5 1210.98 L1441.08 1210.98 L1441.67 1210.98 L1442.25 1210.98 L1442.84 1210.98 L1443.43 1210.98 L1444.01 1210.98 L1444.6 1210.98 L1445.19 1210.98 L1445.77 1210.98 L1446.36 1210.98 L1446.95 1210.98 L1447.53 1210.98 L1448.12 1210.98 L1448.7 1210.98 L1449.29 1210.98 L1449.88 1210.98 L1450.46 1210.98 L1451.05 1210.98 L1451.64 1210.98 L1452.22 1210.98 L1452.81 1210.98 L1453.4 1210.98 L1453.98 1210.98 L1454.57 1210.98 L1455.16 1210.98 L1455.74 1210.98 L1456.33 1210.98 L1456.91 1210.98 L1457.5 1210.98 L1458.09 1210.98 L1458.67 1210.98 L1459.26 1210.98 L1459.85 1210.98 L1460.43 1210.98 L1461.02 1210.98 L1461.61 1210.98 L1462.19 1210.98 L1462.78 1210.98 L1463.37 1210.98 L1463.95 1210.98 L1464.54 1210.98 L1465.12 1210.98 L1465.71 1210.98 L1466.3 1210.98 L1466.88 1210.98 L1467.47 1210.98 L1468.06 1210.98 L1468.64 1210.98 L1469.23 1210.98 L1469.82 1210.98 L1470.4 1210.98 L1470.99 1210.98 L1471.57 1210.98 L1472.16 1210.98 L1472.75 1210.98 L1473.33 1210.98 L1473.92 1210.98 L1474.51 1210.98 L1475.09 1210.98 L1475.68 1210.98 L1476.27 1210.98 L1476.85 1210.98 L1477.44 1210.98 L1478.03 1210.98 L1478.61 1210.98 L1479.2 1210.98 L1479.78 1210.98 L1480.37 1210.98 L1480.96 1210.98 L1481.54 1210.98 L1482.13 1210.98 L1482.72 1210.98 L1483.3 1210.98 L1483.89 1210.98 L1484.48 1210.98 L1485.06 1210.98 L1485.65 1210.98 L1486.24 1210.98 L1486.82 1210.98 L1487.41 1210.98 L1487.99 1210.98 L1488.58 1210.98 L1489.17 1210.98 L1489.75 1210.98 L1490.34 1210.98 L1490.93 1210.98 L1491.51 1210.98 L1492.1 1210.98 L1492.69 1210.98 L1493.27 1210.98 L1493.86 1210.98 L1494.45 1210.98 L1495.03 1210.98 L1495.62 1210.98 L1496.2 1210.98 L1496.79 1210.98 L1497.38 1210.98 L1497.96 1210.98 L1498.55 1210.98 L1499.14 1210.98 L1499.72 1210.98 L1500.31 1210.98 L1500.9 1210.98 L1501.48 1210.98 L1502.07 1210.98 L1502.65 1210.98 L1503.24 1210.98 L1503.83 1210.98 L1504.41 1210.98 L1505 1210.98 L1505.59 1210.98 L1506.17 1210.98 L1506.76 1210.98 L1507.35 1210.98 L1507.93 1210.98 L1508.52 1210.98 L1509.11 1210.98 L1509.69 1210.98 L1510.28 1210.98 L1510.86 1210.98 L1511.45 1210.98 L1512.04 1210.98 L1512.62 1210.98 L1513.21 1210.98 L1513.8 1210.98 L1514.38 1210.98 L1514.97 1210.98 L1515.56 1210.98 L1516.14 1210.98 L1516.73 1210.98 L1517.32 1210.98 L1517.9 1210.98 L1518.49 1210.98 L1519.07 1210.98 L1519.66 1210.98 L1520.25 1210.98 L1520.83 1210.98 L1521.42 1210.98 L1522.01 1210.98 L1522.59 1210.98 L1523.18 1210.98 L1523.77 1210.98 L1524.35 1210.98 L1524.94 1210.98 L1525.52 1210.98 L1526.11 1210.98 L1526.7 1210.98 L1527.28 1210.98 L1527.87 1210.98 L1528.46 1210.98 L1529.04 1210.98 L1529.63 1210.98 L1530.22 1210.98 L1530.8 1210.98 L1531.39 1210.98 L1531.98 1210.98 L1532.56 1210.98 L1533.15 1210.98 L1533.73 1210.98 L1534.32 1210.98 L1534.91 1210.98 L1535.49 1210.98 L1536.08 1210.98 L1536.67 1210.98 L1537.25 1210.98 L1537.84 1210.98 L1538.43 1210.98 L1539.01 1210.98 L1539.6 1210.98 L1540.19 1210.98 L1540.77 1210.98 L1541.36 1210.98 L1541.94 1210.98 L1542.53 1210.98 L1543.12 1210.98 L1543.7 1210.98 L1544.29 1210.98 L1544.88 1210.98 L1545.46 1210.98 L1546.05 1210.98 L1546.64 1210.98 L1547.22 1210.98 L1547.81 1210.98 L1548.4 1210.98 L1548.98 1210.98 L1549.57 1210.98 L1550.15 1210.98 L1550.74 1210.98 L1551.33 1210.98 L1551.91 1210.98 L1552.5 1210.98 L1553.09 1210.98 L1553.67 1210.98 L1554.26 1210.98 L1554.85 1210.98 L1555.43 1210.98 L1556.02 1210.98 L1556.6 1210.98 L1557.19 1210.98 L1557.78 1210.98 L1558.36 1210.98 L1558.95 1210.98 L1559.54 1210.98 L1560.12 1210.98 L1560.71 1210.98 L1561.3 1210.98 L1561.88 1210.98 L1562.47 1210.98 L1563.06 1210.98 L1563.64 1210.98 L1564.23 1210.98 L1564.81 1210.98 L1565.4 1210.98 L1565.99 1210.98 L1566.57 1210.98 L1567.16 1210.98 L1567.75 1210.98 L1568.33 1210.98 L1568.92 1210.98 L1569.51 1210.98 L1570.09 1210.98 L1570.68 1210.98 L1571.27 1210.98 L1571.85 1210.98 L1572.44 1210.98 L1573.02 1210.98 L1573.61 1210.98 L1574.2 1210.98 L1574.78 1210.98 L1575.37 1210.98 L1575.96 1210.98 L1576.54 1210.98 L1577.13 1210.98 L1577.72 1210.98 L1578.3 1210.98 L1578.89 1210.98 L1579.47 1210.98 L1580.06 1210.98 L1580.65 1210.98 L1581.23 1210.98 L1581.82 1210.98 L1582.41 1210.98 L1582.99 1210.98 L1583.58 1210.98 L1584.17 1210.98 L1584.75 1210.98 L1585.34 1210.98 L1585.93 1210.98 L1586.51 1210.98 L1587.1 1210.98 L1587.68 1210.98 L1588.27 1210.98 L1588.86 1210.98 L1589.44 1210.98 L1590.03 1210.98 L1590.62 1210.98 L1591.2 1210.98 L1591.79 1210.98 L1592.38 1210.98 L1592.96 1210.98 L1593.55 1210.98 L1594.14 1210.98 L1594.72 1210.98 L1595.31 1210.98 L1595.89 1210.98 L1596.48 1210.98 L1597.07 1210.98 L1597.65 1210.98 L1598.24 1210.98 L1598.83 1210.98 L1599.41 1210.98 L1600 1210.98 L1600.59 1210.98 L1601.17 1210.98 L1601.76 1210.98 L1602.34 1210.98 L1602.93 1210.98 L1603.52 1210.98 L1604.1 1210.98 L1604.69 1210.98 L1605.28 1210.98 L1605.86 1210.98 L1606.45 1210.98 L1607.04 1210.98 L1607.62 1210.98 L1608.21 1210.98 L1608.8 1210.98 L1609.38 1210.98 L1609.97 1210.98 L1610.55 1210.98 L1611.14 1210.98 L1611.73 1210.98 L1612.31 1210.98 L1612.9 1210.98 L1613.49 1210.98 L1614.07 1210.98 L1614.66 1210.98 L1615.25 1210.98 L1615.83 1210.98 L1616.42 1210.98 L1617.01 1210.98 L1617.59 1210.98 L1618.18 1210.98 L1618.76 1210.98 L1619.35 1210.98 L1619.94 1210.98 L1620.52 1210.98 L1621.11 1210.98 L1621.7 1210.98 L1622.28 1210.98 L1622.87 1210.98 L1623.46 1210.98 L1624.04 1210.98 L1624.63 1210.98 L1625.22 1210.98 L1625.8 1210.98 L1626.39 1210.98 L1626.97 1210.98 L1627.56 1210.98 L1628.15 1210.98 L1628.73 1210.98 L1629.32 1210.98 L1629.91 1210.98 L1630.49 1210.98 L1631.08 1210.98 L1631.67 1210.98 L1632.25 1210.98 L1632.84 1210.98 L1633.42 1210.98 L1634.01 1210.98 L1634.6 1210.98 L1635.18 1210.98 L1635.77 1210.98 L1636.36 1210.98 L1636.94 1210.98 L1637.53 1210.98 L1638.12 1210.98 L1638.7 1210.98 L1639.29 1210.98 L1639.88 1210.98 L1640.46 1210.98 L1641.05 1210.98 L1641.63 1210.98 L1642.22 1210.98 L1642.81 1210.98 L1643.39 1210.98 L1643.98 1210.98 L1644.57 1210.98 L1645.15 1210.98 L1645.74 1210.98 L1646.33 1210.98 L1646.91 1210.98 L1647.5 1210.98 L1648.09 1210.98 L1648.67 1210.98 L1649.26 1210.98 L1649.84 1210.98 L1650.43 1210.98 L1651.02 1210.98 L1651.6 1210.98 L1652.19 1210.98 L1652.78 1210.98 L1653.36 1210.98 L1653.95 1210.98 L1654.54 1210.98 L1655.12 1210.98 L1655.71 1210.98 L1656.29 1210.98 L1656.88 1210.98 L1657.47 1210.98 L1658.05 1210.98 L1658.64 1210.98 L1659.23 1210.98 L1659.81 1210.98 L1660.4 1210.98 L1660.99 1210.98 L1661.57 1210.98 L1662.16 1210.98 L1662.75 1210.98 L1663.33 1210.98 L1663.92 1210.98 L1664.5 1210.98 L1665.09 1210.98 L1665.68 1210.98 L1666.26 1210.98 L1666.85 1210.98 L1667.44 1210.98 L1668.02 1210.98 L1668.61 1210.98 L1669.2 1210.98 L1669.78 1210.98 L1670.37 1210.98 L1670.96 1210.98 L1671.54 1210.98 L1672.13 1210.98 L1672.71 1210.98 L1673.3 1210.98 L1673.89 1210.98 L1674.47 1210.98 L1675.06 1210.98 L1675.65 1210.98 L1676.23 1210.98 L1676.82 1210.98 L1677.41 1210.98 L1677.99 1210.98 L1678.58 1210.98 L1679.17 1210.98 L1679.75 1210.98 L1680.34 1210.98 L1680.92 1210.98 L1681.51 1210.98 L1682.1 1210.98 L1682.68 1210.98 L1683.27 1210.98 L1683.86 1210.98 L1684.44 1210.98 L1685.03 1210.98 L1685.62 1210.98 L1686.2 1210.98 L1686.79 1210.98 L1687.37 1210.98 L1687.96 1210.98 L1688.55 1210.98 L1689.13 1210.98 L1689.72 1210.98 L1690.31 1210.98 L1690.89 1210.98 L1691.48 1210.98 L1692.07 1210.98 L1692.65 1210.98 L1693.24 1210.98 L1693.83 1210.98 L1694.41 1210.98 L1695 1210.98 L1695.58 1210.98 L1696.17 1210.98 L1696.76 1210.98 L1697.34 1210.98 L1697.93 1210.98 L1698.52 1210.98 L1699.1 1210.98 L1699.69 1210.98 L1700.28 1210.98 L1700.86 1210.98 L1701.45 1210.98 L1702.04 1210.98 L1702.62 1210.98 L1703.21 1210.98 L1703.79 1210.98 L1704.38 1210.98 L1704.97 1210.98 L1705.55 1210.98 L1706.14 1210.98 L1706.73 1210.98 L1707.31 1210.98 L1707.9 1210.98 L1708.49 1210.98 L1709.07 1210.98 L1709.66 1210.98 L1710.24 1210.98 L1710.83 1210.98 L1711.42 1210.98 L1712 1210.98 L1712.59 1210.98 L1713.18 1210.98 L1713.76 1210.98 L1714.35 1210.98 L1714.94 1210.98 L1715.52 1210.98 L1716.11 1210.98 L1716.7 1210.98 L1717.28 1210.98 L1717.87 1210.98 L1718.45 1210.98 L1719.04 1210.98 L1719.63 1210.98 L1720.21 1210.98 L1720.8 1210.98 L1721.39 1210.98 L1721.97 1210.98 L1722.56 1210.98 L1723.15 1210.98 L1723.73 1210.98 L1724.32 1210.98 L1724.91 1210.98 L1725.49 1210.98 L1726.08 1210.98 L1726.66 1210.98 L1727.25 1210.98 L1727.84 1210.98 L1728.42 1210.98 L1729.01 1210.98 L1729.6 1210.98 L1730.18 1210.98 L1730.77 1210.98 L1731.36 1210.98 L1731.94 1210.98 L1732.53 1210.98 L1733.11 1210.98 L1733.7 1210.98 L1734.29 1210.98 L1734.87 1210.98 L1735.46 1210.98 L1736.05 1210.98 L1736.63 1210.98 L1737.22 1210.98 L1737.81 1210.98 L1738.39 1210.98 L1738.98 1210.98 L1739.57 1210.98 L1740.15 1210.98 L1740.74 1210.98 L1741.32 1210.98 L1741.91 1210.98 L1742.5 1210.98 L1743.08 1210.98 L1743.67 1210.98 L1744.26 1210.98 L1744.84 1210.98 L1745.43 1210.98 L1746.02 1210.98 L1746.6 1210.98 L1747.19 1210.98 L1747.78 1210.98 L1748.36 1210.98 L1748.95 1210.98 L1749.53 1210.98 L1750.12 1210.98 L1750.71 1210.98 L1751.29 1210.98 L1751.88 1210.98 L1752.47 1210.98 L1753.05 1210.98 L1753.64 1210.98 L1754.23 1210.98 L1754.81 1210.98 L1755.4 1210.98 L1755.99 1210.98 L1756.57 1210.98 L1757.16 1210.98 L1757.74 1210.98 L1758.33 1210.98 L1758.92 1210.98 L1759.5 1210.98 L1760.09 1210.98 L1760.68 1210.98 L1761.26 1210.98 L1761.85 1210.98 L1762.44 1210.98 L1763.02 1210.98 L1763.61 1210.98 L1764.19 1210.98 L1764.78 1210.98 L1765.37 1210.98 L1765.95 1210.98 L1766.54 1210.98 L1767.13 1210.98 L1767.71 1210.98 L1768.3 1210.98 L1768.89 1210.98 L1769.47 1210.98 L1770.06 1210.98 L1770.65 1210.98 L1771.23 1210.98 L1771.82 1210.98 L1772.4 1210.98 L1772.99 1210.98 L1773.58 1210.98 L1774.16 1210.98 L1774.75 1210.98 L1775.34 1210.98 L1775.92 1210.98 L1776.51 1210.98 L1777.1 1210.98 L1777.68 1210.98 L1778.27 1210.98 L1778.86 1210.98 L1779.44 1210.98 L1780.03 1210.98 L1780.61 1210.98 L1781.2 1210.98 L1781.79 1210.98 L1782.37 1210.98 L1782.96 1210.98 L1783.55 1210.98 L1784.13 1210.98 L1784.72 1210.98 L1785.31 1210.98 L1785.89 1210.98 L1786.48 1210.98 L1787.06 1210.98 L1787.65 1210.98 L1788.24 1210.98 L1788.82 1210.98 L1789.41 1210.98 L1790 1210.98 L1790.58 1210.98 L1791.17 1210.98 L1791.76 1210.98 L1792.34 1210.98 L1792.93 1210.98 L1793.52 1210.98 L1794.1 1210.98 L1794.69 1210.98 L1795.27 1210.98 L1795.86 1210.98 L1796.45 1210.98 L1797.03 1210.98 L1797.62 1210.98 L1798.21 1210.98 L1798.79 1210.98 L1799.38 1210.98 L1799.97 1210.98 L1800.55 1210.98 L1801.14 1210.98 L1801.73 1210.98 L1802.31 1210.98 L1802.9 1210.98 L1803.48 1210.98 L1804.07 1210.98 L1804.66 1210.98 L1805.24 1210.98 L1805.83 1210.98 L1806.42 1210.98 L1807 1210.98 L1807.59 1210.98 L1808.18 1210.98 L1808.76 1210.98 L1809.35 1210.98 L1809.94 1210.98 L1810.52 1210.98 L1811.11 1210.98 L1811.69 1210.98 L1812.28 1210.98 L1812.87 1210.98 L1813.45 1210.98 L1814.04 1210.98 L1814.63 1210.98 L1815.21 1210.98 L1815.8 1210.98 L1816.39 1210.98 L1816.97 1210.98 L1817.56 1210.98 L1818.14 1210.98 L1818.73 1210.98 L1819.32 1210.98 L1819.9 1210.98 L1820.49 1210.98 L1821.08 1210.98 L1821.66 1210.98 L1822.25 1210.98 L1822.84 1210.98 L1823.42 1210.98 L1824.01 1210.98 L1824.6 1210.98 L1825.18 1210.98 L1825.77 1210.98 L1826.35 1210.98 L1826.94 1210.98 L1827.53 1210.98 L1828.11 1210.98 L1828.7 1210.98 L1829.29 1210.98 L1829.87 1210.98 L1830.46 1210.98 L1831.05 1210.98 L1831.63 1210.98 L1832.22 1210.98 L1832.81 1210.98 L1833.39 1210.98 L1833.98 1210.98 L1834.56 1210.98 L1835.15 1210.98 L1835.74 1210.98 L1836.32 1210.98 L1836.91 1210.98 L1837.5 1210.98 L1838.08 1210.98 L1838.67 1210.98 L1839.26 1210.98 L1839.84 1210.98 L1840.43 1210.98 L1841.01 1210.98 L1841.6 1210.98 L1842.19 1210.98 L1842.77 1210.98 L1843.36 1210.98 L1843.95 1210.98 L1844.53 1210.98 L1845.12 1210.98 L1845.71 1210.98 L1846.29 1210.98 L1846.88 1210.98 L1847.47 1210.98 L1848.05 1210.98 L1848.64 1210.98 L1849.22 1210.98 L1849.81 1210.98 L1850.4 1210.98 L1850.98 1210.98 L1851.57 1210.98 L1852.16 1210.98 L1852.74 1210.98 L1853.33 1210.98 L1853.92 1210.98 L1854.5 1210.98 L1855.09 1210.98 L1855.68 1210.98 L1856.26 1210.98 L1856.85 1210.98 L1857.43 1210.98 L1858.02 1210.98 L1858.61 1210.98 L1859.19 1210.98 L1859.78 1210.98 L1860.37 1210.98 L1860.95 1210.98 L1861.54 1210.98 L1862.13 1210.98 L1862.71 1210.98 L1863.3 1210.98 L1863.88 1210.98 L1864.47 1210.98 L1865.06 1210.98 L1865.64 1210.98 L1866.23 1210.98 L1866.82 1210.98 L1867.4 1210.98 L1867.99 1210.98 L1868.58 1210.98 L1869.16 1210.98 L1869.75 1210.98 L1870.34 1210.98 L1870.92 1210.98 L1871.51 1210.98 L1872.09 1210.98 L1872.68 1210.98 L1873.27 1210.98 L1873.85 1210.98 L1874.44 1210.98 L1875.03 1210.98 L1875.61 1210.98 L1876.2 1210.98 L1876.79 1210.98 L1877.37 1210.98 L1877.96 1210.98 L1878.55 1210.98 L1879.13 1210.98 L1879.72 1210.98 L1880.3 1210.98 L1880.89 1210.98 L1881.48 1210.98 L1882.06 1210.98 L1882.65 1210.98 L1883.24 1210.98 L1883.82 1210.98 L1884.41 1210.98 L1885 1210.98 L1885.58 1210.98 L1886.17 1210.98 L1886.76 1210.98 L1887.34 1210.98 L1887.93 1210.98 L1888.51 1210.98 L1889.1 1210.98 L1889.69 1210.98 L1890.27 1210.98 L1890.86 1210.98 L1891.45 1210.98 L1892.03 1210.98 L1892.62 1210.98 L1893.21 1210.98 L1893.79 1210.98 L1894.38 1210.98 L1894.96 1210.98 L1895.55 1210.98 L1896.14 1210.98 L1896.72 1210.98 L1897.31 1210.98 L1897.9 1210.98 L1898.48 1210.98 L1899.07 1210.98 L1899.66 1210.98 L1900.24 1210.98 L1900.83 1210.98 L1901.42 1210.98 L1902 1210.98 L1902.59 1210.98 L1903.17 1210.98 L1903.76 1210.98 L1904.35 1210.98 L1904.93 1210.98 L1905.52 1210.98 L1906.11 1210.98 L1906.69 1210.98 L1907.28 1210.98 L1907.87 1210.98 L1908.45 1210.98 L1909.04 1210.98 L1909.63 1210.98 L1910.21 1210.98 L1910.8 1210.98 L1911.38 1210.98 L1911.97 1210.98 L1912.56 1210.98 L1913.14 1210.98 L1913.73 1210.98 L1914.32 1210.98 L1914.9 1210.98 L1915.49 1210.98 L1916.08 1210.98 L1916.66 1210.98 L1917.25 1210.98 L1917.83 1210.98 L1918.42 1210.98 L1919.01 1210.98 L1919.59 1210.98 L1920.18 1210.98 L1920.77 1210.98 L1921.35 1210.98 L1921.94 1210.98 L1922.53 1210.98 L1923.11 1210.98 L1923.7 1210.98 L1924.29 1210.98 L1924.87 1210.98 L1925.46 1210.98 L1926.04 1210.98 L1926.63 1210.98 L1927.22 1210.98 L1927.8 1210.98 L1928.39 1210.98 L1928.98 1210.98 L1929.56 1210.98 L1930.15 1210.98 L1930.74 1210.98 L1931.32 1210.98 L1931.91 1210.98 L1932.5 1210.98 L1933.08 1210.98 L1933.67 1210.98 L1934.25 1210.98 L1934.84 1210.98 L1935.43 1210.98 L1936.01 1210.98 L1936.6 1210.98 L1937.19 1210.98 L1937.77 1210.98 L1938.36 1210.98 L1938.95 1210.98 L1939.53 1210.98 L1940.12 1210.98 L1940.71 1210.98 L1941.29 1210.98 L1941.88 1210.98 L1942.46 1210.98 L1943.05 1210.98 L1943.64 1210.98 L1944.22 1210.98 L1944.81 1210.98 L1945.4 1210.98 L1945.98 1210.98 L1946.57 1210.98 L1947.16 1210.98 L1947.74 1210.98 L1948.33 1210.98 L1948.91 1210.98 L1949.5 1210.98 L1950.09 1210.98 L1950.67 1210.98 L1951.26 1210.98 L1951.85 1210.98 L1952.43 1210.98 L1953.02 1210.98 L1953.61 1210.98 L1954.19 1210.98 L1954.78 1210.98 L1955.37 1210.98 L1955.95 1210.98 L1956.54 1210.98 L1957.12 1210.98 L1957.71 1210.98 L1958.3 1210.98 L1958.88 1210.98 L1959.47 1210.98 L1960.06 1210.98 L1960.64 1210.98 L1961.23 1210.98 L1961.82 1210.98 L1962.4 1210.98 L1962.99 1210.98 L1963.58 1210.98 L1964.16 1210.98 L1964.75 1210.98 L1965.33 1210.98 L1965.92 1210.98 L1966.51 1210.98 L1967.09 1210.98 L1967.68 1210.98 L1968.27 1210.98 L1968.85 1210.98 L1969.44 1210.98 L1970.03 1210.98 L1970.61 1210.98 L1971.2 1210.98 L1971.78 1210.98 L1972.37 1210.98 L1972.96 1210.98 L1973.54 1210.98 L1974.13 1210.98 L1974.72 1210.98 L1975.3 1210.98 L1975.89 1210.98 L1976.48 1210.98 L1977.06 1210.98 L1977.65 1210.98 L1978.24 1210.98 L1978.82 1210.98 L1979.41 1210.98 L1979.99 1210.98 L1980.58 1210.98 L1981.17 1210.98 L1981.75 1210.98 L1982.34 1210.98 L1982.93 1210.98 L1983.51 1210.98 L1984.1 1210.98 L1984.69 1210.98 L1985.27 1210.98 L1985.86 1210.98 L1986.45 1210.98 L1987.03 1210.98 L1987.62 1210.98 L1988.2 1210.98 L1988.79 1210.98 L1989.38 1210.98 L1989.96 1210.98 L1990.55 1210.98 L1991.14 1210.98 L1991.72 1210.98 L1992.31 1210.98 L1992.9 1210.98 L1993.48 1210.98 L1994.07 1210.98 L1994.65 1210.98 L1995.24 1210.98 L1995.83 1210.98 L1996.41 1210.98 L1997 1210.98 L1997.59 1210.98 L1998.17 1210.98 L1998.76 1210.98 L1999.35 1210.98 L1999.93 1210.98 L2000.52 1210.98 L2001.11 1210.98 L2001.69 1210.98 L2002.28 1210.98 L2002.86 1210.98 L2003.45 1210.98 L2004.04 1210.98 L2004.62 1210.98 L2005.21 1210.98 L2005.8 1210.98 L2006.38 1210.98 L2006.97 1210.98 L2007.56 1210.98 L2008.14 1210.98 L2008.73 1210.98 L2009.32 1210.98 L2009.9 1210.98 L2010.49 1210.98 L2011.07 1210.98 L2011.66 1210.98 L2012.25 1210.98 L2012.83 1210.98 L2013.42 1210.98 L2014.01 1210.98 L2014.59 1210.98 L2015.18 1210.98 L2015.77 1210.98 L2016.35 1210.98 L2016.94 1210.98 L2017.53 1210.98 L2018.11 1210.98 L2018.7 1210.98 L2019.28 1210.98 L2019.87 1210.98 L2020.46 1210.98 L2021.04 1210.98 L2021.63 1210.98 L2022.22 1210.98 L2022.8 1210.98 L2023.39 1210.98 L2023.98 1210.98 L2024.56 1210.98 L2025.15 1210.98 L2025.73 1210.98 L2026.32 1210.98 L2026.91 1210.98 L2027.49 1210.98 L2028.08 1210.98 L2028.67 1210.98 L2029.25 1210.98 L2029.84 1210.98 L2030.43 1210.98 L2031.01 1210.98 L2031.6 1210.98 L2032.19 1210.98 L2032.77 1210.98 L2033.36 1210.98 L2033.94 1210.98 L2034.53 1210.98 L2035.12 1210.98 L2035.7 1210.98 L2036.29 1210.98 L2036.88 1210.98 L2037.46 1210.98 L2038.05 1210.98 L2038.64 1210.98 L2039.22 1210.98 L2039.81 1210.98 L2040.4 1210.98 L2040.98 1210.98 L2041.57 1210.98 L2042.15 1210.98 L2042.74 1210.98 L2043.33 1210.98 L2043.91 1210.98 L2044.5 1210.98 L2045.09 1210.98 L2045.67 1210.98 L2046.26 1210.98 L2046.85 1210.98 L2047.43 1210.98 L2048.02 1210.98 L2048.6 1210.98 L2049.19 1210.98 L2049.78 1210.98 L2050.36 1210.98 L2050.95 1210.98 L2051.54 1210.98 L2052.12 1210.98 L2052.71 1210.98 L2053.3 1210.98 L2053.88 1210.98 L2054.47 1210.98 L2055.06 1210.98 L2055.64 1210.98 L2056.23 1210.98 L2056.81 1210.98 L2057.4 1210.98 L2057.99 1210.98 L2058.57 1210.98 L2059.16 1210.98 L2059.75 1210.98 L2060.33 1210.98 L2060.92 1210.98 L2061.51 1210.98 L2062.09 1210.98 L2062.68 1210.98 L2063.27 1210.98 L2063.85 1210.98 L2064.44 1210.98 L2065.02 1210.98 L2065.61 1210.98 L2066.2 1210.98 L2066.78 1210.98 L2067.37 1210.98 L2067.96 1210.98 L2068.54 1210.98 L2069.13 1210.98 L2069.72 1210.98 L2070.3 1210.98 L2070.89 1210.98 L2071.48 1210.98 L2072.06 1210.98 L2072.65 1210.98 L2073.23 1210.98 L2073.82 1210.98 L2074.41 1210.98 L2074.99 1210.98 L2075.58 1210.98 L2076.17 1210.98 L2076.75 1210.98 L2077.34 1210.98 L2077.93 1210.98 L2078.51 1210.98 L2079.1 1210.98 L2079.68 1210.98 L2080.27 1210.98 L2080.86 1210.98 L2081.44 1210.98 L2082.03 1210.98 L2082.62 1210.98 L2083.2 1210.98 L2083.79 1210.98 L2084.38 1210.98 L2084.96 1210.98 L2085.55 1210.98 L2086.14 1210.98 L2086.72 1210.98 L2087.31 1210.98 L2087.89 1210.98 L2088.48 1210.98 L2089.07 1210.98 L2089.65 1210.98 L2090.24 1210.98 L2090.83 1210.98 L2091.41 1210.98 L2092 1210.98 L2092.59 1210.98 L2093.17 1210.98 L2093.76 1210.98 L2094.35 1210.98 L2094.93 1210.98 L2095.52 1210.98 L2096.1 1210.98 L2096.69 1210.98 L2097.28 1210.98 L2097.86 1210.98 L2098.45 1210.98 L2099.04 1210.98 L2099.62 1210.98 L2100.21 1210.98 L2100.8 1210.98 L2101.38 1210.98 L2101.97 1210.98 L2102.55 1210.98 L2103.14 1210.98 L2103.73 1210.98 L2104.31 1210.98 L2104.9 1210.98 L2105.49 1210.98 L2106.07 1210.98 L2106.66 1210.98 L2107.25 1210.98 L2107.83 1210.98 L2108.42 1210.98 L2109.01 1210.98 L2109.59 1210.98 L2110.18 1210.98 L2110.76 1210.98 L2111.35 1210.98 L2111.94 1210.98 L2112.52 1210.98 L2113.11 1210.98 L2113.7 1210.98 L2114.28 1210.98 L2114.87 1210.98 L2115.46 1210.98 L2116.04 1210.98 L2116.63 1210.98 L2117.22 1210.98 L2117.8 1210.98 L2118.39 1210.98 L2118.97 1210.98 L2119.56 1210.98 L2120.15 1210.98 L2120.73 1210.98 L2121.32 1210.98 L2121.91 1210.98 L2122.49 1210.98 L2123.08 1210.98 L2123.67 1210.98 L2124.25 1210.98 L2124.84 1210.98 L2125.42 1210.98 L2126.01 1210.98 L2126.6 1210.98 L2127.18 1210.98 L2127.77 1210.98 L2128.36 1210.98 L2128.94 1210.98 L2129.53 1210.98 L2130.12 1210.98 L2130.7 1210.98 L2131.29 1210.98 L2131.88 1210.98 L2132.46 1210.98 L2133.05 1210.98 L2133.63 1210.98 L2134.22 1210.98 L2134.81 1210.98 L2135.39 1210.98 L2135.98 1210.98 L2136.57 1210.98 L2137.15 1210.98 L2137.74 1210.98 L2138.33 1210.98 L2138.91 1210.98 L2139.5 1210.98 L2140.09 1210.98 L2140.67 1210.98 L2141.26 1210.98 L2141.84 1210.98 L2142.43 1210.98 L2143.02 1210.98 L2143.6 1210.98 L2144.19 1210.98 L2144.78 1210.98 L2145.36 1210.98 L2145.95 1210.98 L2146.54 1210.98 L2147.12 1210.98 L2147.71 1210.98 L2148.3 1210.98 L2148.88 1210.98 L2149.47 1210.98 L2150.05 1210.98 L2150.64 1210.98 L2151.23 1210.98 L2151.81 1210.98 L2152.4 1210.98 L2152.99 1210.98 L2153.57 1210.98 L2154.16 1210.98 L2154.75 1210.98 L2155.33 1210.98 L2155.92 1210.98 L2156.5 1210.98 L2157.09 1210.98 L2157.68 1210.98 L2158.26 1210.98 L2158.26 1210.16 L2157.68 1210.16 L2157.09 1210.16 L2156.5 1210.16 L2155.92 1210.16 L2155.33 1210.16 L2154.75 1210.16 L2154.16 1210.16 L2153.57 1210.16 L2152.99 1210.16 L2152.4 1210.16 L2151.81 1210.16 L2151.23 1210.16 L2150.64 1210.16 L2150.05 1210.16 L2149.47 1210.16 L2148.88 1210.16 L2148.3 1210.16 L2147.71 1210.16 L2147.12 1210.16 L2146.54 1210.16 L2145.95 1210.16 L2145.36 1210.16 L2144.78 1210.16 L2144.19 1210.16 L2143.6 1210.16 L2143.02 1210.16 L2142.43 1210.16 L2141.84 1210.16 L2141.26 1210.16 L2140.67 1210.16 L2140.09 1210.16 L2139.5 1210.16 L2138.91 1210.16 L2138.33 1210.16 L2137.74 1210.16 L2137.15 1210.16 L2136.57 1210.16 L2135.98 1210.16 L2135.39 1210.16 L2134.81 1210.16 L2134.22 1210.16 L2133.63 1210.16 L2133.05 1210.16 L2132.46 1210.16 L2131.88 1210.16 L2131.29 1210.16 L2130.7 1210.16 L2130.12 1210.16 L2129.53 1210.16 L2128.94 1210.16 L2128.36 1210.16 L2127.77 1210.16 L2127.18 1210.16 L2126.6 1210.16 L2126.01 1210.16 L2125.42 1210.16 L2124.84 1210.16 L2124.25 1210.16 L2123.67 1210.16 L2123.08 1210.16 L2122.49 1210.16 L2121.91 1210.16 L2121.32 1210.16 L2120.73 1210.16 L2120.15 1210.16 L2119.56 1210.16 L2118.97 1210.16 L2118.39 1210.16 L2117.8 1210.16 L2117.22 1210.16 L2116.63 1210.16 L2116.04 1210.16 L2115.46 1210.16 L2114.87 1210.16 L2114.28 1210.16 L2113.7 1210.16 L2113.11 1210.16 L2112.52 1210.16 L2111.94 1210.16 L2111.35 1210.16 L2110.76 1210.16 L2110.18 1210.16 L2109.59 1210.16 L2109.01 1210.16 L2108.42 1210.16 L2107.83 1210.16 L2107.25 1210.16 L2106.66 1210.16 L2106.07 1210.16 L2105.49 1210.16 L2104.9 1210.16 L2104.31 1210.16 L2103.73 1210.16 L2103.14 1210.16 L2102.55 1210.16 L2101.97 1210.16 L2101.38 1210.16 L2100.8 1210.16 L2100.21 1210.16 L2099.62 1210.16 L2099.04 1210.16 L2098.45 1210.16 L2097.86 1210.16 L2097.28 1210.16 L2096.69 1210.16 L2096.1 1210.16 L2095.52 1210.16 L2094.93 1210.16 L2094.35 1210.16 L2093.76 1210.16 L2093.17 1210.16 L2092.59 1210.16 L2092 1210.16 L2091.41 1210.16 L2090.83 1210.16 L2090.24 1210.16 L2089.65 1210.16 L2089.07 1210.16 L2088.48 1210.16 L2087.89 1210.16 L2087.31 1210.16 L2086.72 1210.16 L2086.14 1210.16 L2085.55 1210.16 L2084.96 1210.16 L2084.38 1210.16 L2083.79 1210.16 L2083.2 1210.16 L2082.62 1210.16 L2082.03 1210.16 L2081.44 1210.16 L2080.86 1210.16 L2080.27 1210.16 L2079.68 1210.16 L2079.1 1210.16 L2078.51 1210.16 L2077.93 1210.16 L2077.34 1210.16 L2076.75 1210.16 L2076.17 1210.16 L2075.58 1210.16 L2074.99 1210.16 L2074.41 1210.16 L2073.82 1210.16 L2073.23 1210.16 L2072.65 1210.16 L2072.06 1210.16 L2071.48 1210.16 L2070.89 1210.16 L2070.3 1210.16 L2069.72 1210.16 L2069.13 1210.16 L2068.54 1210.16 L2067.96 1210.16 L2067.37 1210.16 L2066.78 1210.16 L2066.2 1210.16 L2065.61 1210.16 L2065.02 1210.16 L2064.44 1210.16 L2063.85 1210.16 L2063.27 1210.16 L2062.68 1210.16 L2062.09 1210.16 L2061.51 1210.16 L2060.92 1210.16 L2060.33 1210.16 L2059.75 1210.16 L2059.16 1210.16 L2058.57 1210.16 L2057.99 1210.16 L2057.4 1210.16 L2056.81 1210.16 L2056.23 1210.16 L2055.64 1210.16 L2055.06 1210.16 L2054.47 1210.16 L2053.88 1210.16 L2053.3 1210.16 L2052.71 1210.16 L2052.12 1210.16 L2051.54 1210.16 L2050.95 1210.16 L2050.36 1210.16 L2049.78 1210.16 L2049.19 1210.16 L2048.6 1210.16 L2048.02 1210.16 L2047.43 1210.16 L2046.85 1210.16 L2046.26 1210.16 L2045.67 1210.16 L2045.09 1210.16 L2044.5 1210.16 L2043.91 1210.16 L2043.33 1210.16 L2042.74 1210.16 L2042.15 1210.16 L2041.57 1210.16 L2040.98 1210.16 L2040.4 1210.16 L2039.81 1210.16 L2039.22 1210.16 L2038.64 1210.16 L2038.05 1210.16 L2037.46 1210.16 L2036.88 1210.16 L2036.29 1210.16 L2035.7 1210.16 L2035.12 1210.16 L2034.53 1210.16 L2033.94 1210.16 L2033.36 1210.16 L2032.77 1210.16 L2032.19 1210.16 L2031.6 1210.16 L2031.01 1210.16 L2030.43 1210.16 L2029.84 1210.16 L2029.25 1210.16 L2028.67 1210.16 L2028.08 1210.16 L2027.49 1210.16 L2026.91 1210.16 L2026.32 1210.16 L2025.73 1210.16 L2025.15 1210.16 L2024.56 1210.16 L2023.98 1210.16 L2023.39 1210.16 L2022.8 1210.16 L2022.22 1210.16 L2021.63 1210.16 L2021.04 1210.16 L2020.46 1210.16 L2019.87 1210.16 L2019.28 1210.16 L2018.7 1210.16 L2018.11 1210.16 L2017.53 1210.16 L2016.94 1210.16 L2016.35 1210.16 L2015.77 1210.16 L2015.18 1210.16 L2014.59 1210.16 L2014.01 1210.16 L2013.42 1210.16 L2012.83 1210.16 L2012.25 1210.16 L2011.66 1210.16 L2011.07 1210.16 L2010.49 1210.16 L2009.9 1210.16 L2009.32 1210.16 L2008.73 1210.16 L2008.14 1210.16 L2007.56 1210.16 L2006.97 1210.16 L2006.38 1210.16 L2005.8 1210.16 L2005.21 1210.16 L2004.62 1210.16 L2004.04 1210.16 L2003.45 1210.16 L2002.86 1210.16 L2002.28 1210.16 L2001.69 1210.16 L2001.11 1210.16 L2000.52 1210.16 L1999.93 1210.16 L1999.35 1210.16 L1998.76 1210.16 L1998.17 1210.16 L1997.59 1210.16 L1997 1210.16 L1996.41 1210.16 L1995.83 1210.16 L1995.24 1210.16 L1994.65 1210.16 L1994.07 1210.16 L1993.48 1210.16 L1992.9 1210.16 L1992.31 1210.16 L1991.72 1210.16 L1991.14 1210.16 L1990.55 1210.16 L1989.96 1210.16 L1989.38 1210.16 L1988.79 1210.16 L1988.2 1210.16 L1987.62 1210.16 L1987.03 1210.16 L1986.45 1210.16 L1985.86 1210.16 L1985.27 1210.16 L1984.69 1210.16 L1984.1 1210.16 L1983.51 1210.16 L1982.93 1210.16 L1982.34 1210.16 L1981.75 1210.16 L1981.17 1210.16 L1980.58 1210.16 L1979.99 1210.16 L1979.41 1210.16 L1978.82 1210.16 L1978.24 1210.16 L1977.65 1210.16 L1977.06 1210.16 L1976.48 1210.16 L1975.89 1210.16 L1975.3 1210.16 L1974.72 1210.16 L1974.13 1210.16 L1973.54 1210.16 L1972.96 1210.16 L1972.37 1210.16 L1971.78 1210.16 L1971.2 1210.16 L1970.61 1210.16 L1970.03 1210.16 L1969.44 1210.16 L1968.85 1210.16 L1968.27 1210.16 L1967.68 1210.16 L1967.09 1210.16 L1966.51 1210.16 L1965.92 1210.16 L1965.33 1210.16 L1964.75 1210.16 L1964.16 1210.16 L1963.58 1210.16 L1962.99 1210.16 L1962.4 1210.16 L1961.82 1210.16 L1961.23 1210.16 L1960.64 1210.16 L1960.06 1210.16 L1959.47 1210.16 L1958.88 1210.16 L1958.3 1210.16 L1957.71 1210.16 L1957.12 1210.16 L1956.54 1210.16 L1955.95 1210.16 L1955.37 1210.16 L1954.78 1210.16 L1954.19 1210.16 L1953.61 1210.16 L1953.02 1210.16 L1952.43 1210.16 L1951.85 1210.16 L1951.26 1210.16 L1950.67 1210.16 L1950.09 1210.16 L1949.5 1210.16 L1948.91 1210.16 L1948.33 1210.16 L1947.74 1210.16 L1947.16 1210.16 L1946.57 1210.16 L1945.98 1210.16 L1945.4 1210.16 L1944.81 1210.16 L1944.22 1210.16 L1943.64 1210.16 L1943.05 1210.16 L1942.46 1210.16 L1941.88 1210.16 L1941.29 1210.16 L1940.71 1210.16 L1940.12 1210.16 L1939.53 1210.16 L1938.95 1210.16 L1938.36 1210.16 L1937.77 1210.16 L1937.19 1210.16 L1936.6 1210.16 L1936.01 1210.16 L1935.43 1210.16 L1934.84 1210.16 L1934.25 1210.16 L1933.67 1210.16 L1933.08 1210.16 L1932.5 1210.16 L1931.91 1210.16 L1931.32 1210.16 L1930.74 1210.16 L1930.15 1210.16 L1929.56 1210.16 L1928.98 1210.16 L1928.39 1210.16 L1927.8 1210.16 L1927.22 1210.16 L1926.63 1210.16 L1926.04 1210.16 L1925.46 1210.16 L1924.87 1210.16 L1924.29 1210.16 L1923.7 1210.16 L1923.11 1210.16 L1922.53 1210.16 L1921.94 1210.16 L1921.35 1210.16 L1920.77 1210.16 L1920.18 1210.16 L1919.59 1210.16 L1919.01 1210.16 L1918.42 1210.16 L1917.83 1210.16 L1917.25 1210.16 L1916.66 1210.16 L1916.08 1210.16 L1915.49 1210.16 L1914.9 1210.16 L1914.32 1210.16 L1913.73 1210.16 L1913.14 1210.16 L1912.56 1210.16 L1911.97 1210.16 L1911.38 1210.16 L1910.8 1210.16 L1910.21 1210.16 L1909.63 1210.16 L1909.04 1210.16 L1908.45 1210.16 L1907.87 1210.16 L1907.28 1210.16 L1906.69 1210.16 L1906.11 1210.16 L1905.52 1210.16 L1904.93 1210.16 L1904.35 1210.16 L1903.76 1210.16 L1903.17 1210.16 L1902.59 1210.16 L1902 1210.16 L1901.42 1210.16 L1900.83 1210.16 L1900.24 1210.16 L1899.66 1210.16 L1899.07 1210.16 L1898.48 1210.16 L1897.9 1210.16 L1897.31 1210.16 L1896.72 1210.16 L1896.14 1210.16 L1895.55 1210.16 L1894.96 1210.16 L1894.38 1210.16 L1893.79 1210.16 L1893.21 1210.16 L1892.62 1210.16 L1892.03 1210.16 L1891.45 1210.16 L1890.86 1210.16 L1890.27 1210.16 L1889.69 1210.16 L1889.1 1210.16 L1888.51 1210.16 L1887.93 1210.16 L1887.34 1210.16 L1886.76 1210.16 L1886.17 1210.16 L1885.58 1210.16 L1885 1210.16 L1884.41 1210.16 L1883.82 1210.16 L1883.24 1210.16 L1882.65 1210.16 L1882.06 1210.16 L1881.48 1210.16 L1880.89 1210.16 L1880.3 1210.16 L1879.72 1210.16 L1879.13 1210.16 L1878.55 1210.16 L1877.96 1210.16 L1877.37 1210.16 L1876.79 1210.16 L1876.2 1210.16 L1875.61 1210.16 L1875.03 1210.16 L1874.44 1210.16 L1873.85 1210.16 L1873.27 1210.16 L1872.68 1210.16 L1872.09 1210.16 L1871.51 1210.16 L1870.92 1210.16 L1870.34 1210.16 L1869.75 1210.16 L1869.16 1210.16 L1868.58 1210.16 L1867.99 1210.16 L1867.4 1210.16 L1866.82 1210.16 L1866.23 1210.16 L1865.64 1210.16 L1865.06 1210.16 L1864.47 1210.16 L1863.88 1210.16 L1863.3 1210.16 L1862.71 1210.16 L1862.13 1210.16 L1861.54 1210.16 L1860.95 1210.16 L1860.37 1210.16 L1859.78 1210.16 L1859.19 1210.16 L1858.61 1210.16 L1858.02 1210.16 L1857.43 1210.16 L1856.85 1210.16 L1856.26 1210.16 L1855.68 1210.16 L1855.09 1210.16 L1854.5 1210.16 L1853.92 1210.16 L1853.33 1210.16 L1852.74 1210.16 L1852.16 1210.16 L1851.57 1210.16 L1850.98 1210.16 L1850.4 1210.16 L1849.81 1210.16 L1849.22 1210.16 L1848.64 1210.16 L1848.05 1210.16 L1847.47 1210.16 L1846.88 1210.16 L1846.29 1210.16 L1845.71 1210.16 L1845.12 1210.16 L1844.53 1210.16 L1843.95 1210.16 L1843.36 1210.16 L1842.77 1210.16 L1842.19 1210.16 L1841.6 1210.16 L1841.01 1210.16 L1840.43 1210.16 L1839.84 1210.16 L1839.26 1210.16 L1838.67 1210.16 L1838.08 1210.16 L1837.5 1210.16 L1836.91 1210.16 L1836.32 1210.16 L1835.74 1210.16 L1835.15 1210.16 L1834.56 1210.16 L1833.98 1210.16 L1833.39 1210.16 L1832.81 1210.16 L1832.22 1210.16 L1831.63 1210.16 L1831.05 1210.16 L1830.46 1210.16 L1829.87 1210.16 L1829.29 1210.16 L1828.7 1210.16 L1828.11 1210.16 L1827.53 1210.16 L1826.94 1210.16 L1826.35 1210.16 L1825.77 1210.16 L1825.18 1210.16 L1824.6 1210.16 L1824.01 1210.16 L1823.42 1210.16 L1822.84 1210.16 L1822.25 1210.16 L1821.66 1210.16 L1821.08 1210.16 L1820.49 1210.16 L1819.9 1210.16 L1819.32 1210.16 L1818.73 1210.16 L1818.14 1210.16 L1817.56 1210.16 L1816.97 1210.16 L1816.39 1210.16 L1815.8 1210.16 L1815.21 1210.16 L1814.63 1210.16 L1814.04 1210.16 L1813.45 1210.16 L1812.87 1210.16 L1812.28 1210.16 L1811.69 1210.16 L1811.11 1210.16 L1810.52 1210.16 L1809.94 1210.16 L1809.35 1210.16 L1808.76 1210.16 L1808.18 1210.16 L1807.59 1210.16 L1807 1210.16 L1806.42 1210.16 L1805.83 1210.16 L1805.24 1210.16 L1804.66 1210.16 L1804.07 1210.16 L1803.48 1210.16 L1802.9 1210.16 L1802.31 1210.16 L1801.73 1210.16 L1801.14 1210.16 L1800.55 1210.16 L1799.97 1210.16 L1799.38 1210.16 L1798.79 1210.16 L1798.21 1210.16 L1797.62 1210.16 L1797.03 1210.16 L1796.45 1210.16 L1795.86 1210.16 L1795.27 1210.16 L1794.69 1210.16 L1794.1 1210.16 L1793.52 1210.16 L1792.93 1210.16 L1792.34 1210.16 L1791.76 1210.16 L1791.17 1210.16 L1790.58 1210.16 L1790 1210.16 L1789.41 1210.16 L1788.82 1210.16 L1788.24 1210.16 L1787.65 1210.16 L1787.06 1210.16 L1786.48 1210.16 L1785.89 1210.16 L1785.31 1210.16 L1784.72 1210.16 L1784.13 1210.16 L1783.55 1210.16 L1782.96 1210.16 L1782.37 1210.16 L1781.79 1210.16 L1781.2 1210.16 L1780.61 1210.16 L1780.03 1210.16 L1779.44 1210.16 L1778.86 1210.16 L1778.27 1210.16 L1777.68 1210.16 L1777.1 1210.16 L1776.51 1210.16 L1775.92 1210.16 L1775.34 1210.16 L1774.75 1210.16 L1774.16 1210.16 L1773.58 1210.16 L1772.99 1210.16 L1772.4 1210.16 L1771.82 1210.16 L1771.23 1210.16 L1770.65 1210.16 L1770.06 1210.16 L1769.47 1210.16 L1768.89 1210.16 L1768.3 1210.16 L1767.71 1210.16 L1767.13 1210.16 L1766.54 1210.16 L1765.95 1210.16 L1765.37 1210.16 L1764.78 1210.16 L1764.19 1210.16 L1763.61 1210.16 L1763.02 1210.16 L1762.44 1210.16 L1761.85 1210.16 L1761.26 1210.16 L1760.68 1210.16 L1760.09 1210.16 L1759.5 1210.16 L1758.92 1210.16 L1758.33 1210.16 L1757.74 1210.16 L1757.16 1210.16 L1756.57 1210.16 L1755.99 1210.16 L1755.4 1210.16 L1754.81 1210.16 L1754.23 1210.16 L1753.64 1210.16 L1753.05 1210.16 L1752.47 1210.16 L1751.88 1210.16 L1751.29 1210.16 L1750.71 1210.16 L1750.12 1210.16 L1749.53 1210.16 L1748.95 1210.16 L1748.36 1210.16 L1747.78 1210.16 L1747.19 1210.16 L1746.6 1210.16 L1746.02 1210.16 L1745.43 1210.16 L1744.84 1210.16 L1744.26 1210.16 L1743.67 1210.16 L1743.08 1210.16 L1742.5 1210.16 L1741.91 1210.16 L1741.32 1210.16 L1740.74 1210.16 L1740.15 1210.16 L1739.57 1210.16 L1738.98 1210.16 L1738.39 1210.16 L1737.81 1210.16 L1737.22 1210.16 L1736.63 1210.16 L1736.05 1210.16 L1735.46 1210.16 L1734.87 1210.16 L1734.29 1210.16 L1733.7 1210.16 L1733.11 1210.16 L1732.53 1210.16 L1731.94 1210.16 L1731.36 1210.16 L1730.77 1210.16 L1730.18 1210.16 L1729.6 1210.16 L1729.01 1210.16 L1728.42 1210.16 L1727.84 1210.16 L1727.25 1210.16 L1726.66 1210.16 L1726.08 1210.16 L1725.49 1210.16 L1724.91 1210.16 L1724.32 1210.16 L1723.73 1210.16 L1723.15 1210.16 L1722.56 1210.16 L1721.97 1210.16 L1721.39 1210.16 L1720.8 1210.16 L1720.21 1210.16 L1719.63 1210.16 L1719.04 1210.16 L1718.45 1210.16 L1717.87 1210.16 L1717.28 1210.16 L1716.7 1210.16 L1716.11 1210.16 L1715.52 1210.16 L1714.94 1210.16 L1714.35 1210.16 L1713.76 1210.16 L1713.18 1210.16 L1712.59 1210.16 L1712 1210.16 L1711.42 1210.16 L1710.83 1210.16 L1710.24 1210.16 L1709.66 1210.16 L1709.07 1210.16 L1708.49 1210.16 L1707.9 1210.16 L1707.31 1210.16 L1706.73 1210.16 L1706.14 1210.16 L1705.55 1210.16 L1704.97 1210.16 L1704.38 1210.16 L1703.79 1210.16 L1703.21 1210.16 L1702.62 1210.16 L1702.04 1210.16 L1701.45 1210.16 L1700.86 1210.16 L1700.28 1210.16 L1699.69 1210.16 L1699.1 1210.16 L1698.52 1210.16 L1697.93 1210.16 L1697.34 1210.16 L1696.76 1210.16 L1696.17 1210.16 L1695.58 1210.16 L1695 1210.16 L1694.41 1210.16 L1693.83 1210.16 L1693.24 1210.16 L1692.65 1210.16 L1692.07 1210.16 L1691.48 1210.16 L1690.89 1210.16 L1690.31 1210.16 L1689.72 1210.16 L1689.13 1210.16 L1688.55 1210.16 L1687.96 1210.16 L1687.37 1210.16 L1686.79 1210.16 L1686.2 1210.16 L1685.62 1210.16 L1685.03 1210.16 L1684.44 1210.16 L1683.86 1210.16 L1683.27 1210.16 L1682.68 1210.16 L1682.1 1210.16 L1681.51 1210.16 L1680.92 1210.16 L1680.34 1210.16 L1679.75 1210.16 L1679.17 1210.16 L1678.58 1210.16 L1677.99 1210.16 L1677.41 1210.16 L1676.82 1210.16 L1676.23 1210.16 L1675.65 1210.16 L1675.06 1210.16 L1674.47 1210.16 L1673.89 1210.16 L1673.3 1210.16 L1672.71 1210.16 L1672.13 1210.16 L1671.54 1210.16 L1670.96 1210.16 L1670.37 1210.16 L1669.78 1210.16 L1669.2 1210.16 L1668.61 1210.16 L1668.02 1210.16 L1667.44 1210.16 L1666.85 1210.16 L1666.26 1210.16 L1665.68 1210.16 L1665.09 1210.16 L1664.5 1210.16 L1663.92 1210.16 L1663.33 1210.16 L1662.75 1210.16 L1662.16 1210.16 L1661.57 1210.16 L1660.99 1210.16 L1660.4 1210.16 L1659.81 1210.16 L1659.23 1210.16 L1658.64 1210.16 L1658.05 1210.16 L1657.47 1210.16 L1656.88 1210.16 L1656.29 1210.16 L1655.71 1210.16 L1655.12 1210.16 L1654.54 1210.16 L1653.95 1210.16 L1653.36 1210.16 L1652.78 1210.16 L1652.19 1210.16 L1651.6 1210.16 L1651.02 1210.16 L1650.43 1210.16 L1649.84 1210.16 L1649.26 1210.16 L1648.67 1210.16 L1648.09 1210.16 L1647.5 1210.16 L1646.91 1210.16 L1646.33 1210.16 L1645.74 1210.16 L1645.15 1210.16 L1644.57 1210.16 L1643.98 1210.16 L1643.39 1210.16 L1642.81 1210.16 L1642.22 1210.16 L1641.63 1210.16 L1641.05 1210.16 L1640.46 1210.16 L1639.88 1210.16 L1639.29 1210.16 L1638.7 1210.16 L1638.12 1210.16 L1637.53 1210.16 L1636.94 1210.16 L1636.36 1210.16 L1635.77 1210.16 L1635.18 1210.16 L1634.6 1210.16 L1634.01 1210.16 L1633.42 1210.16 L1632.84 1210.16 L1632.25 1210.16 L1631.67 1210.16 L1631.08 1210.16 L1630.49 1210.16 L1629.91 1210.16 L1629.32 1210.16 L1628.73 1210.16 L1628.15 1210.16 L1627.56 1210.16 L1626.97 1210.16 L1626.39 1210.16 L1625.8 1210.16 L1625.22 1210.16 L1624.63 1210.16 L1624.04 1210.16 L1623.46 1210.16 L1622.87 1210.16 L1622.28 1210.16 L1621.7 1210.16 L1621.11 1210.16 L1620.52 1210.16 L1619.94 1210.16 L1619.35 1210.16 L1618.76 1210.16 L1618.18 1210.16 L1617.59 1210.16 L1617.01 1210.16 L1616.42 1210.16 L1615.83 1210.16 L1615.25 1210.16 L1614.66 1210.16 L1614.07 1210.16 L1613.49 1210.16 L1612.9 1210.16 L1612.31 1210.16 L1611.73 1210.16 L1611.14 1210.16 L1610.55 1210.16 L1609.97 1210.16 L1609.38 1210.16 L1608.8 1210.16 L1608.21 1210.16 L1607.62 1210.16 L1607.04 1210.16 L1606.45 1210.16 L1605.86 1210.16 L1605.28 1210.16 L1604.69 1210.16 L1604.1 1210.16 L1603.52 1210.16 L1602.93 1210.16 L1602.34 1210.16 L1601.76 1210.16 L1601.17 1210.16 L1600.59 1210.16 L1600 1210.16 L1599.41 1210.16 L1598.83 1210.16 L1598.24 1210.16 L1597.65 1210.16 L1597.07 1210.16 L1596.48 1210.16 L1595.89 1210.16 L1595.31 1210.16 L1594.72 1210.16 L1594.14 1210.16 L1593.55 1210.16 L1592.96 1210.16 L1592.38 1210.16 L1591.79 1210.16 L1591.2 1210.16 L1590.62 1210.16 L1590.03 1210.16 L1589.44 1210.16 L1588.86 1210.16 L1588.27 1210.16 L1587.68 1210.16 L1587.1 1210.16 L1586.51 1210.16 L1585.93 1210.16 L1585.34 1210.16 L1584.75 1210.16 L1584.17 1210.16 L1583.58 1210.16 L1582.99 1210.16 L1582.41 1210.16 L1581.82 1210.16 L1581.23 1210.16 L1580.65 1210.16 L1580.06 1210.16 L1579.47 1210.16 L1578.89 1210.16 L1578.3 1210.16 L1577.72 1210.16 L1577.13 1210.16 L1576.54 1210.16 L1575.96 1210.16 L1575.37 1210.16 L1574.78 1210.16 L1574.2 1210.16 L1573.61 1210.16 L1573.02 1210.16 L1572.44 1210.16 L1571.85 1210.16 L1571.27 1210.16 L1570.68 1210.16 L1570.09 1210.16 L1569.51 1210.16 L1568.92 1210.16 L1568.33 1210.16 L1567.75 1210.16 L1567.16 1210.16 L1566.57 1210.16 L1565.99 1210.16 L1565.4 1210.16 L1564.81 1210.16 L1564.23 1210.16 L1563.64 1210.16 L1563.06 1210.16 L1562.47 1210.16 L1561.88 1210.16 L1561.3 1210.16 L1560.71 1210.16 L1560.12 1210.16 L1559.54 1210.16 L1558.95 1210.16 L1558.36 1210.16 L1557.78 1210.16 L1557.19 1210.16 L1556.6 1210.16 L1556.02 1210.16 L1555.43 1210.16 L1554.85 1210.16 L1554.26 1210.16 L1553.67 1210.16 L1553.09 1210.16 L1552.5 1210.16 L1551.91 1210.16 L1551.33 1210.16 L1550.74 1210.16 L1550.15 1210.16 L1549.57 1210.16 L1548.98 1210.16 L1548.4 1210.16 L1547.81 1210.16 L1547.22 1210.16 L1546.64 1210.16 L1546.05 1210.16 L1545.46 1210.16 L1544.88 1210.16 L1544.29 1210.16 L1543.7 1210.16 L1543.12 1210.16 L1542.53 1210.16 L1541.94 1210.16 L1541.36 1210.16 L1540.77 1210.16 L1540.19 1210.16 L1539.6 1210.16 L1539.01 1210.16 L1538.43 1210.16 L1537.84 1210.16 L1537.25 1210.16 L1536.67 1210.16 L1536.08 1210.16 L1535.49 1210.16 L1534.91 1210.16 L1534.32 1210.16 L1533.73 1210.16 L1533.15 1210.16 L1532.56 1210.16 L1531.98 1210.16 L1531.39 1210.16 L1530.8 1210.16 L1530.22 1210.16 L1529.63 1210.16 L1529.04 1210.16 L1528.46 1210.16 L1527.87 1210.16 L1527.28 1210.16 L1526.7 1210.16 L1526.11 1210.16 L1525.52 1210.16 L1524.94 1210.16 L1524.35 1210.16 L1523.77 1210.16 L1523.18 1210.16 L1522.59 1210.16 L1522.01 1210.16 L1521.42 1210.16 L1520.83 1210.16 L1520.25 1210.16 L1519.66 1210.16 L1519.07 1210.16 L1518.49 1210.16 L1517.9 1210.16 L1517.32 1210.16 L1516.73 1210.16 L1516.14 1210.16 L1515.56 1210.16 L1514.97 1210.16 L1514.38 1210.16 L1513.8 1210.16 L1513.21 1210.16 L1512.62 1210.16 L1512.04 1210.16 L1511.45 1210.16 L1510.86 1210.16 L1510.28 1210.16 L1509.69 1210.16 L1509.11 1210.16 L1508.52 1210.16 L1507.93 1210.16 L1507.35 1210.16 L1506.76 1210.16 L1506.17 1210.16 L1505.59 1210.16 L1505 1210.16 L1504.41 1210.16 L1503.83 1210.16 L1503.24 1210.16 L1502.65 1210.16 L1502.07 1210.16 L1501.48 1210.16 L1500.9 1210.16 L1500.31 1210.16 L1499.72 1210.16 L1499.14 1210.16 L1498.55 1210.16 L1497.96 1210.16 L1497.38 1210.16 L1496.79 1210.16 L1496.2 1210.16 L1495.62 1210.16 L1495.03 1210.16 L1494.45 1210.16 L1493.86 1210.16 L1493.27 1210.16 L1492.69 1210.16 L1492.1 1210.16 L1491.51 1210.16 L1490.93 1210.16 L1490.34 1210.16 L1489.75 1210.16 L1489.17 1210.16 L1488.58 1210.16 L1487.99 1210.16 L1487.41 1210.16 L1486.82 1210.16 L1486.24 1210.16 L1485.65 1210.16 L1485.06 1210.16 L1484.48 1210.16 L1483.89 1210.16 L1483.3 1210.16 L1482.72 1210.16 L1482.13 1210.16 L1481.54 1210.16 L1480.96 1210.16 L1480.37 1210.16 L1479.78 1210.16 L1479.2 1210.16 L1478.61 1210.16 L1478.03 1210.16 L1477.44 1210.16 L1476.85 1210.16 L1476.27 1210.16 L1475.68 1210.16 L1475.09 1210.16 L1474.51 1210.16 L1473.92 1210.16 L1473.33 1210.16 L1472.75 1210.16 L1472.16 1210.16 L1471.57 1210.16 L1470.99 1210.16 L1470.4 1210.16 L1469.82 1210.16 L1469.23 1210.16 L1468.64 1210.16 L1468.06 1210.16 L1467.47 1210.16 L1466.88 1210.16 L1466.3 1210.16 L1465.71 1210.16 L1465.12 1210.16 L1464.54 1210.16 L1463.95 1210.16 L1463.37 1210.16 L1462.78 1210.16 L1462.19 1210.16 L1461.61 1210.16 L1461.02 1210.16 L1460.43 1210.16 L1459.85 1210.16 L1459.26 1210.16 L1458.67 1210.16 L1458.09 1210.16 L1457.5 1210.16 L1456.91 1210.16 L1456.33 1210.16 L1455.74 1210.16 L1455.16 1210.16 L1454.57 1210.16 L1453.98 1210.16 L1453.4 1210.16 L1452.81 1210.16 L1452.22 1210.16 L1451.64 1210.16 L1451.05 1210.16 L1450.46 1210.16 L1449.88 1210.16 L1449.29 1210.16 L1448.7 1210.16 L1448.12 1210.16 L1447.53 1210.16 L1446.95 1210.16 L1446.36 1210.16 L1445.77 1210.16 L1445.19 1210.16 L1444.6 1210.16 L1444.01 1210.16 L1443.43 1210.16 L1442.84 1210.16 L1442.25 1210.16 L1441.67 1210.16 L1441.08 1210.16 L1440.5 1210.16 L1439.91 1210.16 L1439.32 1210.16 L1438.74 1210.16 L1438.15 1210.16 L1437.56 1210.16 L1436.98 1210.16 L1436.39 1210.16 L1435.8 1210.16 L1435.22 1210.16 L1434.63 1210.16 L1434.04 1210.16 L1433.46 1210.16 L1432.87 1210.16 L1432.29 1210.16 L1431.7 1210.16 L1431.11 1210.16 L1430.53 1210.16 L1429.94 1210.16 L1429.35 1210.16 L1428.77 1210.16 L1428.18 1210.16 L1427.59 1210.16 L1427.01 1210.16 L1426.42 1210.16 L1425.83 1210.16 L1425.25 1210.16 L1424.66 1210.16 L1424.08 1210.16 L1423.49 1210.16 L1422.9 1210.16 L1422.32 1210.16 L1421.73 1210.16 L1421.14 1210.16 L1420.56 1210.16 L1419.97 1210.16 L1419.38 1210.16 L1418.8 1210.16 L1418.21 1210.16 L1417.63 1210.16 L1417.04 1210.16 L1416.45 1210.16 L1415.87 1210.16 L1415.28 1210.16 L1414.69 1210.16 L1414.11 1210.16 L1413.52 1210.16 L1412.93 1210.16 L1412.35 1210.16 L1411.76 1210.16 L1411.17 1210.16 L1410.59 1210.16 L1410 1210.16 L1409.42 1210.16 L1408.83 1210.16 L1408.24 1210.16 L1407.66 1210.16 L1407.07 1210.16 L1406.48 1210.16 L1405.9 1210.16 L1405.31 1210.16 L1404.72 1210.16 L1404.14 1210.16 L1403.55 1210.16 L1402.96 1210.16 L1402.38 1210.16 L1401.79 1210.16 L1401.21 1210.16 L1400.62 1210.16 L1400.03 1210.16 L1399.45 1210.16 L1398.86 1210.16 L1398.27 1210.16 L1397.69 1210.16 L1397.1 1210.16 L1396.51 1210.16 L1395.93 1210.16 L1395.34 1210.16 L1394.75 1210.16 L1394.17 1210.16 L1393.58 1210.16 L1393 1210.16 L1392.41 1210.16 L1391.82 1210.16 L1391.24 1210.16 L1390.65 1210.16 L1390.06 1210.16 L1389.48 1210.16 L1388.89 1210.16 L1388.3 1210.16 L1387.72 1210.16 L1387.13 1210.16 L1386.55 1210.16 L1385.96 1210.16 L1385.37 1210.16 L1384.79 1210.16 L1384.2 1210.16 L1383.61 1210.16 L1383.03 1210.16 L1382.44 1210.16 L1381.85 1210.16 L1381.27 1210.16 L1380.68 1210.16 L1380.09 1210.16 L1379.51 1210.16 L1378.92 1210.16 L1378.34 1210.16 L1377.75 1210.16 L1377.16 1210.16 L1376.58 1210.16 L1375.99 1210.16 L1375.4 1210.16 L1374.82 1210.16 L1374.23 1210.16 L1373.64 1210.16 L1373.06 1210.16 L1372.47 1210.16 L1371.88 1210.16 L1371.3 1210.16 L1370.71 1210.16 L1370.13 1210.16 L1369.54 1210.16 L1368.95 1210.16 L1368.37 1210.16 L1367.78 1210.16 L1367.19 1210.16 L1366.61 1210.16 L1366.02 1210.16 L1365.43 1210.16 L1364.85 1210.16 L1364.26 1210.16 L1363.68 1210.16 L1363.09 1210.16 L1362.5 1210.16 L1361.92 1210.16 L1361.33 1210.16 L1360.74 1210.16 L1360.16 1210.16 L1359.57 1210.16 L1358.98 1210.16 L1358.4 1210.16 L1357.81 1210.16 L1357.22 1210.16 L1356.64 1210.16 L1356.05 1210.16 L1355.47 1210.16 L1354.88 1210.16 L1354.29 1210.16 L1353.71 1210.16 L1353.12 1210.16 L1352.53 1210.16 L1351.95 1210.16 L1351.36 1210.16 L1350.77 1210.16 L1350.19 1210.16 L1349.6 1210.16 L1349.01 1210.16 L1348.43 1210.16 L1347.84 1210.16 L1347.26 1210.16 L1346.67 1210.16 L1346.08 1210.16 L1345.5 1210.16 L1344.91 1210.16 L1344.32 1210.16 L1343.74 1210.16 L1343.15 1210.16 L1342.56 1210.16 L1341.98 1210.16 L1341.39 1210.16 L1340.8 1210.16 L1340.22 1210.16 L1339.63 1210.16 L1339.05 1210.16 L1338.46 1210.16 L1337.87 1210.16 L1337.29 1210.16 L1336.7 1210.16 L1336.11 1210.16 L1335.53 1210.16 L1334.94 1210.16 L1334.35 1210.16 L1333.77 1210.16 L1333.18 1210.16 L1332.6 1210.16 L1332.01 1210.16 L1331.42 1210.16 L1330.84 1210.16 L1330.25 1210.16 L1329.66 1210.16 L1329.08 1210.16 L1328.49 1210.16 L1327.9 1210.16 L1327.32 1210.16 L1326.73 1210.16 L1326.14 1210.16 L1325.56 1210.16 L1324.97 1210.16 L1324.39 1210.16 L1323.8 1210.16 L1323.21 1210.16 L1322.63 1210.16 L1322.04 1210.16 L1321.45 1210.16 L1320.87 1210.16 L1320.28 1210.16 L1319.69 1210.16 L1319.11 1210.16 L1318.52 1210.16 L1317.93 1210.16 L1317.35 1210.16 L1316.76 1210.16 L1316.18 1210.16 L1315.59 1210.16 L1315 1210.16 L1314.42 1210.16 L1313.83 1210.16 L1313.24 1210.16 L1312.66 1210.16 L1312.07 1210.16 L1311.48 1210.16 L1310.9 1210.16 L1310.31 1210.16 L1309.73 1210.16 L1309.14 1210.16 L1308.55 1210.16 L1307.97 1210.16 L1307.38 1210.16 L1306.79 1210.16 L1306.21 1210.16 L1305.62 1210.16 L1305.03 1210.16 L1304.45 1210.16 L1303.86 1210.16 L1303.27 1210.16 L1302.69 1210.16 L1302.1 1210.16 L1301.52 1210.16 L1300.93 1210.16 L1300.34 1210.16 L1299.76 1210.16 L1299.17 1210.16 L1298.58 1210.16 L1298 1210.16 L1297.41 1210.16 L1296.82 1210.16 L1296.24 1210.16 L1295.65 1210.16 L1295.06 1210.16 L1294.48 1210.16 L1293.89 1210.16 L1293.31 1210.16 L1292.72 1210.16 L1292.13 1210.16 L1291.55 1210.16 L1290.96 1210.16 L1290.37 1210.16 L1289.79 1210.16 L1289.2 1210.16 L1288.61 1210.16 L1288.03 1210.16 L1287.44 1210.16 L1286.86 1210.16 L1286.27 1210.16 L1285.68 1210.16 L1285.1 1210.16 L1284.51 1210.16 L1283.92 1210.16 L1283.34 1210.16 L1282.75 1210.16 L1282.16 1210.16 L1281.58 1210.16 L1280.99 1210.16 L1280.4 1210.16 L1279.82 1210.16 L1279.23 1210.16 L1278.65 1210.16 L1278.06 1210.16 L1277.47 1210.16 L1276.89 1210.16 L1276.3 1210.16 L1275.71 1210.16 L1275.13 1210.16 L1274.54 1210.16 L1273.95 1210.16 L1273.37 1210.16 L1272.78 1210.16 L1272.19 1210.16 L1271.61 1210.16 L1271.02 1210.16 L1270.44 1210.16 L1269.85 1210.16 L1269.26 1210.16 L1268.68 1210.16 L1268.09 1210.16 L1267.5 1210.16 L1266.92 1210.16 L1266.33 1210.16 L1265.74 1210.16 L1265.16 1210.16 L1264.57 1210.16 L1263.98 1210.16 L1263.4 1210.16 L1262.81 1210.16 L1262.23 1210.16 L1261.64 1210.16 L1261.05 1210.16 L1260.47 1210.16 L1259.88 1210.16 L1259.29 1210.16 L1258.71 1210.16 L1258.12 1210.16 L1257.53 1210.16 L1256.95 1210.16 L1256.36 1210.16 L1255.78 1210.16 L1255.19 1210.16 L1254.6 1210.16 L1254.02 1210.16 L1253.43 1210.16 L1252.84 1210.16 L1252.26 1210.16 L1251.67 1210.16 L1251.08 1210.16 L1250.5 1210.16 L1249.91 1210.16 L1249.32 1210.16 L1248.74 1210.16 L1248.15 1210.16 L1247.57 1210.16 L1246.98 1210.16 L1246.39 1210.16 L1245.81 1210.16 L1245.22 1210.16 L1244.63 1210.16 L1244.05 1210.16 L1243.46 1210.16 L1242.87 1210.16 L1242.29 1210.16 L1241.7 1210.16 L1241.11 1210.16 L1240.53 1210.16 L1239.94 1210.16 L1239.36 1210.16 L1238.77 1210.16 L1238.18 1210.16 L1237.6 1210.16 L1237.01 1210.16 L1236.42 1210.16 L1235.84 1210.16 L1235.25 1210.16 L1234.66 1210.16 L1234.08 1210.16 L1233.49 1210.16 L1232.91 1210.16 L1232.32 1210.16 L1231.73 1210.16 L1231.15 1210.16 L1230.56 1210.16 L1229.97 1210.16 L1229.39 1210.16 L1228.8 1210.16 L1228.21 1210.16 L1227.63 1210.16 L1227.04 1210.16 L1226.45 1210.16 L1225.87 1210.16 L1225.28 1210.16 L1224.7 1210.16 L1224.11 1210.16 L1223.52 1210.16 L1222.94 1210.16 L1222.35 1210.16 L1221.76 1210.16 L1221.18 1210.16 L1220.59 1210.16 L1220 1210.16 L1219.42 1210.16 L1218.83 1210.16 L1218.24 1210.16 L1217.66 1210.16 L1217.07 1210.16 L1216.49 1210.16 L1215.9 1210.16 L1215.31 1210.16 L1214.73 1210.16 L1214.14 1210.16 L1213.55 1210.16 L1212.97 1210.16 L1212.38 1210.16 L1211.79 1210.16 L1211.21 1210.16 L1210.62 1210.16 L1210.03 1210.16 L1209.45 1210.16 L1208.86 1210.16 L1208.28 1210.16 L1207.69 1210.16 L1207.1 1210.16 L1206.52 1210.16 L1205.93 1210.16 L1205.34 1210.16 L1204.76 1210.16 L1204.17 1210.16 L1203.58 1210.16 L1203 1210.16 L1202.41 1210.16 L1201.83 1210.16 L1201.24 1210.16 L1200.65 1210.16 L1200.07 1210.16 L1199.48 1210.16 L1198.89 1210.16 L1198.31 1210.16 L1197.72 1210.16 L1197.13 1210.16 L1196.55 1210.16 L1195.96 1210.16 L1195.37 1210.16 L1194.79 1210.16 L1194.2 1210.16 L1193.62 1210.16 L1193.03 1210.16 L1192.44 1210.16 L1191.86 1210.16 L1191.27 1210.16 L1190.68 1210.16 L1190.1 1210.16 L1189.51 1210.16 L1188.92 1210.16 L1188.34 1210.16 L1187.75 1210.16 L1187.16 1210.16 L1186.58 1210.16 L1185.99 1210.16 L1185.41 1210.16 L1184.82 1210.16 L1184.23 1210.16 L1183.65 1210.16 L1183.06 1210.16 L1182.47 1210.16 L1181.89 1210.16 L1181.3 1210.16 L1180.71 1210.16 L1180.13 1210.16 L1179.54 1210.16 L1178.96 1210.16 L1178.37 1210.16 L1177.78 1210.16 L1177.2 1210.16 L1176.61 1210.16 L1176.02 1210.16 L1175.44 1210.16 L1174.85 1210.16 L1174.26 1210.16 L1173.68 1210.16 L1173.09 1210.16 L1172.5 1210.16 L1171.92 1210.16 L1171.33 1210.16 L1170.75 1210.16 L1170.16 1210.16 L1169.57 1210.16 L1168.99 1210.16 L1168.4 1210.16 L1167.81 1210.16 L1167.23 1210.16 L1166.64 1210.16 L1166.05 1210.16 L1165.47 1210.16 L1164.88 1210.16 L1164.29 1210.16 L1163.71 1210.16 L1163.12 1210.16 L1162.54 1210.16 L1161.95 1210.16 L1161.36 1210.16 L1160.78 1210.16 L1160.19 1210.16 L1159.6 1210.16 L1159.02 1210.16 L1158.43 1210.16 L1157.84 1210.16 L1157.26 1210.16 L1156.67 1210.16 L1156.09 1210.16 L1155.5 1210.16 L1154.91 1210.16 L1154.33 1210.16 L1153.74 1210.16 L1153.15 1210.16 L1152.57 1210.16 L1151.98 1210.16 L1151.39 1210.16 L1150.81 1210.16 L1150.22 1210.16 L1149.63 1210.16 L1149.05 1210.16 L1148.46 1210.16 L1147.88 1210.16 L1147.29 1210.16 L1146.7 1210.16 L1146.12 1210.16 L1145.53 1210.16 L1144.94 1210.16 L1144.36 1210.16 L1143.77 1210.16 L1143.18 1210.16 L1142.6 1210.16 L1142.01 1210.16 L1141.42 1210.16 L1140.84 1210.16 L1140.25 1210.16 L1139.67 1210.16 L1139.08 1210.16 L1138.49 1210.16 L1137.91 1210.16 L1137.32 1210.16 L1136.73 1210.16 L1136.15 1210.16 L1135.56 1210.16 L1134.97 1210.16 L1134.39 1210.16 L1133.8 1210.16 L1133.21 1210.16 L1132.63 1210.16 L1132.04 1210.16 L1131.46 1210.16 L1130.87 1210.16 L1130.28 1210.16 L1129.7 1210.16 L1129.11 1210.16 L1128.52 1210.16 L1127.94 1210.16 L1127.35 1210.16 L1126.76 1210.16 L1126.18 1210.16 L1125.59 1210.16 L1125.01 1210.16 L1124.42 1210.16 L1123.83 1210.16 L1123.25 1210.16 L1122.66 1210.16 L1122.07 1210.16 L1121.49 1210.16 L1120.9 1210.16 L1120.31 1210.16 L1119.73 1210.16 L1119.14 1210.16 L1118.55 1210.16 L1117.97 1210.16 L1117.38 1210.16 L1116.8 1210.16 L1116.21 1210.16 L1115.62 1210.16 L1115.04 1210.16 L1114.45 1210.16 L1113.86 1210.16 L1113.28 1210.16 L1112.69 1210.16 L1112.1 1210.16 L1111.52 1210.16 L1110.93 1210.16 L1110.34 1210.16 L1109.76 1210.16 L1109.17 1210.16 L1108.59 1210.16 L1108 1210.16 L1107.41 1210.16 L1106.83 1210.16 L1106.24 1210.16 L1105.65 1210.16 L1105.07 1210.16 L1104.48 1210.16 L1103.89 1210.16 L1103.31 1210.16 L1102.72 1210.16 L1102.14 1210.16 L1101.55 1210.16 L1100.96 1210.16 L1100.38 1210.16 L1099.79 1210.16 L1099.2 1210.16 L1098.62 1210.16 L1098.03 1210.16 L1097.44 1210.16 L1096.86 1210.16 L1096.27 1210.16 L1095.68 1210.16 L1095.1 1210.16 L1094.51 1210.16 L1093.93 1210.16 L1093.34 1210.16 L1092.75 1210.16 L1092.17 1210.16 L1091.58 1210.16 L1090.99 1210.16 L1090.41 1210.16 L1089.82 1210.16 L1089.23 1210.16 L1088.65 1210.16 L1088.06 1210.16 L1087.47 1210.16 L1086.89 1210.16 L1086.3 1210.16 L1085.72 1210.16 L1085.13 1210.16 L1084.54 1210.16 L1083.96 1210.16 L1083.37 1210.16 L1082.78 1210.16 L1082.2 1210.16 L1081.61 1210.16 L1081.02 1210.16 L1080.44 1210.16 L1079.85 1210.16 L1079.26 1210.16 L1078.68 1210.16 L1078.09 1210.16 L1077.51 1210.16 L1076.92 1210.16 L1076.33 1210.16 L1075.75 1210.16 L1075.16 1210.16 L1074.57 1210.16 L1073.99 1210.16 L1073.4 1210.16 L1072.81 1210.16 L1072.23 1210.16 L1071.64 1210.16 L1071.06 1210.16 L1070.47 1210.16 L1069.88 1210.16 L1069.3 1210.16 L1068.71 1210.16 L1068.12 1210.16 L1067.54 1210.16 L1066.95 1210.16 L1066.36 1210.16 L1065.78 1210.16 L1065.19 1210.16 L1064.6 1210.16 L1064.02 1210.16 L1063.43 1210.16 L1062.85 1210.16 L1062.26 1210.16 L1061.67 1210.16 L1061.09 1210.16 L1060.5 1210.16 L1059.91 1210.16 L1059.33 1210.16 L1058.74 1210.16 L1058.15 1210.16 L1057.57 1210.16 L1056.98 1210.16 L1056.39 1210.16 L1055.81 1210.16 L1055.22 1210.16 L1054.64 1210.16 L1054.05 1210.16 L1053.46 1210.16 L1052.88 1210.16 L1052.29 1210.16 L1051.7 1210.16 L1051.12 1210.16 L1050.53 1210.16 L1049.94 1210.16 L1049.36 1210.16 L1048.77 1210.16 L1048.19 1210.16 L1047.6 1210.16 L1047.01 1210.16 L1046.43 1210.16 L1045.84 1210.16 L1045.25 1210.16 L1044.67 1210.16 L1044.08 1210.16 L1043.49 1210.16 L1042.91 1210.16 L1042.32 1210.16 L1041.73 1210.16 L1041.15 1210.16 L1040.56 1210.16 L1039.98 1210.16 L1039.39 1210.16 L1038.8 1210.16 L1038.22 1210.16 L1037.63 1210.16 L1037.04 1210.16 L1036.46 1210.16 L1035.87 1210.16 L1035.28 1210.16 L1034.7 1210.16 L1034.11 1210.16 L1033.52 1210.16 L1032.94 1210.16 L1032.35 1210.16 L1031.77 1210.16 L1031.18 1210.16 L1030.59 1210.16 L1030.01 1210.16 L1029.42 1210.16 L1028.83 1210.16 L1028.25 1210.16 L1027.66 1210.16 L1027.07 1210.16 L1026.49 1210.16 L1025.9 1210.16 L1025.32 1210.16 L1024.73 1210.16 L1024.14 1210.16 L1023.56 1210.16 L1022.97 1210.16 L1022.38 1210.16 L1021.8 1210.16 L1021.21 1210.16 L1020.62 1210.16 L1020.04 1210.16 L1019.45 1210.16 L1018.86 1210.16 L1018.28 1210.16 L1017.69 1210.16 L1017.11 1210.16 L1016.52 1210.16 L1015.93 1210.16 L1015.35 1210.16 L1014.76 1210.16 L1014.17 1210.16 L1013.59 1210.16 L1013 1210.16 L1012.41 1210.16 L1011.83 1210.16 L1011.24 1210.16 L1010.65 1210.16 L1010.07 1210.16 L1009.48 1210.16 L1008.9 1210.16 L1008.31 1210.16 L1007.72 1210.16 L1007.14 1210.16 L1006.55 1210.16 L1005.96 1210.16 L1005.38 1210.16 L1004.79 1210.16 L1004.2 1210.16 L1003.62 1210.16 L1003.03 1210.16 L1002.44 1210.16 L1001.86 1210.16 L1001.27 1210.16 L1000.69 1210.16 L1000.1 1210.16 L999.513 1210.16 L998.926 1210.16 L998.34 1210.16 L997.754 1210.16 L997.167 1210.16 L996.581 1210.16 L995.994 1210.16 L995.408 1210.16 L994.822 1210.16 L994.235 1210.16 L993.649 1210.16 L993.062 1210.16 L992.476 1210.16 L991.889 1210.16 L991.303 1210.16 L990.717 1210.16 L990.13 1210.16 L989.544 1210.16 L988.957 1210.16 L988.371 1210.16 L987.785 1210.16 L987.198 1210.16 L986.612 1210.16 L986.025 1210.16  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.57 986.612,1210.57 987.198,1210.57 987.785,1210.57 988.371,1210.57 988.957,1210.57 989.544,1210.57 990.13,1210.57 990.717,1210.57 991.303,1210.57 991.889,1210.57 992.476,1210.57 993.062,1210.57 993.649,1210.57 994.235,1210.57 994.822,1210.57 995.408,1210.57 995.994,1210.57 996.581,1210.57 997.167,1210.57 997.754,1210.57 998.34,1210.57 998.926,1210.57 999.513,1210.57 1000.1,1210.57 1000.69,1210.57 1001.27,1210.57 1001.86,1210.57 1002.44,1210.57 1003.03,1210.57 1003.62,1210.57 1004.2,1210.57 1004.79,1210.57 1005.38,1210.57 1005.96,1210.57 1006.55,1210.57 1007.14,1210.57 1007.72,1210.57 1008.31,1210.57 1008.9,1210.57 1009.48,1210.57 1010.07,1210.57 1010.65,1210.57 1011.24,1210.57 1011.83,1210.57 1012.41,1210.57 1013,1210.57 1013.59,1210.57 1014.17,1210.57 1014.76,1210.57 1015.35,1210.57 1015.93,1210.57 1016.52,1210.57 1017.11,1210.57 1017.69,1210.57 1018.28,1210.57 1018.86,1210.57 1019.45,1210.57 1020.04,1210.57 1020.62,1210.57 1021.21,1210.57 1021.8,1210.57 1022.38,1210.57 1022.97,1210.57 1023.56,1210.57 1024.14,1210.57 1024.73,1210.57 1025.32,1210.57 1025.9,1210.57 1026.49,1210.57 1027.07,1210.57 1027.66,1210.57 1028.25,1210.57 1028.83,1210.57 1029.42,1210.57 1030.01,1210.57 1030.59,1210.57 1031.18,1210.57 1031.77,1210.57 1032.35,1210.57 1032.94,1210.57 1033.52,1210.57 1034.11,1210.57 1034.7,1210.57 1035.28,1210.57 1035.87,1210.57 1036.46,1210.57 1037.04,1210.57 1037.63,1210.57 1038.22,1210.57 1038.8,1210.57 1039.39,1210.57 1039.98,1210.57 1040.56,1210.57 1041.15,1210.57 1041.73,1210.57 1042.32,1210.57 1042.91,1210.57 1043.49,1210.57 1044.08,1210.57 1044.67,1210.57 1045.25,1210.57 1045.84,1210.57 1046.43,1210.57 1047.01,1210.57 1047.6,1210.57 1048.19,1210.57 1048.77,1210.57 1049.36,1210.57 1049.94,1210.57 1050.53,1210.57 1051.12,1210.57 1051.7,1210.57 1052.29,1210.57 1052.88,1210.57 1053.46,1210.57 1054.05,1210.57 1054.64,1210.57 1055.22,1210.57 1055.81,1210.57 1056.39,1210.57 1056.98,1210.57 1057.57,1210.57 1058.15,1210.57 1058.74,1210.57 1059.33,1210.57 1059.91,1210.57 1060.5,1210.57 1061.09,1210.57 1061.67,1210.57 1062.26,1210.57 1062.85,1210.57 1063.43,1210.57 1064.02,1210.57 1064.6,1210.57 1065.19,1210.57 1065.78,1210.57 1066.36,1210.57 1066.95,1210.57 1067.54,1210.57 1068.12,1210.57 1068.71,1210.57 1069.3,1210.57 1069.88,1210.57 1070.47,1210.57 1071.06,1210.57 1071.64,1210.57 1072.23,1210.57 1072.81,1210.57 1073.4,1210.57 1073.99,1210.57 1074.57,1210.57 1075.16,1210.57 1075.75,1210.57 1076.33,1210.57 1076.92,1210.57 1077.51,1210.57 1078.09,1210.57 1078.68,1210.57 1079.26,1210.57 1079.85,1210.57 1080.44,1210.57 1081.02,1210.57 1081.61,1210.57 1082.2,1210.57 1082.78,1210.57 1083.37,1210.57 1083.96,1210.57 1084.54,1210.57 1085.13,1210.57 1085.72,1210.57 1086.3,1210.57 1086.89,1210.57 1087.47,1210.57 1088.06,1210.57 1088.65,1210.57 1089.23,1210.57 1089.82,1210.57 1090.41,1210.57 1090.99,1210.57 1091.58,1210.57 1092.17,1210.57 1092.75,1210.57 1093.34,1210.57 1093.93,1210.57 1094.51,1210.57 1095.1,1210.57 1095.68,1210.57 1096.27,1210.57 1096.86,1210.57 1097.44,1210.57 1098.03,1210.57 1098.62,1210.57 1099.2,1210.57 1099.79,1210.57 1100.38,1210.57 1100.96,1210.57 1101.55,1210.57 1102.14,1210.57 1102.72,1210.57 1103.31,1210.57 1103.89,1210.57 1104.48,1210.57 1105.07,1210.57 1105.65,1210.57 1106.24,1210.57 1106.83,1210.57 1107.41,1210.57 1108,1210.57 1108.59,1210.57 1109.17,1210.57 1109.76,1210.57 1110.34,1210.57 1110.93,1210.57 1111.52,1210.57 1112.1,1210.57 1112.69,1210.57 1113.28,1210.57 1113.86,1210.57 1114.45,1210.57 1115.04,1210.57 1115.62,1210.57 1116.21,1210.57 1116.8,1210.57 1117.38,1210.57 1117.97,1210.57 1118.55,1210.57 1119.14,1210.57 1119.73,1210.57 1120.31,1210.57 1120.9,1210.57 1121.49,1210.57 1122.07,1210.57 1122.66,1210.57 1123.25,1210.57 1123.83,1210.57 1124.42,1210.57 1125.01,1210.57 1125.59,1210.57 1126.18,1210.57 1126.76,1210.57 1127.35,1210.57 1127.94,1210.57 1128.52,1210.57 1129.11,1210.57 1129.7,1210.57 1130.28,1210.57 1130.87,1210.57 1131.46,1210.57 1132.04,1210.57 1132.63,1210.57 1133.21,1210.57 1133.8,1210.57 1134.39,1210.57 1134.97,1210.57 1135.56,1210.57 1136.15,1210.57 1136.73,1210.57 1137.32,1210.57 1137.91,1210.57 1138.49,1210.57 1139.08,1210.57 1139.67,1210.57 1140.25,1210.57 1140.84,1210.57 1141.42,1210.57 1142.01,1210.57 1142.6,1210.57 1143.18,1210.57 1143.77,1210.57 1144.36,1210.57 1144.94,1210.57 1145.53,1210.57 1146.12,1210.57 1146.7,1210.57 1147.29,1210.57 1147.88,1210.57 1148.46,1210.57 1149.05,1210.57 1149.63,1210.57 1150.22,1210.57 1150.81,1210.57 1151.39,1210.57 1151.98,1210.57 1152.57,1210.57 1153.15,1210.57 1153.74,1210.57 1154.33,1210.57 1154.91,1210.57 1155.5,1210.57 1156.09,1210.57 1156.67,1210.57 1157.26,1210.57 1157.84,1210.57 1158.43,1210.57 1159.02,1210.57 1159.6,1210.57 1160.19,1210.57 1160.78,1210.57 1161.36,1210.57 1161.95,1210.57 1162.54,1210.57 1163.12,1210.57 1163.71,1210.57 1164.29,1210.57 1164.88,1210.57 1165.47,1210.57 1166.05,1210.57 1166.64,1210.57 1167.23,1210.57 1167.81,1210.57 1168.4,1210.57 1168.99,1210.57 1169.57,1210.57 1170.16,1210.57 1170.75,1210.57 1171.33,1210.57 1171.92,1210.57 1172.5,1210.57 1173.09,1210.57 1173.68,1210.57 1174.26,1210.57 1174.85,1210.57 1175.44,1210.57 1176.02,1210.57 1176.61,1210.57 1177.2,1210.57 1177.78,1210.57 1178.37,1210.57 1178.96,1210.57 1179.54,1210.57 1180.13,1210.57 1180.71,1210.57 1181.3,1210.57 1181.89,1210.57 1182.47,1210.57 1183.06,1210.57 1183.65,1210.57 1184.23,1210.57 1184.82,1210.57 1185.41,1210.57 1185.99,1210.57 1186.58,1210.57 1187.16,1210.57 1187.75,1210.57 1188.34,1210.57 1188.92,1210.57 1189.51,1210.57 1190.1,1210.57 1190.68,1210.57 1191.27,1210.57 1191.86,1210.57 1192.44,1210.57 1193.03,1210.57 1193.62,1210.57 1194.2,1210.57 1194.79,1210.57 1195.37,1210.57 1195.96,1210.57 1196.55,1210.57 1197.13,1210.57 1197.72,1210.57 1198.31,1210.57 1198.89,1210.57 1199.48,1210.57 1200.07,1210.57 1200.65,1210.57 1201.24,1210.57 1201.83,1210.57 1202.41,1210.57 1203,1210.57 1203.58,1210.57 1204.17,1210.57 1204.76,1210.57 1205.34,1210.57 1205.93,1210.57 1206.52,1210.57 1207.1,1210.57 1207.69,1210.57 1208.28,1210.57 1208.86,1210.57 1209.45,1210.57 1210.03,1210.57 1210.62,1210.57 1211.21,1210.57 1211.79,1210.57 1212.38,1210.57 1212.97,1210.57 1213.55,1210.57 1214.14,1210.57 1214.73,1210.57 1215.31,1210.57 1215.9,1210.57 1216.49,1210.57 1217.07,1210.57 1217.66,1210.57 1218.24,1210.57 1218.83,1210.57 1219.42,1210.57 1220,1210.57 1220.59,1210.57 1221.18,1210.57 1221.76,1210.57 1222.35,1210.57 1222.94,1210.57 1223.52,1210.57 1224.11,1210.57 1224.7,1210.57 1225.28,1210.57 1225.87,1210.57 1226.45,1210.57 1227.04,1210.57 1227.63,1210.57 1228.21,1210.57 1228.8,1210.57 1229.39,1210.57 1229.97,1210.57 1230.56,1210.57 1231.15,1210.57 1231.73,1210.57 1232.32,1210.57 1232.91,1210.57 1233.49,1210.57 1234.08,1210.57 1234.66,1210.57 1235.25,1210.57 1235.84,1210.57 1236.42,1210.57 1237.01,1210.57 1237.6,1210.57 1238.18,1210.57 1238.77,1210.57 1239.36,1210.57 1239.94,1210.57 1240.53,1210.57 1241.11,1210.57 1241.7,1210.57 1242.29,1210.57 1242.87,1210.57 1243.46,1210.57 1244.05,1210.57 1244.63,1210.57 1245.22,1210.57 1245.81,1210.57 1246.39,1210.57 1246.98,1210.57 1247.57,1210.57 1248.15,1210.57 1248.74,1210.57 1249.32,1210.57 1249.91,1210.57 1250.5,1210.57 1251.08,1210.57 1251.67,1210.57 1252.26,1210.57 1252.84,1210.57 1253.43,1210.57 1254.02,1210.57 1254.6,1210.57 1255.19,1210.57 1255.78,1210.57 1256.36,1210.57 1256.95,1210.57 1257.53,1210.57 1258.12,1210.57 1258.71,1210.57 1259.29,1210.57 1259.88,1210.57 1260.47,1210.57 1261.05,1210.57 1261.64,1210.57 1262.23,1210.57 1262.81,1210.57 1263.4,1210.57 1263.98,1210.57 1264.57,1210.57 1265.16,1210.57 1265.74,1210.57 1266.33,1210.57 1266.92,1210.57 1267.5,1210.57 1268.09,1210.57 1268.68,1210.57 1269.26,1210.57 1269.85,1210.57 1270.44,1210.57 1271.02,1210.57 1271.61,1210.57 1272.19,1210.57 1272.78,1210.57 1273.37,1210.57 1273.95,1210.57 1274.54,1210.57 1275.13,1210.57 1275.71,1210.57 1276.3,1210.57 1276.89,1210.57 1277.47,1210.57 1278.06,1210.57 1278.65,1210.57 1279.23,1210.57 1279.82,1210.57 1280.4,1210.57 1280.99,1210.57 1281.58,1210.57 1282.16,1210.57 1282.75,1210.57 1283.34,1210.57 1283.92,1210.57 1284.51,1210.57 1285.1,1210.57 1285.68,1210.57 1286.27,1210.57 1286.86,1210.57 1287.44,1210.57 1288.03,1210.57 1288.61,1210.57 1289.2,1210.57 1289.79,1210.57 1290.37,1210.57 1290.96,1210.57 1291.55,1210.57 1292.13,1210.57 1292.72,1210.57 1293.31,1210.57 1293.89,1210.57 1294.48,1210.57 1295.06,1210.57 1295.65,1210.57 1296.24,1210.57 1296.82,1210.57 1297.41,1210.57 1298,1210.57 1298.58,1210.57 1299.17,1210.57 1299.76,1210.57 1300.34,1210.57 1300.93,1210.57 1301.52,1210.57 1302.1,1210.57 1302.69,1210.57 1303.27,1210.57 1303.86,1210.57 1304.45,1210.57 1305.03,1210.57 1305.62,1210.57 1306.21,1210.57 1306.79,1210.57 1307.38,1210.57 1307.97,1210.57 1308.55,1210.57 1309.14,1210.57 1309.73,1210.57 1310.31,1210.57 1310.9,1210.57 1311.48,1210.57 1312.07,1210.57 1312.66,1210.57 1313.24,1210.57 1313.83,1210.57 1314.42,1210.57 1315,1210.57 1315.59,1210.57 1316.18,1210.57 1316.76,1210.57 1317.35,1210.57 1317.93,1210.57 1318.52,1210.57 1319.11,1210.57 1319.69,1210.57 1320.28,1210.57 1320.87,1210.57 1321.45,1210.57 1322.04,1210.57 1322.63,1210.57 1323.21,1210.57 1323.8,1210.57 1324.39,1210.57 1324.97,1210.57 1325.56,1210.57 1326.14,1210.57 1326.73,1210.57 1327.32,1210.57 1327.9,1210.57 1328.49,1210.57 1329.08,1210.57 1329.66,1210.57 1330.25,1210.57 1330.84,1210.57 1331.42,1210.57 1332.01,1210.57 1332.6,1210.57 1333.18,1210.57 1333.77,1210.57 1334.35,1210.57 1334.94,1210.57 1335.53,1210.57 1336.11,1210.57 1336.7,1210.57 1337.29,1210.57 1337.87,1210.57 1338.46,1210.57 1339.05,1210.57 1339.63,1210.57 1340.22,1210.57 1340.8,1210.57 1341.39,1210.57 1341.98,1210.57 1342.56,1210.57 1343.15,1210.57 1343.74,1210.57 1344.32,1210.57 1344.91,1210.57 1345.5,1210.57 1346.08,1210.57 1346.67,1210.57 1347.26,1210.57 1347.84,1210.57 1348.43,1210.57 1349.01,1210.57 1349.6,1210.57 1350.19,1210.57 1350.77,1210.57 1351.36,1210.57 1351.95,1210.57 1352.53,1210.57 1353.12,1210.57 1353.71,1210.57 1354.29,1210.57 1354.88,1210.57 1355.47,1210.57 1356.05,1210.57 1356.64,1210.57 1357.22,1210.57 1357.81,1210.57 1358.4,1210.57 1358.98,1210.57 1359.57,1210.57 1360.16,1210.57 1360.74,1210.57 1361.33,1210.57 1361.92,1210.57 1362.5,1210.57 1363.09,1210.57 1363.68,1210.57 1364.26,1210.57 1364.85,1210.57 1365.43,1210.57 1366.02,1210.57 1366.61,1210.57 1367.19,1210.57 1367.78,1210.57 1368.37,1210.57 1368.95,1210.57 1369.54,1210.57 1370.13,1210.57 1370.71,1210.57 1371.3,1210.57 1371.88,1210.57 1372.47,1210.57 1373.06,1210.57 1373.64,1210.57 1374.23,1210.57 1374.82,1210.57 1375.4,1210.57 1375.99,1210.57 1376.58,1210.57 1377.16,1210.57 1377.75,1210.57 1378.34,1210.57 1378.92,1210.57 1379.51,1210.57 1380.09,1210.57 1380.68,1210.57 1381.27,1210.57 1381.85,1210.57 1382.44,1210.57 1383.03,1210.57 1383.61,1210.57 1384.2,1210.57 1384.79,1210.57 1385.37,1210.57 1385.96,1210.57 1386.55,1210.57 1387.13,1210.57 1387.72,1210.57 1388.3,1210.57 1388.89,1210.57 1389.48,1210.57 1390.06,1210.57 1390.65,1210.57 1391.24,1210.57 1391.82,1210.57 1392.41,1210.57 1393,1210.57 1393.58,1210.57 1394.17,1210.57 1394.75,1210.57 1395.34,1210.57 1395.93,1210.57 1396.51,1210.57 1397.1,1210.57 1397.69,1210.57 1398.27,1210.57 1398.86,1210.57 1399.45,1210.57 1400.03,1210.57 1400.62,1210.57 1401.21,1210.57 1401.79,1210.57 1402.38,1210.57 1402.96,1210.57 1403.55,1210.57 1404.14,1210.57 1404.72,1210.57 1405.31,1210.57 1405.9,1210.57 1406.48,1210.57 1407.07,1210.57 1407.66,1210.57 1408.24,1210.57 1408.83,1210.57 1409.42,1210.57 1410,1210.57 1410.59,1210.57 1411.17,1210.57 1411.76,1210.57 1412.35,1210.57 1412.93,1210.57 1413.52,1210.57 1414.11,1210.57 1414.69,1210.57 1415.28,1210.57 1415.87,1210.57 1416.45,1210.57 1417.04,1210.57 1417.63,1210.57 1418.21,1210.57 1418.8,1210.57 1419.38,1210.57 1419.97,1210.57 1420.56,1210.57 1421.14,1210.57 1421.73,1210.57 1422.32,1210.57 1422.9,1210.57 1423.49,1210.57 1424.08,1210.57 1424.66,1210.57 1425.25,1210.57 1425.83,1210.57 1426.42,1210.57 1427.01,1210.57 1427.59,1210.57 1428.18,1210.57 1428.77,1210.57 1429.35,1210.57 1429.94,1210.57 1430.53,1210.57 1431.11,1210.57 1431.7,1210.57 1432.29,1210.57 1432.87,1210.57 1433.46,1210.57 1434.04,1210.57 1434.63,1210.57 1435.22,1210.57 1435.8,1210.57 1436.39,1210.57 1436.98,1210.57 1437.56,1210.57 1438.15,1210.57 1438.74,1210.57 1439.32,1210.57 1439.91,1210.57 1440.5,1210.57 1441.08,1210.57 1441.67,1210.57 1442.25,1210.57 1442.84,1210.57 1443.43,1210.57 1444.01,1210.57 1444.6,1210.57 1445.19,1210.57 1445.77,1210.57 1446.36,1210.57 1446.95,1210.57 1447.53,1210.57 1448.12,1210.57 1448.7,1210.57 1449.29,1210.57 1449.88,1210.57 1450.46,1210.57 1451.05,1210.57 1451.64,1210.57 1452.22,1210.57 1452.81,1210.57 1453.4,1210.57 1453.98,1210.57 1454.57,1210.57 1455.16,1210.57 1455.74,1210.57 1456.33,1210.57 1456.91,1210.57 1457.5,1210.57 1458.09,1210.57 1458.67,1210.57 1459.26,1210.57 1459.85,1210.57 1460.43,1210.57 1461.02,1210.57 1461.61,1210.57 1462.19,1210.57 1462.78,1210.57 1463.37,1210.57 1463.95,1210.57 1464.54,1210.57 1465.12,1210.57 1465.71,1210.57 1466.3,1210.57 1466.88,1210.57 1467.47,1210.57 1468.06,1210.57 1468.64,1210.57 1469.23,1210.57 1469.82,1210.57 1470.4,1210.57 1470.99,1210.57 1471.57,1210.57 1472.16,1210.57 1472.75,1210.57 1473.33,1210.57 1473.92,1210.57 1474.51,1210.57 1475.09,1210.57 1475.68,1210.57 1476.27,1210.57 1476.85,1210.57 1477.44,1210.57 1478.03,1210.57 1478.61,1210.57 1479.2,1210.57 1479.78,1210.57 1480.37,1210.57 1480.96,1210.57 1481.54,1210.57 1482.13,1210.57 1482.72,1210.57 1483.3,1210.57 1483.89,1210.57 1484.48,1210.57 1485.06,1210.57 1485.65,1210.57 1486.24,1210.57 1486.82,1210.57 1487.41,1210.57 1487.99,1210.57 1488.58,1210.57 1489.17,1210.57 1489.75,1210.57 1490.34,1210.57 1490.93,1210.57 1491.51,1210.57 1492.1,1210.57 1492.69,1210.57 1493.27,1210.57 1493.86,1210.57 1494.45,1210.57 1495.03,1210.57 1495.62,1210.57 1496.2,1210.57 1496.79,1210.57 1497.38,1210.57 1497.96,1210.57 1498.55,1210.57 1499.14,1210.57 1499.72,1210.57 1500.31,1210.57 1500.9,1210.57 1501.48,1210.57 1502.07,1210.57 1502.65,1210.57 1503.24,1210.57 1503.83,1210.57 1504.41,1210.57 1505,1210.57 1505.59,1210.57 1506.17,1210.57 1506.76,1210.57 1507.35,1210.57 1507.93,1210.57 1508.52,1210.57 1509.11,1210.57 1509.69,1210.57 1510.28,1210.57 1510.86,1210.57 1511.45,1210.57 1512.04,1210.57 1512.62,1210.57 1513.21,1210.57 1513.8,1210.57 1514.38,1210.57 1514.97,1210.57 1515.56,1210.57 1516.14,1210.57 1516.73,1210.57 1517.32,1210.57 1517.9,1210.57 1518.49,1210.57 1519.07,1210.57 1519.66,1210.57 1520.25,1210.57 1520.83,1210.57 1521.42,1210.57 1522.01,1210.57 1522.59,1210.57 1523.18,1210.57 1523.77,1210.57 1524.35,1210.57 1524.94,1210.57 1525.52,1210.57 1526.11,1210.57 1526.7,1210.57 1527.28,1210.57 1527.87,1210.57 1528.46,1210.57 1529.04,1210.57 1529.63,1210.57 1530.22,1210.57 1530.8,1210.57 1531.39,1210.57 1531.98,1210.57 1532.56,1210.57 1533.15,1210.57 1533.73,1210.57 1534.32,1210.57 1534.91,1210.57 1535.49,1210.57 1536.08,1210.57 1536.67,1210.57 1537.25,1210.57 1537.84,1210.57 1538.43,1210.57 1539.01,1210.57 1539.6,1210.57 1540.19,1210.57 1540.77,1210.57 1541.36,1210.57 1541.94,1210.57 1542.53,1210.57 1543.12,1210.57 1543.7,1210.57 1544.29,1210.57 1544.88,1210.57 1545.46,1210.57 1546.05,1210.57 1546.64,1210.57 1547.22,1210.57 1547.81,1210.57 1548.4,1210.57 1548.98,1210.57 1549.57,1210.57 1550.15,1210.57 1550.74,1210.57 1551.33,1210.57 1551.91,1210.57 1552.5,1210.57 1553.09,1210.57 1553.67,1210.57 1554.26,1210.57 1554.85,1210.57 1555.43,1210.57 1556.02,1210.57 1556.6,1210.57 1557.19,1210.57 1557.78,1210.57 1558.36,1210.57 1558.95,1210.57 1559.54,1210.57 1560.12,1210.57 1560.71,1210.57 1561.3,1210.57 1561.88,1210.57 1562.47,1210.57 1563.06,1210.57 1563.64,1210.57 1564.23,1210.57 1564.81,1210.57 1565.4,1210.57 1565.99,1210.57 1566.57,1210.57 1567.16,1210.57 1567.75,1210.57 1568.33,1210.57 1568.92,1210.57 1569.51,1210.57 1570.09,1210.57 1570.68,1210.57 1571.27,1210.57 1571.85,1210.57 1572.44,1210.57 1573.02,1210.57 1573.61,1210.57 1574.2,1210.57 1574.78,1210.57 1575.37,1210.57 1575.96,1210.57 1576.54,1210.57 1577.13,1210.57 1577.72,1210.57 1578.3,1210.57 1578.89,1210.57 1579.47,1210.57 1580.06,1210.57 1580.65,1210.57 1581.23,1210.57 1581.82,1210.57 1582.41,1210.57 1582.99,1210.57 1583.58,1210.57 1584.17,1210.57 1584.75,1210.57 1585.34,1210.57 1585.93,1210.57 1586.51,1210.57 1587.1,1210.57 1587.68,1210.57 1588.27,1210.57 1588.86,1210.57 1589.44,1210.57 1590.03,1210.57 1590.62,1210.57 1591.2,1210.57 1591.79,1210.57 1592.38,1210.57 1592.96,1210.57 1593.55,1210.57 1594.14,1210.57 1594.72,1210.57 1595.31,1210.57 1595.89,1210.57 1596.48,1210.57 1597.07,1210.57 1597.65,1210.57 1598.24,1210.57 1598.83,1210.57 1599.41,1210.57 1600,1210.57 1600.59,1210.57 1601.17,1210.57 1601.76,1210.57 1602.34,1210.57 1602.93,1210.57 1603.52,1210.57 1604.1,1210.57 1604.69,1210.57 1605.28,1210.57 1605.86,1210.57 1606.45,1210.57 1607.04,1210.57 1607.62,1210.57 1608.21,1210.57 1608.8,1210.57 1609.38,1210.57 1609.97,1210.57 1610.55,1210.57 1611.14,1210.57 1611.73,1210.57 1612.31,1210.57 1612.9,1210.57 1613.49,1210.57 1614.07,1210.57 1614.66,1210.57 1615.25,1210.57 1615.83,1210.57 1616.42,1210.57 1617.01,1210.57 1617.59,1210.57 1618.18,1210.57 1618.76,1210.57 1619.35,1210.57 1619.94,1210.57 1620.52,1210.57 1621.11,1210.57 1621.7,1210.57 1622.28,1210.57 1622.87,1210.57 1623.46,1210.57 1624.04,1210.57 1624.63,1210.57 1625.22,1210.57 1625.8,1210.57 1626.39,1210.57 1626.97,1210.57 1627.56,1210.57 1628.15,1210.57 1628.73,1210.57 1629.32,1210.57 1629.91,1210.57 1630.49,1210.57 1631.08,1210.57 1631.67,1210.57 1632.25,1210.57 1632.84,1210.57 1633.42,1210.57 1634.01,1210.57 1634.6,1210.57 1635.18,1210.57 1635.77,1210.57 1636.36,1210.57 1636.94,1210.57 1637.53,1210.57 1638.12,1210.57 1638.7,1210.57 1639.29,1210.57 1639.88,1210.57 1640.46,1210.57 1641.05,1210.57 1641.63,1210.57 1642.22,1210.57 1642.81,1210.57 1643.39,1210.57 1643.98,1210.57 1644.57,1210.57 1645.15,1210.57 1645.74,1210.57 1646.33,1210.57 1646.91,1210.57 1647.5,1210.57 1648.09,1210.57 1648.67,1210.57 1649.26,1210.57 1649.84,1210.57 1650.43,1210.57 1651.02,1210.57 1651.6,1210.57 1652.19,1210.57 1652.78,1210.57 1653.36,1210.57 1653.95,1210.57 1654.54,1210.57 1655.12,1210.57 1655.71,1210.57 1656.29,1210.57 1656.88,1210.57 1657.47,1210.57 1658.05,1210.57 1658.64,1210.57 1659.23,1210.57 1659.81,1210.57 1660.4,1210.57 1660.99,1210.57 1661.57,1210.57 1662.16,1210.57 1662.75,1210.57 1663.33,1210.57 1663.92,1210.57 1664.5,1210.57 1665.09,1210.57 1665.68,1210.57 1666.26,1210.57 1666.85,1210.57 1667.44,1210.57 1668.02,1210.57 1668.61,1210.57 1669.2,1210.57 1669.78,1210.57 1670.37,1210.57 1670.96,1210.57 1671.54,1210.57 1672.13,1210.57 1672.71,1210.57 1673.3,1210.57 1673.89,1210.57 1674.47,1210.57 1675.06,1210.57 1675.65,1210.57 1676.23,1210.57 1676.82,1210.57 1677.41,1210.57 1677.99,1210.57 1678.58,1210.57 1679.17,1210.57 1679.75,1210.57 1680.34,1210.57 1680.92,1210.57 1681.51,1210.57 1682.1,1210.57 1682.68,1210.57 1683.27,1210.57 1683.86,1210.57 1684.44,1210.57 1685.03,1210.57 1685.62,1210.57 1686.2,1210.57 1686.79,1210.57 1687.37,1210.57 1687.96,1210.57 1688.55,1210.57 1689.13,1210.57 1689.72,1210.57 1690.31,1210.57 1690.89,1210.57 1691.48,1210.57 1692.07,1210.57 1692.65,1210.57 1693.24,1210.57 1693.83,1210.57 1694.41,1210.57 1695,1210.57 1695.58,1210.57 1696.17,1210.57 1696.76,1210.57 1697.34,1210.57 1697.93,1210.57 1698.52,1210.57 1699.1,1210.57 1699.69,1210.57 1700.28,1210.57 1700.86,1210.57 1701.45,1210.57 1702.04,1210.57 1702.62,1210.57 1703.21,1210.57 1703.79,1210.57 1704.38,1210.57 1704.97,1210.57 1705.55,1210.57 1706.14,1210.57 1706.73,1210.57 1707.31,1210.57 1707.9,1210.57 1708.49,1210.57 1709.07,1210.57 1709.66,1210.57 1710.24,1210.57 1710.83,1210.57 1711.42,1210.57 1712,1210.57 1712.59,1210.57 1713.18,1210.57 1713.76,1210.57 1714.35,1210.57 1714.94,1210.57 1715.52,1210.57 1716.11,1210.57 1716.7,1210.57 1717.28,1210.57 1717.87,1210.57 1718.45,1210.57 1719.04,1210.57 1719.63,1210.57 1720.21,1210.57 1720.8,1210.57 1721.39,1210.57 1721.97,1210.57 1722.56,1210.57 1723.15,1210.57 1723.73,1210.57 1724.32,1210.57 1724.91,1210.57 1725.49,1210.57 1726.08,1210.57 1726.66,1210.57 1727.25,1210.57 1727.84,1210.57 1728.42,1210.57 1729.01,1210.57 1729.6,1210.57 1730.18,1210.57 1730.77,1210.57 1731.36,1210.57 1731.94,1210.57 1732.53,1210.57 1733.11,1210.57 1733.7,1210.57 1734.29,1210.57 1734.87,1210.57 1735.46,1210.57 1736.05,1210.57 1736.63,1210.57 1737.22,1210.57 1737.81,1210.57 1738.39,1210.57 1738.98,1210.57 1739.57,1210.57 1740.15,1210.57 1740.74,1210.57 1741.32,1210.57 1741.91,1210.57 1742.5,1210.57 1743.08,1210.57 1743.67,1210.57 1744.26,1210.57 1744.84,1210.57 1745.43,1210.57 1746.02,1210.57 1746.6,1210.57 1747.19,1210.57 1747.78,1210.57 1748.36,1210.57 1748.95,1210.57 1749.53,1210.57 1750.12,1210.57 1750.71,1210.57 1751.29,1210.57 1751.88,1210.57 1752.47,1210.57 1753.05,1210.57 1753.64,1210.57 1754.23,1210.57 1754.81,1210.57 1755.4,1210.57 1755.99,1210.57 1756.57,1210.57 1757.16,1210.57 1757.74,1210.57 1758.33,1210.57 1758.92,1210.57 1759.5,1210.57 1760.09,1210.57 1760.68,1210.57 1761.26,1210.57 1761.85,1210.57 1762.44,1210.57 1763.02,1210.57 1763.61,1210.57 1764.19,1210.57 1764.78,1210.57 1765.37,1210.57 1765.95,1210.57 1766.54,1210.57 1767.13,1210.57 1767.71,1210.57 1768.3,1210.57 1768.89,1210.57 1769.47,1210.57 1770.06,1210.57 1770.65,1210.57 1771.23,1210.57 1771.82,1210.57 1772.4,1210.57 1772.99,1210.57 1773.58,1210.57 1774.16,1210.57 1774.75,1210.57 1775.34,1210.57 1775.92,1210.57 1776.51,1210.57 1777.1,1210.57 1777.68,1210.57 1778.27,1210.57 1778.86,1210.57 1779.44,1210.57 1780.03,1210.57 1780.61,1210.57 1781.2,1210.57 1781.79,1210.57 1782.37,1210.57 1782.96,1210.57 1783.55,1210.57 1784.13,1210.57 1784.72,1210.57 1785.31,1210.57 1785.89,1210.57 1786.48,1210.57 1787.06,1210.57 1787.65,1210.57 1788.24,1210.57 1788.82,1210.57 1789.41,1210.57 1790,1210.57 1790.58,1210.57 1791.17,1210.57 1791.76,1210.57 1792.34,1210.57 1792.93,1210.57 1793.52,1210.57 1794.1,1210.57 1794.69,1210.57 1795.27,1210.57 1795.86,1210.57 1796.45,1210.57 1797.03,1210.57 1797.62,1210.57 1798.21,1210.57 1798.79,1210.57 1799.38,1210.57 1799.97,1210.57 1800.55,1210.57 1801.14,1210.57 1801.73,1210.57 1802.31,1210.57 1802.9,1210.57 1803.48,1210.57 1804.07,1210.57 1804.66,1210.57 1805.24,1210.57 1805.83,1210.57 1806.42,1210.57 1807,1210.57 1807.59,1210.57 1808.18,1210.57 1808.76,1210.57 1809.35,1210.57 1809.94,1210.57 1810.52,1210.57 1811.11,1210.57 1811.69,1210.57 1812.28,1210.57 1812.87,1210.57 1813.45,1210.57 1814.04,1210.57 1814.63,1210.57 1815.21,1210.57 1815.8,1210.57 1816.39,1210.57 1816.97,1210.57 1817.56,1210.57 1818.14,1210.57 1818.73,1210.57 1819.32,1210.57 1819.9,1210.57 1820.49,1210.57 1821.08,1210.57 1821.66,1210.57 1822.25,1210.57 1822.84,1210.57 1823.42,1210.57 1824.01,1210.57 1824.6,1210.57 1825.18,1210.57 1825.77,1210.57 1826.35,1210.57 1826.94,1210.57 1827.53,1210.57 1828.11,1210.57 1828.7,1210.57 1829.29,1210.57 1829.87,1210.57 1830.46,1210.57 1831.05,1210.57 1831.63,1210.57 1832.22,1210.57 1832.81,1210.57 1833.39,1210.57 1833.98,1210.57 1834.56,1210.57 1835.15,1210.57 1835.74,1210.57 1836.32,1210.57 1836.91,1210.57 1837.5,1210.57 1838.08,1210.57 1838.67,1210.57 1839.26,1210.57 1839.84,1210.57 1840.43,1210.57 1841.01,1210.57 1841.6,1210.57 1842.19,1210.57 1842.77,1210.57 1843.36,1210.57 1843.95,1210.57 1844.53,1210.57 1845.12,1210.57 1845.71,1210.57 1846.29,1210.57 1846.88,1210.57 1847.47,1210.57 1848.05,1210.57 1848.64,1210.57 1849.22,1210.57 1849.81,1210.57 1850.4,1210.57 1850.98,1210.57 1851.57,1210.57 1852.16,1210.57 1852.74,1210.57 1853.33,1210.57 1853.92,1210.57 1854.5,1210.57 1855.09,1210.57 1855.68,1210.57 1856.26,1210.57 1856.85,1210.57 1857.43,1210.57 1858.02,1210.57 1858.61,1210.57 1859.19,1210.57 1859.78,1210.57 1860.37,1210.57 1860.95,1210.57 1861.54,1210.57 1862.13,1210.57 1862.71,1210.57 1863.3,1210.57 1863.88,1210.57 1864.47,1210.57 1865.06,1210.57 1865.64,1210.57 1866.23,1210.57 1866.82,1210.57 1867.4,1210.57 1867.99,1210.57 1868.58,1210.57 1869.16,1210.57 1869.75,1210.57 1870.34,1210.57 1870.92,1210.57 1871.51,1210.57 1872.09,1210.57 1872.68,1210.57 1873.27,1210.57 1873.85,1210.57 1874.44,1210.57 1875.03,1210.57 1875.61,1210.57 1876.2,1210.57 1876.79,1210.57 1877.37,1210.57 1877.96,1210.57 1878.55,1210.57 1879.13,1210.57 1879.72,1210.57 1880.3,1210.57 1880.89,1210.57 1881.48,1210.57 1882.06,1210.57 1882.65,1210.57 1883.24,1210.57 1883.82,1210.57 1884.41,1210.57 1885,1210.57 1885.58,1210.57 1886.17,1210.57 1886.76,1210.57 1887.34,1210.57 1887.93,1210.57 1888.51,1210.57 1889.1,1210.57 1889.69,1210.57 1890.27,1210.57 1890.86,1210.57 1891.45,1210.57 1892.03,1210.57 1892.62,1210.57 1893.21,1210.57 1893.79,1210.57 1894.38,1210.57 1894.96,1210.57 1895.55,1210.57 1896.14,1210.57 1896.72,1210.57 1897.31,1210.57 1897.9,1210.57 1898.48,1210.57 1899.07,1210.57 1899.66,1210.57 1900.24,1210.57 1900.83,1210.57 1901.42,1210.57 1902,1210.57 1902.59,1210.57 1903.17,1210.57 1903.76,1210.57 1904.35,1210.57 1904.93,1210.57 1905.52,1210.57 1906.11,1210.57 1906.69,1210.57 1907.28,1210.57 1907.87,1210.57 1908.45,1210.57 1909.04,1210.57 1909.63,1210.57 1910.21,1210.57 1910.8,1210.57 1911.38,1210.57 1911.97,1210.57 1912.56,1210.57 1913.14,1210.57 1913.73,1210.57 1914.32,1210.57 1914.9,1210.57 1915.49,1210.57 1916.08,1210.57 1916.66,1210.57 1917.25,1210.57 1917.83,1210.57 1918.42,1210.57 1919.01,1210.57 1919.59,1210.57 1920.18,1210.57 1920.77,1210.57 1921.35,1210.57 1921.94,1210.57 1922.53,1210.57 1923.11,1210.57 1923.7,1210.57 1924.29,1210.57 1924.87,1210.57 1925.46,1210.57 1926.04,1210.57 1926.63,1210.57 1927.22,1210.57 1927.8,1210.57 1928.39,1210.57 1928.98,1210.57 1929.56,1210.57 1930.15,1210.57 1930.74,1210.57 1931.32,1210.57 1931.91,1210.57 1932.5,1210.57 1933.08,1210.57 1933.67,1210.57 1934.25,1210.57 1934.84,1210.57 1935.43,1210.57 1936.01,1210.57 1936.6,1210.57 1937.19,1210.57 1937.77,1210.57 1938.36,1210.57 1938.95,1210.57 1939.53,1210.57 1940.12,1210.57 1940.71,1210.57 1941.29,1210.57 1941.88,1210.57 1942.46,1210.57 1943.05,1210.57 1943.64,1210.57 1944.22,1210.57 1944.81,1210.57 1945.4,1210.57 1945.98,1210.57 1946.57,1210.57 1947.16,1210.57 1947.74,1210.57 1948.33,1210.57 1948.91,1210.57 1949.5,1210.57 1950.09,1210.57 1950.67,1210.57 1951.26,1210.57 1951.85,1210.57 1952.43,1210.57 1953.02,1210.57 1953.61,1210.57 1954.19,1210.57 1954.78,1210.57 1955.37,1210.57 1955.95,1210.57 1956.54,1210.57 1957.12,1210.57 1957.71,1210.57 1958.3,1210.57 1958.88,1210.57 1959.47,1210.57 1960.06,1210.57 1960.64,1210.57 1961.23,1210.57 1961.82,1210.57 1962.4,1210.57 1962.99,1210.57 1963.58,1210.57 1964.16,1210.57 1964.75,1210.57 1965.33,1210.57 1965.92,1210.57 1966.51,1210.57 1967.09,1210.57 1967.68,1210.57 1968.27,1210.57 1968.85,1210.57 1969.44,1210.57 1970.03,1210.57 1970.61,1210.57 1971.2,1210.57 1971.78,1210.57 1972.37,1210.57 1972.96,1210.57 1973.54,1210.57 1974.13,1210.57 1974.72,1210.57 1975.3,1210.57 1975.89,1210.57 1976.48,1210.57 1977.06,1210.57 1977.65,1210.57 1978.24,1210.57 1978.82,1210.57 1979.41,1210.57 1979.99,1210.57 1980.58,1210.57 1981.17,1210.57 1981.75,1210.57 1982.34,1210.57 1982.93,1210.57 1983.51,1210.57 1984.1,1210.57 1984.69,1210.57 1985.27,1210.57 1985.86,1210.57 1986.45,1210.57 1987.03,1210.57 1987.62,1210.57 1988.2,1210.57 1988.79,1210.57 1989.38,1210.57 1989.96,1210.57 1990.55,1210.57 1991.14,1210.57 1991.72,1210.57 1992.31,1210.57 1992.9,1210.57 1993.48,1210.57 1994.07,1210.57 1994.65,1210.57 1995.24,1210.57 1995.83,1210.57 1996.41,1210.57 1997,1210.57 1997.59,1210.57 1998.17,1210.57 1998.76,1210.57 1999.35,1210.57 1999.93,1210.57 2000.52,1210.57 2001.11,1210.57 2001.69,1210.57 2002.28,1210.57 2002.86,1210.57 2003.45,1210.57 2004.04,1210.57 2004.62,1210.57 2005.21,1210.57 2005.8,1210.57 2006.38,1210.57 2006.97,1210.57 2007.56,1210.57 2008.14,1210.57 2008.73,1210.57 2009.32,1210.57 2009.9,1210.57 2010.49,1210.57 2011.07,1210.57 2011.66,1210.57 2012.25,1210.57 2012.83,1210.57 2013.42,1210.57 2014.01,1210.57 2014.59,1210.57 2015.18,1210.57 2015.77,1210.57 2016.35,1210.57 2016.94,1210.57 2017.53,1210.57 2018.11,1210.57 2018.7,1210.57 2019.28,1210.57 2019.87,1210.57 2020.46,1210.57 2021.04,1210.57 2021.63,1210.57 2022.22,1210.57 2022.8,1210.57 2023.39,1210.57 2023.98,1210.57 2024.56,1210.57 2025.15,1210.57 2025.73,1210.57 2026.32,1210.57 2026.91,1210.57 2027.49,1210.57 2028.08,1210.57 2028.67,1210.57 2029.25,1210.57 2029.84,1210.57 2030.43,1210.57 2031.01,1210.57 2031.6,1210.57 2032.19,1210.57 2032.77,1210.57 2033.36,1210.57 2033.94,1210.57 2034.53,1210.57 2035.12,1210.57 2035.7,1210.57 2036.29,1210.57 2036.88,1210.57 2037.46,1210.57 2038.05,1210.57 2038.64,1210.57 2039.22,1210.57 2039.81,1210.57 2040.4,1210.57 2040.98,1210.57 2041.57,1210.57 2042.15,1210.57 2042.74,1210.57 2043.33,1210.57 2043.91,1210.57 2044.5,1210.57 2045.09,1210.57 2045.67,1210.57 2046.26,1210.57 2046.85,1210.57 2047.43,1210.57 2048.02,1210.57 2048.6,1210.57 2049.19,1210.57 2049.78,1210.57 2050.36,1210.57 2050.95,1210.57 2051.54,1210.57 2052.12,1210.57 2052.71,1210.57 2053.3,1210.57 2053.88,1210.57 2054.47,1210.57 2055.06,1210.57 2055.64,1210.57 2056.23,1210.57 2056.81,1210.57 2057.4,1210.57 2057.99,1210.57 2058.57,1210.57 2059.16,1210.57 2059.75,1210.57 2060.33,1210.57 2060.92,1210.57 2061.51,1210.57 2062.09,1210.57 2062.68,1210.57 2063.27,1210.57 2063.85,1210.57 2064.44,1210.57 2065.02,1210.57 2065.61,1210.57 2066.2,1210.57 2066.78,1210.57 2067.37,1210.57 2067.96,1210.57 2068.54,1210.57 2069.13,1210.57 2069.72,1210.57 2070.3,1210.57 2070.89,1210.57 2071.48,1210.57 2072.06,1210.57 2072.65,1210.57 2073.23,1210.57 2073.82,1210.57 2074.41,1210.57 2074.99,1210.57 2075.58,1210.57 2076.17,1210.57 2076.75,1210.57 2077.34,1210.57 2077.93,1210.57 2078.51,1210.57 2079.1,1210.57 2079.68,1210.57 2080.27,1210.57 2080.86,1210.57 2081.44,1210.57 2082.03,1210.57 2082.62,1210.57 2083.2,1210.57 2083.79,1210.57 2084.38,1210.57 2084.96,1210.57 2085.55,1210.57 2086.14,1210.57 2086.72,1210.57 2087.31,1210.57 2087.89,1210.57 2088.48,1210.57 2089.07,1210.57 2089.65,1210.57 2090.24,1210.57 2090.83,1210.57 2091.41,1210.57 2092,1210.57 2092.59,1210.57 2093.17,1210.57 2093.76,1210.57 2094.35,1210.57 2094.93,1210.57 2095.52,1210.57 2096.1,1210.57 2096.69,1210.57 2097.28,1210.57 2097.86,1210.57 2098.45,1210.57 2099.04,1210.57 2099.62,1210.57 2100.21,1210.57 2100.8,1210.57 2101.38,1210.57 2101.97,1210.57 2102.55,1210.57 2103.14,1210.57 2103.73,1210.57 2104.31,1210.57 2104.9,1210.57 2105.49,1210.57 2106.07,1210.57 2106.66,1210.57 2107.25,1210.57 2107.83,1210.57 2108.42,1210.57 2109.01,1210.57 2109.59,1210.57 2110.18,1210.57 2110.76,1210.57 2111.35,1210.57 2111.94,1210.57 2112.52,1210.57 2113.11,1210.57 2113.7,1210.57 2114.28,1210.57 2114.87,1210.57 2115.46,1210.57 2116.04,1210.57 2116.63,1210.57 2117.22,1210.57 2117.8,1210.57 2118.39,1210.57 2118.97,1210.57 2119.56,1210.57 2120.15,1210.57 2120.73,1210.57 2121.32,1210.57 2121.91,1210.57 2122.49,1210.57 2123.08,1210.57 2123.67,1210.57 2124.25,1210.57 2124.84,1210.57 2125.42,1210.57 2126.01,1210.57 2126.6,1210.57 2127.18,1210.57 2127.77,1210.57 2128.36,1210.57 2128.94,1210.57 2129.53,1210.57 2130.12,1210.57 2130.7,1210.57 2131.29,1210.57 2131.88,1210.57 2132.46,1210.57 2133.05,1210.57 2133.63,1210.57 2134.22,1210.57 2134.81,1210.57 2135.39,1210.57 2135.98,1210.57 2136.57,1210.57 2137.15,1210.57 2137.74,1210.57 2138.33,1210.57 2138.91,1210.57 2139.5,1210.57 2140.09,1210.57 2140.67,1210.57 2141.26,1210.57 2141.84,1210.57 2142.43,1210.57 2143.02,1210.57 2143.6,1210.57 2144.19,1210.57 2144.78,1210.57 2145.36,1210.57 2145.95,1210.57 2146.54,1210.57 2147.12,1210.57 2147.71,1210.57 2148.3,1210.57 2148.88,1210.57 2149.47,1210.57 2150.05,1210.57 2150.64,1210.57 2151.23,1210.57 2151.81,1210.57 2152.4,1210.57 2152.99,1210.57 2153.57,1210.57 2154.16,1210.57 2154.75,1210.57 2155.33,1210.57 2155.92,1210.57 2156.5,1210.57 2157.09,1210.57 2157.68,1210.57 2158.26,1210.57 \"/>\n<path clip-path=\"url(#clip332)\" d=\"M986.025 1210.48 L986.612 1210.48 L987.198 1210.48 L987.785 1210.48 L988.371 1210.48 L988.957 1210.48 L989.544 1210.48 L990.13 1210.48 L990.717 1210.48 L991.303 1210.48 L991.889 1210.48 L992.476 1210.48 L993.062 1210.48 L993.649 1210.48 L994.235 1210.48 L994.822 1210.48 L995.408 1210.48 L995.994 1210.48 L996.581 1210.48 L997.167 1210.48 L997.754 1210.48 L998.34 1210.48 L998.926 1210.48 L999.513 1210.48 L1000.1 1210.48 L1000.69 1210.48 L1001.27 1210.48 L1001.86 1210.48 L1002.44 1210.48 L1003.03 1210.48 L1003.62 1210.48 L1004.2 1210.48 L1004.79 1210.48 L1005.38 1210.48 L1005.96 1210.48 L1006.55 1210.48 L1007.14 1210.48 L1007.72 1210.48 L1008.31 1210.48 L1008.9 1210.48 L1009.48 1210.48 L1010.07 1210.48 L1010.65 1210.48 L1011.24 1210.48 L1011.83 1210.48 L1012.41 1210.48 L1013 1210.48 L1013.59 1210.48 L1014.17 1210.48 L1014.76 1210.48 L1015.35 1210.48 L1015.93 1210.48 L1016.52 1210.48 L1017.11 1210.48 L1017.69 1210.48 L1018.28 1210.48 L1018.86 1210.48 L1019.45 1210.48 L1020.04 1210.48 L1020.62 1210.48 L1021.21 1210.48 L1021.8 1210.48 L1022.38 1210.48 L1022.97 1210.48 L1023.56 1210.48 L1024.14 1210.48 L1024.73 1210.48 L1025.32 1210.48 L1025.9 1210.48 L1026.49 1210.48 L1027.07 1210.48 L1027.66 1210.48 L1028.25 1210.48 L1028.83 1210.48 L1029.42 1210.48 L1030.01 1210.48 L1030.59 1210.48 L1031.18 1210.48 L1031.77 1210.48 L1032.35 1210.48 L1032.94 1210.48 L1033.52 1210.48 L1034.11 1210.48 L1034.7 1210.48 L1035.28 1210.48 L1035.87 1210.48 L1036.46 1210.48 L1037.04 1210.48 L1037.63 1210.48 L1038.22 1210.48 L1038.8 1210.48 L1039.39 1210.48 L1039.98 1210.48 L1040.56 1210.48 L1041.15 1210.48 L1041.73 1210.48 L1042.32 1210.48 L1042.91 1210.48 L1043.49 1210.48 L1044.08 1210.48 L1044.67 1210.48 L1045.25 1210.48 L1045.84 1210.48 L1046.43 1210.48 L1047.01 1210.48 L1047.6 1210.48 L1048.19 1210.48 L1048.77 1210.48 L1049.36 1210.48 L1049.94 1210.48 L1050.53 1210.48 L1051.12 1210.48 L1051.7 1210.48 L1052.29 1210.48 L1052.88 1210.48 L1053.46 1210.48 L1054.05 1210.48 L1054.64 1210.48 L1055.22 1210.48 L1055.81 1210.48 L1056.39 1210.48 L1056.98 1210.48 L1057.57 1210.48 L1058.15 1210.48 L1058.74 1210.48 L1059.33 1210.48 L1059.91 1210.48 L1060.5 1210.48 L1061.09 1210.48 L1061.67 1210.48 L1062.26 1210.48 L1062.85 1210.48 L1063.43 1210.48 L1064.02 1210.48 L1064.6 1210.48 L1065.19 1210.48 L1065.78 1210.48 L1066.36 1210.48 L1066.95 1210.48 L1067.54 1210.48 L1068.12 1210.48 L1068.71 1210.48 L1069.3 1210.48 L1069.88 1210.48 L1070.47 1210.48 L1071.06 1210.48 L1071.64 1210.48 L1072.23 1210.48 L1072.81 1210.48 L1073.4 1210.48 L1073.99 1210.48 L1074.57 1210.48 L1075.16 1210.48 L1075.75 1210.48 L1076.33 1210.48 L1076.92 1210.48 L1077.51 1210.48 L1078.09 1210.48 L1078.68 1210.48 L1079.26 1210.48 L1079.85 1210.48 L1080.44 1210.48 L1081.02 1210.48 L1081.61 1210.48 L1082.2 1210.48 L1082.78 1210.48 L1083.37 1210.48 L1083.96 1210.48 L1084.54 1210.48 L1085.13 1210.48 L1085.72 1210.48 L1086.3 1210.48 L1086.89 1210.48 L1087.47 1210.48 L1088.06 1210.48 L1088.65 1210.48 L1089.23 1210.48 L1089.82 1210.48 L1090.41 1210.48 L1090.99 1210.48 L1091.58 1210.48 L1092.17 1210.48 L1092.75 1210.48 L1093.34 1210.48 L1093.93 1210.48 L1094.51 1210.48 L1095.1 1210.48 L1095.68 1210.48 L1096.27 1210.48 L1096.86 1210.48 L1097.44 1210.48 L1098.03 1210.48 L1098.62 1210.48 L1099.2 1210.48 L1099.79 1210.48 L1100.38 1210.48 L1100.96 1210.48 L1101.55 1210.48 L1102.14 1210.48 L1102.72 1210.48 L1103.31 1210.48 L1103.89 1210.48 L1104.48 1210.48 L1105.07 1210.48 L1105.65 1210.48 L1106.24 1210.48 L1106.83 1210.48 L1107.41 1210.48 L1108 1210.48 L1108.59 1210.48 L1109.17 1210.48 L1109.76 1210.48 L1110.34 1210.48 L1110.93 1210.48 L1111.52 1210.48 L1112.1 1210.48 L1112.69 1210.48 L1113.28 1210.48 L1113.86 1210.48 L1114.45 1210.48 L1115.04 1210.48 L1115.62 1210.48 L1116.21 1210.48 L1116.8 1210.48 L1117.38 1210.48 L1117.97 1210.48 L1118.55 1210.48 L1119.14 1210.48 L1119.73 1210.48 L1120.31 1210.48 L1120.9 1210.48 L1121.49 1210.48 L1122.07 1210.48 L1122.66 1210.48 L1123.25 1210.48 L1123.83 1210.48 L1124.42 1210.48 L1125.01 1210.48 L1125.59 1210.48 L1126.18 1210.48 L1126.76 1210.48 L1127.35 1210.48 L1127.94 1210.48 L1128.52 1210.48 L1129.11 1210.48 L1129.7 1210.48 L1130.28 1210.48 L1130.87 1210.48 L1131.46 1210.48 L1132.04 1210.48 L1132.63 1210.48 L1133.21 1210.48 L1133.8 1210.48 L1134.39 1210.48 L1134.97 1210.48 L1135.56 1210.48 L1136.15 1210.48 L1136.73 1210.48 L1137.32 1210.48 L1137.91 1210.48 L1138.49 1210.48 L1139.08 1210.48 L1139.67 1210.48 L1140.25 1210.48 L1140.84 1210.48 L1141.42 1210.48 L1142.01 1210.48 L1142.6 1210.48 L1143.18 1210.48 L1143.77 1210.48 L1144.36 1210.48 L1144.94 1210.48 L1145.53 1210.48 L1146.12 1210.48 L1146.7 1210.48 L1147.29 1210.48 L1147.88 1210.48 L1148.46 1210.48 L1149.05 1210.48 L1149.63 1210.48 L1150.22 1210.48 L1150.81 1210.48 L1151.39 1210.48 L1151.98 1210.48 L1152.57 1210.48 L1153.15 1210.48 L1153.74 1210.48 L1154.33 1210.48 L1154.91 1210.48 L1155.5 1210.48 L1156.09 1210.48 L1156.67 1210.48 L1157.26 1210.48 L1157.84 1210.48 L1158.43 1210.48 L1159.02 1210.48 L1159.6 1210.48 L1160.19 1210.48 L1160.78 1210.48 L1161.36 1210.48 L1161.95 1210.48 L1162.54 1210.48 L1163.12 1210.48 L1163.71 1210.48 L1164.29 1210.48 L1164.88 1210.48 L1165.47 1210.48 L1166.05 1210.48 L1166.64 1210.48 L1167.23 1210.48 L1167.81 1210.48 L1168.4 1210.48 L1168.99 1210.48 L1169.57 1210.48 L1170.16 1210.48 L1170.75 1210.48 L1171.33 1210.48 L1171.92 1210.48 L1172.5 1210.48 L1173.09 1210.48 L1173.68 1210.48 L1174.26 1210.48 L1174.85 1210.48 L1175.44 1210.48 L1176.02 1210.48 L1176.61 1210.48 L1177.2 1210.48 L1177.78 1210.48 L1178.37 1210.48 L1178.96 1210.48 L1179.54 1210.48 L1180.13 1210.48 L1180.71 1210.48 L1181.3 1210.48 L1181.89 1210.48 L1182.47 1210.48 L1183.06 1210.48 L1183.65 1210.48 L1184.23 1210.48 L1184.82 1210.48 L1185.41 1210.48 L1185.99 1210.48 L1186.58 1210.48 L1187.16 1210.48 L1187.75 1210.48 L1188.34 1210.48 L1188.92 1210.48 L1189.51 1210.48 L1190.1 1210.48 L1190.68 1210.48 L1191.27 1210.48 L1191.86 1210.48 L1192.44 1210.48 L1193.03 1210.48 L1193.62 1210.48 L1194.2 1210.48 L1194.79 1210.48 L1195.37 1210.48 L1195.96 1210.48 L1196.55 1210.48 L1197.13 1210.48 L1197.72 1210.48 L1198.31 1210.48 L1198.89 1210.48 L1199.48 1210.48 L1200.07 1210.48 L1200.65 1210.48 L1201.24 1210.48 L1201.83 1210.48 L1202.41 1210.48 L1203 1210.48 L1203.58 1210.48 L1204.17 1210.48 L1204.76 1210.48 L1205.34 1210.48 L1205.93 1210.48 L1206.52 1210.48 L1207.1 1210.48 L1207.69 1210.48 L1208.28 1210.48 L1208.86 1210.48 L1209.45 1210.48 L1210.03 1210.48 L1210.62 1210.48 L1211.21 1210.48 L1211.79 1210.48 L1212.38 1210.48 L1212.97 1210.48 L1213.55 1210.48 L1214.14 1210.48 L1214.73 1210.48 L1215.31 1210.48 L1215.9 1210.48 L1216.49 1210.48 L1217.07 1210.48 L1217.66 1210.48 L1218.24 1210.48 L1218.83 1210.48 L1219.42 1210.48 L1220 1210.48 L1220.59 1210.48 L1221.18 1210.48 L1221.76 1210.48 L1222.35 1210.48 L1222.94 1210.48 L1223.52 1210.48 L1224.11 1210.48 L1224.7 1210.48 L1225.28 1210.48 L1225.87 1210.48 L1226.45 1210.48 L1227.04 1210.48 L1227.63 1210.48 L1228.21 1210.48 L1228.8 1210.48 L1229.39 1210.48 L1229.97 1210.48 L1230.56 1210.48 L1231.15 1210.48 L1231.73 1210.48 L1232.32 1210.48 L1232.91 1210.48 L1233.49 1210.48 L1234.08 1210.48 L1234.66 1210.48 L1235.25 1210.48 L1235.84 1210.48 L1236.42 1210.48 L1237.01 1210.48 L1237.6 1210.48 L1238.18 1210.48 L1238.77 1210.48 L1239.36 1210.48 L1239.94 1210.48 L1240.53 1210.48 L1241.11 1210.48 L1241.7 1210.48 L1242.29 1210.48 L1242.87 1210.48 L1243.46 1210.48 L1244.05 1210.48 L1244.63 1210.48 L1245.22 1210.48 L1245.81 1210.48 L1246.39 1210.48 L1246.98 1210.48 L1247.57 1210.48 L1248.15 1210.48 L1248.74 1210.48 L1249.32 1210.48 L1249.91 1210.48 L1250.5 1210.48 L1251.08 1210.48 L1251.67 1210.48 L1252.26 1210.48 L1252.84 1210.48 L1253.43 1210.48 L1254.02 1210.48 L1254.6 1210.48 L1255.19 1210.48 L1255.78 1210.48 L1256.36 1210.48 L1256.95 1210.48 L1257.53 1210.48 L1258.12 1210.48 L1258.71 1210.48 L1259.29 1210.48 L1259.88 1210.48 L1260.47 1210.48 L1261.05 1210.48 L1261.64 1210.48 L1262.23 1210.48 L1262.81 1210.48 L1263.4 1210.48 L1263.98 1210.48 L1264.57 1210.48 L1265.16 1210.48 L1265.74 1210.48 L1266.33 1210.48 L1266.92 1210.48 L1267.5 1210.48 L1268.09 1210.48 L1268.68 1210.48 L1269.26 1210.48 L1269.85 1210.48 L1270.44 1210.48 L1271.02 1210.48 L1271.61 1210.48 L1272.19 1210.48 L1272.78 1210.48 L1273.37 1210.48 L1273.95 1210.48 L1274.54 1210.48 L1275.13 1210.48 L1275.71 1210.48 L1276.3 1210.48 L1276.89 1210.48 L1277.47 1210.48 L1278.06 1210.48 L1278.65 1210.48 L1279.23 1210.48 L1279.82 1210.48 L1280.4 1210.48 L1280.99 1210.48 L1281.58 1210.48 L1282.16 1210.48 L1282.75 1210.48 L1283.34 1210.48 L1283.92 1210.48 L1284.51 1210.48 L1285.1 1210.48 L1285.68 1210.48 L1286.27 1210.48 L1286.86 1210.48 L1287.44 1210.48 L1288.03 1210.48 L1288.61 1210.48 L1289.2 1210.48 L1289.79 1210.48 L1290.37 1210.48 L1290.96 1210.48 L1291.55 1210.48 L1292.13 1210.48 L1292.72 1210.48 L1293.31 1210.48 L1293.89 1210.48 L1294.48 1210.48 L1295.06 1210.48 L1295.65 1210.48 L1296.24 1210.48 L1296.82 1210.48 L1297.41 1210.48 L1298 1210.48 L1298.58 1210.48 L1299.17 1210.48 L1299.76 1210.48 L1300.34 1210.48 L1300.93 1210.48 L1301.52 1210.48 L1302.1 1210.48 L1302.69 1210.48 L1303.27 1210.48 L1303.86 1210.48 L1304.45 1210.48 L1305.03 1210.48 L1305.62 1210.48 L1306.21 1210.48 L1306.79 1210.48 L1307.38 1210.48 L1307.97 1210.48 L1308.55 1210.48 L1309.14 1210.48 L1309.73 1210.48 L1310.31 1210.48 L1310.9 1210.48 L1311.48 1210.48 L1312.07 1210.48 L1312.66 1210.48 L1313.24 1210.48 L1313.83 1210.48 L1314.42 1210.48 L1315 1210.48 L1315.59 1210.48 L1316.18 1210.48 L1316.76 1210.48 L1317.35 1210.48 L1317.93 1210.48 L1318.52 1210.48 L1319.11 1210.48 L1319.69 1210.48 L1320.28 1210.48 L1320.87 1210.48 L1321.45 1210.48 L1322.04 1210.48 L1322.63 1210.48 L1323.21 1210.48 L1323.8 1210.48 L1324.39 1210.48 L1324.97 1210.48 L1325.56 1210.48 L1326.14 1210.48 L1326.73 1210.48 L1327.32 1210.48 L1327.9 1210.48 L1328.49 1210.48 L1329.08 1210.48 L1329.66 1210.48 L1330.25 1210.48 L1330.84 1210.48 L1331.42 1210.48 L1332.01 1210.48 L1332.6 1210.48 L1333.18 1210.48 L1333.77 1210.48 L1334.35 1210.48 L1334.94 1210.48 L1335.53 1210.48 L1336.11 1210.48 L1336.7 1210.48 L1337.29 1210.48 L1337.87 1210.48 L1338.46 1210.48 L1339.05 1210.48 L1339.63 1210.48 L1340.22 1210.48 L1340.8 1210.48 L1341.39 1210.48 L1341.98 1210.48 L1342.56 1210.48 L1343.15 1210.48 L1343.74 1210.48 L1344.32 1210.48 L1344.91 1210.48 L1345.5 1210.48 L1346.08 1210.48 L1346.67 1210.48 L1347.26 1210.48 L1347.84 1210.48 L1348.43 1210.48 L1349.01 1210.48 L1349.6 1210.48 L1350.19 1210.48 L1350.77 1210.48 L1351.36 1210.48 L1351.95 1210.48 L1352.53 1210.48 L1353.12 1210.48 L1353.71 1210.48 L1354.29 1210.48 L1354.88 1210.48 L1355.47 1210.48 L1356.05 1210.48 L1356.64 1210.48 L1357.22 1210.48 L1357.81 1210.48 L1358.4 1210.48 L1358.98 1210.48 L1359.57 1210.48 L1360.16 1210.48 L1360.74 1210.48 L1361.33 1210.48 L1361.92 1210.48 L1362.5 1210.48 L1363.09 1210.48 L1363.68 1210.48 L1364.26 1210.48 L1364.85 1210.48 L1365.43 1210.48 L1366.02 1210.48 L1366.61 1210.48 L1367.19 1210.48 L1367.78 1210.48 L1368.37 1210.48 L1368.95 1210.48 L1369.54 1210.48 L1370.13 1210.48 L1370.71 1210.48 L1371.3 1210.48 L1371.88 1210.48 L1372.47 1210.48 L1373.06 1210.48 L1373.64 1210.48 L1374.23 1210.48 L1374.82 1210.48 L1375.4 1210.48 L1375.99 1210.48 L1376.58 1210.48 L1377.16 1210.48 L1377.75 1210.48 L1378.34 1210.48 L1378.92 1210.48 L1379.51 1210.48 L1380.09 1210.48 L1380.68 1210.48 L1381.27 1210.48 L1381.85 1210.48 L1382.44 1210.48 L1383.03 1210.48 L1383.61 1210.48 L1384.2 1210.48 L1384.79 1210.48 L1385.37 1210.48 L1385.96 1210.48 L1386.55 1210.48 L1387.13 1210.48 L1387.72 1210.48 L1388.3 1210.48 L1388.89 1210.48 L1389.48 1210.48 L1390.06 1210.48 L1390.65 1210.48 L1391.24 1210.48 L1391.82 1210.48 L1392.41 1210.48 L1393 1210.48 L1393.58 1210.48 L1394.17 1210.48 L1394.75 1210.48 L1395.34 1210.48 L1395.93 1210.48 L1396.51 1210.48 L1397.1 1210.48 L1397.69 1210.48 L1398.27 1210.48 L1398.86 1210.48 L1399.45 1210.48 L1400.03 1210.48 L1400.62 1210.48 L1401.21 1210.48 L1401.79 1210.48 L1402.38 1210.48 L1402.96 1210.48 L1403.55 1210.48 L1404.14 1210.48 L1404.72 1210.48 L1405.31 1210.48 L1405.9 1210.48 L1406.48 1210.48 L1407.07 1210.48 L1407.66 1210.48 L1408.24 1210.48 L1408.83 1210.48 L1409.42 1210.48 L1410 1210.48 L1410.59 1210.48 L1411.17 1210.48 L1411.76 1210.48 L1412.35 1210.48 L1412.93 1210.48 L1413.52 1210.48 L1414.11 1210.48 L1414.69 1210.48 L1415.28 1210.48 L1415.87 1210.48 L1416.45 1210.48 L1417.04 1210.48 L1417.63 1210.48 L1418.21 1210.48 L1418.8 1210.48 L1419.38 1210.48 L1419.97 1210.48 L1420.56 1210.48 L1421.14 1210.48 L1421.73 1210.48 L1422.32 1210.48 L1422.9 1210.48 L1423.49 1210.48 L1424.08 1210.48 L1424.66 1210.48 L1425.25 1210.48 L1425.83 1210.48 L1426.42 1210.48 L1427.01 1210.48 L1427.59 1210.48 L1428.18 1210.48 L1428.77 1210.48 L1429.35 1210.48 L1429.94 1210.48 L1430.53 1210.48 L1431.11 1210.48 L1431.7 1210.48 L1432.29 1210.48 L1432.87 1210.48 L1433.46 1210.48 L1434.04 1210.48 L1434.63 1210.48 L1435.22 1210.48 L1435.8 1210.48 L1436.39 1210.48 L1436.98 1210.48 L1437.56 1210.48 L1438.15 1210.48 L1438.74 1210.48 L1439.32 1210.48 L1439.91 1210.48 L1440.5 1210.48 L1441.08 1210.48 L1441.67 1210.48 L1442.25 1210.48 L1442.84 1210.48 L1443.43 1210.48 L1444.01 1210.48 L1444.6 1210.48 L1445.19 1210.48 L1445.77 1210.48 L1446.36 1210.48 L1446.95 1210.48 L1447.53 1210.48 L1448.12 1210.48 L1448.7 1210.48 L1449.29 1210.48 L1449.88 1210.48 L1450.46 1210.48 L1451.05 1210.48 L1451.64 1210.48 L1452.22 1210.48 L1452.81 1210.48 L1453.4 1210.48 L1453.98 1210.48 L1454.57 1210.48 L1455.16 1210.48 L1455.74 1210.48 L1456.33 1210.48 L1456.91 1210.48 L1457.5 1210.48 L1458.09 1210.48 L1458.67 1210.48 L1459.26 1210.48 L1459.85 1210.48 L1460.43 1210.48 L1461.02 1210.48 L1461.61 1210.48 L1462.19 1210.48 L1462.78 1210.48 L1463.37 1210.48 L1463.95 1210.48 L1464.54 1210.48 L1465.12 1210.48 L1465.71 1210.48 L1466.3 1210.48 L1466.88 1210.48 L1467.47 1210.48 L1468.06 1210.48 L1468.64 1210.48 L1469.23 1210.48 L1469.82 1210.48 L1470.4 1210.48 L1470.99 1210.48 L1471.57 1210.48 L1472.16 1210.48 L1472.75 1210.48 L1473.33 1210.48 L1473.92 1210.48 L1474.51 1210.48 L1475.09 1210.48 L1475.68 1210.48 L1476.27 1210.48 L1476.85 1210.48 L1477.44 1210.48 L1478.03 1210.48 L1478.61 1210.48 L1479.2 1210.48 L1479.78 1210.48 L1480.37 1210.48 L1480.96 1210.48 L1481.54 1210.48 L1482.13 1210.48 L1482.72 1210.48 L1483.3 1210.48 L1483.89 1210.48 L1484.48 1210.48 L1485.06 1210.48 L1485.65 1210.48 L1486.24 1210.48 L1486.82 1210.48 L1487.41 1210.48 L1487.99 1210.48 L1488.58 1210.48 L1489.17 1210.48 L1489.75 1210.48 L1490.34 1210.48 L1490.93 1210.48 L1491.51 1210.48 L1492.1 1210.48 L1492.69 1210.48 L1493.27 1210.48 L1493.86 1210.48 L1494.45 1210.48 L1495.03 1210.48 L1495.62 1210.48 L1496.2 1210.48 L1496.79 1210.48 L1497.38 1210.48 L1497.96 1210.48 L1498.55 1210.48 L1499.14 1210.48 L1499.72 1210.48 L1500.31 1210.48 L1500.9 1210.48 L1501.48 1210.48 L1502.07 1210.48 L1502.65 1210.48 L1503.24 1210.48 L1503.83 1210.48 L1504.41 1210.48 L1505 1210.48 L1505.59 1210.48 L1506.17 1210.48 L1506.76 1210.48 L1507.35 1210.48 L1507.93 1210.48 L1508.52 1210.48 L1509.11 1210.48 L1509.69 1210.48 L1510.28 1210.48 L1510.86 1210.48 L1511.45 1210.48 L1512.04 1210.48 L1512.62 1210.48 L1513.21 1210.48 L1513.8 1210.48 L1514.38 1210.48 L1514.97 1210.48 L1515.56 1210.48 L1516.14 1210.48 L1516.73 1210.48 L1517.32 1210.48 L1517.9 1210.48 L1518.49 1210.48 L1519.07 1210.48 L1519.66 1210.48 L1520.25 1210.48 L1520.83 1210.48 L1521.42 1210.48 L1522.01 1210.48 L1522.59 1210.48 L1523.18 1210.48 L1523.77 1210.48 L1524.35 1210.48 L1524.94 1210.48 L1525.52 1210.48 L1526.11 1210.48 L1526.7 1210.48 L1527.28 1210.48 L1527.87 1210.48 L1528.46 1210.48 L1529.04 1210.48 L1529.63 1210.48 L1530.22 1210.48 L1530.8 1210.48 L1531.39 1210.48 L1531.98 1210.48 L1532.56 1210.48 L1533.15 1210.48 L1533.73 1210.48 L1534.32 1210.48 L1534.91 1210.48 L1535.49 1210.48 L1536.08 1210.48 L1536.67 1210.48 L1537.25 1210.48 L1537.84 1210.48 L1538.43 1210.48 L1539.01 1210.48 L1539.6 1210.48 L1540.19 1210.48 L1540.77 1210.48 L1541.36 1210.48 L1541.94 1210.48 L1542.53 1210.48 L1543.12 1210.48 L1543.7 1210.48 L1544.29 1210.48 L1544.88 1210.48 L1545.46 1210.48 L1546.05 1210.48 L1546.64 1210.48 L1547.22 1210.48 L1547.81 1210.48 L1548.4 1210.48 L1548.98 1210.48 L1549.57 1210.48 L1550.15 1210.48 L1550.74 1210.48 L1551.33 1210.48 L1551.91 1210.48 L1552.5 1210.48 L1553.09 1210.48 L1553.67 1210.48 L1554.26 1210.48 L1554.85 1210.48 L1555.43 1210.48 L1556.02 1210.48 L1556.6 1210.48 L1557.19 1210.48 L1557.78 1210.48 L1558.36 1210.48 L1558.95 1210.48 L1559.54 1210.48 L1560.12 1210.48 L1560.71 1210.48 L1561.3 1210.48 L1561.88 1210.48 L1562.47 1210.48 L1563.06 1210.48 L1563.64 1210.48 L1564.23 1210.48 L1564.81 1210.48 L1565.4 1210.48 L1565.99 1210.48 L1566.57 1210.48 L1567.16 1210.48 L1567.75 1210.48 L1568.33 1210.48 L1568.92 1210.48 L1569.51 1210.48 L1570.09 1210.48 L1570.68 1210.48 L1571.27 1210.48 L1571.85 1210.48 L1572.44 1210.48 L1573.02 1210.48 L1573.61 1210.48 L1574.2 1210.48 L1574.78 1210.48 L1575.37 1210.48 L1575.96 1210.48 L1576.54 1210.48 L1577.13 1210.48 L1577.72 1210.48 L1578.3 1210.48 L1578.89 1210.48 L1579.47 1210.48 L1580.06 1210.48 L1580.65 1210.48 L1581.23 1210.48 L1581.82 1210.48 L1582.41 1210.48 L1582.99 1210.48 L1583.58 1210.48 L1584.17 1210.48 L1584.75 1210.48 L1585.34 1210.48 L1585.93 1210.48 L1586.51 1210.48 L1587.1 1210.48 L1587.68 1210.48 L1588.27 1210.48 L1588.86 1210.48 L1589.44 1210.48 L1590.03 1210.48 L1590.62 1210.48 L1591.2 1210.48 L1591.79 1210.48 L1592.38 1210.48 L1592.96 1210.48 L1593.55 1210.48 L1594.14 1210.48 L1594.72 1210.48 L1595.31 1210.48 L1595.89 1210.48 L1596.48 1210.48 L1597.07 1210.48 L1597.65 1210.48 L1598.24 1210.48 L1598.83 1210.48 L1599.41 1210.48 L1600 1210.48 L1600.59 1210.48 L1601.17 1210.48 L1601.76 1210.48 L1602.34 1210.48 L1602.93 1210.48 L1603.52 1210.48 L1604.1 1210.48 L1604.69 1210.48 L1605.28 1210.48 L1605.86 1210.48 L1606.45 1210.48 L1607.04 1210.48 L1607.62 1210.48 L1608.21 1210.48 L1608.8 1210.48 L1609.38 1210.48 L1609.97 1210.48 L1610.55 1210.48 L1611.14 1210.48 L1611.73 1210.48 L1612.31 1210.48 L1612.9 1210.48 L1613.49 1210.48 L1614.07 1210.48 L1614.66 1210.48 L1615.25 1210.48 L1615.83 1210.48 L1616.42 1210.48 L1617.01 1210.48 L1617.59 1210.48 L1618.18 1210.48 L1618.76 1210.48 L1619.35 1210.48 L1619.94 1210.48 L1620.52 1210.48 L1621.11 1210.48 L1621.7 1210.48 L1622.28 1210.48 L1622.87 1210.48 L1623.46 1210.48 L1624.04 1210.48 L1624.63 1210.48 L1625.22 1210.48 L1625.8 1210.48 L1626.39 1210.48 L1626.97 1210.48 L1627.56 1210.48 L1628.15 1210.48 L1628.73 1210.48 L1629.32 1210.48 L1629.91 1210.48 L1630.49 1210.48 L1631.08 1210.48 L1631.67 1210.48 L1632.25 1210.48 L1632.84 1210.48 L1633.42 1210.48 L1634.01 1210.48 L1634.6 1210.48 L1635.18 1210.48 L1635.77 1210.48 L1636.36 1210.48 L1636.94 1210.48 L1637.53 1210.48 L1638.12 1210.48 L1638.7 1210.48 L1639.29 1210.48 L1639.88 1210.48 L1640.46 1210.48 L1641.05 1210.48 L1641.63 1210.48 L1642.22 1210.48 L1642.81 1210.48 L1643.39 1210.48 L1643.98 1210.48 L1644.57 1210.48 L1645.15 1210.48 L1645.74 1210.48 L1646.33 1210.48 L1646.91 1210.48 L1647.5 1210.48 L1648.09 1210.48 L1648.67 1210.48 L1649.26 1210.48 L1649.84 1210.48 L1650.43 1210.48 L1651.02 1210.48 L1651.6 1210.48 L1652.19 1210.48 L1652.78 1210.48 L1653.36 1210.48 L1653.95 1210.48 L1654.54 1210.48 L1655.12 1210.48 L1655.71 1210.48 L1656.29 1210.48 L1656.88 1210.48 L1657.47 1210.48 L1658.05 1210.48 L1658.64 1210.48 L1659.23 1210.48 L1659.81 1210.48 L1660.4 1210.48 L1660.99 1210.48 L1661.57 1210.48 L1662.16 1210.48 L1662.75 1210.48 L1663.33 1210.48 L1663.92 1210.48 L1664.5 1210.48 L1665.09 1210.48 L1665.68 1210.48 L1666.26 1210.48 L1666.85 1210.48 L1667.44 1210.48 L1668.02 1210.48 L1668.61 1210.48 L1669.2 1210.48 L1669.78 1210.48 L1670.37 1210.48 L1670.96 1210.48 L1671.54 1210.48 L1672.13 1210.48 L1672.71 1210.48 L1673.3 1210.48 L1673.89 1210.48 L1674.47 1210.48 L1675.06 1210.48 L1675.65 1210.48 L1676.23 1210.48 L1676.82 1210.48 L1677.41 1210.48 L1677.99 1210.48 L1678.58 1210.48 L1679.17 1210.48 L1679.75 1210.48 L1680.34 1210.48 L1680.92 1210.48 L1681.51 1210.48 L1682.1 1210.48 L1682.68 1210.48 L1683.27 1210.48 L1683.86 1210.48 L1684.44 1210.48 L1685.03 1210.48 L1685.62 1210.48 L1686.2 1210.48 L1686.79 1210.48 L1687.37 1210.48 L1687.96 1210.48 L1688.55 1210.48 L1689.13 1210.48 L1689.72 1210.48 L1690.31 1210.48 L1690.89 1210.48 L1691.48 1210.48 L1692.07 1210.48 L1692.65 1210.48 L1693.24 1210.48 L1693.83 1210.48 L1694.41 1210.48 L1695 1210.48 L1695.58 1210.48 L1696.17 1210.48 L1696.76 1210.48 L1697.34 1210.48 L1697.93 1210.48 L1698.52 1210.48 L1699.1 1210.48 L1699.69 1210.48 L1700.28 1210.48 L1700.86 1210.48 L1701.45 1210.48 L1702.04 1210.48 L1702.62 1210.48 L1703.21 1210.48 L1703.79 1210.48 L1704.38 1210.48 L1704.97 1210.48 L1705.55 1210.48 L1706.14 1210.48 L1706.73 1210.48 L1707.31 1210.48 L1707.9 1210.48 L1708.49 1210.48 L1709.07 1210.48 L1709.66 1210.48 L1710.24 1210.48 L1710.83 1210.48 L1711.42 1210.48 L1712 1210.48 L1712.59 1210.48 L1713.18 1210.48 L1713.76 1210.48 L1714.35 1210.48 L1714.94 1210.48 L1715.52 1210.48 L1716.11 1210.48 L1716.7 1210.48 L1717.28 1210.48 L1717.87 1210.48 L1718.45 1210.48 L1719.04 1210.48 L1719.63 1210.48 L1720.21 1210.48 L1720.8 1210.48 L1721.39 1210.48 L1721.97 1210.48 L1722.56 1210.48 L1723.15 1210.48 L1723.73 1210.48 L1724.32 1210.48 L1724.91 1210.48 L1725.49 1210.48 L1726.08 1210.48 L1726.66 1210.48 L1727.25 1210.48 L1727.84 1210.48 L1728.42 1210.48 L1729.01 1210.48 L1729.6 1210.48 L1730.18 1210.48 L1730.77 1210.48 L1731.36 1210.48 L1731.94 1210.48 L1732.53 1210.48 L1733.11 1210.48 L1733.7 1210.48 L1734.29 1210.48 L1734.87 1210.48 L1735.46 1210.48 L1736.05 1210.48 L1736.63 1210.48 L1737.22 1210.48 L1737.81 1210.48 L1738.39 1210.48 L1738.98 1210.48 L1739.57 1210.48 L1740.15 1210.48 L1740.74 1210.48 L1741.32 1210.48 L1741.91 1210.48 L1742.5 1210.48 L1743.08 1210.48 L1743.67 1210.48 L1744.26 1210.48 L1744.84 1210.48 L1745.43 1210.48 L1746.02 1210.48 L1746.6 1210.48 L1747.19 1210.48 L1747.78 1210.48 L1748.36 1210.48 L1748.95 1210.48 L1749.53 1210.48 L1750.12 1210.48 L1750.71 1210.48 L1751.29 1210.48 L1751.88 1210.48 L1752.47 1210.48 L1753.05 1210.48 L1753.64 1210.48 L1754.23 1210.48 L1754.81 1210.48 L1755.4 1210.48 L1755.99 1210.48 L1756.57 1210.48 L1757.16 1210.48 L1757.74 1210.48 L1758.33 1210.48 L1758.92 1210.48 L1759.5 1210.48 L1760.09 1210.48 L1760.68 1210.48 L1761.26 1210.48 L1761.85 1210.48 L1762.44 1210.48 L1763.02 1210.48 L1763.61 1210.48 L1764.19 1210.48 L1764.78 1210.48 L1765.37 1210.48 L1765.95 1210.48 L1766.54 1210.48 L1767.13 1210.48 L1767.71 1210.48 L1768.3 1210.48 L1768.89 1210.48 L1769.47 1210.48 L1770.06 1210.48 L1770.65 1210.48 L1771.23 1210.48 L1771.82 1210.48 L1772.4 1210.48 L1772.99 1210.48 L1773.58 1210.48 L1774.16 1210.48 L1774.75 1210.48 L1775.34 1210.48 L1775.92 1210.48 L1776.51 1210.48 L1777.1 1210.48 L1777.68 1210.48 L1778.27 1210.48 L1778.86 1210.48 L1779.44 1210.48 L1780.03 1210.48 L1780.61 1210.48 L1781.2 1210.48 L1781.79 1210.48 L1782.37 1210.48 L1782.96 1210.48 L1783.55 1210.48 L1784.13 1210.48 L1784.72 1210.48 L1785.31 1210.48 L1785.89 1210.48 L1786.48 1210.48 L1787.06 1210.48 L1787.65 1210.48 L1788.24 1210.48 L1788.82 1210.48 L1789.41 1210.48 L1790 1210.48 L1790.58 1210.48 L1791.17 1210.48 L1791.76 1210.48 L1792.34 1210.48 L1792.93 1210.48 L1793.52 1210.48 L1794.1 1210.48 L1794.69 1210.48 L1795.27 1210.48 L1795.86 1210.48 L1796.45 1210.48 L1797.03 1210.48 L1797.62 1210.48 L1798.21 1210.48 L1798.79 1210.48 L1799.38 1210.48 L1799.97 1210.48 L1800.55 1210.48 L1801.14 1210.48 L1801.73 1210.48 L1802.31 1210.48 L1802.9 1210.48 L1803.48 1210.48 L1804.07 1210.48 L1804.66 1210.48 L1805.24 1210.48 L1805.83 1210.48 L1806.42 1210.48 L1807 1210.48 L1807.59 1210.48 L1808.18 1210.48 L1808.76 1210.48 L1809.35 1210.48 L1809.94 1210.48 L1810.52 1210.48 L1811.11 1210.48 L1811.69 1210.48 L1812.28 1210.48 L1812.87 1210.48 L1813.45 1210.48 L1814.04 1210.48 L1814.63 1210.48 L1815.21 1210.48 L1815.8 1210.48 L1816.39 1210.48 L1816.97 1210.48 L1817.56 1210.48 L1818.14 1210.48 L1818.73 1210.48 L1819.32 1210.48 L1819.9 1210.48 L1820.49 1210.48 L1821.08 1210.48 L1821.66 1210.48 L1822.25 1210.48 L1822.84 1210.48 L1823.42 1210.48 L1824.01 1210.48 L1824.6 1210.48 L1825.18 1210.48 L1825.77 1210.48 L1826.35 1210.48 L1826.94 1210.48 L1827.53 1210.48 L1828.11 1210.48 L1828.7 1210.48 L1829.29 1210.48 L1829.87 1210.48 L1830.46 1210.48 L1831.05 1210.48 L1831.63 1210.48 L1832.22 1210.48 L1832.81 1210.48 L1833.39 1210.48 L1833.98 1210.48 L1834.56 1210.48 L1835.15 1210.48 L1835.74 1210.48 L1836.32 1210.48 L1836.91 1210.48 L1837.5 1210.48 L1838.08 1210.48 L1838.67 1210.48 L1839.26 1210.48 L1839.84 1210.48 L1840.43 1210.48 L1841.01 1210.48 L1841.6 1210.48 L1842.19 1210.48 L1842.77 1210.48 L1843.36 1210.48 L1843.95 1210.48 L1844.53 1210.48 L1845.12 1210.48 L1845.71 1210.48 L1846.29 1210.48 L1846.88 1210.48 L1847.47 1210.48 L1848.05 1210.48 L1848.64 1210.48 L1849.22 1210.48 L1849.81 1210.48 L1850.4 1210.48 L1850.98 1210.48 L1851.57 1210.48 L1852.16 1210.48 L1852.74 1210.48 L1853.33 1210.48 L1853.92 1210.48 L1854.5 1210.48 L1855.09 1210.48 L1855.68 1210.48 L1856.26 1210.48 L1856.85 1210.48 L1857.43 1210.48 L1858.02 1210.48 L1858.61 1210.48 L1859.19 1210.48 L1859.78 1210.48 L1860.37 1210.48 L1860.95 1210.48 L1861.54 1210.48 L1862.13 1210.48 L1862.71 1210.48 L1863.3 1210.48 L1863.88 1210.48 L1864.47 1210.48 L1865.06 1210.48 L1865.64 1210.48 L1866.23 1210.48 L1866.82 1210.48 L1867.4 1210.48 L1867.99 1210.48 L1868.58 1210.48 L1869.16 1210.48 L1869.75 1210.48 L1870.34 1210.48 L1870.92 1210.48 L1871.51 1210.48 L1872.09 1210.48 L1872.68 1210.48 L1873.27 1210.48 L1873.85 1210.48 L1874.44 1210.48 L1875.03 1210.48 L1875.61 1210.48 L1876.2 1210.48 L1876.79 1210.48 L1877.37 1210.48 L1877.96 1210.48 L1878.55 1210.48 L1879.13 1210.48 L1879.72 1210.48 L1880.3 1210.48 L1880.89 1210.48 L1881.48 1210.48 L1882.06 1210.48 L1882.65 1210.48 L1883.24 1210.48 L1883.82 1210.48 L1884.41 1210.48 L1885 1210.48 L1885.58 1210.48 L1886.17 1210.48 L1886.76 1210.48 L1887.34 1210.48 L1887.93 1210.48 L1888.51 1210.48 L1889.1 1210.48 L1889.69 1210.48 L1890.27 1210.48 L1890.86 1210.48 L1891.45 1210.48 L1892.03 1210.48 L1892.62 1210.48 L1893.21 1210.48 L1893.79 1210.48 L1894.38 1210.48 L1894.96 1210.48 L1895.55 1210.48 L1896.14 1210.48 L1896.72 1210.48 L1897.31 1210.48 L1897.9 1210.48 L1898.48 1210.48 L1899.07 1210.48 L1899.66 1210.48 L1900.24 1210.48 L1900.83 1210.48 L1901.42 1210.48 L1902 1210.48 L1902.59 1210.48 L1903.17 1210.48 L1903.76 1210.48 L1904.35 1210.48 L1904.93 1210.48 L1905.52 1210.48 L1906.11 1210.48 L1906.69 1210.48 L1907.28 1210.48 L1907.87 1210.48 L1908.45 1210.48 L1909.04 1210.48 L1909.63 1210.48 L1910.21 1210.48 L1910.8 1210.48 L1911.38 1210.48 L1911.97 1210.48 L1912.56 1210.48 L1913.14 1210.48 L1913.73 1210.48 L1914.32 1210.48 L1914.9 1210.48 L1915.49 1210.48 L1916.08 1210.48 L1916.66 1210.48 L1917.25 1210.48 L1917.83 1210.48 L1918.42 1210.48 L1919.01 1210.48 L1919.59 1210.48 L1920.18 1210.48 L1920.77 1210.48 L1921.35 1210.48 L1921.94 1210.48 L1922.53 1210.48 L1923.11 1210.48 L1923.7 1210.48 L1924.29 1210.48 L1924.87 1210.48 L1925.46 1210.48 L1926.04 1210.48 L1926.63 1210.48 L1927.22 1210.48 L1927.8 1210.48 L1928.39 1210.48 L1928.98 1210.48 L1929.56 1210.48 L1930.15 1210.48 L1930.74 1210.48 L1931.32 1210.48 L1931.91 1210.48 L1932.5 1210.48 L1933.08 1210.48 L1933.67 1210.48 L1934.25 1210.48 L1934.84 1210.48 L1935.43 1210.48 L1936.01 1210.48 L1936.6 1210.48 L1937.19 1210.48 L1937.77 1210.48 L1938.36 1210.48 L1938.95 1210.48 L1939.53 1210.48 L1940.12 1210.48 L1940.71 1210.48 L1941.29 1210.48 L1941.88 1210.48 L1942.46 1210.48 L1943.05 1210.48 L1943.64 1210.48 L1944.22 1210.48 L1944.81 1210.48 L1945.4 1210.48 L1945.98 1210.48 L1946.57 1210.48 L1947.16 1210.48 L1947.74 1210.48 L1948.33 1210.48 L1948.91 1210.48 L1949.5 1210.48 L1950.09 1210.48 L1950.67 1210.48 L1951.26 1210.48 L1951.85 1210.48 L1952.43 1210.48 L1953.02 1210.48 L1953.61 1210.48 L1954.19 1210.48 L1954.78 1210.48 L1955.37 1210.48 L1955.95 1210.48 L1956.54 1210.48 L1957.12 1210.48 L1957.71 1210.48 L1958.3 1210.48 L1958.88 1210.48 L1959.47 1210.48 L1960.06 1210.48 L1960.64 1210.48 L1961.23 1210.48 L1961.82 1210.48 L1962.4 1210.48 L1962.99 1210.48 L1963.58 1210.48 L1964.16 1210.48 L1964.75 1210.48 L1965.33 1210.48 L1965.92 1210.48 L1966.51 1210.48 L1967.09 1210.48 L1967.68 1210.48 L1968.27 1210.48 L1968.85 1210.48 L1969.44 1210.48 L1970.03 1210.48 L1970.61 1210.48 L1971.2 1210.48 L1971.78 1210.48 L1972.37 1210.48 L1972.96 1210.48 L1973.54 1210.48 L1974.13 1210.48 L1974.72 1210.48 L1975.3 1210.48 L1975.89 1210.48 L1976.48 1210.48 L1977.06 1210.48 L1977.65 1210.48 L1978.24 1210.48 L1978.82 1210.48 L1979.41 1210.48 L1979.99 1210.48 L1980.58 1210.48 L1981.17 1210.48 L1981.75 1210.48 L1982.34 1210.48 L1982.93 1210.48 L1983.51 1210.48 L1984.1 1210.48 L1984.69 1210.48 L1985.27 1210.48 L1985.86 1210.48 L1986.45 1210.48 L1987.03 1210.48 L1987.62 1210.48 L1988.2 1210.48 L1988.79 1210.48 L1989.38 1210.48 L1989.96 1210.48 L1990.55 1210.48 L1991.14 1210.48 L1991.72 1210.48 L1992.31 1210.48 L1992.9 1210.48 L1993.48 1210.48 L1994.07 1210.48 L1994.65 1210.48 L1995.24 1210.48 L1995.83 1210.48 L1996.41 1210.48 L1997 1210.48 L1997.59 1210.48 L1998.17 1210.48 L1998.76 1210.48 L1999.35 1210.48 L1999.93 1210.48 L2000.52 1210.48 L2001.11 1210.48 L2001.69 1210.48 L2002.28 1210.48 L2002.86 1210.48 L2003.45 1210.48 L2004.04 1210.48 L2004.62 1210.48 L2005.21 1210.48 L2005.8 1210.48 L2006.38 1210.48 L2006.97 1210.48 L2007.56 1210.48 L2008.14 1210.48 L2008.73 1210.48 L2009.32 1210.48 L2009.9 1210.48 L2010.49 1210.48 L2011.07 1210.48 L2011.66 1210.48 L2012.25 1210.48 L2012.83 1210.48 L2013.42 1210.48 L2014.01 1210.48 L2014.59 1210.48 L2015.18 1210.48 L2015.77 1210.48 L2016.35 1210.48 L2016.94 1210.48 L2017.53 1210.48 L2018.11 1210.48 L2018.7 1210.48 L2019.28 1210.48 L2019.87 1210.48 L2020.46 1210.48 L2021.04 1210.48 L2021.63 1210.48 L2022.22 1210.48 L2022.8 1210.48 L2023.39 1210.48 L2023.98 1210.48 L2024.56 1210.48 L2025.15 1210.48 L2025.73 1210.48 L2026.32 1210.48 L2026.91 1210.48 L2027.49 1210.48 L2028.08 1210.48 L2028.67 1210.48 L2029.25 1210.48 L2029.84 1210.48 L2030.43 1210.48 L2031.01 1210.48 L2031.6 1210.48 L2032.19 1210.48 L2032.77 1210.48 L2033.36 1210.48 L2033.94 1210.48 L2034.53 1210.48 L2035.12 1210.48 L2035.7 1210.48 L2036.29 1210.48 L2036.88 1210.48 L2037.46 1210.48 L2038.05 1210.48 L2038.64 1210.48 L2039.22 1210.48 L2039.81 1210.48 L2040.4 1210.48 L2040.98 1210.48 L2041.57 1210.48 L2042.15 1210.48 L2042.74 1210.48 L2043.33 1210.48 L2043.91 1210.48 L2044.5 1210.48 L2045.09 1210.48 L2045.67 1210.48 L2046.26 1210.48 L2046.85 1210.48 L2047.43 1210.48 L2048.02 1210.48 L2048.6 1210.48 L2049.19 1210.48 L2049.78 1210.48 L2050.36 1210.48 L2050.95 1210.48 L2051.54 1210.48 L2052.12 1210.48 L2052.71 1210.48 L2053.3 1210.48 L2053.88 1210.48 L2054.47 1210.48 L2055.06 1210.48 L2055.64 1210.48 L2056.23 1210.48 L2056.81 1210.48 L2057.4 1210.48 L2057.99 1210.48 L2058.57 1210.48 L2059.16 1210.48 L2059.75 1210.48 L2060.33 1210.48 L2060.92 1210.48 L2061.51 1210.48 L2062.09 1210.48 L2062.68 1210.48 L2063.27 1210.48 L2063.85 1210.48 L2064.44 1210.48 L2065.02 1210.48 L2065.61 1210.48 L2066.2 1210.48 L2066.78 1210.48 L2067.37 1210.48 L2067.96 1210.48 L2068.54 1210.48 L2069.13 1210.48 L2069.72 1210.48 L2070.3 1210.48 L2070.89 1210.48 L2071.48 1210.48 L2072.06 1210.48 L2072.65 1210.48 L2073.23 1210.48 L2073.82 1210.48 L2074.41 1210.48 L2074.99 1210.48 L2075.58 1210.48 L2076.17 1210.48 L2076.75 1210.48 L2077.34 1210.48 L2077.93 1210.48 L2078.51 1210.48 L2079.1 1210.48 L2079.68 1210.48 L2080.27 1210.48 L2080.86 1210.48 L2081.44 1210.48 L2082.03 1210.48 L2082.62 1210.48 L2083.2 1210.48 L2083.79 1210.48 L2084.38 1210.48 L2084.96 1210.48 L2085.55 1210.48 L2086.14 1210.48 L2086.72 1210.48 L2087.31 1210.48 L2087.89 1210.48 L2088.48 1210.48 L2089.07 1210.48 L2089.65 1210.48 L2090.24 1210.48 L2090.83 1210.48 L2091.41 1210.48 L2092 1210.48 L2092.59 1210.48 L2093.17 1210.48 L2093.76 1210.48 L2094.35 1210.48 L2094.93 1210.48 L2095.52 1210.48 L2096.1 1210.48 L2096.69 1210.48 L2097.28 1210.48 L2097.86 1210.48 L2098.45 1210.48 L2099.04 1210.48 L2099.62 1210.48 L2100.21 1210.48 L2100.8 1210.48 L2101.38 1210.48 L2101.97 1210.48 L2102.55 1210.48 L2103.14 1210.48 L2103.73 1210.48 L2104.31 1210.48 L2104.9 1210.48 L2105.49 1210.48 L2106.07 1210.48 L2106.66 1210.48 L2107.25 1210.48 L2107.83 1210.48 L2108.42 1210.48 L2109.01 1210.48 L2109.59 1210.48 L2110.18 1210.48 L2110.76 1210.48 L2111.35 1210.48 L2111.94 1210.48 L2112.52 1210.48 L2113.11 1210.48 L2113.7 1210.48 L2114.28 1210.48 L2114.87 1210.48 L2115.46 1210.48 L2116.04 1210.48 L2116.63 1210.48 L2117.22 1210.48 L2117.8 1210.48 L2118.39 1210.48 L2118.97 1210.48 L2119.56 1210.48 L2120.15 1210.48 L2120.73 1210.48 L2121.32 1210.48 L2121.91 1210.48 L2122.49 1210.48 L2123.08 1210.48 L2123.67 1210.48 L2124.25 1210.48 L2124.84 1210.48 L2125.42 1210.48 L2126.01 1210.48 L2126.6 1210.48 L2127.18 1210.48 L2127.77 1210.48 L2128.36 1210.48 L2128.94 1210.48 L2129.53 1210.48 L2130.12 1210.48 L2130.7 1210.48 L2131.29 1210.48 L2131.88 1210.48 L2132.46 1210.48 L2133.05 1210.48 L2133.63 1210.48 L2134.22 1210.48 L2134.81 1210.48 L2135.39 1210.48 L2135.98 1210.48 L2136.57 1210.48 L2137.15 1210.48 L2137.74 1210.48 L2138.33 1210.48 L2138.91 1210.48 L2139.5 1210.48 L2140.09 1210.48 L2140.67 1210.48 L2141.26 1210.48 L2141.84 1210.48 L2142.43 1210.48 L2143.02 1210.48 L2143.6 1210.48 L2144.19 1210.48 L2144.78 1210.48 L2145.36 1210.48 L2145.95 1210.48 L2146.54 1210.48 L2147.12 1210.48 L2147.71 1210.48 L2148.3 1210.48 L2148.88 1210.48 L2149.47 1210.48 L2150.05 1210.48 L2150.64 1210.48 L2151.23 1210.48 L2151.81 1210.48 L2152.4 1210.48 L2152.99 1210.48 L2153.57 1210.48 L2154.16 1210.48 L2154.75 1210.48 L2155.33 1210.48 L2155.92 1210.48 L2156.5 1210.48 L2157.09 1210.48 L2157.68 1210.48 L2158.26 1210.48 L2158.26 1210.27 L2157.68 1210.27 L2157.09 1210.27 L2156.5 1210.27 L2155.92 1210.27 L2155.33 1210.27 L2154.75 1210.27 L2154.16 1210.27 L2153.57 1210.27 L2152.99 1210.27 L2152.4 1210.27 L2151.81 1210.27 L2151.23 1210.27 L2150.64 1210.27 L2150.05 1210.27 L2149.47 1210.27 L2148.88 1210.27 L2148.3 1210.27 L2147.71 1210.27 L2147.12 1210.27 L2146.54 1210.27 L2145.95 1210.27 L2145.36 1210.27 L2144.78 1210.27 L2144.19 1210.27 L2143.6 1210.27 L2143.02 1210.27 L2142.43 1210.27 L2141.84 1210.27 L2141.26 1210.27 L2140.67 1210.27 L2140.09 1210.27 L2139.5 1210.27 L2138.91 1210.27 L2138.33 1210.27 L2137.74 1210.27 L2137.15 1210.27 L2136.57 1210.27 L2135.98 1210.27 L2135.39 1210.27 L2134.81 1210.27 L2134.22 1210.27 L2133.63 1210.27 L2133.05 1210.27 L2132.46 1210.27 L2131.88 1210.27 L2131.29 1210.27 L2130.7 1210.27 L2130.12 1210.27 L2129.53 1210.27 L2128.94 1210.27 L2128.36 1210.27 L2127.77 1210.27 L2127.18 1210.27 L2126.6 1210.27 L2126.01 1210.27 L2125.42 1210.27 L2124.84 1210.27 L2124.25 1210.27 L2123.67 1210.27 L2123.08 1210.27 L2122.49 1210.27 L2121.91 1210.27 L2121.32 1210.27 L2120.73 1210.27 L2120.15 1210.27 L2119.56 1210.27 L2118.97 1210.27 L2118.39 1210.27 L2117.8 1210.27 L2117.22 1210.27 L2116.63 1210.27 L2116.04 1210.27 L2115.46 1210.27 L2114.87 1210.27 L2114.28 1210.27 L2113.7 1210.27 L2113.11 1210.27 L2112.52 1210.27 L2111.94 1210.27 L2111.35 1210.27 L2110.76 1210.27 L2110.18 1210.27 L2109.59 1210.27 L2109.01 1210.27 L2108.42 1210.27 L2107.83 1210.27 L2107.25 1210.27 L2106.66 1210.27 L2106.07 1210.27 L2105.49 1210.27 L2104.9 1210.27 L2104.31 1210.27 L2103.73 1210.27 L2103.14 1210.27 L2102.55 1210.27 L2101.97 1210.27 L2101.38 1210.27 L2100.8 1210.27 L2100.21 1210.27 L2099.62 1210.27 L2099.04 1210.27 L2098.45 1210.27 L2097.86 1210.27 L2097.28 1210.27 L2096.69 1210.27 L2096.1 1210.27 L2095.52 1210.27 L2094.93 1210.27 L2094.35 1210.27 L2093.76 1210.27 L2093.17 1210.27 L2092.59 1210.27 L2092 1210.27 L2091.41 1210.27 L2090.83 1210.27 L2090.24 1210.27 L2089.65 1210.27 L2089.07 1210.27 L2088.48 1210.27 L2087.89 1210.27 L2087.31 1210.27 L2086.72 1210.27 L2086.14 1210.27 L2085.55 1210.27 L2084.96 1210.27 L2084.38 1210.27 L2083.79 1210.27 L2083.2 1210.27 L2082.62 1210.27 L2082.03 1210.27 L2081.44 1210.27 L2080.86 1210.27 L2080.27 1210.27 L2079.68 1210.27 L2079.1 1210.27 L2078.51 1210.27 L2077.93 1210.27 L2077.34 1210.27 L2076.75 1210.27 L2076.17 1210.27 L2075.58 1210.27 L2074.99 1210.27 L2074.41 1210.27 L2073.82 1210.27 L2073.23 1210.27 L2072.65 1210.27 L2072.06 1210.27 L2071.48 1210.27 L2070.89 1210.27 L2070.3 1210.27 L2069.72 1210.27 L2069.13 1210.27 L2068.54 1210.27 L2067.96 1210.27 L2067.37 1210.27 L2066.78 1210.27 L2066.2 1210.27 L2065.61 1210.27 L2065.02 1210.27 L2064.44 1210.27 L2063.85 1210.27 L2063.27 1210.27 L2062.68 1210.27 L2062.09 1210.27 L2061.51 1210.27 L2060.92 1210.27 L2060.33 1210.27 L2059.75 1210.27 L2059.16 1210.27 L2058.57 1210.27 L2057.99 1210.27 L2057.4 1210.27 L2056.81 1210.27 L2056.23 1210.27 L2055.64 1210.27 L2055.06 1210.27 L2054.47 1210.27 L2053.88 1210.27 L2053.3 1210.27 L2052.71 1210.27 L2052.12 1210.27 L2051.54 1210.27 L2050.95 1210.27 L2050.36 1210.27 L2049.78 1210.27 L2049.19 1210.27 L2048.6 1210.27 L2048.02 1210.27 L2047.43 1210.27 L2046.85 1210.27 L2046.26 1210.27 L2045.67 1210.27 L2045.09 1210.27 L2044.5 1210.27 L2043.91 1210.27 L2043.33 1210.27 L2042.74 1210.27 L2042.15 1210.27 L2041.57 1210.27 L2040.98 1210.27 L2040.4 1210.27 L2039.81 1210.27 L2039.22 1210.27 L2038.64 1210.27 L2038.05 1210.27 L2037.46 1210.27 L2036.88 1210.27 L2036.29 1210.27 L2035.7 1210.27 L2035.12 1210.27 L2034.53 1210.27 L2033.94 1210.27 L2033.36 1210.27 L2032.77 1210.27 L2032.19 1210.27 L2031.6 1210.27 L2031.01 1210.27 L2030.43 1210.27 L2029.84 1210.27 L2029.25 1210.27 L2028.67 1210.27 L2028.08 1210.27 L2027.49 1210.27 L2026.91 1210.27 L2026.32 1210.27 L2025.73 1210.27 L2025.15 1210.27 L2024.56 1210.27 L2023.98 1210.27 L2023.39 1210.27 L2022.8 1210.27 L2022.22 1210.27 L2021.63 1210.27 L2021.04 1210.27 L2020.46 1210.27 L2019.87 1210.27 L2019.28 1210.27 L2018.7 1210.27 L2018.11 1210.27 L2017.53 1210.27 L2016.94 1210.27 L2016.35 1210.27 L2015.77 1210.27 L2015.18 1210.27 L2014.59 1210.27 L2014.01 1210.27 L2013.42 1210.27 L2012.83 1210.27 L2012.25 1210.27 L2011.66 1210.27 L2011.07 1210.27 L2010.49 1210.27 L2009.9 1210.27 L2009.32 1210.27 L2008.73 1210.27 L2008.14 1210.27 L2007.56 1210.27 L2006.97 1210.27 L2006.38 1210.27 L2005.8 1210.27 L2005.21 1210.27 L2004.62 1210.27 L2004.04 1210.27 L2003.45 1210.27 L2002.86 1210.27 L2002.28 1210.27 L2001.69 1210.27 L2001.11 1210.27 L2000.52 1210.27 L1999.93 1210.27 L1999.35 1210.27 L1998.76 1210.27 L1998.17 1210.27 L1997.59 1210.27 L1997 1210.27 L1996.41 1210.27 L1995.83 1210.27 L1995.24 1210.27 L1994.65 1210.27 L1994.07 1210.27 L1993.48 1210.27 L1992.9 1210.27 L1992.31 1210.27 L1991.72 1210.27 L1991.14 1210.27 L1990.55 1210.27 L1989.96 1210.27 L1989.38 1210.27 L1988.79 1210.27 L1988.2 1210.27 L1987.62 1210.27 L1987.03 1210.27 L1986.45 1210.27 L1985.86 1210.27 L1985.27 1210.27 L1984.69 1210.27 L1984.1 1210.27 L1983.51 1210.27 L1982.93 1210.27 L1982.34 1210.27 L1981.75 1210.27 L1981.17 1210.27 L1980.58 1210.27 L1979.99 1210.27 L1979.41 1210.27 L1978.82 1210.27 L1978.24 1210.27 L1977.65 1210.27 L1977.06 1210.27 L1976.48 1210.27 L1975.89 1210.27 L1975.3 1210.27 L1974.72 1210.27 L1974.13 1210.27 L1973.54 1210.27 L1972.96 1210.27 L1972.37 1210.27 L1971.78 1210.27 L1971.2 1210.27 L1970.61 1210.27 L1970.03 1210.27 L1969.44 1210.27 L1968.85 1210.27 L1968.27 1210.27 L1967.68 1210.27 L1967.09 1210.27 L1966.51 1210.27 L1965.92 1210.27 L1965.33 1210.27 L1964.75 1210.27 L1964.16 1210.27 L1963.58 1210.27 L1962.99 1210.27 L1962.4 1210.27 L1961.82 1210.27 L1961.23 1210.27 L1960.64 1210.27 L1960.06 1210.27 L1959.47 1210.27 L1958.88 1210.27 L1958.3 1210.27 L1957.71 1210.27 L1957.12 1210.27 L1956.54 1210.27 L1955.95 1210.27 L1955.37 1210.27 L1954.78 1210.27 L1954.19 1210.27 L1953.61 1210.27 L1953.02 1210.27 L1952.43 1210.27 L1951.85 1210.27 L1951.26 1210.27 L1950.67 1210.27 L1950.09 1210.27 L1949.5 1210.27 L1948.91 1210.27 L1948.33 1210.27 L1947.74 1210.27 L1947.16 1210.27 L1946.57 1210.27 L1945.98 1210.27 L1945.4 1210.27 L1944.81 1210.27 L1944.22 1210.27 L1943.64 1210.27 L1943.05 1210.27 L1942.46 1210.27 L1941.88 1210.27 L1941.29 1210.27 L1940.71 1210.27 L1940.12 1210.27 L1939.53 1210.27 L1938.95 1210.27 L1938.36 1210.27 L1937.77 1210.27 L1937.19 1210.27 L1936.6 1210.27 L1936.01 1210.27 L1935.43 1210.27 L1934.84 1210.27 L1934.25 1210.27 L1933.67 1210.27 L1933.08 1210.27 L1932.5 1210.27 L1931.91 1210.27 L1931.32 1210.27 L1930.74 1210.27 L1930.15 1210.27 L1929.56 1210.27 L1928.98 1210.27 L1928.39 1210.27 L1927.8 1210.27 L1927.22 1210.27 L1926.63 1210.27 L1926.04 1210.27 L1925.46 1210.27 L1924.87 1210.27 L1924.29 1210.27 L1923.7 1210.27 L1923.11 1210.27 L1922.53 1210.27 L1921.94 1210.27 L1921.35 1210.27 L1920.77 1210.27 L1920.18 1210.27 L1919.59 1210.27 L1919.01 1210.27 L1918.42 1210.27 L1917.83 1210.27 L1917.25 1210.27 L1916.66 1210.27 L1916.08 1210.27 L1915.49 1210.27 L1914.9 1210.27 L1914.32 1210.27 L1913.73 1210.27 L1913.14 1210.27 L1912.56 1210.27 L1911.97 1210.27 L1911.38 1210.27 L1910.8 1210.27 L1910.21 1210.27 L1909.63 1210.27 L1909.04 1210.27 L1908.45 1210.27 L1907.87 1210.27 L1907.28 1210.27 L1906.69 1210.27 L1906.11 1210.27 L1905.52 1210.27 L1904.93 1210.27 L1904.35 1210.27 L1903.76 1210.27 L1903.17 1210.27 L1902.59 1210.27 L1902 1210.27 L1901.42 1210.27 L1900.83 1210.27 L1900.24 1210.27 L1899.66 1210.27 L1899.07 1210.27 L1898.48 1210.27 L1897.9 1210.27 L1897.31 1210.27 L1896.72 1210.27 L1896.14 1210.27 L1895.55 1210.27 L1894.96 1210.27 L1894.38 1210.27 L1893.79 1210.27 L1893.21 1210.27 L1892.62 1210.27 L1892.03 1210.27 L1891.45 1210.27 L1890.86 1210.27 L1890.27 1210.27 L1889.69 1210.27 L1889.1 1210.27 L1888.51 1210.27 L1887.93 1210.27 L1887.34 1210.27 L1886.76 1210.27 L1886.17 1210.27 L1885.58 1210.27 L1885 1210.27 L1884.41 1210.27 L1883.82 1210.27 L1883.24 1210.27 L1882.65 1210.27 L1882.06 1210.27 L1881.48 1210.27 L1880.89 1210.27 L1880.3 1210.27 L1879.72 1210.27 L1879.13 1210.27 L1878.55 1210.27 L1877.96 1210.27 L1877.37 1210.27 L1876.79 1210.27 L1876.2 1210.27 L1875.61 1210.27 L1875.03 1210.27 L1874.44 1210.27 L1873.85 1210.27 L1873.27 1210.27 L1872.68 1210.27 L1872.09 1210.27 L1871.51 1210.27 L1870.92 1210.27 L1870.34 1210.27 L1869.75 1210.27 L1869.16 1210.27 L1868.58 1210.27 L1867.99 1210.27 L1867.4 1210.27 L1866.82 1210.27 L1866.23 1210.27 L1865.64 1210.27 L1865.06 1210.27 L1864.47 1210.27 L1863.88 1210.27 L1863.3 1210.27 L1862.71 1210.27 L1862.13 1210.27 L1861.54 1210.27 L1860.95 1210.27 L1860.37 1210.27 L1859.78 1210.27 L1859.19 1210.27 L1858.61 1210.27 L1858.02 1210.27 L1857.43 1210.27 L1856.85 1210.27 L1856.26 1210.27 L1855.68 1210.27 L1855.09 1210.27 L1854.5 1210.27 L1853.92 1210.27 L1853.33 1210.27 L1852.74 1210.27 L1852.16 1210.27 L1851.57 1210.27 L1850.98 1210.27 L1850.4 1210.27 L1849.81 1210.27 L1849.22 1210.27 L1848.64 1210.27 L1848.05 1210.27 L1847.47 1210.27 L1846.88 1210.27 L1846.29 1210.27 L1845.71 1210.27 L1845.12 1210.27 L1844.53 1210.27 L1843.95 1210.27 L1843.36 1210.27 L1842.77 1210.27 L1842.19 1210.27 L1841.6 1210.27 L1841.01 1210.27 L1840.43 1210.27 L1839.84 1210.27 L1839.26 1210.27 L1838.67 1210.27 L1838.08 1210.27 L1837.5 1210.27 L1836.91 1210.27 L1836.32 1210.27 L1835.74 1210.27 L1835.15 1210.27 L1834.56 1210.27 L1833.98 1210.27 L1833.39 1210.27 L1832.81 1210.27 L1832.22 1210.27 L1831.63 1210.27 L1831.05 1210.27 L1830.46 1210.27 L1829.87 1210.27 L1829.29 1210.27 L1828.7 1210.27 L1828.11 1210.27 L1827.53 1210.27 L1826.94 1210.27 L1826.35 1210.27 L1825.77 1210.27 L1825.18 1210.27 L1824.6 1210.27 L1824.01 1210.27 L1823.42 1210.27 L1822.84 1210.27 L1822.25 1210.27 L1821.66 1210.27 L1821.08 1210.27 L1820.49 1210.27 L1819.9 1210.27 L1819.32 1210.27 L1818.73 1210.27 L1818.14 1210.27 L1817.56 1210.27 L1816.97 1210.27 L1816.39 1210.27 L1815.8 1210.27 L1815.21 1210.27 L1814.63 1210.27 L1814.04 1210.27 L1813.45 1210.27 L1812.87 1210.27 L1812.28 1210.27 L1811.69 1210.27 L1811.11 1210.27 L1810.52 1210.27 L1809.94 1210.27 L1809.35 1210.27 L1808.76 1210.27 L1808.18 1210.27 L1807.59 1210.27 L1807 1210.27 L1806.42 1210.27 L1805.83 1210.27 L1805.24 1210.27 L1804.66 1210.27 L1804.07 1210.27 L1803.48 1210.27 L1802.9 1210.27 L1802.31 1210.27 L1801.73 1210.27 L1801.14 1210.27 L1800.55 1210.27 L1799.97 1210.27 L1799.38 1210.27 L1798.79 1210.27 L1798.21 1210.27 L1797.62 1210.27 L1797.03 1210.27 L1796.45 1210.27 L1795.86 1210.27 L1795.27 1210.27 L1794.69 1210.27 L1794.1 1210.27 L1793.52 1210.27 L1792.93 1210.27 L1792.34 1210.27 L1791.76 1210.27 L1791.17 1210.27 L1790.58 1210.27 L1790 1210.27 L1789.41 1210.27 L1788.82 1210.27 L1788.24 1210.27 L1787.65 1210.27 L1787.06 1210.27 L1786.48 1210.27 L1785.89 1210.27 L1785.31 1210.27 L1784.72 1210.27 L1784.13 1210.27 L1783.55 1210.27 L1782.96 1210.27 L1782.37 1210.27 L1781.79 1210.27 L1781.2 1210.27 L1780.61 1210.27 L1780.03 1210.27 L1779.44 1210.27 L1778.86 1210.27 L1778.27 1210.27 L1777.68 1210.27 L1777.1 1210.27 L1776.51 1210.27 L1775.92 1210.27 L1775.34 1210.27 L1774.75 1210.27 L1774.16 1210.27 L1773.58 1210.27 L1772.99 1210.27 L1772.4 1210.27 L1771.82 1210.27 L1771.23 1210.27 L1770.65 1210.27 L1770.06 1210.27 L1769.47 1210.27 L1768.89 1210.27 L1768.3 1210.27 L1767.71 1210.27 L1767.13 1210.27 L1766.54 1210.27 L1765.95 1210.27 L1765.37 1210.27 L1764.78 1210.27 L1764.19 1210.27 L1763.61 1210.27 L1763.02 1210.27 L1762.44 1210.27 L1761.85 1210.27 L1761.26 1210.27 L1760.68 1210.27 L1760.09 1210.27 L1759.5 1210.27 L1758.92 1210.27 L1758.33 1210.27 L1757.74 1210.27 L1757.16 1210.27 L1756.57 1210.27 L1755.99 1210.27 L1755.4 1210.27 L1754.81 1210.27 L1754.23 1210.27 L1753.64 1210.27 L1753.05 1210.27 L1752.47 1210.27 L1751.88 1210.27 L1751.29 1210.27 L1750.71 1210.27 L1750.12 1210.27 L1749.53 1210.27 L1748.95 1210.27 L1748.36 1210.27 L1747.78 1210.27 L1747.19 1210.27 L1746.6 1210.27 L1746.02 1210.27 L1745.43 1210.27 L1744.84 1210.27 L1744.26 1210.27 L1743.67 1210.27 L1743.08 1210.27 L1742.5 1210.27 L1741.91 1210.27 L1741.32 1210.27 L1740.74 1210.27 L1740.15 1210.27 L1739.57 1210.27 L1738.98 1210.27 L1738.39 1210.27 L1737.81 1210.27 L1737.22 1210.27 L1736.63 1210.27 L1736.05 1210.27 L1735.46 1210.27 L1734.87 1210.27 L1734.29 1210.27 L1733.7 1210.27 L1733.11 1210.27 L1732.53 1210.27 L1731.94 1210.27 L1731.36 1210.27 L1730.77 1210.27 L1730.18 1210.27 L1729.6 1210.27 L1729.01 1210.27 L1728.42 1210.27 L1727.84 1210.27 L1727.25 1210.27 L1726.66 1210.27 L1726.08 1210.27 L1725.49 1210.27 L1724.91 1210.27 L1724.32 1210.27 L1723.73 1210.27 L1723.15 1210.27 L1722.56 1210.27 L1721.97 1210.27 L1721.39 1210.27 L1720.8 1210.27 L1720.21 1210.27 L1719.63 1210.27 L1719.04 1210.27 L1718.45 1210.27 L1717.87 1210.27 L1717.28 1210.27 L1716.7 1210.27 L1716.11 1210.27 L1715.52 1210.27 L1714.94 1210.27 L1714.35 1210.27 L1713.76 1210.27 L1713.18 1210.27 L1712.59 1210.27 L1712 1210.27 L1711.42 1210.27 L1710.83 1210.27 L1710.24 1210.27 L1709.66 1210.27 L1709.07 1210.27 L1708.49 1210.27 L1707.9 1210.27 L1707.31 1210.27 L1706.73 1210.27 L1706.14 1210.27 L1705.55 1210.27 L1704.97 1210.27 L1704.38 1210.27 L1703.79 1210.27 L1703.21 1210.27 L1702.62 1210.27 L1702.04 1210.27 L1701.45 1210.27 L1700.86 1210.27 L1700.28 1210.27 L1699.69 1210.27 L1699.1 1210.27 L1698.52 1210.27 L1697.93 1210.27 L1697.34 1210.27 L1696.76 1210.27 L1696.17 1210.27 L1695.58 1210.27 L1695 1210.27 L1694.41 1210.27 L1693.83 1210.27 L1693.24 1210.27 L1692.65 1210.27 L1692.07 1210.27 L1691.48 1210.27 L1690.89 1210.27 L1690.31 1210.27 L1689.72 1210.27 L1689.13 1210.27 L1688.55 1210.27 L1687.96 1210.27 L1687.37 1210.27 L1686.79 1210.27 L1686.2 1210.27 L1685.62 1210.27 L1685.03 1210.27 L1684.44 1210.27 L1683.86 1210.27 L1683.27 1210.27 L1682.68 1210.27 L1682.1 1210.27 L1681.51 1210.27 L1680.92 1210.27 L1680.34 1210.27 L1679.75 1210.27 L1679.17 1210.27 L1678.58 1210.27 L1677.99 1210.27 L1677.41 1210.27 L1676.82 1210.27 L1676.23 1210.27 L1675.65 1210.27 L1675.06 1210.27 L1674.47 1210.27 L1673.89 1210.27 L1673.3 1210.27 L1672.71 1210.27 L1672.13 1210.27 L1671.54 1210.27 L1670.96 1210.27 L1670.37 1210.27 L1669.78 1210.27 L1669.2 1210.27 L1668.61 1210.27 L1668.02 1210.27 L1667.44 1210.27 L1666.85 1210.27 L1666.26 1210.27 L1665.68 1210.27 L1665.09 1210.27 L1664.5 1210.27 L1663.92 1210.27 L1663.33 1210.27 L1662.75 1210.27 L1662.16 1210.27 L1661.57 1210.27 L1660.99 1210.27 L1660.4 1210.27 L1659.81 1210.27 L1659.23 1210.27 L1658.64 1210.27 L1658.05 1210.27 L1657.47 1210.27 L1656.88 1210.27 L1656.29 1210.27 L1655.71 1210.27 L1655.12 1210.27 L1654.54 1210.27 L1653.95 1210.27 L1653.36 1210.27 L1652.78 1210.27 L1652.19 1210.27 L1651.6 1210.27 L1651.02 1210.27 L1650.43 1210.27 L1649.84 1210.27 L1649.26 1210.27 L1648.67 1210.27 L1648.09 1210.27 L1647.5 1210.27 L1646.91 1210.27 L1646.33 1210.27 L1645.74 1210.27 L1645.15 1210.27 L1644.57 1210.27 L1643.98 1210.27 L1643.39 1210.27 L1642.81 1210.27 L1642.22 1210.27 L1641.63 1210.27 L1641.05 1210.27 L1640.46 1210.27 L1639.88 1210.27 L1639.29 1210.27 L1638.7 1210.27 L1638.12 1210.27 L1637.53 1210.27 L1636.94 1210.27 L1636.36 1210.27 L1635.77 1210.27 L1635.18 1210.27 L1634.6 1210.27 L1634.01 1210.27 L1633.42 1210.27 L1632.84 1210.27 L1632.25 1210.27 L1631.67 1210.27 L1631.08 1210.27 L1630.49 1210.27 L1629.91 1210.27 L1629.32 1210.27 L1628.73 1210.27 L1628.15 1210.27 L1627.56 1210.27 L1626.97 1210.27 L1626.39 1210.27 L1625.8 1210.27 L1625.22 1210.27 L1624.63 1210.27 L1624.04 1210.27 L1623.46 1210.27 L1622.87 1210.27 L1622.28 1210.27 L1621.7 1210.27 L1621.11 1210.27 L1620.52 1210.27 L1619.94 1210.27 L1619.35 1210.27 L1618.76 1210.27 L1618.18 1210.27 L1617.59 1210.27 L1617.01 1210.27 L1616.42 1210.27 L1615.83 1210.27 L1615.25 1210.27 L1614.66 1210.27 L1614.07 1210.27 L1613.49 1210.27 L1612.9 1210.27 L1612.31 1210.27 L1611.73 1210.27 L1611.14 1210.27 L1610.55 1210.27 L1609.97 1210.27 L1609.38 1210.27 L1608.8 1210.27 L1608.21 1210.27 L1607.62 1210.27 L1607.04 1210.27 L1606.45 1210.27 L1605.86 1210.27 L1605.28 1210.27 L1604.69 1210.27 L1604.1 1210.27 L1603.52 1210.27 L1602.93 1210.27 L1602.34 1210.27 L1601.76 1210.27 L1601.17 1210.27 L1600.59 1210.27 L1600 1210.27 L1599.41 1210.27 L1598.83 1210.27 L1598.24 1210.27 L1597.65 1210.27 L1597.07 1210.27 L1596.48 1210.27 L1595.89 1210.27 L1595.31 1210.27 L1594.72 1210.27 L1594.14 1210.27 L1593.55 1210.27 L1592.96 1210.27 L1592.38 1210.27 L1591.79 1210.27 L1591.2 1210.27 L1590.62 1210.27 L1590.03 1210.27 L1589.44 1210.27 L1588.86 1210.27 L1588.27 1210.27 L1587.68 1210.27 L1587.1 1210.27 L1586.51 1210.27 L1585.93 1210.27 L1585.34 1210.27 L1584.75 1210.27 L1584.17 1210.27 L1583.58 1210.27 L1582.99 1210.27 L1582.41 1210.27 L1581.82 1210.27 L1581.23 1210.27 L1580.65 1210.27 L1580.06 1210.27 L1579.47 1210.27 L1578.89 1210.27 L1578.3 1210.27 L1577.72 1210.27 L1577.13 1210.27 L1576.54 1210.27 L1575.96 1210.27 L1575.37 1210.27 L1574.78 1210.27 L1574.2 1210.27 L1573.61 1210.27 L1573.02 1210.27 L1572.44 1210.27 L1571.85 1210.27 L1571.27 1210.27 L1570.68 1210.27 L1570.09 1210.27 L1569.51 1210.27 L1568.92 1210.27 L1568.33 1210.27 L1567.75 1210.27 L1567.16 1210.27 L1566.57 1210.27 L1565.99 1210.27 L1565.4 1210.27 L1564.81 1210.27 L1564.23 1210.27 L1563.64 1210.27 L1563.06 1210.27 L1562.47 1210.27 L1561.88 1210.27 L1561.3 1210.27 L1560.71 1210.27 L1560.12 1210.27 L1559.54 1210.27 L1558.95 1210.27 L1558.36 1210.27 L1557.78 1210.27 L1557.19 1210.27 L1556.6 1210.27 L1556.02 1210.27 L1555.43 1210.27 L1554.85 1210.27 L1554.26 1210.27 L1553.67 1210.27 L1553.09 1210.27 L1552.5 1210.27 L1551.91 1210.27 L1551.33 1210.27 L1550.74 1210.27 L1550.15 1210.27 L1549.57 1210.27 L1548.98 1210.27 L1548.4 1210.27 L1547.81 1210.27 L1547.22 1210.27 L1546.64 1210.27 L1546.05 1210.27 L1545.46 1210.27 L1544.88 1210.27 L1544.29 1210.27 L1543.7 1210.27 L1543.12 1210.27 L1542.53 1210.27 L1541.94 1210.27 L1541.36 1210.27 L1540.77 1210.27 L1540.19 1210.27 L1539.6 1210.27 L1539.01 1210.27 L1538.43 1210.27 L1537.84 1210.27 L1537.25 1210.27 L1536.67 1210.27 L1536.08 1210.27 L1535.49 1210.27 L1534.91 1210.27 L1534.32 1210.27 L1533.73 1210.27 L1533.15 1210.27 L1532.56 1210.27 L1531.98 1210.27 L1531.39 1210.27 L1530.8 1210.27 L1530.22 1210.27 L1529.63 1210.27 L1529.04 1210.27 L1528.46 1210.27 L1527.87 1210.27 L1527.28 1210.27 L1526.7 1210.27 L1526.11 1210.27 L1525.52 1210.27 L1524.94 1210.27 L1524.35 1210.27 L1523.77 1210.27 L1523.18 1210.27 L1522.59 1210.27 L1522.01 1210.27 L1521.42 1210.27 L1520.83 1210.27 L1520.25 1210.27 L1519.66 1210.27 L1519.07 1210.27 L1518.49 1210.27 L1517.9 1210.27 L1517.32 1210.27 L1516.73 1210.27 L1516.14 1210.27 L1515.56 1210.27 L1514.97 1210.27 L1514.38 1210.27 L1513.8 1210.27 L1513.21 1210.27 L1512.62 1210.27 L1512.04 1210.27 L1511.45 1210.27 L1510.86 1210.27 L1510.28 1210.27 L1509.69 1210.27 L1509.11 1210.27 L1508.52 1210.27 L1507.93 1210.27 L1507.35 1210.27 L1506.76 1210.27 L1506.17 1210.27 L1505.59 1210.27 L1505 1210.27 L1504.41 1210.27 L1503.83 1210.27 L1503.24 1210.27 L1502.65 1210.27 L1502.07 1210.27 L1501.48 1210.27 L1500.9 1210.27 L1500.31 1210.27 L1499.72 1210.27 L1499.14 1210.27 L1498.55 1210.27 L1497.96 1210.27 L1497.38 1210.27 L1496.79 1210.27 L1496.2 1210.27 L1495.62 1210.27 L1495.03 1210.27 L1494.45 1210.27 L1493.86 1210.27 L1493.27 1210.27 L1492.69 1210.27 L1492.1 1210.27 L1491.51 1210.27 L1490.93 1210.27 L1490.34 1210.27 L1489.75 1210.27 L1489.17 1210.27 L1488.58 1210.27 L1487.99 1210.27 L1487.41 1210.27 L1486.82 1210.27 L1486.24 1210.27 L1485.65 1210.27 L1485.06 1210.27 L1484.48 1210.27 L1483.89 1210.27 L1483.3 1210.27 L1482.72 1210.27 L1482.13 1210.27 L1481.54 1210.27 L1480.96 1210.27 L1480.37 1210.27 L1479.78 1210.27 L1479.2 1210.27 L1478.61 1210.27 L1478.03 1210.27 L1477.44 1210.27 L1476.85 1210.27 L1476.27 1210.27 L1475.68 1210.27 L1475.09 1210.27 L1474.51 1210.27 L1473.92 1210.27 L1473.33 1210.27 L1472.75 1210.27 L1472.16 1210.27 L1471.57 1210.27 L1470.99 1210.27 L1470.4 1210.27 L1469.82 1210.27 L1469.23 1210.27 L1468.64 1210.27 L1468.06 1210.27 L1467.47 1210.27 L1466.88 1210.27 L1466.3 1210.27 L1465.71 1210.27 L1465.12 1210.27 L1464.54 1210.27 L1463.95 1210.27 L1463.37 1210.27 L1462.78 1210.27 L1462.19 1210.27 L1461.61 1210.27 L1461.02 1210.27 L1460.43 1210.27 L1459.85 1210.27 L1459.26 1210.27 L1458.67 1210.27 L1458.09 1210.27 L1457.5 1210.27 L1456.91 1210.27 L1456.33 1210.27 L1455.74 1210.27 L1455.16 1210.27 L1454.57 1210.27 L1453.98 1210.27 L1453.4 1210.27 L1452.81 1210.27 L1452.22 1210.27 L1451.64 1210.27 L1451.05 1210.27 L1450.46 1210.27 L1449.88 1210.27 L1449.29 1210.27 L1448.7 1210.27 L1448.12 1210.27 L1447.53 1210.27 L1446.95 1210.27 L1446.36 1210.27 L1445.77 1210.27 L1445.19 1210.27 L1444.6 1210.27 L1444.01 1210.27 L1443.43 1210.27 L1442.84 1210.27 L1442.25 1210.27 L1441.67 1210.27 L1441.08 1210.27 L1440.5 1210.27 L1439.91 1210.27 L1439.32 1210.27 L1438.74 1210.27 L1438.15 1210.27 L1437.56 1210.27 L1436.98 1210.27 L1436.39 1210.27 L1435.8 1210.27 L1435.22 1210.27 L1434.63 1210.27 L1434.04 1210.27 L1433.46 1210.27 L1432.87 1210.27 L1432.29 1210.27 L1431.7 1210.27 L1431.11 1210.27 L1430.53 1210.27 L1429.94 1210.27 L1429.35 1210.27 L1428.77 1210.27 L1428.18 1210.27 L1427.59 1210.27 L1427.01 1210.27 L1426.42 1210.27 L1425.83 1210.27 L1425.25 1210.27 L1424.66 1210.27 L1424.08 1210.27 L1423.49 1210.27 L1422.9 1210.27 L1422.32 1210.27 L1421.73 1210.27 L1421.14 1210.27 L1420.56 1210.27 L1419.97 1210.27 L1419.38 1210.27 L1418.8 1210.27 L1418.21 1210.27 L1417.63 1210.27 L1417.04 1210.27 L1416.45 1210.27 L1415.87 1210.27 L1415.28 1210.27 L1414.69 1210.27 L1414.11 1210.27 L1413.52 1210.27 L1412.93 1210.27 L1412.35 1210.27 L1411.76 1210.27 L1411.17 1210.27 L1410.59 1210.27 L1410 1210.27 L1409.42 1210.27 L1408.83 1210.27 L1408.24 1210.27 L1407.66 1210.27 L1407.07 1210.27 L1406.48 1210.27 L1405.9 1210.27 L1405.31 1210.27 L1404.72 1210.27 L1404.14 1210.27 L1403.55 1210.27 L1402.96 1210.27 L1402.38 1210.27 L1401.79 1210.27 L1401.21 1210.27 L1400.62 1210.27 L1400.03 1210.27 L1399.45 1210.27 L1398.86 1210.27 L1398.27 1210.27 L1397.69 1210.27 L1397.1 1210.27 L1396.51 1210.27 L1395.93 1210.27 L1395.34 1210.27 L1394.75 1210.27 L1394.17 1210.27 L1393.58 1210.27 L1393 1210.27 L1392.41 1210.27 L1391.82 1210.27 L1391.24 1210.27 L1390.65 1210.27 L1390.06 1210.27 L1389.48 1210.27 L1388.89 1210.27 L1388.3 1210.27 L1387.72 1210.27 L1387.13 1210.27 L1386.55 1210.27 L1385.96 1210.27 L1385.37 1210.27 L1384.79 1210.27 L1384.2 1210.27 L1383.61 1210.27 L1383.03 1210.27 L1382.44 1210.27 L1381.85 1210.27 L1381.27 1210.27 L1380.68 1210.27 L1380.09 1210.27 L1379.51 1210.27 L1378.92 1210.27 L1378.34 1210.27 L1377.75 1210.27 L1377.16 1210.27 L1376.58 1210.27 L1375.99 1210.27 L1375.4 1210.27 L1374.82 1210.27 L1374.23 1210.27 L1373.64 1210.27 L1373.06 1210.27 L1372.47 1210.27 L1371.88 1210.27 L1371.3 1210.27 L1370.71 1210.27 L1370.13 1210.27 L1369.54 1210.27 L1368.95 1210.27 L1368.37 1210.27 L1367.78 1210.27 L1367.19 1210.27 L1366.61 1210.27 L1366.02 1210.27 L1365.43 1210.27 L1364.85 1210.27 L1364.26 1210.27 L1363.68 1210.27 L1363.09 1210.27 L1362.5 1210.27 L1361.92 1210.27 L1361.33 1210.27 L1360.74 1210.27 L1360.16 1210.27 L1359.57 1210.27 L1358.98 1210.27 L1358.4 1210.27 L1357.81 1210.27 L1357.22 1210.27 L1356.64 1210.27 L1356.05 1210.27 L1355.47 1210.27 L1354.88 1210.27 L1354.29 1210.27 L1353.71 1210.27 L1353.12 1210.27 L1352.53 1210.27 L1351.95 1210.27 L1351.36 1210.27 L1350.77 1210.27 L1350.19 1210.27 L1349.6 1210.27 L1349.01 1210.27 L1348.43 1210.27 L1347.84 1210.27 L1347.26 1210.27 L1346.67 1210.27 L1346.08 1210.27 L1345.5 1210.27 L1344.91 1210.27 L1344.32 1210.27 L1343.74 1210.27 L1343.15 1210.27 L1342.56 1210.27 L1341.98 1210.27 L1341.39 1210.27 L1340.8 1210.27 L1340.22 1210.27 L1339.63 1210.27 L1339.05 1210.27 L1338.46 1210.27 L1337.87 1210.27 L1337.29 1210.27 L1336.7 1210.27 L1336.11 1210.27 L1335.53 1210.27 L1334.94 1210.27 L1334.35 1210.27 L1333.77 1210.27 L1333.18 1210.27 L1332.6 1210.27 L1332.01 1210.27 L1331.42 1210.27 L1330.84 1210.27 L1330.25 1210.27 L1329.66 1210.27 L1329.08 1210.27 L1328.49 1210.27 L1327.9 1210.27 L1327.32 1210.27 L1326.73 1210.27 L1326.14 1210.27 L1325.56 1210.27 L1324.97 1210.27 L1324.39 1210.27 L1323.8 1210.27 L1323.21 1210.27 L1322.63 1210.27 L1322.04 1210.27 L1321.45 1210.27 L1320.87 1210.27 L1320.28 1210.27 L1319.69 1210.27 L1319.11 1210.27 L1318.52 1210.27 L1317.93 1210.27 L1317.35 1210.27 L1316.76 1210.27 L1316.18 1210.27 L1315.59 1210.27 L1315 1210.27 L1314.42 1210.27 L1313.83 1210.27 L1313.24 1210.27 L1312.66 1210.27 L1312.07 1210.27 L1311.48 1210.27 L1310.9 1210.27 L1310.31 1210.27 L1309.73 1210.27 L1309.14 1210.27 L1308.55 1210.27 L1307.97 1210.27 L1307.38 1210.27 L1306.79 1210.27 L1306.21 1210.27 L1305.62 1210.27 L1305.03 1210.27 L1304.45 1210.27 L1303.86 1210.27 L1303.27 1210.27 L1302.69 1210.27 L1302.1 1210.27 L1301.52 1210.27 L1300.93 1210.27 L1300.34 1210.27 L1299.76 1210.27 L1299.17 1210.27 L1298.58 1210.27 L1298 1210.27 L1297.41 1210.27 L1296.82 1210.27 L1296.24 1210.27 L1295.65 1210.27 L1295.06 1210.27 L1294.48 1210.27 L1293.89 1210.27 L1293.31 1210.27 L1292.72 1210.27 L1292.13 1210.27 L1291.55 1210.27 L1290.96 1210.27 L1290.37 1210.27 L1289.79 1210.27 L1289.2 1210.27 L1288.61 1210.27 L1288.03 1210.27 L1287.44 1210.27 L1286.86 1210.27 L1286.27 1210.27 L1285.68 1210.27 L1285.1 1210.27 L1284.51 1210.27 L1283.92 1210.27 L1283.34 1210.27 L1282.75 1210.27 L1282.16 1210.27 L1281.58 1210.27 L1280.99 1210.27 L1280.4 1210.27 L1279.82 1210.27 L1279.23 1210.27 L1278.65 1210.27 L1278.06 1210.27 L1277.47 1210.27 L1276.89 1210.27 L1276.3 1210.27 L1275.71 1210.27 L1275.13 1210.27 L1274.54 1210.27 L1273.95 1210.27 L1273.37 1210.27 L1272.78 1210.27 L1272.19 1210.27 L1271.61 1210.27 L1271.02 1210.27 L1270.44 1210.27 L1269.85 1210.27 L1269.26 1210.27 L1268.68 1210.27 L1268.09 1210.27 L1267.5 1210.27 L1266.92 1210.27 L1266.33 1210.27 L1265.74 1210.27 L1265.16 1210.27 L1264.57 1210.27 L1263.98 1210.27 L1263.4 1210.27 L1262.81 1210.27 L1262.23 1210.27 L1261.64 1210.27 L1261.05 1210.27 L1260.47 1210.27 L1259.88 1210.27 L1259.29 1210.27 L1258.71 1210.27 L1258.12 1210.27 L1257.53 1210.27 L1256.95 1210.27 L1256.36 1210.27 L1255.78 1210.27 L1255.19 1210.27 L1254.6 1210.27 L1254.02 1210.27 L1253.43 1210.27 L1252.84 1210.27 L1252.26 1210.27 L1251.67 1210.27 L1251.08 1210.27 L1250.5 1210.27 L1249.91 1210.27 L1249.32 1210.27 L1248.74 1210.27 L1248.15 1210.27 L1247.57 1210.27 L1246.98 1210.27 L1246.39 1210.27 L1245.81 1210.27 L1245.22 1210.27 L1244.63 1210.27 L1244.05 1210.27 L1243.46 1210.27 L1242.87 1210.27 L1242.29 1210.27 L1241.7 1210.27 L1241.11 1210.27 L1240.53 1210.27 L1239.94 1210.27 L1239.36 1210.27 L1238.77 1210.27 L1238.18 1210.27 L1237.6 1210.27 L1237.01 1210.27 L1236.42 1210.27 L1235.84 1210.27 L1235.25 1210.27 L1234.66 1210.27 L1234.08 1210.27 L1233.49 1210.27 L1232.91 1210.27 L1232.32 1210.27 L1231.73 1210.27 L1231.15 1210.27 L1230.56 1210.27 L1229.97 1210.27 L1229.39 1210.27 L1228.8 1210.27 L1228.21 1210.27 L1227.63 1210.27 L1227.04 1210.27 L1226.45 1210.27 L1225.87 1210.27 L1225.28 1210.27 L1224.7 1210.27 L1224.11 1210.27 L1223.52 1210.27 L1222.94 1210.27 L1222.35 1210.27 L1221.76 1210.27 L1221.18 1210.27 L1220.59 1210.27 L1220 1210.27 L1219.42 1210.27 L1218.83 1210.27 L1218.24 1210.27 L1217.66 1210.27 L1217.07 1210.27 L1216.49 1210.27 L1215.9 1210.27 L1215.31 1210.27 L1214.73 1210.27 L1214.14 1210.27 L1213.55 1210.27 L1212.97 1210.27 L1212.38 1210.27 L1211.79 1210.27 L1211.21 1210.27 L1210.62 1210.27 L1210.03 1210.27 L1209.45 1210.27 L1208.86 1210.27 L1208.28 1210.27 L1207.69 1210.27 L1207.1 1210.27 L1206.52 1210.27 L1205.93 1210.27 L1205.34 1210.27 L1204.76 1210.27 L1204.17 1210.27 L1203.58 1210.27 L1203 1210.27 L1202.41 1210.27 L1201.83 1210.27 L1201.24 1210.27 L1200.65 1210.27 L1200.07 1210.27 L1199.48 1210.27 L1198.89 1210.27 L1198.31 1210.27 L1197.72 1210.27 L1197.13 1210.27 L1196.55 1210.27 L1195.96 1210.27 L1195.37 1210.27 L1194.79 1210.27 L1194.2 1210.27 L1193.62 1210.27 L1193.03 1210.27 L1192.44 1210.27 L1191.86 1210.27 L1191.27 1210.27 L1190.68 1210.27 L1190.1 1210.27 L1189.51 1210.27 L1188.92 1210.27 L1188.34 1210.27 L1187.75 1210.27 L1187.16 1210.27 L1186.58 1210.27 L1185.99 1210.27 L1185.41 1210.27 L1184.82 1210.27 L1184.23 1210.27 L1183.65 1210.27 L1183.06 1210.27 L1182.47 1210.27 L1181.89 1210.27 L1181.3 1210.27 L1180.71 1210.27 L1180.13 1210.27 L1179.54 1210.27 L1178.96 1210.27 L1178.37 1210.27 L1177.78 1210.27 L1177.2 1210.27 L1176.61 1210.27 L1176.02 1210.27 L1175.44 1210.27 L1174.85 1210.27 L1174.26 1210.27 L1173.68 1210.27 L1173.09 1210.27 L1172.5 1210.27 L1171.92 1210.27 L1171.33 1210.27 L1170.75 1210.27 L1170.16 1210.27 L1169.57 1210.27 L1168.99 1210.27 L1168.4 1210.27 L1167.81 1210.27 L1167.23 1210.27 L1166.64 1210.27 L1166.05 1210.27 L1165.47 1210.27 L1164.88 1210.27 L1164.29 1210.27 L1163.71 1210.27 L1163.12 1210.27 L1162.54 1210.27 L1161.95 1210.27 L1161.36 1210.27 L1160.78 1210.27 L1160.19 1210.27 L1159.6 1210.27 L1159.02 1210.27 L1158.43 1210.27 L1157.84 1210.27 L1157.26 1210.27 L1156.67 1210.27 L1156.09 1210.27 L1155.5 1210.27 L1154.91 1210.27 L1154.33 1210.27 L1153.74 1210.27 L1153.15 1210.27 L1152.57 1210.27 L1151.98 1210.27 L1151.39 1210.27 L1150.81 1210.27 L1150.22 1210.27 L1149.63 1210.27 L1149.05 1210.27 L1148.46 1210.27 L1147.88 1210.27 L1147.29 1210.27 L1146.7 1210.27 L1146.12 1210.27 L1145.53 1210.27 L1144.94 1210.27 L1144.36 1210.27 L1143.77 1210.27 L1143.18 1210.27 L1142.6 1210.27 L1142.01 1210.27 L1141.42 1210.27 L1140.84 1210.27 L1140.25 1210.27 L1139.67 1210.27 L1139.08 1210.27 L1138.49 1210.27 L1137.91 1210.27 L1137.32 1210.27 L1136.73 1210.27 L1136.15 1210.27 L1135.56 1210.27 L1134.97 1210.27 L1134.39 1210.27 L1133.8 1210.27 L1133.21 1210.27 L1132.63 1210.27 L1132.04 1210.27 L1131.46 1210.27 L1130.87 1210.27 L1130.28 1210.27 L1129.7 1210.27 L1129.11 1210.27 L1128.52 1210.27 L1127.94 1210.27 L1127.35 1210.27 L1126.76 1210.27 L1126.18 1210.27 L1125.59 1210.27 L1125.01 1210.27 L1124.42 1210.27 L1123.83 1210.27 L1123.25 1210.27 L1122.66 1210.27 L1122.07 1210.27 L1121.49 1210.27 L1120.9 1210.27 L1120.31 1210.27 L1119.73 1210.27 L1119.14 1210.27 L1118.55 1210.27 L1117.97 1210.27 L1117.38 1210.27 L1116.8 1210.27 L1116.21 1210.27 L1115.62 1210.27 L1115.04 1210.27 L1114.45 1210.27 L1113.86 1210.27 L1113.28 1210.27 L1112.69 1210.27 L1112.1 1210.27 L1111.52 1210.27 L1110.93 1210.27 L1110.34 1210.27 L1109.76 1210.27 L1109.17 1210.27 L1108.59 1210.27 L1108 1210.27 L1107.41 1210.27 L1106.83 1210.27 L1106.24 1210.27 L1105.65 1210.27 L1105.07 1210.27 L1104.48 1210.27 L1103.89 1210.27 L1103.31 1210.27 L1102.72 1210.27 L1102.14 1210.27 L1101.55 1210.27 L1100.96 1210.27 L1100.38 1210.27 L1099.79 1210.27 L1099.2 1210.27 L1098.62 1210.27 L1098.03 1210.27 L1097.44 1210.27 L1096.86 1210.27 L1096.27 1210.27 L1095.68 1210.27 L1095.1 1210.27 L1094.51 1210.27 L1093.93 1210.27 L1093.34 1210.27 L1092.75 1210.27 L1092.17 1210.27 L1091.58 1210.27 L1090.99 1210.27 L1090.41 1210.27 L1089.82 1210.27 L1089.23 1210.27 L1088.65 1210.27 L1088.06 1210.27 L1087.47 1210.27 L1086.89 1210.27 L1086.3 1210.27 L1085.72 1210.27 L1085.13 1210.27 L1084.54 1210.27 L1083.96 1210.27 L1083.37 1210.27 L1082.78 1210.27 L1082.2 1210.27 L1081.61 1210.27 L1081.02 1210.27 L1080.44 1210.27 L1079.85 1210.27 L1079.26 1210.27 L1078.68 1210.27 L1078.09 1210.27 L1077.51 1210.27 L1076.92 1210.27 L1076.33 1210.27 L1075.75 1210.27 L1075.16 1210.27 L1074.57 1210.27 L1073.99 1210.27 L1073.4 1210.27 L1072.81 1210.27 L1072.23 1210.27 L1071.64 1210.27 L1071.06 1210.27 L1070.47 1210.27 L1069.88 1210.27 L1069.3 1210.27 L1068.71 1210.27 L1068.12 1210.27 L1067.54 1210.27 L1066.95 1210.27 L1066.36 1210.27 L1065.78 1210.27 L1065.19 1210.27 L1064.6 1210.27 L1064.02 1210.27 L1063.43 1210.27 L1062.85 1210.27 L1062.26 1210.27 L1061.67 1210.27 L1061.09 1210.27 L1060.5 1210.27 L1059.91 1210.27 L1059.33 1210.27 L1058.74 1210.27 L1058.15 1210.27 L1057.57 1210.27 L1056.98 1210.27 L1056.39 1210.27 L1055.81 1210.27 L1055.22 1210.27 L1054.64 1210.27 L1054.05 1210.27 L1053.46 1210.27 L1052.88 1210.27 L1052.29 1210.27 L1051.7 1210.27 L1051.12 1210.27 L1050.53 1210.27 L1049.94 1210.27 L1049.36 1210.27 L1048.77 1210.27 L1048.19 1210.27 L1047.6 1210.27 L1047.01 1210.27 L1046.43 1210.27 L1045.84 1210.27 L1045.25 1210.27 L1044.67 1210.27 L1044.08 1210.27 L1043.49 1210.27 L1042.91 1210.27 L1042.32 1210.27 L1041.73 1210.27 L1041.15 1210.27 L1040.56 1210.27 L1039.98 1210.27 L1039.39 1210.27 L1038.8 1210.27 L1038.22 1210.27 L1037.63 1210.27 L1037.04 1210.27 L1036.46 1210.27 L1035.87 1210.27 L1035.28 1210.27 L1034.7 1210.27 L1034.11 1210.27 L1033.52 1210.27 L1032.94 1210.27 L1032.35 1210.27 L1031.77 1210.27 L1031.18 1210.27 L1030.59 1210.27 L1030.01 1210.27 L1029.42 1210.27 L1028.83 1210.27 L1028.25 1210.27 L1027.66 1210.27 L1027.07 1210.27 L1026.49 1210.27 L1025.9 1210.27 L1025.32 1210.27 L1024.73 1210.27 L1024.14 1210.27 L1023.56 1210.27 L1022.97 1210.27 L1022.38 1210.27 L1021.8 1210.27 L1021.21 1210.27 L1020.62 1210.27 L1020.04 1210.27 L1019.45 1210.27 L1018.86 1210.27 L1018.28 1210.27 L1017.69 1210.27 L1017.11 1210.27 L1016.52 1210.27 L1015.93 1210.27 L1015.35 1210.27 L1014.76 1210.27 L1014.17 1210.27 L1013.59 1210.27 L1013 1210.27 L1012.41 1210.27 L1011.83 1210.27 L1011.24 1210.27 L1010.65 1210.27 L1010.07 1210.27 L1009.48 1210.27 L1008.9 1210.27 L1008.31 1210.27 L1007.72 1210.27 L1007.14 1210.27 L1006.55 1210.27 L1005.96 1210.27 L1005.38 1210.27 L1004.79 1210.27 L1004.2 1210.27 L1003.62 1210.27 L1003.03 1210.27 L1002.44 1210.27 L1001.86 1210.27 L1001.27 1210.27 L1000.69 1210.27 L1000.1 1210.27 L999.513 1210.27 L998.926 1210.27 L998.34 1210.27 L997.754 1210.27 L997.167 1210.27 L996.581 1210.27 L995.994 1210.27 L995.408 1210.27 L994.822 1210.27 L994.235 1210.27 L993.649 1210.27 L993.062 1210.27 L992.476 1210.27 L991.889 1210.27 L991.303 1210.27 L990.717 1210.27 L990.13 1210.27 L989.544 1210.27 L988.957 1210.27 L988.371 1210.27 L987.785 1210.27 L987.198 1210.27 L986.612 1210.27 L986.025 1210.27  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.37 986.612,1210.37 987.198,1210.37 987.785,1210.37 988.371,1210.37 988.957,1210.37 989.544,1210.37 990.13,1210.37 990.717,1210.37 991.303,1210.37 991.889,1210.37 992.476,1210.37 993.062,1210.37 993.649,1210.37 994.235,1210.37 994.822,1210.37 995.408,1210.37 995.994,1210.37 996.581,1210.37 997.167,1210.37 997.754,1210.37 998.34,1210.37 998.926,1210.37 999.513,1210.37 1000.1,1210.37 1000.69,1210.37 1001.27,1210.37 1001.86,1210.37 1002.44,1210.37 1003.03,1210.37 1003.62,1210.37 1004.2,1210.37 1004.79,1210.37 1005.38,1210.37 1005.96,1210.37 1006.55,1210.37 1007.14,1210.37 1007.72,1210.37 1008.31,1210.37 1008.9,1210.37 1009.48,1210.37 1010.07,1210.37 1010.65,1210.37 1011.24,1210.37 1011.83,1210.37 1012.41,1210.37 1013,1210.37 1013.59,1210.37 1014.17,1210.37 1014.76,1210.37 1015.35,1210.37 1015.93,1210.37 1016.52,1210.37 1017.11,1210.37 1017.69,1210.37 1018.28,1210.37 1018.86,1210.37 1019.45,1210.37 1020.04,1210.37 1020.62,1210.37 1021.21,1210.37 1021.8,1210.37 1022.38,1210.37 1022.97,1210.37 1023.56,1210.37 1024.14,1210.37 1024.73,1210.37 1025.32,1210.37 1025.9,1210.37 1026.49,1210.37 1027.07,1210.37 1027.66,1210.37 1028.25,1210.37 1028.83,1210.37 1029.42,1210.37 1030.01,1210.37 1030.59,1210.37 1031.18,1210.37 1031.77,1210.37 1032.35,1210.37 1032.94,1210.37 1033.52,1210.37 1034.11,1210.37 1034.7,1210.37 1035.28,1210.37 1035.87,1210.37 1036.46,1210.37 1037.04,1210.37 1037.63,1210.37 1038.22,1210.37 1038.8,1210.37 1039.39,1210.37 1039.98,1210.37 1040.56,1210.37 1041.15,1210.37 1041.73,1210.37 1042.32,1210.37 1042.91,1210.37 1043.49,1210.37 1044.08,1210.37 1044.67,1210.37 1045.25,1210.37 1045.84,1210.37 1046.43,1210.37 1047.01,1210.37 1047.6,1210.37 1048.19,1210.37 1048.77,1210.37 1049.36,1210.37 1049.94,1210.37 1050.53,1210.37 1051.12,1210.37 1051.7,1210.37 1052.29,1210.37 1052.88,1210.37 1053.46,1210.37 1054.05,1210.37 1054.64,1210.37 1055.22,1210.37 1055.81,1210.37 1056.39,1210.37 1056.98,1210.37 1057.57,1210.37 1058.15,1210.37 1058.74,1210.37 1059.33,1210.37 1059.91,1210.37 1060.5,1210.37 1061.09,1210.37 1061.67,1210.37 1062.26,1210.37 1062.85,1210.37 1063.43,1210.37 1064.02,1210.37 1064.6,1210.37 1065.19,1210.37 1065.78,1210.37 1066.36,1210.37 1066.95,1210.37 1067.54,1210.37 1068.12,1210.37 1068.71,1210.37 1069.3,1210.37 1069.88,1210.37 1070.47,1210.37 1071.06,1210.37 1071.64,1210.37 1072.23,1210.37 1072.81,1210.37 1073.4,1210.37 1073.99,1210.37 1074.57,1210.37 1075.16,1210.37 1075.75,1210.37 1076.33,1210.37 1076.92,1210.37 1077.51,1210.37 1078.09,1210.37 1078.68,1210.37 1079.26,1210.37 1079.85,1210.37 1080.44,1210.37 1081.02,1210.37 1081.61,1210.37 1082.2,1210.37 1082.78,1210.37 1083.37,1210.37 1083.96,1210.37 1084.54,1210.37 1085.13,1210.37 1085.72,1210.37 1086.3,1210.37 1086.89,1210.37 1087.47,1210.37 1088.06,1210.37 1088.65,1210.37 1089.23,1210.37 1089.82,1210.37 1090.41,1210.37 1090.99,1210.37 1091.58,1210.37 1092.17,1210.37 1092.75,1210.37 1093.34,1210.37 1093.93,1210.37 1094.51,1210.37 1095.1,1210.37 1095.68,1210.37 1096.27,1210.37 1096.86,1210.37 1097.44,1210.37 1098.03,1210.37 1098.62,1210.37 1099.2,1210.37 1099.79,1210.37 1100.38,1210.37 1100.96,1210.37 1101.55,1210.37 1102.14,1210.37 1102.72,1210.37 1103.31,1210.37 1103.89,1210.37 1104.48,1210.37 1105.07,1210.37 1105.65,1210.37 1106.24,1210.37 1106.83,1210.37 1107.41,1210.37 1108,1210.37 1108.59,1210.37 1109.17,1210.37 1109.76,1210.37 1110.34,1210.37 1110.93,1210.37 1111.52,1210.37 1112.1,1210.37 1112.69,1210.37 1113.28,1210.37 1113.86,1210.37 1114.45,1210.37 1115.04,1210.37 1115.62,1210.37 1116.21,1210.37 1116.8,1210.37 1117.38,1210.37 1117.97,1210.37 1118.55,1210.37 1119.14,1210.37 1119.73,1210.37 1120.31,1210.37 1120.9,1210.37 1121.49,1210.37 1122.07,1210.37 1122.66,1210.37 1123.25,1210.37 1123.83,1210.37 1124.42,1210.37 1125.01,1210.37 1125.59,1210.37 1126.18,1210.37 1126.76,1210.37 1127.35,1210.37 1127.94,1210.37 1128.52,1210.37 1129.11,1210.37 1129.7,1210.37 1130.28,1210.37 1130.87,1210.37 1131.46,1210.37 1132.04,1210.37 1132.63,1210.37 1133.21,1210.37 1133.8,1210.37 1134.39,1210.37 1134.97,1210.37 1135.56,1210.37 1136.15,1210.37 1136.73,1210.37 1137.32,1210.37 1137.91,1210.37 1138.49,1210.37 1139.08,1210.37 1139.67,1210.37 1140.25,1210.37 1140.84,1210.37 1141.42,1210.37 1142.01,1210.37 1142.6,1210.37 1143.18,1210.37 1143.77,1210.37 1144.36,1210.37 1144.94,1210.37 1145.53,1210.37 1146.12,1210.37 1146.7,1210.37 1147.29,1210.37 1147.88,1210.37 1148.46,1210.37 1149.05,1210.37 1149.63,1210.37 1150.22,1210.37 1150.81,1210.37 1151.39,1210.37 1151.98,1210.37 1152.57,1210.37 1153.15,1210.37 1153.74,1210.37 1154.33,1210.37 1154.91,1210.37 1155.5,1210.37 1156.09,1210.37 1156.67,1210.37 1157.26,1210.37 1157.84,1210.37 1158.43,1210.37 1159.02,1210.37 1159.6,1210.37 1160.19,1210.37 1160.78,1210.37 1161.36,1210.37 1161.95,1210.37 1162.54,1210.37 1163.12,1210.37 1163.71,1210.37 1164.29,1210.37 1164.88,1210.37 1165.47,1210.37 1166.05,1210.37 1166.64,1210.37 1167.23,1210.37 1167.81,1210.37 1168.4,1210.37 1168.99,1210.37 1169.57,1210.37 1170.16,1210.37 1170.75,1210.37 1171.33,1210.37 1171.92,1210.37 1172.5,1210.37 1173.09,1210.37 1173.68,1210.37 1174.26,1210.37 1174.85,1210.37 1175.44,1210.37 1176.02,1210.37 1176.61,1210.37 1177.2,1210.37 1177.78,1210.37 1178.37,1210.37 1178.96,1210.37 1179.54,1210.37 1180.13,1210.37 1180.71,1210.37 1181.3,1210.37 1181.89,1210.37 1182.47,1210.37 1183.06,1210.37 1183.65,1210.37 1184.23,1210.37 1184.82,1210.37 1185.41,1210.37 1185.99,1210.37 1186.58,1210.37 1187.16,1210.37 1187.75,1210.37 1188.34,1210.37 1188.92,1210.37 1189.51,1210.37 1190.1,1210.37 1190.68,1210.37 1191.27,1210.37 1191.86,1210.37 1192.44,1210.37 1193.03,1210.37 1193.62,1210.37 1194.2,1210.37 1194.79,1210.37 1195.37,1210.37 1195.96,1210.37 1196.55,1210.37 1197.13,1210.37 1197.72,1210.37 1198.31,1210.37 1198.89,1210.37 1199.48,1210.37 1200.07,1210.37 1200.65,1210.37 1201.24,1210.37 1201.83,1210.37 1202.41,1210.37 1203,1210.37 1203.58,1210.37 1204.17,1210.37 1204.76,1210.37 1205.34,1210.37 1205.93,1210.37 1206.52,1210.37 1207.1,1210.37 1207.69,1210.37 1208.28,1210.37 1208.86,1210.37 1209.45,1210.37 1210.03,1210.37 1210.62,1210.37 1211.21,1210.37 1211.79,1210.37 1212.38,1210.37 1212.97,1210.37 1213.55,1210.37 1214.14,1210.37 1214.73,1210.37 1215.31,1210.37 1215.9,1210.37 1216.49,1210.37 1217.07,1210.37 1217.66,1210.37 1218.24,1210.37 1218.83,1210.37 1219.42,1210.37 1220,1210.37 1220.59,1210.37 1221.18,1210.37 1221.76,1210.37 1222.35,1210.37 1222.94,1210.37 1223.52,1210.37 1224.11,1210.37 1224.7,1210.37 1225.28,1210.37 1225.87,1210.37 1226.45,1210.37 1227.04,1210.37 1227.63,1210.37 1228.21,1210.37 1228.8,1210.37 1229.39,1210.37 1229.97,1210.37 1230.56,1210.37 1231.15,1210.37 1231.73,1210.37 1232.32,1210.37 1232.91,1210.37 1233.49,1210.37 1234.08,1210.37 1234.66,1210.37 1235.25,1210.37 1235.84,1210.37 1236.42,1210.37 1237.01,1210.37 1237.6,1210.37 1238.18,1210.37 1238.77,1210.37 1239.36,1210.37 1239.94,1210.37 1240.53,1210.37 1241.11,1210.37 1241.7,1210.37 1242.29,1210.37 1242.87,1210.37 1243.46,1210.37 1244.05,1210.37 1244.63,1210.37 1245.22,1210.37 1245.81,1210.37 1246.39,1210.37 1246.98,1210.37 1247.57,1210.37 1248.15,1210.37 1248.74,1210.37 1249.32,1210.37 1249.91,1210.37 1250.5,1210.37 1251.08,1210.37 1251.67,1210.37 1252.26,1210.37 1252.84,1210.37 1253.43,1210.37 1254.02,1210.37 1254.6,1210.37 1255.19,1210.37 1255.78,1210.37 1256.36,1210.37 1256.95,1210.37 1257.53,1210.37 1258.12,1210.37 1258.71,1210.37 1259.29,1210.37 1259.88,1210.37 1260.47,1210.37 1261.05,1210.37 1261.64,1210.37 1262.23,1210.37 1262.81,1210.37 1263.4,1210.37 1263.98,1210.37 1264.57,1210.37 1265.16,1210.37 1265.74,1210.37 1266.33,1210.37 1266.92,1210.37 1267.5,1210.37 1268.09,1210.37 1268.68,1210.37 1269.26,1210.37 1269.85,1210.37 1270.44,1210.37 1271.02,1210.37 1271.61,1210.37 1272.19,1210.37 1272.78,1210.37 1273.37,1210.37 1273.95,1210.37 1274.54,1210.37 1275.13,1210.37 1275.71,1210.37 1276.3,1210.37 1276.89,1210.37 1277.47,1210.37 1278.06,1210.37 1278.65,1210.37 1279.23,1210.37 1279.82,1210.37 1280.4,1210.37 1280.99,1210.37 1281.58,1210.37 1282.16,1210.37 1282.75,1210.37 1283.34,1210.37 1283.92,1210.37 1284.51,1210.37 1285.1,1210.37 1285.68,1210.37 1286.27,1210.37 1286.86,1210.37 1287.44,1210.37 1288.03,1210.37 1288.61,1210.37 1289.2,1210.37 1289.79,1210.37 1290.37,1210.37 1290.96,1210.37 1291.55,1210.37 1292.13,1210.37 1292.72,1210.37 1293.31,1210.37 1293.89,1210.37 1294.48,1210.37 1295.06,1210.37 1295.65,1210.37 1296.24,1210.37 1296.82,1210.37 1297.41,1210.37 1298,1210.37 1298.58,1210.37 1299.17,1210.37 1299.76,1210.37 1300.34,1210.37 1300.93,1210.37 1301.52,1210.37 1302.1,1210.37 1302.69,1210.37 1303.27,1210.37 1303.86,1210.37 1304.45,1210.37 1305.03,1210.37 1305.62,1210.37 1306.21,1210.37 1306.79,1210.37 1307.38,1210.37 1307.97,1210.37 1308.55,1210.37 1309.14,1210.37 1309.73,1210.37 1310.31,1210.37 1310.9,1210.37 1311.48,1210.37 1312.07,1210.37 1312.66,1210.37 1313.24,1210.37 1313.83,1210.37 1314.42,1210.37 1315,1210.37 1315.59,1210.37 1316.18,1210.37 1316.76,1210.37 1317.35,1210.37 1317.93,1210.37 1318.52,1210.37 1319.11,1210.37 1319.69,1210.37 1320.28,1210.37 1320.87,1210.37 1321.45,1210.37 1322.04,1210.37 1322.63,1210.37 1323.21,1210.37 1323.8,1210.37 1324.39,1210.37 1324.97,1210.37 1325.56,1210.37 1326.14,1210.37 1326.73,1210.37 1327.32,1210.37 1327.9,1210.37 1328.49,1210.37 1329.08,1210.37 1329.66,1210.37 1330.25,1210.37 1330.84,1210.37 1331.42,1210.37 1332.01,1210.37 1332.6,1210.37 1333.18,1210.37 1333.77,1210.37 1334.35,1210.37 1334.94,1210.37 1335.53,1210.37 1336.11,1210.37 1336.7,1210.37 1337.29,1210.37 1337.87,1210.37 1338.46,1210.37 1339.05,1210.37 1339.63,1210.37 1340.22,1210.37 1340.8,1210.37 1341.39,1210.37 1341.98,1210.37 1342.56,1210.37 1343.15,1210.37 1343.74,1210.37 1344.32,1210.37 1344.91,1210.37 1345.5,1210.37 1346.08,1210.37 1346.67,1210.37 1347.26,1210.37 1347.84,1210.37 1348.43,1210.37 1349.01,1210.37 1349.6,1210.37 1350.19,1210.37 1350.77,1210.37 1351.36,1210.37 1351.95,1210.37 1352.53,1210.37 1353.12,1210.37 1353.71,1210.37 1354.29,1210.37 1354.88,1210.37 1355.47,1210.37 1356.05,1210.37 1356.64,1210.37 1357.22,1210.37 1357.81,1210.37 1358.4,1210.37 1358.98,1210.37 1359.57,1210.37 1360.16,1210.37 1360.74,1210.37 1361.33,1210.37 1361.92,1210.37 1362.5,1210.37 1363.09,1210.37 1363.68,1210.37 1364.26,1210.37 1364.85,1210.37 1365.43,1210.37 1366.02,1210.37 1366.61,1210.37 1367.19,1210.37 1367.78,1210.37 1368.37,1210.37 1368.95,1210.37 1369.54,1210.37 1370.13,1210.37 1370.71,1210.37 1371.3,1210.37 1371.88,1210.37 1372.47,1210.37 1373.06,1210.37 1373.64,1210.37 1374.23,1210.37 1374.82,1210.37 1375.4,1210.37 1375.99,1210.37 1376.58,1210.37 1377.16,1210.37 1377.75,1210.37 1378.34,1210.37 1378.92,1210.37 1379.51,1210.37 1380.09,1210.37 1380.68,1210.37 1381.27,1210.37 1381.85,1210.37 1382.44,1210.37 1383.03,1210.37 1383.61,1210.37 1384.2,1210.37 1384.79,1210.37 1385.37,1210.37 1385.96,1210.37 1386.55,1210.37 1387.13,1210.37 1387.72,1210.37 1388.3,1210.37 1388.89,1210.37 1389.48,1210.37 1390.06,1210.37 1390.65,1210.37 1391.24,1210.37 1391.82,1210.37 1392.41,1210.37 1393,1210.37 1393.58,1210.37 1394.17,1210.37 1394.75,1210.37 1395.34,1210.37 1395.93,1210.37 1396.51,1210.37 1397.1,1210.37 1397.69,1210.37 1398.27,1210.37 1398.86,1210.37 1399.45,1210.37 1400.03,1210.37 1400.62,1210.37 1401.21,1210.37 1401.79,1210.37 1402.38,1210.37 1402.96,1210.37 1403.55,1210.37 1404.14,1210.37 1404.72,1210.37 1405.31,1210.37 1405.9,1210.37 1406.48,1210.37 1407.07,1210.37 1407.66,1210.37 1408.24,1210.37 1408.83,1210.37 1409.42,1210.37 1410,1210.37 1410.59,1210.37 1411.17,1210.37 1411.76,1210.37 1412.35,1210.37 1412.93,1210.37 1413.52,1210.37 1414.11,1210.37 1414.69,1210.37 1415.28,1210.37 1415.87,1210.37 1416.45,1210.37 1417.04,1210.37 1417.63,1210.37 1418.21,1210.37 1418.8,1210.37 1419.38,1210.37 1419.97,1210.37 1420.56,1210.37 1421.14,1210.37 1421.73,1210.37 1422.32,1210.37 1422.9,1210.37 1423.49,1210.37 1424.08,1210.37 1424.66,1210.37 1425.25,1210.37 1425.83,1210.37 1426.42,1210.37 1427.01,1210.37 1427.59,1210.37 1428.18,1210.37 1428.77,1210.37 1429.35,1210.37 1429.94,1210.37 1430.53,1210.37 1431.11,1210.37 1431.7,1210.37 1432.29,1210.37 1432.87,1210.37 1433.46,1210.37 1434.04,1210.37 1434.63,1210.37 1435.22,1210.37 1435.8,1210.37 1436.39,1210.37 1436.98,1210.37 1437.56,1210.37 1438.15,1210.37 1438.74,1210.37 1439.32,1210.37 1439.91,1210.37 1440.5,1210.37 1441.08,1210.37 1441.67,1210.37 1442.25,1210.37 1442.84,1210.37 1443.43,1210.37 1444.01,1210.37 1444.6,1210.37 1445.19,1210.37 1445.77,1210.37 1446.36,1210.37 1446.95,1210.37 1447.53,1210.37 1448.12,1210.37 1448.7,1210.37 1449.29,1210.37 1449.88,1210.37 1450.46,1210.37 1451.05,1210.37 1451.64,1210.37 1452.22,1210.37 1452.81,1210.37 1453.4,1210.37 1453.98,1210.37 1454.57,1210.37 1455.16,1210.37 1455.74,1210.37 1456.33,1210.37 1456.91,1210.37 1457.5,1210.37 1458.09,1210.37 1458.67,1210.37 1459.26,1210.37 1459.85,1210.37 1460.43,1210.37 1461.02,1210.37 1461.61,1210.37 1462.19,1210.37 1462.78,1210.37 1463.37,1210.37 1463.95,1210.37 1464.54,1210.37 1465.12,1210.37 1465.71,1210.37 1466.3,1210.37 1466.88,1210.37 1467.47,1210.37 1468.06,1210.37 1468.64,1210.37 1469.23,1210.37 1469.82,1210.37 1470.4,1210.37 1470.99,1210.37 1471.57,1210.37 1472.16,1210.37 1472.75,1210.37 1473.33,1210.37 1473.92,1210.37 1474.51,1210.37 1475.09,1210.37 1475.68,1210.37 1476.27,1210.37 1476.85,1210.37 1477.44,1210.37 1478.03,1210.37 1478.61,1210.37 1479.2,1210.37 1479.78,1210.37 1480.37,1210.37 1480.96,1210.37 1481.54,1210.37 1482.13,1210.37 1482.72,1210.37 1483.3,1210.37 1483.89,1210.37 1484.48,1210.37 1485.06,1210.37 1485.65,1210.37 1486.24,1210.37 1486.82,1210.37 1487.41,1210.37 1487.99,1210.37 1488.58,1210.37 1489.17,1210.37 1489.75,1210.37 1490.34,1210.37 1490.93,1210.37 1491.51,1210.37 1492.1,1210.37 1492.69,1210.37 1493.27,1210.37 1493.86,1210.37 1494.45,1210.37 1495.03,1210.37 1495.62,1210.37 1496.2,1210.37 1496.79,1210.37 1497.38,1210.37 1497.96,1210.37 1498.55,1210.37 1499.14,1210.37 1499.72,1210.37 1500.31,1210.37 1500.9,1210.37 1501.48,1210.37 1502.07,1210.37 1502.65,1210.37 1503.24,1210.37 1503.83,1210.37 1504.41,1210.37 1505,1210.37 1505.59,1210.37 1506.17,1210.37 1506.76,1210.37 1507.35,1210.37 1507.93,1210.37 1508.52,1210.37 1509.11,1210.37 1509.69,1210.37 1510.28,1210.37 1510.86,1210.37 1511.45,1210.37 1512.04,1210.37 1512.62,1210.37 1513.21,1210.37 1513.8,1210.37 1514.38,1210.37 1514.97,1210.37 1515.56,1210.37 1516.14,1210.37 1516.73,1210.37 1517.32,1210.37 1517.9,1210.37 1518.49,1210.37 1519.07,1210.37 1519.66,1210.37 1520.25,1210.37 1520.83,1210.37 1521.42,1210.37 1522.01,1210.37 1522.59,1210.37 1523.18,1210.37 1523.77,1210.37 1524.35,1210.37 1524.94,1210.37 1525.52,1210.37 1526.11,1210.37 1526.7,1210.37 1527.28,1210.37 1527.87,1210.37 1528.46,1210.37 1529.04,1210.37 1529.63,1210.37 1530.22,1210.37 1530.8,1210.37 1531.39,1210.37 1531.98,1210.37 1532.56,1210.37 1533.15,1210.37 1533.73,1210.37 1534.32,1210.37 1534.91,1210.37 1535.49,1210.37 1536.08,1210.37 1536.67,1210.37 1537.25,1210.37 1537.84,1210.37 1538.43,1210.37 1539.01,1210.37 1539.6,1210.37 1540.19,1210.37 1540.77,1210.37 1541.36,1210.37 1541.94,1210.37 1542.53,1210.37 1543.12,1210.37 1543.7,1210.37 1544.29,1210.37 1544.88,1210.37 1545.46,1210.37 1546.05,1210.37 1546.64,1210.37 1547.22,1210.37 1547.81,1210.37 1548.4,1210.37 1548.98,1210.37 1549.57,1210.37 1550.15,1210.37 1550.74,1210.37 1551.33,1210.37 1551.91,1210.37 1552.5,1210.37 1553.09,1210.37 1553.67,1210.37 1554.26,1210.37 1554.85,1210.37 1555.43,1210.37 1556.02,1210.37 1556.6,1210.37 1557.19,1210.37 1557.78,1210.37 1558.36,1210.37 1558.95,1210.37 1559.54,1210.37 1560.12,1210.37 1560.71,1210.37 1561.3,1210.37 1561.88,1210.37 1562.47,1210.37 1563.06,1210.37 1563.64,1210.37 1564.23,1210.37 1564.81,1210.37 1565.4,1210.37 1565.99,1210.37 1566.57,1210.37 1567.16,1210.37 1567.75,1210.37 1568.33,1210.37 1568.92,1210.37 1569.51,1210.37 1570.09,1210.37 1570.68,1210.37 1571.27,1210.37 1571.85,1210.37 1572.44,1210.37 1573.02,1210.37 1573.61,1210.37 1574.2,1210.37 1574.78,1210.37 1575.37,1210.37 1575.96,1210.37 1576.54,1210.37 1577.13,1210.37 1577.72,1210.37 1578.3,1210.37 1578.89,1210.37 1579.47,1210.37 1580.06,1210.37 1580.65,1210.37 1581.23,1210.37 1581.82,1210.37 1582.41,1210.37 1582.99,1210.37 1583.58,1210.37 1584.17,1210.37 1584.75,1210.37 1585.34,1210.37 1585.93,1210.37 1586.51,1210.37 1587.1,1210.37 1587.68,1210.37 1588.27,1210.37 1588.86,1210.37 1589.44,1210.37 1590.03,1210.37 1590.62,1210.37 1591.2,1210.37 1591.79,1210.37 1592.38,1210.37 1592.96,1210.37 1593.55,1210.37 1594.14,1210.37 1594.72,1210.37 1595.31,1210.37 1595.89,1210.37 1596.48,1210.37 1597.07,1210.37 1597.65,1210.37 1598.24,1210.37 1598.83,1210.37 1599.41,1210.37 1600,1210.37 1600.59,1210.37 1601.17,1210.37 1601.76,1210.37 1602.34,1210.37 1602.93,1210.37 1603.52,1210.37 1604.1,1210.37 1604.69,1210.37 1605.28,1210.37 1605.86,1210.37 1606.45,1210.37 1607.04,1210.37 1607.62,1210.37 1608.21,1210.37 1608.8,1210.37 1609.38,1210.37 1609.97,1210.37 1610.55,1210.37 1611.14,1210.37 1611.73,1210.37 1612.31,1210.37 1612.9,1210.37 1613.49,1210.37 1614.07,1210.37 1614.66,1210.37 1615.25,1210.37 1615.83,1210.37 1616.42,1210.37 1617.01,1210.37 1617.59,1210.37 1618.18,1210.37 1618.76,1210.37 1619.35,1210.37 1619.94,1210.37 1620.52,1210.37 1621.11,1210.37 1621.7,1210.37 1622.28,1210.37 1622.87,1210.37 1623.46,1210.37 1624.04,1210.37 1624.63,1210.37 1625.22,1210.37 1625.8,1210.37 1626.39,1210.37 1626.97,1210.37 1627.56,1210.37 1628.15,1210.37 1628.73,1210.37 1629.32,1210.37 1629.91,1210.37 1630.49,1210.37 1631.08,1210.37 1631.67,1210.37 1632.25,1210.37 1632.84,1210.37 1633.42,1210.37 1634.01,1210.37 1634.6,1210.37 1635.18,1210.37 1635.77,1210.37 1636.36,1210.37 1636.94,1210.37 1637.53,1210.37 1638.12,1210.37 1638.7,1210.37 1639.29,1210.37 1639.88,1210.37 1640.46,1210.37 1641.05,1210.37 1641.63,1210.37 1642.22,1210.37 1642.81,1210.37 1643.39,1210.37 1643.98,1210.37 1644.57,1210.37 1645.15,1210.37 1645.74,1210.37 1646.33,1210.37 1646.91,1210.37 1647.5,1210.37 1648.09,1210.37 1648.67,1210.37 1649.26,1210.37 1649.84,1210.37 1650.43,1210.37 1651.02,1210.37 1651.6,1210.37 1652.19,1210.37 1652.78,1210.37 1653.36,1210.37 1653.95,1210.37 1654.54,1210.37 1655.12,1210.37 1655.71,1210.37 1656.29,1210.37 1656.88,1210.37 1657.47,1210.37 1658.05,1210.37 1658.64,1210.37 1659.23,1210.37 1659.81,1210.37 1660.4,1210.37 1660.99,1210.37 1661.57,1210.37 1662.16,1210.37 1662.75,1210.37 1663.33,1210.37 1663.92,1210.37 1664.5,1210.37 1665.09,1210.37 1665.68,1210.37 1666.26,1210.37 1666.85,1210.37 1667.44,1210.37 1668.02,1210.37 1668.61,1210.37 1669.2,1210.37 1669.78,1210.37 1670.37,1210.37 1670.96,1210.37 1671.54,1210.37 1672.13,1210.37 1672.71,1210.37 1673.3,1210.37 1673.89,1210.37 1674.47,1210.37 1675.06,1210.37 1675.65,1210.37 1676.23,1210.37 1676.82,1210.37 1677.41,1210.37 1677.99,1210.37 1678.58,1210.37 1679.17,1210.37 1679.75,1210.37 1680.34,1210.37 1680.92,1210.37 1681.51,1210.37 1682.1,1210.37 1682.68,1210.37 1683.27,1210.37 1683.86,1210.37 1684.44,1210.37 1685.03,1210.37 1685.62,1210.37 1686.2,1210.37 1686.79,1210.37 1687.37,1210.37 1687.96,1210.37 1688.55,1210.37 1689.13,1210.37 1689.72,1210.37 1690.31,1210.37 1690.89,1210.37 1691.48,1210.37 1692.07,1210.37 1692.65,1210.37 1693.24,1210.37 1693.83,1210.37 1694.41,1210.37 1695,1210.37 1695.58,1210.37 1696.17,1210.37 1696.76,1210.37 1697.34,1210.37 1697.93,1210.37 1698.52,1210.37 1699.1,1210.37 1699.69,1210.37 1700.28,1210.37 1700.86,1210.37 1701.45,1210.37 1702.04,1210.37 1702.62,1210.37 1703.21,1210.37 1703.79,1210.37 1704.38,1210.37 1704.97,1210.37 1705.55,1210.37 1706.14,1210.37 1706.73,1210.37 1707.31,1210.37 1707.9,1210.37 1708.49,1210.37 1709.07,1210.37 1709.66,1210.37 1710.24,1210.37 1710.83,1210.37 1711.42,1210.37 1712,1210.37 1712.59,1210.37 1713.18,1210.37 1713.76,1210.37 1714.35,1210.37 1714.94,1210.37 1715.52,1210.37 1716.11,1210.37 1716.7,1210.37 1717.28,1210.37 1717.87,1210.37 1718.45,1210.37 1719.04,1210.37 1719.63,1210.37 1720.21,1210.37 1720.8,1210.37 1721.39,1210.37 1721.97,1210.37 1722.56,1210.37 1723.15,1210.37 1723.73,1210.37 1724.32,1210.37 1724.91,1210.37 1725.49,1210.37 1726.08,1210.37 1726.66,1210.37 1727.25,1210.37 1727.84,1210.37 1728.42,1210.37 1729.01,1210.37 1729.6,1210.37 1730.18,1210.37 1730.77,1210.37 1731.36,1210.37 1731.94,1210.37 1732.53,1210.37 1733.11,1210.37 1733.7,1210.37 1734.29,1210.37 1734.87,1210.37 1735.46,1210.37 1736.05,1210.37 1736.63,1210.37 1737.22,1210.37 1737.81,1210.37 1738.39,1210.37 1738.98,1210.37 1739.57,1210.37 1740.15,1210.37 1740.74,1210.37 1741.32,1210.37 1741.91,1210.37 1742.5,1210.37 1743.08,1210.37 1743.67,1210.37 1744.26,1210.37 1744.84,1210.37 1745.43,1210.37 1746.02,1210.37 1746.6,1210.37 1747.19,1210.37 1747.78,1210.37 1748.36,1210.37 1748.95,1210.37 1749.53,1210.37 1750.12,1210.37 1750.71,1210.37 1751.29,1210.37 1751.88,1210.37 1752.47,1210.37 1753.05,1210.37 1753.64,1210.37 1754.23,1210.37 1754.81,1210.37 1755.4,1210.37 1755.99,1210.37 1756.57,1210.37 1757.16,1210.37 1757.74,1210.37 1758.33,1210.37 1758.92,1210.37 1759.5,1210.37 1760.09,1210.37 1760.68,1210.37 1761.26,1210.37 1761.85,1210.37 1762.44,1210.37 1763.02,1210.37 1763.61,1210.37 1764.19,1210.37 1764.78,1210.37 1765.37,1210.37 1765.95,1210.37 1766.54,1210.37 1767.13,1210.37 1767.71,1210.37 1768.3,1210.37 1768.89,1210.37 1769.47,1210.37 1770.06,1210.37 1770.65,1210.37 1771.23,1210.37 1771.82,1210.37 1772.4,1210.37 1772.99,1210.37 1773.58,1210.37 1774.16,1210.37 1774.75,1210.37 1775.34,1210.37 1775.92,1210.37 1776.51,1210.37 1777.1,1210.37 1777.68,1210.37 1778.27,1210.37 1778.86,1210.37 1779.44,1210.37 1780.03,1210.37 1780.61,1210.37 1781.2,1210.37 1781.79,1210.37 1782.37,1210.37 1782.96,1210.37 1783.55,1210.37 1784.13,1210.37 1784.72,1210.37 1785.31,1210.37 1785.89,1210.37 1786.48,1210.37 1787.06,1210.37 1787.65,1210.37 1788.24,1210.37 1788.82,1210.37 1789.41,1210.37 1790,1210.37 1790.58,1210.37 1791.17,1210.37 1791.76,1210.37 1792.34,1210.37 1792.93,1210.37 1793.52,1210.37 1794.1,1210.37 1794.69,1210.37 1795.27,1210.37 1795.86,1210.37 1796.45,1210.37 1797.03,1210.37 1797.62,1210.37 1798.21,1210.37 1798.79,1210.37 1799.38,1210.37 1799.97,1210.37 1800.55,1210.37 1801.14,1210.37 1801.73,1210.37 1802.31,1210.37 1802.9,1210.37 1803.48,1210.37 1804.07,1210.37 1804.66,1210.37 1805.24,1210.37 1805.83,1210.37 1806.42,1210.37 1807,1210.37 1807.59,1210.37 1808.18,1210.37 1808.76,1210.37 1809.35,1210.37 1809.94,1210.37 1810.52,1210.37 1811.11,1210.37 1811.69,1210.37 1812.28,1210.37 1812.87,1210.37 1813.45,1210.37 1814.04,1210.37 1814.63,1210.37 1815.21,1210.37 1815.8,1210.37 1816.39,1210.37 1816.97,1210.37 1817.56,1210.37 1818.14,1210.37 1818.73,1210.37 1819.32,1210.37 1819.9,1210.37 1820.49,1210.37 1821.08,1210.37 1821.66,1210.37 1822.25,1210.37 1822.84,1210.37 1823.42,1210.37 1824.01,1210.37 1824.6,1210.37 1825.18,1210.37 1825.77,1210.37 1826.35,1210.37 1826.94,1210.37 1827.53,1210.37 1828.11,1210.37 1828.7,1210.37 1829.29,1210.37 1829.87,1210.37 1830.46,1210.37 1831.05,1210.37 1831.63,1210.37 1832.22,1210.37 1832.81,1210.37 1833.39,1210.37 1833.98,1210.37 1834.56,1210.37 1835.15,1210.37 1835.74,1210.37 1836.32,1210.37 1836.91,1210.37 1837.5,1210.37 1838.08,1210.37 1838.67,1210.37 1839.26,1210.37 1839.84,1210.37 1840.43,1210.37 1841.01,1210.37 1841.6,1210.37 1842.19,1210.37 1842.77,1210.37 1843.36,1210.37 1843.95,1210.37 1844.53,1210.37 1845.12,1210.37 1845.71,1210.37 1846.29,1210.37 1846.88,1210.37 1847.47,1210.37 1848.05,1210.37 1848.64,1210.37 1849.22,1210.37 1849.81,1210.37 1850.4,1210.37 1850.98,1210.37 1851.57,1210.37 1852.16,1210.37 1852.74,1210.37 1853.33,1210.37 1853.92,1210.37 1854.5,1210.37 1855.09,1210.37 1855.68,1210.37 1856.26,1210.37 1856.85,1210.37 1857.43,1210.37 1858.02,1210.37 1858.61,1210.37 1859.19,1210.37 1859.78,1210.37 1860.37,1210.37 1860.95,1210.37 1861.54,1210.37 1862.13,1210.37 1862.71,1210.37 1863.3,1210.37 1863.88,1210.37 1864.47,1210.37 1865.06,1210.37 1865.64,1210.37 1866.23,1210.37 1866.82,1210.37 1867.4,1210.37 1867.99,1210.37 1868.58,1210.37 1869.16,1210.37 1869.75,1210.37 1870.34,1210.37 1870.92,1210.37 1871.51,1210.37 1872.09,1210.37 1872.68,1210.37 1873.27,1210.37 1873.85,1210.37 1874.44,1210.37 1875.03,1210.37 1875.61,1210.37 1876.2,1210.37 1876.79,1210.37 1877.37,1210.37 1877.96,1210.37 1878.55,1210.37 1879.13,1210.37 1879.72,1210.37 1880.3,1210.37 1880.89,1210.37 1881.48,1210.37 1882.06,1210.37 1882.65,1210.37 1883.24,1210.37 1883.82,1210.37 1884.41,1210.37 1885,1210.37 1885.58,1210.37 1886.17,1210.37 1886.76,1210.37 1887.34,1210.37 1887.93,1210.37 1888.51,1210.37 1889.1,1210.37 1889.69,1210.37 1890.27,1210.37 1890.86,1210.37 1891.45,1210.37 1892.03,1210.37 1892.62,1210.37 1893.21,1210.37 1893.79,1210.37 1894.38,1210.37 1894.96,1210.37 1895.55,1210.37 1896.14,1210.37 1896.72,1210.37 1897.31,1210.37 1897.9,1210.37 1898.48,1210.37 1899.07,1210.37 1899.66,1210.37 1900.24,1210.37 1900.83,1210.37 1901.42,1210.37 1902,1210.37 1902.59,1210.37 1903.17,1210.37 1903.76,1210.37 1904.35,1210.37 1904.93,1210.37 1905.52,1210.37 1906.11,1210.37 1906.69,1210.37 1907.28,1210.37 1907.87,1210.37 1908.45,1210.37 1909.04,1210.37 1909.63,1210.37 1910.21,1210.37 1910.8,1210.37 1911.38,1210.37 1911.97,1210.37 1912.56,1210.37 1913.14,1210.37 1913.73,1210.37 1914.32,1210.37 1914.9,1210.37 1915.49,1210.37 1916.08,1210.37 1916.66,1210.37 1917.25,1210.37 1917.83,1210.37 1918.42,1210.37 1919.01,1210.37 1919.59,1210.37 1920.18,1210.37 1920.77,1210.37 1921.35,1210.37 1921.94,1210.37 1922.53,1210.37 1923.11,1210.37 1923.7,1210.37 1924.29,1210.37 1924.87,1210.37 1925.46,1210.37 1926.04,1210.37 1926.63,1210.37 1927.22,1210.37 1927.8,1210.37 1928.39,1210.37 1928.98,1210.37 1929.56,1210.37 1930.15,1210.37 1930.74,1210.37 1931.32,1210.37 1931.91,1210.37 1932.5,1210.37 1933.08,1210.37 1933.67,1210.37 1934.25,1210.37 1934.84,1210.37 1935.43,1210.37 1936.01,1210.37 1936.6,1210.37 1937.19,1210.37 1937.77,1210.37 1938.36,1210.37 1938.95,1210.37 1939.53,1210.37 1940.12,1210.37 1940.71,1210.37 1941.29,1210.37 1941.88,1210.37 1942.46,1210.37 1943.05,1210.37 1943.64,1210.37 1944.22,1210.37 1944.81,1210.37 1945.4,1210.37 1945.98,1210.37 1946.57,1210.37 1947.16,1210.37 1947.74,1210.37 1948.33,1210.37 1948.91,1210.37 1949.5,1210.37 1950.09,1210.37 1950.67,1210.37 1951.26,1210.37 1951.85,1210.37 1952.43,1210.37 1953.02,1210.37 1953.61,1210.37 1954.19,1210.37 1954.78,1210.37 1955.37,1210.37 1955.95,1210.37 1956.54,1210.37 1957.12,1210.37 1957.71,1210.37 1958.3,1210.37 1958.88,1210.37 1959.47,1210.37 1960.06,1210.37 1960.64,1210.37 1961.23,1210.37 1961.82,1210.37 1962.4,1210.37 1962.99,1210.37 1963.58,1210.37 1964.16,1210.37 1964.75,1210.37 1965.33,1210.37 1965.92,1210.37 1966.51,1210.37 1967.09,1210.37 1967.68,1210.37 1968.27,1210.37 1968.85,1210.37 1969.44,1210.37 1970.03,1210.37 1970.61,1210.37 1971.2,1210.37 1971.78,1210.37 1972.37,1210.37 1972.96,1210.37 1973.54,1210.37 1974.13,1210.37 1974.72,1210.37 1975.3,1210.37 1975.89,1210.37 1976.48,1210.37 1977.06,1210.37 1977.65,1210.37 1978.24,1210.37 1978.82,1210.37 1979.41,1210.37 1979.99,1210.37 1980.58,1210.37 1981.17,1210.37 1981.75,1210.37 1982.34,1210.37 1982.93,1210.37 1983.51,1210.37 1984.1,1210.37 1984.69,1210.37 1985.27,1210.37 1985.86,1210.37 1986.45,1210.37 1987.03,1210.37 1987.62,1210.37 1988.2,1210.37 1988.79,1210.37 1989.38,1210.37 1989.96,1210.37 1990.55,1210.37 1991.14,1210.37 1991.72,1210.37 1992.31,1210.37 1992.9,1210.37 1993.48,1210.37 1994.07,1210.37 1994.65,1210.37 1995.24,1210.37 1995.83,1210.37 1996.41,1210.37 1997,1210.37 1997.59,1210.37 1998.17,1210.37 1998.76,1210.37 1999.35,1210.37 1999.93,1210.37 2000.52,1210.37 2001.11,1210.37 2001.69,1210.37 2002.28,1210.37 2002.86,1210.37 2003.45,1210.37 2004.04,1210.37 2004.62,1210.37 2005.21,1210.37 2005.8,1210.37 2006.38,1210.37 2006.97,1210.37 2007.56,1210.37 2008.14,1210.37 2008.73,1210.37 2009.32,1210.37 2009.9,1210.37 2010.49,1210.37 2011.07,1210.37 2011.66,1210.37 2012.25,1210.37 2012.83,1210.37 2013.42,1210.37 2014.01,1210.37 2014.59,1210.37 2015.18,1210.37 2015.77,1210.37 2016.35,1210.37 2016.94,1210.37 2017.53,1210.37 2018.11,1210.37 2018.7,1210.37 2019.28,1210.37 2019.87,1210.37 2020.46,1210.37 2021.04,1210.37 2021.63,1210.37 2022.22,1210.37 2022.8,1210.37 2023.39,1210.37 2023.98,1210.37 2024.56,1210.37 2025.15,1210.37 2025.73,1210.37 2026.32,1210.37 2026.91,1210.37 2027.49,1210.37 2028.08,1210.37 2028.67,1210.37 2029.25,1210.37 2029.84,1210.37 2030.43,1210.37 2031.01,1210.37 2031.6,1210.37 2032.19,1210.37 2032.77,1210.37 2033.36,1210.37 2033.94,1210.37 2034.53,1210.37 2035.12,1210.37 2035.7,1210.37 2036.29,1210.37 2036.88,1210.37 2037.46,1210.37 2038.05,1210.37 2038.64,1210.37 2039.22,1210.37 2039.81,1210.37 2040.4,1210.37 2040.98,1210.37 2041.57,1210.37 2042.15,1210.37 2042.74,1210.37 2043.33,1210.37 2043.91,1210.37 2044.5,1210.37 2045.09,1210.37 2045.67,1210.37 2046.26,1210.37 2046.85,1210.37 2047.43,1210.37 2048.02,1210.37 2048.6,1210.37 2049.19,1210.37 2049.78,1210.37 2050.36,1210.37 2050.95,1210.37 2051.54,1210.37 2052.12,1210.37 2052.71,1210.37 2053.3,1210.37 2053.88,1210.37 2054.47,1210.37 2055.06,1210.37 2055.64,1210.37 2056.23,1210.37 2056.81,1210.37 2057.4,1210.37 2057.99,1210.37 2058.57,1210.37 2059.16,1210.37 2059.75,1210.37 2060.33,1210.37 2060.92,1210.37 2061.51,1210.37 2062.09,1210.37 2062.68,1210.37 2063.27,1210.37 2063.85,1210.37 2064.44,1210.37 2065.02,1210.37 2065.61,1210.37 2066.2,1210.37 2066.78,1210.37 2067.37,1210.37 2067.96,1210.37 2068.54,1210.37 2069.13,1210.37 2069.72,1210.37 2070.3,1210.37 2070.89,1210.37 2071.48,1210.37 2072.06,1210.37 2072.65,1210.37 2073.23,1210.37 2073.82,1210.37 2074.41,1210.37 2074.99,1210.37 2075.58,1210.37 2076.17,1210.37 2076.75,1210.37 2077.34,1210.37 2077.93,1210.37 2078.51,1210.37 2079.1,1210.37 2079.68,1210.37 2080.27,1210.37 2080.86,1210.37 2081.44,1210.37 2082.03,1210.37 2082.62,1210.37 2083.2,1210.37 2083.79,1210.37 2084.38,1210.37 2084.96,1210.37 2085.55,1210.37 2086.14,1210.37 2086.72,1210.37 2087.31,1210.37 2087.89,1210.37 2088.48,1210.37 2089.07,1210.37 2089.65,1210.37 2090.24,1210.37 2090.83,1210.37 2091.41,1210.37 2092,1210.37 2092.59,1210.37 2093.17,1210.37 2093.76,1210.37 2094.35,1210.37 2094.93,1210.37 2095.52,1210.37 2096.1,1210.37 2096.69,1210.37 2097.28,1210.37 2097.86,1210.37 2098.45,1210.37 2099.04,1210.37 2099.62,1210.37 2100.21,1210.37 2100.8,1210.37 2101.38,1210.37 2101.97,1210.37 2102.55,1210.37 2103.14,1210.37 2103.73,1210.37 2104.31,1210.37 2104.9,1210.37 2105.49,1210.37 2106.07,1210.37 2106.66,1210.37 2107.25,1210.37 2107.83,1210.37 2108.42,1210.37 2109.01,1210.37 2109.59,1210.37 2110.18,1210.37 2110.76,1210.37 2111.35,1210.37 2111.94,1210.37 2112.52,1210.37 2113.11,1210.37 2113.7,1210.37 2114.28,1210.37 2114.87,1210.37 2115.46,1210.37 2116.04,1210.37 2116.63,1210.37 2117.22,1210.37 2117.8,1210.37 2118.39,1210.37 2118.97,1210.37 2119.56,1210.37 2120.15,1210.37 2120.73,1210.37 2121.32,1210.37 2121.91,1210.37 2122.49,1210.37 2123.08,1210.37 2123.67,1210.37 2124.25,1210.37 2124.84,1210.37 2125.42,1210.37 2126.01,1210.37 2126.6,1210.37 2127.18,1210.37 2127.77,1210.37 2128.36,1210.37 2128.94,1210.37 2129.53,1210.37 2130.12,1210.37 2130.7,1210.37 2131.29,1210.37 2131.88,1210.37 2132.46,1210.37 2133.05,1210.37 2133.63,1210.37 2134.22,1210.37 2134.81,1210.37 2135.39,1210.37 2135.98,1210.37 2136.57,1210.37 2137.15,1210.37 2137.74,1210.37 2138.33,1210.37 2138.91,1210.37 2139.5,1210.37 2140.09,1210.37 2140.67,1210.37 2141.26,1210.37 2141.84,1210.37 2142.43,1210.37 2143.02,1210.37 2143.6,1210.37 2144.19,1210.37 2144.78,1210.37 2145.36,1210.37 2145.95,1210.37 2146.54,1210.37 2147.12,1210.37 2147.71,1210.37 2148.3,1210.37 2148.88,1210.37 2149.47,1210.37 2150.05,1210.37 2150.64,1210.37 2151.23,1210.37 2151.81,1210.37 2152.4,1210.37 2152.99,1210.37 2153.57,1210.37 2154.16,1210.37 2154.75,1210.37 2155.33,1210.37 2155.92,1210.37 2156.5,1210.37 2157.09,1210.37 2157.68,1210.37 2158.26,1210.37 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.75,1191.87 1399.8,899.083 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.41 985.439,1191.87 2158.26,1191.87 2158.26,1228.41 985.439,1228.41 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip333\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip333)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-8385.02 166.029,-9082.03 166.588,-9711.43 167.147,-9250.87 167.706,-9805.18 168.266,-10301.8 168.825,-10744.4 169.384,-9585.5 169.943,-9996.83 170.503,-10345.6 171.062,-10032.7 171.621,-9769.87 172.18,-10057.6 172.74,-10280.5 173.299,-10488.4 173.858,-10671.4 174.417,-10823.3 174.977,-10946.5 175.536,-11042.8 176.095,-11114.2 176.655,-11162.4 177.214,-10866.5 177.773,-10589.8 178.332,-10614.6 178.892,-10103.1 179.451,-10112.4 180.01,-10100.5 180.569,-9859.29 181.129,-9814.58 181.688,-9759.29 182.247,-9504.54 182.806,-9091.56 183.366,-8840.51 183.925,-8766.44 184.484,-8679.84 185.043,-8579.68 185.603,-8345.82 186.162,-8124.87 186.721,-8026.94 187.28,-7813 187.84,-7598.99 188.399,-7377.6 188.958,-7252.86 189.517,-6861.55 190.077,-6747.61 190.636,-6632.75 191.195,-6517.49 191.754,-6389.58 192.314,-6267.67 192.873,-6068.4 193.432,-5950.08 193.991,-5756.78 194.551,-5504.91 195.11,-5326.84 195.669,-5208.16 196.228,-4978.63 196.788,-4817.58 197.347,-4659.58 197.906,-4558.26 198.465,-4354.03 199.025,-4203.46 199.584,-3967.77 200.143,-3827.17 200.702,-3692.38 201.262,-3602.57 201.821,-3470.97 202.38,-3384.82 202.939,-3260.28 203.499,-3138.3 204.058,-2982.43 204.617,-2790.95 205.176,-2644.61 205.736,-2465.36 206.295,-2328.43 206.854,-2132.74 207.413,-1885.25 207.973,-1841.03 208.532,-1762.78 209.091,-1628.16 209.65,-1495.62 210.21,-1417.91 210.769,-1372.43 211.328,-1241.79 211.887,-1147.52 212.447,-1110.14 213.006,-1044 213.565,-1035.11 214.124,-998.588 214.684,-961.699 215.243,-897.695 215.802,-859.219 216.361,-795.823 216.921,-685.013 217.48,-582.805 218.039,-529.25 218.598,-478.401 219.158,-406.184 219.717,-382.204 220.276,-311.332 220.835,-244.7 221.395,-182.151 221.954,-116.942 222.513,-76.89 223.072,-58.4846 223.632,-23.1297 224.191,18.0208 224.75,73.4833 225.309,84.3125 225.869,102.027 226.428,115.65 226.987,170.093 227.546,203.535 228.106,216.137 228.665,229.014 229.224,264.378 229.783,316.371 230.343,330.285 230.902,384.139 231.461,382.297 232.02,416.521 232.58,426.212 233.139,457.31 233.698,505.061 234.257,532.786 234.817,555.488 235.376,525.301 235.935,533.509 236.494,599.675 237.054,644.126 237.613,666.906 238.172,706.544 238.731,748.101 239.291,745.039 239.85,798.053 240.409,742.235 240.968,777.385 241.528,793.879 242.087,827.873 242.646,860.241 243.205,890.534 243.765,881.888 244.324,908.732 244.883,923.219 245.442,951.416 246.002,993.793 246.561,1017.95 247.12,1059.85 247.679,1013.35 248.239,1002.97 248.798,1030.95 249.357,1005.18 249.916,1012.33 250.476,1021.2 251.035,1011.77 251.594,1054.26 252.153,1059.44 252.713,1051.39 253.272,1063.45 253.831,1086.6 254.39,1076.19 254.95,1102.3 255.509,1110.01 256.068,1081.06 256.627,1073.76 257.187,1083.72 257.746,1088.67 258.305,1044.05 258.864,1057.5 259.424,1052.39 259.983,1045.65 260.542,1059.51 261.101,1051.17 261.661,1057.81 262.22,1068.34 262.779,1042.56 263.338,1104.66 263.898,1095.98 264.457,1120.84 265.016,1162.28 265.575,1150.51 266.135,1140.92 266.694,1162.58 267.253,1136.35 267.812,1143.41 268.372,1151.03 268.931,1140.74 269.49,1145.09 270.049,1116.43 270.609,1107.26 271.168,1097.48 271.727,1105.54 272.286,1129.63 272.846,1137.66 273.405,1157.38 273.964,1163.64 274.523,1134.8 275.083,1141.53 275.642,1130.23 276.201,1116.95 276.76,1104.77 277.32,1131.2 277.879,1107.03 278.438,1097.91 278.997,1090.17 279.557,1015.98 280.116,1009.49 280.675,1006.32 281.234,1004.22 281.794,967.931 282.353,1004.74 282.912,984.613 283.471,965.175 284.031,963.743 284.59,1030.46 285.149,1008.16 285.708,988.124 286.268,988.181 286.827,969.343 287.386,969.156 287.945,984.945 288.505,965.703 289.064,980.811 289.623,977.531 290.182,1004.24 290.742,967.109 291.301,949.883 291.86,951.144 292.419,970.909 292.979,999.309 293.538,945.363 294.097,945.891 294.656,993.006 295.216,1006.88 295.775,1019.03 296.334,1029.21 296.893,1021.13 297.453,1016.94 298.012,1010.53 298.571,1055.2 299.13,1064.6 299.69,1041.4 300.249,1052.49 300.808,1009.64 301.368,991.007 301.927,1004.23 302.486,980.912 303.045,993.298 303.605,1008.37 304.164,1022.92 304.723,1012.31 305.282,1022.01 305.842,1031.41 306.401,1023.93 306.96,1035.48 307.519,1112.68 308.079,1120.92 308.638,1092.72 309.197,1099.31 309.756,1071.69 310.316,1076.15 310.875,1065.79 311.434,1075.32 311.993,1029.97 312.553,1038.47 313.112,1030.82 313.671,1024.89 314.23,1035.35 314.79,1025.7 315.349,1003.91 315.908,997.299 316.467,1022.87 317.027,1020.11 317.586,1029.56 318.145,1072.99 318.704,1014.1 319.264,1041.01 319.823,1015.88 320.382,973.765 320.941,953.59 321.501,984.045 322.06,976.29 322.619,955.935 323.178,933.19 323.738,964.194 324.297,961.414 324.856,1004.86 325.415,1016.35 325.975,1023.05 326.534,1049.98 327.093,1058.64 327.652,1033.69 328.212,1026.17 328.771,1028.72 329.33,1006.51 329.889,1014.34 330.449,990.233 331.008,1016.08 331.567,1022.35 332.126,1011.31 332.686,984.48 333.245,961.197 333.804,938.533 334.363,949.464 334.923,928.7 335.482,910.549 336.041,889.129 336.6,921.804 337.16,937.015 337.719,962.819 338.278,969.187 338.837,962.427 339.397,955.775 339.956,951.73 340.515,960.941 341.074,934.375 341.634,961.949 342.193,988.676 342.752,963.596 343.311,973.632 343.871,966.899 344.43,958.719 344.989,998.886 345.548,974.209 346.108,950.075 346.667,959.219 347.226,952.39 347.785,978.149 348.345,951.167 348.904,961.074 349.463,984.667 350.022,975.05 350.582,968.807 351.141,946.409 351.7,939.243 352.259,981.659 352.819,991.556 353.378,998.32 353.937,1003.21 354.496,991.843 355.056,984.12 355.615,976.121 356.174,966.067 356.733,960.085 357.293,1001.7 357.852,991.209 358.411,1033.36 358.97,1003.68 359.53,998.407 360.089,994.235 360.648,982.061 361.207,991.146 361.767,985.5 362.326,976.398 362.885,969.143 363.444,927.747 364.004,922.567 364.563,900.261 365.122,905.304 365.681,885.023 366.241,878.904 366.8,859.022 367.359,856.009 367.918,852.095 368.478,800.235 369.037,781.591 369.596,765.975 370.155,719.754 370.715,744.805 371.274,749.19 371.833,750.305 372.392,756.253 372.952,762.767 373.511,748.332 374.07,783.872 374.629,768.71 375.189,768.646 375.748,770.992 376.307,773.691 376.866,773.868 377.426,776.393 377.985,760.293 378.544,730.336 379.103,765.117 379.663,752.195 380.222,770.011 380.781,770.262 381.34,757.443 381.9,762.122 382.459,748.4 383.018,750.945 383.577,767.366 384.137,768.854 384.696,771.301 385.255,789.296 385.814,774.118 386.374,806.169 386.933,809.612 387.492,827.186 388.051,825.014 388.611,837.721 389.17,870.082 389.729,867.194 390.288,881.229 390.848,858.771 391.407,868.989 391.966,849.659 392.525,865.685 393.085,847.289 393.644,857.975 394.203,869.522 394.762,864.512 395.322,910.408 395.881,889.344 396.44,886.327 396.999,834.606 397.559,848.972 398.118,849.058 398.677,814.527 399.236,827.021 399.796,793.39 400.355,794.632 400.914,823.736 401.473,838.589 402.033,836.308 402.592,834.273 403.151,829.196 403.71,843.097 404.27,824.714 404.829,824.05 405.388,823.841 405.947,807.507 406.507,853.752 407.066,800.839 407.625,801.72 408.184,785.776 408.744,784.359 409.303,801.002 409.862,800.521 410.421,769.646 410.981,755.5 411.54,774.539 412.099,773.785 412.658,758.455 413.218,789.282 413.777,805.213 414.336,790.034 414.895,788.554 415.455,820.813 416.014,767.282 416.573,753.302 417.132,782.711 417.692,798.124 418.251,796.182 418.81,795.101 419.369,792.621 419.929,794.227 420.488,793.117 421.047,793.243 421.606,790.228 422.166,837.726 422.725,848.184 423.284,874.657 423.843,868.861 424.403,864.232 424.962,874.165 425.521,852.718 426.08,833.437 426.64,829.567 427.199,858.585 427.758,888.726 428.318,896.538 428.877,872.482 429.436,884.163 429.995,894.475 430.555,906.723 431.114,897.86 431.673,889.327 432.232,899.504 432.792,892.84 433.351,902.766 433.91,914.074 434.469,871.929 435.029,900.496 435.588,908.58 436.147,885.76 436.706,896.4 437.266,872.092 437.825,862.094 438.384,839.754 438.943,850.66 439.503,848.773 440.062,878.945 440.621,891.487 441.18,900.816 441.74,891.046 442.299,898.876 442.858,891.743 443.417,882.678 443.977,879.522 444.536,872.109 445.095,850.066 445.654,827.493 446.214,840.716 446.773,820.503 447.332,801.532 447.891,815.294 448.451,827.355 449.01,803.043 449.569,818.399 450.128,798.62 450.688,776.802 451.247,740.565 451.806,721.679 452.365,723.286 452.925,743.315 453.484,743.83 454.043,728.985 454.602,727.57 455.162,693.315 455.721,695.959 456.28,699.717 456.839,684.32 457.399,687.319 457.958,695.019 458.517,679.385 459.076,649.324 459.636,640.109 460.195,645.896 460.754,634.75 461.313,659.819 461.873,686.674 462.432,658.368 462.991,718.273 463.55,723.145 464.11,740.855 464.669,726.72 465.228,743.444 465.787,727.722 466.347,747.421 466.906,731.867 467.465,746.911 468.024,762.784 468.584,745.535 469.143,715.469 469.702,702.1 470.261,703.082 470.821,719.26 471.38,719.869 471.939,720.81 472.498,705.766 473.058,724.031 473.617,738.376 474.176,740.196 474.735,772.165 475.295,757.447 475.854,771.323 476.413,783.364 476.972,766.249 477.532,749.789 478.091,733.228 478.65,734.533 479.209,737.753 479.769,737.548 480.328,735.401 480.887,718.851 481.446,703.449 482.006,734.654 482.565,751.188 483.124,733.004 483.683,733.675 484.243,716.165 484.802,717.597 485.361,717.53 485.92,717.662 486.48,685.893 487.039,737.359 487.598,722.831 488.157,724.868 488.717,725.63 489.276,728.001 489.835,729.231 490.394,748.59 490.954,764.029 491.513,744.961 492.072,759.804 492.631,740.819 493.191,769.5 493.75,784.887 494.309,765.527 494.868,780.317 495.428,795.242 495.987,776.998 496.546,772.496 497.105,787.705 497.665,754.805 498.224,723.845 498.783,709.828 499.342,711.735 499.902,710.946 500.461,726.663 501.02,711.17 501.579,698.033 502.139,714.874 502.698,718.077 503.257,701.878 503.816,702.39 504.376,688.61 504.935,691.457 505.494,709.464 506.053,711.711 506.613,716.532 507.172,715.775 507.731,698.109 508.29,668.67 508.85,671.661 509.409,706.637 509.968,708.03 510.527,724.994 511.087,676.467 511.646,694.595 512.205,695.266 512.764,712.009 513.324,695.484 513.883,679.81 514.442,731.474 515.001,746.772 515.561,778.225 516.12,776.883 516.679,771.314 517.238,769.387 517.798,734.904 518.357,733.995 518.916,732.815 519.475,747.015 520.035,758.581 520.594,743.056 521.153,742.942 521.712,726.743 522.272,678.453 522.831,680.273 523.39,718.581 523.949,738.629 524.509,775.713 525.068,772.089 525.627,784.08 526.186,782.988 526.746,762.125 527.305,775.348 527.864,756.755 528.423,801.072 528.983,763.596 529.542,761.253 530.101,762.89 530.66,757.85 531.22,770.945 531.779,771.174 532.338,769.435 532.897,752.641 533.457,722.517 534.016,755.215 534.575,790.679 535.134,824.693 535.694,818.456 536.253,813.034 536.812,789.829 537.371,784.745 537.931,783.46 538.49,731.495 539.049,729.33 539.608,728.316 540.168,710.192 540.727,707.55 541.286,743.922 541.845,744.429 542.405,743.4 542.964,710.137 543.523,678.931 544.082,683.167 544.642,688.028 545.201,691.293 545.76,680.556 546.319,651.021 546.879,672.116 547.438,693.131 547.997,726.84 548.556,730.281 549.116,730.544 549.675,697.648 550.234,699.86 550.793,735.228 551.353,717.302 551.912,719.173 552.471,783.783 553.031,781.721 553.59,761.585 554.149,756.567 554.708,737.358 555.268,738.069 555.827,740.036 556.386,721.838 556.945,751.701 557.505,782.317 558.064,792.282 558.623,789.027 559.182,769.104 559.742,748.795 560.301,730.208 560.86,700.436 561.419,717.358 561.979,736.402 562.538,734.766 563.097,739.57 563.656,736.173 564.216,752.144 564.775,762.988 565.334,789.9 565.893,791.029 566.453,786.114 567.012,751.266 567.571,781.1 568.13,775.235 568.69,785.547 569.249,797.719 569.808,775.899 570.367,788.493 570.927,750.668 571.486,746.625 572.045,743.582 572.604,758.739 573.164,756.72 573.723,738.768 574.282,752.569 574.841,750.114 575.401,777.811 575.96,758.76 576.519,785.567 577.078,764.645 577.638,794.45 578.197,773.337 578.756,722.987 579.315,722.493 579.875,705.96 580.434,688.209 580.993,723.552 581.552,719.049 582.112,751.103 582.671,750.91 583.23,750.168 583.789,762.361 584.349,740.823 584.908,772.761 585.467,768.482 586.026,747.309 586.586,743.539 587.145,709.473 587.704,741.497 588.263,754.021 588.823,783.558 589.382,793.136 589.941,740.724 590.5,741.626 591.06,773.833 591.619,803.668 592.178,800.743 592.737,811.763 593.297,772.019 593.856,783.409 594.415,779.904 594.974,792.356 595.534,773.803 596.093,755.389 596.652,771.371 597.211,750.662 597.771,753.073 598.33,737.934 598.889,752.687 599.448,718.854 600.008,765.712 600.567,762.707 601.126,807.658 601.685,816.94 602.245,782.774 602.804,780.265 603.363,760.351 603.922,724.949 604.482,709.16 605.041,724.667 605.6,672.423 606.159,691.473 606.719,710.563 607.278,691.678 607.837,674.924 608.396,659.686 608.956,626.964 609.515,645.362 610.074,699.96 610.633,683.939 611.193,699.476 611.752,683.466 612.311,653.424 612.87,690.229 613.43,656.217 613.989,643.008 614.548,646.019 615.107,652.289 615.667,636.671 616.226,621.891 616.785,646.095 617.344,634.889 617.904,653.861 618.463,655.407 619.022,592.12 619.581,579.763 620.141,589.667 620.7,615.597 621.259,639.089 621.818,644.93 622.378,665.106 622.937,667.313 623.496,700.561 624.055,702.382 624.615,686.717 625.174,721.4 625.733,751.592 626.292,765.195 626.852,778.489 627.411,787.299 627.97,802.818 628.529,799.247 629.089,826.247 629.648,834.446 630.207,855.021 630.766,812.465 631.326,790.827 631.885,785.643 632.444,781.389 633.003,792.215 633.563,787.867 634.122,733.394 634.681,730.225 635.24,692.384 635.8,710.119 636.359,737.628 636.918,733.684 637.477,778.989 638.037,756.635 638.596,771.347 639.155,770.812 639.714,748.628 640.274,749.841 640.833,746.168 641.392,708.945 641.951,724.072 642.511,707.497 643.07,722.722 643.629,724.013 644.188,753.135 644.748,746.873 645.307,743.986 645.866,758.101 646.425,790.369 646.985,736.812 647.544,702.965 648.103,702.223 648.662,701.028 649.222,701.86 649.781,749.918 650.34,746.717 650.899,709.406 651.459,676.421 652.018,660.53 652.577,663.172 653.136,668.346 653.696,673.936 654.255,692.57 654.814,726.13 655.373,707.259 655.933,688.672 656.492,672.268 657.051,660.572 657.61,678.341 658.17,630.912 658.729,617.56 659.288,639.409 659.847,642.646 660.407,631.378 660.966,685.418 661.525,684.246 662.084,687.316 662.644,658.135 663.203,658.593 663.762,663.014 664.321,629.23 664.881,618.256 665.44,608.468 665.999,617.489 666.558,605.546 667.118,609.854 667.677,645.63 668.236,664.896 668.795,667.666 669.355,653.281 669.914,672.801 670.473,660.288 671.032,661.215 671.592,676.716 672.151,694.522 672.71,726.482 673.269,693.825 673.829,695.518 674.388,715.425 674.947,728.753 675.506,757.801 676.066,736.214 676.625,729.93 677.184,727.727 677.743,729.101 678.303,695.968 678.862,692.76 679.421,709.996 679.981,694.637 680.54,726.596 681.099,724.849 681.658,770.16 682.218,732.399 682.777,712.909 683.336,713.244 683.895,730.117 684.455,713.791 685.014,698.455 685.573,714.78 686.132,714.013 686.692,713.473 687.251,716.498 687.81,709.444 688.369,724.904 688.929,737.822 689.488,751.521 690.047,749.328 690.606,715.083 691.166,696.601 691.725,694.973 692.284,756.061 692.843,765.94 693.403,747.804 693.962,717.69 694.521,735.645 695.08,735.047 695.64,749.245 696.199,735.054 696.758,782.774 697.317,808.406 697.877,754.749 698.436,718.869 698.995,748.015 699.554,742.572 700.114,707.472 700.673,691.638 701.232,687.324 701.791,721.307 702.351,668.868 702.91,668.452 703.469,670.714 704.028,690.301 704.588,706.959 705.147,709.092 705.706,739.62 706.265,739.254 706.825,719.849 707.384,751.191 707.943,748.285 708.502,711.849 709.062,692.642 709.621,691.607 710.18,689.243 710.739,657.667 711.299,611.522 711.858,647.404 712.417,665.364 712.976,618.137 713.536,592.213 714.095,597.954 714.654,585.451 715.213,606.567 715.773,607.299 716.332,598.246 716.891,619.394 717.45,624.473 718.01,598.928 718.569,588.138 719.128,596.683 719.687,585.696 720.247,593.848 720.806,580.044 721.365,587.597 721.924,607.753 722.484,664.05 723.043,698.447 723.602,680.267 724.161,693.72 724.721,681.069 725.28,680.636 725.839,683.604 726.398,669.132 726.958,685.656 727.517,681.949 728.076,684.033 728.635,701.055 729.195,683.705 729.754,717.022 730.313,735.923 730.872,751.014 731.432,782.768 731.991,776.061 732.55,742.063 733.109,742.836 733.669,741.26 734.228,753.628 734.787,735.805 735.346,684.803 735.906,622.295 736.465,610.455 737.024,632.639 737.583,654.105 738.143,624.194 738.702,657.394 739.261,675.595 739.82,630.209 740.38,648.813 740.939,653.115 741.498,669.411 742.057,670.404 742.617,687.552 743.176,687.948 743.735,689.514 744.294,689.119 744.854,689.597 745.413,691.745 745.972,690.538 746.531,672.998 747.091,676.767 747.65,663.991 748.209,665.034 748.768,668.039 749.328,665.612 749.887,667.714 750.446,681.901 751.005,665.986 751.565,669.206 752.124,672.986 752.683,690.549 753.242,724.35 753.802,708.503 754.361,706.564 754.92,706.562 755.479,719.775 756.039,670.99 756.598,657.523 757.157,644.061 757.716,664.519 758.276,651.553 758.835,689.655 759.394,688.59 759.953,719.103 760.513,719.221 761.072,701.552 761.631,747.985 762.19,746.776 762.75,711.46 763.309,706.574 763.868,726.689 764.427,725.502 764.987,753.71 765.546,795.47 766.105,789.822 766.664,768.787 767.224,781.953 767.783,744.268 768.342,757.364 768.901,724.308 769.461,704.804 770.02,718.805 770.579,717.374 771.138,713.567 771.698,711.1 772.257,722.963 772.816,708.121 773.375,704.819 773.935,687.024 774.494,687.354 775.053,720.768 775.612,706.172 776.172,674.935 776.731,627.221 777.29,615.47 777.849,589.364 778.409,593.822 778.968,600.985 779.527,602.244 780.086,591.647 780.646,611.445 781.205,615.191 781.764,637.26 782.323,639.479 782.883,640.514 783.442,624.504 784.001,608.8 784.56,615.389 785.12,622.251 785.679,625.108 786.238,628.609 786.797,649.368 787.357,635.494 787.916,606.782 788.475,612.016 789.034,648.514 789.594,666.289 790.153,682.235 790.712,683.288 791.271,701.818 791.831,702.625 792.39,717.234 792.949,680.719 793.508,646.652 794.068,650.968 794.627,652.807 795.186,669.408 795.745,672.494 796.305,690.57 796.864,692.825 797.423,694.516 797.982,678.544 798.542,698.309 799.101,697.407 799.66,635.764 800.219,620.697 800.779,673.872 801.338,657.673 801.897,692.769 802.456,737.229 803.016,749.568 803.575,729.372 804.134,743.584 804.693,725.208 805.253,742.825 805.812,740.421 806.371,733.11 806.931,765.204 807.49,729.105 808.049,745.305 808.608,727.963 809.168,726.636 809.727,710.838 810.286,708.509 810.845,708.512 811.405,734.467 811.964,761.205 812.523,742.284 813.082,724.846 813.642,720.396 814.201,731.583 814.76,745.455 815.319,740.928 815.879,723.589 816.438,722.24 816.997,704.047 817.556,688.407 818.116,659.748 818.675,660.88 819.234,682.459 819.793,682.262 820.353,679.141 820.912,629.832 821.471,650.282 822.03,634.423 822.59,635.968 823.149,686.128 823.708,690.322 824.267,691.86 824.827,673.978 825.386,689.979 825.945,675.299 826.504,641.311 827.064,641.015 827.623,659.61 828.182,662.349 828.741,667.942 829.301,669.074 829.86,657.814 830.419,707.529 830.978,708.466 831.538,704.847 832.097,671.74 832.656,681.034 833.215,665.558 833.775,664.55 834.334,683.114 834.893,714.29 835.452,711.8 836.012,724.776 836.571,723.195 837.13,722.915 837.689,703.092 838.249,795.553 838.808,790.822 839.367,768.547 839.926,734.003 840.486,761.409 841.045,775.268 841.604,732.876 842.163,732.871 842.723,698.431 843.282,680.412 843.841,664.89 844.4,667.467 844.96,685.159 845.519,732.706 846.078,742.41 846.637,755.403 847.197,734.751 847.756,762.788 848.315,756.23 848.874,765.993 849.434,795.521 849.993,792.294 850.552,821.624 851.111,798.344 851.671,790.961 852.23,806.165 852.789,780.483 853.348,777.627 853.908,772.907 854.467,735.757 855.026,732.823 855.585,745.967 856.145,758.499 856.704,804.278 857.263,827.326 857.822,783.183 858.382,808.14 858.941,786.187 859.5,763.548 860.059,806.625 860.619,750.797 861.178,732.787 861.737,729.16 862.296,727.158 862.856,712.601 863.415,709.677 863.974,724.821 864.533,741.304 865.093,753.435 865.652,748.118 866.211,728.135 866.77,746.782 867.33,727.716 867.889,755.009 868.448,752.906 869.007,748.068 869.567,773.5 870.126,786.845 870.685,778.15 871.244,737.814 871.804,700.296 872.363,717.779 872.922,701.551 873.481,684.247 874.041,700.897 874.6,653.635 875.159,640.668 875.718,660.985 876.278,680.772 876.837,638.245 877.396,624.211 877.955,643.085 878.515,660.818 879.074,678.445 879.633,691.804 880.192,690.365 880.752,692.158 881.311,706.661 881.87,706.247 882.429,689.99 882.989,722.721 883.548,670.831 884.107,654.094 884.666,643.702 885.226,646.997 885.785,616.239 886.344,601.974 886.903,571.268 887.463,578.712 888.022,567.535 888.581,575.267 889.14,578.045 889.7,601.499 890.259,588.192 890.818,623.056 891.377,626.134 891.937,594.604 892.496,633.639 893.055,605.638 893.614,625.901 894.174,627.737 894.733,642.769 895.292,630.458 895.851,617.456 896.411,637.528 896.97,622.712 897.529,610.702 898.088,629.955 898.648,632.361 899.207,637.105 899.766,621.858 900.325,657.337 900.885,659.748 901.444,658.639 902.003,643.765 902.562,648.063 903.122,698.172 903.681,696.004 904.24,678.147 904.799,677.691 905.359,662.552 905.918,680.344 906.477,682.867 907.036,696.586 907.596,695.963 908.155,632.765 908.714,634.012 909.273,619.896 909.833,624.565 910.392,630.617 910.951,636.312 911.51,655.15 912.07,658.623 912.629,642.31 913.188,658.331 913.747,613.197 914.307,618.403 914.866,640.223 915.425,640.414 915.984,625.046 916.544,630.417 917.103,631.271 917.662,648.395 918.221,618.711 918.781,640.095 919.34,621.112 919.899,571.684 920.458,580.279 921.018,602.579 921.577,594.293 922.136,603.786 922.695,653.657 923.255,642.023 923.814,647.598 924.373,633.324 924.932,669.009 925.492,720.961 926.051,718.239 926.61,750.058 927.169,746.875 927.729,742.684 928.288,724.43 928.847,737.992 929.406,752.084 929.966,720.305 930.525,704.043 931.084,720.633 931.644,717.243 932.203,683.371 932.762,656.139 933.321,658.493 933.881,727.561 934.44,738.434 934.999,747.667 935.558,730.721 936.118,711.356 936.677,710.943 937.236,740.982 937.795,740.461 938.355,756.081 938.914,754.376 939.473,780.969 940.032,777.231 940.592,758.141 941.151,721.39 941.71,786.645 942.269,762.681 942.829,776.074 943.388,805.13 943.947,766.252 944.506,730.598 945.066,744.135 945.625,739.366 946.184,733.207 946.743,760.639 947.303,770.128 947.862,780.827 948.421,776.628 948.98,786.716 949.54,750.503 950.099,745.428 950.658,742.111 951.217,752.433 951.777,748.813 952.336,745.167 952.895,692.097 953.454,707.417 954.014,687.836 954.573,689.183 955.132,689.364 955.691,675.416 956.251,678.038 956.81,678.925 957.369,646.184 957.928,645.482 958.488,648.842 959.047,666.335 959.606,680.024 960.165,679.831 960.725,695.659 961.284,676.952 961.843,713.357 962.402,693.228 962.962,678.139 963.521,679.874 964.08,695.418 964.639,708.31 965.199,687.062 965.758,687.277 966.317,671.347 966.876,702.488 967.436,668.603 967.995,670.461 968.554,656.891 969.113,658.267 969.673,691.453 970.232,611.688 970.791,612.952 971.35,567.165 971.91,574.206 972.469,578.491 973.028,565.895 973.587,557.518 974.147,594.132 974.706,616.482 975.265,601.856 975.824,601.681 976.384,605.921 976.943,629.47 977.502,633.471 978.061,634.318 978.621,624.593 979.18,629.886 979.739,583.397 980.298,640.239 980.858,630.648 981.417,635.224 981.976,666.435 982.535,704.066 983.095,707.362 983.654,706.656 984.213,722.998 984.772,752.751 985.332,765.759 985.891,797.222 986.45,777.03 987.009,760.958 987.569,742.173 988.128,738.423 988.687,736.636 989.246,749.552 989.806,697.374 990.365,661.936 990.924,674.661 991.483,672.798 992.043,662.065 992.602,664.855 993.161,616.831 993.72,605.957 994.28,612.066 994.839,607.217 995.398,613.026 995.957,635.008 996.517,624.331 997.076,657.959 997.635,658.647 998.194,675.191 998.754,661.525 999.313,649.093 999.872,602.261 1000.43,607.291 1000.99,613.928 1001.55,630.285 1002.11,634.779 1002.67,621.639 1003.23,607.86 1003.79,598.884 1004.35,585.034 1004.91,575.585 1005.46,580.539 1006.02,569.468 1006.58,572.199 1007.14,610.028 1007.7,613.09 1008.26,667.012 1008.82,669.985 1009.38,671.354 1009.94,671.988 1010.5,673.66 1011.06,690.664 1011.62,690.349 1012.18,668.045 1012.73,669.218 1013.29,704.566 1013.85,716.495 1014.41,727.165 1014.97,724.523 1015.53,739.993 1016.09,739.554 1016.65,753.145 1017.21,765.683 1017.77,741.17 1018.33,768.795 1018.89,732.836 1019.45,715.65 1020.01,694.3 1020.56,692.123 1021.12,674.522 1021.68,675.91 1022.24,658.867 1022.8,672.819 1023.36,687.389 1023.92,718.323 1024.48,701.363 1025.04,716.316 1025.6,714.924 1026.16,726.115 1026.72,741.665 1027.28,738.013 1027.83,705.096 1028.39,718.077 1028.95,733.007 1029.51,715.92 1030.07,746.301 1030.63,712.756 1031.19,726.102 1031.75,740.318 1032.31,720.111 1032.87,751.565 1033.43,698.769 1033.99,693.702 1034.55,692.288 1035.1,707.776 1035.66,703.88 1036.22,733.14 1036.78,717.499 1037.34,748.284 1037.9,713.347 1038.46,698.129 1039.02,679.04 1039.58,694.924 1040.14,681.797 1040.7,699.745 1041.26,694.922 1041.82,696.332 1042.38,697.227 1042.93,774.516 1043.49,753.252 1044.05,733.878 1044.61,714.957 1045.17,741.592 1045.73,740.51 1046.29,754.158 1046.85,781.912 1047.41,791.419 1047.97,783.415 1048.53,808.364 1049.09,815.843 1049.65,821.421 1050.2,817.509 1050.76,793.454 1051.32,774.67 1051.88,784.577 1052.44,794.801 1053,785.74 1053.56,762.907 1054.12,724.987 1054.68,706.816 1055.24,706.605 1055.8,722.691 1056.36,685.602 1056.92,670.7 1057.48,689.308 1058.03,638.978 1058.59,621.991 1059.15,624.172 1059.71,640.635 1060.27,673.208 1060.83,655.736 1061.39,653.229 1061.95,689.1 1062.51,657.544 1063.07,693.372 1063.63,710.987 1064.19,725.868 1064.75,728.167 1065.3,745.237 1065.86,759.565 1066.42,722.861 1066.98,685.165 1067.54,640.518 1068.1,626.48 1068.66,645.596 1069.22,583.187 1069.78,618.303 1070.34,604.501 1070.9,612.394 1071.46,665.216 1072.02,662.533 1072.57,662.365 1073.13,694.108 1073.69,625.688 1074.25,629.276 1074.81,632.831 1075.37,681.113 1075.93,732.363 1076.49,729.586 1077.05,693.379 1077.61,694.302 1078.17,693.599 1078.73,707.396 1079.29,673.072 1079.85,673.998 1080.4,705.145 1080.96,704.401 1081.52,705.49 1082.08,753.012 1082.64,765.508 1083.2,776.987 1083.76,786.182 1084.32,779.515 1084.88,788.411 1085.44,786.329 1086,781.008 1086.56,749.083 1087.12,745.801 1087.67,755.736 1088.23,752.48 1088.79,749.727 1089.35,793.684 1089.91,774.569 1090.47,753.988 1091.03,767.861 1091.59,779.372 1092.15,822.701 1092.71,836.41 1093.27,793.87 1093.83,757.224 1094.39,770.697 1094.94,784.866 1095.5,777.231 1096.06,740.587 1096.62,768.845 1097.18,777.374 1097.74,771.936 1098.3,782.788 1098.86,746.542 1099.42,710.825 1099.98,710.21 1100.54,709.922 1101.1,711.692 1101.66,742.896 1102.22,770.948 1102.77,766.321 1103.33,694.483 1103.89,723.48 1104.45,704.478 1105.01,652.574 1105.57,639.226 1106.13,624.385 1106.69,646.819 1107.25,632.674 1107.81,636.77 1108.37,640.641 1108.93,658.486 1109.49,657.648 1110.04,675.535 1110.6,693.075 1111.16,659.845 1111.72,642.522 1112.28,648.454 1112.84,668.295 1113.4,668.183 1113.96,638.466 1114.52,607.585 1115.08,645.694 1115.64,646.938 1116.2,633.391 1116.76,619.099 1117.31,644.328 1117.87,631.987 1118.43,651.849 1118.99,687.816 1119.55,675.649 1120.11,662.403 1120.67,665.089 1121.23,620.556 1121.79,606.374 1122.35,579.924 1122.91,585.17 1123.47,573.125 1124.03,565.301 1124.59,593.925 1125.14,565.576 1125.7,557.667 1126.26,580.907 1126.82,603.805 1127.38,574.004 1127.94,577.737 1128.5,618.222 1129.06,621.064 1129.62,607.76 1130.18,626.789 1130.74,613.951 1131.3,603.579 1131.86,603.11 1132.41,604.166 1132.97,608.275 1133.53,578.078 1134.09,584.183 1134.65,573.461 1135.21,612.167 1135.77,617.001 1136.33,605.588 1136.89,610.513 1137.45,634.023 1138.01,651.789 1138.57,685.369 1139.13,687.49 1139.68,670.461 1140.24,685.337 1140.8,686.204 1141.36,702.766 1141.92,734.215 1142.48,784.328 1143.04,765.359 1143.6,713.697 1144.16,647.686 1144.72,648.795 1145.28,668.372 1145.84,652.278 1146.4,670.295 1146.96,672.661 1147.51,691.309 1148.07,720.499 1148.63,703.444 1149.19,720.16 1149.75,735.045 1150.31,735.353 1150.87,714.745 1151.43,728.511 1151.99,726.989 1152.55,674.352 1153.11,672.839 1153.67,689.196 1154.23,677.93 1154.78,645.307 1155.34,630.363 1155.9,694.593 1156.46,677.452 1157.02,676.963 1157.58,663.299 1158.14,678.648 1158.7,679.892 1159.26,646.67 1159.82,648.202 1160.38,633.02 1160.94,634.001 1161.5,622.792 1162.05,643.882 1162.61,629.88 1163.17,649.497 1163.73,683.693 1164.29,732.85 1164.85,744.254 1165.41,726.102 1165.97,706.935 1166.53,690.645 1167.09,722.458 1167.65,751.345 1168.21,765.006 1168.77,772.575 1169.33,753.585 1169.88,813.682 1170.44,775.96 1171,800.885 1171.56,791.868 1172.12,770.855 1172.68,800.928 1173.24,778.792 1173.8,807.271 1174.36,782.748 1174.92,742.855 1175.48,770.982 1176.04,795.222 1176.6,823.746 1177.15,797.781 1177.71,760.442 1178.27,771.029 1178.83,733.816 1179.39,732.254 1179.95,728.91 1180.51,709.89 1181.07,724.574 1181.63,735.25 1182.19,718.166 1182.75,700.487 1183.31,714.574 1183.87,711.369 1184.43,725.999 1184.98,739.167 1185.54,754.632 1186.1,765.473 1186.66,731.468 1187.22,730.729 1187.78,698.398 1188.34,681.386 1188.9,648.671 1189.46,651.468 1190.02,653.711 1190.58,640.04 1191.14,609.438 1191.7,616.542 1192.25,634.421 1192.81,636.03 1193.37,652.095 1193.93,668.101 1194.49,684.227 1195.05,667.356 1195.61,698.6 1196.17,682.651 1196.73,682.038 1197.29,651.537 1197.85,636.143 1198.41,638.126 1198.97,606.613 1199.52,595.45 1200.08,616.889 1200.64,621.605 1201.2,624.009 1201.76,626.796 1202.32,630.129 1202.88,645.413 1203.44,633.586 1204,636.464 1204.56,640.331 1205.12,655.989 1205.68,598.629 1206.24,588.138 1206.8,578.051 1207.35,567.951 1207.91,573.151 1208.47,594.355 1209.03,612.073 1209.59,603.911 1210.15,560.797 1210.71,586.724 1211.27,589.18 1211.83,576.473 1212.39,565.874 1212.95,554.502 1213.51,560.702 1214.07,568.181 1214.62,604.351 1215.18,588.778 1215.74,612.944 1216.3,585.276 1216.86,575.043 1217.42,579.346 1217.98,601.685 1218.54,588.91 1219.1,561.097 1219.66,552.152 1220.22,607.065 1220.78,646.72 1221.34,651.589 1221.89,653.44 1222.45,669.006 1223.01,672.497 1223.57,720.783 1224.13,705.573 1224.69,705.014 1225.25,689.946 1225.81,702.022 1226.37,703.205 1226.93,700.182 1227.49,735.031 1228.05,731.951 1228.61,731.37 1229.17,714.293 1229.72,714.61 1230.28,733.964 1230.84,782.407 1231.4,808.108 1231.96,798.364 1232.52,828.115 1233.08,838.018 1233.64,827.886 1234.2,786.925 1234.76,783.508 1235.32,761.592 1235.88,775.262 1236.44,773.782 1236.99,782.92 1237.55,781.329 1238.11,793.076 1238.67,756.625 1239.23,719.4 1239.79,719.458 1240.35,767.955 1240.91,765.051 1241.47,725.838 1242.03,723.636 1242.59,706.861 1243.15,689.62 1243.71,687.981 1244.26,686.712 1244.82,734.852 1245.38,748.448 1245.94,731.528 1246.5,698.285 1247.06,698.251 1247.62,745.737 1248.18,728.383 1248.74,710.685 1249.3,705.11 1249.86,670.007 1250.42,686.112 1250.98,670.854 1251.54,639.06 1252.09,655.082 1252.65,622.309 1253.21,592.633 1253.77,599.274 1254.33,591.46 1254.89,625.419 1255.45,613.371 1256.01,603.232 1256.57,574.248 1257.13,561.43 1257.69,570.003 1258.25,577.069 1258.81,601.457 1259.36,590.758 1259.92,596.835 1260.48,583.235 1261.04,573.883 1261.6,579.596 1262.16,568.932 1262.72,608.111 1263.28,613.43 1263.84,617.667 1264.4,622.268 1264.96,625.504 1265.52,625.549 1266.08,646.019 1266.63,647.35 1267.19,598.185 1267.75,585.637 1268.31,591.487 1268.87,594.311 1269.43,599.168 1269.99,601.522 1270.55,573.463 1271.11,630.101 1271.67,650.366 1272.23,618.12 1272.79,653.386 1273.35,674.569 1273.91,660.501 1274.46,679.299 1275.02,633.876 1275.58,668.622 1276.14,669.508 1276.7,720.355 1277.26,720.618 1277.82,717.655 1278.38,719.51 1278.94,692.506 1279.5,660.073 1280.06,659.57 1280.62,628.689 1281.18,632.194 1281.73,684.262 1282.29,715.719 1282.85,699.396 1283.41,645.422 1283.97,621.162 1284.53,674.58 1285.09,675.108 1285.65,676.756 1286.21,694.545 1286.77,663.657 1287.33,633.273 1287.89,636.697 1288.45,675.524 1289,674.941 1289.56,691.383 1290.12,708.511 1290.68,690.786 1291.24,688.919 1291.8,705.669 1292.36,702.001 1292.92,714.208 1293.48,697.485 1294.04,713.731 1294.6,699.295 1295.16,696.836 1295.72,662.102 1296.28,665.455 1296.83,620.759 1297.39,605.722 1297.95,612.698 1298.51,601.844 1299.07,571.52 1299.63,563.039 1300.19,540.831 1300.75,581.949 1301.31,602.7 1301.87,588.434 1302.43,610.932 1302.99,615.337 1303.55,651.78 1304.1,656.605 1304.66,657.782 1305.22,674.003 1305.78,692.462 1306.34,707.75 1306.9,717.596 1307.46,744.95 1308.02,757.525 1308.58,740.58 1309.14,768.156 1309.7,763.525 1310.26,791.478 1310.82,818.508 1311.38,793.744 1311.93,769.808 1312.49,759.394 1313.05,752.272 1313.61,747.348 1314.17,743.206 1314.73,707.55 1315.29,744.137 1315.85,713.192 1316.41,682.081 1316.97,650.619 1317.53,653.193 1318.09,637.836 1318.65,640.875 1319.2,659.29 1319.76,646.086 1320.32,648.15 1320.88,603.027 1321.44,607.359 1322,609.593 1322.56,616.934 1323.12,619.135 1323.68,622.554 1324.24,659.489 1324.8,694.291 1325.36,660.372 1325.92,695.631 1326.47,712.599 1327.03,761.981 1327.59,772.253 1328.15,734.722 1328.71,749.672 1329.27,729.267 1329.83,698.086 1330.39,713.237 1330.95,694.637 1331.51,662.049 1332.07,597.705 1332.63,569.758 1333.19,575.607 1333.75,565.7 1334.3,587.811 1334.86,580.599 1335.42,571.052 1335.98,608.918 1336.54,648.921 1337.1,650.933 1337.66,682.635 1338.22,667.167 1338.78,664.764 1339.34,647.686 1339.9,667.378 1340.46,682.757 1341.02,698.182 1341.57,742.46 1342.13,734.888 1342.69,752.136 1343.25,710.711 1343.81,709.171 1344.37,737.381 1344.93,735.551 1345.49,699.275 1346.05,713.066 1346.61,708.24 1347.17,707.03 1347.73,708.228 1348.29,687.298 1348.84,718.483 1349.4,733.729 1349.96,735.527 1350.52,716.821 1351.08,701.229 1351.64,698.666 1352.2,680.69 1352.76,681.363 1353.32,667.348 1353.88,651.841 1354.44,668.967 1355,669.28 1355.56,687.056 1356.12,687.218 1356.67,684.293 1357.23,669.334 1357.79,669.873 1358.35,670.722 1358.91,705.771 1359.47,687.21 1360.03,690.399 1360.59,642.531 1361.15,680.962 1361.71,683.921 1362.27,713.996 1362.83,728.073 1363.39,756.207 1363.94,750.485 1364.5,750.492 1365.06,748.431 1365.62,761.337 1366.18,724.675 1366.74,706.646 1367.3,690.314 1367.86,658.903 1368.42,672.586 1368.98,654.983 1369.54,654.273 1370.1,688.142 1370.66,704.271 1371.21,701.924 1371.77,667.646 1372.33,700.912 1372.89,719.265 1373.45,716.763 1374.01,700.519 1374.57,724.983 1375.13,723.854 1375.69,718.208 1376.25,763.998 1376.81,792.458 1377.37,788.45 1377.93,765.317 1378.49,759.561 1379.04,754.893 1379.6,731.906 1380.16,713.185 1380.72,695.794 1381.28,697.734 1381.84,698.593 1382.4,699.547 1382.96,716.717 1383.52,681.568 1384.08,648.223 1384.64,583.063 1385.2,574.489 1385.76,610.077 1386.31,613.275 1386.87,645.774 1387.43,627.25 1387.99,644.186 1388.55,646.606 1389.11,629.018 1389.67,647.882 1390.23,636.491 1390.79,636.939 1391.35,654.802 1391.91,705.797 1392.47,748.188 1393.03,773.754 1393.58,750.755 1394.14,728.25 1394.7,729.861 1395.26,710.128 1395.82,724.826 1396.38,726.236 1396.94,726.685 1397.5,772.433 1398.06,799.901 1398.62,794.165 1399.18,788.301 1399.74,795.076 1400.3,786.173 1400.86,747.717 1401.41,709.183 1401.97,691.486 1402.53,673.95 1403.09,658.956 1403.65,642.619 1404.21,645.899 1404.77,664.12 1405.33,650.301 1405.89,684.887 1406.45,689.395 1407.01,721.9 1407.57,717.389 1408.13,731.264 1408.68,731.767 1409.24,745.382 1409.8,705.543 1410.36,701.518 1410.92,715.973 1411.48,713.494 1412.04,724.796 1412.6,750.433 1413.16,730.449 1413.72,731.44 1414.28,727.456 1414.84,728.656 1415.4,707.575 1415.95,707.09 1416.51,722.899 1417.07,706.067 1417.63,705.533 1418.19,672.333 1418.75,670.968 1419.31,683.052 1419.87,716.691 1420.43,731.083 1420.99,709.548 1421.55,757.34 1422.11,752.401 1422.67,729.629 1423.23,711.66 1423.78,693.285 1424.34,692.398 1424.9,708.958 1425.46,727.971 1426.02,756.635 1426.58,784.214 1427.14,778.311 1427.7,741.187 1428.26,722.204 1428.82,721.38 1429.38,685.936 1429.94,687.36 1430.5,669.144 1431.05,654.743 1431.61,655.613 1432.17,641.056 1432.73,625.494 1433.29,646.769 1433.85,647.246 1434.41,649.25 1434.97,634.303 1435.53,669.281 1436.09,654.957 1436.65,676.416 1437.21,689.198 1437.77,673.031 1438.33,671.489 1438.88,671.628 1439.44,655.57 1440,655.922 1440.56,642.396 1441.12,644.48 1441.68,631.437 1442.24,666.443 1442.8,632.363 1443.36,632.327 1443.92,671.229 1444.48,643.054 1445.04,627.292 1445.6,615.458 1446.15,618.606 1446.71,617.206 1447.27,586.752 1447.83,571.777 1448.39,595.589 1448.95,567.005 1449.51,560.168 1450.07,551.915 1450.63,544.145 1451.19,568.351 1451.75,575.746 1452.31,564.82 1452.87,574.953 1453.42,580.174 1453.98,571.938 1454.54,595.4 1455.1,582.317 1455.66,558.106 1456.22,567.51 1456.78,575.749 1457.34,565.844 1457.9,604.191 1458.46,624.074 1459.02,631.374 1459.58,617.49 1460.14,652.58 1460.7,688.659 1461.25,704.389 1461.81,720.886 1462.37,734.673 1462.93,719.265 1463.49,673.908 1464.05,692.093 1464.61,692.164 1465.17,709.077 1465.73,706.669 1466.29,721.178 1466.85,751.46 1467.41,781.594 1467.97,794.628 1468.52,740.153 1469.08,740.77 1469.64,786.223 1470.2,768.894 1470.76,762.875 1471.32,761.61 1471.88,743.918 1472.44,726.037 1473,725.754 1473.56,739.506 1474.12,754.161 1474.68,740.16 1475.24,740.236 1475.79,721.021 1476.35,768.721 1476.91,749.159 1477.47,759.969 1478.03,737.694 1478.59,734.358 1479.15,731.844 1479.71,713.801 1480.27,725.952 1480.83,709.269 1481.39,690.157 1481.95,706.367 1482.51,722.831 1483.07,754.979 1483.62,787.154 1484.18,816.021 1484.74,859.465 1485.3,818.042 1485.86,811.718 1486.42,790.543 1486.98,770.791 1487.54,767.883 1488.1,780.581 1488.66,788.855 1489.22,798.192 1489.78,776.938 1490.34,688.646 1490.89,659.999 1491.45,660.713 1492.01,679.342 1492.57,645.752 1493.13,629.307 1493.69,630.833 1494.25,632.585 1494.81,603.631 1495.37,607.016 1495.93,593.807 1496.49,598.704 1497.05,619.533 1497.61,641.321 1498.16,647.86 1498.72,649.272 1499.28,652.593 1499.84,655.388 1500.4,672.983 1500.96,657.762 1501.52,656.714 1502.08,623.949 1502.64,644.999 1503.2,662.282 1503.76,661.977 1504.32,646.633 1504.88,665.347 1505.44,670.045 1505.99,672.337 1506.55,672.708 1507.11,670.816 1507.67,659.827 1508.23,659.345 1508.79,663.868 1509.35,668.055 1509.91,703.401 1510.47,684.146 1511.03,731.769 1511.59,729.636 1512.15,757.342 1512.71,722.262 1513.26,719.716 1513.82,701.642 1514.38,734.306 1514.94,714.363 1515.5,697.625 1516.06,663.781 1516.62,663.274 1517.18,661.07 1517.74,595.266 1518.3,598.243 1518.86,619.564 1519.42,642.82 1519.98,628.79 1520.53,646.317 1521.09,648.169 1521.65,668.436 1522.21,684.421 1522.77,703.065 1523.33,718.959 1523.89,696.34 1524.45,694.543 1525.01,741.292 1525.57,734.682 1526.13,714.658 1526.69,717.621 1527.25,735.118 1527.81,732.873 1528.36,746.284 1528.92,715.586 1529.48,698.161 1530.04,681.396 1530.6,679.353 1531.16,715.506 1531.72,713.782 1532.28,683.293 1532.84,732.863 1533.4,716.268 1533.96,715.561 1534.52,761.771 1535.08,743.886 1535.63,737.567 1536.19,732.457 1536.75,713.554 1537.31,714.176 1537.87,697.701 1538.43,715.609 1538.99,714.153 1539.55,710.931 1540.11,712.232 1540.67,712.799 1541.23,713.509 1541.79,727.783 1542.35,723.045 1542.9,735.293 1543.46,749.582 1544.02,745.601 1544.58,739.845 1545.14,747.509 1545.7,694.28 1546.26,664.249 1546.82,666.739 1547.38,699.47 1547.94,664.697 1548.5,665.608 1549.06,683.781 1549.62,683.117 1550.18,666.088 1550.73,685.268 1551.29,699.484 1551.85,679.772 1552.41,726.781 1552.97,741.478 1553.53,753.623 1554.09,718.33 1554.65,700.213 1555.21,652.837 1555.77,640.952 1556.33,639.542 1556.89,658.861 1557.45,644.258 1558,645.388 1558.56,679.432 1559.12,696.964 1559.68,745.492 1560.24,742.963 1560.8,709.144 1561.36,709.38 1561.92,721.202 1562.48,669.794 1563.04,622.061 1563.6,605.88 1564.16,595.58 1564.72,598.48 1565.28,603.636 1565.83,625.612 1566.39,646.422 1566.95,631.103 1567.51,634.555 1568.07,637.556 1568.63,622.822 1569.19,624.119 1569.75,626.301 1570.31,659.666 1570.87,657.475 1571.43,657.85 1571.99,673.381 1572.55,691.474 1573.1,689.53 1573.66,688.546 1574.22,690.138 1574.78,707.828 1575.34,691.451 1575.9,692.094 1576.46,707.102 1577.02,686.918 1577.58,671.394 1578.14,719.131 1578.7,702.643 1579.26,714.367 1579.82,712.532 1580.37,727.085 1580.93,741.922 1581.49,769.269 1582.05,748.535 1582.61,743.251 1583.17,709.289 1583.73,675.61 1584.29,693.253 1584.85,692.575 1585.41,676.887 1585.97,677.287 1586.53,680.448 1587.09,662.214 1587.65,663.799 1588.2,713.773 1588.76,697.06 1589.32,729.44 1589.88,770.08 1590.44,768.012 1591,779.894 1591.56,791.133 1592.12,767.743 1592.68,793.641 1593.24,752.243 1593.8,780.076 1594.36,775.337 1594.92,820.707 1595.47,796.038 1596.03,776.346 1596.59,755.248 1597.15,783.382 1597.71,746.151 1598.27,724.472 1598.83,735.85 1599.39,729.834 1599.95,744.024 1600.51,674.766 1601.07,687.439 1601.63,668.139 1602.19,652.952 1602.74,624.363 1603.3,607.683 1603.86,645.936 1604.42,647.46 1604.98,683.655 1605.54,667.781 1606.1,697.868 1606.66,681.84 1607.22,649.651 1607.78,670.703 1608.34,656.866 1608.9,621.685 1609.46,625.804 1610.02,615.222 1610.57,634.782 1611.13,617.97 1611.69,603.029 1612.25,623.227 1612.81,632.496 1613.37,651.602 1613.93,603.71 1614.49,573.718 1615.05,596.114 1615.61,597.662 1616.17,584.393 1616.73,602.971 1617.29,590.696 1617.84,592.3 1618.4,631.136 1618.96,621.236 1619.52,621.869 1620.08,639.532 1620.64,656.183 1621.2,671.398 1621.76,653.316 1622.32,654.192 1622.88,641.142 1623.44,642.57 1624,662.029 1624.56,650.238 1625.11,619.686 1625.67,640.321 1626.23,626.926 1626.79,616.487 1627.35,620.307 1627.91,623.128 1628.47,627.804 1629.03,633.025 1629.59,650.304 1630.15,668.634 1630.71,720.1 1631.27,716.26 1631.83,732.969 1632.39,729.867 1632.94,710.529 1633.5,710.176 1634.06,693.825 1634.62,691.886 1635.18,691.054 1635.74,757.719 1636.3,769.141 1636.86,766.364 1637.42,762.774 1637.98,789.213 1638.54,765.918 1639.1,745.962 1639.66,757.609 1640.21,740.515 1640.77,751.983 1641.33,716.984 1641.89,716.587 1642.45,704.42 1643.01,639.669 1643.57,642.252 1644.13,631.281 1644.69,666.564 1645.25,651.849 1645.81,653.434 1646.37,689.279 1646.93,706.681 1647.48,702.536 1648.04,718.883 1648.6,733.576 1649.16,665.155 1649.72,664.592 1650.28,666.89 1650.84,683.534 1651.4,681.962 1651.96,633.909 1652.52,636.008 1653.08,638.12 1653.64,691.87 1654.2,677.082 1654.76,678.756 1655.31,691.874 1655.87,691.25 1656.43,674.902 1656.99,692.13 1657.55,665.069 1658.11,668.06 1658.67,684.5 1659.23,713.799 1659.79,728.113 1660.35,679.714 1660.91,677.476 1661.47,694.196 1662.03,677.574 1662.58,691.367 1663.14,692.321 1663.7,688.312 1664.26,705.832 1664.82,675.715 1665.38,661.154 1665.94,632.253 1666.5,651.238 1667.06,684.507 1667.62,698.839 1668.18,712.914 1668.74,745.501 1669.3,710.753 1669.85,677.389 1670.41,665.619 1670.97,649.43 1671.53,636.082 1672.09,639.366 1672.65,624.122 1673.21,642.882 1673.77,662.297 1674.33,666.644 1674.89,667.173 1675.45,635.134 1676.01,605.507 1676.57,655.547 1677.13,672.688 1677.68,673.187 1678.24,656.125 1678.8,670.754 1679.36,658.2 1679.92,656.665 1680.48,662.691 1681.04,646.71 1681.6,635.042 1682.16,639.473 1682.72,691.253 1683.28,691.133 1683.84,707.625 1684.4,708.439 1684.95,673.503 1685.51,658.114 1686.07,662.857 1686.63,648.776 1687.19,636.649 1687.75,637.549 1688.31,670.083 1688.87,620.761 1689.43,641.452 1689.99,645.755 1690.55,650.203 1691.11,651.205 1691.67,651.227 1692.23,651.84 1692.78,654.378 1693.34,674.114 1693.9,625.153 1694.46,614.351 1695.02,616.452 1695.58,634.828 1696.14,605.45 1696.7,611.609 1697.26,632.172 1697.82,635.45 1698.38,654.59 1698.94,653.374 1699.5,654.746 1700.05,673.825 1700.61,706.096 1701.17,666.953 1701.73,669.523 1702.29,654.653 1702.85,639.486 1703.41,624.741 1703.97,613.418 1704.53,634.789 1705.09,637.64 1705.65,621.831 1706.21,576.73 1706.77,646.676 1707.32,644.979 1707.88,663.06 1708.44,665.954 1709,682.034 1709.56,665.695 1710.12,662.694 1710.68,667.357 1711.24,689.576 1711.8,669.324 1712.36,675.212 1712.92,692.886 1713.48,679.206 1714.04,629.454 1714.6,628.61 1715.15,614.966 1715.71,634.776 1716.27,636.67 1716.83,653.445 1717.39,656.467 1717.95,623.057 1718.51,627.328 1719.07,615.243 1719.63,639.214 1720.19,641.801 1720.75,641.973 1721.31,646.049 1721.87,649.702 1722.42,620.257 1722.98,606.554 1723.54,628.687 1724.1,611.797 1724.66,633.515 1725.22,666.241 1725.78,600.34 1726.34,590.767 1726.9,596.746 1727.46,601.709 1728.02,605.896 1728.58,644.195 1729.14,664.496 1729.69,667.558 1730.25,681.978 1730.81,699.434 1731.37,695.98 1731.93,710.253 1732.49,709.289 1733.05,707.396 1733.61,737.117 1734.17,736.131 1734.73,749.764 1735.29,745.085 1735.85,728.479 1736.41,725.179 1736.97,755.946 1737.52,734.313 1738.08,717.586 1738.64,698.259 1739.2,699.025 1739.76,668.376 1740.32,672.608 1740.88,722.638 1741.44,717.113 1742,718.849 1742.56,683.635 1743.12,693.968 1743.68,675.453 1744.24,691.066 1744.79,692.801 1745.35,709.969 1745.91,723.756 1746.47,720.961 1747.03,752.185 1747.59,765.612 1748.15,748.671 1748.71,730.608 1749.27,744.981 1749.83,727.54 1750.39,738.974 1750.95,736.672 1751.51,698.915 1752.06,699.035 1752.62,694.498 1753.18,693.983 1753.74,711.426 1754.3,711.857 1754.86,711.625 1755.42,708.509 1755.98,706.469 1756.54,692.109 1757.1,704.537 1757.66,707.287 1758.22,723.787 1758.78,689.677 1759.34,678.186 1759.89,679.631 1760.45,696.519 1761.01,745.097 1761.57,709.439 1762.13,743.232 1762.69,755.366 1763.25,720.045 1763.81,751.024 1764.37,744.518 1764.93,725.827 1765.49,694.93 1766.05,677.595 1766.61,677.563 1767.16,713.078 1767.72,711.662 1768.28,690.601 1768.84,707.814 1769.4,691.578 1769.96,707.024 1770.52,690.41 1771.08,674.044 1771.64,689.245 1772.2,671.88 1772.76,655.547 1773.32,673.686 1773.88,691.001 1774.43,720.106 1774.99,684.43 1775.55,681.457 1776.11,681.074 1776.67,650.573 1777.23,671.041 1777.79,672.816 1778.35,673.909 1778.91,676.715 1779.47,644.65 1780.03,663.166 1780.59,662.757 1781.15,631.28 1781.71,634.308 1782.26,619.309 1782.82,639.071 1783.38,671.394 1783.94,668.964 1784.5,654.557 1785.06,658.264 1785.62,627.126 1786.18,643.79 1786.74,661.295 1787.3,675.287 1787.86,674.616 1788.42,676.57 1788.98,692.49 1789.53,689.82 1790.09,705.602 1790.65,686.394 1791.21,672.437 1791.77,671.336 1792.33,724.249 1792.89,722.635 1793.45,735.639 1794.01,734.972 1794.57,701.556 1795.13,695.266 1795.69,692.416 1796.25,693.596 1796.8,724.8 1797.36,689.357 1797.92,640.739 1798.48,672.972 1799.04,673.715 1799.6,643.504 1800.16,646.874 1800.72,634.011 1801.28,670.718 1801.84,668.782 1802.4,686.322 1802.96,697.405 1803.52,697.061 1804.08,693.184 1804.63,660.778 1805.19,658.291 1805.75,659.74 1806.31,678.959 1806.87,693.924 1807.43,664.866 1807.99,681.596 1808.55,713.773 1809.11,742.397 1809.67,754.58 1810.23,750.059 1810.79,732.75 1811.35,711.854 1811.9,728.417 1812.46,705.777 1813.02,704.385 1813.58,702.624 1814.14,697.566 1814.7,729.865 1815.26,728.829 1815.82,714.107 1816.38,712.785 1816.94,726.549 1817.5,757.858 1818.06,737.019 1818.62,747.236 1819.18,747.385 1819.73,759.591 1820.29,755.917 1820.85,749.347 1821.41,728.109 1821.97,741.377 1822.53,707.081 1823.09,709.146 1823.65,692.367 1824.21,678.1 1824.77,692.648 1825.33,694.736 1825.89,709.808 1826.45,692.778 1827,725.178 1827.56,755.398 1828.12,749.615 1828.68,712.211 1829.24,694.327 1829.8,693.493 1830.36,676.984 1830.92,708.739 1831.48,722.437 1832.04,737.274 1832.6,700.944 1833.16,716.446 1833.72,698.426 1834.27,710.944 1834.83,726.728 1835.39,724.69 1835.95,772.163 1836.51,784.915 1837.07,796.792 1837.63,789.452 1838.19,801.899 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 690.607 L720.806 690.607 L721.365 690.607 L721.924 690.607 L722.484 690.607 L723.043 690.607 L723.602 690.607 L724.161 690.607 L724.721 690.607 L725.28 690.607 L725.839 690.607 L726.398 690.607 L726.958 690.607 L727.517 690.607 L728.076 690.607 L728.635 690.607 L729.195 690.607 L729.754 690.607 L730.313 690.607 L730.872 690.607 L731.432 690.607 L731.991 690.607 L732.55 690.607 L733.109 690.607 L733.669 690.607 L734.228 690.607 L734.787 690.607 L735.346 690.607 L735.906 690.607 L736.465 690.607 L737.024 690.607 L737.583 690.607 L738.143 690.607 L738.702 690.607 L739.261 690.607 L739.82 690.607 L740.38 690.607 L740.939 690.607 L741.498 690.607 L742.057 690.607 L742.617 690.607 L743.176 690.607 L743.735 690.607 L744.294 690.607 L744.854 690.607 L745.413 690.607 L745.972 690.607 L746.531 690.607 L747.091 690.607 L747.65 690.607 L748.209 690.607 L748.768 690.607 L749.328 690.607 L749.887 690.607 L750.446 690.607 L751.005 690.607 L751.565 690.607 L752.124 690.607 L752.683 690.607 L753.242 690.607 L753.802 690.607 L754.361 690.607 L754.92 690.607 L755.479 690.607 L756.039 690.607 L756.598 690.607 L757.157 690.607 L757.716 690.607 L758.276 690.607 L758.835 690.607 L759.394 690.607 L759.953 690.607 L760.513 690.607 L761.072 690.607 L761.631 690.607 L762.19 690.607 L762.75 690.607 L763.309 690.607 L763.868 690.607 L764.427 690.607 L764.987 690.607 L765.546 690.607 L766.105 690.607 L766.664 690.607 L767.224 690.607 L767.783 690.607 L768.342 690.607 L768.901 690.607 L769.461 690.607 L770.02 690.607 L770.579 690.607 L771.138 690.607 L771.698 690.607 L772.257 690.607 L772.816 690.607 L773.375 690.607 L773.935 690.607 L774.494 690.607 L775.053 690.607 L775.612 690.607 L776.172 690.607 L776.731 690.607 L777.29 690.607 L777.849 690.607 L778.409 690.607 L778.968 690.607 L779.527 690.607 L780.086 690.607 L780.646 690.607 L781.205 690.607 L781.764 690.607 L782.323 690.607 L782.883 690.607 L783.442 690.607 L784.001 690.607 L784.56 690.607 L785.12 690.607 L785.679 690.607 L786.238 690.607 L786.797 690.607 L787.357 690.607 L787.916 690.607 L788.475 690.607 L789.034 690.607 L789.594 690.607 L790.153 690.607 L790.712 690.607 L791.271 690.607 L791.831 690.607 L792.39 690.607 L792.949 690.607 L793.508 690.607 L794.068 690.607 L794.627 690.607 L795.186 690.607 L795.745 690.607 L796.305 690.607 L796.864 690.607 L797.423 690.607 L797.982 690.607 L798.542 690.607 L799.101 690.607 L799.66 690.607 L800.219 690.607 L800.779 690.607 L801.338 690.607 L801.897 690.607 L802.456 690.607 L803.016 690.607 L803.575 690.607 L804.134 690.607 L804.693 690.607 L805.253 690.607 L805.812 690.607 L806.371 690.607 L806.931 690.607 L807.49 690.607 L808.049 690.607 L808.608 690.607 L809.168 690.607 L809.727 690.607 L810.286 690.607 L810.845 690.607 L811.405 690.607 L811.964 690.607 L812.523 690.607 L813.082 690.607 L813.642 690.607 L814.201 690.607 L814.76 690.607 L815.319 690.607 L815.879 690.607 L816.438 690.607 L816.997 690.607 L817.556 690.607 L818.116 690.607 L818.675 690.607 L819.234 690.607 L819.793 690.607 L820.353 690.607 L820.912 690.607 L821.471 690.607 L822.03 690.607 L822.59 690.607 L823.149 690.607 L823.708 690.607 L824.267 690.607 L824.827 690.607 L825.386 690.607 L825.945 690.607 L826.504 690.607 L827.064 690.607 L827.623 690.607 L828.182 690.607 L828.741 690.607 L829.301 690.607 L829.86 690.607 L830.419 690.607 L830.978 690.607 L831.538 690.607 L832.097 690.607 L832.656 690.607 L833.215 690.607 L833.775 690.607 L834.334 690.607 L834.893 690.607 L835.452 690.607 L836.012 690.607 L836.571 690.607 L837.13 690.607 L837.689 690.607 L838.249 690.607 L838.808 690.607 L839.367 690.607 L839.926 690.607 L840.486 690.607 L841.045 690.607 L841.604 690.607 L842.163 690.607 L842.723 690.607 L843.282 690.607 L843.841 690.607 L844.4 690.607 L844.96 690.607 L845.519 690.607 L846.078 690.607 L846.637 690.607 L847.197 690.607 L847.756 690.607 L848.315 690.607 L848.874 690.607 L849.434 690.607 L849.993 690.607 L850.552 690.607 L851.111 690.607 L851.671 690.607 L852.23 690.607 L852.789 690.607 L853.348 690.607 L853.908 690.607 L854.467 690.607 L855.026 690.607 L855.585 690.607 L856.145 690.607 L856.704 690.607 L857.263 690.607 L857.822 690.607 L858.382 690.607 L858.941 690.607 L859.5 690.607 L860.059 690.607 L860.619 690.607 L861.178 690.607 L861.737 690.607 L862.296 690.607 L862.856 690.607 L863.415 690.607 L863.974 690.607 L864.533 690.607 L865.093 690.607 L865.652 690.607 L866.211 690.607 L866.77 690.607 L867.33 690.607 L867.889 690.607 L868.448 690.607 L869.007 690.607 L869.567 690.607 L870.126 690.607 L870.685 690.607 L871.244 690.607 L871.804 690.607 L872.363 690.607 L872.922 690.607 L873.481 690.607 L874.041 690.607 L874.6 690.607 L875.159 690.607 L875.718 690.607 L876.278 690.607 L876.837 690.607 L877.396 690.607 L877.955 690.607 L878.515 690.607 L879.074 690.607 L879.633 690.607 L880.192 690.607 L880.752 690.607 L881.311 690.607 L881.87 690.607 L882.429 690.607 L882.989 690.607 L883.548 690.607 L884.107 690.607 L884.666 690.607 L885.226 690.607 L885.785 690.607 L886.344 690.607 L886.903 690.607 L887.463 690.607 L888.022 690.607 L888.581 690.607 L889.14 690.607 L889.7 690.607 L890.259 690.607 L890.818 690.607 L891.377 690.607 L891.937 690.607 L892.496 690.607 L893.055 690.607 L893.614 690.607 L894.174 690.607 L894.733 690.607 L895.292 690.607 L895.851 690.607 L896.411 690.607 L896.97 690.607 L897.529 690.607 L898.088 690.607 L898.648 690.607 L899.207 690.607 L899.766 690.607 L900.325 690.607 L900.885 690.607 L901.444 690.607 L902.003 690.607 L902.562 690.607 L903.122 690.607 L903.681 690.607 L904.24 690.607 L904.799 690.607 L905.359 690.607 L905.918 690.607 L906.477 690.607 L907.036 690.607 L907.596 690.607 L908.155 690.607 L908.714 690.607 L909.273 690.607 L909.833 690.607 L910.392 690.607 L910.951 690.607 L911.51 690.607 L912.07 690.607 L912.629 690.607 L913.188 690.607 L913.747 690.607 L914.307 690.607 L914.866 690.607 L915.425 690.607 L915.984 690.607 L916.544 690.607 L917.103 690.607 L917.662 690.607 L918.221 690.607 L918.781 690.607 L919.34 690.607 L919.899 690.607 L920.458 690.607 L921.018 690.607 L921.577 690.607 L922.136 690.607 L922.695 690.607 L923.255 690.607 L923.814 690.607 L924.373 690.607 L924.932 690.607 L925.492 690.607 L926.051 690.607 L926.61 690.607 L927.169 690.607 L927.729 690.607 L928.288 690.607 L928.847 690.607 L929.406 690.607 L929.966 690.607 L930.525 690.607 L931.084 690.607 L931.644 690.607 L932.203 690.607 L932.762 690.607 L933.321 690.607 L933.881 690.607 L934.44 690.607 L934.999 690.607 L935.558 690.607 L936.118 690.607 L936.677 690.607 L937.236 690.607 L937.795 690.607 L938.355 690.607 L938.914 690.607 L939.473 690.607 L940.032 690.607 L940.592 690.607 L941.151 690.607 L941.71 690.607 L942.269 690.607 L942.829 690.607 L943.388 690.607 L943.947 690.607 L944.506 690.607 L945.066 690.607 L945.625 690.607 L946.184 690.607 L946.743 690.607 L947.303 690.607 L947.862 690.607 L948.421 690.607 L948.98 690.607 L949.54 690.607 L950.099 690.607 L950.658 690.607 L951.217 690.607 L951.777 690.607 L952.336 690.607 L952.895 690.607 L953.454 690.607 L954.014 690.607 L954.573 690.607 L955.132 690.607 L955.691 690.607 L956.251 690.607 L956.81 690.607 L957.369 690.607 L957.928 690.607 L958.488 690.607 L959.047 690.607 L959.606 690.607 L960.165 690.607 L960.725 690.607 L961.284 690.607 L961.843 690.607 L962.402 690.607 L962.962 690.607 L963.521 690.607 L964.08 690.607 L964.639 690.607 L965.199 690.607 L965.758 690.607 L966.317 690.607 L966.876 690.607 L967.436 690.607 L967.995 690.607 L968.554 690.607 L969.113 690.607 L969.673 690.607 L970.232 690.607 L970.791 690.607 L971.35 690.607 L971.91 690.607 L972.469 690.607 L973.028 690.607 L973.587 690.607 L974.147 690.607 L974.706 690.607 L975.265 690.607 L975.824 690.607 L976.384 690.607 L976.943 690.607 L977.502 690.607 L978.061 690.607 L978.621 690.607 L979.18 690.607 L979.739 690.607 L980.298 690.607 L980.858 690.607 L981.417 690.607 L981.976 690.607 L982.535 690.607 L983.095 690.607 L983.654 690.607 L984.213 690.607 L984.772 690.607 L985.332 690.607 L985.891 690.607 L986.45 690.607 L987.009 690.607 L987.569 690.607 L988.128 690.607 L988.687 690.607 L989.246 690.607 L989.806 690.607 L990.365 690.607 L990.924 690.607 L991.483 690.607 L992.043 690.607 L992.602 690.607 L993.161 690.607 L993.72 690.607 L994.28 690.607 L994.839 690.607 L995.398 690.607 L995.957 690.607 L996.517 690.607 L997.076 690.607 L997.635 690.607 L998.194 690.607 L998.754 690.607 L999.313 690.607 L999.872 690.607 L1000.43 690.607 L1000.99 690.607 L1001.55 690.607 L1002.11 690.607 L1002.67 690.607 L1003.23 690.607 L1003.79 690.607 L1004.35 690.607 L1004.91 690.607 L1005.46 690.607 L1006.02 690.607 L1006.58 690.607 L1007.14 690.607 L1007.7 690.607 L1008.26 690.607 L1008.82 690.607 L1009.38 690.607 L1009.94 690.607 L1010.5 690.607 L1011.06 690.607 L1011.62 690.607 L1012.18 690.607 L1012.73 690.607 L1013.29 690.607 L1013.85 690.607 L1014.41 690.607 L1014.97 690.607 L1015.53 690.607 L1016.09 690.607 L1016.65 690.607 L1017.21 690.607 L1017.77 690.607 L1018.33 690.607 L1018.89 690.607 L1019.45 690.607 L1020.01 690.607 L1020.56 690.607 L1021.12 690.607 L1021.68 690.607 L1022.24 690.607 L1022.8 690.607 L1023.36 690.607 L1023.92 690.607 L1024.48 690.607 L1025.04 690.607 L1025.6 690.607 L1026.16 690.607 L1026.72 690.607 L1027.28 690.607 L1027.83 690.607 L1028.39 690.607 L1028.95 690.607 L1029.51 690.607 L1030.07 690.607 L1030.63 690.607 L1031.19 690.607 L1031.75 690.607 L1032.31 690.607 L1032.87 690.607 L1033.43 690.607 L1033.99 690.607 L1034.55 690.607 L1035.1 690.607 L1035.66 690.607 L1036.22 690.607 L1036.78 690.607 L1037.34 690.607 L1037.9 690.607 L1038.46 690.607 L1039.02 690.607 L1039.58 690.607 L1040.14 690.607 L1040.7 690.607 L1041.26 690.607 L1041.82 690.607 L1042.38 690.607 L1042.93 690.607 L1043.49 690.607 L1044.05 690.607 L1044.61 690.607 L1045.17 690.607 L1045.73 690.607 L1046.29 690.607 L1046.85 690.607 L1047.41 690.607 L1047.97 690.607 L1048.53 690.607 L1049.09 690.607 L1049.65 690.607 L1050.2 690.607 L1050.76 690.607 L1051.32 690.607 L1051.88 690.607 L1052.44 690.607 L1053 690.607 L1053.56 690.607 L1054.12 690.607 L1054.68 690.607 L1055.24 690.607 L1055.8 690.607 L1056.36 690.607 L1056.92 690.607 L1057.48 690.607 L1058.03 690.607 L1058.59 690.607 L1059.15 690.607 L1059.71 690.607 L1060.27 690.607 L1060.83 690.607 L1061.39 690.607 L1061.95 690.607 L1062.51 690.607 L1063.07 690.607 L1063.63 690.607 L1064.19 690.607 L1064.75 690.607 L1065.3 690.607 L1065.86 690.607 L1066.42 690.607 L1066.98 690.607 L1067.54 690.607 L1068.1 690.607 L1068.66 690.607 L1069.22 690.607 L1069.78 690.607 L1070.34 690.607 L1070.9 690.607 L1071.46 690.607 L1072.02 690.607 L1072.57 690.607 L1073.13 690.607 L1073.69 690.607 L1074.25 690.607 L1074.81 690.607 L1075.37 690.607 L1075.93 690.607 L1076.49 690.607 L1077.05 690.607 L1077.61 690.607 L1078.17 690.607 L1078.73 690.607 L1079.29 690.607 L1079.85 690.607 L1080.4 690.607 L1080.96 690.607 L1081.52 690.607 L1082.08 690.607 L1082.64 690.607 L1083.2 690.607 L1083.76 690.607 L1084.32 690.607 L1084.88 690.607 L1085.44 690.607 L1086 690.607 L1086.56 690.607 L1087.12 690.607 L1087.67 690.607 L1088.23 690.607 L1088.79 690.607 L1089.35 690.607 L1089.91 690.607 L1090.47 690.607 L1091.03 690.607 L1091.59 690.607 L1092.15 690.607 L1092.71 690.607 L1093.27 690.607 L1093.83 690.607 L1094.39 690.607 L1094.94 690.607 L1095.5 690.607 L1096.06 690.607 L1096.62 690.607 L1097.18 690.607 L1097.74 690.607 L1098.3 690.607 L1098.86 690.607 L1099.42 690.607 L1099.98 690.607 L1100.54 690.607 L1101.1 690.607 L1101.66 690.607 L1102.22 690.607 L1102.77 690.607 L1103.33 690.607 L1103.89 690.607 L1104.45 690.607 L1105.01 690.607 L1105.57 690.607 L1106.13 690.607 L1106.69 690.607 L1107.25 690.607 L1107.81 690.607 L1108.37 690.607 L1108.93 690.607 L1109.49 690.607 L1110.04 690.607 L1110.6 690.607 L1111.16 690.607 L1111.72 690.607 L1112.28 690.607 L1112.84 690.607 L1113.4 690.607 L1113.96 690.607 L1114.52 690.607 L1115.08 690.607 L1115.64 690.607 L1116.2 690.607 L1116.76 690.607 L1117.31 690.607 L1117.87 690.607 L1118.43 690.607 L1118.99 690.607 L1119.55 690.607 L1120.11 690.607 L1120.67 690.607 L1121.23 690.607 L1121.79 690.607 L1122.35 690.607 L1122.91 690.607 L1123.47 690.607 L1124.03 690.607 L1124.59 690.607 L1125.14 690.607 L1125.7 690.607 L1126.26 690.607 L1126.82 690.607 L1127.38 690.607 L1127.94 690.607 L1128.5 690.607 L1129.06 690.607 L1129.62 690.607 L1130.18 690.607 L1130.74 690.607 L1131.3 690.607 L1131.86 690.607 L1132.41 690.607 L1132.97 690.607 L1133.53 690.607 L1134.09 690.607 L1134.65 690.607 L1135.21 690.607 L1135.77 690.607 L1136.33 690.607 L1136.89 690.607 L1137.45 690.607 L1138.01 690.607 L1138.57 690.607 L1139.13 690.607 L1139.68 690.607 L1140.24 690.607 L1140.8 690.607 L1141.36 690.607 L1141.92 690.607 L1142.48 690.607 L1143.04 690.607 L1143.6 690.607 L1144.16 690.607 L1144.72 690.607 L1145.28 690.607 L1145.84 690.607 L1146.4 690.607 L1146.96 690.607 L1147.51 690.607 L1148.07 690.607 L1148.63 690.607 L1149.19 690.607 L1149.75 690.607 L1150.31 690.607 L1150.87 690.607 L1151.43 690.607 L1151.99 690.607 L1152.55 690.607 L1153.11 690.607 L1153.67 690.607 L1154.23 690.607 L1154.78 690.607 L1155.34 690.607 L1155.9 690.607 L1156.46 690.607 L1157.02 690.607 L1157.58 690.607 L1158.14 690.607 L1158.7 690.607 L1159.26 690.607 L1159.82 690.607 L1160.38 690.607 L1160.94 690.607 L1161.5 690.607 L1162.05 690.607 L1162.61 690.607 L1163.17 690.607 L1163.73 690.607 L1164.29 690.607 L1164.85 690.607 L1165.41 690.607 L1165.97 690.607 L1166.53 690.607 L1167.09 690.607 L1167.65 690.607 L1168.21 690.607 L1168.77 690.607 L1169.33 690.607 L1169.88 690.607 L1170.44 690.607 L1171 690.607 L1171.56 690.607 L1172.12 690.607 L1172.68 690.607 L1173.24 690.607 L1173.8 690.607 L1174.36 690.607 L1174.92 690.607 L1175.48 690.607 L1176.04 690.607 L1176.6 690.607 L1177.15 690.607 L1177.71 690.607 L1178.27 690.607 L1178.83 690.607 L1179.39 690.607 L1179.95 690.607 L1180.51 690.607 L1181.07 690.607 L1181.63 690.607 L1182.19 690.607 L1182.75 690.607 L1183.31 690.607 L1183.87 690.607 L1184.43 690.607 L1184.98 690.607 L1185.54 690.607 L1186.1 690.607 L1186.66 690.607 L1187.22 690.607 L1187.78 690.607 L1188.34 690.607 L1188.9 690.607 L1189.46 690.607 L1190.02 690.607 L1190.58 690.607 L1191.14 690.607 L1191.7 690.607 L1192.25 690.607 L1192.81 690.607 L1193.37 690.607 L1193.93 690.607 L1194.49 690.607 L1195.05 690.607 L1195.61 690.607 L1196.17 690.607 L1196.73 690.607 L1197.29 690.607 L1197.85 690.607 L1198.41 690.607 L1198.97 690.607 L1199.52 690.607 L1200.08 690.607 L1200.64 690.607 L1201.2 690.607 L1201.76 690.607 L1202.32 690.607 L1202.88 690.607 L1203.44 690.607 L1204 690.607 L1204.56 690.607 L1205.12 690.607 L1205.68 690.607 L1206.24 690.607 L1206.8 690.607 L1207.35 690.607 L1207.91 690.607 L1208.47 690.607 L1209.03 690.607 L1209.59 690.607 L1210.15 690.607 L1210.71 690.607 L1211.27 690.607 L1211.83 690.607 L1212.39 690.607 L1212.95 690.607 L1213.51 690.607 L1214.07 690.607 L1214.62 690.607 L1215.18 690.607 L1215.74 690.607 L1216.3 690.607 L1216.86 690.607 L1217.42 690.607 L1217.98 690.607 L1218.54 690.607 L1219.1 690.607 L1219.66 690.607 L1220.22 690.607 L1220.78 690.607 L1221.34 690.607 L1221.89 690.607 L1222.45 690.607 L1223.01 690.607 L1223.57 690.607 L1224.13 690.607 L1224.69 690.607 L1225.25 690.607 L1225.81 690.607 L1226.37 690.607 L1226.93 690.607 L1227.49 690.607 L1228.05 690.607 L1228.61 690.607 L1229.17 690.607 L1229.72 690.607 L1230.28 690.607 L1230.84 690.607 L1231.4 690.607 L1231.96 690.607 L1232.52 690.607 L1233.08 690.607 L1233.64 690.607 L1234.2 690.607 L1234.76 690.607 L1235.32 690.607 L1235.88 690.607 L1236.44 690.607 L1236.99 690.607 L1237.55 690.607 L1238.11 690.607 L1238.67 690.607 L1239.23 690.607 L1239.79 690.607 L1240.35 690.607 L1240.91 690.607 L1241.47 690.607 L1242.03 690.607 L1242.59 690.607 L1243.15 690.607 L1243.71 690.607 L1244.26 690.607 L1244.82 690.607 L1245.38 690.607 L1245.94 690.607 L1246.5 690.607 L1247.06 690.607 L1247.62 690.607 L1248.18 690.607 L1248.74 690.607 L1249.3 690.607 L1249.86 690.607 L1250.42 690.607 L1250.98 690.607 L1251.54 690.607 L1252.09 690.607 L1252.65 690.607 L1253.21 690.607 L1253.77 690.607 L1254.33 690.607 L1254.89 690.607 L1255.45 690.607 L1256.01 690.607 L1256.57 690.607 L1257.13 690.607 L1257.69 690.607 L1258.25 690.607 L1258.81 690.607 L1259.36 690.607 L1259.92 690.607 L1260.48 690.607 L1261.04 690.607 L1261.6 690.607 L1262.16 690.607 L1262.72 690.607 L1263.28 690.607 L1263.84 690.607 L1264.4 690.607 L1264.96 690.607 L1265.52 690.607 L1266.08 690.607 L1266.63 690.607 L1267.19 690.607 L1267.75 690.607 L1268.31 690.607 L1268.87 690.607 L1269.43 690.607 L1269.99 690.607 L1270.55 690.607 L1271.11 690.607 L1271.67 690.607 L1272.23 690.607 L1272.79 690.607 L1273.35 690.607 L1273.91 690.607 L1274.46 690.607 L1275.02 690.607 L1275.58 690.607 L1276.14 690.607 L1276.7 690.607 L1277.26 690.607 L1277.82 690.607 L1278.38 690.607 L1278.94 690.607 L1279.5 690.607 L1280.06 690.607 L1280.62 690.607 L1281.18 690.607 L1281.73 690.607 L1282.29 690.607 L1282.85 690.607 L1283.41 690.607 L1283.97 690.607 L1284.53 690.607 L1285.09 690.607 L1285.65 690.607 L1286.21 690.607 L1286.77 690.607 L1287.33 690.607 L1287.89 690.607 L1288.45 690.607 L1289 690.607 L1289.56 690.607 L1290.12 690.607 L1290.68 690.607 L1291.24 690.607 L1291.8 690.607 L1292.36 690.607 L1292.92 690.607 L1293.48 690.607 L1294.04 690.607 L1294.6 690.607 L1295.16 690.607 L1295.72 690.607 L1296.28 690.607 L1296.83 690.607 L1297.39 690.607 L1297.95 690.607 L1298.51 690.607 L1299.07 690.607 L1299.63 690.607 L1300.19 690.607 L1300.75 690.607 L1301.31 690.607 L1301.87 690.607 L1302.43 690.607 L1302.99 690.607 L1303.55 690.607 L1304.1 690.607 L1304.66 690.607 L1305.22 690.607 L1305.78 690.607 L1306.34 690.607 L1306.9 690.607 L1307.46 690.607 L1308.02 690.607 L1308.58 690.607 L1309.14 690.607 L1309.7 690.607 L1310.26 690.607 L1310.82 690.607 L1311.38 690.607 L1311.93 690.607 L1312.49 690.607 L1313.05 690.607 L1313.61 690.607 L1314.17 690.607 L1314.73 690.607 L1315.29 690.607 L1315.85 690.607 L1316.41 690.607 L1316.97 690.607 L1317.53 690.607 L1318.09 690.607 L1318.65 690.607 L1319.2 690.607 L1319.76 690.607 L1320.32 690.607 L1320.88 690.607 L1321.44 690.607 L1322 690.607 L1322.56 690.607 L1323.12 690.607 L1323.68 690.607 L1324.24 690.607 L1324.8 690.607 L1325.36 690.607 L1325.92 690.607 L1326.47 690.607 L1327.03 690.607 L1327.59 690.607 L1328.15 690.607 L1328.71 690.607 L1329.27 690.607 L1329.83 690.607 L1330.39 690.607 L1330.95 690.607 L1331.51 690.607 L1332.07 690.607 L1332.63 690.607 L1333.19 690.607 L1333.75 690.607 L1334.3 690.607 L1334.86 690.607 L1335.42 690.607 L1335.98 690.607 L1336.54 690.607 L1337.1 690.607 L1337.66 690.607 L1338.22 690.607 L1338.78 690.607 L1339.34 690.607 L1339.9 690.607 L1340.46 690.607 L1341.02 690.607 L1341.57 690.607 L1342.13 690.607 L1342.69 690.607 L1343.25 690.607 L1343.81 690.607 L1344.37 690.607 L1344.93 690.607 L1345.49 690.607 L1346.05 690.607 L1346.61 690.607 L1347.17 690.607 L1347.73 690.607 L1348.29 690.607 L1348.84 690.607 L1349.4 690.607 L1349.96 690.607 L1350.52 690.607 L1351.08 690.607 L1351.64 690.607 L1352.2 690.607 L1352.76 690.607 L1353.32 690.607 L1353.88 690.607 L1354.44 690.607 L1355 690.607 L1355.56 690.607 L1356.12 690.607 L1356.67 690.607 L1357.23 690.607 L1357.79 690.607 L1358.35 690.607 L1358.91 690.607 L1359.47 690.607 L1360.03 690.607 L1360.59 690.607 L1361.15 690.607 L1361.71 690.607 L1362.27 690.607 L1362.83 690.607 L1363.39 690.607 L1363.94 690.607 L1364.5 690.607 L1365.06 690.607 L1365.62 690.607 L1366.18 690.607 L1366.74 690.607 L1367.3 690.607 L1367.86 690.607 L1368.42 690.607 L1368.98 690.607 L1369.54 690.607 L1370.1 690.607 L1370.66 690.607 L1371.21 690.607 L1371.77 690.607 L1372.33 690.607 L1372.89 690.607 L1373.45 690.607 L1374.01 690.607 L1374.57 690.607 L1375.13 690.607 L1375.69 690.607 L1376.25 690.607 L1376.81 690.607 L1377.37 690.607 L1377.93 690.607 L1378.49 690.607 L1379.04 690.607 L1379.6 690.607 L1380.16 690.607 L1380.72 690.607 L1381.28 690.607 L1381.84 690.607 L1382.4 690.607 L1382.96 690.607 L1383.52 690.607 L1384.08 690.607 L1384.64 690.607 L1385.2 690.607 L1385.76 690.607 L1386.31 690.607 L1386.87 690.607 L1387.43 690.607 L1387.99 690.607 L1388.55 690.607 L1389.11 690.607 L1389.67 690.607 L1390.23 690.607 L1390.79 690.607 L1391.35 690.607 L1391.91 690.607 L1392.47 690.607 L1393.03 690.607 L1393.58 690.607 L1394.14 690.607 L1394.7 690.607 L1395.26 690.607 L1395.82 690.607 L1396.38 690.607 L1396.94 690.607 L1397.5 690.607 L1398.06 690.607 L1398.62 690.607 L1399.18 690.607 L1399.74 690.607 L1400.3 690.607 L1400.86 690.607 L1401.41 690.607 L1401.97 690.607 L1402.53 690.607 L1403.09 690.607 L1403.65 690.607 L1404.21 690.607 L1404.77 690.607 L1405.33 690.607 L1405.89 690.607 L1406.45 690.607 L1407.01 690.607 L1407.57 690.607 L1408.13 690.607 L1408.68 690.607 L1409.24 690.607 L1409.8 690.607 L1410.36 690.607 L1410.92 690.607 L1411.48 690.607 L1412.04 690.607 L1412.6 690.607 L1413.16 690.607 L1413.72 690.607 L1414.28 690.607 L1414.84 690.607 L1415.4 690.607 L1415.95 690.607 L1416.51 690.607 L1417.07 690.607 L1417.63 690.607 L1418.19 690.607 L1418.75 690.607 L1419.31 690.607 L1419.87 690.607 L1420.43 690.607 L1420.99 690.607 L1421.55 690.607 L1422.11 690.607 L1422.67 690.607 L1423.23 690.607 L1423.78 690.607 L1424.34 690.607 L1424.9 690.607 L1425.46 690.607 L1426.02 690.607 L1426.58 690.607 L1427.14 690.607 L1427.7 690.607 L1428.26 690.607 L1428.82 690.607 L1429.38 690.607 L1429.94 690.607 L1430.5 690.607 L1431.05 690.607 L1431.61 690.607 L1432.17 690.607 L1432.73 690.607 L1433.29 690.607 L1433.85 690.607 L1434.41 690.607 L1434.97 690.607 L1435.53 690.607 L1436.09 690.607 L1436.65 690.607 L1437.21 690.607 L1437.77 690.607 L1438.33 690.607 L1438.88 690.607 L1439.44 690.607 L1440 690.607 L1440.56 690.607 L1441.12 690.607 L1441.68 690.607 L1442.24 690.607 L1442.8 690.607 L1443.36 690.607 L1443.92 690.607 L1444.48 690.607 L1445.04 690.607 L1445.6 690.607 L1446.15 690.607 L1446.71 690.607 L1447.27 690.607 L1447.83 690.607 L1448.39 690.607 L1448.95 690.607 L1449.51 690.607 L1450.07 690.607 L1450.63 690.607 L1451.19 690.607 L1451.75 690.607 L1452.31 690.607 L1452.87 690.607 L1453.42 690.607 L1453.98 690.607 L1454.54 690.607 L1455.1 690.607 L1455.66 690.607 L1456.22 690.607 L1456.78 690.607 L1457.34 690.607 L1457.9 690.607 L1458.46 690.607 L1459.02 690.607 L1459.58 690.607 L1460.14 690.607 L1460.7 690.607 L1461.25 690.607 L1461.81 690.607 L1462.37 690.607 L1462.93 690.607 L1463.49 690.607 L1464.05 690.607 L1464.61 690.607 L1465.17 690.607 L1465.73 690.607 L1466.29 690.607 L1466.85 690.607 L1467.41 690.607 L1467.97 690.607 L1468.52 690.607 L1469.08 690.607 L1469.64 690.607 L1470.2 690.607 L1470.76 690.607 L1471.32 690.607 L1471.88 690.607 L1472.44 690.607 L1473 690.607 L1473.56 690.607 L1474.12 690.607 L1474.68 690.607 L1475.24 690.607 L1475.79 690.607 L1476.35 690.607 L1476.91 690.607 L1477.47 690.607 L1478.03 690.607 L1478.59 690.607 L1479.15 690.607 L1479.71 690.607 L1480.27 690.607 L1480.83 690.607 L1481.39 690.607 L1481.95 690.607 L1482.51 690.607 L1483.07 690.607 L1483.62 690.607 L1484.18 690.607 L1484.74 690.607 L1485.3 690.607 L1485.86 690.607 L1486.42 690.607 L1486.98 690.607 L1487.54 690.607 L1488.1 690.607 L1488.66 690.607 L1489.22 690.607 L1489.78 690.607 L1490.34 690.607 L1490.89 690.607 L1491.45 690.607 L1492.01 690.607 L1492.57 690.607 L1493.13 690.607 L1493.69 690.607 L1494.25 690.607 L1494.81 690.607 L1495.37 690.607 L1495.93 690.607 L1496.49 690.607 L1497.05 690.607 L1497.61 690.607 L1498.16 690.607 L1498.72 690.607 L1499.28 690.607 L1499.84 690.607 L1500.4 690.607 L1500.96 690.607 L1501.52 690.607 L1502.08 690.607 L1502.64 690.607 L1503.2 690.607 L1503.76 690.607 L1504.32 690.607 L1504.88 690.607 L1505.44 690.607 L1505.99 690.607 L1506.55 690.607 L1507.11 690.607 L1507.67 690.607 L1508.23 690.607 L1508.79 690.607 L1509.35 690.607 L1509.91 690.607 L1510.47 690.607 L1511.03 690.607 L1511.59 690.607 L1512.15 690.607 L1512.71 690.607 L1513.26 690.607 L1513.82 690.607 L1514.38 690.607 L1514.94 690.607 L1515.5 690.607 L1516.06 690.607 L1516.62 690.607 L1517.18 690.607 L1517.74 690.607 L1518.3 690.607 L1518.86 690.607 L1519.42 690.607 L1519.98 690.607 L1520.53 690.607 L1521.09 690.607 L1521.65 690.607 L1522.21 690.607 L1522.77 690.607 L1523.33 690.607 L1523.89 690.607 L1524.45 690.607 L1525.01 690.607 L1525.57 690.607 L1526.13 690.607 L1526.69 690.607 L1527.25 690.607 L1527.81 690.607 L1528.36 690.607 L1528.92 690.607 L1529.48 690.607 L1530.04 690.607 L1530.6 690.607 L1531.16 690.607 L1531.72 690.607 L1532.28 690.607 L1532.84 690.607 L1533.4 690.607 L1533.96 690.607 L1534.52 690.607 L1535.08 690.607 L1535.63 690.607 L1536.19 690.607 L1536.75 690.607 L1537.31 690.607 L1537.87 690.607 L1538.43 690.607 L1538.99 690.607 L1539.55 690.607 L1540.11 690.607 L1540.67 690.607 L1541.23 690.607 L1541.79 690.607 L1542.35 690.607 L1542.9 690.607 L1543.46 690.607 L1544.02 690.607 L1544.58 690.607 L1545.14 690.607 L1545.7 690.607 L1546.26 690.607 L1546.82 690.607 L1547.38 690.607 L1547.94 690.607 L1548.5 690.607 L1549.06 690.607 L1549.62 690.607 L1550.18 690.607 L1550.73 690.607 L1551.29 690.607 L1551.85 690.607 L1552.41 690.607 L1552.97 690.607 L1553.53 690.607 L1554.09 690.607 L1554.65 690.607 L1555.21 690.607 L1555.77 690.607 L1556.33 690.607 L1556.89 690.607 L1557.45 690.607 L1558 690.607 L1558.56 690.607 L1559.12 690.607 L1559.68 690.607 L1560.24 690.607 L1560.8 690.607 L1561.36 690.607 L1561.92 690.607 L1562.48 690.607 L1563.04 690.607 L1563.6 690.607 L1564.16 690.607 L1564.72 690.607 L1565.28 690.607 L1565.83 690.607 L1566.39 690.607 L1566.95 690.607 L1567.51 690.607 L1568.07 690.607 L1568.63 690.607 L1569.19 690.607 L1569.75 690.607 L1570.31 690.607 L1570.87 690.607 L1571.43 690.607 L1571.99 690.607 L1572.55 690.607 L1573.1 690.607 L1573.66 690.607 L1574.22 690.607 L1574.78 690.607 L1575.34 690.607 L1575.9 690.607 L1576.46 690.607 L1577.02 690.607 L1577.58 690.607 L1578.14 690.607 L1578.7 690.607 L1579.26 690.607 L1579.82 690.607 L1580.37 690.607 L1580.93 690.607 L1581.49 690.607 L1582.05 690.607 L1582.61 690.607 L1583.17 690.607 L1583.73 690.607 L1584.29 690.607 L1584.85 690.607 L1585.41 690.607 L1585.97 690.607 L1586.53 690.607 L1587.09 690.607 L1587.65 690.607 L1588.2 690.607 L1588.76 690.607 L1589.32 690.607 L1589.88 690.607 L1590.44 690.607 L1591 690.607 L1591.56 690.607 L1592.12 690.607 L1592.68 690.607 L1593.24 690.607 L1593.8 690.607 L1594.36 690.607 L1594.92 690.607 L1595.47 690.607 L1596.03 690.607 L1596.59 690.607 L1597.15 690.607 L1597.71 690.607 L1598.27 690.607 L1598.83 690.607 L1599.39 690.607 L1599.95 690.607 L1600.51 690.607 L1601.07 690.607 L1601.63 690.607 L1602.19 690.607 L1602.74 690.607 L1603.3 690.607 L1603.86 690.607 L1604.42 690.607 L1604.98 690.607 L1605.54 690.607 L1606.1 690.607 L1606.66 690.607 L1607.22 690.607 L1607.78 690.607 L1608.34 690.607 L1608.9 690.607 L1609.46 690.607 L1610.02 690.607 L1610.57 690.607 L1611.13 690.607 L1611.69 690.607 L1612.25 690.607 L1612.81 690.607 L1613.37 690.607 L1613.93 690.607 L1614.49 690.607 L1615.05 690.607 L1615.61 690.607 L1616.17 690.607 L1616.73 690.607 L1617.29 690.607 L1617.84 690.607 L1618.4 690.607 L1618.96 690.607 L1619.52 690.607 L1620.08 690.607 L1620.64 690.607 L1621.2 690.607 L1621.76 690.607 L1622.32 690.607 L1622.88 690.607 L1623.44 690.607 L1624 690.607 L1624.56 690.607 L1625.11 690.607 L1625.67 690.607 L1626.23 690.607 L1626.79 690.607 L1627.35 690.607 L1627.91 690.607 L1628.47 690.607 L1629.03 690.607 L1629.59 690.607 L1630.15 690.607 L1630.71 690.607 L1631.27 690.607 L1631.83 690.607 L1632.39 690.607 L1632.94 690.607 L1633.5 690.607 L1634.06 690.607 L1634.62 690.607 L1635.18 690.607 L1635.74 690.607 L1636.3 690.607 L1636.86 690.607 L1637.42 690.607 L1637.98 690.607 L1638.54 690.607 L1639.1 690.607 L1639.66 690.607 L1640.21 690.607 L1640.77 690.607 L1641.33 690.607 L1641.89 690.607 L1642.45 690.607 L1643.01 690.607 L1643.57 690.607 L1644.13 690.607 L1644.69 690.607 L1645.25 690.607 L1645.81 690.607 L1646.37 690.607 L1646.93 690.607 L1647.48 690.607 L1648.04 690.607 L1648.6 690.607 L1649.16 690.607 L1649.72 690.607 L1650.28 690.607 L1650.84 690.607 L1651.4 690.607 L1651.96 690.607 L1652.52 690.607 L1653.08 690.607 L1653.64 690.607 L1654.2 690.607 L1654.76 690.607 L1655.31 690.607 L1655.87 690.607 L1656.43 690.607 L1656.99 690.607 L1657.55 690.607 L1658.11 690.607 L1658.67 690.607 L1659.23 690.607 L1659.79 690.607 L1660.35 690.607 L1660.91 690.607 L1661.47 690.607 L1662.03 690.607 L1662.58 690.607 L1663.14 690.607 L1663.7 690.607 L1664.26 690.607 L1664.82 690.607 L1665.38 690.607 L1665.94 690.607 L1666.5 690.607 L1667.06 690.607 L1667.62 690.607 L1668.18 690.607 L1668.74 690.607 L1669.3 690.607 L1669.85 690.607 L1670.41 690.607 L1670.97 690.607 L1671.53 690.607 L1672.09 690.607 L1672.65 690.607 L1673.21 690.607 L1673.77 690.607 L1674.33 690.607 L1674.89 690.607 L1675.45 690.607 L1676.01 690.607 L1676.57 690.607 L1677.13 690.607 L1677.68 690.607 L1678.24 690.607 L1678.8 690.607 L1679.36 690.607 L1679.92 690.607 L1680.48 690.607 L1681.04 690.607 L1681.6 690.607 L1682.16 690.607 L1682.72 690.607 L1683.28 690.607 L1683.84 690.607 L1684.4 690.607 L1684.95 690.607 L1685.51 690.607 L1686.07 690.607 L1686.63 690.607 L1687.19 690.607 L1687.75 690.607 L1688.31 690.607 L1688.87 690.607 L1689.43 690.607 L1689.99 690.607 L1690.55 690.607 L1691.11 690.607 L1691.67 690.607 L1692.23 690.607 L1692.78 690.607 L1693.34 690.607 L1693.9 690.607 L1694.46 690.607 L1695.02 690.607 L1695.58 690.607 L1696.14 690.607 L1696.7 690.607 L1697.26 690.607 L1697.82 690.607 L1698.38 690.607 L1698.94 690.607 L1699.5 690.607 L1700.05 690.607 L1700.61 690.607 L1701.17 690.607 L1701.73 690.607 L1702.29 690.607 L1702.85 690.607 L1703.41 690.607 L1703.97 690.607 L1704.53 690.607 L1705.09 690.607 L1705.65 690.607 L1706.21 690.607 L1706.77 690.607 L1707.32 690.607 L1707.88 690.607 L1708.44 690.607 L1709 690.607 L1709.56 690.607 L1710.12 690.607 L1710.68 690.607 L1711.24 690.607 L1711.8 690.607 L1712.36 690.607 L1712.92 690.607 L1713.48 690.607 L1714.04 690.607 L1714.6 690.607 L1715.15 690.607 L1715.71 690.607 L1716.27 690.607 L1716.83 690.607 L1717.39 690.607 L1717.95 690.607 L1718.51 690.607 L1719.07 690.607 L1719.63 690.607 L1720.19 690.607 L1720.75 690.607 L1721.31 690.607 L1721.87 690.607 L1722.42 690.607 L1722.98 690.607 L1723.54 690.607 L1724.1 690.607 L1724.66 690.607 L1725.22 690.607 L1725.78 690.607 L1726.34 690.607 L1726.9 690.607 L1727.46 690.607 L1728.02 690.607 L1728.58 690.607 L1729.14 690.607 L1729.69 690.607 L1730.25 690.607 L1730.81 690.607 L1731.37 690.607 L1731.93 690.607 L1732.49 690.607 L1733.05 690.607 L1733.61 690.607 L1734.17 690.607 L1734.73 690.607 L1735.29 690.607 L1735.85 690.607 L1736.41 690.607 L1736.97 690.607 L1737.52 690.607 L1738.08 690.607 L1738.64 690.607 L1739.2 690.607 L1739.76 690.607 L1740.32 690.607 L1740.88 690.607 L1741.44 690.607 L1742 690.607 L1742.56 690.607 L1743.12 690.607 L1743.68 690.607 L1744.24 690.607 L1744.79 690.607 L1745.35 690.607 L1745.91 690.607 L1746.47 690.607 L1747.03 690.607 L1747.59 690.607 L1748.15 690.607 L1748.71 690.607 L1749.27 690.607 L1749.83 690.607 L1750.39 690.607 L1750.95 690.607 L1751.51 690.607 L1752.06 690.607 L1752.62 690.607 L1753.18 690.607 L1753.74 690.607 L1754.3 690.607 L1754.86 690.607 L1755.42 690.607 L1755.98 690.607 L1756.54 690.607 L1757.1 690.607 L1757.66 690.607 L1758.22 690.607 L1758.78 690.607 L1759.34 690.607 L1759.89 690.607 L1760.45 690.607 L1761.01 690.607 L1761.57 690.607 L1762.13 690.607 L1762.69 690.607 L1763.25 690.607 L1763.81 690.607 L1764.37 690.607 L1764.93 690.607 L1765.49 690.607 L1766.05 690.607 L1766.61 690.607 L1767.16 690.607 L1767.72 690.607 L1768.28 690.607 L1768.84 690.607 L1769.4 690.607 L1769.96 690.607 L1770.52 690.607 L1771.08 690.607 L1771.64 690.607 L1772.2 690.607 L1772.76 690.607 L1773.32 690.607 L1773.88 690.607 L1774.43 690.607 L1774.99 690.607 L1775.55 690.607 L1776.11 690.607 L1776.67 690.607 L1777.23 690.607 L1777.79 690.607 L1778.35 690.607 L1778.91 690.607 L1779.47 690.607 L1780.03 690.607 L1780.59 690.607 L1781.15 690.607 L1781.71 690.607 L1782.26 690.607 L1782.82 690.607 L1783.38 690.607 L1783.94 690.607 L1784.5 690.607 L1785.06 690.607 L1785.62 690.607 L1786.18 690.607 L1786.74 690.607 L1787.3 690.607 L1787.86 690.607 L1788.42 690.607 L1788.98 690.607 L1789.53 690.607 L1790.09 690.607 L1790.65 690.607 L1791.21 690.607 L1791.77 690.607 L1792.33 690.607 L1792.89 690.607 L1793.45 690.607 L1794.01 690.607 L1794.57 690.607 L1795.13 690.607 L1795.69 690.607 L1796.25 690.607 L1796.8 690.607 L1797.36 690.607 L1797.92 690.607 L1798.48 690.607 L1799.04 690.607 L1799.6 690.607 L1800.16 690.607 L1800.72 690.607 L1801.28 690.607 L1801.84 690.607 L1802.4 690.607 L1802.96 690.607 L1803.52 690.607 L1804.08 690.607 L1804.63 690.607 L1805.19 690.607 L1805.75 690.607 L1806.31 690.607 L1806.87 690.607 L1807.43 690.607 L1807.99 690.607 L1808.55 690.607 L1809.11 690.607 L1809.67 690.607 L1810.23 690.607 L1810.79 690.607 L1811.35 690.607 L1811.9 690.607 L1812.46 690.607 L1813.02 690.607 L1813.58 690.607 L1814.14 690.607 L1814.7 690.607 L1815.26 690.607 L1815.82 690.607 L1816.38 690.607 L1816.94 690.607 L1817.5 690.607 L1818.06 690.607 L1818.62 690.607 L1819.18 690.607 L1819.73 690.607 L1820.29 690.607 L1820.85 690.607 L1821.41 690.607 L1821.97 690.607 L1822.53 690.607 L1823.09 690.607 L1823.65 690.607 L1824.21 690.607 L1824.77 690.607 L1825.33 690.607 L1825.89 690.607 L1826.45 690.607 L1827 690.607 L1827.56 690.607 L1828.12 690.607 L1828.68 690.607 L1829.24 690.607 L1829.8 690.607 L1830.36 690.607 L1830.92 690.607 L1831.48 690.607 L1832.04 690.607 L1832.6 690.607 L1833.16 690.607 L1833.72 690.607 L1834.27 690.607 L1834.83 690.607 L1835.39 690.607 L1835.95 690.607 L1836.51 690.607 L1837.07 690.607 L1837.63 690.607 L1838.19 690.607 L1838.19 680.871 L1837.63 680.871 L1837.07 680.871 L1836.51 680.871 L1835.95 680.871 L1835.39 680.871 L1834.83 680.871 L1834.27 680.871 L1833.72 680.871 L1833.16 680.871 L1832.6 680.871 L1832.04 680.871 L1831.48 680.871 L1830.92 680.871 L1830.36 680.871 L1829.8 680.871 L1829.24 680.871 L1828.68 680.871 L1828.12 680.871 L1827.56 680.871 L1827 680.871 L1826.45 680.871 L1825.89 680.871 L1825.33 680.871 L1824.77 680.871 L1824.21 680.871 L1823.65 680.871 L1823.09 680.871 L1822.53 680.871 L1821.97 680.871 L1821.41 680.871 L1820.85 680.871 L1820.29 680.871 L1819.73 680.871 L1819.18 680.871 L1818.62 680.871 L1818.06 680.871 L1817.5 680.871 L1816.94 680.871 L1816.38 680.871 L1815.82 680.871 L1815.26 680.871 L1814.7 680.871 L1814.14 680.871 L1813.58 680.871 L1813.02 680.871 L1812.46 680.871 L1811.9 680.871 L1811.35 680.871 L1810.79 680.871 L1810.23 680.871 L1809.67 680.871 L1809.11 680.871 L1808.55 680.871 L1807.99 680.871 L1807.43 680.871 L1806.87 680.871 L1806.31 680.871 L1805.75 680.871 L1805.19 680.871 L1804.63 680.871 L1804.08 680.871 L1803.52 680.871 L1802.96 680.871 L1802.4 680.871 L1801.84 680.871 L1801.28 680.871 L1800.72 680.871 L1800.16 680.871 L1799.6 680.871 L1799.04 680.871 L1798.48 680.871 L1797.92 680.871 L1797.36 680.871 L1796.8 680.871 L1796.25 680.871 L1795.69 680.871 L1795.13 680.871 L1794.57 680.871 L1794.01 680.871 L1793.45 680.871 L1792.89 680.871 L1792.33 680.871 L1791.77 680.871 L1791.21 680.871 L1790.65 680.871 L1790.09 680.871 L1789.53 680.871 L1788.98 680.871 L1788.42 680.871 L1787.86 680.871 L1787.3 680.871 L1786.74 680.871 L1786.18 680.871 L1785.62 680.871 L1785.06 680.871 L1784.5 680.871 L1783.94 680.871 L1783.38 680.871 L1782.82 680.871 L1782.26 680.871 L1781.71 680.871 L1781.15 680.871 L1780.59 680.871 L1780.03 680.871 L1779.47 680.871 L1778.91 680.871 L1778.35 680.871 L1777.79 680.871 L1777.23 680.871 L1776.67 680.871 L1776.11 680.871 L1775.55 680.871 L1774.99 680.871 L1774.43 680.871 L1773.88 680.871 L1773.32 680.871 L1772.76 680.871 L1772.2 680.871 L1771.64 680.871 L1771.08 680.871 L1770.52 680.871 L1769.96 680.871 L1769.4 680.871 L1768.84 680.871 L1768.28 680.871 L1767.72 680.871 L1767.16 680.871 L1766.61 680.871 L1766.05 680.871 L1765.49 680.871 L1764.93 680.871 L1764.37 680.871 L1763.81 680.871 L1763.25 680.871 L1762.69 680.871 L1762.13 680.871 L1761.57 680.871 L1761.01 680.871 L1760.45 680.871 L1759.89 680.871 L1759.34 680.871 L1758.78 680.871 L1758.22 680.871 L1757.66 680.871 L1757.1 680.871 L1756.54 680.871 L1755.98 680.871 L1755.42 680.871 L1754.86 680.871 L1754.3 680.871 L1753.74 680.871 L1753.18 680.871 L1752.62 680.871 L1752.06 680.871 L1751.51 680.871 L1750.95 680.871 L1750.39 680.871 L1749.83 680.871 L1749.27 680.871 L1748.71 680.871 L1748.15 680.871 L1747.59 680.871 L1747.03 680.871 L1746.47 680.871 L1745.91 680.871 L1745.35 680.871 L1744.79 680.871 L1744.24 680.871 L1743.68 680.871 L1743.12 680.871 L1742.56 680.871 L1742 680.871 L1741.44 680.871 L1740.88 680.871 L1740.32 680.871 L1739.76 680.871 L1739.2 680.871 L1738.64 680.871 L1738.08 680.871 L1737.52 680.871 L1736.97 680.871 L1736.41 680.871 L1735.85 680.871 L1735.29 680.871 L1734.73 680.871 L1734.17 680.871 L1733.61 680.871 L1733.05 680.871 L1732.49 680.871 L1731.93 680.871 L1731.37 680.871 L1730.81 680.871 L1730.25 680.871 L1729.69 680.871 L1729.14 680.871 L1728.58 680.871 L1728.02 680.871 L1727.46 680.871 L1726.9 680.871 L1726.34 680.871 L1725.78 680.871 L1725.22 680.871 L1724.66 680.871 L1724.1 680.871 L1723.54 680.871 L1722.98 680.871 L1722.42 680.871 L1721.87 680.871 L1721.31 680.871 L1720.75 680.871 L1720.19 680.871 L1719.63 680.871 L1719.07 680.871 L1718.51 680.871 L1717.95 680.871 L1717.39 680.871 L1716.83 680.871 L1716.27 680.871 L1715.71 680.871 L1715.15 680.871 L1714.6 680.871 L1714.04 680.871 L1713.48 680.871 L1712.92 680.871 L1712.36 680.871 L1711.8 680.871 L1711.24 680.871 L1710.68 680.871 L1710.12 680.871 L1709.56 680.871 L1709 680.871 L1708.44 680.871 L1707.88 680.871 L1707.32 680.871 L1706.77 680.871 L1706.21 680.871 L1705.65 680.871 L1705.09 680.871 L1704.53 680.871 L1703.97 680.871 L1703.41 680.871 L1702.85 680.871 L1702.29 680.871 L1701.73 680.871 L1701.17 680.871 L1700.61 680.871 L1700.05 680.871 L1699.5 680.871 L1698.94 680.871 L1698.38 680.871 L1697.82 680.871 L1697.26 680.871 L1696.7 680.871 L1696.14 680.871 L1695.58 680.871 L1695.02 680.871 L1694.46 680.871 L1693.9 680.871 L1693.34 680.871 L1692.78 680.871 L1692.23 680.871 L1691.67 680.871 L1691.11 680.871 L1690.55 680.871 L1689.99 680.871 L1689.43 680.871 L1688.87 680.871 L1688.31 680.871 L1687.75 680.871 L1687.19 680.871 L1686.63 680.871 L1686.07 680.871 L1685.51 680.871 L1684.95 680.871 L1684.4 680.871 L1683.84 680.871 L1683.28 680.871 L1682.72 680.871 L1682.16 680.871 L1681.6 680.871 L1681.04 680.871 L1680.48 680.871 L1679.92 680.871 L1679.36 680.871 L1678.8 680.871 L1678.24 680.871 L1677.68 680.871 L1677.13 680.871 L1676.57 680.871 L1676.01 680.871 L1675.45 680.871 L1674.89 680.871 L1674.33 680.871 L1673.77 680.871 L1673.21 680.871 L1672.65 680.871 L1672.09 680.871 L1671.53 680.871 L1670.97 680.871 L1670.41 680.871 L1669.85 680.871 L1669.3 680.871 L1668.74 680.871 L1668.18 680.871 L1667.62 680.871 L1667.06 680.871 L1666.5 680.871 L1665.94 680.871 L1665.38 680.871 L1664.82 680.871 L1664.26 680.871 L1663.7 680.871 L1663.14 680.871 L1662.58 680.871 L1662.03 680.871 L1661.47 680.871 L1660.91 680.871 L1660.35 680.871 L1659.79 680.871 L1659.23 680.871 L1658.67 680.871 L1658.11 680.871 L1657.55 680.871 L1656.99 680.871 L1656.43 680.871 L1655.87 680.871 L1655.31 680.871 L1654.76 680.871 L1654.2 680.871 L1653.64 680.871 L1653.08 680.871 L1652.52 680.871 L1651.96 680.871 L1651.4 680.871 L1650.84 680.871 L1650.28 680.871 L1649.72 680.871 L1649.16 680.871 L1648.6 680.871 L1648.04 680.871 L1647.48 680.871 L1646.93 680.871 L1646.37 680.871 L1645.81 680.871 L1645.25 680.871 L1644.69 680.871 L1644.13 680.871 L1643.57 680.871 L1643.01 680.871 L1642.45 680.871 L1641.89 680.871 L1641.33 680.871 L1640.77 680.871 L1640.21 680.871 L1639.66 680.871 L1639.1 680.871 L1638.54 680.871 L1637.98 680.871 L1637.42 680.871 L1636.86 680.871 L1636.3 680.871 L1635.74 680.871 L1635.18 680.871 L1634.62 680.871 L1634.06 680.871 L1633.5 680.871 L1632.94 680.871 L1632.39 680.871 L1631.83 680.871 L1631.27 680.871 L1630.71 680.871 L1630.15 680.871 L1629.59 680.871 L1629.03 680.871 L1628.47 680.871 L1627.91 680.871 L1627.35 680.871 L1626.79 680.871 L1626.23 680.871 L1625.67 680.871 L1625.11 680.871 L1624.56 680.871 L1624 680.871 L1623.44 680.871 L1622.88 680.871 L1622.32 680.871 L1621.76 680.871 L1621.2 680.871 L1620.64 680.871 L1620.08 680.871 L1619.52 680.871 L1618.96 680.871 L1618.4 680.871 L1617.84 680.871 L1617.29 680.871 L1616.73 680.871 L1616.17 680.871 L1615.61 680.871 L1615.05 680.871 L1614.49 680.871 L1613.93 680.871 L1613.37 680.871 L1612.81 680.871 L1612.25 680.871 L1611.69 680.871 L1611.13 680.871 L1610.57 680.871 L1610.02 680.871 L1609.46 680.871 L1608.9 680.871 L1608.34 680.871 L1607.78 680.871 L1607.22 680.871 L1606.66 680.871 L1606.1 680.871 L1605.54 680.871 L1604.98 680.871 L1604.42 680.871 L1603.86 680.871 L1603.3 680.871 L1602.74 680.871 L1602.19 680.871 L1601.63 680.871 L1601.07 680.871 L1600.51 680.871 L1599.95 680.871 L1599.39 680.871 L1598.83 680.871 L1598.27 680.871 L1597.71 680.871 L1597.15 680.871 L1596.59 680.871 L1596.03 680.871 L1595.47 680.871 L1594.92 680.871 L1594.36 680.871 L1593.8 680.871 L1593.24 680.871 L1592.68 680.871 L1592.12 680.871 L1591.56 680.871 L1591 680.871 L1590.44 680.871 L1589.88 680.871 L1589.32 680.871 L1588.76 680.871 L1588.2 680.871 L1587.65 680.871 L1587.09 680.871 L1586.53 680.871 L1585.97 680.871 L1585.41 680.871 L1584.85 680.871 L1584.29 680.871 L1583.73 680.871 L1583.17 680.871 L1582.61 680.871 L1582.05 680.871 L1581.49 680.871 L1580.93 680.871 L1580.37 680.871 L1579.82 680.871 L1579.26 680.871 L1578.7 680.871 L1578.14 680.871 L1577.58 680.871 L1577.02 680.871 L1576.46 680.871 L1575.9 680.871 L1575.34 680.871 L1574.78 680.871 L1574.22 680.871 L1573.66 680.871 L1573.1 680.871 L1572.55 680.871 L1571.99 680.871 L1571.43 680.871 L1570.87 680.871 L1570.31 680.871 L1569.75 680.871 L1569.19 680.871 L1568.63 680.871 L1568.07 680.871 L1567.51 680.871 L1566.95 680.871 L1566.39 680.871 L1565.83 680.871 L1565.28 680.871 L1564.72 680.871 L1564.16 680.871 L1563.6 680.871 L1563.04 680.871 L1562.48 680.871 L1561.92 680.871 L1561.36 680.871 L1560.8 680.871 L1560.24 680.871 L1559.68 680.871 L1559.12 680.871 L1558.56 680.871 L1558 680.871 L1557.45 680.871 L1556.89 680.871 L1556.33 680.871 L1555.77 680.871 L1555.21 680.871 L1554.65 680.871 L1554.09 680.871 L1553.53 680.871 L1552.97 680.871 L1552.41 680.871 L1551.85 680.871 L1551.29 680.871 L1550.73 680.871 L1550.18 680.871 L1549.62 680.871 L1549.06 680.871 L1548.5 680.871 L1547.94 680.871 L1547.38 680.871 L1546.82 680.871 L1546.26 680.871 L1545.7 680.871 L1545.14 680.871 L1544.58 680.871 L1544.02 680.871 L1543.46 680.871 L1542.9 680.871 L1542.35 680.871 L1541.79 680.871 L1541.23 680.871 L1540.67 680.871 L1540.11 680.871 L1539.55 680.871 L1538.99 680.871 L1538.43 680.871 L1537.87 680.871 L1537.31 680.871 L1536.75 680.871 L1536.19 680.871 L1535.63 680.871 L1535.08 680.871 L1534.52 680.871 L1533.96 680.871 L1533.4 680.871 L1532.84 680.871 L1532.28 680.871 L1531.72 680.871 L1531.16 680.871 L1530.6 680.871 L1530.04 680.871 L1529.48 680.871 L1528.92 680.871 L1528.36 680.871 L1527.81 680.871 L1527.25 680.871 L1526.69 680.871 L1526.13 680.871 L1525.57 680.871 L1525.01 680.871 L1524.45 680.871 L1523.89 680.871 L1523.33 680.871 L1522.77 680.871 L1522.21 680.871 L1521.65 680.871 L1521.09 680.871 L1520.53 680.871 L1519.98 680.871 L1519.42 680.871 L1518.86 680.871 L1518.3 680.871 L1517.74 680.871 L1517.18 680.871 L1516.62 680.871 L1516.06 680.871 L1515.5 680.871 L1514.94 680.871 L1514.38 680.871 L1513.82 680.871 L1513.26 680.871 L1512.71 680.871 L1512.15 680.871 L1511.59 680.871 L1511.03 680.871 L1510.47 680.871 L1509.91 680.871 L1509.35 680.871 L1508.79 680.871 L1508.23 680.871 L1507.67 680.871 L1507.11 680.871 L1506.55 680.871 L1505.99 680.871 L1505.44 680.871 L1504.88 680.871 L1504.32 680.871 L1503.76 680.871 L1503.2 680.871 L1502.64 680.871 L1502.08 680.871 L1501.52 680.871 L1500.96 680.871 L1500.4 680.871 L1499.84 680.871 L1499.28 680.871 L1498.72 680.871 L1498.16 680.871 L1497.61 680.871 L1497.05 680.871 L1496.49 680.871 L1495.93 680.871 L1495.37 680.871 L1494.81 680.871 L1494.25 680.871 L1493.69 680.871 L1493.13 680.871 L1492.57 680.871 L1492.01 680.871 L1491.45 680.871 L1490.89 680.871 L1490.34 680.871 L1489.78 680.871 L1489.22 680.871 L1488.66 680.871 L1488.1 680.871 L1487.54 680.871 L1486.98 680.871 L1486.42 680.871 L1485.86 680.871 L1485.3 680.871 L1484.74 680.871 L1484.18 680.871 L1483.62 680.871 L1483.07 680.871 L1482.51 680.871 L1481.95 680.871 L1481.39 680.871 L1480.83 680.871 L1480.27 680.871 L1479.71 680.871 L1479.15 680.871 L1478.59 680.871 L1478.03 680.871 L1477.47 680.871 L1476.91 680.871 L1476.35 680.871 L1475.79 680.871 L1475.24 680.871 L1474.68 680.871 L1474.12 680.871 L1473.56 680.871 L1473 680.871 L1472.44 680.871 L1471.88 680.871 L1471.32 680.871 L1470.76 680.871 L1470.2 680.871 L1469.64 680.871 L1469.08 680.871 L1468.52 680.871 L1467.97 680.871 L1467.41 680.871 L1466.85 680.871 L1466.29 680.871 L1465.73 680.871 L1465.17 680.871 L1464.61 680.871 L1464.05 680.871 L1463.49 680.871 L1462.93 680.871 L1462.37 680.871 L1461.81 680.871 L1461.25 680.871 L1460.7 680.871 L1460.14 680.871 L1459.58 680.871 L1459.02 680.871 L1458.46 680.871 L1457.9 680.871 L1457.34 680.871 L1456.78 680.871 L1456.22 680.871 L1455.66 680.871 L1455.1 680.871 L1454.54 680.871 L1453.98 680.871 L1453.42 680.871 L1452.87 680.871 L1452.31 680.871 L1451.75 680.871 L1451.19 680.871 L1450.63 680.871 L1450.07 680.871 L1449.51 680.871 L1448.95 680.871 L1448.39 680.871 L1447.83 680.871 L1447.27 680.871 L1446.71 680.871 L1446.15 680.871 L1445.6 680.871 L1445.04 680.871 L1444.48 680.871 L1443.92 680.871 L1443.36 680.871 L1442.8 680.871 L1442.24 680.871 L1441.68 680.871 L1441.12 680.871 L1440.56 680.871 L1440 680.871 L1439.44 680.871 L1438.88 680.871 L1438.33 680.871 L1437.77 680.871 L1437.21 680.871 L1436.65 680.871 L1436.09 680.871 L1435.53 680.871 L1434.97 680.871 L1434.41 680.871 L1433.85 680.871 L1433.29 680.871 L1432.73 680.871 L1432.17 680.871 L1431.61 680.871 L1431.05 680.871 L1430.5 680.871 L1429.94 680.871 L1429.38 680.871 L1428.82 680.871 L1428.26 680.871 L1427.7 680.871 L1427.14 680.871 L1426.58 680.871 L1426.02 680.871 L1425.46 680.871 L1424.9 680.871 L1424.34 680.871 L1423.78 680.871 L1423.23 680.871 L1422.67 680.871 L1422.11 680.871 L1421.55 680.871 L1420.99 680.871 L1420.43 680.871 L1419.87 680.871 L1419.31 680.871 L1418.75 680.871 L1418.19 680.871 L1417.63 680.871 L1417.07 680.871 L1416.51 680.871 L1415.95 680.871 L1415.4 680.871 L1414.84 680.871 L1414.28 680.871 L1413.72 680.871 L1413.16 680.871 L1412.6 680.871 L1412.04 680.871 L1411.48 680.871 L1410.92 680.871 L1410.36 680.871 L1409.8 680.871 L1409.24 680.871 L1408.68 680.871 L1408.13 680.871 L1407.57 680.871 L1407.01 680.871 L1406.45 680.871 L1405.89 680.871 L1405.33 680.871 L1404.77 680.871 L1404.21 680.871 L1403.65 680.871 L1403.09 680.871 L1402.53 680.871 L1401.97 680.871 L1401.41 680.871 L1400.86 680.871 L1400.3 680.871 L1399.74 680.871 L1399.18 680.871 L1398.62 680.871 L1398.06 680.871 L1397.5 680.871 L1396.94 680.871 L1396.38 680.871 L1395.82 680.871 L1395.26 680.871 L1394.7 680.871 L1394.14 680.871 L1393.58 680.871 L1393.03 680.871 L1392.47 680.871 L1391.91 680.871 L1391.35 680.871 L1390.79 680.871 L1390.23 680.871 L1389.67 680.871 L1389.11 680.871 L1388.55 680.871 L1387.99 680.871 L1387.43 680.871 L1386.87 680.871 L1386.31 680.871 L1385.76 680.871 L1385.2 680.871 L1384.64 680.871 L1384.08 680.871 L1383.52 680.871 L1382.96 680.871 L1382.4 680.871 L1381.84 680.871 L1381.28 680.871 L1380.72 680.871 L1380.16 680.871 L1379.6 680.871 L1379.04 680.871 L1378.49 680.871 L1377.93 680.871 L1377.37 680.871 L1376.81 680.871 L1376.25 680.871 L1375.69 680.871 L1375.13 680.871 L1374.57 680.871 L1374.01 680.871 L1373.45 680.871 L1372.89 680.871 L1372.33 680.871 L1371.77 680.871 L1371.21 680.871 L1370.66 680.871 L1370.1 680.871 L1369.54 680.871 L1368.98 680.871 L1368.42 680.871 L1367.86 680.871 L1367.3 680.871 L1366.74 680.871 L1366.18 680.871 L1365.62 680.871 L1365.06 680.871 L1364.5 680.871 L1363.94 680.871 L1363.39 680.871 L1362.83 680.871 L1362.27 680.871 L1361.71 680.871 L1361.15 680.871 L1360.59 680.871 L1360.03 680.871 L1359.47 680.871 L1358.91 680.871 L1358.35 680.871 L1357.79 680.871 L1357.23 680.871 L1356.67 680.871 L1356.12 680.871 L1355.56 680.871 L1355 680.871 L1354.44 680.871 L1353.88 680.871 L1353.32 680.871 L1352.76 680.871 L1352.2 680.871 L1351.64 680.871 L1351.08 680.871 L1350.52 680.871 L1349.96 680.871 L1349.4 680.871 L1348.84 680.871 L1348.29 680.871 L1347.73 680.871 L1347.17 680.871 L1346.61 680.871 L1346.05 680.871 L1345.49 680.871 L1344.93 680.871 L1344.37 680.871 L1343.81 680.871 L1343.25 680.871 L1342.69 680.871 L1342.13 680.871 L1341.57 680.871 L1341.02 680.871 L1340.46 680.871 L1339.9 680.871 L1339.34 680.871 L1338.78 680.871 L1338.22 680.871 L1337.66 680.871 L1337.1 680.871 L1336.54 680.871 L1335.98 680.871 L1335.42 680.871 L1334.86 680.871 L1334.3 680.871 L1333.75 680.871 L1333.19 680.871 L1332.63 680.871 L1332.07 680.871 L1331.51 680.871 L1330.95 680.871 L1330.39 680.871 L1329.83 680.871 L1329.27 680.871 L1328.71 680.871 L1328.15 680.871 L1327.59 680.871 L1327.03 680.871 L1326.47 680.871 L1325.92 680.871 L1325.36 680.871 L1324.8 680.871 L1324.24 680.871 L1323.68 680.871 L1323.12 680.871 L1322.56 680.871 L1322 680.871 L1321.44 680.871 L1320.88 680.871 L1320.32 680.871 L1319.76 680.871 L1319.2 680.871 L1318.65 680.871 L1318.09 680.871 L1317.53 680.871 L1316.97 680.871 L1316.41 680.871 L1315.85 680.871 L1315.29 680.871 L1314.73 680.871 L1314.17 680.871 L1313.61 680.871 L1313.05 680.871 L1312.49 680.871 L1311.93 680.871 L1311.38 680.871 L1310.82 680.871 L1310.26 680.871 L1309.7 680.871 L1309.14 680.871 L1308.58 680.871 L1308.02 680.871 L1307.46 680.871 L1306.9 680.871 L1306.34 680.871 L1305.78 680.871 L1305.22 680.871 L1304.66 680.871 L1304.1 680.871 L1303.55 680.871 L1302.99 680.871 L1302.43 680.871 L1301.87 680.871 L1301.31 680.871 L1300.75 680.871 L1300.19 680.871 L1299.63 680.871 L1299.07 680.871 L1298.51 680.871 L1297.95 680.871 L1297.39 680.871 L1296.83 680.871 L1296.28 680.871 L1295.72 680.871 L1295.16 680.871 L1294.6 680.871 L1294.04 680.871 L1293.48 680.871 L1292.92 680.871 L1292.36 680.871 L1291.8 680.871 L1291.24 680.871 L1290.68 680.871 L1290.12 680.871 L1289.56 680.871 L1289 680.871 L1288.45 680.871 L1287.89 680.871 L1287.33 680.871 L1286.77 680.871 L1286.21 680.871 L1285.65 680.871 L1285.09 680.871 L1284.53 680.871 L1283.97 680.871 L1283.41 680.871 L1282.85 680.871 L1282.29 680.871 L1281.73 680.871 L1281.18 680.871 L1280.62 680.871 L1280.06 680.871 L1279.5 680.871 L1278.94 680.871 L1278.38 680.871 L1277.82 680.871 L1277.26 680.871 L1276.7 680.871 L1276.14 680.871 L1275.58 680.871 L1275.02 680.871 L1274.46 680.871 L1273.91 680.871 L1273.35 680.871 L1272.79 680.871 L1272.23 680.871 L1271.67 680.871 L1271.11 680.871 L1270.55 680.871 L1269.99 680.871 L1269.43 680.871 L1268.87 680.871 L1268.31 680.871 L1267.75 680.871 L1267.19 680.871 L1266.63 680.871 L1266.08 680.871 L1265.52 680.871 L1264.96 680.871 L1264.4 680.871 L1263.84 680.871 L1263.28 680.871 L1262.72 680.871 L1262.16 680.871 L1261.6 680.871 L1261.04 680.871 L1260.48 680.871 L1259.92 680.871 L1259.36 680.871 L1258.81 680.871 L1258.25 680.871 L1257.69 680.871 L1257.13 680.871 L1256.57 680.871 L1256.01 680.871 L1255.45 680.871 L1254.89 680.871 L1254.33 680.871 L1253.77 680.871 L1253.21 680.871 L1252.65 680.871 L1252.09 680.871 L1251.54 680.871 L1250.98 680.871 L1250.42 680.871 L1249.86 680.871 L1249.3 680.871 L1248.74 680.871 L1248.18 680.871 L1247.62 680.871 L1247.06 680.871 L1246.5 680.871 L1245.94 680.871 L1245.38 680.871 L1244.82 680.871 L1244.26 680.871 L1243.71 680.871 L1243.15 680.871 L1242.59 680.871 L1242.03 680.871 L1241.47 680.871 L1240.91 680.871 L1240.35 680.871 L1239.79 680.871 L1239.23 680.871 L1238.67 680.871 L1238.11 680.871 L1237.55 680.871 L1236.99 680.871 L1236.44 680.871 L1235.88 680.871 L1235.32 680.871 L1234.76 680.871 L1234.2 680.871 L1233.64 680.871 L1233.08 680.871 L1232.52 680.871 L1231.96 680.871 L1231.4 680.871 L1230.84 680.871 L1230.28 680.871 L1229.72 680.871 L1229.17 680.871 L1228.61 680.871 L1228.05 680.871 L1227.49 680.871 L1226.93 680.871 L1226.37 680.871 L1225.81 680.871 L1225.25 680.871 L1224.69 680.871 L1224.13 680.871 L1223.57 680.871 L1223.01 680.871 L1222.45 680.871 L1221.89 680.871 L1221.34 680.871 L1220.78 680.871 L1220.22 680.871 L1219.66 680.871 L1219.1 680.871 L1218.54 680.871 L1217.98 680.871 L1217.42 680.871 L1216.86 680.871 L1216.3 680.871 L1215.74 680.871 L1215.18 680.871 L1214.62 680.871 L1214.07 680.871 L1213.51 680.871 L1212.95 680.871 L1212.39 680.871 L1211.83 680.871 L1211.27 680.871 L1210.71 680.871 L1210.15 680.871 L1209.59 680.871 L1209.03 680.871 L1208.47 680.871 L1207.91 680.871 L1207.35 680.871 L1206.8 680.871 L1206.24 680.871 L1205.68 680.871 L1205.12 680.871 L1204.56 680.871 L1204 680.871 L1203.44 680.871 L1202.88 680.871 L1202.32 680.871 L1201.76 680.871 L1201.2 680.871 L1200.64 680.871 L1200.08 680.871 L1199.52 680.871 L1198.97 680.871 L1198.41 680.871 L1197.85 680.871 L1197.29 680.871 L1196.73 680.871 L1196.17 680.871 L1195.61 680.871 L1195.05 680.871 L1194.49 680.871 L1193.93 680.871 L1193.37 680.871 L1192.81 680.871 L1192.25 680.871 L1191.7 680.871 L1191.14 680.871 L1190.58 680.871 L1190.02 680.871 L1189.46 680.871 L1188.9 680.871 L1188.34 680.871 L1187.78 680.871 L1187.22 680.871 L1186.66 680.871 L1186.1 680.871 L1185.54 680.871 L1184.98 680.871 L1184.43 680.871 L1183.87 680.871 L1183.31 680.871 L1182.75 680.871 L1182.19 680.871 L1181.63 680.871 L1181.07 680.871 L1180.51 680.871 L1179.95 680.871 L1179.39 680.871 L1178.83 680.871 L1178.27 680.871 L1177.71 680.871 L1177.15 680.871 L1176.6 680.871 L1176.04 680.871 L1175.48 680.871 L1174.92 680.871 L1174.36 680.871 L1173.8 680.871 L1173.24 680.871 L1172.68 680.871 L1172.12 680.871 L1171.56 680.871 L1171 680.871 L1170.44 680.871 L1169.88 680.871 L1169.33 680.871 L1168.77 680.871 L1168.21 680.871 L1167.65 680.871 L1167.09 680.871 L1166.53 680.871 L1165.97 680.871 L1165.41 680.871 L1164.85 680.871 L1164.29 680.871 L1163.73 680.871 L1163.17 680.871 L1162.61 680.871 L1162.05 680.871 L1161.5 680.871 L1160.94 680.871 L1160.38 680.871 L1159.82 680.871 L1159.26 680.871 L1158.7 680.871 L1158.14 680.871 L1157.58 680.871 L1157.02 680.871 L1156.46 680.871 L1155.9 680.871 L1155.34 680.871 L1154.78 680.871 L1154.23 680.871 L1153.67 680.871 L1153.11 680.871 L1152.55 680.871 L1151.99 680.871 L1151.43 680.871 L1150.87 680.871 L1150.31 680.871 L1149.75 680.871 L1149.19 680.871 L1148.63 680.871 L1148.07 680.871 L1147.51 680.871 L1146.96 680.871 L1146.4 680.871 L1145.84 680.871 L1145.28 680.871 L1144.72 680.871 L1144.16 680.871 L1143.6 680.871 L1143.04 680.871 L1142.48 680.871 L1141.92 680.871 L1141.36 680.871 L1140.8 680.871 L1140.24 680.871 L1139.68 680.871 L1139.13 680.871 L1138.57 680.871 L1138.01 680.871 L1137.45 680.871 L1136.89 680.871 L1136.33 680.871 L1135.77 680.871 L1135.21 680.871 L1134.65 680.871 L1134.09 680.871 L1133.53 680.871 L1132.97 680.871 L1132.41 680.871 L1131.86 680.871 L1131.3 680.871 L1130.74 680.871 L1130.18 680.871 L1129.62 680.871 L1129.06 680.871 L1128.5 680.871 L1127.94 680.871 L1127.38 680.871 L1126.82 680.871 L1126.26 680.871 L1125.7 680.871 L1125.14 680.871 L1124.59 680.871 L1124.03 680.871 L1123.47 680.871 L1122.91 680.871 L1122.35 680.871 L1121.79 680.871 L1121.23 680.871 L1120.67 680.871 L1120.11 680.871 L1119.55 680.871 L1118.99 680.871 L1118.43 680.871 L1117.87 680.871 L1117.31 680.871 L1116.76 680.871 L1116.2 680.871 L1115.64 680.871 L1115.08 680.871 L1114.52 680.871 L1113.96 680.871 L1113.4 680.871 L1112.84 680.871 L1112.28 680.871 L1111.72 680.871 L1111.16 680.871 L1110.6 680.871 L1110.04 680.871 L1109.49 680.871 L1108.93 680.871 L1108.37 680.871 L1107.81 680.871 L1107.25 680.871 L1106.69 680.871 L1106.13 680.871 L1105.57 680.871 L1105.01 680.871 L1104.45 680.871 L1103.89 680.871 L1103.33 680.871 L1102.77 680.871 L1102.22 680.871 L1101.66 680.871 L1101.1 680.871 L1100.54 680.871 L1099.98 680.871 L1099.42 680.871 L1098.86 680.871 L1098.3 680.871 L1097.74 680.871 L1097.18 680.871 L1096.62 680.871 L1096.06 680.871 L1095.5 680.871 L1094.94 680.871 L1094.39 680.871 L1093.83 680.871 L1093.27 680.871 L1092.71 680.871 L1092.15 680.871 L1091.59 680.871 L1091.03 680.871 L1090.47 680.871 L1089.91 680.871 L1089.35 680.871 L1088.79 680.871 L1088.23 680.871 L1087.67 680.871 L1087.12 680.871 L1086.56 680.871 L1086 680.871 L1085.44 680.871 L1084.88 680.871 L1084.32 680.871 L1083.76 680.871 L1083.2 680.871 L1082.64 680.871 L1082.08 680.871 L1081.52 680.871 L1080.96 680.871 L1080.4 680.871 L1079.85 680.871 L1079.29 680.871 L1078.73 680.871 L1078.17 680.871 L1077.61 680.871 L1077.05 680.871 L1076.49 680.871 L1075.93 680.871 L1075.37 680.871 L1074.81 680.871 L1074.25 680.871 L1073.69 680.871 L1073.13 680.871 L1072.57 680.871 L1072.02 680.871 L1071.46 680.871 L1070.9 680.871 L1070.34 680.871 L1069.78 680.871 L1069.22 680.871 L1068.66 680.871 L1068.1 680.871 L1067.54 680.871 L1066.98 680.871 L1066.42 680.871 L1065.86 680.871 L1065.3 680.871 L1064.75 680.871 L1064.19 680.871 L1063.63 680.871 L1063.07 680.871 L1062.51 680.871 L1061.95 680.871 L1061.39 680.871 L1060.83 680.871 L1060.27 680.871 L1059.71 680.871 L1059.15 680.871 L1058.59 680.871 L1058.03 680.871 L1057.48 680.871 L1056.92 680.871 L1056.36 680.871 L1055.8 680.871 L1055.24 680.871 L1054.68 680.871 L1054.12 680.871 L1053.56 680.871 L1053 680.871 L1052.44 680.871 L1051.88 680.871 L1051.32 680.871 L1050.76 680.871 L1050.2 680.871 L1049.65 680.871 L1049.09 680.871 L1048.53 680.871 L1047.97 680.871 L1047.41 680.871 L1046.85 680.871 L1046.29 680.871 L1045.73 680.871 L1045.17 680.871 L1044.61 680.871 L1044.05 680.871 L1043.49 680.871 L1042.93 680.871 L1042.38 680.871 L1041.82 680.871 L1041.26 680.871 L1040.7 680.871 L1040.14 680.871 L1039.58 680.871 L1039.02 680.871 L1038.46 680.871 L1037.9 680.871 L1037.34 680.871 L1036.78 680.871 L1036.22 680.871 L1035.66 680.871 L1035.1 680.871 L1034.55 680.871 L1033.99 680.871 L1033.43 680.871 L1032.87 680.871 L1032.31 680.871 L1031.75 680.871 L1031.19 680.871 L1030.63 680.871 L1030.07 680.871 L1029.51 680.871 L1028.95 680.871 L1028.39 680.871 L1027.83 680.871 L1027.28 680.871 L1026.72 680.871 L1026.16 680.871 L1025.6 680.871 L1025.04 680.871 L1024.48 680.871 L1023.92 680.871 L1023.36 680.871 L1022.8 680.871 L1022.24 680.871 L1021.68 680.871 L1021.12 680.871 L1020.56 680.871 L1020.01 680.871 L1019.45 680.871 L1018.89 680.871 L1018.33 680.871 L1017.77 680.871 L1017.21 680.871 L1016.65 680.871 L1016.09 680.871 L1015.53 680.871 L1014.97 680.871 L1014.41 680.871 L1013.85 680.871 L1013.29 680.871 L1012.73 680.871 L1012.18 680.871 L1011.62 680.871 L1011.06 680.871 L1010.5 680.871 L1009.94 680.871 L1009.38 680.871 L1008.82 680.871 L1008.26 680.871 L1007.7 680.871 L1007.14 680.871 L1006.58 680.871 L1006.02 680.871 L1005.46 680.871 L1004.91 680.871 L1004.35 680.871 L1003.79 680.871 L1003.23 680.871 L1002.67 680.871 L1002.11 680.871 L1001.55 680.871 L1000.99 680.871 L1000.43 680.871 L999.872 680.871 L999.313 680.871 L998.754 680.871 L998.194 680.871 L997.635 680.871 L997.076 680.871 L996.517 680.871 L995.957 680.871 L995.398 680.871 L994.839 680.871 L994.28 680.871 L993.72 680.871 L993.161 680.871 L992.602 680.871 L992.043 680.871 L991.483 680.871 L990.924 680.871 L990.365 680.871 L989.806 680.871 L989.246 680.871 L988.687 680.871 L988.128 680.871 L987.569 680.871 L987.009 680.871 L986.45 680.871 L985.891 680.871 L985.332 680.871 L984.772 680.871 L984.213 680.871 L983.654 680.871 L983.095 680.871 L982.535 680.871 L981.976 680.871 L981.417 680.871 L980.858 680.871 L980.298 680.871 L979.739 680.871 L979.18 680.871 L978.621 680.871 L978.061 680.871 L977.502 680.871 L976.943 680.871 L976.384 680.871 L975.824 680.871 L975.265 680.871 L974.706 680.871 L974.147 680.871 L973.587 680.871 L973.028 680.871 L972.469 680.871 L971.91 680.871 L971.35 680.871 L970.791 680.871 L970.232 680.871 L969.673 680.871 L969.113 680.871 L968.554 680.871 L967.995 680.871 L967.436 680.871 L966.876 680.871 L966.317 680.871 L965.758 680.871 L965.199 680.871 L964.639 680.871 L964.08 680.871 L963.521 680.871 L962.962 680.871 L962.402 680.871 L961.843 680.871 L961.284 680.871 L960.725 680.871 L960.165 680.871 L959.606 680.871 L959.047 680.871 L958.488 680.871 L957.928 680.871 L957.369 680.871 L956.81 680.871 L956.251 680.871 L955.691 680.871 L955.132 680.871 L954.573 680.871 L954.014 680.871 L953.454 680.871 L952.895 680.871 L952.336 680.871 L951.777 680.871 L951.217 680.871 L950.658 680.871 L950.099 680.871 L949.54 680.871 L948.98 680.871 L948.421 680.871 L947.862 680.871 L947.303 680.871 L946.743 680.871 L946.184 680.871 L945.625 680.871 L945.066 680.871 L944.506 680.871 L943.947 680.871 L943.388 680.871 L942.829 680.871 L942.269 680.871 L941.71 680.871 L941.151 680.871 L940.592 680.871 L940.032 680.871 L939.473 680.871 L938.914 680.871 L938.355 680.871 L937.795 680.871 L937.236 680.871 L936.677 680.871 L936.118 680.871 L935.558 680.871 L934.999 680.871 L934.44 680.871 L933.881 680.871 L933.321 680.871 L932.762 680.871 L932.203 680.871 L931.644 680.871 L931.084 680.871 L930.525 680.871 L929.966 680.871 L929.406 680.871 L928.847 680.871 L928.288 680.871 L927.729 680.871 L927.169 680.871 L926.61 680.871 L926.051 680.871 L925.492 680.871 L924.932 680.871 L924.373 680.871 L923.814 680.871 L923.255 680.871 L922.695 680.871 L922.136 680.871 L921.577 680.871 L921.018 680.871 L920.458 680.871 L919.899 680.871 L919.34 680.871 L918.781 680.871 L918.221 680.871 L917.662 680.871 L917.103 680.871 L916.544 680.871 L915.984 680.871 L915.425 680.871 L914.866 680.871 L914.307 680.871 L913.747 680.871 L913.188 680.871 L912.629 680.871 L912.07 680.871 L911.51 680.871 L910.951 680.871 L910.392 680.871 L909.833 680.871 L909.273 680.871 L908.714 680.871 L908.155 680.871 L907.596 680.871 L907.036 680.871 L906.477 680.871 L905.918 680.871 L905.359 680.871 L904.799 680.871 L904.24 680.871 L903.681 680.871 L903.122 680.871 L902.562 680.871 L902.003 680.871 L901.444 680.871 L900.885 680.871 L900.325 680.871 L899.766 680.871 L899.207 680.871 L898.648 680.871 L898.088 680.871 L897.529 680.871 L896.97 680.871 L896.411 680.871 L895.851 680.871 L895.292 680.871 L894.733 680.871 L894.174 680.871 L893.614 680.871 L893.055 680.871 L892.496 680.871 L891.937 680.871 L891.377 680.871 L890.818 680.871 L890.259 680.871 L889.7 680.871 L889.14 680.871 L888.581 680.871 L888.022 680.871 L887.463 680.871 L886.903 680.871 L886.344 680.871 L885.785 680.871 L885.226 680.871 L884.666 680.871 L884.107 680.871 L883.548 680.871 L882.989 680.871 L882.429 680.871 L881.87 680.871 L881.311 680.871 L880.752 680.871 L880.192 680.871 L879.633 680.871 L879.074 680.871 L878.515 680.871 L877.955 680.871 L877.396 680.871 L876.837 680.871 L876.278 680.871 L875.718 680.871 L875.159 680.871 L874.6 680.871 L874.041 680.871 L873.481 680.871 L872.922 680.871 L872.363 680.871 L871.804 680.871 L871.244 680.871 L870.685 680.871 L870.126 680.871 L869.567 680.871 L869.007 680.871 L868.448 680.871 L867.889 680.871 L867.33 680.871 L866.77 680.871 L866.211 680.871 L865.652 680.871 L865.093 680.871 L864.533 680.871 L863.974 680.871 L863.415 680.871 L862.856 680.871 L862.296 680.871 L861.737 680.871 L861.178 680.871 L860.619 680.871 L860.059 680.871 L859.5 680.871 L858.941 680.871 L858.382 680.871 L857.822 680.871 L857.263 680.871 L856.704 680.871 L856.145 680.871 L855.585 680.871 L855.026 680.871 L854.467 680.871 L853.908 680.871 L853.348 680.871 L852.789 680.871 L852.23 680.871 L851.671 680.871 L851.111 680.871 L850.552 680.871 L849.993 680.871 L849.434 680.871 L848.874 680.871 L848.315 680.871 L847.756 680.871 L847.197 680.871 L846.637 680.871 L846.078 680.871 L845.519 680.871 L844.96 680.871 L844.4 680.871 L843.841 680.871 L843.282 680.871 L842.723 680.871 L842.163 680.871 L841.604 680.871 L841.045 680.871 L840.486 680.871 L839.926 680.871 L839.367 680.871 L838.808 680.871 L838.249 680.871 L837.689 680.871 L837.13 680.871 L836.571 680.871 L836.012 680.871 L835.452 680.871 L834.893 680.871 L834.334 680.871 L833.775 680.871 L833.215 680.871 L832.656 680.871 L832.097 680.871 L831.538 680.871 L830.978 680.871 L830.419 680.871 L829.86 680.871 L829.301 680.871 L828.741 680.871 L828.182 680.871 L827.623 680.871 L827.064 680.871 L826.504 680.871 L825.945 680.871 L825.386 680.871 L824.827 680.871 L824.267 680.871 L823.708 680.871 L823.149 680.871 L822.59 680.871 L822.03 680.871 L821.471 680.871 L820.912 680.871 L820.353 680.871 L819.793 680.871 L819.234 680.871 L818.675 680.871 L818.116 680.871 L817.556 680.871 L816.997 680.871 L816.438 680.871 L815.879 680.871 L815.319 680.871 L814.76 680.871 L814.201 680.871 L813.642 680.871 L813.082 680.871 L812.523 680.871 L811.964 680.871 L811.405 680.871 L810.845 680.871 L810.286 680.871 L809.727 680.871 L809.168 680.871 L808.608 680.871 L808.049 680.871 L807.49 680.871 L806.931 680.871 L806.371 680.871 L805.812 680.871 L805.253 680.871 L804.693 680.871 L804.134 680.871 L803.575 680.871 L803.016 680.871 L802.456 680.871 L801.897 680.871 L801.338 680.871 L800.779 680.871 L800.219 680.871 L799.66 680.871 L799.101 680.871 L798.542 680.871 L797.982 680.871 L797.423 680.871 L796.864 680.871 L796.305 680.871 L795.745 680.871 L795.186 680.871 L794.627 680.871 L794.068 680.871 L793.508 680.871 L792.949 680.871 L792.39 680.871 L791.831 680.871 L791.271 680.871 L790.712 680.871 L790.153 680.871 L789.594 680.871 L789.034 680.871 L788.475 680.871 L787.916 680.871 L787.357 680.871 L786.797 680.871 L786.238 680.871 L785.679 680.871 L785.12 680.871 L784.56 680.871 L784.001 680.871 L783.442 680.871 L782.883 680.871 L782.323 680.871 L781.764 680.871 L781.205 680.871 L780.646 680.871 L780.086 680.871 L779.527 680.871 L778.968 680.871 L778.409 680.871 L777.849 680.871 L777.29 680.871 L776.731 680.871 L776.172 680.871 L775.612 680.871 L775.053 680.871 L774.494 680.871 L773.935 680.871 L773.375 680.871 L772.816 680.871 L772.257 680.871 L771.698 680.871 L771.138 680.871 L770.579 680.871 L770.02 680.871 L769.461 680.871 L768.901 680.871 L768.342 680.871 L767.783 680.871 L767.224 680.871 L766.664 680.871 L766.105 680.871 L765.546 680.871 L764.987 680.871 L764.427 680.871 L763.868 680.871 L763.309 680.871 L762.75 680.871 L762.19 680.871 L761.631 680.871 L761.072 680.871 L760.513 680.871 L759.953 680.871 L759.394 680.871 L758.835 680.871 L758.276 680.871 L757.716 680.871 L757.157 680.871 L756.598 680.871 L756.039 680.871 L755.479 680.871 L754.92 680.871 L754.361 680.871 L753.802 680.871 L753.242 680.871 L752.683 680.871 L752.124 680.871 L751.565 680.871 L751.005 680.871 L750.446 680.871 L749.887 680.871 L749.328 680.871 L748.768 680.871 L748.209 680.871 L747.65 680.871 L747.091 680.871 L746.531 680.871 L745.972 680.871 L745.413 680.871 L744.854 680.871 L744.294 680.871 L743.735 680.871 L743.176 680.871 L742.617 680.871 L742.057 680.871 L741.498 680.871 L740.939 680.871 L740.38 680.871 L739.82 680.871 L739.261 680.871 L738.702 680.871 L738.143 680.871 L737.583 680.871 L737.024 680.871 L736.465 680.871 L735.906 680.871 L735.346 680.871 L734.787 680.871 L734.228 680.871 L733.669 680.871 L733.109 680.871 L732.55 680.871 L731.991 680.871 L731.432 680.871 L730.872 680.871 L730.313 680.871 L729.754 680.871 L729.195 680.871 L728.635 680.871 L728.076 680.871 L727.517 680.871 L726.958 680.871 L726.398 680.871 L725.839 680.871 L725.28 680.871 L724.721 680.871 L724.161 680.871 L723.602 680.871 L723.043 680.871 L722.484 680.871 L721.924 680.871 L721.365 680.871 L720.806 680.871 L720.247 680.871  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.739 720.806,685.739 721.365,685.739 721.924,685.739 722.484,685.739 723.043,685.739 723.602,685.739 724.161,685.739 724.721,685.739 725.28,685.739 725.839,685.739 726.398,685.739 726.958,685.739 727.517,685.739 728.076,685.739 728.635,685.739 729.195,685.739 729.754,685.739 730.313,685.739 730.872,685.739 731.432,685.739 731.991,685.739 732.55,685.739 733.109,685.739 733.669,685.739 734.228,685.739 734.787,685.739 735.346,685.739 735.906,685.739 736.465,685.739 737.024,685.739 737.583,685.739 738.143,685.739 738.702,685.739 739.261,685.739 739.82,685.739 740.38,685.739 740.939,685.739 741.498,685.739 742.057,685.739 742.617,685.739 743.176,685.739 743.735,685.739 744.294,685.739 744.854,685.739 745.413,685.739 745.972,685.739 746.531,685.739 747.091,685.739 747.65,685.739 748.209,685.739 748.768,685.739 749.328,685.739 749.887,685.739 750.446,685.739 751.005,685.739 751.565,685.739 752.124,685.739 752.683,685.739 753.242,685.739 753.802,685.739 754.361,685.739 754.92,685.739 755.479,685.739 756.039,685.739 756.598,685.739 757.157,685.739 757.716,685.739 758.276,685.739 758.835,685.739 759.394,685.739 759.953,685.739 760.513,685.739 761.072,685.739 761.631,685.739 762.19,685.739 762.75,685.739 763.309,685.739 763.868,685.739 764.427,685.739 764.987,685.739 765.546,685.739 766.105,685.739 766.664,685.739 767.224,685.739 767.783,685.739 768.342,685.739 768.901,685.739 769.461,685.739 770.02,685.739 770.579,685.739 771.138,685.739 771.698,685.739 772.257,685.739 772.816,685.739 773.375,685.739 773.935,685.739 774.494,685.739 775.053,685.739 775.612,685.739 776.172,685.739 776.731,685.739 777.29,685.739 777.849,685.739 778.409,685.739 778.968,685.739 779.527,685.739 780.086,685.739 780.646,685.739 781.205,685.739 781.764,685.739 782.323,685.739 782.883,685.739 783.442,685.739 784.001,685.739 784.56,685.739 785.12,685.739 785.679,685.739 786.238,685.739 786.797,685.739 787.357,685.739 787.916,685.739 788.475,685.739 789.034,685.739 789.594,685.739 790.153,685.739 790.712,685.739 791.271,685.739 791.831,685.739 792.39,685.739 792.949,685.739 793.508,685.739 794.068,685.739 794.627,685.739 795.186,685.739 795.745,685.739 796.305,685.739 796.864,685.739 797.423,685.739 797.982,685.739 798.542,685.739 799.101,685.739 799.66,685.739 800.219,685.739 800.779,685.739 801.338,685.739 801.897,685.739 802.456,685.739 803.016,685.739 803.575,685.739 804.134,685.739 804.693,685.739 805.253,685.739 805.812,685.739 806.371,685.739 806.931,685.739 807.49,685.739 808.049,685.739 808.608,685.739 809.168,685.739 809.727,685.739 810.286,685.739 810.845,685.739 811.405,685.739 811.964,685.739 812.523,685.739 813.082,685.739 813.642,685.739 814.201,685.739 814.76,685.739 815.319,685.739 815.879,685.739 816.438,685.739 816.997,685.739 817.556,685.739 818.116,685.739 818.675,685.739 819.234,685.739 819.793,685.739 820.353,685.739 820.912,685.739 821.471,685.739 822.03,685.739 822.59,685.739 823.149,685.739 823.708,685.739 824.267,685.739 824.827,685.739 825.386,685.739 825.945,685.739 826.504,685.739 827.064,685.739 827.623,685.739 828.182,685.739 828.741,685.739 829.301,685.739 829.86,685.739 830.419,685.739 830.978,685.739 831.538,685.739 832.097,685.739 832.656,685.739 833.215,685.739 833.775,685.739 834.334,685.739 834.893,685.739 835.452,685.739 836.012,685.739 836.571,685.739 837.13,685.739 837.689,685.739 838.249,685.739 838.808,685.739 839.367,685.739 839.926,685.739 840.486,685.739 841.045,685.739 841.604,685.739 842.163,685.739 842.723,685.739 843.282,685.739 843.841,685.739 844.4,685.739 844.96,685.739 845.519,685.739 846.078,685.739 846.637,685.739 847.197,685.739 847.756,685.739 848.315,685.739 848.874,685.739 849.434,685.739 849.993,685.739 850.552,685.739 851.111,685.739 851.671,685.739 852.23,685.739 852.789,685.739 853.348,685.739 853.908,685.739 854.467,685.739 855.026,685.739 855.585,685.739 856.145,685.739 856.704,685.739 857.263,685.739 857.822,685.739 858.382,685.739 858.941,685.739 859.5,685.739 860.059,685.739 860.619,685.739 861.178,685.739 861.737,685.739 862.296,685.739 862.856,685.739 863.415,685.739 863.974,685.739 864.533,685.739 865.093,685.739 865.652,685.739 866.211,685.739 866.77,685.739 867.33,685.739 867.889,685.739 868.448,685.739 869.007,685.739 869.567,685.739 870.126,685.739 870.685,685.739 871.244,685.739 871.804,685.739 872.363,685.739 872.922,685.739 873.481,685.739 874.041,685.739 874.6,685.739 875.159,685.739 875.718,685.739 876.278,685.739 876.837,685.739 877.396,685.739 877.955,685.739 878.515,685.739 879.074,685.739 879.633,685.739 880.192,685.739 880.752,685.739 881.311,685.739 881.87,685.739 882.429,685.739 882.989,685.739 883.548,685.739 884.107,685.739 884.666,685.739 885.226,685.739 885.785,685.739 886.344,685.739 886.903,685.739 887.463,685.739 888.022,685.739 888.581,685.739 889.14,685.739 889.7,685.739 890.259,685.739 890.818,685.739 891.377,685.739 891.937,685.739 892.496,685.739 893.055,685.739 893.614,685.739 894.174,685.739 894.733,685.739 895.292,685.739 895.851,685.739 896.411,685.739 896.97,685.739 897.529,685.739 898.088,685.739 898.648,685.739 899.207,685.739 899.766,685.739 900.325,685.739 900.885,685.739 901.444,685.739 902.003,685.739 902.562,685.739 903.122,685.739 903.681,685.739 904.24,685.739 904.799,685.739 905.359,685.739 905.918,685.739 906.477,685.739 907.036,685.739 907.596,685.739 908.155,685.739 908.714,685.739 909.273,685.739 909.833,685.739 910.392,685.739 910.951,685.739 911.51,685.739 912.07,685.739 912.629,685.739 913.188,685.739 913.747,685.739 914.307,685.739 914.866,685.739 915.425,685.739 915.984,685.739 916.544,685.739 917.103,685.739 917.662,685.739 918.221,685.739 918.781,685.739 919.34,685.739 919.899,685.739 920.458,685.739 921.018,685.739 921.577,685.739 922.136,685.739 922.695,685.739 923.255,685.739 923.814,685.739 924.373,685.739 924.932,685.739 925.492,685.739 926.051,685.739 926.61,685.739 927.169,685.739 927.729,685.739 928.288,685.739 928.847,685.739 929.406,685.739 929.966,685.739 930.525,685.739 931.084,685.739 931.644,685.739 932.203,685.739 932.762,685.739 933.321,685.739 933.881,685.739 934.44,685.739 934.999,685.739 935.558,685.739 936.118,685.739 936.677,685.739 937.236,685.739 937.795,685.739 938.355,685.739 938.914,685.739 939.473,685.739 940.032,685.739 940.592,685.739 941.151,685.739 941.71,685.739 942.269,685.739 942.829,685.739 943.388,685.739 943.947,685.739 944.506,685.739 945.066,685.739 945.625,685.739 946.184,685.739 946.743,685.739 947.303,685.739 947.862,685.739 948.421,685.739 948.98,685.739 949.54,685.739 950.099,685.739 950.658,685.739 951.217,685.739 951.777,685.739 952.336,685.739 952.895,685.739 953.454,685.739 954.014,685.739 954.573,685.739 955.132,685.739 955.691,685.739 956.251,685.739 956.81,685.739 957.369,685.739 957.928,685.739 958.488,685.739 959.047,685.739 959.606,685.739 960.165,685.739 960.725,685.739 961.284,685.739 961.843,685.739 962.402,685.739 962.962,685.739 963.521,685.739 964.08,685.739 964.639,685.739 965.199,685.739 965.758,685.739 966.317,685.739 966.876,685.739 967.436,685.739 967.995,685.739 968.554,685.739 969.113,685.739 969.673,685.739 970.232,685.739 970.791,685.739 971.35,685.739 971.91,685.739 972.469,685.739 973.028,685.739 973.587,685.739 974.147,685.739 974.706,685.739 975.265,685.739 975.824,685.739 976.384,685.739 976.943,685.739 977.502,685.739 978.061,685.739 978.621,685.739 979.18,685.739 979.739,685.739 980.298,685.739 980.858,685.739 981.417,685.739 981.976,685.739 982.535,685.739 983.095,685.739 983.654,685.739 984.213,685.739 984.772,685.739 985.332,685.739 985.891,685.739 986.45,685.739 987.009,685.739 987.569,685.739 988.128,685.739 988.687,685.739 989.246,685.739 989.806,685.739 990.365,685.739 990.924,685.739 991.483,685.739 992.043,685.739 992.602,685.739 993.161,685.739 993.72,685.739 994.28,685.739 994.839,685.739 995.398,685.739 995.957,685.739 996.517,685.739 997.076,685.739 997.635,685.739 998.194,685.739 998.754,685.739 999.313,685.739 999.872,685.739 1000.43,685.739 1000.99,685.739 1001.55,685.739 1002.11,685.739 1002.67,685.739 1003.23,685.739 1003.79,685.739 1004.35,685.739 1004.91,685.739 1005.46,685.739 1006.02,685.739 1006.58,685.739 1007.14,685.739 1007.7,685.739 1008.26,685.739 1008.82,685.739 1009.38,685.739 1009.94,685.739 1010.5,685.739 1011.06,685.739 1011.62,685.739 1012.18,685.739 1012.73,685.739 1013.29,685.739 1013.85,685.739 1014.41,685.739 1014.97,685.739 1015.53,685.739 1016.09,685.739 1016.65,685.739 1017.21,685.739 1017.77,685.739 1018.33,685.739 1018.89,685.739 1019.45,685.739 1020.01,685.739 1020.56,685.739 1021.12,685.739 1021.68,685.739 1022.24,685.739 1022.8,685.739 1023.36,685.739 1023.92,685.739 1024.48,685.739 1025.04,685.739 1025.6,685.739 1026.16,685.739 1026.72,685.739 1027.28,685.739 1027.83,685.739 1028.39,685.739 1028.95,685.739 1029.51,685.739 1030.07,685.739 1030.63,685.739 1031.19,685.739 1031.75,685.739 1032.31,685.739 1032.87,685.739 1033.43,685.739 1033.99,685.739 1034.55,685.739 1035.1,685.739 1035.66,685.739 1036.22,685.739 1036.78,685.739 1037.34,685.739 1037.9,685.739 1038.46,685.739 1039.02,685.739 1039.58,685.739 1040.14,685.739 1040.7,685.739 1041.26,685.739 1041.82,685.739 1042.38,685.739 1042.93,685.739 1043.49,685.739 1044.05,685.739 1044.61,685.739 1045.17,685.739 1045.73,685.739 1046.29,685.739 1046.85,685.739 1047.41,685.739 1047.97,685.739 1048.53,685.739 1049.09,685.739 1049.65,685.739 1050.2,685.739 1050.76,685.739 1051.32,685.739 1051.88,685.739 1052.44,685.739 1053,685.739 1053.56,685.739 1054.12,685.739 1054.68,685.739 1055.24,685.739 1055.8,685.739 1056.36,685.739 1056.92,685.739 1057.48,685.739 1058.03,685.739 1058.59,685.739 1059.15,685.739 1059.71,685.739 1060.27,685.739 1060.83,685.739 1061.39,685.739 1061.95,685.739 1062.51,685.739 1063.07,685.739 1063.63,685.739 1064.19,685.739 1064.75,685.739 1065.3,685.739 1065.86,685.739 1066.42,685.739 1066.98,685.739 1067.54,685.739 1068.1,685.739 1068.66,685.739 1069.22,685.739 1069.78,685.739 1070.34,685.739 1070.9,685.739 1071.46,685.739 1072.02,685.739 1072.57,685.739 1073.13,685.739 1073.69,685.739 1074.25,685.739 1074.81,685.739 1075.37,685.739 1075.93,685.739 1076.49,685.739 1077.05,685.739 1077.61,685.739 1078.17,685.739 1078.73,685.739 1079.29,685.739 1079.85,685.739 1080.4,685.739 1080.96,685.739 1081.52,685.739 1082.08,685.739 1082.64,685.739 1083.2,685.739 1083.76,685.739 1084.32,685.739 1084.88,685.739 1085.44,685.739 1086,685.739 1086.56,685.739 1087.12,685.739 1087.67,685.739 1088.23,685.739 1088.79,685.739 1089.35,685.739 1089.91,685.739 1090.47,685.739 1091.03,685.739 1091.59,685.739 1092.15,685.739 1092.71,685.739 1093.27,685.739 1093.83,685.739 1094.39,685.739 1094.94,685.739 1095.5,685.739 1096.06,685.739 1096.62,685.739 1097.18,685.739 1097.74,685.739 1098.3,685.739 1098.86,685.739 1099.42,685.739 1099.98,685.739 1100.54,685.739 1101.1,685.739 1101.66,685.739 1102.22,685.739 1102.77,685.739 1103.33,685.739 1103.89,685.739 1104.45,685.739 1105.01,685.739 1105.57,685.739 1106.13,685.739 1106.69,685.739 1107.25,685.739 1107.81,685.739 1108.37,685.739 1108.93,685.739 1109.49,685.739 1110.04,685.739 1110.6,685.739 1111.16,685.739 1111.72,685.739 1112.28,685.739 1112.84,685.739 1113.4,685.739 1113.96,685.739 1114.52,685.739 1115.08,685.739 1115.64,685.739 1116.2,685.739 1116.76,685.739 1117.31,685.739 1117.87,685.739 1118.43,685.739 1118.99,685.739 1119.55,685.739 1120.11,685.739 1120.67,685.739 1121.23,685.739 1121.79,685.739 1122.35,685.739 1122.91,685.739 1123.47,685.739 1124.03,685.739 1124.59,685.739 1125.14,685.739 1125.7,685.739 1126.26,685.739 1126.82,685.739 1127.38,685.739 1127.94,685.739 1128.5,685.739 1129.06,685.739 1129.62,685.739 1130.18,685.739 1130.74,685.739 1131.3,685.739 1131.86,685.739 1132.41,685.739 1132.97,685.739 1133.53,685.739 1134.09,685.739 1134.65,685.739 1135.21,685.739 1135.77,685.739 1136.33,685.739 1136.89,685.739 1137.45,685.739 1138.01,685.739 1138.57,685.739 1139.13,685.739 1139.68,685.739 1140.24,685.739 1140.8,685.739 1141.36,685.739 1141.92,685.739 1142.48,685.739 1143.04,685.739 1143.6,685.739 1144.16,685.739 1144.72,685.739 1145.28,685.739 1145.84,685.739 1146.4,685.739 1146.96,685.739 1147.51,685.739 1148.07,685.739 1148.63,685.739 1149.19,685.739 1149.75,685.739 1150.31,685.739 1150.87,685.739 1151.43,685.739 1151.99,685.739 1152.55,685.739 1153.11,685.739 1153.67,685.739 1154.23,685.739 1154.78,685.739 1155.34,685.739 1155.9,685.739 1156.46,685.739 1157.02,685.739 1157.58,685.739 1158.14,685.739 1158.7,685.739 1159.26,685.739 1159.82,685.739 1160.38,685.739 1160.94,685.739 1161.5,685.739 1162.05,685.739 1162.61,685.739 1163.17,685.739 1163.73,685.739 1164.29,685.739 1164.85,685.739 1165.41,685.739 1165.97,685.739 1166.53,685.739 1167.09,685.739 1167.65,685.739 1168.21,685.739 1168.77,685.739 1169.33,685.739 1169.88,685.739 1170.44,685.739 1171,685.739 1171.56,685.739 1172.12,685.739 1172.68,685.739 1173.24,685.739 1173.8,685.739 1174.36,685.739 1174.92,685.739 1175.48,685.739 1176.04,685.739 1176.6,685.739 1177.15,685.739 1177.71,685.739 1178.27,685.739 1178.83,685.739 1179.39,685.739 1179.95,685.739 1180.51,685.739 1181.07,685.739 1181.63,685.739 1182.19,685.739 1182.75,685.739 1183.31,685.739 1183.87,685.739 1184.43,685.739 1184.98,685.739 1185.54,685.739 1186.1,685.739 1186.66,685.739 1187.22,685.739 1187.78,685.739 1188.34,685.739 1188.9,685.739 1189.46,685.739 1190.02,685.739 1190.58,685.739 1191.14,685.739 1191.7,685.739 1192.25,685.739 1192.81,685.739 1193.37,685.739 1193.93,685.739 1194.49,685.739 1195.05,685.739 1195.61,685.739 1196.17,685.739 1196.73,685.739 1197.29,685.739 1197.85,685.739 1198.41,685.739 1198.97,685.739 1199.52,685.739 1200.08,685.739 1200.64,685.739 1201.2,685.739 1201.76,685.739 1202.32,685.739 1202.88,685.739 1203.44,685.739 1204,685.739 1204.56,685.739 1205.12,685.739 1205.68,685.739 1206.24,685.739 1206.8,685.739 1207.35,685.739 1207.91,685.739 1208.47,685.739 1209.03,685.739 1209.59,685.739 1210.15,685.739 1210.71,685.739 1211.27,685.739 1211.83,685.739 1212.39,685.739 1212.95,685.739 1213.51,685.739 1214.07,685.739 1214.62,685.739 1215.18,685.739 1215.74,685.739 1216.3,685.739 1216.86,685.739 1217.42,685.739 1217.98,685.739 1218.54,685.739 1219.1,685.739 1219.66,685.739 1220.22,685.739 1220.78,685.739 1221.34,685.739 1221.89,685.739 1222.45,685.739 1223.01,685.739 1223.57,685.739 1224.13,685.739 1224.69,685.739 1225.25,685.739 1225.81,685.739 1226.37,685.739 1226.93,685.739 1227.49,685.739 1228.05,685.739 1228.61,685.739 1229.17,685.739 1229.72,685.739 1230.28,685.739 1230.84,685.739 1231.4,685.739 1231.96,685.739 1232.52,685.739 1233.08,685.739 1233.64,685.739 1234.2,685.739 1234.76,685.739 1235.32,685.739 1235.88,685.739 1236.44,685.739 1236.99,685.739 1237.55,685.739 1238.11,685.739 1238.67,685.739 1239.23,685.739 1239.79,685.739 1240.35,685.739 1240.91,685.739 1241.47,685.739 1242.03,685.739 1242.59,685.739 1243.15,685.739 1243.71,685.739 1244.26,685.739 1244.82,685.739 1245.38,685.739 1245.94,685.739 1246.5,685.739 1247.06,685.739 1247.62,685.739 1248.18,685.739 1248.74,685.739 1249.3,685.739 1249.86,685.739 1250.42,685.739 1250.98,685.739 1251.54,685.739 1252.09,685.739 1252.65,685.739 1253.21,685.739 1253.77,685.739 1254.33,685.739 1254.89,685.739 1255.45,685.739 1256.01,685.739 1256.57,685.739 1257.13,685.739 1257.69,685.739 1258.25,685.739 1258.81,685.739 1259.36,685.739 1259.92,685.739 1260.48,685.739 1261.04,685.739 1261.6,685.739 1262.16,685.739 1262.72,685.739 1263.28,685.739 1263.84,685.739 1264.4,685.739 1264.96,685.739 1265.52,685.739 1266.08,685.739 1266.63,685.739 1267.19,685.739 1267.75,685.739 1268.31,685.739 1268.87,685.739 1269.43,685.739 1269.99,685.739 1270.55,685.739 1271.11,685.739 1271.67,685.739 1272.23,685.739 1272.79,685.739 1273.35,685.739 1273.91,685.739 1274.46,685.739 1275.02,685.739 1275.58,685.739 1276.14,685.739 1276.7,685.739 1277.26,685.739 1277.82,685.739 1278.38,685.739 1278.94,685.739 1279.5,685.739 1280.06,685.739 1280.62,685.739 1281.18,685.739 1281.73,685.739 1282.29,685.739 1282.85,685.739 1283.41,685.739 1283.97,685.739 1284.53,685.739 1285.09,685.739 1285.65,685.739 1286.21,685.739 1286.77,685.739 1287.33,685.739 1287.89,685.739 1288.45,685.739 1289,685.739 1289.56,685.739 1290.12,685.739 1290.68,685.739 1291.24,685.739 1291.8,685.739 1292.36,685.739 1292.92,685.739 1293.48,685.739 1294.04,685.739 1294.6,685.739 1295.16,685.739 1295.72,685.739 1296.28,685.739 1296.83,685.739 1297.39,685.739 1297.95,685.739 1298.51,685.739 1299.07,685.739 1299.63,685.739 1300.19,685.739 1300.75,685.739 1301.31,685.739 1301.87,685.739 1302.43,685.739 1302.99,685.739 1303.55,685.739 1304.1,685.739 1304.66,685.739 1305.22,685.739 1305.78,685.739 1306.34,685.739 1306.9,685.739 1307.46,685.739 1308.02,685.739 1308.58,685.739 1309.14,685.739 1309.7,685.739 1310.26,685.739 1310.82,685.739 1311.38,685.739 1311.93,685.739 1312.49,685.739 1313.05,685.739 1313.61,685.739 1314.17,685.739 1314.73,685.739 1315.29,685.739 1315.85,685.739 1316.41,685.739 1316.97,685.739 1317.53,685.739 1318.09,685.739 1318.65,685.739 1319.2,685.739 1319.76,685.739 1320.32,685.739 1320.88,685.739 1321.44,685.739 1322,685.739 1322.56,685.739 1323.12,685.739 1323.68,685.739 1324.24,685.739 1324.8,685.739 1325.36,685.739 1325.92,685.739 1326.47,685.739 1327.03,685.739 1327.59,685.739 1328.15,685.739 1328.71,685.739 1329.27,685.739 1329.83,685.739 1330.39,685.739 1330.95,685.739 1331.51,685.739 1332.07,685.739 1332.63,685.739 1333.19,685.739 1333.75,685.739 1334.3,685.739 1334.86,685.739 1335.42,685.739 1335.98,685.739 1336.54,685.739 1337.1,685.739 1337.66,685.739 1338.22,685.739 1338.78,685.739 1339.34,685.739 1339.9,685.739 1340.46,685.739 1341.02,685.739 1341.57,685.739 1342.13,685.739 1342.69,685.739 1343.25,685.739 1343.81,685.739 1344.37,685.739 1344.93,685.739 1345.49,685.739 1346.05,685.739 1346.61,685.739 1347.17,685.739 1347.73,685.739 1348.29,685.739 1348.84,685.739 1349.4,685.739 1349.96,685.739 1350.52,685.739 1351.08,685.739 1351.64,685.739 1352.2,685.739 1352.76,685.739 1353.32,685.739 1353.88,685.739 1354.44,685.739 1355,685.739 1355.56,685.739 1356.12,685.739 1356.67,685.739 1357.23,685.739 1357.79,685.739 1358.35,685.739 1358.91,685.739 1359.47,685.739 1360.03,685.739 1360.59,685.739 1361.15,685.739 1361.71,685.739 1362.27,685.739 1362.83,685.739 1363.39,685.739 1363.94,685.739 1364.5,685.739 1365.06,685.739 1365.62,685.739 1366.18,685.739 1366.74,685.739 1367.3,685.739 1367.86,685.739 1368.42,685.739 1368.98,685.739 1369.54,685.739 1370.1,685.739 1370.66,685.739 1371.21,685.739 1371.77,685.739 1372.33,685.739 1372.89,685.739 1373.45,685.739 1374.01,685.739 1374.57,685.739 1375.13,685.739 1375.69,685.739 1376.25,685.739 1376.81,685.739 1377.37,685.739 1377.93,685.739 1378.49,685.739 1379.04,685.739 1379.6,685.739 1380.16,685.739 1380.72,685.739 1381.28,685.739 1381.84,685.739 1382.4,685.739 1382.96,685.739 1383.52,685.739 1384.08,685.739 1384.64,685.739 1385.2,685.739 1385.76,685.739 1386.31,685.739 1386.87,685.739 1387.43,685.739 1387.99,685.739 1388.55,685.739 1389.11,685.739 1389.67,685.739 1390.23,685.739 1390.79,685.739 1391.35,685.739 1391.91,685.739 1392.47,685.739 1393.03,685.739 1393.58,685.739 1394.14,685.739 1394.7,685.739 1395.26,685.739 1395.82,685.739 1396.38,685.739 1396.94,685.739 1397.5,685.739 1398.06,685.739 1398.62,685.739 1399.18,685.739 1399.74,685.739 1400.3,685.739 1400.86,685.739 1401.41,685.739 1401.97,685.739 1402.53,685.739 1403.09,685.739 1403.65,685.739 1404.21,685.739 1404.77,685.739 1405.33,685.739 1405.89,685.739 1406.45,685.739 1407.01,685.739 1407.57,685.739 1408.13,685.739 1408.68,685.739 1409.24,685.739 1409.8,685.739 1410.36,685.739 1410.92,685.739 1411.48,685.739 1412.04,685.739 1412.6,685.739 1413.16,685.739 1413.72,685.739 1414.28,685.739 1414.84,685.739 1415.4,685.739 1415.95,685.739 1416.51,685.739 1417.07,685.739 1417.63,685.739 1418.19,685.739 1418.75,685.739 1419.31,685.739 1419.87,685.739 1420.43,685.739 1420.99,685.739 1421.55,685.739 1422.11,685.739 1422.67,685.739 1423.23,685.739 1423.78,685.739 1424.34,685.739 1424.9,685.739 1425.46,685.739 1426.02,685.739 1426.58,685.739 1427.14,685.739 1427.7,685.739 1428.26,685.739 1428.82,685.739 1429.38,685.739 1429.94,685.739 1430.5,685.739 1431.05,685.739 1431.61,685.739 1432.17,685.739 1432.73,685.739 1433.29,685.739 1433.85,685.739 1434.41,685.739 1434.97,685.739 1435.53,685.739 1436.09,685.739 1436.65,685.739 1437.21,685.739 1437.77,685.739 1438.33,685.739 1438.88,685.739 1439.44,685.739 1440,685.739 1440.56,685.739 1441.12,685.739 1441.68,685.739 1442.24,685.739 1442.8,685.739 1443.36,685.739 1443.92,685.739 1444.48,685.739 1445.04,685.739 1445.6,685.739 1446.15,685.739 1446.71,685.739 1447.27,685.739 1447.83,685.739 1448.39,685.739 1448.95,685.739 1449.51,685.739 1450.07,685.739 1450.63,685.739 1451.19,685.739 1451.75,685.739 1452.31,685.739 1452.87,685.739 1453.42,685.739 1453.98,685.739 1454.54,685.739 1455.1,685.739 1455.66,685.739 1456.22,685.739 1456.78,685.739 1457.34,685.739 1457.9,685.739 1458.46,685.739 1459.02,685.739 1459.58,685.739 1460.14,685.739 1460.7,685.739 1461.25,685.739 1461.81,685.739 1462.37,685.739 1462.93,685.739 1463.49,685.739 1464.05,685.739 1464.61,685.739 1465.17,685.739 1465.73,685.739 1466.29,685.739 1466.85,685.739 1467.41,685.739 1467.97,685.739 1468.52,685.739 1469.08,685.739 1469.64,685.739 1470.2,685.739 1470.76,685.739 1471.32,685.739 1471.88,685.739 1472.44,685.739 1473,685.739 1473.56,685.739 1474.12,685.739 1474.68,685.739 1475.24,685.739 1475.79,685.739 1476.35,685.739 1476.91,685.739 1477.47,685.739 1478.03,685.739 1478.59,685.739 1479.15,685.739 1479.71,685.739 1480.27,685.739 1480.83,685.739 1481.39,685.739 1481.95,685.739 1482.51,685.739 1483.07,685.739 1483.62,685.739 1484.18,685.739 1484.74,685.739 1485.3,685.739 1485.86,685.739 1486.42,685.739 1486.98,685.739 1487.54,685.739 1488.1,685.739 1488.66,685.739 1489.22,685.739 1489.78,685.739 1490.34,685.739 1490.89,685.739 1491.45,685.739 1492.01,685.739 1492.57,685.739 1493.13,685.739 1493.69,685.739 1494.25,685.739 1494.81,685.739 1495.37,685.739 1495.93,685.739 1496.49,685.739 1497.05,685.739 1497.61,685.739 1498.16,685.739 1498.72,685.739 1499.28,685.739 1499.84,685.739 1500.4,685.739 1500.96,685.739 1501.52,685.739 1502.08,685.739 1502.64,685.739 1503.2,685.739 1503.76,685.739 1504.32,685.739 1504.88,685.739 1505.44,685.739 1505.99,685.739 1506.55,685.739 1507.11,685.739 1507.67,685.739 1508.23,685.739 1508.79,685.739 1509.35,685.739 1509.91,685.739 1510.47,685.739 1511.03,685.739 1511.59,685.739 1512.15,685.739 1512.71,685.739 1513.26,685.739 1513.82,685.739 1514.38,685.739 1514.94,685.739 1515.5,685.739 1516.06,685.739 1516.62,685.739 1517.18,685.739 1517.74,685.739 1518.3,685.739 1518.86,685.739 1519.42,685.739 1519.98,685.739 1520.53,685.739 1521.09,685.739 1521.65,685.739 1522.21,685.739 1522.77,685.739 1523.33,685.739 1523.89,685.739 1524.45,685.739 1525.01,685.739 1525.57,685.739 1526.13,685.739 1526.69,685.739 1527.25,685.739 1527.81,685.739 1528.36,685.739 1528.92,685.739 1529.48,685.739 1530.04,685.739 1530.6,685.739 1531.16,685.739 1531.72,685.739 1532.28,685.739 1532.84,685.739 1533.4,685.739 1533.96,685.739 1534.52,685.739 1535.08,685.739 1535.63,685.739 1536.19,685.739 1536.75,685.739 1537.31,685.739 1537.87,685.739 1538.43,685.739 1538.99,685.739 1539.55,685.739 1540.11,685.739 1540.67,685.739 1541.23,685.739 1541.79,685.739 1542.35,685.739 1542.9,685.739 1543.46,685.739 1544.02,685.739 1544.58,685.739 1545.14,685.739 1545.7,685.739 1546.26,685.739 1546.82,685.739 1547.38,685.739 1547.94,685.739 1548.5,685.739 1549.06,685.739 1549.62,685.739 1550.18,685.739 1550.73,685.739 1551.29,685.739 1551.85,685.739 1552.41,685.739 1552.97,685.739 1553.53,685.739 1554.09,685.739 1554.65,685.739 1555.21,685.739 1555.77,685.739 1556.33,685.739 1556.89,685.739 1557.45,685.739 1558,685.739 1558.56,685.739 1559.12,685.739 1559.68,685.739 1560.24,685.739 1560.8,685.739 1561.36,685.739 1561.92,685.739 1562.48,685.739 1563.04,685.739 1563.6,685.739 1564.16,685.739 1564.72,685.739 1565.28,685.739 1565.83,685.739 1566.39,685.739 1566.95,685.739 1567.51,685.739 1568.07,685.739 1568.63,685.739 1569.19,685.739 1569.75,685.739 1570.31,685.739 1570.87,685.739 1571.43,685.739 1571.99,685.739 1572.55,685.739 1573.1,685.739 1573.66,685.739 1574.22,685.739 1574.78,685.739 1575.34,685.739 1575.9,685.739 1576.46,685.739 1577.02,685.739 1577.58,685.739 1578.14,685.739 1578.7,685.739 1579.26,685.739 1579.82,685.739 1580.37,685.739 1580.93,685.739 1581.49,685.739 1582.05,685.739 1582.61,685.739 1583.17,685.739 1583.73,685.739 1584.29,685.739 1584.85,685.739 1585.41,685.739 1585.97,685.739 1586.53,685.739 1587.09,685.739 1587.65,685.739 1588.2,685.739 1588.76,685.739 1589.32,685.739 1589.88,685.739 1590.44,685.739 1591,685.739 1591.56,685.739 1592.12,685.739 1592.68,685.739 1593.24,685.739 1593.8,685.739 1594.36,685.739 1594.92,685.739 1595.47,685.739 1596.03,685.739 1596.59,685.739 1597.15,685.739 1597.71,685.739 1598.27,685.739 1598.83,685.739 1599.39,685.739 1599.95,685.739 1600.51,685.739 1601.07,685.739 1601.63,685.739 1602.19,685.739 1602.74,685.739 1603.3,685.739 1603.86,685.739 1604.42,685.739 1604.98,685.739 1605.54,685.739 1606.1,685.739 1606.66,685.739 1607.22,685.739 1607.78,685.739 1608.34,685.739 1608.9,685.739 1609.46,685.739 1610.02,685.739 1610.57,685.739 1611.13,685.739 1611.69,685.739 1612.25,685.739 1612.81,685.739 1613.37,685.739 1613.93,685.739 1614.49,685.739 1615.05,685.739 1615.61,685.739 1616.17,685.739 1616.73,685.739 1617.29,685.739 1617.84,685.739 1618.4,685.739 1618.96,685.739 1619.52,685.739 1620.08,685.739 1620.64,685.739 1621.2,685.739 1621.76,685.739 1622.32,685.739 1622.88,685.739 1623.44,685.739 1624,685.739 1624.56,685.739 1625.11,685.739 1625.67,685.739 1626.23,685.739 1626.79,685.739 1627.35,685.739 1627.91,685.739 1628.47,685.739 1629.03,685.739 1629.59,685.739 1630.15,685.739 1630.71,685.739 1631.27,685.739 1631.83,685.739 1632.39,685.739 1632.94,685.739 1633.5,685.739 1634.06,685.739 1634.62,685.739 1635.18,685.739 1635.74,685.739 1636.3,685.739 1636.86,685.739 1637.42,685.739 1637.98,685.739 1638.54,685.739 1639.1,685.739 1639.66,685.739 1640.21,685.739 1640.77,685.739 1641.33,685.739 1641.89,685.739 1642.45,685.739 1643.01,685.739 1643.57,685.739 1644.13,685.739 1644.69,685.739 1645.25,685.739 1645.81,685.739 1646.37,685.739 1646.93,685.739 1647.48,685.739 1648.04,685.739 1648.6,685.739 1649.16,685.739 1649.72,685.739 1650.28,685.739 1650.84,685.739 1651.4,685.739 1651.96,685.739 1652.52,685.739 1653.08,685.739 1653.64,685.739 1654.2,685.739 1654.76,685.739 1655.31,685.739 1655.87,685.739 1656.43,685.739 1656.99,685.739 1657.55,685.739 1658.11,685.739 1658.67,685.739 1659.23,685.739 1659.79,685.739 1660.35,685.739 1660.91,685.739 1661.47,685.739 1662.03,685.739 1662.58,685.739 1663.14,685.739 1663.7,685.739 1664.26,685.739 1664.82,685.739 1665.38,685.739 1665.94,685.739 1666.5,685.739 1667.06,685.739 1667.62,685.739 1668.18,685.739 1668.74,685.739 1669.3,685.739 1669.85,685.739 1670.41,685.739 1670.97,685.739 1671.53,685.739 1672.09,685.739 1672.65,685.739 1673.21,685.739 1673.77,685.739 1674.33,685.739 1674.89,685.739 1675.45,685.739 1676.01,685.739 1676.57,685.739 1677.13,685.739 1677.68,685.739 1678.24,685.739 1678.8,685.739 1679.36,685.739 1679.92,685.739 1680.48,685.739 1681.04,685.739 1681.6,685.739 1682.16,685.739 1682.72,685.739 1683.28,685.739 1683.84,685.739 1684.4,685.739 1684.95,685.739 1685.51,685.739 1686.07,685.739 1686.63,685.739 1687.19,685.739 1687.75,685.739 1688.31,685.739 1688.87,685.739 1689.43,685.739 1689.99,685.739 1690.55,685.739 1691.11,685.739 1691.67,685.739 1692.23,685.739 1692.78,685.739 1693.34,685.739 1693.9,685.739 1694.46,685.739 1695.02,685.739 1695.58,685.739 1696.14,685.739 1696.7,685.739 1697.26,685.739 1697.82,685.739 1698.38,685.739 1698.94,685.739 1699.5,685.739 1700.05,685.739 1700.61,685.739 1701.17,685.739 1701.73,685.739 1702.29,685.739 1702.85,685.739 1703.41,685.739 1703.97,685.739 1704.53,685.739 1705.09,685.739 1705.65,685.739 1706.21,685.739 1706.77,685.739 1707.32,685.739 1707.88,685.739 1708.44,685.739 1709,685.739 1709.56,685.739 1710.12,685.739 1710.68,685.739 1711.24,685.739 1711.8,685.739 1712.36,685.739 1712.92,685.739 1713.48,685.739 1714.04,685.739 1714.6,685.739 1715.15,685.739 1715.71,685.739 1716.27,685.739 1716.83,685.739 1717.39,685.739 1717.95,685.739 1718.51,685.739 1719.07,685.739 1719.63,685.739 1720.19,685.739 1720.75,685.739 1721.31,685.739 1721.87,685.739 1722.42,685.739 1722.98,685.739 1723.54,685.739 1724.1,685.739 1724.66,685.739 1725.22,685.739 1725.78,685.739 1726.34,685.739 1726.9,685.739 1727.46,685.739 1728.02,685.739 1728.58,685.739 1729.14,685.739 1729.69,685.739 1730.25,685.739 1730.81,685.739 1731.37,685.739 1731.93,685.739 1732.49,685.739 1733.05,685.739 1733.61,685.739 1734.17,685.739 1734.73,685.739 1735.29,685.739 1735.85,685.739 1736.41,685.739 1736.97,685.739 1737.52,685.739 1738.08,685.739 1738.64,685.739 1739.2,685.739 1739.76,685.739 1740.32,685.739 1740.88,685.739 1741.44,685.739 1742,685.739 1742.56,685.739 1743.12,685.739 1743.68,685.739 1744.24,685.739 1744.79,685.739 1745.35,685.739 1745.91,685.739 1746.47,685.739 1747.03,685.739 1747.59,685.739 1748.15,685.739 1748.71,685.739 1749.27,685.739 1749.83,685.739 1750.39,685.739 1750.95,685.739 1751.51,685.739 1752.06,685.739 1752.62,685.739 1753.18,685.739 1753.74,685.739 1754.3,685.739 1754.86,685.739 1755.42,685.739 1755.98,685.739 1756.54,685.739 1757.1,685.739 1757.66,685.739 1758.22,685.739 1758.78,685.739 1759.34,685.739 1759.89,685.739 1760.45,685.739 1761.01,685.739 1761.57,685.739 1762.13,685.739 1762.69,685.739 1763.25,685.739 1763.81,685.739 1764.37,685.739 1764.93,685.739 1765.49,685.739 1766.05,685.739 1766.61,685.739 1767.16,685.739 1767.72,685.739 1768.28,685.739 1768.84,685.739 1769.4,685.739 1769.96,685.739 1770.52,685.739 1771.08,685.739 1771.64,685.739 1772.2,685.739 1772.76,685.739 1773.32,685.739 1773.88,685.739 1774.43,685.739 1774.99,685.739 1775.55,685.739 1776.11,685.739 1776.67,685.739 1777.23,685.739 1777.79,685.739 1778.35,685.739 1778.91,685.739 1779.47,685.739 1780.03,685.739 1780.59,685.739 1781.15,685.739 1781.71,685.739 1782.26,685.739 1782.82,685.739 1783.38,685.739 1783.94,685.739 1784.5,685.739 1785.06,685.739 1785.62,685.739 1786.18,685.739 1786.74,685.739 1787.3,685.739 1787.86,685.739 1788.42,685.739 1788.98,685.739 1789.53,685.739 1790.09,685.739 1790.65,685.739 1791.21,685.739 1791.77,685.739 1792.33,685.739 1792.89,685.739 1793.45,685.739 1794.01,685.739 1794.57,685.739 1795.13,685.739 1795.69,685.739 1796.25,685.739 1796.8,685.739 1797.36,685.739 1797.92,685.739 1798.48,685.739 1799.04,685.739 1799.6,685.739 1800.16,685.739 1800.72,685.739 1801.28,685.739 1801.84,685.739 1802.4,685.739 1802.96,685.739 1803.52,685.739 1804.08,685.739 1804.63,685.739 1805.19,685.739 1805.75,685.739 1806.31,685.739 1806.87,685.739 1807.43,685.739 1807.99,685.739 1808.55,685.739 1809.11,685.739 1809.67,685.739 1810.23,685.739 1810.79,685.739 1811.35,685.739 1811.9,685.739 1812.46,685.739 1813.02,685.739 1813.58,685.739 1814.14,685.739 1814.7,685.739 1815.26,685.739 1815.82,685.739 1816.38,685.739 1816.94,685.739 1817.5,685.739 1818.06,685.739 1818.62,685.739 1819.18,685.739 1819.73,685.739 1820.29,685.739 1820.85,685.739 1821.41,685.739 1821.97,685.739 1822.53,685.739 1823.09,685.739 1823.65,685.739 1824.21,685.739 1824.77,685.739 1825.33,685.739 1825.89,685.739 1826.45,685.739 1827,685.739 1827.56,685.739 1828.12,685.739 1828.68,685.739 1829.24,685.739 1829.8,685.739 1830.36,685.739 1830.92,685.739 1831.48,685.739 1832.04,685.739 1832.6,685.739 1833.16,685.739 1833.72,685.739 1834.27,685.739 1834.83,685.739 1835.39,685.739 1835.95,685.739 1836.51,685.739 1837.07,685.739 1837.63,685.739 1838.19,685.739 \"/>\n<path clip-path=\"url(#clip333)\" d=\"M720.247 684.662 L720.806 684.662 L721.365 684.662 L721.924 684.662 L722.484 684.662 L723.043 684.662 L723.602 684.662 L724.161 684.662 L724.721 684.662 L725.28 684.662 L725.839 684.662 L726.398 684.662 L726.958 684.662 L727.517 684.662 L728.076 684.662 L728.635 684.662 L729.195 684.662 L729.754 684.662 L730.313 684.662 L730.872 684.662 L731.432 684.662 L731.991 684.662 L732.55 684.662 L733.109 684.662 L733.669 684.662 L734.228 684.662 L734.787 684.662 L735.346 684.662 L735.906 684.662 L736.465 684.662 L737.024 684.662 L737.583 684.662 L738.143 684.662 L738.702 684.662 L739.261 684.662 L739.82 684.662 L740.38 684.662 L740.939 684.662 L741.498 684.662 L742.057 684.662 L742.617 684.662 L743.176 684.662 L743.735 684.662 L744.294 684.662 L744.854 684.662 L745.413 684.662 L745.972 684.662 L746.531 684.662 L747.091 684.662 L747.65 684.662 L748.209 684.662 L748.768 684.662 L749.328 684.662 L749.887 684.662 L750.446 684.662 L751.005 684.662 L751.565 684.662 L752.124 684.662 L752.683 684.662 L753.242 684.662 L753.802 684.662 L754.361 684.662 L754.92 684.662 L755.479 684.662 L756.039 684.662 L756.598 684.662 L757.157 684.662 L757.716 684.662 L758.276 684.662 L758.835 684.662 L759.394 684.662 L759.953 684.662 L760.513 684.662 L761.072 684.662 L761.631 684.662 L762.19 684.662 L762.75 684.662 L763.309 684.662 L763.868 684.662 L764.427 684.662 L764.987 684.662 L765.546 684.662 L766.105 684.662 L766.664 684.662 L767.224 684.662 L767.783 684.662 L768.342 684.662 L768.901 684.662 L769.461 684.662 L770.02 684.662 L770.579 684.662 L771.138 684.662 L771.698 684.662 L772.257 684.662 L772.816 684.662 L773.375 684.662 L773.935 684.662 L774.494 684.662 L775.053 684.662 L775.612 684.662 L776.172 684.662 L776.731 684.662 L777.29 684.662 L777.849 684.662 L778.409 684.662 L778.968 684.662 L779.527 684.662 L780.086 684.662 L780.646 684.662 L781.205 684.662 L781.764 684.662 L782.323 684.662 L782.883 684.662 L783.442 684.662 L784.001 684.662 L784.56 684.662 L785.12 684.662 L785.679 684.662 L786.238 684.662 L786.797 684.662 L787.357 684.662 L787.916 684.662 L788.475 684.662 L789.034 684.662 L789.594 684.662 L790.153 684.662 L790.712 684.662 L791.271 684.662 L791.831 684.662 L792.39 684.662 L792.949 684.662 L793.508 684.662 L794.068 684.662 L794.627 684.662 L795.186 684.662 L795.745 684.662 L796.305 684.662 L796.864 684.662 L797.423 684.662 L797.982 684.662 L798.542 684.662 L799.101 684.662 L799.66 684.662 L800.219 684.662 L800.779 684.662 L801.338 684.662 L801.897 684.662 L802.456 684.662 L803.016 684.662 L803.575 684.662 L804.134 684.662 L804.693 684.662 L805.253 684.662 L805.812 684.662 L806.371 684.662 L806.931 684.662 L807.49 684.662 L808.049 684.662 L808.608 684.662 L809.168 684.662 L809.727 684.662 L810.286 684.662 L810.845 684.662 L811.405 684.662 L811.964 684.662 L812.523 684.662 L813.082 684.662 L813.642 684.662 L814.201 684.662 L814.76 684.662 L815.319 684.662 L815.879 684.662 L816.438 684.662 L816.997 684.662 L817.556 684.662 L818.116 684.662 L818.675 684.662 L819.234 684.662 L819.793 684.662 L820.353 684.662 L820.912 684.662 L821.471 684.662 L822.03 684.662 L822.59 684.662 L823.149 684.662 L823.708 684.662 L824.267 684.662 L824.827 684.662 L825.386 684.662 L825.945 684.662 L826.504 684.662 L827.064 684.662 L827.623 684.662 L828.182 684.662 L828.741 684.662 L829.301 684.662 L829.86 684.662 L830.419 684.662 L830.978 684.662 L831.538 684.662 L832.097 684.662 L832.656 684.662 L833.215 684.662 L833.775 684.662 L834.334 684.662 L834.893 684.662 L835.452 684.662 L836.012 684.662 L836.571 684.662 L837.13 684.662 L837.689 684.662 L838.249 684.662 L838.808 684.662 L839.367 684.662 L839.926 684.662 L840.486 684.662 L841.045 684.662 L841.604 684.662 L842.163 684.662 L842.723 684.662 L843.282 684.662 L843.841 684.662 L844.4 684.662 L844.96 684.662 L845.519 684.662 L846.078 684.662 L846.637 684.662 L847.197 684.662 L847.756 684.662 L848.315 684.662 L848.874 684.662 L849.434 684.662 L849.993 684.662 L850.552 684.662 L851.111 684.662 L851.671 684.662 L852.23 684.662 L852.789 684.662 L853.348 684.662 L853.908 684.662 L854.467 684.662 L855.026 684.662 L855.585 684.662 L856.145 684.662 L856.704 684.662 L857.263 684.662 L857.822 684.662 L858.382 684.662 L858.941 684.662 L859.5 684.662 L860.059 684.662 L860.619 684.662 L861.178 684.662 L861.737 684.662 L862.296 684.662 L862.856 684.662 L863.415 684.662 L863.974 684.662 L864.533 684.662 L865.093 684.662 L865.652 684.662 L866.211 684.662 L866.77 684.662 L867.33 684.662 L867.889 684.662 L868.448 684.662 L869.007 684.662 L869.567 684.662 L870.126 684.662 L870.685 684.662 L871.244 684.662 L871.804 684.662 L872.363 684.662 L872.922 684.662 L873.481 684.662 L874.041 684.662 L874.6 684.662 L875.159 684.662 L875.718 684.662 L876.278 684.662 L876.837 684.662 L877.396 684.662 L877.955 684.662 L878.515 684.662 L879.074 684.662 L879.633 684.662 L880.192 684.662 L880.752 684.662 L881.311 684.662 L881.87 684.662 L882.429 684.662 L882.989 684.662 L883.548 684.662 L884.107 684.662 L884.666 684.662 L885.226 684.662 L885.785 684.662 L886.344 684.662 L886.903 684.662 L887.463 684.662 L888.022 684.662 L888.581 684.662 L889.14 684.662 L889.7 684.662 L890.259 684.662 L890.818 684.662 L891.377 684.662 L891.937 684.662 L892.496 684.662 L893.055 684.662 L893.614 684.662 L894.174 684.662 L894.733 684.662 L895.292 684.662 L895.851 684.662 L896.411 684.662 L896.97 684.662 L897.529 684.662 L898.088 684.662 L898.648 684.662 L899.207 684.662 L899.766 684.662 L900.325 684.662 L900.885 684.662 L901.444 684.662 L902.003 684.662 L902.562 684.662 L903.122 684.662 L903.681 684.662 L904.24 684.662 L904.799 684.662 L905.359 684.662 L905.918 684.662 L906.477 684.662 L907.036 684.662 L907.596 684.662 L908.155 684.662 L908.714 684.662 L909.273 684.662 L909.833 684.662 L910.392 684.662 L910.951 684.662 L911.51 684.662 L912.07 684.662 L912.629 684.662 L913.188 684.662 L913.747 684.662 L914.307 684.662 L914.866 684.662 L915.425 684.662 L915.984 684.662 L916.544 684.662 L917.103 684.662 L917.662 684.662 L918.221 684.662 L918.781 684.662 L919.34 684.662 L919.899 684.662 L920.458 684.662 L921.018 684.662 L921.577 684.662 L922.136 684.662 L922.695 684.662 L923.255 684.662 L923.814 684.662 L924.373 684.662 L924.932 684.662 L925.492 684.662 L926.051 684.662 L926.61 684.662 L927.169 684.662 L927.729 684.662 L928.288 684.662 L928.847 684.662 L929.406 684.662 L929.966 684.662 L930.525 684.662 L931.084 684.662 L931.644 684.662 L932.203 684.662 L932.762 684.662 L933.321 684.662 L933.881 684.662 L934.44 684.662 L934.999 684.662 L935.558 684.662 L936.118 684.662 L936.677 684.662 L937.236 684.662 L937.795 684.662 L938.355 684.662 L938.914 684.662 L939.473 684.662 L940.032 684.662 L940.592 684.662 L941.151 684.662 L941.71 684.662 L942.269 684.662 L942.829 684.662 L943.388 684.662 L943.947 684.662 L944.506 684.662 L945.066 684.662 L945.625 684.662 L946.184 684.662 L946.743 684.662 L947.303 684.662 L947.862 684.662 L948.421 684.662 L948.98 684.662 L949.54 684.662 L950.099 684.662 L950.658 684.662 L951.217 684.662 L951.777 684.662 L952.336 684.662 L952.895 684.662 L953.454 684.662 L954.014 684.662 L954.573 684.662 L955.132 684.662 L955.691 684.662 L956.251 684.662 L956.81 684.662 L957.369 684.662 L957.928 684.662 L958.488 684.662 L959.047 684.662 L959.606 684.662 L960.165 684.662 L960.725 684.662 L961.284 684.662 L961.843 684.662 L962.402 684.662 L962.962 684.662 L963.521 684.662 L964.08 684.662 L964.639 684.662 L965.199 684.662 L965.758 684.662 L966.317 684.662 L966.876 684.662 L967.436 684.662 L967.995 684.662 L968.554 684.662 L969.113 684.662 L969.673 684.662 L970.232 684.662 L970.791 684.662 L971.35 684.662 L971.91 684.662 L972.469 684.662 L973.028 684.662 L973.587 684.662 L974.147 684.662 L974.706 684.662 L975.265 684.662 L975.824 684.662 L976.384 684.662 L976.943 684.662 L977.502 684.662 L978.061 684.662 L978.621 684.662 L979.18 684.662 L979.739 684.662 L980.298 684.662 L980.858 684.662 L981.417 684.662 L981.976 684.662 L982.535 684.662 L983.095 684.662 L983.654 684.662 L984.213 684.662 L984.772 684.662 L985.332 684.662 L985.891 684.662 L986.45 684.662 L987.009 684.662 L987.569 684.662 L988.128 684.662 L988.687 684.662 L989.246 684.662 L989.806 684.662 L990.365 684.662 L990.924 684.662 L991.483 684.662 L992.043 684.662 L992.602 684.662 L993.161 684.662 L993.72 684.662 L994.28 684.662 L994.839 684.662 L995.398 684.662 L995.957 684.662 L996.517 684.662 L997.076 684.662 L997.635 684.662 L998.194 684.662 L998.754 684.662 L999.313 684.662 L999.872 684.662 L1000.43 684.662 L1000.99 684.662 L1001.55 684.662 L1002.11 684.662 L1002.67 684.662 L1003.23 684.662 L1003.79 684.662 L1004.35 684.662 L1004.91 684.662 L1005.46 684.662 L1006.02 684.662 L1006.58 684.662 L1007.14 684.662 L1007.7 684.662 L1008.26 684.662 L1008.82 684.662 L1009.38 684.662 L1009.94 684.662 L1010.5 684.662 L1011.06 684.662 L1011.62 684.662 L1012.18 684.662 L1012.73 684.662 L1013.29 684.662 L1013.85 684.662 L1014.41 684.662 L1014.97 684.662 L1015.53 684.662 L1016.09 684.662 L1016.65 684.662 L1017.21 684.662 L1017.77 684.662 L1018.33 684.662 L1018.89 684.662 L1019.45 684.662 L1020.01 684.662 L1020.56 684.662 L1021.12 684.662 L1021.68 684.662 L1022.24 684.662 L1022.8 684.662 L1023.36 684.662 L1023.92 684.662 L1024.48 684.662 L1025.04 684.662 L1025.6 684.662 L1026.16 684.662 L1026.72 684.662 L1027.28 684.662 L1027.83 684.662 L1028.39 684.662 L1028.95 684.662 L1029.51 684.662 L1030.07 684.662 L1030.63 684.662 L1031.19 684.662 L1031.75 684.662 L1032.31 684.662 L1032.87 684.662 L1033.43 684.662 L1033.99 684.662 L1034.55 684.662 L1035.1 684.662 L1035.66 684.662 L1036.22 684.662 L1036.78 684.662 L1037.34 684.662 L1037.9 684.662 L1038.46 684.662 L1039.02 684.662 L1039.58 684.662 L1040.14 684.662 L1040.7 684.662 L1041.26 684.662 L1041.82 684.662 L1042.38 684.662 L1042.93 684.662 L1043.49 684.662 L1044.05 684.662 L1044.61 684.662 L1045.17 684.662 L1045.73 684.662 L1046.29 684.662 L1046.85 684.662 L1047.41 684.662 L1047.97 684.662 L1048.53 684.662 L1049.09 684.662 L1049.65 684.662 L1050.2 684.662 L1050.76 684.662 L1051.32 684.662 L1051.88 684.662 L1052.44 684.662 L1053 684.662 L1053.56 684.662 L1054.12 684.662 L1054.68 684.662 L1055.24 684.662 L1055.8 684.662 L1056.36 684.662 L1056.92 684.662 L1057.48 684.662 L1058.03 684.662 L1058.59 684.662 L1059.15 684.662 L1059.71 684.662 L1060.27 684.662 L1060.83 684.662 L1061.39 684.662 L1061.95 684.662 L1062.51 684.662 L1063.07 684.662 L1063.63 684.662 L1064.19 684.662 L1064.75 684.662 L1065.3 684.662 L1065.86 684.662 L1066.42 684.662 L1066.98 684.662 L1067.54 684.662 L1068.1 684.662 L1068.66 684.662 L1069.22 684.662 L1069.78 684.662 L1070.34 684.662 L1070.9 684.662 L1071.46 684.662 L1072.02 684.662 L1072.57 684.662 L1073.13 684.662 L1073.69 684.662 L1074.25 684.662 L1074.81 684.662 L1075.37 684.662 L1075.93 684.662 L1076.49 684.662 L1077.05 684.662 L1077.61 684.662 L1078.17 684.662 L1078.73 684.662 L1079.29 684.662 L1079.85 684.662 L1080.4 684.662 L1080.96 684.662 L1081.52 684.662 L1082.08 684.662 L1082.64 684.662 L1083.2 684.662 L1083.76 684.662 L1084.32 684.662 L1084.88 684.662 L1085.44 684.662 L1086 684.662 L1086.56 684.662 L1087.12 684.662 L1087.67 684.662 L1088.23 684.662 L1088.79 684.662 L1089.35 684.662 L1089.91 684.662 L1090.47 684.662 L1091.03 684.662 L1091.59 684.662 L1092.15 684.662 L1092.71 684.662 L1093.27 684.662 L1093.83 684.662 L1094.39 684.662 L1094.94 684.662 L1095.5 684.662 L1096.06 684.662 L1096.62 684.662 L1097.18 684.662 L1097.74 684.662 L1098.3 684.662 L1098.86 684.662 L1099.42 684.662 L1099.98 684.662 L1100.54 684.662 L1101.1 684.662 L1101.66 684.662 L1102.22 684.662 L1102.77 684.662 L1103.33 684.662 L1103.89 684.662 L1104.45 684.662 L1105.01 684.662 L1105.57 684.662 L1106.13 684.662 L1106.69 684.662 L1107.25 684.662 L1107.81 684.662 L1108.37 684.662 L1108.93 684.662 L1109.49 684.662 L1110.04 684.662 L1110.6 684.662 L1111.16 684.662 L1111.72 684.662 L1112.28 684.662 L1112.84 684.662 L1113.4 684.662 L1113.96 684.662 L1114.52 684.662 L1115.08 684.662 L1115.64 684.662 L1116.2 684.662 L1116.76 684.662 L1117.31 684.662 L1117.87 684.662 L1118.43 684.662 L1118.99 684.662 L1119.55 684.662 L1120.11 684.662 L1120.67 684.662 L1121.23 684.662 L1121.79 684.662 L1122.35 684.662 L1122.91 684.662 L1123.47 684.662 L1124.03 684.662 L1124.59 684.662 L1125.14 684.662 L1125.7 684.662 L1126.26 684.662 L1126.82 684.662 L1127.38 684.662 L1127.94 684.662 L1128.5 684.662 L1129.06 684.662 L1129.62 684.662 L1130.18 684.662 L1130.74 684.662 L1131.3 684.662 L1131.86 684.662 L1132.41 684.662 L1132.97 684.662 L1133.53 684.662 L1134.09 684.662 L1134.65 684.662 L1135.21 684.662 L1135.77 684.662 L1136.33 684.662 L1136.89 684.662 L1137.45 684.662 L1138.01 684.662 L1138.57 684.662 L1139.13 684.662 L1139.68 684.662 L1140.24 684.662 L1140.8 684.662 L1141.36 684.662 L1141.92 684.662 L1142.48 684.662 L1143.04 684.662 L1143.6 684.662 L1144.16 684.662 L1144.72 684.662 L1145.28 684.662 L1145.84 684.662 L1146.4 684.662 L1146.96 684.662 L1147.51 684.662 L1148.07 684.662 L1148.63 684.662 L1149.19 684.662 L1149.75 684.662 L1150.31 684.662 L1150.87 684.662 L1151.43 684.662 L1151.99 684.662 L1152.55 684.662 L1153.11 684.662 L1153.67 684.662 L1154.23 684.662 L1154.78 684.662 L1155.34 684.662 L1155.9 684.662 L1156.46 684.662 L1157.02 684.662 L1157.58 684.662 L1158.14 684.662 L1158.7 684.662 L1159.26 684.662 L1159.82 684.662 L1160.38 684.662 L1160.94 684.662 L1161.5 684.662 L1162.05 684.662 L1162.61 684.662 L1163.17 684.662 L1163.73 684.662 L1164.29 684.662 L1164.85 684.662 L1165.41 684.662 L1165.97 684.662 L1166.53 684.662 L1167.09 684.662 L1167.65 684.662 L1168.21 684.662 L1168.77 684.662 L1169.33 684.662 L1169.88 684.662 L1170.44 684.662 L1171 684.662 L1171.56 684.662 L1172.12 684.662 L1172.68 684.662 L1173.24 684.662 L1173.8 684.662 L1174.36 684.662 L1174.92 684.662 L1175.48 684.662 L1176.04 684.662 L1176.6 684.662 L1177.15 684.662 L1177.71 684.662 L1178.27 684.662 L1178.83 684.662 L1179.39 684.662 L1179.95 684.662 L1180.51 684.662 L1181.07 684.662 L1181.63 684.662 L1182.19 684.662 L1182.75 684.662 L1183.31 684.662 L1183.87 684.662 L1184.43 684.662 L1184.98 684.662 L1185.54 684.662 L1186.1 684.662 L1186.66 684.662 L1187.22 684.662 L1187.78 684.662 L1188.34 684.662 L1188.9 684.662 L1189.46 684.662 L1190.02 684.662 L1190.58 684.662 L1191.14 684.662 L1191.7 684.662 L1192.25 684.662 L1192.81 684.662 L1193.37 684.662 L1193.93 684.662 L1194.49 684.662 L1195.05 684.662 L1195.61 684.662 L1196.17 684.662 L1196.73 684.662 L1197.29 684.662 L1197.85 684.662 L1198.41 684.662 L1198.97 684.662 L1199.52 684.662 L1200.08 684.662 L1200.64 684.662 L1201.2 684.662 L1201.76 684.662 L1202.32 684.662 L1202.88 684.662 L1203.44 684.662 L1204 684.662 L1204.56 684.662 L1205.12 684.662 L1205.68 684.662 L1206.24 684.662 L1206.8 684.662 L1207.35 684.662 L1207.91 684.662 L1208.47 684.662 L1209.03 684.662 L1209.59 684.662 L1210.15 684.662 L1210.71 684.662 L1211.27 684.662 L1211.83 684.662 L1212.39 684.662 L1212.95 684.662 L1213.51 684.662 L1214.07 684.662 L1214.62 684.662 L1215.18 684.662 L1215.74 684.662 L1216.3 684.662 L1216.86 684.662 L1217.42 684.662 L1217.98 684.662 L1218.54 684.662 L1219.1 684.662 L1219.66 684.662 L1220.22 684.662 L1220.78 684.662 L1221.34 684.662 L1221.89 684.662 L1222.45 684.662 L1223.01 684.662 L1223.57 684.662 L1224.13 684.662 L1224.69 684.662 L1225.25 684.662 L1225.81 684.662 L1226.37 684.662 L1226.93 684.662 L1227.49 684.662 L1228.05 684.662 L1228.61 684.662 L1229.17 684.662 L1229.72 684.662 L1230.28 684.662 L1230.84 684.662 L1231.4 684.662 L1231.96 684.662 L1232.52 684.662 L1233.08 684.662 L1233.64 684.662 L1234.2 684.662 L1234.76 684.662 L1235.32 684.662 L1235.88 684.662 L1236.44 684.662 L1236.99 684.662 L1237.55 684.662 L1238.11 684.662 L1238.67 684.662 L1239.23 684.662 L1239.79 684.662 L1240.35 684.662 L1240.91 684.662 L1241.47 684.662 L1242.03 684.662 L1242.59 684.662 L1243.15 684.662 L1243.71 684.662 L1244.26 684.662 L1244.82 684.662 L1245.38 684.662 L1245.94 684.662 L1246.5 684.662 L1247.06 684.662 L1247.62 684.662 L1248.18 684.662 L1248.74 684.662 L1249.3 684.662 L1249.86 684.662 L1250.42 684.662 L1250.98 684.662 L1251.54 684.662 L1252.09 684.662 L1252.65 684.662 L1253.21 684.662 L1253.77 684.662 L1254.33 684.662 L1254.89 684.662 L1255.45 684.662 L1256.01 684.662 L1256.57 684.662 L1257.13 684.662 L1257.69 684.662 L1258.25 684.662 L1258.81 684.662 L1259.36 684.662 L1259.92 684.662 L1260.48 684.662 L1261.04 684.662 L1261.6 684.662 L1262.16 684.662 L1262.72 684.662 L1263.28 684.662 L1263.84 684.662 L1264.4 684.662 L1264.96 684.662 L1265.52 684.662 L1266.08 684.662 L1266.63 684.662 L1267.19 684.662 L1267.75 684.662 L1268.31 684.662 L1268.87 684.662 L1269.43 684.662 L1269.99 684.662 L1270.55 684.662 L1271.11 684.662 L1271.67 684.662 L1272.23 684.662 L1272.79 684.662 L1273.35 684.662 L1273.91 684.662 L1274.46 684.662 L1275.02 684.662 L1275.58 684.662 L1276.14 684.662 L1276.7 684.662 L1277.26 684.662 L1277.82 684.662 L1278.38 684.662 L1278.94 684.662 L1279.5 684.662 L1280.06 684.662 L1280.62 684.662 L1281.18 684.662 L1281.73 684.662 L1282.29 684.662 L1282.85 684.662 L1283.41 684.662 L1283.97 684.662 L1284.53 684.662 L1285.09 684.662 L1285.65 684.662 L1286.21 684.662 L1286.77 684.662 L1287.33 684.662 L1287.89 684.662 L1288.45 684.662 L1289 684.662 L1289.56 684.662 L1290.12 684.662 L1290.68 684.662 L1291.24 684.662 L1291.8 684.662 L1292.36 684.662 L1292.92 684.662 L1293.48 684.662 L1294.04 684.662 L1294.6 684.662 L1295.16 684.662 L1295.72 684.662 L1296.28 684.662 L1296.83 684.662 L1297.39 684.662 L1297.95 684.662 L1298.51 684.662 L1299.07 684.662 L1299.63 684.662 L1300.19 684.662 L1300.75 684.662 L1301.31 684.662 L1301.87 684.662 L1302.43 684.662 L1302.99 684.662 L1303.55 684.662 L1304.1 684.662 L1304.66 684.662 L1305.22 684.662 L1305.78 684.662 L1306.34 684.662 L1306.9 684.662 L1307.46 684.662 L1308.02 684.662 L1308.58 684.662 L1309.14 684.662 L1309.7 684.662 L1310.26 684.662 L1310.82 684.662 L1311.38 684.662 L1311.93 684.662 L1312.49 684.662 L1313.05 684.662 L1313.61 684.662 L1314.17 684.662 L1314.73 684.662 L1315.29 684.662 L1315.85 684.662 L1316.41 684.662 L1316.97 684.662 L1317.53 684.662 L1318.09 684.662 L1318.65 684.662 L1319.2 684.662 L1319.76 684.662 L1320.32 684.662 L1320.88 684.662 L1321.44 684.662 L1322 684.662 L1322.56 684.662 L1323.12 684.662 L1323.68 684.662 L1324.24 684.662 L1324.8 684.662 L1325.36 684.662 L1325.92 684.662 L1326.47 684.662 L1327.03 684.662 L1327.59 684.662 L1328.15 684.662 L1328.71 684.662 L1329.27 684.662 L1329.83 684.662 L1330.39 684.662 L1330.95 684.662 L1331.51 684.662 L1332.07 684.662 L1332.63 684.662 L1333.19 684.662 L1333.75 684.662 L1334.3 684.662 L1334.86 684.662 L1335.42 684.662 L1335.98 684.662 L1336.54 684.662 L1337.1 684.662 L1337.66 684.662 L1338.22 684.662 L1338.78 684.662 L1339.34 684.662 L1339.9 684.662 L1340.46 684.662 L1341.02 684.662 L1341.57 684.662 L1342.13 684.662 L1342.69 684.662 L1343.25 684.662 L1343.81 684.662 L1344.37 684.662 L1344.93 684.662 L1345.49 684.662 L1346.05 684.662 L1346.61 684.662 L1347.17 684.662 L1347.73 684.662 L1348.29 684.662 L1348.84 684.662 L1349.4 684.662 L1349.96 684.662 L1350.52 684.662 L1351.08 684.662 L1351.64 684.662 L1352.2 684.662 L1352.76 684.662 L1353.32 684.662 L1353.88 684.662 L1354.44 684.662 L1355 684.662 L1355.56 684.662 L1356.12 684.662 L1356.67 684.662 L1357.23 684.662 L1357.79 684.662 L1358.35 684.662 L1358.91 684.662 L1359.47 684.662 L1360.03 684.662 L1360.59 684.662 L1361.15 684.662 L1361.71 684.662 L1362.27 684.662 L1362.83 684.662 L1363.39 684.662 L1363.94 684.662 L1364.5 684.662 L1365.06 684.662 L1365.62 684.662 L1366.18 684.662 L1366.74 684.662 L1367.3 684.662 L1367.86 684.662 L1368.42 684.662 L1368.98 684.662 L1369.54 684.662 L1370.1 684.662 L1370.66 684.662 L1371.21 684.662 L1371.77 684.662 L1372.33 684.662 L1372.89 684.662 L1373.45 684.662 L1374.01 684.662 L1374.57 684.662 L1375.13 684.662 L1375.69 684.662 L1376.25 684.662 L1376.81 684.662 L1377.37 684.662 L1377.93 684.662 L1378.49 684.662 L1379.04 684.662 L1379.6 684.662 L1380.16 684.662 L1380.72 684.662 L1381.28 684.662 L1381.84 684.662 L1382.4 684.662 L1382.96 684.662 L1383.52 684.662 L1384.08 684.662 L1384.64 684.662 L1385.2 684.662 L1385.76 684.662 L1386.31 684.662 L1386.87 684.662 L1387.43 684.662 L1387.99 684.662 L1388.55 684.662 L1389.11 684.662 L1389.67 684.662 L1390.23 684.662 L1390.79 684.662 L1391.35 684.662 L1391.91 684.662 L1392.47 684.662 L1393.03 684.662 L1393.58 684.662 L1394.14 684.662 L1394.7 684.662 L1395.26 684.662 L1395.82 684.662 L1396.38 684.662 L1396.94 684.662 L1397.5 684.662 L1398.06 684.662 L1398.62 684.662 L1399.18 684.662 L1399.74 684.662 L1400.3 684.662 L1400.86 684.662 L1401.41 684.662 L1401.97 684.662 L1402.53 684.662 L1403.09 684.662 L1403.65 684.662 L1404.21 684.662 L1404.77 684.662 L1405.33 684.662 L1405.89 684.662 L1406.45 684.662 L1407.01 684.662 L1407.57 684.662 L1408.13 684.662 L1408.68 684.662 L1409.24 684.662 L1409.8 684.662 L1410.36 684.662 L1410.92 684.662 L1411.48 684.662 L1412.04 684.662 L1412.6 684.662 L1413.16 684.662 L1413.72 684.662 L1414.28 684.662 L1414.84 684.662 L1415.4 684.662 L1415.95 684.662 L1416.51 684.662 L1417.07 684.662 L1417.63 684.662 L1418.19 684.662 L1418.75 684.662 L1419.31 684.662 L1419.87 684.662 L1420.43 684.662 L1420.99 684.662 L1421.55 684.662 L1422.11 684.662 L1422.67 684.662 L1423.23 684.662 L1423.78 684.662 L1424.34 684.662 L1424.9 684.662 L1425.46 684.662 L1426.02 684.662 L1426.58 684.662 L1427.14 684.662 L1427.7 684.662 L1428.26 684.662 L1428.82 684.662 L1429.38 684.662 L1429.94 684.662 L1430.5 684.662 L1431.05 684.662 L1431.61 684.662 L1432.17 684.662 L1432.73 684.662 L1433.29 684.662 L1433.85 684.662 L1434.41 684.662 L1434.97 684.662 L1435.53 684.662 L1436.09 684.662 L1436.65 684.662 L1437.21 684.662 L1437.77 684.662 L1438.33 684.662 L1438.88 684.662 L1439.44 684.662 L1440 684.662 L1440.56 684.662 L1441.12 684.662 L1441.68 684.662 L1442.24 684.662 L1442.8 684.662 L1443.36 684.662 L1443.92 684.662 L1444.48 684.662 L1445.04 684.662 L1445.6 684.662 L1446.15 684.662 L1446.71 684.662 L1447.27 684.662 L1447.83 684.662 L1448.39 684.662 L1448.95 684.662 L1449.51 684.662 L1450.07 684.662 L1450.63 684.662 L1451.19 684.662 L1451.75 684.662 L1452.31 684.662 L1452.87 684.662 L1453.42 684.662 L1453.98 684.662 L1454.54 684.662 L1455.1 684.662 L1455.66 684.662 L1456.22 684.662 L1456.78 684.662 L1457.34 684.662 L1457.9 684.662 L1458.46 684.662 L1459.02 684.662 L1459.58 684.662 L1460.14 684.662 L1460.7 684.662 L1461.25 684.662 L1461.81 684.662 L1462.37 684.662 L1462.93 684.662 L1463.49 684.662 L1464.05 684.662 L1464.61 684.662 L1465.17 684.662 L1465.73 684.662 L1466.29 684.662 L1466.85 684.662 L1467.41 684.662 L1467.97 684.662 L1468.52 684.662 L1469.08 684.662 L1469.64 684.662 L1470.2 684.662 L1470.76 684.662 L1471.32 684.662 L1471.88 684.662 L1472.44 684.662 L1473 684.662 L1473.56 684.662 L1474.12 684.662 L1474.68 684.662 L1475.24 684.662 L1475.79 684.662 L1476.35 684.662 L1476.91 684.662 L1477.47 684.662 L1478.03 684.662 L1478.59 684.662 L1479.15 684.662 L1479.71 684.662 L1480.27 684.662 L1480.83 684.662 L1481.39 684.662 L1481.95 684.662 L1482.51 684.662 L1483.07 684.662 L1483.62 684.662 L1484.18 684.662 L1484.74 684.662 L1485.3 684.662 L1485.86 684.662 L1486.42 684.662 L1486.98 684.662 L1487.54 684.662 L1488.1 684.662 L1488.66 684.662 L1489.22 684.662 L1489.78 684.662 L1490.34 684.662 L1490.89 684.662 L1491.45 684.662 L1492.01 684.662 L1492.57 684.662 L1493.13 684.662 L1493.69 684.662 L1494.25 684.662 L1494.81 684.662 L1495.37 684.662 L1495.93 684.662 L1496.49 684.662 L1497.05 684.662 L1497.61 684.662 L1498.16 684.662 L1498.72 684.662 L1499.28 684.662 L1499.84 684.662 L1500.4 684.662 L1500.96 684.662 L1501.52 684.662 L1502.08 684.662 L1502.64 684.662 L1503.2 684.662 L1503.76 684.662 L1504.32 684.662 L1504.88 684.662 L1505.44 684.662 L1505.99 684.662 L1506.55 684.662 L1507.11 684.662 L1507.67 684.662 L1508.23 684.662 L1508.79 684.662 L1509.35 684.662 L1509.91 684.662 L1510.47 684.662 L1511.03 684.662 L1511.59 684.662 L1512.15 684.662 L1512.71 684.662 L1513.26 684.662 L1513.82 684.662 L1514.38 684.662 L1514.94 684.662 L1515.5 684.662 L1516.06 684.662 L1516.62 684.662 L1517.18 684.662 L1517.74 684.662 L1518.3 684.662 L1518.86 684.662 L1519.42 684.662 L1519.98 684.662 L1520.53 684.662 L1521.09 684.662 L1521.65 684.662 L1522.21 684.662 L1522.77 684.662 L1523.33 684.662 L1523.89 684.662 L1524.45 684.662 L1525.01 684.662 L1525.57 684.662 L1526.13 684.662 L1526.69 684.662 L1527.25 684.662 L1527.81 684.662 L1528.36 684.662 L1528.92 684.662 L1529.48 684.662 L1530.04 684.662 L1530.6 684.662 L1531.16 684.662 L1531.72 684.662 L1532.28 684.662 L1532.84 684.662 L1533.4 684.662 L1533.96 684.662 L1534.52 684.662 L1535.08 684.662 L1535.63 684.662 L1536.19 684.662 L1536.75 684.662 L1537.31 684.662 L1537.87 684.662 L1538.43 684.662 L1538.99 684.662 L1539.55 684.662 L1540.11 684.662 L1540.67 684.662 L1541.23 684.662 L1541.79 684.662 L1542.35 684.662 L1542.9 684.662 L1543.46 684.662 L1544.02 684.662 L1544.58 684.662 L1545.14 684.662 L1545.7 684.662 L1546.26 684.662 L1546.82 684.662 L1547.38 684.662 L1547.94 684.662 L1548.5 684.662 L1549.06 684.662 L1549.62 684.662 L1550.18 684.662 L1550.73 684.662 L1551.29 684.662 L1551.85 684.662 L1552.41 684.662 L1552.97 684.662 L1553.53 684.662 L1554.09 684.662 L1554.65 684.662 L1555.21 684.662 L1555.77 684.662 L1556.33 684.662 L1556.89 684.662 L1557.45 684.662 L1558 684.662 L1558.56 684.662 L1559.12 684.662 L1559.68 684.662 L1560.24 684.662 L1560.8 684.662 L1561.36 684.662 L1561.92 684.662 L1562.48 684.662 L1563.04 684.662 L1563.6 684.662 L1564.16 684.662 L1564.72 684.662 L1565.28 684.662 L1565.83 684.662 L1566.39 684.662 L1566.95 684.662 L1567.51 684.662 L1568.07 684.662 L1568.63 684.662 L1569.19 684.662 L1569.75 684.662 L1570.31 684.662 L1570.87 684.662 L1571.43 684.662 L1571.99 684.662 L1572.55 684.662 L1573.1 684.662 L1573.66 684.662 L1574.22 684.662 L1574.78 684.662 L1575.34 684.662 L1575.9 684.662 L1576.46 684.662 L1577.02 684.662 L1577.58 684.662 L1578.14 684.662 L1578.7 684.662 L1579.26 684.662 L1579.82 684.662 L1580.37 684.662 L1580.93 684.662 L1581.49 684.662 L1582.05 684.662 L1582.61 684.662 L1583.17 684.662 L1583.73 684.662 L1584.29 684.662 L1584.85 684.662 L1585.41 684.662 L1585.97 684.662 L1586.53 684.662 L1587.09 684.662 L1587.65 684.662 L1588.2 684.662 L1588.76 684.662 L1589.32 684.662 L1589.88 684.662 L1590.44 684.662 L1591 684.662 L1591.56 684.662 L1592.12 684.662 L1592.68 684.662 L1593.24 684.662 L1593.8 684.662 L1594.36 684.662 L1594.92 684.662 L1595.47 684.662 L1596.03 684.662 L1596.59 684.662 L1597.15 684.662 L1597.71 684.662 L1598.27 684.662 L1598.83 684.662 L1599.39 684.662 L1599.95 684.662 L1600.51 684.662 L1601.07 684.662 L1601.63 684.662 L1602.19 684.662 L1602.74 684.662 L1603.3 684.662 L1603.86 684.662 L1604.42 684.662 L1604.98 684.662 L1605.54 684.662 L1606.1 684.662 L1606.66 684.662 L1607.22 684.662 L1607.78 684.662 L1608.34 684.662 L1608.9 684.662 L1609.46 684.662 L1610.02 684.662 L1610.57 684.662 L1611.13 684.662 L1611.69 684.662 L1612.25 684.662 L1612.81 684.662 L1613.37 684.662 L1613.93 684.662 L1614.49 684.662 L1615.05 684.662 L1615.61 684.662 L1616.17 684.662 L1616.73 684.662 L1617.29 684.662 L1617.84 684.662 L1618.4 684.662 L1618.96 684.662 L1619.52 684.662 L1620.08 684.662 L1620.64 684.662 L1621.2 684.662 L1621.76 684.662 L1622.32 684.662 L1622.88 684.662 L1623.44 684.662 L1624 684.662 L1624.56 684.662 L1625.11 684.662 L1625.67 684.662 L1626.23 684.662 L1626.79 684.662 L1627.35 684.662 L1627.91 684.662 L1628.47 684.662 L1629.03 684.662 L1629.59 684.662 L1630.15 684.662 L1630.71 684.662 L1631.27 684.662 L1631.83 684.662 L1632.39 684.662 L1632.94 684.662 L1633.5 684.662 L1634.06 684.662 L1634.62 684.662 L1635.18 684.662 L1635.74 684.662 L1636.3 684.662 L1636.86 684.662 L1637.42 684.662 L1637.98 684.662 L1638.54 684.662 L1639.1 684.662 L1639.66 684.662 L1640.21 684.662 L1640.77 684.662 L1641.33 684.662 L1641.89 684.662 L1642.45 684.662 L1643.01 684.662 L1643.57 684.662 L1644.13 684.662 L1644.69 684.662 L1645.25 684.662 L1645.81 684.662 L1646.37 684.662 L1646.93 684.662 L1647.48 684.662 L1648.04 684.662 L1648.6 684.662 L1649.16 684.662 L1649.72 684.662 L1650.28 684.662 L1650.84 684.662 L1651.4 684.662 L1651.96 684.662 L1652.52 684.662 L1653.08 684.662 L1653.64 684.662 L1654.2 684.662 L1654.76 684.662 L1655.31 684.662 L1655.87 684.662 L1656.43 684.662 L1656.99 684.662 L1657.55 684.662 L1658.11 684.662 L1658.67 684.662 L1659.23 684.662 L1659.79 684.662 L1660.35 684.662 L1660.91 684.662 L1661.47 684.662 L1662.03 684.662 L1662.58 684.662 L1663.14 684.662 L1663.7 684.662 L1664.26 684.662 L1664.82 684.662 L1665.38 684.662 L1665.94 684.662 L1666.5 684.662 L1667.06 684.662 L1667.62 684.662 L1668.18 684.662 L1668.74 684.662 L1669.3 684.662 L1669.85 684.662 L1670.41 684.662 L1670.97 684.662 L1671.53 684.662 L1672.09 684.662 L1672.65 684.662 L1673.21 684.662 L1673.77 684.662 L1674.33 684.662 L1674.89 684.662 L1675.45 684.662 L1676.01 684.662 L1676.57 684.662 L1677.13 684.662 L1677.68 684.662 L1678.24 684.662 L1678.8 684.662 L1679.36 684.662 L1679.92 684.662 L1680.48 684.662 L1681.04 684.662 L1681.6 684.662 L1682.16 684.662 L1682.72 684.662 L1683.28 684.662 L1683.84 684.662 L1684.4 684.662 L1684.95 684.662 L1685.51 684.662 L1686.07 684.662 L1686.63 684.662 L1687.19 684.662 L1687.75 684.662 L1688.31 684.662 L1688.87 684.662 L1689.43 684.662 L1689.99 684.662 L1690.55 684.662 L1691.11 684.662 L1691.67 684.662 L1692.23 684.662 L1692.78 684.662 L1693.34 684.662 L1693.9 684.662 L1694.46 684.662 L1695.02 684.662 L1695.58 684.662 L1696.14 684.662 L1696.7 684.662 L1697.26 684.662 L1697.82 684.662 L1698.38 684.662 L1698.94 684.662 L1699.5 684.662 L1700.05 684.662 L1700.61 684.662 L1701.17 684.662 L1701.73 684.662 L1702.29 684.662 L1702.85 684.662 L1703.41 684.662 L1703.97 684.662 L1704.53 684.662 L1705.09 684.662 L1705.65 684.662 L1706.21 684.662 L1706.77 684.662 L1707.32 684.662 L1707.88 684.662 L1708.44 684.662 L1709 684.662 L1709.56 684.662 L1710.12 684.662 L1710.68 684.662 L1711.24 684.662 L1711.8 684.662 L1712.36 684.662 L1712.92 684.662 L1713.48 684.662 L1714.04 684.662 L1714.6 684.662 L1715.15 684.662 L1715.71 684.662 L1716.27 684.662 L1716.83 684.662 L1717.39 684.662 L1717.95 684.662 L1718.51 684.662 L1719.07 684.662 L1719.63 684.662 L1720.19 684.662 L1720.75 684.662 L1721.31 684.662 L1721.87 684.662 L1722.42 684.662 L1722.98 684.662 L1723.54 684.662 L1724.1 684.662 L1724.66 684.662 L1725.22 684.662 L1725.78 684.662 L1726.34 684.662 L1726.9 684.662 L1727.46 684.662 L1728.02 684.662 L1728.58 684.662 L1729.14 684.662 L1729.69 684.662 L1730.25 684.662 L1730.81 684.662 L1731.37 684.662 L1731.93 684.662 L1732.49 684.662 L1733.05 684.662 L1733.61 684.662 L1734.17 684.662 L1734.73 684.662 L1735.29 684.662 L1735.85 684.662 L1736.41 684.662 L1736.97 684.662 L1737.52 684.662 L1738.08 684.662 L1738.64 684.662 L1739.2 684.662 L1739.76 684.662 L1740.32 684.662 L1740.88 684.662 L1741.44 684.662 L1742 684.662 L1742.56 684.662 L1743.12 684.662 L1743.68 684.662 L1744.24 684.662 L1744.79 684.662 L1745.35 684.662 L1745.91 684.662 L1746.47 684.662 L1747.03 684.662 L1747.59 684.662 L1748.15 684.662 L1748.71 684.662 L1749.27 684.662 L1749.83 684.662 L1750.39 684.662 L1750.95 684.662 L1751.51 684.662 L1752.06 684.662 L1752.62 684.662 L1753.18 684.662 L1753.74 684.662 L1754.3 684.662 L1754.86 684.662 L1755.42 684.662 L1755.98 684.662 L1756.54 684.662 L1757.1 684.662 L1757.66 684.662 L1758.22 684.662 L1758.78 684.662 L1759.34 684.662 L1759.89 684.662 L1760.45 684.662 L1761.01 684.662 L1761.57 684.662 L1762.13 684.662 L1762.69 684.662 L1763.25 684.662 L1763.81 684.662 L1764.37 684.662 L1764.93 684.662 L1765.49 684.662 L1766.05 684.662 L1766.61 684.662 L1767.16 684.662 L1767.72 684.662 L1768.28 684.662 L1768.84 684.662 L1769.4 684.662 L1769.96 684.662 L1770.52 684.662 L1771.08 684.662 L1771.64 684.662 L1772.2 684.662 L1772.76 684.662 L1773.32 684.662 L1773.88 684.662 L1774.43 684.662 L1774.99 684.662 L1775.55 684.662 L1776.11 684.662 L1776.67 684.662 L1777.23 684.662 L1777.79 684.662 L1778.35 684.662 L1778.91 684.662 L1779.47 684.662 L1780.03 684.662 L1780.59 684.662 L1781.15 684.662 L1781.71 684.662 L1782.26 684.662 L1782.82 684.662 L1783.38 684.662 L1783.94 684.662 L1784.5 684.662 L1785.06 684.662 L1785.62 684.662 L1786.18 684.662 L1786.74 684.662 L1787.3 684.662 L1787.86 684.662 L1788.42 684.662 L1788.98 684.662 L1789.53 684.662 L1790.09 684.662 L1790.65 684.662 L1791.21 684.662 L1791.77 684.662 L1792.33 684.662 L1792.89 684.662 L1793.45 684.662 L1794.01 684.662 L1794.57 684.662 L1795.13 684.662 L1795.69 684.662 L1796.25 684.662 L1796.8 684.662 L1797.36 684.662 L1797.92 684.662 L1798.48 684.662 L1799.04 684.662 L1799.6 684.662 L1800.16 684.662 L1800.72 684.662 L1801.28 684.662 L1801.84 684.662 L1802.4 684.662 L1802.96 684.662 L1803.52 684.662 L1804.08 684.662 L1804.63 684.662 L1805.19 684.662 L1805.75 684.662 L1806.31 684.662 L1806.87 684.662 L1807.43 684.662 L1807.99 684.662 L1808.55 684.662 L1809.11 684.662 L1809.67 684.662 L1810.23 684.662 L1810.79 684.662 L1811.35 684.662 L1811.9 684.662 L1812.46 684.662 L1813.02 684.662 L1813.58 684.662 L1814.14 684.662 L1814.7 684.662 L1815.26 684.662 L1815.82 684.662 L1816.38 684.662 L1816.94 684.662 L1817.5 684.662 L1818.06 684.662 L1818.62 684.662 L1819.18 684.662 L1819.73 684.662 L1820.29 684.662 L1820.85 684.662 L1821.41 684.662 L1821.97 684.662 L1822.53 684.662 L1823.09 684.662 L1823.65 684.662 L1824.21 684.662 L1824.77 684.662 L1825.33 684.662 L1825.89 684.662 L1826.45 684.662 L1827 684.662 L1827.56 684.662 L1828.12 684.662 L1828.68 684.662 L1829.24 684.662 L1829.8 684.662 L1830.36 684.662 L1830.92 684.662 L1831.48 684.662 L1832.04 684.662 L1832.6 684.662 L1833.16 684.662 L1833.72 684.662 L1834.27 684.662 L1834.83 684.662 L1835.39 684.662 L1835.95 684.662 L1836.51 684.662 L1837.07 684.662 L1837.63 684.662 L1838.19 684.662 L1838.19 682.162 L1837.63 682.162 L1837.07 682.162 L1836.51 682.162 L1835.95 682.162 L1835.39 682.162 L1834.83 682.162 L1834.27 682.162 L1833.72 682.162 L1833.16 682.162 L1832.6 682.162 L1832.04 682.162 L1831.48 682.162 L1830.92 682.162 L1830.36 682.162 L1829.8 682.162 L1829.24 682.162 L1828.68 682.162 L1828.12 682.162 L1827.56 682.162 L1827 682.162 L1826.45 682.162 L1825.89 682.162 L1825.33 682.162 L1824.77 682.162 L1824.21 682.162 L1823.65 682.162 L1823.09 682.162 L1822.53 682.162 L1821.97 682.162 L1821.41 682.162 L1820.85 682.162 L1820.29 682.162 L1819.73 682.162 L1819.18 682.162 L1818.62 682.162 L1818.06 682.162 L1817.5 682.162 L1816.94 682.162 L1816.38 682.162 L1815.82 682.162 L1815.26 682.162 L1814.7 682.162 L1814.14 682.162 L1813.58 682.162 L1813.02 682.162 L1812.46 682.162 L1811.9 682.162 L1811.35 682.162 L1810.79 682.162 L1810.23 682.162 L1809.67 682.162 L1809.11 682.162 L1808.55 682.162 L1807.99 682.162 L1807.43 682.162 L1806.87 682.162 L1806.31 682.162 L1805.75 682.162 L1805.19 682.162 L1804.63 682.162 L1804.08 682.162 L1803.52 682.162 L1802.96 682.162 L1802.4 682.162 L1801.84 682.162 L1801.28 682.162 L1800.72 682.162 L1800.16 682.162 L1799.6 682.162 L1799.04 682.162 L1798.48 682.162 L1797.92 682.162 L1797.36 682.162 L1796.8 682.162 L1796.25 682.162 L1795.69 682.162 L1795.13 682.162 L1794.57 682.162 L1794.01 682.162 L1793.45 682.162 L1792.89 682.162 L1792.33 682.162 L1791.77 682.162 L1791.21 682.162 L1790.65 682.162 L1790.09 682.162 L1789.53 682.162 L1788.98 682.162 L1788.42 682.162 L1787.86 682.162 L1787.3 682.162 L1786.74 682.162 L1786.18 682.162 L1785.62 682.162 L1785.06 682.162 L1784.5 682.162 L1783.94 682.162 L1783.38 682.162 L1782.82 682.162 L1782.26 682.162 L1781.71 682.162 L1781.15 682.162 L1780.59 682.162 L1780.03 682.162 L1779.47 682.162 L1778.91 682.162 L1778.35 682.162 L1777.79 682.162 L1777.23 682.162 L1776.67 682.162 L1776.11 682.162 L1775.55 682.162 L1774.99 682.162 L1774.43 682.162 L1773.88 682.162 L1773.32 682.162 L1772.76 682.162 L1772.2 682.162 L1771.64 682.162 L1771.08 682.162 L1770.52 682.162 L1769.96 682.162 L1769.4 682.162 L1768.84 682.162 L1768.28 682.162 L1767.72 682.162 L1767.16 682.162 L1766.61 682.162 L1766.05 682.162 L1765.49 682.162 L1764.93 682.162 L1764.37 682.162 L1763.81 682.162 L1763.25 682.162 L1762.69 682.162 L1762.13 682.162 L1761.57 682.162 L1761.01 682.162 L1760.45 682.162 L1759.89 682.162 L1759.34 682.162 L1758.78 682.162 L1758.22 682.162 L1757.66 682.162 L1757.1 682.162 L1756.54 682.162 L1755.98 682.162 L1755.42 682.162 L1754.86 682.162 L1754.3 682.162 L1753.74 682.162 L1753.18 682.162 L1752.62 682.162 L1752.06 682.162 L1751.51 682.162 L1750.95 682.162 L1750.39 682.162 L1749.83 682.162 L1749.27 682.162 L1748.71 682.162 L1748.15 682.162 L1747.59 682.162 L1747.03 682.162 L1746.47 682.162 L1745.91 682.162 L1745.35 682.162 L1744.79 682.162 L1744.24 682.162 L1743.68 682.162 L1743.12 682.162 L1742.56 682.162 L1742 682.162 L1741.44 682.162 L1740.88 682.162 L1740.32 682.162 L1739.76 682.162 L1739.2 682.162 L1738.64 682.162 L1738.08 682.162 L1737.52 682.162 L1736.97 682.162 L1736.41 682.162 L1735.85 682.162 L1735.29 682.162 L1734.73 682.162 L1734.17 682.162 L1733.61 682.162 L1733.05 682.162 L1732.49 682.162 L1731.93 682.162 L1731.37 682.162 L1730.81 682.162 L1730.25 682.162 L1729.69 682.162 L1729.14 682.162 L1728.58 682.162 L1728.02 682.162 L1727.46 682.162 L1726.9 682.162 L1726.34 682.162 L1725.78 682.162 L1725.22 682.162 L1724.66 682.162 L1724.1 682.162 L1723.54 682.162 L1722.98 682.162 L1722.42 682.162 L1721.87 682.162 L1721.31 682.162 L1720.75 682.162 L1720.19 682.162 L1719.63 682.162 L1719.07 682.162 L1718.51 682.162 L1717.95 682.162 L1717.39 682.162 L1716.83 682.162 L1716.27 682.162 L1715.71 682.162 L1715.15 682.162 L1714.6 682.162 L1714.04 682.162 L1713.48 682.162 L1712.92 682.162 L1712.36 682.162 L1711.8 682.162 L1711.24 682.162 L1710.68 682.162 L1710.12 682.162 L1709.56 682.162 L1709 682.162 L1708.44 682.162 L1707.88 682.162 L1707.32 682.162 L1706.77 682.162 L1706.21 682.162 L1705.65 682.162 L1705.09 682.162 L1704.53 682.162 L1703.97 682.162 L1703.41 682.162 L1702.85 682.162 L1702.29 682.162 L1701.73 682.162 L1701.17 682.162 L1700.61 682.162 L1700.05 682.162 L1699.5 682.162 L1698.94 682.162 L1698.38 682.162 L1697.82 682.162 L1697.26 682.162 L1696.7 682.162 L1696.14 682.162 L1695.58 682.162 L1695.02 682.162 L1694.46 682.162 L1693.9 682.162 L1693.34 682.162 L1692.78 682.162 L1692.23 682.162 L1691.67 682.162 L1691.11 682.162 L1690.55 682.162 L1689.99 682.162 L1689.43 682.162 L1688.87 682.162 L1688.31 682.162 L1687.75 682.162 L1687.19 682.162 L1686.63 682.162 L1686.07 682.162 L1685.51 682.162 L1684.95 682.162 L1684.4 682.162 L1683.84 682.162 L1683.28 682.162 L1682.72 682.162 L1682.16 682.162 L1681.6 682.162 L1681.04 682.162 L1680.48 682.162 L1679.92 682.162 L1679.36 682.162 L1678.8 682.162 L1678.24 682.162 L1677.68 682.162 L1677.13 682.162 L1676.57 682.162 L1676.01 682.162 L1675.45 682.162 L1674.89 682.162 L1674.33 682.162 L1673.77 682.162 L1673.21 682.162 L1672.65 682.162 L1672.09 682.162 L1671.53 682.162 L1670.97 682.162 L1670.41 682.162 L1669.85 682.162 L1669.3 682.162 L1668.74 682.162 L1668.18 682.162 L1667.62 682.162 L1667.06 682.162 L1666.5 682.162 L1665.94 682.162 L1665.38 682.162 L1664.82 682.162 L1664.26 682.162 L1663.7 682.162 L1663.14 682.162 L1662.58 682.162 L1662.03 682.162 L1661.47 682.162 L1660.91 682.162 L1660.35 682.162 L1659.79 682.162 L1659.23 682.162 L1658.67 682.162 L1658.11 682.162 L1657.55 682.162 L1656.99 682.162 L1656.43 682.162 L1655.87 682.162 L1655.31 682.162 L1654.76 682.162 L1654.2 682.162 L1653.64 682.162 L1653.08 682.162 L1652.52 682.162 L1651.96 682.162 L1651.4 682.162 L1650.84 682.162 L1650.28 682.162 L1649.72 682.162 L1649.16 682.162 L1648.6 682.162 L1648.04 682.162 L1647.48 682.162 L1646.93 682.162 L1646.37 682.162 L1645.81 682.162 L1645.25 682.162 L1644.69 682.162 L1644.13 682.162 L1643.57 682.162 L1643.01 682.162 L1642.45 682.162 L1641.89 682.162 L1641.33 682.162 L1640.77 682.162 L1640.21 682.162 L1639.66 682.162 L1639.1 682.162 L1638.54 682.162 L1637.98 682.162 L1637.42 682.162 L1636.86 682.162 L1636.3 682.162 L1635.74 682.162 L1635.18 682.162 L1634.62 682.162 L1634.06 682.162 L1633.5 682.162 L1632.94 682.162 L1632.39 682.162 L1631.83 682.162 L1631.27 682.162 L1630.71 682.162 L1630.15 682.162 L1629.59 682.162 L1629.03 682.162 L1628.47 682.162 L1627.91 682.162 L1627.35 682.162 L1626.79 682.162 L1626.23 682.162 L1625.67 682.162 L1625.11 682.162 L1624.56 682.162 L1624 682.162 L1623.44 682.162 L1622.88 682.162 L1622.32 682.162 L1621.76 682.162 L1621.2 682.162 L1620.64 682.162 L1620.08 682.162 L1619.52 682.162 L1618.96 682.162 L1618.4 682.162 L1617.84 682.162 L1617.29 682.162 L1616.73 682.162 L1616.17 682.162 L1615.61 682.162 L1615.05 682.162 L1614.49 682.162 L1613.93 682.162 L1613.37 682.162 L1612.81 682.162 L1612.25 682.162 L1611.69 682.162 L1611.13 682.162 L1610.57 682.162 L1610.02 682.162 L1609.46 682.162 L1608.9 682.162 L1608.34 682.162 L1607.78 682.162 L1607.22 682.162 L1606.66 682.162 L1606.1 682.162 L1605.54 682.162 L1604.98 682.162 L1604.42 682.162 L1603.86 682.162 L1603.3 682.162 L1602.74 682.162 L1602.19 682.162 L1601.63 682.162 L1601.07 682.162 L1600.51 682.162 L1599.95 682.162 L1599.39 682.162 L1598.83 682.162 L1598.27 682.162 L1597.71 682.162 L1597.15 682.162 L1596.59 682.162 L1596.03 682.162 L1595.47 682.162 L1594.92 682.162 L1594.36 682.162 L1593.8 682.162 L1593.24 682.162 L1592.68 682.162 L1592.12 682.162 L1591.56 682.162 L1591 682.162 L1590.44 682.162 L1589.88 682.162 L1589.32 682.162 L1588.76 682.162 L1588.2 682.162 L1587.65 682.162 L1587.09 682.162 L1586.53 682.162 L1585.97 682.162 L1585.41 682.162 L1584.85 682.162 L1584.29 682.162 L1583.73 682.162 L1583.17 682.162 L1582.61 682.162 L1582.05 682.162 L1581.49 682.162 L1580.93 682.162 L1580.37 682.162 L1579.82 682.162 L1579.26 682.162 L1578.7 682.162 L1578.14 682.162 L1577.58 682.162 L1577.02 682.162 L1576.46 682.162 L1575.9 682.162 L1575.34 682.162 L1574.78 682.162 L1574.22 682.162 L1573.66 682.162 L1573.1 682.162 L1572.55 682.162 L1571.99 682.162 L1571.43 682.162 L1570.87 682.162 L1570.31 682.162 L1569.75 682.162 L1569.19 682.162 L1568.63 682.162 L1568.07 682.162 L1567.51 682.162 L1566.95 682.162 L1566.39 682.162 L1565.83 682.162 L1565.28 682.162 L1564.72 682.162 L1564.16 682.162 L1563.6 682.162 L1563.04 682.162 L1562.48 682.162 L1561.92 682.162 L1561.36 682.162 L1560.8 682.162 L1560.24 682.162 L1559.68 682.162 L1559.12 682.162 L1558.56 682.162 L1558 682.162 L1557.45 682.162 L1556.89 682.162 L1556.33 682.162 L1555.77 682.162 L1555.21 682.162 L1554.65 682.162 L1554.09 682.162 L1553.53 682.162 L1552.97 682.162 L1552.41 682.162 L1551.85 682.162 L1551.29 682.162 L1550.73 682.162 L1550.18 682.162 L1549.62 682.162 L1549.06 682.162 L1548.5 682.162 L1547.94 682.162 L1547.38 682.162 L1546.82 682.162 L1546.26 682.162 L1545.7 682.162 L1545.14 682.162 L1544.58 682.162 L1544.02 682.162 L1543.46 682.162 L1542.9 682.162 L1542.35 682.162 L1541.79 682.162 L1541.23 682.162 L1540.67 682.162 L1540.11 682.162 L1539.55 682.162 L1538.99 682.162 L1538.43 682.162 L1537.87 682.162 L1537.31 682.162 L1536.75 682.162 L1536.19 682.162 L1535.63 682.162 L1535.08 682.162 L1534.52 682.162 L1533.96 682.162 L1533.4 682.162 L1532.84 682.162 L1532.28 682.162 L1531.72 682.162 L1531.16 682.162 L1530.6 682.162 L1530.04 682.162 L1529.48 682.162 L1528.92 682.162 L1528.36 682.162 L1527.81 682.162 L1527.25 682.162 L1526.69 682.162 L1526.13 682.162 L1525.57 682.162 L1525.01 682.162 L1524.45 682.162 L1523.89 682.162 L1523.33 682.162 L1522.77 682.162 L1522.21 682.162 L1521.65 682.162 L1521.09 682.162 L1520.53 682.162 L1519.98 682.162 L1519.42 682.162 L1518.86 682.162 L1518.3 682.162 L1517.74 682.162 L1517.18 682.162 L1516.62 682.162 L1516.06 682.162 L1515.5 682.162 L1514.94 682.162 L1514.38 682.162 L1513.82 682.162 L1513.26 682.162 L1512.71 682.162 L1512.15 682.162 L1511.59 682.162 L1511.03 682.162 L1510.47 682.162 L1509.91 682.162 L1509.35 682.162 L1508.79 682.162 L1508.23 682.162 L1507.67 682.162 L1507.11 682.162 L1506.55 682.162 L1505.99 682.162 L1505.44 682.162 L1504.88 682.162 L1504.32 682.162 L1503.76 682.162 L1503.2 682.162 L1502.64 682.162 L1502.08 682.162 L1501.52 682.162 L1500.96 682.162 L1500.4 682.162 L1499.84 682.162 L1499.28 682.162 L1498.72 682.162 L1498.16 682.162 L1497.61 682.162 L1497.05 682.162 L1496.49 682.162 L1495.93 682.162 L1495.37 682.162 L1494.81 682.162 L1494.25 682.162 L1493.69 682.162 L1493.13 682.162 L1492.57 682.162 L1492.01 682.162 L1491.45 682.162 L1490.89 682.162 L1490.34 682.162 L1489.78 682.162 L1489.22 682.162 L1488.66 682.162 L1488.1 682.162 L1487.54 682.162 L1486.98 682.162 L1486.42 682.162 L1485.86 682.162 L1485.3 682.162 L1484.74 682.162 L1484.18 682.162 L1483.62 682.162 L1483.07 682.162 L1482.51 682.162 L1481.95 682.162 L1481.39 682.162 L1480.83 682.162 L1480.27 682.162 L1479.71 682.162 L1479.15 682.162 L1478.59 682.162 L1478.03 682.162 L1477.47 682.162 L1476.91 682.162 L1476.35 682.162 L1475.79 682.162 L1475.24 682.162 L1474.68 682.162 L1474.12 682.162 L1473.56 682.162 L1473 682.162 L1472.44 682.162 L1471.88 682.162 L1471.32 682.162 L1470.76 682.162 L1470.2 682.162 L1469.64 682.162 L1469.08 682.162 L1468.52 682.162 L1467.97 682.162 L1467.41 682.162 L1466.85 682.162 L1466.29 682.162 L1465.73 682.162 L1465.17 682.162 L1464.61 682.162 L1464.05 682.162 L1463.49 682.162 L1462.93 682.162 L1462.37 682.162 L1461.81 682.162 L1461.25 682.162 L1460.7 682.162 L1460.14 682.162 L1459.58 682.162 L1459.02 682.162 L1458.46 682.162 L1457.9 682.162 L1457.34 682.162 L1456.78 682.162 L1456.22 682.162 L1455.66 682.162 L1455.1 682.162 L1454.54 682.162 L1453.98 682.162 L1453.42 682.162 L1452.87 682.162 L1452.31 682.162 L1451.75 682.162 L1451.19 682.162 L1450.63 682.162 L1450.07 682.162 L1449.51 682.162 L1448.95 682.162 L1448.39 682.162 L1447.83 682.162 L1447.27 682.162 L1446.71 682.162 L1446.15 682.162 L1445.6 682.162 L1445.04 682.162 L1444.48 682.162 L1443.92 682.162 L1443.36 682.162 L1442.8 682.162 L1442.24 682.162 L1441.68 682.162 L1441.12 682.162 L1440.56 682.162 L1440 682.162 L1439.44 682.162 L1438.88 682.162 L1438.33 682.162 L1437.77 682.162 L1437.21 682.162 L1436.65 682.162 L1436.09 682.162 L1435.53 682.162 L1434.97 682.162 L1434.41 682.162 L1433.85 682.162 L1433.29 682.162 L1432.73 682.162 L1432.17 682.162 L1431.61 682.162 L1431.05 682.162 L1430.5 682.162 L1429.94 682.162 L1429.38 682.162 L1428.82 682.162 L1428.26 682.162 L1427.7 682.162 L1427.14 682.162 L1426.58 682.162 L1426.02 682.162 L1425.46 682.162 L1424.9 682.162 L1424.34 682.162 L1423.78 682.162 L1423.23 682.162 L1422.67 682.162 L1422.11 682.162 L1421.55 682.162 L1420.99 682.162 L1420.43 682.162 L1419.87 682.162 L1419.31 682.162 L1418.75 682.162 L1418.19 682.162 L1417.63 682.162 L1417.07 682.162 L1416.51 682.162 L1415.95 682.162 L1415.4 682.162 L1414.84 682.162 L1414.28 682.162 L1413.72 682.162 L1413.16 682.162 L1412.6 682.162 L1412.04 682.162 L1411.48 682.162 L1410.92 682.162 L1410.36 682.162 L1409.8 682.162 L1409.24 682.162 L1408.68 682.162 L1408.13 682.162 L1407.57 682.162 L1407.01 682.162 L1406.45 682.162 L1405.89 682.162 L1405.33 682.162 L1404.77 682.162 L1404.21 682.162 L1403.65 682.162 L1403.09 682.162 L1402.53 682.162 L1401.97 682.162 L1401.41 682.162 L1400.86 682.162 L1400.3 682.162 L1399.74 682.162 L1399.18 682.162 L1398.62 682.162 L1398.06 682.162 L1397.5 682.162 L1396.94 682.162 L1396.38 682.162 L1395.82 682.162 L1395.26 682.162 L1394.7 682.162 L1394.14 682.162 L1393.58 682.162 L1393.03 682.162 L1392.47 682.162 L1391.91 682.162 L1391.35 682.162 L1390.79 682.162 L1390.23 682.162 L1389.67 682.162 L1389.11 682.162 L1388.55 682.162 L1387.99 682.162 L1387.43 682.162 L1386.87 682.162 L1386.31 682.162 L1385.76 682.162 L1385.2 682.162 L1384.64 682.162 L1384.08 682.162 L1383.52 682.162 L1382.96 682.162 L1382.4 682.162 L1381.84 682.162 L1381.28 682.162 L1380.72 682.162 L1380.16 682.162 L1379.6 682.162 L1379.04 682.162 L1378.49 682.162 L1377.93 682.162 L1377.37 682.162 L1376.81 682.162 L1376.25 682.162 L1375.69 682.162 L1375.13 682.162 L1374.57 682.162 L1374.01 682.162 L1373.45 682.162 L1372.89 682.162 L1372.33 682.162 L1371.77 682.162 L1371.21 682.162 L1370.66 682.162 L1370.1 682.162 L1369.54 682.162 L1368.98 682.162 L1368.42 682.162 L1367.86 682.162 L1367.3 682.162 L1366.74 682.162 L1366.18 682.162 L1365.62 682.162 L1365.06 682.162 L1364.5 682.162 L1363.94 682.162 L1363.39 682.162 L1362.83 682.162 L1362.27 682.162 L1361.71 682.162 L1361.15 682.162 L1360.59 682.162 L1360.03 682.162 L1359.47 682.162 L1358.91 682.162 L1358.35 682.162 L1357.79 682.162 L1357.23 682.162 L1356.67 682.162 L1356.12 682.162 L1355.56 682.162 L1355 682.162 L1354.44 682.162 L1353.88 682.162 L1353.32 682.162 L1352.76 682.162 L1352.2 682.162 L1351.64 682.162 L1351.08 682.162 L1350.52 682.162 L1349.96 682.162 L1349.4 682.162 L1348.84 682.162 L1348.29 682.162 L1347.73 682.162 L1347.17 682.162 L1346.61 682.162 L1346.05 682.162 L1345.49 682.162 L1344.93 682.162 L1344.37 682.162 L1343.81 682.162 L1343.25 682.162 L1342.69 682.162 L1342.13 682.162 L1341.57 682.162 L1341.02 682.162 L1340.46 682.162 L1339.9 682.162 L1339.34 682.162 L1338.78 682.162 L1338.22 682.162 L1337.66 682.162 L1337.1 682.162 L1336.54 682.162 L1335.98 682.162 L1335.42 682.162 L1334.86 682.162 L1334.3 682.162 L1333.75 682.162 L1333.19 682.162 L1332.63 682.162 L1332.07 682.162 L1331.51 682.162 L1330.95 682.162 L1330.39 682.162 L1329.83 682.162 L1329.27 682.162 L1328.71 682.162 L1328.15 682.162 L1327.59 682.162 L1327.03 682.162 L1326.47 682.162 L1325.92 682.162 L1325.36 682.162 L1324.8 682.162 L1324.24 682.162 L1323.68 682.162 L1323.12 682.162 L1322.56 682.162 L1322 682.162 L1321.44 682.162 L1320.88 682.162 L1320.32 682.162 L1319.76 682.162 L1319.2 682.162 L1318.65 682.162 L1318.09 682.162 L1317.53 682.162 L1316.97 682.162 L1316.41 682.162 L1315.85 682.162 L1315.29 682.162 L1314.73 682.162 L1314.17 682.162 L1313.61 682.162 L1313.05 682.162 L1312.49 682.162 L1311.93 682.162 L1311.38 682.162 L1310.82 682.162 L1310.26 682.162 L1309.7 682.162 L1309.14 682.162 L1308.58 682.162 L1308.02 682.162 L1307.46 682.162 L1306.9 682.162 L1306.34 682.162 L1305.78 682.162 L1305.22 682.162 L1304.66 682.162 L1304.1 682.162 L1303.55 682.162 L1302.99 682.162 L1302.43 682.162 L1301.87 682.162 L1301.31 682.162 L1300.75 682.162 L1300.19 682.162 L1299.63 682.162 L1299.07 682.162 L1298.51 682.162 L1297.95 682.162 L1297.39 682.162 L1296.83 682.162 L1296.28 682.162 L1295.72 682.162 L1295.16 682.162 L1294.6 682.162 L1294.04 682.162 L1293.48 682.162 L1292.92 682.162 L1292.36 682.162 L1291.8 682.162 L1291.24 682.162 L1290.68 682.162 L1290.12 682.162 L1289.56 682.162 L1289 682.162 L1288.45 682.162 L1287.89 682.162 L1287.33 682.162 L1286.77 682.162 L1286.21 682.162 L1285.65 682.162 L1285.09 682.162 L1284.53 682.162 L1283.97 682.162 L1283.41 682.162 L1282.85 682.162 L1282.29 682.162 L1281.73 682.162 L1281.18 682.162 L1280.62 682.162 L1280.06 682.162 L1279.5 682.162 L1278.94 682.162 L1278.38 682.162 L1277.82 682.162 L1277.26 682.162 L1276.7 682.162 L1276.14 682.162 L1275.58 682.162 L1275.02 682.162 L1274.46 682.162 L1273.91 682.162 L1273.35 682.162 L1272.79 682.162 L1272.23 682.162 L1271.67 682.162 L1271.11 682.162 L1270.55 682.162 L1269.99 682.162 L1269.43 682.162 L1268.87 682.162 L1268.31 682.162 L1267.75 682.162 L1267.19 682.162 L1266.63 682.162 L1266.08 682.162 L1265.52 682.162 L1264.96 682.162 L1264.4 682.162 L1263.84 682.162 L1263.28 682.162 L1262.72 682.162 L1262.16 682.162 L1261.6 682.162 L1261.04 682.162 L1260.48 682.162 L1259.92 682.162 L1259.36 682.162 L1258.81 682.162 L1258.25 682.162 L1257.69 682.162 L1257.13 682.162 L1256.57 682.162 L1256.01 682.162 L1255.45 682.162 L1254.89 682.162 L1254.33 682.162 L1253.77 682.162 L1253.21 682.162 L1252.65 682.162 L1252.09 682.162 L1251.54 682.162 L1250.98 682.162 L1250.42 682.162 L1249.86 682.162 L1249.3 682.162 L1248.74 682.162 L1248.18 682.162 L1247.62 682.162 L1247.06 682.162 L1246.5 682.162 L1245.94 682.162 L1245.38 682.162 L1244.82 682.162 L1244.26 682.162 L1243.71 682.162 L1243.15 682.162 L1242.59 682.162 L1242.03 682.162 L1241.47 682.162 L1240.91 682.162 L1240.35 682.162 L1239.79 682.162 L1239.23 682.162 L1238.67 682.162 L1238.11 682.162 L1237.55 682.162 L1236.99 682.162 L1236.44 682.162 L1235.88 682.162 L1235.32 682.162 L1234.76 682.162 L1234.2 682.162 L1233.64 682.162 L1233.08 682.162 L1232.52 682.162 L1231.96 682.162 L1231.4 682.162 L1230.84 682.162 L1230.28 682.162 L1229.72 682.162 L1229.17 682.162 L1228.61 682.162 L1228.05 682.162 L1227.49 682.162 L1226.93 682.162 L1226.37 682.162 L1225.81 682.162 L1225.25 682.162 L1224.69 682.162 L1224.13 682.162 L1223.57 682.162 L1223.01 682.162 L1222.45 682.162 L1221.89 682.162 L1221.34 682.162 L1220.78 682.162 L1220.22 682.162 L1219.66 682.162 L1219.1 682.162 L1218.54 682.162 L1217.98 682.162 L1217.42 682.162 L1216.86 682.162 L1216.3 682.162 L1215.74 682.162 L1215.18 682.162 L1214.62 682.162 L1214.07 682.162 L1213.51 682.162 L1212.95 682.162 L1212.39 682.162 L1211.83 682.162 L1211.27 682.162 L1210.71 682.162 L1210.15 682.162 L1209.59 682.162 L1209.03 682.162 L1208.47 682.162 L1207.91 682.162 L1207.35 682.162 L1206.8 682.162 L1206.24 682.162 L1205.68 682.162 L1205.12 682.162 L1204.56 682.162 L1204 682.162 L1203.44 682.162 L1202.88 682.162 L1202.32 682.162 L1201.76 682.162 L1201.2 682.162 L1200.64 682.162 L1200.08 682.162 L1199.52 682.162 L1198.97 682.162 L1198.41 682.162 L1197.85 682.162 L1197.29 682.162 L1196.73 682.162 L1196.17 682.162 L1195.61 682.162 L1195.05 682.162 L1194.49 682.162 L1193.93 682.162 L1193.37 682.162 L1192.81 682.162 L1192.25 682.162 L1191.7 682.162 L1191.14 682.162 L1190.58 682.162 L1190.02 682.162 L1189.46 682.162 L1188.9 682.162 L1188.34 682.162 L1187.78 682.162 L1187.22 682.162 L1186.66 682.162 L1186.1 682.162 L1185.54 682.162 L1184.98 682.162 L1184.43 682.162 L1183.87 682.162 L1183.31 682.162 L1182.75 682.162 L1182.19 682.162 L1181.63 682.162 L1181.07 682.162 L1180.51 682.162 L1179.95 682.162 L1179.39 682.162 L1178.83 682.162 L1178.27 682.162 L1177.71 682.162 L1177.15 682.162 L1176.6 682.162 L1176.04 682.162 L1175.48 682.162 L1174.92 682.162 L1174.36 682.162 L1173.8 682.162 L1173.24 682.162 L1172.68 682.162 L1172.12 682.162 L1171.56 682.162 L1171 682.162 L1170.44 682.162 L1169.88 682.162 L1169.33 682.162 L1168.77 682.162 L1168.21 682.162 L1167.65 682.162 L1167.09 682.162 L1166.53 682.162 L1165.97 682.162 L1165.41 682.162 L1164.85 682.162 L1164.29 682.162 L1163.73 682.162 L1163.17 682.162 L1162.61 682.162 L1162.05 682.162 L1161.5 682.162 L1160.94 682.162 L1160.38 682.162 L1159.82 682.162 L1159.26 682.162 L1158.7 682.162 L1158.14 682.162 L1157.58 682.162 L1157.02 682.162 L1156.46 682.162 L1155.9 682.162 L1155.34 682.162 L1154.78 682.162 L1154.23 682.162 L1153.67 682.162 L1153.11 682.162 L1152.55 682.162 L1151.99 682.162 L1151.43 682.162 L1150.87 682.162 L1150.31 682.162 L1149.75 682.162 L1149.19 682.162 L1148.63 682.162 L1148.07 682.162 L1147.51 682.162 L1146.96 682.162 L1146.4 682.162 L1145.84 682.162 L1145.28 682.162 L1144.72 682.162 L1144.16 682.162 L1143.6 682.162 L1143.04 682.162 L1142.48 682.162 L1141.92 682.162 L1141.36 682.162 L1140.8 682.162 L1140.24 682.162 L1139.68 682.162 L1139.13 682.162 L1138.57 682.162 L1138.01 682.162 L1137.45 682.162 L1136.89 682.162 L1136.33 682.162 L1135.77 682.162 L1135.21 682.162 L1134.65 682.162 L1134.09 682.162 L1133.53 682.162 L1132.97 682.162 L1132.41 682.162 L1131.86 682.162 L1131.3 682.162 L1130.74 682.162 L1130.18 682.162 L1129.62 682.162 L1129.06 682.162 L1128.5 682.162 L1127.94 682.162 L1127.38 682.162 L1126.82 682.162 L1126.26 682.162 L1125.7 682.162 L1125.14 682.162 L1124.59 682.162 L1124.03 682.162 L1123.47 682.162 L1122.91 682.162 L1122.35 682.162 L1121.79 682.162 L1121.23 682.162 L1120.67 682.162 L1120.11 682.162 L1119.55 682.162 L1118.99 682.162 L1118.43 682.162 L1117.87 682.162 L1117.31 682.162 L1116.76 682.162 L1116.2 682.162 L1115.64 682.162 L1115.08 682.162 L1114.52 682.162 L1113.96 682.162 L1113.4 682.162 L1112.84 682.162 L1112.28 682.162 L1111.72 682.162 L1111.16 682.162 L1110.6 682.162 L1110.04 682.162 L1109.49 682.162 L1108.93 682.162 L1108.37 682.162 L1107.81 682.162 L1107.25 682.162 L1106.69 682.162 L1106.13 682.162 L1105.57 682.162 L1105.01 682.162 L1104.45 682.162 L1103.89 682.162 L1103.33 682.162 L1102.77 682.162 L1102.22 682.162 L1101.66 682.162 L1101.1 682.162 L1100.54 682.162 L1099.98 682.162 L1099.42 682.162 L1098.86 682.162 L1098.3 682.162 L1097.74 682.162 L1097.18 682.162 L1096.62 682.162 L1096.06 682.162 L1095.5 682.162 L1094.94 682.162 L1094.39 682.162 L1093.83 682.162 L1093.27 682.162 L1092.71 682.162 L1092.15 682.162 L1091.59 682.162 L1091.03 682.162 L1090.47 682.162 L1089.91 682.162 L1089.35 682.162 L1088.79 682.162 L1088.23 682.162 L1087.67 682.162 L1087.12 682.162 L1086.56 682.162 L1086 682.162 L1085.44 682.162 L1084.88 682.162 L1084.32 682.162 L1083.76 682.162 L1083.2 682.162 L1082.64 682.162 L1082.08 682.162 L1081.52 682.162 L1080.96 682.162 L1080.4 682.162 L1079.85 682.162 L1079.29 682.162 L1078.73 682.162 L1078.17 682.162 L1077.61 682.162 L1077.05 682.162 L1076.49 682.162 L1075.93 682.162 L1075.37 682.162 L1074.81 682.162 L1074.25 682.162 L1073.69 682.162 L1073.13 682.162 L1072.57 682.162 L1072.02 682.162 L1071.46 682.162 L1070.9 682.162 L1070.34 682.162 L1069.78 682.162 L1069.22 682.162 L1068.66 682.162 L1068.1 682.162 L1067.54 682.162 L1066.98 682.162 L1066.42 682.162 L1065.86 682.162 L1065.3 682.162 L1064.75 682.162 L1064.19 682.162 L1063.63 682.162 L1063.07 682.162 L1062.51 682.162 L1061.95 682.162 L1061.39 682.162 L1060.83 682.162 L1060.27 682.162 L1059.71 682.162 L1059.15 682.162 L1058.59 682.162 L1058.03 682.162 L1057.48 682.162 L1056.92 682.162 L1056.36 682.162 L1055.8 682.162 L1055.24 682.162 L1054.68 682.162 L1054.12 682.162 L1053.56 682.162 L1053 682.162 L1052.44 682.162 L1051.88 682.162 L1051.32 682.162 L1050.76 682.162 L1050.2 682.162 L1049.65 682.162 L1049.09 682.162 L1048.53 682.162 L1047.97 682.162 L1047.41 682.162 L1046.85 682.162 L1046.29 682.162 L1045.73 682.162 L1045.17 682.162 L1044.61 682.162 L1044.05 682.162 L1043.49 682.162 L1042.93 682.162 L1042.38 682.162 L1041.82 682.162 L1041.26 682.162 L1040.7 682.162 L1040.14 682.162 L1039.58 682.162 L1039.02 682.162 L1038.46 682.162 L1037.9 682.162 L1037.34 682.162 L1036.78 682.162 L1036.22 682.162 L1035.66 682.162 L1035.1 682.162 L1034.55 682.162 L1033.99 682.162 L1033.43 682.162 L1032.87 682.162 L1032.31 682.162 L1031.75 682.162 L1031.19 682.162 L1030.63 682.162 L1030.07 682.162 L1029.51 682.162 L1028.95 682.162 L1028.39 682.162 L1027.83 682.162 L1027.28 682.162 L1026.72 682.162 L1026.16 682.162 L1025.6 682.162 L1025.04 682.162 L1024.48 682.162 L1023.92 682.162 L1023.36 682.162 L1022.8 682.162 L1022.24 682.162 L1021.68 682.162 L1021.12 682.162 L1020.56 682.162 L1020.01 682.162 L1019.45 682.162 L1018.89 682.162 L1018.33 682.162 L1017.77 682.162 L1017.21 682.162 L1016.65 682.162 L1016.09 682.162 L1015.53 682.162 L1014.97 682.162 L1014.41 682.162 L1013.85 682.162 L1013.29 682.162 L1012.73 682.162 L1012.18 682.162 L1011.62 682.162 L1011.06 682.162 L1010.5 682.162 L1009.94 682.162 L1009.38 682.162 L1008.82 682.162 L1008.26 682.162 L1007.7 682.162 L1007.14 682.162 L1006.58 682.162 L1006.02 682.162 L1005.46 682.162 L1004.91 682.162 L1004.35 682.162 L1003.79 682.162 L1003.23 682.162 L1002.67 682.162 L1002.11 682.162 L1001.55 682.162 L1000.99 682.162 L1000.43 682.162 L999.872 682.162 L999.313 682.162 L998.754 682.162 L998.194 682.162 L997.635 682.162 L997.076 682.162 L996.517 682.162 L995.957 682.162 L995.398 682.162 L994.839 682.162 L994.28 682.162 L993.72 682.162 L993.161 682.162 L992.602 682.162 L992.043 682.162 L991.483 682.162 L990.924 682.162 L990.365 682.162 L989.806 682.162 L989.246 682.162 L988.687 682.162 L988.128 682.162 L987.569 682.162 L987.009 682.162 L986.45 682.162 L985.891 682.162 L985.332 682.162 L984.772 682.162 L984.213 682.162 L983.654 682.162 L983.095 682.162 L982.535 682.162 L981.976 682.162 L981.417 682.162 L980.858 682.162 L980.298 682.162 L979.739 682.162 L979.18 682.162 L978.621 682.162 L978.061 682.162 L977.502 682.162 L976.943 682.162 L976.384 682.162 L975.824 682.162 L975.265 682.162 L974.706 682.162 L974.147 682.162 L973.587 682.162 L973.028 682.162 L972.469 682.162 L971.91 682.162 L971.35 682.162 L970.791 682.162 L970.232 682.162 L969.673 682.162 L969.113 682.162 L968.554 682.162 L967.995 682.162 L967.436 682.162 L966.876 682.162 L966.317 682.162 L965.758 682.162 L965.199 682.162 L964.639 682.162 L964.08 682.162 L963.521 682.162 L962.962 682.162 L962.402 682.162 L961.843 682.162 L961.284 682.162 L960.725 682.162 L960.165 682.162 L959.606 682.162 L959.047 682.162 L958.488 682.162 L957.928 682.162 L957.369 682.162 L956.81 682.162 L956.251 682.162 L955.691 682.162 L955.132 682.162 L954.573 682.162 L954.014 682.162 L953.454 682.162 L952.895 682.162 L952.336 682.162 L951.777 682.162 L951.217 682.162 L950.658 682.162 L950.099 682.162 L949.54 682.162 L948.98 682.162 L948.421 682.162 L947.862 682.162 L947.303 682.162 L946.743 682.162 L946.184 682.162 L945.625 682.162 L945.066 682.162 L944.506 682.162 L943.947 682.162 L943.388 682.162 L942.829 682.162 L942.269 682.162 L941.71 682.162 L941.151 682.162 L940.592 682.162 L940.032 682.162 L939.473 682.162 L938.914 682.162 L938.355 682.162 L937.795 682.162 L937.236 682.162 L936.677 682.162 L936.118 682.162 L935.558 682.162 L934.999 682.162 L934.44 682.162 L933.881 682.162 L933.321 682.162 L932.762 682.162 L932.203 682.162 L931.644 682.162 L931.084 682.162 L930.525 682.162 L929.966 682.162 L929.406 682.162 L928.847 682.162 L928.288 682.162 L927.729 682.162 L927.169 682.162 L926.61 682.162 L926.051 682.162 L925.492 682.162 L924.932 682.162 L924.373 682.162 L923.814 682.162 L923.255 682.162 L922.695 682.162 L922.136 682.162 L921.577 682.162 L921.018 682.162 L920.458 682.162 L919.899 682.162 L919.34 682.162 L918.781 682.162 L918.221 682.162 L917.662 682.162 L917.103 682.162 L916.544 682.162 L915.984 682.162 L915.425 682.162 L914.866 682.162 L914.307 682.162 L913.747 682.162 L913.188 682.162 L912.629 682.162 L912.07 682.162 L911.51 682.162 L910.951 682.162 L910.392 682.162 L909.833 682.162 L909.273 682.162 L908.714 682.162 L908.155 682.162 L907.596 682.162 L907.036 682.162 L906.477 682.162 L905.918 682.162 L905.359 682.162 L904.799 682.162 L904.24 682.162 L903.681 682.162 L903.122 682.162 L902.562 682.162 L902.003 682.162 L901.444 682.162 L900.885 682.162 L900.325 682.162 L899.766 682.162 L899.207 682.162 L898.648 682.162 L898.088 682.162 L897.529 682.162 L896.97 682.162 L896.411 682.162 L895.851 682.162 L895.292 682.162 L894.733 682.162 L894.174 682.162 L893.614 682.162 L893.055 682.162 L892.496 682.162 L891.937 682.162 L891.377 682.162 L890.818 682.162 L890.259 682.162 L889.7 682.162 L889.14 682.162 L888.581 682.162 L888.022 682.162 L887.463 682.162 L886.903 682.162 L886.344 682.162 L885.785 682.162 L885.226 682.162 L884.666 682.162 L884.107 682.162 L883.548 682.162 L882.989 682.162 L882.429 682.162 L881.87 682.162 L881.311 682.162 L880.752 682.162 L880.192 682.162 L879.633 682.162 L879.074 682.162 L878.515 682.162 L877.955 682.162 L877.396 682.162 L876.837 682.162 L876.278 682.162 L875.718 682.162 L875.159 682.162 L874.6 682.162 L874.041 682.162 L873.481 682.162 L872.922 682.162 L872.363 682.162 L871.804 682.162 L871.244 682.162 L870.685 682.162 L870.126 682.162 L869.567 682.162 L869.007 682.162 L868.448 682.162 L867.889 682.162 L867.33 682.162 L866.77 682.162 L866.211 682.162 L865.652 682.162 L865.093 682.162 L864.533 682.162 L863.974 682.162 L863.415 682.162 L862.856 682.162 L862.296 682.162 L861.737 682.162 L861.178 682.162 L860.619 682.162 L860.059 682.162 L859.5 682.162 L858.941 682.162 L858.382 682.162 L857.822 682.162 L857.263 682.162 L856.704 682.162 L856.145 682.162 L855.585 682.162 L855.026 682.162 L854.467 682.162 L853.908 682.162 L853.348 682.162 L852.789 682.162 L852.23 682.162 L851.671 682.162 L851.111 682.162 L850.552 682.162 L849.993 682.162 L849.434 682.162 L848.874 682.162 L848.315 682.162 L847.756 682.162 L847.197 682.162 L846.637 682.162 L846.078 682.162 L845.519 682.162 L844.96 682.162 L844.4 682.162 L843.841 682.162 L843.282 682.162 L842.723 682.162 L842.163 682.162 L841.604 682.162 L841.045 682.162 L840.486 682.162 L839.926 682.162 L839.367 682.162 L838.808 682.162 L838.249 682.162 L837.689 682.162 L837.13 682.162 L836.571 682.162 L836.012 682.162 L835.452 682.162 L834.893 682.162 L834.334 682.162 L833.775 682.162 L833.215 682.162 L832.656 682.162 L832.097 682.162 L831.538 682.162 L830.978 682.162 L830.419 682.162 L829.86 682.162 L829.301 682.162 L828.741 682.162 L828.182 682.162 L827.623 682.162 L827.064 682.162 L826.504 682.162 L825.945 682.162 L825.386 682.162 L824.827 682.162 L824.267 682.162 L823.708 682.162 L823.149 682.162 L822.59 682.162 L822.03 682.162 L821.471 682.162 L820.912 682.162 L820.353 682.162 L819.793 682.162 L819.234 682.162 L818.675 682.162 L818.116 682.162 L817.556 682.162 L816.997 682.162 L816.438 682.162 L815.879 682.162 L815.319 682.162 L814.76 682.162 L814.201 682.162 L813.642 682.162 L813.082 682.162 L812.523 682.162 L811.964 682.162 L811.405 682.162 L810.845 682.162 L810.286 682.162 L809.727 682.162 L809.168 682.162 L808.608 682.162 L808.049 682.162 L807.49 682.162 L806.931 682.162 L806.371 682.162 L805.812 682.162 L805.253 682.162 L804.693 682.162 L804.134 682.162 L803.575 682.162 L803.016 682.162 L802.456 682.162 L801.897 682.162 L801.338 682.162 L800.779 682.162 L800.219 682.162 L799.66 682.162 L799.101 682.162 L798.542 682.162 L797.982 682.162 L797.423 682.162 L796.864 682.162 L796.305 682.162 L795.745 682.162 L795.186 682.162 L794.627 682.162 L794.068 682.162 L793.508 682.162 L792.949 682.162 L792.39 682.162 L791.831 682.162 L791.271 682.162 L790.712 682.162 L790.153 682.162 L789.594 682.162 L789.034 682.162 L788.475 682.162 L787.916 682.162 L787.357 682.162 L786.797 682.162 L786.238 682.162 L785.679 682.162 L785.12 682.162 L784.56 682.162 L784.001 682.162 L783.442 682.162 L782.883 682.162 L782.323 682.162 L781.764 682.162 L781.205 682.162 L780.646 682.162 L780.086 682.162 L779.527 682.162 L778.968 682.162 L778.409 682.162 L777.849 682.162 L777.29 682.162 L776.731 682.162 L776.172 682.162 L775.612 682.162 L775.053 682.162 L774.494 682.162 L773.935 682.162 L773.375 682.162 L772.816 682.162 L772.257 682.162 L771.698 682.162 L771.138 682.162 L770.579 682.162 L770.02 682.162 L769.461 682.162 L768.901 682.162 L768.342 682.162 L767.783 682.162 L767.224 682.162 L766.664 682.162 L766.105 682.162 L765.546 682.162 L764.987 682.162 L764.427 682.162 L763.868 682.162 L763.309 682.162 L762.75 682.162 L762.19 682.162 L761.631 682.162 L761.072 682.162 L760.513 682.162 L759.953 682.162 L759.394 682.162 L758.835 682.162 L758.276 682.162 L757.716 682.162 L757.157 682.162 L756.598 682.162 L756.039 682.162 L755.479 682.162 L754.92 682.162 L754.361 682.162 L753.802 682.162 L753.242 682.162 L752.683 682.162 L752.124 682.162 L751.565 682.162 L751.005 682.162 L750.446 682.162 L749.887 682.162 L749.328 682.162 L748.768 682.162 L748.209 682.162 L747.65 682.162 L747.091 682.162 L746.531 682.162 L745.972 682.162 L745.413 682.162 L744.854 682.162 L744.294 682.162 L743.735 682.162 L743.176 682.162 L742.617 682.162 L742.057 682.162 L741.498 682.162 L740.939 682.162 L740.38 682.162 L739.82 682.162 L739.261 682.162 L738.702 682.162 L738.143 682.162 L737.583 682.162 L737.024 682.162 L736.465 682.162 L735.906 682.162 L735.346 682.162 L734.787 682.162 L734.228 682.162 L733.669 682.162 L733.109 682.162 L732.55 682.162 L731.991 682.162 L731.432 682.162 L730.872 682.162 L730.313 682.162 L729.754 682.162 L729.195 682.162 L728.635 682.162 L728.076 682.162 L727.517 682.162 L726.958 682.162 L726.398 682.162 L725.839 682.162 L725.28 682.162 L724.721 682.162 L724.161 682.162 L723.602 682.162 L723.043 682.162 L722.484 682.162 L721.924 682.162 L721.365 682.162 L720.806 682.162 L720.247 682.162  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip333)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.39 720.806,683.39 721.365,683.39 721.924,683.39 722.484,683.39 723.043,683.39 723.602,683.39 724.161,683.39 724.721,683.39 725.28,683.39 725.839,683.39 726.398,683.39 726.958,683.39 727.517,683.39 728.076,683.39 728.635,683.39 729.195,683.39 729.754,683.39 730.313,683.39 730.872,683.39 731.432,683.39 731.991,683.39 732.55,683.39 733.109,683.39 733.669,683.39 734.228,683.39 734.787,683.39 735.346,683.39 735.906,683.39 736.465,683.39 737.024,683.39 737.583,683.39 738.143,683.39 738.702,683.39 739.261,683.39 739.82,683.39 740.38,683.39 740.939,683.39 741.498,683.39 742.057,683.39 742.617,683.39 743.176,683.39 743.735,683.39 744.294,683.39 744.854,683.39 745.413,683.39 745.972,683.39 746.531,683.39 747.091,683.39 747.65,683.39 748.209,683.39 748.768,683.39 749.328,683.39 749.887,683.39 750.446,683.39 751.005,683.39 751.565,683.39 752.124,683.39 752.683,683.39 753.242,683.39 753.802,683.39 754.361,683.39 754.92,683.39 755.479,683.39 756.039,683.39 756.598,683.39 757.157,683.39 757.716,683.39 758.276,683.39 758.835,683.39 759.394,683.39 759.953,683.39 760.513,683.39 761.072,683.39 761.631,683.39 762.19,683.39 762.75,683.39 763.309,683.39 763.868,683.39 764.427,683.39 764.987,683.39 765.546,683.39 766.105,683.39 766.664,683.39 767.224,683.39 767.783,683.39 768.342,683.39 768.901,683.39 769.461,683.39 770.02,683.39 770.579,683.39 771.138,683.39 771.698,683.39 772.257,683.39 772.816,683.39 773.375,683.39 773.935,683.39 774.494,683.39 775.053,683.39 775.612,683.39 776.172,683.39 776.731,683.39 777.29,683.39 777.849,683.39 778.409,683.39 778.968,683.39 779.527,683.39 780.086,683.39 780.646,683.39 781.205,683.39 781.764,683.39 782.323,683.39 782.883,683.39 783.442,683.39 784.001,683.39 784.56,683.39 785.12,683.39 785.679,683.39 786.238,683.39 786.797,683.39 787.357,683.39 787.916,683.39 788.475,683.39 789.034,683.39 789.594,683.39 790.153,683.39 790.712,683.39 791.271,683.39 791.831,683.39 792.39,683.39 792.949,683.39 793.508,683.39 794.068,683.39 794.627,683.39 795.186,683.39 795.745,683.39 796.305,683.39 796.864,683.39 797.423,683.39 797.982,683.39 798.542,683.39 799.101,683.39 799.66,683.39 800.219,683.39 800.779,683.39 801.338,683.39 801.897,683.39 802.456,683.39 803.016,683.39 803.575,683.39 804.134,683.39 804.693,683.39 805.253,683.39 805.812,683.39 806.371,683.39 806.931,683.39 807.49,683.39 808.049,683.39 808.608,683.39 809.168,683.39 809.727,683.39 810.286,683.39 810.845,683.39 811.405,683.39 811.964,683.39 812.523,683.39 813.082,683.39 813.642,683.39 814.201,683.39 814.76,683.39 815.319,683.39 815.879,683.39 816.438,683.39 816.997,683.39 817.556,683.39 818.116,683.39 818.675,683.39 819.234,683.39 819.793,683.39 820.353,683.39 820.912,683.39 821.471,683.39 822.03,683.39 822.59,683.39 823.149,683.39 823.708,683.39 824.267,683.39 824.827,683.39 825.386,683.39 825.945,683.39 826.504,683.39 827.064,683.39 827.623,683.39 828.182,683.39 828.741,683.39 829.301,683.39 829.86,683.39 830.419,683.39 830.978,683.39 831.538,683.39 832.097,683.39 832.656,683.39 833.215,683.39 833.775,683.39 834.334,683.39 834.893,683.39 835.452,683.39 836.012,683.39 836.571,683.39 837.13,683.39 837.689,683.39 838.249,683.39 838.808,683.39 839.367,683.39 839.926,683.39 840.486,683.39 841.045,683.39 841.604,683.39 842.163,683.39 842.723,683.39 843.282,683.39 843.841,683.39 844.4,683.39 844.96,683.39 845.519,683.39 846.078,683.39 846.637,683.39 847.197,683.39 847.756,683.39 848.315,683.39 848.874,683.39 849.434,683.39 849.993,683.39 850.552,683.39 851.111,683.39 851.671,683.39 852.23,683.39 852.789,683.39 853.348,683.39 853.908,683.39 854.467,683.39 855.026,683.39 855.585,683.39 856.145,683.39 856.704,683.39 857.263,683.39 857.822,683.39 858.382,683.39 858.941,683.39 859.5,683.39 860.059,683.39 860.619,683.39 861.178,683.39 861.737,683.39 862.296,683.39 862.856,683.39 863.415,683.39 863.974,683.39 864.533,683.39 865.093,683.39 865.652,683.39 866.211,683.39 866.77,683.39 867.33,683.39 867.889,683.39 868.448,683.39 869.007,683.39 869.567,683.39 870.126,683.39 870.685,683.39 871.244,683.39 871.804,683.39 872.363,683.39 872.922,683.39 873.481,683.39 874.041,683.39 874.6,683.39 875.159,683.39 875.718,683.39 876.278,683.39 876.837,683.39 877.396,683.39 877.955,683.39 878.515,683.39 879.074,683.39 879.633,683.39 880.192,683.39 880.752,683.39 881.311,683.39 881.87,683.39 882.429,683.39 882.989,683.39 883.548,683.39 884.107,683.39 884.666,683.39 885.226,683.39 885.785,683.39 886.344,683.39 886.903,683.39 887.463,683.39 888.022,683.39 888.581,683.39 889.14,683.39 889.7,683.39 890.259,683.39 890.818,683.39 891.377,683.39 891.937,683.39 892.496,683.39 893.055,683.39 893.614,683.39 894.174,683.39 894.733,683.39 895.292,683.39 895.851,683.39 896.411,683.39 896.97,683.39 897.529,683.39 898.088,683.39 898.648,683.39 899.207,683.39 899.766,683.39 900.325,683.39 900.885,683.39 901.444,683.39 902.003,683.39 902.562,683.39 903.122,683.39 903.681,683.39 904.24,683.39 904.799,683.39 905.359,683.39 905.918,683.39 906.477,683.39 907.036,683.39 907.596,683.39 908.155,683.39 908.714,683.39 909.273,683.39 909.833,683.39 910.392,683.39 910.951,683.39 911.51,683.39 912.07,683.39 912.629,683.39 913.188,683.39 913.747,683.39 914.307,683.39 914.866,683.39 915.425,683.39 915.984,683.39 916.544,683.39 917.103,683.39 917.662,683.39 918.221,683.39 918.781,683.39 919.34,683.39 919.899,683.39 920.458,683.39 921.018,683.39 921.577,683.39 922.136,683.39 922.695,683.39 923.255,683.39 923.814,683.39 924.373,683.39 924.932,683.39 925.492,683.39 926.051,683.39 926.61,683.39 927.169,683.39 927.729,683.39 928.288,683.39 928.847,683.39 929.406,683.39 929.966,683.39 930.525,683.39 931.084,683.39 931.644,683.39 932.203,683.39 932.762,683.39 933.321,683.39 933.881,683.39 934.44,683.39 934.999,683.39 935.558,683.39 936.118,683.39 936.677,683.39 937.236,683.39 937.795,683.39 938.355,683.39 938.914,683.39 939.473,683.39 940.032,683.39 940.592,683.39 941.151,683.39 941.71,683.39 942.269,683.39 942.829,683.39 943.388,683.39 943.947,683.39 944.506,683.39 945.066,683.39 945.625,683.39 946.184,683.39 946.743,683.39 947.303,683.39 947.862,683.39 948.421,683.39 948.98,683.39 949.54,683.39 950.099,683.39 950.658,683.39 951.217,683.39 951.777,683.39 952.336,683.39 952.895,683.39 953.454,683.39 954.014,683.39 954.573,683.39 955.132,683.39 955.691,683.39 956.251,683.39 956.81,683.39 957.369,683.39 957.928,683.39 958.488,683.39 959.047,683.39 959.606,683.39 960.165,683.39 960.725,683.39 961.284,683.39 961.843,683.39 962.402,683.39 962.962,683.39 963.521,683.39 964.08,683.39 964.639,683.39 965.199,683.39 965.758,683.39 966.317,683.39 966.876,683.39 967.436,683.39 967.995,683.39 968.554,683.39 969.113,683.39 969.673,683.39 970.232,683.39 970.791,683.39 971.35,683.39 971.91,683.39 972.469,683.39 973.028,683.39 973.587,683.39 974.147,683.39 974.706,683.39 975.265,683.39 975.824,683.39 976.384,683.39 976.943,683.39 977.502,683.39 978.061,683.39 978.621,683.39 979.18,683.39 979.739,683.39 980.298,683.39 980.858,683.39 981.417,683.39 981.976,683.39 982.535,683.39 983.095,683.39 983.654,683.39 984.213,683.39 984.772,683.39 985.332,683.39 985.891,683.39 986.45,683.39 987.009,683.39 987.569,683.39 988.128,683.39 988.687,683.39 989.246,683.39 989.806,683.39 990.365,683.39 990.924,683.39 991.483,683.39 992.043,683.39 992.602,683.39 993.161,683.39 993.72,683.39 994.28,683.39 994.839,683.39 995.398,683.39 995.957,683.39 996.517,683.39 997.076,683.39 997.635,683.39 998.194,683.39 998.754,683.39 999.313,683.39 999.872,683.39 1000.43,683.39 1000.99,683.39 1001.55,683.39 1002.11,683.39 1002.67,683.39 1003.23,683.39 1003.79,683.39 1004.35,683.39 1004.91,683.39 1005.46,683.39 1006.02,683.39 1006.58,683.39 1007.14,683.39 1007.7,683.39 1008.26,683.39 1008.82,683.39 1009.38,683.39 1009.94,683.39 1010.5,683.39 1011.06,683.39 1011.62,683.39 1012.18,683.39 1012.73,683.39 1013.29,683.39 1013.85,683.39 1014.41,683.39 1014.97,683.39 1015.53,683.39 1016.09,683.39 1016.65,683.39 1017.21,683.39 1017.77,683.39 1018.33,683.39 1018.89,683.39 1019.45,683.39 1020.01,683.39 1020.56,683.39 1021.12,683.39 1021.68,683.39 1022.24,683.39 1022.8,683.39 1023.36,683.39 1023.92,683.39 1024.48,683.39 1025.04,683.39 1025.6,683.39 1026.16,683.39 1026.72,683.39 1027.28,683.39 1027.83,683.39 1028.39,683.39 1028.95,683.39 1029.51,683.39 1030.07,683.39 1030.63,683.39 1031.19,683.39 1031.75,683.39 1032.31,683.39 1032.87,683.39 1033.43,683.39 1033.99,683.39 1034.55,683.39 1035.1,683.39 1035.66,683.39 1036.22,683.39 1036.78,683.39 1037.34,683.39 1037.9,683.39 1038.46,683.39 1039.02,683.39 1039.58,683.39 1040.14,683.39 1040.7,683.39 1041.26,683.39 1041.82,683.39 1042.38,683.39 1042.93,683.39 1043.49,683.39 1044.05,683.39 1044.61,683.39 1045.17,683.39 1045.73,683.39 1046.29,683.39 1046.85,683.39 1047.41,683.39 1047.97,683.39 1048.53,683.39 1049.09,683.39 1049.65,683.39 1050.2,683.39 1050.76,683.39 1051.32,683.39 1051.88,683.39 1052.44,683.39 1053,683.39 1053.56,683.39 1054.12,683.39 1054.68,683.39 1055.24,683.39 1055.8,683.39 1056.36,683.39 1056.92,683.39 1057.48,683.39 1058.03,683.39 1058.59,683.39 1059.15,683.39 1059.71,683.39 1060.27,683.39 1060.83,683.39 1061.39,683.39 1061.95,683.39 1062.51,683.39 1063.07,683.39 1063.63,683.39 1064.19,683.39 1064.75,683.39 1065.3,683.39 1065.86,683.39 1066.42,683.39 1066.98,683.39 1067.54,683.39 1068.1,683.39 1068.66,683.39 1069.22,683.39 1069.78,683.39 1070.34,683.39 1070.9,683.39 1071.46,683.39 1072.02,683.39 1072.57,683.39 1073.13,683.39 1073.69,683.39 1074.25,683.39 1074.81,683.39 1075.37,683.39 1075.93,683.39 1076.49,683.39 1077.05,683.39 1077.61,683.39 1078.17,683.39 1078.73,683.39 1079.29,683.39 1079.85,683.39 1080.4,683.39 1080.96,683.39 1081.52,683.39 1082.08,683.39 1082.64,683.39 1083.2,683.39 1083.76,683.39 1084.32,683.39 1084.88,683.39 1085.44,683.39 1086,683.39 1086.56,683.39 1087.12,683.39 1087.67,683.39 1088.23,683.39 1088.79,683.39 1089.35,683.39 1089.91,683.39 1090.47,683.39 1091.03,683.39 1091.59,683.39 1092.15,683.39 1092.71,683.39 1093.27,683.39 1093.83,683.39 1094.39,683.39 1094.94,683.39 1095.5,683.39 1096.06,683.39 1096.62,683.39 1097.18,683.39 1097.74,683.39 1098.3,683.39 1098.86,683.39 1099.42,683.39 1099.98,683.39 1100.54,683.39 1101.1,683.39 1101.66,683.39 1102.22,683.39 1102.77,683.39 1103.33,683.39 1103.89,683.39 1104.45,683.39 1105.01,683.39 1105.57,683.39 1106.13,683.39 1106.69,683.39 1107.25,683.39 1107.81,683.39 1108.37,683.39 1108.93,683.39 1109.49,683.39 1110.04,683.39 1110.6,683.39 1111.16,683.39 1111.72,683.39 1112.28,683.39 1112.84,683.39 1113.4,683.39 1113.96,683.39 1114.52,683.39 1115.08,683.39 1115.64,683.39 1116.2,683.39 1116.76,683.39 1117.31,683.39 1117.87,683.39 1118.43,683.39 1118.99,683.39 1119.55,683.39 1120.11,683.39 1120.67,683.39 1121.23,683.39 1121.79,683.39 1122.35,683.39 1122.91,683.39 1123.47,683.39 1124.03,683.39 1124.59,683.39 1125.14,683.39 1125.7,683.39 1126.26,683.39 1126.82,683.39 1127.38,683.39 1127.94,683.39 1128.5,683.39 1129.06,683.39 1129.62,683.39 1130.18,683.39 1130.74,683.39 1131.3,683.39 1131.86,683.39 1132.41,683.39 1132.97,683.39 1133.53,683.39 1134.09,683.39 1134.65,683.39 1135.21,683.39 1135.77,683.39 1136.33,683.39 1136.89,683.39 1137.45,683.39 1138.01,683.39 1138.57,683.39 1139.13,683.39 1139.68,683.39 1140.24,683.39 1140.8,683.39 1141.36,683.39 1141.92,683.39 1142.48,683.39 1143.04,683.39 1143.6,683.39 1144.16,683.39 1144.72,683.39 1145.28,683.39 1145.84,683.39 1146.4,683.39 1146.96,683.39 1147.51,683.39 1148.07,683.39 1148.63,683.39 1149.19,683.39 1149.75,683.39 1150.31,683.39 1150.87,683.39 1151.43,683.39 1151.99,683.39 1152.55,683.39 1153.11,683.39 1153.67,683.39 1154.23,683.39 1154.78,683.39 1155.34,683.39 1155.9,683.39 1156.46,683.39 1157.02,683.39 1157.58,683.39 1158.14,683.39 1158.7,683.39 1159.26,683.39 1159.82,683.39 1160.38,683.39 1160.94,683.39 1161.5,683.39 1162.05,683.39 1162.61,683.39 1163.17,683.39 1163.73,683.39 1164.29,683.39 1164.85,683.39 1165.41,683.39 1165.97,683.39 1166.53,683.39 1167.09,683.39 1167.65,683.39 1168.21,683.39 1168.77,683.39 1169.33,683.39 1169.88,683.39 1170.44,683.39 1171,683.39 1171.56,683.39 1172.12,683.39 1172.68,683.39 1173.24,683.39 1173.8,683.39 1174.36,683.39 1174.92,683.39 1175.48,683.39 1176.04,683.39 1176.6,683.39 1177.15,683.39 1177.71,683.39 1178.27,683.39 1178.83,683.39 1179.39,683.39 1179.95,683.39 1180.51,683.39 1181.07,683.39 1181.63,683.39 1182.19,683.39 1182.75,683.39 1183.31,683.39 1183.87,683.39 1184.43,683.39 1184.98,683.39 1185.54,683.39 1186.1,683.39 1186.66,683.39 1187.22,683.39 1187.78,683.39 1188.34,683.39 1188.9,683.39 1189.46,683.39 1190.02,683.39 1190.58,683.39 1191.14,683.39 1191.7,683.39 1192.25,683.39 1192.81,683.39 1193.37,683.39 1193.93,683.39 1194.49,683.39 1195.05,683.39 1195.61,683.39 1196.17,683.39 1196.73,683.39 1197.29,683.39 1197.85,683.39 1198.41,683.39 1198.97,683.39 1199.52,683.39 1200.08,683.39 1200.64,683.39 1201.2,683.39 1201.76,683.39 1202.32,683.39 1202.88,683.39 1203.44,683.39 1204,683.39 1204.56,683.39 1205.12,683.39 1205.68,683.39 1206.24,683.39 1206.8,683.39 1207.35,683.39 1207.91,683.39 1208.47,683.39 1209.03,683.39 1209.59,683.39 1210.15,683.39 1210.71,683.39 1211.27,683.39 1211.83,683.39 1212.39,683.39 1212.95,683.39 1213.51,683.39 1214.07,683.39 1214.62,683.39 1215.18,683.39 1215.74,683.39 1216.3,683.39 1216.86,683.39 1217.42,683.39 1217.98,683.39 1218.54,683.39 1219.1,683.39 1219.66,683.39 1220.22,683.39 1220.78,683.39 1221.34,683.39 1221.89,683.39 1222.45,683.39 1223.01,683.39 1223.57,683.39 1224.13,683.39 1224.69,683.39 1225.25,683.39 1225.81,683.39 1226.37,683.39 1226.93,683.39 1227.49,683.39 1228.05,683.39 1228.61,683.39 1229.17,683.39 1229.72,683.39 1230.28,683.39 1230.84,683.39 1231.4,683.39 1231.96,683.39 1232.52,683.39 1233.08,683.39 1233.64,683.39 1234.2,683.39 1234.76,683.39 1235.32,683.39 1235.88,683.39 1236.44,683.39 1236.99,683.39 1237.55,683.39 1238.11,683.39 1238.67,683.39 1239.23,683.39 1239.79,683.39 1240.35,683.39 1240.91,683.39 1241.47,683.39 1242.03,683.39 1242.59,683.39 1243.15,683.39 1243.71,683.39 1244.26,683.39 1244.82,683.39 1245.38,683.39 1245.94,683.39 1246.5,683.39 1247.06,683.39 1247.62,683.39 1248.18,683.39 1248.74,683.39 1249.3,683.39 1249.86,683.39 1250.42,683.39 1250.98,683.39 1251.54,683.39 1252.09,683.39 1252.65,683.39 1253.21,683.39 1253.77,683.39 1254.33,683.39 1254.89,683.39 1255.45,683.39 1256.01,683.39 1256.57,683.39 1257.13,683.39 1257.69,683.39 1258.25,683.39 1258.81,683.39 1259.36,683.39 1259.92,683.39 1260.48,683.39 1261.04,683.39 1261.6,683.39 1262.16,683.39 1262.72,683.39 1263.28,683.39 1263.84,683.39 1264.4,683.39 1264.96,683.39 1265.52,683.39 1266.08,683.39 1266.63,683.39 1267.19,683.39 1267.75,683.39 1268.31,683.39 1268.87,683.39 1269.43,683.39 1269.99,683.39 1270.55,683.39 1271.11,683.39 1271.67,683.39 1272.23,683.39 1272.79,683.39 1273.35,683.39 1273.91,683.39 1274.46,683.39 1275.02,683.39 1275.58,683.39 1276.14,683.39 1276.7,683.39 1277.26,683.39 1277.82,683.39 1278.38,683.39 1278.94,683.39 1279.5,683.39 1280.06,683.39 1280.62,683.39 1281.18,683.39 1281.73,683.39 1282.29,683.39 1282.85,683.39 1283.41,683.39 1283.97,683.39 1284.53,683.39 1285.09,683.39 1285.65,683.39 1286.21,683.39 1286.77,683.39 1287.33,683.39 1287.89,683.39 1288.45,683.39 1289,683.39 1289.56,683.39 1290.12,683.39 1290.68,683.39 1291.24,683.39 1291.8,683.39 1292.36,683.39 1292.92,683.39 1293.48,683.39 1294.04,683.39 1294.6,683.39 1295.16,683.39 1295.72,683.39 1296.28,683.39 1296.83,683.39 1297.39,683.39 1297.95,683.39 1298.51,683.39 1299.07,683.39 1299.63,683.39 1300.19,683.39 1300.75,683.39 1301.31,683.39 1301.87,683.39 1302.43,683.39 1302.99,683.39 1303.55,683.39 1304.1,683.39 1304.66,683.39 1305.22,683.39 1305.78,683.39 1306.34,683.39 1306.9,683.39 1307.46,683.39 1308.02,683.39 1308.58,683.39 1309.14,683.39 1309.7,683.39 1310.26,683.39 1310.82,683.39 1311.38,683.39 1311.93,683.39 1312.49,683.39 1313.05,683.39 1313.61,683.39 1314.17,683.39 1314.73,683.39 1315.29,683.39 1315.85,683.39 1316.41,683.39 1316.97,683.39 1317.53,683.39 1318.09,683.39 1318.65,683.39 1319.2,683.39 1319.76,683.39 1320.32,683.39 1320.88,683.39 1321.44,683.39 1322,683.39 1322.56,683.39 1323.12,683.39 1323.68,683.39 1324.24,683.39 1324.8,683.39 1325.36,683.39 1325.92,683.39 1326.47,683.39 1327.03,683.39 1327.59,683.39 1328.15,683.39 1328.71,683.39 1329.27,683.39 1329.83,683.39 1330.39,683.39 1330.95,683.39 1331.51,683.39 1332.07,683.39 1332.63,683.39 1333.19,683.39 1333.75,683.39 1334.3,683.39 1334.86,683.39 1335.42,683.39 1335.98,683.39 1336.54,683.39 1337.1,683.39 1337.66,683.39 1338.22,683.39 1338.78,683.39 1339.34,683.39 1339.9,683.39 1340.46,683.39 1341.02,683.39 1341.57,683.39 1342.13,683.39 1342.69,683.39 1343.25,683.39 1343.81,683.39 1344.37,683.39 1344.93,683.39 1345.49,683.39 1346.05,683.39 1346.61,683.39 1347.17,683.39 1347.73,683.39 1348.29,683.39 1348.84,683.39 1349.4,683.39 1349.96,683.39 1350.52,683.39 1351.08,683.39 1351.64,683.39 1352.2,683.39 1352.76,683.39 1353.32,683.39 1353.88,683.39 1354.44,683.39 1355,683.39 1355.56,683.39 1356.12,683.39 1356.67,683.39 1357.23,683.39 1357.79,683.39 1358.35,683.39 1358.91,683.39 1359.47,683.39 1360.03,683.39 1360.59,683.39 1361.15,683.39 1361.71,683.39 1362.27,683.39 1362.83,683.39 1363.39,683.39 1363.94,683.39 1364.5,683.39 1365.06,683.39 1365.62,683.39 1366.18,683.39 1366.74,683.39 1367.3,683.39 1367.86,683.39 1368.42,683.39 1368.98,683.39 1369.54,683.39 1370.1,683.39 1370.66,683.39 1371.21,683.39 1371.77,683.39 1372.33,683.39 1372.89,683.39 1373.45,683.39 1374.01,683.39 1374.57,683.39 1375.13,683.39 1375.69,683.39 1376.25,683.39 1376.81,683.39 1377.37,683.39 1377.93,683.39 1378.49,683.39 1379.04,683.39 1379.6,683.39 1380.16,683.39 1380.72,683.39 1381.28,683.39 1381.84,683.39 1382.4,683.39 1382.96,683.39 1383.52,683.39 1384.08,683.39 1384.64,683.39 1385.2,683.39 1385.76,683.39 1386.31,683.39 1386.87,683.39 1387.43,683.39 1387.99,683.39 1388.55,683.39 1389.11,683.39 1389.67,683.39 1390.23,683.39 1390.79,683.39 1391.35,683.39 1391.91,683.39 1392.47,683.39 1393.03,683.39 1393.58,683.39 1394.14,683.39 1394.7,683.39 1395.26,683.39 1395.82,683.39 1396.38,683.39 1396.94,683.39 1397.5,683.39 1398.06,683.39 1398.62,683.39 1399.18,683.39 1399.74,683.39 1400.3,683.39 1400.86,683.39 1401.41,683.39 1401.97,683.39 1402.53,683.39 1403.09,683.39 1403.65,683.39 1404.21,683.39 1404.77,683.39 1405.33,683.39 1405.89,683.39 1406.45,683.39 1407.01,683.39 1407.57,683.39 1408.13,683.39 1408.68,683.39 1409.24,683.39 1409.8,683.39 1410.36,683.39 1410.92,683.39 1411.48,683.39 1412.04,683.39 1412.6,683.39 1413.16,683.39 1413.72,683.39 1414.28,683.39 1414.84,683.39 1415.4,683.39 1415.95,683.39 1416.51,683.39 1417.07,683.39 1417.63,683.39 1418.19,683.39 1418.75,683.39 1419.31,683.39 1419.87,683.39 1420.43,683.39 1420.99,683.39 1421.55,683.39 1422.11,683.39 1422.67,683.39 1423.23,683.39 1423.78,683.39 1424.34,683.39 1424.9,683.39 1425.46,683.39 1426.02,683.39 1426.58,683.39 1427.14,683.39 1427.7,683.39 1428.26,683.39 1428.82,683.39 1429.38,683.39 1429.94,683.39 1430.5,683.39 1431.05,683.39 1431.61,683.39 1432.17,683.39 1432.73,683.39 1433.29,683.39 1433.85,683.39 1434.41,683.39 1434.97,683.39 1435.53,683.39 1436.09,683.39 1436.65,683.39 1437.21,683.39 1437.77,683.39 1438.33,683.39 1438.88,683.39 1439.44,683.39 1440,683.39 1440.56,683.39 1441.12,683.39 1441.68,683.39 1442.24,683.39 1442.8,683.39 1443.36,683.39 1443.92,683.39 1444.48,683.39 1445.04,683.39 1445.6,683.39 1446.15,683.39 1446.71,683.39 1447.27,683.39 1447.83,683.39 1448.39,683.39 1448.95,683.39 1449.51,683.39 1450.07,683.39 1450.63,683.39 1451.19,683.39 1451.75,683.39 1452.31,683.39 1452.87,683.39 1453.42,683.39 1453.98,683.39 1454.54,683.39 1455.1,683.39 1455.66,683.39 1456.22,683.39 1456.78,683.39 1457.34,683.39 1457.9,683.39 1458.46,683.39 1459.02,683.39 1459.58,683.39 1460.14,683.39 1460.7,683.39 1461.25,683.39 1461.81,683.39 1462.37,683.39 1462.93,683.39 1463.49,683.39 1464.05,683.39 1464.61,683.39 1465.17,683.39 1465.73,683.39 1466.29,683.39 1466.85,683.39 1467.41,683.39 1467.97,683.39 1468.52,683.39 1469.08,683.39 1469.64,683.39 1470.2,683.39 1470.76,683.39 1471.32,683.39 1471.88,683.39 1472.44,683.39 1473,683.39 1473.56,683.39 1474.12,683.39 1474.68,683.39 1475.24,683.39 1475.79,683.39 1476.35,683.39 1476.91,683.39 1477.47,683.39 1478.03,683.39 1478.59,683.39 1479.15,683.39 1479.71,683.39 1480.27,683.39 1480.83,683.39 1481.39,683.39 1481.95,683.39 1482.51,683.39 1483.07,683.39 1483.62,683.39 1484.18,683.39 1484.74,683.39 1485.3,683.39 1485.86,683.39 1486.42,683.39 1486.98,683.39 1487.54,683.39 1488.1,683.39 1488.66,683.39 1489.22,683.39 1489.78,683.39 1490.34,683.39 1490.89,683.39 1491.45,683.39 1492.01,683.39 1492.57,683.39 1493.13,683.39 1493.69,683.39 1494.25,683.39 1494.81,683.39 1495.37,683.39 1495.93,683.39 1496.49,683.39 1497.05,683.39 1497.61,683.39 1498.16,683.39 1498.72,683.39 1499.28,683.39 1499.84,683.39 1500.4,683.39 1500.96,683.39 1501.52,683.39 1502.08,683.39 1502.64,683.39 1503.2,683.39 1503.76,683.39 1504.32,683.39 1504.88,683.39 1505.44,683.39 1505.99,683.39 1506.55,683.39 1507.11,683.39 1507.67,683.39 1508.23,683.39 1508.79,683.39 1509.35,683.39 1509.91,683.39 1510.47,683.39 1511.03,683.39 1511.59,683.39 1512.15,683.39 1512.71,683.39 1513.26,683.39 1513.82,683.39 1514.38,683.39 1514.94,683.39 1515.5,683.39 1516.06,683.39 1516.62,683.39 1517.18,683.39 1517.74,683.39 1518.3,683.39 1518.86,683.39 1519.42,683.39 1519.98,683.39 1520.53,683.39 1521.09,683.39 1521.65,683.39 1522.21,683.39 1522.77,683.39 1523.33,683.39 1523.89,683.39 1524.45,683.39 1525.01,683.39 1525.57,683.39 1526.13,683.39 1526.69,683.39 1527.25,683.39 1527.81,683.39 1528.36,683.39 1528.92,683.39 1529.48,683.39 1530.04,683.39 1530.6,683.39 1531.16,683.39 1531.72,683.39 1532.28,683.39 1532.84,683.39 1533.4,683.39 1533.96,683.39 1534.52,683.39 1535.08,683.39 1535.63,683.39 1536.19,683.39 1536.75,683.39 1537.31,683.39 1537.87,683.39 1538.43,683.39 1538.99,683.39 1539.55,683.39 1540.11,683.39 1540.67,683.39 1541.23,683.39 1541.79,683.39 1542.35,683.39 1542.9,683.39 1543.46,683.39 1544.02,683.39 1544.58,683.39 1545.14,683.39 1545.7,683.39 1546.26,683.39 1546.82,683.39 1547.38,683.39 1547.94,683.39 1548.5,683.39 1549.06,683.39 1549.62,683.39 1550.18,683.39 1550.73,683.39 1551.29,683.39 1551.85,683.39 1552.41,683.39 1552.97,683.39 1553.53,683.39 1554.09,683.39 1554.65,683.39 1555.21,683.39 1555.77,683.39 1556.33,683.39 1556.89,683.39 1557.45,683.39 1558,683.39 1558.56,683.39 1559.12,683.39 1559.68,683.39 1560.24,683.39 1560.8,683.39 1561.36,683.39 1561.92,683.39 1562.48,683.39 1563.04,683.39 1563.6,683.39 1564.16,683.39 1564.72,683.39 1565.28,683.39 1565.83,683.39 1566.39,683.39 1566.95,683.39 1567.51,683.39 1568.07,683.39 1568.63,683.39 1569.19,683.39 1569.75,683.39 1570.31,683.39 1570.87,683.39 1571.43,683.39 1571.99,683.39 1572.55,683.39 1573.1,683.39 1573.66,683.39 1574.22,683.39 1574.78,683.39 1575.34,683.39 1575.9,683.39 1576.46,683.39 1577.02,683.39 1577.58,683.39 1578.14,683.39 1578.7,683.39 1579.26,683.39 1579.82,683.39 1580.37,683.39 1580.93,683.39 1581.49,683.39 1582.05,683.39 1582.61,683.39 1583.17,683.39 1583.73,683.39 1584.29,683.39 1584.85,683.39 1585.41,683.39 1585.97,683.39 1586.53,683.39 1587.09,683.39 1587.65,683.39 1588.2,683.39 1588.76,683.39 1589.32,683.39 1589.88,683.39 1590.44,683.39 1591,683.39 1591.56,683.39 1592.12,683.39 1592.68,683.39 1593.24,683.39 1593.8,683.39 1594.36,683.39 1594.92,683.39 1595.47,683.39 1596.03,683.39 1596.59,683.39 1597.15,683.39 1597.71,683.39 1598.27,683.39 1598.83,683.39 1599.39,683.39 1599.95,683.39 1600.51,683.39 1601.07,683.39 1601.63,683.39 1602.19,683.39 1602.74,683.39 1603.3,683.39 1603.86,683.39 1604.42,683.39 1604.98,683.39 1605.54,683.39 1606.1,683.39 1606.66,683.39 1607.22,683.39 1607.78,683.39 1608.34,683.39 1608.9,683.39 1609.46,683.39 1610.02,683.39 1610.57,683.39 1611.13,683.39 1611.69,683.39 1612.25,683.39 1612.81,683.39 1613.37,683.39 1613.93,683.39 1614.49,683.39 1615.05,683.39 1615.61,683.39 1616.17,683.39 1616.73,683.39 1617.29,683.39 1617.84,683.39 1618.4,683.39 1618.96,683.39 1619.52,683.39 1620.08,683.39 1620.64,683.39 1621.2,683.39 1621.76,683.39 1622.32,683.39 1622.88,683.39 1623.44,683.39 1624,683.39 1624.56,683.39 1625.11,683.39 1625.67,683.39 1626.23,683.39 1626.79,683.39 1627.35,683.39 1627.91,683.39 1628.47,683.39 1629.03,683.39 1629.59,683.39 1630.15,683.39 1630.71,683.39 1631.27,683.39 1631.83,683.39 1632.39,683.39 1632.94,683.39 1633.5,683.39 1634.06,683.39 1634.62,683.39 1635.18,683.39 1635.74,683.39 1636.3,683.39 1636.86,683.39 1637.42,683.39 1637.98,683.39 1638.54,683.39 1639.1,683.39 1639.66,683.39 1640.21,683.39 1640.77,683.39 1641.33,683.39 1641.89,683.39 1642.45,683.39 1643.01,683.39 1643.57,683.39 1644.13,683.39 1644.69,683.39 1645.25,683.39 1645.81,683.39 1646.37,683.39 1646.93,683.39 1647.48,683.39 1648.04,683.39 1648.6,683.39 1649.16,683.39 1649.72,683.39 1650.28,683.39 1650.84,683.39 1651.4,683.39 1651.96,683.39 1652.52,683.39 1653.08,683.39 1653.64,683.39 1654.2,683.39 1654.76,683.39 1655.31,683.39 1655.87,683.39 1656.43,683.39 1656.99,683.39 1657.55,683.39 1658.11,683.39 1658.67,683.39 1659.23,683.39 1659.79,683.39 1660.35,683.39 1660.91,683.39 1661.47,683.39 1662.03,683.39 1662.58,683.39 1663.14,683.39 1663.7,683.39 1664.26,683.39 1664.82,683.39 1665.38,683.39 1665.94,683.39 1666.5,683.39 1667.06,683.39 1667.62,683.39 1668.18,683.39 1668.74,683.39 1669.3,683.39 1669.85,683.39 1670.41,683.39 1670.97,683.39 1671.53,683.39 1672.09,683.39 1672.65,683.39 1673.21,683.39 1673.77,683.39 1674.33,683.39 1674.89,683.39 1675.45,683.39 1676.01,683.39 1676.57,683.39 1677.13,683.39 1677.68,683.39 1678.24,683.39 1678.8,683.39 1679.36,683.39 1679.92,683.39 1680.48,683.39 1681.04,683.39 1681.6,683.39 1682.16,683.39 1682.72,683.39 1683.28,683.39 1683.84,683.39 1684.4,683.39 1684.95,683.39 1685.51,683.39 1686.07,683.39 1686.63,683.39 1687.19,683.39 1687.75,683.39 1688.31,683.39 1688.87,683.39 1689.43,683.39 1689.99,683.39 1690.55,683.39 1691.11,683.39 1691.67,683.39 1692.23,683.39 1692.78,683.39 1693.34,683.39 1693.9,683.39 1694.46,683.39 1695.02,683.39 1695.58,683.39 1696.14,683.39 1696.7,683.39 1697.26,683.39 1697.82,683.39 1698.38,683.39 1698.94,683.39 1699.5,683.39 1700.05,683.39 1700.61,683.39 1701.17,683.39 1701.73,683.39 1702.29,683.39 1702.85,683.39 1703.41,683.39 1703.97,683.39 1704.53,683.39 1705.09,683.39 1705.65,683.39 1706.21,683.39 1706.77,683.39 1707.32,683.39 1707.88,683.39 1708.44,683.39 1709,683.39 1709.56,683.39 1710.12,683.39 1710.68,683.39 1711.24,683.39 1711.8,683.39 1712.36,683.39 1712.92,683.39 1713.48,683.39 1714.04,683.39 1714.6,683.39 1715.15,683.39 1715.71,683.39 1716.27,683.39 1716.83,683.39 1717.39,683.39 1717.95,683.39 1718.51,683.39 1719.07,683.39 1719.63,683.39 1720.19,683.39 1720.75,683.39 1721.31,683.39 1721.87,683.39 1722.42,683.39 1722.98,683.39 1723.54,683.39 1724.1,683.39 1724.66,683.39 1725.22,683.39 1725.78,683.39 1726.34,683.39 1726.9,683.39 1727.46,683.39 1728.02,683.39 1728.58,683.39 1729.14,683.39 1729.69,683.39 1730.25,683.39 1730.81,683.39 1731.37,683.39 1731.93,683.39 1732.49,683.39 1733.05,683.39 1733.61,683.39 1734.17,683.39 1734.73,683.39 1735.29,683.39 1735.85,683.39 1736.41,683.39 1736.97,683.39 1737.52,683.39 1738.08,683.39 1738.64,683.39 1739.2,683.39 1739.76,683.39 1740.32,683.39 1740.88,683.39 1741.44,683.39 1742,683.39 1742.56,683.39 1743.12,683.39 1743.68,683.39 1744.24,683.39 1744.79,683.39 1745.35,683.39 1745.91,683.39 1746.47,683.39 1747.03,683.39 1747.59,683.39 1748.15,683.39 1748.71,683.39 1749.27,683.39 1749.83,683.39 1750.39,683.39 1750.95,683.39 1751.51,683.39 1752.06,683.39 1752.62,683.39 1753.18,683.39 1753.74,683.39 1754.3,683.39 1754.86,683.39 1755.42,683.39 1755.98,683.39 1756.54,683.39 1757.1,683.39 1757.66,683.39 1758.22,683.39 1758.78,683.39 1759.34,683.39 1759.89,683.39 1760.45,683.39 1761.01,683.39 1761.57,683.39 1762.13,683.39 1762.69,683.39 1763.25,683.39 1763.81,683.39 1764.37,683.39 1764.93,683.39 1765.49,683.39 1766.05,683.39 1766.61,683.39 1767.16,683.39 1767.72,683.39 1768.28,683.39 1768.84,683.39 1769.4,683.39 1769.96,683.39 1770.52,683.39 1771.08,683.39 1771.64,683.39 1772.2,683.39 1772.76,683.39 1773.32,683.39 1773.88,683.39 1774.43,683.39 1774.99,683.39 1775.55,683.39 1776.11,683.39 1776.67,683.39 1777.23,683.39 1777.79,683.39 1778.35,683.39 1778.91,683.39 1779.47,683.39 1780.03,683.39 1780.59,683.39 1781.15,683.39 1781.71,683.39 1782.26,683.39 1782.82,683.39 1783.38,683.39 1783.94,683.39 1784.5,683.39 1785.06,683.39 1785.62,683.39 1786.18,683.39 1786.74,683.39 1787.3,683.39 1787.86,683.39 1788.42,683.39 1788.98,683.39 1789.53,683.39 1790.09,683.39 1790.65,683.39 1791.21,683.39 1791.77,683.39 1792.33,683.39 1792.89,683.39 1793.45,683.39 1794.01,683.39 1794.57,683.39 1795.13,683.39 1795.69,683.39 1796.25,683.39 1796.8,683.39 1797.36,683.39 1797.92,683.39 1798.48,683.39 1799.04,683.39 1799.6,683.39 1800.16,683.39 1800.72,683.39 1801.28,683.39 1801.84,683.39 1802.4,683.39 1802.96,683.39 1803.52,683.39 1804.08,683.39 1804.63,683.39 1805.19,683.39 1805.75,683.39 1806.31,683.39 1806.87,683.39 1807.43,683.39 1807.99,683.39 1808.55,683.39 1809.11,683.39 1809.67,683.39 1810.23,683.39 1810.79,683.39 1811.35,683.39 1811.9,683.39 1812.46,683.39 1813.02,683.39 1813.58,683.39 1814.14,683.39 1814.7,683.39 1815.26,683.39 1815.82,683.39 1816.38,683.39 1816.94,683.39 1817.5,683.39 1818.06,683.39 1818.62,683.39 1819.18,683.39 1819.73,683.39 1820.29,683.39 1820.85,683.39 1821.41,683.39 1821.97,683.39 1822.53,683.39 1823.09,683.39 1823.65,683.39 1824.21,683.39 1824.77,683.39 1825.33,683.39 1825.89,683.39 1826.45,683.39 1827,683.39 1827.56,683.39 1828.12,683.39 1828.68,683.39 1829.24,683.39 1829.8,683.39 1830.36,683.39 1830.92,683.39 1831.48,683.39 1832.04,683.39 1832.6,683.39 1833.16,683.39 1833.72,683.39 1834.27,683.39 1834.83,683.39 1835.39,683.39 1835.95,683.39 1836.51,683.39 1837.07,683.39 1837.63,683.39 1838.19,683.39 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025931481188653 ± 0.02450827064646602\nProjected Energy: -4.014103904548319 ± (0.006405960522489984, 0.0061804975088763925)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.516896</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3675e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2364e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0469e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.182e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.896e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.278e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133672\n -0.7590191922770888\n  0.13584182219622853\n  0.157899986946072\n  0.8767114411781431\n  1.5305929970973393\n  1.583573261186734\n  3.072870330325869\n  3.125672653951831\n  4.862107221562177\n  6.260694850380589\n  6.402671211183109\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
