var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20781245382943905 ± 0.0012964775896377443\n   G2(1) = 0.9192641158830693 ± 0.0005870366354472932\n   G2(2) = 0.982419496752304 ± 0.0005979948074258347\n   G2(3) = 0.988820320899814 ± 0.0008966935890699929\n   G2(4) = 0.982419496752304 ± 0.0005979948074258347\n   G2(5) = 0.9192641158830693 ± 0.0005870366354472932\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9426012928184186 ± 0.10868696667527668\n   Replica 2: -4.049634264856267 ± 0.13399051965310796\n   Replica 3: -3.9920919626758353 ± 0.1436333252480784\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip960\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip961\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip960)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip962\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.85 2211.02,1261.85 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.61 2211.02,1004.61 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.365 2211.02,747.365 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.124 2211.02,490.124 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.883 2211.02,232.883 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.85 423.181,1261.85 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.61 423.181,1004.61 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.365 423.181,747.365 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.124 423.181,490.124 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.883 423.181,232.883 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M356.339 1247.65 Q352.728 1247.65 350.899 1251.21 Q349.094 1254.75 349.094 1261.88 Q349.094 1268.99 350.899 1272.55 Q352.728 1276.09 356.339 1276.09 Q359.973 1276.09 361.779 1272.55 Q363.608 1268.99 363.608 1261.88 Q363.608 1254.75 361.779 1251.21 Q359.973 1247.65 356.339 1247.65 M356.339 1243.94 Q362.149 1243.94 365.205 1248.55 Q368.284 1253.13 368.284 1261.88 Q368.284 1270.61 365.205 1275.22 Q362.149 1279.8 356.339 1279.8 Q350.529 1279.8 347.45 1275.22 Q344.395 1270.61 344.395 1261.88 Q344.395 1253.13 347.45 1248.55 Q350.529 1243.94 356.339 1243.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M290.043 1017.95 L306.363 1017.95 L306.363 1021.89 L284.418 1021.89 L284.418 1017.95 Q287.08 1015.2 291.664 1010.57 Q296.27 1005.91 297.451 1004.57 Q299.696 1002.05 300.576 1000.31 Q301.478 998.553 301.478 996.863 Q301.478 994.109 299.534 992.372 Q297.613 990.636 294.511 990.636 Q292.312 990.636 289.858 991.4 Q287.427 992.164 284.65 993.715 L284.65 988.993 Q287.474 987.859 289.927 987.28 Q292.381 986.701 294.418 986.701 Q299.789 986.701 302.983 989.386 Q306.177 992.072 306.177 996.562 Q306.177 998.692 305.367 1000.61 Q304.58 1002.51 302.474 1005.1 Q301.895 1005.78 298.793 1008.99 Q295.691 1012.19 290.043 1017.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M316.224 987.326 L334.58 987.326 L334.58 991.261 L320.506 991.261 L320.506 999.734 Q321.524 999.386 322.543 999.224 Q323.562 999.039 324.58 999.039 Q330.367 999.039 333.747 1002.21 Q337.126 1005.38 337.126 1010.8 Q337.126 1016.38 333.654 1019.48 Q330.182 1022.56 323.862 1022.56 Q321.687 1022.56 319.418 1022.19 Q317.173 1021.82 314.765 1021.08 L314.765 1016.38 Q316.849 1017.51 319.071 1018.07 Q321.293 1018.62 323.77 1018.62 Q327.774 1018.62 330.112 1016.52 Q332.45 1014.41 332.45 1010.8 Q332.45 1007.19 330.112 1005.08 Q327.774 1002.97 323.77 1002.97 Q321.895 1002.97 320.02 1003.39 Q318.168 1003.81 316.224 1004.69 L316.224 987.326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M356.339 990.405 Q352.728 990.405 350.899 993.97 Q349.094 997.511 349.094 1004.64 Q349.094 1011.75 350.899 1015.31 Q352.728 1018.85 356.339 1018.85 Q359.973 1018.85 361.779 1015.31 Q363.608 1011.75 363.608 1004.64 Q363.608 997.511 361.779 993.97 Q359.973 990.405 356.339 990.405 M356.339 986.701 Q362.149 986.701 365.205 991.308 Q368.284 995.891 368.284 1004.64 Q368.284 1013.37 365.205 1017.97 Q362.149 1022.56 356.339 1022.56 Q350.529 1022.56 347.45 1017.97 Q344.395 1013.37 344.395 1004.64 Q344.395 995.891 347.45 991.308 Q350.529 986.701 356.339 986.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M286.062 730.085 L304.418 730.085 L304.418 734.02 L290.344 734.02 L290.344 742.493 Q291.363 742.145 292.381 741.983 Q293.4 741.798 294.418 741.798 Q300.205 741.798 303.585 744.969 Q306.964 748.141 306.964 753.557 Q306.964 759.136 303.492 762.238 Q300.02 765.316 293.701 765.316 Q291.525 765.316 289.256 764.946 Q287.011 764.576 284.603 763.835 L284.603 759.136 Q286.687 760.27 288.909 760.826 Q291.131 761.381 293.608 761.381 Q297.613 761.381 299.951 759.275 Q302.288 757.168 302.288 753.557 Q302.288 749.946 299.951 747.84 Q297.613 745.733 293.608 745.733 Q291.733 745.733 289.858 746.15 Q288.006 746.567 286.062 747.446 L286.062 730.085 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M326.177 733.164 Q322.566 733.164 320.737 736.729 Q318.932 740.27 318.932 747.4 Q318.932 754.506 320.737 758.071 Q322.566 761.613 326.177 761.613 Q329.811 761.613 331.617 758.071 Q333.446 754.506 333.446 747.4 Q333.446 740.27 331.617 736.729 Q329.811 733.164 326.177 733.164 M326.177 729.46 Q331.987 729.46 335.043 734.067 Q338.122 738.65 338.122 747.4 Q338.122 756.127 335.043 760.733 Q331.987 765.316 326.177 765.316 Q320.367 765.316 317.288 760.733 Q314.233 756.127 314.233 747.4 Q314.233 738.65 317.288 734.067 Q320.367 729.46 326.177 729.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M356.339 733.164 Q352.728 733.164 350.899 736.729 Q349.094 740.27 349.094 747.4 Q349.094 754.506 350.899 758.071 Q352.728 761.613 356.339 761.613 Q359.973 761.613 361.779 758.071 Q363.608 754.506 363.608 747.4 Q363.608 740.27 361.779 736.729 Q359.973 733.164 356.339 733.164 M356.339 729.46 Q362.149 729.46 365.205 734.067 Q368.284 738.65 368.284 747.4 Q368.284 756.127 365.205 760.733 Q362.149 765.316 356.339 765.316 Q350.529 765.316 347.45 760.733 Q344.395 756.127 344.395 747.4 Q344.395 738.65 347.45 734.067 Q350.529 729.46 356.339 729.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M284.835 472.844 L307.057 472.844 L307.057 474.835 L294.511 507.404 L289.627 507.404 L301.432 476.779 L284.835 476.779 L284.835 472.844 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M316.224 472.844 L334.58 472.844 L334.58 476.779 L320.506 476.779 L320.506 485.252 Q321.524 484.904 322.543 484.742 Q323.562 484.557 324.58 484.557 Q330.367 484.557 333.747 487.728 Q337.126 490.9 337.126 496.316 Q337.126 501.895 333.654 504.997 Q330.182 508.075 323.862 508.075 Q321.687 508.075 319.418 507.705 Q317.173 507.335 314.765 506.594 L314.765 501.895 Q316.849 503.029 319.071 503.585 Q321.293 504.14 323.77 504.14 Q327.774 504.14 330.112 502.034 Q332.45 499.927 332.45 496.316 Q332.45 492.705 330.112 490.599 Q327.774 488.492 323.77 488.492 Q321.895 488.492 320.02 488.909 Q318.168 489.326 316.224 490.205 L316.224 472.844 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M356.339 475.923 Q352.728 475.923 350.899 479.488 Q349.094 483.029 349.094 490.159 Q349.094 497.265 350.899 500.83 Q352.728 504.372 356.339 504.372 Q359.973 504.372 361.779 500.83 Q363.608 497.265 363.608 490.159 Q363.608 483.029 361.779 479.488 Q359.973 475.923 356.339 475.923 M356.339 472.219 Q362.149 472.219 365.205 476.826 Q368.284 481.409 368.284 490.159 Q368.284 498.886 365.205 503.492 Q362.149 508.075 356.339 508.075 Q350.529 508.075 347.45 503.492 Q344.395 498.886 344.395 490.159 Q344.395 481.409 347.45 476.826 Q350.529 472.219 356.339 472.219 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M256.664 246.228 L264.303 246.228 L264.303 219.862 L255.992 221.529 L255.992 217.27 L264.256 215.603 L268.932 215.603 L268.932 246.228 L276.571 246.228 L276.571 250.163 L256.664 250.163 L256.664 246.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M296.015 218.682 Q292.404 218.682 290.576 222.247 Q288.77 225.788 288.77 232.918 Q288.77 240.024 290.576 243.589 Q292.404 247.131 296.015 247.131 Q299.65 247.131 301.455 243.589 Q303.284 240.024 303.284 232.918 Q303.284 225.788 301.455 222.247 Q299.65 218.682 296.015 218.682 M296.015 214.978 Q301.826 214.978 304.881 219.585 Q307.96 224.168 307.96 232.918 Q307.96 241.645 304.881 246.251 Q301.826 250.834 296.015 250.834 Q290.205 250.834 287.127 246.251 Q284.071 241.645 284.071 232.918 Q284.071 224.168 287.127 219.585 Q290.205 214.978 296.015 214.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M326.177 218.682 Q322.566 218.682 320.737 222.247 Q318.932 225.788 318.932 232.918 Q318.932 240.024 320.737 243.589 Q322.566 247.131 326.177 247.131 Q329.811 247.131 331.617 243.589 Q333.446 240.024 333.446 232.918 Q333.446 225.788 331.617 222.247 Q329.811 218.682 326.177 218.682 M326.177 214.978 Q331.987 214.978 335.043 219.585 Q338.122 224.168 338.122 232.918 Q338.122 241.645 335.043 246.251 Q331.987 250.834 326.177 250.834 Q320.367 250.834 317.288 246.251 Q314.233 241.645 314.233 232.918 Q314.233 224.168 317.288 219.585 Q320.367 214.978 326.177 214.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M356.339 218.682 Q352.728 218.682 350.899 222.247 Q349.094 225.788 349.094 232.918 Q349.094 240.024 350.899 243.589 Q352.728 247.131 356.339 247.131 Q359.973 247.131 361.779 243.589 Q363.608 240.024 363.608 232.918 Q363.608 225.788 361.779 222.247 Q359.973 218.682 356.339 218.682 M356.339 214.978 Q362.149 214.978 365.205 219.585 Q368.284 224.168 368.284 232.918 Q368.284 241.645 365.205 246.251 Q362.149 250.834 356.339 250.834 Q350.529 250.834 347.45 246.251 Q344.395 241.645 344.395 232.918 Q344.395 224.168 347.45 219.585 Q350.529 214.978 356.339 214.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip962)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.883 4017.76,232.883 \"/>\n<polyline clip-path=\"url(#clip962)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.45 457.123,1250.29 457.691,1250.05 458.259,1249.73 458.828,1249.34 459.396,1247.88 459.964,1246.4 460.533,1245.92 461.101,1244.29 461.669,1243.65 462.238,1242.91 462.806,1241.06 463.375,1240.15 463.943,1239.1 464.511,1236.97 465.08,1235.82 465.648,1234.54 466.216,1233.15 466.785,1231.65 467.353,1228.96 467.921,1227.23 468.49,1224.31 469.058,1222.28 469.626,1220.13 470.195,1217.82 470.763,1215.34 471.331,1212.71 471.9,1209.92 472.468,1205.92 473.036,1202.78 473.605,1198.37 474.173,1194.85 474.741,1190.15 475.31,1186.28 475.878,1181.19 476.446,1176.86 477.015,1171.29 477.583,1166.54 478.152,1160.57 478.72,1153.24 479.288,1144.69 479.857,1138.97 480.425,1132.98 480.993,1125.83 481.562,1118.41 482.13,1109.81 482.698,1102.17 483.267,1093.14 483.835,1085.01 484.403,1076.85 484.972,1069.6 485.54,1061.12 486.108,1053.56 486.677,1044.76 487.245,1036.82 487.813,1028.68 488.382,1019.35 488.95,1009.91 489.518,1000.28 490.087,990.495 490.655,979.64 491.224,968.805 491.792,959.903 492.36,950.906 492.929,940.719 493.497,930.495 494.065,921.264 494.634,911.852 495.202,901.44 495.77,891.863 496.339,878.161 496.907,866.625 497.475,855.174 498.044,843.797 498.612,833.425 499.18,823.175 499.749,813.9 500.317,802.554 500.885,791.201 501.454,778.966 502.022,768.816 502.59,758.689 503.159,749.692 503.727,738.7 504.295,728.778 504.864,718.887 505.432,709.191 506.001,696.545 506.569,686.028 507.137,677.736 507.706,666.325 508.274,656.956 508.842,647.792 509.411,637.541 509.979,626.532 510.547,616.831 511.116,609.247 511.684,601.735 512.252,592.495 512.821,582.066 513.389,570.906 513.957,562.278 514.526,554.709 515.094,548.32 515.662,542.001 516.231,534.716 516.799,528.607 517.367,517.469 517.936,510.574 518.504,503.968 519.072,497.34 519.641,491.809 520.209,483.203 520.778,477.052 521.346,471.937 521.914,465.906 522.483,458.112 523.051,452.515 523.619,444.869 524.188,439.671 524.756,436.808 525.324,430.691 525.893,426.753 526.461,420.837 527.029,416.294 527.598,409.489 528.166,406.289 528.734,402.028 529.303,398.651 529.871,394.611 530.439,388.557 531.008,384.499 531.576,381.641 532.144,378.83 532.713,374.974 533.281,372.353 533.85,367.438 534.418,365.161 534.986,361.834 535.555,359.389 536.123,355.001 536.691,352.773 537.26,349.621 537.828,347.316 538.396,343.009 538.965,341.296 539.533,336.149 540.101,333.521 540.67,330.746 541.238,327.313 541.806,324.952 542.375,322.578 542.943,320.144 543.511,318.015 544.08,317.883 544.648,317.587 545.216,315.312 545.785,309.974 546.353,309.024 546.921,307.915 547.49,305.854 548.058,305.83 548.627,304.878 549.195,305.002 549.763,303.848 550.332,300.724 550.9,301.744 551.468,300.405 552.037,299.412 552.605,298.121 553.173,296.841 553.742,294.665 554.31,292.612 554.878,288.759 555.447,289.239 556.015,289.355 556.583,289.32 557.152,286.177 557.72,285.124 558.288,284.223 558.857,283.346 559.425,281.396 559.993,279.535 560.562,276.805 561.13,276.25 561.698,273.714 562.267,274.26 562.835,273.691 563.404,275.302 563.972,270.642 564.54,269.224 565.109,266.685 565.677,264.414 566.245,263.365 566.814,260.284 567.382,260.516 567.95,259.544 568.519,262.017 569.087,263.071 569.655,264.984 570.224,264.826 570.792,264.555 571.36,261.011 571.929,259.941 572.497,259.762 573.065,257.856 573.634,258.998 574.202,259.068 574.77,258.812 575.339,259.791 575.907,260.71 576.476,259.573 577.044,259.234 577.612,257.723 578.181,257.608 578.749,255.168 579.317,254.126 579.886,254.114 580.454,253.005 581.022,253.042 581.591,251.057 582.159,253.043 582.727,255.187 583.296,254.954 583.864,253.551 584.432,255.566 585.001,253.93 585.569,252.74 586.137,250.415 586.706,249.505 587.274,247.487 587.842,246.523 588.411,246.919 588.979,248.301 589.547,247.435 590.116,246.729 590.684,245.874 591.253,245.924 591.821,246.036 592.389,245.221 592.958,246.57 593.526,245.874 594.094,244.02 594.663,244.367 595.231,244.611 595.799,243.752 596.368,248.273 596.936,248.344 597.504,247.565 598.073,247.397 598.641,247.438 599.209,248.544 599.778,247.583 600.346,247.474 600.914,244.468 601.483,243.68 602.051,245.744 602.619,245.734 603.188,245.836 603.756,247.001 604.325,245.866 604.893,244.774 605.461,242.958 606.03,243.307 606.598,242.568 607.166,240.873 607.735,241.216 608.303,240.656 608.871,240.169 609.44,240.42 610.008,240.617 610.576,237.712 611.145,239.178 611.713,238.566 612.281,241.052 612.85,241.237 613.418,239.718 613.986,238.161 614.555,237.703 615.123,239.169 615.691,239.736 616.26,237.906 616.828,239.525 617.396,239.789 617.965,241.202 618.533,241.475 619.102,238.845 619.67,240.043 620.238,241.368 620.807,240.672 621.375,238.921 621.943,239.141 622.512,238.662 623.08,240.007 623.648,238.246 624.217,238.752 624.785,239.134 625.353,240.484 625.922,240.565 626.49,239.869 627.058,240.051 627.627,240.268 628.195,239.619 628.763,236.914 629.332,239.416 629.9,237.729 630.468,239.347 631.037,237.635 631.605,237.19 632.173,238.566 632.742,238.037 633.31,240.23 633.879,242.4 634.447,240.369 635.015,240.615 635.584,241.893 636.152,242.835 636.72,244.81 637.289,243.767 637.857,243.887 638.425,242.615 638.994,243.377 639.562,244.403 640.13,243.141 640.699,246.986 641.267,245.565 641.835,246.335 642.404,244.001 642.972,242.604 643.54,241.412 644.109,242.395 644.677,242.271 645.245,242.037 645.814,242.858 646.382,240.669 646.951,239.528 647.519,239.453 648.087,239.64 648.656,237.744 649.224,238.175 649.792,237.513 650.361,240.816 650.929,240.935 651.497,240.893 652.066,241.685 652.634,241.477 653.202,246.614 653.771,241.997 654.339,239.899 654.907,240.018 655.476,241.152 656.044,242.107 656.612,242.831 657.181,244.451 657.749,246.006 658.317,245.585 658.886,242.956 659.454,242.671 660.022,242.242 660.591,239.84 661.159,237.769 661.728,236.609 662.296,235.565 662.864,236.778 663.433,239.045 664.001,238.938 664.569,239.994 665.138,238.897 665.706,238.887 666.274,239.904 666.843,239.664 667.411,240.589 667.979,240.524 668.548,239.144 669.116,238.808 669.684,240.779 670.253,241.517 670.821,241.234 671.389,242.952 671.958,240.237 672.526,240.012 673.094,239.59 673.663,238.325 674.231,237.801 674.799,238.786 675.368,237.509 675.936,236.483 676.505,235.43 677.073,234.463 677.641,235.698 678.21,235.645 678.778,235.674 679.346,235.632 679.915,235.504 680.483,235.416 681.051,233.621 681.62,231.813 682.188,232.043 682.756,232.32 683.325,233.516 683.893,232.74 684.461,233.24 685.03,232.433 685.598,230.563 686.166,230.153 686.735,230.661 687.303,228.943 687.871,228.583 688.44,229.04 689.008,229.753 689.577,230.422 690.145,231.926 690.713,232.28 691.282,232.758 691.85,231.007 692.418,229.162 692.987,229.914 693.555,230.462 694.123,231.067 694.692,232.743 695.26,233.067 695.828,234.193 696.397,235.249 696.965,234.468 697.533,230.995 698.102,230.351 698.67,231.01 699.238,233.715 699.807,235.842 700.375,235.928 700.943,236.101 701.512,236.457 702.08,235.534 702.648,236.702 703.217,235.635 703.785,234.87 704.354,235.18 704.922,235.29 705.49,235.44 706.059,233.571 706.627,233.686 707.195,234.051 707.764,233.382 708.332,232.711 708.9,234.184 709.469,234.535 710.037,234.571 710.605,233.581 711.174,233.866 711.742,235.073 712.31,235.295 712.879,234.37 713.447,234.418 714.015,234.798 714.584,233.035 715.152,231.357 715.72,232.983 716.289,233.411 716.857,232.702 717.425,233.142 717.994,232.385 718.562,230.806 719.131,232.131 719.699,230.461 720.267,229.863 720.836,230.677 721.404,230.21 721.972,229.815 722.541,232.559 723.109,234.226 723.677,232.507 724.246,235.04 724.814,236.434 725.382,238.621 725.951,239.659 726.519,237.369 727.087,238.497 727.656,238.413 728.224,236.472 728.792,237.586 729.361,236.537 729.929,235.672 730.497,233.535 731.066,232.871 731.634,230.134 732.203,230.581 732.771,233.013 733.339,233.372 733.908,233.809 734.476,234.072 735.044,235.525 735.613,237.725 736.181,237.615 736.749,237.707 737.318,237.59 737.886,236.484 738.454,236.504 739.023,235.502 739.591,235.599 740.159,233.81 740.728,237.244 741.296,237.27 741.864,237.217 742.433,237.292 743.001,237.309 743.569,236.261 744.138,236.345 744.706,235.418 745.274,236.495 745.843,235.361 746.411,235.34 746.98,234.459 747.548,234.518 748.116,233.604 748.685,233.783 749.253,233.86 749.821,234.021 750.39,232.022 750.958,234.191 751.526,235.317 752.095,237.501 752.663,236.5 753.231,235.7 753.8,233.903 754.368,236.205 754.936,234.267 755.505,234.71 756.073,234.974 756.641,235.937 757.21,236.154 757.778,235.193 758.346,235.194 758.915,234.497 759.483,233.635 760.052,233.941 760.62,235.109 761.188,234.162 761.757,234.427 762.325,235.621 762.893,234.595 763.462,233.641 764.03,235.761 764.598,235.655 765.167,237.946 765.735,239.106 766.303,235.939 766.872,235.67 767.44,236.539 768.008,234.405 768.577,234.526 769.145,234.598 769.713,233.752 770.282,233.898 770.85,235.278 771.418,234.285 771.987,235.34 772.555,235.196 773.123,234.106 773.692,234.29 774.26,235.588 774.829,234.558 775.397,233.504 775.965,232.508 776.534,233.765 777.102,233.987 777.67,234.215 778.239,234.277 778.807,231.254 779.375,230.324 779.944,232.683 780.512,231.885 781.08,231.091 781.649,232.3 782.217,232.528 782.785,231.89 783.354,231.131 783.922,232.344 784.49,232.51 785.059,232.797 785.627,237.027 786.195,236.944 786.764,238.087 787.332,237.864 787.9,237.624 788.469,238.672 789.037,240.606 789.606,240.208 790.174,241.949 790.742,240.355 791.311,237.975 791.879,238.897 792.447,235.44 793.016,235.405 793.584,237.276 794.152,235.049 794.721,232.976 795.289,232.156 795.857,231.546 796.426,230.578 796.994,230.776 797.562,230.112 798.131,232.519 798.699,231.884 799.267,230.999 799.836,234.365 800.404,232.231 800.972,234.517 801.541,235.383 802.109,237.215 802.678,235.017 803.246,236.023 803.814,236.015 804.383,234.649 804.951,235.703 805.519,235.586 806.088,236.651 806.656,236.623 807.224,234.246 807.793,235.164 808.361,233.789 808.929,232.66 809.498,231.78 810.066,231.962 810.634,232.002 811.203,230.15 811.771,233.359 812.339,233.444 812.908,234.473 813.476,232.309 814.044,232.331 814.613,234.492 815.181,233.46 815.749,232.305 816.318,231.237 816.886,232.294 817.455,231.457 818.023,232.644 818.591,230.654 819.16,230.222 819.728,231.377 820.296,229.474 820.865,231.858 821.433,233.176 822.001,233.19 822.57,233.373 823.138,232.309 823.706,230.386 824.275,230.932 824.843,232.276 825.411,232.554 825.98,233.617 826.548,236.752 827.116,235.733 827.685,234.458 828.253,235.614 828.821,235.677 829.39,234.533 829.958,232.512 830.526,233.614 831.095,233.639 831.663,235.869 832.232,235.581 832.8,234.443 833.368,235.564 833.937,238.663 834.505,237.551 835.073,235.391 835.642,233.509 836.21,235.752 836.778,236.814 837.347,238.685 837.915,238.325 838.483,240.082 839.052,238.72 839.62,238.59 840.188,238.384 840.757,237.21 841.325,236.054 841.893,238.916 842.462,237.658 843.03,236.375 843.598,234.165 844.167,235.127 844.735,234.925 845.304,233.742 845.872,231.685 846.44,232.806 847.009,234.805 847.577,234.543 848.145,237.658 848.714,236.364 849.282,234.089 849.85,230.833 850.419,234.105 850.987,235.291 851.555,234.049 852.124,235.24 852.692,236.1 853.26,236.879 853.829,238.645 854.397,236.366 854.965,235.141 855.534,235.345 856.102,234.365 856.67,235.508 857.239,235.156 857.807,235.03 858.375,233.728 858.944,234.511 859.512,233.415 860.081,236.312 860.649,233.147 861.217,234.265 861.786,235.277 862.354,235.028 862.922,234.694 863.491,232.663 864.059,233.781 864.627,230.607 865.196,230.754 865.764,232.978 866.332,232.86 866.901,233.194 867.469,235.109 868.037,239.226 868.606,235.57 869.174,237.399 869.742,237.123 870.311,239.932 870.879,239.293 871.447,237.631 872.016,235.148 872.584,234.078 873.152,230.081 873.721,235.36 874.289,236.168 874.858,237.269 875.426,237.958 875.994,239.475 876.563,239.123 877.131,238.39 877.699,238.776 878.268,238.039 878.836,238.481 879.404,237.895 879.973,237.489 880.541,236.907 881.109,236.494 881.678,235.989 882.246,236.633 882.814,237.195 883.383,239.035 883.951,239.734 884.519,239.201 885.088,238.616 885.656,237.996 886.224,234.326 886.793,234.07 887.361,232.799 887.93,230.473 888.498,230.538 889.066,229.366 889.635,228.544 890.203,224.406 890.771,225.228 891.34,226.66 891.908,226.128 892.476,228.501 893.045,227.568 893.613,228.904 894.181,229.191 894.75,229.377 895.318,229.747 895.886,228.93 896.455,229.182 897.023,230.52 897.591,230.546 898.16,229.835 898.728,230.088 899.296,231.206 899.865,228.245 900.433,226.671 901.001,228.236 901.57,228.487 902.138,229.622 902.707,228.742 903.275,230.157 903.843,230.386 904.412,232.64 904.98,232.676 905.548,232.733 906.117,231.726 906.685,230.923 907.253,231.084 907.822,228.22 908.39,227.62 908.958,229.245 909.527,229.74 910.095,231.091 910.663,232.343 911.232,232.407 911.8,231.611 912.368,232.628 912.937,233.633 913.505,233.569 914.073,231.534 914.642,232.848 915.21,231.787 915.779,233.008 916.347,230.897 916.915,232.051 917.484,231.228 918.052,232.653 918.62,231.745 919.189,232.829 919.757,232.834 920.325,232.178 920.894,231.404 921.462,233.911 922.03,235.936 922.599,238.014 923.167,236.695 923.735,233.433 924.304,231.612 924.872,232.896 925.44,230.827 926.009,231.946 926.577,231.94 927.145,233.313 927.714,233.562 928.282,237.805 928.85,236.337 929.419,235.229 929.987,234.151 930.556,232.051 931.124,231.139 931.692,230.337 932.261,230.776 932.829,227.985 933.397,229.325 933.966,230.783 934.534,231.717 935.102,231.907 935.671,231.961 936.239,232.232 936.807,233.541 937.376,234.696 937.944,238.839 938.512,238.456 939.081,237.878 939.649,236.663 940.217,235.469 940.786,234.367 941.354,235.31 941.922,233.095 942.491,230.131 943.059,230.477 943.627,230.705 944.196,230.558 944.764,230.899 945.333,233.098 945.901,234.022 946.469,233.932 947.038,234.87 947.606,236.897 948.174,237.718 948.743,237.531 949.311,237.067 949.879,235.754 950.448,234.717 951.016,234.508 951.584,235.499 952.153,233.346 952.721,234.325 953.289,235.388 953.858,237.38 954.426,237.013 954.994,237.76 955.563,237.267 956.131,236.908 956.699,238.759 957.268,236.304 957.836,236.152 958.405,234.529 958.973,234.396 959.541,234.242 960.11,231.025 960.678,232.43 961.246,232.441 961.815,233.377 962.383,233.356 962.951,235.393 963.52,235.077 964.088,234.959 964.656,234.793 965.225,235.528 965.793,235.454 966.361,235.143 966.93,233.78 967.498,231.713 968.066,229.819 968.635,227.93 969.203,227.113 969.771,229.528 970.34,227.525 970.908,229.051 971.476,230.219 972.045,231.288 972.613,231.468 973.182,230.581 973.75,227.643 974.318,230.034 974.887,230.293 975.455,231.251 976.023,231.378 976.592,229.665 977.16,230.717 977.728,231.942 978.297,231.955 978.865,234.227 979.433,235.186 980.002,235.135 980.57,236.001 981.138,235.929 981.707,236.792 982.275,235.539 982.843,235.291 983.412,235.085 983.98,236.947 984.548,236.686 985.117,235.969 985.685,237.706 986.253,238.382 986.822,238.276 987.39,237.826 987.959,237.486 988.527,238.335 989.095,235.959 989.664,233.658 990.232,232.647 990.8,233.492 991.369,233.495 991.937,233.286 992.505,232.312 993.074,232.245 993.642,230.303 994.21,229.652 994.779,232.026 995.347,231.141 995.915,231.333 996.484,231.595 997.052,230.702 997.62,232.826 998.189,233.623 998.757,235.736 999.325,235.453 999.894,234.241 1000.46,234.869 1001.03,233.687 1001.6,234.746 1002.17,234.477 1002.74,234.367 1003.3,232.165 1003.87,233.114 1004.44,233.722 1005.01,234.531 1005.58,235.622 1006.15,233.913 1006.71,230.841 1007.28,232.766 1007.85,234.806 1008.42,234.664 1008.99,236.477 1009.56,235.95 1010.12,235.752 1010.69,235.558 1011.26,234.231 1011.83,234.094 1012.4,233.972 1012.97,231.895 1013.53,233.797 1014.1,234.537 1014.67,235.356 1015.24,235.148 1015.81,235.906 1016.38,237.461 1016.94,233.79 1017.51,233.493 1018.08,231.374 1018.65,230.194 1019.22,228.392 1019.79,228.718 1020.35,225.804 1020.92,226.312 1021.49,226.746 1022.06,226.947 1022.63,228.271 1023.2,229.564 1023.76,230.782 1024.33,230.972 1024.9,230.14 1025.47,231.587 1026.04,231.694 1026.61,232.598 1027.17,233.743 1027.74,232.712 1028.31,231.599 1028.88,231.487 1029.45,231.414 1030.02,230.64 1030.58,231.881 1031.15,230.898 1031.72,229.818 1032.29,229.934 1032.86,230.093 1033.43,230.288 1033.99,229.535 1034.56,227.998 1035.13,228.186 1035.7,226.51 1036.27,228.01 1036.84,226.482 1037.4,227.853 1037.97,230.158 1038.54,232.321 1039.11,233.525 1039.68,232.436 1040.25,232.681 1040.81,231.629 1041.38,231.657 1041.95,232.873 1042.52,238.064 1043.09,238.034 1043.66,236.81 1044.22,233.549 1044.79,234.771 1045.36,235.917 1045.93,235.803 1046.5,235.754 1047.07,234.628 1047.63,236.575 1048.2,237.425 1048.77,237.014 1049.34,237.42 1049.91,237.412 1050.48,237.082 1051.05,238.907 1051.61,238.511 1052.18,237.133 1052.75,236.821 1053.32,237.745 1053.89,238.254 1054.46,237.715 1055.02,236.393 1055.59,233.886 1056.16,234.669 1056.73,233.649 1057.3,233.485 1057.87,233.495 1058.43,234.379 1059,236.292 1059.57,233.962 1060.14,233.576 1060.71,231.39 1061.28,229.58 1061.84,229.864 1062.41,229.174 1062.98,229.752 1063.55,227.915 1064.12,227.045 1064.69,230.616 1065.25,230.84 1065.82,230.971 1066.39,231.946 1066.96,232.274 1067.53,233.269 1068.1,232.295 1068.66,233.286 1069.23,235.029 1069.8,234.933 1070.37,234.715 1070.94,234.527 1071.51,234.355 1072.07,231.185 1072.64,230.381 1073.21,230.531 1073.78,229.552 1074.35,230.839 1074.92,229.983 1075.48,231.481 1076.05,232.759 1076.62,231.034 1077.19,231.219 1077.76,232.421 1078.33,231.59 1078.89,230.7 1079.46,232.931 1080.03,234.04 1080.6,234.074 1081.17,233.602 1081.74,234.497 1082.3,236.258 1082.87,236.962 1083.44,234.625 1084.01,234.362 1084.58,233.249 1085.15,233.234 1085.71,233.915 1086.28,231.345 1086.85,232.321 1087.42,232.474 1087.99,233.561 1088.56,232.612 1089.12,231.649 1089.69,232.59 1090.26,233.456 1090.83,232.289 1091.4,232.208 1091.97,231.385 1092.53,230.397 1093.1,230.689 1093.67,230.9 1094.24,231.975 1094.81,233.114 1095.38,234.072 1095.94,232.85 1096.51,230.881 1097.08,231.119 1097.65,232.376 1098.22,233.6 1098.79,234.673 1099.35,238.626 1099.92,239.454 1100.49,238.104 1101.06,236.83 1101.63,234.624 1102.2,234.511 1102.76,234.148 1103.33,234.152 1103.9,232.06 1104.47,233.081 1105.04,232.929 1105.61,231.816 1106.17,231.938 1106.74,229.084 1107.31,228.234 1107.88,227.665 1108.45,227.159 1109.02,229.636 1109.58,229.827 1110.15,231.204 1110.72,229.94 1111.29,228.934 1111.86,228.354 1112.43,226.748 1112.99,227.303 1113.56,227.652 1114.13,229.134 1114.7,231.515 1115.27,230.871 1115.84,230.214 1116.4,231.802 1116.97,229.989 1117.54,229.03 1118.11,229.376 1118.68,229.7 1119.25,231.754 1119.81,232.031 1120.38,232.136 1120.95,233.208 1121.52,232.168 1122.09,231.296 1122.66,231.418 1123.23,231.607 1123.79,232.867 1124.36,233.095 1124.93,235.225 1125.5,235.086 1126.07,235.991 1126.64,232.56 1127.2,233.631 1127.77,235.68 1128.34,234.441 1128.91,234.442 1129.48,234.464 1130.05,234.39 1130.61,236.39 1131.18,235.254 1131.75,236.358 1132.32,235.11 1132.89,235.052 1133.46,234.84 1134.02,235.674 1134.59,236.579 1135.16,234.218 1135.73,232.004 1136.3,234.173 1136.87,234.155 1137.43,234.229 1138,234.085 1138.57,230.917 1139.14,233.234 1139.71,231.15 1140.28,233.284 1140.84,231.939 1141.41,231.019 1141.98,231.407 1142.55,231.566 1143.12,232.651 1143.69,232.429 1144.25,230.63 1144.82,231.658 1145.39,231.683 1145.96,231.803 1146.53,231.864 1147.1,231.022 1147.66,231.156 1148.23,231.17 1148.8,230.29 1149.37,230.466 1149.94,229.721 1150.51,232.044 1151.07,232.385 1151.64,231.327 1152.21,232.574 1152.78,231.466 1153.35,231.511 1153.92,228.526 1154.48,228.867 1155.05,229.122 1155.62,229.257 1156.19,230.692 1156.76,230.976 1157.33,231.07 1157.89,231.326 1158.46,232.359 1159.03,231.384 1159.6,229.627 1160.17,229.827 1160.74,231.367 1161.3,232.45 1161.87,231.496 1162.44,229.907 1163.01,231.932 1163.58,231.986 1164.15,233.937 1164.71,236.126 1165.28,237.894 1165.85,236.731 1166.42,237.498 1166.99,237.249 1167.56,236.887 1168.12,235.597 1168.69,236.738 1169.26,236.454 1169.83,235.186 1170.4,233.995 1170.97,235.028 1171.53,236.088 1172.1,234.808 1172.67,234.696 1173.24,234.302 1173.81,232.149 1174.38,231.213 1174.94,230.273 1175.51,232.761 1176.08,236.029 1176.65,235.631 1177.22,236.662 1177.79,235.606 1178.35,235.321 1178.92,235.011 1179.49,236.896 1180.06,236.582 1180.63,237.312 1181.2,238.719 1181.76,240.225 1182.33,237.64 1182.9,238.187 1183.47,238.898 1184.04,237.7 1184.61,237.286 1185.17,236.813 1185.74,236.576 1186.31,235.389 1186.88,234.26 1187.45,236.192 1188.02,234.913 1188.58,234.626 1189.15,232.399 1189.72,233.373 1190.29,230.27 1190.86,230.39 1191.43,231.747 1192,229.932 1192.56,234.234 1193.13,234.033 1193.7,233.87 1194.27,237.04 1194.84,235.74 1195.41,235.459 1195.97,236.357 1196.54,236.945 1197.11,237.614 1197.68,237.287 1198.25,236.89 1198.82,235.328 1199.38,237.078 1199.95,237.774 1200.52,238.331 1201.09,239.693 1201.66,236.104 1202.23,233.76 1202.79,233.624 1203.36,235.535 1203.93,235.17 1204.5,232.941 1205.07,231.607 1205.64,231.769 1206.2,231.685 1206.77,231.81 1207.34,230.76 1207.91,229.085 1208.48,228.466 1209.05,229.87 1209.61,231.018 1210.18,232.188 1210.75,229.045 1211.32,229.13 1211.89,230.279 1212.46,229.375 1213.02,228.568 1213.59,228.905 1214.16,227.874 1214.73,227.302 1215.3,228.696 1215.87,227.979 1216.43,229.491 1217,230.76 1217.57,231.95 1218.14,232.057 1218.71,232.174 1219.28,234.373 1219.84,235.205 1220.41,234.098 1220.98,233.91 1221.55,231.638 1222.12,232.594 1222.69,230.572 1223.25,231.629 1223.82,234.587 1224.39,234.451 1224.96,234.609 1225.53,236.523 1226.1,235.262 1226.66,235.028 1227.23,236.17 1227.8,236.059 1228.37,236.771 1228.94,237.436 1229.51,237.037 1230.07,234.877 1230.64,234.395 1231.21,234.469 1231.78,234.293 1232.35,233.02 1232.92,233.003 1233.48,232.861 1234.05,232.02 1234.62,233.404 1235.19,233.517 1235.76,235.374 1236.33,235.934 1236.89,235.747 1237.46,236.557 1238.03,238.461 1238.6,237.254 1239.17,238.09 1239.74,238.522 1240.3,235.977 1240.87,231.562 1241.44,231.301 1242.01,233.229 1242.58,234.192 1243.15,233.043 1243.71,234.048 1244.28,233.922 1244.85,233.896 1245.42,232.656 1245.99,232.433 1246.56,230.316 1247.12,230.413 1247.69,229.532 1248.26,230.572 1248.83,230.595 1249.4,229.661 1249.97,230.81 1250.53,229.766 1251.1,228.67 1251.67,227.647 1252.24,228.136 1252.81,227.371 1253.38,228.78 1253.94,229.973 1254.51,230.914 1255.08,231.002 1255.65,233.187 1256.22,234.07 1256.79,233.007 1257.35,232.029 1257.92,233.023 1258.49,234.058 1259.06,233.949 1259.63,232.796 1260.2,233.664 1260.76,236.457 1261.33,234.101 1261.9,235.001 1262.47,234.831 1263.04,235.639 1263.61,237.407 1264.18,239.178 1264.74,238.628 1265.31,238.074 1265.88,234.743 1266.45,233.677 1267.02,233.29 1267.59,233.048 1268.15,231.89 1268.72,229.784 1269.29,228.855 1269.86,229.059 1270.43,227.163 1271,227.538 1271.56,227.99 1272.13,229.281 1272.7,227.66 1273.27,225.989 1273.84,225.591 1274.41,228.242 1274.97,229.752 1275.54,231.011 1276.11,227.974 1276.68,227.262 1277.25,223.572 1277.82,225.348 1278.38,223.882 1278.95,222.504 1279.52,223.363 1280.09,224.197 1280.66,224.8 1281.23,224.598 1281.79,225.297 1282.36,226.643 1282.93,228.235 1283.5,229.898 1284.07,230.341 1284.64,231.502 1285.2,232.783 1285.77,231.657 1286.34,234.746 1286.91,233.727 1287.48,233.657 1288.05,232.932 1288.61,233.228 1289.18,233.338 1289.75,236.47 1290.32,238.335 1290.89,236.974 1291.46,236.704 1292.02,236.611 1292.59,236.36 1293.16,234.203 1293.73,231.219 1294.3,235.366 1294.87,236.267 1295.43,236.299 1296,237.383 1296.57,236.143 1297.14,235.074 1297.71,232.794 1298.28,233.956 1298.84,232.965 1299.41,232.909 1299.98,232.061 1300.55,233.231 1301.12,235.374 1301.69,236.157 1302.25,237.81 1302.82,237.298 1303.39,237.162 1303.96,237.837 1304.53,236.538 1305.1,238.148 1305.66,239.715 1306.23,238.355 1306.8,238.105 1307.37,237.788 1307.94,238.421 1308.51,236.926 1309.07,237.535 1309.64,236.219 1310.21,235.883 1310.78,234.669 1311.35,233.483 1311.92,234.231 1312.48,234.42 1313.05,233.155 1313.62,232.953 1314.19,232.067 1314.76,231.062 1315.33,229.895 1315.89,232.139 1316.46,233.092 1317.03,235.01 1317.6,234.581 1318.17,234.554 1318.74,234.501 1319.3,235.484 1319.87,236.484 1320.44,236.349 1321.01,236.794 1321.58,237.398 1322.15,237.123 1322.71,236.622 1323.28,236.533 1323.85,236.235 1324.42,234.779 1324.99,234.721 1325.56,235.498 1326.12,237.426 1326.69,235.019 1327.26,232.556 1327.83,232.251 1328.4,232.233 1328.97,232.118 1329.53,234.921 1330.1,234.621 1330.67,235.531 1331.24,234.368 1331.81,233.082 1332.38,231.81 1332.94,231.513 1333.51,232.704 1334.08,234.91 1334.65,233.705 1335.22,233.811 1335.79,235.486 1336.36,234.018 1336.92,232.757 1337.49,232.765 1338.06,233.781 1338.63,237.578 1339.2,237.066 1339.77,235.529 1340.33,235.397 1340.9,235.009 1341.47,231.681 1342.04,230.687 1342.61,229.788 1343.18,231.853 1343.74,230.777 1344.31,231.075 1344.88,231.035 1345.45,230.012 1346.02,230.048 1346.59,230.178 1347.15,231.357 1347.72,231.307 1348.29,233.36 1348.86,234.327 1349.43,234.002 1350,232.544 1350.56,231.59 1351.13,229.391 1351.7,229.673 1352.27,230.965 1352.84,230.92 1353.41,232.125 1353.97,230.871 1354.54,229.813 1355.11,229.01 1355.68,230.369 1356.25,230.549 1356.82,228.366 1357.38,227.569 1357.95,228.927 1358.52,228.127 1359.09,227.483 1359.66,226.827 1360.23,228.224 1360.79,230.506 1361.36,228.505 1361.93,229.719 1362.5,226.641 1363.07,227.036 1363.64,227.498 1364.2,227.965 1364.77,230.358 1365.34,229.601 1365.91,229.966 1366.48,229.187 1367.05,228.593 1367.61,229.866 1368.18,231.303 1368.75,233.527 1369.32,231.488 1369.89,231.677 1370.46,232.953 1371.02,231.763 1371.59,230.549 1372.16,231.885 1372.73,230.876 1373.3,226.986 1373.87,226.315 1374.43,227.625 1375,229.086 1375.57,230.295 1376.14,229.512 1376.71,229.989 1377.28,230.5 1377.84,229.69 1378.41,230.888 1378.98,230.309 1379.55,231.733 1380.12,230.943 1380.69,231.146 1381.25,230.345 1381.82,229.718 1382.39,228.735 1382.96,229.187 1383.53,229.7 1384.1,230.006 1384.66,228.372 1385.23,228.901 1385.8,230.471 1386.37,229.636 1386.94,231.181 1387.51,232.46 1388.07,231.547 1388.64,230.898 1389.21,231.077 1389.78,230.377 1390.35,230.522 1390.92,228.797 1391.48,228.061 1392.05,230.622 1392.62,230.766 1393.19,230.129 1393.76,230.36 1394.33,229.934 1394.89,233.451 1395.46,235.702 1396.03,237.852 1396.6,238.869 1397.17,238.42 1397.74,237.225 1398.3,237.117 1398.87,237.958 1399.44,238.049 1400.01,239.966 1400.58,239.393 1401.15,237.941 1401.71,239.785 1402.28,239.234 1402.85,242.02 1403.42,241.075 1403.99,241.611 1404.56,239.799 1405.13,239.317 1405.69,236.916 1406.26,237.694 1406.83,235.339 1407.4,237.447 1407.97,237.081 1408.54,237.923 1409.1,237.482 1409.67,236.134 1410.24,237.082 1410.81,236.711 1411.38,238.626 1411.95,237.186 1412.51,236.811 1413.08,234.426 1413.65,234.309 1414.22,233 1414.79,235.048 1415.36,236.787 1415.92,236.635 1416.49,240.329 1417.06,240.78 1417.63,240.416 1418.2,240.775 1418.77,240.09 1419.33,239.388 1419.9,239.005 1420.47,238.266 1421.04,237.841 1421.61,235.285 1422.18,232.883 1422.74,232.661 1423.31,234.495 1423.88,233.353 1424.45,231.155 1425.02,231.18 1425.59,229.152 1426.15,230.324 1426.72,229.439 1427.29,227.424 1427.86,225.619 1428.43,225.049 1429,225.3 1429.56,224.858 1430.13,225.437 1430.7,225.801 1431.27,229.36 1431.84,229.431 1432.41,228.687 1432.97,230.168 1433.54,230.208 1434.11,228.222 1434.68,228.741 1435.25,231.079 1435.82,231.306 1436.38,231.496 1436.95,231.885 1437.52,232.967 1438.09,231.997 1438.66,231.975 1439.23,229.983 1439.79,232.088 1440.36,232.339 1440.93,232.213 1441.5,231.321 1442.07,231.47 1442.64,231.528 1443.2,229.766 1443.77,229.085 1444.34,228.279 1444.91,227.762 1445.48,228.221 1446.05,227.628 1446.61,227.096 1447.18,229.651 1447.75,231.228 1448.32,229.587 1448.89,229.71 1449.46,229.074 1450.02,231.438 1450.59,232.777 1451.16,231.765 1451.73,230.813 1452.3,229.153 1452.87,231.765 1453.43,231.726 1454,230.658 1454.57,232.106 1455.14,231.252 1455.71,232.534 1456.28,232.691 1456.84,231.896 1457.41,230.905 1457.98,232.174 1458.55,233.452 1459.12,233.409 1459.69,233.623 1460.25,233.683 1460.82,235.663 1461.39,237.714 1461.96,238.672 1462.53,238.521 1463.1,240.288 1463.66,240.732 1464.23,240.078 1464.8,238.388 1465.37,238.167 1465.94,236.905 1466.51,233.433 1467.07,234.549 1467.64,234.478 1468.21,234.233 1468.78,235.205 1469.35,237.102 1469.92,238.879 1470.48,238.514 1471.05,237.081 1471.62,235.618 1472.19,234.52 1472.76,233.351 1473.33,233.499 1473.89,232.556 1474.46,232.395 1475.03,233.549 1475.6,235.508 1476.17,236.317 1476.74,236.034 1477.31,235.741 1477.87,238.588 1478.44,238.285 1479.01,238.885 1479.58,239.615 1480.15,237.804 1480.72,237.619 1481.28,237.154 1481.85,235.592 1482.42,231.268 1482.99,232.261 1483.56,232.214 1484.13,233.384 1484.69,235.301 1485.26,235.051 1485.83,233.838 1486.4,235.55 1486.97,235.23 1487.54,233.794 1488.1,231.693 1488.67,230.708 1489.24,231.874 1489.81,231.811 1490.38,230.639 1490.95,230.608 1491.51,230.704 1492.08,230.622 1492.65,230.831 1493.22,228.837 1493.79,229.024 1494.36,228.196 1494.92,228.588 1495.49,229.734 1496.06,227.733 1496.63,227.093 1497.2,227.554 1497.77,230.027 1498.33,232.332 1498.9,233.47 1499.47,232.436 1500.04,235.608 1500.61,235.485 1501.18,236.119 1501.74,234.882 1502.31,235.816 1502.88,233.506 1503.45,235.567 1504.02,233.264 1504.59,232.157 1505.15,231.267 1505.72,232.476 1506.29,232.63 1506.86,231.737 1507.43,231.669 1508,231.961 1508.56,230.988 1509.13,233.105 1509.7,233.184 1510.27,233.088 1510.84,232.064 1511.41,229.829 1511.97,230.008 1512.54,230.256 1513.11,229.549 1513.68,231.742 1514.25,233.853 1514.82,232.655 1515.38,233.725 1515.95,234.556 1516.52,233.262 1517.09,232.162 1517.66,231.052 1518.23,232.228 1518.79,233.383 1519.36,232.428 1519.93,231.7 1520.5,230.659 1521.07,229.72 1521.64,229.906 1522.2,233.058 1522.77,232.011 1523.34,231.959 1523.91,232.094 1524.48,233.839 1525.05,234.935 1525.61,234.388 1526.18,232.03 1526.75,230.018 1527.32,232.319 1527.89,230.288 1528.46,228.508 1529.02,228.706 1529.59,228.939 1530.16,229.229 1530.73,229.693 1531.3,228.818 1531.87,230.167 1532.43,231.442 1533,230.749 1533.57,231.041 1534.14,232.345 1534.71,233.425 1535.28,232.469 1535.84,232.513 1536.41,231.534 1536.98,232.647 1537.55,233.63 1538.12,232.58 1538.69,231.671 1539.25,233.001 1539.82,230.961 1540.39,231.197 1540.96,231.168 1541.53,230.174 1542.1,229.398 1542.66,229.667 1543.23,229.807 1543.8,229.144 1544.37,228.25 1544.94,228.707 1545.51,230.012 1546.08,230.267 1546.64,230.664 1547.21,230.968 1547.78,231.199 1548.35,232.366 1548.92,228.504 1549.49,227.998 1550.05,230.454 1550.62,230.74 1551.19,232.071 1551.76,232.214 1552.33,233.265 1552.9,234.269 1553.46,236.099 1554.03,236.079 1554.6,238.139 1555.17,235.849 1555.74,237.79 1556.31,237.414 1556.87,237.113 1557.44,237.86 1558.01,237.536 1558.58,238.604 1559.15,240.441 1559.72,239.208 1560.28,240.884 1560.85,238.397 1561.42,238.155 1561.99,235.932 1562.56,236.71 1563.13,234.517 1563.69,235.48 1564.26,235.376 1564.83,234.176 1565.4,233.121 1565.97,233.069 1566.54,233.084 1567.1,231.952 1567.67,234.121 1568.24,235.949 1568.81,235.742 1569.38,238.635 1569.95,239.003 1570.51,238.546 1571.08,237.335 1571.65,235.825 1572.22,234.646 1572.79,232.429 1573.36,233.29 1573.92,231.261 1574.49,231.378 1575.06,231.427 1575.63,228.247 1576.2,227.668 1576.77,227.042 1577.33,228.404 1577.9,228.673 1578.47,228.969 1579.04,229.265 1579.61,227.814 1580.18,225.096 1580.74,225.658 1581.31,228.18 1581.88,229.454 1582.45,230.664 1583.02,229.885 1583.59,227.224 1584.15,227.745 1584.72,228.087 1585.29,226.304 1585.86,223.647 1586.43,224.109 1587,224.717 1587.56,225.411 1588.13,228.136 1588.7,229.725 1589.27,229.146 1589.84,229.527 1590.41,230.992 1590.97,233.476 1591.54,233.599 1592.11,233.664 1592.68,233.966 1593.25,238.108 1593.82,236.921 1594.38,235.555 1594.95,234.502 1595.52,232.398 1596.09,232.33 1596.66,232.365 1597.23,232.449 1597.79,234.624 1598.36,234.747 1598.93,232.538 1599.5,233.702 1600.07,232.739 1600.64,232.715 1601.2,231.74 1601.77,230.892 1602.34,232.266 1602.91,231.392 1603.48,231.548 1604.05,231.707 1604.61,233.91 1605.18,237.934 1605.75,238.685 1606.32,237.681 1606.89,237.413 1607.46,237.153 1608.02,239.032 1608.59,239.825 1609.16,237.434 1609.73,237.365 1610.3,238.09 1610.87,237.781 1611.43,237.428 1612,237.12 1612.57,237.819 1613.14,238.42 1613.71,237.891 1614.28,237.653 1614.84,237.39 1615.41,237.864 1615.98,237.433 1616.55,239.225 1617.12,240.863 1617.69,240.103 1618.26,238.547 1618.82,237.209 1619.39,234.742 1619.96,232.576 1620.53,234.548 1621.1,234.118 1621.67,233.01 1622.23,232.847 1622.8,232.853 1623.37,231.806 1623.94,232.83 1624.51,233.971 1625.08,232.887 1625.64,235.536 1626.21,235.268 1626.78,236.085 1627.35,235.787 1627.92,235.456 1628.49,234.076 1629.05,232.969 1629.62,230.961 1630.19,229.886 1630.76,230.219 1631.33,232.496 1631.9,233.377 1632.46,231.002 1633.03,232.224 1633.6,231.134 1634.17,230.031 1634.74,230.039 1635.31,228.017 1635.87,229.398 1636.44,230.601 1637.01,231.819 1637.58,231.057 1638.15,232.308 1638.72,232.188 1639.28,233.324 1639.85,230.33 1640.42,232.366 1640.99,230.334 1641.56,230.436 1642.13,229.833 1642.69,229.101 1643.26,230.362 1643.83,227.763 1644.4,228.946 1644.97,231.29 1645.54,232.708 1646.1,234.859 1646.67,232.585 1647.24,231.627 1647.81,233.758 1648.38,235.437 1648.95,236.46 1649.51,234.216 1650.08,234.111 1650.65,232.143 1651.22,232.098 1651.79,232.274 1652.36,231.353 1652.92,232.579 1653.49,232.393 1654.06,232.343 1654.63,231.296 1655.2,232.701 1655.77,233.608 1656.33,232.716 1656.9,233.563 1657.47,233.549 1658.04,233.397 1658.61,232.337 1659.18,231.269 1659.74,230.614 1660.31,232.876 1660.88,232.757 1661.45,234.926 1662.02,234.766 1662.59,230.474 1663.15,231.711 1663.72,234.871 1664.29,231.455 1664.86,233.554 1665.43,232.529 1666,230.483 1666.56,228.562 1667.13,231.61 1667.7,232.645 1668.27,234.708 1668.84,234.572 1669.41,234.462 1669.97,235.366 1670.54,234.077 1671.11,234.844 1671.68,235.685 1672.25,235.583 1672.82,234.39 1673.38,234.406 1673.95,236.364 1674.52,238.129 1675.09,236.544 1675.66,235.099 1676.23,235.656 1676.79,234.249 1677.36,234.055 1677.93,233.932 1678.5,234.846 1679.07,235.446 1679.64,237.251 1680.2,234.795 1680.77,233.453 1681.34,233.262 1681.91,232.23 1682.48,232.314 1683.05,232.351 1683.61,232.626 1684.18,233.724 1684.75,233.588 1685.32,233.612 1685.89,233.758 1686.46,232.763 1687.02,234.741 1687.59,235.728 1688.16,237.435 1688.73,236.724 1689.3,237.57 1689.87,236.178 1690.44,235.845 1691,234.007 1691.57,233.923 1692.14,234.865 1692.71,234.507 1693.28,235.056 1693.85,234.724 1694.41,233.335 1694.98,233.341 1695.55,231.108 1696.12,232.309 1696.69,232.246 1697.26,229.265 1697.82,229.45 1698.39,231.631 1698.96,232.77 1699.53,234.906 1700.1,234.952 1700.67,235.749 1701.23,236.619 1701.8,235.36 1702.37,236.005 1702.94,233.78 1703.51,233.48 1704.08,231.26 1704.64,230.449 1705.21,229.558 1705.78,230.625 1706.35,228.636 1706.92,230.099 1707.49,230.304 1708.05,230.237 1708.62,230.418 1709.19,228.555 1709.76,227.997 1710.33,227.235 1710.9,226.644 1711.46,226.903 1712.03,227.015 1712.6,227.42 1713.17,227.75 1713.74,229.138 1714.31,229.517 1714.87,229.754 1715.44,227.805 1716.01,230.135 1716.58,231.294 1717.15,229.279 1717.72,231.629 1718.28,231.721 1718.85,231.712 1719.42,230.632 1719.99,232.826 1720.56,234.911 1721.13,234.951 1721.69,234.809 1722.26,233.721 1722.83,232.554 1723.4,232.579 1723.97,231.342 1724.54,232.433 1725.1,231.35 1725.67,229.371 1726.24,227.746 1726.81,227.034 1727.38,228.409 1727.95,227.759 1728.51,229.281 1729.08,231.54 1729.65,230.672 1730.22,228.631 1730.79,229.955 1731.36,229.256 1731.92,230.54 1732.49,229.526 1733.06,232.99 1733.63,233.108 1734.2,233.104 1734.77,232.203 1735.33,233.109 1735.9,233.078 1736.47,234.36 1737.04,235.402 1737.61,237.356 1738.18,237.131 1738.74,237.084 1739.31,235.81 1739.88,234.599 1740.45,234.526 1741.02,235.848 1741.59,234.813 1742.15,232.673 1742.72,234.607 1743.29,235.57 1743.86,236.423 1744.43,232.119 1745,229.219 1745.56,228.51 1746.13,229.961 1746.7,232.162 1747.27,232.277 1747.84,232.328 1748.41,232.247 1748.97,231.401 1749.54,233.563 1750.11,232.576 1750.68,232.585 1751.25,231.776 1751.82,229.794 1752.38,231.881 1752.95,231.052 1753.52,231.244 1754.09,231.632 1754.66,231.698 1755.23,230.722 1755.79,230.873 1756.36,231.136 1756.93,231.338 1757.5,229.581 1758.07,228.718 1758.64,231.163 1759.21,232.112 1759.77,232.541 1760.34,232.519 1760.91,234.744 1761.48,235.699 1762.05,233.687 1762.62,233.682 1763.18,233.673 1763.75,233.401 1764.32,236.399 1764.89,237.171 1765.46,235.727 1766.03,236.868 1766.59,236.441 1767.16,233.874 1767.73,232.726 1768.3,231.812 1768.87,231.14 1769.44,232.339 1770,234.46 1770.57,235.412 1771.14,236.309 1771.71,238.139 1772.28,236.915 1772.85,237.559 1773.41,237.098 1773.98,236.769 1774.55,237.469 1775.12,237.217 1775.69,236.911 1776.26,236.788 1776.82,235.507 1777.39,234.129 1777.96,235.04 1778.53,234.783 1779.1,236.722 1779.67,236.448 1780.23,234.211 1780.8,233.991 1781.37,233.766 1781.94,232.853 1782.51,232.856 1783.08,232.869 1783.64,231.706 1784.21,231.544 1784.78,232.629 1785.35,234.623 1785.92,235.51 1786.49,232.155 1787.05,233.177 1787.62,232.099 1788.19,230.087 1788.76,232.405 1789.33,231.253 1789.9,231.544 1790.46,232.743 1791.03,232.732 1791.6,230.784 1792.17,228.697 1792.74,230.023 1793.31,229.296 1793.87,231.847 1794.44,229.809 1795.01,230.035 1795.58,231.273 1796.15,231.192 1796.72,229.248 1797.28,228.334 1797.85,230.711 1798.42,231.628 1798.99,230.873 1799.56,228.987 1800.13,228.416 1800.69,229.86 1801.26,229.054 1801.83,228.344 1802.4,228.762 1802.97,229.849 1803.54,232.299 1804.1,230.393 1804.67,230.531 1805.24,230.74 1805.81,226.989 1806.38,228.56 1806.95,230.123 1807.51,229.304 1808.08,230.675 1808.65,230.615 1809.22,229.611 1809.79,229.873 1810.36,230.141 1810.92,229.261 1811.49,228.578 1812.06,229.114 1812.63,230.424 1813.2,230.724 1813.77,230.991 1814.33,231.025 1814.9,231.458 1815.47,231.538 1816.04,230.515 1816.61,228.732 1817.18,231.106 1817.74,233.376 1818.31,237.731 1818.88,238.586 1819.45,238.24 1820.02,238.968 1820.59,239.785 1821.15,240.66 1821.72,240.324 1822.29,243.962 1822.86,243.144 1823.43,242.429 1824,239.706 1824.56,239.414 1825.13,240.203 1825.7,238.676 1826.27,239.219 1826.84,237.844 1827.41,236.139 1827.97,235.741 1828.54,236.162 1829.11,235.811 1829.68,234.696 1830.25,230.336 1830.82,232.626 1831.39,233.5 1831.95,231.234 1832.52,231.342 1833.09,229.282 1833.66,229.381 1834.23,230.836 1834.8,231.948 1835.36,232.063 1835.93,232.112 1836.5,231.049 1837.07,232.024 1837.64,232.231 1838.21,232.432 1838.77,232.503 1839.34,233.316 1839.91,234.183 1840.48,231.18 1841.05,231.201 1841.62,231.213 1842.18,232.342 1842.75,233.517 1843.32,233.279 1843.89,234.513 1844.46,237.511 1845.03,236.115 1845.59,235.782 1846.16,234.572 1846.73,232.297 1847.3,233.379 1847.87,234.267 1848.44,233.314 1849,232.247 1849.57,232.274 1850.14,232.29 1850.71,232.639 1851.28,230.65 1851.85,231.71 1852.41,231.717 1852.98,229.767 1853.55,230.88 1854.12,233.008 1854.69,232.045 1855.26,232.059 1855.82,232.216 1856.39,231.018 1856.96,230.216 1857.53,230.408 1858.1,232.665 1858.67,232.751 1859.23,233.859 1859.8,234.807 1860.37,234.338 1860.94,233.116 1861.51,234.177 1862.08,234.082 1862.64,233.939 1863.21,233.71 1863.78,235.857 1864.35,233.547 1864.92,232.457 1865.49,230.294 1866.05,229.65 1866.62,230.842 1867.19,230.808 1867.76,230.871 1868.33,230.981 1868.9,230.236 1869.46,230.558 1870.03,230.617 1870.6,229.964 1871.17,232.426 1871.74,231.507 1872.31,230.781 1872.87,232.921 1873.44,234.195 1874.01,232.968 1874.58,235.13 1875.15,235.889 1875.72,238.721 1876.28,239.051 1876.85,238.625 1877.42,238.218 1877.99,237.826 1878.56,237.505 1879.13,237.213 1879.69,237.933 1880.26,235.584 1880.83,236.428 1881.4,235.172 1881.97,233.926 1882.54,231.623 1883.1,232.713 1883.67,232.628 1884.24,234.472 1884.81,236.599 1885.38,238.234 1885.95,237.769 1886.51,239.508 1887.08,237.839 1887.65,237.333 1888.22,237.984 1888.79,240.531 1889.36,240.929 1889.92,242.499 1890.49,240.915 1891.06,241.211 1891.63,241.599 1892.2,240.582 1892.77,240.961 1893.33,240.102 1893.9,239.416 1894.47,237.869 1895.04,235.308 1895.61,236.937 1896.18,236.402 1896.74,236.996 1897.31,236.502 1897.88,235.923 1898.45,235.493 1899.02,235.434 1899.59,234.091 1900.16,234.888 1900.72,232.713 1901.29,232.629 1901.86,231.367 1902.43,231.124 1903,230.99 1903.57,229.855 1904.13,231.036 1904.7,229.817 1905.27,229.921 1905.84,230.08 1906.41,229.042 1906.98,227.927 1907.54,227.164 1908.11,227.385 1908.68,226.894 1909.25,225.087 1909.82,226.498 1910.39,224.746 1910.95,225.17 1911.52,225.785 1912.09,227.259 1912.66,226.333 1913.23,223.657 1913.8,223.425 1914.36,223.175 1914.93,226.123 1915.5,228.497 1916.07,228.834 1916.64,230.15 1917.21,230.459 1917.77,229.572 1918.34,229.887 1918.91,229.923 1919.48,229.056 1920.05,229.205 1920.62,226.253 1921.18,226.968 1921.75,225.296 1922.32,225.798 1922.89,226.314 1923.46,227.765 1924.03,228.979 1924.59,229.467 1925.16,228.714 1925.73,229.219 1926.3,229.569 1926.87,228.88 1927.44,229.345 1928,228.606 1928.57,228.973 1929.14,229.259 1929.71,227.3 1930.28,229.06 1930.85,230.429 1931.41,230.667 1931.98,232.929 1932.55,233.074 1933.12,231.138 1933.69,230.321 1934.26,228.615 1934.82,229.159 1935.39,230.584 1935.96,231.898 1936.53,230.188 1937.1,232.295 1937.67,232.408 1938.23,233.515 1938.8,234.726 1939.37,234.706 1939.94,234.538 1940.51,235.401 1941.08,236.463 1941.64,235.106 1942.21,234.813 1942.78,232.761 1943.35,233.967 1943.92,234.882 1944.49,237.57 1945.05,237.188 1945.62,235.829 1946.19,234.651 1946.76,235.605 1947.33,234.525 1947.9,234.547 1948.46,232.579 1949.03,231.787 1949.6,231.809 1950.17,230.913 1950.74,232.247 1951.31,231.458 1951.87,232.698 1952.44,232.796 1953.01,233.866 1953.58,238.047 1954.15,237.741 1954.72,238.397 1955.28,237.388 1955.85,238.128 1956.42,237.562 1956.99,235.226 1957.56,232.952 1958.13,233.168 1958.69,233.251 1959.26,233.359 1959.83,233.324 1960.4,235.256 1960.97,236.221 1961.54,236.003 1962.1,235.95 1962.67,235.87 1963.24,236.72 1963.81,237.16 1964.38,237.806 1964.95,236.178 1965.51,236.984 1966.08,235.46 1966.65,233.111 1967.22,231.939 1967.79,231.052 1968.36,231.248 1968.92,230.218 1969.49,230.558 1970.06,229.896 1970.63,230.093 1971.2,230.243 1971.77,234.493 1972.34,234.622 1972.9,235.496 1973.47,233.104 1974.04,231.032 1974.61,231.861 1975.18,232.778 1975.75,231.67 1976.31,231.118 1976.88,231.407 1977.45,230.865 1978.02,229.774 1978.59,229.943 1979.16,232.093 1979.72,232.227 1980.29,232.325 1980.86,234.557 1981.43,233.4 1982,231.551 1982.57,230.934 1983.13,231.048 1983.7,231.207 1984.27,229.45 1984.84,228.738 1985.41,231.053 1985.98,232.308 1986.54,232.559 1987.11,231.419 1987.68,233.787 1988.25,236.768 1988.82,233.663 1989.39,230.645 1989.95,229.828 1990.52,231.276 1991.09,232.5 1991.66,233.517 1992.23,234.296 1992.8,231.976 1993.36,232.262 1993.93,231.37 1994.5,230.433 1995.07,231.959 1995.64,233.189 1996.21,232.287 1996.77,233.513 1997.34,233.659 1997.91,231.456 1998.48,231.814 1999.05,232.9 1999.62,229.924 2000.18,230.202 2000.75,232.461 2001.32,233.87 2001.89,232.757 2002.46,232.86 2003.03,232.954 2003.59,234.996 2004.16,235.855 2004.73,235.743 2005.3,236.905 2005.87,238.755 2006.44,238.236 2007,237.085 2007.57,235.701 2008.14,236.541 2008.71,233.257 2009.28,233.075 2009.85,231.95 2010.41,230.024 2010.98,227.22 2011.55,227.498 2012.12,226.911 2012.69,227.245 2013.26,226.735 2013.82,225.14 2014.39,229.814 2014.96,231.098 2015.53,231.116 2016.1,232.291 2016.67,232.402 2017.23,234.481 2017.8,234.604 2018.37,234.557 2018.94,233.578 2019.51,232.573 2020.08,235.369 2020.64,235.161 2021.21,235.957 2021.78,234.876 2022.35,235.597 2022.92,237.58 2023.49,236.409 2024.05,235.248 2024.62,235.047 2025.19,235.853 2025.76,237.777 2026.33,240.59 2026.9,238.975 2027.46,239.576 2028.03,239.071 2028.6,237.701 2029.17,239.34 2029.74,237.651 2030.31,237.319 2030.87,237.931 2031.44,241.541 2032.01,239.898 2032.58,241.342 2033.15,240.742 2033.72,241.073 2034.28,241.376 2034.85,242.903 2035.42,242.975 2035.99,242.202 2036.56,241.507 2037.13,240.76 2037.69,239.916 2038.26,239.09 2038.83,240.526 2039.4,238.716 2039.97,238.309 2040.54,238.703 2041.11,237.057 2041.67,236.708 2042.24,235.425 2042.81,233.903 2043.38,234.577 2043.95,233.193 2044.52,233.757 2045.08,233.56 2045.65,234.334 2046.22,232.009 2046.79,230.756 2047.36,231.749 2047.93,233.582 2048.49,232.137 2049.06,234.073 2049.63,232.738 2050.2,234.53 2050.77,234.395 2051.34,234.929 2051.9,233.327 2052.47,233.78 2053.04,233.479 2053.61,233.021 2054.18,231.667 2054.75,230.515 2055.31,232.447 2055.88,233.31 2056.45,233.203 2057.02,233.029 2057.59,231.86 2058.16,230.842 2058.72,229.789 2059.29,230.956 2059.86,230.913 2060.43,229.894 2061,231.017 2061.57,227.719 2062.13,223.857 2062.7,221.528 2063.27,222.237 2063.84,222.735 2064.41,220.323 2064.98,220.147 2065.54,219.95 2066.11,219.895 2066.68,220.861 2067.25,222.744 2067.82,223.381 2068.39,222.002 2068.95,222.654 2069.52,224.627 2070.09,226.307 2070.66,227.734 2071.23,228.139 2071.8,227.584 2072.36,225.033 2072.93,223.703 2073.5,225.507 2074.07,225.099 2074.64,225.831 2075.21,228.337 2075.77,227.785 2076.34,229.267 2076.91,230.699 2077.48,229.848 2078.05,231.206 2078.62,230.529 2079.18,228.787 2079.75,231.134 2080.32,230.446 2080.89,230.651 2081.46,232.973 2082.03,232.147 2082.59,232.386 2083.16,232.703 2083.73,232.671 2084.3,233.842 2084.87,232.901 2085.44,233.114 2086,234.149 2086.57,234.252 2087.14,232.206 2087.71,230.313 2088.28,229.606 2088.85,230.739 2089.41,232.042 2089.98,234.104 2090.55,234.052 2091.12,234.816 2091.69,236.886 2092.26,238.814 2092.82,239.407 2093.39,239.018 2093.96,237.775 2094.53,237.483 2095.1,235.932 2095.67,236.602 2096.23,238.364 2096.8,237.895 2097.37,238.804 2097.94,240.3 2098.51,239.699 2099.08,236.975 2099.64,234.85 2100.21,234.689 2100.78,234.644 2101.35,235.427 2101.92,236.311 2102.49,236.171 2103.05,236.703 2103.62,236.271 2104.19,238.109 2104.76,236.806 2105.33,236.351 2105.9,234.899 2106.46,232.564 2107.03,234.555 2107.6,234.692 2108.17,232.515 2108.74,231.483 2109.31,230.285 2109.87,228.399 2110.44,227.508 2111.01,227.665 2111.58,226.928 2112.15,227.38 2112.72,226.73 2113.29,227.044 2113.85,227.319 2114.42,230.795 2114.99,229.923 2115.56,231.234 2116.13,231.407 2116.7,231.554 2117.26,231.575 2117.83,232.595 2118.4,233.647 2118.97,232.562 2119.54,230.782 2120.11,230.872 2120.67,230.006 2121.24,232.18 2121.81,234.233 2122.38,232.336 2122.95,232.11 2123.52,232.014 2124.08,232.26 2124.65,232.328 2125.22,232.303 2125.79,232.191 2126.36,232.02 2126.93,230.123 2127.49,231.589 2128.06,232.046 2128.63,235.186 2129.2,234.052 2129.77,236.058 2130.34,235.965 2130.9,234.844 2131.47,235.926 2132.04,235.6 2132.61,232.505 2133.18,231.645 2133.75,230.941 2134.31,231.198 2134.88,232.521 2135.45,231.643 2136.02,231.866 2136.59,234.102 2137.16,234.849 2137.72,235.725 2138.29,237.753 2138.86,237.481 2139.43,238.229 2140,232.805 2140.57,231.02 2141.13,232.231 2141.7,234.484 2142.27,231.412 2142.84,232.668 2143.41,234.748 2143.98,233.515 2144.54,232.51 2145.11,235.583 2145.68,236.443 2146.25,236.113 2146.82,235.914 2147.39,238.948 2147.95,235.51 2148.52,235.405 2149.09,233.326 2149.66,234.247 2150.23,232.761 2150.8,232.599 2151.36,232.629 2151.93,232.486 2152.5,232.336 2153.07,231.308 2153.64,234.322 2154.21,233.149 2154.77,232.023 2155.34,230.165 2155.91,231.416 2156.48,231.648 2157.05,227.899 2157.62,228.333 2158.18,229.597 2158.75,229.792 2159.32,229.132 2159.89,229.477 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip960)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip960)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip960)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip960)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.026\n  with uncertainty of ± 0.002346169486530622\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01255 ± (0.00201175, 0.00215037) (MC)\n  95% confidence interval: [-4.01664, -4.00865] (MC)\n  linear error propagation: -4.01269 ± 0.00208244\n  |δ_y| = |0.00150516| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012545667036145, val_l = 0.004095880803712149, val_u = 0.0038989066720711563)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip990\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip991\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip992\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.44 2211.02,1142.44 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,971.636 2211.02,971.636 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,800.83 2211.02,800.83 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,630.024 2211.02,630.024 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,459.218 2211.02,459.218 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,288.412 2211.02,288.412 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.44 365.751,1142.44 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,971.636 365.751,971.636 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,800.83 365.751,800.83 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,630.024 365.751,630.024 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,459.218 365.751,459.218 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,288.412 365.751,288.412 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M298.909 1128.24 Q295.298 1128.24 293.469 1131.81 Q291.664 1135.35 291.664 1142.48 Q291.664 1149.58 293.469 1153.15 Q295.298 1156.69 298.909 1156.69 Q302.543 1156.69 304.349 1153.15 Q306.177 1149.58 306.177 1142.48 Q306.177 1135.35 304.349 1131.81 Q302.543 1128.24 298.909 1128.24 M298.909 1124.54 Q304.719 1124.54 307.775 1129.14 Q310.853 1133.73 310.853 1142.48 Q310.853 1151.2 307.775 1155.81 Q304.719 1160.39 298.909 1160.39 Q293.099 1160.39 290.02 1155.81 Q286.964 1151.2 286.964 1142.48 Q286.964 1133.73 290.02 1129.14 Q293.099 1124.54 298.909 1124.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M259.557 984.981 L267.196 984.981 L267.196 958.615 L258.886 960.282 L258.886 956.023 L267.15 954.356 L271.826 954.356 L271.826 984.981 L279.465 984.981 L279.465 988.916 L259.557 988.916 L259.557 984.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M298.909 957.435 Q295.298 957.435 293.469 961 Q291.664 964.541 291.664 971.671 Q291.664 978.777 293.469 982.342 Q295.298 985.884 298.909 985.884 Q302.543 985.884 304.349 982.342 Q306.177 978.777 306.177 971.671 Q306.177 964.541 304.349 961 Q302.543 957.435 298.909 957.435 M298.909 953.731 Q304.719 953.731 307.775 958.338 Q310.853 962.921 310.853 971.671 Q310.853 980.398 307.775 985.004 Q304.719 989.588 298.909 989.588 Q293.099 989.588 290.02 985.004 Q286.964 980.398 286.964 971.671 Q286.964 962.921 290.02 958.338 Q293.099 953.731 298.909 953.731 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M262.775 814.175 L279.094 814.175 L279.094 818.11 L257.15 818.11 L257.15 814.175 Q259.812 811.42 264.395 806.791 Q269.002 802.138 270.182 800.795 Q272.428 798.272 273.307 796.536 Q274.21 794.777 274.21 793.087 Q274.21 790.332 272.266 788.596 Q270.344 786.86 267.242 786.86 Q265.043 786.86 262.59 787.624 Q260.159 788.388 257.381 789.939 L257.381 785.217 Q260.205 784.083 262.659 783.504 Q265.113 782.925 267.15 782.925 Q272.52 782.925 275.715 785.61 Q278.909 788.295 278.909 792.786 Q278.909 794.916 278.099 796.837 Q277.312 798.735 275.205 801.328 Q274.627 801.999 271.525 805.217 Q268.423 808.411 262.775 814.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M298.909 786.629 Q295.298 786.629 293.469 790.194 Q291.664 793.735 291.664 800.865 Q291.664 807.971 293.469 811.536 Q295.298 815.078 298.909 815.078 Q302.543 815.078 304.349 811.536 Q306.177 807.971 306.177 800.865 Q306.177 793.735 304.349 790.194 Q302.543 786.629 298.909 786.629 M298.909 782.925 Q304.719 782.925 307.775 787.532 Q310.853 792.115 310.853 800.865 Q310.853 809.592 307.775 814.198 Q304.719 818.781 298.909 818.781 Q293.099 818.781 290.02 814.198 Q286.964 809.592 286.964 800.865 Q286.964 792.115 290.02 787.532 Q293.099 782.925 298.909 782.925 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M272.914 628.67 Q276.27 629.387 278.145 631.656 Q280.043 633.924 280.043 637.258 Q280.043 642.373 276.525 645.174 Q273.006 647.975 266.525 647.975 Q264.349 647.975 262.034 647.535 Q259.742 647.119 257.289 646.262 L257.289 641.748 Q259.233 642.883 261.548 643.461 Q263.863 644.04 266.386 644.04 Q270.784 644.04 273.076 642.304 Q275.39 640.568 275.39 637.258 Q275.39 634.202 273.238 632.489 Q271.108 630.753 267.289 630.753 L263.261 630.753 L263.261 626.911 L267.474 626.911 Q270.923 626.911 272.752 625.545 Q274.58 624.156 274.58 621.563 Q274.58 618.901 272.682 617.489 Q270.807 616.054 267.289 616.054 Q265.367 616.054 263.168 616.471 Q260.969 616.887 258.33 617.767 L258.33 613.6 Q260.992 612.86 263.307 612.489 Q265.645 612.119 267.705 612.119 Q273.029 612.119 276.131 614.55 Q279.233 616.957 279.233 621.077 Q279.233 623.948 277.59 625.938 Q275.946 627.906 272.914 628.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M298.909 615.823 Q295.298 615.823 293.469 619.387 Q291.664 622.929 291.664 630.059 Q291.664 637.165 293.469 640.73 Q295.298 644.272 298.909 644.272 Q302.543 644.272 304.349 640.73 Q306.177 637.165 306.177 630.059 Q306.177 622.929 304.349 619.387 Q302.543 615.823 298.909 615.823 M298.909 612.119 Q304.719 612.119 307.775 616.725 Q310.853 621.309 310.853 630.059 Q310.853 638.785 307.775 643.392 Q304.719 647.975 298.909 647.975 Q293.099 647.975 290.02 643.392 Q286.964 638.785 286.964 630.059 Q286.964 621.309 290.02 616.725 Q293.099 612.119 298.909 612.119 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M271.594 446.012 L259.789 464.461 L271.594 464.461 L271.594 446.012 M270.367 441.938 L276.247 441.938 L276.247 464.461 L281.177 464.461 L281.177 468.35 L276.247 468.35 L276.247 476.498 L271.594 476.498 L271.594 468.35 L255.992 468.35 L255.992 463.836 L270.367 441.938 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M298.909 445.017 Q295.298 445.017 293.469 448.581 Q291.664 452.123 291.664 459.253 Q291.664 466.359 293.469 469.924 Q295.298 473.465 298.909 473.465 Q302.543 473.465 304.349 469.924 Q306.177 466.359 306.177 459.253 Q306.177 452.123 304.349 448.581 Q302.543 445.017 298.909 445.017 M298.909 441.313 Q304.719 441.313 307.775 445.919 Q310.853 450.503 310.853 459.253 Q310.853 467.979 307.775 472.586 Q304.719 477.169 298.909 477.169 Q293.099 477.169 290.02 472.586 Q286.964 467.979 286.964 459.253 Q286.964 450.503 290.02 445.919 Q293.099 441.313 298.909 441.313 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M258.793 271.132 L277.15 271.132 L277.15 275.067 L263.076 275.067 L263.076 283.539 Q264.094 283.192 265.113 283.03 Q266.131 282.845 267.15 282.845 Q272.937 282.845 276.316 286.016 Q279.696 289.187 279.696 294.604 Q279.696 300.182 276.224 303.284 Q272.752 306.363 266.432 306.363 Q264.256 306.363 261.988 305.993 Q259.742 305.622 257.335 304.882 L257.335 300.182 Q259.418 301.317 261.641 301.872 Q263.863 302.428 266.34 302.428 Q270.344 302.428 272.682 300.321 Q275.02 298.215 275.02 294.604 Q275.02 290.993 272.682 288.886 Q270.344 286.78 266.34 286.78 Q264.465 286.78 262.59 287.196 Q260.738 287.613 258.793 288.493 L258.793 271.132 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M298.909 274.21 Q295.298 274.21 293.469 277.775 Q291.664 281.317 291.664 288.446 Q291.664 295.553 293.469 299.118 Q295.298 302.659 298.909 302.659 Q302.543 302.659 304.349 299.118 Q306.177 295.553 306.177 288.446 Q306.177 281.317 304.349 277.775 Q302.543 274.21 298.909 274.21 M298.909 270.507 Q304.719 270.507 307.775 275.113 Q310.853 279.696 310.853 288.446 Q310.853 297.173 307.775 301.78 Q304.719 306.363 298.909 306.363 Q293.099 306.363 290.02 301.78 Q286.964 297.173 286.964 288.446 Q286.964 279.696 290.02 275.113 Q293.099 270.507 298.909 270.507 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1149.43 400.199,1027 400.786,912.391 401.372,809.339 401.958,714.936 402.545,630.393 403.131,553.292 403.718,585.961 404.304,609.306 404.891,537.282 405.477,558.814 406.063,497.874 406.65,442.679 407.236,463.615 407.823,416.836 408.409,376.879 408.995,397.826 409.582,358.78 410.168,325.341 410.755,295.575 411.341,268.334 411.927,290.962 412.514,268.591 413.1,288.626 413.687,271.475 414.273,256.152 414.86,243.855 415.446,233.924 416.032,225.896 416.619,219.895 417.205,241.656 417.792,238.156 418.378,260.514 418.964,259.633 419.551,279.351 420.137,279.94 420.724,299.407 421.31,302.608 421.896,323.022 422.483,327.894 423.069,347.495 423.656,381.521 424.242,425.718 424.829,432.709 425.415,441.024 426.001,459.517 426.588,478.195 427.174,505.549 427.761,521.592 428.347,547.36 428.933,563.553 429.52,578.276 430.106,585.014 430.693,599.321 431.279,606.153 431.865,620.212 432.452,627.762 433.038,635.724 433.625,649.837 434.211,663.558 434.798,677.399 435.384,691.147 435.97,709.387 436.557,726.546 437.143,733.93 437.73,741.347 438.316,753.569 438.902,765.432 439.489,772.762 440.075,780.541 440.662,791.925 441.248,799.81 441.835,822.541 442.421,836.869 443.007,850.529 443.594,863.615 444.18,873.159 444.767,882.166 445.353,888.028 445.939,900.162 446.526,912.153 447.112,926.546 447.699,934.863 448.285,943.094 448.871,948.245 449.458,958.776 450.044,966.476 450.631,974.126 451.217,981.327 451.804,995.874 452.39,1005.2 452.976,1009.26 453.563,1020.75 454.149,1027.56 454.736,1034 455.322,1042.97 455.908,1053.68 456.495,1061.62 457.081,1065.15 457.668,1068.66 458.254,1075.9 458.84,1085.7 459.427,1097.06 460.013,1103.48 460.6,1107.93 461.186,1110.22 461.773,1112.5 462.359,1116.77 462.945,1118.94 463.532,1130.7 464.118,1134.7 464.705,1138.31 465.291,1142.09 465.877,1144.01 466.464,1151.58 467.05,1154.93 467.637,1156.58 468.223,1159.96 468.809,1166.52 469.396,1169.44 469.982,1175.99 470.569,1178.52 471.155,1177.24 471.742,1181.5 472.328,1182.25 472.914,1186.38 473.501,1188.38 474.087,1194.19 474.674,1194.26 475.26,1196.14 475.846,1196.7 476.433,1198.41 477.019,1203.43 477.606,1205.41 478.192,1205.59 478.778,1205.76 479.365,1207.65 479.951,1207.71 480.538,1211.41 481.124,1211.12 481.711,1212.52 482.297,1212.64 482.883,1215.82 483.47,1215.79 484.056,1217.22 484.643,1217.45 485.229,1220.78 485.815,1220.28 486.402,1225.01 486.988,1226.07 487.575,1227.42 488.161,1229.81 488.748,1230.7 489.334,1231.67 489.92,1232.78 490.507,1233.51 491.093,1231.34 491.68,1229.42 492.266,1230.43 492.852,1235.99 493.439,1235.25 494.025,1234.77 494.612,1235.71 495.198,1233.73 495.784,1233.11 496.371,1230.95 496.957,1230.64 497.544,1233.22 498.13,1229.88 498.717,1229.93 499.303,1229.51 499.889,1229.56 500.476,1229.62 501.062,1231 501.649,1232.26 502.235,1236.16 502.821,1233.95 503.408,1232.24 503.994,1230.75 504.581,1233.7 505.167,1233.75 505.753,1233.61 506.34,1233.47 506.926,1234.87 507.513,1236.19 508.099,1238.79 508.686,1238.38 509.272,1240.79 509.858,1238.91 510.445,1238.59 511.031,1235.21 511.618,1240.63 512.204,1241.6 512.79,1244.18 513.377,1246.44 513.963,1247.06 514.55,1250.53 515.136,1249.47 515.722,1250.08 516.309,1245.92 516.895,1243.66 517.482,1240.18 518.068,1239.53 518.655,1239.05 519.241,1243.14 519.827,1243.87 520.414,1243.39 521,1245.31 521.587,1243.06 522.173,1242.26 522.759,1241.91 523.346,1239.85 523.932,1237.85 524.519,1238.68 525.105,1238.43 525.691,1239.82 526.278,1239.31 526.864,1242.03 527.451,1242.88 528.037,1242.32 528.624,1243.28 529.21,1242.69 529.796,1244.89 530.383,1241.66 530.969,1238.16 531.556,1237.88 532.142,1239.23 532.728,1235.89 533.315,1237.54 533.901,1238.62 534.488,1241.3 535.074,1242.08 535.661,1244.41 536.247,1245.34 536.833,1244.44 537.42,1242.16 538.006,1242.94 538.593,1243.52 539.179,1244.32 539.765,1243.91 540.352,1243.41 540.938,1244.17 541.525,1241.99 542.111,1242.58 542.697,1244.77 543.284,1244 543.87,1243.36 544.457,1244.22 545.043,1237.73 545.63,1237.22 546.216,1237.88 546.802,1237.72 547.389,1237.27 547.975,1235.36 548.562,1236.26 549.148,1236.02 549.734,1239.75 550.321,1240.52 550.907,1237.41 551.494,1237.08 552.08,1236.59 552.666,1234.65 553.253,1235.83 553.839,1236.98 554.426,1239.15 555.012,1238.4 555.599,1239.14 556.185,1241.19 556.771,1240.51 557.358,1241.05 557.944,1241.51 558.531,1240.97 559.117,1240.5 559.703,1244.26 560.29,1242.13 560.876,1242.8 561.463,1239.26 562.049,1238.79 562.635,1240.64 563.222,1242.58 563.808,1243.06 564.395,1240.93 564.981,1239.99 565.568,1242.3 566.154,1239.96 566.74,1239.43 567.327,1237.32 567.913,1236.72 568.5,1240.08 569.086,1238.29 569.672,1236.29 570.259,1237.01 570.845,1239.19 571.432,1238.73 572.018,1239.22 572.605,1237.23 573.191,1239.44 573.777,1238.61 574.364,1237.93 574.95,1235.92 575.537,1235.61 576.123,1236.36 576.709,1235.92 577.296,1235.43 577.882,1236.12 578.469,1239.63 579.055,1236.11 579.641,1238.24 580.228,1235.9 580.814,1238.06 581.401,1238.54 581.987,1236.55 582.574,1237.12 583.16,1234 583.746,1230.84 584.333,1233.36 584.919,1232.82 585.506,1230.87 586.092,1229.34 586.678,1226.37 587.265,1227.48 587.851,1227.03 588.438,1228.47 589.024,1227.17 589.61,1225.49 590.197,1226.91 590.783,1221.36 591.37,1222.94 591.956,1221.54 592.543,1224.38 593.129,1226 593.715,1227.37 594.302,1225.8 594.888,1225.71 595.475,1225.78 596.061,1224.41 596.647,1227.14 597.234,1228.49 597.82,1228.41 598.407,1227.98 598.993,1230.38 599.579,1229.67 600.166,1230.43 600.752,1225.8 601.339,1225.43 601.925,1225.27 602.512,1223.98 603.098,1224.03 603.684,1216.76 604.271,1222.72 604.857,1225.34 605.444,1224.99 606.03,1223.25 606.616,1221.73 607.203,1220.49 607.789,1218.01 608.376,1215.57 608.962,1215.8 609.548,1219.06 610.135,1219.18 610.721,1219.5 611.308,1222.53 611.894,1225.17 612.481,1226.62 613.067,1227.94 613.653,1226.22 614.24,1223.03 614.826,1223.01 615.413,1221.41 615.999,1222.71 616.585,1222.57 617.172,1221.02 617.758,1221.16 618.345,1219.72 618.931,1219.6 619.518,1221.28 620.104,1221.57 620.69,1218.73 621.277,1217.51 621.863,1217.66 622.45,1215.09 623.036,1218.53 623.622,1218.64 624.209,1219.03 624.795,1220.57 625.382,1221.14 625.968,1219.67 626.554,1221.25 627.141,1222.52 627.727,1223.86 628.314,1225.1 628.9,1223.39 629.487,1223.38 630.073,1223.27 630.659,1223.25 631.246,1223.35 631.832,1223.4 632.419,1225.77 633.005,1228.2 633.591,1227.92 634.178,1227.56 634.764,1225.96 635.351,1227 635.937,1226.32 636.523,1227.4 637.11,1229.95 637.696,1230.56 638.283,1229.95 638.869,1232.33 639.456,1232.92 640.042,1232.41 640.628,1231.55 641.215,1230.73 641.801,1228.77 642.388,1228.31 642.974,1227.68 643.56,1230.05 644.147,1232.59 644.733,1231.68 645.32,1231.02 645.906,1230.26 646.492,1228.04 647.079,1227.61 647.665,1226.08 648.252,1224.61 648.838,1225.61 649.425,1230.27 650.011,1231.19 650.597,1230.36 651.184,1226.75 651.77,1223.84 652.357,1223.65 652.943,1223.33 653.529,1222.76 654.116,1223.92 654.702,1222.26 655.289,1223.61 655.875,1224.58 656.462,1224.1 657.048,1223.89 657.634,1223.63 658.221,1226.09 658.807,1225.92 659.394,1225.4 659.98,1226.28 660.566,1227.17 661.153,1225.18 661.739,1224.67 662.326,1224.58 662.912,1225.88 663.498,1225.47 664.085,1223.81 664.671,1223.45 665.258,1224.64 665.844,1224.54 666.431,1223.98 667.017,1226.32 667.603,1228.59 668.19,1226.43 668.776,1225.84 669.363,1226.79 669.949,1226.2 670.535,1227.22 671.122,1229.37 671.708,1227.63 672.295,1229.91 672.881,1230.78 673.467,1229.76 674.054,1230.45 674.64,1231.05 675.227,1227.42 675.813,1225.17 676.4,1227.47 676.986,1224.04 677.572,1222.09 678.159,1219.02 678.745,1217.46 679.332,1220.39 679.918,1218.74 680.504,1218.7 681.091,1221.2 681.677,1219.59 682.264,1220.89 682.85,1221.97 683.436,1224.79 684.023,1225.67 684.609,1229.38 685.196,1228.85 685.782,1225.62 686.369,1225.13 686.955,1224.52 687.541,1224.14 688.128,1222.14 688.714,1219.07 689.301,1219.1 689.887,1218.85 690.473,1218.88 691.06,1220.25 691.646,1220.13 692.233,1221.4 692.819,1221.19 693.405,1223.55 693.992,1218.86 694.578,1218.71 695.165,1218.67 695.751,1218.45 696.338,1218.31 696.924,1219.62 697.51,1219.41 698.097,1220.58 698.683,1219.05 699.27,1220.49 699.856,1220.46 700.442,1221.59 701.029,1221.46 701.615,1222.66 702.202,1222.4 702.788,1222.27 703.375,1222.03 703.961,1224.7 704.547,1221.79 705.134,1220.22 705.72,1217.19 706.307,1218.43 706.893,1219.42 707.479,1221.78 708.066,1218.63 708.652,1221.18 709.239,1220.54 709.825,1220.13 710.411,1218.77 710.998,1218.39 711.584,1219.61 712.171,1219.55 712.757,1220.43 713.344,1221.56 713.93,1221.12 714.516,1219.51 715.103,1220.74 715.689,1220.34 716.276,1218.68 716.862,1220 717.448,1221.25 718.035,1218.35 718.621,1218.42 719.208,1215.23 719.794,1213.52 720.38,1217.66 720.967,1217.94 721.553,1216.69 722.14,1219.49 722.726,1219.28 723.313,1219.14 723.899,1220.25 724.485,1220.02 725.072,1218.12 725.658,1219.41 726.245,1217.94 726.831,1218.07 727.417,1219.49 728.004,1219.2 728.59,1217.41 729.177,1218.73 729.763,1220.12 730.349,1221.45 730.936,1219.76 731.522,1219.43 732.109,1219.09 732.695,1218.97 733.282,1223.03 733.868,1224.33 734.454,1221.21 735.041,1222.29 735.627,1223.39 736.214,1221.81 736.8,1221.51 737.386,1222.39 737.973,1223.44 738.559,1221.84 739.146,1221.63 739.732,1221.26 740.318,1215.52 740.905,1215.52 741.491,1213.86 742.078,1214.02 742.664,1214.21 743.251,1212.66 743.837,1209.87 744.423,1210.21 745.01,1207.64 745.596,1209.57 746.183,1212.61 746.769,1211.22 747.355,1215.77 747.942,1215.75 748.528,1213.14 749.115,1216.05 749.701,1218.8 750.288,1219.91 750.874,1220.75 751.46,1222.1 752.047,1221.89 752.633,1222.84 753.22,1219.66 753.806,1220.53 754.392,1221.75 754.979,1217.24 755.565,1220.1 756.152,1217.02 756.738,1215.8 757.324,1213.24 757.911,1216.11 758.497,1214.69 759.084,1214.62 759.67,1216.39 760.257,1214.91 760.843,1214.99 761.429,1213.48 762.016,1213.41 762.602,1216.54 763.189,1215.26 763.775,1217.06 764.361,1218.57 764.948,1219.77 765.534,1219.55 766.121,1219.52 766.707,1222.05 767.293,1217.78 767.88,1217.65 768.466,1216.24 769.053,1219.13 769.639,1219.12 770.226,1216.2 770.812,1217.56 771.398,1219.11 771.985,1220.57 772.571,1219.18 773.158,1220.33 773.744,1218.76 774.33,1221.46 774.917,1222.1 775.503,1220.61 776.09,1223.22 776.676,1220.09 777.262,1218.33 777.849,1218.31 778.435,1218.05 779.022,1219.48 779.608,1222.1 780.195,1221.42 780.781,1219.66 781.367,1219.3 781.954,1217.87 782.54,1213.59 783.127,1214.87 783.713,1216.53 784.299,1214.92 784.886,1214.76 785.472,1216.24 786.059,1218.93 786.645,1217.45 787.232,1217.4 787.818,1214.35 788.404,1214.66 788.991,1216.13 789.577,1214.57 790.164,1210.29 790.75,1211.65 791.336,1214.46 791.923,1216.94 792.509,1213.88 793.096,1212.36 793.682,1209.71 794.268,1210.05 794.855,1207.51 795.441,1209.17 796.028,1209.2 796.614,1209.32 797.201,1210.78 797.787,1212.23 798.373,1208.25 798.96,1209.81 799.546,1211.42 800.133,1214.33 800.719,1212.99 801.305,1213.21 801.892,1214.76 802.478,1217.52 803.065,1216.03 803.651,1213.33 804.237,1213.63 804.824,1209.35 805.41,1210.99 805.997,1213.98 806.583,1218.36 807.17,1213.98 807.756,1212.34 808.342,1213.96 808.929,1212.32 809.515,1211.08 810.102,1209.94 810.688,1207.43 811.274,1210.38 811.861,1211.95 812.447,1211.61 813.034,1212.88 813.62,1211.29 814.206,1211.69 814.793,1211.8 815.379,1213.51 815.966,1212.43 816.552,1213.87 817.139,1209.93 817.725,1214.13 818.311,1212.61 818.898,1211.2 819.484,1211.47 820.071,1211.87 820.657,1214.57 821.243,1213.06 821.83,1217.34 822.416,1217.2 823.003,1214.24 823.589,1214.4 824.175,1213.95 824.762,1211.35 825.348,1205.69 825.935,1210.49 826.521,1207.93 827.108,1208.19 827.694,1204.25 828.28,1204.93 828.867,1207.03 829.453,1210.27 830.04,1211.67 830.626,1217.04 831.212,1209.97 831.799,1208.81 832.385,1207.22 832.972,1206.17 833.558,1203.97 834.145,1204.27 834.731,1205.1 835.317,1204.43 835.904,1205.28 836.49,1204.54 837.077,1205.19 837.663,1205.6 838.249,1206.27 838.836,1206.73 839.422,1207.32 840.009,1206.36 840.595,1205.5 841.181,1202.88 841.768,1201.76 842.354,1202.3 842.941,1202.93 843.527,1203.63 844.114,1208.48 844.7,1208.78 845.286,1210.48 845.873,1213.62 846.459,1213.6 847.046,1215.25 847.632,1216.45 848.218,1222.13 848.805,1221.25 849.391,1219.53 849.978,1220.41 850.564,1217.39 851.15,1218.77 851.737,1217.1 852.323,1216.82 852.91,1216.67 853.496,1216.26 854.083,1217.45 854.669,1217.21 855.255,1215.5 855.842,1215.53 856.428,1216.55 857.015,1216.29 857.601,1214.86 858.187,1218.9 858.774,1221.14 859.36,1219.2 859.947,1218.98 860.533,1217.57 861.119,1218.84 861.706,1217.04 862.292,1216.81 862.879,1213.82 863.465,1213.78 864.052,1213.71 864.638,1215.08 865.224,1216.19 865.811,1216.03 866.397,1219.94 866.984,1220.87 867.57,1218.82 868.156,1218.25 868.743,1216.51 869.329,1214.86 869.916,1214.79 870.502,1215.88 871.089,1214.54 871.675,1213.18 872.261,1213.25 872.848,1215.99 873.434,1214.24 874.021,1215.68 874.607,1214.06 875.193,1216.91 875.78,1215.4 876.366,1216.54 876.953,1214.65 877.539,1215.89 878.125,1214.45 878.712,1214.45 879.298,1215.34 879.885,1216.4 880.471,1213.05 881.058,1210.27 881.644,1207.36 882.23,1209.02 882.817,1213.35 883.403,1215.8 883.99,1214.09 884.576,1216.89 885.162,1215.43 885.749,1215.47 886.335,1213.63 886.922,1213.28 887.508,1207.5 888.094,1209.37 888.681,1210.78 889.267,1212.18 889.854,1214.99 890.44,1216.25 891.027,1217.38 891.613,1216.85 892.199,1220.68 892.786,1219 893.372,1217.12 893.959,1215.92 894.545,1215.69 895.131,1215.64 895.718,1215.3 896.304,1213.55 896.891,1211.96 897.477,1206.28 898.063,1206.64 898.65,1207.28 899.236,1208.8 899.823,1210.32 900.409,1211.75 900.996,1210.43 901.582,1213.37 902.168,1217.38 902.755,1216.98 903.341,1216.74 903.928,1216.99 904.514,1216.59 905.1,1213.67 905.687,1212.41 906.273,1212.5 906.86,1211.2 907.446,1208.4 908.032,1207.17 908.619,1207.3 909.205,1207.81 909.792,1209.48 910.378,1210.81 910.965,1211.05 911.551,1209.66 912.137,1212.51 912.724,1211.17 913.31,1209.69 913.897,1206.91 914.483,1207.29 915.069,1206.17 915.656,1206.71 916.242,1207.08 916.829,1204.45 917.415,1207.64 918.002,1207.75 918.588,1209.87 919.174,1210.01 919.761,1210.18 920.347,1214.5 920.934,1212.64 921.52,1212.64 922.106,1211.39 922.693,1211.4 923.279,1208.63 923.866,1208.99 924.452,1209.09 925.038,1209.26 925.625,1208.21 926.211,1208.24 926.798,1208.59 927.384,1210.38 927.971,1213.16 928.557,1215.75 929.143,1218.38 929.73,1219.61 930.316,1216.51 930.903,1219.3 931.489,1217.38 932.075,1215.91 932.662,1214.53 933.248,1214.33 933.835,1215.57 934.421,1219.6 935.007,1216.51 935.594,1216.23 936.18,1215.01 936.767,1214.88 937.353,1217.23 937.94,1215.9 938.526,1214.3 939.112,1214.31 939.699,1211.25 940.285,1209.92 940.872,1209.92 941.458,1208.69 942.044,1208.7 942.631,1207.45 943.217,1209.05 943.804,1209.31 944.39,1209.53 944.976,1206.94 945.563,1207.19 946.149,1208.06 946.736,1205.62 947.322,1204.57 947.909,1204.57 948.495,1205.04 949.081,1205.37 949.668,1204.09 950.254,1207.17 950.841,1210.22 951.427,1211.56 952.013,1210.43 952.6,1210.41 953.186,1210.67 953.773,1211.98 954.359,1212.09 954.945,1214.73 955.532,1215.68 956.118,1212.55 956.705,1213.77 957.291,1213.56 957.878,1213.25 958.464,1214.49 959.05,1211.67 959.637,1210.6 960.223,1207.71 960.81,1208.02 961.396,1209.59 961.982,1208.7 962.569,1210.26 963.155,1208.8 963.742,1209.11 964.328,1209.22 964.915,1212.16 965.501,1210.9 966.087,1210.07 966.674,1208.95 967.26,1207.42 967.847,1209.67 968.433,1213.8 969.019,1211.25 969.606,1208.49 970.192,1208.63 970.779,1206.12 971.365,1206.74 971.951,1206.93 972.538,1207.12 973.124,1208.85 973.711,1209 974.297,1209.13 974.884,1211.91 975.47,1209.36 976.056,1208.34 976.643,1207.18 977.229,1207.4 977.816,1206.31 978.402,1204.11 978.988,1208.98 979.575,1209.36 980.161,1212.21 980.748,1213.84 981.334,1216.35 981.92,1216.03 982.507,1220.06 983.093,1219.57 983.68,1219.16 984.266,1219.05 984.853,1217.42 985.439,1215.8 986.025,1214.24 986.612,1214.04 987.198,1215.21 987.785,1213.33 988.371,1213.22 988.957,1212.03 989.544,1210.48 990.13,1211.86 990.717,1213.37 991.303,1213.56 991.889,1213.69 992.476,1214.78 993.062,1213.16 993.649,1214.52 994.235,1216.03 994.822,1215.95 995.408,1215.82 995.994,1215.62 996.581,1216.71 997.167,1218.87 997.754,1218.75 998.34,1221.13 998.926,1219.28 999.513,1221.47 1000.1,1219.79 1000.69,1216.81 1001.27,1213.96 1001.86,1212.34 1002.44,1213.8 1003.03,1213.48 1003.62,1214.91 1004.2,1214.91 1004.79,1213.29 1005.38,1206.25 1005.96,1206.15 1006.55,1207.68 1007.14,1212 1007.72,1210.32 1008.31,1208.72 1008.9,1208.79 1009.48,1208.78 1010.07,1210.23 1010.65,1207.54 1011.24,1206.29 1011.83,1206.73 1012.41,1206.06 1013,1205.95 1013.59,1206.28 1014.17,1203.69 1014.76,1204.07 1015.35,1205.79 1015.93,1206.1 1016.52,1204.74 1017.11,1203.92 1017.69,1204.51 1018.28,1206.18 1018.86,1209.49 1019.45,1208.4 1020.04,1209.74 1020.62,1209.94 1021.21,1209.91 1021.8,1208.69 1022.38,1206.06 1022.97,1209.13 1023.56,1209.62 1024.14,1212.56 1024.73,1215.05 1025.32,1214.75 1025.9,1215.77 1026.49,1215.08 1027.07,1217.65 1027.66,1218.95 1028.25,1214.28 1028.83,1214.04 1029.42,1213.92 1030.01,1212.65 1030.59,1212.23 1031.18,1210.9 1031.77,1212.21 1032.35,1210.88 1032.94,1208.51 1033.52,1208.58 1034.11,1208.82 1034.7,1209.03 1035.28,1209.22 1035.87,1213.47 1036.46,1214.61 1037.04,1214.47 1037.63,1215.85 1038.22,1214.2 1038.8,1215.41 1039.39,1213.47 1039.98,1211.77 1040.56,1214.11 1041.15,1213.91 1041.73,1212.33 1042.32,1213.47 1042.91,1214.7 1043.49,1211.74 1044.08,1210.24 1044.67,1210.16 1045.25,1210.77 1045.84,1209.54 1046.43,1207.1 1047.01,1206.06 1047.6,1209.12 1048.19,1209.43 1048.77,1210.9 1049.36,1210.91 1049.94,1209.98 1050.53,1213.43 1051.12,1212.15 1051.7,1211.96 1052.29,1210.5 1052.88,1211.77 1053.46,1213.08 1054.05,1211.84 1054.64,1210.67 1055.22,1212.24 1055.81,1212.36 1056.39,1213.49 1056.98,1214.87 1057.57,1214.54 1058.15,1214.31 1058.74,1212.91 1059.33,1211.39 1059.91,1210.09 1060.5,1211.71 1061.09,1214.38 1061.67,1214.11 1062.26,1212.46 1062.85,1210.81 1063.43,1209.34 1064.02,1203.92 1064.6,1202.63 1065.19,1204.3 1065.78,1205.89 1066.36,1208.78 1066.95,1208.89 1067.54,1209.34 1068.12,1209.3 1068.71,1212.1 1069.3,1210.74 1069.88,1210.94 1070.47,1212.45 1071.06,1212.31 1071.64,1216.19 1072.23,1217.44 1072.81,1218.33 1073.4,1219.15 1073.99,1215.96 1074.57,1215.79 1075.16,1214.01 1075.75,1215.76 1076.33,1217.2 1076.92,1218.09 1077.51,1220.37 1078.09,1219.78 1078.68,1219.46 1079.26,1217.6 1079.85,1214.49 1080.44,1215.39 1081.02,1216.33 1081.61,1214.26 1082.2,1216.74 1082.78,1218.11 1083.37,1217.74 1083.96,1217.4 1084.54,1214.71 1085.13,1214.36 1085.72,1214.24 1086.3,1212.81 1086.89,1214.21 1087.47,1215.41 1088.06,1215.29 1088.65,1215.07 1089.23,1213.4 1089.82,1213.09 1090.41,1210.2 1090.99,1210.32 1091.58,1209.03 1092.17,1213.61 1092.75,1212.16 1093.34,1209.36 1093.93,1210.97 1094.51,1210.93 1095.1,1210.86 1095.68,1210.91 1096.27,1208.16 1096.86,1209.61 1097.44,1208.05 1098.03,1209.65 1098.62,1209.67 1099.2,1209.9 1099.79,1208.71 1100.38,1207.41 1100.96,1210.52 1101.55,1213.48 1102.14,1210.57 1102.72,1210.56 1103.31,1210.42 1103.89,1210.58 1104.48,1214.84 1105.07,1211.76 1105.65,1214.57 1106.24,1211.72 1106.83,1213.53 1107.41,1214.81 1108,1214.33 1108.59,1214.15 1109.17,1212.72 1109.76,1213.03 1110.34,1215.47 1110.93,1214.14 1111.52,1214.14 1112.1,1214.01 1112.69,1213.96 1113.28,1215.12 1113.86,1214.99 1114.45,1215.02 1115.04,1216.25 1115.62,1216.08 1116.21,1217.15 1116.8,1214.1 1117.38,1213.66 1117.97,1215.1 1118.55,1213.46 1119.14,1214.96 1119.73,1214.94 1120.31,1219.01 1120.9,1218.67 1121.49,1218.43 1122.07,1218.34 1122.66,1216.5 1123.25,1216.18 1123.83,1216.1 1124.42,1215.8 1125.01,1214.45 1125.59,1215.78 1126.18,1218.19 1126.76,1218.01 1127.35,1216.01 1127.94,1214.58 1128.52,1215.89 1129.11,1218.07 1129.7,1215.41 1130.28,1215.36 1130.87,1212.75 1131.46,1209.75 1132.04,1207.26 1132.63,1208.7 1133.21,1207.56 1133.8,1207.77 1134.39,1208.15 1134.97,1209.8 1135.56,1208.18 1136.15,1208.46 1136.73,1210.09 1137.32,1211.64 1137.91,1210.21 1138.49,1208.71 1139.08,1210.37 1139.67,1210.47 1140.25,1210.95 1140.84,1213.83 1141.42,1215.12 1142.01,1216.43 1142.6,1213.14 1143.18,1208.71 1143.77,1209.16 1144.36,1207.69 1144.94,1209.02 1145.53,1209.34 1146.12,1209.69 1146.7,1207.08 1147.29,1207.4 1147.88,1206.31 1148.46,1204.27 1149.05,1202.06 1149.63,1205.39 1150.22,1204.52 1150.81,1203.41 1151.39,1204.88 1151.98,1205.32 1152.57,1205.84 1153.15,1206.06 1153.74,1207.57 1154.33,1209.04 1154.91,1206.38 1155.5,1208.03 1156.09,1208.37 1156.67,1211.34 1157.26,1210.03 1157.84,1214.22 1158.43,1214.12 1159.02,1212.36 1159.6,1214.84 1160.19,1209.09 1160.78,1209.33 1161.36,1209.52 1161.95,1205.19 1162.54,1206.85 1163.12,1207.15 1163.71,1205.86 1164.29,1204.97 1164.88,1203.95 1165.47,1204.27 1166.05,1204.7 1166.64,1206.71 1167.23,1204.27 1167.81,1203.21 1168.4,1202.32 1168.99,1200.32 1169.57,1205.02 1170.16,1208.12 1170.75,1208.28 1171.33,1205.67 1171.92,1206.09 1172.5,1209.05 1173.09,1210.86 1173.68,1210.67 1174.26,1210.82 1174.85,1210.68 1175.44,1212.13 1176.02,1214.45 1176.61,1215.38 1177.2,1213.61 1177.78,1212.13 1178.37,1210.6 1178.96,1214.87 1179.54,1214.85 1180.13,1213.4 1180.71,1214.69 1181.3,1215.87 1181.89,1215.53 1182.47,1217.03 1183.06,1217.93 1183.65,1216.2 1184.23,1217.28 1184.82,1215.37 1185.41,1213.74 1185.99,1212.19 1186.58,1212.07 1187.16,1211.94 1187.75,1208.97 1188.34,1207.81 1188.92,1209.25 1189.51,1209.47 1190.1,1212.52 1190.68,1211.26 1191.27,1214 1191.86,1212.63 1192.44,1208.66 1193.03,1208.8 1193.62,1208.54 1194.2,1205.9 1194.79,1207.51 1195.37,1207.77 1195.96,1206.16 1196.55,1206.22 1197.13,1205.17 1197.72,1204.16 1198.31,1204.58 1198.89,1207.41 1199.48,1208.01 1200.07,1207.87 1200.65,1208.07 1201.24,1209.75 1201.83,1209.77 1202.41,1209.96 1203,1211.1 1203.58,1209.25 1204.17,1209.08 1204.76,1206.55 1205.34,1205.72 1205.93,1205.89 1206.52,1204.72 1207.1,1202.03 1207.69,1203.52 1208.28,1202.27 1208.86,1201.54 1209.45,1204.85 1210.03,1210.76 1210.62,1211.14 1211.21,1208.58 1211.79,1207.26 1212.38,1208.78 1212.97,1207.42 1213.55,1207.56 1214.14,1207.56 1214.73,1209.22 1215.31,1209.53 1215.9,1212.4 1216.49,1212.34 1217.07,1213.59 1217.66,1212.28 1218.24,1212.31 1218.83,1213.63 1219.42,1212.16 1220,1213.63 1220.59,1215.19 1221.18,1216.68 1221.76,1216.16 1222.35,1217.32 1222.94,1215.57 1223.52,1214.06 1224.11,1212.87 1224.7,1212.8 1225.28,1209.89 1225.87,1208.69 1226.45,1210.1 1227.04,1211.42 1227.63,1210.1 1228.21,1208.69 1228.8,1208.81 1229.39,1210.34 1229.97,1209.17 1230.56,1205.36 1231.15,1208.46 1231.73,1207.21 1232.32,1207.38 1232.91,1206.23 1233.49,1203.76 1234.08,1201.22 1234.66,1201.81 1235.25,1202.41 1235.84,1206.8 1236.42,1208.19 1237.01,1208.7 1237.6,1209.01 1238.18,1210.58 1238.77,1213.45 1239.36,1214.79 1239.94,1214.62 1240.53,1217.27 1241.11,1216.92 1241.7,1216.45 1242.29,1214.84 1242.87,1217.12 1243.46,1219.51 1244.05,1220.23 1244.63,1216.85 1245.22,1214.94 1245.81,1213.32 1246.39,1217.47 1246.98,1218.56 1247.57,1223.67 1248.15,1221.53 1248.74,1223.7 1249.32,1225.79 1249.91,1224.91 1250.5,1224.04 1251.08,1223.46 1251.67,1223.95 1252.26,1223.23 1252.84,1221.62 1253.43,1219.63 1254.02,1217.51 1254.6,1216.99 1255.19,1215.49 1255.78,1213.8 1256.36,1215.32 1256.95,1211.17 1257.53,1212.5 1258.12,1212.57 1258.71,1213.54 1259.29,1213.13 1259.88,1212.98 1260.47,1208.71 1261.05,1206.08 1261.64,1207.79 1262.23,1208.04 1262.81,1208.07 1263.4,1208.31 1263.98,1211.15 1264.57,1215.15 1265.16,1209.58 1265.74,1208.29 1266.33,1208.16 1266.92,1206.59 1267.5,1208.16 1268.09,1209.52 1268.68,1212.55 1269.26,1210.98 1269.85,1212.3 1270.44,1212.37 1271.02,1213.52 1271.61,1211.96 1272.19,1209.04 1272.78,1207.91 1273.37,1205.57 1273.95,1206.14 1274.54,1206.21 1275.13,1205.18 1275.71,1206.81 1276.3,1204.52 1276.89,1202.25 1277.47,1203.92 1278.06,1204.11 1278.65,1204.41 1279.23,1203.41 1279.82,1205.3 1280.4,1204.36 1280.99,1206.03 1281.58,1206.4 1282.16,1207.97 1282.75,1209.53 1283.34,1208.5 1283.92,1208.21 1284.51,1209.88 1285.1,1210.15 1285.68,1211.34 1286.27,1212.72 1286.86,1214.35 1287.44,1211.4 1288.03,1210.12 1288.61,1207.52 1289.2,1208.04 1289.79,1208.04 1290.37,1208.06 1290.96,1206.69 1291.55,1205.26 1292.13,1205.35 1292.72,1204.65 1293.31,1203.72 1293.89,1203.98 1294.48,1204.55 1295.06,1204.57 1295.65,1204.87 1296.24,1206.76 1296.82,1206.79 1297.41,1205.69 1298,1203 1298.58,1206.15 1299.17,1209.43 1299.76,1209.85 1300.34,1209.89 1300.93,1210.06 1301.52,1206.29 1302.1,1206.64 1302.69,1205.36 1303.27,1206.87 1303.86,1208.57 1304.45,1210.29 1305.03,1210.72 1305.62,1209.14 1306.21,1206.16 1306.79,1207.74 1307.38,1207.57 1307.97,1205.27 1308.55,1207.2 1309.14,1208.88 1309.73,1208.87 1310.31,1207.49 1310.9,1202.31 1311.48,1202.88 1312.07,1204.86 1312.66,1204.97 1313.24,1205.43 1313.83,1209.88 1314.42,1211.26 1315,1212.53 1315.59,1209.82 1316.18,1211.31 1316.76,1210.96 1317.35,1211.06 1317.93,1212.49 1318.52,1212.52 1319.11,1212.42 1319.69,1210.9 1320.28,1211.01 1320.87,1208.27 1321.45,1206.94 1322.04,1207.35 1322.63,1209.29 1323.21,1210.59 1323.8,1213.6 1324.39,1213.31 1324.97,1211.65 1325.56,1211.76 1326.14,1210.18 1326.73,1211.9 1327.32,1213.38 1327.9,1214.55 1328.49,1212.82 1329.08,1212.64 1329.66,1215.65 1330.25,1216.84 1330.84,1215.15 1331.42,1216.34 1332.01,1217.33 1332.6,1218.36 1333.18,1216.64 1333.77,1213.68 1334.35,1216.44 1334.94,1214.92 1335.53,1219.16 1336.11,1218.79 1336.7,1218.32 1337.29,1217.83 1337.87,1214.73 1338.46,1215.82 1339.05,1215.42 1339.63,1216.55 1340.22,1217.45 1340.8,1215.84 1341.39,1213.98 1341.98,1211.01 1342.56,1213.76 1343.15,1213.54 1343.74,1211.84 1344.32,1213.45 1344.91,1215.12 1345.5,1213.38 1346.08,1214.77 1346.67,1220.07 1347.26,1221.13 1347.84,1219.54 1348.43,1217.71 1349.01,1216.18 1349.6,1217.3 1350.19,1216.75 1350.77,1216.13 1351.36,1217.29 1351.95,1215.76 1352.53,1216.59 1353.12,1214.74 1353.71,1215.83 1354.29,1215.61 1354.88,1216.74 1355.47,1217.66 1356.05,1219.07 1356.64,1218.57 1357.22,1217.97 1357.81,1217.64 1358.4,1219.92 1358.98,1219.33 1359.57,1217.32 1360.16,1218.51 1360.74,1216.51 1361.33,1214.82 1361.92,1216.07 1362.5,1216.98 1363.09,1216.79 1363.68,1217.79 1364.26,1217.66 1364.85,1220.05 1365.43,1221.15 1366.02,1217.82 1366.61,1217.69 1367.19,1218.6 1367.78,1218.36 1368.37,1219 1368.95,1214.32 1369.54,1211.26 1370.13,1208.26 1370.71,1206.74 1371.3,1207.19 1371.88,1208.67 1372.47,1208.7 1373.06,1207.45 1373.64,1207.19 1374.23,1204.44 1374.82,1205.03 1375.4,1206.83 1375.99,1204.19 1376.58,1204.75 1377.16,1200.78 1377.75,1201.83 1378.34,1200.88 1378.92,1203.12 1379.51,1203.59 1380.09,1206.69 1380.68,1205.52 1381.27,1208.6 1381.85,1205.67 1382.44,1206.04 1383.03,1204.79 1383.61,1205.25 1384.2,1206.96 1384.79,1205.59 1385.37,1205.98 1385.96,1203.27 1386.55,1205.08 1387.13,1205.48 1387.72,1208.61 1388.3,1208.73 1388.89,1210.46 1389.48,1207.68 1390.06,1205.26 1390.65,1205.37 1391.24,1200.23 1391.82,1199.42 1392.41,1199.71 1393,1199.02 1393.58,1199.74 1394.17,1200.51 1394.75,1200.86 1395.34,1201.7 1395.93,1202.13 1396.51,1205.48 1397.1,1208.67 1397.69,1208.97 1398.27,1206.49 1398.86,1208 1399.45,1210.96 1400.03,1210.97 1400.62,1213.76 1401.21,1212.27 1401.79,1213.54 1402.38,1216.34 1402.96,1218.92 1403.55,1219.88 1404.14,1219.75 1404.72,1220.54 1405.31,1219.98 1405.9,1219.68 1406.48,1215.08 1407.07,1215.07 1407.66,1216.17 1408.24,1214.28 1408.83,1214.3 1409.42,1217.05 1410,1216.47 1410.59,1213.43 1411.17,1213.17 1411.76,1212.95 1412.35,1212.46 1412.93,1211.02 1413.52,1212.33 1414.11,1212.39 1414.69,1215.11 1415.28,1212.34 1415.87,1212.02 1416.45,1212.2 1417.04,1213.43 1417.63,1213.27 1418.21,1213.23 1418.8,1215.64 1419.38,1216.64 1419.97,1217.83 1420.56,1218.65 1421.14,1218.17 1421.73,1219.09 1422.32,1219.95 1422.9,1216.66 1423.49,1214.61 1424.08,1216.87 1424.66,1216.79 1425.25,1217.74 1425.83,1214.64 1426.42,1212.87 1427.01,1214.24 1427.59,1215.56 1428.18,1217.86 1428.77,1214.42 1429.35,1214.51 1429.94,1215.98 1430.53,1214.08 1431.11,1215.26 1431.7,1213.57 1432.29,1213.36 1432.87,1214.45 1433.46,1215.81 1434.04,1214.15 1434.63,1212.44 1435.22,1212.48 1435.8,1212.18 1436.39,1212.07 1436.98,1209.37 1437.56,1206.5 1438.15,1205.07 1438.74,1205.12 1439.32,1202.56 1439.91,1201.76 1440.5,1202.44 1441.08,1204.55 1441.67,1204.71 1442.25,1206.29 1442.84,1210.89 1443.43,1209.36 1444.01,1209.42 1444.6,1209.71 1445.19,1208.35 1445.77,1205.71 1446.36,1203.18 1446.95,1203.52 1447.53,1205.32 1448.12,1207.19 1448.7,1208.61 1449.29,1210.15 1449.88,1209.94 1450.46,1211.2 1451.05,1211.43 1451.64,1209.88 1452.22,1207.2 1452.81,1206.03 1453.4,1206.33 1453.98,1206.64 1454.57,1202.69 1455.16,1202.95 1455.74,1201.99 1456.33,1200.84 1456.91,1203.13 1457.5,1203.25 1458.09,1203.75 1458.67,1205.76 1459.26,1211.55 1459.85,1210.25 1460.43,1210.33 1461.02,1208.76 1461.61,1206.15 1462.19,1206.42 1462.78,1208.01 1463.37,1205.66 1463.95,1206.03 1464.54,1207.91 1465.12,1210.74 1465.71,1212.1 1466.3,1210.58 1466.88,1210.69 1467.47,1212.3 1468.06,1212.41 1468.64,1212.34 1469.23,1212.5 1469.82,1212.28 1470.4,1215.03 1470.99,1214.88 1471.57,1216.1 1472.16,1215.7 1472.75,1214.27 1473.33,1217.05 1473.92,1218.05 1474.51,1217.58 1475.09,1214.39 1475.68,1211.34 1476.27,1209.82 1476.85,1211.2 1477.44,1206.91 1478.03,1207.01 1478.61,1206.08 1479.2,1207.67 1479.78,1206.35 1480.37,1209.41 1480.96,1206.59 1481.54,1209.65 1482.13,1211.14 1482.72,1212.36 1483.3,1210.77 1483.89,1210.57 1484.48,1211.78 1485.06,1211.91 1485.65,1211.54 1486.24,1212.88 1486.82,1210.07 1487.41,1209.96 1487.99,1210.08 1488.58,1211.46 1489.17,1214.5 1489.75,1214.34 1490.34,1214.08 1490.93,1215.11 1491.51,1212.23 1492.1,1209.4 1492.69,1211 1493.27,1209.56 1493.86,1208.41 1494.45,1210.12 1495.03,1211.6 1495.62,1213.12 1496.2,1211.58 1496.79,1210.03 1497.38,1211.31 1497.96,1212.31 1498.55,1213.75 1499.14,1215.07 1499.72,1214.91 1500.31,1210.72 1500.9,1212.13 1501.48,1212.23 1502.07,1212.07 1502.65,1209.73 1503.24,1208.21 1503.83,1208.9 1504.41,1212.06 1505,1214.8 1505.59,1211.76 1506.17,1214.53 1506.76,1217 1507.35,1216.85 1507.93,1216.64 1508.52,1216.36 1509.11,1215.83 1509.69,1217.09 1510.28,1215.38 1510.86,1213.73 1511.45,1214.7 1512.04,1214.36 1512.62,1212.65 1513.21,1211.2 1513.8,1212.48 1514.38,1212.43 1514.97,1213.77 1515.56,1212.3 1516.14,1210.97 1516.73,1212.37 1517.32,1213.61 1517.9,1211.84 1518.49,1214.6 1519.07,1214.33 1519.66,1214.42 1520.25,1215.81 1520.83,1216.93 1521.42,1216.66 1522.01,1216.55 1522.59,1217.53 1523.18,1218.83 1523.77,1218.34 1524.35,1216.69 1524.94,1216.42 1525.52,1215.95 1526.11,1215.6 1526.7,1215.34 1527.28,1213.81 1527.87,1219.04 1528.46,1219.84 1529.04,1216.65 1529.63,1216.33 1530.22,1214.59 1530.8,1214.41 1531.39,1213.01 1531.98,1211.64 1532.56,1209.12 1533.15,1209.06 1533.73,1206.17 1534.32,1209.14 1534.91,1206.43 1535.49,1206.81 1536.08,1207.1 1536.67,1205.97 1537.25,1206.28 1537.84,1204.7 1538.43,1202.04 1539.01,1203.52 1539.6,1201.07 1540.19,1204.24 1540.77,1204.43 1541.36,1207.31 1541.94,1206.17 1542.53,1209.05 1543.12,1207.7 1543.7,1207.77 1544.29,1209.33 1544.88,1210.73 1545.46,1210.79 1546.05,1210.77 1546.64,1212.29 1547.22,1209.38 1547.81,1206.87 1548.4,1207.07 1548.98,1203.05 1549.57,1202.4 1550.15,1202.86 1550.74,1204.36 1551.33,1206.29 1551.91,1207.81 1552.5,1210.77 1553.09,1209.62 1553.67,1212.35 1554.26,1212.24 1554.85,1212.21 1555.43,1216.55 1556.02,1217.45 1556.6,1218.43 1557.19,1216.75 1557.78,1216.51 1558.36,1216.22 1558.95,1215.92 1559.54,1217.98 1560.12,1221.77 1560.71,1221.22 1561.3,1218.01 1561.88,1216.42 1562.47,1214.88 1563.06,1215.99 1563.64,1219.66 1564.23,1219.1 1564.81,1218.78 1565.4,1221.31 1565.99,1225.05 1566.57,1224.68 1567.16,1224.09 1567.75,1223.38 1568.33,1219.9 1568.92,1217.89 1569.51,1218.75 1570.09,1218.34 1570.68,1216.45 1571.27,1213.13 1571.85,1212.95 1572.44,1212.84 1573.02,1212.41 1573.61,1206.76 1574.2,1208.23 1574.78,1209.98 1575.37,1211.34 1575.96,1214.15 1576.54,1214.25 1577.13,1214.22 1577.72,1214.12 1578.3,1211.18 1578.89,1210.97 1579.47,1213.92 1580.06,1212.35 1580.65,1213.63 1581.23,1213.67 1581.82,1214.99 1582.41,1216.17 1582.99,1214.36 1583.58,1215.56 1584.17,1215.39 1584.75,1215.21 1585.34,1212.26 1585.93,1206.76 1586.51,1205.61 1587.1,1206.82 1587.68,1207.06 1588.27,1207.29 1588.86,1204.62 1589.44,1203.37 1590.03,1206.44 1590.62,1206.42 1591.2,1205.31 1591.79,1205.59 1592.38,1205.94 1592.96,1206.24 1593.55,1205.18 1594.14,1204.23 1594.72,1204.8 1595.31,1204.99 1595.89,1205.22 1596.48,1204.46 1597.07,1204.91 1597.65,1202.35 1598.24,1199.95 1598.83,1200.77 1599.41,1202.7 1600,1204.37 1600.59,1207.61 1601.17,1210.49 1601.76,1207.83 1602.34,1208.37 1602.93,1209.84 1603.52,1210.05 1604.1,1210.05 1604.69,1211.47 1605.28,1210.11 1605.86,1208.56 1606.45,1210 1607.04,1206.41 1607.62,1206.7 1608.21,1205.53 1608.8,1205.85 1609.38,1206.22 1609.97,1208.03 1610.55,1209.5 1611.14,1212.21 1611.73,1213.71 1612.31,1213.34 1612.9,1210.33 1613.49,1209.15 1614.07,1212.35 1614.66,1210.75 1615.25,1212.24 1615.83,1213.78 1616.42,1213.84 1617.01,1216.65 1617.59,1214.91 1618.18,1213.38 1618.76,1211.8 1619.35,1212.85 1619.94,1211.21 1620.52,1211.39 1621.11,1209.87 1621.7,1213.91 1622.28,1211.22 1622.87,1213.98 1623.46,1213.91 1624.04,1214.79 1624.63,1215.86 1625.22,1214.26 1625.8,1217.83 1626.39,1216.37 1626.97,1213.31 1627.56,1211.44 1628.15,1208.52 1628.73,1211.55 1629.32,1212.86 1629.91,1210.01 1630.49,1207.7 1631.08,1206.25 1631.67,1209.2 1632.25,1209.3 1632.84,1211.94 1633.42,1212.02 1634.01,1211.8 1634.6,1213.06 1635.18,1211.45 1635.77,1211.71 1636.36,1211.79 1636.94,1213.22 1637.53,1211.36 1638.12,1210.13 1638.7,1211.32 1639.29,1210.18 1639.88,1210.18 1640.46,1210.37 1641.05,1211.79 1641.63,1213.25 1642.22,1214.18 1642.81,1211.18 1643.39,1211.34 1643.98,1208.4 1644.57,1208.57 1645.15,1214.33 1645.74,1212.72 1646.33,1208.47 1646.91,1213.04 1647.5,1210.24 1648.09,1211.61 1648.67,1214.39 1649.26,1217.04 1649.84,1213.04 1650.43,1211.67 1651.02,1208.88 1651.6,1209.02 1652.19,1209.13 1652.78,1207.86 1653.36,1209.54 1653.95,1208.47 1654.54,1207.27 1655.12,1207.34 1655.71,1208.88 1656.29,1208.82 1656.88,1206.12 1657.47,1203.63 1658.05,1205.65 1658.64,1207.51 1659.23,1206.7 1659.81,1208.53 1660.4,1208.76 1660.99,1208.89 1661.57,1207.63 1662.16,1206.76 1662.75,1204.24 1663.33,1207.46 1663.92,1209.23 1664.5,1209.47 1665.09,1210.86 1665.68,1210.76 1666.26,1210.73 1666.85,1210.37 1667.44,1208.89 1668.02,1209.05 1668.61,1209 1669.2,1208.78 1669.78,1210.11 1670.37,1207.43 1670.96,1206.04 1671.54,1203.64 1672.13,1204.49 1672.71,1203.24 1673.3,1205.01 1673.89,1205.37 1674.47,1207.79 1675.06,1207.87 1675.65,1206.56 1676.23,1207 1676.82,1206.21 1677.41,1206.6 1677.99,1208.44 1678.58,1208.42 1679.17,1211.43 1679.75,1209.85 1680.34,1209.95 1680.92,1214 1681.51,1213.84 1682.1,1210.99 1682.68,1209.48 1683.27,1206.58 1683.86,1206.47 1684.44,1205.33 1685.03,1204.07 1685.62,1205.68 1686.2,1204.74 1686.79,1207.68 1687.37,1208.06 1687.96,1211.05 1688.55,1212.19 1689.13,1213.46 1689.72,1212.11 1690.31,1214.85 1690.89,1212.99 1691.48,1212.79 1692.07,1212.95 1692.65,1212.77 1693.24,1215.35 1693.83,1216.22 1694.41,1217.37 1695,1218.32 1695.58,1218.14 1696.17,1218.14 1696.76,1217.75 1697.34,1217.45 1697.93,1215.72 1698.52,1215.31 1699.1,1215.08 1699.69,1217.79 1700.28,1214.78 1700.86,1213.28 1701.45,1216.05 1702.04,1212.97 1702.62,1212.88 1703.21,1212.92 1703.79,1214.41 1704.38,1211.5 1704.97,1208.68 1705.55,1208.57 1706.14,1208.71 1706.73,1210.13 1707.31,1211.69 1707.9,1211.67 1708.49,1213.35 1709.07,1211.91 1709.66,1213.39 1710.24,1216.11 1710.83,1218.39 1711.42,1219.48 1712,1217.79 1712.59,1218.78 1713.18,1216.86 1713.76,1213.91 1714.35,1215.12 1714.94,1217.93 1715.52,1216.26 1716.11,1217.28 1716.7,1215.64 1717.28,1217.07 1717.87,1212.48 1718.45,1212.31 1719.04,1212.31 1719.63,1213.53 1720.21,1212.32 1720.8,1212.36 1721.39,1210.61 1721.97,1209.16 1722.56,1206.44 1723.15,1206.62 1723.73,1206.57 1724.32,1208.19 1724.91,1209.76 1725.49,1209.81 1726.08,1207.98 1726.66,1209.3 1727.25,1212.15 1727.84,1209.53 1728.42,1208.18 1729.01,1206.95 1729.6,1212.7 1730.18,1216.64 1730.77,1217.69 1731.36,1215.85 1731.94,1212.95 1732.53,1212.81 1733.11,1212.76 1733.7,1212.88 1734.29,1214.04 1734.87,1211.16 1735.46,1212.48 1736.05,1212.47 1736.63,1213.57 1737.22,1216.28 1737.81,1213.54 1738.39,1214.69 1738.98,1214.48 1739.57,1214 1740.15,1213.94 1740.74,1215.29 1741.32,1215.15 1741.91,1214.85 1742.5,1214.62 1743.08,1217.03 1743.67,1218.29 1744.26,1215.09 1744.84,1213.86 1745.43,1213.3 1746.02,1213.33 1746.6,1210.33 1747.19,1208.98 1747.78,1211.64 1748.36,1211.62 1748.95,1211.61 1749.53,1211.96 1750.12,1207.88 1750.71,1206.74 1751.29,1208.58 1751.88,1206.96 1752.47,1207.43 1753.05,1210.82 1753.64,1212.35 1754.23,1213.59 1754.81,1214.53 1755.4,1212.96 1755.99,1210.1 1756.57,1208.76 1757.16,1207.48 1757.74,1204.89 1758.33,1206.42 1758.92,1205.44 1759.5,1205.94 1760.09,1206.27 1760.68,1205.22 1761.26,1205.44 1761.85,1205.74 1762.44,1205.8 1763.02,1207.44 1763.61,1209.24 1764.19,1207.97 1764.78,1208.26 1765.37,1205.58 1765.95,1205.85 1766.54,1208.79 1767.13,1209.05 1767.71,1209.33 1768.3,1210.54 1768.89,1210.54 1769.47,1210.52 1770.06,1212.1 1770.65,1212.35 1771.23,1210.91 1771.82,1208.22 1772.4,1206.97 1772.99,1211.45 1773.58,1210.08 1774.16,1211.53 1774.75,1214.27 1775.34,1211.21 1775.92,1212.79 1776.51,1212.43 1777.1,1210.85 1777.68,1210.87 1778.27,1213.51 1778.86,1216.38 1779.44,1214.7 1780.03,1215.76 1780.61,1212.41 1781.2,1215.19 1781.79,1214.96 1782.37,1213.37 1782.96,1213.52 1783.55,1216.19 1784.13,1217.52 1784.72,1214.43 1785.31,1213.25 1785.89,1214.3 1786.48,1216.9 1787.06,1217.78 1787.65,1215.95 1788.24,1217.12 1788.82,1218.17 1789.41,1217.73 1790,1216.37 1790.58,1213.14 1791.17,1215.73 1791.76,1215.61 1792.34,1215.39 1792.93,1220.51 1793.52,1218.55 1794.1,1216.56 1794.69,1217.73 1795.27,1215.98 1795.86,1216.12 1796.45,1217.53 1797.03,1217.27 1797.62,1216.98 1798.21,1218.24 1798.79,1219.26 1799.38,1218.65 1799.97,1216.98 1800.55,1216.64 1801.14,1216.34 1801.73,1216.34 1802.31,1215.81 1802.9,1215.74 1803.48,1217.16 1804.07,1219.63 1804.66,1216.53 1805.24,1213.51 1805.83,1207.58 1806.42,1206.28 1807,1206.6 1807.59,1205.47 1808.18,1204.19 1808.76,1202.82 1809.35,1203.07 1809.94,1197.9 1810.52,1198.72 1811.11,1199.42 1811.69,1202.89 1812.28,1203.1 1812.87,1201.85 1813.45,1203.74 1814.04,1202.85 1814.63,1204.55 1815.21,1206.74 1815.8,1207.19 1816.39,1206.54 1816.97,1206.93 1817.56,1208.37 1818.14,1214.22 1818.73,1211.19 1819.32,1210.02 1819.9,1213.07 1820.49,1212.97 1821.08,1215.79 1821.66,1215.75 1822.25,1213.88 1822.84,1212.43 1823.42,1212.3 1824.01,1212.26 1824.6,1213.71 1825.18,1212.44 1825.77,1212.19 1826.35,1211.93 1826.94,1211.85 1827.53,1210.75 1828.11,1209.57 1828.7,1213.6 1829.29,1213.62 1829.87,1213.65 1830.46,1212.16 1831.05,1210.59 1831.63,1210.89 1832.22,1209.21 1832.81,1205.09 1833.39,1206.87 1833.98,1207.23 1834.56,1208.8 1835.15,1211.84 1835.74,1210.39 1836.32,1209.17 1836.91,1210.42 1837.5,1211.86 1838.08,1211.84 1838.67,1211.83 1839.26,1211.38 1839.84,1214.07 1840.43,1212.7 1841.01,1212.72 1841.6,1215.39 1842.19,1213.97 1842.77,1211.14 1843.36,1212.44 1843.95,1212.44 1844.53,1212.25 1845.12,1213.89 1845.71,1215.03 1846.29,1214.84 1846.88,1211.85 1847.47,1211.74 1848.05,1210.24 1848.64,1208.93 1849.22,1209.51 1849.81,1211.13 1850.4,1209.69 1850.98,1209.78 1851.57,1209.94 1852.16,1210.23 1852.74,1207.29 1853.33,1210.35 1853.92,1211.81 1854.5,1214.74 1855.09,1215.68 1855.68,1214.16 1856.26,1214.26 1856.85,1214.23 1857.43,1214.13 1858.02,1215.19 1858.61,1214.82 1859.19,1214.8 1859.78,1215.75 1860.37,1212.5 1860.95,1213.75 1861.54,1214.77 1862.13,1211.93 1862.71,1210.2 1863.3,1211.83 1863.88,1208.9 1864.47,1207.81 1865.06,1203.87 1865.64,1203.27 1866.23,1203.68 1866.82,1204.09 1867.4,1204.48 1867.99,1204.78 1868.58,1205.06 1869.16,1203.96 1869.75,1207.02 1870.34,1205.8 1870.92,1207.41 1871.51,1209.04 1872.09,1212.14 1872.68,1210.69 1873.27,1210.81 1873.85,1208.32 1874.44,1205.39 1875.03,1203.07 1875.61,1203.56 1876.2,1201.06 1876.79,1203.15 1877.37,1203.71 1877.96,1202.71 1878.55,1199.1 1879.13,1198.35 1879.72,1195.99 1880.3,1197.9 1880.89,1197.28 1881.48,1196.53 1882.06,1197.69 1882.65,1196.96 1883.24,1197.92 1883.82,1198.66 1884.41,1200.6 1885,1203.95 1885.58,1201.67 1886.17,1202.29 1886.76,1201.39 1887.34,1201.95 1887.93,1202.64 1888.51,1203.14 1889.1,1203.15 1889.69,1204.91 1890.27,1203.79 1890.86,1206.69 1891.45,1206.81 1892.03,1208.52 1892.62,1208.89 1893.21,1209.12 1893.79,1210.7 1894.38,1209.19 1894.96,1210.88 1895.55,1210.82 1896.14,1210.69 1896.72,1212.16 1897.31,1213.77 1897.9,1214.93 1898.48,1214.78 1899.07,1215.59 1899.66,1218.18 1900.24,1216.49 1900.83,1219.01 1901.42,1218.66 1902,1218.04 1902.59,1216.24 1903.17,1217.64 1903.76,1221.41 1904.35,1221.96 1904.93,1222.55 1905.52,1218.84 1906.11,1215.82 1906.69,1215.48 1907.28,1213.81 1907.87,1213.47 1908.45,1214.73 1909.04,1214.39 1909.63,1214.43 1910.21,1215.67 1910.8,1215.57 1911.38,1219.65 1911.97,1218.86 1912.56,1221.27 1913.14,1220.8 1913.73,1220.29 1914.32,1218.51 1914.9,1217.01 1915.49,1216.45 1916.08,1217.56 1916.66,1216.99 1917.25,1216.61 1917.83,1217.63 1918.42,1217.11 1919.01,1218.2 1919.59,1217.82 1920.18,1217.54 1920.77,1220.27 1921.35,1218.05 1921.94,1216.3 1922.53,1216.04 1923.11,1213.04 1923.7,1212.85 1924.29,1215.46 1924.87,1216.61 1925.46,1218.98 1926.04,1218.36 1926.63,1216.54 1927.22,1214.82 1927.8,1217.16 1928.39,1214.38 1928.98,1214.24 1929.56,1212.76 1930.15,1211.1 1930.74,1211.07 1931.32,1211.25 1931.91,1210.04 1932.5,1208.53 1933.08,1210.28 1933.67,1210.62 1934.25,1213.35 1934.84,1211.72 1935.43,1210.45 1936.01,1206.74 1936.6,1207.13 1937.19,1208.87 1937.77,1210.39 1938.36,1209.05 1938.95,1210.44 1939.53,1210.37 1940.12,1212.99 1940.71,1214.07 1941.29,1214.07 1941.88,1215.31 1942.46,1213.56 1943.05,1214.64 1943.64,1213 1944.22,1212.87 1944.81,1211.43 1945.4,1205.72 1945.98,1206 1946.57,1204.98 1947.16,1206.2 1947.74,1205.07 1948.33,1205.71 1948.91,1208.76 1949.5,1211.78 1950.09,1211.48 1950.67,1211.36 1951.26,1211.21 1951.85,1211.24 1952.43,1208.61 1953.02,1207.24 1953.61,1207.44 1954.19,1207.43 1954.78,1207.46 1955.37,1206.22 1955.95,1205.52 1956.54,1204.53 1957.12,1206.61 1957.71,1205.43 1958.3,1207.39 1958.88,1210.51 1959.47,1212.09 1960.06,1213.32 1960.64,1213.1 1961.23,1214.54 1961.82,1214.15 1962.4,1215.1 1962.99,1214.92 1963.58,1214.79 1964.16,1209.1 1964.75,1208.89 1965.33,1207.65 1965.92,1210.83 1966.51,1213.63 1967.09,1212.55 1967.68,1211.34 1968.27,1212.84 1968.85,1213.62 1969.44,1213.28 1970.03,1214.05 1970.61,1215.58 1971.2,1215.43 1971.78,1212.6 1972.37,1212.44 1972.96,1212.33 1973.54,1209.32 1974.13,1210.84 1974.72,1213.33 1975.3,1214.2 1975.89,1214.1 1976.48,1213.93 1977.06,1216.35 1977.65,1217.4 1978.24,1214.39 1978.82,1212.74 1979.41,1212.41 1979.99,1213.96 1980.58,1210.8 1981.17,1206.72 1981.75,1210.84 1982.34,1214.9 1982.93,1216.06 1983.51,1214.19 1984.1,1212.57 1984.69,1211.21 1985.27,1210.13 1985.86,1213.24 1986.45,1212.88 1987.03,1214.1 1987.62,1215.41 1988.2,1213.41 1988.79,1211.77 1989.38,1212.98 1989.96,1211.34 1990.55,1211.12 1991.14,1214.08 1991.72,1213.64 1992.31,1212.19 1992.9,1216.22 1993.48,1215.92 1994.07,1212.94 1994.65,1211.04 1995.24,1212.52 1995.83,1212.39 1996.41,1212.26 1997,1209.49 1997.59,1208.27 1998.17,1208.34 1998.76,1206.68 1999.35,1204.06 1999.93,1204.61 2000.52,1206.03 2001.11,1207.8 2001.69,1206.59 2002.28,1210.95 2002.86,1211.18 2003.45,1212.7 2004.04,1215.33 2004.62,1219.19 2005.21,1218.96 2005.8,1219.9 2006.38,1219.61 2006.97,1220.44 2007.56,1222.75 2008.14,1216.66 2008.73,1215 2009.32,1215.03 2009.9,1213.48 2010.49,1213.35 2011.07,1210.54 2011.66,1210.34 2012.25,1210.35 2012.83,1211.64 2013.42,1212.98 2014.01,1209.2 2014.59,1209.41 2015.18,1208.27 2015.77,1209.66 2016.35,1208.63 2016.94,1205.86 2017.53,1207.32 2018.11,1208.81 2018.7,1209.02 2019.28,1207.87 2019.87,1205.17 2020.46,1201.21 2021.04,1203.2 2021.63,1202.22 2022.22,1202.73 2022.8,1204.43 2023.39,1202.07 2023.98,1204.2 2024.56,1204.53 2025.15,1203.57 2025.73,1198.52 2026.32,1200.53 2026.91,1198.37 2027.49,1198.97 2028.08,1198.3 2028.67,1197.67 2029.25,1195.36 2029.84,1194.99 2030.43,1195.78 2031.01,1196.48 2031.6,1197.27 2032.19,1198.21 2032.77,1199.15 2033.36,1197.03 2033.94,1199.29 2034.53,1199.69 2035.12,1199.01 2035.7,1201.09 2036.29,1201.46 2036.88,1203.1 2037.46,1205.1 2038.05,1204.16 2038.64,1205.99 2039.22,1205.22 2039.81,1205.46 2040.4,1204.39 2040.98,1207.5 2041.57,1209.22 2042.15,1207.93 2042.74,1205.48 2043.33,1207.42 2043.91,1204.82 2044.5,1206.6 2045.09,1204.17 2045.67,1204.31 2046.26,1203.55 2046.85,1205.66 2047.43,1205.04 2048.02,1205.42 2048.6,1206.03 2049.19,1207.86 2049.78,1209.45 2050.36,1206.9 2050.95,1205.74 2051.54,1205.87 2052.12,1206.1 2052.71,1207.68 2053.3,1209.08 2053.88,1210.56 2054.47,1209.06 2055.06,1209.17 2055.64,1210.6 2056.23,1209.16 2056.81,1213.66 2057.4,1219 2057.99,1222.36 2058.57,1221.71 2059.16,1221.32 2059.75,1224.82 2060.33,1225.39 2060.92,1225.99 2061.51,1226.4 2062.09,1225.45 2062.68,1223.25 2063.27,1222.66 2063.85,1224.76 2064.44,1224.18 2065.02,1221.8 2065.61,1219.76 2066.2,1218.01 2066.78,1217.6 2067.37,1218.47 2067.96,1222.05 2068.54,1224.04 2069.13,1221.86 2069.72,1222.6 2070.3,1221.83 2070.89,1218.64 2071.48,1219.5 2072.06,1217.64 2072.65,1215.8 2073.23,1217.01 2073.82,1215.25 2074.41,1216.21 2074.99,1218.63 2075.58,1215.57 2076.17,1216.54 2076.75,1216.33 2077.34,1213.25 2077.93,1214.36 2078.51,1214.06 2079.1,1213.64 2079.68,1213.69 2080.27,1212.11 2080.86,1213.36 2081.44,1213.07 2082.03,1211.66 2082.62,1211.49 2083.2,1214.22 2083.79,1216.8 2084.38,1217.82 2084.96,1216.38 2085.55,1214.68 2086.14,1211.91 2086.72,1211.94 2087.31,1210.87 2087.89,1208.01 2088.48,1205.28 2089.07,1204.31 2089.65,1204.67 2090.24,1206.2 2090.83,1206.47 2091.41,1208.45 2092,1207.46 2092.59,1204.97 2093.17,1205.46 2093.76,1204.09 2094.35,1201.89 2094.93,1202.51 2095.52,1206.04 2096.1,1208.82 2096.69,1208.98 2097.28,1209 2097.86,1207.89 2098.45,1206.62 2099.04,1206.72 2099.62,1205.91 2100.21,1206.39 2100.8,1203.8 2101.38,1205.44 2101.97,1205.95 2102.55,1207.83 2103.14,1210.94 2103.73,1208.25 2104.31,1208.02 2104.9,1210.92 2105.49,1212.33 2106.07,1213.99 2106.66,1216.6 2107.25,1217.92 2107.83,1217.85 2108.42,1218.98 2109.01,1218.53 2109.59,1219.55 2110.18,1219.29 2110.76,1219.08 2111.35,1214.54 2111.94,1215.77 2112.52,1214.08 2113.11,1213.89 2113.7,1213.73 2114.28,1213.73 2114.87,1212.39 2115.46,1210.97 2116.04,1212.42 2116.63,1214.84 2117.22,1214.77 2117.8,1215.99 2118.39,1213.13 2118.97,1210.37 2119.56,1212.9 2120.15,1213.22 2120.73,1213.37 2121.32,1213.06 2121.91,1212.99 2122.49,1213.04 2123.08,1213.2 2123.67,1213.45 2124.25,1216.04 2124.84,1214.13 2125.42,1213.55 2126.01,1209.31 2126.6,1210.79 2127.18,1208.04 2127.77,1208.08 2128.36,1209.52 2128.94,1208 2129.53,1208.36 2130.12,1212.49 2130.7,1213.66 2131.29,1214.64 2131.88,1214.35 2132.46,1212.6 2133.05,1213.8 2133.63,1213.53 2134.22,1210.53 2134.81,1209.48 2135.39,1208.24 2135.98,1205.41 2136.57,1205.65 2137.15,1204.51 2137.74,1211.73 2138.33,1214.15 2138.91,1212.56 2139.5,1209.52 2140.09,1213.64 2140.67,1211.98 2141.26,1209.17 2141.84,1210.79 2142.43,1212.14 2143.02,1207.98 2143.6,1206.74 2144.19,1207.09 2144.78,1207.28 2145.36,1203.07 2145.95,1207.58 2146.54,1207.66 2147.12,1210.41 2147.71,1209.15 2148.3,1211.13 2148.88,1211.35 2149.47,1211.32 2150.05,1211.52 2150.64,1211.73 2151.23,1213.14 2151.81,1209.1 2152.4,1210.65 2152.99,1212.17 2153.57,1214.7 2154.16,1213.08 2154.75,1212.81 2155.33,1217.9 2155.92,1217.45 2156.5,1215.86 2157.09,1215.69 2157.68,1216.66 2158.26,1216.29 \"/>\n<path clip-path=\"url(#clip992)\" d=\"M986.025 1211.69 L986.612 1211.69 L987.198 1211.69 L987.785 1211.69 L988.371 1211.69 L988.957 1211.69 L989.544 1211.69 L990.13 1211.69 L990.717 1211.69 L991.303 1211.69 L991.889 1211.69 L992.476 1211.69 L993.062 1211.69 L993.649 1211.69 L994.235 1211.69 L994.822 1211.69 L995.408 1211.69 L995.994 1211.69 L996.581 1211.69 L997.167 1211.69 L997.754 1211.69 L998.34 1211.69 L998.926 1211.69 L999.513 1211.69 L1000.1 1211.69 L1000.69 1211.69 L1001.27 1211.69 L1001.86 1211.69 L1002.44 1211.69 L1003.03 1211.69 L1003.62 1211.69 L1004.2 1211.69 L1004.79 1211.69 L1005.38 1211.69 L1005.96 1211.69 L1006.55 1211.69 L1007.14 1211.69 L1007.72 1211.69 L1008.31 1211.69 L1008.9 1211.69 L1009.48 1211.69 L1010.07 1211.69 L1010.65 1211.69 L1011.24 1211.69 L1011.83 1211.69 L1012.41 1211.69 L1013 1211.69 L1013.59 1211.69 L1014.17 1211.69 L1014.76 1211.69 L1015.35 1211.69 L1015.93 1211.69 L1016.52 1211.69 L1017.11 1211.69 L1017.69 1211.69 L1018.28 1211.69 L1018.86 1211.69 L1019.45 1211.69 L1020.04 1211.69 L1020.62 1211.69 L1021.21 1211.69 L1021.8 1211.69 L1022.38 1211.69 L1022.97 1211.69 L1023.56 1211.69 L1024.14 1211.69 L1024.73 1211.69 L1025.32 1211.69 L1025.9 1211.69 L1026.49 1211.69 L1027.07 1211.69 L1027.66 1211.69 L1028.25 1211.69 L1028.83 1211.69 L1029.42 1211.69 L1030.01 1211.69 L1030.59 1211.69 L1031.18 1211.69 L1031.77 1211.69 L1032.35 1211.69 L1032.94 1211.69 L1033.52 1211.69 L1034.11 1211.69 L1034.7 1211.69 L1035.28 1211.69 L1035.87 1211.69 L1036.46 1211.69 L1037.04 1211.69 L1037.63 1211.69 L1038.22 1211.69 L1038.8 1211.69 L1039.39 1211.69 L1039.98 1211.69 L1040.56 1211.69 L1041.15 1211.69 L1041.73 1211.69 L1042.32 1211.69 L1042.91 1211.69 L1043.49 1211.69 L1044.08 1211.69 L1044.67 1211.69 L1045.25 1211.69 L1045.84 1211.69 L1046.43 1211.69 L1047.01 1211.69 L1047.6 1211.69 L1048.19 1211.69 L1048.77 1211.69 L1049.36 1211.69 L1049.94 1211.69 L1050.53 1211.69 L1051.12 1211.69 L1051.7 1211.69 L1052.29 1211.69 L1052.88 1211.69 L1053.46 1211.69 L1054.05 1211.69 L1054.64 1211.69 L1055.22 1211.69 L1055.81 1211.69 L1056.39 1211.69 L1056.98 1211.69 L1057.57 1211.69 L1058.15 1211.69 L1058.74 1211.69 L1059.33 1211.69 L1059.91 1211.69 L1060.5 1211.69 L1061.09 1211.69 L1061.67 1211.69 L1062.26 1211.69 L1062.85 1211.69 L1063.43 1211.69 L1064.02 1211.69 L1064.6 1211.69 L1065.19 1211.69 L1065.78 1211.69 L1066.36 1211.69 L1066.95 1211.69 L1067.54 1211.69 L1068.12 1211.69 L1068.71 1211.69 L1069.3 1211.69 L1069.88 1211.69 L1070.47 1211.69 L1071.06 1211.69 L1071.64 1211.69 L1072.23 1211.69 L1072.81 1211.69 L1073.4 1211.69 L1073.99 1211.69 L1074.57 1211.69 L1075.16 1211.69 L1075.75 1211.69 L1076.33 1211.69 L1076.92 1211.69 L1077.51 1211.69 L1078.09 1211.69 L1078.68 1211.69 L1079.26 1211.69 L1079.85 1211.69 L1080.44 1211.69 L1081.02 1211.69 L1081.61 1211.69 L1082.2 1211.69 L1082.78 1211.69 L1083.37 1211.69 L1083.96 1211.69 L1084.54 1211.69 L1085.13 1211.69 L1085.72 1211.69 L1086.3 1211.69 L1086.89 1211.69 L1087.47 1211.69 L1088.06 1211.69 L1088.65 1211.69 L1089.23 1211.69 L1089.82 1211.69 L1090.41 1211.69 L1090.99 1211.69 L1091.58 1211.69 L1092.17 1211.69 L1092.75 1211.69 L1093.34 1211.69 L1093.93 1211.69 L1094.51 1211.69 L1095.1 1211.69 L1095.68 1211.69 L1096.27 1211.69 L1096.86 1211.69 L1097.44 1211.69 L1098.03 1211.69 L1098.62 1211.69 L1099.2 1211.69 L1099.79 1211.69 L1100.38 1211.69 L1100.96 1211.69 L1101.55 1211.69 L1102.14 1211.69 L1102.72 1211.69 L1103.31 1211.69 L1103.89 1211.69 L1104.48 1211.69 L1105.07 1211.69 L1105.65 1211.69 L1106.24 1211.69 L1106.83 1211.69 L1107.41 1211.69 L1108 1211.69 L1108.59 1211.69 L1109.17 1211.69 L1109.76 1211.69 L1110.34 1211.69 L1110.93 1211.69 L1111.52 1211.69 L1112.1 1211.69 L1112.69 1211.69 L1113.28 1211.69 L1113.86 1211.69 L1114.45 1211.69 L1115.04 1211.69 L1115.62 1211.69 L1116.21 1211.69 L1116.8 1211.69 L1117.38 1211.69 L1117.97 1211.69 L1118.55 1211.69 L1119.14 1211.69 L1119.73 1211.69 L1120.31 1211.69 L1120.9 1211.69 L1121.49 1211.69 L1122.07 1211.69 L1122.66 1211.69 L1123.25 1211.69 L1123.83 1211.69 L1124.42 1211.69 L1125.01 1211.69 L1125.59 1211.69 L1126.18 1211.69 L1126.76 1211.69 L1127.35 1211.69 L1127.94 1211.69 L1128.52 1211.69 L1129.11 1211.69 L1129.7 1211.69 L1130.28 1211.69 L1130.87 1211.69 L1131.46 1211.69 L1132.04 1211.69 L1132.63 1211.69 L1133.21 1211.69 L1133.8 1211.69 L1134.39 1211.69 L1134.97 1211.69 L1135.56 1211.69 L1136.15 1211.69 L1136.73 1211.69 L1137.32 1211.69 L1137.91 1211.69 L1138.49 1211.69 L1139.08 1211.69 L1139.67 1211.69 L1140.25 1211.69 L1140.84 1211.69 L1141.42 1211.69 L1142.01 1211.69 L1142.6 1211.69 L1143.18 1211.69 L1143.77 1211.69 L1144.36 1211.69 L1144.94 1211.69 L1145.53 1211.69 L1146.12 1211.69 L1146.7 1211.69 L1147.29 1211.69 L1147.88 1211.69 L1148.46 1211.69 L1149.05 1211.69 L1149.63 1211.69 L1150.22 1211.69 L1150.81 1211.69 L1151.39 1211.69 L1151.98 1211.69 L1152.57 1211.69 L1153.15 1211.69 L1153.74 1211.69 L1154.33 1211.69 L1154.91 1211.69 L1155.5 1211.69 L1156.09 1211.69 L1156.67 1211.69 L1157.26 1211.69 L1157.84 1211.69 L1158.43 1211.69 L1159.02 1211.69 L1159.6 1211.69 L1160.19 1211.69 L1160.78 1211.69 L1161.36 1211.69 L1161.95 1211.69 L1162.54 1211.69 L1163.12 1211.69 L1163.71 1211.69 L1164.29 1211.69 L1164.88 1211.69 L1165.47 1211.69 L1166.05 1211.69 L1166.64 1211.69 L1167.23 1211.69 L1167.81 1211.69 L1168.4 1211.69 L1168.99 1211.69 L1169.57 1211.69 L1170.16 1211.69 L1170.75 1211.69 L1171.33 1211.69 L1171.92 1211.69 L1172.5 1211.69 L1173.09 1211.69 L1173.68 1211.69 L1174.26 1211.69 L1174.85 1211.69 L1175.44 1211.69 L1176.02 1211.69 L1176.61 1211.69 L1177.2 1211.69 L1177.78 1211.69 L1178.37 1211.69 L1178.96 1211.69 L1179.54 1211.69 L1180.13 1211.69 L1180.71 1211.69 L1181.3 1211.69 L1181.89 1211.69 L1182.47 1211.69 L1183.06 1211.69 L1183.65 1211.69 L1184.23 1211.69 L1184.82 1211.69 L1185.41 1211.69 L1185.99 1211.69 L1186.58 1211.69 L1187.16 1211.69 L1187.75 1211.69 L1188.34 1211.69 L1188.92 1211.69 L1189.51 1211.69 L1190.1 1211.69 L1190.68 1211.69 L1191.27 1211.69 L1191.86 1211.69 L1192.44 1211.69 L1193.03 1211.69 L1193.62 1211.69 L1194.2 1211.69 L1194.79 1211.69 L1195.37 1211.69 L1195.96 1211.69 L1196.55 1211.69 L1197.13 1211.69 L1197.72 1211.69 L1198.31 1211.69 L1198.89 1211.69 L1199.48 1211.69 L1200.07 1211.69 L1200.65 1211.69 L1201.24 1211.69 L1201.83 1211.69 L1202.41 1211.69 L1203 1211.69 L1203.58 1211.69 L1204.17 1211.69 L1204.76 1211.69 L1205.34 1211.69 L1205.93 1211.69 L1206.52 1211.69 L1207.1 1211.69 L1207.69 1211.69 L1208.28 1211.69 L1208.86 1211.69 L1209.45 1211.69 L1210.03 1211.69 L1210.62 1211.69 L1211.21 1211.69 L1211.79 1211.69 L1212.38 1211.69 L1212.97 1211.69 L1213.55 1211.69 L1214.14 1211.69 L1214.73 1211.69 L1215.31 1211.69 L1215.9 1211.69 L1216.49 1211.69 L1217.07 1211.69 L1217.66 1211.69 L1218.24 1211.69 L1218.83 1211.69 L1219.42 1211.69 L1220 1211.69 L1220.59 1211.69 L1221.18 1211.69 L1221.76 1211.69 L1222.35 1211.69 L1222.94 1211.69 L1223.52 1211.69 L1224.11 1211.69 L1224.7 1211.69 L1225.28 1211.69 L1225.87 1211.69 L1226.45 1211.69 L1227.04 1211.69 L1227.63 1211.69 L1228.21 1211.69 L1228.8 1211.69 L1229.39 1211.69 L1229.97 1211.69 L1230.56 1211.69 L1231.15 1211.69 L1231.73 1211.69 L1232.32 1211.69 L1232.91 1211.69 L1233.49 1211.69 L1234.08 1211.69 L1234.66 1211.69 L1235.25 1211.69 L1235.84 1211.69 L1236.42 1211.69 L1237.01 1211.69 L1237.6 1211.69 L1238.18 1211.69 L1238.77 1211.69 L1239.36 1211.69 L1239.94 1211.69 L1240.53 1211.69 L1241.11 1211.69 L1241.7 1211.69 L1242.29 1211.69 L1242.87 1211.69 L1243.46 1211.69 L1244.05 1211.69 L1244.63 1211.69 L1245.22 1211.69 L1245.81 1211.69 L1246.39 1211.69 L1246.98 1211.69 L1247.57 1211.69 L1248.15 1211.69 L1248.74 1211.69 L1249.32 1211.69 L1249.91 1211.69 L1250.5 1211.69 L1251.08 1211.69 L1251.67 1211.69 L1252.26 1211.69 L1252.84 1211.69 L1253.43 1211.69 L1254.02 1211.69 L1254.6 1211.69 L1255.19 1211.69 L1255.78 1211.69 L1256.36 1211.69 L1256.95 1211.69 L1257.53 1211.69 L1258.12 1211.69 L1258.71 1211.69 L1259.29 1211.69 L1259.88 1211.69 L1260.47 1211.69 L1261.05 1211.69 L1261.64 1211.69 L1262.23 1211.69 L1262.81 1211.69 L1263.4 1211.69 L1263.98 1211.69 L1264.57 1211.69 L1265.16 1211.69 L1265.74 1211.69 L1266.33 1211.69 L1266.92 1211.69 L1267.5 1211.69 L1268.09 1211.69 L1268.68 1211.69 L1269.26 1211.69 L1269.85 1211.69 L1270.44 1211.69 L1271.02 1211.69 L1271.61 1211.69 L1272.19 1211.69 L1272.78 1211.69 L1273.37 1211.69 L1273.95 1211.69 L1274.54 1211.69 L1275.13 1211.69 L1275.71 1211.69 L1276.3 1211.69 L1276.89 1211.69 L1277.47 1211.69 L1278.06 1211.69 L1278.65 1211.69 L1279.23 1211.69 L1279.82 1211.69 L1280.4 1211.69 L1280.99 1211.69 L1281.58 1211.69 L1282.16 1211.69 L1282.75 1211.69 L1283.34 1211.69 L1283.92 1211.69 L1284.51 1211.69 L1285.1 1211.69 L1285.68 1211.69 L1286.27 1211.69 L1286.86 1211.69 L1287.44 1211.69 L1288.03 1211.69 L1288.61 1211.69 L1289.2 1211.69 L1289.79 1211.69 L1290.37 1211.69 L1290.96 1211.69 L1291.55 1211.69 L1292.13 1211.69 L1292.72 1211.69 L1293.31 1211.69 L1293.89 1211.69 L1294.48 1211.69 L1295.06 1211.69 L1295.65 1211.69 L1296.24 1211.69 L1296.82 1211.69 L1297.41 1211.69 L1298 1211.69 L1298.58 1211.69 L1299.17 1211.69 L1299.76 1211.69 L1300.34 1211.69 L1300.93 1211.69 L1301.52 1211.69 L1302.1 1211.69 L1302.69 1211.69 L1303.27 1211.69 L1303.86 1211.69 L1304.45 1211.69 L1305.03 1211.69 L1305.62 1211.69 L1306.21 1211.69 L1306.79 1211.69 L1307.38 1211.69 L1307.97 1211.69 L1308.55 1211.69 L1309.14 1211.69 L1309.73 1211.69 L1310.31 1211.69 L1310.9 1211.69 L1311.48 1211.69 L1312.07 1211.69 L1312.66 1211.69 L1313.24 1211.69 L1313.83 1211.69 L1314.42 1211.69 L1315 1211.69 L1315.59 1211.69 L1316.18 1211.69 L1316.76 1211.69 L1317.35 1211.69 L1317.93 1211.69 L1318.52 1211.69 L1319.11 1211.69 L1319.69 1211.69 L1320.28 1211.69 L1320.87 1211.69 L1321.45 1211.69 L1322.04 1211.69 L1322.63 1211.69 L1323.21 1211.69 L1323.8 1211.69 L1324.39 1211.69 L1324.97 1211.69 L1325.56 1211.69 L1326.14 1211.69 L1326.73 1211.69 L1327.32 1211.69 L1327.9 1211.69 L1328.49 1211.69 L1329.08 1211.69 L1329.66 1211.69 L1330.25 1211.69 L1330.84 1211.69 L1331.42 1211.69 L1332.01 1211.69 L1332.6 1211.69 L1333.18 1211.69 L1333.77 1211.69 L1334.35 1211.69 L1334.94 1211.69 L1335.53 1211.69 L1336.11 1211.69 L1336.7 1211.69 L1337.29 1211.69 L1337.87 1211.69 L1338.46 1211.69 L1339.05 1211.69 L1339.63 1211.69 L1340.22 1211.69 L1340.8 1211.69 L1341.39 1211.69 L1341.98 1211.69 L1342.56 1211.69 L1343.15 1211.69 L1343.74 1211.69 L1344.32 1211.69 L1344.91 1211.69 L1345.5 1211.69 L1346.08 1211.69 L1346.67 1211.69 L1347.26 1211.69 L1347.84 1211.69 L1348.43 1211.69 L1349.01 1211.69 L1349.6 1211.69 L1350.19 1211.69 L1350.77 1211.69 L1351.36 1211.69 L1351.95 1211.69 L1352.53 1211.69 L1353.12 1211.69 L1353.71 1211.69 L1354.29 1211.69 L1354.88 1211.69 L1355.47 1211.69 L1356.05 1211.69 L1356.64 1211.69 L1357.22 1211.69 L1357.81 1211.69 L1358.4 1211.69 L1358.98 1211.69 L1359.57 1211.69 L1360.16 1211.69 L1360.74 1211.69 L1361.33 1211.69 L1361.92 1211.69 L1362.5 1211.69 L1363.09 1211.69 L1363.68 1211.69 L1364.26 1211.69 L1364.85 1211.69 L1365.43 1211.69 L1366.02 1211.69 L1366.61 1211.69 L1367.19 1211.69 L1367.78 1211.69 L1368.37 1211.69 L1368.95 1211.69 L1369.54 1211.69 L1370.13 1211.69 L1370.71 1211.69 L1371.3 1211.69 L1371.88 1211.69 L1372.47 1211.69 L1373.06 1211.69 L1373.64 1211.69 L1374.23 1211.69 L1374.82 1211.69 L1375.4 1211.69 L1375.99 1211.69 L1376.58 1211.69 L1377.16 1211.69 L1377.75 1211.69 L1378.34 1211.69 L1378.92 1211.69 L1379.51 1211.69 L1380.09 1211.69 L1380.68 1211.69 L1381.27 1211.69 L1381.85 1211.69 L1382.44 1211.69 L1383.03 1211.69 L1383.61 1211.69 L1384.2 1211.69 L1384.79 1211.69 L1385.37 1211.69 L1385.96 1211.69 L1386.55 1211.69 L1387.13 1211.69 L1387.72 1211.69 L1388.3 1211.69 L1388.89 1211.69 L1389.48 1211.69 L1390.06 1211.69 L1390.65 1211.69 L1391.24 1211.69 L1391.82 1211.69 L1392.41 1211.69 L1393 1211.69 L1393.58 1211.69 L1394.17 1211.69 L1394.75 1211.69 L1395.34 1211.69 L1395.93 1211.69 L1396.51 1211.69 L1397.1 1211.69 L1397.69 1211.69 L1398.27 1211.69 L1398.86 1211.69 L1399.45 1211.69 L1400.03 1211.69 L1400.62 1211.69 L1401.21 1211.69 L1401.79 1211.69 L1402.38 1211.69 L1402.96 1211.69 L1403.55 1211.69 L1404.14 1211.69 L1404.72 1211.69 L1405.31 1211.69 L1405.9 1211.69 L1406.48 1211.69 L1407.07 1211.69 L1407.66 1211.69 L1408.24 1211.69 L1408.83 1211.69 L1409.42 1211.69 L1410 1211.69 L1410.59 1211.69 L1411.17 1211.69 L1411.76 1211.69 L1412.35 1211.69 L1412.93 1211.69 L1413.52 1211.69 L1414.11 1211.69 L1414.69 1211.69 L1415.28 1211.69 L1415.87 1211.69 L1416.45 1211.69 L1417.04 1211.69 L1417.63 1211.69 L1418.21 1211.69 L1418.8 1211.69 L1419.38 1211.69 L1419.97 1211.69 L1420.56 1211.69 L1421.14 1211.69 L1421.73 1211.69 L1422.32 1211.69 L1422.9 1211.69 L1423.49 1211.69 L1424.08 1211.69 L1424.66 1211.69 L1425.25 1211.69 L1425.83 1211.69 L1426.42 1211.69 L1427.01 1211.69 L1427.59 1211.69 L1428.18 1211.69 L1428.77 1211.69 L1429.35 1211.69 L1429.94 1211.69 L1430.53 1211.69 L1431.11 1211.69 L1431.7 1211.69 L1432.29 1211.69 L1432.87 1211.69 L1433.46 1211.69 L1434.04 1211.69 L1434.63 1211.69 L1435.22 1211.69 L1435.8 1211.69 L1436.39 1211.69 L1436.98 1211.69 L1437.56 1211.69 L1438.15 1211.69 L1438.74 1211.69 L1439.32 1211.69 L1439.91 1211.69 L1440.5 1211.69 L1441.08 1211.69 L1441.67 1211.69 L1442.25 1211.69 L1442.84 1211.69 L1443.43 1211.69 L1444.01 1211.69 L1444.6 1211.69 L1445.19 1211.69 L1445.77 1211.69 L1446.36 1211.69 L1446.95 1211.69 L1447.53 1211.69 L1448.12 1211.69 L1448.7 1211.69 L1449.29 1211.69 L1449.88 1211.69 L1450.46 1211.69 L1451.05 1211.69 L1451.64 1211.69 L1452.22 1211.69 L1452.81 1211.69 L1453.4 1211.69 L1453.98 1211.69 L1454.57 1211.69 L1455.16 1211.69 L1455.74 1211.69 L1456.33 1211.69 L1456.91 1211.69 L1457.5 1211.69 L1458.09 1211.69 L1458.67 1211.69 L1459.26 1211.69 L1459.85 1211.69 L1460.43 1211.69 L1461.02 1211.69 L1461.61 1211.69 L1462.19 1211.69 L1462.78 1211.69 L1463.37 1211.69 L1463.95 1211.69 L1464.54 1211.69 L1465.12 1211.69 L1465.71 1211.69 L1466.3 1211.69 L1466.88 1211.69 L1467.47 1211.69 L1468.06 1211.69 L1468.64 1211.69 L1469.23 1211.69 L1469.82 1211.69 L1470.4 1211.69 L1470.99 1211.69 L1471.57 1211.69 L1472.16 1211.69 L1472.75 1211.69 L1473.33 1211.69 L1473.92 1211.69 L1474.51 1211.69 L1475.09 1211.69 L1475.68 1211.69 L1476.27 1211.69 L1476.85 1211.69 L1477.44 1211.69 L1478.03 1211.69 L1478.61 1211.69 L1479.2 1211.69 L1479.78 1211.69 L1480.37 1211.69 L1480.96 1211.69 L1481.54 1211.69 L1482.13 1211.69 L1482.72 1211.69 L1483.3 1211.69 L1483.89 1211.69 L1484.48 1211.69 L1485.06 1211.69 L1485.65 1211.69 L1486.24 1211.69 L1486.82 1211.69 L1487.41 1211.69 L1487.99 1211.69 L1488.58 1211.69 L1489.17 1211.69 L1489.75 1211.69 L1490.34 1211.69 L1490.93 1211.69 L1491.51 1211.69 L1492.1 1211.69 L1492.69 1211.69 L1493.27 1211.69 L1493.86 1211.69 L1494.45 1211.69 L1495.03 1211.69 L1495.62 1211.69 L1496.2 1211.69 L1496.79 1211.69 L1497.38 1211.69 L1497.96 1211.69 L1498.55 1211.69 L1499.14 1211.69 L1499.72 1211.69 L1500.31 1211.69 L1500.9 1211.69 L1501.48 1211.69 L1502.07 1211.69 L1502.65 1211.69 L1503.24 1211.69 L1503.83 1211.69 L1504.41 1211.69 L1505 1211.69 L1505.59 1211.69 L1506.17 1211.69 L1506.76 1211.69 L1507.35 1211.69 L1507.93 1211.69 L1508.52 1211.69 L1509.11 1211.69 L1509.69 1211.69 L1510.28 1211.69 L1510.86 1211.69 L1511.45 1211.69 L1512.04 1211.69 L1512.62 1211.69 L1513.21 1211.69 L1513.8 1211.69 L1514.38 1211.69 L1514.97 1211.69 L1515.56 1211.69 L1516.14 1211.69 L1516.73 1211.69 L1517.32 1211.69 L1517.9 1211.69 L1518.49 1211.69 L1519.07 1211.69 L1519.66 1211.69 L1520.25 1211.69 L1520.83 1211.69 L1521.42 1211.69 L1522.01 1211.69 L1522.59 1211.69 L1523.18 1211.69 L1523.77 1211.69 L1524.35 1211.69 L1524.94 1211.69 L1525.52 1211.69 L1526.11 1211.69 L1526.7 1211.69 L1527.28 1211.69 L1527.87 1211.69 L1528.46 1211.69 L1529.04 1211.69 L1529.63 1211.69 L1530.22 1211.69 L1530.8 1211.69 L1531.39 1211.69 L1531.98 1211.69 L1532.56 1211.69 L1533.15 1211.69 L1533.73 1211.69 L1534.32 1211.69 L1534.91 1211.69 L1535.49 1211.69 L1536.08 1211.69 L1536.67 1211.69 L1537.25 1211.69 L1537.84 1211.69 L1538.43 1211.69 L1539.01 1211.69 L1539.6 1211.69 L1540.19 1211.69 L1540.77 1211.69 L1541.36 1211.69 L1541.94 1211.69 L1542.53 1211.69 L1543.12 1211.69 L1543.7 1211.69 L1544.29 1211.69 L1544.88 1211.69 L1545.46 1211.69 L1546.05 1211.69 L1546.64 1211.69 L1547.22 1211.69 L1547.81 1211.69 L1548.4 1211.69 L1548.98 1211.69 L1549.57 1211.69 L1550.15 1211.69 L1550.74 1211.69 L1551.33 1211.69 L1551.91 1211.69 L1552.5 1211.69 L1553.09 1211.69 L1553.67 1211.69 L1554.26 1211.69 L1554.85 1211.69 L1555.43 1211.69 L1556.02 1211.69 L1556.6 1211.69 L1557.19 1211.69 L1557.78 1211.69 L1558.36 1211.69 L1558.95 1211.69 L1559.54 1211.69 L1560.12 1211.69 L1560.71 1211.69 L1561.3 1211.69 L1561.88 1211.69 L1562.47 1211.69 L1563.06 1211.69 L1563.64 1211.69 L1564.23 1211.69 L1564.81 1211.69 L1565.4 1211.69 L1565.99 1211.69 L1566.57 1211.69 L1567.16 1211.69 L1567.75 1211.69 L1568.33 1211.69 L1568.92 1211.69 L1569.51 1211.69 L1570.09 1211.69 L1570.68 1211.69 L1571.27 1211.69 L1571.85 1211.69 L1572.44 1211.69 L1573.02 1211.69 L1573.61 1211.69 L1574.2 1211.69 L1574.78 1211.69 L1575.37 1211.69 L1575.96 1211.69 L1576.54 1211.69 L1577.13 1211.69 L1577.72 1211.69 L1578.3 1211.69 L1578.89 1211.69 L1579.47 1211.69 L1580.06 1211.69 L1580.65 1211.69 L1581.23 1211.69 L1581.82 1211.69 L1582.41 1211.69 L1582.99 1211.69 L1583.58 1211.69 L1584.17 1211.69 L1584.75 1211.69 L1585.34 1211.69 L1585.93 1211.69 L1586.51 1211.69 L1587.1 1211.69 L1587.68 1211.69 L1588.27 1211.69 L1588.86 1211.69 L1589.44 1211.69 L1590.03 1211.69 L1590.62 1211.69 L1591.2 1211.69 L1591.79 1211.69 L1592.38 1211.69 L1592.96 1211.69 L1593.55 1211.69 L1594.14 1211.69 L1594.72 1211.69 L1595.31 1211.69 L1595.89 1211.69 L1596.48 1211.69 L1597.07 1211.69 L1597.65 1211.69 L1598.24 1211.69 L1598.83 1211.69 L1599.41 1211.69 L1600 1211.69 L1600.59 1211.69 L1601.17 1211.69 L1601.76 1211.69 L1602.34 1211.69 L1602.93 1211.69 L1603.52 1211.69 L1604.1 1211.69 L1604.69 1211.69 L1605.28 1211.69 L1605.86 1211.69 L1606.45 1211.69 L1607.04 1211.69 L1607.62 1211.69 L1608.21 1211.69 L1608.8 1211.69 L1609.38 1211.69 L1609.97 1211.69 L1610.55 1211.69 L1611.14 1211.69 L1611.73 1211.69 L1612.31 1211.69 L1612.9 1211.69 L1613.49 1211.69 L1614.07 1211.69 L1614.66 1211.69 L1615.25 1211.69 L1615.83 1211.69 L1616.42 1211.69 L1617.01 1211.69 L1617.59 1211.69 L1618.18 1211.69 L1618.76 1211.69 L1619.35 1211.69 L1619.94 1211.69 L1620.52 1211.69 L1621.11 1211.69 L1621.7 1211.69 L1622.28 1211.69 L1622.87 1211.69 L1623.46 1211.69 L1624.04 1211.69 L1624.63 1211.69 L1625.22 1211.69 L1625.8 1211.69 L1626.39 1211.69 L1626.97 1211.69 L1627.56 1211.69 L1628.15 1211.69 L1628.73 1211.69 L1629.32 1211.69 L1629.91 1211.69 L1630.49 1211.69 L1631.08 1211.69 L1631.67 1211.69 L1632.25 1211.69 L1632.84 1211.69 L1633.42 1211.69 L1634.01 1211.69 L1634.6 1211.69 L1635.18 1211.69 L1635.77 1211.69 L1636.36 1211.69 L1636.94 1211.69 L1637.53 1211.69 L1638.12 1211.69 L1638.7 1211.69 L1639.29 1211.69 L1639.88 1211.69 L1640.46 1211.69 L1641.05 1211.69 L1641.63 1211.69 L1642.22 1211.69 L1642.81 1211.69 L1643.39 1211.69 L1643.98 1211.69 L1644.57 1211.69 L1645.15 1211.69 L1645.74 1211.69 L1646.33 1211.69 L1646.91 1211.69 L1647.5 1211.69 L1648.09 1211.69 L1648.67 1211.69 L1649.26 1211.69 L1649.84 1211.69 L1650.43 1211.69 L1651.02 1211.69 L1651.6 1211.69 L1652.19 1211.69 L1652.78 1211.69 L1653.36 1211.69 L1653.95 1211.69 L1654.54 1211.69 L1655.12 1211.69 L1655.71 1211.69 L1656.29 1211.69 L1656.88 1211.69 L1657.47 1211.69 L1658.05 1211.69 L1658.64 1211.69 L1659.23 1211.69 L1659.81 1211.69 L1660.4 1211.69 L1660.99 1211.69 L1661.57 1211.69 L1662.16 1211.69 L1662.75 1211.69 L1663.33 1211.69 L1663.92 1211.69 L1664.5 1211.69 L1665.09 1211.69 L1665.68 1211.69 L1666.26 1211.69 L1666.85 1211.69 L1667.44 1211.69 L1668.02 1211.69 L1668.61 1211.69 L1669.2 1211.69 L1669.78 1211.69 L1670.37 1211.69 L1670.96 1211.69 L1671.54 1211.69 L1672.13 1211.69 L1672.71 1211.69 L1673.3 1211.69 L1673.89 1211.69 L1674.47 1211.69 L1675.06 1211.69 L1675.65 1211.69 L1676.23 1211.69 L1676.82 1211.69 L1677.41 1211.69 L1677.99 1211.69 L1678.58 1211.69 L1679.17 1211.69 L1679.75 1211.69 L1680.34 1211.69 L1680.92 1211.69 L1681.51 1211.69 L1682.1 1211.69 L1682.68 1211.69 L1683.27 1211.69 L1683.86 1211.69 L1684.44 1211.69 L1685.03 1211.69 L1685.62 1211.69 L1686.2 1211.69 L1686.79 1211.69 L1687.37 1211.69 L1687.96 1211.69 L1688.55 1211.69 L1689.13 1211.69 L1689.72 1211.69 L1690.31 1211.69 L1690.89 1211.69 L1691.48 1211.69 L1692.07 1211.69 L1692.65 1211.69 L1693.24 1211.69 L1693.83 1211.69 L1694.41 1211.69 L1695 1211.69 L1695.58 1211.69 L1696.17 1211.69 L1696.76 1211.69 L1697.34 1211.69 L1697.93 1211.69 L1698.52 1211.69 L1699.1 1211.69 L1699.69 1211.69 L1700.28 1211.69 L1700.86 1211.69 L1701.45 1211.69 L1702.04 1211.69 L1702.62 1211.69 L1703.21 1211.69 L1703.79 1211.69 L1704.38 1211.69 L1704.97 1211.69 L1705.55 1211.69 L1706.14 1211.69 L1706.73 1211.69 L1707.31 1211.69 L1707.9 1211.69 L1708.49 1211.69 L1709.07 1211.69 L1709.66 1211.69 L1710.24 1211.69 L1710.83 1211.69 L1711.42 1211.69 L1712 1211.69 L1712.59 1211.69 L1713.18 1211.69 L1713.76 1211.69 L1714.35 1211.69 L1714.94 1211.69 L1715.52 1211.69 L1716.11 1211.69 L1716.7 1211.69 L1717.28 1211.69 L1717.87 1211.69 L1718.45 1211.69 L1719.04 1211.69 L1719.63 1211.69 L1720.21 1211.69 L1720.8 1211.69 L1721.39 1211.69 L1721.97 1211.69 L1722.56 1211.69 L1723.15 1211.69 L1723.73 1211.69 L1724.32 1211.69 L1724.91 1211.69 L1725.49 1211.69 L1726.08 1211.69 L1726.66 1211.69 L1727.25 1211.69 L1727.84 1211.69 L1728.42 1211.69 L1729.01 1211.69 L1729.6 1211.69 L1730.18 1211.69 L1730.77 1211.69 L1731.36 1211.69 L1731.94 1211.69 L1732.53 1211.69 L1733.11 1211.69 L1733.7 1211.69 L1734.29 1211.69 L1734.87 1211.69 L1735.46 1211.69 L1736.05 1211.69 L1736.63 1211.69 L1737.22 1211.69 L1737.81 1211.69 L1738.39 1211.69 L1738.98 1211.69 L1739.57 1211.69 L1740.15 1211.69 L1740.74 1211.69 L1741.32 1211.69 L1741.91 1211.69 L1742.5 1211.69 L1743.08 1211.69 L1743.67 1211.69 L1744.26 1211.69 L1744.84 1211.69 L1745.43 1211.69 L1746.02 1211.69 L1746.6 1211.69 L1747.19 1211.69 L1747.78 1211.69 L1748.36 1211.69 L1748.95 1211.69 L1749.53 1211.69 L1750.12 1211.69 L1750.71 1211.69 L1751.29 1211.69 L1751.88 1211.69 L1752.47 1211.69 L1753.05 1211.69 L1753.64 1211.69 L1754.23 1211.69 L1754.81 1211.69 L1755.4 1211.69 L1755.99 1211.69 L1756.57 1211.69 L1757.16 1211.69 L1757.74 1211.69 L1758.33 1211.69 L1758.92 1211.69 L1759.5 1211.69 L1760.09 1211.69 L1760.68 1211.69 L1761.26 1211.69 L1761.85 1211.69 L1762.44 1211.69 L1763.02 1211.69 L1763.61 1211.69 L1764.19 1211.69 L1764.78 1211.69 L1765.37 1211.69 L1765.95 1211.69 L1766.54 1211.69 L1767.13 1211.69 L1767.71 1211.69 L1768.3 1211.69 L1768.89 1211.69 L1769.47 1211.69 L1770.06 1211.69 L1770.65 1211.69 L1771.23 1211.69 L1771.82 1211.69 L1772.4 1211.69 L1772.99 1211.69 L1773.58 1211.69 L1774.16 1211.69 L1774.75 1211.69 L1775.34 1211.69 L1775.92 1211.69 L1776.51 1211.69 L1777.1 1211.69 L1777.68 1211.69 L1778.27 1211.69 L1778.86 1211.69 L1779.44 1211.69 L1780.03 1211.69 L1780.61 1211.69 L1781.2 1211.69 L1781.79 1211.69 L1782.37 1211.69 L1782.96 1211.69 L1783.55 1211.69 L1784.13 1211.69 L1784.72 1211.69 L1785.31 1211.69 L1785.89 1211.69 L1786.48 1211.69 L1787.06 1211.69 L1787.65 1211.69 L1788.24 1211.69 L1788.82 1211.69 L1789.41 1211.69 L1790 1211.69 L1790.58 1211.69 L1791.17 1211.69 L1791.76 1211.69 L1792.34 1211.69 L1792.93 1211.69 L1793.52 1211.69 L1794.1 1211.69 L1794.69 1211.69 L1795.27 1211.69 L1795.86 1211.69 L1796.45 1211.69 L1797.03 1211.69 L1797.62 1211.69 L1798.21 1211.69 L1798.79 1211.69 L1799.38 1211.69 L1799.97 1211.69 L1800.55 1211.69 L1801.14 1211.69 L1801.73 1211.69 L1802.31 1211.69 L1802.9 1211.69 L1803.48 1211.69 L1804.07 1211.69 L1804.66 1211.69 L1805.24 1211.69 L1805.83 1211.69 L1806.42 1211.69 L1807 1211.69 L1807.59 1211.69 L1808.18 1211.69 L1808.76 1211.69 L1809.35 1211.69 L1809.94 1211.69 L1810.52 1211.69 L1811.11 1211.69 L1811.69 1211.69 L1812.28 1211.69 L1812.87 1211.69 L1813.45 1211.69 L1814.04 1211.69 L1814.63 1211.69 L1815.21 1211.69 L1815.8 1211.69 L1816.39 1211.69 L1816.97 1211.69 L1817.56 1211.69 L1818.14 1211.69 L1818.73 1211.69 L1819.32 1211.69 L1819.9 1211.69 L1820.49 1211.69 L1821.08 1211.69 L1821.66 1211.69 L1822.25 1211.69 L1822.84 1211.69 L1823.42 1211.69 L1824.01 1211.69 L1824.6 1211.69 L1825.18 1211.69 L1825.77 1211.69 L1826.35 1211.69 L1826.94 1211.69 L1827.53 1211.69 L1828.11 1211.69 L1828.7 1211.69 L1829.29 1211.69 L1829.87 1211.69 L1830.46 1211.69 L1831.05 1211.69 L1831.63 1211.69 L1832.22 1211.69 L1832.81 1211.69 L1833.39 1211.69 L1833.98 1211.69 L1834.56 1211.69 L1835.15 1211.69 L1835.74 1211.69 L1836.32 1211.69 L1836.91 1211.69 L1837.5 1211.69 L1838.08 1211.69 L1838.67 1211.69 L1839.26 1211.69 L1839.84 1211.69 L1840.43 1211.69 L1841.01 1211.69 L1841.6 1211.69 L1842.19 1211.69 L1842.77 1211.69 L1843.36 1211.69 L1843.95 1211.69 L1844.53 1211.69 L1845.12 1211.69 L1845.71 1211.69 L1846.29 1211.69 L1846.88 1211.69 L1847.47 1211.69 L1848.05 1211.69 L1848.64 1211.69 L1849.22 1211.69 L1849.81 1211.69 L1850.4 1211.69 L1850.98 1211.69 L1851.57 1211.69 L1852.16 1211.69 L1852.74 1211.69 L1853.33 1211.69 L1853.92 1211.69 L1854.5 1211.69 L1855.09 1211.69 L1855.68 1211.69 L1856.26 1211.69 L1856.85 1211.69 L1857.43 1211.69 L1858.02 1211.69 L1858.61 1211.69 L1859.19 1211.69 L1859.78 1211.69 L1860.37 1211.69 L1860.95 1211.69 L1861.54 1211.69 L1862.13 1211.69 L1862.71 1211.69 L1863.3 1211.69 L1863.88 1211.69 L1864.47 1211.69 L1865.06 1211.69 L1865.64 1211.69 L1866.23 1211.69 L1866.82 1211.69 L1867.4 1211.69 L1867.99 1211.69 L1868.58 1211.69 L1869.16 1211.69 L1869.75 1211.69 L1870.34 1211.69 L1870.92 1211.69 L1871.51 1211.69 L1872.09 1211.69 L1872.68 1211.69 L1873.27 1211.69 L1873.85 1211.69 L1874.44 1211.69 L1875.03 1211.69 L1875.61 1211.69 L1876.2 1211.69 L1876.79 1211.69 L1877.37 1211.69 L1877.96 1211.69 L1878.55 1211.69 L1879.13 1211.69 L1879.72 1211.69 L1880.3 1211.69 L1880.89 1211.69 L1881.48 1211.69 L1882.06 1211.69 L1882.65 1211.69 L1883.24 1211.69 L1883.82 1211.69 L1884.41 1211.69 L1885 1211.69 L1885.58 1211.69 L1886.17 1211.69 L1886.76 1211.69 L1887.34 1211.69 L1887.93 1211.69 L1888.51 1211.69 L1889.1 1211.69 L1889.69 1211.69 L1890.27 1211.69 L1890.86 1211.69 L1891.45 1211.69 L1892.03 1211.69 L1892.62 1211.69 L1893.21 1211.69 L1893.79 1211.69 L1894.38 1211.69 L1894.96 1211.69 L1895.55 1211.69 L1896.14 1211.69 L1896.72 1211.69 L1897.31 1211.69 L1897.9 1211.69 L1898.48 1211.69 L1899.07 1211.69 L1899.66 1211.69 L1900.24 1211.69 L1900.83 1211.69 L1901.42 1211.69 L1902 1211.69 L1902.59 1211.69 L1903.17 1211.69 L1903.76 1211.69 L1904.35 1211.69 L1904.93 1211.69 L1905.52 1211.69 L1906.11 1211.69 L1906.69 1211.69 L1907.28 1211.69 L1907.87 1211.69 L1908.45 1211.69 L1909.04 1211.69 L1909.63 1211.69 L1910.21 1211.69 L1910.8 1211.69 L1911.38 1211.69 L1911.97 1211.69 L1912.56 1211.69 L1913.14 1211.69 L1913.73 1211.69 L1914.32 1211.69 L1914.9 1211.69 L1915.49 1211.69 L1916.08 1211.69 L1916.66 1211.69 L1917.25 1211.69 L1917.83 1211.69 L1918.42 1211.69 L1919.01 1211.69 L1919.59 1211.69 L1920.18 1211.69 L1920.77 1211.69 L1921.35 1211.69 L1921.94 1211.69 L1922.53 1211.69 L1923.11 1211.69 L1923.7 1211.69 L1924.29 1211.69 L1924.87 1211.69 L1925.46 1211.69 L1926.04 1211.69 L1926.63 1211.69 L1927.22 1211.69 L1927.8 1211.69 L1928.39 1211.69 L1928.98 1211.69 L1929.56 1211.69 L1930.15 1211.69 L1930.74 1211.69 L1931.32 1211.69 L1931.91 1211.69 L1932.5 1211.69 L1933.08 1211.69 L1933.67 1211.69 L1934.25 1211.69 L1934.84 1211.69 L1935.43 1211.69 L1936.01 1211.69 L1936.6 1211.69 L1937.19 1211.69 L1937.77 1211.69 L1938.36 1211.69 L1938.95 1211.69 L1939.53 1211.69 L1940.12 1211.69 L1940.71 1211.69 L1941.29 1211.69 L1941.88 1211.69 L1942.46 1211.69 L1943.05 1211.69 L1943.64 1211.69 L1944.22 1211.69 L1944.81 1211.69 L1945.4 1211.69 L1945.98 1211.69 L1946.57 1211.69 L1947.16 1211.69 L1947.74 1211.69 L1948.33 1211.69 L1948.91 1211.69 L1949.5 1211.69 L1950.09 1211.69 L1950.67 1211.69 L1951.26 1211.69 L1951.85 1211.69 L1952.43 1211.69 L1953.02 1211.69 L1953.61 1211.69 L1954.19 1211.69 L1954.78 1211.69 L1955.37 1211.69 L1955.95 1211.69 L1956.54 1211.69 L1957.12 1211.69 L1957.71 1211.69 L1958.3 1211.69 L1958.88 1211.69 L1959.47 1211.69 L1960.06 1211.69 L1960.64 1211.69 L1961.23 1211.69 L1961.82 1211.69 L1962.4 1211.69 L1962.99 1211.69 L1963.58 1211.69 L1964.16 1211.69 L1964.75 1211.69 L1965.33 1211.69 L1965.92 1211.69 L1966.51 1211.69 L1967.09 1211.69 L1967.68 1211.69 L1968.27 1211.69 L1968.85 1211.69 L1969.44 1211.69 L1970.03 1211.69 L1970.61 1211.69 L1971.2 1211.69 L1971.78 1211.69 L1972.37 1211.69 L1972.96 1211.69 L1973.54 1211.69 L1974.13 1211.69 L1974.72 1211.69 L1975.3 1211.69 L1975.89 1211.69 L1976.48 1211.69 L1977.06 1211.69 L1977.65 1211.69 L1978.24 1211.69 L1978.82 1211.69 L1979.41 1211.69 L1979.99 1211.69 L1980.58 1211.69 L1981.17 1211.69 L1981.75 1211.69 L1982.34 1211.69 L1982.93 1211.69 L1983.51 1211.69 L1984.1 1211.69 L1984.69 1211.69 L1985.27 1211.69 L1985.86 1211.69 L1986.45 1211.69 L1987.03 1211.69 L1987.62 1211.69 L1988.2 1211.69 L1988.79 1211.69 L1989.38 1211.69 L1989.96 1211.69 L1990.55 1211.69 L1991.14 1211.69 L1991.72 1211.69 L1992.31 1211.69 L1992.9 1211.69 L1993.48 1211.69 L1994.07 1211.69 L1994.65 1211.69 L1995.24 1211.69 L1995.83 1211.69 L1996.41 1211.69 L1997 1211.69 L1997.59 1211.69 L1998.17 1211.69 L1998.76 1211.69 L1999.35 1211.69 L1999.93 1211.69 L2000.52 1211.69 L2001.11 1211.69 L2001.69 1211.69 L2002.28 1211.69 L2002.86 1211.69 L2003.45 1211.69 L2004.04 1211.69 L2004.62 1211.69 L2005.21 1211.69 L2005.8 1211.69 L2006.38 1211.69 L2006.97 1211.69 L2007.56 1211.69 L2008.14 1211.69 L2008.73 1211.69 L2009.32 1211.69 L2009.9 1211.69 L2010.49 1211.69 L2011.07 1211.69 L2011.66 1211.69 L2012.25 1211.69 L2012.83 1211.69 L2013.42 1211.69 L2014.01 1211.69 L2014.59 1211.69 L2015.18 1211.69 L2015.77 1211.69 L2016.35 1211.69 L2016.94 1211.69 L2017.53 1211.69 L2018.11 1211.69 L2018.7 1211.69 L2019.28 1211.69 L2019.87 1211.69 L2020.46 1211.69 L2021.04 1211.69 L2021.63 1211.69 L2022.22 1211.69 L2022.8 1211.69 L2023.39 1211.69 L2023.98 1211.69 L2024.56 1211.69 L2025.15 1211.69 L2025.73 1211.69 L2026.32 1211.69 L2026.91 1211.69 L2027.49 1211.69 L2028.08 1211.69 L2028.67 1211.69 L2029.25 1211.69 L2029.84 1211.69 L2030.43 1211.69 L2031.01 1211.69 L2031.6 1211.69 L2032.19 1211.69 L2032.77 1211.69 L2033.36 1211.69 L2033.94 1211.69 L2034.53 1211.69 L2035.12 1211.69 L2035.7 1211.69 L2036.29 1211.69 L2036.88 1211.69 L2037.46 1211.69 L2038.05 1211.69 L2038.64 1211.69 L2039.22 1211.69 L2039.81 1211.69 L2040.4 1211.69 L2040.98 1211.69 L2041.57 1211.69 L2042.15 1211.69 L2042.74 1211.69 L2043.33 1211.69 L2043.91 1211.69 L2044.5 1211.69 L2045.09 1211.69 L2045.67 1211.69 L2046.26 1211.69 L2046.85 1211.69 L2047.43 1211.69 L2048.02 1211.69 L2048.6 1211.69 L2049.19 1211.69 L2049.78 1211.69 L2050.36 1211.69 L2050.95 1211.69 L2051.54 1211.69 L2052.12 1211.69 L2052.71 1211.69 L2053.3 1211.69 L2053.88 1211.69 L2054.47 1211.69 L2055.06 1211.69 L2055.64 1211.69 L2056.23 1211.69 L2056.81 1211.69 L2057.4 1211.69 L2057.99 1211.69 L2058.57 1211.69 L2059.16 1211.69 L2059.75 1211.69 L2060.33 1211.69 L2060.92 1211.69 L2061.51 1211.69 L2062.09 1211.69 L2062.68 1211.69 L2063.27 1211.69 L2063.85 1211.69 L2064.44 1211.69 L2065.02 1211.69 L2065.61 1211.69 L2066.2 1211.69 L2066.78 1211.69 L2067.37 1211.69 L2067.96 1211.69 L2068.54 1211.69 L2069.13 1211.69 L2069.72 1211.69 L2070.3 1211.69 L2070.89 1211.69 L2071.48 1211.69 L2072.06 1211.69 L2072.65 1211.69 L2073.23 1211.69 L2073.82 1211.69 L2074.41 1211.69 L2074.99 1211.69 L2075.58 1211.69 L2076.17 1211.69 L2076.75 1211.69 L2077.34 1211.69 L2077.93 1211.69 L2078.51 1211.69 L2079.1 1211.69 L2079.68 1211.69 L2080.27 1211.69 L2080.86 1211.69 L2081.44 1211.69 L2082.03 1211.69 L2082.62 1211.69 L2083.2 1211.69 L2083.79 1211.69 L2084.38 1211.69 L2084.96 1211.69 L2085.55 1211.69 L2086.14 1211.69 L2086.72 1211.69 L2087.31 1211.69 L2087.89 1211.69 L2088.48 1211.69 L2089.07 1211.69 L2089.65 1211.69 L2090.24 1211.69 L2090.83 1211.69 L2091.41 1211.69 L2092 1211.69 L2092.59 1211.69 L2093.17 1211.69 L2093.76 1211.69 L2094.35 1211.69 L2094.93 1211.69 L2095.52 1211.69 L2096.1 1211.69 L2096.69 1211.69 L2097.28 1211.69 L2097.86 1211.69 L2098.45 1211.69 L2099.04 1211.69 L2099.62 1211.69 L2100.21 1211.69 L2100.8 1211.69 L2101.38 1211.69 L2101.97 1211.69 L2102.55 1211.69 L2103.14 1211.69 L2103.73 1211.69 L2104.31 1211.69 L2104.9 1211.69 L2105.49 1211.69 L2106.07 1211.69 L2106.66 1211.69 L2107.25 1211.69 L2107.83 1211.69 L2108.42 1211.69 L2109.01 1211.69 L2109.59 1211.69 L2110.18 1211.69 L2110.76 1211.69 L2111.35 1211.69 L2111.94 1211.69 L2112.52 1211.69 L2113.11 1211.69 L2113.7 1211.69 L2114.28 1211.69 L2114.87 1211.69 L2115.46 1211.69 L2116.04 1211.69 L2116.63 1211.69 L2117.22 1211.69 L2117.8 1211.69 L2118.39 1211.69 L2118.97 1211.69 L2119.56 1211.69 L2120.15 1211.69 L2120.73 1211.69 L2121.32 1211.69 L2121.91 1211.69 L2122.49 1211.69 L2123.08 1211.69 L2123.67 1211.69 L2124.25 1211.69 L2124.84 1211.69 L2125.42 1211.69 L2126.01 1211.69 L2126.6 1211.69 L2127.18 1211.69 L2127.77 1211.69 L2128.36 1211.69 L2128.94 1211.69 L2129.53 1211.69 L2130.12 1211.69 L2130.7 1211.69 L2131.29 1211.69 L2131.88 1211.69 L2132.46 1211.69 L2133.05 1211.69 L2133.63 1211.69 L2134.22 1211.69 L2134.81 1211.69 L2135.39 1211.69 L2135.98 1211.69 L2136.57 1211.69 L2137.15 1211.69 L2137.74 1211.69 L2138.33 1211.69 L2138.91 1211.69 L2139.5 1211.69 L2140.09 1211.69 L2140.67 1211.69 L2141.26 1211.69 L2141.84 1211.69 L2142.43 1211.69 L2143.02 1211.69 L2143.6 1211.69 L2144.19 1211.69 L2144.78 1211.69 L2145.36 1211.69 L2145.95 1211.69 L2146.54 1211.69 L2147.12 1211.69 L2147.71 1211.69 L2148.3 1211.69 L2148.88 1211.69 L2149.47 1211.69 L2150.05 1211.69 L2150.64 1211.69 L2151.23 1211.69 L2151.81 1211.69 L2152.4 1211.69 L2152.99 1211.69 L2153.57 1211.69 L2154.16 1211.69 L2154.75 1211.69 L2155.33 1211.69 L2155.92 1211.69 L2156.5 1211.69 L2157.09 1211.69 L2157.68 1211.69 L2158.26 1211.69 L2158.26 1210.81 L2157.68 1210.81 L2157.09 1210.81 L2156.5 1210.81 L2155.92 1210.81 L2155.33 1210.81 L2154.75 1210.81 L2154.16 1210.81 L2153.57 1210.81 L2152.99 1210.81 L2152.4 1210.81 L2151.81 1210.81 L2151.23 1210.81 L2150.64 1210.81 L2150.05 1210.81 L2149.47 1210.81 L2148.88 1210.81 L2148.3 1210.81 L2147.71 1210.81 L2147.12 1210.81 L2146.54 1210.81 L2145.95 1210.81 L2145.36 1210.81 L2144.78 1210.81 L2144.19 1210.81 L2143.6 1210.81 L2143.02 1210.81 L2142.43 1210.81 L2141.84 1210.81 L2141.26 1210.81 L2140.67 1210.81 L2140.09 1210.81 L2139.5 1210.81 L2138.91 1210.81 L2138.33 1210.81 L2137.74 1210.81 L2137.15 1210.81 L2136.57 1210.81 L2135.98 1210.81 L2135.39 1210.81 L2134.81 1210.81 L2134.22 1210.81 L2133.63 1210.81 L2133.05 1210.81 L2132.46 1210.81 L2131.88 1210.81 L2131.29 1210.81 L2130.7 1210.81 L2130.12 1210.81 L2129.53 1210.81 L2128.94 1210.81 L2128.36 1210.81 L2127.77 1210.81 L2127.18 1210.81 L2126.6 1210.81 L2126.01 1210.81 L2125.42 1210.81 L2124.84 1210.81 L2124.25 1210.81 L2123.67 1210.81 L2123.08 1210.81 L2122.49 1210.81 L2121.91 1210.81 L2121.32 1210.81 L2120.73 1210.81 L2120.15 1210.81 L2119.56 1210.81 L2118.97 1210.81 L2118.39 1210.81 L2117.8 1210.81 L2117.22 1210.81 L2116.63 1210.81 L2116.04 1210.81 L2115.46 1210.81 L2114.87 1210.81 L2114.28 1210.81 L2113.7 1210.81 L2113.11 1210.81 L2112.52 1210.81 L2111.94 1210.81 L2111.35 1210.81 L2110.76 1210.81 L2110.18 1210.81 L2109.59 1210.81 L2109.01 1210.81 L2108.42 1210.81 L2107.83 1210.81 L2107.25 1210.81 L2106.66 1210.81 L2106.07 1210.81 L2105.49 1210.81 L2104.9 1210.81 L2104.31 1210.81 L2103.73 1210.81 L2103.14 1210.81 L2102.55 1210.81 L2101.97 1210.81 L2101.38 1210.81 L2100.8 1210.81 L2100.21 1210.81 L2099.62 1210.81 L2099.04 1210.81 L2098.45 1210.81 L2097.86 1210.81 L2097.28 1210.81 L2096.69 1210.81 L2096.1 1210.81 L2095.52 1210.81 L2094.93 1210.81 L2094.35 1210.81 L2093.76 1210.81 L2093.17 1210.81 L2092.59 1210.81 L2092 1210.81 L2091.41 1210.81 L2090.83 1210.81 L2090.24 1210.81 L2089.65 1210.81 L2089.07 1210.81 L2088.48 1210.81 L2087.89 1210.81 L2087.31 1210.81 L2086.72 1210.81 L2086.14 1210.81 L2085.55 1210.81 L2084.96 1210.81 L2084.38 1210.81 L2083.79 1210.81 L2083.2 1210.81 L2082.62 1210.81 L2082.03 1210.81 L2081.44 1210.81 L2080.86 1210.81 L2080.27 1210.81 L2079.68 1210.81 L2079.1 1210.81 L2078.51 1210.81 L2077.93 1210.81 L2077.34 1210.81 L2076.75 1210.81 L2076.17 1210.81 L2075.58 1210.81 L2074.99 1210.81 L2074.41 1210.81 L2073.82 1210.81 L2073.23 1210.81 L2072.65 1210.81 L2072.06 1210.81 L2071.48 1210.81 L2070.89 1210.81 L2070.3 1210.81 L2069.72 1210.81 L2069.13 1210.81 L2068.54 1210.81 L2067.96 1210.81 L2067.37 1210.81 L2066.78 1210.81 L2066.2 1210.81 L2065.61 1210.81 L2065.02 1210.81 L2064.44 1210.81 L2063.85 1210.81 L2063.27 1210.81 L2062.68 1210.81 L2062.09 1210.81 L2061.51 1210.81 L2060.92 1210.81 L2060.33 1210.81 L2059.75 1210.81 L2059.16 1210.81 L2058.57 1210.81 L2057.99 1210.81 L2057.4 1210.81 L2056.81 1210.81 L2056.23 1210.81 L2055.64 1210.81 L2055.06 1210.81 L2054.47 1210.81 L2053.88 1210.81 L2053.3 1210.81 L2052.71 1210.81 L2052.12 1210.81 L2051.54 1210.81 L2050.95 1210.81 L2050.36 1210.81 L2049.78 1210.81 L2049.19 1210.81 L2048.6 1210.81 L2048.02 1210.81 L2047.43 1210.81 L2046.85 1210.81 L2046.26 1210.81 L2045.67 1210.81 L2045.09 1210.81 L2044.5 1210.81 L2043.91 1210.81 L2043.33 1210.81 L2042.74 1210.81 L2042.15 1210.81 L2041.57 1210.81 L2040.98 1210.81 L2040.4 1210.81 L2039.81 1210.81 L2039.22 1210.81 L2038.64 1210.81 L2038.05 1210.81 L2037.46 1210.81 L2036.88 1210.81 L2036.29 1210.81 L2035.7 1210.81 L2035.12 1210.81 L2034.53 1210.81 L2033.94 1210.81 L2033.36 1210.81 L2032.77 1210.81 L2032.19 1210.81 L2031.6 1210.81 L2031.01 1210.81 L2030.43 1210.81 L2029.84 1210.81 L2029.25 1210.81 L2028.67 1210.81 L2028.08 1210.81 L2027.49 1210.81 L2026.91 1210.81 L2026.32 1210.81 L2025.73 1210.81 L2025.15 1210.81 L2024.56 1210.81 L2023.98 1210.81 L2023.39 1210.81 L2022.8 1210.81 L2022.22 1210.81 L2021.63 1210.81 L2021.04 1210.81 L2020.46 1210.81 L2019.87 1210.81 L2019.28 1210.81 L2018.7 1210.81 L2018.11 1210.81 L2017.53 1210.81 L2016.94 1210.81 L2016.35 1210.81 L2015.77 1210.81 L2015.18 1210.81 L2014.59 1210.81 L2014.01 1210.81 L2013.42 1210.81 L2012.83 1210.81 L2012.25 1210.81 L2011.66 1210.81 L2011.07 1210.81 L2010.49 1210.81 L2009.9 1210.81 L2009.32 1210.81 L2008.73 1210.81 L2008.14 1210.81 L2007.56 1210.81 L2006.97 1210.81 L2006.38 1210.81 L2005.8 1210.81 L2005.21 1210.81 L2004.62 1210.81 L2004.04 1210.81 L2003.45 1210.81 L2002.86 1210.81 L2002.28 1210.81 L2001.69 1210.81 L2001.11 1210.81 L2000.52 1210.81 L1999.93 1210.81 L1999.35 1210.81 L1998.76 1210.81 L1998.17 1210.81 L1997.59 1210.81 L1997 1210.81 L1996.41 1210.81 L1995.83 1210.81 L1995.24 1210.81 L1994.65 1210.81 L1994.07 1210.81 L1993.48 1210.81 L1992.9 1210.81 L1992.31 1210.81 L1991.72 1210.81 L1991.14 1210.81 L1990.55 1210.81 L1989.96 1210.81 L1989.38 1210.81 L1988.79 1210.81 L1988.2 1210.81 L1987.62 1210.81 L1987.03 1210.81 L1986.45 1210.81 L1985.86 1210.81 L1985.27 1210.81 L1984.69 1210.81 L1984.1 1210.81 L1983.51 1210.81 L1982.93 1210.81 L1982.34 1210.81 L1981.75 1210.81 L1981.17 1210.81 L1980.58 1210.81 L1979.99 1210.81 L1979.41 1210.81 L1978.82 1210.81 L1978.24 1210.81 L1977.65 1210.81 L1977.06 1210.81 L1976.48 1210.81 L1975.89 1210.81 L1975.3 1210.81 L1974.72 1210.81 L1974.13 1210.81 L1973.54 1210.81 L1972.96 1210.81 L1972.37 1210.81 L1971.78 1210.81 L1971.2 1210.81 L1970.61 1210.81 L1970.03 1210.81 L1969.44 1210.81 L1968.85 1210.81 L1968.27 1210.81 L1967.68 1210.81 L1967.09 1210.81 L1966.51 1210.81 L1965.92 1210.81 L1965.33 1210.81 L1964.75 1210.81 L1964.16 1210.81 L1963.58 1210.81 L1962.99 1210.81 L1962.4 1210.81 L1961.82 1210.81 L1961.23 1210.81 L1960.64 1210.81 L1960.06 1210.81 L1959.47 1210.81 L1958.88 1210.81 L1958.3 1210.81 L1957.71 1210.81 L1957.12 1210.81 L1956.54 1210.81 L1955.95 1210.81 L1955.37 1210.81 L1954.78 1210.81 L1954.19 1210.81 L1953.61 1210.81 L1953.02 1210.81 L1952.43 1210.81 L1951.85 1210.81 L1951.26 1210.81 L1950.67 1210.81 L1950.09 1210.81 L1949.5 1210.81 L1948.91 1210.81 L1948.33 1210.81 L1947.74 1210.81 L1947.16 1210.81 L1946.57 1210.81 L1945.98 1210.81 L1945.4 1210.81 L1944.81 1210.81 L1944.22 1210.81 L1943.64 1210.81 L1943.05 1210.81 L1942.46 1210.81 L1941.88 1210.81 L1941.29 1210.81 L1940.71 1210.81 L1940.12 1210.81 L1939.53 1210.81 L1938.95 1210.81 L1938.36 1210.81 L1937.77 1210.81 L1937.19 1210.81 L1936.6 1210.81 L1936.01 1210.81 L1935.43 1210.81 L1934.84 1210.81 L1934.25 1210.81 L1933.67 1210.81 L1933.08 1210.81 L1932.5 1210.81 L1931.91 1210.81 L1931.32 1210.81 L1930.74 1210.81 L1930.15 1210.81 L1929.56 1210.81 L1928.98 1210.81 L1928.39 1210.81 L1927.8 1210.81 L1927.22 1210.81 L1926.63 1210.81 L1926.04 1210.81 L1925.46 1210.81 L1924.87 1210.81 L1924.29 1210.81 L1923.7 1210.81 L1923.11 1210.81 L1922.53 1210.81 L1921.94 1210.81 L1921.35 1210.81 L1920.77 1210.81 L1920.18 1210.81 L1919.59 1210.81 L1919.01 1210.81 L1918.42 1210.81 L1917.83 1210.81 L1917.25 1210.81 L1916.66 1210.81 L1916.08 1210.81 L1915.49 1210.81 L1914.9 1210.81 L1914.32 1210.81 L1913.73 1210.81 L1913.14 1210.81 L1912.56 1210.81 L1911.97 1210.81 L1911.38 1210.81 L1910.8 1210.81 L1910.21 1210.81 L1909.63 1210.81 L1909.04 1210.81 L1908.45 1210.81 L1907.87 1210.81 L1907.28 1210.81 L1906.69 1210.81 L1906.11 1210.81 L1905.52 1210.81 L1904.93 1210.81 L1904.35 1210.81 L1903.76 1210.81 L1903.17 1210.81 L1902.59 1210.81 L1902 1210.81 L1901.42 1210.81 L1900.83 1210.81 L1900.24 1210.81 L1899.66 1210.81 L1899.07 1210.81 L1898.48 1210.81 L1897.9 1210.81 L1897.31 1210.81 L1896.72 1210.81 L1896.14 1210.81 L1895.55 1210.81 L1894.96 1210.81 L1894.38 1210.81 L1893.79 1210.81 L1893.21 1210.81 L1892.62 1210.81 L1892.03 1210.81 L1891.45 1210.81 L1890.86 1210.81 L1890.27 1210.81 L1889.69 1210.81 L1889.1 1210.81 L1888.51 1210.81 L1887.93 1210.81 L1887.34 1210.81 L1886.76 1210.81 L1886.17 1210.81 L1885.58 1210.81 L1885 1210.81 L1884.41 1210.81 L1883.82 1210.81 L1883.24 1210.81 L1882.65 1210.81 L1882.06 1210.81 L1881.48 1210.81 L1880.89 1210.81 L1880.3 1210.81 L1879.72 1210.81 L1879.13 1210.81 L1878.55 1210.81 L1877.96 1210.81 L1877.37 1210.81 L1876.79 1210.81 L1876.2 1210.81 L1875.61 1210.81 L1875.03 1210.81 L1874.44 1210.81 L1873.85 1210.81 L1873.27 1210.81 L1872.68 1210.81 L1872.09 1210.81 L1871.51 1210.81 L1870.92 1210.81 L1870.34 1210.81 L1869.75 1210.81 L1869.16 1210.81 L1868.58 1210.81 L1867.99 1210.81 L1867.4 1210.81 L1866.82 1210.81 L1866.23 1210.81 L1865.64 1210.81 L1865.06 1210.81 L1864.47 1210.81 L1863.88 1210.81 L1863.3 1210.81 L1862.71 1210.81 L1862.13 1210.81 L1861.54 1210.81 L1860.95 1210.81 L1860.37 1210.81 L1859.78 1210.81 L1859.19 1210.81 L1858.61 1210.81 L1858.02 1210.81 L1857.43 1210.81 L1856.85 1210.81 L1856.26 1210.81 L1855.68 1210.81 L1855.09 1210.81 L1854.5 1210.81 L1853.92 1210.81 L1853.33 1210.81 L1852.74 1210.81 L1852.16 1210.81 L1851.57 1210.81 L1850.98 1210.81 L1850.4 1210.81 L1849.81 1210.81 L1849.22 1210.81 L1848.64 1210.81 L1848.05 1210.81 L1847.47 1210.81 L1846.88 1210.81 L1846.29 1210.81 L1845.71 1210.81 L1845.12 1210.81 L1844.53 1210.81 L1843.95 1210.81 L1843.36 1210.81 L1842.77 1210.81 L1842.19 1210.81 L1841.6 1210.81 L1841.01 1210.81 L1840.43 1210.81 L1839.84 1210.81 L1839.26 1210.81 L1838.67 1210.81 L1838.08 1210.81 L1837.5 1210.81 L1836.91 1210.81 L1836.32 1210.81 L1835.74 1210.81 L1835.15 1210.81 L1834.56 1210.81 L1833.98 1210.81 L1833.39 1210.81 L1832.81 1210.81 L1832.22 1210.81 L1831.63 1210.81 L1831.05 1210.81 L1830.46 1210.81 L1829.87 1210.81 L1829.29 1210.81 L1828.7 1210.81 L1828.11 1210.81 L1827.53 1210.81 L1826.94 1210.81 L1826.35 1210.81 L1825.77 1210.81 L1825.18 1210.81 L1824.6 1210.81 L1824.01 1210.81 L1823.42 1210.81 L1822.84 1210.81 L1822.25 1210.81 L1821.66 1210.81 L1821.08 1210.81 L1820.49 1210.81 L1819.9 1210.81 L1819.32 1210.81 L1818.73 1210.81 L1818.14 1210.81 L1817.56 1210.81 L1816.97 1210.81 L1816.39 1210.81 L1815.8 1210.81 L1815.21 1210.81 L1814.63 1210.81 L1814.04 1210.81 L1813.45 1210.81 L1812.87 1210.81 L1812.28 1210.81 L1811.69 1210.81 L1811.11 1210.81 L1810.52 1210.81 L1809.94 1210.81 L1809.35 1210.81 L1808.76 1210.81 L1808.18 1210.81 L1807.59 1210.81 L1807 1210.81 L1806.42 1210.81 L1805.83 1210.81 L1805.24 1210.81 L1804.66 1210.81 L1804.07 1210.81 L1803.48 1210.81 L1802.9 1210.81 L1802.31 1210.81 L1801.73 1210.81 L1801.14 1210.81 L1800.55 1210.81 L1799.97 1210.81 L1799.38 1210.81 L1798.79 1210.81 L1798.21 1210.81 L1797.62 1210.81 L1797.03 1210.81 L1796.45 1210.81 L1795.86 1210.81 L1795.27 1210.81 L1794.69 1210.81 L1794.1 1210.81 L1793.52 1210.81 L1792.93 1210.81 L1792.34 1210.81 L1791.76 1210.81 L1791.17 1210.81 L1790.58 1210.81 L1790 1210.81 L1789.41 1210.81 L1788.82 1210.81 L1788.24 1210.81 L1787.65 1210.81 L1787.06 1210.81 L1786.48 1210.81 L1785.89 1210.81 L1785.31 1210.81 L1784.72 1210.81 L1784.13 1210.81 L1783.55 1210.81 L1782.96 1210.81 L1782.37 1210.81 L1781.79 1210.81 L1781.2 1210.81 L1780.61 1210.81 L1780.03 1210.81 L1779.44 1210.81 L1778.86 1210.81 L1778.27 1210.81 L1777.68 1210.81 L1777.1 1210.81 L1776.51 1210.81 L1775.92 1210.81 L1775.34 1210.81 L1774.75 1210.81 L1774.16 1210.81 L1773.58 1210.81 L1772.99 1210.81 L1772.4 1210.81 L1771.82 1210.81 L1771.23 1210.81 L1770.65 1210.81 L1770.06 1210.81 L1769.47 1210.81 L1768.89 1210.81 L1768.3 1210.81 L1767.71 1210.81 L1767.13 1210.81 L1766.54 1210.81 L1765.95 1210.81 L1765.37 1210.81 L1764.78 1210.81 L1764.19 1210.81 L1763.61 1210.81 L1763.02 1210.81 L1762.44 1210.81 L1761.85 1210.81 L1761.26 1210.81 L1760.68 1210.81 L1760.09 1210.81 L1759.5 1210.81 L1758.92 1210.81 L1758.33 1210.81 L1757.74 1210.81 L1757.16 1210.81 L1756.57 1210.81 L1755.99 1210.81 L1755.4 1210.81 L1754.81 1210.81 L1754.23 1210.81 L1753.64 1210.81 L1753.05 1210.81 L1752.47 1210.81 L1751.88 1210.81 L1751.29 1210.81 L1750.71 1210.81 L1750.12 1210.81 L1749.53 1210.81 L1748.95 1210.81 L1748.36 1210.81 L1747.78 1210.81 L1747.19 1210.81 L1746.6 1210.81 L1746.02 1210.81 L1745.43 1210.81 L1744.84 1210.81 L1744.26 1210.81 L1743.67 1210.81 L1743.08 1210.81 L1742.5 1210.81 L1741.91 1210.81 L1741.32 1210.81 L1740.74 1210.81 L1740.15 1210.81 L1739.57 1210.81 L1738.98 1210.81 L1738.39 1210.81 L1737.81 1210.81 L1737.22 1210.81 L1736.63 1210.81 L1736.05 1210.81 L1735.46 1210.81 L1734.87 1210.81 L1734.29 1210.81 L1733.7 1210.81 L1733.11 1210.81 L1732.53 1210.81 L1731.94 1210.81 L1731.36 1210.81 L1730.77 1210.81 L1730.18 1210.81 L1729.6 1210.81 L1729.01 1210.81 L1728.42 1210.81 L1727.84 1210.81 L1727.25 1210.81 L1726.66 1210.81 L1726.08 1210.81 L1725.49 1210.81 L1724.91 1210.81 L1724.32 1210.81 L1723.73 1210.81 L1723.15 1210.81 L1722.56 1210.81 L1721.97 1210.81 L1721.39 1210.81 L1720.8 1210.81 L1720.21 1210.81 L1719.63 1210.81 L1719.04 1210.81 L1718.45 1210.81 L1717.87 1210.81 L1717.28 1210.81 L1716.7 1210.81 L1716.11 1210.81 L1715.52 1210.81 L1714.94 1210.81 L1714.35 1210.81 L1713.76 1210.81 L1713.18 1210.81 L1712.59 1210.81 L1712 1210.81 L1711.42 1210.81 L1710.83 1210.81 L1710.24 1210.81 L1709.66 1210.81 L1709.07 1210.81 L1708.49 1210.81 L1707.9 1210.81 L1707.31 1210.81 L1706.73 1210.81 L1706.14 1210.81 L1705.55 1210.81 L1704.97 1210.81 L1704.38 1210.81 L1703.79 1210.81 L1703.21 1210.81 L1702.62 1210.81 L1702.04 1210.81 L1701.45 1210.81 L1700.86 1210.81 L1700.28 1210.81 L1699.69 1210.81 L1699.1 1210.81 L1698.52 1210.81 L1697.93 1210.81 L1697.34 1210.81 L1696.76 1210.81 L1696.17 1210.81 L1695.58 1210.81 L1695 1210.81 L1694.41 1210.81 L1693.83 1210.81 L1693.24 1210.81 L1692.65 1210.81 L1692.07 1210.81 L1691.48 1210.81 L1690.89 1210.81 L1690.31 1210.81 L1689.72 1210.81 L1689.13 1210.81 L1688.55 1210.81 L1687.96 1210.81 L1687.37 1210.81 L1686.79 1210.81 L1686.2 1210.81 L1685.62 1210.81 L1685.03 1210.81 L1684.44 1210.81 L1683.86 1210.81 L1683.27 1210.81 L1682.68 1210.81 L1682.1 1210.81 L1681.51 1210.81 L1680.92 1210.81 L1680.34 1210.81 L1679.75 1210.81 L1679.17 1210.81 L1678.58 1210.81 L1677.99 1210.81 L1677.41 1210.81 L1676.82 1210.81 L1676.23 1210.81 L1675.65 1210.81 L1675.06 1210.81 L1674.47 1210.81 L1673.89 1210.81 L1673.3 1210.81 L1672.71 1210.81 L1672.13 1210.81 L1671.54 1210.81 L1670.96 1210.81 L1670.37 1210.81 L1669.78 1210.81 L1669.2 1210.81 L1668.61 1210.81 L1668.02 1210.81 L1667.44 1210.81 L1666.85 1210.81 L1666.26 1210.81 L1665.68 1210.81 L1665.09 1210.81 L1664.5 1210.81 L1663.92 1210.81 L1663.33 1210.81 L1662.75 1210.81 L1662.16 1210.81 L1661.57 1210.81 L1660.99 1210.81 L1660.4 1210.81 L1659.81 1210.81 L1659.23 1210.81 L1658.64 1210.81 L1658.05 1210.81 L1657.47 1210.81 L1656.88 1210.81 L1656.29 1210.81 L1655.71 1210.81 L1655.12 1210.81 L1654.54 1210.81 L1653.95 1210.81 L1653.36 1210.81 L1652.78 1210.81 L1652.19 1210.81 L1651.6 1210.81 L1651.02 1210.81 L1650.43 1210.81 L1649.84 1210.81 L1649.26 1210.81 L1648.67 1210.81 L1648.09 1210.81 L1647.5 1210.81 L1646.91 1210.81 L1646.33 1210.81 L1645.74 1210.81 L1645.15 1210.81 L1644.57 1210.81 L1643.98 1210.81 L1643.39 1210.81 L1642.81 1210.81 L1642.22 1210.81 L1641.63 1210.81 L1641.05 1210.81 L1640.46 1210.81 L1639.88 1210.81 L1639.29 1210.81 L1638.7 1210.81 L1638.12 1210.81 L1637.53 1210.81 L1636.94 1210.81 L1636.36 1210.81 L1635.77 1210.81 L1635.18 1210.81 L1634.6 1210.81 L1634.01 1210.81 L1633.42 1210.81 L1632.84 1210.81 L1632.25 1210.81 L1631.67 1210.81 L1631.08 1210.81 L1630.49 1210.81 L1629.91 1210.81 L1629.32 1210.81 L1628.73 1210.81 L1628.15 1210.81 L1627.56 1210.81 L1626.97 1210.81 L1626.39 1210.81 L1625.8 1210.81 L1625.22 1210.81 L1624.63 1210.81 L1624.04 1210.81 L1623.46 1210.81 L1622.87 1210.81 L1622.28 1210.81 L1621.7 1210.81 L1621.11 1210.81 L1620.52 1210.81 L1619.94 1210.81 L1619.35 1210.81 L1618.76 1210.81 L1618.18 1210.81 L1617.59 1210.81 L1617.01 1210.81 L1616.42 1210.81 L1615.83 1210.81 L1615.25 1210.81 L1614.66 1210.81 L1614.07 1210.81 L1613.49 1210.81 L1612.9 1210.81 L1612.31 1210.81 L1611.73 1210.81 L1611.14 1210.81 L1610.55 1210.81 L1609.97 1210.81 L1609.38 1210.81 L1608.8 1210.81 L1608.21 1210.81 L1607.62 1210.81 L1607.04 1210.81 L1606.45 1210.81 L1605.86 1210.81 L1605.28 1210.81 L1604.69 1210.81 L1604.1 1210.81 L1603.52 1210.81 L1602.93 1210.81 L1602.34 1210.81 L1601.76 1210.81 L1601.17 1210.81 L1600.59 1210.81 L1600 1210.81 L1599.41 1210.81 L1598.83 1210.81 L1598.24 1210.81 L1597.65 1210.81 L1597.07 1210.81 L1596.48 1210.81 L1595.89 1210.81 L1595.31 1210.81 L1594.72 1210.81 L1594.14 1210.81 L1593.55 1210.81 L1592.96 1210.81 L1592.38 1210.81 L1591.79 1210.81 L1591.2 1210.81 L1590.62 1210.81 L1590.03 1210.81 L1589.44 1210.81 L1588.86 1210.81 L1588.27 1210.81 L1587.68 1210.81 L1587.1 1210.81 L1586.51 1210.81 L1585.93 1210.81 L1585.34 1210.81 L1584.75 1210.81 L1584.17 1210.81 L1583.58 1210.81 L1582.99 1210.81 L1582.41 1210.81 L1581.82 1210.81 L1581.23 1210.81 L1580.65 1210.81 L1580.06 1210.81 L1579.47 1210.81 L1578.89 1210.81 L1578.3 1210.81 L1577.72 1210.81 L1577.13 1210.81 L1576.54 1210.81 L1575.96 1210.81 L1575.37 1210.81 L1574.78 1210.81 L1574.2 1210.81 L1573.61 1210.81 L1573.02 1210.81 L1572.44 1210.81 L1571.85 1210.81 L1571.27 1210.81 L1570.68 1210.81 L1570.09 1210.81 L1569.51 1210.81 L1568.92 1210.81 L1568.33 1210.81 L1567.75 1210.81 L1567.16 1210.81 L1566.57 1210.81 L1565.99 1210.81 L1565.4 1210.81 L1564.81 1210.81 L1564.23 1210.81 L1563.64 1210.81 L1563.06 1210.81 L1562.47 1210.81 L1561.88 1210.81 L1561.3 1210.81 L1560.71 1210.81 L1560.12 1210.81 L1559.54 1210.81 L1558.95 1210.81 L1558.36 1210.81 L1557.78 1210.81 L1557.19 1210.81 L1556.6 1210.81 L1556.02 1210.81 L1555.43 1210.81 L1554.85 1210.81 L1554.26 1210.81 L1553.67 1210.81 L1553.09 1210.81 L1552.5 1210.81 L1551.91 1210.81 L1551.33 1210.81 L1550.74 1210.81 L1550.15 1210.81 L1549.57 1210.81 L1548.98 1210.81 L1548.4 1210.81 L1547.81 1210.81 L1547.22 1210.81 L1546.64 1210.81 L1546.05 1210.81 L1545.46 1210.81 L1544.88 1210.81 L1544.29 1210.81 L1543.7 1210.81 L1543.12 1210.81 L1542.53 1210.81 L1541.94 1210.81 L1541.36 1210.81 L1540.77 1210.81 L1540.19 1210.81 L1539.6 1210.81 L1539.01 1210.81 L1538.43 1210.81 L1537.84 1210.81 L1537.25 1210.81 L1536.67 1210.81 L1536.08 1210.81 L1535.49 1210.81 L1534.91 1210.81 L1534.32 1210.81 L1533.73 1210.81 L1533.15 1210.81 L1532.56 1210.81 L1531.98 1210.81 L1531.39 1210.81 L1530.8 1210.81 L1530.22 1210.81 L1529.63 1210.81 L1529.04 1210.81 L1528.46 1210.81 L1527.87 1210.81 L1527.28 1210.81 L1526.7 1210.81 L1526.11 1210.81 L1525.52 1210.81 L1524.94 1210.81 L1524.35 1210.81 L1523.77 1210.81 L1523.18 1210.81 L1522.59 1210.81 L1522.01 1210.81 L1521.42 1210.81 L1520.83 1210.81 L1520.25 1210.81 L1519.66 1210.81 L1519.07 1210.81 L1518.49 1210.81 L1517.9 1210.81 L1517.32 1210.81 L1516.73 1210.81 L1516.14 1210.81 L1515.56 1210.81 L1514.97 1210.81 L1514.38 1210.81 L1513.8 1210.81 L1513.21 1210.81 L1512.62 1210.81 L1512.04 1210.81 L1511.45 1210.81 L1510.86 1210.81 L1510.28 1210.81 L1509.69 1210.81 L1509.11 1210.81 L1508.52 1210.81 L1507.93 1210.81 L1507.35 1210.81 L1506.76 1210.81 L1506.17 1210.81 L1505.59 1210.81 L1505 1210.81 L1504.41 1210.81 L1503.83 1210.81 L1503.24 1210.81 L1502.65 1210.81 L1502.07 1210.81 L1501.48 1210.81 L1500.9 1210.81 L1500.31 1210.81 L1499.72 1210.81 L1499.14 1210.81 L1498.55 1210.81 L1497.96 1210.81 L1497.38 1210.81 L1496.79 1210.81 L1496.2 1210.81 L1495.62 1210.81 L1495.03 1210.81 L1494.45 1210.81 L1493.86 1210.81 L1493.27 1210.81 L1492.69 1210.81 L1492.1 1210.81 L1491.51 1210.81 L1490.93 1210.81 L1490.34 1210.81 L1489.75 1210.81 L1489.17 1210.81 L1488.58 1210.81 L1487.99 1210.81 L1487.41 1210.81 L1486.82 1210.81 L1486.24 1210.81 L1485.65 1210.81 L1485.06 1210.81 L1484.48 1210.81 L1483.89 1210.81 L1483.3 1210.81 L1482.72 1210.81 L1482.13 1210.81 L1481.54 1210.81 L1480.96 1210.81 L1480.37 1210.81 L1479.78 1210.81 L1479.2 1210.81 L1478.61 1210.81 L1478.03 1210.81 L1477.44 1210.81 L1476.85 1210.81 L1476.27 1210.81 L1475.68 1210.81 L1475.09 1210.81 L1474.51 1210.81 L1473.92 1210.81 L1473.33 1210.81 L1472.75 1210.81 L1472.16 1210.81 L1471.57 1210.81 L1470.99 1210.81 L1470.4 1210.81 L1469.82 1210.81 L1469.23 1210.81 L1468.64 1210.81 L1468.06 1210.81 L1467.47 1210.81 L1466.88 1210.81 L1466.3 1210.81 L1465.71 1210.81 L1465.12 1210.81 L1464.54 1210.81 L1463.95 1210.81 L1463.37 1210.81 L1462.78 1210.81 L1462.19 1210.81 L1461.61 1210.81 L1461.02 1210.81 L1460.43 1210.81 L1459.85 1210.81 L1459.26 1210.81 L1458.67 1210.81 L1458.09 1210.81 L1457.5 1210.81 L1456.91 1210.81 L1456.33 1210.81 L1455.74 1210.81 L1455.16 1210.81 L1454.57 1210.81 L1453.98 1210.81 L1453.4 1210.81 L1452.81 1210.81 L1452.22 1210.81 L1451.64 1210.81 L1451.05 1210.81 L1450.46 1210.81 L1449.88 1210.81 L1449.29 1210.81 L1448.7 1210.81 L1448.12 1210.81 L1447.53 1210.81 L1446.95 1210.81 L1446.36 1210.81 L1445.77 1210.81 L1445.19 1210.81 L1444.6 1210.81 L1444.01 1210.81 L1443.43 1210.81 L1442.84 1210.81 L1442.25 1210.81 L1441.67 1210.81 L1441.08 1210.81 L1440.5 1210.81 L1439.91 1210.81 L1439.32 1210.81 L1438.74 1210.81 L1438.15 1210.81 L1437.56 1210.81 L1436.98 1210.81 L1436.39 1210.81 L1435.8 1210.81 L1435.22 1210.81 L1434.63 1210.81 L1434.04 1210.81 L1433.46 1210.81 L1432.87 1210.81 L1432.29 1210.81 L1431.7 1210.81 L1431.11 1210.81 L1430.53 1210.81 L1429.94 1210.81 L1429.35 1210.81 L1428.77 1210.81 L1428.18 1210.81 L1427.59 1210.81 L1427.01 1210.81 L1426.42 1210.81 L1425.83 1210.81 L1425.25 1210.81 L1424.66 1210.81 L1424.08 1210.81 L1423.49 1210.81 L1422.9 1210.81 L1422.32 1210.81 L1421.73 1210.81 L1421.14 1210.81 L1420.56 1210.81 L1419.97 1210.81 L1419.38 1210.81 L1418.8 1210.81 L1418.21 1210.81 L1417.63 1210.81 L1417.04 1210.81 L1416.45 1210.81 L1415.87 1210.81 L1415.28 1210.81 L1414.69 1210.81 L1414.11 1210.81 L1413.52 1210.81 L1412.93 1210.81 L1412.35 1210.81 L1411.76 1210.81 L1411.17 1210.81 L1410.59 1210.81 L1410 1210.81 L1409.42 1210.81 L1408.83 1210.81 L1408.24 1210.81 L1407.66 1210.81 L1407.07 1210.81 L1406.48 1210.81 L1405.9 1210.81 L1405.31 1210.81 L1404.72 1210.81 L1404.14 1210.81 L1403.55 1210.81 L1402.96 1210.81 L1402.38 1210.81 L1401.79 1210.81 L1401.21 1210.81 L1400.62 1210.81 L1400.03 1210.81 L1399.45 1210.81 L1398.86 1210.81 L1398.27 1210.81 L1397.69 1210.81 L1397.1 1210.81 L1396.51 1210.81 L1395.93 1210.81 L1395.34 1210.81 L1394.75 1210.81 L1394.17 1210.81 L1393.58 1210.81 L1393 1210.81 L1392.41 1210.81 L1391.82 1210.81 L1391.24 1210.81 L1390.65 1210.81 L1390.06 1210.81 L1389.48 1210.81 L1388.89 1210.81 L1388.3 1210.81 L1387.72 1210.81 L1387.13 1210.81 L1386.55 1210.81 L1385.96 1210.81 L1385.37 1210.81 L1384.79 1210.81 L1384.2 1210.81 L1383.61 1210.81 L1383.03 1210.81 L1382.44 1210.81 L1381.85 1210.81 L1381.27 1210.81 L1380.68 1210.81 L1380.09 1210.81 L1379.51 1210.81 L1378.92 1210.81 L1378.34 1210.81 L1377.75 1210.81 L1377.16 1210.81 L1376.58 1210.81 L1375.99 1210.81 L1375.4 1210.81 L1374.82 1210.81 L1374.23 1210.81 L1373.64 1210.81 L1373.06 1210.81 L1372.47 1210.81 L1371.88 1210.81 L1371.3 1210.81 L1370.71 1210.81 L1370.13 1210.81 L1369.54 1210.81 L1368.95 1210.81 L1368.37 1210.81 L1367.78 1210.81 L1367.19 1210.81 L1366.61 1210.81 L1366.02 1210.81 L1365.43 1210.81 L1364.85 1210.81 L1364.26 1210.81 L1363.68 1210.81 L1363.09 1210.81 L1362.5 1210.81 L1361.92 1210.81 L1361.33 1210.81 L1360.74 1210.81 L1360.16 1210.81 L1359.57 1210.81 L1358.98 1210.81 L1358.4 1210.81 L1357.81 1210.81 L1357.22 1210.81 L1356.64 1210.81 L1356.05 1210.81 L1355.47 1210.81 L1354.88 1210.81 L1354.29 1210.81 L1353.71 1210.81 L1353.12 1210.81 L1352.53 1210.81 L1351.95 1210.81 L1351.36 1210.81 L1350.77 1210.81 L1350.19 1210.81 L1349.6 1210.81 L1349.01 1210.81 L1348.43 1210.81 L1347.84 1210.81 L1347.26 1210.81 L1346.67 1210.81 L1346.08 1210.81 L1345.5 1210.81 L1344.91 1210.81 L1344.32 1210.81 L1343.74 1210.81 L1343.15 1210.81 L1342.56 1210.81 L1341.98 1210.81 L1341.39 1210.81 L1340.8 1210.81 L1340.22 1210.81 L1339.63 1210.81 L1339.05 1210.81 L1338.46 1210.81 L1337.87 1210.81 L1337.29 1210.81 L1336.7 1210.81 L1336.11 1210.81 L1335.53 1210.81 L1334.94 1210.81 L1334.35 1210.81 L1333.77 1210.81 L1333.18 1210.81 L1332.6 1210.81 L1332.01 1210.81 L1331.42 1210.81 L1330.84 1210.81 L1330.25 1210.81 L1329.66 1210.81 L1329.08 1210.81 L1328.49 1210.81 L1327.9 1210.81 L1327.32 1210.81 L1326.73 1210.81 L1326.14 1210.81 L1325.56 1210.81 L1324.97 1210.81 L1324.39 1210.81 L1323.8 1210.81 L1323.21 1210.81 L1322.63 1210.81 L1322.04 1210.81 L1321.45 1210.81 L1320.87 1210.81 L1320.28 1210.81 L1319.69 1210.81 L1319.11 1210.81 L1318.52 1210.81 L1317.93 1210.81 L1317.35 1210.81 L1316.76 1210.81 L1316.18 1210.81 L1315.59 1210.81 L1315 1210.81 L1314.42 1210.81 L1313.83 1210.81 L1313.24 1210.81 L1312.66 1210.81 L1312.07 1210.81 L1311.48 1210.81 L1310.9 1210.81 L1310.31 1210.81 L1309.73 1210.81 L1309.14 1210.81 L1308.55 1210.81 L1307.97 1210.81 L1307.38 1210.81 L1306.79 1210.81 L1306.21 1210.81 L1305.62 1210.81 L1305.03 1210.81 L1304.45 1210.81 L1303.86 1210.81 L1303.27 1210.81 L1302.69 1210.81 L1302.1 1210.81 L1301.52 1210.81 L1300.93 1210.81 L1300.34 1210.81 L1299.76 1210.81 L1299.17 1210.81 L1298.58 1210.81 L1298 1210.81 L1297.41 1210.81 L1296.82 1210.81 L1296.24 1210.81 L1295.65 1210.81 L1295.06 1210.81 L1294.48 1210.81 L1293.89 1210.81 L1293.31 1210.81 L1292.72 1210.81 L1292.13 1210.81 L1291.55 1210.81 L1290.96 1210.81 L1290.37 1210.81 L1289.79 1210.81 L1289.2 1210.81 L1288.61 1210.81 L1288.03 1210.81 L1287.44 1210.81 L1286.86 1210.81 L1286.27 1210.81 L1285.68 1210.81 L1285.1 1210.81 L1284.51 1210.81 L1283.92 1210.81 L1283.34 1210.81 L1282.75 1210.81 L1282.16 1210.81 L1281.58 1210.81 L1280.99 1210.81 L1280.4 1210.81 L1279.82 1210.81 L1279.23 1210.81 L1278.65 1210.81 L1278.06 1210.81 L1277.47 1210.81 L1276.89 1210.81 L1276.3 1210.81 L1275.71 1210.81 L1275.13 1210.81 L1274.54 1210.81 L1273.95 1210.81 L1273.37 1210.81 L1272.78 1210.81 L1272.19 1210.81 L1271.61 1210.81 L1271.02 1210.81 L1270.44 1210.81 L1269.85 1210.81 L1269.26 1210.81 L1268.68 1210.81 L1268.09 1210.81 L1267.5 1210.81 L1266.92 1210.81 L1266.33 1210.81 L1265.74 1210.81 L1265.16 1210.81 L1264.57 1210.81 L1263.98 1210.81 L1263.4 1210.81 L1262.81 1210.81 L1262.23 1210.81 L1261.64 1210.81 L1261.05 1210.81 L1260.47 1210.81 L1259.88 1210.81 L1259.29 1210.81 L1258.71 1210.81 L1258.12 1210.81 L1257.53 1210.81 L1256.95 1210.81 L1256.36 1210.81 L1255.78 1210.81 L1255.19 1210.81 L1254.6 1210.81 L1254.02 1210.81 L1253.43 1210.81 L1252.84 1210.81 L1252.26 1210.81 L1251.67 1210.81 L1251.08 1210.81 L1250.5 1210.81 L1249.91 1210.81 L1249.32 1210.81 L1248.74 1210.81 L1248.15 1210.81 L1247.57 1210.81 L1246.98 1210.81 L1246.39 1210.81 L1245.81 1210.81 L1245.22 1210.81 L1244.63 1210.81 L1244.05 1210.81 L1243.46 1210.81 L1242.87 1210.81 L1242.29 1210.81 L1241.7 1210.81 L1241.11 1210.81 L1240.53 1210.81 L1239.94 1210.81 L1239.36 1210.81 L1238.77 1210.81 L1238.18 1210.81 L1237.6 1210.81 L1237.01 1210.81 L1236.42 1210.81 L1235.84 1210.81 L1235.25 1210.81 L1234.66 1210.81 L1234.08 1210.81 L1233.49 1210.81 L1232.91 1210.81 L1232.32 1210.81 L1231.73 1210.81 L1231.15 1210.81 L1230.56 1210.81 L1229.97 1210.81 L1229.39 1210.81 L1228.8 1210.81 L1228.21 1210.81 L1227.63 1210.81 L1227.04 1210.81 L1226.45 1210.81 L1225.87 1210.81 L1225.28 1210.81 L1224.7 1210.81 L1224.11 1210.81 L1223.52 1210.81 L1222.94 1210.81 L1222.35 1210.81 L1221.76 1210.81 L1221.18 1210.81 L1220.59 1210.81 L1220 1210.81 L1219.42 1210.81 L1218.83 1210.81 L1218.24 1210.81 L1217.66 1210.81 L1217.07 1210.81 L1216.49 1210.81 L1215.9 1210.81 L1215.31 1210.81 L1214.73 1210.81 L1214.14 1210.81 L1213.55 1210.81 L1212.97 1210.81 L1212.38 1210.81 L1211.79 1210.81 L1211.21 1210.81 L1210.62 1210.81 L1210.03 1210.81 L1209.45 1210.81 L1208.86 1210.81 L1208.28 1210.81 L1207.69 1210.81 L1207.1 1210.81 L1206.52 1210.81 L1205.93 1210.81 L1205.34 1210.81 L1204.76 1210.81 L1204.17 1210.81 L1203.58 1210.81 L1203 1210.81 L1202.41 1210.81 L1201.83 1210.81 L1201.24 1210.81 L1200.65 1210.81 L1200.07 1210.81 L1199.48 1210.81 L1198.89 1210.81 L1198.31 1210.81 L1197.72 1210.81 L1197.13 1210.81 L1196.55 1210.81 L1195.96 1210.81 L1195.37 1210.81 L1194.79 1210.81 L1194.2 1210.81 L1193.62 1210.81 L1193.03 1210.81 L1192.44 1210.81 L1191.86 1210.81 L1191.27 1210.81 L1190.68 1210.81 L1190.1 1210.81 L1189.51 1210.81 L1188.92 1210.81 L1188.34 1210.81 L1187.75 1210.81 L1187.16 1210.81 L1186.58 1210.81 L1185.99 1210.81 L1185.41 1210.81 L1184.82 1210.81 L1184.23 1210.81 L1183.65 1210.81 L1183.06 1210.81 L1182.47 1210.81 L1181.89 1210.81 L1181.3 1210.81 L1180.71 1210.81 L1180.13 1210.81 L1179.54 1210.81 L1178.96 1210.81 L1178.37 1210.81 L1177.78 1210.81 L1177.2 1210.81 L1176.61 1210.81 L1176.02 1210.81 L1175.44 1210.81 L1174.85 1210.81 L1174.26 1210.81 L1173.68 1210.81 L1173.09 1210.81 L1172.5 1210.81 L1171.92 1210.81 L1171.33 1210.81 L1170.75 1210.81 L1170.16 1210.81 L1169.57 1210.81 L1168.99 1210.81 L1168.4 1210.81 L1167.81 1210.81 L1167.23 1210.81 L1166.64 1210.81 L1166.05 1210.81 L1165.47 1210.81 L1164.88 1210.81 L1164.29 1210.81 L1163.71 1210.81 L1163.12 1210.81 L1162.54 1210.81 L1161.95 1210.81 L1161.36 1210.81 L1160.78 1210.81 L1160.19 1210.81 L1159.6 1210.81 L1159.02 1210.81 L1158.43 1210.81 L1157.84 1210.81 L1157.26 1210.81 L1156.67 1210.81 L1156.09 1210.81 L1155.5 1210.81 L1154.91 1210.81 L1154.33 1210.81 L1153.74 1210.81 L1153.15 1210.81 L1152.57 1210.81 L1151.98 1210.81 L1151.39 1210.81 L1150.81 1210.81 L1150.22 1210.81 L1149.63 1210.81 L1149.05 1210.81 L1148.46 1210.81 L1147.88 1210.81 L1147.29 1210.81 L1146.7 1210.81 L1146.12 1210.81 L1145.53 1210.81 L1144.94 1210.81 L1144.36 1210.81 L1143.77 1210.81 L1143.18 1210.81 L1142.6 1210.81 L1142.01 1210.81 L1141.42 1210.81 L1140.84 1210.81 L1140.25 1210.81 L1139.67 1210.81 L1139.08 1210.81 L1138.49 1210.81 L1137.91 1210.81 L1137.32 1210.81 L1136.73 1210.81 L1136.15 1210.81 L1135.56 1210.81 L1134.97 1210.81 L1134.39 1210.81 L1133.8 1210.81 L1133.21 1210.81 L1132.63 1210.81 L1132.04 1210.81 L1131.46 1210.81 L1130.87 1210.81 L1130.28 1210.81 L1129.7 1210.81 L1129.11 1210.81 L1128.52 1210.81 L1127.94 1210.81 L1127.35 1210.81 L1126.76 1210.81 L1126.18 1210.81 L1125.59 1210.81 L1125.01 1210.81 L1124.42 1210.81 L1123.83 1210.81 L1123.25 1210.81 L1122.66 1210.81 L1122.07 1210.81 L1121.49 1210.81 L1120.9 1210.81 L1120.31 1210.81 L1119.73 1210.81 L1119.14 1210.81 L1118.55 1210.81 L1117.97 1210.81 L1117.38 1210.81 L1116.8 1210.81 L1116.21 1210.81 L1115.62 1210.81 L1115.04 1210.81 L1114.45 1210.81 L1113.86 1210.81 L1113.28 1210.81 L1112.69 1210.81 L1112.1 1210.81 L1111.52 1210.81 L1110.93 1210.81 L1110.34 1210.81 L1109.76 1210.81 L1109.17 1210.81 L1108.59 1210.81 L1108 1210.81 L1107.41 1210.81 L1106.83 1210.81 L1106.24 1210.81 L1105.65 1210.81 L1105.07 1210.81 L1104.48 1210.81 L1103.89 1210.81 L1103.31 1210.81 L1102.72 1210.81 L1102.14 1210.81 L1101.55 1210.81 L1100.96 1210.81 L1100.38 1210.81 L1099.79 1210.81 L1099.2 1210.81 L1098.62 1210.81 L1098.03 1210.81 L1097.44 1210.81 L1096.86 1210.81 L1096.27 1210.81 L1095.68 1210.81 L1095.1 1210.81 L1094.51 1210.81 L1093.93 1210.81 L1093.34 1210.81 L1092.75 1210.81 L1092.17 1210.81 L1091.58 1210.81 L1090.99 1210.81 L1090.41 1210.81 L1089.82 1210.81 L1089.23 1210.81 L1088.65 1210.81 L1088.06 1210.81 L1087.47 1210.81 L1086.89 1210.81 L1086.3 1210.81 L1085.72 1210.81 L1085.13 1210.81 L1084.54 1210.81 L1083.96 1210.81 L1083.37 1210.81 L1082.78 1210.81 L1082.2 1210.81 L1081.61 1210.81 L1081.02 1210.81 L1080.44 1210.81 L1079.85 1210.81 L1079.26 1210.81 L1078.68 1210.81 L1078.09 1210.81 L1077.51 1210.81 L1076.92 1210.81 L1076.33 1210.81 L1075.75 1210.81 L1075.16 1210.81 L1074.57 1210.81 L1073.99 1210.81 L1073.4 1210.81 L1072.81 1210.81 L1072.23 1210.81 L1071.64 1210.81 L1071.06 1210.81 L1070.47 1210.81 L1069.88 1210.81 L1069.3 1210.81 L1068.71 1210.81 L1068.12 1210.81 L1067.54 1210.81 L1066.95 1210.81 L1066.36 1210.81 L1065.78 1210.81 L1065.19 1210.81 L1064.6 1210.81 L1064.02 1210.81 L1063.43 1210.81 L1062.85 1210.81 L1062.26 1210.81 L1061.67 1210.81 L1061.09 1210.81 L1060.5 1210.81 L1059.91 1210.81 L1059.33 1210.81 L1058.74 1210.81 L1058.15 1210.81 L1057.57 1210.81 L1056.98 1210.81 L1056.39 1210.81 L1055.81 1210.81 L1055.22 1210.81 L1054.64 1210.81 L1054.05 1210.81 L1053.46 1210.81 L1052.88 1210.81 L1052.29 1210.81 L1051.7 1210.81 L1051.12 1210.81 L1050.53 1210.81 L1049.94 1210.81 L1049.36 1210.81 L1048.77 1210.81 L1048.19 1210.81 L1047.6 1210.81 L1047.01 1210.81 L1046.43 1210.81 L1045.84 1210.81 L1045.25 1210.81 L1044.67 1210.81 L1044.08 1210.81 L1043.49 1210.81 L1042.91 1210.81 L1042.32 1210.81 L1041.73 1210.81 L1041.15 1210.81 L1040.56 1210.81 L1039.98 1210.81 L1039.39 1210.81 L1038.8 1210.81 L1038.22 1210.81 L1037.63 1210.81 L1037.04 1210.81 L1036.46 1210.81 L1035.87 1210.81 L1035.28 1210.81 L1034.7 1210.81 L1034.11 1210.81 L1033.52 1210.81 L1032.94 1210.81 L1032.35 1210.81 L1031.77 1210.81 L1031.18 1210.81 L1030.59 1210.81 L1030.01 1210.81 L1029.42 1210.81 L1028.83 1210.81 L1028.25 1210.81 L1027.66 1210.81 L1027.07 1210.81 L1026.49 1210.81 L1025.9 1210.81 L1025.32 1210.81 L1024.73 1210.81 L1024.14 1210.81 L1023.56 1210.81 L1022.97 1210.81 L1022.38 1210.81 L1021.8 1210.81 L1021.21 1210.81 L1020.62 1210.81 L1020.04 1210.81 L1019.45 1210.81 L1018.86 1210.81 L1018.28 1210.81 L1017.69 1210.81 L1017.11 1210.81 L1016.52 1210.81 L1015.93 1210.81 L1015.35 1210.81 L1014.76 1210.81 L1014.17 1210.81 L1013.59 1210.81 L1013 1210.81 L1012.41 1210.81 L1011.83 1210.81 L1011.24 1210.81 L1010.65 1210.81 L1010.07 1210.81 L1009.48 1210.81 L1008.9 1210.81 L1008.31 1210.81 L1007.72 1210.81 L1007.14 1210.81 L1006.55 1210.81 L1005.96 1210.81 L1005.38 1210.81 L1004.79 1210.81 L1004.2 1210.81 L1003.62 1210.81 L1003.03 1210.81 L1002.44 1210.81 L1001.86 1210.81 L1001.27 1210.81 L1000.69 1210.81 L1000.1 1210.81 L999.513 1210.81 L998.926 1210.81 L998.34 1210.81 L997.754 1210.81 L997.167 1210.81 L996.581 1210.81 L995.994 1210.81 L995.408 1210.81 L994.822 1210.81 L994.235 1210.81 L993.649 1210.81 L993.062 1210.81 L992.476 1210.81 L991.889 1210.81 L991.303 1210.81 L990.717 1210.81 L990.13 1210.81 L989.544 1210.81 L988.957 1210.81 L988.371 1210.81 L987.785 1210.81 L987.198 1210.81 L986.612 1210.81 L986.025 1210.81  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.25 986.612,1211.25 987.198,1211.25 987.785,1211.25 988.371,1211.25 988.957,1211.25 989.544,1211.25 990.13,1211.25 990.717,1211.25 991.303,1211.25 991.889,1211.25 992.476,1211.25 993.062,1211.25 993.649,1211.25 994.235,1211.25 994.822,1211.25 995.408,1211.25 995.994,1211.25 996.581,1211.25 997.167,1211.25 997.754,1211.25 998.34,1211.25 998.926,1211.25 999.513,1211.25 1000.1,1211.25 1000.69,1211.25 1001.27,1211.25 1001.86,1211.25 1002.44,1211.25 1003.03,1211.25 1003.62,1211.25 1004.2,1211.25 1004.79,1211.25 1005.38,1211.25 1005.96,1211.25 1006.55,1211.25 1007.14,1211.25 1007.72,1211.25 1008.31,1211.25 1008.9,1211.25 1009.48,1211.25 1010.07,1211.25 1010.65,1211.25 1011.24,1211.25 1011.83,1211.25 1012.41,1211.25 1013,1211.25 1013.59,1211.25 1014.17,1211.25 1014.76,1211.25 1015.35,1211.25 1015.93,1211.25 1016.52,1211.25 1017.11,1211.25 1017.69,1211.25 1018.28,1211.25 1018.86,1211.25 1019.45,1211.25 1020.04,1211.25 1020.62,1211.25 1021.21,1211.25 1021.8,1211.25 1022.38,1211.25 1022.97,1211.25 1023.56,1211.25 1024.14,1211.25 1024.73,1211.25 1025.32,1211.25 1025.9,1211.25 1026.49,1211.25 1027.07,1211.25 1027.66,1211.25 1028.25,1211.25 1028.83,1211.25 1029.42,1211.25 1030.01,1211.25 1030.59,1211.25 1031.18,1211.25 1031.77,1211.25 1032.35,1211.25 1032.94,1211.25 1033.52,1211.25 1034.11,1211.25 1034.7,1211.25 1035.28,1211.25 1035.87,1211.25 1036.46,1211.25 1037.04,1211.25 1037.63,1211.25 1038.22,1211.25 1038.8,1211.25 1039.39,1211.25 1039.98,1211.25 1040.56,1211.25 1041.15,1211.25 1041.73,1211.25 1042.32,1211.25 1042.91,1211.25 1043.49,1211.25 1044.08,1211.25 1044.67,1211.25 1045.25,1211.25 1045.84,1211.25 1046.43,1211.25 1047.01,1211.25 1047.6,1211.25 1048.19,1211.25 1048.77,1211.25 1049.36,1211.25 1049.94,1211.25 1050.53,1211.25 1051.12,1211.25 1051.7,1211.25 1052.29,1211.25 1052.88,1211.25 1053.46,1211.25 1054.05,1211.25 1054.64,1211.25 1055.22,1211.25 1055.81,1211.25 1056.39,1211.25 1056.98,1211.25 1057.57,1211.25 1058.15,1211.25 1058.74,1211.25 1059.33,1211.25 1059.91,1211.25 1060.5,1211.25 1061.09,1211.25 1061.67,1211.25 1062.26,1211.25 1062.85,1211.25 1063.43,1211.25 1064.02,1211.25 1064.6,1211.25 1065.19,1211.25 1065.78,1211.25 1066.36,1211.25 1066.95,1211.25 1067.54,1211.25 1068.12,1211.25 1068.71,1211.25 1069.3,1211.25 1069.88,1211.25 1070.47,1211.25 1071.06,1211.25 1071.64,1211.25 1072.23,1211.25 1072.81,1211.25 1073.4,1211.25 1073.99,1211.25 1074.57,1211.25 1075.16,1211.25 1075.75,1211.25 1076.33,1211.25 1076.92,1211.25 1077.51,1211.25 1078.09,1211.25 1078.68,1211.25 1079.26,1211.25 1079.85,1211.25 1080.44,1211.25 1081.02,1211.25 1081.61,1211.25 1082.2,1211.25 1082.78,1211.25 1083.37,1211.25 1083.96,1211.25 1084.54,1211.25 1085.13,1211.25 1085.72,1211.25 1086.3,1211.25 1086.89,1211.25 1087.47,1211.25 1088.06,1211.25 1088.65,1211.25 1089.23,1211.25 1089.82,1211.25 1090.41,1211.25 1090.99,1211.25 1091.58,1211.25 1092.17,1211.25 1092.75,1211.25 1093.34,1211.25 1093.93,1211.25 1094.51,1211.25 1095.1,1211.25 1095.68,1211.25 1096.27,1211.25 1096.86,1211.25 1097.44,1211.25 1098.03,1211.25 1098.62,1211.25 1099.2,1211.25 1099.79,1211.25 1100.38,1211.25 1100.96,1211.25 1101.55,1211.25 1102.14,1211.25 1102.72,1211.25 1103.31,1211.25 1103.89,1211.25 1104.48,1211.25 1105.07,1211.25 1105.65,1211.25 1106.24,1211.25 1106.83,1211.25 1107.41,1211.25 1108,1211.25 1108.59,1211.25 1109.17,1211.25 1109.76,1211.25 1110.34,1211.25 1110.93,1211.25 1111.52,1211.25 1112.1,1211.25 1112.69,1211.25 1113.28,1211.25 1113.86,1211.25 1114.45,1211.25 1115.04,1211.25 1115.62,1211.25 1116.21,1211.25 1116.8,1211.25 1117.38,1211.25 1117.97,1211.25 1118.55,1211.25 1119.14,1211.25 1119.73,1211.25 1120.31,1211.25 1120.9,1211.25 1121.49,1211.25 1122.07,1211.25 1122.66,1211.25 1123.25,1211.25 1123.83,1211.25 1124.42,1211.25 1125.01,1211.25 1125.59,1211.25 1126.18,1211.25 1126.76,1211.25 1127.35,1211.25 1127.94,1211.25 1128.52,1211.25 1129.11,1211.25 1129.7,1211.25 1130.28,1211.25 1130.87,1211.25 1131.46,1211.25 1132.04,1211.25 1132.63,1211.25 1133.21,1211.25 1133.8,1211.25 1134.39,1211.25 1134.97,1211.25 1135.56,1211.25 1136.15,1211.25 1136.73,1211.25 1137.32,1211.25 1137.91,1211.25 1138.49,1211.25 1139.08,1211.25 1139.67,1211.25 1140.25,1211.25 1140.84,1211.25 1141.42,1211.25 1142.01,1211.25 1142.6,1211.25 1143.18,1211.25 1143.77,1211.25 1144.36,1211.25 1144.94,1211.25 1145.53,1211.25 1146.12,1211.25 1146.7,1211.25 1147.29,1211.25 1147.88,1211.25 1148.46,1211.25 1149.05,1211.25 1149.63,1211.25 1150.22,1211.25 1150.81,1211.25 1151.39,1211.25 1151.98,1211.25 1152.57,1211.25 1153.15,1211.25 1153.74,1211.25 1154.33,1211.25 1154.91,1211.25 1155.5,1211.25 1156.09,1211.25 1156.67,1211.25 1157.26,1211.25 1157.84,1211.25 1158.43,1211.25 1159.02,1211.25 1159.6,1211.25 1160.19,1211.25 1160.78,1211.25 1161.36,1211.25 1161.95,1211.25 1162.54,1211.25 1163.12,1211.25 1163.71,1211.25 1164.29,1211.25 1164.88,1211.25 1165.47,1211.25 1166.05,1211.25 1166.64,1211.25 1167.23,1211.25 1167.81,1211.25 1168.4,1211.25 1168.99,1211.25 1169.57,1211.25 1170.16,1211.25 1170.75,1211.25 1171.33,1211.25 1171.92,1211.25 1172.5,1211.25 1173.09,1211.25 1173.68,1211.25 1174.26,1211.25 1174.85,1211.25 1175.44,1211.25 1176.02,1211.25 1176.61,1211.25 1177.2,1211.25 1177.78,1211.25 1178.37,1211.25 1178.96,1211.25 1179.54,1211.25 1180.13,1211.25 1180.71,1211.25 1181.3,1211.25 1181.89,1211.25 1182.47,1211.25 1183.06,1211.25 1183.65,1211.25 1184.23,1211.25 1184.82,1211.25 1185.41,1211.25 1185.99,1211.25 1186.58,1211.25 1187.16,1211.25 1187.75,1211.25 1188.34,1211.25 1188.92,1211.25 1189.51,1211.25 1190.1,1211.25 1190.68,1211.25 1191.27,1211.25 1191.86,1211.25 1192.44,1211.25 1193.03,1211.25 1193.62,1211.25 1194.2,1211.25 1194.79,1211.25 1195.37,1211.25 1195.96,1211.25 1196.55,1211.25 1197.13,1211.25 1197.72,1211.25 1198.31,1211.25 1198.89,1211.25 1199.48,1211.25 1200.07,1211.25 1200.65,1211.25 1201.24,1211.25 1201.83,1211.25 1202.41,1211.25 1203,1211.25 1203.58,1211.25 1204.17,1211.25 1204.76,1211.25 1205.34,1211.25 1205.93,1211.25 1206.52,1211.25 1207.1,1211.25 1207.69,1211.25 1208.28,1211.25 1208.86,1211.25 1209.45,1211.25 1210.03,1211.25 1210.62,1211.25 1211.21,1211.25 1211.79,1211.25 1212.38,1211.25 1212.97,1211.25 1213.55,1211.25 1214.14,1211.25 1214.73,1211.25 1215.31,1211.25 1215.9,1211.25 1216.49,1211.25 1217.07,1211.25 1217.66,1211.25 1218.24,1211.25 1218.83,1211.25 1219.42,1211.25 1220,1211.25 1220.59,1211.25 1221.18,1211.25 1221.76,1211.25 1222.35,1211.25 1222.94,1211.25 1223.52,1211.25 1224.11,1211.25 1224.7,1211.25 1225.28,1211.25 1225.87,1211.25 1226.45,1211.25 1227.04,1211.25 1227.63,1211.25 1228.21,1211.25 1228.8,1211.25 1229.39,1211.25 1229.97,1211.25 1230.56,1211.25 1231.15,1211.25 1231.73,1211.25 1232.32,1211.25 1232.91,1211.25 1233.49,1211.25 1234.08,1211.25 1234.66,1211.25 1235.25,1211.25 1235.84,1211.25 1236.42,1211.25 1237.01,1211.25 1237.6,1211.25 1238.18,1211.25 1238.77,1211.25 1239.36,1211.25 1239.94,1211.25 1240.53,1211.25 1241.11,1211.25 1241.7,1211.25 1242.29,1211.25 1242.87,1211.25 1243.46,1211.25 1244.05,1211.25 1244.63,1211.25 1245.22,1211.25 1245.81,1211.25 1246.39,1211.25 1246.98,1211.25 1247.57,1211.25 1248.15,1211.25 1248.74,1211.25 1249.32,1211.25 1249.91,1211.25 1250.5,1211.25 1251.08,1211.25 1251.67,1211.25 1252.26,1211.25 1252.84,1211.25 1253.43,1211.25 1254.02,1211.25 1254.6,1211.25 1255.19,1211.25 1255.78,1211.25 1256.36,1211.25 1256.95,1211.25 1257.53,1211.25 1258.12,1211.25 1258.71,1211.25 1259.29,1211.25 1259.88,1211.25 1260.47,1211.25 1261.05,1211.25 1261.64,1211.25 1262.23,1211.25 1262.81,1211.25 1263.4,1211.25 1263.98,1211.25 1264.57,1211.25 1265.16,1211.25 1265.74,1211.25 1266.33,1211.25 1266.92,1211.25 1267.5,1211.25 1268.09,1211.25 1268.68,1211.25 1269.26,1211.25 1269.85,1211.25 1270.44,1211.25 1271.02,1211.25 1271.61,1211.25 1272.19,1211.25 1272.78,1211.25 1273.37,1211.25 1273.95,1211.25 1274.54,1211.25 1275.13,1211.25 1275.71,1211.25 1276.3,1211.25 1276.89,1211.25 1277.47,1211.25 1278.06,1211.25 1278.65,1211.25 1279.23,1211.25 1279.82,1211.25 1280.4,1211.25 1280.99,1211.25 1281.58,1211.25 1282.16,1211.25 1282.75,1211.25 1283.34,1211.25 1283.92,1211.25 1284.51,1211.25 1285.1,1211.25 1285.68,1211.25 1286.27,1211.25 1286.86,1211.25 1287.44,1211.25 1288.03,1211.25 1288.61,1211.25 1289.2,1211.25 1289.79,1211.25 1290.37,1211.25 1290.96,1211.25 1291.55,1211.25 1292.13,1211.25 1292.72,1211.25 1293.31,1211.25 1293.89,1211.25 1294.48,1211.25 1295.06,1211.25 1295.65,1211.25 1296.24,1211.25 1296.82,1211.25 1297.41,1211.25 1298,1211.25 1298.58,1211.25 1299.17,1211.25 1299.76,1211.25 1300.34,1211.25 1300.93,1211.25 1301.52,1211.25 1302.1,1211.25 1302.69,1211.25 1303.27,1211.25 1303.86,1211.25 1304.45,1211.25 1305.03,1211.25 1305.62,1211.25 1306.21,1211.25 1306.79,1211.25 1307.38,1211.25 1307.97,1211.25 1308.55,1211.25 1309.14,1211.25 1309.73,1211.25 1310.31,1211.25 1310.9,1211.25 1311.48,1211.25 1312.07,1211.25 1312.66,1211.25 1313.24,1211.25 1313.83,1211.25 1314.42,1211.25 1315,1211.25 1315.59,1211.25 1316.18,1211.25 1316.76,1211.25 1317.35,1211.25 1317.93,1211.25 1318.52,1211.25 1319.11,1211.25 1319.69,1211.25 1320.28,1211.25 1320.87,1211.25 1321.45,1211.25 1322.04,1211.25 1322.63,1211.25 1323.21,1211.25 1323.8,1211.25 1324.39,1211.25 1324.97,1211.25 1325.56,1211.25 1326.14,1211.25 1326.73,1211.25 1327.32,1211.25 1327.9,1211.25 1328.49,1211.25 1329.08,1211.25 1329.66,1211.25 1330.25,1211.25 1330.84,1211.25 1331.42,1211.25 1332.01,1211.25 1332.6,1211.25 1333.18,1211.25 1333.77,1211.25 1334.35,1211.25 1334.94,1211.25 1335.53,1211.25 1336.11,1211.25 1336.7,1211.25 1337.29,1211.25 1337.87,1211.25 1338.46,1211.25 1339.05,1211.25 1339.63,1211.25 1340.22,1211.25 1340.8,1211.25 1341.39,1211.25 1341.98,1211.25 1342.56,1211.25 1343.15,1211.25 1343.74,1211.25 1344.32,1211.25 1344.91,1211.25 1345.5,1211.25 1346.08,1211.25 1346.67,1211.25 1347.26,1211.25 1347.84,1211.25 1348.43,1211.25 1349.01,1211.25 1349.6,1211.25 1350.19,1211.25 1350.77,1211.25 1351.36,1211.25 1351.95,1211.25 1352.53,1211.25 1353.12,1211.25 1353.71,1211.25 1354.29,1211.25 1354.88,1211.25 1355.47,1211.25 1356.05,1211.25 1356.64,1211.25 1357.22,1211.25 1357.81,1211.25 1358.4,1211.25 1358.98,1211.25 1359.57,1211.25 1360.16,1211.25 1360.74,1211.25 1361.33,1211.25 1361.92,1211.25 1362.5,1211.25 1363.09,1211.25 1363.68,1211.25 1364.26,1211.25 1364.85,1211.25 1365.43,1211.25 1366.02,1211.25 1366.61,1211.25 1367.19,1211.25 1367.78,1211.25 1368.37,1211.25 1368.95,1211.25 1369.54,1211.25 1370.13,1211.25 1370.71,1211.25 1371.3,1211.25 1371.88,1211.25 1372.47,1211.25 1373.06,1211.25 1373.64,1211.25 1374.23,1211.25 1374.82,1211.25 1375.4,1211.25 1375.99,1211.25 1376.58,1211.25 1377.16,1211.25 1377.75,1211.25 1378.34,1211.25 1378.92,1211.25 1379.51,1211.25 1380.09,1211.25 1380.68,1211.25 1381.27,1211.25 1381.85,1211.25 1382.44,1211.25 1383.03,1211.25 1383.61,1211.25 1384.2,1211.25 1384.79,1211.25 1385.37,1211.25 1385.96,1211.25 1386.55,1211.25 1387.13,1211.25 1387.72,1211.25 1388.3,1211.25 1388.89,1211.25 1389.48,1211.25 1390.06,1211.25 1390.65,1211.25 1391.24,1211.25 1391.82,1211.25 1392.41,1211.25 1393,1211.25 1393.58,1211.25 1394.17,1211.25 1394.75,1211.25 1395.34,1211.25 1395.93,1211.25 1396.51,1211.25 1397.1,1211.25 1397.69,1211.25 1398.27,1211.25 1398.86,1211.25 1399.45,1211.25 1400.03,1211.25 1400.62,1211.25 1401.21,1211.25 1401.79,1211.25 1402.38,1211.25 1402.96,1211.25 1403.55,1211.25 1404.14,1211.25 1404.72,1211.25 1405.31,1211.25 1405.9,1211.25 1406.48,1211.25 1407.07,1211.25 1407.66,1211.25 1408.24,1211.25 1408.83,1211.25 1409.42,1211.25 1410,1211.25 1410.59,1211.25 1411.17,1211.25 1411.76,1211.25 1412.35,1211.25 1412.93,1211.25 1413.52,1211.25 1414.11,1211.25 1414.69,1211.25 1415.28,1211.25 1415.87,1211.25 1416.45,1211.25 1417.04,1211.25 1417.63,1211.25 1418.21,1211.25 1418.8,1211.25 1419.38,1211.25 1419.97,1211.25 1420.56,1211.25 1421.14,1211.25 1421.73,1211.25 1422.32,1211.25 1422.9,1211.25 1423.49,1211.25 1424.08,1211.25 1424.66,1211.25 1425.25,1211.25 1425.83,1211.25 1426.42,1211.25 1427.01,1211.25 1427.59,1211.25 1428.18,1211.25 1428.77,1211.25 1429.35,1211.25 1429.94,1211.25 1430.53,1211.25 1431.11,1211.25 1431.7,1211.25 1432.29,1211.25 1432.87,1211.25 1433.46,1211.25 1434.04,1211.25 1434.63,1211.25 1435.22,1211.25 1435.8,1211.25 1436.39,1211.25 1436.98,1211.25 1437.56,1211.25 1438.15,1211.25 1438.74,1211.25 1439.32,1211.25 1439.91,1211.25 1440.5,1211.25 1441.08,1211.25 1441.67,1211.25 1442.25,1211.25 1442.84,1211.25 1443.43,1211.25 1444.01,1211.25 1444.6,1211.25 1445.19,1211.25 1445.77,1211.25 1446.36,1211.25 1446.95,1211.25 1447.53,1211.25 1448.12,1211.25 1448.7,1211.25 1449.29,1211.25 1449.88,1211.25 1450.46,1211.25 1451.05,1211.25 1451.64,1211.25 1452.22,1211.25 1452.81,1211.25 1453.4,1211.25 1453.98,1211.25 1454.57,1211.25 1455.16,1211.25 1455.74,1211.25 1456.33,1211.25 1456.91,1211.25 1457.5,1211.25 1458.09,1211.25 1458.67,1211.25 1459.26,1211.25 1459.85,1211.25 1460.43,1211.25 1461.02,1211.25 1461.61,1211.25 1462.19,1211.25 1462.78,1211.25 1463.37,1211.25 1463.95,1211.25 1464.54,1211.25 1465.12,1211.25 1465.71,1211.25 1466.3,1211.25 1466.88,1211.25 1467.47,1211.25 1468.06,1211.25 1468.64,1211.25 1469.23,1211.25 1469.82,1211.25 1470.4,1211.25 1470.99,1211.25 1471.57,1211.25 1472.16,1211.25 1472.75,1211.25 1473.33,1211.25 1473.92,1211.25 1474.51,1211.25 1475.09,1211.25 1475.68,1211.25 1476.27,1211.25 1476.85,1211.25 1477.44,1211.25 1478.03,1211.25 1478.61,1211.25 1479.2,1211.25 1479.78,1211.25 1480.37,1211.25 1480.96,1211.25 1481.54,1211.25 1482.13,1211.25 1482.72,1211.25 1483.3,1211.25 1483.89,1211.25 1484.48,1211.25 1485.06,1211.25 1485.65,1211.25 1486.24,1211.25 1486.82,1211.25 1487.41,1211.25 1487.99,1211.25 1488.58,1211.25 1489.17,1211.25 1489.75,1211.25 1490.34,1211.25 1490.93,1211.25 1491.51,1211.25 1492.1,1211.25 1492.69,1211.25 1493.27,1211.25 1493.86,1211.25 1494.45,1211.25 1495.03,1211.25 1495.62,1211.25 1496.2,1211.25 1496.79,1211.25 1497.38,1211.25 1497.96,1211.25 1498.55,1211.25 1499.14,1211.25 1499.72,1211.25 1500.31,1211.25 1500.9,1211.25 1501.48,1211.25 1502.07,1211.25 1502.65,1211.25 1503.24,1211.25 1503.83,1211.25 1504.41,1211.25 1505,1211.25 1505.59,1211.25 1506.17,1211.25 1506.76,1211.25 1507.35,1211.25 1507.93,1211.25 1508.52,1211.25 1509.11,1211.25 1509.69,1211.25 1510.28,1211.25 1510.86,1211.25 1511.45,1211.25 1512.04,1211.25 1512.62,1211.25 1513.21,1211.25 1513.8,1211.25 1514.38,1211.25 1514.97,1211.25 1515.56,1211.25 1516.14,1211.25 1516.73,1211.25 1517.32,1211.25 1517.9,1211.25 1518.49,1211.25 1519.07,1211.25 1519.66,1211.25 1520.25,1211.25 1520.83,1211.25 1521.42,1211.25 1522.01,1211.25 1522.59,1211.25 1523.18,1211.25 1523.77,1211.25 1524.35,1211.25 1524.94,1211.25 1525.52,1211.25 1526.11,1211.25 1526.7,1211.25 1527.28,1211.25 1527.87,1211.25 1528.46,1211.25 1529.04,1211.25 1529.63,1211.25 1530.22,1211.25 1530.8,1211.25 1531.39,1211.25 1531.98,1211.25 1532.56,1211.25 1533.15,1211.25 1533.73,1211.25 1534.32,1211.25 1534.91,1211.25 1535.49,1211.25 1536.08,1211.25 1536.67,1211.25 1537.25,1211.25 1537.84,1211.25 1538.43,1211.25 1539.01,1211.25 1539.6,1211.25 1540.19,1211.25 1540.77,1211.25 1541.36,1211.25 1541.94,1211.25 1542.53,1211.25 1543.12,1211.25 1543.7,1211.25 1544.29,1211.25 1544.88,1211.25 1545.46,1211.25 1546.05,1211.25 1546.64,1211.25 1547.22,1211.25 1547.81,1211.25 1548.4,1211.25 1548.98,1211.25 1549.57,1211.25 1550.15,1211.25 1550.74,1211.25 1551.33,1211.25 1551.91,1211.25 1552.5,1211.25 1553.09,1211.25 1553.67,1211.25 1554.26,1211.25 1554.85,1211.25 1555.43,1211.25 1556.02,1211.25 1556.6,1211.25 1557.19,1211.25 1557.78,1211.25 1558.36,1211.25 1558.95,1211.25 1559.54,1211.25 1560.12,1211.25 1560.71,1211.25 1561.3,1211.25 1561.88,1211.25 1562.47,1211.25 1563.06,1211.25 1563.64,1211.25 1564.23,1211.25 1564.81,1211.25 1565.4,1211.25 1565.99,1211.25 1566.57,1211.25 1567.16,1211.25 1567.75,1211.25 1568.33,1211.25 1568.92,1211.25 1569.51,1211.25 1570.09,1211.25 1570.68,1211.25 1571.27,1211.25 1571.85,1211.25 1572.44,1211.25 1573.02,1211.25 1573.61,1211.25 1574.2,1211.25 1574.78,1211.25 1575.37,1211.25 1575.96,1211.25 1576.54,1211.25 1577.13,1211.25 1577.72,1211.25 1578.3,1211.25 1578.89,1211.25 1579.47,1211.25 1580.06,1211.25 1580.65,1211.25 1581.23,1211.25 1581.82,1211.25 1582.41,1211.25 1582.99,1211.25 1583.58,1211.25 1584.17,1211.25 1584.75,1211.25 1585.34,1211.25 1585.93,1211.25 1586.51,1211.25 1587.1,1211.25 1587.68,1211.25 1588.27,1211.25 1588.86,1211.25 1589.44,1211.25 1590.03,1211.25 1590.62,1211.25 1591.2,1211.25 1591.79,1211.25 1592.38,1211.25 1592.96,1211.25 1593.55,1211.25 1594.14,1211.25 1594.72,1211.25 1595.31,1211.25 1595.89,1211.25 1596.48,1211.25 1597.07,1211.25 1597.65,1211.25 1598.24,1211.25 1598.83,1211.25 1599.41,1211.25 1600,1211.25 1600.59,1211.25 1601.17,1211.25 1601.76,1211.25 1602.34,1211.25 1602.93,1211.25 1603.52,1211.25 1604.1,1211.25 1604.69,1211.25 1605.28,1211.25 1605.86,1211.25 1606.45,1211.25 1607.04,1211.25 1607.62,1211.25 1608.21,1211.25 1608.8,1211.25 1609.38,1211.25 1609.97,1211.25 1610.55,1211.25 1611.14,1211.25 1611.73,1211.25 1612.31,1211.25 1612.9,1211.25 1613.49,1211.25 1614.07,1211.25 1614.66,1211.25 1615.25,1211.25 1615.83,1211.25 1616.42,1211.25 1617.01,1211.25 1617.59,1211.25 1618.18,1211.25 1618.76,1211.25 1619.35,1211.25 1619.94,1211.25 1620.52,1211.25 1621.11,1211.25 1621.7,1211.25 1622.28,1211.25 1622.87,1211.25 1623.46,1211.25 1624.04,1211.25 1624.63,1211.25 1625.22,1211.25 1625.8,1211.25 1626.39,1211.25 1626.97,1211.25 1627.56,1211.25 1628.15,1211.25 1628.73,1211.25 1629.32,1211.25 1629.91,1211.25 1630.49,1211.25 1631.08,1211.25 1631.67,1211.25 1632.25,1211.25 1632.84,1211.25 1633.42,1211.25 1634.01,1211.25 1634.6,1211.25 1635.18,1211.25 1635.77,1211.25 1636.36,1211.25 1636.94,1211.25 1637.53,1211.25 1638.12,1211.25 1638.7,1211.25 1639.29,1211.25 1639.88,1211.25 1640.46,1211.25 1641.05,1211.25 1641.63,1211.25 1642.22,1211.25 1642.81,1211.25 1643.39,1211.25 1643.98,1211.25 1644.57,1211.25 1645.15,1211.25 1645.74,1211.25 1646.33,1211.25 1646.91,1211.25 1647.5,1211.25 1648.09,1211.25 1648.67,1211.25 1649.26,1211.25 1649.84,1211.25 1650.43,1211.25 1651.02,1211.25 1651.6,1211.25 1652.19,1211.25 1652.78,1211.25 1653.36,1211.25 1653.95,1211.25 1654.54,1211.25 1655.12,1211.25 1655.71,1211.25 1656.29,1211.25 1656.88,1211.25 1657.47,1211.25 1658.05,1211.25 1658.64,1211.25 1659.23,1211.25 1659.81,1211.25 1660.4,1211.25 1660.99,1211.25 1661.57,1211.25 1662.16,1211.25 1662.75,1211.25 1663.33,1211.25 1663.92,1211.25 1664.5,1211.25 1665.09,1211.25 1665.68,1211.25 1666.26,1211.25 1666.85,1211.25 1667.44,1211.25 1668.02,1211.25 1668.61,1211.25 1669.2,1211.25 1669.78,1211.25 1670.37,1211.25 1670.96,1211.25 1671.54,1211.25 1672.13,1211.25 1672.71,1211.25 1673.3,1211.25 1673.89,1211.25 1674.47,1211.25 1675.06,1211.25 1675.65,1211.25 1676.23,1211.25 1676.82,1211.25 1677.41,1211.25 1677.99,1211.25 1678.58,1211.25 1679.17,1211.25 1679.75,1211.25 1680.34,1211.25 1680.92,1211.25 1681.51,1211.25 1682.1,1211.25 1682.68,1211.25 1683.27,1211.25 1683.86,1211.25 1684.44,1211.25 1685.03,1211.25 1685.62,1211.25 1686.2,1211.25 1686.79,1211.25 1687.37,1211.25 1687.96,1211.25 1688.55,1211.25 1689.13,1211.25 1689.72,1211.25 1690.31,1211.25 1690.89,1211.25 1691.48,1211.25 1692.07,1211.25 1692.65,1211.25 1693.24,1211.25 1693.83,1211.25 1694.41,1211.25 1695,1211.25 1695.58,1211.25 1696.17,1211.25 1696.76,1211.25 1697.34,1211.25 1697.93,1211.25 1698.52,1211.25 1699.1,1211.25 1699.69,1211.25 1700.28,1211.25 1700.86,1211.25 1701.45,1211.25 1702.04,1211.25 1702.62,1211.25 1703.21,1211.25 1703.79,1211.25 1704.38,1211.25 1704.97,1211.25 1705.55,1211.25 1706.14,1211.25 1706.73,1211.25 1707.31,1211.25 1707.9,1211.25 1708.49,1211.25 1709.07,1211.25 1709.66,1211.25 1710.24,1211.25 1710.83,1211.25 1711.42,1211.25 1712,1211.25 1712.59,1211.25 1713.18,1211.25 1713.76,1211.25 1714.35,1211.25 1714.94,1211.25 1715.52,1211.25 1716.11,1211.25 1716.7,1211.25 1717.28,1211.25 1717.87,1211.25 1718.45,1211.25 1719.04,1211.25 1719.63,1211.25 1720.21,1211.25 1720.8,1211.25 1721.39,1211.25 1721.97,1211.25 1722.56,1211.25 1723.15,1211.25 1723.73,1211.25 1724.32,1211.25 1724.91,1211.25 1725.49,1211.25 1726.08,1211.25 1726.66,1211.25 1727.25,1211.25 1727.84,1211.25 1728.42,1211.25 1729.01,1211.25 1729.6,1211.25 1730.18,1211.25 1730.77,1211.25 1731.36,1211.25 1731.94,1211.25 1732.53,1211.25 1733.11,1211.25 1733.7,1211.25 1734.29,1211.25 1734.87,1211.25 1735.46,1211.25 1736.05,1211.25 1736.63,1211.25 1737.22,1211.25 1737.81,1211.25 1738.39,1211.25 1738.98,1211.25 1739.57,1211.25 1740.15,1211.25 1740.74,1211.25 1741.32,1211.25 1741.91,1211.25 1742.5,1211.25 1743.08,1211.25 1743.67,1211.25 1744.26,1211.25 1744.84,1211.25 1745.43,1211.25 1746.02,1211.25 1746.6,1211.25 1747.19,1211.25 1747.78,1211.25 1748.36,1211.25 1748.95,1211.25 1749.53,1211.25 1750.12,1211.25 1750.71,1211.25 1751.29,1211.25 1751.88,1211.25 1752.47,1211.25 1753.05,1211.25 1753.64,1211.25 1754.23,1211.25 1754.81,1211.25 1755.4,1211.25 1755.99,1211.25 1756.57,1211.25 1757.16,1211.25 1757.74,1211.25 1758.33,1211.25 1758.92,1211.25 1759.5,1211.25 1760.09,1211.25 1760.68,1211.25 1761.26,1211.25 1761.85,1211.25 1762.44,1211.25 1763.02,1211.25 1763.61,1211.25 1764.19,1211.25 1764.78,1211.25 1765.37,1211.25 1765.95,1211.25 1766.54,1211.25 1767.13,1211.25 1767.71,1211.25 1768.3,1211.25 1768.89,1211.25 1769.47,1211.25 1770.06,1211.25 1770.65,1211.25 1771.23,1211.25 1771.82,1211.25 1772.4,1211.25 1772.99,1211.25 1773.58,1211.25 1774.16,1211.25 1774.75,1211.25 1775.34,1211.25 1775.92,1211.25 1776.51,1211.25 1777.1,1211.25 1777.68,1211.25 1778.27,1211.25 1778.86,1211.25 1779.44,1211.25 1780.03,1211.25 1780.61,1211.25 1781.2,1211.25 1781.79,1211.25 1782.37,1211.25 1782.96,1211.25 1783.55,1211.25 1784.13,1211.25 1784.72,1211.25 1785.31,1211.25 1785.89,1211.25 1786.48,1211.25 1787.06,1211.25 1787.65,1211.25 1788.24,1211.25 1788.82,1211.25 1789.41,1211.25 1790,1211.25 1790.58,1211.25 1791.17,1211.25 1791.76,1211.25 1792.34,1211.25 1792.93,1211.25 1793.52,1211.25 1794.1,1211.25 1794.69,1211.25 1795.27,1211.25 1795.86,1211.25 1796.45,1211.25 1797.03,1211.25 1797.62,1211.25 1798.21,1211.25 1798.79,1211.25 1799.38,1211.25 1799.97,1211.25 1800.55,1211.25 1801.14,1211.25 1801.73,1211.25 1802.31,1211.25 1802.9,1211.25 1803.48,1211.25 1804.07,1211.25 1804.66,1211.25 1805.24,1211.25 1805.83,1211.25 1806.42,1211.25 1807,1211.25 1807.59,1211.25 1808.18,1211.25 1808.76,1211.25 1809.35,1211.25 1809.94,1211.25 1810.52,1211.25 1811.11,1211.25 1811.69,1211.25 1812.28,1211.25 1812.87,1211.25 1813.45,1211.25 1814.04,1211.25 1814.63,1211.25 1815.21,1211.25 1815.8,1211.25 1816.39,1211.25 1816.97,1211.25 1817.56,1211.25 1818.14,1211.25 1818.73,1211.25 1819.32,1211.25 1819.9,1211.25 1820.49,1211.25 1821.08,1211.25 1821.66,1211.25 1822.25,1211.25 1822.84,1211.25 1823.42,1211.25 1824.01,1211.25 1824.6,1211.25 1825.18,1211.25 1825.77,1211.25 1826.35,1211.25 1826.94,1211.25 1827.53,1211.25 1828.11,1211.25 1828.7,1211.25 1829.29,1211.25 1829.87,1211.25 1830.46,1211.25 1831.05,1211.25 1831.63,1211.25 1832.22,1211.25 1832.81,1211.25 1833.39,1211.25 1833.98,1211.25 1834.56,1211.25 1835.15,1211.25 1835.74,1211.25 1836.32,1211.25 1836.91,1211.25 1837.5,1211.25 1838.08,1211.25 1838.67,1211.25 1839.26,1211.25 1839.84,1211.25 1840.43,1211.25 1841.01,1211.25 1841.6,1211.25 1842.19,1211.25 1842.77,1211.25 1843.36,1211.25 1843.95,1211.25 1844.53,1211.25 1845.12,1211.25 1845.71,1211.25 1846.29,1211.25 1846.88,1211.25 1847.47,1211.25 1848.05,1211.25 1848.64,1211.25 1849.22,1211.25 1849.81,1211.25 1850.4,1211.25 1850.98,1211.25 1851.57,1211.25 1852.16,1211.25 1852.74,1211.25 1853.33,1211.25 1853.92,1211.25 1854.5,1211.25 1855.09,1211.25 1855.68,1211.25 1856.26,1211.25 1856.85,1211.25 1857.43,1211.25 1858.02,1211.25 1858.61,1211.25 1859.19,1211.25 1859.78,1211.25 1860.37,1211.25 1860.95,1211.25 1861.54,1211.25 1862.13,1211.25 1862.71,1211.25 1863.3,1211.25 1863.88,1211.25 1864.47,1211.25 1865.06,1211.25 1865.64,1211.25 1866.23,1211.25 1866.82,1211.25 1867.4,1211.25 1867.99,1211.25 1868.58,1211.25 1869.16,1211.25 1869.75,1211.25 1870.34,1211.25 1870.92,1211.25 1871.51,1211.25 1872.09,1211.25 1872.68,1211.25 1873.27,1211.25 1873.85,1211.25 1874.44,1211.25 1875.03,1211.25 1875.61,1211.25 1876.2,1211.25 1876.79,1211.25 1877.37,1211.25 1877.96,1211.25 1878.55,1211.25 1879.13,1211.25 1879.72,1211.25 1880.3,1211.25 1880.89,1211.25 1881.48,1211.25 1882.06,1211.25 1882.65,1211.25 1883.24,1211.25 1883.82,1211.25 1884.41,1211.25 1885,1211.25 1885.58,1211.25 1886.17,1211.25 1886.76,1211.25 1887.34,1211.25 1887.93,1211.25 1888.51,1211.25 1889.1,1211.25 1889.69,1211.25 1890.27,1211.25 1890.86,1211.25 1891.45,1211.25 1892.03,1211.25 1892.62,1211.25 1893.21,1211.25 1893.79,1211.25 1894.38,1211.25 1894.96,1211.25 1895.55,1211.25 1896.14,1211.25 1896.72,1211.25 1897.31,1211.25 1897.9,1211.25 1898.48,1211.25 1899.07,1211.25 1899.66,1211.25 1900.24,1211.25 1900.83,1211.25 1901.42,1211.25 1902,1211.25 1902.59,1211.25 1903.17,1211.25 1903.76,1211.25 1904.35,1211.25 1904.93,1211.25 1905.52,1211.25 1906.11,1211.25 1906.69,1211.25 1907.28,1211.25 1907.87,1211.25 1908.45,1211.25 1909.04,1211.25 1909.63,1211.25 1910.21,1211.25 1910.8,1211.25 1911.38,1211.25 1911.97,1211.25 1912.56,1211.25 1913.14,1211.25 1913.73,1211.25 1914.32,1211.25 1914.9,1211.25 1915.49,1211.25 1916.08,1211.25 1916.66,1211.25 1917.25,1211.25 1917.83,1211.25 1918.42,1211.25 1919.01,1211.25 1919.59,1211.25 1920.18,1211.25 1920.77,1211.25 1921.35,1211.25 1921.94,1211.25 1922.53,1211.25 1923.11,1211.25 1923.7,1211.25 1924.29,1211.25 1924.87,1211.25 1925.46,1211.25 1926.04,1211.25 1926.63,1211.25 1927.22,1211.25 1927.8,1211.25 1928.39,1211.25 1928.98,1211.25 1929.56,1211.25 1930.15,1211.25 1930.74,1211.25 1931.32,1211.25 1931.91,1211.25 1932.5,1211.25 1933.08,1211.25 1933.67,1211.25 1934.25,1211.25 1934.84,1211.25 1935.43,1211.25 1936.01,1211.25 1936.6,1211.25 1937.19,1211.25 1937.77,1211.25 1938.36,1211.25 1938.95,1211.25 1939.53,1211.25 1940.12,1211.25 1940.71,1211.25 1941.29,1211.25 1941.88,1211.25 1942.46,1211.25 1943.05,1211.25 1943.64,1211.25 1944.22,1211.25 1944.81,1211.25 1945.4,1211.25 1945.98,1211.25 1946.57,1211.25 1947.16,1211.25 1947.74,1211.25 1948.33,1211.25 1948.91,1211.25 1949.5,1211.25 1950.09,1211.25 1950.67,1211.25 1951.26,1211.25 1951.85,1211.25 1952.43,1211.25 1953.02,1211.25 1953.61,1211.25 1954.19,1211.25 1954.78,1211.25 1955.37,1211.25 1955.95,1211.25 1956.54,1211.25 1957.12,1211.25 1957.71,1211.25 1958.3,1211.25 1958.88,1211.25 1959.47,1211.25 1960.06,1211.25 1960.64,1211.25 1961.23,1211.25 1961.82,1211.25 1962.4,1211.25 1962.99,1211.25 1963.58,1211.25 1964.16,1211.25 1964.75,1211.25 1965.33,1211.25 1965.92,1211.25 1966.51,1211.25 1967.09,1211.25 1967.68,1211.25 1968.27,1211.25 1968.85,1211.25 1969.44,1211.25 1970.03,1211.25 1970.61,1211.25 1971.2,1211.25 1971.78,1211.25 1972.37,1211.25 1972.96,1211.25 1973.54,1211.25 1974.13,1211.25 1974.72,1211.25 1975.3,1211.25 1975.89,1211.25 1976.48,1211.25 1977.06,1211.25 1977.65,1211.25 1978.24,1211.25 1978.82,1211.25 1979.41,1211.25 1979.99,1211.25 1980.58,1211.25 1981.17,1211.25 1981.75,1211.25 1982.34,1211.25 1982.93,1211.25 1983.51,1211.25 1984.1,1211.25 1984.69,1211.25 1985.27,1211.25 1985.86,1211.25 1986.45,1211.25 1987.03,1211.25 1987.62,1211.25 1988.2,1211.25 1988.79,1211.25 1989.38,1211.25 1989.96,1211.25 1990.55,1211.25 1991.14,1211.25 1991.72,1211.25 1992.31,1211.25 1992.9,1211.25 1993.48,1211.25 1994.07,1211.25 1994.65,1211.25 1995.24,1211.25 1995.83,1211.25 1996.41,1211.25 1997,1211.25 1997.59,1211.25 1998.17,1211.25 1998.76,1211.25 1999.35,1211.25 1999.93,1211.25 2000.52,1211.25 2001.11,1211.25 2001.69,1211.25 2002.28,1211.25 2002.86,1211.25 2003.45,1211.25 2004.04,1211.25 2004.62,1211.25 2005.21,1211.25 2005.8,1211.25 2006.38,1211.25 2006.97,1211.25 2007.56,1211.25 2008.14,1211.25 2008.73,1211.25 2009.32,1211.25 2009.9,1211.25 2010.49,1211.25 2011.07,1211.25 2011.66,1211.25 2012.25,1211.25 2012.83,1211.25 2013.42,1211.25 2014.01,1211.25 2014.59,1211.25 2015.18,1211.25 2015.77,1211.25 2016.35,1211.25 2016.94,1211.25 2017.53,1211.25 2018.11,1211.25 2018.7,1211.25 2019.28,1211.25 2019.87,1211.25 2020.46,1211.25 2021.04,1211.25 2021.63,1211.25 2022.22,1211.25 2022.8,1211.25 2023.39,1211.25 2023.98,1211.25 2024.56,1211.25 2025.15,1211.25 2025.73,1211.25 2026.32,1211.25 2026.91,1211.25 2027.49,1211.25 2028.08,1211.25 2028.67,1211.25 2029.25,1211.25 2029.84,1211.25 2030.43,1211.25 2031.01,1211.25 2031.6,1211.25 2032.19,1211.25 2032.77,1211.25 2033.36,1211.25 2033.94,1211.25 2034.53,1211.25 2035.12,1211.25 2035.7,1211.25 2036.29,1211.25 2036.88,1211.25 2037.46,1211.25 2038.05,1211.25 2038.64,1211.25 2039.22,1211.25 2039.81,1211.25 2040.4,1211.25 2040.98,1211.25 2041.57,1211.25 2042.15,1211.25 2042.74,1211.25 2043.33,1211.25 2043.91,1211.25 2044.5,1211.25 2045.09,1211.25 2045.67,1211.25 2046.26,1211.25 2046.85,1211.25 2047.43,1211.25 2048.02,1211.25 2048.6,1211.25 2049.19,1211.25 2049.78,1211.25 2050.36,1211.25 2050.95,1211.25 2051.54,1211.25 2052.12,1211.25 2052.71,1211.25 2053.3,1211.25 2053.88,1211.25 2054.47,1211.25 2055.06,1211.25 2055.64,1211.25 2056.23,1211.25 2056.81,1211.25 2057.4,1211.25 2057.99,1211.25 2058.57,1211.25 2059.16,1211.25 2059.75,1211.25 2060.33,1211.25 2060.92,1211.25 2061.51,1211.25 2062.09,1211.25 2062.68,1211.25 2063.27,1211.25 2063.85,1211.25 2064.44,1211.25 2065.02,1211.25 2065.61,1211.25 2066.2,1211.25 2066.78,1211.25 2067.37,1211.25 2067.96,1211.25 2068.54,1211.25 2069.13,1211.25 2069.72,1211.25 2070.3,1211.25 2070.89,1211.25 2071.48,1211.25 2072.06,1211.25 2072.65,1211.25 2073.23,1211.25 2073.82,1211.25 2074.41,1211.25 2074.99,1211.25 2075.58,1211.25 2076.17,1211.25 2076.75,1211.25 2077.34,1211.25 2077.93,1211.25 2078.51,1211.25 2079.1,1211.25 2079.68,1211.25 2080.27,1211.25 2080.86,1211.25 2081.44,1211.25 2082.03,1211.25 2082.62,1211.25 2083.2,1211.25 2083.79,1211.25 2084.38,1211.25 2084.96,1211.25 2085.55,1211.25 2086.14,1211.25 2086.72,1211.25 2087.31,1211.25 2087.89,1211.25 2088.48,1211.25 2089.07,1211.25 2089.65,1211.25 2090.24,1211.25 2090.83,1211.25 2091.41,1211.25 2092,1211.25 2092.59,1211.25 2093.17,1211.25 2093.76,1211.25 2094.35,1211.25 2094.93,1211.25 2095.52,1211.25 2096.1,1211.25 2096.69,1211.25 2097.28,1211.25 2097.86,1211.25 2098.45,1211.25 2099.04,1211.25 2099.62,1211.25 2100.21,1211.25 2100.8,1211.25 2101.38,1211.25 2101.97,1211.25 2102.55,1211.25 2103.14,1211.25 2103.73,1211.25 2104.31,1211.25 2104.9,1211.25 2105.49,1211.25 2106.07,1211.25 2106.66,1211.25 2107.25,1211.25 2107.83,1211.25 2108.42,1211.25 2109.01,1211.25 2109.59,1211.25 2110.18,1211.25 2110.76,1211.25 2111.35,1211.25 2111.94,1211.25 2112.52,1211.25 2113.11,1211.25 2113.7,1211.25 2114.28,1211.25 2114.87,1211.25 2115.46,1211.25 2116.04,1211.25 2116.63,1211.25 2117.22,1211.25 2117.8,1211.25 2118.39,1211.25 2118.97,1211.25 2119.56,1211.25 2120.15,1211.25 2120.73,1211.25 2121.32,1211.25 2121.91,1211.25 2122.49,1211.25 2123.08,1211.25 2123.67,1211.25 2124.25,1211.25 2124.84,1211.25 2125.42,1211.25 2126.01,1211.25 2126.6,1211.25 2127.18,1211.25 2127.77,1211.25 2128.36,1211.25 2128.94,1211.25 2129.53,1211.25 2130.12,1211.25 2130.7,1211.25 2131.29,1211.25 2131.88,1211.25 2132.46,1211.25 2133.05,1211.25 2133.63,1211.25 2134.22,1211.25 2134.81,1211.25 2135.39,1211.25 2135.98,1211.25 2136.57,1211.25 2137.15,1211.25 2137.74,1211.25 2138.33,1211.25 2138.91,1211.25 2139.5,1211.25 2140.09,1211.25 2140.67,1211.25 2141.26,1211.25 2141.84,1211.25 2142.43,1211.25 2143.02,1211.25 2143.6,1211.25 2144.19,1211.25 2144.78,1211.25 2145.36,1211.25 2145.95,1211.25 2146.54,1211.25 2147.12,1211.25 2147.71,1211.25 2148.3,1211.25 2148.88,1211.25 2149.47,1211.25 2150.05,1211.25 2150.64,1211.25 2151.23,1211.25 2151.81,1211.25 2152.4,1211.25 2152.99,1211.25 2153.57,1211.25 2154.16,1211.25 2154.75,1211.25 2155.33,1211.25 2155.92,1211.25 2156.5,1211.25 2157.09,1211.25 2157.68,1211.25 2158.26,1211.25 \"/>\n<path clip-path=\"url(#clip992)\" d=\"M986.025 1211.05 L986.612 1211.05 L987.198 1211.05 L987.785 1211.05 L988.371 1211.05 L988.957 1211.05 L989.544 1211.05 L990.13 1211.05 L990.717 1211.05 L991.303 1211.05 L991.889 1211.05 L992.476 1211.05 L993.062 1211.05 L993.649 1211.05 L994.235 1211.05 L994.822 1211.05 L995.408 1211.05 L995.994 1211.05 L996.581 1211.05 L997.167 1211.05 L997.754 1211.05 L998.34 1211.05 L998.926 1211.05 L999.513 1211.05 L1000.1 1211.05 L1000.69 1211.05 L1001.27 1211.05 L1001.86 1211.05 L1002.44 1211.05 L1003.03 1211.05 L1003.62 1211.05 L1004.2 1211.05 L1004.79 1211.05 L1005.38 1211.05 L1005.96 1211.05 L1006.55 1211.05 L1007.14 1211.05 L1007.72 1211.05 L1008.31 1211.05 L1008.9 1211.05 L1009.48 1211.05 L1010.07 1211.05 L1010.65 1211.05 L1011.24 1211.05 L1011.83 1211.05 L1012.41 1211.05 L1013 1211.05 L1013.59 1211.05 L1014.17 1211.05 L1014.76 1211.05 L1015.35 1211.05 L1015.93 1211.05 L1016.52 1211.05 L1017.11 1211.05 L1017.69 1211.05 L1018.28 1211.05 L1018.86 1211.05 L1019.45 1211.05 L1020.04 1211.05 L1020.62 1211.05 L1021.21 1211.05 L1021.8 1211.05 L1022.38 1211.05 L1022.97 1211.05 L1023.56 1211.05 L1024.14 1211.05 L1024.73 1211.05 L1025.32 1211.05 L1025.9 1211.05 L1026.49 1211.05 L1027.07 1211.05 L1027.66 1211.05 L1028.25 1211.05 L1028.83 1211.05 L1029.42 1211.05 L1030.01 1211.05 L1030.59 1211.05 L1031.18 1211.05 L1031.77 1211.05 L1032.35 1211.05 L1032.94 1211.05 L1033.52 1211.05 L1034.11 1211.05 L1034.7 1211.05 L1035.28 1211.05 L1035.87 1211.05 L1036.46 1211.05 L1037.04 1211.05 L1037.63 1211.05 L1038.22 1211.05 L1038.8 1211.05 L1039.39 1211.05 L1039.98 1211.05 L1040.56 1211.05 L1041.15 1211.05 L1041.73 1211.05 L1042.32 1211.05 L1042.91 1211.05 L1043.49 1211.05 L1044.08 1211.05 L1044.67 1211.05 L1045.25 1211.05 L1045.84 1211.05 L1046.43 1211.05 L1047.01 1211.05 L1047.6 1211.05 L1048.19 1211.05 L1048.77 1211.05 L1049.36 1211.05 L1049.94 1211.05 L1050.53 1211.05 L1051.12 1211.05 L1051.7 1211.05 L1052.29 1211.05 L1052.88 1211.05 L1053.46 1211.05 L1054.05 1211.05 L1054.64 1211.05 L1055.22 1211.05 L1055.81 1211.05 L1056.39 1211.05 L1056.98 1211.05 L1057.57 1211.05 L1058.15 1211.05 L1058.74 1211.05 L1059.33 1211.05 L1059.91 1211.05 L1060.5 1211.05 L1061.09 1211.05 L1061.67 1211.05 L1062.26 1211.05 L1062.85 1211.05 L1063.43 1211.05 L1064.02 1211.05 L1064.6 1211.05 L1065.19 1211.05 L1065.78 1211.05 L1066.36 1211.05 L1066.95 1211.05 L1067.54 1211.05 L1068.12 1211.05 L1068.71 1211.05 L1069.3 1211.05 L1069.88 1211.05 L1070.47 1211.05 L1071.06 1211.05 L1071.64 1211.05 L1072.23 1211.05 L1072.81 1211.05 L1073.4 1211.05 L1073.99 1211.05 L1074.57 1211.05 L1075.16 1211.05 L1075.75 1211.05 L1076.33 1211.05 L1076.92 1211.05 L1077.51 1211.05 L1078.09 1211.05 L1078.68 1211.05 L1079.26 1211.05 L1079.85 1211.05 L1080.44 1211.05 L1081.02 1211.05 L1081.61 1211.05 L1082.2 1211.05 L1082.78 1211.05 L1083.37 1211.05 L1083.96 1211.05 L1084.54 1211.05 L1085.13 1211.05 L1085.72 1211.05 L1086.3 1211.05 L1086.89 1211.05 L1087.47 1211.05 L1088.06 1211.05 L1088.65 1211.05 L1089.23 1211.05 L1089.82 1211.05 L1090.41 1211.05 L1090.99 1211.05 L1091.58 1211.05 L1092.17 1211.05 L1092.75 1211.05 L1093.34 1211.05 L1093.93 1211.05 L1094.51 1211.05 L1095.1 1211.05 L1095.68 1211.05 L1096.27 1211.05 L1096.86 1211.05 L1097.44 1211.05 L1098.03 1211.05 L1098.62 1211.05 L1099.2 1211.05 L1099.79 1211.05 L1100.38 1211.05 L1100.96 1211.05 L1101.55 1211.05 L1102.14 1211.05 L1102.72 1211.05 L1103.31 1211.05 L1103.89 1211.05 L1104.48 1211.05 L1105.07 1211.05 L1105.65 1211.05 L1106.24 1211.05 L1106.83 1211.05 L1107.41 1211.05 L1108 1211.05 L1108.59 1211.05 L1109.17 1211.05 L1109.76 1211.05 L1110.34 1211.05 L1110.93 1211.05 L1111.52 1211.05 L1112.1 1211.05 L1112.69 1211.05 L1113.28 1211.05 L1113.86 1211.05 L1114.45 1211.05 L1115.04 1211.05 L1115.62 1211.05 L1116.21 1211.05 L1116.8 1211.05 L1117.38 1211.05 L1117.97 1211.05 L1118.55 1211.05 L1119.14 1211.05 L1119.73 1211.05 L1120.31 1211.05 L1120.9 1211.05 L1121.49 1211.05 L1122.07 1211.05 L1122.66 1211.05 L1123.25 1211.05 L1123.83 1211.05 L1124.42 1211.05 L1125.01 1211.05 L1125.59 1211.05 L1126.18 1211.05 L1126.76 1211.05 L1127.35 1211.05 L1127.94 1211.05 L1128.52 1211.05 L1129.11 1211.05 L1129.7 1211.05 L1130.28 1211.05 L1130.87 1211.05 L1131.46 1211.05 L1132.04 1211.05 L1132.63 1211.05 L1133.21 1211.05 L1133.8 1211.05 L1134.39 1211.05 L1134.97 1211.05 L1135.56 1211.05 L1136.15 1211.05 L1136.73 1211.05 L1137.32 1211.05 L1137.91 1211.05 L1138.49 1211.05 L1139.08 1211.05 L1139.67 1211.05 L1140.25 1211.05 L1140.84 1211.05 L1141.42 1211.05 L1142.01 1211.05 L1142.6 1211.05 L1143.18 1211.05 L1143.77 1211.05 L1144.36 1211.05 L1144.94 1211.05 L1145.53 1211.05 L1146.12 1211.05 L1146.7 1211.05 L1147.29 1211.05 L1147.88 1211.05 L1148.46 1211.05 L1149.05 1211.05 L1149.63 1211.05 L1150.22 1211.05 L1150.81 1211.05 L1151.39 1211.05 L1151.98 1211.05 L1152.57 1211.05 L1153.15 1211.05 L1153.74 1211.05 L1154.33 1211.05 L1154.91 1211.05 L1155.5 1211.05 L1156.09 1211.05 L1156.67 1211.05 L1157.26 1211.05 L1157.84 1211.05 L1158.43 1211.05 L1159.02 1211.05 L1159.6 1211.05 L1160.19 1211.05 L1160.78 1211.05 L1161.36 1211.05 L1161.95 1211.05 L1162.54 1211.05 L1163.12 1211.05 L1163.71 1211.05 L1164.29 1211.05 L1164.88 1211.05 L1165.47 1211.05 L1166.05 1211.05 L1166.64 1211.05 L1167.23 1211.05 L1167.81 1211.05 L1168.4 1211.05 L1168.99 1211.05 L1169.57 1211.05 L1170.16 1211.05 L1170.75 1211.05 L1171.33 1211.05 L1171.92 1211.05 L1172.5 1211.05 L1173.09 1211.05 L1173.68 1211.05 L1174.26 1211.05 L1174.85 1211.05 L1175.44 1211.05 L1176.02 1211.05 L1176.61 1211.05 L1177.2 1211.05 L1177.78 1211.05 L1178.37 1211.05 L1178.96 1211.05 L1179.54 1211.05 L1180.13 1211.05 L1180.71 1211.05 L1181.3 1211.05 L1181.89 1211.05 L1182.47 1211.05 L1183.06 1211.05 L1183.65 1211.05 L1184.23 1211.05 L1184.82 1211.05 L1185.41 1211.05 L1185.99 1211.05 L1186.58 1211.05 L1187.16 1211.05 L1187.75 1211.05 L1188.34 1211.05 L1188.92 1211.05 L1189.51 1211.05 L1190.1 1211.05 L1190.68 1211.05 L1191.27 1211.05 L1191.86 1211.05 L1192.44 1211.05 L1193.03 1211.05 L1193.62 1211.05 L1194.2 1211.05 L1194.79 1211.05 L1195.37 1211.05 L1195.96 1211.05 L1196.55 1211.05 L1197.13 1211.05 L1197.72 1211.05 L1198.31 1211.05 L1198.89 1211.05 L1199.48 1211.05 L1200.07 1211.05 L1200.65 1211.05 L1201.24 1211.05 L1201.83 1211.05 L1202.41 1211.05 L1203 1211.05 L1203.58 1211.05 L1204.17 1211.05 L1204.76 1211.05 L1205.34 1211.05 L1205.93 1211.05 L1206.52 1211.05 L1207.1 1211.05 L1207.69 1211.05 L1208.28 1211.05 L1208.86 1211.05 L1209.45 1211.05 L1210.03 1211.05 L1210.62 1211.05 L1211.21 1211.05 L1211.79 1211.05 L1212.38 1211.05 L1212.97 1211.05 L1213.55 1211.05 L1214.14 1211.05 L1214.73 1211.05 L1215.31 1211.05 L1215.9 1211.05 L1216.49 1211.05 L1217.07 1211.05 L1217.66 1211.05 L1218.24 1211.05 L1218.83 1211.05 L1219.42 1211.05 L1220 1211.05 L1220.59 1211.05 L1221.18 1211.05 L1221.76 1211.05 L1222.35 1211.05 L1222.94 1211.05 L1223.52 1211.05 L1224.11 1211.05 L1224.7 1211.05 L1225.28 1211.05 L1225.87 1211.05 L1226.45 1211.05 L1227.04 1211.05 L1227.63 1211.05 L1228.21 1211.05 L1228.8 1211.05 L1229.39 1211.05 L1229.97 1211.05 L1230.56 1211.05 L1231.15 1211.05 L1231.73 1211.05 L1232.32 1211.05 L1232.91 1211.05 L1233.49 1211.05 L1234.08 1211.05 L1234.66 1211.05 L1235.25 1211.05 L1235.84 1211.05 L1236.42 1211.05 L1237.01 1211.05 L1237.6 1211.05 L1238.18 1211.05 L1238.77 1211.05 L1239.36 1211.05 L1239.94 1211.05 L1240.53 1211.05 L1241.11 1211.05 L1241.7 1211.05 L1242.29 1211.05 L1242.87 1211.05 L1243.46 1211.05 L1244.05 1211.05 L1244.63 1211.05 L1245.22 1211.05 L1245.81 1211.05 L1246.39 1211.05 L1246.98 1211.05 L1247.57 1211.05 L1248.15 1211.05 L1248.74 1211.05 L1249.32 1211.05 L1249.91 1211.05 L1250.5 1211.05 L1251.08 1211.05 L1251.67 1211.05 L1252.26 1211.05 L1252.84 1211.05 L1253.43 1211.05 L1254.02 1211.05 L1254.6 1211.05 L1255.19 1211.05 L1255.78 1211.05 L1256.36 1211.05 L1256.95 1211.05 L1257.53 1211.05 L1258.12 1211.05 L1258.71 1211.05 L1259.29 1211.05 L1259.88 1211.05 L1260.47 1211.05 L1261.05 1211.05 L1261.64 1211.05 L1262.23 1211.05 L1262.81 1211.05 L1263.4 1211.05 L1263.98 1211.05 L1264.57 1211.05 L1265.16 1211.05 L1265.74 1211.05 L1266.33 1211.05 L1266.92 1211.05 L1267.5 1211.05 L1268.09 1211.05 L1268.68 1211.05 L1269.26 1211.05 L1269.85 1211.05 L1270.44 1211.05 L1271.02 1211.05 L1271.61 1211.05 L1272.19 1211.05 L1272.78 1211.05 L1273.37 1211.05 L1273.95 1211.05 L1274.54 1211.05 L1275.13 1211.05 L1275.71 1211.05 L1276.3 1211.05 L1276.89 1211.05 L1277.47 1211.05 L1278.06 1211.05 L1278.65 1211.05 L1279.23 1211.05 L1279.82 1211.05 L1280.4 1211.05 L1280.99 1211.05 L1281.58 1211.05 L1282.16 1211.05 L1282.75 1211.05 L1283.34 1211.05 L1283.92 1211.05 L1284.51 1211.05 L1285.1 1211.05 L1285.68 1211.05 L1286.27 1211.05 L1286.86 1211.05 L1287.44 1211.05 L1288.03 1211.05 L1288.61 1211.05 L1289.2 1211.05 L1289.79 1211.05 L1290.37 1211.05 L1290.96 1211.05 L1291.55 1211.05 L1292.13 1211.05 L1292.72 1211.05 L1293.31 1211.05 L1293.89 1211.05 L1294.48 1211.05 L1295.06 1211.05 L1295.65 1211.05 L1296.24 1211.05 L1296.82 1211.05 L1297.41 1211.05 L1298 1211.05 L1298.58 1211.05 L1299.17 1211.05 L1299.76 1211.05 L1300.34 1211.05 L1300.93 1211.05 L1301.52 1211.05 L1302.1 1211.05 L1302.69 1211.05 L1303.27 1211.05 L1303.86 1211.05 L1304.45 1211.05 L1305.03 1211.05 L1305.62 1211.05 L1306.21 1211.05 L1306.79 1211.05 L1307.38 1211.05 L1307.97 1211.05 L1308.55 1211.05 L1309.14 1211.05 L1309.73 1211.05 L1310.31 1211.05 L1310.9 1211.05 L1311.48 1211.05 L1312.07 1211.05 L1312.66 1211.05 L1313.24 1211.05 L1313.83 1211.05 L1314.42 1211.05 L1315 1211.05 L1315.59 1211.05 L1316.18 1211.05 L1316.76 1211.05 L1317.35 1211.05 L1317.93 1211.05 L1318.52 1211.05 L1319.11 1211.05 L1319.69 1211.05 L1320.28 1211.05 L1320.87 1211.05 L1321.45 1211.05 L1322.04 1211.05 L1322.63 1211.05 L1323.21 1211.05 L1323.8 1211.05 L1324.39 1211.05 L1324.97 1211.05 L1325.56 1211.05 L1326.14 1211.05 L1326.73 1211.05 L1327.32 1211.05 L1327.9 1211.05 L1328.49 1211.05 L1329.08 1211.05 L1329.66 1211.05 L1330.25 1211.05 L1330.84 1211.05 L1331.42 1211.05 L1332.01 1211.05 L1332.6 1211.05 L1333.18 1211.05 L1333.77 1211.05 L1334.35 1211.05 L1334.94 1211.05 L1335.53 1211.05 L1336.11 1211.05 L1336.7 1211.05 L1337.29 1211.05 L1337.87 1211.05 L1338.46 1211.05 L1339.05 1211.05 L1339.63 1211.05 L1340.22 1211.05 L1340.8 1211.05 L1341.39 1211.05 L1341.98 1211.05 L1342.56 1211.05 L1343.15 1211.05 L1343.74 1211.05 L1344.32 1211.05 L1344.91 1211.05 L1345.5 1211.05 L1346.08 1211.05 L1346.67 1211.05 L1347.26 1211.05 L1347.84 1211.05 L1348.43 1211.05 L1349.01 1211.05 L1349.6 1211.05 L1350.19 1211.05 L1350.77 1211.05 L1351.36 1211.05 L1351.95 1211.05 L1352.53 1211.05 L1353.12 1211.05 L1353.71 1211.05 L1354.29 1211.05 L1354.88 1211.05 L1355.47 1211.05 L1356.05 1211.05 L1356.64 1211.05 L1357.22 1211.05 L1357.81 1211.05 L1358.4 1211.05 L1358.98 1211.05 L1359.57 1211.05 L1360.16 1211.05 L1360.74 1211.05 L1361.33 1211.05 L1361.92 1211.05 L1362.5 1211.05 L1363.09 1211.05 L1363.68 1211.05 L1364.26 1211.05 L1364.85 1211.05 L1365.43 1211.05 L1366.02 1211.05 L1366.61 1211.05 L1367.19 1211.05 L1367.78 1211.05 L1368.37 1211.05 L1368.95 1211.05 L1369.54 1211.05 L1370.13 1211.05 L1370.71 1211.05 L1371.3 1211.05 L1371.88 1211.05 L1372.47 1211.05 L1373.06 1211.05 L1373.64 1211.05 L1374.23 1211.05 L1374.82 1211.05 L1375.4 1211.05 L1375.99 1211.05 L1376.58 1211.05 L1377.16 1211.05 L1377.75 1211.05 L1378.34 1211.05 L1378.92 1211.05 L1379.51 1211.05 L1380.09 1211.05 L1380.68 1211.05 L1381.27 1211.05 L1381.85 1211.05 L1382.44 1211.05 L1383.03 1211.05 L1383.61 1211.05 L1384.2 1211.05 L1384.79 1211.05 L1385.37 1211.05 L1385.96 1211.05 L1386.55 1211.05 L1387.13 1211.05 L1387.72 1211.05 L1388.3 1211.05 L1388.89 1211.05 L1389.48 1211.05 L1390.06 1211.05 L1390.65 1211.05 L1391.24 1211.05 L1391.82 1211.05 L1392.41 1211.05 L1393 1211.05 L1393.58 1211.05 L1394.17 1211.05 L1394.75 1211.05 L1395.34 1211.05 L1395.93 1211.05 L1396.51 1211.05 L1397.1 1211.05 L1397.69 1211.05 L1398.27 1211.05 L1398.86 1211.05 L1399.45 1211.05 L1400.03 1211.05 L1400.62 1211.05 L1401.21 1211.05 L1401.79 1211.05 L1402.38 1211.05 L1402.96 1211.05 L1403.55 1211.05 L1404.14 1211.05 L1404.72 1211.05 L1405.31 1211.05 L1405.9 1211.05 L1406.48 1211.05 L1407.07 1211.05 L1407.66 1211.05 L1408.24 1211.05 L1408.83 1211.05 L1409.42 1211.05 L1410 1211.05 L1410.59 1211.05 L1411.17 1211.05 L1411.76 1211.05 L1412.35 1211.05 L1412.93 1211.05 L1413.52 1211.05 L1414.11 1211.05 L1414.69 1211.05 L1415.28 1211.05 L1415.87 1211.05 L1416.45 1211.05 L1417.04 1211.05 L1417.63 1211.05 L1418.21 1211.05 L1418.8 1211.05 L1419.38 1211.05 L1419.97 1211.05 L1420.56 1211.05 L1421.14 1211.05 L1421.73 1211.05 L1422.32 1211.05 L1422.9 1211.05 L1423.49 1211.05 L1424.08 1211.05 L1424.66 1211.05 L1425.25 1211.05 L1425.83 1211.05 L1426.42 1211.05 L1427.01 1211.05 L1427.59 1211.05 L1428.18 1211.05 L1428.77 1211.05 L1429.35 1211.05 L1429.94 1211.05 L1430.53 1211.05 L1431.11 1211.05 L1431.7 1211.05 L1432.29 1211.05 L1432.87 1211.05 L1433.46 1211.05 L1434.04 1211.05 L1434.63 1211.05 L1435.22 1211.05 L1435.8 1211.05 L1436.39 1211.05 L1436.98 1211.05 L1437.56 1211.05 L1438.15 1211.05 L1438.74 1211.05 L1439.32 1211.05 L1439.91 1211.05 L1440.5 1211.05 L1441.08 1211.05 L1441.67 1211.05 L1442.25 1211.05 L1442.84 1211.05 L1443.43 1211.05 L1444.01 1211.05 L1444.6 1211.05 L1445.19 1211.05 L1445.77 1211.05 L1446.36 1211.05 L1446.95 1211.05 L1447.53 1211.05 L1448.12 1211.05 L1448.7 1211.05 L1449.29 1211.05 L1449.88 1211.05 L1450.46 1211.05 L1451.05 1211.05 L1451.64 1211.05 L1452.22 1211.05 L1452.81 1211.05 L1453.4 1211.05 L1453.98 1211.05 L1454.57 1211.05 L1455.16 1211.05 L1455.74 1211.05 L1456.33 1211.05 L1456.91 1211.05 L1457.5 1211.05 L1458.09 1211.05 L1458.67 1211.05 L1459.26 1211.05 L1459.85 1211.05 L1460.43 1211.05 L1461.02 1211.05 L1461.61 1211.05 L1462.19 1211.05 L1462.78 1211.05 L1463.37 1211.05 L1463.95 1211.05 L1464.54 1211.05 L1465.12 1211.05 L1465.71 1211.05 L1466.3 1211.05 L1466.88 1211.05 L1467.47 1211.05 L1468.06 1211.05 L1468.64 1211.05 L1469.23 1211.05 L1469.82 1211.05 L1470.4 1211.05 L1470.99 1211.05 L1471.57 1211.05 L1472.16 1211.05 L1472.75 1211.05 L1473.33 1211.05 L1473.92 1211.05 L1474.51 1211.05 L1475.09 1211.05 L1475.68 1211.05 L1476.27 1211.05 L1476.85 1211.05 L1477.44 1211.05 L1478.03 1211.05 L1478.61 1211.05 L1479.2 1211.05 L1479.78 1211.05 L1480.37 1211.05 L1480.96 1211.05 L1481.54 1211.05 L1482.13 1211.05 L1482.72 1211.05 L1483.3 1211.05 L1483.89 1211.05 L1484.48 1211.05 L1485.06 1211.05 L1485.65 1211.05 L1486.24 1211.05 L1486.82 1211.05 L1487.41 1211.05 L1487.99 1211.05 L1488.58 1211.05 L1489.17 1211.05 L1489.75 1211.05 L1490.34 1211.05 L1490.93 1211.05 L1491.51 1211.05 L1492.1 1211.05 L1492.69 1211.05 L1493.27 1211.05 L1493.86 1211.05 L1494.45 1211.05 L1495.03 1211.05 L1495.62 1211.05 L1496.2 1211.05 L1496.79 1211.05 L1497.38 1211.05 L1497.96 1211.05 L1498.55 1211.05 L1499.14 1211.05 L1499.72 1211.05 L1500.31 1211.05 L1500.9 1211.05 L1501.48 1211.05 L1502.07 1211.05 L1502.65 1211.05 L1503.24 1211.05 L1503.83 1211.05 L1504.41 1211.05 L1505 1211.05 L1505.59 1211.05 L1506.17 1211.05 L1506.76 1211.05 L1507.35 1211.05 L1507.93 1211.05 L1508.52 1211.05 L1509.11 1211.05 L1509.69 1211.05 L1510.28 1211.05 L1510.86 1211.05 L1511.45 1211.05 L1512.04 1211.05 L1512.62 1211.05 L1513.21 1211.05 L1513.8 1211.05 L1514.38 1211.05 L1514.97 1211.05 L1515.56 1211.05 L1516.14 1211.05 L1516.73 1211.05 L1517.32 1211.05 L1517.9 1211.05 L1518.49 1211.05 L1519.07 1211.05 L1519.66 1211.05 L1520.25 1211.05 L1520.83 1211.05 L1521.42 1211.05 L1522.01 1211.05 L1522.59 1211.05 L1523.18 1211.05 L1523.77 1211.05 L1524.35 1211.05 L1524.94 1211.05 L1525.52 1211.05 L1526.11 1211.05 L1526.7 1211.05 L1527.28 1211.05 L1527.87 1211.05 L1528.46 1211.05 L1529.04 1211.05 L1529.63 1211.05 L1530.22 1211.05 L1530.8 1211.05 L1531.39 1211.05 L1531.98 1211.05 L1532.56 1211.05 L1533.15 1211.05 L1533.73 1211.05 L1534.32 1211.05 L1534.91 1211.05 L1535.49 1211.05 L1536.08 1211.05 L1536.67 1211.05 L1537.25 1211.05 L1537.84 1211.05 L1538.43 1211.05 L1539.01 1211.05 L1539.6 1211.05 L1540.19 1211.05 L1540.77 1211.05 L1541.36 1211.05 L1541.94 1211.05 L1542.53 1211.05 L1543.12 1211.05 L1543.7 1211.05 L1544.29 1211.05 L1544.88 1211.05 L1545.46 1211.05 L1546.05 1211.05 L1546.64 1211.05 L1547.22 1211.05 L1547.81 1211.05 L1548.4 1211.05 L1548.98 1211.05 L1549.57 1211.05 L1550.15 1211.05 L1550.74 1211.05 L1551.33 1211.05 L1551.91 1211.05 L1552.5 1211.05 L1553.09 1211.05 L1553.67 1211.05 L1554.26 1211.05 L1554.85 1211.05 L1555.43 1211.05 L1556.02 1211.05 L1556.6 1211.05 L1557.19 1211.05 L1557.78 1211.05 L1558.36 1211.05 L1558.95 1211.05 L1559.54 1211.05 L1560.12 1211.05 L1560.71 1211.05 L1561.3 1211.05 L1561.88 1211.05 L1562.47 1211.05 L1563.06 1211.05 L1563.64 1211.05 L1564.23 1211.05 L1564.81 1211.05 L1565.4 1211.05 L1565.99 1211.05 L1566.57 1211.05 L1567.16 1211.05 L1567.75 1211.05 L1568.33 1211.05 L1568.92 1211.05 L1569.51 1211.05 L1570.09 1211.05 L1570.68 1211.05 L1571.27 1211.05 L1571.85 1211.05 L1572.44 1211.05 L1573.02 1211.05 L1573.61 1211.05 L1574.2 1211.05 L1574.78 1211.05 L1575.37 1211.05 L1575.96 1211.05 L1576.54 1211.05 L1577.13 1211.05 L1577.72 1211.05 L1578.3 1211.05 L1578.89 1211.05 L1579.47 1211.05 L1580.06 1211.05 L1580.65 1211.05 L1581.23 1211.05 L1581.82 1211.05 L1582.41 1211.05 L1582.99 1211.05 L1583.58 1211.05 L1584.17 1211.05 L1584.75 1211.05 L1585.34 1211.05 L1585.93 1211.05 L1586.51 1211.05 L1587.1 1211.05 L1587.68 1211.05 L1588.27 1211.05 L1588.86 1211.05 L1589.44 1211.05 L1590.03 1211.05 L1590.62 1211.05 L1591.2 1211.05 L1591.79 1211.05 L1592.38 1211.05 L1592.96 1211.05 L1593.55 1211.05 L1594.14 1211.05 L1594.72 1211.05 L1595.31 1211.05 L1595.89 1211.05 L1596.48 1211.05 L1597.07 1211.05 L1597.65 1211.05 L1598.24 1211.05 L1598.83 1211.05 L1599.41 1211.05 L1600 1211.05 L1600.59 1211.05 L1601.17 1211.05 L1601.76 1211.05 L1602.34 1211.05 L1602.93 1211.05 L1603.52 1211.05 L1604.1 1211.05 L1604.69 1211.05 L1605.28 1211.05 L1605.86 1211.05 L1606.45 1211.05 L1607.04 1211.05 L1607.62 1211.05 L1608.21 1211.05 L1608.8 1211.05 L1609.38 1211.05 L1609.97 1211.05 L1610.55 1211.05 L1611.14 1211.05 L1611.73 1211.05 L1612.31 1211.05 L1612.9 1211.05 L1613.49 1211.05 L1614.07 1211.05 L1614.66 1211.05 L1615.25 1211.05 L1615.83 1211.05 L1616.42 1211.05 L1617.01 1211.05 L1617.59 1211.05 L1618.18 1211.05 L1618.76 1211.05 L1619.35 1211.05 L1619.94 1211.05 L1620.52 1211.05 L1621.11 1211.05 L1621.7 1211.05 L1622.28 1211.05 L1622.87 1211.05 L1623.46 1211.05 L1624.04 1211.05 L1624.63 1211.05 L1625.22 1211.05 L1625.8 1211.05 L1626.39 1211.05 L1626.97 1211.05 L1627.56 1211.05 L1628.15 1211.05 L1628.73 1211.05 L1629.32 1211.05 L1629.91 1211.05 L1630.49 1211.05 L1631.08 1211.05 L1631.67 1211.05 L1632.25 1211.05 L1632.84 1211.05 L1633.42 1211.05 L1634.01 1211.05 L1634.6 1211.05 L1635.18 1211.05 L1635.77 1211.05 L1636.36 1211.05 L1636.94 1211.05 L1637.53 1211.05 L1638.12 1211.05 L1638.7 1211.05 L1639.29 1211.05 L1639.88 1211.05 L1640.46 1211.05 L1641.05 1211.05 L1641.63 1211.05 L1642.22 1211.05 L1642.81 1211.05 L1643.39 1211.05 L1643.98 1211.05 L1644.57 1211.05 L1645.15 1211.05 L1645.74 1211.05 L1646.33 1211.05 L1646.91 1211.05 L1647.5 1211.05 L1648.09 1211.05 L1648.67 1211.05 L1649.26 1211.05 L1649.84 1211.05 L1650.43 1211.05 L1651.02 1211.05 L1651.6 1211.05 L1652.19 1211.05 L1652.78 1211.05 L1653.36 1211.05 L1653.95 1211.05 L1654.54 1211.05 L1655.12 1211.05 L1655.71 1211.05 L1656.29 1211.05 L1656.88 1211.05 L1657.47 1211.05 L1658.05 1211.05 L1658.64 1211.05 L1659.23 1211.05 L1659.81 1211.05 L1660.4 1211.05 L1660.99 1211.05 L1661.57 1211.05 L1662.16 1211.05 L1662.75 1211.05 L1663.33 1211.05 L1663.92 1211.05 L1664.5 1211.05 L1665.09 1211.05 L1665.68 1211.05 L1666.26 1211.05 L1666.85 1211.05 L1667.44 1211.05 L1668.02 1211.05 L1668.61 1211.05 L1669.2 1211.05 L1669.78 1211.05 L1670.37 1211.05 L1670.96 1211.05 L1671.54 1211.05 L1672.13 1211.05 L1672.71 1211.05 L1673.3 1211.05 L1673.89 1211.05 L1674.47 1211.05 L1675.06 1211.05 L1675.65 1211.05 L1676.23 1211.05 L1676.82 1211.05 L1677.41 1211.05 L1677.99 1211.05 L1678.58 1211.05 L1679.17 1211.05 L1679.75 1211.05 L1680.34 1211.05 L1680.92 1211.05 L1681.51 1211.05 L1682.1 1211.05 L1682.68 1211.05 L1683.27 1211.05 L1683.86 1211.05 L1684.44 1211.05 L1685.03 1211.05 L1685.62 1211.05 L1686.2 1211.05 L1686.79 1211.05 L1687.37 1211.05 L1687.96 1211.05 L1688.55 1211.05 L1689.13 1211.05 L1689.72 1211.05 L1690.31 1211.05 L1690.89 1211.05 L1691.48 1211.05 L1692.07 1211.05 L1692.65 1211.05 L1693.24 1211.05 L1693.83 1211.05 L1694.41 1211.05 L1695 1211.05 L1695.58 1211.05 L1696.17 1211.05 L1696.76 1211.05 L1697.34 1211.05 L1697.93 1211.05 L1698.52 1211.05 L1699.1 1211.05 L1699.69 1211.05 L1700.28 1211.05 L1700.86 1211.05 L1701.45 1211.05 L1702.04 1211.05 L1702.62 1211.05 L1703.21 1211.05 L1703.79 1211.05 L1704.38 1211.05 L1704.97 1211.05 L1705.55 1211.05 L1706.14 1211.05 L1706.73 1211.05 L1707.31 1211.05 L1707.9 1211.05 L1708.49 1211.05 L1709.07 1211.05 L1709.66 1211.05 L1710.24 1211.05 L1710.83 1211.05 L1711.42 1211.05 L1712 1211.05 L1712.59 1211.05 L1713.18 1211.05 L1713.76 1211.05 L1714.35 1211.05 L1714.94 1211.05 L1715.52 1211.05 L1716.11 1211.05 L1716.7 1211.05 L1717.28 1211.05 L1717.87 1211.05 L1718.45 1211.05 L1719.04 1211.05 L1719.63 1211.05 L1720.21 1211.05 L1720.8 1211.05 L1721.39 1211.05 L1721.97 1211.05 L1722.56 1211.05 L1723.15 1211.05 L1723.73 1211.05 L1724.32 1211.05 L1724.91 1211.05 L1725.49 1211.05 L1726.08 1211.05 L1726.66 1211.05 L1727.25 1211.05 L1727.84 1211.05 L1728.42 1211.05 L1729.01 1211.05 L1729.6 1211.05 L1730.18 1211.05 L1730.77 1211.05 L1731.36 1211.05 L1731.94 1211.05 L1732.53 1211.05 L1733.11 1211.05 L1733.7 1211.05 L1734.29 1211.05 L1734.87 1211.05 L1735.46 1211.05 L1736.05 1211.05 L1736.63 1211.05 L1737.22 1211.05 L1737.81 1211.05 L1738.39 1211.05 L1738.98 1211.05 L1739.57 1211.05 L1740.15 1211.05 L1740.74 1211.05 L1741.32 1211.05 L1741.91 1211.05 L1742.5 1211.05 L1743.08 1211.05 L1743.67 1211.05 L1744.26 1211.05 L1744.84 1211.05 L1745.43 1211.05 L1746.02 1211.05 L1746.6 1211.05 L1747.19 1211.05 L1747.78 1211.05 L1748.36 1211.05 L1748.95 1211.05 L1749.53 1211.05 L1750.12 1211.05 L1750.71 1211.05 L1751.29 1211.05 L1751.88 1211.05 L1752.47 1211.05 L1753.05 1211.05 L1753.64 1211.05 L1754.23 1211.05 L1754.81 1211.05 L1755.4 1211.05 L1755.99 1211.05 L1756.57 1211.05 L1757.16 1211.05 L1757.74 1211.05 L1758.33 1211.05 L1758.92 1211.05 L1759.5 1211.05 L1760.09 1211.05 L1760.68 1211.05 L1761.26 1211.05 L1761.85 1211.05 L1762.44 1211.05 L1763.02 1211.05 L1763.61 1211.05 L1764.19 1211.05 L1764.78 1211.05 L1765.37 1211.05 L1765.95 1211.05 L1766.54 1211.05 L1767.13 1211.05 L1767.71 1211.05 L1768.3 1211.05 L1768.89 1211.05 L1769.47 1211.05 L1770.06 1211.05 L1770.65 1211.05 L1771.23 1211.05 L1771.82 1211.05 L1772.4 1211.05 L1772.99 1211.05 L1773.58 1211.05 L1774.16 1211.05 L1774.75 1211.05 L1775.34 1211.05 L1775.92 1211.05 L1776.51 1211.05 L1777.1 1211.05 L1777.68 1211.05 L1778.27 1211.05 L1778.86 1211.05 L1779.44 1211.05 L1780.03 1211.05 L1780.61 1211.05 L1781.2 1211.05 L1781.79 1211.05 L1782.37 1211.05 L1782.96 1211.05 L1783.55 1211.05 L1784.13 1211.05 L1784.72 1211.05 L1785.31 1211.05 L1785.89 1211.05 L1786.48 1211.05 L1787.06 1211.05 L1787.65 1211.05 L1788.24 1211.05 L1788.82 1211.05 L1789.41 1211.05 L1790 1211.05 L1790.58 1211.05 L1791.17 1211.05 L1791.76 1211.05 L1792.34 1211.05 L1792.93 1211.05 L1793.52 1211.05 L1794.1 1211.05 L1794.69 1211.05 L1795.27 1211.05 L1795.86 1211.05 L1796.45 1211.05 L1797.03 1211.05 L1797.62 1211.05 L1798.21 1211.05 L1798.79 1211.05 L1799.38 1211.05 L1799.97 1211.05 L1800.55 1211.05 L1801.14 1211.05 L1801.73 1211.05 L1802.31 1211.05 L1802.9 1211.05 L1803.48 1211.05 L1804.07 1211.05 L1804.66 1211.05 L1805.24 1211.05 L1805.83 1211.05 L1806.42 1211.05 L1807 1211.05 L1807.59 1211.05 L1808.18 1211.05 L1808.76 1211.05 L1809.35 1211.05 L1809.94 1211.05 L1810.52 1211.05 L1811.11 1211.05 L1811.69 1211.05 L1812.28 1211.05 L1812.87 1211.05 L1813.45 1211.05 L1814.04 1211.05 L1814.63 1211.05 L1815.21 1211.05 L1815.8 1211.05 L1816.39 1211.05 L1816.97 1211.05 L1817.56 1211.05 L1818.14 1211.05 L1818.73 1211.05 L1819.32 1211.05 L1819.9 1211.05 L1820.49 1211.05 L1821.08 1211.05 L1821.66 1211.05 L1822.25 1211.05 L1822.84 1211.05 L1823.42 1211.05 L1824.01 1211.05 L1824.6 1211.05 L1825.18 1211.05 L1825.77 1211.05 L1826.35 1211.05 L1826.94 1211.05 L1827.53 1211.05 L1828.11 1211.05 L1828.7 1211.05 L1829.29 1211.05 L1829.87 1211.05 L1830.46 1211.05 L1831.05 1211.05 L1831.63 1211.05 L1832.22 1211.05 L1832.81 1211.05 L1833.39 1211.05 L1833.98 1211.05 L1834.56 1211.05 L1835.15 1211.05 L1835.74 1211.05 L1836.32 1211.05 L1836.91 1211.05 L1837.5 1211.05 L1838.08 1211.05 L1838.67 1211.05 L1839.26 1211.05 L1839.84 1211.05 L1840.43 1211.05 L1841.01 1211.05 L1841.6 1211.05 L1842.19 1211.05 L1842.77 1211.05 L1843.36 1211.05 L1843.95 1211.05 L1844.53 1211.05 L1845.12 1211.05 L1845.71 1211.05 L1846.29 1211.05 L1846.88 1211.05 L1847.47 1211.05 L1848.05 1211.05 L1848.64 1211.05 L1849.22 1211.05 L1849.81 1211.05 L1850.4 1211.05 L1850.98 1211.05 L1851.57 1211.05 L1852.16 1211.05 L1852.74 1211.05 L1853.33 1211.05 L1853.92 1211.05 L1854.5 1211.05 L1855.09 1211.05 L1855.68 1211.05 L1856.26 1211.05 L1856.85 1211.05 L1857.43 1211.05 L1858.02 1211.05 L1858.61 1211.05 L1859.19 1211.05 L1859.78 1211.05 L1860.37 1211.05 L1860.95 1211.05 L1861.54 1211.05 L1862.13 1211.05 L1862.71 1211.05 L1863.3 1211.05 L1863.88 1211.05 L1864.47 1211.05 L1865.06 1211.05 L1865.64 1211.05 L1866.23 1211.05 L1866.82 1211.05 L1867.4 1211.05 L1867.99 1211.05 L1868.58 1211.05 L1869.16 1211.05 L1869.75 1211.05 L1870.34 1211.05 L1870.92 1211.05 L1871.51 1211.05 L1872.09 1211.05 L1872.68 1211.05 L1873.27 1211.05 L1873.85 1211.05 L1874.44 1211.05 L1875.03 1211.05 L1875.61 1211.05 L1876.2 1211.05 L1876.79 1211.05 L1877.37 1211.05 L1877.96 1211.05 L1878.55 1211.05 L1879.13 1211.05 L1879.72 1211.05 L1880.3 1211.05 L1880.89 1211.05 L1881.48 1211.05 L1882.06 1211.05 L1882.65 1211.05 L1883.24 1211.05 L1883.82 1211.05 L1884.41 1211.05 L1885 1211.05 L1885.58 1211.05 L1886.17 1211.05 L1886.76 1211.05 L1887.34 1211.05 L1887.93 1211.05 L1888.51 1211.05 L1889.1 1211.05 L1889.69 1211.05 L1890.27 1211.05 L1890.86 1211.05 L1891.45 1211.05 L1892.03 1211.05 L1892.62 1211.05 L1893.21 1211.05 L1893.79 1211.05 L1894.38 1211.05 L1894.96 1211.05 L1895.55 1211.05 L1896.14 1211.05 L1896.72 1211.05 L1897.31 1211.05 L1897.9 1211.05 L1898.48 1211.05 L1899.07 1211.05 L1899.66 1211.05 L1900.24 1211.05 L1900.83 1211.05 L1901.42 1211.05 L1902 1211.05 L1902.59 1211.05 L1903.17 1211.05 L1903.76 1211.05 L1904.35 1211.05 L1904.93 1211.05 L1905.52 1211.05 L1906.11 1211.05 L1906.69 1211.05 L1907.28 1211.05 L1907.87 1211.05 L1908.45 1211.05 L1909.04 1211.05 L1909.63 1211.05 L1910.21 1211.05 L1910.8 1211.05 L1911.38 1211.05 L1911.97 1211.05 L1912.56 1211.05 L1913.14 1211.05 L1913.73 1211.05 L1914.32 1211.05 L1914.9 1211.05 L1915.49 1211.05 L1916.08 1211.05 L1916.66 1211.05 L1917.25 1211.05 L1917.83 1211.05 L1918.42 1211.05 L1919.01 1211.05 L1919.59 1211.05 L1920.18 1211.05 L1920.77 1211.05 L1921.35 1211.05 L1921.94 1211.05 L1922.53 1211.05 L1923.11 1211.05 L1923.7 1211.05 L1924.29 1211.05 L1924.87 1211.05 L1925.46 1211.05 L1926.04 1211.05 L1926.63 1211.05 L1927.22 1211.05 L1927.8 1211.05 L1928.39 1211.05 L1928.98 1211.05 L1929.56 1211.05 L1930.15 1211.05 L1930.74 1211.05 L1931.32 1211.05 L1931.91 1211.05 L1932.5 1211.05 L1933.08 1211.05 L1933.67 1211.05 L1934.25 1211.05 L1934.84 1211.05 L1935.43 1211.05 L1936.01 1211.05 L1936.6 1211.05 L1937.19 1211.05 L1937.77 1211.05 L1938.36 1211.05 L1938.95 1211.05 L1939.53 1211.05 L1940.12 1211.05 L1940.71 1211.05 L1941.29 1211.05 L1941.88 1211.05 L1942.46 1211.05 L1943.05 1211.05 L1943.64 1211.05 L1944.22 1211.05 L1944.81 1211.05 L1945.4 1211.05 L1945.98 1211.05 L1946.57 1211.05 L1947.16 1211.05 L1947.74 1211.05 L1948.33 1211.05 L1948.91 1211.05 L1949.5 1211.05 L1950.09 1211.05 L1950.67 1211.05 L1951.26 1211.05 L1951.85 1211.05 L1952.43 1211.05 L1953.02 1211.05 L1953.61 1211.05 L1954.19 1211.05 L1954.78 1211.05 L1955.37 1211.05 L1955.95 1211.05 L1956.54 1211.05 L1957.12 1211.05 L1957.71 1211.05 L1958.3 1211.05 L1958.88 1211.05 L1959.47 1211.05 L1960.06 1211.05 L1960.64 1211.05 L1961.23 1211.05 L1961.82 1211.05 L1962.4 1211.05 L1962.99 1211.05 L1963.58 1211.05 L1964.16 1211.05 L1964.75 1211.05 L1965.33 1211.05 L1965.92 1211.05 L1966.51 1211.05 L1967.09 1211.05 L1967.68 1211.05 L1968.27 1211.05 L1968.85 1211.05 L1969.44 1211.05 L1970.03 1211.05 L1970.61 1211.05 L1971.2 1211.05 L1971.78 1211.05 L1972.37 1211.05 L1972.96 1211.05 L1973.54 1211.05 L1974.13 1211.05 L1974.72 1211.05 L1975.3 1211.05 L1975.89 1211.05 L1976.48 1211.05 L1977.06 1211.05 L1977.65 1211.05 L1978.24 1211.05 L1978.82 1211.05 L1979.41 1211.05 L1979.99 1211.05 L1980.58 1211.05 L1981.17 1211.05 L1981.75 1211.05 L1982.34 1211.05 L1982.93 1211.05 L1983.51 1211.05 L1984.1 1211.05 L1984.69 1211.05 L1985.27 1211.05 L1985.86 1211.05 L1986.45 1211.05 L1987.03 1211.05 L1987.62 1211.05 L1988.2 1211.05 L1988.79 1211.05 L1989.38 1211.05 L1989.96 1211.05 L1990.55 1211.05 L1991.14 1211.05 L1991.72 1211.05 L1992.31 1211.05 L1992.9 1211.05 L1993.48 1211.05 L1994.07 1211.05 L1994.65 1211.05 L1995.24 1211.05 L1995.83 1211.05 L1996.41 1211.05 L1997 1211.05 L1997.59 1211.05 L1998.17 1211.05 L1998.76 1211.05 L1999.35 1211.05 L1999.93 1211.05 L2000.52 1211.05 L2001.11 1211.05 L2001.69 1211.05 L2002.28 1211.05 L2002.86 1211.05 L2003.45 1211.05 L2004.04 1211.05 L2004.62 1211.05 L2005.21 1211.05 L2005.8 1211.05 L2006.38 1211.05 L2006.97 1211.05 L2007.56 1211.05 L2008.14 1211.05 L2008.73 1211.05 L2009.32 1211.05 L2009.9 1211.05 L2010.49 1211.05 L2011.07 1211.05 L2011.66 1211.05 L2012.25 1211.05 L2012.83 1211.05 L2013.42 1211.05 L2014.01 1211.05 L2014.59 1211.05 L2015.18 1211.05 L2015.77 1211.05 L2016.35 1211.05 L2016.94 1211.05 L2017.53 1211.05 L2018.11 1211.05 L2018.7 1211.05 L2019.28 1211.05 L2019.87 1211.05 L2020.46 1211.05 L2021.04 1211.05 L2021.63 1211.05 L2022.22 1211.05 L2022.8 1211.05 L2023.39 1211.05 L2023.98 1211.05 L2024.56 1211.05 L2025.15 1211.05 L2025.73 1211.05 L2026.32 1211.05 L2026.91 1211.05 L2027.49 1211.05 L2028.08 1211.05 L2028.67 1211.05 L2029.25 1211.05 L2029.84 1211.05 L2030.43 1211.05 L2031.01 1211.05 L2031.6 1211.05 L2032.19 1211.05 L2032.77 1211.05 L2033.36 1211.05 L2033.94 1211.05 L2034.53 1211.05 L2035.12 1211.05 L2035.7 1211.05 L2036.29 1211.05 L2036.88 1211.05 L2037.46 1211.05 L2038.05 1211.05 L2038.64 1211.05 L2039.22 1211.05 L2039.81 1211.05 L2040.4 1211.05 L2040.98 1211.05 L2041.57 1211.05 L2042.15 1211.05 L2042.74 1211.05 L2043.33 1211.05 L2043.91 1211.05 L2044.5 1211.05 L2045.09 1211.05 L2045.67 1211.05 L2046.26 1211.05 L2046.85 1211.05 L2047.43 1211.05 L2048.02 1211.05 L2048.6 1211.05 L2049.19 1211.05 L2049.78 1211.05 L2050.36 1211.05 L2050.95 1211.05 L2051.54 1211.05 L2052.12 1211.05 L2052.71 1211.05 L2053.3 1211.05 L2053.88 1211.05 L2054.47 1211.05 L2055.06 1211.05 L2055.64 1211.05 L2056.23 1211.05 L2056.81 1211.05 L2057.4 1211.05 L2057.99 1211.05 L2058.57 1211.05 L2059.16 1211.05 L2059.75 1211.05 L2060.33 1211.05 L2060.92 1211.05 L2061.51 1211.05 L2062.09 1211.05 L2062.68 1211.05 L2063.27 1211.05 L2063.85 1211.05 L2064.44 1211.05 L2065.02 1211.05 L2065.61 1211.05 L2066.2 1211.05 L2066.78 1211.05 L2067.37 1211.05 L2067.96 1211.05 L2068.54 1211.05 L2069.13 1211.05 L2069.72 1211.05 L2070.3 1211.05 L2070.89 1211.05 L2071.48 1211.05 L2072.06 1211.05 L2072.65 1211.05 L2073.23 1211.05 L2073.82 1211.05 L2074.41 1211.05 L2074.99 1211.05 L2075.58 1211.05 L2076.17 1211.05 L2076.75 1211.05 L2077.34 1211.05 L2077.93 1211.05 L2078.51 1211.05 L2079.1 1211.05 L2079.68 1211.05 L2080.27 1211.05 L2080.86 1211.05 L2081.44 1211.05 L2082.03 1211.05 L2082.62 1211.05 L2083.2 1211.05 L2083.79 1211.05 L2084.38 1211.05 L2084.96 1211.05 L2085.55 1211.05 L2086.14 1211.05 L2086.72 1211.05 L2087.31 1211.05 L2087.89 1211.05 L2088.48 1211.05 L2089.07 1211.05 L2089.65 1211.05 L2090.24 1211.05 L2090.83 1211.05 L2091.41 1211.05 L2092 1211.05 L2092.59 1211.05 L2093.17 1211.05 L2093.76 1211.05 L2094.35 1211.05 L2094.93 1211.05 L2095.52 1211.05 L2096.1 1211.05 L2096.69 1211.05 L2097.28 1211.05 L2097.86 1211.05 L2098.45 1211.05 L2099.04 1211.05 L2099.62 1211.05 L2100.21 1211.05 L2100.8 1211.05 L2101.38 1211.05 L2101.97 1211.05 L2102.55 1211.05 L2103.14 1211.05 L2103.73 1211.05 L2104.31 1211.05 L2104.9 1211.05 L2105.49 1211.05 L2106.07 1211.05 L2106.66 1211.05 L2107.25 1211.05 L2107.83 1211.05 L2108.42 1211.05 L2109.01 1211.05 L2109.59 1211.05 L2110.18 1211.05 L2110.76 1211.05 L2111.35 1211.05 L2111.94 1211.05 L2112.52 1211.05 L2113.11 1211.05 L2113.7 1211.05 L2114.28 1211.05 L2114.87 1211.05 L2115.46 1211.05 L2116.04 1211.05 L2116.63 1211.05 L2117.22 1211.05 L2117.8 1211.05 L2118.39 1211.05 L2118.97 1211.05 L2119.56 1211.05 L2120.15 1211.05 L2120.73 1211.05 L2121.32 1211.05 L2121.91 1211.05 L2122.49 1211.05 L2123.08 1211.05 L2123.67 1211.05 L2124.25 1211.05 L2124.84 1211.05 L2125.42 1211.05 L2126.01 1211.05 L2126.6 1211.05 L2127.18 1211.05 L2127.77 1211.05 L2128.36 1211.05 L2128.94 1211.05 L2129.53 1211.05 L2130.12 1211.05 L2130.7 1211.05 L2131.29 1211.05 L2131.88 1211.05 L2132.46 1211.05 L2133.05 1211.05 L2133.63 1211.05 L2134.22 1211.05 L2134.81 1211.05 L2135.39 1211.05 L2135.98 1211.05 L2136.57 1211.05 L2137.15 1211.05 L2137.74 1211.05 L2138.33 1211.05 L2138.91 1211.05 L2139.5 1211.05 L2140.09 1211.05 L2140.67 1211.05 L2141.26 1211.05 L2141.84 1211.05 L2142.43 1211.05 L2143.02 1211.05 L2143.6 1211.05 L2144.19 1211.05 L2144.78 1211.05 L2145.36 1211.05 L2145.95 1211.05 L2146.54 1211.05 L2147.12 1211.05 L2147.71 1211.05 L2148.3 1211.05 L2148.88 1211.05 L2149.47 1211.05 L2150.05 1211.05 L2150.64 1211.05 L2151.23 1211.05 L2151.81 1211.05 L2152.4 1211.05 L2152.99 1211.05 L2153.57 1211.05 L2154.16 1211.05 L2154.75 1211.05 L2155.33 1211.05 L2155.92 1211.05 L2156.5 1211.05 L2157.09 1211.05 L2157.68 1211.05 L2158.26 1211.05 L2158.26 1210.91 L2157.68 1210.91 L2157.09 1210.91 L2156.5 1210.91 L2155.92 1210.91 L2155.33 1210.91 L2154.75 1210.91 L2154.16 1210.91 L2153.57 1210.91 L2152.99 1210.91 L2152.4 1210.91 L2151.81 1210.91 L2151.23 1210.91 L2150.64 1210.91 L2150.05 1210.91 L2149.47 1210.91 L2148.88 1210.91 L2148.3 1210.91 L2147.71 1210.91 L2147.12 1210.91 L2146.54 1210.91 L2145.95 1210.91 L2145.36 1210.91 L2144.78 1210.91 L2144.19 1210.91 L2143.6 1210.91 L2143.02 1210.91 L2142.43 1210.91 L2141.84 1210.91 L2141.26 1210.91 L2140.67 1210.91 L2140.09 1210.91 L2139.5 1210.91 L2138.91 1210.91 L2138.33 1210.91 L2137.74 1210.91 L2137.15 1210.91 L2136.57 1210.91 L2135.98 1210.91 L2135.39 1210.91 L2134.81 1210.91 L2134.22 1210.91 L2133.63 1210.91 L2133.05 1210.91 L2132.46 1210.91 L2131.88 1210.91 L2131.29 1210.91 L2130.7 1210.91 L2130.12 1210.91 L2129.53 1210.91 L2128.94 1210.91 L2128.36 1210.91 L2127.77 1210.91 L2127.18 1210.91 L2126.6 1210.91 L2126.01 1210.91 L2125.42 1210.91 L2124.84 1210.91 L2124.25 1210.91 L2123.67 1210.91 L2123.08 1210.91 L2122.49 1210.91 L2121.91 1210.91 L2121.32 1210.91 L2120.73 1210.91 L2120.15 1210.91 L2119.56 1210.91 L2118.97 1210.91 L2118.39 1210.91 L2117.8 1210.91 L2117.22 1210.91 L2116.63 1210.91 L2116.04 1210.91 L2115.46 1210.91 L2114.87 1210.91 L2114.28 1210.91 L2113.7 1210.91 L2113.11 1210.91 L2112.52 1210.91 L2111.94 1210.91 L2111.35 1210.91 L2110.76 1210.91 L2110.18 1210.91 L2109.59 1210.91 L2109.01 1210.91 L2108.42 1210.91 L2107.83 1210.91 L2107.25 1210.91 L2106.66 1210.91 L2106.07 1210.91 L2105.49 1210.91 L2104.9 1210.91 L2104.31 1210.91 L2103.73 1210.91 L2103.14 1210.91 L2102.55 1210.91 L2101.97 1210.91 L2101.38 1210.91 L2100.8 1210.91 L2100.21 1210.91 L2099.62 1210.91 L2099.04 1210.91 L2098.45 1210.91 L2097.86 1210.91 L2097.28 1210.91 L2096.69 1210.91 L2096.1 1210.91 L2095.52 1210.91 L2094.93 1210.91 L2094.35 1210.91 L2093.76 1210.91 L2093.17 1210.91 L2092.59 1210.91 L2092 1210.91 L2091.41 1210.91 L2090.83 1210.91 L2090.24 1210.91 L2089.65 1210.91 L2089.07 1210.91 L2088.48 1210.91 L2087.89 1210.91 L2087.31 1210.91 L2086.72 1210.91 L2086.14 1210.91 L2085.55 1210.91 L2084.96 1210.91 L2084.38 1210.91 L2083.79 1210.91 L2083.2 1210.91 L2082.62 1210.91 L2082.03 1210.91 L2081.44 1210.91 L2080.86 1210.91 L2080.27 1210.91 L2079.68 1210.91 L2079.1 1210.91 L2078.51 1210.91 L2077.93 1210.91 L2077.34 1210.91 L2076.75 1210.91 L2076.17 1210.91 L2075.58 1210.91 L2074.99 1210.91 L2074.41 1210.91 L2073.82 1210.91 L2073.23 1210.91 L2072.65 1210.91 L2072.06 1210.91 L2071.48 1210.91 L2070.89 1210.91 L2070.3 1210.91 L2069.72 1210.91 L2069.13 1210.91 L2068.54 1210.91 L2067.96 1210.91 L2067.37 1210.91 L2066.78 1210.91 L2066.2 1210.91 L2065.61 1210.91 L2065.02 1210.91 L2064.44 1210.91 L2063.85 1210.91 L2063.27 1210.91 L2062.68 1210.91 L2062.09 1210.91 L2061.51 1210.91 L2060.92 1210.91 L2060.33 1210.91 L2059.75 1210.91 L2059.16 1210.91 L2058.57 1210.91 L2057.99 1210.91 L2057.4 1210.91 L2056.81 1210.91 L2056.23 1210.91 L2055.64 1210.91 L2055.06 1210.91 L2054.47 1210.91 L2053.88 1210.91 L2053.3 1210.91 L2052.71 1210.91 L2052.12 1210.91 L2051.54 1210.91 L2050.95 1210.91 L2050.36 1210.91 L2049.78 1210.91 L2049.19 1210.91 L2048.6 1210.91 L2048.02 1210.91 L2047.43 1210.91 L2046.85 1210.91 L2046.26 1210.91 L2045.67 1210.91 L2045.09 1210.91 L2044.5 1210.91 L2043.91 1210.91 L2043.33 1210.91 L2042.74 1210.91 L2042.15 1210.91 L2041.57 1210.91 L2040.98 1210.91 L2040.4 1210.91 L2039.81 1210.91 L2039.22 1210.91 L2038.64 1210.91 L2038.05 1210.91 L2037.46 1210.91 L2036.88 1210.91 L2036.29 1210.91 L2035.7 1210.91 L2035.12 1210.91 L2034.53 1210.91 L2033.94 1210.91 L2033.36 1210.91 L2032.77 1210.91 L2032.19 1210.91 L2031.6 1210.91 L2031.01 1210.91 L2030.43 1210.91 L2029.84 1210.91 L2029.25 1210.91 L2028.67 1210.91 L2028.08 1210.91 L2027.49 1210.91 L2026.91 1210.91 L2026.32 1210.91 L2025.73 1210.91 L2025.15 1210.91 L2024.56 1210.91 L2023.98 1210.91 L2023.39 1210.91 L2022.8 1210.91 L2022.22 1210.91 L2021.63 1210.91 L2021.04 1210.91 L2020.46 1210.91 L2019.87 1210.91 L2019.28 1210.91 L2018.7 1210.91 L2018.11 1210.91 L2017.53 1210.91 L2016.94 1210.91 L2016.35 1210.91 L2015.77 1210.91 L2015.18 1210.91 L2014.59 1210.91 L2014.01 1210.91 L2013.42 1210.91 L2012.83 1210.91 L2012.25 1210.91 L2011.66 1210.91 L2011.07 1210.91 L2010.49 1210.91 L2009.9 1210.91 L2009.32 1210.91 L2008.73 1210.91 L2008.14 1210.91 L2007.56 1210.91 L2006.97 1210.91 L2006.38 1210.91 L2005.8 1210.91 L2005.21 1210.91 L2004.62 1210.91 L2004.04 1210.91 L2003.45 1210.91 L2002.86 1210.91 L2002.28 1210.91 L2001.69 1210.91 L2001.11 1210.91 L2000.52 1210.91 L1999.93 1210.91 L1999.35 1210.91 L1998.76 1210.91 L1998.17 1210.91 L1997.59 1210.91 L1997 1210.91 L1996.41 1210.91 L1995.83 1210.91 L1995.24 1210.91 L1994.65 1210.91 L1994.07 1210.91 L1993.48 1210.91 L1992.9 1210.91 L1992.31 1210.91 L1991.72 1210.91 L1991.14 1210.91 L1990.55 1210.91 L1989.96 1210.91 L1989.38 1210.91 L1988.79 1210.91 L1988.2 1210.91 L1987.62 1210.91 L1987.03 1210.91 L1986.45 1210.91 L1985.86 1210.91 L1985.27 1210.91 L1984.69 1210.91 L1984.1 1210.91 L1983.51 1210.91 L1982.93 1210.91 L1982.34 1210.91 L1981.75 1210.91 L1981.17 1210.91 L1980.58 1210.91 L1979.99 1210.91 L1979.41 1210.91 L1978.82 1210.91 L1978.24 1210.91 L1977.65 1210.91 L1977.06 1210.91 L1976.48 1210.91 L1975.89 1210.91 L1975.3 1210.91 L1974.72 1210.91 L1974.13 1210.91 L1973.54 1210.91 L1972.96 1210.91 L1972.37 1210.91 L1971.78 1210.91 L1971.2 1210.91 L1970.61 1210.91 L1970.03 1210.91 L1969.44 1210.91 L1968.85 1210.91 L1968.27 1210.91 L1967.68 1210.91 L1967.09 1210.91 L1966.51 1210.91 L1965.92 1210.91 L1965.33 1210.91 L1964.75 1210.91 L1964.16 1210.91 L1963.58 1210.91 L1962.99 1210.91 L1962.4 1210.91 L1961.82 1210.91 L1961.23 1210.91 L1960.64 1210.91 L1960.06 1210.91 L1959.47 1210.91 L1958.88 1210.91 L1958.3 1210.91 L1957.71 1210.91 L1957.12 1210.91 L1956.54 1210.91 L1955.95 1210.91 L1955.37 1210.91 L1954.78 1210.91 L1954.19 1210.91 L1953.61 1210.91 L1953.02 1210.91 L1952.43 1210.91 L1951.85 1210.91 L1951.26 1210.91 L1950.67 1210.91 L1950.09 1210.91 L1949.5 1210.91 L1948.91 1210.91 L1948.33 1210.91 L1947.74 1210.91 L1947.16 1210.91 L1946.57 1210.91 L1945.98 1210.91 L1945.4 1210.91 L1944.81 1210.91 L1944.22 1210.91 L1943.64 1210.91 L1943.05 1210.91 L1942.46 1210.91 L1941.88 1210.91 L1941.29 1210.91 L1940.71 1210.91 L1940.12 1210.91 L1939.53 1210.91 L1938.95 1210.91 L1938.36 1210.91 L1937.77 1210.91 L1937.19 1210.91 L1936.6 1210.91 L1936.01 1210.91 L1935.43 1210.91 L1934.84 1210.91 L1934.25 1210.91 L1933.67 1210.91 L1933.08 1210.91 L1932.5 1210.91 L1931.91 1210.91 L1931.32 1210.91 L1930.74 1210.91 L1930.15 1210.91 L1929.56 1210.91 L1928.98 1210.91 L1928.39 1210.91 L1927.8 1210.91 L1927.22 1210.91 L1926.63 1210.91 L1926.04 1210.91 L1925.46 1210.91 L1924.87 1210.91 L1924.29 1210.91 L1923.7 1210.91 L1923.11 1210.91 L1922.53 1210.91 L1921.94 1210.91 L1921.35 1210.91 L1920.77 1210.91 L1920.18 1210.91 L1919.59 1210.91 L1919.01 1210.91 L1918.42 1210.91 L1917.83 1210.91 L1917.25 1210.91 L1916.66 1210.91 L1916.08 1210.91 L1915.49 1210.91 L1914.9 1210.91 L1914.32 1210.91 L1913.73 1210.91 L1913.14 1210.91 L1912.56 1210.91 L1911.97 1210.91 L1911.38 1210.91 L1910.8 1210.91 L1910.21 1210.91 L1909.63 1210.91 L1909.04 1210.91 L1908.45 1210.91 L1907.87 1210.91 L1907.28 1210.91 L1906.69 1210.91 L1906.11 1210.91 L1905.52 1210.91 L1904.93 1210.91 L1904.35 1210.91 L1903.76 1210.91 L1903.17 1210.91 L1902.59 1210.91 L1902 1210.91 L1901.42 1210.91 L1900.83 1210.91 L1900.24 1210.91 L1899.66 1210.91 L1899.07 1210.91 L1898.48 1210.91 L1897.9 1210.91 L1897.31 1210.91 L1896.72 1210.91 L1896.14 1210.91 L1895.55 1210.91 L1894.96 1210.91 L1894.38 1210.91 L1893.79 1210.91 L1893.21 1210.91 L1892.62 1210.91 L1892.03 1210.91 L1891.45 1210.91 L1890.86 1210.91 L1890.27 1210.91 L1889.69 1210.91 L1889.1 1210.91 L1888.51 1210.91 L1887.93 1210.91 L1887.34 1210.91 L1886.76 1210.91 L1886.17 1210.91 L1885.58 1210.91 L1885 1210.91 L1884.41 1210.91 L1883.82 1210.91 L1883.24 1210.91 L1882.65 1210.91 L1882.06 1210.91 L1881.48 1210.91 L1880.89 1210.91 L1880.3 1210.91 L1879.72 1210.91 L1879.13 1210.91 L1878.55 1210.91 L1877.96 1210.91 L1877.37 1210.91 L1876.79 1210.91 L1876.2 1210.91 L1875.61 1210.91 L1875.03 1210.91 L1874.44 1210.91 L1873.85 1210.91 L1873.27 1210.91 L1872.68 1210.91 L1872.09 1210.91 L1871.51 1210.91 L1870.92 1210.91 L1870.34 1210.91 L1869.75 1210.91 L1869.16 1210.91 L1868.58 1210.91 L1867.99 1210.91 L1867.4 1210.91 L1866.82 1210.91 L1866.23 1210.91 L1865.64 1210.91 L1865.06 1210.91 L1864.47 1210.91 L1863.88 1210.91 L1863.3 1210.91 L1862.71 1210.91 L1862.13 1210.91 L1861.54 1210.91 L1860.95 1210.91 L1860.37 1210.91 L1859.78 1210.91 L1859.19 1210.91 L1858.61 1210.91 L1858.02 1210.91 L1857.43 1210.91 L1856.85 1210.91 L1856.26 1210.91 L1855.68 1210.91 L1855.09 1210.91 L1854.5 1210.91 L1853.92 1210.91 L1853.33 1210.91 L1852.74 1210.91 L1852.16 1210.91 L1851.57 1210.91 L1850.98 1210.91 L1850.4 1210.91 L1849.81 1210.91 L1849.22 1210.91 L1848.64 1210.91 L1848.05 1210.91 L1847.47 1210.91 L1846.88 1210.91 L1846.29 1210.91 L1845.71 1210.91 L1845.12 1210.91 L1844.53 1210.91 L1843.95 1210.91 L1843.36 1210.91 L1842.77 1210.91 L1842.19 1210.91 L1841.6 1210.91 L1841.01 1210.91 L1840.43 1210.91 L1839.84 1210.91 L1839.26 1210.91 L1838.67 1210.91 L1838.08 1210.91 L1837.5 1210.91 L1836.91 1210.91 L1836.32 1210.91 L1835.74 1210.91 L1835.15 1210.91 L1834.56 1210.91 L1833.98 1210.91 L1833.39 1210.91 L1832.81 1210.91 L1832.22 1210.91 L1831.63 1210.91 L1831.05 1210.91 L1830.46 1210.91 L1829.87 1210.91 L1829.29 1210.91 L1828.7 1210.91 L1828.11 1210.91 L1827.53 1210.91 L1826.94 1210.91 L1826.35 1210.91 L1825.77 1210.91 L1825.18 1210.91 L1824.6 1210.91 L1824.01 1210.91 L1823.42 1210.91 L1822.84 1210.91 L1822.25 1210.91 L1821.66 1210.91 L1821.08 1210.91 L1820.49 1210.91 L1819.9 1210.91 L1819.32 1210.91 L1818.73 1210.91 L1818.14 1210.91 L1817.56 1210.91 L1816.97 1210.91 L1816.39 1210.91 L1815.8 1210.91 L1815.21 1210.91 L1814.63 1210.91 L1814.04 1210.91 L1813.45 1210.91 L1812.87 1210.91 L1812.28 1210.91 L1811.69 1210.91 L1811.11 1210.91 L1810.52 1210.91 L1809.94 1210.91 L1809.35 1210.91 L1808.76 1210.91 L1808.18 1210.91 L1807.59 1210.91 L1807 1210.91 L1806.42 1210.91 L1805.83 1210.91 L1805.24 1210.91 L1804.66 1210.91 L1804.07 1210.91 L1803.48 1210.91 L1802.9 1210.91 L1802.31 1210.91 L1801.73 1210.91 L1801.14 1210.91 L1800.55 1210.91 L1799.97 1210.91 L1799.38 1210.91 L1798.79 1210.91 L1798.21 1210.91 L1797.62 1210.91 L1797.03 1210.91 L1796.45 1210.91 L1795.86 1210.91 L1795.27 1210.91 L1794.69 1210.91 L1794.1 1210.91 L1793.52 1210.91 L1792.93 1210.91 L1792.34 1210.91 L1791.76 1210.91 L1791.17 1210.91 L1790.58 1210.91 L1790 1210.91 L1789.41 1210.91 L1788.82 1210.91 L1788.24 1210.91 L1787.65 1210.91 L1787.06 1210.91 L1786.48 1210.91 L1785.89 1210.91 L1785.31 1210.91 L1784.72 1210.91 L1784.13 1210.91 L1783.55 1210.91 L1782.96 1210.91 L1782.37 1210.91 L1781.79 1210.91 L1781.2 1210.91 L1780.61 1210.91 L1780.03 1210.91 L1779.44 1210.91 L1778.86 1210.91 L1778.27 1210.91 L1777.68 1210.91 L1777.1 1210.91 L1776.51 1210.91 L1775.92 1210.91 L1775.34 1210.91 L1774.75 1210.91 L1774.16 1210.91 L1773.58 1210.91 L1772.99 1210.91 L1772.4 1210.91 L1771.82 1210.91 L1771.23 1210.91 L1770.65 1210.91 L1770.06 1210.91 L1769.47 1210.91 L1768.89 1210.91 L1768.3 1210.91 L1767.71 1210.91 L1767.13 1210.91 L1766.54 1210.91 L1765.95 1210.91 L1765.37 1210.91 L1764.78 1210.91 L1764.19 1210.91 L1763.61 1210.91 L1763.02 1210.91 L1762.44 1210.91 L1761.85 1210.91 L1761.26 1210.91 L1760.68 1210.91 L1760.09 1210.91 L1759.5 1210.91 L1758.92 1210.91 L1758.33 1210.91 L1757.74 1210.91 L1757.16 1210.91 L1756.57 1210.91 L1755.99 1210.91 L1755.4 1210.91 L1754.81 1210.91 L1754.23 1210.91 L1753.64 1210.91 L1753.05 1210.91 L1752.47 1210.91 L1751.88 1210.91 L1751.29 1210.91 L1750.71 1210.91 L1750.12 1210.91 L1749.53 1210.91 L1748.95 1210.91 L1748.36 1210.91 L1747.78 1210.91 L1747.19 1210.91 L1746.6 1210.91 L1746.02 1210.91 L1745.43 1210.91 L1744.84 1210.91 L1744.26 1210.91 L1743.67 1210.91 L1743.08 1210.91 L1742.5 1210.91 L1741.91 1210.91 L1741.32 1210.91 L1740.74 1210.91 L1740.15 1210.91 L1739.57 1210.91 L1738.98 1210.91 L1738.39 1210.91 L1737.81 1210.91 L1737.22 1210.91 L1736.63 1210.91 L1736.05 1210.91 L1735.46 1210.91 L1734.87 1210.91 L1734.29 1210.91 L1733.7 1210.91 L1733.11 1210.91 L1732.53 1210.91 L1731.94 1210.91 L1731.36 1210.91 L1730.77 1210.91 L1730.18 1210.91 L1729.6 1210.91 L1729.01 1210.91 L1728.42 1210.91 L1727.84 1210.91 L1727.25 1210.91 L1726.66 1210.91 L1726.08 1210.91 L1725.49 1210.91 L1724.91 1210.91 L1724.32 1210.91 L1723.73 1210.91 L1723.15 1210.91 L1722.56 1210.91 L1721.97 1210.91 L1721.39 1210.91 L1720.8 1210.91 L1720.21 1210.91 L1719.63 1210.91 L1719.04 1210.91 L1718.45 1210.91 L1717.87 1210.91 L1717.28 1210.91 L1716.7 1210.91 L1716.11 1210.91 L1715.52 1210.91 L1714.94 1210.91 L1714.35 1210.91 L1713.76 1210.91 L1713.18 1210.91 L1712.59 1210.91 L1712 1210.91 L1711.42 1210.91 L1710.83 1210.91 L1710.24 1210.91 L1709.66 1210.91 L1709.07 1210.91 L1708.49 1210.91 L1707.9 1210.91 L1707.31 1210.91 L1706.73 1210.91 L1706.14 1210.91 L1705.55 1210.91 L1704.97 1210.91 L1704.38 1210.91 L1703.79 1210.91 L1703.21 1210.91 L1702.62 1210.91 L1702.04 1210.91 L1701.45 1210.91 L1700.86 1210.91 L1700.28 1210.91 L1699.69 1210.91 L1699.1 1210.91 L1698.52 1210.91 L1697.93 1210.91 L1697.34 1210.91 L1696.76 1210.91 L1696.17 1210.91 L1695.58 1210.91 L1695 1210.91 L1694.41 1210.91 L1693.83 1210.91 L1693.24 1210.91 L1692.65 1210.91 L1692.07 1210.91 L1691.48 1210.91 L1690.89 1210.91 L1690.31 1210.91 L1689.72 1210.91 L1689.13 1210.91 L1688.55 1210.91 L1687.96 1210.91 L1687.37 1210.91 L1686.79 1210.91 L1686.2 1210.91 L1685.62 1210.91 L1685.03 1210.91 L1684.44 1210.91 L1683.86 1210.91 L1683.27 1210.91 L1682.68 1210.91 L1682.1 1210.91 L1681.51 1210.91 L1680.92 1210.91 L1680.34 1210.91 L1679.75 1210.91 L1679.17 1210.91 L1678.58 1210.91 L1677.99 1210.91 L1677.41 1210.91 L1676.82 1210.91 L1676.23 1210.91 L1675.65 1210.91 L1675.06 1210.91 L1674.47 1210.91 L1673.89 1210.91 L1673.3 1210.91 L1672.71 1210.91 L1672.13 1210.91 L1671.54 1210.91 L1670.96 1210.91 L1670.37 1210.91 L1669.78 1210.91 L1669.2 1210.91 L1668.61 1210.91 L1668.02 1210.91 L1667.44 1210.91 L1666.85 1210.91 L1666.26 1210.91 L1665.68 1210.91 L1665.09 1210.91 L1664.5 1210.91 L1663.92 1210.91 L1663.33 1210.91 L1662.75 1210.91 L1662.16 1210.91 L1661.57 1210.91 L1660.99 1210.91 L1660.4 1210.91 L1659.81 1210.91 L1659.23 1210.91 L1658.64 1210.91 L1658.05 1210.91 L1657.47 1210.91 L1656.88 1210.91 L1656.29 1210.91 L1655.71 1210.91 L1655.12 1210.91 L1654.54 1210.91 L1653.95 1210.91 L1653.36 1210.91 L1652.78 1210.91 L1652.19 1210.91 L1651.6 1210.91 L1651.02 1210.91 L1650.43 1210.91 L1649.84 1210.91 L1649.26 1210.91 L1648.67 1210.91 L1648.09 1210.91 L1647.5 1210.91 L1646.91 1210.91 L1646.33 1210.91 L1645.74 1210.91 L1645.15 1210.91 L1644.57 1210.91 L1643.98 1210.91 L1643.39 1210.91 L1642.81 1210.91 L1642.22 1210.91 L1641.63 1210.91 L1641.05 1210.91 L1640.46 1210.91 L1639.88 1210.91 L1639.29 1210.91 L1638.7 1210.91 L1638.12 1210.91 L1637.53 1210.91 L1636.94 1210.91 L1636.36 1210.91 L1635.77 1210.91 L1635.18 1210.91 L1634.6 1210.91 L1634.01 1210.91 L1633.42 1210.91 L1632.84 1210.91 L1632.25 1210.91 L1631.67 1210.91 L1631.08 1210.91 L1630.49 1210.91 L1629.91 1210.91 L1629.32 1210.91 L1628.73 1210.91 L1628.15 1210.91 L1627.56 1210.91 L1626.97 1210.91 L1626.39 1210.91 L1625.8 1210.91 L1625.22 1210.91 L1624.63 1210.91 L1624.04 1210.91 L1623.46 1210.91 L1622.87 1210.91 L1622.28 1210.91 L1621.7 1210.91 L1621.11 1210.91 L1620.52 1210.91 L1619.94 1210.91 L1619.35 1210.91 L1618.76 1210.91 L1618.18 1210.91 L1617.59 1210.91 L1617.01 1210.91 L1616.42 1210.91 L1615.83 1210.91 L1615.25 1210.91 L1614.66 1210.91 L1614.07 1210.91 L1613.49 1210.91 L1612.9 1210.91 L1612.31 1210.91 L1611.73 1210.91 L1611.14 1210.91 L1610.55 1210.91 L1609.97 1210.91 L1609.38 1210.91 L1608.8 1210.91 L1608.21 1210.91 L1607.62 1210.91 L1607.04 1210.91 L1606.45 1210.91 L1605.86 1210.91 L1605.28 1210.91 L1604.69 1210.91 L1604.1 1210.91 L1603.52 1210.91 L1602.93 1210.91 L1602.34 1210.91 L1601.76 1210.91 L1601.17 1210.91 L1600.59 1210.91 L1600 1210.91 L1599.41 1210.91 L1598.83 1210.91 L1598.24 1210.91 L1597.65 1210.91 L1597.07 1210.91 L1596.48 1210.91 L1595.89 1210.91 L1595.31 1210.91 L1594.72 1210.91 L1594.14 1210.91 L1593.55 1210.91 L1592.96 1210.91 L1592.38 1210.91 L1591.79 1210.91 L1591.2 1210.91 L1590.62 1210.91 L1590.03 1210.91 L1589.44 1210.91 L1588.86 1210.91 L1588.27 1210.91 L1587.68 1210.91 L1587.1 1210.91 L1586.51 1210.91 L1585.93 1210.91 L1585.34 1210.91 L1584.75 1210.91 L1584.17 1210.91 L1583.58 1210.91 L1582.99 1210.91 L1582.41 1210.91 L1581.82 1210.91 L1581.23 1210.91 L1580.65 1210.91 L1580.06 1210.91 L1579.47 1210.91 L1578.89 1210.91 L1578.3 1210.91 L1577.72 1210.91 L1577.13 1210.91 L1576.54 1210.91 L1575.96 1210.91 L1575.37 1210.91 L1574.78 1210.91 L1574.2 1210.91 L1573.61 1210.91 L1573.02 1210.91 L1572.44 1210.91 L1571.85 1210.91 L1571.27 1210.91 L1570.68 1210.91 L1570.09 1210.91 L1569.51 1210.91 L1568.92 1210.91 L1568.33 1210.91 L1567.75 1210.91 L1567.16 1210.91 L1566.57 1210.91 L1565.99 1210.91 L1565.4 1210.91 L1564.81 1210.91 L1564.23 1210.91 L1563.64 1210.91 L1563.06 1210.91 L1562.47 1210.91 L1561.88 1210.91 L1561.3 1210.91 L1560.71 1210.91 L1560.12 1210.91 L1559.54 1210.91 L1558.95 1210.91 L1558.36 1210.91 L1557.78 1210.91 L1557.19 1210.91 L1556.6 1210.91 L1556.02 1210.91 L1555.43 1210.91 L1554.85 1210.91 L1554.26 1210.91 L1553.67 1210.91 L1553.09 1210.91 L1552.5 1210.91 L1551.91 1210.91 L1551.33 1210.91 L1550.74 1210.91 L1550.15 1210.91 L1549.57 1210.91 L1548.98 1210.91 L1548.4 1210.91 L1547.81 1210.91 L1547.22 1210.91 L1546.64 1210.91 L1546.05 1210.91 L1545.46 1210.91 L1544.88 1210.91 L1544.29 1210.91 L1543.7 1210.91 L1543.12 1210.91 L1542.53 1210.91 L1541.94 1210.91 L1541.36 1210.91 L1540.77 1210.91 L1540.19 1210.91 L1539.6 1210.91 L1539.01 1210.91 L1538.43 1210.91 L1537.84 1210.91 L1537.25 1210.91 L1536.67 1210.91 L1536.08 1210.91 L1535.49 1210.91 L1534.91 1210.91 L1534.32 1210.91 L1533.73 1210.91 L1533.15 1210.91 L1532.56 1210.91 L1531.98 1210.91 L1531.39 1210.91 L1530.8 1210.91 L1530.22 1210.91 L1529.63 1210.91 L1529.04 1210.91 L1528.46 1210.91 L1527.87 1210.91 L1527.28 1210.91 L1526.7 1210.91 L1526.11 1210.91 L1525.52 1210.91 L1524.94 1210.91 L1524.35 1210.91 L1523.77 1210.91 L1523.18 1210.91 L1522.59 1210.91 L1522.01 1210.91 L1521.42 1210.91 L1520.83 1210.91 L1520.25 1210.91 L1519.66 1210.91 L1519.07 1210.91 L1518.49 1210.91 L1517.9 1210.91 L1517.32 1210.91 L1516.73 1210.91 L1516.14 1210.91 L1515.56 1210.91 L1514.97 1210.91 L1514.38 1210.91 L1513.8 1210.91 L1513.21 1210.91 L1512.62 1210.91 L1512.04 1210.91 L1511.45 1210.91 L1510.86 1210.91 L1510.28 1210.91 L1509.69 1210.91 L1509.11 1210.91 L1508.52 1210.91 L1507.93 1210.91 L1507.35 1210.91 L1506.76 1210.91 L1506.17 1210.91 L1505.59 1210.91 L1505 1210.91 L1504.41 1210.91 L1503.83 1210.91 L1503.24 1210.91 L1502.65 1210.91 L1502.07 1210.91 L1501.48 1210.91 L1500.9 1210.91 L1500.31 1210.91 L1499.72 1210.91 L1499.14 1210.91 L1498.55 1210.91 L1497.96 1210.91 L1497.38 1210.91 L1496.79 1210.91 L1496.2 1210.91 L1495.62 1210.91 L1495.03 1210.91 L1494.45 1210.91 L1493.86 1210.91 L1493.27 1210.91 L1492.69 1210.91 L1492.1 1210.91 L1491.51 1210.91 L1490.93 1210.91 L1490.34 1210.91 L1489.75 1210.91 L1489.17 1210.91 L1488.58 1210.91 L1487.99 1210.91 L1487.41 1210.91 L1486.82 1210.91 L1486.24 1210.91 L1485.65 1210.91 L1485.06 1210.91 L1484.48 1210.91 L1483.89 1210.91 L1483.3 1210.91 L1482.72 1210.91 L1482.13 1210.91 L1481.54 1210.91 L1480.96 1210.91 L1480.37 1210.91 L1479.78 1210.91 L1479.2 1210.91 L1478.61 1210.91 L1478.03 1210.91 L1477.44 1210.91 L1476.85 1210.91 L1476.27 1210.91 L1475.68 1210.91 L1475.09 1210.91 L1474.51 1210.91 L1473.92 1210.91 L1473.33 1210.91 L1472.75 1210.91 L1472.16 1210.91 L1471.57 1210.91 L1470.99 1210.91 L1470.4 1210.91 L1469.82 1210.91 L1469.23 1210.91 L1468.64 1210.91 L1468.06 1210.91 L1467.47 1210.91 L1466.88 1210.91 L1466.3 1210.91 L1465.71 1210.91 L1465.12 1210.91 L1464.54 1210.91 L1463.95 1210.91 L1463.37 1210.91 L1462.78 1210.91 L1462.19 1210.91 L1461.61 1210.91 L1461.02 1210.91 L1460.43 1210.91 L1459.85 1210.91 L1459.26 1210.91 L1458.67 1210.91 L1458.09 1210.91 L1457.5 1210.91 L1456.91 1210.91 L1456.33 1210.91 L1455.74 1210.91 L1455.16 1210.91 L1454.57 1210.91 L1453.98 1210.91 L1453.4 1210.91 L1452.81 1210.91 L1452.22 1210.91 L1451.64 1210.91 L1451.05 1210.91 L1450.46 1210.91 L1449.88 1210.91 L1449.29 1210.91 L1448.7 1210.91 L1448.12 1210.91 L1447.53 1210.91 L1446.95 1210.91 L1446.36 1210.91 L1445.77 1210.91 L1445.19 1210.91 L1444.6 1210.91 L1444.01 1210.91 L1443.43 1210.91 L1442.84 1210.91 L1442.25 1210.91 L1441.67 1210.91 L1441.08 1210.91 L1440.5 1210.91 L1439.91 1210.91 L1439.32 1210.91 L1438.74 1210.91 L1438.15 1210.91 L1437.56 1210.91 L1436.98 1210.91 L1436.39 1210.91 L1435.8 1210.91 L1435.22 1210.91 L1434.63 1210.91 L1434.04 1210.91 L1433.46 1210.91 L1432.87 1210.91 L1432.29 1210.91 L1431.7 1210.91 L1431.11 1210.91 L1430.53 1210.91 L1429.94 1210.91 L1429.35 1210.91 L1428.77 1210.91 L1428.18 1210.91 L1427.59 1210.91 L1427.01 1210.91 L1426.42 1210.91 L1425.83 1210.91 L1425.25 1210.91 L1424.66 1210.91 L1424.08 1210.91 L1423.49 1210.91 L1422.9 1210.91 L1422.32 1210.91 L1421.73 1210.91 L1421.14 1210.91 L1420.56 1210.91 L1419.97 1210.91 L1419.38 1210.91 L1418.8 1210.91 L1418.21 1210.91 L1417.63 1210.91 L1417.04 1210.91 L1416.45 1210.91 L1415.87 1210.91 L1415.28 1210.91 L1414.69 1210.91 L1414.11 1210.91 L1413.52 1210.91 L1412.93 1210.91 L1412.35 1210.91 L1411.76 1210.91 L1411.17 1210.91 L1410.59 1210.91 L1410 1210.91 L1409.42 1210.91 L1408.83 1210.91 L1408.24 1210.91 L1407.66 1210.91 L1407.07 1210.91 L1406.48 1210.91 L1405.9 1210.91 L1405.31 1210.91 L1404.72 1210.91 L1404.14 1210.91 L1403.55 1210.91 L1402.96 1210.91 L1402.38 1210.91 L1401.79 1210.91 L1401.21 1210.91 L1400.62 1210.91 L1400.03 1210.91 L1399.45 1210.91 L1398.86 1210.91 L1398.27 1210.91 L1397.69 1210.91 L1397.1 1210.91 L1396.51 1210.91 L1395.93 1210.91 L1395.34 1210.91 L1394.75 1210.91 L1394.17 1210.91 L1393.58 1210.91 L1393 1210.91 L1392.41 1210.91 L1391.82 1210.91 L1391.24 1210.91 L1390.65 1210.91 L1390.06 1210.91 L1389.48 1210.91 L1388.89 1210.91 L1388.3 1210.91 L1387.72 1210.91 L1387.13 1210.91 L1386.55 1210.91 L1385.96 1210.91 L1385.37 1210.91 L1384.79 1210.91 L1384.2 1210.91 L1383.61 1210.91 L1383.03 1210.91 L1382.44 1210.91 L1381.85 1210.91 L1381.27 1210.91 L1380.68 1210.91 L1380.09 1210.91 L1379.51 1210.91 L1378.92 1210.91 L1378.34 1210.91 L1377.75 1210.91 L1377.16 1210.91 L1376.58 1210.91 L1375.99 1210.91 L1375.4 1210.91 L1374.82 1210.91 L1374.23 1210.91 L1373.64 1210.91 L1373.06 1210.91 L1372.47 1210.91 L1371.88 1210.91 L1371.3 1210.91 L1370.71 1210.91 L1370.13 1210.91 L1369.54 1210.91 L1368.95 1210.91 L1368.37 1210.91 L1367.78 1210.91 L1367.19 1210.91 L1366.61 1210.91 L1366.02 1210.91 L1365.43 1210.91 L1364.85 1210.91 L1364.26 1210.91 L1363.68 1210.91 L1363.09 1210.91 L1362.5 1210.91 L1361.92 1210.91 L1361.33 1210.91 L1360.74 1210.91 L1360.16 1210.91 L1359.57 1210.91 L1358.98 1210.91 L1358.4 1210.91 L1357.81 1210.91 L1357.22 1210.91 L1356.64 1210.91 L1356.05 1210.91 L1355.47 1210.91 L1354.88 1210.91 L1354.29 1210.91 L1353.71 1210.91 L1353.12 1210.91 L1352.53 1210.91 L1351.95 1210.91 L1351.36 1210.91 L1350.77 1210.91 L1350.19 1210.91 L1349.6 1210.91 L1349.01 1210.91 L1348.43 1210.91 L1347.84 1210.91 L1347.26 1210.91 L1346.67 1210.91 L1346.08 1210.91 L1345.5 1210.91 L1344.91 1210.91 L1344.32 1210.91 L1343.74 1210.91 L1343.15 1210.91 L1342.56 1210.91 L1341.98 1210.91 L1341.39 1210.91 L1340.8 1210.91 L1340.22 1210.91 L1339.63 1210.91 L1339.05 1210.91 L1338.46 1210.91 L1337.87 1210.91 L1337.29 1210.91 L1336.7 1210.91 L1336.11 1210.91 L1335.53 1210.91 L1334.94 1210.91 L1334.35 1210.91 L1333.77 1210.91 L1333.18 1210.91 L1332.6 1210.91 L1332.01 1210.91 L1331.42 1210.91 L1330.84 1210.91 L1330.25 1210.91 L1329.66 1210.91 L1329.08 1210.91 L1328.49 1210.91 L1327.9 1210.91 L1327.32 1210.91 L1326.73 1210.91 L1326.14 1210.91 L1325.56 1210.91 L1324.97 1210.91 L1324.39 1210.91 L1323.8 1210.91 L1323.21 1210.91 L1322.63 1210.91 L1322.04 1210.91 L1321.45 1210.91 L1320.87 1210.91 L1320.28 1210.91 L1319.69 1210.91 L1319.11 1210.91 L1318.52 1210.91 L1317.93 1210.91 L1317.35 1210.91 L1316.76 1210.91 L1316.18 1210.91 L1315.59 1210.91 L1315 1210.91 L1314.42 1210.91 L1313.83 1210.91 L1313.24 1210.91 L1312.66 1210.91 L1312.07 1210.91 L1311.48 1210.91 L1310.9 1210.91 L1310.31 1210.91 L1309.73 1210.91 L1309.14 1210.91 L1308.55 1210.91 L1307.97 1210.91 L1307.38 1210.91 L1306.79 1210.91 L1306.21 1210.91 L1305.62 1210.91 L1305.03 1210.91 L1304.45 1210.91 L1303.86 1210.91 L1303.27 1210.91 L1302.69 1210.91 L1302.1 1210.91 L1301.52 1210.91 L1300.93 1210.91 L1300.34 1210.91 L1299.76 1210.91 L1299.17 1210.91 L1298.58 1210.91 L1298 1210.91 L1297.41 1210.91 L1296.82 1210.91 L1296.24 1210.91 L1295.65 1210.91 L1295.06 1210.91 L1294.48 1210.91 L1293.89 1210.91 L1293.31 1210.91 L1292.72 1210.91 L1292.13 1210.91 L1291.55 1210.91 L1290.96 1210.91 L1290.37 1210.91 L1289.79 1210.91 L1289.2 1210.91 L1288.61 1210.91 L1288.03 1210.91 L1287.44 1210.91 L1286.86 1210.91 L1286.27 1210.91 L1285.68 1210.91 L1285.1 1210.91 L1284.51 1210.91 L1283.92 1210.91 L1283.34 1210.91 L1282.75 1210.91 L1282.16 1210.91 L1281.58 1210.91 L1280.99 1210.91 L1280.4 1210.91 L1279.82 1210.91 L1279.23 1210.91 L1278.65 1210.91 L1278.06 1210.91 L1277.47 1210.91 L1276.89 1210.91 L1276.3 1210.91 L1275.71 1210.91 L1275.13 1210.91 L1274.54 1210.91 L1273.95 1210.91 L1273.37 1210.91 L1272.78 1210.91 L1272.19 1210.91 L1271.61 1210.91 L1271.02 1210.91 L1270.44 1210.91 L1269.85 1210.91 L1269.26 1210.91 L1268.68 1210.91 L1268.09 1210.91 L1267.5 1210.91 L1266.92 1210.91 L1266.33 1210.91 L1265.74 1210.91 L1265.16 1210.91 L1264.57 1210.91 L1263.98 1210.91 L1263.4 1210.91 L1262.81 1210.91 L1262.23 1210.91 L1261.64 1210.91 L1261.05 1210.91 L1260.47 1210.91 L1259.88 1210.91 L1259.29 1210.91 L1258.71 1210.91 L1258.12 1210.91 L1257.53 1210.91 L1256.95 1210.91 L1256.36 1210.91 L1255.78 1210.91 L1255.19 1210.91 L1254.6 1210.91 L1254.02 1210.91 L1253.43 1210.91 L1252.84 1210.91 L1252.26 1210.91 L1251.67 1210.91 L1251.08 1210.91 L1250.5 1210.91 L1249.91 1210.91 L1249.32 1210.91 L1248.74 1210.91 L1248.15 1210.91 L1247.57 1210.91 L1246.98 1210.91 L1246.39 1210.91 L1245.81 1210.91 L1245.22 1210.91 L1244.63 1210.91 L1244.05 1210.91 L1243.46 1210.91 L1242.87 1210.91 L1242.29 1210.91 L1241.7 1210.91 L1241.11 1210.91 L1240.53 1210.91 L1239.94 1210.91 L1239.36 1210.91 L1238.77 1210.91 L1238.18 1210.91 L1237.6 1210.91 L1237.01 1210.91 L1236.42 1210.91 L1235.84 1210.91 L1235.25 1210.91 L1234.66 1210.91 L1234.08 1210.91 L1233.49 1210.91 L1232.91 1210.91 L1232.32 1210.91 L1231.73 1210.91 L1231.15 1210.91 L1230.56 1210.91 L1229.97 1210.91 L1229.39 1210.91 L1228.8 1210.91 L1228.21 1210.91 L1227.63 1210.91 L1227.04 1210.91 L1226.45 1210.91 L1225.87 1210.91 L1225.28 1210.91 L1224.7 1210.91 L1224.11 1210.91 L1223.52 1210.91 L1222.94 1210.91 L1222.35 1210.91 L1221.76 1210.91 L1221.18 1210.91 L1220.59 1210.91 L1220 1210.91 L1219.42 1210.91 L1218.83 1210.91 L1218.24 1210.91 L1217.66 1210.91 L1217.07 1210.91 L1216.49 1210.91 L1215.9 1210.91 L1215.31 1210.91 L1214.73 1210.91 L1214.14 1210.91 L1213.55 1210.91 L1212.97 1210.91 L1212.38 1210.91 L1211.79 1210.91 L1211.21 1210.91 L1210.62 1210.91 L1210.03 1210.91 L1209.45 1210.91 L1208.86 1210.91 L1208.28 1210.91 L1207.69 1210.91 L1207.1 1210.91 L1206.52 1210.91 L1205.93 1210.91 L1205.34 1210.91 L1204.76 1210.91 L1204.17 1210.91 L1203.58 1210.91 L1203 1210.91 L1202.41 1210.91 L1201.83 1210.91 L1201.24 1210.91 L1200.65 1210.91 L1200.07 1210.91 L1199.48 1210.91 L1198.89 1210.91 L1198.31 1210.91 L1197.72 1210.91 L1197.13 1210.91 L1196.55 1210.91 L1195.96 1210.91 L1195.37 1210.91 L1194.79 1210.91 L1194.2 1210.91 L1193.62 1210.91 L1193.03 1210.91 L1192.44 1210.91 L1191.86 1210.91 L1191.27 1210.91 L1190.68 1210.91 L1190.1 1210.91 L1189.51 1210.91 L1188.92 1210.91 L1188.34 1210.91 L1187.75 1210.91 L1187.16 1210.91 L1186.58 1210.91 L1185.99 1210.91 L1185.41 1210.91 L1184.82 1210.91 L1184.23 1210.91 L1183.65 1210.91 L1183.06 1210.91 L1182.47 1210.91 L1181.89 1210.91 L1181.3 1210.91 L1180.71 1210.91 L1180.13 1210.91 L1179.54 1210.91 L1178.96 1210.91 L1178.37 1210.91 L1177.78 1210.91 L1177.2 1210.91 L1176.61 1210.91 L1176.02 1210.91 L1175.44 1210.91 L1174.85 1210.91 L1174.26 1210.91 L1173.68 1210.91 L1173.09 1210.91 L1172.5 1210.91 L1171.92 1210.91 L1171.33 1210.91 L1170.75 1210.91 L1170.16 1210.91 L1169.57 1210.91 L1168.99 1210.91 L1168.4 1210.91 L1167.81 1210.91 L1167.23 1210.91 L1166.64 1210.91 L1166.05 1210.91 L1165.47 1210.91 L1164.88 1210.91 L1164.29 1210.91 L1163.71 1210.91 L1163.12 1210.91 L1162.54 1210.91 L1161.95 1210.91 L1161.36 1210.91 L1160.78 1210.91 L1160.19 1210.91 L1159.6 1210.91 L1159.02 1210.91 L1158.43 1210.91 L1157.84 1210.91 L1157.26 1210.91 L1156.67 1210.91 L1156.09 1210.91 L1155.5 1210.91 L1154.91 1210.91 L1154.33 1210.91 L1153.74 1210.91 L1153.15 1210.91 L1152.57 1210.91 L1151.98 1210.91 L1151.39 1210.91 L1150.81 1210.91 L1150.22 1210.91 L1149.63 1210.91 L1149.05 1210.91 L1148.46 1210.91 L1147.88 1210.91 L1147.29 1210.91 L1146.7 1210.91 L1146.12 1210.91 L1145.53 1210.91 L1144.94 1210.91 L1144.36 1210.91 L1143.77 1210.91 L1143.18 1210.91 L1142.6 1210.91 L1142.01 1210.91 L1141.42 1210.91 L1140.84 1210.91 L1140.25 1210.91 L1139.67 1210.91 L1139.08 1210.91 L1138.49 1210.91 L1137.91 1210.91 L1137.32 1210.91 L1136.73 1210.91 L1136.15 1210.91 L1135.56 1210.91 L1134.97 1210.91 L1134.39 1210.91 L1133.8 1210.91 L1133.21 1210.91 L1132.63 1210.91 L1132.04 1210.91 L1131.46 1210.91 L1130.87 1210.91 L1130.28 1210.91 L1129.7 1210.91 L1129.11 1210.91 L1128.52 1210.91 L1127.94 1210.91 L1127.35 1210.91 L1126.76 1210.91 L1126.18 1210.91 L1125.59 1210.91 L1125.01 1210.91 L1124.42 1210.91 L1123.83 1210.91 L1123.25 1210.91 L1122.66 1210.91 L1122.07 1210.91 L1121.49 1210.91 L1120.9 1210.91 L1120.31 1210.91 L1119.73 1210.91 L1119.14 1210.91 L1118.55 1210.91 L1117.97 1210.91 L1117.38 1210.91 L1116.8 1210.91 L1116.21 1210.91 L1115.62 1210.91 L1115.04 1210.91 L1114.45 1210.91 L1113.86 1210.91 L1113.28 1210.91 L1112.69 1210.91 L1112.1 1210.91 L1111.52 1210.91 L1110.93 1210.91 L1110.34 1210.91 L1109.76 1210.91 L1109.17 1210.91 L1108.59 1210.91 L1108 1210.91 L1107.41 1210.91 L1106.83 1210.91 L1106.24 1210.91 L1105.65 1210.91 L1105.07 1210.91 L1104.48 1210.91 L1103.89 1210.91 L1103.31 1210.91 L1102.72 1210.91 L1102.14 1210.91 L1101.55 1210.91 L1100.96 1210.91 L1100.38 1210.91 L1099.79 1210.91 L1099.2 1210.91 L1098.62 1210.91 L1098.03 1210.91 L1097.44 1210.91 L1096.86 1210.91 L1096.27 1210.91 L1095.68 1210.91 L1095.1 1210.91 L1094.51 1210.91 L1093.93 1210.91 L1093.34 1210.91 L1092.75 1210.91 L1092.17 1210.91 L1091.58 1210.91 L1090.99 1210.91 L1090.41 1210.91 L1089.82 1210.91 L1089.23 1210.91 L1088.65 1210.91 L1088.06 1210.91 L1087.47 1210.91 L1086.89 1210.91 L1086.3 1210.91 L1085.72 1210.91 L1085.13 1210.91 L1084.54 1210.91 L1083.96 1210.91 L1083.37 1210.91 L1082.78 1210.91 L1082.2 1210.91 L1081.61 1210.91 L1081.02 1210.91 L1080.44 1210.91 L1079.85 1210.91 L1079.26 1210.91 L1078.68 1210.91 L1078.09 1210.91 L1077.51 1210.91 L1076.92 1210.91 L1076.33 1210.91 L1075.75 1210.91 L1075.16 1210.91 L1074.57 1210.91 L1073.99 1210.91 L1073.4 1210.91 L1072.81 1210.91 L1072.23 1210.91 L1071.64 1210.91 L1071.06 1210.91 L1070.47 1210.91 L1069.88 1210.91 L1069.3 1210.91 L1068.71 1210.91 L1068.12 1210.91 L1067.54 1210.91 L1066.95 1210.91 L1066.36 1210.91 L1065.78 1210.91 L1065.19 1210.91 L1064.6 1210.91 L1064.02 1210.91 L1063.43 1210.91 L1062.85 1210.91 L1062.26 1210.91 L1061.67 1210.91 L1061.09 1210.91 L1060.5 1210.91 L1059.91 1210.91 L1059.33 1210.91 L1058.74 1210.91 L1058.15 1210.91 L1057.57 1210.91 L1056.98 1210.91 L1056.39 1210.91 L1055.81 1210.91 L1055.22 1210.91 L1054.64 1210.91 L1054.05 1210.91 L1053.46 1210.91 L1052.88 1210.91 L1052.29 1210.91 L1051.7 1210.91 L1051.12 1210.91 L1050.53 1210.91 L1049.94 1210.91 L1049.36 1210.91 L1048.77 1210.91 L1048.19 1210.91 L1047.6 1210.91 L1047.01 1210.91 L1046.43 1210.91 L1045.84 1210.91 L1045.25 1210.91 L1044.67 1210.91 L1044.08 1210.91 L1043.49 1210.91 L1042.91 1210.91 L1042.32 1210.91 L1041.73 1210.91 L1041.15 1210.91 L1040.56 1210.91 L1039.98 1210.91 L1039.39 1210.91 L1038.8 1210.91 L1038.22 1210.91 L1037.63 1210.91 L1037.04 1210.91 L1036.46 1210.91 L1035.87 1210.91 L1035.28 1210.91 L1034.7 1210.91 L1034.11 1210.91 L1033.52 1210.91 L1032.94 1210.91 L1032.35 1210.91 L1031.77 1210.91 L1031.18 1210.91 L1030.59 1210.91 L1030.01 1210.91 L1029.42 1210.91 L1028.83 1210.91 L1028.25 1210.91 L1027.66 1210.91 L1027.07 1210.91 L1026.49 1210.91 L1025.9 1210.91 L1025.32 1210.91 L1024.73 1210.91 L1024.14 1210.91 L1023.56 1210.91 L1022.97 1210.91 L1022.38 1210.91 L1021.8 1210.91 L1021.21 1210.91 L1020.62 1210.91 L1020.04 1210.91 L1019.45 1210.91 L1018.86 1210.91 L1018.28 1210.91 L1017.69 1210.91 L1017.11 1210.91 L1016.52 1210.91 L1015.93 1210.91 L1015.35 1210.91 L1014.76 1210.91 L1014.17 1210.91 L1013.59 1210.91 L1013 1210.91 L1012.41 1210.91 L1011.83 1210.91 L1011.24 1210.91 L1010.65 1210.91 L1010.07 1210.91 L1009.48 1210.91 L1008.9 1210.91 L1008.31 1210.91 L1007.72 1210.91 L1007.14 1210.91 L1006.55 1210.91 L1005.96 1210.91 L1005.38 1210.91 L1004.79 1210.91 L1004.2 1210.91 L1003.62 1210.91 L1003.03 1210.91 L1002.44 1210.91 L1001.86 1210.91 L1001.27 1210.91 L1000.69 1210.91 L1000.1 1210.91 L999.513 1210.91 L998.926 1210.91 L998.34 1210.91 L997.754 1210.91 L997.167 1210.91 L996.581 1210.91 L995.994 1210.91 L995.408 1210.91 L994.822 1210.91 L994.235 1210.91 L993.649 1210.91 L993.062 1210.91 L992.476 1210.91 L991.889 1210.91 L991.303 1210.91 L990.717 1210.91 L990.13 1210.91 L989.544 1210.91 L988.957 1210.91 L988.371 1210.91 L987.785 1210.91 L987.198 1210.91 L986.612 1210.91 L986.025 1210.91  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.98 986.612,1210.98 987.198,1210.98 987.785,1210.98 988.371,1210.98 988.957,1210.98 989.544,1210.98 990.13,1210.98 990.717,1210.98 991.303,1210.98 991.889,1210.98 992.476,1210.98 993.062,1210.98 993.649,1210.98 994.235,1210.98 994.822,1210.98 995.408,1210.98 995.994,1210.98 996.581,1210.98 997.167,1210.98 997.754,1210.98 998.34,1210.98 998.926,1210.98 999.513,1210.98 1000.1,1210.98 1000.69,1210.98 1001.27,1210.98 1001.86,1210.98 1002.44,1210.98 1003.03,1210.98 1003.62,1210.98 1004.2,1210.98 1004.79,1210.98 1005.38,1210.98 1005.96,1210.98 1006.55,1210.98 1007.14,1210.98 1007.72,1210.98 1008.31,1210.98 1008.9,1210.98 1009.48,1210.98 1010.07,1210.98 1010.65,1210.98 1011.24,1210.98 1011.83,1210.98 1012.41,1210.98 1013,1210.98 1013.59,1210.98 1014.17,1210.98 1014.76,1210.98 1015.35,1210.98 1015.93,1210.98 1016.52,1210.98 1017.11,1210.98 1017.69,1210.98 1018.28,1210.98 1018.86,1210.98 1019.45,1210.98 1020.04,1210.98 1020.62,1210.98 1021.21,1210.98 1021.8,1210.98 1022.38,1210.98 1022.97,1210.98 1023.56,1210.98 1024.14,1210.98 1024.73,1210.98 1025.32,1210.98 1025.9,1210.98 1026.49,1210.98 1027.07,1210.98 1027.66,1210.98 1028.25,1210.98 1028.83,1210.98 1029.42,1210.98 1030.01,1210.98 1030.59,1210.98 1031.18,1210.98 1031.77,1210.98 1032.35,1210.98 1032.94,1210.98 1033.52,1210.98 1034.11,1210.98 1034.7,1210.98 1035.28,1210.98 1035.87,1210.98 1036.46,1210.98 1037.04,1210.98 1037.63,1210.98 1038.22,1210.98 1038.8,1210.98 1039.39,1210.98 1039.98,1210.98 1040.56,1210.98 1041.15,1210.98 1041.73,1210.98 1042.32,1210.98 1042.91,1210.98 1043.49,1210.98 1044.08,1210.98 1044.67,1210.98 1045.25,1210.98 1045.84,1210.98 1046.43,1210.98 1047.01,1210.98 1047.6,1210.98 1048.19,1210.98 1048.77,1210.98 1049.36,1210.98 1049.94,1210.98 1050.53,1210.98 1051.12,1210.98 1051.7,1210.98 1052.29,1210.98 1052.88,1210.98 1053.46,1210.98 1054.05,1210.98 1054.64,1210.98 1055.22,1210.98 1055.81,1210.98 1056.39,1210.98 1056.98,1210.98 1057.57,1210.98 1058.15,1210.98 1058.74,1210.98 1059.33,1210.98 1059.91,1210.98 1060.5,1210.98 1061.09,1210.98 1061.67,1210.98 1062.26,1210.98 1062.85,1210.98 1063.43,1210.98 1064.02,1210.98 1064.6,1210.98 1065.19,1210.98 1065.78,1210.98 1066.36,1210.98 1066.95,1210.98 1067.54,1210.98 1068.12,1210.98 1068.71,1210.98 1069.3,1210.98 1069.88,1210.98 1070.47,1210.98 1071.06,1210.98 1071.64,1210.98 1072.23,1210.98 1072.81,1210.98 1073.4,1210.98 1073.99,1210.98 1074.57,1210.98 1075.16,1210.98 1075.75,1210.98 1076.33,1210.98 1076.92,1210.98 1077.51,1210.98 1078.09,1210.98 1078.68,1210.98 1079.26,1210.98 1079.85,1210.98 1080.44,1210.98 1081.02,1210.98 1081.61,1210.98 1082.2,1210.98 1082.78,1210.98 1083.37,1210.98 1083.96,1210.98 1084.54,1210.98 1085.13,1210.98 1085.72,1210.98 1086.3,1210.98 1086.89,1210.98 1087.47,1210.98 1088.06,1210.98 1088.65,1210.98 1089.23,1210.98 1089.82,1210.98 1090.41,1210.98 1090.99,1210.98 1091.58,1210.98 1092.17,1210.98 1092.75,1210.98 1093.34,1210.98 1093.93,1210.98 1094.51,1210.98 1095.1,1210.98 1095.68,1210.98 1096.27,1210.98 1096.86,1210.98 1097.44,1210.98 1098.03,1210.98 1098.62,1210.98 1099.2,1210.98 1099.79,1210.98 1100.38,1210.98 1100.96,1210.98 1101.55,1210.98 1102.14,1210.98 1102.72,1210.98 1103.31,1210.98 1103.89,1210.98 1104.48,1210.98 1105.07,1210.98 1105.65,1210.98 1106.24,1210.98 1106.83,1210.98 1107.41,1210.98 1108,1210.98 1108.59,1210.98 1109.17,1210.98 1109.76,1210.98 1110.34,1210.98 1110.93,1210.98 1111.52,1210.98 1112.1,1210.98 1112.69,1210.98 1113.28,1210.98 1113.86,1210.98 1114.45,1210.98 1115.04,1210.98 1115.62,1210.98 1116.21,1210.98 1116.8,1210.98 1117.38,1210.98 1117.97,1210.98 1118.55,1210.98 1119.14,1210.98 1119.73,1210.98 1120.31,1210.98 1120.9,1210.98 1121.49,1210.98 1122.07,1210.98 1122.66,1210.98 1123.25,1210.98 1123.83,1210.98 1124.42,1210.98 1125.01,1210.98 1125.59,1210.98 1126.18,1210.98 1126.76,1210.98 1127.35,1210.98 1127.94,1210.98 1128.52,1210.98 1129.11,1210.98 1129.7,1210.98 1130.28,1210.98 1130.87,1210.98 1131.46,1210.98 1132.04,1210.98 1132.63,1210.98 1133.21,1210.98 1133.8,1210.98 1134.39,1210.98 1134.97,1210.98 1135.56,1210.98 1136.15,1210.98 1136.73,1210.98 1137.32,1210.98 1137.91,1210.98 1138.49,1210.98 1139.08,1210.98 1139.67,1210.98 1140.25,1210.98 1140.84,1210.98 1141.42,1210.98 1142.01,1210.98 1142.6,1210.98 1143.18,1210.98 1143.77,1210.98 1144.36,1210.98 1144.94,1210.98 1145.53,1210.98 1146.12,1210.98 1146.7,1210.98 1147.29,1210.98 1147.88,1210.98 1148.46,1210.98 1149.05,1210.98 1149.63,1210.98 1150.22,1210.98 1150.81,1210.98 1151.39,1210.98 1151.98,1210.98 1152.57,1210.98 1153.15,1210.98 1153.74,1210.98 1154.33,1210.98 1154.91,1210.98 1155.5,1210.98 1156.09,1210.98 1156.67,1210.98 1157.26,1210.98 1157.84,1210.98 1158.43,1210.98 1159.02,1210.98 1159.6,1210.98 1160.19,1210.98 1160.78,1210.98 1161.36,1210.98 1161.95,1210.98 1162.54,1210.98 1163.12,1210.98 1163.71,1210.98 1164.29,1210.98 1164.88,1210.98 1165.47,1210.98 1166.05,1210.98 1166.64,1210.98 1167.23,1210.98 1167.81,1210.98 1168.4,1210.98 1168.99,1210.98 1169.57,1210.98 1170.16,1210.98 1170.75,1210.98 1171.33,1210.98 1171.92,1210.98 1172.5,1210.98 1173.09,1210.98 1173.68,1210.98 1174.26,1210.98 1174.85,1210.98 1175.44,1210.98 1176.02,1210.98 1176.61,1210.98 1177.2,1210.98 1177.78,1210.98 1178.37,1210.98 1178.96,1210.98 1179.54,1210.98 1180.13,1210.98 1180.71,1210.98 1181.3,1210.98 1181.89,1210.98 1182.47,1210.98 1183.06,1210.98 1183.65,1210.98 1184.23,1210.98 1184.82,1210.98 1185.41,1210.98 1185.99,1210.98 1186.58,1210.98 1187.16,1210.98 1187.75,1210.98 1188.34,1210.98 1188.92,1210.98 1189.51,1210.98 1190.1,1210.98 1190.68,1210.98 1191.27,1210.98 1191.86,1210.98 1192.44,1210.98 1193.03,1210.98 1193.62,1210.98 1194.2,1210.98 1194.79,1210.98 1195.37,1210.98 1195.96,1210.98 1196.55,1210.98 1197.13,1210.98 1197.72,1210.98 1198.31,1210.98 1198.89,1210.98 1199.48,1210.98 1200.07,1210.98 1200.65,1210.98 1201.24,1210.98 1201.83,1210.98 1202.41,1210.98 1203,1210.98 1203.58,1210.98 1204.17,1210.98 1204.76,1210.98 1205.34,1210.98 1205.93,1210.98 1206.52,1210.98 1207.1,1210.98 1207.69,1210.98 1208.28,1210.98 1208.86,1210.98 1209.45,1210.98 1210.03,1210.98 1210.62,1210.98 1211.21,1210.98 1211.79,1210.98 1212.38,1210.98 1212.97,1210.98 1213.55,1210.98 1214.14,1210.98 1214.73,1210.98 1215.31,1210.98 1215.9,1210.98 1216.49,1210.98 1217.07,1210.98 1217.66,1210.98 1218.24,1210.98 1218.83,1210.98 1219.42,1210.98 1220,1210.98 1220.59,1210.98 1221.18,1210.98 1221.76,1210.98 1222.35,1210.98 1222.94,1210.98 1223.52,1210.98 1224.11,1210.98 1224.7,1210.98 1225.28,1210.98 1225.87,1210.98 1226.45,1210.98 1227.04,1210.98 1227.63,1210.98 1228.21,1210.98 1228.8,1210.98 1229.39,1210.98 1229.97,1210.98 1230.56,1210.98 1231.15,1210.98 1231.73,1210.98 1232.32,1210.98 1232.91,1210.98 1233.49,1210.98 1234.08,1210.98 1234.66,1210.98 1235.25,1210.98 1235.84,1210.98 1236.42,1210.98 1237.01,1210.98 1237.6,1210.98 1238.18,1210.98 1238.77,1210.98 1239.36,1210.98 1239.94,1210.98 1240.53,1210.98 1241.11,1210.98 1241.7,1210.98 1242.29,1210.98 1242.87,1210.98 1243.46,1210.98 1244.05,1210.98 1244.63,1210.98 1245.22,1210.98 1245.81,1210.98 1246.39,1210.98 1246.98,1210.98 1247.57,1210.98 1248.15,1210.98 1248.74,1210.98 1249.32,1210.98 1249.91,1210.98 1250.5,1210.98 1251.08,1210.98 1251.67,1210.98 1252.26,1210.98 1252.84,1210.98 1253.43,1210.98 1254.02,1210.98 1254.6,1210.98 1255.19,1210.98 1255.78,1210.98 1256.36,1210.98 1256.95,1210.98 1257.53,1210.98 1258.12,1210.98 1258.71,1210.98 1259.29,1210.98 1259.88,1210.98 1260.47,1210.98 1261.05,1210.98 1261.64,1210.98 1262.23,1210.98 1262.81,1210.98 1263.4,1210.98 1263.98,1210.98 1264.57,1210.98 1265.16,1210.98 1265.74,1210.98 1266.33,1210.98 1266.92,1210.98 1267.5,1210.98 1268.09,1210.98 1268.68,1210.98 1269.26,1210.98 1269.85,1210.98 1270.44,1210.98 1271.02,1210.98 1271.61,1210.98 1272.19,1210.98 1272.78,1210.98 1273.37,1210.98 1273.95,1210.98 1274.54,1210.98 1275.13,1210.98 1275.71,1210.98 1276.3,1210.98 1276.89,1210.98 1277.47,1210.98 1278.06,1210.98 1278.65,1210.98 1279.23,1210.98 1279.82,1210.98 1280.4,1210.98 1280.99,1210.98 1281.58,1210.98 1282.16,1210.98 1282.75,1210.98 1283.34,1210.98 1283.92,1210.98 1284.51,1210.98 1285.1,1210.98 1285.68,1210.98 1286.27,1210.98 1286.86,1210.98 1287.44,1210.98 1288.03,1210.98 1288.61,1210.98 1289.2,1210.98 1289.79,1210.98 1290.37,1210.98 1290.96,1210.98 1291.55,1210.98 1292.13,1210.98 1292.72,1210.98 1293.31,1210.98 1293.89,1210.98 1294.48,1210.98 1295.06,1210.98 1295.65,1210.98 1296.24,1210.98 1296.82,1210.98 1297.41,1210.98 1298,1210.98 1298.58,1210.98 1299.17,1210.98 1299.76,1210.98 1300.34,1210.98 1300.93,1210.98 1301.52,1210.98 1302.1,1210.98 1302.69,1210.98 1303.27,1210.98 1303.86,1210.98 1304.45,1210.98 1305.03,1210.98 1305.62,1210.98 1306.21,1210.98 1306.79,1210.98 1307.38,1210.98 1307.97,1210.98 1308.55,1210.98 1309.14,1210.98 1309.73,1210.98 1310.31,1210.98 1310.9,1210.98 1311.48,1210.98 1312.07,1210.98 1312.66,1210.98 1313.24,1210.98 1313.83,1210.98 1314.42,1210.98 1315,1210.98 1315.59,1210.98 1316.18,1210.98 1316.76,1210.98 1317.35,1210.98 1317.93,1210.98 1318.52,1210.98 1319.11,1210.98 1319.69,1210.98 1320.28,1210.98 1320.87,1210.98 1321.45,1210.98 1322.04,1210.98 1322.63,1210.98 1323.21,1210.98 1323.8,1210.98 1324.39,1210.98 1324.97,1210.98 1325.56,1210.98 1326.14,1210.98 1326.73,1210.98 1327.32,1210.98 1327.9,1210.98 1328.49,1210.98 1329.08,1210.98 1329.66,1210.98 1330.25,1210.98 1330.84,1210.98 1331.42,1210.98 1332.01,1210.98 1332.6,1210.98 1333.18,1210.98 1333.77,1210.98 1334.35,1210.98 1334.94,1210.98 1335.53,1210.98 1336.11,1210.98 1336.7,1210.98 1337.29,1210.98 1337.87,1210.98 1338.46,1210.98 1339.05,1210.98 1339.63,1210.98 1340.22,1210.98 1340.8,1210.98 1341.39,1210.98 1341.98,1210.98 1342.56,1210.98 1343.15,1210.98 1343.74,1210.98 1344.32,1210.98 1344.91,1210.98 1345.5,1210.98 1346.08,1210.98 1346.67,1210.98 1347.26,1210.98 1347.84,1210.98 1348.43,1210.98 1349.01,1210.98 1349.6,1210.98 1350.19,1210.98 1350.77,1210.98 1351.36,1210.98 1351.95,1210.98 1352.53,1210.98 1353.12,1210.98 1353.71,1210.98 1354.29,1210.98 1354.88,1210.98 1355.47,1210.98 1356.05,1210.98 1356.64,1210.98 1357.22,1210.98 1357.81,1210.98 1358.4,1210.98 1358.98,1210.98 1359.57,1210.98 1360.16,1210.98 1360.74,1210.98 1361.33,1210.98 1361.92,1210.98 1362.5,1210.98 1363.09,1210.98 1363.68,1210.98 1364.26,1210.98 1364.85,1210.98 1365.43,1210.98 1366.02,1210.98 1366.61,1210.98 1367.19,1210.98 1367.78,1210.98 1368.37,1210.98 1368.95,1210.98 1369.54,1210.98 1370.13,1210.98 1370.71,1210.98 1371.3,1210.98 1371.88,1210.98 1372.47,1210.98 1373.06,1210.98 1373.64,1210.98 1374.23,1210.98 1374.82,1210.98 1375.4,1210.98 1375.99,1210.98 1376.58,1210.98 1377.16,1210.98 1377.75,1210.98 1378.34,1210.98 1378.92,1210.98 1379.51,1210.98 1380.09,1210.98 1380.68,1210.98 1381.27,1210.98 1381.85,1210.98 1382.44,1210.98 1383.03,1210.98 1383.61,1210.98 1384.2,1210.98 1384.79,1210.98 1385.37,1210.98 1385.96,1210.98 1386.55,1210.98 1387.13,1210.98 1387.72,1210.98 1388.3,1210.98 1388.89,1210.98 1389.48,1210.98 1390.06,1210.98 1390.65,1210.98 1391.24,1210.98 1391.82,1210.98 1392.41,1210.98 1393,1210.98 1393.58,1210.98 1394.17,1210.98 1394.75,1210.98 1395.34,1210.98 1395.93,1210.98 1396.51,1210.98 1397.1,1210.98 1397.69,1210.98 1398.27,1210.98 1398.86,1210.98 1399.45,1210.98 1400.03,1210.98 1400.62,1210.98 1401.21,1210.98 1401.79,1210.98 1402.38,1210.98 1402.96,1210.98 1403.55,1210.98 1404.14,1210.98 1404.72,1210.98 1405.31,1210.98 1405.9,1210.98 1406.48,1210.98 1407.07,1210.98 1407.66,1210.98 1408.24,1210.98 1408.83,1210.98 1409.42,1210.98 1410,1210.98 1410.59,1210.98 1411.17,1210.98 1411.76,1210.98 1412.35,1210.98 1412.93,1210.98 1413.52,1210.98 1414.11,1210.98 1414.69,1210.98 1415.28,1210.98 1415.87,1210.98 1416.45,1210.98 1417.04,1210.98 1417.63,1210.98 1418.21,1210.98 1418.8,1210.98 1419.38,1210.98 1419.97,1210.98 1420.56,1210.98 1421.14,1210.98 1421.73,1210.98 1422.32,1210.98 1422.9,1210.98 1423.49,1210.98 1424.08,1210.98 1424.66,1210.98 1425.25,1210.98 1425.83,1210.98 1426.42,1210.98 1427.01,1210.98 1427.59,1210.98 1428.18,1210.98 1428.77,1210.98 1429.35,1210.98 1429.94,1210.98 1430.53,1210.98 1431.11,1210.98 1431.7,1210.98 1432.29,1210.98 1432.87,1210.98 1433.46,1210.98 1434.04,1210.98 1434.63,1210.98 1435.22,1210.98 1435.8,1210.98 1436.39,1210.98 1436.98,1210.98 1437.56,1210.98 1438.15,1210.98 1438.74,1210.98 1439.32,1210.98 1439.91,1210.98 1440.5,1210.98 1441.08,1210.98 1441.67,1210.98 1442.25,1210.98 1442.84,1210.98 1443.43,1210.98 1444.01,1210.98 1444.6,1210.98 1445.19,1210.98 1445.77,1210.98 1446.36,1210.98 1446.95,1210.98 1447.53,1210.98 1448.12,1210.98 1448.7,1210.98 1449.29,1210.98 1449.88,1210.98 1450.46,1210.98 1451.05,1210.98 1451.64,1210.98 1452.22,1210.98 1452.81,1210.98 1453.4,1210.98 1453.98,1210.98 1454.57,1210.98 1455.16,1210.98 1455.74,1210.98 1456.33,1210.98 1456.91,1210.98 1457.5,1210.98 1458.09,1210.98 1458.67,1210.98 1459.26,1210.98 1459.85,1210.98 1460.43,1210.98 1461.02,1210.98 1461.61,1210.98 1462.19,1210.98 1462.78,1210.98 1463.37,1210.98 1463.95,1210.98 1464.54,1210.98 1465.12,1210.98 1465.71,1210.98 1466.3,1210.98 1466.88,1210.98 1467.47,1210.98 1468.06,1210.98 1468.64,1210.98 1469.23,1210.98 1469.82,1210.98 1470.4,1210.98 1470.99,1210.98 1471.57,1210.98 1472.16,1210.98 1472.75,1210.98 1473.33,1210.98 1473.92,1210.98 1474.51,1210.98 1475.09,1210.98 1475.68,1210.98 1476.27,1210.98 1476.85,1210.98 1477.44,1210.98 1478.03,1210.98 1478.61,1210.98 1479.2,1210.98 1479.78,1210.98 1480.37,1210.98 1480.96,1210.98 1481.54,1210.98 1482.13,1210.98 1482.72,1210.98 1483.3,1210.98 1483.89,1210.98 1484.48,1210.98 1485.06,1210.98 1485.65,1210.98 1486.24,1210.98 1486.82,1210.98 1487.41,1210.98 1487.99,1210.98 1488.58,1210.98 1489.17,1210.98 1489.75,1210.98 1490.34,1210.98 1490.93,1210.98 1491.51,1210.98 1492.1,1210.98 1492.69,1210.98 1493.27,1210.98 1493.86,1210.98 1494.45,1210.98 1495.03,1210.98 1495.62,1210.98 1496.2,1210.98 1496.79,1210.98 1497.38,1210.98 1497.96,1210.98 1498.55,1210.98 1499.14,1210.98 1499.72,1210.98 1500.31,1210.98 1500.9,1210.98 1501.48,1210.98 1502.07,1210.98 1502.65,1210.98 1503.24,1210.98 1503.83,1210.98 1504.41,1210.98 1505,1210.98 1505.59,1210.98 1506.17,1210.98 1506.76,1210.98 1507.35,1210.98 1507.93,1210.98 1508.52,1210.98 1509.11,1210.98 1509.69,1210.98 1510.28,1210.98 1510.86,1210.98 1511.45,1210.98 1512.04,1210.98 1512.62,1210.98 1513.21,1210.98 1513.8,1210.98 1514.38,1210.98 1514.97,1210.98 1515.56,1210.98 1516.14,1210.98 1516.73,1210.98 1517.32,1210.98 1517.9,1210.98 1518.49,1210.98 1519.07,1210.98 1519.66,1210.98 1520.25,1210.98 1520.83,1210.98 1521.42,1210.98 1522.01,1210.98 1522.59,1210.98 1523.18,1210.98 1523.77,1210.98 1524.35,1210.98 1524.94,1210.98 1525.52,1210.98 1526.11,1210.98 1526.7,1210.98 1527.28,1210.98 1527.87,1210.98 1528.46,1210.98 1529.04,1210.98 1529.63,1210.98 1530.22,1210.98 1530.8,1210.98 1531.39,1210.98 1531.98,1210.98 1532.56,1210.98 1533.15,1210.98 1533.73,1210.98 1534.32,1210.98 1534.91,1210.98 1535.49,1210.98 1536.08,1210.98 1536.67,1210.98 1537.25,1210.98 1537.84,1210.98 1538.43,1210.98 1539.01,1210.98 1539.6,1210.98 1540.19,1210.98 1540.77,1210.98 1541.36,1210.98 1541.94,1210.98 1542.53,1210.98 1543.12,1210.98 1543.7,1210.98 1544.29,1210.98 1544.88,1210.98 1545.46,1210.98 1546.05,1210.98 1546.64,1210.98 1547.22,1210.98 1547.81,1210.98 1548.4,1210.98 1548.98,1210.98 1549.57,1210.98 1550.15,1210.98 1550.74,1210.98 1551.33,1210.98 1551.91,1210.98 1552.5,1210.98 1553.09,1210.98 1553.67,1210.98 1554.26,1210.98 1554.85,1210.98 1555.43,1210.98 1556.02,1210.98 1556.6,1210.98 1557.19,1210.98 1557.78,1210.98 1558.36,1210.98 1558.95,1210.98 1559.54,1210.98 1560.12,1210.98 1560.71,1210.98 1561.3,1210.98 1561.88,1210.98 1562.47,1210.98 1563.06,1210.98 1563.64,1210.98 1564.23,1210.98 1564.81,1210.98 1565.4,1210.98 1565.99,1210.98 1566.57,1210.98 1567.16,1210.98 1567.75,1210.98 1568.33,1210.98 1568.92,1210.98 1569.51,1210.98 1570.09,1210.98 1570.68,1210.98 1571.27,1210.98 1571.85,1210.98 1572.44,1210.98 1573.02,1210.98 1573.61,1210.98 1574.2,1210.98 1574.78,1210.98 1575.37,1210.98 1575.96,1210.98 1576.54,1210.98 1577.13,1210.98 1577.72,1210.98 1578.3,1210.98 1578.89,1210.98 1579.47,1210.98 1580.06,1210.98 1580.65,1210.98 1581.23,1210.98 1581.82,1210.98 1582.41,1210.98 1582.99,1210.98 1583.58,1210.98 1584.17,1210.98 1584.75,1210.98 1585.34,1210.98 1585.93,1210.98 1586.51,1210.98 1587.1,1210.98 1587.68,1210.98 1588.27,1210.98 1588.86,1210.98 1589.44,1210.98 1590.03,1210.98 1590.62,1210.98 1591.2,1210.98 1591.79,1210.98 1592.38,1210.98 1592.96,1210.98 1593.55,1210.98 1594.14,1210.98 1594.72,1210.98 1595.31,1210.98 1595.89,1210.98 1596.48,1210.98 1597.07,1210.98 1597.65,1210.98 1598.24,1210.98 1598.83,1210.98 1599.41,1210.98 1600,1210.98 1600.59,1210.98 1601.17,1210.98 1601.76,1210.98 1602.34,1210.98 1602.93,1210.98 1603.52,1210.98 1604.1,1210.98 1604.69,1210.98 1605.28,1210.98 1605.86,1210.98 1606.45,1210.98 1607.04,1210.98 1607.62,1210.98 1608.21,1210.98 1608.8,1210.98 1609.38,1210.98 1609.97,1210.98 1610.55,1210.98 1611.14,1210.98 1611.73,1210.98 1612.31,1210.98 1612.9,1210.98 1613.49,1210.98 1614.07,1210.98 1614.66,1210.98 1615.25,1210.98 1615.83,1210.98 1616.42,1210.98 1617.01,1210.98 1617.59,1210.98 1618.18,1210.98 1618.76,1210.98 1619.35,1210.98 1619.94,1210.98 1620.52,1210.98 1621.11,1210.98 1621.7,1210.98 1622.28,1210.98 1622.87,1210.98 1623.46,1210.98 1624.04,1210.98 1624.63,1210.98 1625.22,1210.98 1625.8,1210.98 1626.39,1210.98 1626.97,1210.98 1627.56,1210.98 1628.15,1210.98 1628.73,1210.98 1629.32,1210.98 1629.91,1210.98 1630.49,1210.98 1631.08,1210.98 1631.67,1210.98 1632.25,1210.98 1632.84,1210.98 1633.42,1210.98 1634.01,1210.98 1634.6,1210.98 1635.18,1210.98 1635.77,1210.98 1636.36,1210.98 1636.94,1210.98 1637.53,1210.98 1638.12,1210.98 1638.7,1210.98 1639.29,1210.98 1639.88,1210.98 1640.46,1210.98 1641.05,1210.98 1641.63,1210.98 1642.22,1210.98 1642.81,1210.98 1643.39,1210.98 1643.98,1210.98 1644.57,1210.98 1645.15,1210.98 1645.74,1210.98 1646.33,1210.98 1646.91,1210.98 1647.5,1210.98 1648.09,1210.98 1648.67,1210.98 1649.26,1210.98 1649.84,1210.98 1650.43,1210.98 1651.02,1210.98 1651.6,1210.98 1652.19,1210.98 1652.78,1210.98 1653.36,1210.98 1653.95,1210.98 1654.54,1210.98 1655.12,1210.98 1655.71,1210.98 1656.29,1210.98 1656.88,1210.98 1657.47,1210.98 1658.05,1210.98 1658.64,1210.98 1659.23,1210.98 1659.81,1210.98 1660.4,1210.98 1660.99,1210.98 1661.57,1210.98 1662.16,1210.98 1662.75,1210.98 1663.33,1210.98 1663.92,1210.98 1664.5,1210.98 1665.09,1210.98 1665.68,1210.98 1666.26,1210.98 1666.85,1210.98 1667.44,1210.98 1668.02,1210.98 1668.61,1210.98 1669.2,1210.98 1669.78,1210.98 1670.37,1210.98 1670.96,1210.98 1671.54,1210.98 1672.13,1210.98 1672.71,1210.98 1673.3,1210.98 1673.89,1210.98 1674.47,1210.98 1675.06,1210.98 1675.65,1210.98 1676.23,1210.98 1676.82,1210.98 1677.41,1210.98 1677.99,1210.98 1678.58,1210.98 1679.17,1210.98 1679.75,1210.98 1680.34,1210.98 1680.92,1210.98 1681.51,1210.98 1682.1,1210.98 1682.68,1210.98 1683.27,1210.98 1683.86,1210.98 1684.44,1210.98 1685.03,1210.98 1685.62,1210.98 1686.2,1210.98 1686.79,1210.98 1687.37,1210.98 1687.96,1210.98 1688.55,1210.98 1689.13,1210.98 1689.72,1210.98 1690.31,1210.98 1690.89,1210.98 1691.48,1210.98 1692.07,1210.98 1692.65,1210.98 1693.24,1210.98 1693.83,1210.98 1694.41,1210.98 1695,1210.98 1695.58,1210.98 1696.17,1210.98 1696.76,1210.98 1697.34,1210.98 1697.93,1210.98 1698.52,1210.98 1699.1,1210.98 1699.69,1210.98 1700.28,1210.98 1700.86,1210.98 1701.45,1210.98 1702.04,1210.98 1702.62,1210.98 1703.21,1210.98 1703.79,1210.98 1704.38,1210.98 1704.97,1210.98 1705.55,1210.98 1706.14,1210.98 1706.73,1210.98 1707.31,1210.98 1707.9,1210.98 1708.49,1210.98 1709.07,1210.98 1709.66,1210.98 1710.24,1210.98 1710.83,1210.98 1711.42,1210.98 1712,1210.98 1712.59,1210.98 1713.18,1210.98 1713.76,1210.98 1714.35,1210.98 1714.94,1210.98 1715.52,1210.98 1716.11,1210.98 1716.7,1210.98 1717.28,1210.98 1717.87,1210.98 1718.45,1210.98 1719.04,1210.98 1719.63,1210.98 1720.21,1210.98 1720.8,1210.98 1721.39,1210.98 1721.97,1210.98 1722.56,1210.98 1723.15,1210.98 1723.73,1210.98 1724.32,1210.98 1724.91,1210.98 1725.49,1210.98 1726.08,1210.98 1726.66,1210.98 1727.25,1210.98 1727.84,1210.98 1728.42,1210.98 1729.01,1210.98 1729.6,1210.98 1730.18,1210.98 1730.77,1210.98 1731.36,1210.98 1731.94,1210.98 1732.53,1210.98 1733.11,1210.98 1733.7,1210.98 1734.29,1210.98 1734.87,1210.98 1735.46,1210.98 1736.05,1210.98 1736.63,1210.98 1737.22,1210.98 1737.81,1210.98 1738.39,1210.98 1738.98,1210.98 1739.57,1210.98 1740.15,1210.98 1740.74,1210.98 1741.32,1210.98 1741.91,1210.98 1742.5,1210.98 1743.08,1210.98 1743.67,1210.98 1744.26,1210.98 1744.84,1210.98 1745.43,1210.98 1746.02,1210.98 1746.6,1210.98 1747.19,1210.98 1747.78,1210.98 1748.36,1210.98 1748.95,1210.98 1749.53,1210.98 1750.12,1210.98 1750.71,1210.98 1751.29,1210.98 1751.88,1210.98 1752.47,1210.98 1753.05,1210.98 1753.64,1210.98 1754.23,1210.98 1754.81,1210.98 1755.4,1210.98 1755.99,1210.98 1756.57,1210.98 1757.16,1210.98 1757.74,1210.98 1758.33,1210.98 1758.92,1210.98 1759.5,1210.98 1760.09,1210.98 1760.68,1210.98 1761.26,1210.98 1761.85,1210.98 1762.44,1210.98 1763.02,1210.98 1763.61,1210.98 1764.19,1210.98 1764.78,1210.98 1765.37,1210.98 1765.95,1210.98 1766.54,1210.98 1767.13,1210.98 1767.71,1210.98 1768.3,1210.98 1768.89,1210.98 1769.47,1210.98 1770.06,1210.98 1770.65,1210.98 1771.23,1210.98 1771.82,1210.98 1772.4,1210.98 1772.99,1210.98 1773.58,1210.98 1774.16,1210.98 1774.75,1210.98 1775.34,1210.98 1775.92,1210.98 1776.51,1210.98 1777.1,1210.98 1777.68,1210.98 1778.27,1210.98 1778.86,1210.98 1779.44,1210.98 1780.03,1210.98 1780.61,1210.98 1781.2,1210.98 1781.79,1210.98 1782.37,1210.98 1782.96,1210.98 1783.55,1210.98 1784.13,1210.98 1784.72,1210.98 1785.31,1210.98 1785.89,1210.98 1786.48,1210.98 1787.06,1210.98 1787.65,1210.98 1788.24,1210.98 1788.82,1210.98 1789.41,1210.98 1790,1210.98 1790.58,1210.98 1791.17,1210.98 1791.76,1210.98 1792.34,1210.98 1792.93,1210.98 1793.52,1210.98 1794.1,1210.98 1794.69,1210.98 1795.27,1210.98 1795.86,1210.98 1796.45,1210.98 1797.03,1210.98 1797.62,1210.98 1798.21,1210.98 1798.79,1210.98 1799.38,1210.98 1799.97,1210.98 1800.55,1210.98 1801.14,1210.98 1801.73,1210.98 1802.31,1210.98 1802.9,1210.98 1803.48,1210.98 1804.07,1210.98 1804.66,1210.98 1805.24,1210.98 1805.83,1210.98 1806.42,1210.98 1807,1210.98 1807.59,1210.98 1808.18,1210.98 1808.76,1210.98 1809.35,1210.98 1809.94,1210.98 1810.52,1210.98 1811.11,1210.98 1811.69,1210.98 1812.28,1210.98 1812.87,1210.98 1813.45,1210.98 1814.04,1210.98 1814.63,1210.98 1815.21,1210.98 1815.8,1210.98 1816.39,1210.98 1816.97,1210.98 1817.56,1210.98 1818.14,1210.98 1818.73,1210.98 1819.32,1210.98 1819.9,1210.98 1820.49,1210.98 1821.08,1210.98 1821.66,1210.98 1822.25,1210.98 1822.84,1210.98 1823.42,1210.98 1824.01,1210.98 1824.6,1210.98 1825.18,1210.98 1825.77,1210.98 1826.35,1210.98 1826.94,1210.98 1827.53,1210.98 1828.11,1210.98 1828.7,1210.98 1829.29,1210.98 1829.87,1210.98 1830.46,1210.98 1831.05,1210.98 1831.63,1210.98 1832.22,1210.98 1832.81,1210.98 1833.39,1210.98 1833.98,1210.98 1834.56,1210.98 1835.15,1210.98 1835.74,1210.98 1836.32,1210.98 1836.91,1210.98 1837.5,1210.98 1838.08,1210.98 1838.67,1210.98 1839.26,1210.98 1839.84,1210.98 1840.43,1210.98 1841.01,1210.98 1841.6,1210.98 1842.19,1210.98 1842.77,1210.98 1843.36,1210.98 1843.95,1210.98 1844.53,1210.98 1845.12,1210.98 1845.71,1210.98 1846.29,1210.98 1846.88,1210.98 1847.47,1210.98 1848.05,1210.98 1848.64,1210.98 1849.22,1210.98 1849.81,1210.98 1850.4,1210.98 1850.98,1210.98 1851.57,1210.98 1852.16,1210.98 1852.74,1210.98 1853.33,1210.98 1853.92,1210.98 1854.5,1210.98 1855.09,1210.98 1855.68,1210.98 1856.26,1210.98 1856.85,1210.98 1857.43,1210.98 1858.02,1210.98 1858.61,1210.98 1859.19,1210.98 1859.78,1210.98 1860.37,1210.98 1860.95,1210.98 1861.54,1210.98 1862.13,1210.98 1862.71,1210.98 1863.3,1210.98 1863.88,1210.98 1864.47,1210.98 1865.06,1210.98 1865.64,1210.98 1866.23,1210.98 1866.82,1210.98 1867.4,1210.98 1867.99,1210.98 1868.58,1210.98 1869.16,1210.98 1869.75,1210.98 1870.34,1210.98 1870.92,1210.98 1871.51,1210.98 1872.09,1210.98 1872.68,1210.98 1873.27,1210.98 1873.85,1210.98 1874.44,1210.98 1875.03,1210.98 1875.61,1210.98 1876.2,1210.98 1876.79,1210.98 1877.37,1210.98 1877.96,1210.98 1878.55,1210.98 1879.13,1210.98 1879.72,1210.98 1880.3,1210.98 1880.89,1210.98 1881.48,1210.98 1882.06,1210.98 1882.65,1210.98 1883.24,1210.98 1883.82,1210.98 1884.41,1210.98 1885,1210.98 1885.58,1210.98 1886.17,1210.98 1886.76,1210.98 1887.34,1210.98 1887.93,1210.98 1888.51,1210.98 1889.1,1210.98 1889.69,1210.98 1890.27,1210.98 1890.86,1210.98 1891.45,1210.98 1892.03,1210.98 1892.62,1210.98 1893.21,1210.98 1893.79,1210.98 1894.38,1210.98 1894.96,1210.98 1895.55,1210.98 1896.14,1210.98 1896.72,1210.98 1897.31,1210.98 1897.9,1210.98 1898.48,1210.98 1899.07,1210.98 1899.66,1210.98 1900.24,1210.98 1900.83,1210.98 1901.42,1210.98 1902,1210.98 1902.59,1210.98 1903.17,1210.98 1903.76,1210.98 1904.35,1210.98 1904.93,1210.98 1905.52,1210.98 1906.11,1210.98 1906.69,1210.98 1907.28,1210.98 1907.87,1210.98 1908.45,1210.98 1909.04,1210.98 1909.63,1210.98 1910.21,1210.98 1910.8,1210.98 1911.38,1210.98 1911.97,1210.98 1912.56,1210.98 1913.14,1210.98 1913.73,1210.98 1914.32,1210.98 1914.9,1210.98 1915.49,1210.98 1916.08,1210.98 1916.66,1210.98 1917.25,1210.98 1917.83,1210.98 1918.42,1210.98 1919.01,1210.98 1919.59,1210.98 1920.18,1210.98 1920.77,1210.98 1921.35,1210.98 1921.94,1210.98 1922.53,1210.98 1923.11,1210.98 1923.7,1210.98 1924.29,1210.98 1924.87,1210.98 1925.46,1210.98 1926.04,1210.98 1926.63,1210.98 1927.22,1210.98 1927.8,1210.98 1928.39,1210.98 1928.98,1210.98 1929.56,1210.98 1930.15,1210.98 1930.74,1210.98 1931.32,1210.98 1931.91,1210.98 1932.5,1210.98 1933.08,1210.98 1933.67,1210.98 1934.25,1210.98 1934.84,1210.98 1935.43,1210.98 1936.01,1210.98 1936.6,1210.98 1937.19,1210.98 1937.77,1210.98 1938.36,1210.98 1938.95,1210.98 1939.53,1210.98 1940.12,1210.98 1940.71,1210.98 1941.29,1210.98 1941.88,1210.98 1942.46,1210.98 1943.05,1210.98 1943.64,1210.98 1944.22,1210.98 1944.81,1210.98 1945.4,1210.98 1945.98,1210.98 1946.57,1210.98 1947.16,1210.98 1947.74,1210.98 1948.33,1210.98 1948.91,1210.98 1949.5,1210.98 1950.09,1210.98 1950.67,1210.98 1951.26,1210.98 1951.85,1210.98 1952.43,1210.98 1953.02,1210.98 1953.61,1210.98 1954.19,1210.98 1954.78,1210.98 1955.37,1210.98 1955.95,1210.98 1956.54,1210.98 1957.12,1210.98 1957.71,1210.98 1958.3,1210.98 1958.88,1210.98 1959.47,1210.98 1960.06,1210.98 1960.64,1210.98 1961.23,1210.98 1961.82,1210.98 1962.4,1210.98 1962.99,1210.98 1963.58,1210.98 1964.16,1210.98 1964.75,1210.98 1965.33,1210.98 1965.92,1210.98 1966.51,1210.98 1967.09,1210.98 1967.68,1210.98 1968.27,1210.98 1968.85,1210.98 1969.44,1210.98 1970.03,1210.98 1970.61,1210.98 1971.2,1210.98 1971.78,1210.98 1972.37,1210.98 1972.96,1210.98 1973.54,1210.98 1974.13,1210.98 1974.72,1210.98 1975.3,1210.98 1975.89,1210.98 1976.48,1210.98 1977.06,1210.98 1977.65,1210.98 1978.24,1210.98 1978.82,1210.98 1979.41,1210.98 1979.99,1210.98 1980.58,1210.98 1981.17,1210.98 1981.75,1210.98 1982.34,1210.98 1982.93,1210.98 1983.51,1210.98 1984.1,1210.98 1984.69,1210.98 1985.27,1210.98 1985.86,1210.98 1986.45,1210.98 1987.03,1210.98 1987.62,1210.98 1988.2,1210.98 1988.79,1210.98 1989.38,1210.98 1989.96,1210.98 1990.55,1210.98 1991.14,1210.98 1991.72,1210.98 1992.31,1210.98 1992.9,1210.98 1993.48,1210.98 1994.07,1210.98 1994.65,1210.98 1995.24,1210.98 1995.83,1210.98 1996.41,1210.98 1997,1210.98 1997.59,1210.98 1998.17,1210.98 1998.76,1210.98 1999.35,1210.98 1999.93,1210.98 2000.52,1210.98 2001.11,1210.98 2001.69,1210.98 2002.28,1210.98 2002.86,1210.98 2003.45,1210.98 2004.04,1210.98 2004.62,1210.98 2005.21,1210.98 2005.8,1210.98 2006.38,1210.98 2006.97,1210.98 2007.56,1210.98 2008.14,1210.98 2008.73,1210.98 2009.32,1210.98 2009.9,1210.98 2010.49,1210.98 2011.07,1210.98 2011.66,1210.98 2012.25,1210.98 2012.83,1210.98 2013.42,1210.98 2014.01,1210.98 2014.59,1210.98 2015.18,1210.98 2015.77,1210.98 2016.35,1210.98 2016.94,1210.98 2017.53,1210.98 2018.11,1210.98 2018.7,1210.98 2019.28,1210.98 2019.87,1210.98 2020.46,1210.98 2021.04,1210.98 2021.63,1210.98 2022.22,1210.98 2022.8,1210.98 2023.39,1210.98 2023.98,1210.98 2024.56,1210.98 2025.15,1210.98 2025.73,1210.98 2026.32,1210.98 2026.91,1210.98 2027.49,1210.98 2028.08,1210.98 2028.67,1210.98 2029.25,1210.98 2029.84,1210.98 2030.43,1210.98 2031.01,1210.98 2031.6,1210.98 2032.19,1210.98 2032.77,1210.98 2033.36,1210.98 2033.94,1210.98 2034.53,1210.98 2035.12,1210.98 2035.7,1210.98 2036.29,1210.98 2036.88,1210.98 2037.46,1210.98 2038.05,1210.98 2038.64,1210.98 2039.22,1210.98 2039.81,1210.98 2040.4,1210.98 2040.98,1210.98 2041.57,1210.98 2042.15,1210.98 2042.74,1210.98 2043.33,1210.98 2043.91,1210.98 2044.5,1210.98 2045.09,1210.98 2045.67,1210.98 2046.26,1210.98 2046.85,1210.98 2047.43,1210.98 2048.02,1210.98 2048.6,1210.98 2049.19,1210.98 2049.78,1210.98 2050.36,1210.98 2050.95,1210.98 2051.54,1210.98 2052.12,1210.98 2052.71,1210.98 2053.3,1210.98 2053.88,1210.98 2054.47,1210.98 2055.06,1210.98 2055.64,1210.98 2056.23,1210.98 2056.81,1210.98 2057.4,1210.98 2057.99,1210.98 2058.57,1210.98 2059.16,1210.98 2059.75,1210.98 2060.33,1210.98 2060.92,1210.98 2061.51,1210.98 2062.09,1210.98 2062.68,1210.98 2063.27,1210.98 2063.85,1210.98 2064.44,1210.98 2065.02,1210.98 2065.61,1210.98 2066.2,1210.98 2066.78,1210.98 2067.37,1210.98 2067.96,1210.98 2068.54,1210.98 2069.13,1210.98 2069.72,1210.98 2070.3,1210.98 2070.89,1210.98 2071.48,1210.98 2072.06,1210.98 2072.65,1210.98 2073.23,1210.98 2073.82,1210.98 2074.41,1210.98 2074.99,1210.98 2075.58,1210.98 2076.17,1210.98 2076.75,1210.98 2077.34,1210.98 2077.93,1210.98 2078.51,1210.98 2079.1,1210.98 2079.68,1210.98 2080.27,1210.98 2080.86,1210.98 2081.44,1210.98 2082.03,1210.98 2082.62,1210.98 2083.2,1210.98 2083.79,1210.98 2084.38,1210.98 2084.96,1210.98 2085.55,1210.98 2086.14,1210.98 2086.72,1210.98 2087.31,1210.98 2087.89,1210.98 2088.48,1210.98 2089.07,1210.98 2089.65,1210.98 2090.24,1210.98 2090.83,1210.98 2091.41,1210.98 2092,1210.98 2092.59,1210.98 2093.17,1210.98 2093.76,1210.98 2094.35,1210.98 2094.93,1210.98 2095.52,1210.98 2096.1,1210.98 2096.69,1210.98 2097.28,1210.98 2097.86,1210.98 2098.45,1210.98 2099.04,1210.98 2099.62,1210.98 2100.21,1210.98 2100.8,1210.98 2101.38,1210.98 2101.97,1210.98 2102.55,1210.98 2103.14,1210.98 2103.73,1210.98 2104.31,1210.98 2104.9,1210.98 2105.49,1210.98 2106.07,1210.98 2106.66,1210.98 2107.25,1210.98 2107.83,1210.98 2108.42,1210.98 2109.01,1210.98 2109.59,1210.98 2110.18,1210.98 2110.76,1210.98 2111.35,1210.98 2111.94,1210.98 2112.52,1210.98 2113.11,1210.98 2113.7,1210.98 2114.28,1210.98 2114.87,1210.98 2115.46,1210.98 2116.04,1210.98 2116.63,1210.98 2117.22,1210.98 2117.8,1210.98 2118.39,1210.98 2118.97,1210.98 2119.56,1210.98 2120.15,1210.98 2120.73,1210.98 2121.32,1210.98 2121.91,1210.98 2122.49,1210.98 2123.08,1210.98 2123.67,1210.98 2124.25,1210.98 2124.84,1210.98 2125.42,1210.98 2126.01,1210.98 2126.6,1210.98 2127.18,1210.98 2127.77,1210.98 2128.36,1210.98 2128.94,1210.98 2129.53,1210.98 2130.12,1210.98 2130.7,1210.98 2131.29,1210.98 2131.88,1210.98 2132.46,1210.98 2133.05,1210.98 2133.63,1210.98 2134.22,1210.98 2134.81,1210.98 2135.39,1210.98 2135.98,1210.98 2136.57,1210.98 2137.15,1210.98 2137.74,1210.98 2138.33,1210.98 2138.91,1210.98 2139.5,1210.98 2140.09,1210.98 2140.67,1210.98 2141.26,1210.98 2141.84,1210.98 2142.43,1210.98 2143.02,1210.98 2143.6,1210.98 2144.19,1210.98 2144.78,1210.98 2145.36,1210.98 2145.95,1210.98 2146.54,1210.98 2147.12,1210.98 2147.71,1210.98 2148.3,1210.98 2148.88,1210.98 2149.47,1210.98 2150.05,1210.98 2150.64,1210.98 2151.23,1210.98 2151.81,1210.98 2152.4,1210.98 2152.99,1210.98 2153.57,1210.98 2154.16,1210.98 2154.75,1210.98 2155.33,1210.98 2155.92,1210.98 2156.5,1210.98 2157.09,1210.98 2157.68,1210.98 2158.26,1210.98 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.47,1191.98 1399.65,899.083 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.55 985.439,1191.98 2158.26,1191.98 2158.26,1229.55 985.439,1229.55 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip993\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip993)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2789.22 162.673,-3987.6 163.232,-5085.43 163.792,-6068.58 164.351,-6965.19 164.91,-6585.28 165.469,-6313.8 166.029,-7151.37 166.588,-6900.97 167.147,-7609.65 167.706,-8251.51 168.266,-8008.05 168.825,-8552.04 169.384,-9016.7 169.943,-8773.11 170.503,-9227.17 171.062,-9616.04 171.621,-9962.19 172.18,-10279 172.74,-10015.8 173.299,-10276 173.858,-10043 174.417,-10242.4 174.977,-10420.6 175.536,-10563.6 176.095,-10679.1 176.655,-10772.5 177.214,-10842.3 177.773,-10589.2 178.332,-10629.9 178.892,-10369.9 179.451,-10380.2 180.01,-10150.9 180.569,-10144 181.129,-9917.63 181.688,-9880.4 182.247,-9643 182.806,-9586.35 183.366,-9358.41 183.925,-8962.72 184.484,-8448.75 185.043,-8367.45 185.603,-8270.76 186.162,-8055.71 186.721,-7838.5 187.28,-7520.39 187.84,-7333.83 188.399,-7034.17 188.958,-6845.87 189.517,-6674.65 190.077,-6596.29 190.636,-6429.91 191.195,-6350.47 191.754,-6186.97 192.314,-6099.18 192.873,-6006.58 193.432,-5842.46 193.991,-5682.9 194.551,-5521.95 195.11,-5362.07 195.669,-5149.95 196.228,-4950.41 196.788,-4864.54 197.347,-4778.29 197.906,-4636.16 198.465,-4498.21 199.025,-4412.97 199.584,-4322.5 200.143,-4190.11 200.702,-4098.42 201.262,-3834.08 201.821,-3667.47 202.38,-3508.61 202.939,-3356.43 203.499,-3245.44 204.058,-3140.7 204.617,-3072.53 205.176,-2931.42 205.736,-2791.98 206.295,-2624.61 206.854,-2527.88 207.413,-2432.16 207.973,-2372.27 208.532,-2249.8 209.091,-2160.25 209.65,-2071.29 210.21,-1987.55 210.769,-1818.39 211.328,-1709.97 211.887,-1662.72 212.447,-1529.09 213.006,-1449.88 213.565,-1375 214.124,-1270.73 214.684,-1146.18 215.243,-1053.82 215.802,-1012.78 216.361,-971.991 216.921,-887.742 217.48,-773.823 218.039,-641.644 218.598,-567.05 219.158,-515.269 219.717,-488.685 220.276,-462.125 220.835,-412.445 221.395,-387.191 221.954,-250.522 222.513,-203.977 223.072,-162.034 223.632,-118.088 224.191,-95.6696 224.75,-7.64558 225.309,31.2957 225.869,50.5198 226.428,89.7612 226.987,166.108 227.546,200.072 228.106,276.177 228.665,305.652 229.224,290.698 229.783,340.231 230.343,348.981 230.902,397.053 231.461,420.282 232.02,487.799 232.58,488.707 233.139,510.564 233.698,517.025 234.257,536.89 234.817,595.295 235.376,618.3 235.935,620.362 236.494,622.404 237.054,644.419 237.613,645.027 238.172,688.042 238.731,684.72 239.291,701.01 239.85,702.433 240.409,739.357 240.968,738.972 241.528,755.713 242.087,758.348 242.646,797.026 243.205,791.245 243.765,846.231 244.324,858.56 244.883,874.234 245.442,902.122 246.002,912.437 246.561,923.65 247.12,936.61 247.679,945.051 248.239,919.88 248.798,897.557 249.357,909.265 249.916,973.878 250.476,965.291 251.035,959.709 251.594,970.638 252.153,947.654 252.713,940.431 253.272,915.276 253.831,911.719 254.39,941.77 254.95,902.884 255.509,903.461 256.068,898.621 256.627,899.101 257.187,899.803 257.746,915.919 258.305,930.609 258.864,975.901 259.424,950.159 259.983,930.327 260.542,912.973 261.101,947.334 261.661,947.916 262.22,946.312 262.779,944.571 263.338,960.861 263.898,976.254 264.457,1006.49 265.016,1001.74 265.575,1029.72 266.135,1007.89 266.694,1004.19 267.253,964.881 267.812,1027.87 268.372,1039.16 268.931,1069.15 269.49,1095.47 270.049,1102.62 270.609,1143 271.168,1130.68 271.727,1137.74 272.286,1089.36 272.846,1063.14 273.405,1022.6 273.964,1015.1 274.523,1009.48 275.083,1057.04 275.642,1065.55 276.201,1059.97 276.76,1082.36 277.32,1056.11 277.879,1046.81 278.438,1042.75 278.997,1018.82 279.557,995.525 280.116,1005.2 280.675,1002.33 281.234,1018.49 281.794,1012.59 282.353,1044.2 282.912,1054 283.471,1047.56 284.031,1058.76 284.59,1051.9 285.149,1077.46 285.708,1039.92 286.268,999.155 286.827,995.941 287.386,1011.62 287.945,972.742 288.505,991.989 289.064,1004.54 289.623,1035.65 290.182,1044.77 290.742,1071.87 291.301,1082.72 291.86,1072.17 292.419,1045.71 292.979,1054.75 293.538,1061.5 294.097,1070.85 294.656,1066.01 295.216,1060.17 295.775,1069.08 296.334,1043.72 296.893,1050.58 297.453,1076.09 298.012,1067.11 298.571,1059.64 299.13,1069.68 299.69,994.183 300.249,988.258 300.808,995.897 301.368,994.011 301.927,988.836 302.486,966.629 303.045,977.127 303.605,974.297 304.164,1017.71 304.723,1026.66 305.282,990.416 305.842,986.585 306.401,980.963 306.96,958.347 307.519,972.064 308.079,985.452 308.638,1010.67 309.197,1001.98 309.756,1010.51 310.316,1034.43 310.875,1026.51 311.434,1032.82 311.993,1038.13 312.553,1031.9 313.112,1026.43 313.671,1070.07 314.23,1045.36 314.79,1053.11 315.349,1011.91 315.908,1006.45 316.467,1027.97 317.027,1050.52 317.586,1056.13 318.145,1031.42 318.704,1020.49 319.264,1047.35 319.823,1020.14 320.382,1013.91 320.941,989.344 321.501,982.431 322.06,1021.48 322.619,1000.65 323.178,977.405 323.738,985.824 324.297,1011.18 324.856,1005.81 325.415,1011.47 325.975,988.352 326.534,1014.06 327.093,1004.37 327.652,996.515 328.212,973.162 328.771,969.529 329.33,978.181 329.889,973.128 330.449,967.461 331.008,975.465 331.567,1016.22 332.126,975.355 332.686,1000.05 333.245,972.925 333.804,998.034 334.363,1003.6 334.923,980.486 335.482,987.116 336.041,950.762 336.6,914.025 337.16,943.328 337.719,937.091 338.278,914.406 338.837,896.627 339.397,862.097 339.956,875.014 340.515,869.718 341.074,886.535 341.634,871.406 342.193,851.801 342.752,868.326 343.311,803.843 343.871,822.135 344.43,805.902 344.989,838.94 345.548,857.716 346.108,873.639 346.667,855.377 347.226,854.392 347.785,855.203 348.345,839.302 348.904,870.992 349.463,886.688 350.022,885.817 350.582,880.804 351.141,908.747 351.7,900.417 352.259,909.261 352.819,855.484 353.378,851.136 353.937,849.309 354.496,834.247 355.056,834.812 355.615,750.34 356.174,819.624 356.733,850.101 357.293,846.032 357.852,825.823 358.411,808.099 358.97,793.721 359.53,764.848 360.089,736.464 360.648,739.089 361.207,777.019 361.767,778.431 362.326,782.207 362.885,817.448 363.444,848.101 364.004,864.936 364.563,880.28 365.122,860.284 365.681,823.193 366.241,822.985 366.8,804.358 367.359,819.549 367.918,817.847 368.478,799.871 369.037,801.499 369.596,784.723 370.155,783.357 370.715,802.881 371.274,806.267 371.833,773.167 372.392,759.001 372.952,760.818 373.511,730.927 374.07,770.933 374.629,772.227 375.189,776.704 375.748,794.67 376.307,801.279 376.866,784.162 377.426,802.555 377.985,817.346 378.544,832.862 379.103,847.341 379.663,827.359 380.222,827.333 380.781,826.019 381.34,825.821 381.9,826.992 382.459,827.567 383.018,855.103 383.577,883.346 384.137,880.066 384.696,875.956 385.255,857.294 385.814,869.332 386.374,861.494 386.933,874.095 387.492,903.651 388.051,910.808 388.611,903.67 389.17,931.335 389.729,938.198 390.288,932.344 390.848,922.35 391.407,912.805 391.966,889.913 392.525,884.636 393.085,877.284 393.644,904.889 394.203,934.451 394.762,923.791 395.322,916.093 395.881,907.33 396.44,881.512 396.999,876.457 397.559,858.641 398.118,841.58 398.677,853.167 399.236,907.38 399.796,918.091 400.355,908.51 400.914,866.495 401.473,832.684 402.033,830.4 402.592,826.724 403.151,820.1 403.71,833.582 404.27,814.311 404.829,829.983 405.388,841.218 405.947,835.713 406.507,833.261 407.066,830.147 407.625,858.84 408.184,856.823 408.744,850.815 409.303,861.001 409.862,871.418 410.421,848.257 410.981,842.323 411.54,841.242 412.099,856.321 412.658,851.615 413.218,832.28 413.777,828.098 414.336,841.942 414.895,840.736 415.455,834.26 416.014,861.465 416.573,887.826 417.132,862.705 417.692,855.938 418.251,866.934 418.81,860.072 419.369,871.912 419.929,896.9 420.488,876.704 421.047,903.192 421.606,913.339 422.166,901.481 422.725,909.505 423.284,916.534 423.843,874.322 424.403,848.161 424.962,874.824 425.521,835.009 426.08,812.325 426.64,776.627 427.199,758.39 427.758,792.557 428.318,773.319 428.877,772.915 429.436,801.916 429.995,783.179 430.555,798.321 431.114,810.86 431.673,843.709 432.232,853.967 432.792,897.024 433.351,890.848 433.91,853.3 434.469,847.604 435.029,840.552 435.588,836.123 436.147,812.821 436.706,777.227 437.266,777.471 437.825,774.555 438.384,774.913 438.943,790.937 439.503,789.509 440.062,804.229 440.621,801.878 441.18,829.267 441.74,774.762 442.299,772.996 442.858,772.473 443.417,769.946 443.977,768.319 444.536,783.514 445.095,781.147 445.654,794.715 446.214,776.922 446.773,793.716 447.332,793.282 447.891,806.431 448.451,805.016 449.01,818.92 449.569,815.878 450.128,814.374 450.688,811.544 451.247,842.679 451.806,808.767 452.365,790.593 452.925,755.318 453.484,769.735 454.043,781.249 454.602,808.739 455.162,772.091 455.721,801.661 456.28,794.238 456.839,789.513 457.399,773.656 457.958,769.287 458.517,783.455 459.076,782.718 459.636,793.003 460.195,806.1 460.754,801.043 461.313,782.287 461.873,796.547 462.432,791.962 462.991,772.641 463.55,787.995 464.11,802.513 464.669,768.822 465.228,769.605 465.787,732.52 466.347,712.579 466.906,760.759 467.465,764.073 468.024,749.47 468.584,782.047 469.143,779.66 469.702,778.019 470.261,790.836 470.821,788.256 471.38,766.175 471.939,781.109 472.498,764.023 473.058,765.533 473.617,782.02 474.176,778.738 474.735,757.822 475.295,773.235 475.854,789.35 476.413,804.841 476.972,785.163 477.532,781.378 478.091,777.451 478.65,776.051 479.209,823.24 479.769,838.364 480.328,802.04 480.887,814.668 481.446,827.46 482.006,808.995 482.565,805.587 483.124,815.743 483.683,827.989 484.243,809.437 484.802,806.99 485.361,802.589 485.92,735.847 486.48,735.889 487.039,716.532 487.598,718.463 488.157,720.71 488.717,702.647 489.276,670.188 489.835,674.117 490.394,644.193 490.954,666.695 491.513,702.098 492.072,685.926 492.631,738.741 493.191,738.504 493.75,708.153 494.309,741.993 494.868,774.003 495.428,786.896 495.987,796.716 496.546,812.353 497.105,809.951 497.665,821.028 498.224,784.029 498.783,794.138 499.342,808.369 499.902,755.936 500.461,789.11 501.02,753.288 501.579,739.106 502.139,709.386 502.698,742.775 503.257,726.225 503.816,725.382 504.376,745.976 504.935,728.791 505.494,729.78 506.053,712.11 506.613,711.391 507.172,747.764 507.731,732.855 508.29,753.85 508.85,771.355 509.409,785.28 509.968,782.759 510.527,782.403 511.087,811.794 511.646,762.145 512.205,760.663 512.764,744.258 513.324,777.873 513.883,777.71 514.442,743.825 515.001,759.593 515.561,777.608 516.12,794.596 516.679,778.48 517.238,791.829 517.798,773.591 518.357,804.97 518.916,812.45 519.475,795.106 520.035,825.484 520.594,789.059 521.153,768.612 521.712,768.306 522.272,765.328 522.831,781.934 523.39,812.355 523.949,804.546 524.509,784.008 525.068,779.811 525.627,763.171 526.186,713.448 526.746,728.362 527.305,747.606 527.864,728.868 528.423,727.028 528.983,744.22 529.542,775.573 530.101,758.33 530.66,757.703 531.22,722.276 531.779,725.907 532.338,743.033 532.897,724.862 533.457,675.017 534.016,690.824 534.575,723.527 535.134,752.444 535.694,716.847 536.253,699.184 536.812,668.348 537.371,672.262 537.931,642.729 538.49,662.082 539.049,662.344 539.608,663.828 540.168,680.709 540.727,697.64 541.286,651.376 541.845,669.427 542.405,688.238 542.964,722.051 543.523,706.48 544.082,708.981 544.642,727.015 545.201,759.133 545.76,741.861 546.319,710.361 546.879,713.912 547.438,664.167 547.997,683.165 548.556,717.996 549.116,768.899 549.675,718.01 550.234,698.911 550.793,717.769 551.353,698.619 551.912,684.311 552.471,671.003 553.031,641.801 553.59,676.09 554.149,694.354 554.708,690.433 555.268,705.141 555.827,686.645 556.386,691.391 556.945,692.683 557.505,712.56 558.064,699.939 558.623,716.729 559.182,670.843 559.742,719.717 560.301,702.008 560.86,685.611 561.419,688.804 561.979,693.413 562.538,724.868 563.097,707.316 563.656,757.008 564.216,755.395 564.775,721.058 565.334,722.889 565.893,717.633 566.453,687.344 567.012,621.534 567.571,677.412 568.13,647.669 568.69,650.636 569.249,604.825 569.808,612.77 570.367,637.108 570.927,674.88 571.486,691.073 572.045,753.615 572.604,671.334 573.164,657.811 573.723,639.384 574.282,627.122 574.841,601.519 575.401,605.047 575.96,614.74 576.519,606.915 577.078,616.764 577.638,608.163 578.197,615.706 578.756,620.584 579.315,628.364 579.875,633.656 580.434,640.513 580.993,629.381 581.552,619.329 582.112,588.865 582.671,575.867 583.23,582.196 583.789,589.505 584.349,597.56 584.908,653.972 585.467,657.564 586.026,677.224 586.586,713.841 587.145,713.57 587.704,732.691 588.263,746.68 588.823,812.804 589.382,802.553 589.941,782.505 590.5,792.751 591.06,757.648 591.619,773.636 592.178,754.316 592.737,751.038 593.297,749.256 593.856,744.53 594.415,758.326 594.974,755.59 595.534,735.711 596.093,736.035 596.652,747.92 597.211,744.896 597.771,728.182 598.33,775.201 598.889,801.299 599.448,778.683 600.008,776.171 600.567,759.728 601.126,774.531 601.685,753.607 602.245,750.835 602.804,716.152 603.363,715.656 603.922,714.828 604.482,730.733 605.041,743.721 605.6,741.795 606.159,787.311 606.719,798.16 607.278,774.297 607.837,767.641 608.396,747.377 608.956,728.234 609.515,727.404 610.074,740.078 610.633,724.454 611.193,708.706 611.752,709.48 612.311,741.312 612.87,721.041 613.43,737.758 613.989,718.87 614.548,752.054 615.107,734.522 615.667,747.716 616.226,725.799 616.785,740.163 617.344,723.453 617.904,723.386 618.463,733.741 619.022,746.133 619.581,707.11 620.141,674.831 620.7,641.017 621.259,660.303 621.818,710.611 622.378,739.113 622.937,719.294 623.496,751.853 624.055,734.889 624.615,735.263 625.174,713.942 625.733,709.877 626.292,642.65 626.852,664.35 627.411,680.785 627.97,697.068 628.529,729.761 629.089,744.367 629.648,757.514 630.207,751.401 630.766,795.863 631.326,776.348 631.885,754.55 632.444,740.5 633.003,737.875 633.563,737.331 634.122,733.344 634.681,712.933 635.24,694.512 635.8,628.432 636.359,632.657 636.918,640.086 637.477,657.755 638.037,675.463 638.596,692.057 639.155,676.704 639.714,710.903 640.274,757.46 640.833,752.875 641.392,750.036 641.951,753.012 642.511,748.374 643.07,714.374 643.629,699.738 644.188,700.808 644.748,685.697 645.307,653.053 645.866,638.816 646.425,640.285 646.985,646.187 647.544,665.645 648.103,681.135 648.662,683.857 649.222,667.712 649.781,700.873 650.34,685.294 650.899,668.071 651.459,635.809 652.018,640.217 652.577,627.129 653.136,633.412 653.696,637.739 654.255,607.19 654.814,644.223 655.373,645.57 655.933,670.182 656.492,671.772 657.051,673.738 657.61,723.97 658.17,702.448 658.729,702.407 659.288,687.803 659.847,687.987 660.407,655.706 660.966,659.909 661.525,661.097 662.084,663.081 662.644,650.889 663.203,651.238 663.762,655.344 664.321,676.149 664.881,708.433 665.44,738.568 665.999,769.149 666.558,783.481 667.118,747.379 667.677,779.832 668.236,757.556 668.795,740.391 669.355,724.419 669.914,722.073 670.473,736.463 671.032,783.284 671.592,747.374 672.151,744.186 672.71,729.931 673.269,728.429 673.829,755.816 674.388,740.282 674.947,721.679 675.506,721.777 676.066,686.259 676.625,670.708 677.184,670.811 677.743,656.432 678.303,656.605 678.862,642.026 679.421,660.617 679.981,663.705 680.54,666.211 681.099,636.11 681.658,638.986 682.218,649.137 682.777,620.713 683.336,608.517 683.895,608.505 684.455,613.961 685.014,617.798 685.573,602.945 686.132,638.839 686.692,674.201 687.251,689.884 687.81,676.647 688.369,676.417 688.929,679.524 689.488,694.734 690.047,695.958 690.606,726.704 691.166,737.724 691.725,701.405 692.284,715.583 692.843,713.1 693.403,709.464 693.962,723.907 694.521,691.163 695.08,678.617 695.64,645.051 696.199,648.629 696.758,666.962 697.317,656.63 697.877,674.675 698.436,657.717 698.995,661.382 699.554,662.633 700.114,696.867 700.673,682.152 701.232,672.484 701.791,659.465 702.351,641.734 702.91,667.856 703.469,715.905 704.028,686.251 704.588,654.126 705.147,655.775 705.706,626.586 706.265,633.809 706.825,635.981 707.384,638.162 707.943,658.27 708.502,660.017 709.062,661.577 709.621,693.955 710.18,664.303 710.739,652.345 711.299,638.914 711.858,641.429 712.417,628.761 712.976,603.234 713.536,659.794 714.095,664.199 714.654,697.373 715.213,716.395 715.773,745.501 716.332,741.774 716.891,788.713 717.45,782.949 718.01,778.179 718.569,776.917 719.128,757.986 719.687,739.132 720.247,721.012 720.806,718.672 721.365,732.337 721.924,710.445 722.484,709.153 723.043,695.286 723.602,677.331 724.161,693.327 724.721,710.891 725.28,713.054 725.839,714.637 726.398,727.255 726.958,708.423 727.517,724.203 728.076,741.782 728.635,740.91 729.195,739.323 729.754,737.107 730.313,749.741 730.872,774.893 731.432,773.44 731.991,801.149 732.55,779.609 733.109,805.054 733.669,785.557 734.228,750.929 734.787,717.75 735.346,698.955 735.906,715.917 736.465,712.195 737.024,728.821 737.583,728.765 738.143,709.996 738.702,628.033 739.261,626.896 739.82,644.673 740.38,694.939 740.939,675.465 741.498,656.772 742.057,657.636 742.617,657.518 743.176,674.401 743.735,643.118 744.294,628.534 744.854,633.623 745.413,625.929 745.972,624.643 746.531,628.467 747.091,598.276 747.65,602.681 748.209,622.744 748.768,626.37 749.328,610.525 749.887,600.963 750.446,607.844 751.005,627.245 751.565,665.746 752.124,653.082 752.683,668.615 753.242,670.968 753.802,670.624 754.361,656.486 754.92,625.83 755.479,661.557 756.039,667.31 756.598,701.51 757.157,730.412 757.716,726.978 758.276,738.746 758.835,730.807 759.394,760.604 759.953,775.766 760.513,721.523 761.072,718.715 761.631,717.287 762.19,702.53 762.75,697.66 763.309,682.181 763.868,697.404 764.427,681.966 764.987,654.351 765.546,655.213 766.105,658.016 766.664,660.421 767.224,662.618 767.783,712.095 768.342,725.254 768.901,723.67 769.461,739.775 770.02,720.586 770.579,734.663 771.138,712.011 771.698,692.33 772.257,719.511 772.816,717.181 773.375,698.775 773.935,712.002 774.494,726.393 775.053,691.951 775.612,674.46 776.172,673.571 776.731,680.647 777.29,666.311 777.849,638.006 778.409,625.822 778.968,661.485 779.527,665.088 780.086,682.188 780.646,682.308 781.205,671.461 781.764,711.618 782.323,696.739 782.883,694.495 783.442,677.496 784.001,692.251 784.56,707.481 785.12,693.055 785.679,679.495 786.238,697.714 786.797,699.171 787.357,712.318 787.916,728.321 788.475,724.504 789.034,721.859 789.594,705.553 790.153,687.9 790.712,672.728 791.271,691.622 791.831,722.627 792.39,719.503 792.949,700.264 793.508,681.132 794.068,663.987 794.627,600.941 795.186,586.036 795.745,605.391 796.305,623.932 796.864,657.555 797.423,658.797 797.982,664.03 798.542,663.567 799.101,696.144 799.66,680.315 800.219,682.651 800.779,700.162 801.338,698.567 801.897,743.711 802.456,758.222 803.016,768.575 803.575,778.11 804.134,741.021 804.693,739.026 805.253,718.331 805.812,738.713 806.371,755.421 806.931,765.73 807.49,792.291 808.049,785.483 808.608,781.743 809.168,760.107 809.727,723.856 810.286,734.404 810.845,745.342 811.405,721.196 811.964,750.037 812.523,765.99 813.082,761.745 813.642,757.733 814.201,726.436 814.76,722.422 815.319,721.042 815.879,704.375 816.438,720.655 816.997,734.607 817.556,733.169 818.116,730.659 818.675,711.204 819.234,707.624 819.793,673.962 820.353,675.427 820.912,660.459 821.471,713.623 822.03,696.848 822.59,664.277 823.149,682.978 823.708,682.481 824.267,681.647 824.827,682.329 825.386,650.286 825.945,667.145 826.504,648.964 827.064,667.602 827.623,667.83 828.182,670.507 828.741,656.743 829.301,641.569 829.86,677.705 830.419,712.178 830.978,678.284 831.538,678.168 832.097,676.611 832.656,678.458 833.215,727.971 833.775,692.116 834.334,724.805 834.893,691.746 835.452,712.799 836.012,727.576 836.571,722.036 837.13,719.999 837.689,703.332 838.249,706.889 838.808,735.327 839.367,719.86 839.926,719.848 840.486,718.332 841.045,717.707 841.604,731.266 842.163,729.736 842.723,730.049 843.282,744.406 843.841,742.441 844.4,754.891 844.96,719.336 845.519,714.231 846.078,731.038 846.637,711.886 847.197,729.43 847.756,729.15 848.315,776.461 848.874,772.462 849.434,769.694 849.993,768.739 850.552,747.321 851.111,743.525 851.671,742.643 852.23,739.167 852.789,723.401 853.348,738.899 853.908,766.979 854.467,764.833 855.026,741.577 855.585,725.002 856.145,740.159 856.704,765.555 857.263,734.631 857.822,734.074 858.382,703.621 858.941,668.745 859.5,639.786 860.059,656.626 860.619,643.31 861.178,645.814 861.737,650.194 862.296,669.333 862.856,650.472 863.415,653.761 863.974,672.688 864.533,690.762 865.093,674.123 865.652,656.727 866.211,675.945 866.77,677.112 867.33,682.771 867.889,716.264 868.448,731.219 869.007,746.503 869.567,708.168 870.126,656.661 870.685,661.971 871.244,644.823 871.804,660.351 872.363,663.998 872.922,668.138 873.481,637.711 874.041,641.425 874.6,628.745 875.159,605.088 875.718,579.413 876.278,618.101 876.837,607.96 877.396,595.068 877.955,612.163 878.515,617.233 879.074,623.352 879.633,625.884 880.192,643.492 880.752,660.536 881.311,629.6 881.87,648.782 882.429,652.686 882.989,687.241 883.548,672.055 884.107,720.725 884.666,719.643 885.226,699.086 885.785,727.965 886.344,661.158 886.903,663.915 887.463,666.134 888.022,615.763 888.581,635.019 889.14,638.583 889.7,623.597 890.259,613.223 890.818,601.39 891.377,605.093 891.937,610.007 892.496,633.459 893.055,605.046 893.614,592.725 894.174,582.403 894.733,559.122 895.292,613.834 895.851,649.828 896.411,651.706 896.97,621.328 897.529,626.266 898.088,660.702 898.648,681.691 899.207,679.532 899.766,681.197 900.325,679.603 900.885,696.449 901.444,723.408 902.003,734.304 902.562,713.625 903.122,696.504 903.681,678.68 904.24,728.297 904.799,728.138 905.359,711.251 905.918,726.257 906.477,739.997 907.036,736.045 907.596,753.444 908.155,763.944 908.714,743.82 909.273,756.348 909.833,734.139 910.392,715.242 910.951,697.187 911.51,695.797 912.07,694.204 912.629,659.768 913.188,646.177 913.747,662.932 914.307,665.528 914.866,700.982 915.425,686.318 915.984,718.219 916.544,702.312 917.103,656.105 917.662,657.722 918.221,654.743 918.781,623.984 919.34,642.778 919.899,645.735 920.458,627.031 921.018,627.763 921.577,615.533 922.136,603.812 922.695,608.711 923.255,641.552 923.814,648.539 924.373,646.908 924.932,649.202 925.492,668.827 926.051,669.047 926.61,671.251 927.169,684.507 927.729,662.965 928.288,661.024 928.847,631.54 929.406,621.925 929.966,623.929 930.525,610.24 931.084,578.989 931.644,596.363 932.203,581.775 932.762,573.318 933.321,611.837 933.881,680.479 934.44,684.995 934.999,655.133 935.558,639.847 936.118,657.548 936.677,641.657 937.236,643.297 937.795,643.375 938.355,662.6 938.914,666.194 939.473,699.628 940.032,698.892 940.592,713.488 941.151,698.191 941.71,698.534 942.269,713.917 942.829,696.858 943.388,713.903 943.947,732.074 944.506,749.405 945.066,743.361 945.625,756.817 946.184,736.424 946.743,718.952 947.303,705.066 947.862,704.292 948.421,670.469 948.98,656.46 949.54,672.854 950.099,688.216 950.658,672.821 951.217,656.466 951.777,657.821 952.336,675.67 952.895,662.011 953.454,617.689 954.014,653.781 954.573,639.193 955.132,641.229 955.691,627.87 956.251,599.076 956.81,569.626 957.369,576.397 957.928,583.39 958.488,634.431 959.047,650.666 959.606,656.526 960.165,660.203 960.725,678.382 961.284,711.799 961.843,727.345 962.402,725.384 962.962,756.287 963.521,752.178 964.08,746.746 964.639,727.987 965.199,754.524 965.758,782.308 966.317,790.649 966.876,751.374 967.436,729.121 967.995,710.295 968.554,758.554 969.113,771.228 969.673,830.669 970.232,805.784 970.791,831.004 971.35,855.28 971.91,845.072 972.469,834.978 973.028,828.217 973.587,833.873 974.147,825.495 974.706,806.768 975.265,783.74 975.824,759.069 976.384,753.026 976.943,735.558 977.502,715.831 978.061,733.578 978.621,685.295 979.18,700.788 979.739,701.624 980.298,712.814 980.858,708.136 981.417,706.302 981.976,656.72 982.535,626.101 983.095,645.958 983.654,648.957 984.213,649.246 984.772,652.059 985.332,685.041 985.891,731.63 986.45,666.799 987.009,651.797 987.569,650.239 988.128,632.044 988.687,650.263 989.246,666.128 989.806,701.4 990.365,683.126 990.924,698.415 991.483,699.266 992.043,712.611 992.602,694.434 993.161,660.531 993.72,647.392 994.28,620.231 994.839,626.81 995.398,627.596 995.957,615.596 996.517,634.597 997.076,607.994 997.635,581.55 998.194,600.978 998.754,603.239 999.313,606.641 999.872,595.104 1000.43,617.049 1000.99,606.157 1001.55,625.538 1002.11,629.807 1002.67,648.056 1003.23,666.204 1003.79,654.228 1004.35,650.825 1004.91,670.299 1005.46,673.397 1006.02,687.324 1006.58,703.376 1007.14,722.287 1007.7,687.927 1008.26,673.139 1008.82,642.827 1009.38,648.938 1009.94,648.847 1010.5,649.162 1011.06,633.15 1011.62,616.553 1012.18,617.572 1012.73,609.458 1013.29,598.694 1013.85,601.649 1014.41,608.263 1014.97,608.512 1015.53,612.083 1016.09,634.045 1016.65,634.373 1017.21,621.542 1017.77,590.26 1018.33,626.891 1018.89,665.056 1019.45,669.97 1020.01,670.448 1020.56,672.449 1021.12,628.507 1021.68,632.621 1022.24,617.712 1022.8,635.242 1023.36,655.06 1023.92,675.027 1024.48,680.041 1025.04,661.718 1025.6,626.992 1026.16,645.373 1026.72,643.439 1027.28,616.725 1027.83,639.084 1028.39,658.615 1028.95,658.52 1029.51,642.545 1030.07,582.305 1030.63,588.945 1031.19,611.941 1031.75,613.206 1032.31,618.549 1032.87,670.346 1033.43,686.348 1033.99,701.157 1034.55,669.638 1035.1,686.887 1035.66,682.844 1036.22,684.028 1036.78,700.681 1037.34,700.996 1037.9,699.836 1038.46,682.136 1039.02,683.395 1039.58,651.552 1040.14,636.164 1040.7,640.845 1041.26,663.47 1041.82,678.591 1042.38,713.554 1042.93,710.201 1043.49,690.896 1044.05,692.194 1044.61,673.842 1045.17,693.802 1045.73,711.049 1046.29,724.596 1046.85,704.446 1047.41,702.394 1047.97,737.391 1048.53,751.277 1049.09,731.622 1049.65,745.381 1050.2,756.952 1050.76,768.881 1051.32,748.856 1051.88,714.48 1052.44,746.621 1053,728.917 1053.56,778.163 1054.12,773.895 1054.68,768.461 1055.24,762.803 1055.8,726.754 1056.36,739.428 1056.92,734.7 1057.48,747.836 1058.03,758.289 1058.59,739.643 1059.15,717.985 1059.71,683.449 1060.27,715.366 1060.83,712.819 1061.39,693.105 1061.95,711.822 1062.51,731.253 1063.07,710.959 1063.63,727.141 1064.19,788.8 1064.75,801.122 1065.3,782.633 1065.86,761.331 1066.42,743.527 1066.98,756.625 1067.54,750.168 1068.1,743.026 1068.66,756.498 1069.22,738.649 1069.78,748.363 1070.34,726.771 1070.9,739.548 1071.46,736.959 1072.02,750.084 1072.57,760.72 1073.13,777.128 1073.69,771.314 1074.25,764.391 1074.81,760.575 1075.37,787.105 1075.93,780.191 1076.49,756.777 1077.05,770.626 1077.61,747.353 1078.17,727.747 1078.73,742.254 1079.29,752.873 1079.85,750.665 1080.4,762.228 1080.96,760.726 1081.52,788.543 1082.08,801.351 1082.64,762.625 1083.2,761.069 1083.76,771.725 1084.32,768.952 1084.88,776.412 1085.44,721.988 1086,686.298 1086.56,651.433 1087.12,633.79 1087.67,639.045 1088.23,656.248 1088.79,656.612 1089.35,641.984 1089.91,638.982 1090.47,607.004 1091.03,613.899 1091.59,634.879 1092.15,604.095 1092.71,610.697 1093.27,564.502 1093.83,576.684 1094.39,565.624 1094.94,591.685 1095.5,597.181 1096.06,633.196 1096.62,619.645 1097.18,655.391 1097.74,621.311 1098.3,625.68 1098.86,611.07 1099.42,616.488 1099.98,636.371 1100.54,620.375 1101.1,624.952 1101.66,593.459 1102.22,614.476 1102.77,619.076 1103.33,655.522 1103.89,656.899 1104.45,677.088 1105.01,644.75 1105.57,616.607 1106.13,617.814 1106.69,558.136 1107.25,548.679 1107.81,552.01 1108.37,543.976 1108.93,552.396 1109.49,561.3 1110.04,565.348 1110.6,575.153 1111.16,580.216 1111.72,619.092 1112.28,656.22 1112.84,659.718 1113.4,630.884 1113.96,648.398 1114.52,682.857 1115.08,682.998 1115.64,715.372 1116.2,698.12 1116.76,712.81 1117.31,745.477 1117.87,775.423 1118.43,786.572 1118.99,785.051 1119.55,794.302 1120.11,787.711 1120.67,784.303 1121.23,730.72 1121.79,730.688 1122.35,743.426 1122.91,721.471 1123.47,721.673 1124.03,753.68 1124.59,746.972 1125.14,711.528 1125.7,708.519 1126.26,706.021 1126.82,700.324 1127.38,683.6 1127.94,698.836 1128.5,699.456 1129.06,731.064 1129.62,698.851 1130.18,695.158 1130.74,697.305 1131.3,711.553 1131.86,709.683 1132.41,709.204 1132.97,737.315 1133.53,748.967 1134.09,762.783 1134.65,772.313 1135.21,766.697 1135.77,777.424 1136.33,787.376 1136.89,749.091 1137.45,725.31 1138.01,751.607 1138.57,750.693 1139.13,761.656 1139.68,725.68 1140.24,705.059 1140.8,721.025 1141.36,736.344 1141.92,763.05 1142.48,723.149 1143.04,724.109 1143.6,741.259 1144.16,719.172 1144.72,732.852 1145.28,713.186 1145.84,710.812 1146.4,723.397 1146.96,739.279 1147.51,719.928 1148.07,700.016 1148.63,700.525 1149.19,696.991 1149.75,695.807 1150.31,664.328 1150.87,631.04 1151.43,614.378 1151.99,614.967 1152.55,585.217 1153.11,575.869 1153.67,583.808 1154.23,608.371 1154.78,610.164 1155.34,628.498 1155.9,682.063 1156.46,664.304 1157.02,664.909 1157.58,668.279 1158.14,652.519 1158.7,621.82 1159.26,592.387 1159.82,596.319 1160.38,617.258 1160.94,639.068 1161.5,655.568 1162.05,673.487 1162.61,671.005 1163.17,685.671 1163.73,688.316 1164.29,670.286 1164.85,639.174 1165.41,625.574 1165.97,628.983 1166.53,632.65 1167.09,586.726 1167.65,589.752 1168.21,578.574 1168.77,565.157 1169.33,591.748 1169.88,593.156 1170.44,599.05 1171,622.413 1171.56,689.723 1172.12,674.593 1172.68,675.532 1173.24,657.317 1173.8,626.922 1174.36,630.108 1174.92,648.588 1175.48,621.276 1176.04,625.494 1176.6,647.433 1177.15,680.244 1177.71,696.099 1178.27,678.435 1178.83,679.732 1179.39,698.492 1179.95,699.671 1180.51,698.861 1181.07,700.823 1181.63,698.244 1182.19,730.194 1182.75,728.502 1183.31,742.684 1183.87,737.987 1184.43,721.323 1184.98,753.679 1185.54,765.297 1186.1,759.848 1186.66,722.696 1187.22,687.325 1187.78,669.581 1188.34,685.677 1188.9,635.797 1189.46,636.896 1190.02,626.085 1190.58,644.608 1191.14,629.244 1191.7,664.797 1192.25,632.074 1192.81,667.577 1193.37,684.897 1193.93,699.133 1194.49,680.606 1195.05,678.294 1195.61,692.439 1196.17,693.856 1196.73,689.631 1197.29,705.222 1197.85,672.496 1198.41,671.174 1198.97,672.601 1199.52,688.664 1200.08,724.059 1200.64,722.19 1201.2,719.183 1201.76,731.087 1202.32,697.654 1202.88,664.749 1203.44,683.333 1204,666.545 1204.56,653.173 1205.12,673.063 1205.68,690.277 1206.24,707.95 1206.8,690.021 1207.35,672.026 1207.91,686.913 1208.47,698.52 1209.03,715.251 1209.59,730.696 1210.15,728.741 1210.71,680.084 1211.27,696.507 1211.83,697.608 1212.39,695.762 1212.95,668.516 1213.51,650.93 1214.07,658.924 1214.62,695.621 1215.18,727.524 1215.74,692.209 1216.3,724.338 1216.86,753.075 1217.42,751.318 1217.98,748.948 1218.54,745.609 1219.1,739.454 1219.66,754.183 1220.22,734.244 1220.78,715.051 1221.34,726.384 1221.89,722.454 1222.45,702.504 1223.01,685.656 1223.57,700.548 1224.13,699.994 1224.69,715.506 1225.25,698.405 1225.81,682.994 1226.37,699.304 1226.93,713.701 1227.49,693.139 1228.05,725.205 1228.61,722.089 1229.17,723.071 1229.72,739.228 1230.28,752.252 1230.84,749.102 1231.4,747.898 1231.96,759.247 1232.52,774.428 1233.08,768.68 1233.64,749.482 1234.2,746.374 1234.76,740.93 1235.32,736.846 1235.88,733.797 1236.44,715.95 1236.99,776.808 1237.55,786.09 1238.11,749.041 1238.67,745.305 1239.23,725.03 1239.79,723.019 1240.35,706.675 1240.91,690.731 1241.47,661.419 1242.03,660.736 1242.59,627.157 1243.15,661.748 1243.71,630.135 1244.26,634.565 1244.82,637.929 1245.38,624.797 1245.94,628.385 1246.5,610.034 1247.06,579.137 1247.62,596.362 1248.18,567.807 1248.74,604.757 1249.3,606.894 1249.86,640.416 1250.42,627.179 1250.98,660.62 1251.54,644.922 1252.09,645.76 1252.65,663.934 1253.21,680.167 1253.77,680.912 1254.33,680.607 1254.89,698.373 1255.45,664.488 1256.01,635.257 1256.57,637.567 1257.13,590.923 1257.69,583.313 1258.25,588.662 1258.81,606.074 1259.36,628.574 1259.92,646.267 1260.48,680.679 1261.04,667.252 1261.6,699.063 1262.16,697.721 1262.72,697.426 1263.28,747.818 1263.84,758.326 1264.4,769.736 1264.96,750.188 1265.52,747.35 1266.08,744 1266.63,740.566 1267.19,764.446 1267.75,808.552 1268.31,802.155 1268.87,764.876 1269.43,746.348 1269.99,728.388 1270.55,741.313 1271.11,783.975 1271.67,777.564 1272.23,773.79 1272.79,803.195 1273.35,846.746 1273.91,842.371 1274.46,835.585 1275.02,827.245 1275.58,786.866 1276.14,763.393 1276.7,773.468 1277.26,768.626 1277.82,746.652 1278.38,708.124 1278.94,706.002 1279.5,704.761 1280.06,699.763 1280.62,633.978 1281.18,651.143 1281.73,671.48 1282.29,687.283 1282.85,719.932 1283.41,721.164 1283.97,720.775 1284.53,719.612 1285.09,685.473 1285.65,682.984 1286.21,717.227 1286.77,698.996 1287.33,713.92 1287.89,714.341 1288.45,729.738 1289,743.432 1289.56,722.431 1290.12,736.38 1290.68,734.385 1291.24,732.291 1291.8,697.959 1292.36,634.068 1292.92,620.613 1293.48,634.703 1294.04,637.458 1294.6,640.176 1295.16,609.104 1295.72,594.63 1296.28,630.346 1296.83,630.042 1297.39,617.175 1297.95,620.455 1298.51,624.515 1299.07,627.981 1299.63,615.623 1300.19,604.568 1300.75,611.231 1301.31,613.455 1301.87,616.13 1302.43,607.235 1302.99,612.51 1303.55,582.738 1304.1,554.785 1304.66,564.377 1305.22,586.796 1305.78,606.216 1306.34,643.855 1306.9,677.433 1307.46,646.449 1308.02,652.716 1308.58,669.79 1309.14,672.327 1309.7,672.237 1310.26,688.735 1310.82,672.947 1311.38,654.977 1311.93,671.721 1312.49,629.943 1313.05,633.353 1313.61,619.707 1314.17,623.434 1314.73,627.761 1315.29,648.749 1315.85,665.824 1316.41,697.391 1316.97,714.887 1317.53,710.585 1318.09,675.581 1318.65,661.819 1319.2,699.066 1319.76,680.419 1320.32,697.762 1320.88,715.643 1321.44,716.402 1322,749.005 1322.56,728.837 1323.12,711.012 1323.68,692.573 1324.24,704.888 1324.8,685.77 1325.36,687.826 1325.92,670.15 1326.47,717.134 1327.03,685.899 1327.59,718.007 1328.15,717.19 1328.71,727.419 1329.27,739.854 1329.83,721.228 1330.39,762.79 1330.95,745.806 1331.51,710.206 1332.07,688.383 1332.63,654.513 1333.19,689.764 1333.75,704.926 1334.3,671.76 1334.86,644.99 1335.42,628.035 1335.98,662.368 1336.54,663.607 1337.1,694.232 1337.66,695.167 1338.22,692.64 1338.78,707.322 1339.34,688.504 1339.9,691.53 1340.46,692.464 1341.02,709.11 1341.57,687.481 1342.13,673.253 1342.69,687.08 1343.25,673.787 1343.81,673.795 1344.37,675.991 1344.93,692.521 1345.49,709.494 1346.05,720.291 1346.61,685.407 1347.17,687.283 1347.73,653.115 1348.29,655.012 1348.84,722.023 1349.4,703.321 1349.96,653.879 1350.52,707.086 1351.08,674.482 1351.64,690.422 1352.2,722.713 1352.76,753.617 1353.32,707.075 1353.88,691.169 1354.44,658.723 1355,660.303 1355.56,661.524 1356.12,646.754 1356.67,666.328 1357.23,653.863 1357.79,639.984 1358.35,640.731 1358.91,658.726 1359.47,658.008 1360.03,626.608 1360.59,597.614 1361.15,621.061 1361.71,642.764 1362.27,633.279 1362.83,654.637 1363.39,657.273 1363.94,658.84 1364.5,644.104 1365.06,634.027 1365.62,604.699 1366.18,642.163 1366.74,662.724 1367.3,665.558 1367.86,681.703 1368.42,680.583 1368.98,680.171 1369.54,676.008 1370.1,658.786 1370.66,660.676 1371.21,660.076 1371.77,657.543 1372.33,672.965 1372.89,641.806 1373.45,625.645 1374.01,597.785 1374.57,607.627 1375.13,593.057 1375.69,613.623 1376.25,617.858 1376.81,645.95 1377.37,646.923 1377.93,631.744 1378.49,636.784 1379.04,627.625 1379.6,632.181 1380.16,653.514 1380.72,653.294 1381.28,688.291 1381.84,669.941 1382.4,671.117 1382.96,718.168 1383.52,716.38 1384.08,683.163 1384.64,665.63 1385.2,631.973 1385.76,630.634 1386.31,617.407 1386.87,602.767 1387.43,621.511 1387.99,610.559 1388.55,644.709 1389.11,649.148 1389.67,683.916 1390.23,697.173 1390.79,711.92 1391.35,696.18 1391.91,728.109 1392.47,706.455 1393.03,704.087 1393.58,705.948 1394.14,703.919 1394.7,733.919 1395.26,744.003 1395.82,757.456 1396.38,768.444 1396.94,766.313 1397.5,766.401 1398.06,761.865 1398.62,758.379 1399.18,738.192 1399.74,733.401 1400.3,730.717 1400.86,762.26 1401.41,727.258 1401.97,709.888 1402.53,742.045 1403.09,706.219 1403.65,705.154 1404.21,705.66 1404.77,723.006 1405.33,689.173 1405.89,656.321 1406.45,655.061 1407.01,656.669 1407.57,673.223 1408.13,691.352 1408.68,691.069 1409.24,710.621 1409.8,693.935 1410.36,711.113 1410.92,742.69 1411.48,769.256 1412.04,781.992 1412.6,762.248 1413.16,773.817 1413.72,751.523 1414.28,717.129 1414.84,731.199 1415.4,763.931 1415.95,744.452 1416.51,756.344 1417.07,737.29 1417.63,753.934 1418.19,700.495 1418.75,698.599 1419.31,698.603 1419.87,712.724 1420.43,698.66 1420.99,699.084 1421.55,678.809 1422.11,661.91 1422.67,630.24 1423.23,632.424 1423.78,631.846 1424.34,650.691 1424.9,668.9 1425.46,669.524 1426.02,648.148 1426.58,663.563 1427.14,696.712 1427.7,666.281 1428.26,650.557 1428.82,636.25 1429.38,703.039 1429.94,748.859 1430.5,761.114 1431.05,739.682 1431.61,705.98 1432.17,704.379 1432.73,703.769 1433.29,705.211 1433.85,718.719 1434.41,685.137 1434.97,700.482 1435.53,700.43 1436.09,713.266 1436.65,744.764 1437.21,712.91 1437.77,726.252 1438.33,723.793 1438.88,718.2 1439.44,717.549 1440,733.264 1440.56,731.555 1441.12,728.042 1441.68,725.398 1442.24,753.498 1442.8,768.049 1443.36,730.928 1443.92,716.529 1444.48,710.015 1445.04,710.473 1445.6,675.506 1446.15,659.859 1446.71,690.741 1447.27,690.574 1447.83,690.462 1448.39,694.511 1448.95,647.026 1449.51,633.74 1450.07,655.238 1450.63,636.322 1451.19,641.84 1451.75,681.267 1452.31,699.045 1452.87,713.484 1453.42,724.388 1453.98,706.06 1454.54,672.799 1455.1,657.28 1455.66,642.338 1456.22,612.317 1456.78,630.057 1457.34,618.623 1457.9,624.468 1458.46,628.368 1459.02,616.099 1459.58,618.663 1460.14,622.165 1460.7,622.859 1461.25,641.904 1461.81,662.836 1462.37,648.077 1462.93,651.459 1463.49,620.248 1464.05,623.394 1464.61,657.611 1465.17,660.667 1465.73,663.878 1466.29,677.983 1466.85,677.946 1467.41,677.752 1467.97,696.072 1468.52,698.976 1469.08,682.313 1469.64,650.955 1470.2,636.42 1470.76,688.503 1471.32,672.642 1471.88,689.517 1472.44,721.396 1473,685.802 1473.56,704.082 1474.12,700.009 1474.68,681.543 1475.24,681.766 1475.79,712.457 1476.35,745.886 1476.91,726.365 1477.47,738.653 1478.03,699.679 1478.59,732.034 1479.15,729.428 1479.71,710.848 1480.27,712.612 1480.83,743.691 1481.39,759.14 1481.95,723.221 1482.51,709.483 1483.07,721.742 1483.62,751.985 1484.18,762.14 1484.74,740.852 1485.3,754.44 1485.86,766.76 1486.42,761.597 1486.98,745.816 1487.54,708.223 1488.1,738.372 1488.66,736.978 1489.22,734.413 1489.78,793.936 1490.34,771.133 1490.89,747.926 1491.45,761.636 1492.01,741.202 1492.57,742.823 1493.13,759.301 1493.69,756.202 1494.25,752.916 1494.81,767.574 1495.37,779.415 1495.93,772.326 1496.49,752.918 1497.05,748.968 1497.61,745.433 1498.16,745.476 1498.72,739.249 1499.28,738.427 1499.84,754.92 1500.4,783.661 1500.96,747.648 1501.52,712.462 1502.08,643.526 1502.64,628.484 1503.2,632.202 1503.76,619.019 1504.32,604.184 1504.88,588.162 1505.44,591.082 1505.99,530.949 1506.55,540.531 1507.11,548.708 1507.67,588.992 1508.23,591.502 1508.79,576.964 1509.35,598.905 1509.91,588.512 1510.47,608.319 1511.03,633.752 1511.59,639.033 1512.15,631.492 1512.71,636.035 1513.26,652.721 1513.82,720.821 1514.38,685.585 1514.94,671.898 1515.5,707.379 1516.06,706.19 1516.62,739.038 1517.18,738.592 1517.74,716.818 1518.3,699.958 1518.86,698.434 1519.42,697.918 1519.98,714.869 1520.53,700.097 1521.09,697.115 1521.65,694.14 1522.21,693.167 1522.77,680.471 1523.33,666.671 1523.89,713.575 1524.45,713.765 1525.01,714.087 1525.57,696.842 1526.13,678.498 1526.69,682.051 1527.25,662.476 1527.81,614.602 1528.36,635.249 1528.92,639.511 1529.48,657.714 1530.04,693.045 1530.6,676.185 1531.16,662.027 1531.72,676.632 1532.28,693.308 1532.84,693.066 1533.4,693.004 1533.96,687.701 1534.52,719.071 1535.08,703.091 1535.63,703.34 1536.19,734.345 1536.75,717.818 1537.31,684.945 1537.87,700.08 1538.43,700.107 1538.99,697.891 1539.55,716.95 1540.11,730.13 1540.67,727.941 1541.23,693.199 1541.79,691.914 1542.35,674.482 1542.9,659.235 1543.46,666.045 1544.02,684.853 1544.58,668.058 1545.14,669.151 1545.7,671.037 1546.26,674.316 1546.82,640.192 1547.38,675.723 1547.94,692.689 1548.5,726.844 1549.06,737.749 1549.62,720.017 1550.18,721.184 1550.73,720.837 1551.29,719.729 1551.85,732.027 1552.41,727.779 1552.97,727.565 1553.53,738.533 1554.09,700.713 1554.65,715.318 1555.21,727.158 1555.77,694.13 1556.33,674.045 1556.89,692.975 1557.45,658.855 1558,646.173 1558.56,600.436 1559.12,593.399 1559.68,598.242 1560.24,602.912 1560.8,607.47 1561.36,611.014 1561.92,614.204 1562.48,601.462 1563.04,637.044 1563.6,622.883 1564.16,641.618 1564.72,660.573 1565.28,696.524 1565.83,679.759 1566.39,681.142 1566.95,652.165 1567.51,618.082 1568.07,591.049 1568.63,596.757 1569.19,567.696 1569.75,592.091 1570.31,598.566 1570.87,586.886 1571.43,544.927 1571.99,536.24 1572.55,508.809 1573.1,530.986 1573.66,523.789 1574.22,515.047 1574.78,528.5 1575.34,520.092 1575.9,531.216 1576.46,539.854 1577.02,562.338 1577.58,601.284 1578.14,574.79 1578.7,582 1579.26,571.523 1579.82,578.058 1580.37,586.09 1580.93,591.944 1581.49,592.06 1582.05,612.461 1582.61,599.528 1583.17,633.19 1583.73,634.571 1584.29,654.511 1584.85,658.79 1585.41,661.454 1585.97,679.867 1586.53,662.242 1587.09,681.961 1587.65,681.281 1588.2,679.698 1588.76,696.867 1589.32,715.531 1589.88,729.023 1590.44,727.318 1591,736.695 1591.56,766.814 1592.12,747.138 1592.68,776.522 1593.24,772.387 1593.8,765.139 1594.36,744.259 1594.92,760.489 1595.47,804.34 1596.03,810.794 1596.59,817.606 1597.15,774.517 1597.71,739.407 1598.27,735.471 1598.83,716.058 1599.39,712.048 1599.95,726.725 1600.51,722.796 1601.07,723.163 1601.63,737.678 1602.19,736.525 1602.74,783.929 1603.3,774.772 1603.86,802.758 1604.42,797.242 1604.98,791.35 1605.54,770.651 1606.1,753.184 1606.66,746.725 1607.22,759.595 1607.78,752.955 1608.34,748.603 1608.9,760.431 1609.46,754.366 1610.02,767.061 1610.57,762.624 1611.13,759.335 1611.69,791.17 1612.25,765.293 1612.81,744.979 1613.37,741.989 1613.93,707.087 1614.49,704.786 1615.05,735.204 1615.61,748.575 1616.17,776.146 1616.73,768.933 1617.29,747.695 1617.84,727.738 1618.4,754.927 1618.96,722.623 1619.52,721.025 1620.08,703.741 1620.64,684.441 1621.2,684.19 1621.76,686.273 1622.32,672.14 1622.88,654.596 1623.44,674.913 1624,678.855 1624.56,710.611 1625.11,691.645 1625.67,676.871 1626.23,633.772 1626.79,638.362 1627.35,658.515 1627.91,676.199 1628.47,660.591 1629.03,676.81 1629.59,675.953 1630.15,706.462 1630.71,719.019 1631.27,719.014 1631.83,733.434 1632.39,713.058 1632.94,725.668 1633.5,706.591 1634.06,705.111 1634.62,688.276 1635.18,621.904 1635.74,625.147 1636.3,613.266 1636.86,627.532 1637.42,614.418 1637.98,621.749 1638.54,657.224 1639.1,692.362 1639.66,688.941 1640.21,687.545 1640.77,685.736 1641.33,686.144 1641.89,655.526 1642.45,639.551 1643.01,641.961 1643.57,641.834 1644.13,642.144 1644.69,627.793 1645.25,619.65 1645.81,608.106 1646.37,632.32 1646.93,618.567 1647.48,641.379 1648.04,677.629 1648.6,696.019 1649.16,710.27 1649.72,707.749 1650.28,724.442 1650.84,719.918 1651.4,731.046 1651.96,728.87 1652.52,727.375 1653.08,661.271 1653.64,658.743 1654.2,644.403 1654.76,681.33 1655.31,713.868 1655.87,701.396 1656.43,687.279 1656.99,704.758 1657.55,713.807 1658.11,709.805 1658.67,718.786 1659.23,736.554 1659.79,734.866 1660.35,701.962 1660.91,700.097 1661.47,698.754 1662.03,663.752 1662.58,681.477 1663.14,710.439 1663.7,720.549 1664.26,719.365 1664.82,717.427 1665.38,745.555 1665.94,757.785 1666.5,722.704 1667.06,703.511 1667.62,699.739 1668.18,717.777 1668.74,680.942 1669.3,633.605 1669.85,681.417 1670.41,728.677 1670.97,742.219 1671.53,720.389 1672.09,701.638 1672.65,685.723 1673.21,673.246 1673.77,709.364 1674.33,705.146 1674.89,719.367 1675.45,734.562 1676.01,711.331 1676.57,692.24 1677.13,706.35 1677.68,687.224 1678.24,684.737 1678.8,719.182 1679.36,713.984 1679.92,697.216 1680.48,744.021 1681.04,740.571 1681.6,705.867 1682.16,683.806 1682.72,701.031 1683.28,699.457 1683.84,697.978 1684.4,665.76 1684.95,651.542 1685.51,652.393 1686.07,633.139 1686.63,602.61 1687.19,609.009 1687.75,625.576 1688.31,646.143 1688.87,632.005 1689.43,682.694 1689.99,685.447 1690.55,703.112 1691.11,733.68 1691.67,778.542 1692.23,775.931 1692.78,786.785 1693.34,783.392 1693.9,793.116 1694.46,819.97 1695.02,749.11 1695.58,729.885 1696.14,730.148 1696.7,712.209 1697.26,710.647 1697.82,678.031 1698.38,675.591 1698.94,675.8 1699.5,690.722 1700.05,706.341 1700.61,662.345 1701.17,664.855 1701.73,651.593 1702.29,667.7 1702.85,655.711 1703.41,623.513 1703.97,640.578 1704.53,657.832 1705.09,660.276 1705.65,646.878 1706.21,615.535 1706.77,569.444 1707.32,592.659 1707.88,581.24 1708.44,587.182 1709,606.954 1709.56,579.504 1710.12,604.255 1710.68,608.036 1711.24,596.977 1711.8,538.166 1712.36,561.562 1712.92,536.463 1713.48,543.378 1714.04,535.672 1714.6,528.333 1715.15,501.423 1715.71,497.17 1716.27,506.328 1716.83,514.474 1717.39,523.661 1717.95,534.616 1718.51,545.524 1719.07,520.843 1719.63,547.159 1720.19,551.801 1720.75,543.89 1721.31,568.132 1721.87,572.36 1722.42,591.453 1722.98,614.689 1723.54,603.734 1724.1,625.04 1724.66,616.051 1725.22,618.878 1725.78,606.473 1726.34,642.654 1726.9,662.632 1727.46,647.677 1728.02,619.154 1728.58,641.709 1729.14,611.433 1729.69,632.103 1730.25,603.905 1730.81,605.514 1731.37,596.629 1731.93,621.267 1732.49,613.976 1733.05,618.453 1733.61,625.482 1734.17,646.751 1734.73,665.247 1735.29,635.587 1735.85,622.133 1736.41,623.688 1736.97,626.324 1737.52,644.685 1738.08,661.008 1738.64,678.192 1739.2,660.799 1739.76,662.075 1740.32,678.7 1740.88,661.97 1741.44,714.313 1742,776.33 1742.56,815.43 1743.12,807.861 1743.68,803.376 1744.24,844.07 1744.79,850.665 1745.35,857.637 1745.91,862.461 1746.47,851.416 1747.03,825.761 1747.59,818.937 1748.15,843.368 1748.71,836.548 1749.27,808.894 1749.83,785.157 1750.39,764.833 1750.95,760.065 1751.51,770.239 1752.06,811.792 1752.62,834.992 1753.18,809.619 1753.74,818.261 1754.3,809.213 1754.86,772.134 1755.42,782.193 1755.98,760.515 1756.54,739.128 1757.1,753.183 1757.66,732.768 1758.22,743.927 1758.78,772.016 1759.34,736.414 1759.89,747.775 1760.45,745.292 1761.01,709.454 1761.57,722.433 1762.13,718.885 1762.69,714.053 1763.25,714.618 1763.81,696.228 1764.37,710.761 1764.93,707.401 1765.49,691.007 1766.05,688.991 1766.61,720.807 1767.16,750.797 1767.72,762.691 1768.28,745.905 1768.84,726.061 1769.4,693.848 1769.96,694.285 1770.52,681.867 1771.08,648.574 1771.64,616.816 1772.2,605.578 1772.76,609.726 1773.32,627.517 1773.88,630.61 1774.43,653.722 1774.99,642.181 1775.55,613.147 1776.11,618.875 1776.67,602.94 1777.23,577.388 1777.79,584.62 1778.35,625.643 1778.91,657.946 1779.47,659.881 1780.03,660.029 1780.59,647.134 1781.15,632.37 1781.71,633.532 1782.26,624.097 1782.82,629.743 1783.38,599.621 1783.94,618.62 1784.5,624.605 1785.06,646.467 1785.62,682.646 1786.18,651.373 1786.74,648.694 1787.3,682.446 1787.86,698.8 1788.42,718.071 1788.98,748.472 1789.53,763.827 1790.09,763.017 1790.65,776.18 1791.21,770.923 1791.77,782.803 1792.33,779.783 1792.89,777.278 1793.45,724.432 1794.01,738.783 1794.57,719.098 1795.13,716.882 1795.69,715.023 1796.25,715.094 1796.8,699.452 1797.36,682.963 1797.92,699.831 1798.48,727.929 1799.04,727.167 1799.6,741.385 1800.16,708.1 1800.72,675.963 1801.28,705.434 1801.84,709.161 1802.4,710.921 1802.96,707.317 1803.52,706.427 1804.08,706.999 1804.63,708.941 1805.19,711.841 1805.75,741.945 1806.31,719.75 1806.87,712.948 1807.43,663.707 1807.99,680.888 1808.55,648.873 1809.11,649.349 1809.67,666.106 1810.23,648.418 1810.79,652.625 1811.35,700.595 1811.9,714.24 1812.46,725.702 1813.02,722.257 1813.58,701.961 1814.14,715.892 1814.7,712.768 1815.26,677.853 1815.82,665.689 1816.38,651.254 1816.94,618.308 1817.5,621.098 1818.06,607.834 1818.62,691.836 1819.18,719.957 1819.73,701.478 1820.29,666.17 1820.85,714.072 1821.41,694.755 1821.97,662.039 1822.53,680.911 1823.09,696.546 1823.65,648.203 1824.21,633.777 1824.77,637.887 1825.33,640.028 1825.89,591.085 1826.45,643.603 1827,644.439 1827.56,676.46 1828.12,661.796 1828.68,684.805 1829.24,687.393 1829.8,687.014 1830.36,689.332 1830.92,691.815 1831.48,708.168 1832.04,661.183 1832.6,679.235 1833.16,696.88 1833.72,726.354 1834.27,707.528 1834.83,704.33 1835.39,763.6 1835.95,758.327 1836.51,739.888 1837.07,737.835 1837.63,749.164 1838.19,744.891 \"/>\n<path clip-path=\"url(#clip993)\" d=\"M720.247 691.399 L720.806 691.399 L721.365 691.399 L721.924 691.399 L722.484 691.399 L723.043 691.399 L723.602 691.399 L724.161 691.399 L724.721 691.399 L725.28 691.399 L725.839 691.399 L726.398 691.399 L726.958 691.399 L727.517 691.399 L728.076 691.399 L728.635 691.399 L729.195 691.399 L729.754 691.399 L730.313 691.399 L730.872 691.399 L731.432 691.399 L731.991 691.399 L732.55 691.399 L733.109 691.399 L733.669 691.399 L734.228 691.399 L734.787 691.399 L735.346 691.399 L735.906 691.399 L736.465 691.399 L737.024 691.399 L737.583 691.399 L738.143 691.399 L738.702 691.399 L739.261 691.399 L739.82 691.399 L740.38 691.399 L740.939 691.399 L741.498 691.399 L742.057 691.399 L742.617 691.399 L743.176 691.399 L743.735 691.399 L744.294 691.399 L744.854 691.399 L745.413 691.399 L745.972 691.399 L746.531 691.399 L747.091 691.399 L747.65 691.399 L748.209 691.399 L748.768 691.399 L749.328 691.399 L749.887 691.399 L750.446 691.399 L751.005 691.399 L751.565 691.399 L752.124 691.399 L752.683 691.399 L753.242 691.399 L753.802 691.399 L754.361 691.399 L754.92 691.399 L755.479 691.399 L756.039 691.399 L756.598 691.399 L757.157 691.399 L757.716 691.399 L758.276 691.399 L758.835 691.399 L759.394 691.399 L759.953 691.399 L760.513 691.399 L761.072 691.399 L761.631 691.399 L762.19 691.399 L762.75 691.399 L763.309 691.399 L763.868 691.399 L764.427 691.399 L764.987 691.399 L765.546 691.399 L766.105 691.399 L766.664 691.399 L767.224 691.399 L767.783 691.399 L768.342 691.399 L768.901 691.399 L769.461 691.399 L770.02 691.399 L770.579 691.399 L771.138 691.399 L771.698 691.399 L772.257 691.399 L772.816 691.399 L773.375 691.399 L773.935 691.399 L774.494 691.399 L775.053 691.399 L775.612 691.399 L776.172 691.399 L776.731 691.399 L777.29 691.399 L777.849 691.399 L778.409 691.399 L778.968 691.399 L779.527 691.399 L780.086 691.399 L780.646 691.399 L781.205 691.399 L781.764 691.399 L782.323 691.399 L782.883 691.399 L783.442 691.399 L784.001 691.399 L784.56 691.399 L785.12 691.399 L785.679 691.399 L786.238 691.399 L786.797 691.399 L787.357 691.399 L787.916 691.399 L788.475 691.399 L789.034 691.399 L789.594 691.399 L790.153 691.399 L790.712 691.399 L791.271 691.399 L791.831 691.399 L792.39 691.399 L792.949 691.399 L793.508 691.399 L794.068 691.399 L794.627 691.399 L795.186 691.399 L795.745 691.399 L796.305 691.399 L796.864 691.399 L797.423 691.399 L797.982 691.399 L798.542 691.399 L799.101 691.399 L799.66 691.399 L800.219 691.399 L800.779 691.399 L801.338 691.399 L801.897 691.399 L802.456 691.399 L803.016 691.399 L803.575 691.399 L804.134 691.399 L804.693 691.399 L805.253 691.399 L805.812 691.399 L806.371 691.399 L806.931 691.399 L807.49 691.399 L808.049 691.399 L808.608 691.399 L809.168 691.399 L809.727 691.399 L810.286 691.399 L810.845 691.399 L811.405 691.399 L811.964 691.399 L812.523 691.399 L813.082 691.399 L813.642 691.399 L814.201 691.399 L814.76 691.399 L815.319 691.399 L815.879 691.399 L816.438 691.399 L816.997 691.399 L817.556 691.399 L818.116 691.399 L818.675 691.399 L819.234 691.399 L819.793 691.399 L820.353 691.399 L820.912 691.399 L821.471 691.399 L822.03 691.399 L822.59 691.399 L823.149 691.399 L823.708 691.399 L824.267 691.399 L824.827 691.399 L825.386 691.399 L825.945 691.399 L826.504 691.399 L827.064 691.399 L827.623 691.399 L828.182 691.399 L828.741 691.399 L829.301 691.399 L829.86 691.399 L830.419 691.399 L830.978 691.399 L831.538 691.399 L832.097 691.399 L832.656 691.399 L833.215 691.399 L833.775 691.399 L834.334 691.399 L834.893 691.399 L835.452 691.399 L836.012 691.399 L836.571 691.399 L837.13 691.399 L837.689 691.399 L838.249 691.399 L838.808 691.399 L839.367 691.399 L839.926 691.399 L840.486 691.399 L841.045 691.399 L841.604 691.399 L842.163 691.399 L842.723 691.399 L843.282 691.399 L843.841 691.399 L844.4 691.399 L844.96 691.399 L845.519 691.399 L846.078 691.399 L846.637 691.399 L847.197 691.399 L847.756 691.399 L848.315 691.399 L848.874 691.399 L849.434 691.399 L849.993 691.399 L850.552 691.399 L851.111 691.399 L851.671 691.399 L852.23 691.399 L852.789 691.399 L853.348 691.399 L853.908 691.399 L854.467 691.399 L855.026 691.399 L855.585 691.399 L856.145 691.399 L856.704 691.399 L857.263 691.399 L857.822 691.399 L858.382 691.399 L858.941 691.399 L859.5 691.399 L860.059 691.399 L860.619 691.399 L861.178 691.399 L861.737 691.399 L862.296 691.399 L862.856 691.399 L863.415 691.399 L863.974 691.399 L864.533 691.399 L865.093 691.399 L865.652 691.399 L866.211 691.399 L866.77 691.399 L867.33 691.399 L867.889 691.399 L868.448 691.399 L869.007 691.399 L869.567 691.399 L870.126 691.399 L870.685 691.399 L871.244 691.399 L871.804 691.399 L872.363 691.399 L872.922 691.399 L873.481 691.399 L874.041 691.399 L874.6 691.399 L875.159 691.399 L875.718 691.399 L876.278 691.399 L876.837 691.399 L877.396 691.399 L877.955 691.399 L878.515 691.399 L879.074 691.399 L879.633 691.399 L880.192 691.399 L880.752 691.399 L881.311 691.399 L881.87 691.399 L882.429 691.399 L882.989 691.399 L883.548 691.399 L884.107 691.399 L884.666 691.399 L885.226 691.399 L885.785 691.399 L886.344 691.399 L886.903 691.399 L887.463 691.399 L888.022 691.399 L888.581 691.399 L889.14 691.399 L889.7 691.399 L890.259 691.399 L890.818 691.399 L891.377 691.399 L891.937 691.399 L892.496 691.399 L893.055 691.399 L893.614 691.399 L894.174 691.399 L894.733 691.399 L895.292 691.399 L895.851 691.399 L896.411 691.399 L896.97 691.399 L897.529 691.399 L898.088 691.399 L898.648 691.399 L899.207 691.399 L899.766 691.399 L900.325 691.399 L900.885 691.399 L901.444 691.399 L902.003 691.399 L902.562 691.399 L903.122 691.399 L903.681 691.399 L904.24 691.399 L904.799 691.399 L905.359 691.399 L905.918 691.399 L906.477 691.399 L907.036 691.399 L907.596 691.399 L908.155 691.399 L908.714 691.399 L909.273 691.399 L909.833 691.399 L910.392 691.399 L910.951 691.399 L911.51 691.399 L912.07 691.399 L912.629 691.399 L913.188 691.399 L913.747 691.399 L914.307 691.399 L914.866 691.399 L915.425 691.399 L915.984 691.399 L916.544 691.399 L917.103 691.399 L917.662 691.399 L918.221 691.399 L918.781 691.399 L919.34 691.399 L919.899 691.399 L920.458 691.399 L921.018 691.399 L921.577 691.399 L922.136 691.399 L922.695 691.399 L923.255 691.399 L923.814 691.399 L924.373 691.399 L924.932 691.399 L925.492 691.399 L926.051 691.399 L926.61 691.399 L927.169 691.399 L927.729 691.399 L928.288 691.399 L928.847 691.399 L929.406 691.399 L929.966 691.399 L930.525 691.399 L931.084 691.399 L931.644 691.399 L932.203 691.399 L932.762 691.399 L933.321 691.399 L933.881 691.399 L934.44 691.399 L934.999 691.399 L935.558 691.399 L936.118 691.399 L936.677 691.399 L937.236 691.399 L937.795 691.399 L938.355 691.399 L938.914 691.399 L939.473 691.399 L940.032 691.399 L940.592 691.399 L941.151 691.399 L941.71 691.399 L942.269 691.399 L942.829 691.399 L943.388 691.399 L943.947 691.399 L944.506 691.399 L945.066 691.399 L945.625 691.399 L946.184 691.399 L946.743 691.399 L947.303 691.399 L947.862 691.399 L948.421 691.399 L948.98 691.399 L949.54 691.399 L950.099 691.399 L950.658 691.399 L951.217 691.399 L951.777 691.399 L952.336 691.399 L952.895 691.399 L953.454 691.399 L954.014 691.399 L954.573 691.399 L955.132 691.399 L955.691 691.399 L956.251 691.399 L956.81 691.399 L957.369 691.399 L957.928 691.399 L958.488 691.399 L959.047 691.399 L959.606 691.399 L960.165 691.399 L960.725 691.399 L961.284 691.399 L961.843 691.399 L962.402 691.399 L962.962 691.399 L963.521 691.399 L964.08 691.399 L964.639 691.399 L965.199 691.399 L965.758 691.399 L966.317 691.399 L966.876 691.399 L967.436 691.399 L967.995 691.399 L968.554 691.399 L969.113 691.399 L969.673 691.399 L970.232 691.399 L970.791 691.399 L971.35 691.399 L971.91 691.399 L972.469 691.399 L973.028 691.399 L973.587 691.399 L974.147 691.399 L974.706 691.399 L975.265 691.399 L975.824 691.399 L976.384 691.399 L976.943 691.399 L977.502 691.399 L978.061 691.399 L978.621 691.399 L979.18 691.399 L979.739 691.399 L980.298 691.399 L980.858 691.399 L981.417 691.399 L981.976 691.399 L982.535 691.399 L983.095 691.399 L983.654 691.399 L984.213 691.399 L984.772 691.399 L985.332 691.399 L985.891 691.399 L986.45 691.399 L987.009 691.399 L987.569 691.399 L988.128 691.399 L988.687 691.399 L989.246 691.399 L989.806 691.399 L990.365 691.399 L990.924 691.399 L991.483 691.399 L992.043 691.399 L992.602 691.399 L993.161 691.399 L993.72 691.399 L994.28 691.399 L994.839 691.399 L995.398 691.399 L995.957 691.399 L996.517 691.399 L997.076 691.399 L997.635 691.399 L998.194 691.399 L998.754 691.399 L999.313 691.399 L999.872 691.399 L1000.43 691.399 L1000.99 691.399 L1001.55 691.399 L1002.11 691.399 L1002.67 691.399 L1003.23 691.399 L1003.79 691.399 L1004.35 691.399 L1004.91 691.399 L1005.46 691.399 L1006.02 691.399 L1006.58 691.399 L1007.14 691.399 L1007.7 691.399 L1008.26 691.399 L1008.82 691.399 L1009.38 691.399 L1009.94 691.399 L1010.5 691.399 L1011.06 691.399 L1011.62 691.399 L1012.18 691.399 L1012.73 691.399 L1013.29 691.399 L1013.85 691.399 L1014.41 691.399 L1014.97 691.399 L1015.53 691.399 L1016.09 691.399 L1016.65 691.399 L1017.21 691.399 L1017.77 691.399 L1018.33 691.399 L1018.89 691.399 L1019.45 691.399 L1020.01 691.399 L1020.56 691.399 L1021.12 691.399 L1021.68 691.399 L1022.24 691.399 L1022.8 691.399 L1023.36 691.399 L1023.92 691.399 L1024.48 691.399 L1025.04 691.399 L1025.6 691.399 L1026.16 691.399 L1026.72 691.399 L1027.28 691.399 L1027.83 691.399 L1028.39 691.399 L1028.95 691.399 L1029.51 691.399 L1030.07 691.399 L1030.63 691.399 L1031.19 691.399 L1031.75 691.399 L1032.31 691.399 L1032.87 691.399 L1033.43 691.399 L1033.99 691.399 L1034.55 691.399 L1035.1 691.399 L1035.66 691.399 L1036.22 691.399 L1036.78 691.399 L1037.34 691.399 L1037.9 691.399 L1038.46 691.399 L1039.02 691.399 L1039.58 691.399 L1040.14 691.399 L1040.7 691.399 L1041.26 691.399 L1041.82 691.399 L1042.38 691.399 L1042.93 691.399 L1043.49 691.399 L1044.05 691.399 L1044.61 691.399 L1045.17 691.399 L1045.73 691.399 L1046.29 691.399 L1046.85 691.399 L1047.41 691.399 L1047.97 691.399 L1048.53 691.399 L1049.09 691.399 L1049.65 691.399 L1050.2 691.399 L1050.76 691.399 L1051.32 691.399 L1051.88 691.399 L1052.44 691.399 L1053 691.399 L1053.56 691.399 L1054.12 691.399 L1054.68 691.399 L1055.24 691.399 L1055.8 691.399 L1056.36 691.399 L1056.92 691.399 L1057.48 691.399 L1058.03 691.399 L1058.59 691.399 L1059.15 691.399 L1059.71 691.399 L1060.27 691.399 L1060.83 691.399 L1061.39 691.399 L1061.95 691.399 L1062.51 691.399 L1063.07 691.399 L1063.63 691.399 L1064.19 691.399 L1064.75 691.399 L1065.3 691.399 L1065.86 691.399 L1066.42 691.399 L1066.98 691.399 L1067.54 691.399 L1068.1 691.399 L1068.66 691.399 L1069.22 691.399 L1069.78 691.399 L1070.34 691.399 L1070.9 691.399 L1071.46 691.399 L1072.02 691.399 L1072.57 691.399 L1073.13 691.399 L1073.69 691.399 L1074.25 691.399 L1074.81 691.399 L1075.37 691.399 L1075.93 691.399 L1076.49 691.399 L1077.05 691.399 L1077.61 691.399 L1078.17 691.399 L1078.73 691.399 L1079.29 691.399 L1079.85 691.399 L1080.4 691.399 L1080.96 691.399 L1081.52 691.399 L1082.08 691.399 L1082.64 691.399 L1083.2 691.399 L1083.76 691.399 L1084.32 691.399 L1084.88 691.399 L1085.44 691.399 L1086 691.399 L1086.56 691.399 L1087.12 691.399 L1087.67 691.399 L1088.23 691.399 L1088.79 691.399 L1089.35 691.399 L1089.91 691.399 L1090.47 691.399 L1091.03 691.399 L1091.59 691.399 L1092.15 691.399 L1092.71 691.399 L1093.27 691.399 L1093.83 691.399 L1094.39 691.399 L1094.94 691.399 L1095.5 691.399 L1096.06 691.399 L1096.62 691.399 L1097.18 691.399 L1097.74 691.399 L1098.3 691.399 L1098.86 691.399 L1099.42 691.399 L1099.98 691.399 L1100.54 691.399 L1101.1 691.399 L1101.66 691.399 L1102.22 691.399 L1102.77 691.399 L1103.33 691.399 L1103.89 691.399 L1104.45 691.399 L1105.01 691.399 L1105.57 691.399 L1106.13 691.399 L1106.69 691.399 L1107.25 691.399 L1107.81 691.399 L1108.37 691.399 L1108.93 691.399 L1109.49 691.399 L1110.04 691.399 L1110.6 691.399 L1111.16 691.399 L1111.72 691.399 L1112.28 691.399 L1112.84 691.399 L1113.4 691.399 L1113.96 691.399 L1114.52 691.399 L1115.08 691.399 L1115.64 691.399 L1116.2 691.399 L1116.76 691.399 L1117.31 691.399 L1117.87 691.399 L1118.43 691.399 L1118.99 691.399 L1119.55 691.399 L1120.11 691.399 L1120.67 691.399 L1121.23 691.399 L1121.79 691.399 L1122.35 691.399 L1122.91 691.399 L1123.47 691.399 L1124.03 691.399 L1124.59 691.399 L1125.14 691.399 L1125.7 691.399 L1126.26 691.399 L1126.82 691.399 L1127.38 691.399 L1127.94 691.399 L1128.5 691.399 L1129.06 691.399 L1129.62 691.399 L1130.18 691.399 L1130.74 691.399 L1131.3 691.399 L1131.86 691.399 L1132.41 691.399 L1132.97 691.399 L1133.53 691.399 L1134.09 691.399 L1134.65 691.399 L1135.21 691.399 L1135.77 691.399 L1136.33 691.399 L1136.89 691.399 L1137.45 691.399 L1138.01 691.399 L1138.57 691.399 L1139.13 691.399 L1139.68 691.399 L1140.24 691.399 L1140.8 691.399 L1141.36 691.399 L1141.92 691.399 L1142.48 691.399 L1143.04 691.399 L1143.6 691.399 L1144.16 691.399 L1144.72 691.399 L1145.28 691.399 L1145.84 691.399 L1146.4 691.399 L1146.96 691.399 L1147.51 691.399 L1148.07 691.399 L1148.63 691.399 L1149.19 691.399 L1149.75 691.399 L1150.31 691.399 L1150.87 691.399 L1151.43 691.399 L1151.99 691.399 L1152.55 691.399 L1153.11 691.399 L1153.67 691.399 L1154.23 691.399 L1154.78 691.399 L1155.34 691.399 L1155.9 691.399 L1156.46 691.399 L1157.02 691.399 L1157.58 691.399 L1158.14 691.399 L1158.7 691.399 L1159.26 691.399 L1159.82 691.399 L1160.38 691.399 L1160.94 691.399 L1161.5 691.399 L1162.05 691.399 L1162.61 691.399 L1163.17 691.399 L1163.73 691.399 L1164.29 691.399 L1164.85 691.399 L1165.41 691.399 L1165.97 691.399 L1166.53 691.399 L1167.09 691.399 L1167.65 691.399 L1168.21 691.399 L1168.77 691.399 L1169.33 691.399 L1169.88 691.399 L1170.44 691.399 L1171 691.399 L1171.56 691.399 L1172.12 691.399 L1172.68 691.399 L1173.24 691.399 L1173.8 691.399 L1174.36 691.399 L1174.92 691.399 L1175.48 691.399 L1176.04 691.399 L1176.6 691.399 L1177.15 691.399 L1177.71 691.399 L1178.27 691.399 L1178.83 691.399 L1179.39 691.399 L1179.95 691.399 L1180.51 691.399 L1181.07 691.399 L1181.63 691.399 L1182.19 691.399 L1182.75 691.399 L1183.31 691.399 L1183.87 691.399 L1184.43 691.399 L1184.98 691.399 L1185.54 691.399 L1186.1 691.399 L1186.66 691.399 L1187.22 691.399 L1187.78 691.399 L1188.34 691.399 L1188.9 691.399 L1189.46 691.399 L1190.02 691.399 L1190.58 691.399 L1191.14 691.399 L1191.7 691.399 L1192.25 691.399 L1192.81 691.399 L1193.37 691.399 L1193.93 691.399 L1194.49 691.399 L1195.05 691.399 L1195.61 691.399 L1196.17 691.399 L1196.73 691.399 L1197.29 691.399 L1197.85 691.399 L1198.41 691.399 L1198.97 691.399 L1199.52 691.399 L1200.08 691.399 L1200.64 691.399 L1201.2 691.399 L1201.76 691.399 L1202.32 691.399 L1202.88 691.399 L1203.44 691.399 L1204 691.399 L1204.56 691.399 L1205.12 691.399 L1205.68 691.399 L1206.24 691.399 L1206.8 691.399 L1207.35 691.399 L1207.91 691.399 L1208.47 691.399 L1209.03 691.399 L1209.59 691.399 L1210.15 691.399 L1210.71 691.399 L1211.27 691.399 L1211.83 691.399 L1212.39 691.399 L1212.95 691.399 L1213.51 691.399 L1214.07 691.399 L1214.62 691.399 L1215.18 691.399 L1215.74 691.399 L1216.3 691.399 L1216.86 691.399 L1217.42 691.399 L1217.98 691.399 L1218.54 691.399 L1219.1 691.399 L1219.66 691.399 L1220.22 691.399 L1220.78 691.399 L1221.34 691.399 L1221.89 691.399 L1222.45 691.399 L1223.01 691.399 L1223.57 691.399 L1224.13 691.399 L1224.69 691.399 L1225.25 691.399 L1225.81 691.399 L1226.37 691.399 L1226.93 691.399 L1227.49 691.399 L1228.05 691.399 L1228.61 691.399 L1229.17 691.399 L1229.72 691.399 L1230.28 691.399 L1230.84 691.399 L1231.4 691.399 L1231.96 691.399 L1232.52 691.399 L1233.08 691.399 L1233.64 691.399 L1234.2 691.399 L1234.76 691.399 L1235.32 691.399 L1235.88 691.399 L1236.44 691.399 L1236.99 691.399 L1237.55 691.399 L1238.11 691.399 L1238.67 691.399 L1239.23 691.399 L1239.79 691.399 L1240.35 691.399 L1240.91 691.399 L1241.47 691.399 L1242.03 691.399 L1242.59 691.399 L1243.15 691.399 L1243.71 691.399 L1244.26 691.399 L1244.82 691.399 L1245.38 691.399 L1245.94 691.399 L1246.5 691.399 L1247.06 691.399 L1247.62 691.399 L1248.18 691.399 L1248.74 691.399 L1249.3 691.399 L1249.86 691.399 L1250.42 691.399 L1250.98 691.399 L1251.54 691.399 L1252.09 691.399 L1252.65 691.399 L1253.21 691.399 L1253.77 691.399 L1254.33 691.399 L1254.89 691.399 L1255.45 691.399 L1256.01 691.399 L1256.57 691.399 L1257.13 691.399 L1257.69 691.399 L1258.25 691.399 L1258.81 691.399 L1259.36 691.399 L1259.92 691.399 L1260.48 691.399 L1261.04 691.399 L1261.6 691.399 L1262.16 691.399 L1262.72 691.399 L1263.28 691.399 L1263.84 691.399 L1264.4 691.399 L1264.96 691.399 L1265.52 691.399 L1266.08 691.399 L1266.63 691.399 L1267.19 691.399 L1267.75 691.399 L1268.31 691.399 L1268.87 691.399 L1269.43 691.399 L1269.99 691.399 L1270.55 691.399 L1271.11 691.399 L1271.67 691.399 L1272.23 691.399 L1272.79 691.399 L1273.35 691.399 L1273.91 691.399 L1274.46 691.399 L1275.02 691.399 L1275.58 691.399 L1276.14 691.399 L1276.7 691.399 L1277.26 691.399 L1277.82 691.399 L1278.38 691.399 L1278.94 691.399 L1279.5 691.399 L1280.06 691.399 L1280.62 691.399 L1281.18 691.399 L1281.73 691.399 L1282.29 691.399 L1282.85 691.399 L1283.41 691.399 L1283.97 691.399 L1284.53 691.399 L1285.09 691.399 L1285.65 691.399 L1286.21 691.399 L1286.77 691.399 L1287.33 691.399 L1287.89 691.399 L1288.45 691.399 L1289 691.399 L1289.56 691.399 L1290.12 691.399 L1290.68 691.399 L1291.24 691.399 L1291.8 691.399 L1292.36 691.399 L1292.92 691.399 L1293.48 691.399 L1294.04 691.399 L1294.6 691.399 L1295.16 691.399 L1295.72 691.399 L1296.28 691.399 L1296.83 691.399 L1297.39 691.399 L1297.95 691.399 L1298.51 691.399 L1299.07 691.399 L1299.63 691.399 L1300.19 691.399 L1300.75 691.399 L1301.31 691.399 L1301.87 691.399 L1302.43 691.399 L1302.99 691.399 L1303.55 691.399 L1304.1 691.399 L1304.66 691.399 L1305.22 691.399 L1305.78 691.399 L1306.34 691.399 L1306.9 691.399 L1307.46 691.399 L1308.02 691.399 L1308.58 691.399 L1309.14 691.399 L1309.7 691.399 L1310.26 691.399 L1310.82 691.399 L1311.38 691.399 L1311.93 691.399 L1312.49 691.399 L1313.05 691.399 L1313.61 691.399 L1314.17 691.399 L1314.73 691.399 L1315.29 691.399 L1315.85 691.399 L1316.41 691.399 L1316.97 691.399 L1317.53 691.399 L1318.09 691.399 L1318.65 691.399 L1319.2 691.399 L1319.76 691.399 L1320.32 691.399 L1320.88 691.399 L1321.44 691.399 L1322 691.399 L1322.56 691.399 L1323.12 691.399 L1323.68 691.399 L1324.24 691.399 L1324.8 691.399 L1325.36 691.399 L1325.92 691.399 L1326.47 691.399 L1327.03 691.399 L1327.59 691.399 L1328.15 691.399 L1328.71 691.399 L1329.27 691.399 L1329.83 691.399 L1330.39 691.399 L1330.95 691.399 L1331.51 691.399 L1332.07 691.399 L1332.63 691.399 L1333.19 691.399 L1333.75 691.399 L1334.3 691.399 L1334.86 691.399 L1335.42 691.399 L1335.98 691.399 L1336.54 691.399 L1337.1 691.399 L1337.66 691.399 L1338.22 691.399 L1338.78 691.399 L1339.34 691.399 L1339.9 691.399 L1340.46 691.399 L1341.02 691.399 L1341.57 691.399 L1342.13 691.399 L1342.69 691.399 L1343.25 691.399 L1343.81 691.399 L1344.37 691.399 L1344.93 691.399 L1345.49 691.399 L1346.05 691.399 L1346.61 691.399 L1347.17 691.399 L1347.73 691.399 L1348.29 691.399 L1348.84 691.399 L1349.4 691.399 L1349.96 691.399 L1350.52 691.399 L1351.08 691.399 L1351.64 691.399 L1352.2 691.399 L1352.76 691.399 L1353.32 691.399 L1353.88 691.399 L1354.44 691.399 L1355 691.399 L1355.56 691.399 L1356.12 691.399 L1356.67 691.399 L1357.23 691.399 L1357.79 691.399 L1358.35 691.399 L1358.91 691.399 L1359.47 691.399 L1360.03 691.399 L1360.59 691.399 L1361.15 691.399 L1361.71 691.399 L1362.27 691.399 L1362.83 691.399 L1363.39 691.399 L1363.94 691.399 L1364.5 691.399 L1365.06 691.399 L1365.62 691.399 L1366.18 691.399 L1366.74 691.399 L1367.3 691.399 L1367.86 691.399 L1368.42 691.399 L1368.98 691.399 L1369.54 691.399 L1370.1 691.399 L1370.66 691.399 L1371.21 691.399 L1371.77 691.399 L1372.33 691.399 L1372.89 691.399 L1373.45 691.399 L1374.01 691.399 L1374.57 691.399 L1375.13 691.399 L1375.69 691.399 L1376.25 691.399 L1376.81 691.399 L1377.37 691.399 L1377.93 691.399 L1378.49 691.399 L1379.04 691.399 L1379.6 691.399 L1380.16 691.399 L1380.72 691.399 L1381.28 691.399 L1381.84 691.399 L1382.4 691.399 L1382.96 691.399 L1383.52 691.399 L1384.08 691.399 L1384.64 691.399 L1385.2 691.399 L1385.76 691.399 L1386.31 691.399 L1386.87 691.399 L1387.43 691.399 L1387.99 691.399 L1388.55 691.399 L1389.11 691.399 L1389.67 691.399 L1390.23 691.399 L1390.79 691.399 L1391.35 691.399 L1391.91 691.399 L1392.47 691.399 L1393.03 691.399 L1393.58 691.399 L1394.14 691.399 L1394.7 691.399 L1395.26 691.399 L1395.82 691.399 L1396.38 691.399 L1396.94 691.399 L1397.5 691.399 L1398.06 691.399 L1398.62 691.399 L1399.18 691.399 L1399.74 691.399 L1400.3 691.399 L1400.86 691.399 L1401.41 691.399 L1401.97 691.399 L1402.53 691.399 L1403.09 691.399 L1403.65 691.399 L1404.21 691.399 L1404.77 691.399 L1405.33 691.399 L1405.89 691.399 L1406.45 691.399 L1407.01 691.399 L1407.57 691.399 L1408.13 691.399 L1408.68 691.399 L1409.24 691.399 L1409.8 691.399 L1410.36 691.399 L1410.92 691.399 L1411.48 691.399 L1412.04 691.399 L1412.6 691.399 L1413.16 691.399 L1413.72 691.399 L1414.28 691.399 L1414.84 691.399 L1415.4 691.399 L1415.95 691.399 L1416.51 691.399 L1417.07 691.399 L1417.63 691.399 L1418.19 691.399 L1418.75 691.399 L1419.31 691.399 L1419.87 691.399 L1420.43 691.399 L1420.99 691.399 L1421.55 691.399 L1422.11 691.399 L1422.67 691.399 L1423.23 691.399 L1423.78 691.399 L1424.34 691.399 L1424.9 691.399 L1425.46 691.399 L1426.02 691.399 L1426.58 691.399 L1427.14 691.399 L1427.7 691.399 L1428.26 691.399 L1428.82 691.399 L1429.38 691.399 L1429.94 691.399 L1430.5 691.399 L1431.05 691.399 L1431.61 691.399 L1432.17 691.399 L1432.73 691.399 L1433.29 691.399 L1433.85 691.399 L1434.41 691.399 L1434.97 691.399 L1435.53 691.399 L1436.09 691.399 L1436.65 691.399 L1437.21 691.399 L1437.77 691.399 L1438.33 691.399 L1438.88 691.399 L1439.44 691.399 L1440 691.399 L1440.56 691.399 L1441.12 691.399 L1441.68 691.399 L1442.24 691.399 L1442.8 691.399 L1443.36 691.399 L1443.92 691.399 L1444.48 691.399 L1445.04 691.399 L1445.6 691.399 L1446.15 691.399 L1446.71 691.399 L1447.27 691.399 L1447.83 691.399 L1448.39 691.399 L1448.95 691.399 L1449.51 691.399 L1450.07 691.399 L1450.63 691.399 L1451.19 691.399 L1451.75 691.399 L1452.31 691.399 L1452.87 691.399 L1453.42 691.399 L1453.98 691.399 L1454.54 691.399 L1455.1 691.399 L1455.66 691.399 L1456.22 691.399 L1456.78 691.399 L1457.34 691.399 L1457.9 691.399 L1458.46 691.399 L1459.02 691.399 L1459.58 691.399 L1460.14 691.399 L1460.7 691.399 L1461.25 691.399 L1461.81 691.399 L1462.37 691.399 L1462.93 691.399 L1463.49 691.399 L1464.05 691.399 L1464.61 691.399 L1465.17 691.399 L1465.73 691.399 L1466.29 691.399 L1466.85 691.399 L1467.41 691.399 L1467.97 691.399 L1468.52 691.399 L1469.08 691.399 L1469.64 691.399 L1470.2 691.399 L1470.76 691.399 L1471.32 691.399 L1471.88 691.399 L1472.44 691.399 L1473 691.399 L1473.56 691.399 L1474.12 691.399 L1474.68 691.399 L1475.24 691.399 L1475.79 691.399 L1476.35 691.399 L1476.91 691.399 L1477.47 691.399 L1478.03 691.399 L1478.59 691.399 L1479.15 691.399 L1479.71 691.399 L1480.27 691.399 L1480.83 691.399 L1481.39 691.399 L1481.95 691.399 L1482.51 691.399 L1483.07 691.399 L1483.62 691.399 L1484.18 691.399 L1484.74 691.399 L1485.3 691.399 L1485.86 691.399 L1486.42 691.399 L1486.98 691.399 L1487.54 691.399 L1488.1 691.399 L1488.66 691.399 L1489.22 691.399 L1489.78 691.399 L1490.34 691.399 L1490.89 691.399 L1491.45 691.399 L1492.01 691.399 L1492.57 691.399 L1493.13 691.399 L1493.69 691.399 L1494.25 691.399 L1494.81 691.399 L1495.37 691.399 L1495.93 691.399 L1496.49 691.399 L1497.05 691.399 L1497.61 691.399 L1498.16 691.399 L1498.72 691.399 L1499.28 691.399 L1499.84 691.399 L1500.4 691.399 L1500.96 691.399 L1501.52 691.399 L1502.08 691.399 L1502.64 691.399 L1503.2 691.399 L1503.76 691.399 L1504.32 691.399 L1504.88 691.399 L1505.44 691.399 L1505.99 691.399 L1506.55 691.399 L1507.11 691.399 L1507.67 691.399 L1508.23 691.399 L1508.79 691.399 L1509.35 691.399 L1509.91 691.399 L1510.47 691.399 L1511.03 691.399 L1511.59 691.399 L1512.15 691.399 L1512.71 691.399 L1513.26 691.399 L1513.82 691.399 L1514.38 691.399 L1514.94 691.399 L1515.5 691.399 L1516.06 691.399 L1516.62 691.399 L1517.18 691.399 L1517.74 691.399 L1518.3 691.399 L1518.86 691.399 L1519.42 691.399 L1519.98 691.399 L1520.53 691.399 L1521.09 691.399 L1521.65 691.399 L1522.21 691.399 L1522.77 691.399 L1523.33 691.399 L1523.89 691.399 L1524.45 691.399 L1525.01 691.399 L1525.57 691.399 L1526.13 691.399 L1526.69 691.399 L1527.25 691.399 L1527.81 691.399 L1528.36 691.399 L1528.92 691.399 L1529.48 691.399 L1530.04 691.399 L1530.6 691.399 L1531.16 691.399 L1531.72 691.399 L1532.28 691.399 L1532.84 691.399 L1533.4 691.399 L1533.96 691.399 L1534.52 691.399 L1535.08 691.399 L1535.63 691.399 L1536.19 691.399 L1536.75 691.399 L1537.31 691.399 L1537.87 691.399 L1538.43 691.399 L1538.99 691.399 L1539.55 691.399 L1540.11 691.399 L1540.67 691.399 L1541.23 691.399 L1541.79 691.399 L1542.35 691.399 L1542.9 691.399 L1543.46 691.399 L1544.02 691.399 L1544.58 691.399 L1545.14 691.399 L1545.7 691.399 L1546.26 691.399 L1546.82 691.399 L1547.38 691.399 L1547.94 691.399 L1548.5 691.399 L1549.06 691.399 L1549.62 691.399 L1550.18 691.399 L1550.73 691.399 L1551.29 691.399 L1551.85 691.399 L1552.41 691.399 L1552.97 691.399 L1553.53 691.399 L1554.09 691.399 L1554.65 691.399 L1555.21 691.399 L1555.77 691.399 L1556.33 691.399 L1556.89 691.399 L1557.45 691.399 L1558 691.399 L1558.56 691.399 L1559.12 691.399 L1559.68 691.399 L1560.24 691.399 L1560.8 691.399 L1561.36 691.399 L1561.92 691.399 L1562.48 691.399 L1563.04 691.399 L1563.6 691.399 L1564.16 691.399 L1564.72 691.399 L1565.28 691.399 L1565.83 691.399 L1566.39 691.399 L1566.95 691.399 L1567.51 691.399 L1568.07 691.399 L1568.63 691.399 L1569.19 691.399 L1569.75 691.399 L1570.31 691.399 L1570.87 691.399 L1571.43 691.399 L1571.99 691.399 L1572.55 691.399 L1573.1 691.399 L1573.66 691.399 L1574.22 691.399 L1574.78 691.399 L1575.34 691.399 L1575.9 691.399 L1576.46 691.399 L1577.02 691.399 L1577.58 691.399 L1578.14 691.399 L1578.7 691.399 L1579.26 691.399 L1579.82 691.399 L1580.37 691.399 L1580.93 691.399 L1581.49 691.399 L1582.05 691.399 L1582.61 691.399 L1583.17 691.399 L1583.73 691.399 L1584.29 691.399 L1584.85 691.399 L1585.41 691.399 L1585.97 691.399 L1586.53 691.399 L1587.09 691.399 L1587.65 691.399 L1588.2 691.399 L1588.76 691.399 L1589.32 691.399 L1589.88 691.399 L1590.44 691.399 L1591 691.399 L1591.56 691.399 L1592.12 691.399 L1592.68 691.399 L1593.24 691.399 L1593.8 691.399 L1594.36 691.399 L1594.92 691.399 L1595.47 691.399 L1596.03 691.399 L1596.59 691.399 L1597.15 691.399 L1597.71 691.399 L1598.27 691.399 L1598.83 691.399 L1599.39 691.399 L1599.95 691.399 L1600.51 691.399 L1601.07 691.399 L1601.63 691.399 L1602.19 691.399 L1602.74 691.399 L1603.3 691.399 L1603.86 691.399 L1604.42 691.399 L1604.98 691.399 L1605.54 691.399 L1606.1 691.399 L1606.66 691.399 L1607.22 691.399 L1607.78 691.399 L1608.34 691.399 L1608.9 691.399 L1609.46 691.399 L1610.02 691.399 L1610.57 691.399 L1611.13 691.399 L1611.69 691.399 L1612.25 691.399 L1612.81 691.399 L1613.37 691.399 L1613.93 691.399 L1614.49 691.399 L1615.05 691.399 L1615.61 691.399 L1616.17 691.399 L1616.73 691.399 L1617.29 691.399 L1617.84 691.399 L1618.4 691.399 L1618.96 691.399 L1619.52 691.399 L1620.08 691.399 L1620.64 691.399 L1621.2 691.399 L1621.76 691.399 L1622.32 691.399 L1622.88 691.399 L1623.44 691.399 L1624 691.399 L1624.56 691.399 L1625.11 691.399 L1625.67 691.399 L1626.23 691.399 L1626.79 691.399 L1627.35 691.399 L1627.91 691.399 L1628.47 691.399 L1629.03 691.399 L1629.59 691.399 L1630.15 691.399 L1630.71 691.399 L1631.27 691.399 L1631.83 691.399 L1632.39 691.399 L1632.94 691.399 L1633.5 691.399 L1634.06 691.399 L1634.62 691.399 L1635.18 691.399 L1635.74 691.399 L1636.3 691.399 L1636.86 691.399 L1637.42 691.399 L1637.98 691.399 L1638.54 691.399 L1639.1 691.399 L1639.66 691.399 L1640.21 691.399 L1640.77 691.399 L1641.33 691.399 L1641.89 691.399 L1642.45 691.399 L1643.01 691.399 L1643.57 691.399 L1644.13 691.399 L1644.69 691.399 L1645.25 691.399 L1645.81 691.399 L1646.37 691.399 L1646.93 691.399 L1647.48 691.399 L1648.04 691.399 L1648.6 691.399 L1649.16 691.399 L1649.72 691.399 L1650.28 691.399 L1650.84 691.399 L1651.4 691.399 L1651.96 691.399 L1652.52 691.399 L1653.08 691.399 L1653.64 691.399 L1654.2 691.399 L1654.76 691.399 L1655.31 691.399 L1655.87 691.399 L1656.43 691.399 L1656.99 691.399 L1657.55 691.399 L1658.11 691.399 L1658.67 691.399 L1659.23 691.399 L1659.79 691.399 L1660.35 691.399 L1660.91 691.399 L1661.47 691.399 L1662.03 691.399 L1662.58 691.399 L1663.14 691.399 L1663.7 691.399 L1664.26 691.399 L1664.82 691.399 L1665.38 691.399 L1665.94 691.399 L1666.5 691.399 L1667.06 691.399 L1667.62 691.399 L1668.18 691.399 L1668.74 691.399 L1669.3 691.399 L1669.85 691.399 L1670.41 691.399 L1670.97 691.399 L1671.53 691.399 L1672.09 691.399 L1672.65 691.399 L1673.21 691.399 L1673.77 691.399 L1674.33 691.399 L1674.89 691.399 L1675.45 691.399 L1676.01 691.399 L1676.57 691.399 L1677.13 691.399 L1677.68 691.399 L1678.24 691.399 L1678.8 691.399 L1679.36 691.399 L1679.92 691.399 L1680.48 691.399 L1681.04 691.399 L1681.6 691.399 L1682.16 691.399 L1682.72 691.399 L1683.28 691.399 L1683.84 691.399 L1684.4 691.399 L1684.95 691.399 L1685.51 691.399 L1686.07 691.399 L1686.63 691.399 L1687.19 691.399 L1687.75 691.399 L1688.31 691.399 L1688.87 691.399 L1689.43 691.399 L1689.99 691.399 L1690.55 691.399 L1691.11 691.399 L1691.67 691.399 L1692.23 691.399 L1692.78 691.399 L1693.34 691.399 L1693.9 691.399 L1694.46 691.399 L1695.02 691.399 L1695.58 691.399 L1696.14 691.399 L1696.7 691.399 L1697.26 691.399 L1697.82 691.399 L1698.38 691.399 L1698.94 691.399 L1699.5 691.399 L1700.05 691.399 L1700.61 691.399 L1701.17 691.399 L1701.73 691.399 L1702.29 691.399 L1702.85 691.399 L1703.41 691.399 L1703.97 691.399 L1704.53 691.399 L1705.09 691.399 L1705.65 691.399 L1706.21 691.399 L1706.77 691.399 L1707.32 691.399 L1707.88 691.399 L1708.44 691.399 L1709 691.399 L1709.56 691.399 L1710.12 691.399 L1710.68 691.399 L1711.24 691.399 L1711.8 691.399 L1712.36 691.399 L1712.92 691.399 L1713.48 691.399 L1714.04 691.399 L1714.6 691.399 L1715.15 691.399 L1715.71 691.399 L1716.27 691.399 L1716.83 691.399 L1717.39 691.399 L1717.95 691.399 L1718.51 691.399 L1719.07 691.399 L1719.63 691.399 L1720.19 691.399 L1720.75 691.399 L1721.31 691.399 L1721.87 691.399 L1722.42 691.399 L1722.98 691.399 L1723.54 691.399 L1724.1 691.399 L1724.66 691.399 L1725.22 691.399 L1725.78 691.399 L1726.34 691.399 L1726.9 691.399 L1727.46 691.399 L1728.02 691.399 L1728.58 691.399 L1729.14 691.399 L1729.69 691.399 L1730.25 691.399 L1730.81 691.399 L1731.37 691.399 L1731.93 691.399 L1732.49 691.399 L1733.05 691.399 L1733.61 691.399 L1734.17 691.399 L1734.73 691.399 L1735.29 691.399 L1735.85 691.399 L1736.41 691.399 L1736.97 691.399 L1737.52 691.399 L1738.08 691.399 L1738.64 691.399 L1739.2 691.399 L1739.76 691.399 L1740.32 691.399 L1740.88 691.399 L1741.44 691.399 L1742 691.399 L1742.56 691.399 L1743.12 691.399 L1743.68 691.399 L1744.24 691.399 L1744.79 691.399 L1745.35 691.399 L1745.91 691.399 L1746.47 691.399 L1747.03 691.399 L1747.59 691.399 L1748.15 691.399 L1748.71 691.399 L1749.27 691.399 L1749.83 691.399 L1750.39 691.399 L1750.95 691.399 L1751.51 691.399 L1752.06 691.399 L1752.62 691.399 L1753.18 691.399 L1753.74 691.399 L1754.3 691.399 L1754.86 691.399 L1755.42 691.399 L1755.98 691.399 L1756.54 691.399 L1757.1 691.399 L1757.66 691.399 L1758.22 691.399 L1758.78 691.399 L1759.34 691.399 L1759.89 691.399 L1760.45 691.399 L1761.01 691.399 L1761.57 691.399 L1762.13 691.399 L1762.69 691.399 L1763.25 691.399 L1763.81 691.399 L1764.37 691.399 L1764.93 691.399 L1765.49 691.399 L1766.05 691.399 L1766.61 691.399 L1767.16 691.399 L1767.72 691.399 L1768.28 691.399 L1768.84 691.399 L1769.4 691.399 L1769.96 691.399 L1770.52 691.399 L1771.08 691.399 L1771.64 691.399 L1772.2 691.399 L1772.76 691.399 L1773.32 691.399 L1773.88 691.399 L1774.43 691.399 L1774.99 691.399 L1775.55 691.399 L1776.11 691.399 L1776.67 691.399 L1777.23 691.399 L1777.79 691.399 L1778.35 691.399 L1778.91 691.399 L1779.47 691.399 L1780.03 691.399 L1780.59 691.399 L1781.15 691.399 L1781.71 691.399 L1782.26 691.399 L1782.82 691.399 L1783.38 691.399 L1783.94 691.399 L1784.5 691.399 L1785.06 691.399 L1785.62 691.399 L1786.18 691.399 L1786.74 691.399 L1787.3 691.399 L1787.86 691.399 L1788.42 691.399 L1788.98 691.399 L1789.53 691.399 L1790.09 691.399 L1790.65 691.399 L1791.21 691.399 L1791.77 691.399 L1792.33 691.399 L1792.89 691.399 L1793.45 691.399 L1794.01 691.399 L1794.57 691.399 L1795.13 691.399 L1795.69 691.399 L1796.25 691.399 L1796.8 691.399 L1797.36 691.399 L1797.92 691.399 L1798.48 691.399 L1799.04 691.399 L1799.6 691.399 L1800.16 691.399 L1800.72 691.399 L1801.28 691.399 L1801.84 691.399 L1802.4 691.399 L1802.96 691.399 L1803.52 691.399 L1804.08 691.399 L1804.63 691.399 L1805.19 691.399 L1805.75 691.399 L1806.31 691.399 L1806.87 691.399 L1807.43 691.399 L1807.99 691.399 L1808.55 691.399 L1809.11 691.399 L1809.67 691.399 L1810.23 691.399 L1810.79 691.399 L1811.35 691.399 L1811.9 691.399 L1812.46 691.399 L1813.02 691.399 L1813.58 691.399 L1814.14 691.399 L1814.7 691.399 L1815.26 691.399 L1815.82 691.399 L1816.38 691.399 L1816.94 691.399 L1817.5 691.399 L1818.06 691.399 L1818.62 691.399 L1819.18 691.399 L1819.73 691.399 L1820.29 691.399 L1820.85 691.399 L1821.41 691.399 L1821.97 691.399 L1822.53 691.399 L1823.09 691.399 L1823.65 691.399 L1824.21 691.399 L1824.77 691.399 L1825.33 691.399 L1825.89 691.399 L1826.45 691.399 L1827 691.399 L1827.56 691.399 L1828.12 691.399 L1828.68 691.399 L1829.24 691.399 L1829.8 691.399 L1830.36 691.399 L1830.92 691.399 L1831.48 691.399 L1832.04 691.399 L1832.6 691.399 L1833.16 691.399 L1833.72 691.399 L1834.27 691.399 L1834.83 691.399 L1835.39 691.399 L1835.95 691.399 L1836.51 691.399 L1837.07 691.399 L1837.63 691.399 L1838.19 691.399 L1838.19 681.104 L1837.63 681.104 L1837.07 681.104 L1836.51 681.104 L1835.95 681.104 L1835.39 681.104 L1834.83 681.104 L1834.27 681.104 L1833.72 681.104 L1833.16 681.104 L1832.6 681.104 L1832.04 681.104 L1831.48 681.104 L1830.92 681.104 L1830.36 681.104 L1829.8 681.104 L1829.24 681.104 L1828.68 681.104 L1828.12 681.104 L1827.56 681.104 L1827 681.104 L1826.45 681.104 L1825.89 681.104 L1825.33 681.104 L1824.77 681.104 L1824.21 681.104 L1823.65 681.104 L1823.09 681.104 L1822.53 681.104 L1821.97 681.104 L1821.41 681.104 L1820.85 681.104 L1820.29 681.104 L1819.73 681.104 L1819.18 681.104 L1818.62 681.104 L1818.06 681.104 L1817.5 681.104 L1816.94 681.104 L1816.38 681.104 L1815.82 681.104 L1815.26 681.104 L1814.7 681.104 L1814.14 681.104 L1813.58 681.104 L1813.02 681.104 L1812.46 681.104 L1811.9 681.104 L1811.35 681.104 L1810.79 681.104 L1810.23 681.104 L1809.67 681.104 L1809.11 681.104 L1808.55 681.104 L1807.99 681.104 L1807.43 681.104 L1806.87 681.104 L1806.31 681.104 L1805.75 681.104 L1805.19 681.104 L1804.63 681.104 L1804.08 681.104 L1803.52 681.104 L1802.96 681.104 L1802.4 681.104 L1801.84 681.104 L1801.28 681.104 L1800.72 681.104 L1800.16 681.104 L1799.6 681.104 L1799.04 681.104 L1798.48 681.104 L1797.92 681.104 L1797.36 681.104 L1796.8 681.104 L1796.25 681.104 L1795.69 681.104 L1795.13 681.104 L1794.57 681.104 L1794.01 681.104 L1793.45 681.104 L1792.89 681.104 L1792.33 681.104 L1791.77 681.104 L1791.21 681.104 L1790.65 681.104 L1790.09 681.104 L1789.53 681.104 L1788.98 681.104 L1788.42 681.104 L1787.86 681.104 L1787.3 681.104 L1786.74 681.104 L1786.18 681.104 L1785.62 681.104 L1785.06 681.104 L1784.5 681.104 L1783.94 681.104 L1783.38 681.104 L1782.82 681.104 L1782.26 681.104 L1781.71 681.104 L1781.15 681.104 L1780.59 681.104 L1780.03 681.104 L1779.47 681.104 L1778.91 681.104 L1778.35 681.104 L1777.79 681.104 L1777.23 681.104 L1776.67 681.104 L1776.11 681.104 L1775.55 681.104 L1774.99 681.104 L1774.43 681.104 L1773.88 681.104 L1773.32 681.104 L1772.76 681.104 L1772.2 681.104 L1771.64 681.104 L1771.08 681.104 L1770.52 681.104 L1769.96 681.104 L1769.4 681.104 L1768.84 681.104 L1768.28 681.104 L1767.72 681.104 L1767.16 681.104 L1766.61 681.104 L1766.05 681.104 L1765.49 681.104 L1764.93 681.104 L1764.37 681.104 L1763.81 681.104 L1763.25 681.104 L1762.69 681.104 L1762.13 681.104 L1761.57 681.104 L1761.01 681.104 L1760.45 681.104 L1759.89 681.104 L1759.34 681.104 L1758.78 681.104 L1758.22 681.104 L1757.66 681.104 L1757.1 681.104 L1756.54 681.104 L1755.98 681.104 L1755.42 681.104 L1754.86 681.104 L1754.3 681.104 L1753.74 681.104 L1753.18 681.104 L1752.62 681.104 L1752.06 681.104 L1751.51 681.104 L1750.95 681.104 L1750.39 681.104 L1749.83 681.104 L1749.27 681.104 L1748.71 681.104 L1748.15 681.104 L1747.59 681.104 L1747.03 681.104 L1746.47 681.104 L1745.91 681.104 L1745.35 681.104 L1744.79 681.104 L1744.24 681.104 L1743.68 681.104 L1743.12 681.104 L1742.56 681.104 L1742 681.104 L1741.44 681.104 L1740.88 681.104 L1740.32 681.104 L1739.76 681.104 L1739.2 681.104 L1738.64 681.104 L1738.08 681.104 L1737.52 681.104 L1736.97 681.104 L1736.41 681.104 L1735.85 681.104 L1735.29 681.104 L1734.73 681.104 L1734.17 681.104 L1733.61 681.104 L1733.05 681.104 L1732.49 681.104 L1731.93 681.104 L1731.37 681.104 L1730.81 681.104 L1730.25 681.104 L1729.69 681.104 L1729.14 681.104 L1728.58 681.104 L1728.02 681.104 L1727.46 681.104 L1726.9 681.104 L1726.34 681.104 L1725.78 681.104 L1725.22 681.104 L1724.66 681.104 L1724.1 681.104 L1723.54 681.104 L1722.98 681.104 L1722.42 681.104 L1721.87 681.104 L1721.31 681.104 L1720.75 681.104 L1720.19 681.104 L1719.63 681.104 L1719.07 681.104 L1718.51 681.104 L1717.95 681.104 L1717.39 681.104 L1716.83 681.104 L1716.27 681.104 L1715.71 681.104 L1715.15 681.104 L1714.6 681.104 L1714.04 681.104 L1713.48 681.104 L1712.92 681.104 L1712.36 681.104 L1711.8 681.104 L1711.24 681.104 L1710.68 681.104 L1710.12 681.104 L1709.56 681.104 L1709 681.104 L1708.44 681.104 L1707.88 681.104 L1707.32 681.104 L1706.77 681.104 L1706.21 681.104 L1705.65 681.104 L1705.09 681.104 L1704.53 681.104 L1703.97 681.104 L1703.41 681.104 L1702.85 681.104 L1702.29 681.104 L1701.73 681.104 L1701.17 681.104 L1700.61 681.104 L1700.05 681.104 L1699.5 681.104 L1698.94 681.104 L1698.38 681.104 L1697.82 681.104 L1697.26 681.104 L1696.7 681.104 L1696.14 681.104 L1695.58 681.104 L1695.02 681.104 L1694.46 681.104 L1693.9 681.104 L1693.34 681.104 L1692.78 681.104 L1692.23 681.104 L1691.67 681.104 L1691.11 681.104 L1690.55 681.104 L1689.99 681.104 L1689.43 681.104 L1688.87 681.104 L1688.31 681.104 L1687.75 681.104 L1687.19 681.104 L1686.63 681.104 L1686.07 681.104 L1685.51 681.104 L1684.95 681.104 L1684.4 681.104 L1683.84 681.104 L1683.28 681.104 L1682.72 681.104 L1682.16 681.104 L1681.6 681.104 L1681.04 681.104 L1680.48 681.104 L1679.92 681.104 L1679.36 681.104 L1678.8 681.104 L1678.24 681.104 L1677.68 681.104 L1677.13 681.104 L1676.57 681.104 L1676.01 681.104 L1675.45 681.104 L1674.89 681.104 L1674.33 681.104 L1673.77 681.104 L1673.21 681.104 L1672.65 681.104 L1672.09 681.104 L1671.53 681.104 L1670.97 681.104 L1670.41 681.104 L1669.85 681.104 L1669.3 681.104 L1668.74 681.104 L1668.18 681.104 L1667.62 681.104 L1667.06 681.104 L1666.5 681.104 L1665.94 681.104 L1665.38 681.104 L1664.82 681.104 L1664.26 681.104 L1663.7 681.104 L1663.14 681.104 L1662.58 681.104 L1662.03 681.104 L1661.47 681.104 L1660.91 681.104 L1660.35 681.104 L1659.79 681.104 L1659.23 681.104 L1658.67 681.104 L1658.11 681.104 L1657.55 681.104 L1656.99 681.104 L1656.43 681.104 L1655.87 681.104 L1655.31 681.104 L1654.76 681.104 L1654.2 681.104 L1653.64 681.104 L1653.08 681.104 L1652.52 681.104 L1651.96 681.104 L1651.4 681.104 L1650.84 681.104 L1650.28 681.104 L1649.72 681.104 L1649.16 681.104 L1648.6 681.104 L1648.04 681.104 L1647.48 681.104 L1646.93 681.104 L1646.37 681.104 L1645.81 681.104 L1645.25 681.104 L1644.69 681.104 L1644.13 681.104 L1643.57 681.104 L1643.01 681.104 L1642.45 681.104 L1641.89 681.104 L1641.33 681.104 L1640.77 681.104 L1640.21 681.104 L1639.66 681.104 L1639.1 681.104 L1638.54 681.104 L1637.98 681.104 L1637.42 681.104 L1636.86 681.104 L1636.3 681.104 L1635.74 681.104 L1635.18 681.104 L1634.62 681.104 L1634.06 681.104 L1633.5 681.104 L1632.94 681.104 L1632.39 681.104 L1631.83 681.104 L1631.27 681.104 L1630.71 681.104 L1630.15 681.104 L1629.59 681.104 L1629.03 681.104 L1628.47 681.104 L1627.91 681.104 L1627.35 681.104 L1626.79 681.104 L1626.23 681.104 L1625.67 681.104 L1625.11 681.104 L1624.56 681.104 L1624 681.104 L1623.44 681.104 L1622.88 681.104 L1622.32 681.104 L1621.76 681.104 L1621.2 681.104 L1620.64 681.104 L1620.08 681.104 L1619.52 681.104 L1618.96 681.104 L1618.4 681.104 L1617.84 681.104 L1617.29 681.104 L1616.73 681.104 L1616.17 681.104 L1615.61 681.104 L1615.05 681.104 L1614.49 681.104 L1613.93 681.104 L1613.37 681.104 L1612.81 681.104 L1612.25 681.104 L1611.69 681.104 L1611.13 681.104 L1610.57 681.104 L1610.02 681.104 L1609.46 681.104 L1608.9 681.104 L1608.34 681.104 L1607.78 681.104 L1607.22 681.104 L1606.66 681.104 L1606.1 681.104 L1605.54 681.104 L1604.98 681.104 L1604.42 681.104 L1603.86 681.104 L1603.3 681.104 L1602.74 681.104 L1602.19 681.104 L1601.63 681.104 L1601.07 681.104 L1600.51 681.104 L1599.95 681.104 L1599.39 681.104 L1598.83 681.104 L1598.27 681.104 L1597.71 681.104 L1597.15 681.104 L1596.59 681.104 L1596.03 681.104 L1595.47 681.104 L1594.92 681.104 L1594.36 681.104 L1593.8 681.104 L1593.24 681.104 L1592.68 681.104 L1592.12 681.104 L1591.56 681.104 L1591 681.104 L1590.44 681.104 L1589.88 681.104 L1589.32 681.104 L1588.76 681.104 L1588.2 681.104 L1587.65 681.104 L1587.09 681.104 L1586.53 681.104 L1585.97 681.104 L1585.41 681.104 L1584.85 681.104 L1584.29 681.104 L1583.73 681.104 L1583.17 681.104 L1582.61 681.104 L1582.05 681.104 L1581.49 681.104 L1580.93 681.104 L1580.37 681.104 L1579.82 681.104 L1579.26 681.104 L1578.7 681.104 L1578.14 681.104 L1577.58 681.104 L1577.02 681.104 L1576.46 681.104 L1575.9 681.104 L1575.34 681.104 L1574.78 681.104 L1574.22 681.104 L1573.66 681.104 L1573.1 681.104 L1572.55 681.104 L1571.99 681.104 L1571.43 681.104 L1570.87 681.104 L1570.31 681.104 L1569.75 681.104 L1569.19 681.104 L1568.63 681.104 L1568.07 681.104 L1567.51 681.104 L1566.95 681.104 L1566.39 681.104 L1565.83 681.104 L1565.28 681.104 L1564.72 681.104 L1564.16 681.104 L1563.6 681.104 L1563.04 681.104 L1562.48 681.104 L1561.92 681.104 L1561.36 681.104 L1560.8 681.104 L1560.24 681.104 L1559.68 681.104 L1559.12 681.104 L1558.56 681.104 L1558 681.104 L1557.45 681.104 L1556.89 681.104 L1556.33 681.104 L1555.77 681.104 L1555.21 681.104 L1554.65 681.104 L1554.09 681.104 L1553.53 681.104 L1552.97 681.104 L1552.41 681.104 L1551.85 681.104 L1551.29 681.104 L1550.73 681.104 L1550.18 681.104 L1549.62 681.104 L1549.06 681.104 L1548.5 681.104 L1547.94 681.104 L1547.38 681.104 L1546.82 681.104 L1546.26 681.104 L1545.7 681.104 L1545.14 681.104 L1544.58 681.104 L1544.02 681.104 L1543.46 681.104 L1542.9 681.104 L1542.35 681.104 L1541.79 681.104 L1541.23 681.104 L1540.67 681.104 L1540.11 681.104 L1539.55 681.104 L1538.99 681.104 L1538.43 681.104 L1537.87 681.104 L1537.31 681.104 L1536.75 681.104 L1536.19 681.104 L1535.63 681.104 L1535.08 681.104 L1534.52 681.104 L1533.96 681.104 L1533.4 681.104 L1532.84 681.104 L1532.28 681.104 L1531.72 681.104 L1531.16 681.104 L1530.6 681.104 L1530.04 681.104 L1529.48 681.104 L1528.92 681.104 L1528.36 681.104 L1527.81 681.104 L1527.25 681.104 L1526.69 681.104 L1526.13 681.104 L1525.57 681.104 L1525.01 681.104 L1524.45 681.104 L1523.89 681.104 L1523.33 681.104 L1522.77 681.104 L1522.21 681.104 L1521.65 681.104 L1521.09 681.104 L1520.53 681.104 L1519.98 681.104 L1519.42 681.104 L1518.86 681.104 L1518.3 681.104 L1517.74 681.104 L1517.18 681.104 L1516.62 681.104 L1516.06 681.104 L1515.5 681.104 L1514.94 681.104 L1514.38 681.104 L1513.82 681.104 L1513.26 681.104 L1512.71 681.104 L1512.15 681.104 L1511.59 681.104 L1511.03 681.104 L1510.47 681.104 L1509.91 681.104 L1509.35 681.104 L1508.79 681.104 L1508.23 681.104 L1507.67 681.104 L1507.11 681.104 L1506.55 681.104 L1505.99 681.104 L1505.44 681.104 L1504.88 681.104 L1504.32 681.104 L1503.76 681.104 L1503.2 681.104 L1502.64 681.104 L1502.08 681.104 L1501.52 681.104 L1500.96 681.104 L1500.4 681.104 L1499.84 681.104 L1499.28 681.104 L1498.72 681.104 L1498.16 681.104 L1497.61 681.104 L1497.05 681.104 L1496.49 681.104 L1495.93 681.104 L1495.37 681.104 L1494.81 681.104 L1494.25 681.104 L1493.69 681.104 L1493.13 681.104 L1492.57 681.104 L1492.01 681.104 L1491.45 681.104 L1490.89 681.104 L1490.34 681.104 L1489.78 681.104 L1489.22 681.104 L1488.66 681.104 L1488.1 681.104 L1487.54 681.104 L1486.98 681.104 L1486.42 681.104 L1485.86 681.104 L1485.3 681.104 L1484.74 681.104 L1484.18 681.104 L1483.62 681.104 L1483.07 681.104 L1482.51 681.104 L1481.95 681.104 L1481.39 681.104 L1480.83 681.104 L1480.27 681.104 L1479.71 681.104 L1479.15 681.104 L1478.59 681.104 L1478.03 681.104 L1477.47 681.104 L1476.91 681.104 L1476.35 681.104 L1475.79 681.104 L1475.24 681.104 L1474.68 681.104 L1474.12 681.104 L1473.56 681.104 L1473 681.104 L1472.44 681.104 L1471.88 681.104 L1471.32 681.104 L1470.76 681.104 L1470.2 681.104 L1469.64 681.104 L1469.08 681.104 L1468.52 681.104 L1467.97 681.104 L1467.41 681.104 L1466.85 681.104 L1466.29 681.104 L1465.73 681.104 L1465.17 681.104 L1464.61 681.104 L1464.05 681.104 L1463.49 681.104 L1462.93 681.104 L1462.37 681.104 L1461.81 681.104 L1461.25 681.104 L1460.7 681.104 L1460.14 681.104 L1459.58 681.104 L1459.02 681.104 L1458.46 681.104 L1457.9 681.104 L1457.34 681.104 L1456.78 681.104 L1456.22 681.104 L1455.66 681.104 L1455.1 681.104 L1454.54 681.104 L1453.98 681.104 L1453.42 681.104 L1452.87 681.104 L1452.31 681.104 L1451.75 681.104 L1451.19 681.104 L1450.63 681.104 L1450.07 681.104 L1449.51 681.104 L1448.95 681.104 L1448.39 681.104 L1447.83 681.104 L1447.27 681.104 L1446.71 681.104 L1446.15 681.104 L1445.6 681.104 L1445.04 681.104 L1444.48 681.104 L1443.92 681.104 L1443.36 681.104 L1442.8 681.104 L1442.24 681.104 L1441.68 681.104 L1441.12 681.104 L1440.56 681.104 L1440 681.104 L1439.44 681.104 L1438.88 681.104 L1438.33 681.104 L1437.77 681.104 L1437.21 681.104 L1436.65 681.104 L1436.09 681.104 L1435.53 681.104 L1434.97 681.104 L1434.41 681.104 L1433.85 681.104 L1433.29 681.104 L1432.73 681.104 L1432.17 681.104 L1431.61 681.104 L1431.05 681.104 L1430.5 681.104 L1429.94 681.104 L1429.38 681.104 L1428.82 681.104 L1428.26 681.104 L1427.7 681.104 L1427.14 681.104 L1426.58 681.104 L1426.02 681.104 L1425.46 681.104 L1424.9 681.104 L1424.34 681.104 L1423.78 681.104 L1423.23 681.104 L1422.67 681.104 L1422.11 681.104 L1421.55 681.104 L1420.99 681.104 L1420.43 681.104 L1419.87 681.104 L1419.31 681.104 L1418.75 681.104 L1418.19 681.104 L1417.63 681.104 L1417.07 681.104 L1416.51 681.104 L1415.95 681.104 L1415.4 681.104 L1414.84 681.104 L1414.28 681.104 L1413.72 681.104 L1413.16 681.104 L1412.6 681.104 L1412.04 681.104 L1411.48 681.104 L1410.92 681.104 L1410.36 681.104 L1409.8 681.104 L1409.24 681.104 L1408.68 681.104 L1408.13 681.104 L1407.57 681.104 L1407.01 681.104 L1406.45 681.104 L1405.89 681.104 L1405.33 681.104 L1404.77 681.104 L1404.21 681.104 L1403.65 681.104 L1403.09 681.104 L1402.53 681.104 L1401.97 681.104 L1401.41 681.104 L1400.86 681.104 L1400.3 681.104 L1399.74 681.104 L1399.18 681.104 L1398.62 681.104 L1398.06 681.104 L1397.5 681.104 L1396.94 681.104 L1396.38 681.104 L1395.82 681.104 L1395.26 681.104 L1394.7 681.104 L1394.14 681.104 L1393.58 681.104 L1393.03 681.104 L1392.47 681.104 L1391.91 681.104 L1391.35 681.104 L1390.79 681.104 L1390.23 681.104 L1389.67 681.104 L1389.11 681.104 L1388.55 681.104 L1387.99 681.104 L1387.43 681.104 L1386.87 681.104 L1386.31 681.104 L1385.76 681.104 L1385.2 681.104 L1384.64 681.104 L1384.08 681.104 L1383.52 681.104 L1382.96 681.104 L1382.4 681.104 L1381.84 681.104 L1381.28 681.104 L1380.72 681.104 L1380.16 681.104 L1379.6 681.104 L1379.04 681.104 L1378.49 681.104 L1377.93 681.104 L1377.37 681.104 L1376.81 681.104 L1376.25 681.104 L1375.69 681.104 L1375.13 681.104 L1374.57 681.104 L1374.01 681.104 L1373.45 681.104 L1372.89 681.104 L1372.33 681.104 L1371.77 681.104 L1371.21 681.104 L1370.66 681.104 L1370.1 681.104 L1369.54 681.104 L1368.98 681.104 L1368.42 681.104 L1367.86 681.104 L1367.3 681.104 L1366.74 681.104 L1366.18 681.104 L1365.62 681.104 L1365.06 681.104 L1364.5 681.104 L1363.94 681.104 L1363.39 681.104 L1362.83 681.104 L1362.27 681.104 L1361.71 681.104 L1361.15 681.104 L1360.59 681.104 L1360.03 681.104 L1359.47 681.104 L1358.91 681.104 L1358.35 681.104 L1357.79 681.104 L1357.23 681.104 L1356.67 681.104 L1356.12 681.104 L1355.56 681.104 L1355 681.104 L1354.44 681.104 L1353.88 681.104 L1353.32 681.104 L1352.76 681.104 L1352.2 681.104 L1351.64 681.104 L1351.08 681.104 L1350.52 681.104 L1349.96 681.104 L1349.4 681.104 L1348.84 681.104 L1348.29 681.104 L1347.73 681.104 L1347.17 681.104 L1346.61 681.104 L1346.05 681.104 L1345.49 681.104 L1344.93 681.104 L1344.37 681.104 L1343.81 681.104 L1343.25 681.104 L1342.69 681.104 L1342.13 681.104 L1341.57 681.104 L1341.02 681.104 L1340.46 681.104 L1339.9 681.104 L1339.34 681.104 L1338.78 681.104 L1338.22 681.104 L1337.66 681.104 L1337.1 681.104 L1336.54 681.104 L1335.98 681.104 L1335.42 681.104 L1334.86 681.104 L1334.3 681.104 L1333.75 681.104 L1333.19 681.104 L1332.63 681.104 L1332.07 681.104 L1331.51 681.104 L1330.95 681.104 L1330.39 681.104 L1329.83 681.104 L1329.27 681.104 L1328.71 681.104 L1328.15 681.104 L1327.59 681.104 L1327.03 681.104 L1326.47 681.104 L1325.92 681.104 L1325.36 681.104 L1324.8 681.104 L1324.24 681.104 L1323.68 681.104 L1323.12 681.104 L1322.56 681.104 L1322 681.104 L1321.44 681.104 L1320.88 681.104 L1320.32 681.104 L1319.76 681.104 L1319.2 681.104 L1318.65 681.104 L1318.09 681.104 L1317.53 681.104 L1316.97 681.104 L1316.41 681.104 L1315.85 681.104 L1315.29 681.104 L1314.73 681.104 L1314.17 681.104 L1313.61 681.104 L1313.05 681.104 L1312.49 681.104 L1311.93 681.104 L1311.38 681.104 L1310.82 681.104 L1310.26 681.104 L1309.7 681.104 L1309.14 681.104 L1308.58 681.104 L1308.02 681.104 L1307.46 681.104 L1306.9 681.104 L1306.34 681.104 L1305.78 681.104 L1305.22 681.104 L1304.66 681.104 L1304.1 681.104 L1303.55 681.104 L1302.99 681.104 L1302.43 681.104 L1301.87 681.104 L1301.31 681.104 L1300.75 681.104 L1300.19 681.104 L1299.63 681.104 L1299.07 681.104 L1298.51 681.104 L1297.95 681.104 L1297.39 681.104 L1296.83 681.104 L1296.28 681.104 L1295.72 681.104 L1295.16 681.104 L1294.6 681.104 L1294.04 681.104 L1293.48 681.104 L1292.92 681.104 L1292.36 681.104 L1291.8 681.104 L1291.24 681.104 L1290.68 681.104 L1290.12 681.104 L1289.56 681.104 L1289 681.104 L1288.45 681.104 L1287.89 681.104 L1287.33 681.104 L1286.77 681.104 L1286.21 681.104 L1285.65 681.104 L1285.09 681.104 L1284.53 681.104 L1283.97 681.104 L1283.41 681.104 L1282.85 681.104 L1282.29 681.104 L1281.73 681.104 L1281.18 681.104 L1280.62 681.104 L1280.06 681.104 L1279.5 681.104 L1278.94 681.104 L1278.38 681.104 L1277.82 681.104 L1277.26 681.104 L1276.7 681.104 L1276.14 681.104 L1275.58 681.104 L1275.02 681.104 L1274.46 681.104 L1273.91 681.104 L1273.35 681.104 L1272.79 681.104 L1272.23 681.104 L1271.67 681.104 L1271.11 681.104 L1270.55 681.104 L1269.99 681.104 L1269.43 681.104 L1268.87 681.104 L1268.31 681.104 L1267.75 681.104 L1267.19 681.104 L1266.63 681.104 L1266.08 681.104 L1265.52 681.104 L1264.96 681.104 L1264.4 681.104 L1263.84 681.104 L1263.28 681.104 L1262.72 681.104 L1262.16 681.104 L1261.6 681.104 L1261.04 681.104 L1260.48 681.104 L1259.92 681.104 L1259.36 681.104 L1258.81 681.104 L1258.25 681.104 L1257.69 681.104 L1257.13 681.104 L1256.57 681.104 L1256.01 681.104 L1255.45 681.104 L1254.89 681.104 L1254.33 681.104 L1253.77 681.104 L1253.21 681.104 L1252.65 681.104 L1252.09 681.104 L1251.54 681.104 L1250.98 681.104 L1250.42 681.104 L1249.86 681.104 L1249.3 681.104 L1248.74 681.104 L1248.18 681.104 L1247.62 681.104 L1247.06 681.104 L1246.5 681.104 L1245.94 681.104 L1245.38 681.104 L1244.82 681.104 L1244.26 681.104 L1243.71 681.104 L1243.15 681.104 L1242.59 681.104 L1242.03 681.104 L1241.47 681.104 L1240.91 681.104 L1240.35 681.104 L1239.79 681.104 L1239.23 681.104 L1238.67 681.104 L1238.11 681.104 L1237.55 681.104 L1236.99 681.104 L1236.44 681.104 L1235.88 681.104 L1235.32 681.104 L1234.76 681.104 L1234.2 681.104 L1233.64 681.104 L1233.08 681.104 L1232.52 681.104 L1231.96 681.104 L1231.4 681.104 L1230.84 681.104 L1230.28 681.104 L1229.72 681.104 L1229.17 681.104 L1228.61 681.104 L1228.05 681.104 L1227.49 681.104 L1226.93 681.104 L1226.37 681.104 L1225.81 681.104 L1225.25 681.104 L1224.69 681.104 L1224.13 681.104 L1223.57 681.104 L1223.01 681.104 L1222.45 681.104 L1221.89 681.104 L1221.34 681.104 L1220.78 681.104 L1220.22 681.104 L1219.66 681.104 L1219.1 681.104 L1218.54 681.104 L1217.98 681.104 L1217.42 681.104 L1216.86 681.104 L1216.3 681.104 L1215.74 681.104 L1215.18 681.104 L1214.62 681.104 L1214.07 681.104 L1213.51 681.104 L1212.95 681.104 L1212.39 681.104 L1211.83 681.104 L1211.27 681.104 L1210.71 681.104 L1210.15 681.104 L1209.59 681.104 L1209.03 681.104 L1208.47 681.104 L1207.91 681.104 L1207.35 681.104 L1206.8 681.104 L1206.24 681.104 L1205.68 681.104 L1205.12 681.104 L1204.56 681.104 L1204 681.104 L1203.44 681.104 L1202.88 681.104 L1202.32 681.104 L1201.76 681.104 L1201.2 681.104 L1200.64 681.104 L1200.08 681.104 L1199.52 681.104 L1198.97 681.104 L1198.41 681.104 L1197.85 681.104 L1197.29 681.104 L1196.73 681.104 L1196.17 681.104 L1195.61 681.104 L1195.05 681.104 L1194.49 681.104 L1193.93 681.104 L1193.37 681.104 L1192.81 681.104 L1192.25 681.104 L1191.7 681.104 L1191.14 681.104 L1190.58 681.104 L1190.02 681.104 L1189.46 681.104 L1188.9 681.104 L1188.34 681.104 L1187.78 681.104 L1187.22 681.104 L1186.66 681.104 L1186.1 681.104 L1185.54 681.104 L1184.98 681.104 L1184.43 681.104 L1183.87 681.104 L1183.31 681.104 L1182.75 681.104 L1182.19 681.104 L1181.63 681.104 L1181.07 681.104 L1180.51 681.104 L1179.95 681.104 L1179.39 681.104 L1178.83 681.104 L1178.27 681.104 L1177.71 681.104 L1177.15 681.104 L1176.6 681.104 L1176.04 681.104 L1175.48 681.104 L1174.92 681.104 L1174.36 681.104 L1173.8 681.104 L1173.24 681.104 L1172.68 681.104 L1172.12 681.104 L1171.56 681.104 L1171 681.104 L1170.44 681.104 L1169.88 681.104 L1169.33 681.104 L1168.77 681.104 L1168.21 681.104 L1167.65 681.104 L1167.09 681.104 L1166.53 681.104 L1165.97 681.104 L1165.41 681.104 L1164.85 681.104 L1164.29 681.104 L1163.73 681.104 L1163.17 681.104 L1162.61 681.104 L1162.05 681.104 L1161.5 681.104 L1160.94 681.104 L1160.38 681.104 L1159.82 681.104 L1159.26 681.104 L1158.7 681.104 L1158.14 681.104 L1157.58 681.104 L1157.02 681.104 L1156.46 681.104 L1155.9 681.104 L1155.34 681.104 L1154.78 681.104 L1154.23 681.104 L1153.67 681.104 L1153.11 681.104 L1152.55 681.104 L1151.99 681.104 L1151.43 681.104 L1150.87 681.104 L1150.31 681.104 L1149.75 681.104 L1149.19 681.104 L1148.63 681.104 L1148.07 681.104 L1147.51 681.104 L1146.96 681.104 L1146.4 681.104 L1145.84 681.104 L1145.28 681.104 L1144.72 681.104 L1144.16 681.104 L1143.6 681.104 L1143.04 681.104 L1142.48 681.104 L1141.92 681.104 L1141.36 681.104 L1140.8 681.104 L1140.24 681.104 L1139.68 681.104 L1139.13 681.104 L1138.57 681.104 L1138.01 681.104 L1137.45 681.104 L1136.89 681.104 L1136.33 681.104 L1135.77 681.104 L1135.21 681.104 L1134.65 681.104 L1134.09 681.104 L1133.53 681.104 L1132.97 681.104 L1132.41 681.104 L1131.86 681.104 L1131.3 681.104 L1130.74 681.104 L1130.18 681.104 L1129.62 681.104 L1129.06 681.104 L1128.5 681.104 L1127.94 681.104 L1127.38 681.104 L1126.82 681.104 L1126.26 681.104 L1125.7 681.104 L1125.14 681.104 L1124.59 681.104 L1124.03 681.104 L1123.47 681.104 L1122.91 681.104 L1122.35 681.104 L1121.79 681.104 L1121.23 681.104 L1120.67 681.104 L1120.11 681.104 L1119.55 681.104 L1118.99 681.104 L1118.43 681.104 L1117.87 681.104 L1117.31 681.104 L1116.76 681.104 L1116.2 681.104 L1115.64 681.104 L1115.08 681.104 L1114.52 681.104 L1113.96 681.104 L1113.4 681.104 L1112.84 681.104 L1112.28 681.104 L1111.72 681.104 L1111.16 681.104 L1110.6 681.104 L1110.04 681.104 L1109.49 681.104 L1108.93 681.104 L1108.37 681.104 L1107.81 681.104 L1107.25 681.104 L1106.69 681.104 L1106.13 681.104 L1105.57 681.104 L1105.01 681.104 L1104.45 681.104 L1103.89 681.104 L1103.33 681.104 L1102.77 681.104 L1102.22 681.104 L1101.66 681.104 L1101.1 681.104 L1100.54 681.104 L1099.98 681.104 L1099.42 681.104 L1098.86 681.104 L1098.3 681.104 L1097.74 681.104 L1097.18 681.104 L1096.62 681.104 L1096.06 681.104 L1095.5 681.104 L1094.94 681.104 L1094.39 681.104 L1093.83 681.104 L1093.27 681.104 L1092.71 681.104 L1092.15 681.104 L1091.59 681.104 L1091.03 681.104 L1090.47 681.104 L1089.91 681.104 L1089.35 681.104 L1088.79 681.104 L1088.23 681.104 L1087.67 681.104 L1087.12 681.104 L1086.56 681.104 L1086 681.104 L1085.44 681.104 L1084.88 681.104 L1084.32 681.104 L1083.76 681.104 L1083.2 681.104 L1082.64 681.104 L1082.08 681.104 L1081.52 681.104 L1080.96 681.104 L1080.4 681.104 L1079.85 681.104 L1079.29 681.104 L1078.73 681.104 L1078.17 681.104 L1077.61 681.104 L1077.05 681.104 L1076.49 681.104 L1075.93 681.104 L1075.37 681.104 L1074.81 681.104 L1074.25 681.104 L1073.69 681.104 L1073.13 681.104 L1072.57 681.104 L1072.02 681.104 L1071.46 681.104 L1070.9 681.104 L1070.34 681.104 L1069.78 681.104 L1069.22 681.104 L1068.66 681.104 L1068.1 681.104 L1067.54 681.104 L1066.98 681.104 L1066.42 681.104 L1065.86 681.104 L1065.3 681.104 L1064.75 681.104 L1064.19 681.104 L1063.63 681.104 L1063.07 681.104 L1062.51 681.104 L1061.95 681.104 L1061.39 681.104 L1060.83 681.104 L1060.27 681.104 L1059.71 681.104 L1059.15 681.104 L1058.59 681.104 L1058.03 681.104 L1057.48 681.104 L1056.92 681.104 L1056.36 681.104 L1055.8 681.104 L1055.24 681.104 L1054.68 681.104 L1054.12 681.104 L1053.56 681.104 L1053 681.104 L1052.44 681.104 L1051.88 681.104 L1051.32 681.104 L1050.76 681.104 L1050.2 681.104 L1049.65 681.104 L1049.09 681.104 L1048.53 681.104 L1047.97 681.104 L1047.41 681.104 L1046.85 681.104 L1046.29 681.104 L1045.73 681.104 L1045.17 681.104 L1044.61 681.104 L1044.05 681.104 L1043.49 681.104 L1042.93 681.104 L1042.38 681.104 L1041.82 681.104 L1041.26 681.104 L1040.7 681.104 L1040.14 681.104 L1039.58 681.104 L1039.02 681.104 L1038.46 681.104 L1037.9 681.104 L1037.34 681.104 L1036.78 681.104 L1036.22 681.104 L1035.66 681.104 L1035.1 681.104 L1034.55 681.104 L1033.99 681.104 L1033.43 681.104 L1032.87 681.104 L1032.31 681.104 L1031.75 681.104 L1031.19 681.104 L1030.63 681.104 L1030.07 681.104 L1029.51 681.104 L1028.95 681.104 L1028.39 681.104 L1027.83 681.104 L1027.28 681.104 L1026.72 681.104 L1026.16 681.104 L1025.6 681.104 L1025.04 681.104 L1024.48 681.104 L1023.92 681.104 L1023.36 681.104 L1022.8 681.104 L1022.24 681.104 L1021.68 681.104 L1021.12 681.104 L1020.56 681.104 L1020.01 681.104 L1019.45 681.104 L1018.89 681.104 L1018.33 681.104 L1017.77 681.104 L1017.21 681.104 L1016.65 681.104 L1016.09 681.104 L1015.53 681.104 L1014.97 681.104 L1014.41 681.104 L1013.85 681.104 L1013.29 681.104 L1012.73 681.104 L1012.18 681.104 L1011.62 681.104 L1011.06 681.104 L1010.5 681.104 L1009.94 681.104 L1009.38 681.104 L1008.82 681.104 L1008.26 681.104 L1007.7 681.104 L1007.14 681.104 L1006.58 681.104 L1006.02 681.104 L1005.46 681.104 L1004.91 681.104 L1004.35 681.104 L1003.79 681.104 L1003.23 681.104 L1002.67 681.104 L1002.11 681.104 L1001.55 681.104 L1000.99 681.104 L1000.43 681.104 L999.872 681.104 L999.313 681.104 L998.754 681.104 L998.194 681.104 L997.635 681.104 L997.076 681.104 L996.517 681.104 L995.957 681.104 L995.398 681.104 L994.839 681.104 L994.28 681.104 L993.72 681.104 L993.161 681.104 L992.602 681.104 L992.043 681.104 L991.483 681.104 L990.924 681.104 L990.365 681.104 L989.806 681.104 L989.246 681.104 L988.687 681.104 L988.128 681.104 L987.569 681.104 L987.009 681.104 L986.45 681.104 L985.891 681.104 L985.332 681.104 L984.772 681.104 L984.213 681.104 L983.654 681.104 L983.095 681.104 L982.535 681.104 L981.976 681.104 L981.417 681.104 L980.858 681.104 L980.298 681.104 L979.739 681.104 L979.18 681.104 L978.621 681.104 L978.061 681.104 L977.502 681.104 L976.943 681.104 L976.384 681.104 L975.824 681.104 L975.265 681.104 L974.706 681.104 L974.147 681.104 L973.587 681.104 L973.028 681.104 L972.469 681.104 L971.91 681.104 L971.35 681.104 L970.791 681.104 L970.232 681.104 L969.673 681.104 L969.113 681.104 L968.554 681.104 L967.995 681.104 L967.436 681.104 L966.876 681.104 L966.317 681.104 L965.758 681.104 L965.199 681.104 L964.639 681.104 L964.08 681.104 L963.521 681.104 L962.962 681.104 L962.402 681.104 L961.843 681.104 L961.284 681.104 L960.725 681.104 L960.165 681.104 L959.606 681.104 L959.047 681.104 L958.488 681.104 L957.928 681.104 L957.369 681.104 L956.81 681.104 L956.251 681.104 L955.691 681.104 L955.132 681.104 L954.573 681.104 L954.014 681.104 L953.454 681.104 L952.895 681.104 L952.336 681.104 L951.777 681.104 L951.217 681.104 L950.658 681.104 L950.099 681.104 L949.54 681.104 L948.98 681.104 L948.421 681.104 L947.862 681.104 L947.303 681.104 L946.743 681.104 L946.184 681.104 L945.625 681.104 L945.066 681.104 L944.506 681.104 L943.947 681.104 L943.388 681.104 L942.829 681.104 L942.269 681.104 L941.71 681.104 L941.151 681.104 L940.592 681.104 L940.032 681.104 L939.473 681.104 L938.914 681.104 L938.355 681.104 L937.795 681.104 L937.236 681.104 L936.677 681.104 L936.118 681.104 L935.558 681.104 L934.999 681.104 L934.44 681.104 L933.881 681.104 L933.321 681.104 L932.762 681.104 L932.203 681.104 L931.644 681.104 L931.084 681.104 L930.525 681.104 L929.966 681.104 L929.406 681.104 L928.847 681.104 L928.288 681.104 L927.729 681.104 L927.169 681.104 L926.61 681.104 L926.051 681.104 L925.492 681.104 L924.932 681.104 L924.373 681.104 L923.814 681.104 L923.255 681.104 L922.695 681.104 L922.136 681.104 L921.577 681.104 L921.018 681.104 L920.458 681.104 L919.899 681.104 L919.34 681.104 L918.781 681.104 L918.221 681.104 L917.662 681.104 L917.103 681.104 L916.544 681.104 L915.984 681.104 L915.425 681.104 L914.866 681.104 L914.307 681.104 L913.747 681.104 L913.188 681.104 L912.629 681.104 L912.07 681.104 L911.51 681.104 L910.951 681.104 L910.392 681.104 L909.833 681.104 L909.273 681.104 L908.714 681.104 L908.155 681.104 L907.596 681.104 L907.036 681.104 L906.477 681.104 L905.918 681.104 L905.359 681.104 L904.799 681.104 L904.24 681.104 L903.681 681.104 L903.122 681.104 L902.562 681.104 L902.003 681.104 L901.444 681.104 L900.885 681.104 L900.325 681.104 L899.766 681.104 L899.207 681.104 L898.648 681.104 L898.088 681.104 L897.529 681.104 L896.97 681.104 L896.411 681.104 L895.851 681.104 L895.292 681.104 L894.733 681.104 L894.174 681.104 L893.614 681.104 L893.055 681.104 L892.496 681.104 L891.937 681.104 L891.377 681.104 L890.818 681.104 L890.259 681.104 L889.7 681.104 L889.14 681.104 L888.581 681.104 L888.022 681.104 L887.463 681.104 L886.903 681.104 L886.344 681.104 L885.785 681.104 L885.226 681.104 L884.666 681.104 L884.107 681.104 L883.548 681.104 L882.989 681.104 L882.429 681.104 L881.87 681.104 L881.311 681.104 L880.752 681.104 L880.192 681.104 L879.633 681.104 L879.074 681.104 L878.515 681.104 L877.955 681.104 L877.396 681.104 L876.837 681.104 L876.278 681.104 L875.718 681.104 L875.159 681.104 L874.6 681.104 L874.041 681.104 L873.481 681.104 L872.922 681.104 L872.363 681.104 L871.804 681.104 L871.244 681.104 L870.685 681.104 L870.126 681.104 L869.567 681.104 L869.007 681.104 L868.448 681.104 L867.889 681.104 L867.33 681.104 L866.77 681.104 L866.211 681.104 L865.652 681.104 L865.093 681.104 L864.533 681.104 L863.974 681.104 L863.415 681.104 L862.856 681.104 L862.296 681.104 L861.737 681.104 L861.178 681.104 L860.619 681.104 L860.059 681.104 L859.5 681.104 L858.941 681.104 L858.382 681.104 L857.822 681.104 L857.263 681.104 L856.704 681.104 L856.145 681.104 L855.585 681.104 L855.026 681.104 L854.467 681.104 L853.908 681.104 L853.348 681.104 L852.789 681.104 L852.23 681.104 L851.671 681.104 L851.111 681.104 L850.552 681.104 L849.993 681.104 L849.434 681.104 L848.874 681.104 L848.315 681.104 L847.756 681.104 L847.197 681.104 L846.637 681.104 L846.078 681.104 L845.519 681.104 L844.96 681.104 L844.4 681.104 L843.841 681.104 L843.282 681.104 L842.723 681.104 L842.163 681.104 L841.604 681.104 L841.045 681.104 L840.486 681.104 L839.926 681.104 L839.367 681.104 L838.808 681.104 L838.249 681.104 L837.689 681.104 L837.13 681.104 L836.571 681.104 L836.012 681.104 L835.452 681.104 L834.893 681.104 L834.334 681.104 L833.775 681.104 L833.215 681.104 L832.656 681.104 L832.097 681.104 L831.538 681.104 L830.978 681.104 L830.419 681.104 L829.86 681.104 L829.301 681.104 L828.741 681.104 L828.182 681.104 L827.623 681.104 L827.064 681.104 L826.504 681.104 L825.945 681.104 L825.386 681.104 L824.827 681.104 L824.267 681.104 L823.708 681.104 L823.149 681.104 L822.59 681.104 L822.03 681.104 L821.471 681.104 L820.912 681.104 L820.353 681.104 L819.793 681.104 L819.234 681.104 L818.675 681.104 L818.116 681.104 L817.556 681.104 L816.997 681.104 L816.438 681.104 L815.879 681.104 L815.319 681.104 L814.76 681.104 L814.201 681.104 L813.642 681.104 L813.082 681.104 L812.523 681.104 L811.964 681.104 L811.405 681.104 L810.845 681.104 L810.286 681.104 L809.727 681.104 L809.168 681.104 L808.608 681.104 L808.049 681.104 L807.49 681.104 L806.931 681.104 L806.371 681.104 L805.812 681.104 L805.253 681.104 L804.693 681.104 L804.134 681.104 L803.575 681.104 L803.016 681.104 L802.456 681.104 L801.897 681.104 L801.338 681.104 L800.779 681.104 L800.219 681.104 L799.66 681.104 L799.101 681.104 L798.542 681.104 L797.982 681.104 L797.423 681.104 L796.864 681.104 L796.305 681.104 L795.745 681.104 L795.186 681.104 L794.627 681.104 L794.068 681.104 L793.508 681.104 L792.949 681.104 L792.39 681.104 L791.831 681.104 L791.271 681.104 L790.712 681.104 L790.153 681.104 L789.594 681.104 L789.034 681.104 L788.475 681.104 L787.916 681.104 L787.357 681.104 L786.797 681.104 L786.238 681.104 L785.679 681.104 L785.12 681.104 L784.56 681.104 L784.001 681.104 L783.442 681.104 L782.883 681.104 L782.323 681.104 L781.764 681.104 L781.205 681.104 L780.646 681.104 L780.086 681.104 L779.527 681.104 L778.968 681.104 L778.409 681.104 L777.849 681.104 L777.29 681.104 L776.731 681.104 L776.172 681.104 L775.612 681.104 L775.053 681.104 L774.494 681.104 L773.935 681.104 L773.375 681.104 L772.816 681.104 L772.257 681.104 L771.698 681.104 L771.138 681.104 L770.579 681.104 L770.02 681.104 L769.461 681.104 L768.901 681.104 L768.342 681.104 L767.783 681.104 L767.224 681.104 L766.664 681.104 L766.105 681.104 L765.546 681.104 L764.987 681.104 L764.427 681.104 L763.868 681.104 L763.309 681.104 L762.75 681.104 L762.19 681.104 L761.631 681.104 L761.072 681.104 L760.513 681.104 L759.953 681.104 L759.394 681.104 L758.835 681.104 L758.276 681.104 L757.716 681.104 L757.157 681.104 L756.598 681.104 L756.039 681.104 L755.479 681.104 L754.92 681.104 L754.361 681.104 L753.802 681.104 L753.242 681.104 L752.683 681.104 L752.124 681.104 L751.565 681.104 L751.005 681.104 L750.446 681.104 L749.887 681.104 L749.328 681.104 L748.768 681.104 L748.209 681.104 L747.65 681.104 L747.091 681.104 L746.531 681.104 L745.972 681.104 L745.413 681.104 L744.854 681.104 L744.294 681.104 L743.735 681.104 L743.176 681.104 L742.617 681.104 L742.057 681.104 L741.498 681.104 L740.939 681.104 L740.38 681.104 L739.82 681.104 L739.261 681.104 L738.702 681.104 L738.143 681.104 L737.583 681.104 L737.024 681.104 L736.465 681.104 L735.906 681.104 L735.346 681.104 L734.787 681.104 L734.228 681.104 L733.669 681.104 L733.109 681.104 L732.55 681.104 L731.991 681.104 L731.432 681.104 L730.872 681.104 L730.313 681.104 L729.754 681.104 L729.195 681.104 L728.635 681.104 L728.076 681.104 L727.517 681.104 L726.958 681.104 L726.398 681.104 L725.839 681.104 L725.28 681.104 L724.721 681.104 L724.161 681.104 L723.602 681.104 L723.043 681.104 L722.484 681.104 L721.924 681.104 L721.365 681.104 L720.806 681.104 L720.247 681.104  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.252 720.806,686.252 721.365,686.252 721.924,686.252 722.484,686.252 723.043,686.252 723.602,686.252 724.161,686.252 724.721,686.252 725.28,686.252 725.839,686.252 726.398,686.252 726.958,686.252 727.517,686.252 728.076,686.252 728.635,686.252 729.195,686.252 729.754,686.252 730.313,686.252 730.872,686.252 731.432,686.252 731.991,686.252 732.55,686.252 733.109,686.252 733.669,686.252 734.228,686.252 734.787,686.252 735.346,686.252 735.906,686.252 736.465,686.252 737.024,686.252 737.583,686.252 738.143,686.252 738.702,686.252 739.261,686.252 739.82,686.252 740.38,686.252 740.939,686.252 741.498,686.252 742.057,686.252 742.617,686.252 743.176,686.252 743.735,686.252 744.294,686.252 744.854,686.252 745.413,686.252 745.972,686.252 746.531,686.252 747.091,686.252 747.65,686.252 748.209,686.252 748.768,686.252 749.328,686.252 749.887,686.252 750.446,686.252 751.005,686.252 751.565,686.252 752.124,686.252 752.683,686.252 753.242,686.252 753.802,686.252 754.361,686.252 754.92,686.252 755.479,686.252 756.039,686.252 756.598,686.252 757.157,686.252 757.716,686.252 758.276,686.252 758.835,686.252 759.394,686.252 759.953,686.252 760.513,686.252 761.072,686.252 761.631,686.252 762.19,686.252 762.75,686.252 763.309,686.252 763.868,686.252 764.427,686.252 764.987,686.252 765.546,686.252 766.105,686.252 766.664,686.252 767.224,686.252 767.783,686.252 768.342,686.252 768.901,686.252 769.461,686.252 770.02,686.252 770.579,686.252 771.138,686.252 771.698,686.252 772.257,686.252 772.816,686.252 773.375,686.252 773.935,686.252 774.494,686.252 775.053,686.252 775.612,686.252 776.172,686.252 776.731,686.252 777.29,686.252 777.849,686.252 778.409,686.252 778.968,686.252 779.527,686.252 780.086,686.252 780.646,686.252 781.205,686.252 781.764,686.252 782.323,686.252 782.883,686.252 783.442,686.252 784.001,686.252 784.56,686.252 785.12,686.252 785.679,686.252 786.238,686.252 786.797,686.252 787.357,686.252 787.916,686.252 788.475,686.252 789.034,686.252 789.594,686.252 790.153,686.252 790.712,686.252 791.271,686.252 791.831,686.252 792.39,686.252 792.949,686.252 793.508,686.252 794.068,686.252 794.627,686.252 795.186,686.252 795.745,686.252 796.305,686.252 796.864,686.252 797.423,686.252 797.982,686.252 798.542,686.252 799.101,686.252 799.66,686.252 800.219,686.252 800.779,686.252 801.338,686.252 801.897,686.252 802.456,686.252 803.016,686.252 803.575,686.252 804.134,686.252 804.693,686.252 805.253,686.252 805.812,686.252 806.371,686.252 806.931,686.252 807.49,686.252 808.049,686.252 808.608,686.252 809.168,686.252 809.727,686.252 810.286,686.252 810.845,686.252 811.405,686.252 811.964,686.252 812.523,686.252 813.082,686.252 813.642,686.252 814.201,686.252 814.76,686.252 815.319,686.252 815.879,686.252 816.438,686.252 816.997,686.252 817.556,686.252 818.116,686.252 818.675,686.252 819.234,686.252 819.793,686.252 820.353,686.252 820.912,686.252 821.471,686.252 822.03,686.252 822.59,686.252 823.149,686.252 823.708,686.252 824.267,686.252 824.827,686.252 825.386,686.252 825.945,686.252 826.504,686.252 827.064,686.252 827.623,686.252 828.182,686.252 828.741,686.252 829.301,686.252 829.86,686.252 830.419,686.252 830.978,686.252 831.538,686.252 832.097,686.252 832.656,686.252 833.215,686.252 833.775,686.252 834.334,686.252 834.893,686.252 835.452,686.252 836.012,686.252 836.571,686.252 837.13,686.252 837.689,686.252 838.249,686.252 838.808,686.252 839.367,686.252 839.926,686.252 840.486,686.252 841.045,686.252 841.604,686.252 842.163,686.252 842.723,686.252 843.282,686.252 843.841,686.252 844.4,686.252 844.96,686.252 845.519,686.252 846.078,686.252 846.637,686.252 847.197,686.252 847.756,686.252 848.315,686.252 848.874,686.252 849.434,686.252 849.993,686.252 850.552,686.252 851.111,686.252 851.671,686.252 852.23,686.252 852.789,686.252 853.348,686.252 853.908,686.252 854.467,686.252 855.026,686.252 855.585,686.252 856.145,686.252 856.704,686.252 857.263,686.252 857.822,686.252 858.382,686.252 858.941,686.252 859.5,686.252 860.059,686.252 860.619,686.252 861.178,686.252 861.737,686.252 862.296,686.252 862.856,686.252 863.415,686.252 863.974,686.252 864.533,686.252 865.093,686.252 865.652,686.252 866.211,686.252 866.77,686.252 867.33,686.252 867.889,686.252 868.448,686.252 869.007,686.252 869.567,686.252 870.126,686.252 870.685,686.252 871.244,686.252 871.804,686.252 872.363,686.252 872.922,686.252 873.481,686.252 874.041,686.252 874.6,686.252 875.159,686.252 875.718,686.252 876.278,686.252 876.837,686.252 877.396,686.252 877.955,686.252 878.515,686.252 879.074,686.252 879.633,686.252 880.192,686.252 880.752,686.252 881.311,686.252 881.87,686.252 882.429,686.252 882.989,686.252 883.548,686.252 884.107,686.252 884.666,686.252 885.226,686.252 885.785,686.252 886.344,686.252 886.903,686.252 887.463,686.252 888.022,686.252 888.581,686.252 889.14,686.252 889.7,686.252 890.259,686.252 890.818,686.252 891.377,686.252 891.937,686.252 892.496,686.252 893.055,686.252 893.614,686.252 894.174,686.252 894.733,686.252 895.292,686.252 895.851,686.252 896.411,686.252 896.97,686.252 897.529,686.252 898.088,686.252 898.648,686.252 899.207,686.252 899.766,686.252 900.325,686.252 900.885,686.252 901.444,686.252 902.003,686.252 902.562,686.252 903.122,686.252 903.681,686.252 904.24,686.252 904.799,686.252 905.359,686.252 905.918,686.252 906.477,686.252 907.036,686.252 907.596,686.252 908.155,686.252 908.714,686.252 909.273,686.252 909.833,686.252 910.392,686.252 910.951,686.252 911.51,686.252 912.07,686.252 912.629,686.252 913.188,686.252 913.747,686.252 914.307,686.252 914.866,686.252 915.425,686.252 915.984,686.252 916.544,686.252 917.103,686.252 917.662,686.252 918.221,686.252 918.781,686.252 919.34,686.252 919.899,686.252 920.458,686.252 921.018,686.252 921.577,686.252 922.136,686.252 922.695,686.252 923.255,686.252 923.814,686.252 924.373,686.252 924.932,686.252 925.492,686.252 926.051,686.252 926.61,686.252 927.169,686.252 927.729,686.252 928.288,686.252 928.847,686.252 929.406,686.252 929.966,686.252 930.525,686.252 931.084,686.252 931.644,686.252 932.203,686.252 932.762,686.252 933.321,686.252 933.881,686.252 934.44,686.252 934.999,686.252 935.558,686.252 936.118,686.252 936.677,686.252 937.236,686.252 937.795,686.252 938.355,686.252 938.914,686.252 939.473,686.252 940.032,686.252 940.592,686.252 941.151,686.252 941.71,686.252 942.269,686.252 942.829,686.252 943.388,686.252 943.947,686.252 944.506,686.252 945.066,686.252 945.625,686.252 946.184,686.252 946.743,686.252 947.303,686.252 947.862,686.252 948.421,686.252 948.98,686.252 949.54,686.252 950.099,686.252 950.658,686.252 951.217,686.252 951.777,686.252 952.336,686.252 952.895,686.252 953.454,686.252 954.014,686.252 954.573,686.252 955.132,686.252 955.691,686.252 956.251,686.252 956.81,686.252 957.369,686.252 957.928,686.252 958.488,686.252 959.047,686.252 959.606,686.252 960.165,686.252 960.725,686.252 961.284,686.252 961.843,686.252 962.402,686.252 962.962,686.252 963.521,686.252 964.08,686.252 964.639,686.252 965.199,686.252 965.758,686.252 966.317,686.252 966.876,686.252 967.436,686.252 967.995,686.252 968.554,686.252 969.113,686.252 969.673,686.252 970.232,686.252 970.791,686.252 971.35,686.252 971.91,686.252 972.469,686.252 973.028,686.252 973.587,686.252 974.147,686.252 974.706,686.252 975.265,686.252 975.824,686.252 976.384,686.252 976.943,686.252 977.502,686.252 978.061,686.252 978.621,686.252 979.18,686.252 979.739,686.252 980.298,686.252 980.858,686.252 981.417,686.252 981.976,686.252 982.535,686.252 983.095,686.252 983.654,686.252 984.213,686.252 984.772,686.252 985.332,686.252 985.891,686.252 986.45,686.252 987.009,686.252 987.569,686.252 988.128,686.252 988.687,686.252 989.246,686.252 989.806,686.252 990.365,686.252 990.924,686.252 991.483,686.252 992.043,686.252 992.602,686.252 993.161,686.252 993.72,686.252 994.28,686.252 994.839,686.252 995.398,686.252 995.957,686.252 996.517,686.252 997.076,686.252 997.635,686.252 998.194,686.252 998.754,686.252 999.313,686.252 999.872,686.252 1000.43,686.252 1000.99,686.252 1001.55,686.252 1002.11,686.252 1002.67,686.252 1003.23,686.252 1003.79,686.252 1004.35,686.252 1004.91,686.252 1005.46,686.252 1006.02,686.252 1006.58,686.252 1007.14,686.252 1007.7,686.252 1008.26,686.252 1008.82,686.252 1009.38,686.252 1009.94,686.252 1010.5,686.252 1011.06,686.252 1011.62,686.252 1012.18,686.252 1012.73,686.252 1013.29,686.252 1013.85,686.252 1014.41,686.252 1014.97,686.252 1015.53,686.252 1016.09,686.252 1016.65,686.252 1017.21,686.252 1017.77,686.252 1018.33,686.252 1018.89,686.252 1019.45,686.252 1020.01,686.252 1020.56,686.252 1021.12,686.252 1021.68,686.252 1022.24,686.252 1022.8,686.252 1023.36,686.252 1023.92,686.252 1024.48,686.252 1025.04,686.252 1025.6,686.252 1026.16,686.252 1026.72,686.252 1027.28,686.252 1027.83,686.252 1028.39,686.252 1028.95,686.252 1029.51,686.252 1030.07,686.252 1030.63,686.252 1031.19,686.252 1031.75,686.252 1032.31,686.252 1032.87,686.252 1033.43,686.252 1033.99,686.252 1034.55,686.252 1035.1,686.252 1035.66,686.252 1036.22,686.252 1036.78,686.252 1037.34,686.252 1037.9,686.252 1038.46,686.252 1039.02,686.252 1039.58,686.252 1040.14,686.252 1040.7,686.252 1041.26,686.252 1041.82,686.252 1042.38,686.252 1042.93,686.252 1043.49,686.252 1044.05,686.252 1044.61,686.252 1045.17,686.252 1045.73,686.252 1046.29,686.252 1046.85,686.252 1047.41,686.252 1047.97,686.252 1048.53,686.252 1049.09,686.252 1049.65,686.252 1050.2,686.252 1050.76,686.252 1051.32,686.252 1051.88,686.252 1052.44,686.252 1053,686.252 1053.56,686.252 1054.12,686.252 1054.68,686.252 1055.24,686.252 1055.8,686.252 1056.36,686.252 1056.92,686.252 1057.48,686.252 1058.03,686.252 1058.59,686.252 1059.15,686.252 1059.71,686.252 1060.27,686.252 1060.83,686.252 1061.39,686.252 1061.95,686.252 1062.51,686.252 1063.07,686.252 1063.63,686.252 1064.19,686.252 1064.75,686.252 1065.3,686.252 1065.86,686.252 1066.42,686.252 1066.98,686.252 1067.54,686.252 1068.1,686.252 1068.66,686.252 1069.22,686.252 1069.78,686.252 1070.34,686.252 1070.9,686.252 1071.46,686.252 1072.02,686.252 1072.57,686.252 1073.13,686.252 1073.69,686.252 1074.25,686.252 1074.81,686.252 1075.37,686.252 1075.93,686.252 1076.49,686.252 1077.05,686.252 1077.61,686.252 1078.17,686.252 1078.73,686.252 1079.29,686.252 1079.85,686.252 1080.4,686.252 1080.96,686.252 1081.52,686.252 1082.08,686.252 1082.64,686.252 1083.2,686.252 1083.76,686.252 1084.32,686.252 1084.88,686.252 1085.44,686.252 1086,686.252 1086.56,686.252 1087.12,686.252 1087.67,686.252 1088.23,686.252 1088.79,686.252 1089.35,686.252 1089.91,686.252 1090.47,686.252 1091.03,686.252 1091.59,686.252 1092.15,686.252 1092.71,686.252 1093.27,686.252 1093.83,686.252 1094.39,686.252 1094.94,686.252 1095.5,686.252 1096.06,686.252 1096.62,686.252 1097.18,686.252 1097.74,686.252 1098.3,686.252 1098.86,686.252 1099.42,686.252 1099.98,686.252 1100.54,686.252 1101.1,686.252 1101.66,686.252 1102.22,686.252 1102.77,686.252 1103.33,686.252 1103.89,686.252 1104.45,686.252 1105.01,686.252 1105.57,686.252 1106.13,686.252 1106.69,686.252 1107.25,686.252 1107.81,686.252 1108.37,686.252 1108.93,686.252 1109.49,686.252 1110.04,686.252 1110.6,686.252 1111.16,686.252 1111.72,686.252 1112.28,686.252 1112.84,686.252 1113.4,686.252 1113.96,686.252 1114.52,686.252 1115.08,686.252 1115.64,686.252 1116.2,686.252 1116.76,686.252 1117.31,686.252 1117.87,686.252 1118.43,686.252 1118.99,686.252 1119.55,686.252 1120.11,686.252 1120.67,686.252 1121.23,686.252 1121.79,686.252 1122.35,686.252 1122.91,686.252 1123.47,686.252 1124.03,686.252 1124.59,686.252 1125.14,686.252 1125.7,686.252 1126.26,686.252 1126.82,686.252 1127.38,686.252 1127.94,686.252 1128.5,686.252 1129.06,686.252 1129.62,686.252 1130.18,686.252 1130.74,686.252 1131.3,686.252 1131.86,686.252 1132.41,686.252 1132.97,686.252 1133.53,686.252 1134.09,686.252 1134.65,686.252 1135.21,686.252 1135.77,686.252 1136.33,686.252 1136.89,686.252 1137.45,686.252 1138.01,686.252 1138.57,686.252 1139.13,686.252 1139.68,686.252 1140.24,686.252 1140.8,686.252 1141.36,686.252 1141.92,686.252 1142.48,686.252 1143.04,686.252 1143.6,686.252 1144.16,686.252 1144.72,686.252 1145.28,686.252 1145.84,686.252 1146.4,686.252 1146.96,686.252 1147.51,686.252 1148.07,686.252 1148.63,686.252 1149.19,686.252 1149.75,686.252 1150.31,686.252 1150.87,686.252 1151.43,686.252 1151.99,686.252 1152.55,686.252 1153.11,686.252 1153.67,686.252 1154.23,686.252 1154.78,686.252 1155.34,686.252 1155.9,686.252 1156.46,686.252 1157.02,686.252 1157.58,686.252 1158.14,686.252 1158.7,686.252 1159.26,686.252 1159.82,686.252 1160.38,686.252 1160.94,686.252 1161.5,686.252 1162.05,686.252 1162.61,686.252 1163.17,686.252 1163.73,686.252 1164.29,686.252 1164.85,686.252 1165.41,686.252 1165.97,686.252 1166.53,686.252 1167.09,686.252 1167.65,686.252 1168.21,686.252 1168.77,686.252 1169.33,686.252 1169.88,686.252 1170.44,686.252 1171,686.252 1171.56,686.252 1172.12,686.252 1172.68,686.252 1173.24,686.252 1173.8,686.252 1174.36,686.252 1174.92,686.252 1175.48,686.252 1176.04,686.252 1176.6,686.252 1177.15,686.252 1177.71,686.252 1178.27,686.252 1178.83,686.252 1179.39,686.252 1179.95,686.252 1180.51,686.252 1181.07,686.252 1181.63,686.252 1182.19,686.252 1182.75,686.252 1183.31,686.252 1183.87,686.252 1184.43,686.252 1184.98,686.252 1185.54,686.252 1186.1,686.252 1186.66,686.252 1187.22,686.252 1187.78,686.252 1188.34,686.252 1188.9,686.252 1189.46,686.252 1190.02,686.252 1190.58,686.252 1191.14,686.252 1191.7,686.252 1192.25,686.252 1192.81,686.252 1193.37,686.252 1193.93,686.252 1194.49,686.252 1195.05,686.252 1195.61,686.252 1196.17,686.252 1196.73,686.252 1197.29,686.252 1197.85,686.252 1198.41,686.252 1198.97,686.252 1199.52,686.252 1200.08,686.252 1200.64,686.252 1201.2,686.252 1201.76,686.252 1202.32,686.252 1202.88,686.252 1203.44,686.252 1204,686.252 1204.56,686.252 1205.12,686.252 1205.68,686.252 1206.24,686.252 1206.8,686.252 1207.35,686.252 1207.91,686.252 1208.47,686.252 1209.03,686.252 1209.59,686.252 1210.15,686.252 1210.71,686.252 1211.27,686.252 1211.83,686.252 1212.39,686.252 1212.95,686.252 1213.51,686.252 1214.07,686.252 1214.62,686.252 1215.18,686.252 1215.74,686.252 1216.3,686.252 1216.86,686.252 1217.42,686.252 1217.98,686.252 1218.54,686.252 1219.1,686.252 1219.66,686.252 1220.22,686.252 1220.78,686.252 1221.34,686.252 1221.89,686.252 1222.45,686.252 1223.01,686.252 1223.57,686.252 1224.13,686.252 1224.69,686.252 1225.25,686.252 1225.81,686.252 1226.37,686.252 1226.93,686.252 1227.49,686.252 1228.05,686.252 1228.61,686.252 1229.17,686.252 1229.72,686.252 1230.28,686.252 1230.84,686.252 1231.4,686.252 1231.96,686.252 1232.52,686.252 1233.08,686.252 1233.64,686.252 1234.2,686.252 1234.76,686.252 1235.32,686.252 1235.88,686.252 1236.44,686.252 1236.99,686.252 1237.55,686.252 1238.11,686.252 1238.67,686.252 1239.23,686.252 1239.79,686.252 1240.35,686.252 1240.91,686.252 1241.47,686.252 1242.03,686.252 1242.59,686.252 1243.15,686.252 1243.71,686.252 1244.26,686.252 1244.82,686.252 1245.38,686.252 1245.94,686.252 1246.5,686.252 1247.06,686.252 1247.62,686.252 1248.18,686.252 1248.74,686.252 1249.3,686.252 1249.86,686.252 1250.42,686.252 1250.98,686.252 1251.54,686.252 1252.09,686.252 1252.65,686.252 1253.21,686.252 1253.77,686.252 1254.33,686.252 1254.89,686.252 1255.45,686.252 1256.01,686.252 1256.57,686.252 1257.13,686.252 1257.69,686.252 1258.25,686.252 1258.81,686.252 1259.36,686.252 1259.92,686.252 1260.48,686.252 1261.04,686.252 1261.6,686.252 1262.16,686.252 1262.72,686.252 1263.28,686.252 1263.84,686.252 1264.4,686.252 1264.96,686.252 1265.52,686.252 1266.08,686.252 1266.63,686.252 1267.19,686.252 1267.75,686.252 1268.31,686.252 1268.87,686.252 1269.43,686.252 1269.99,686.252 1270.55,686.252 1271.11,686.252 1271.67,686.252 1272.23,686.252 1272.79,686.252 1273.35,686.252 1273.91,686.252 1274.46,686.252 1275.02,686.252 1275.58,686.252 1276.14,686.252 1276.7,686.252 1277.26,686.252 1277.82,686.252 1278.38,686.252 1278.94,686.252 1279.5,686.252 1280.06,686.252 1280.62,686.252 1281.18,686.252 1281.73,686.252 1282.29,686.252 1282.85,686.252 1283.41,686.252 1283.97,686.252 1284.53,686.252 1285.09,686.252 1285.65,686.252 1286.21,686.252 1286.77,686.252 1287.33,686.252 1287.89,686.252 1288.45,686.252 1289,686.252 1289.56,686.252 1290.12,686.252 1290.68,686.252 1291.24,686.252 1291.8,686.252 1292.36,686.252 1292.92,686.252 1293.48,686.252 1294.04,686.252 1294.6,686.252 1295.16,686.252 1295.72,686.252 1296.28,686.252 1296.83,686.252 1297.39,686.252 1297.95,686.252 1298.51,686.252 1299.07,686.252 1299.63,686.252 1300.19,686.252 1300.75,686.252 1301.31,686.252 1301.87,686.252 1302.43,686.252 1302.99,686.252 1303.55,686.252 1304.1,686.252 1304.66,686.252 1305.22,686.252 1305.78,686.252 1306.34,686.252 1306.9,686.252 1307.46,686.252 1308.02,686.252 1308.58,686.252 1309.14,686.252 1309.7,686.252 1310.26,686.252 1310.82,686.252 1311.38,686.252 1311.93,686.252 1312.49,686.252 1313.05,686.252 1313.61,686.252 1314.17,686.252 1314.73,686.252 1315.29,686.252 1315.85,686.252 1316.41,686.252 1316.97,686.252 1317.53,686.252 1318.09,686.252 1318.65,686.252 1319.2,686.252 1319.76,686.252 1320.32,686.252 1320.88,686.252 1321.44,686.252 1322,686.252 1322.56,686.252 1323.12,686.252 1323.68,686.252 1324.24,686.252 1324.8,686.252 1325.36,686.252 1325.92,686.252 1326.47,686.252 1327.03,686.252 1327.59,686.252 1328.15,686.252 1328.71,686.252 1329.27,686.252 1329.83,686.252 1330.39,686.252 1330.95,686.252 1331.51,686.252 1332.07,686.252 1332.63,686.252 1333.19,686.252 1333.75,686.252 1334.3,686.252 1334.86,686.252 1335.42,686.252 1335.98,686.252 1336.54,686.252 1337.1,686.252 1337.66,686.252 1338.22,686.252 1338.78,686.252 1339.34,686.252 1339.9,686.252 1340.46,686.252 1341.02,686.252 1341.57,686.252 1342.13,686.252 1342.69,686.252 1343.25,686.252 1343.81,686.252 1344.37,686.252 1344.93,686.252 1345.49,686.252 1346.05,686.252 1346.61,686.252 1347.17,686.252 1347.73,686.252 1348.29,686.252 1348.84,686.252 1349.4,686.252 1349.96,686.252 1350.52,686.252 1351.08,686.252 1351.64,686.252 1352.2,686.252 1352.76,686.252 1353.32,686.252 1353.88,686.252 1354.44,686.252 1355,686.252 1355.56,686.252 1356.12,686.252 1356.67,686.252 1357.23,686.252 1357.79,686.252 1358.35,686.252 1358.91,686.252 1359.47,686.252 1360.03,686.252 1360.59,686.252 1361.15,686.252 1361.71,686.252 1362.27,686.252 1362.83,686.252 1363.39,686.252 1363.94,686.252 1364.5,686.252 1365.06,686.252 1365.62,686.252 1366.18,686.252 1366.74,686.252 1367.3,686.252 1367.86,686.252 1368.42,686.252 1368.98,686.252 1369.54,686.252 1370.1,686.252 1370.66,686.252 1371.21,686.252 1371.77,686.252 1372.33,686.252 1372.89,686.252 1373.45,686.252 1374.01,686.252 1374.57,686.252 1375.13,686.252 1375.69,686.252 1376.25,686.252 1376.81,686.252 1377.37,686.252 1377.93,686.252 1378.49,686.252 1379.04,686.252 1379.6,686.252 1380.16,686.252 1380.72,686.252 1381.28,686.252 1381.84,686.252 1382.4,686.252 1382.96,686.252 1383.52,686.252 1384.08,686.252 1384.64,686.252 1385.2,686.252 1385.76,686.252 1386.31,686.252 1386.87,686.252 1387.43,686.252 1387.99,686.252 1388.55,686.252 1389.11,686.252 1389.67,686.252 1390.23,686.252 1390.79,686.252 1391.35,686.252 1391.91,686.252 1392.47,686.252 1393.03,686.252 1393.58,686.252 1394.14,686.252 1394.7,686.252 1395.26,686.252 1395.82,686.252 1396.38,686.252 1396.94,686.252 1397.5,686.252 1398.06,686.252 1398.62,686.252 1399.18,686.252 1399.74,686.252 1400.3,686.252 1400.86,686.252 1401.41,686.252 1401.97,686.252 1402.53,686.252 1403.09,686.252 1403.65,686.252 1404.21,686.252 1404.77,686.252 1405.33,686.252 1405.89,686.252 1406.45,686.252 1407.01,686.252 1407.57,686.252 1408.13,686.252 1408.68,686.252 1409.24,686.252 1409.8,686.252 1410.36,686.252 1410.92,686.252 1411.48,686.252 1412.04,686.252 1412.6,686.252 1413.16,686.252 1413.72,686.252 1414.28,686.252 1414.84,686.252 1415.4,686.252 1415.95,686.252 1416.51,686.252 1417.07,686.252 1417.63,686.252 1418.19,686.252 1418.75,686.252 1419.31,686.252 1419.87,686.252 1420.43,686.252 1420.99,686.252 1421.55,686.252 1422.11,686.252 1422.67,686.252 1423.23,686.252 1423.78,686.252 1424.34,686.252 1424.9,686.252 1425.46,686.252 1426.02,686.252 1426.58,686.252 1427.14,686.252 1427.7,686.252 1428.26,686.252 1428.82,686.252 1429.38,686.252 1429.94,686.252 1430.5,686.252 1431.05,686.252 1431.61,686.252 1432.17,686.252 1432.73,686.252 1433.29,686.252 1433.85,686.252 1434.41,686.252 1434.97,686.252 1435.53,686.252 1436.09,686.252 1436.65,686.252 1437.21,686.252 1437.77,686.252 1438.33,686.252 1438.88,686.252 1439.44,686.252 1440,686.252 1440.56,686.252 1441.12,686.252 1441.68,686.252 1442.24,686.252 1442.8,686.252 1443.36,686.252 1443.92,686.252 1444.48,686.252 1445.04,686.252 1445.6,686.252 1446.15,686.252 1446.71,686.252 1447.27,686.252 1447.83,686.252 1448.39,686.252 1448.95,686.252 1449.51,686.252 1450.07,686.252 1450.63,686.252 1451.19,686.252 1451.75,686.252 1452.31,686.252 1452.87,686.252 1453.42,686.252 1453.98,686.252 1454.54,686.252 1455.1,686.252 1455.66,686.252 1456.22,686.252 1456.78,686.252 1457.34,686.252 1457.9,686.252 1458.46,686.252 1459.02,686.252 1459.58,686.252 1460.14,686.252 1460.7,686.252 1461.25,686.252 1461.81,686.252 1462.37,686.252 1462.93,686.252 1463.49,686.252 1464.05,686.252 1464.61,686.252 1465.17,686.252 1465.73,686.252 1466.29,686.252 1466.85,686.252 1467.41,686.252 1467.97,686.252 1468.52,686.252 1469.08,686.252 1469.64,686.252 1470.2,686.252 1470.76,686.252 1471.32,686.252 1471.88,686.252 1472.44,686.252 1473,686.252 1473.56,686.252 1474.12,686.252 1474.68,686.252 1475.24,686.252 1475.79,686.252 1476.35,686.252 1476.91,686.252 1477.47,686.252 1478.03,686.252 1478.59,686.252 1479.15,686.252 1479.71,686.252 1480.27,686.252 1480.83,686.252 1481.39,686.252 1481.95,686.252 1482.51,686.252 1483.07,686.252 1483.62,686.252 1484.18,686.252 1484.74,686.252 1485.3,686.252 1485.86,686.252 1486.42,686.252 1486.98,686.252 1487.54,686.252 1488.1,686.252 1488.66,686.252 1489.22,686.252 1489.78,686.252 1490.34,686.252 1490.89,686.252 1491.45,686.252 1492.01,686.252 1492.57,686.252 1493.13,686.252 1493.69,686.252 1494.25,686.252 1494.81,686.252 1495.37,686.252 1495.93,686.252 1496.49,686.252 1497.05,686.252 1497.61,686.252 1498.16,686.252 1498.72,686.252 1499.28,686.252 1499.84,686.252 1500.4,686.252 1500.96,686.252 1501.52,686.252 1502.08,686.252 1502.64,686.252 1503.2,686.252 1503.76,686.252 1504.32,686.252 1504.88,686.252 1505.44,686.252 1505.99,686.252 1506.55,686.252 1507.11,686.252 1507.67,686.252 1508.23,686.252 1508.79,686.252 1509.35,686.252 1509.91,686.252 1510.47,686.252 1511.03,686.252 1511.59,686.252 1512.15,686.252 1512.71,686.252 1513.26,686.252 1513.82,686.252 1514.38,686.252 1514.94,686.252 1515.5,686.252 1516.06,686.252 1516.62,686.252 1517.18,686.252 1517.74,686.252 1518.3,686.252 1518.86,686.252 1519.42,686.252 1519.98,686.252 1520.53,686.252 1521.09,686.252 1521.65,686.252 1522.21,686.252 1522.77,686.252 1523.33,686.252 1523.89,686.252 1524.45,686.252 1525.01,686.252 1525.57,686.252 1526.13,686.252 1526.69,686.252 1527.25,686.252 1527.81,686.252 1528.36,686.252 1528.92,686.252 1529.48,686.252 1530.04,686.252 1530.6,686.252 1531.16,686.252 1531.72,686.252 1532.28,686.252 1532.84,686.252 1533.4,686.252 1533.96,686.252 1534.52,686.252 1535.08,686.252 1535.63,686.252 1536.19,686.252 1536.75,686.252 1537.31,686.252 1537.87,686.252 1538.43,686.252 1538.99,686.252 1539.55,686.252 1540.11,686.252 1540.67,686.252 1541.23,686.252 1541.79,686.252 1542.35,686.252 1542.9,686.252 1543.46,686.252 1544.02,686.252 1544.58,686.252 1545.14,686.252 1545.7,686.252 1546.26,686.252 1546.82,686.252 1547.38,686.252 1547.94,686.252 1548.5,686.252 1549.06,686.252 1549.62,686.252 1550.18,686.252 1550.73,686.252 1551.29,686.252 1551.85,686.252 1552.41,686.252 1552.97,686.252 1553.53,686.252 1554.09,686.252 1554.65,686.252 1555.21,686.252 1555.77,686.252 1556.33,686.252 1556.89,686.252 1557.45,686.252 1558,686.252 1558.56,686.252 1559.12,686.252 1559.68,686.252 1560.24,686.252 1560.8,686.252 1561.36,686.252 1561.92,686.252 1562.48,686.252 1563.04,686.252 1563.6,686.252 1564.16,686.252 1564.72,686.252 1565.28,686.252 1565.83,686.252 1566.39,686.252 1566.95,686.252 1567.51,686.252 1568.07,686.252 1568.63,686.252 1569.19,686.252 1569.75,686.252 1570.31,686.252 1570.87,686.252 1571.43,686.252 1571.99,686.252 1572.55,686.252 1573.1,686.252 1573.66,686.252 1574.22,686.252 1574.78,686.252 1575.34,686.252 1575.9,686.252 1576.46,686.252 1577.02,686.252 1577.58,686.252 1578.14,686.252 1578.7,686.252 1579.26,686.252 1579.82,686.252 1580.37,686.252 1580.93,686.252 1581.49,686.252 1582.05,686.252 1582.61,686.252 1583.17,686.252 1583.73,686.252 1584.29,686.252 1584.85,686.252 1585.41,686.252 1585.97,686.252 1586.53,686.252 1587.09,686.252 1587.65,686.252 1588.2,686.252 1588.76,686.252 1589.32,686.252 1589.88,686.252 1590.44,686.252 1591,686.252 1591.56,686.252 1592.12,686.252 1592.68,686.252 1593.24,686.252 1593.8,686.252 1594.36,686.252 1594.92,686.252 1595.47,686.252 1596.03,686.252 1596.59,686.252 1597.15,686.252 1597.71,686.252 1598.27,686.252 1598.83,686.252 1599.39,686.252 1599.95,686.252 1600.51,686.252 1601.07,686.252 1601.63,686.252 1602.19,686.252 1602.74,686.252 1603.3,686.252 1603.86,686.252 1604.42,686.252 1604.98,686.252 1605.54,686.252 1606.1,686.252 1606.66,686.252 1607.22,686.252 1607.78,686.252 1608.34,686.252 1608.9,686.252 1609.46,686.252 1610.02,686.252 1610.57,686.252 1611.13,686.252 1611.69,686.252 1612.25,686.252 1612.81,686.252 1613.37,686.252 1613.93,686.252 1614.49,686.252 1615.05,686.252 1615.61,686.252 1616.17,686.252 1616.73,686.252 1617.29,686.252 1617.84,686.252 1618.4,686.252 1618.96,686.252 1619.52,686.252 1620.08,686.252 1620.64,686.252 1621.2,686.252 1621.76,686.252 1622.32,686.252 1622.88,686.252 1623.44,686.252 1624,686.252 1624.56,686.252 1625.11,686.252 1625.67,686.252 1626.23,686.252 1626.79,686.252 1627.35,686.252 1627.91,686.252 1628.47,686.252 1629.03,686.252 1629.59,686.252 1630.15,686.252 1630.71,686.252 1631.27,686.252 1631.83,686.252 1632.39,686.252 1632.94,686.252 1633.5,686.252 1634.06,686.252 1634.62,686.252 1635.18,686.252 1635.74,686.252 1636.3,686.252 1636.86,686.252 1637.42,686.252 1637.98,686.252 1638.54,686.252 1639.1,686.252 1639.66,686.252 1640.21,686.252 1640.77,686.252 1641.33,686.252 1641.89,686.252 1642.45,686.252 1643.01,686.252 1643.57,686.252 1644.13,686.252 1644.69,686.252 1645.25,686.252 1645.81,686.252 1646.37,686.252 1646.93,686.252 1647.48,686.252 1648.04,686.252 1648.6,686.252 1649.16,686.252 1649.72,686.252 1650.28,686.252 1650.84,686.252 1651.4,686.252 1651.96,686.252 1652.52,686.252 1653.08,686.252 1653.64,686.252 1654.2,686.252 1654.76,686.252 1655.31,686.252 1655.87,686.252 1656.43,686.252 1656.99,686.252 1657.55,686.252 1658.11,686.252 1658.67,686.252 1659.23,686.252 1659.79,686.252 1660.35,686.252 1660.91,686.252 1661.47,686.252 1662.03,686.252 1662.58,686.252 1663.14,686.252 1663.7,686.252 1664.26,686.252 1664.82,686.252 1665.38,686.252 1665.94,686.252 1666.5,686.252 1667.06,686.252 1667.62,686.252 1668.18,686.252 1668.74,686.252 1669.3,686.252 1669.85,686.252 1670.41,686.252 1670.97,686.252 1671.53,686.252 1672.09,686.252 1672.65,686.252 1673.21,686.252 1673.77,686.252 1674.33,686.252 1674.89,686.252 1675.45,686.252 1676.01,686.252 1676.57,686.252 1677.13,686.252 1677.68,686.252 1678.24,686.252 1678.8,686.252 1679.36,686.252 1679.92,686.252 1680.48,686.252 1681.04,686.252 1681.6,686.252 1682.16,686.252 1682.72,686.252 1683.28,686.252 1683.84,686.252 1684.4,686.252 1684.95,686.252 1685.51,686.252 1686.07,686.252 1686.63,686.252 1687.19,686.252 1687.75,686.252 1688.31,686.252 1688.87,686.252 1689.43,686.252 1689.99,686.252 1690.55,686.252 1691.11,686.252 1691.67,686.252 1692.23,686.252 1692.78,686.252 1693.34,686.252 1693.9,686.252 1694.46,686.252 1695.02,686.252 1695.58,686.252 1696.14,686.252 1696.7,686.252 1697.26,686.252 1697.82,686.252 1698.38,686.252 1698.94,686.252 1699.5,686.252 1700.05,686.252 1700.61,686.252 1701.17,686.252 1701.73,686.252 1702.29,686.252 1702.85,686.252 1703.41,686.252 1703.97,686.252 1704.53,686.252 1705.09,686.252 1705.65,686.252 1706.21,686.252 1706.77,686.252 1707.32,686.252 1707.88,686.252 1708.44,686.252 1709,686.252 1709.56,686.252 1710.12,686.252 1710.68,686.252 1711.24,686.252 1711.8,686.252 1712.36,686.252 1712.92,686.252 1713.48,686.252 1714.04,686.252 1714.6,686.252 1715.15,686.252 1715.71,686.252 1716.27,686.252 1716.83,686.252 1717.39,686.252 1717.95,686.252 1718.51,686.252 1719.07,686.252 1719.63,686.252 1720.19,686.252 1720.75,686.252 1721.31,686.252 1721.87,686.252 1722.42,686.252 1722.98,686.252 1723.54,686.252 1724.1,686.252 1724.66,686.252 1725.22,686.252 1725.78,686.252 1726.34,686.252 1726.9,686.252 1727.46,686.252 1728.02,686.252 1728.58,686.252 1729.14,686.252 1729.69,686.252 1730.25,686.252 1730.81,686.252 1731.37,686.252 1731.93,686.252 1732.49,686.252 1733.05,686.252 1733.61,686.252 1734.17,686.252 1734.73,686.252 1735.29,686.252 1735.85,686.252 1736.41,686.252 1736.97,686.252 1737.52,686.252 1738.08,686.252 1738.64,686.252 1739.2,686.252 1739.76,686.252 1740.32,686.252 1740.88,686.252 1741.44,686.252 1742,686.252 1742.56,686.252 1743.12,686.252 1743.68,686.252 1744.24,686.252 1744.79,686.252 1745.35,686.252 1745.91,686.252 1746.47,686.252 1747.03,686.252 1747.59,686.252 1748.15,686.252 1748.71,686.252 1749.27,686.252 1749.83,686.252 1750.39,686.252 1750.95,686.252 1751.51,686.252 1752.06,686.252 1752.62,686.252 1753.18,686.252 1753.74,686.252 1754.3,686.252 1754.86,686.252 1755.42,686.252 1755.98,686.252 1756.54,686.252 1757.1,686.252 1757.66,686.252 1758.22,686.252 1758.78,686.252 1759.34,686.252 1759.89,686.252 1760.45,686.252 1761.01,686.252 1761.57,686.252 1762.13,686.252 1762.69,686.252 1763.25,686.252 1763.81,686.252 1764.37,686.252 1764.93,686.252 1765.49,686.252 1766.05,686.252 1766.61,686.252 1767.16,686.252 1767.72,686.252 1768.28,686.252 1768.84,686.252 1769.4,686.252 1769.96,686.252 1770.52,686.252 1771.08,686.252 1771.64,686.252 1772.2,686.252 1772.76,686.252 1773.32,686.252 1773.88,686.252 1774.43,686.252 1774.99,686.252 1775.55,686.252 1776.11,686.252 1776.67,686.252 1777.23,686.252 1777.79,686.252 1778.35,686.252 1778.91,686.252 1779.47,686.252 1780.03,686.252 1780.59,686.252 1781.15,686.252 1781.71,686.252 1782.26,686.252 1782.82,686.252 1783.38,686.252 1783.94,686.252 1784.5,686.252 1785.06,686.252 1785.62,686.252 1786.18,686.252 1786.74,686.252 1787.3,686.252 1787.86,686.252 1788.42,686.252 1788.98,686.252 1789.53,686.252 1790.09,686.252 1790.65,686.252 1791.21,686.252 1791.77,686.252 1792.33,686.252 1792.89,686.252 1793.45,686.252 1794.01,686.252 1794.57,686.252 1795.13,686.252 1795.69,686.252 1796.25,686.252 1796.8,686.252 1797.36,686.252 1797.92,686.252 1798.48,686.252 1799.04,686.252 1799.6,686.252 1800.16,686.252 1800.72,686.252 1801.28,686.252 1801.84,686.252 1802.4,686.252 1802.96,686.252 1803.52,686.252 1804.08,686.252 1804.63,686.252 1805.19,686.252 1805.75,686.252 1806.31,686.252 1806.87,686.252 1807.43,686.252 1807.99,686.252 1808.55,686.252 1809.11,686.252 1809.67,686.252 1810.23,686.252 1810.79,686.252 1811.35,686.252 1811.9,686.252 1812.46,686.252 1813.02,686.252 1813.58,686.252 1814.14,686.252 1814.7,686.252 1815.26,686.252 1815.82,686.252 1816.38,686.252 1816.94,686.252 1817.5,686.252 1818.06,686.252 1818.62,686.252 1819.18,686.252 1819.73,686.252 1820.29,686.252 1820.85,686.252 1821.41,686.252 1821.97,686.252 1822.53,686.252 1823.09,686.252 1823.65,686.252 1824.21,686.252 1824.77,686.252 1825.33,686.252 1825.89,686.252 1826.45,686.252 1827,686.252 1827.56,686.252 1828.12,686.252 1828.68,686.252 1829.24,686.252 1829.8,686.252 1830.36,686.252 1830.92,686.252 1831.48,686.252 1832.04,686.252 1832.6,686.252 1833.16,686.252 1833.72,686.252 1834.27,686.252 1834.83,686.252 1835.39,686.252 1835.95,686.252 1836.51,686.252 1837.07,686.252 1837.63,686.252 1838.19,686.252 \"/>\n<path clip-path=\"url(#clip993)\" d=\"M720.247 683.894 L720.806 683.894 L721.365 683.894 L721.924 683.894 L722.484 683.894 L723.043 683.894 L723.602 683.894 L724.161 683.894 L724.721 683.894 L725.28 683.894 L725.839 683.894 L726.398 683.894 L726.958 683.894 L727.517 683.894 L728.076 683.894 L728.635 683.894 L729.195 683.894 L729.754 683.894 L730.313 683.894 L730.872 683.894 L731.432 683.894 L731.991 683.894 L732.55 683.894 L733.109 683.894 L733.669 683.894 L734.228 683.894 L734.787 683.894 L735.346 683.894 L735.906 683.894 L736.465 683.894 L737.024 683.894 L737.583 683.894 L738.143 683.894 L738.702 683.894 L739.261 683.894 L739.82 683.894 L740.38 683.894 L740.939 683.894 L741.498 683.894 L742.057 683.894 L742.617 683.894 L743.176 683.894 L743.735 683.894 L744.294 683.894 L744.854 683.894 L745.413 683.894 L745.972 683.894 L746.531 683.894 L747.091 683.894 L747.65 683.894 L748.209 683.894 L748.768 683.894 L749.328 683.894 L749.887 683.894 L750.446 683.894 L751.005 683.894 L751.565 683.894 L752.124 683.894 L752.683 683.894 L753.242 683.894 L753.802 683.894 L754.361 683.894 L754.92 683.894 L755.479 683.894 L756.039 683.894 L756.598 683.894 L757.157 683.894 L757.716 683.894 L758.276 683.894 L758.835 683.894 L759.394 683.894 L759.953 683.894 L760.513 683.894 L761.072 683.894 L761.631 683.894 L762.19 683.894 L762.75 683.894 L763.309 683.894 L763.868 683.894 L764.427 683.894 L764.987 683.894 L765.546 683.894 L766.105 683.894 L766.664 683.894 L767.224 683.894 L767.783 683.894 L768.342 683.894 L768.901 683.894 L769.461 683.894 L770.02 683.894 L770.579 683.894 L771.138 683.894 L771.698 683.894 L772.257 683.894 L772.816 683.894 L773.375 683.894 L773.935 683.894 L774.494 683.894 L775.053 683.894 L775.612 683.894 L776.172 683.894 L776.731 683.894 L777.29 683.894 L777.849 683.894 L778.409 683.894 L778.968 683.894 L779.527 683.894 L780.086 683.894 L780.646 683.894 L781.205 683.894 L781.764 683.894 L782.323 683.894 L782.883 683.894 L783.442 683.894 L784.001 683.894 L784.56 683.894 L785.12 683.894 L785.679 683.894 L786.238 683.894 L786.797 683.894 L787.357 683.894 L787.916 683.894 L788.475 683.894 L789.034 683.894 L789.594 683.894 L790.153 683.894 L790.712 683.894 L791.271 683.894 L791.831 683.894 L792.39 683.894 L792.949 683.894 L793.508 683.894 L794.068 683.894 L794.627 683.894 L795.186 683.894 L795.745 683.894 L796.305 683.894 L796.864 683.894 L797.423 683.894 L797.982 683.894 L798.542 683.894 L799.101 683.894 L799.66 683.894 L800.219 683.894 L800.779 683.894 L801.338 683.894 L801.897 683.894 L802.456 683.894 L803.016 683.894 L803.575 683.894 L804.134 683.894 L804.693 683.894 L805.253 683.894 L805.812 683.894 L806.371 683.894 L806.931 683.894 L807.49 683.894 L808.049 683.894 L808.608 683.894 L809.168 683.894 L809.727 683.894 L810.286 683.894 L810.845 683.894 L811.405 683.894 L811.964 683.894 L812.523 683.894 L813.082 683.894 L813.642 683.894 L814.201 683.894 L814.76 683.894 L815.319 683.894 L815.879 683.894 L816.438 683.894 L816.997 683.894 L817.556 683.894 L818.116 683.894 L818.675 683.894 L819.234 683.894 L819.793 683.894 L820.353 683.894 L820.912 683.894 L821.471 683.894 L822.03 683.894 L822.59 683.894 L823.149 683.894 L823.708 683.894 L824.267 683.894 L824.827 683.894 L825.386 683.894 L825.945 683.894 L826.504 683.894 L827.064 683.894 L827.623 683.894 L828.182 683.894 L828.741 683.894 L829.301 683.894 L829.86 683.894 L830.419 683.894 L830.978 683.894 L831.538 683.894 L832.097 683.894 L832.656 683.894 L833.215 683.894 L833.775 683.894 L834.334 683.894 L834.893 683.894 L835.452 683.894 L836.012 683.894 L836.571 683.894 L837.13 683.894 L837.689 683.894 L838.249 683.894 L838.808 683.894 L839.367 683.894 L839.926 683.894 L840.486 683.894 L841.045 683.894 L841.604 683.894 L842.163 683.894 L842.723 683.894 L843.282 683.894 L843.841 683.894 L844.4 683.894 L844.96 683.894 L845.519 683.894 L846.078 683.894 L846.637 683.894 L847.197 683.894 L847.756 683.894 L848.315 683.894 L848.874 683.894 L849.434 683.894 L849.993 683.894 L850.552 683.894 L851.111 683.894 L851.671 683.894 L852.23 683.894 L852.789 683.894 L853.348 683.894 L853.908 683.894 L854.467 683.894 L855.026 683.894 L855.585 683.894 L856.145 683.894 L856.704 683.894 L857.263 683.894 L857.822 683.894 L858.382 683.894 L858.941 683.894 L859.5 683.894 L860.059 683.894 L860.619 683.894 L861.178 683.894 L861.737 683.894 L862.296 683.894 L862.856 683.894 L863.415 683.894 L863.974 683.894 L864.533 683.894 L865.093 683.894 L865.652 683.894 L866.211 683.894 L866.77 683.894 L867.33 683.894 L867.889 683.894 L868.448 683.894 L869.007 683.894 L869.567 683.894 L870.126 683.894 L870.685 683.894 L871.244 683.894 L871.804 683.894 L872.363 683.894 L872.922 683.894 L873.481 683.894 L874.041 683.894 L874.6 683.894 L875.159 683.894 L875.718 683.894 L876.278 683.894 L876.837 683.894 L877.396 683.894 L877.955 683.894 L878.515 683.894 L879.074 683.894 L879.633 683.894 L880.192 683.894 L880.752 683.894 L881.311 683.894 L881.87 683.894 L882.429 683.894 L882.989 683.894 L883.548 683.894 L884.107 683.894 L884.666 683.894 L885.226 683.894 L885.785 683.894 L886.344 683.894 L886.903 683.894 L887.463 683.894 L888.022 683.894 L888.581 683.894 L889.14 683.894 L889.7 683.894 L890.259 683.894 L890.818 683.894 L891.377 683.894 L891.937 683.894 L892.496 683.894 L893.055 683.894 L893.614 683.894 L894.174 683.894 L894.733 683.894 L895.292 683.894 L895.851 683.894 L896.411 683.894 L896.97 683.894 L897.529 683.894 L898.088 683.894 L898.648 683.894 L899.207 683.894 L899.766 683.894 L900.325 683.894 L900.885 683.894 L901.444 683.894 L902.003 683.894 L902.562 683.894 L903.122 683.894 L903.681 683.894 L904.24 683.894 L904.799 683.894 L905.359 683.894 L905.918 683.894 L906.477 683.894 L907.036 683.894 L907.596 683.894 L908.155 683.894 L908.714 683.894 L909.273 683.894 L909.833 683.894 L910.392 683.894 L910.951 683.894 L911.51 683.894 L912.07 683.894 L912.629 683.894 L913.188 683.894 L913.747 683.894 L914.307 683.894 L914.866 683.894 L915.425 683.894 L915.984 683.894 L916.544 683.894 L917.103 683.894 L917.662 683.894 L918.221 683.894 L918.781 683.894 L919.34 683.894 L919.899 683.894 L920.458 683.894 L921.018 683.894 L921.577 683.894 L922.136 683.894 L922.695 683.894 L923.255 683.894 L923.814 683.894 L924.373 683.894 L924.932 683.894 L925.492 683.894 L926.051 683.894 L926.61 683.894 L927.169 683.894 L927.729 683.894 L928.288 683.894 L928.847 683.894 L929.406 683.894 L929.966 683.894 L930.525 683.894 L931.084 683.894 L931.644 683.894 L932.203 683.894 L932.762 683.894 L933.321 683.894 L933.881 683.894 L934.44 683.894 L934.999 683.894 L935.558 683.894 L936.118 683.894 L936.677 683.894 L937.236 683.894 L937.795 683.894 L938.355 683.894 L938.914 683.894 L939.473 683.894 L940.032 683.894 L940.592 683.894 L941.151 683.894 L941.71 683.894 L942.269 683.894 L942.829 683.894 L943.388 683.894 L943.947 683.894 L944.506 683.894 L945.066 683.894 L945.625 683.894 L946.184 683.894 L946.743 683.894 L947.303 683.894 L947.862 683.894 L948.421 683.894 L948.98 683.894 L949.54 683.894 L950.099 683.894 L950.658 683.894 L951.217 683.894 L951.777 683.894 L952.336 683.894 L952.895 683.894 L953.454 683.894 L954.014 683.894 L954.573 683.894 L955.132 683.894 L955.691 683.894 L956.251 683.894 L956.81 683.894 L957.369 683.894 L957.928 683.894 L958.488 683.894 L959.047 683.894 L959.606 683.894 L960.165 683.894 L960.725 683.894 L961.284 683.894 L961.843 683.894 L962.402 683.894 L962.962 683.894 L963.521 683.894 L964.08 683.894 L964.639 683.894 L965.199 683.894 L965.758 683.894 L966.317 683.894 L966.876 683.894 L967.436 683.894 L967.995 683.894 L968.554 683.894 L969.113 683.894 L969.673 683.894 L970.232 683.894 L970.791 683.894 L971.35 683.894 L971.91 683.894 L972.469 683.894 L973.028 683.894 L973.587 683.894 L974.147 683.894 L974.706 683.894 L975.265 683.894 L975.824 683.894 L976.384 683.894 L976.943 683.894 L977.502 683.894 L978.061 683.894 L978.621 683.894 L979.18 683.894 L979.739 683.894 L980.298 683.894 L980.858 683.894 L981.417 683.894 L981.976 683.894 L982.535 683.894 L983.095 683.894 L983.654 683.894 L984.213 683.894 L984.772 683.894 L985.332 683.894 L985.891 683.894 L986.45 683.894 L987.009 683.894 L987.569 683.894 L988.128 683.894 L988.687 683.894 L989.246 683.894 L989.806 683.894 L990.365 683.894 L990.924 683.894 L991.483 683.894 L992.043 683.894 L992.602 683.894 L993.161 683.894 L993.72 683.894 L994.28 683.894 L994.839 683.894 L995.398 683.894 L995.957 683.894 L996.517 683.894 L997.076 683.894 L997.635 683.894 L998.194 683.894 L998.754 683.894 L999.313 683.894 L999.872 683.894 L1000.43 683.894 L1000.99 683.894 L1001.55 683.894 L1002.11 683.894 L1002.67 683.894 L1003.23 683.894 L1003.79 683.894 L1004.35 683.894 L1004.91 683.894 L1005.46 683.894 L1006.02 683.894 L1006.58 683.894 L1007.14 683.894 L1007.7 683.894 L1008.26 683.894 L1008.82 683.894 L1009.38 683.894 L1009.94 683.894 L1010.5 683.894 L1011.06 683.894 L1011.62 683.894 L1012.18 683.894 L1012.73 683.894 L1013.29 683.894 L1013.85 683.894 L1014.41 683.894 L1014.97 683.894 L1015.53 683.894 L1016.09 683.894 L1016.65 683.894 L1017.21 683.894 L1017.77 683.894 L1018.33 683.894 L1018.89 683.894 L1019.45 683.894 L1020.01 683.894 L1020.56 683.894 L1021.12 683.894 L1021.68 683.894 L1022.24 683.894 L1022.8 683.894 L1023.36 683.894 L1023.92 683.894 L1024.48 683.894 L1025.04 683.894 L1025.6 683.894 L1026.16 683.894 L1026.72 683.894 L1027.28 683.894 L1027.83 683.894 L1028.39 683.894 L1028.95 683.894 L1029.51 683.894 L1030.07 683.894 L1030.63 683.894 L1031.19 683.894 L1031.75 683.894 L1032.31 683.894 L1032.87 683.894 L1033.43 683.894 L1033.99 683.894 L1034.55 683.894 L1035.1 683.894 L1035.66 683.894 L1036.22 683.894 L1036.78 683.894 L1037.34 683.894 L1037.9 683.894 L1038.46 683.894 L1039.02 683.894 L1039.58 683.894 L1040.14 683.894 L1040.7 683.894 L1041.26 683.894 L1041.82 683.894 L1042.38 683.894 L1042.93 683.894 L1043.49 683.894 L1044.05 683.894 L1044.61 683.894 L1045.17 683.894 L1045.73 683.894 L1046.29 683.894 L1046.85 683.894 L1047.41 683.894 L1047.97 683.894 L1048.53 683.894 L1049.09 683.894 L1049.65 683.894 L1050.2 683.894 L1050.76 683.894 L1051.32 683.894 L1051.88 683.894 L1052.44 683.894 L1053 683.894 L1053.56 683.894 L1054.12 683.894 L1054.68 683.894 L1055.24 683.894 L1055.8 683.894 L1056.36 683.894 L1056.92 683.894 L1057.48 683.894 L1058.03 683.894 L1058.59 683.894 L1059.15 683.894 L1059.71 683.894 L1060.27 683.894 L1060.83 683.894 L1061.39 683.894 L1061.95 683.894 L1062.51 683.894 L1063.07 683.894 L1063.63 683.894 L1064.19 683.894 L1064.75 683.894 L1065.3 683.894 L1065.86 683.894 L1066.42 683.894 L1066.98 683.894 L1067.54 683.894 L1068.1 683.894 L1068.66 683.894 L1069.22 683.894 L1069.78 683.894 L1070.34 683.894 L1070.9 683.894 L1071.46 683.894 L1072.02 683.894 L1072.57 683.894 L1073.13 683.894 L1073.69 683.894 L1074.25 683.894 L1074.81 683.894 L1075.37 683.894 L1075.93 683.894 L1076.49 683.894 L1077.05 683.894 L1077.61 683.894 L1078.17 683.894 L1078.73 683.894 L1079.29 683.894 L1079.85 683.894 L1080.4 683.894 L1080.96 683.894 L1081.52 683.894 L1082.08 683.894 L1082.64 683.894 L1083.2 683.894 L1083.76 683.894 L1084.32 683.894 L1084.88 683.894 L1085.44 683.894 L1086 683.894 L1086.56 683.894 L1087.12 683.894 L1087.67 683.894 L1088.23 683.894 L1088.79 683.894 L1089.35 683.894 L1089.91 683.894 L1090.47 683.894 L1091.03 683.894 L1091.59 683.894 L1092.15 683.894 L1092.71 683.894 L1093.27 683.894 L1093.83 683.894 L1094.39 683.894 L1094.94 683.894 L1095.5 683.894 L1096.06 683.894 L1096.62 683.894 L1097.18 683.894 L1097.74 683.894 L1098.3 683.894 L1098.86 683.894 L1099.42 683.894 L1099.98 683.894 L1100.54 683.894 L1101.1 683.894 L1101.66 683.894 L1102.22 683.894 L1102.77 683.894 L1103.33 683.894 L1103.89 683.894 L1104.45 683.894 L1105.01 683.894 L1105.57 683.894 L1106.13 683.894 L1106.69 683.894 L1107.25 683.894 L1107.81 683.894 L1108.37 683.894 L1108.93 683.894 L1109.49 683.894 L1110.04 683.894 L1110.6 683.894 L1111.16 683.894 L1111.72 683.894 L1112.28 683.894 L1112.84 683.894 L1113.4 683.894 L1113.96 683.894 L1114.52 683.894 L1115.08 683.894 L1115.64 683.894 L1116.2 683.894 L1116.76 683.894 L1117.31 683.894 L1117.87 683.894 L1118.43 683.894 L1118.99 683.894 L1119.55 683.894 L1120.11 683.894 L1120.67 683.894 L1121.23 683.894 L1121.79 683.894 L1122.35 683.894 L1122.91 683.894 L1123.47 683.894 L1124.03 683.894 L1124.59 683.894 L1125.14 683.894 L1125.7 683.894 L1126.26 683.894 L1126.82 683.894 L1127.38 683.894 L1127.94 683.894 L1128.5 683.894 L1129.06 683.894 L1129.62 683.894 L1130.18 683.894 L1130.74 683.894 L1131.3 683.894 L1131.86 683.894 L1132.41 683.894 L1132.97 683.894 L1133.53 683.894 L1134.09 683.894 L1134.65 683.894 L1135.21 683.894 L1135.77 683.894 L1136.33 683.894 L1136.89 683.894 L1137.45 683.894 L1138.01 683.894 L1138.57 683.894 L1139.13 683.894 L1139.68 683.894 L1140.24 683.894 L1140.8 683.894 L1141.36 683.894 L1141.92 683.894 L1142.48 683.894 L1143.04 683.894 L1143.6 683.894 L1144.16 683.894 L1144.72 683.894 L1145.28 683.894 L1145.84 683.894 L1146.4 683.894 L1146.96 683.894 L1147.51 683.894 L1148.07 683.894 L1148.63 683.894 L1149.19 683.894 L1149.75 683.894 L1150.31 683.894 L1150.87 683.894 L1151.43 683.894 L1151.99 683.894 L1152.55 683.894 L1153.11 683.894 L1153.67 683.894 L1154.23 683.894 L1154.78 683.894 L1155.34 683.894 L1155.9 683.894 L1156.46 683.894 L1157.02 683.894 L1157.58 683.894 L1158.14 683.894 L1158.7 683.894 L1159.26 683.894 L1159.82 683.894 L1160.38 683.894 L1160.94 683.894 L1161.5 683.894 L1162.05 683.894 L1162.61 683.894 L1163.17 683.894 L1163.73 683.894 L1164.29 683.894 L1164.85 683.894 L1165.41 683.894 L1165.97 683.894 L1166.53 683.894 L1167.09 683.894 L1167.65 683.894 L1168.21 683.894 L1168.77 683.894 L1169.33 683.894 L1169.88 683.894 L1170.44 683.894 L1171 683.894 L1171.56 683.894 L1172.12 683.894 L1172.68 683.894 L1173.24 683.894 L1173.8 683.894 L1174.36 683.894 L1174.92 683.894 L1175.48 683.894 L1176.04 683.894 L1176.6 683.894 L1177.15 683.894 L1177.71 683.894 L1178.27 683.894 L1178.83 683.894 L1179.39 683.894 L1179.95 683.894 L1180.51 683.894 L1181.07 683.894 L1181.63 683.894 L1182.19 683.894 L1182.75 683.894 L1183.31 683.894 L1183.87 683.894 L1184.43 683.894 L1184.98 683.894 L1185.54 683.894 L1186.1 683.894 L1186.66 683.894 L1187.22 683.894 L1187.78 683.894 L1188.34 683.894 L1188.9 683.894 L1189.46 683.894 L1190.02 683.894 L1190.58 683.894 L1191.14 683.894 L1191.7 683.894 L1192.25 683.894 L1192.81 683.894 L1193.37 683.894 L1193.93 683.894 L1194.49 683.894 L1195.05 683.894 L1195.61 683.894 L1196.17 683.894 L1196.73 683.894 L1197.29 683.894 L1197.85 683.894 L1198.41 683.894 L1198.97 683.894 L1199.52 683.894 L1200.08 683.894 L1200.64 683.894 L1201.2 683.894 L1201.76 683.894 L1202.32 683.894 L1202.88 683.894 L1203.44 683.894 L1204 683.894 L1204.56 683.894 L1205.12 683.894 L1205.68 683.894 L1206.24 683.894 L1206.8 683.894 L1207.35 683.894 L1207.91 683.894 L1208.47 683.894 L1209.03 683.894 L1209.59 683.894 L1210.15 683.894 L1210.71 683.894 L1211.27 683.894 L1211.83 683.894 L1212.39 683.894 L1212.95 683.894 L1213.51 683.894 L1214.07 683.894 L1214.62 683.894 L1215.18 683.894 L1215.74 683.894 L1216.3 683.894 L1216.86 683.894 L1217.42 683.894 L1217.98 683.894 L1218.54 683.894 L1219.1 683.894 L1219.66 683.894 L1220.22 683.894 L1220.78 683.894 L1221.34 683.894 L1221.89 683.894 L1222.45 683.894 L1223.01 683.894 L1223.57 683.894 L1224.13 683.894 L1224.69 683.894 L1225.25 683.894 L1225.81 683.894 L1226.37 683.894 L1226.93 683.894 L1227.49 683.894 L1228.05 683.894 L1228.61 683.894 L1229.17 683.894 L1229.72 683.894 L1230.28 683.894 L1230.84 683.894 L1231.4 683.894 L1231.96 683.894 L1232.52 683.894 L1233.08 683.894 L1233.64 683.894 L1234.2 683.894 L1234.76 683.894 L1235.32 683.894 L1235.88 683.894 L1236.44 683.894 L1236.99 683.894 L1237.55 683.894 L1238.11 683.894 L1238.67 683.894 L1239.23 683.894 L1239.79 683.894 L1240.35 683.894 L1240.91 683.894 L1241.47 683.894 L1242.03 683.894 L1242.59 683.894 L1243.15 683.894 L1243.71 683.894 L1244.26 683.894 L1244.82 683.894 L1245.38 683.894 L1245.94 683.894 L1246.5 683.894 L1247.06 683.894 L1247.62 683.894 L1248.18 683.894 L1248.74 683.894 L1249.3 683.894 L1249.86 683.894 L1250.42 683.894 L1250.98 683.894 L1251.54 683.894 L1252.09 683.894 L1252.65 683.894 L1253.21 683.894 L1253.77 683.894 L1254.33 683.894 L1254.89 683.894 L1255.45 683.894 L1256.01 683.894 L1256.57 683.894 L1257.13 683.894 L1257.69 683.894 L1258.25 683.894 L1258.81 683.894 L1259.36 683.894 L1259.92 683.894 L1260.48 683.894 L1261.04 683.894 L1261.6 683.894 L1262.16 683.894 L1262.72 683.894 L1263.28 683.894 L1263.84 683.894 L1264.4 683.894 L1264.96 683.894 L1265.52 683.894 L1266.08 683.894 L1266.63 683.894 L1267.19 683.894 L1267.75 683.894 L1268.31 683.894 L1268.87 683.894 L1269.43 683.894 L1269.99 683.894 L1270.55 683.894 L1271.11 683.894 L1271.67 683.894 L1272.23 683.894 L1272.79 683.894 L1273.35 683.894 L1273.91 683.894 L1274.46 683.894 L1275.02 683.894 L1275.58 683.894 L1276.14 683.894 L1276.7 683.894 L1277.26 683.894 L1277.82 683.894 L1278.38 683.894 L1278.94 683.894 L1279.5 683.894 L1280.06 683.894 L1280.62 683.894 L1281.18 683.894 L1281.73 683.894 L1282.29 683.894 L1282.85 683.894 L1283.41 683.894 L1283.97 683.894 L1284.53 683.894 L1285.09 683.894 L1285.65 683.894 L1286.21 683.894 L1286.77 683.894 L1287.33 683.894 L1287.89 683.894 L1288.45 683.894 L1289 683.894 L1289.56 683.894 L1290.12 683.894 L1290.68 683.894 L1291.24 683.894 L1291.8 683.894 L1292.36 683.894 L1292.92 683.894 L1293.48 683.894 L1294.04 683.894 L1294.6 683.894 L1295.16 683.894 L1295.72 683.894 L1296.28 683.894 L1296.83 683.894 L1297.39 683.894 L1297.95 683.894 L1298.51 683.894 L1299.07 683.894 L1299.63 683.894 L1300.19 683.894 L1300.75 683.894 L1301.31 683.894 L1301.87 683.894 L1302.43 683.894 L1302.99 683.894 L1303.55 683.894 L1304.1 683.894 L1304.66 683.894 L1305.22 683.894 L1305.78 683.894 L1306.34 683.894 L1306.9 683.894 L1307.46 683.894 L1308.02 683.894 L1308.58 683.894 L1309.14 683.894 L1309.7 683.894 L1310.26 683.894 L1310.82 683.894 L1311.38 683.894 L1311.93 683.894 L1312.49 683.894 L1313.05 683.894 L1313.61 683.894 L1314.17 683.894 L1314.73 683.894 L1315.29 683.894 L1315.85 683.894 L1316.41 683.894 L1316.97 683.894 L1317.53 683.894 L1318.09 683.894 L1318.65 683.894 L1319.2 683.894 L1319.76 683.894 L1320.32 683.894 L1320.88 683.894 L1321.44 683.894 L1322 683.894 L1322.56 683.894 L1323.12 683.894 L1323.68 683.894 L1324.24 683.894 L1324.8 683.894 L1325.36 683.894 L1325.92 683.894 L1326.47 683.894 L1327.03 683.894 L1327.59 683.894 L1328.15 683.894 L1328.71 683.894 L1329.27 683.894 L1329.83 683.894 L1330.39 683.894 L1330.95 683.894 L1331.51 683.894 L1332.07 683.894 L1332.63 683.894 L1333.19 683.894 L1333.75 683.894 L1334.3 683.894 L1334.86 683.894 L1335.42 683.894 L1335.98 683.894 L1336.54 683.894 L1337.1 683.894 L1337.66 683.894 L1338.22 683.894 L1338.78 683.894 L1339.34 683.894 L1339.9 683.894 L1340.46 683.894 L1341.02 683.894 L1341.57 683.894 L1342.13 683.894 L1342.69 683.894 L1343.25 683.894 L1343.81 683.894 L1344.37 683.894 L1344.93 683.894 L1345.49 683.894 L1346.05 683.894 L1346.61 683.894 L1347.17 683.894 L1347.73 683.894 L1348.29 683.894 L1348.84 683.894 L1349.4 683.894 L1349.96 683.894 L1350.52 683.894 L1351.08 683.894 L1351.64 683.894 L1352.2 683.894 L1352.76 683.894 L1353.32 683.894 L1353.88 683.894 L1354.44 683.894 L1355 683.894 L1355.56 683.894 L1356.12 683.894 L1356.67 683.894 L1357.23 683.894 L1357.79 683.894 L1358.35 683.894 L1358.91 683.894 L1359.47 683.894 L1360.03 683.894 L1360.59 683.894 L1361.15 683.894 L1361.71 683.894 L1362.27 683.894 L1362.83 683.894 L1363.39 683.894 L1363.94 683.894 L1364.5 683.894 L1365.06 683.894 L1365.62 683.894 L1366.18 683.894 L1366.74 683.894 L1367.3 683.894 L1367.86 683.894 L1368.42 683.894 L1368.98 683.894 L1369.54 683.894 L1370.1 683.894 L1370.66 683.894 L1371.21 683.894 L1371.77 683.894 L1372.33 683.894 L1372.89 683.894 L1373.45 683.894 L1374.01 683.894 L1374.57 683.894 L1375.13 683.894 L1375.69 683.894 L1376.25 683.894 L1376.81 683.894 L1377.37 683.894 L1377.93 683.894 L1378.49 683.894 L1379.04 683.894 L1379.6 683.894 L1380.16 683.894 L1380.72 683.894 L1381.28 683.894 L1381.84 683.894 L1382.4 683.894 L1382.96 683.894 L1383.52 683.894 L1384.08 683.894 L1384.64 683.894 L1385.2 683.894 L1385.76 683.894 L1386.31 683.894 L1386.87 683.894 L1387.43 683.894 L1387.99 683.894 L1388.55 683.894 L1389.11 683.894 L1389.67 683.894 L1390.23 683.894 L1390.79 683.894 L1391.35 683.894 L1391.91 683.894 L1392.47 683.894 L1393.03 683.894 L1393.58 683.894 L1394.14 683.894 L1394.7 683.894 L1395.26 683.894 L1395.82 683.894 L1396.38 683.894 L1396.94 683.894 L1397.5 683.894 L1398.06 683.894 L1398.62 683.894 L1399.18 683.894 L1399.74 683.894 L1400.3 683.894 L1400.86 683.894 L1401.41 683.894 L1401.97 683.894 L1402.53 683.894 L1403.09 683.894 L1403.65 683.894 L1404.21 683.894 L1404.77 683.894 L1405.33 683.894 L1405.89 683.894 L1406.45 683.894 L1407.01 683.894 L1407.57 683.894 L1408.13 683.894 L1408.68 683.894 L1409.24 683.894 L1409.8 683.894 L1410.36 683.894 L1410.92 683.894 L1411.48 683.894 L1412.04 683.894 L1412.6 683.894 L1413.16 683.894 L1413.72 683.894 L1414.28 683.894 L1414.84 683.894 L1415.4 683.894 L1415.95 683.894 L1416.51 683.894 L1417.07 683.894 L1417.63 683.894 L1418.19 683.894 L1418.75 683.894 L1419.31 683.894 L1419.87 683.894 L1420.43 683.894 L1420.99 683.894 L1421.55 683.894 L1422.11 683.894 L1422.67 683.894 L1423.23 683.894 L1423.78 683.894 L1424.34 683.894 L1424.9 683.894 L1425.46 683.894 L1426.02 683.894 L1426.58 683.894 L1427.14 683.894 L1427.7 683.894 L1428.26 683.894 L1428.82 683.894 L1429.38 683.894 L1429.94 683.894 L1430.5 683.894 L1431.05 683.894 L1431.61 683.894 L1432.17 683.894 L1432.73 683.894 L1433.29 683.894 L1433.85 683.894 L1434.41 683.894 L1434.97 683.894 L1435.53 683.894 L1436.09 683.894 L1436.65 683.894 L1437.21 683.894 L1437.77 683.894 L1438.33 683.894 L1438.88 683.894 L1439.44 683.894 L1440 683.894 L1440.56 683.894 L1441.12 683.894 L1441.68 683.894 L1442.24 683.894 L1442.8 683.894 L1443.36 683.894 L1443.92 683.894 L1444.48 683.894 L1445.04 683.894 L1445.6 683.894 L1446.15 683.894 L1446.71 683.894 L1447.27 683.894 L1447.83 683.894 L1448.39 683.894 L1448.95 683.894 L1449.51 683.894 L1450.07 683.894 L1450.63 683.894 L1451.19 683.894 L1451.75 683.894 L1452.31 683.894 L1452.87 683.894 L1453.42 683.894 L1453.98 683.894 L1454.54 683.894 L1455.1 683.894 L1455.66 683.894 L1456.22 683.894 L1456.78 683.894 L1457.34 683.894 L1457.9 683.894 L1458.46 683.894 L1459.02 683.894 L1459.58 683.894 L1460.14 683.894 L1460.7 683.894 L1461.25 683.894 L1461.81 683.894 L1462.37 683.894 L1462.93 683.894 L1463.49 683.894 L1464.05 683.894 L1464.61 683.894 L1465.17 683.894 L1465.73 683.894 L1466.29 683.894 L1466.85 683.894 L1467.41 683.894 L1467.97 683.894 L1468.52 683.894 L1469.08 683.894 L1469.64 683.894 L1470.2 683.894 L1470.76 683.894 L1471.32 683.894 L1471.88 683.894 L1472.44 683.894 L1473 683.894 L1473.56 683.894 L1474.12 683.894 L1474.68 683.894 L1475.24 683.894 L1475.79 683.894 L1476.35 683.894 L1476.91 683.894 L1477.47 683.894 L1478.03 683.894 L1478.59 683.894 L1479.15 683.894 L1479.71 683.894 L1480.27 683.894 L1480.83 683.894 L1481.39 683.894 L1481.95 683.894 L1482.51 683.894 L1483.07 683.894 L1483.62 683.894 L1484.18 683.894 L1484.74 683.894 L1485.3 683.894 L1485.86 683.894 L1486.42 683.894 L1486.98 683.894 L1487.54 683.894 L1488.1 683.894 L1488.66 683.894 L1489.22 683.894 L1489.78 683.894 L1490.34 683.894 L1490.89 683.894 L1491.45 683.894 L1492.01 683.894 L1492.57 683.894 L1493.13 683.894 L1493.69 683.894 L1494.25 683.894 L1494.81 683.894 L1495.37 683.894 L1495.93 683.894 L1496.49 683.894 L1497.05 683.894 L1497.61 683.894 L1498.16 683.894 L1498.72 683.894 L1499.28 683.894 L1499.84 683.894 L1500.4 683.894 L1500.96 683.894 L1501.52 683.894 L1502.08 683.894 L1502.64 683.894 L1503.2 683.894 L1503.76 683.894 L1504.32 683.894 L1504.88 683.894 L1505.44 683.894 L1505.99 683.894 L1506.55 683.894 L1507.11 683.894 L1507.67 683.894 L1508.23 683.894 L1508.79 683.894 L1509.35 683.894 L1509.91 683.894 L1510.47 683.894 L1511.03 683.894 L1511.59 683.894 L1512.15 683.894 L1512.71 683.894 L1513.26 683.894 L1513.82 683.894 L1514.38 683.894 L1514.94 683.894 L1515.5 683.894 L1516.06 683.894 L1516.62 683.894 L1517.18 683.894 L1517.74 683.894 L1518.3 683.894 L1518.86 683.894 L1519.42 683.894 L1519.98 683.894 L1520.53 683.894 L1521.09 683.894 L1521.65 683.894 L1522.21 683.894 L1522.77 683.894 L1523.33 683.894 L1523.89 683.894 L1524.45 683.894 L1525.01 683.894 L1525.57 683.894 L1526.13 683.894 L1526.69 683.894 L1527.25 683.894 L1527.81 683.894 L1528.36 683.894 L1528.92 683.894 L1529.48 683.894 L1530.04 683.894 L1530.6 683.894 L1531.16 683.894 L1531.72 683.894 L1532.28 683.894 L1532.84 683.894 L1533.4 683.894 L1533.96 683.894 L1534.52 683.894 L1535.08 683.894 L1535.63 683.894 L1536.19 683.894 L1536.75 683.894 L1537.31 683.894 L1537.87 683.894 L1538.43 683.894 L1538.99 683.894 L1539.55 683.894 L1540.11 683.894 L1540.67 683.894 L1541.23 683.894 L1541.79 683.894 L1542.35 683.894 L1542.9 683.894 L1543.46 683.894 L1544.02 683.894 L1544.58 683.894 L1545.14 683.894 L1545.7 683.894 L1546.26 683.894 L1546.82 683.894 L1547.38 683.894 L1547.94 683.894 L1548.5 683.894 L1549.06 683.894 L1549.62 683.894 L1550.18 683.894 L1550.73 683.894 L1551.29 683.894 L1551.85 683.894 L1552.41 683.894 L1552.97 683.894 L1553.53 683.894 L1554.09 683.894 L1554.65 683.894 L1555.21 683.894 L1555.77 683.894 L1556.33 683.894 L1556.89 683.894 L1557.45 683.894 L1558 683.894 L1558.56 683.894 L1559.12 683.894 L1559.68 683.894 L1560.24 683.894 L1560.8 683.894 L1561.36 683.894 L1561.92 683.894 L1562.48 683.894 L1563.04 683.894 L1563.6 683.894 L1564.16 683.894 L1564.72 683.894 L1565.28 683.894 L1565.83 683.894 L1566.39 683.894 L1566.95 683.894 L1567.51 683.894 L1568.07 683.894 L1568.63 683.894 L1569.19 683.894 L1569.75 683.894 L1570.31 683.894 L1570.87 683.894 L1571.43 683.894 L1571.99 683.894 L1572.55 683.894 L1573.1 683.894 L1573.66 683.894 L1574.22 683.894 L1574.78 683.894 L1575.34 683.894 L1575.9 683.894 L1576.46 683.894 L1577.02 683.894 L1577.58 683.894 L1578.14 683.894 L1578.7 683.894 L1579.26 683.894 L1579.82 683.894 L1580.37 683.894 L1580.93 683.894 L1581.49 683.894 L1582.05 683.894 L1582.61 683.894 L1583.17 683.894 L1583.73 683.894 L1584.29 683.894 L1584.85 683.894 L1585.41 683.894 L1585.97 683.894 L1586.53 683.894 L1587.09 683.894 L1587.65 683.894 L1588.2 683.894 L1588.76 683.894 L1589.32 683.894 L1589.88 683.894 L1590.44 683.894 L1591 683.894 L1591.56 683.894 L1592.12 683.894 L1592.68 683.894 L1593.24 683.894 L1593.8 683.894 L1594.36 683.894 L1594.92 683.894 L1595.47 683.894 L1596.03 683.894 L1596.59 683.894 L1597.15 683.894 L1597.71 683.894 L1598.27 683.894 L1598.83 683.894 L1599.39 683.894 L1599.95 683.894 L1600.51 683.894 L1601.07 683.894 L1601.63 683.894 L1602.19 683.894 L1602.74 683.894 L1603.3 683.894 L1603.86 683.894 L1604.42 683.894 L1604.98 683.894 L1605.54 683.894 L1606.1 683.894 L1606.66 683.894 L1607.22 683.894 L1607.78 683.894 L1608.34 683.894 L1608.9 683.894 L1609.46 683.894 L1610.02 683.894 L1610.57 683.894 L1611.13 683.894 L1611.69 683.894 L1612.25 683.894 L1612.81 683.894 L1613.37 683.894 L1613.93 683.894 L1614.49 683.894 L1615.05 683.894 L1615.61 683.894 L1616.17 683.894 L1616.73 683.894 L1617.29 683.894 L1617.84 683.894 L1618.4 683.894 L1618.96 683.894 L1619.52 683.894 L1620.08 683.894 L1620.64 683.894 L1621.2 683.894 L1621.76 683.894 L1622.32 683.894 L1622.88 683.894 L1623.44 683.894 L1624 683.894 L1624.56 683.894 L1625.11 683.894 L1625.67 683.894 L1626.23 683.894 L1626.79 683.894 L1627.35 683.894 L1627.91 683.894 L1628.47 683.894 L1629.03 683.894 L1629.59 683.894 L1630.15 683.894 L1630.71 683.894 L1631.27 683.894 L1631.83 683.894 L1632.39 683.894 L1632.94 683.894 L1633.5 683.894 L1634.06 683.894 L1634.62 683.894 L1635.18 683.894 L1635.74 683.894 L1636.3 683.894 L1636.86 683.894 L1637.42 683.894 L1637.98 683.894 L1638.54 683.894 L1639.1 683.894 L1639.66 683.894 L1640.21 683.894 L1640.77 683.894 L1641.33 683.894 L1641.89 683.894 L1642.45 683.894 L1643.01 683.894 L1643.57 683.894 L1644.13 683.894 L1644.69 683.894 L1645.25 683.894 L1645.81 683.894 L1646.37 683.894 L1646.93 683.894 L1647.48 683.894 L1648.04 683.894 L1648.6 683.894 L1649.16 683.894 L1649.72 683.894 L1650.28 683.894 L1650.84 683.894 L1651.4 683.894 L1651.96 683.894 L1652.52 683.894 L1653.08 683.894 L1653.64 683.894 L1654.2 683.894 L1654.76 683.894 L1655.31 683.894 L1655.87 683.894 L1656.43 683.894 L1656.99 683.894 L1657.55 683.894 L1658.11 683.894 L1658.67 683.894 L1659.23 683.894 L1659.79 683.894 L1660.35 683.894 L1660.91 683.894 L1661.47 683.894 L1662.03 683.894 L1662.58 683.894 L1663.14 683.894 L1663.7 683.894 L1664.26 683.894 L1664.82 683.894 L1665.38 683.894 L1665.94 683.894 L1666.5 683.894 L1667.06 683.894 L1667.62 683.894 L1668.18 683.894 L1668.74 683.894 L1669.3 683.894 L1669.85 683.894 L1670.41 683.894 L1670.97 683.894 L1671.53 683.894 L1672.09 683.894 L1672.65 683.894 L1673.21 683.894 L1673.77 683.894 L1674.33 683.894 L1674.89 683.894 L1675.45 683.894 L1676.01 683.894 L1676.57 683.894 L1677.13 683.894 L1677.68 683.894 L1678.24 683.894 L1678.8 683.894 L1679.36 683.894 L1679.92 683.894 L1680.48 683.894 L1681.04 683.894 L1681.6 683.894 L1682.16 683.894 L1682.72 683.894 L1683.28 683.894 L1683.84 683.894 L1684.4 683.894 L1684.95 683.894 L1685.51 683.894 L1686.07 683.894 L1686.63 683.894 L1687.19 683.894 L1687.75 683.894 L1688.31 683.894 L1688.87 683.894 L1689.43 683.894 L1689.99 683.894 L1690.55 683.894 L1691.11 683.894 L1691.67 683.894 L1692.23 683.894 L1692.78 683.894 L1693.34 683.894 L1693.9 683.894 L1694.46 683.894 L1695.02 683.894 L1695.58 683.894 L1696.14 683.894 L1696.7 683.894 L1697.26 683.894 L1697.82 683.894 L1698.38 683.894 L1698.94 683.894 L1699.5 683.894 L1700.05 683.894 L1700.61 683.894 L1701.17 683.894 L1701.73 683.894 L1702.29 683.894 L1702.85 683.894 L1703.41 683.894 L1703.97 683.894 L1704.53 683.894 L1705.09 683.894 L1705.65 683.894 L1706.21 683.894 L1706.77 683.894 L1707.32 683.894 L1707.88 683.894 L1708.44 683.894 L1709 683.894 L1709.56 683.894 L1710.12 683.894 L1710.68 683.894 L1711.24 683.894 L1711.8 683.894 L1712.36 683.894 L1712.92 683.894 L1713.48 683.894 L1714.04 683.894 L1714.6 683.894 L1715.15 683.894 L1715.71 683.894 L1716.27 683.894 L1716.83 683.894 L1717.39 683.894 L1717.95 683.894 L1718.51 683.894 L1719.07 683.894 L1719.63 683.894 L1720.19 683.894 L1720.75 683.894 L1721.31 683.894 L1721.87 683.894 L1722.42 683.894 L1722.98 683.894 L1723.54 683.894 L1724.1 683.894 L1724.66 683.894 L1725.22 683.894 L1725.78 683.894 L1726.34 683.894 L1726.9 683.894 L1727.46 683.894 L1728.02 683.894 L1728.58 683.894 L1729.14 683.894 L1729.69 683.894 L1730.25 683.894 L1730.81 683.894 L1731.37 683.894 L1731.93 683.894 L1732.49 683.894 L1733.05 683.894 L1733.61 683.894 L1734.17 683.894 L1734.73 683.894 L1735.29 683.894 L1735.85 683.894 L1736.41 683.894 L1736.97 683.894 L1737.52 683.894 L1738.08 683.894 L1738.64 683.894 L1739.2 683.894 L1739.76 683.894 L1740.32 683.894 L1740.88 683.894 L1741.44 683.894 L1742 683.894 L1742.56 683.894 L1743.12 683.894 L1743.68 683.894 L1744.24 683.894 L1744.79 683.894 L1745.35 683.894 L1745.91 683.894 L1746.47 683.894 L1747.03 683.894 L1747.59 683.894 L1748.15 683.894 L1748.71 683.894 L1749.27 683.894 L1749.83 683.894 L1750.39 683.894 L1750.95 683.894 L1751.51 683.894 L1752.06 683.894 L1752.62 683.894 L1753.18 683.894 L1753.74 683.894 L1754.3 683.894 L1754.86 683.894 L1755.42 683.894 L1755.98 683.894 L1756.54 683.894 L1757.1 683.894 L1757.66 683.894 L1758.22 683.894 L1758.78 683.894 L1759.34 683.894 L1759.89 683.894 L1760.45 683.894 L1761.01 683.894 L1761.57 683.894 L1762.13 683.894 L1762.69 683.894 L1763.25 683.894 L1763.81 683.894 L1764.37 683.894 L1764.93 683.894 L1765.49 683.894 L1766.05 683.894 L1766.61 683.894 L1767.16 683.894 L1767.72 683.894 L1768.28 683.894 L1768.84 683.894 L1769.4 683.894 L1769.96 683.894 L1770.52 683.894 L1771.08 683.894 L1771.64 683.894 L1772.2 683.894 L1772.76 683.894 L1773.32 683.894 L1773.88 683.894 L1774.43 683.894 L1774.99 683.894 L1775.55 683.894 L1776.11 683.894 L1776.67 683.894 L1777.23 683.894 L1777.79 683.894 L1778.35 683.894 L1778.91 683.894 L1779.47 683.894 L1780.03 683.894 L1780.59 683.894 L1781.15 683.894 L1781.71 683.894 L1782.26 683.894 L1782.82 683.894 L1783.38 683.894 L1783.94 683.894 L1784.5 683.894 L1785.06 683.894 L1785.62 683.894 L1786.18 683.894 L1786.74 683.894 L1787.3 683.894 L1787.86 683.894 L1788.42 683.894 L1788.98 683.894 L1789.53 683.894 L1790.09 683.894 L1790.65 683.894 L1791.21 683.894 L1791.77 683.894 L1792.33 683.894 L1792.89 683.894 L1793.45 683.894 L1794.01 683.894 L1794.57 683.894 L1795.13 683.894 L1795.69 683.894 L1796.25 683.894 L1796.8 683.894 L1797.36 683.894 L1797.92 683.894 L1798.48 683.894 L1799.04 683.894 L1799.6 683.894 L1800.16 683.894 L1800.72 683.894 L1801.28 683.894 L1801.84 683.894 L1802.4 683.894 L1802.96 683.894 L1803.52 683.894 L1804.08 683.894 L1804.63 683.894 L1805.19 683.894 L1805.75 683.894 L1806.31 683.894 L1806.87 683.894 L1807.43 683.894 L1807.99 683.894 L1808.55 683.894 L1809.11 683.894 L1809.67 683.894 L1810.23 683.894 L1810.79 683.894 L1811.35 683.894 L1811.9 683.894 L1812.46 683.894 L1813.02 683.894 L1813.58 683.894 L1814.14 683.894 L1814.7 683.894 L1815.26 683.894 L1815.82 683.894 L1816.38 683.894 L1816.94 683.894 L1817.5 683.894 L1818.06 683.894 L1818.62 683.894 L1819.18 683.894 L1819.73 683.894 L1820.29 683.894 L1820.85 683.894 L1821.41 683.894 L1821.97 683.894 L1822.53 683.894 L1823.09 683.894 L1823.65 683.894 L1824.21 683.894 L1824.77 683.894 L1825.33 683.894 L1825.89 683.894 L1826.45 683.894 L1827 683.894 L1827.56 683.894 L1828.12 683.894 L1828.68 683.894 L1829.24 683.894 L1829.8 683.894 L1830.36 683.894 L1830.92 683.894 L1831.48 683.894 L1832.04 683.894 L1832.6 683.894 L1833.16 683.894 L1833.72 683.894 L1834.27 683.894 L1834.83 683.894 L1835.39 683.894 L1835.95 683.894 L1836.51 683.894 L1837.07 683.894 L1837.63 683.894 L1838.19 683.894 L1838.19 682.306 L1837.63 682.306 L1837.07 682.306 L1836.51 682.306 L1835.95 682.306 L1835.39 682.306 L1834.83 682.306 L1834.27 682.306 L1833.72 682.306 L1833.16 682.306 L1832.6 682.306 L1832.04 682.306 L1831.48 682.306 L1830.92 682.306 L1830.36 682.306 L1829.8 682.306 L1829.24 682.306 L1828.68 682.306 L1828.12 682.306 L1827.56 682.306 L1827 682.306 L1826.45 682.306 L1825.89 682.306 L1825.33 682.306 L1824.77 682.306 L1824.21 682.306 L1823.65 682.306 L1823.09 682.306 L1822.53 682.306 L1821.97 682.306 L1821.41 682.306 L1820.85 682.306 L1820.29 682.306 L1819.73 682.306 L1819.18 682.306 L1818.62 682.306 L1818.06 682.306 L1817.5 682.306 L1816.94 682.306 L1816.38 682.306 L1815.82 682.306 L1815.26 682.306 L1814.7 682.306 L1814.14 682.306 L1813.58 682.306 L1813.02 682.306 L1812.46 682.306 L1811.9 682.306 L1811.35 682.306 L1810.79 682.306 L1810.23 682.306 L1809.67 682.306 L1809.11 682.306 L1808.55 682.306 L1807.99 682.306 L1807.43 682.306 L1806.87 682.306 L1806.31 682.306 L1805.75 682.306 L1805.19 682.306 L1804.63 682.306 L1804.08 682.306 L1803.52 682.306 L1802.96 682.306 L1802.4 682.306 L1801.84 682.306 L1801.28 682.306 L1800.72 682.306 L1800.16 682.306 L1799.6 682.306 L1799.04 682.306 L1798.48 682.306 L1797.92 682.306 L1797.36 682.306 L1796.8 682.306 L1796.25 682.306 L1795.69 682.306 L1795.13 682.306 L1794.57 682.306 L1794.01 682.306 L1793.45 682.306 L1792.89 682.306 L1792.33 682.306 L1791.77 682.306 L1791.21 682.306 L1790.65 682.306 L1790.09 682.306 L1789.53 682.306 L1788.98 682.306 L1788.42 682.306 L1787.86 682.306 L1787.3 682.306 L1786.74 682.306 L1786.18 682.306 L1785.62 682.306 L1785.06 682.306 L1784.5 682.306 L1783.94 682.306 L1783.38 682.306 L1782.82 682.306 L1782.26 682.306 L1781.71 682.306 L1781.15 682.306 L1780.59 682.306 L1780.03 682.306 L1779.47 682.306 L1778.91 682.306 L1778.35 682.306 L1777.79 682.306 L1777.23 682.306 L1776.67 682.306 L1776.11 682.306 L1775.55 682.306 L1774.99 682.306 L1774.43 682.306 L1773.88 682.306 L1773.32 682.306 L1772.76 682.306 L1772.2 682.306 L1771.64 682.306 L1771.08 682.306 L1770.52 682.306 L1769.96 682.306 L1769.4 682.306 L1768.84 682.306 L1768.28 682.306 L1767.72 682.306 L1767.16 682.306 L1766.61 682.306 L1766.05 682.306 L1765.49 682.306 L1764.93 682.306 L1764.37 682.306 L1763.81 682.306 L1763.25 682.306 L1762.69 682.306 L1762.13 682.306 L1761.57 682.306 L1761.01 682.306 L1760.45 682.306 L1759.89 682.306 L1759.34 682.306 L1758.78 682.306 L1758.22 682.306 L1757.66 682.306 L1757.1 682.306 L1756.54 682.306 L1755.98 682.306 L1755.42 682.306 L1754.86 682.306 L1754.3 682.306 L1753.74 682.306 L1753.18 682.306 L1752.62 682.306 L1752.06 682.306 L1751.51 682.306 L1750.95 682.306 L1750.39 682.306 L1749.83 682.306 L1749.27 682.306 L1748.71 682.306 L1748.15 682.306 L1747.59 682.306 L1747.03 682.306 L1746.47 682.306 L1745.91 682.306 L1745.35 682.306 L1744.79 682.306 L1744.24 682.306 L1743.68 682.306 L1743.12 682.306 L1742.56 682.306 L1742 682.306 L1741.44 682.306 L1740.88 682.306 L1740.32 682.306 L1739.76 682.306 L1739.2 682.306 L1738.64 682.306 L1738.08 682.306 L1737.52 682.306 L1736.97 682.306 L1736.41 682.306 L1735.85 682.306 L1735.29 682.306 L1734.73 682.306 L1734.17 682.306 L1733.61 682.306 L1733.05 682.306 L1732.49 682.306 L1731.93 682.306 L1731.37 682.306 L1730.81 682.306 L1730.25 682.306 L1729.69 682.306 L1729.14 682.306 L1728.58 682.306 L1728.02 682.306 L1727.46 682.306 L1726.9 682.306 L1726.34 682.306 L1725.78 682.306 L1725.22 682.306 L1724.66 682.306 L1724.1 682.306 L1723.54 682.306 L1722.98 682.306 L1722.42 682.306 L1721.87 682.306 L1721.31 682.306 L1720.75 682.306 L1720.19 682.306 L1719.63 682.306 L1719.07 682.306 L1718.51 682.306 L1717.95 682.306 L1717.39 682.306 L1716.83 682.306 L1716.27 682.306 L1715.71 682.306 L1715.15 682.306 L1714.6 682.306 L1714.04 682.306 L1713.48 682.306 L1712.92 682.306 L1712.36 682.306 L1711.8 682.306 L1711.24 682.306 L1710.68 682.306 L1710.12 682.306 L1709.56 682.306 L1709 682.306 L1708.44 682.306 L1707.88 682.306 L1707.32 682.306 L1706.77 682.306 L1706.21 682.306 L1705.65 682.306 L1705.09 682.306 L1704.53 682.306 L1703.97 682.306 L1703.41 682.306 L1702.85 682.306 L1702.29 682.306 L1701.73 682.306 L1701.17 682.306 L1700.61 682.306 L1700.05 682.306 L1699.5 682.306 L1698.94 682.306 L1698.38 682.306 L1697.82 682.306 L1697.26 682.306 L1696.7 682.306 L1696.14 682.306 L1695.58 682.306 L1695.02 682.306 L1694.46 682.306 L1693.9 682.306 L1693.34 682.306 L1692.78 682.306 L1692.23 682.306 L1691.67 682.306 L1691.11 682.306 L1690.55 682.306 L1689.99 682.306 L1689.43 682.306 L1688.87 682.306 L1688.31 682.306 L1687.75 682.306 L1687.19 682.306 L1686.63 682.306 L1686.07 682.306 L1685.51 682.306 L1684.95 682.306 L1684.4 682.306 L1683.84 682.306 L1683.28 682.306 L1682.72 682.306 L1682.16 682.306 L1681.6 682.306 L1681.04 682.306 L1680.48 682.306 L1679.92 682.306 L1679.36 682.306 L1678.8 682.306 L1678.24 682.306 L1677.68 682.306 L1677.13 682.306 L1676.57 682.306 L1676.01 682.306 L1675.45 682.306 L1674.89 682.306 L1674.33 682.306 L1673.77 682.306 L1673.21 682.306 L1672.65 682.306 L1672.09 682.306 L1671.53 682.306 L1670.97 682.306 L1670.41 682.306 L1669.85 682.306 L1669.3 682.306 L1668.74 682.306 L1668.18 682.306 L1667.62 682.306 L1667.06 682.306 L1666.5 682.306 L1665.94 682.306 L1665.38 682.306 L1664.82 682.306 L1664.26 682.306 L1663.7 682.306 L1663.14 682.306 L1662.58 682.306 L1662.03 682.306 L1661.47 682.306 L1660.91 682.306 L1660.35 682.306 L1659.79 682.306 L1659.23 682.306 L1658.67 682.306 L1658.11 682.306 L1657.55 682.306 L1656.99 682.306 L1656.43 682.306 L1655.87 682.306 L1655.31 682.306 L1654.76 682.306 L1654.2 682.306 L1653.64 682.306 L1653.08 682.306 L1652.52 682.306 L1651.96 682.306 L1651.4 682.306 L1650.84 682.306 L1650.28 682.306 L1649.72 682.306 L1649.16 682.306 L1648.6 682.306 L1648.04 682.306 L1647.48 682.306 L1646.93 682.306 L1646.37 682.306 L1645.81 682.306 L1645.25 682.306 L1644.69 682.306 L1644.13 682.306 L1643.57 682.306 L1643.01 682.306 L1642.45 682.306 L1641.89 682.306 L1641.33 682.306 L1640.77 682.306 L1640.21 682.306 L1639.66 682.306 L1639.1 682.306 L1638.54 682.306 L1637.98 682.306 L1637.42 682.306 L1636.86 682.306 L1636.3 682.306 L1635.74 682.306 L1635.18 682.306 L1634.62 682.306 L1634.06 682.306 L1633.5 682.306 L1632.94 682.306 L1632.39 682.306 L1631.83 682.306 L1631.27 682.306 L1630.71 682.306 L1630.15 682.306 L1629.59 682.306 L1629.03 682.306 L1628.47 682.306 L1627.91 682.306 L1627.35 682.306 L1626.79 682.306 L1626.23 682.306 L1625.67 682.306 L1625.11 682.306 L1624.56 682.306 L1624 682.306 L1623.44 682.306 L1622.88 682.306 L1622.32 682.306 L1621.76 682.306 L1621.2 682.306 L1620.64 682.306 L1620.08 682.306 L1619.52 682.306 L1618.96 682.306 L1618.4 682.306 L1617.84 682.306 L1617.29 682.306 L1616.73 682.306 L1616.17 682.306 L1615.61 682.306 L1615.05 682.306 L1614.49 682.306 L1613.93 682.306 L1613.37 682.306 L1612.81 682.306 L1612.25 682.306 L1611.69 682.306 L1611.13 682.306 L1610.57 682.306 L1610.02 682.306 L1609.46 682.306 L1608.9 682.306 L1608.34 682.306 L1607.78 682.306 L1607.22 682.306 L1606.66 682.306 L1606.1 682.306 L1605.54 682.306 L1604.98 682.306 L1604.42 682.306 L1603.86 682.306 L1603.3 682.306 L1602.74 682.306 L1602.19 682.306 L1601.63 682.306 L1601.07 682.306 L1600.51 682.306 L1599.95 682.306 L1599.39 682.306 L1598.83 682.306 L1598.27 682.306 L1597.71 682.306 L1597.15 682.306 L1596.59 682.306 L1596.03 682.306 L1595.47 682.306 L1594.92 682.306 L1594.36 682.306 L1593.8 682.306 L1593.24 682.306 L1592.68 682.306 L1592.12 682.306 L1591.56 682.306 L1591 682.306 L1590.44 682.306 L1589.88 682.306 L1589.32 682.306 L1588.76 682.306 L1588.2 682.306 L1587.65 682.306 L1587.09 682.306 L1586.53 682.306 L1585.97 682.306 L1585.41 682.306 L1584.85 682.306 L1584.29 682.306 L1583.73 682.306 L1583.17 682.306 L1582.61 682.306 L1582.05 682.306 L1581.49 682.306 L1580.93 682.306 L1580.37 682.306 L1579.82 682.306 L1579.26 682.306 L1578.7 682.306 L1578.14 682.306 L1577.58 682.306 L1577.02 682.306 L1576.46 682.306 L1575.9 682.306 L1575.34 682.306 L1574.78 682.306 L1574.22 682.306 L1573.66 682.306 L1573.1 682.306 L1572.55 682.306 L1571.99 682.306 L1571.43 682.306 L1570.87 682.306 L1570.31 682.306 L1569.75 682.306 L1569.19 682.306 L1568.63 682.306 L1568.07 682.306 L1567.51 682.306 L1566.95 682.306 L1566.39 682.306 L1565.83 682.306 L1565.28 682.306 L1564.72 682.306 L1564.16 682.306 L1563.6 682.306 L1563.04 682.306 L1562.48 682.306 L1561.92 682.306 L1561.36 682.306 L1560.8 682.306 L1560.24 682.306 L1559.68 682.306 L1559.12 682.306 L1558.56 682.306 L1558 682.306 L1557.45 682.306 L1556.89 682.306 L1556.33 682.306 L1555.77 682.306 L1555.21 682.306 L1554.65 682.306 L1554.09 682.306 L1553.53 682.306 L1552.97 682.306 L1552.41 682.306 L1551.85 682.306 L1551.29 682.306 L1550.73 682.306 L1550.18 682.306 L1549.62 682.306 L1549.06 682.306 L1548.5 682.306 L1547.94 682.306 L1547.38 682.306 L1546.82 682.306 L1546.26 682.306 L1545.7 682.306 L1545.14 682.306 L1544.58 682.306 L1544.02 682.306 L1543.46 682.306 L1542.9 682.306 L1542.35 682.306 L1541.79 682.306 L1541.23 682.306 L1540.67 682.306 L1540.11 682.306 L1539.55 682.306 L1538.99 682.306 L1538.43 682.306 L1537.87 682.306 L1537.31 682.306 L1536.75 682.306 L1536.19 682.306 L1535.63 682.306 L1535.08 682.306 L1534.52 682.306 L1533.96 682.306 L1533.4 682.306 L1532.84 682.306 L1532.28 682.306 L1531.72 682.306 L1531.16 682.306 L1530.6 682.306 L1530.04 682.306 L1529.48 682.306 L1528.92 682.306 L1528.36 682.306 L1527.81 682.306 L1527.25 682.306 L1526.69 682.306 L1526.13 682.306 L1525.57 682.306 L1525.01 682.306 L1524.45 682.306 L1523.89 682.306 L1523.33 682.306 L1522.77 682.306 L1522.21 682.306 L1521.65 682.306 L1521.09 682.306 L1520.53 682.306 L1519.98 682.306 L1519.42 682.306 L1518.86 682.306 L1518.3 682.306 L1517.74 682.306 L1517.18 682.306 L1516.62 682.306 L1516.06 682.306 L1515.5 682.306 L1514.94 682.306 L1514.38 682.306 L1513.82 682.306 L1513.26 682.306 L1512.71 682.306 L1512.15 682.306 L1511.59 682.306 L1511.03 682.306 L1510.47 682.306 L1509.91 682.306 L1509.35 682.306 L1508.79 682.306 L1508.23 682.306 L1507.67 682.306 L1507.11 682.306 L1506.55 682.306 L1505.99 682.306 L1505.44 682.306 L1504.88 682.306 L1504.32 682.306 L1503.76 682.306 L1503.2 682.306 L1502.64 682.306 L1502.08 682.306 L1501.52 682.306 L1500.96 682.306 L1500.4 682.306 L1499.84 682.306 L1499.28 682.306 L1498.72 682.306 L1498.16 682.306 L1497.61 682.306 L1497.05 682.306 L1496.49 682.306 L1495.93 682.306 L1495.37 682.306 L1494.81 682.306 L1494.25 682.306 L1493.69 682.306 L1493.13 682.306 L1492.57 682.306 L1492.01 682.306 L1491.45 682.306 L1490.89 682.306 L1490.34 682.306 L1489.78 682.306 L1489.22 682.306 L1488.66 682.306 L1488.1 682.306 L1487.54 682.306 L1486.98 682.306 L1486.42 682.306 L1485.86 682.306 L1485.3 682.306 L1484.74 682.306 L1484.18 682.306 L1483.62 682.306 L1483.07 682.306 L1482.51 682.306 L1481.95 682.306 L1481.39 682.306 L1480.83 682.306 L1480.27 682.306 L1479.71 682.306 L1479.15 682.306 L1478.59 682.306 L1478.03 682.306 L1477.47 682.306 L1476.91 682.306 L1476.35 682.306 L1475.79 682.306 L1475.24 682.306 L1474.68 682.306 L1474.12 682.306 L1473.56 682.306 L1473 682.306 L1472.44 682.306 L1471.88 682.306 L1471.32 682.306 L1470.76 682.306 L1470.2 682.306 L1469.64 682.306 L1469.08 682.306 L1468.52 682.306 L1467.97 682.306 L1467.41 682.306 L1466.85 682.306 L1466.29 682.306 L1465.73 682.306 L1465.17 682.306 L1464.61 682.306 L1464.05 682.306 L1463.49 682.306 L1462.93 682.306 L1462.37 682.306 L1461.81 682.306 L1461.25 682.306 L1460.7 682.306 L1460.14 682.306 L1459.58 682.306 L1459.02 682.306 L1458.46 682.306 L1457.9 682.306 L1457.34 682.306 L1456.78 682.306 L1456.22 682.306 L1455.66 682.306 L1455.1 682.306 L1454.54 682.306 L1453.98 682.306 L1453.42 682.306 L1452.87 682.306 L1452.31 682.306 L1451.75 682.306 L1451.19 682.306 L1450.63 682.306 L1450.07 682.306 L1449.51 682.306 L1448.95 682.306 L1448.39 682.306 L1447.83 682.306 L1447.27 682.306 L1446.71 682.306 L1446.15 682.306 L1445.6 682.306 L1445.04 682.306 L1444.48 682.306 L1443.92 682.306 L1443.36 682.306 L1442.8 682.306 L1442.24 682.306 L1441.68 682.306 L1441.12 682.306 L1440.56 682.306 L1440 682.306 L1439.44 682.306 L1438.88 682.306 L1438.33 682.306 L1437.77 682.306 L1437.21 682.306 L1436.65 682.306 L1436.09 682.306 L1435.53 682.306 L1434.97 682.306 L1434.41 682.306 L1433.85 682.306 L1433.29 682.306 L1432.73 682.306 L1432.17 682.306 L1431.61 682.306 L1431.05 682.306 L1430.5 682.306 L1429.94 682.306 L1429.38 682.306 L1428.82 682.306 L1428.26 682.306 L1427.7 682.306 L1427.14 682.306 L1426.58 682.306 L1426.02 682.306 L1425.46 682.306 L1424.9 682.306 L1424.34 682.306 L1423.78 682.306 L1423.23 682.306 L1422.67 682.306 L1422.11 682.306 L1421.55 682.306 L1420.99 682.306 L1420.43 682.306 L1419.87 682.306 L1419.31 682.306 L1418.75 682.306 L1418.19 682.306 L1417.63 682.306 L1417.07 682.306 L1416.51 682.306 L1415.95 682.306 L1415.4 682.306 L1414.84 682.306 L1414.28 682.306 L1413.72 682.306 L1413.16 682.306 L1412.6 682.306 L1412.04 682.306 L1411.48 682.306 L1410.92 682.306 L1410.36 682.306 L1409.8 682.306 L1409.24 682.306 L1408.68 682.306 L1408.13 682.306 L1407.57 682.306 L1407.01 682.306 L1406.45 682.306 L1405.89 682.306 L1405.33 682.306 L1404.77 682.306 L1404.21 682.306 L1403.65 682.306 L1403.09 682.306 L1402.53 682.306 L1401.97 682.306 L1401.41 682.306 L1400.86 682.306 L1400.3 682.306 L1399.74 682.306 L1399.18 682.306 L1398.62 682.306 L1398.06 682.306 L1397.5 682.306 L1396.94 682.306 L1396.38 682.306 L1395.82 682.306 L1395.26 682.306 L1394.7 682.306 L1394.14 682.306 L1393.58 682.306 L1393.03 682.306 L1392.47 682.306 L1391.91 682.306 L1391.35 682.306 L1390.79 682.306 L1390.23 682.306 L1389.67 682.306 L1389.11 682.306 L1388.55 682.306 L1387.99 682.306 L1387.43 682.306 L1386.87 682.306 L1386.31 682.306 L1385.76 682.306 L1385.2 682.306 L1384.64 682.306 L1384.08 682.306 L1383.52 682.306 L1382.96 682.306 L1382.4 682.306 L1381.84 682.306 L1381.28 682.306 L1380.72 682.306 L1380.16 682.306 L1379.6 682.306 L1379.04 682.306 L1378.49 682.306 L1377.93 682.306 L1377.37 682.306 L1376.81 682.306 L1376.25 682.306 L1375.69 682.306 L1375.13 682.306 L1374.57 682.306 L1374.01 682.306 L1373.45 682.306 L1372.89 682.306 L1372.33 682.306 L1371.77 682.306 L1371.21 682.306 L1370.66 682.306 L1370.1 682.306 L1369.54 682.306 L1368.98 682.306 L1368.42 682.306 L1367.86 682.306 L1367.3 682.306 L1366.74 682.306 L1366.18 682.306 L1365.62 682.306 L1365.06 682.306 L1364.5 682.306 L1363.94 682.306 L1363.39 682.306 L1362.83 682.306 L1362.27 682.306 L1361.71 682.306 L1361.15 682.306 L1360.59 682.306 L1360.03 682.306 L1359.47 682.306 L1358.91 682.306 L1358.35 682.306 L1357.79 682.306 L1357.23 682.306 L1356.67 682.306 L1356.12 682.306 L1355.56 682.306 L1355 682.306 L1354.44 682.306 L1353.88 682.306 L1353.32 682.306 L1352.76 682.306 L1352.2 682.306 L1351.64 682.306 L1351.08 682.306 L1350.52 682.306 L1349.96 682.306 L1349.4 682.306 L1348.84 682.306 L1348.29 682.306 L1347.73 682.306 L1347.17 682.306 L1346.61 682.306 L1346.05 682.306 L1345.49 682.306 L1344.93 682.306 L1344.37 682.306 L1343.81 682.306 L1343.25 682.306 L1342.69 682.306 L1342.13 682.306 L1341.57 682.306 L1341.02 682.306 L1340.46 682.306 L1339.9 682.306 L1339.34 682.306 L1338.78 682.306 L1338.22 682.306 L1337.66 682.306 L1337.1 682.306 L1336.54 682.306 L1335.98 682.306 L1335.42 682.306 L1334.86 682.306 L1334.3 682.306 L1333.75 682.306 L1333.19 682.306 L1332.63 682.306 L1332.07 682.306 L1331.51 682.306 L1330.95 682.306 L1330.39 682.306 L1329.83 682.306 L1329.27 682.306 L1328.71 682.306 L1328.15 682.306 L1327.59 682.306 L1327.03 682.306 L1326.47 682.306 L1325.92 682.306 L1325.36 682.306 L1324.8 682.306 L1324.24 682.306 L1323.68 682.306 L1323.12 682.306 L1322.56 682.306 L1322 682.306 L1321.44 682.306 L1320.88 682.306 L1320.32 682.306 L1319.76 682.306 L1319.2 682.306 L1318.65 682.306 L1318.09 682.306 L1317.53 682.306 L1316.97 682.306 L1316.41 682.306 L1315.85 682.306 L1315.29 682.306 L1314.73 682.306 L1314.17 682.306 L1313.61 682.306 L1313.05 682.306 L1312.49 682.306 L1311.93 682.306 L1311.38 682.306 L1310.82 682.306 L1310.26 682.306 L1309.7 682.306 L1309.14 682.306 L1308.58 682.306 L1308.02 682.306 L1307.46 682.306 L1306.9 682.306 L1306.34 682.306 L1305.78 682.306 L1305.22 682.306 L1304.66 682.306 L1304.1 682.306 L1303.55 682.306 L1302.99 682.306 L1302.43 682.306 L1301.87 682.306 L1301.31 682.306 L1300.75 682.306 L1300.19 682.306 L1299.63 682.306 L1299.07 682.306 L1298.51 682.306 L1297.95 682.306 L1297.39 682.306 L1296.83 682.306 L1296.28 682.306 L1295.72 682.306 L1295.16 682.306 L1294.6 682.306 L1294.04 682.306 L1293.48 682.306 L1292.92 682.306 L1292.36 682.306 L1291.8 682.306 L1291.24 682.306 L1290.68 682.306 L1290.12 682.306 L1289.56 682.306 L1289 682.306 L1288.45 682.306 L1287.89 682.306 L1287.33 682.306 L1286.77 682.306 L1286.21 682.306 L1285.65 682.306 L1285.09 682.306 L1284.53 682.306 L1283.97 682.306 L1283.41 682.306 L1282.85 682.306 L1282.29 682.306 L1281.73 682.306 L1281.18 682.306 L1280.62 682.306 L1280.06 682.306 L1279.5 682.306 L1278.94 682.306 L1278.38 682.306 L1277.82 682.306 L1277.26 682.306 L1276.7 682.306 L1276.14 682.306 L1275.58 682.306 L1275.02 682.306 L1274.46 682.306 L1273.91 682.306 L1273.35 682.306 L1272.79 682.306 L1272.23 682.306 L1271.67 682.306 L1271.11 682.306 L1270.55 682.306 L1269.99 682.306 L1269.43 682.306 L1268.87 682.306 L1268.31 682.306 L1267.75 682.306 L1267.19 682.306 L1266.63 682.306 L1266.08 682.306 L1265.52 682.306 L1264.96 682.306 L1264.4 682.306 L1263.84 682.306 L1263.28 682.306 L1262.72 682.306 L1262.16 682.306 L1261.6 682.306 L1261.04 682.306 L1260.48 682.306 L1259.92 682.306 L1259.36 682.306 L1258.81 682.306 L1258.25 682.306 L1257.69 682.306 L1257.13 682.306 L1256.57 682.306 L1256.01 682.306 L1255.45 682.306 L1254.89 682.306 L1254.33 682.306 L1253.77 682.306 L1253.21 682.306 L1252.65 682.306 L1252.09 682.306 L1251.54 682.306 L1250.98 682.306 L1250.42 682.306 L1249.86 682.306 L1249.3 682.306 L1248.74 682.306 L1248.18 682.306 L1247.62 682.306 L1247.06 682.306 L1246.5 682.306 L1245.94 682.306 L1245.38 682.306 L1244.82 682.306 L1244.26 682.306 L1243.71 682.306 L1243.15 682.306 L1242.59 682.306 L1242.03 682.306 L1241.47 682.306 L1240.91 682.306 L1240.35 682.306 L1239.79 682.306 L1239.23 682.306 L1238.67 682.306 L1238.11 682.306 L1237.55 682.306 L1236.99 682.306 L1236.44 682.306 L1235.88 682.306 L1235.32 682.306 L1234.76 682.306 L1234.2 682.306 L1233.64 682.306 L1233.08 682.306 L1232.52 682.306 L1231.96 682.306 L1231.4 682.306 L1230.84 682.306 L1230.28 682.306 L1229.72 682.306 L1229.17 682.306 L1228.61 682.306 L1228.05 682.306 L1227.49 682.306 L1226.93 682.306 L1226.37 682.306 L1225.81 682.306 L1225.25 682.306 L1224.69 682.306 L1224.13 682.306 L1223.57 682.306 L1223.01 682.306 L1222.45 682.306 L1221.89 682.306 L1221.34 682.306 L1220.78 682.306 L1220.22 682.306 L1219.66 682.306 L1219.1 682.306 L1218.54 682.306 L1217.98 682.306 L1217.42 682.306 L1216.86 682.306 L1216.3 682.306 L1215.74 682.306 L1215.18 682.306 L1214.62 682.306 L1214.07 682.306 L1213.51 682.306 L1212.95 682.306 L1212.39 682.306 L1211.83 682.306 L1211.27 682.306 L1210.71 682.306 L1210.15 682.306 L1209.59 682.306 L1209.03 682.306 L1208.47 682.306 L1207.91 682.306 L1207.35 682.306 L1206.8 682.306 L1206.24 682.306 L1205.68 682.306 L1205.12 682.306 L1204.56 682.306 L1204 682.306 L1203.44 682.306 L1202.88 682.306 L1202.32 682.306 L1201.76 682.306 L1201.2 682.306 L1200.64 682.306 L1200.08 682.306 L1199.52 682.306 L1198.97 682.306 L1198.41 682.306 L1197.85 682.306 L1197.29 682.306 L1196.73 682.306 L1196.17 682.306 L1195.61 682.306 L1195.05 682.306 L1194.49 682.306 L1193.93 682.306 L1193.37 682.306 L1192.81 682.306 L1192.25 682.306 L1191.7 682.306 L1191.14 682.306 L1190.58 682.306 L1190.02 682.306 L1189.46 682.306 L1188.9 682.306 L1188.34 682.306 L1187.78 682.306 L1187.22 682.306 L1186.66 682.306 L1186.1 682.306 L1185.54 682.306 L1184.98 682.306 L1184.43 682.306 L1183.87 682.306 L1183.31 682.306 L1182.75 682.306 L1182.19 682.306 L1181.63 682.306 L1181.07 682.306 L1180.51 682.306 L1179.95 682.306 L1179.39 682.306 L1178.83 682.306 L1178.27 682.306 L1177.71 682.306 L1177.15 682.306 L1176.6 682.306 L1176.04 682.306 L1175.48 682.306 L1174.92 682.306 L1174.36 682.306 L1173.8 682.306 L1173.24 682.306 L1172.68 682.306 L1172.12 682.306 L1171.56 682.306 L1171 682.306 L1170.44 682.306 L1169.88 682.306 L1169.33 682.306 L1168.77 682.306 L1168.21 682.306 L1167.65 682.306 L1167.09 682.306 L1166.53 682.306 L1165.97 682.306 L1165.41 682.306 L1164.85 682.306 L1164.29 682.306 L1163.73 682.306 L1163.17 682.306 L1162.61 682.306 L1162.05 682.306 L1161.5 682.306 L1160.94 682.306 L1160.38 682.306 L1159.82 682.306 L1159.26 682.306 L1158.7 682.306 L1158.14 682.306 L1157.58 682.306 L1157.02 682.306 L1156.46 682.306 L1155.9 682.306 L1155.34 682.306 L1154.78 682.306 L1154.23 682.306 L1153.67 682.306 L1153.11 682.306 L1152.55 682.306 L1151.99 682.306 L1151.43 682.306 L1150.87 682.306 L1150.31 682.306 L1149.75 682.306 L1149.19 682.306 L1148.63 682.306 L1148.07 682.306 L1147.51 682.306 L1146.96 682.306 L1146.4 682.306 L1145.84 682.306 L1145.28 682.306 L1144.72 682.306 L1144.16 682.306 L1143.6 682.306 L1143.04 682.306 L1142.48 682.306 L1141.92 682.306 L1141.36 682.306 L1140.8 682.306 L1140.24 682.306 L1139.68 682.306 L1139.13 682.306 L1138.57 682.306 L1138.01 682.306 L1137.45 682.306 L1136.89 682.306 L1136.33 682.306 L1135.77 682.306 L1135.21 682.306 L1134.65 682.306 L1134.09 682.306 L1133.53 682.306 L1132.97 682.306 L1132.41 682.306 L1131.86 682.306 L1131.3 682.306 L1130.74 682.306 L1130.18 682.306 L1129.62 682.306 L1129.06 682.306 L1128.5 682.306 L1127.94 682.306 L1127.38 682.306 L1126.82 682.306 L1126.26 682.306 L1125.7 682.306 L1125.14 682.306 L1124.59 682.306 L1124.03 682.306 L1123.47 682.306 L1122.91 682.306 L1122.35 682.306 L1121.79 682.306 L1121.23 682.306 L1120.67 682.306 L1120.11 682.306 L1119.55 682.306 L1118.99 682.306 L1118.43 682.306 L1117.87 682.306 L1117.31 682.306 L1116.76 682.306 L1116.2 682.306 L1115.64 682.306 L1115.08 682.306 L1114.52 682.306 L1113.96 682.306 L1113.4 682.306 L1112.84 682.306 L1112.28 682.306 L1111.72 682.306 L1111.16 682.306 L1110.6 682.306 L1110.04 682.306 L1109.49 682.306 L1108.93 682.306 L1108.37 682.306 L1107.81 682.306 L1107.25 682.306 L1106.69 682.306 L1106.13 682.306 L1105.57 682.306 L1105.01 682.306 L1104.45 682.306 L1103.89 682.306 L1103.33 682.306 L1102.77 682.306 L1102.22 682.306 L1101.66 682.306 L1101.1 682.306 L1100.54 682.306 L1099.98 682.306 L1099.42 682.306 L1098.86 682.306 L1098.3 682.306 L1097.74 682.306 L1097.18 682.306 L1096.62 682.306 L1096.06 682.306 L1095.5 682.306 L1094.94 682.306 L1094.39 682.306 L1093.83 682.306 L1093.27 682.306 L1092.71 682.306 L1092.15 682.306 L1091.59 682.306 L1091.03 682.306 L1090.47 682.306 L1089.91 682.306 L1089.35 682.306 L1088.79 682.306 L1088.23 682.306 L1087.67 682.306 L1087.12 682.306 L1086.56 682.306 L1086 682.306 L1085.44 682.306 L1084.88 682.306 L1084.32 682.306 L1083.76 682.306 L1083.2 682.306 L1082.64 682.306 L1082.08 682.306 L1081.52 682.306 L1080.96 682.306 L1080.4 682.306 L1079.85 682.306 L1079.29 682.306 L1078.73 682.306 L1078.17 682.306 L1077.61 682.306 L1077.05 682.306 L1076.49 682.306 L1075.93 682.306 L1075.37 682.306 L1074.81 682.306 L1074.25 682.306 L1073.69 682.306 L1073.13 682.306 L1072.57 682.306 L1072.02 682.306 L1071.46 682.306 L1070.9 682.306 L1070.34 682.306 L1069.78 682.306 L1069.22 682.306 L1068.66 682.306 L1068.1 682.306 L1067.54 682.306 L1066.98 682.306 L1066.42 682.306 L1065.86 682.306 L1065.3 682.306 L1064.75 682.306 L1064.19 682.306 L1063.63 682.306 L1063.07 682.306 L1062.51 682.306 L1061.95 682.306 L1061.39 682.306 L1060.83 682.306 L1060.27 682.306 L1059.71 682.306 L1059.15 682.306 L1058.59 682.306 L1058.03 682.306 L1057.48 682.306 L1056.92 682.306 L1056.36 682.306 L1055.8 682.306 L1055.24 682.306 L1054.68 682.306 L1054.12 682.306 L1053.56 682.306 L1053 682.306 L1052.44 682.306 L1051.88 682.306 L1051.32 682.306 L1050.76 682.306 L1050.2 682.306 L1049.65 682.306 L1049.09 682.306 L1048.53 682.306 L1047.97 682.306 L1047.41 682.306 L1046.85 682.306 L1046.29 682.306 L1045.73 682.306 L1045.17 682.306 L1044.61 682.306 L1044.05 682.306 L1043.49 682.306 L1042.93 682.306 L1042.38 682.306 L1041.82 682.306 L1041.26 682.306 L1040.7 682.306 L1040.14 682.306 L1039.58 682.306 L1039.02 682.306 L1038.46 682.306 L1037.9 682.306 L1037.34 682.306 L1036.78 682.306 L1036.22 682.306 L1035.66 682.306 L1035.1 682.306 L1034.55 682.306 L1033.99 682.306 L1033.43 682.306 L1032.87 682.306 L1032.31 682.306 L1031.75 682.306 L1031.19 682.306 L1030.63 682.306 L1030.07 682.306 L1029.51 682.306 L1028.95 682.306 L1028.39 682.306 L1027.83 682.306 L1027.28 682.306 L1026.72 682.306 L1026.16 682.306 L1025.6 682.306 L1025.04 682.306 L1024.48 682.306 L1023.92 682.306 L1023.36 682.306 L1022.8 682.306 L1022.24 682.306 L1021.68 682.306 L1021.12 682.306 L1020.56 682.306 L1020.01 682.306 L1019.45 682.306 L1018.89 682.306 L1018.33 682.306 L1017.77 682.306 L1017.21 682.306 L1016.65 682.306 L1016.09 682.306 L1015.53 682.306 L1014.97 682.306 L1014.41 682.306 L1013.85 682.306 L1013.29 682.306 L1012.73 682.306 L1012.18 682.306 L1011.62 682.306 L1011.06 682.306 L1010.5 682.306 L1009.94 682.306 L1009.38 682.306 L1008.82 682.306 L1008.26 682.306 L1007.7 682.306 L1007.14 682.306 L1006.58 682.306 L1006.02 682.306 L1005.46 682.306 L1004.91 682.306 L1004.35 682.306 L1003.79 682.306 L1003.23 682.306 L1002.67 682.306 L1002.11 682.306 L1001.55 682.306 L1000.99 682.306 L1000.43 682.306 L999.872 682.306 L999.313 682.306 L998.754 682.306 L998.194 682.306 L997.635 682.306 L997.076 682.306 L996.517 682.306 L995.957 682.306 L995.398 682.306 L994.839 682.306 L994.28 682.306 L993.72 682.306 L993.161 682.306 L992.602 682.306 L992.043 682.306 L991.483 682.306 L990.924 682.306 L990.365 682.306 L989.806 682.306 L989.246 682.306 L988.687 682.306 L988.128 682.306 L987.569 682.306 L987.009 682.306 L986.45 682.306 L985.891 682.306 L985.332 682.306 L984.772 682.306 L984.213 682.306 L983.654 682.306 L983.095 682.306 L982.535 682.306 L981.976 682.306 L981.417 682.306 L980.858 682.306 L980.298 682.306 L979.739 682.306 L979.18 682.306 L978.621 682.306 L978.061 682.306 L977.502 682.306 L976.943 682.306 L976.384 682.306 L975.824 682.306 L975.265 682.306 L974.706 682.306 L974.147 682.306 L973.587 682.306 L973.028 682.306 L972.469 682.306 L971.91 682.306 L971.35 682.306 L970.791 682.306 L970.232 682.306 L969.673 682.306 L969.113 682.306 L968.554 682.306 L967.995 682.306 L967.436 682.306 L966.876 682.306 L966.317 682.306 L965.758 682.306 L965.199 682.306 L964.639 682.306 L964.08 682.306 L963.521 682.306 L962.962 682.306 L962.402 682.306 L961.843 682.306 L961.284 682.306 L960.725 682.306 L960.165 682.306 L959.606 682.306 L959.047 682.306 L958.488 682.306 L957.928 682.306 L957.369 682.306 L956.81 682.306 L956.251 682.306 L955.691 682.306 L955.132 682.306 L954.573 682.306 L954.014 682.306 L953.454 682.306 L952.895 682.306 L952.336 682.306 L951.777 682.306 L951.217 682.306 L950.658 682.306 L950.099 682.306 L949.54 682.306 L948.98 682.306 L948.421 682.306 L947.862 682.306 L947.303 682.306 L946.743 682.306 L946.184 682.306 L945.625 682.306 L945.066 682.306 L944.506 682.306 L943.947 682.306 L943.388 682.306 L942.829 682.306 L942.269 682.306 L941.71 682.306 L941.151 682.306 L940.592 682.306 L940.032 682.306 L939.473 682.306 L938.914 682.306 L938.355 682.306 L937.795 682.306 L937.236 682.306 L936.677 682.306 L936.118 682.306 L935.558 682.306 L934.999 682.306 L934.44 682.306 L933.881 682.306 L933.321 682.306 L932.762 682.306 L932.203 682.306 L931.644 682.306 L931.084 682.306 L930.525 682.306 L929.966 682.306 L929.406 682.306 L928.847 682.306 L928.288 682.306 L927.729 682.306 L927.169 682.306 L926.61 682.306 L926.051 682.306 L925.492 682.306 L924.932 682.306 L924.373 682.306 L923.814 682.306 L923.255 682.306 L922.695 682.306 L922.136 682.306 L921.577 682.306 L921.018 682.306 L920.458 682.306 L919.899 682.306 L919.34 682.306 L918.781 682.306 L918.221 682.306 L917.662 682.306 L917.103 682.306 L916.544 682.306 L915.984 682.306 L915.425 682.306 L914.866 682.306 L914.307 682.306 L913.747 682.306 L913.188 682.306 L912.629 682.306 L912.07 682.306 L911.51 682.306 L910.951 682.306 L910.392 682.306 L909.833 682.306 L909.273 682.306 L908.714 682.306 L908.155 682.306 L907.596 682.306 L907.036 682.306 L906.477 682.306 L905.918 682.306 L905.359 682.306 L904.799 682.306 L904.24 682.306 L903.681 682.306 L903.122 682.306 L902.562 682.306 L902.003 682.306 L901.444 682.306 L900.885 682.306 L900.325 682.306 L899.766 682.306 L899.207 682.306 L898.648 682.306 L898.088 682.306 L897.529 682.306 L896.97 682.306 L896.411 682.306 L895.851 682.306 L895.292 682.306 L894.733 682.306 L894.174 682.306 L893.614 682.306 L893.055 682.306 L892.496 682.306 L891.937 682.306 L891.377 682.306 L890.818 682.306 L890.259 682.306 L889.7 682.306 L889.14 682.306 L888.581 682.306 L888.022 682.306 L887.463 682.306 L886.903 682.306 L886.344 682.306 L885.785 682.306 L885.226 682.306 L884.666 682.306 L884.107 682.306 L883.548 682.306 L882.989 682.306 L882.429 682.306 L881.87 682.306 L881.311 682.306 L880.752 682.306 L880.192 682.306 L879.633 682.306 L879.074 682.306 L878.515 682.306 L877.955 682.306 L877.396 682.306 L876.837 682.306 L876.278 682.306 L875.718 682.306 L875.159 682.306 L874.6 682.306 L874.041 682.306 L873.481 682.306 L872.922 682.306 L872.363 682.306 L871.804 682.306 L871.244 682.306 L870.685 682.306 L870.126 682.306 L869.567 682.306 L869.007 682.306 L868.448 682.306 L867.889 682.306 L867.33 682.306 L866.77 682.306 L866.211 682.306 L865.652 682.306 L865.093 682.306 L864.533 682.306 L863.974 682.306 L863.415 682.306 L862.856 682.306 L862.296 682.306 L861.737 682.306 L861.178 682.306 L860.619 682.306 L860.059 682.306 L859.5 682.306 L858.941 682.306 L858.382 682.306 L857.822 682.306 L857.263 682.306 L856.704 682.306 L856.145 682.306 L855.585 682.306 L855.026 682.306 L854.467 682.306 L853.908 682.306 L853.348 682.306 L852.789 682.306 L852.23 682.306 L851.671 682.306 L851.111 682.306 L850.552 682.306 L849.993 682.306 L849.434 682.306 L848.874 682.306 L848.315 682.306 L847.756 682.306 L847.197 682.306 L846.637 682.306 L846.078 682.306 L845.519 682.306 L844.96 682.306 L844.4 682.306 L843.841 682.306 L843.282 682.306 L842.723 682.306 L842.163 682.306 L841.604 682.306 L841.045 682.306 L840.486 682.306 L839.926 682.306 L839.367 682.306 L838.808 682.306 L838.249 682.306 L837.689 682.306 L837.13 682.306 L836.571 682.306 L836.012 682.306 L835.452 682.306 L834.893 682.306 L834.334 682.306 L833.775 682.306 L833.215 682.306 L832.656 682.306 L832.097 682.306 L831.538 682.306 L830.978 682.306 L830.419 682.306 L829.86 682.306 L829.301 682.306 L828.741 682.306 L828.182 682.306 L827.623 682.306 L827.064 682.306 L826.504 682.306 L825.945 682.306 L825.386 682.306 L824.827 682.306 L824.267 682.306 L823.708 682.306 L823.149 682.306 L822.59 682.306 L822.03 682.306 L821.471 682.306 L820.912 682.306 L820.353 682.306 L819.793 682.306 L819.234 682.306 L818.675 682.306 L818.116 682.306 L817.556 682.306 L816.997 682.306 L816.438 682.306 L815.879 682.306 L815.319 682.306 L814.76 682.306 L814.201 682.306 L813.642 682.306 L813.082 682.306 L812.523 682.306 L811.964 682.306 L811.405 682.306 L810.845 682.306 L810.286 682.306 L809.727 682.306 L809.168 682.306 L808.608 682.306 L808.049 682.306 L807.49 682.306 L806.931 682.306 L806.371 682.306 L805.812 682.306 L805.253 682.306 L804.693 682.306 L804.134 682.306 L803.575 682.306 L803.016 682.306 L802.456 682.306 L801.897 682.306 L801.338 682.306 L800.779 682.306 L800.219 682.306 L799.66 682.306 L799.101 682.306 L798.542 682.306 L797.982 682.306 L797.423 682.306 L796.864 682.306 L796.305 682.306 L795.745 682.306 L795.186 682.306 L794.627 682.306 L794.068 682.306 L793.508 682.306 L792.949 682.306 L792.39 682.306 L791.831 682.306 L791.271 682.306 L790.712 682.306 L790.153 682.306 L789.594 682.306 L789.034 682.306 L788.475 682.306 L787.916 682.306 L787.357 682.306 L786.797 682.306 L786.238 682.306 L785.679 682.306 L785.12 682.306 L784.56 682.306 L784.001 682.306 L783.442 682.306 L782.883 682.306 L782.323 682.306 L781.764 682.306 L781.205 682.306 L780.646 682.306 L780.086 682.306 L779.527 682.306 L778.968 682.306 L778.409 682.306 L777.849 682.306 L777.29 682.306 L776.731 682.306 L776.172 682.306 L775.612 682.306 L775.053 682.306 L774.494 682.306 L773.935 682.306 L773.375 682.306 L772.816 682.306 L772.257 682.306 L771.698 682.306 L771.138 682.306 L770.579 682.306 L770.02 682.306 L769.461 682.306 L768.901 682.306 L768.342 682.306 L767.783 682.306 L767.224 682.306 L766.664 682.306 L766.105 682.306 L765.546 682.306 L764.987 682.306 L764.427 682.306 L763.868 682.306 L763.309 682.306 L762.75 682.306 L762.19 682.306 L761.631 682.306 L761.072 682.306 L760.513 682.306 L759.953 682.306 L759.394 682.306 L758.835 682.306 L758.276 682.306 L757.716 682.306 L757.157 682.306 L756.598 682.306 L756.039 682.306 L755.479 682.306 L754.92 682.306 L754.361 682.306 L753.802 682.306 L753.242 682.306 L752.683 682.306 L752.124 682.306 L751.565 682.306 L751.005 682.306 L750.446 682.306 L749.887 682.306 L749.328 682.306 L748.768 682.306 L748.209 682.306 L747.65 682.306 L747.091 682.306 L746.531 682.306 L745.972 682.306 L745.413 682.306 L744.854 682.306 L744.294 682.306 L743.735 682.306 L743.176 682.306 L742.617 682.306 L742.057 682.306 L741.498 682.306 L740.939 682.306 L740.38 682.306 L739.82 682.306 L739.261 682.306 L738.702 682.306 L738.143 682.306 L737.583 682.306 L737.024 682.306 L736.465 682.306 L735.906 682.306 L735.346 682.306 L734.787 682.306 L734.228 682.306 L733.669 682.306 L733.109 682.306 L732.55 682.306 L731.991 682.306 L731.432 682.306 L730.872 682.306 L730.313 682.306 L729.754 682.306 L729.195 682.306 L728.635 682.306 L728.076 682.306 L727.517 682.306 L726.958 682.306 L726.398 682.306 L725.839 682.306 L725.28 682.306 L724.721 682.306 L724.161 682.306 L723.602 682.306 L723.043 682.306 L722.484 682.306 L721.924 682.306 L721.365 682.306 L720.806 682.306 L720.247 682.306  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip993)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.08 720.806,683.08 721.365,683.08 721.924,683.08 722.484,683.08 723.043,683.08 723.602,683.08 724.161,683.08 724.721,683.08 725.28,683.08 725.839,683.08 726.398,683.08 726.958,683.08 727.517,683.08 728.076,683.08 728.635,683.08 729.195,683.08 729.754,683.08 730.313,683.08 730.872,683.08 731.432,683.08 731.991,683.08 732.55,683.08 733.109,683.08 733.669,683.08 734.228,683.08 734.787,683.08 735.346,683.08 735.906,683.08 736.465,683.08 737.024,683.08 737.583,683.08 738.143,683.08 738.702,683.08 739.261,683.08 739.82,683.08 740.38,683.08 740.939,683.08 741.498,683.08 742.057,683.08 742.617,683.08 743.176,683.08 743.735,683.08 744.294,683.08 744.854,683.08 745.413,683.08 745.972,683.08 746.531,683.08 747.091,683.08 747.65,683.08 748.209,683.08 748.768,683.08 749.328,683.08 749.887,683.08 750.446,683.08 751.005,683.08 751.565,683.08 752.124,683.08 752.683,683.08 753.242,683.08 753.802,683.08 754.361,683.08 754.92,683.08 755.479,683.08 756.039,683.08 756.598,683.08 757.157,683.08 757.716,683.08 758.276,683.08 758.835,683.08 759.394,683.08 759.953,683.08 760.513,683.08 761.072,683.08 761.631,683.08 762.19,683.08 762.75,683.08 763.309,683.08 763.868,683.08 764.427,683.08 764.987,683.08 765.546,683.08 766.105,683.08 766.664,683.08 767.224,683.08 767.783,683.08 768.342,683.08 768.901,683.08 769.461,683.08 770.02,683.08 770.579,683.08 771.138,683.08 771.698,683.08 772.257,683.08 772.816,683.08 773.375,683.08 773.935,683.08 774.494,683.08 775.053,683.08 775.612,683.08 776.172,683.08 776.731,683.08 777.29,683.08 777.849,683.08 778.409,683.08 778.968,683.08 779.527,683.08 780.086,683.08 780.646,683.08 781.205,683.08 781.764,683.08 782.323,683.08 782.883,683.08 783.442,683.08 784.001,683.08 784.56,683.08 785.12,683.08 785.679,683.08 786.238,683.08 786.797,683.08 787.357,683.08 787.916,683.08 788.475,683.08 789.034,683.08 789.594,683.08 790.153,683.08 790.712,683.08 791.271,683.08 791.831,683.08 792.39,683.08 792.949,683.08 793.508,683.08 794.068,683.08 794.627,683.08 795.186,683.08 795.745,683.08 796.305,683.08 796.864,683.08 797.423,683.08 797.982,683.08 798.542,683.08 799.101,683.08 799.66,683.08 800.219,683.08 800.779,683.08 801.338,683.08 801.897,683.08 802.456,683.08 803.016,683.08 803.575,683.08 804.134,683.08 804.693,683.08 805.253,683.08 805.812,683.08 806.371,683.08 806.931,683.08 807.49,683.08 808.049,683.08 808.608,683.08 809.168,683.08 809.727,683.08 810.286,683.08 810.845,683.08 811.405,683.08 811.964,683.08 812.523,683.08 813.082,683.08 813.642,683.08 814.201,683.08 814.76,683.08 815.319,683.08 815.879,683.08 816.438,683.08 816.997,683.08 817.556,683.08 818.116,683.08 818.675,683.08 819.234,683.08 819.793,683.08 820.353,683.08 820.912,683.08 821.471,683.08 822.03,683.08 822.59,683.08 823.149,683.08 823.708,683.08 824.267,683.08 824.827,683.08 825.386,683.08 825.945,683.08 826.504,683.08 827.064,683.08 827.623,683.08 828.182,683.08 828.741,683.08 829.301,683.08 829.86,683.08 830.419,683.08 830.978,683.08 831.538,683.08 832.097,683.08 832.656,683.08 833.215,683.08 833.775,683.08 834.334,683.08 834.893,683.08 835.452,683.08 836.012,683.08 836.571,683.08 837.13,683.08 837.689,683.08 838.249,683.08 838.808,683.08 839.367,683.08 839.926,683.08 840.486,683.08 841.045,683.08 841.604,683.08 842.163,683.08 842.723,683.08 843.282,683.08 843.841,683.08 844.4,683.08 844.96,683.08 845.519,683.08 846.078,683.08 846.637,683.08 847.197,683.08 847.756,683.08 848.315,683.08 848.874,683.08 849.434,683.08 849.993,683.08 850.552,683.08 851.111,683.08 851.671,683.08 852.23,683.08 852.789,683.08 853.348,683.08 853.908,683.08 854.467,683.08 855.026,683.08 855.585,683.08 856.145,683.08 856.704,683.08 857.263,683.08 857.822,683.08 858.382,683.08 858.941,683.08 859.5,683.08 860.059,683.08 860.619,683.08 861.178,683.08 861.737,683.08 862.296,683.08 862.856,683.08 863.415,683.08 863.974,683.08 864.533,683.08 865.093,683.08 865.652,683.08 866.211,683.08 866.77,683.08 867.33,683.08 867.889,683.08 868.448,683.08 869.007,683.08 869.567,683.08 870.126,683.08 870.685,683.08 871.244,683.08 871.804,683.08 872.363,683.08 872.922,683.08 873.481,683.08 874.041,683.08 874.6,683.08 875.159,683.08 875.718,683.08 876.278,683.08 876.837,683.08 877.396,683.08 877.955,683.08 878.515,683.08 879.074,683.08 879.633,683.08 880.192,683.08 880.752,683.08 881.311,683.08 881.87,683.08 882.429,683.08 882.989,683.08 883.548,683.08 884.107,683.08 884.666,683.08 885.226,683.08 885.785,683.08 886.344,683.08 886.903,683.08 887.463,683.08 888.022,683.08 888.581,683.08 889.14,683.08 889.7,683.08 890.259,683.08 890.818,683.08 891.377,683.08 891.937,683.08 892.496,683.08 893.055,683.08 893.614,683.08 894.174,683.08 894.733,683.08 895.292,683.08 895.851,683.08 896.411,683.08 896.97,683.08 897.529,683.08 898.088,683.08 898.648,683.08 899.207,683.08 899.766,683.08 900.325,683.08 900.885,683.08 901.444,683.08 902.003,683.08 902.562,683.08 903.122,683.08 903.681,683.08 904.24,683.08 904.799,683.08 905.359,683.08 905.918,683.08 906.477,683.08 907.036,683.08 907.596,683.08 908.155,683.08 908.714,683.08 909.273,683.08 909.833,683.08 910.392,683.08 910.951,683.08 911.51,683.08 912.07,683.08 912.629,683.08 913.188,683.08 913.747,683.08 914.307,683.08 914.866,683.08 915.425,683.08 915.984,683.08 916.544,683.08 917.103,683.08 917.662,683.08 918.221,683.08 918.781,683.08 919.34,683.08 919.899,683.08 920.458,683.08 921.018,683.08 921.577,683.08 922.136,683.08 922.695,683.08 923.255,683.08 923.814,683.08 924.373,683.08 924.932,683.08 925.492,683.08 926.051,683.08 926.61,683.08 927.169,683.08 927.729,683.08 928.288,683.08 928.847,683.08 929.406,683.08 929.966,683.08 930.525,683.08 931.084,683.08 931.644,683.08 932.203,683.08 932.762,683.08 933.321,683.08 933.881,683.08 934.44,683.08 934.999,683.08 935.558,683.08 936.118,683.08 936.677,683.08 937.236,683.08 937.795,683.08 938.355,683.08 938.914,683.08 939.473,683.08 940.032,683.08 940.592,683.08 941.151,683.08 941.71,683.08 942.269,683.08 942.829,683.08 943.388,683.08 943.947,683.08 944.506,683.08 945.066,683.08 945.625,683.08 946.184,683.08 946.743,683.08 947.303,683.08 947.862,683.08 948.421,683.08 948.98,683.08 949.54,683.08 950.099,683.08 950.658,683.08 951.217,683.08 951.777,683.08 952.336,683.08 952.895,683.08 953.454,683.08 954.014,683.08 954.573,683.08 955.132,683.08 955.691,683.08 956.251,683.08 956.81,683.08 957.369,683.08 957.928,683.08 958.488,683.08 959.047,683.08 959.606,683.08 960.165,683.08 960.725,683.08 961.284,683.08 961.843,683.08 962.402,683.08 962.962,683.08 963.521,683.08 964.08,683.08 964.639,683.08 965.199,683.08 965.758,683.08 966.317,683.08 966.876,683.08 967.436,683.08 967.995,683.08 968.554,683.08 969.113,683.08 969.673,683.08 970.232,683.08 970.791,683.08 971.35,683.08 971.91,683.08 972.469,683.08 973.028,683.08 973.587,683.08 974.147,683.08 974.706,683.08 975.265,683.08 975.824,683.08 976.384,683.08 976.943,683.08 977.502,683.08 978.061,683.08 978.621,683.08 979.18,683.08 979.739,683.08 980.298,683.08 980.858,683.08 981.417,683.08 981.976,683.08 982.535,683.08 983.095,683.08 983.654,683.08 984.213,683.08 984.772,683.08 985.332,683.08 985.891,683.08 986.45,683.08 987.009,683.08 987.569,683.08 988.128,683.08 988.687,683.08 989.246,683.08 989.806,683.08 990.365,683.08 990.924,683.08 991.483,683.08 992.043,683.08 992.602,683.08 993.161,683.08 993.72,683.08 994.28,683.08 994.839,683.08 995.398,683.08 995.957,683.08 996.517,683.08 997.076,683.08 997.635,683.08 998.194,683.08 998.754,683.08 999.313,683.08 999.872,683.08 1000.43,683.08 1000.99,683.08 1001.55,683.08 1002.11,683.08 1002.67,683.08 1003.23,683.08 1003.79,683.08 1004.35,683.08 1004.91,683.08 1005.46,683.08 1006.02,683.08 1006.58,683.08 1007.14,683.08 1007.7,683.08 1008.26,683.08 1008.82,683.08 1009.38,683.08 1009.94,683.08 1010.5,683.08 1011.06,683.08 1011.62,683.08 1012.18,683.08 1012.73,683.08 1013.29,683.08 1013.85,683.08 1014.41,683.08 1014.97,683.08 1015.53,683.08 1016.09,683.08 1016.65,683.08 1017.21,683.08 1017.77,683.08 1018.33,683.08 1018.89,683.08 1019.45,683.08 1020.01,683.08 1020.56,683.08 1021.12,683.08 1021.68,683.08 1022.24,683.08 1022.8,683.08 1023.36,683.08 1023.92,683.08 1024.48,683.08 1025.04,683.08 1025.6,683.08 1026.16,683.08 1026.72,683.08 1027.28,683.08 1027.83,683.08 1028.39,683.08 1028.95,683.08 1029.51,683.08 1030.07,683.08 1030.63,683.08 1031.19,683.08 1031.75,683.08 1032.31,683.08 1032.87,683.08 1033.43,683.08 1033.99,683.08 1034.55,683.08 1035.1,683.08 1035.66,683.08 1036.22,683.08 1036.78,683.08 1037.34,683.08 1037.9,683.08 1038.46,683.08 1039.02,683.08 1039.58,683.08 1040.14,683.08 1040.7,683.08 1041.26,683.08 1041.82,683.08 1042.38,683.08 1042.93,683.08 1043.49,683.08 1044.05,683.08 1044.61,683.08 1045.17,683.08 1045.73,683.08 1046.29,683.08 1046.85,683.08 1047.41,683.08 1047.97,683.08 1048.53,683.08 1049.09,683.08 1049.65,683.08 1050.2,683.08 1050.76,683.08 1051.32,683.08 1051.88,683.08 1052.44,683.08 1053,683.08 1053.56,683.08 1054.12,683.08 1054.68,683.08 1055.24,683.08 1055.8,683.08 1056.36,683.08 1056.92,683.08 1057.48,683.08 1058.03,683.08 1058.59,683.08 1059.15,683.08 1059.71,683.08 1060.27,683.08 1060.83,683.08 1061.39,683.08 1061.95,683.08 1062.51,683.08 1063.07,683.08 1063.63,683.08 1064.19,683.08 1064.75,683.08 1065.3,683.08 1065.86,683.08 1066.42,683.08 1066.98,683.08 1067.54,683.08 1068.1,683.08 1068.66,683.08 1069.22,683.08 1069.78,683.08 1070.34,683.08 1070.9,683.08 1071.46,683.08 1072.02,683.08 1072.57,683.08 1073.13,683.08 1073.69,683.08 1074.25,683.08 1074.81,683.08 1075.37,683.08 1075.93,683.08 1076.49,683.08 1077.05,683.08 1077.61,683.08 1078.17,683.08 1078.73,683.08 1079.29,683.08 1079.85,683.08 1080.4,683.08 1080.96,683.08 1081.52,683.08 1082.08,683.08 1082.64,683.08 1083.2,683.08 1083.76,683.08 1084.32,683.08 1084.88,683.08 1085.44,683.08 1086,683.08 1086.56,683.08 1087.12,683.08 1087.67,683.08 1088.23,683.08 1088.79,683.08 1089.35,683.08 1089.91,683.08 1090.47,683.08 1091.03,683.08 1091.59,683.08 1092.15,683.08 1092.71,683.08 1093.27,683.08 1093.83,683.08 1094.39,683.08 1094.94,683.08 1095.5,683.08 1096.06,683.08 1096.62,683.08 1097.18,683.08 1097.74,683.08 1098.3,683.08 1098.86,683.08 1099.42,683.08 1099.98,683.08 1100.54,683.08 1101.1,683.08 1101.66,683.08 1102.22,683.08 1102.77,683.08 1103.33,683.08 1103.89,683.08 1104.45,683.08 1105.01,683.08 1105.57,683.08 1106.13,683.08 1106.69,683.08 1107.25,683.08 1107.81,683.08 1108.37,683.08 1108.93,683.08 1109.49,683.08 1110.04,683.08 1110.6,683.08 1111.16,683.08 1111.72,683.08 1112.28,683.08 1112.84,683.08 1113.4,683.08 1113.96,683.08 1114.52,683.08 1115.08,683.08 1115.64,683.08 1116.2,683.08 1116.76,683.08 1117.31,683.08 1117.87,683.08 1118.43,683.08 1118.99,683.08 1119.55,683.08 1120.11,683.08 1120.67,683.08 1121.23,683.08 1121.79,683.08 1122.35,683.08 1122.91,683.08 1123.47,683.08 1124.03,683.08 1124.59,683.08 1125.14,683.08 1125.7,683.08 1126.26,683.08 1126.82,683.08 1127.38,683.08 1127.94,683.08 1128.5,683.08 1129.06,683.08 1129.62,683.08 1130.18,683.08 1130.74,683.08 1131.3,683.08 1131.86,683.08 1132.41,683.08 1132.97,683.08 1133.53,683.08 1134.09,683.08 1134.65,683.08 1135.21,683.08 1135.77,683.08 1136.33,683.08 1136.89,683.08 1137.45,683.08 1138.01,683.08 1138.57,683.08 1139.13,683.08 1139.68,683.08 1140.24,683.08 1140.8,683.08 1141.36,683.08 1141.92,683.08 1142.48,683.08 1143.04,683.08 1143.6,683.08 1144.16,683.08 1144.72,683.08 1145.28,683.08 1145.84,683.08 1146.4,683.08 1146.96,683.08 1147.51,683.08 1148.07,683.08 1148.63,683.08 1149.19,683.08 1149.75,683.08 1150.31,683.08 1150.87,683.08 1151.43,683.08 1151.99,683.08 1152.55,683.08 1153.11,683.08 1153.67,683.08 1154.23,683.08 1154.78,683.08 1155.34,683.08 1155.9,683.08 1156.46,683.08 1157.02,683.08 1157.58,683.08 1158.14,683.08 1158.7,683.08 1159.26,683.08 1159.82,683.08 1160.38,683.08 1160.94,683.08 1161.5,683.08 1162.05,683.08 1162.61,683.08 1163.17,683.08 1163.73,683.08 1164.29,683.08 1164.85,683.08 1165.41,683.08 1165.97,683.08 1166.53,683.08 1167.09,683.08 1167.65,683.08 1168.21,683.08 1168.77,683.08 1169.33,683.08 1169.88,683.08 1170.44,683.08 1171,683.08 1171.56,683.08 1172.12,683.08 1172.68,683.08 1173.24,683.08 1173.8,683.08 1174.36,683.08 1174.92,683.08 1175.48,683.08 1176.04,683.08 1176.6,683.08 1177.15,683.08 1177.71,683.08 1178.27,683.08 1178.83,683.08 1179.39,683.08 1179.95,683.08 1180.51,683.08 1181.07,683.08 1181.63,683.08 1182.19,683.08 1182.75,683.08 1183.31,683.08 1183.87,683.08 1184.43,683.08 1184.98,683.08 1185.54,683.08 1186.1,683.08 1186.66,683.08 1187.22,683.08 1187.78,683.08 1188.34,683.08 1188.9,683.08 1189.46,683.08 1190.02,683.08 1190.58,683.08 1191.14,683.08 1191.7,683.08 1192.25,683.08 1192.81,683.08 1193.37,683.08 1193.93,683.08 1194.49,683.08 1195.05,683.08 1195.61,683.08 1196.17,683.08 1196.73,683.08 1197.29,683.08 1197.85,683.08 1198.41,683.08 1198.97,683.08 1199.52,683.08 1200.08,683.08 1200.64,683.08 1201.2,683.08 1201.76,683.08 1202.32,683.08 1202.88,683.08 1203.44,683.08 1204,683.08 1204.56,683.08 1205.12,683.08 1205.68,683.08 1206.24,683.08 1206.8,683.08 1207.35,683.08 1207.91,683.08 1208.47,683.08 1209.03,683.08 1209.59,683.08 1210.15,683.08 1210.71,683.08 1211.27,683.08 1211.83,683.08 1212.39,683.08 1212.95,683.08 1213.51,683.08 1214.07,683.08 1214.62,683.08 1215.18,683.08 1215.74,683.08 1216.3,683.08 1216.86,683.08 1217.42,683.08 1217.98,683.08 1218.54,683.08 1219.1,683.08 1219.66,683.08 1220.22,683.08 1220.78,683.08 1221.34,683.08 1221.89,683.08 1222.45,683.08 1223.01,683.08 1223.57,683.08 1224.13,683.08 1224.69,683.08 1225.25,683.08 1225.81,683.08 1226.37,683.08 1226.93,683.08 1227.49,683.08 1228.05,683.08 1228.61,683.08 1229.17,683.08 1229.72,683.08 1230.28,683.08 1230.84,683.08 1231.4,683.08 1231.96,683.08 1232.52,683.08 1233.08,683.08 1233.64,683.08 1234.2,683.08 1234.76,683.08 1235.32,683.08 1235.88,683.08 1236.44,683.08 1236.99,683.08 1237.55,683.08 1238.11,683.08 1238.67,683.08 1239.23,683.08 1239.79,683.08 1240.35,683.08 1240.91,683.08 1241.47,683.08 1242.03,683.08 1242.59,683.08 1243.15,683.08 1243.71,683.08 1244.26,683.08 1244.82,683.08 1245.38,683.08 1245.94,683.08 1246.5,683.08 1247.06,683.08 1247.62,683.08 1248.18,683.08 1248.74,683.08 1249.3,683.08 1249.86,683.08 1250.42,683.08 1250.98,683.08 1251.54,683.08 1252.09,683.08 1252.65,683.08 1253.21,683.08 1253.77,683.08 1254.33,683.08 1254.89,683.08 1255.45,683.08 1256.01,683.08 1256.57,683.08 1257.13,683.08 1257.69,683.08 1258.25,683.08 1258.81,683.08 1259.36,683.08 1259.92,683.08 1260.48,683.08 1261.04,683.08 1261.6,683.08 1262.16,683.08 1262.72,683.08 1263.28,683.08 1263.84,683.08 1264.4,683.08 1264.96,683.08 1265.52,683.08 1266.08,683.08 1266.63,683.08 1267.19,683.08 1267.75,683.08 1268.31,683.08 1268.87,683.08 1269.43,683.08 1269.99,683.08 1270.55,683.08 1271.11,683.08 1271.67,683.08 1272.23,683.08 1272.79,683.08 1273.35,683.08 1273.91,683.08 1274.46,683.08 1275.02,683.08 1275.58,683.08 1276.14,683.08 1276.7,683.08 1277.26,683.08 1277.82,683.08 1278.38,683.08 1278.94,683.08 1279.5,683.08 1280.06,683.08 1280.62,683.08 1281.18,683.08 1281.73,683.08 1282.29,683.08 1282.85,683.08 1283.41,683.08 1283.97,683.08 1284.53,683.08 1285.09,683.08 1285.65,683.08 1286.21,683.08 1286.77,683.08 1287.33,683.08 1287.89,683.08 1288.45,683.08 1289,683.08 1289.56,683.08 1290.12,683.08 1290.68,683.08 1291.24,683.08 1291.8,683.08 1292.36,683.08 1292.92,683.08 1293.48,683.08 1294.04,683.08 1294.6,683.08 1295.16,683.08 1295.72,683.08 1296.28,683.08 1296.83,683.08 1297.39,683.08 1297.95,683.08 1298.51,683.08 1299.07,683.08 1299.63,683.08 1300.19,683.08 1300.75,683.08 1301.31,683.08 1301.87,683.08 1302.43,683.08 1302.99,683.08 1303.55,683.08 1304.1,683.08 1304.66,683.08 1305.22,683.08 1305.78,683.08 1306.34,683.08 1306.9,683.08 1307.46,683.08 1308.02,683.08 1308.58,683.08 1309.14,683.08 1309.7,683.08 1310.26,683.08 1310.82,683.08 1311.38,683.08 1311.93,683.08 1312.49,683.08 1313.05,683.08 1313.61,683.08 1314.17,683.08 1314.73,683.08 1315.29,683.08 1315.85,683.08 1316.41,683.08 1316.97,683.08 1317.53,683.08 1318.09,683.08 1318.65,683.08 1319.2,683.08 1319.76,683.08 1320.32,683.08 1320.88,683.08 1321.44,683.08 1322,683.08 1322.56,683.08 1323.12,683.08 1323.68,683.08 1324.24,683.08 1324.8,683.08 1325.36,683.08 1325.92,683.08 1326.47,683.08 1327.03,683.08 1327.59,683.08 1328.15,683.08 1328.71,683.08 1329.27,683.08 1329.83,683.08 1330.39,683.08 1330.95,683.08 1331.51,683.08 1332.07,683.08 1332.63,683.08 1333.19,683.08 1333.75,683.08 1334.3,683.08 1334.86,683.08 1335.42,683.08 1335.98,683.08 1336.54,683.08 1337.1,683.08 1337.66,683.08 1338.22,683.08 1338.78,683.08 1339.34,683.08 1339.9,683.08 1340.46,683.08 1341.02,683.08 1341.57,683.08 1342.13,683.08 1342.69,683.08 1343.25,683.08 1343.81,683.08 1344.37,683.08 1344.93,683.08 1345.49,683.08 1346.05,683.08 1346.61,683.08 1347.17,683.08 1347.73,683.08 1348.29,683.08 1348.84,683.08 1349.4,683.08 1349.96,683.08 1350.52,683.08 1351.08,683.08 1351.64,683.08 1352.2,683.08 1352.76,683.08 1353.32,683.08 1353.88,683.08 1354.44,683.08 1355,683.08 1355.56,683.08 1356.12,683.08 1356.67,683.08 1357.23,683.08 1357.79,683.08 1358.35,683.08 1358.91,683.08 1359.47,683.08 1360.03,683.08 1360.59,683.08 1361.15,683.08 1361.71,683.08 1362.27,683.08 1362.83,683.08 1363.39,683.08 1363.94,683.08 1364.5,683.08 1365.06,683.08 1365.62,683.08 1366.18,683.08 1366.74,683.08 1367.3,683.08 1367.86,683.08 1368.42,683.08 1368.98,683.08 1369.54,683.08 1370.1,683.08 1370.66,683.08 1371.21,683.08 1371.77,683.08 1372.33,683.08 1372.89,683.08 1373.45,683.08 1374.01,683.08 1374.57,683.08 1375.13,683.08 1375.69,683.08 1376.25,683.08 1376.81,683.08 1377.37,683.08 1377.93,683.08 1378.49,683.08 1379.04,683.08 1379.6,683.08 1380.16,683.08 1380.72,683.08 1381.28,683.08 1381.84,683.08 1382.4,683.08 1382.96,683.08 1383.52,683.08 1384.08,683.08 1384.64,683.08 1385.2,683.08 1385.76,683.08 1386.31,683.08 1386.87,683.08 1387.43,683.08 1387.99,683.08 1388.55,683.08 1389.11,683.08 1389.67,683.08 1390.23,683.08 1390.79,683.08 1391.35,683.08 1391.91,683.08 1392.47,683.08 1393.03,683.08 1393.58,683.08 1394.14,683.08 1394.7,683.08 1395.26,683.08 1395.82,683.08 1396.38,683.08 1396.94,683.08 1397.5,683.08 1398.06,683.08 1398.62,683.08 1399.18,683.08 1399.74,683.08 1400.3,683.08 1400.86,683.08 1401.41,683.08 1401.97,683.08 1402.53,683.08 1403.09,683.08 1403.65,683.08 1404.21,683.08 1404.77,683.08 1405.33,683.08 1405.89,683.08 1406.45,683.08 1407.01,683.08 1407.57,683.08 1408.13,683.08 1408.68,683.08 1409.24,683.08 1409.8,683.08 1410.36,683.08 1410.92,683.08 1411.48,683.08 1412.04,683.08 1412.6,683.08 1413.16,683.08 1413.72,683.08 1414.28,683.08 1414.84,683.08 1415.4,683.08 1415.95,683.08 1416.51,683.08 1417.07,683.08 1417.63,683.08 1418.19,683.08 1418.75,683.08 1419.31,683.08 1419.87,683.08 1420.43,683.08 1420.99,683.08 1421.55,683.08 1422.11,683.08 1422.67,683.08 1423.23,683.08 1423.78,683.08 1424.34,683.08 1424.9,683.08 1425.46,683.08 1426.02,683.08 1426.58,683.08 1427.14,683.08 1427.7,683.08 1428.26,683.08 1428.82,683.08 1429.38,683.08 1429.94,683.08 1430.5,683.08 1431.05,683.08 1431.61,683.08 1432.17,683.08 1432.73,683.08 1433.29,683.08 1433.85,683.08 1434.41,683.08 1434.97,683.08 1435.53,683.08 1436.09,683.08 1436.65,683.08 1437.21,683.08 1437.77,683.08 1438.33,683.08 1438.88,683.08 1439.44,683.08 1440,683.08 1440.56,683.08 1441.12,683.08 1441.68,683.08 1442.24,683.08 1442.8,683.08 1443.36,683.08 1443.92,683.08 1444.48,683.08 1445.04,683.08 1445.6,683.08 1446.15,683.08 1446.71,683.08 1447.27,683.08 1447.83,683.08 1448.39,683.08 1448.95,683.08 1449.51,683.08 1450.07,683.08 1450.63,683.08 1451.19,683.08 1451.75,683.08 1452.31,683.08 1452.87,683.08 1453.42,683.08 1453.98,683.08 1454.54,683.08 1455.1,683.08 1455.66,683.08 1456.22,683.08 1456.78,683.08 1457.34,683.08 1457.9,683.08 1458.46,683.08 1459.02,683.08 1459.58,683.08 1460.14,683.08 1460.7,683.08 1461.25,683.08 1461.81,683.08 1462.37,683.08 1462.93,683.08 1463.49,683.08 1464.05,683.08 1464.61,683.08 1465.17,683.08 1465.73,683.08 1466.29,683.08 1466.85,683.08 1467.41,683.08 1467.97,683.08 1468.52,683.08 1469.08,683.08 1469.64,683.08 1470.2,683.08 1470.76,683.08 1471.32,683.08 1471.88,683.08 1472.44,683.08 1473,683.08 1473.56,683.08 1474.12,683.08 1474.68,683.08 1475.24,683.08 1475.79,683.08 1476.35,683.08 1476.91,683.08 1477.47,683.08 1478.03,683.08 1478.59,683.08 1479.15,683.08 1479.71,683.08 1480.27,683.08 1480.83,683.08 1481.39,683.08 1481.95,683.08 1482.51,683.08 1483.07,683.08 1483.62,683.08 1484.18,683.08 1484.74,683.08 1485.3,683.08 1485.86,683.08 1486.42,683.08 1486.98,683.08 1487.54,683.08 1488.1,683.08 1488.66,683.08 1489.22,683.08 1489.78,683.08 1490.34,683.08 1490.89,683.08 1491.45,683.08 1492.01,683.08 1492.57,683.08 1493.13,683.08 1493.69,683.08 1494.25,683.08 1494.81,683.08 1495.37,683.08 1495.93,683.08 1496.49,683.08 1497.05,683.08 1497.61,683.08 1498.16,683.08 1498.72,683.08 1499.28,683.08 1499.84,683.08 1500.4,683.08 1500.96,683.08 1501.52,683.08 1502.08,683.08 1502.64,683.08 1503.2,683.08 1503.76,683.08 1504.32,683.08 1504.88,683.08 1505.44,683.08 1505.99,683.08 1506.55,683.08 1507.11,683.08 1507.67,683.08 1508.23,683.08 1508.79,683.08 1509.35,683.08 1509.91,683.08 1510.47,683.08 1511.03,683.08 1511.59,683.08 1512.15,683.08 1512.71,683.08 1513.26,683.08 1513.82,683.08 1514.38,683.08 1514.94,683.08 1515.5,683.08 1516.06,683.08 1516.62,683.08 1517.18,683.08 1517.74,683.08 1518.3,683.08 1518.86,683.08 1519.42,683.08 1519.98,683.08 1520.53,683.08 1521.09,683.08 1521.65,683.08 1522.21,683.08 1522.77,683.08 1523.33,683.08 1523.89,683.08 1524.45,683.08 1525.01,683.08 1525.57,683.08 1526.13,683.08 1526.69,683.08 1527.25,683.08 1527.81,683.08 1528.36,683.08 1528.92,683.08 1529.48,683.08 1530.04,683.08 1530.6,683.08 1531.16,683.08 1531.72,683.08 1532.28,683.08 1532.84,683.08 1533.4,683.08 1533.96,683.08 1534.52,683.08 1535.08,683.08 1535.63,683.08 1536.19,683.08 1536.75,683.08 1537.31,683.08 1537.87,683.08 1538.43,683.08 1538.99,683.08 1539.55,683.08 1540.11,683.08 1540.67,683.08 1541.23,683.08 1541.79,683.08 1542.35,683.08 1542.9,683.08 1543.46,683.08 1544.02,683.08 1544.58,683.08 1545.14,683.08 1545.7,683.08 1546.26,683.08 1546.82,683.08 1547.38,683.08 1547.94,683.08 1548.5,683.08 1549.06,683.08 1549.62,683.08 1550.18,683.08 1550.73,683.08 1551.29,683.08 1551.85,683.08 1552.41,683.08 1552.97,683.08 1553.53,683.08 1554.09,683.08 1554.65,683.08 1555.21,683.08 1555.77,683.08 1556.33,683.08 1556.89,683.08 1557.45,683.08 1558,683.08 1558.56,683.08 1559.12,683.08 1559.68,683.08 1560.24,683.08 1560.8,683.08 1561.36,683.08 1561.92,683.08 1562.48,683.08 1563.04,683.08 1563.6,683.08 1564.16,683.08 1564.72,683.08 1565.28,683.08 1565.83,683.08 1566.39,683.08 1566.95,683.08 1567.51,683.08 1568.07,683.08 1568.63,683.08 1569.19,683.08 1569.75,683.08 1570.31,683.08 1570.87,683.08 1571.43,683.08 1571.99,683.08 1572.55,683.08 1573.1,683.08 1573.66,683.08 1574.22,683.08 1574.78,683.08 1575.34,683.08 1575.9,683.08 1576.46,683.08 1577.02,683.08 1577.58,683.08 1578.14,683.08 1578.7,683.08 1579.26,683.08 1579.82,683.08 1580.37,683.08 1580.93,683.08 1581.49,683.08 1582.05,683.08 1582.61,683.08 1583.17,683.08 1583.73,683.08 1584.29,683.08 1584.85,683.08 1585.41,683.08 1585.97,683.08 1586.53,683.08 1587.09,683.08 1587.65,683.08 1588.2,683.08 1588.76,683.08 1589.32,683.08 1589.88,683.08 1590.44,683.08 1591,683.08 1591.56,683.08 1592.12,683.08 1592.68,683.08 1593.24,683.08 1593.8,683.08 1594.36,683.08 1594.92,683.08 1595.47,683.08 1596.03,683.08 1596.59,683.08 1597.15,683.08 1597.71,683.08 1598.27,683.08 1598.83,683.08 1599.39,683.08 1599.95,683.08 1600.51,683.08 1601.07,683.08 1601.63,683.08 1602.19,683.08 1602.74,683.08 1603.3,683.08 1603.86,683.08 1604.42,683.08 1604.98,683.08 1605.54,683.08 1606.1,683.08 1606.66,683.08 1607.22,683.08 1607.78,683.08 1608.34,683.08 1608.9,683.08 1609.46,683.08 1610.02,683.08 1610.57,683.08 1611.13,683.08 1611.69,683.08 1612.25,683.08 1612.81,683.08 1613.37,683.08 1613.93,683.08 1614.49,683.08 1615.05,683.08 1615.61,683.08 1616.17,683.08 1616.73,683.08 1617.29,683.08 1617.84,683.08 1618.4,683.08 1618.96,683.08 1619.52,683.08 1620.08,683.08 1620.64,683.08 1621.2,683.08 1621.76,683.08 1622.32,683.08 1622.88,683.08 1623.44,683.08 1624,683.08 1624.56,683.08 1625.11,683.08 1625.67,683.08 1626.23,683.08 1626.79,683.08 1627.35,683.08 1627.91,683.08 1628.47,683.08 1629.03,683.08 1629.59,683.08 1630.15,683.08 1630.71,683.08 1631.27,683.08 1631.83,683.08 1632.39,683.08 1632.94,683.08 1633.5,683.08 1634.06,683.08 1634.62,683.08 1635.18,683.08 1635.74,683.08 1636.3,683.08 1636.86,683.08 1637.42,683.08 1637.98,683.08 1638.54,683.08 1639.1,683.08 1639.66,683.08 1640.21,683.08 1640.77,683.08 1641.33,683.08 1641.89,683.08 1642.45,683.08 1643.01,683.08 1643.57,683.08 1644.13,683.08 1644.69,683.08 1645.25,683.08 1645.81,683.08 1646.37,683.08 1646.93,683.08 1647.48,683.08 1648.04,683.08 1648.6,683.08 1649.16,683.08 1649.72,683.08 1650.28,683.08 1650.84,683.08 1651.4,683.08 1651.96,683.08 1652.52,683.08 1653.08,683.08 1653.64,683.08 1654.2,683.08 1654.76,683.08 1655.31,683.08 1655.87,683.08 1656.43,683.08 1656.99,683.08 1657.55,683.08 1658.11,683.08 1658.67,683.08 1659.23,683.08 1659.79,683.08 1660.35,683.08 1660.91,683.08 1661.47,683.08 1662.03,683.08 1662.58,683.08 1663.14,683.08 1663.7,683.08 1664.26,683.08 1664.82,683.08 1665.38,683.08 1665.94,683.08 1666.5,683.08 1667.06,683.08 1667.62,683.08 1668.18,683.08 1668.74,683.08 1669.3,683.08 1669.85,683.08 1670.41,683.08 1670.97,683.08 1671.53,683.08 1672.09,683.08 1672.65,683.08 1673.21,683.08 1673.77,683.08 1674.33,683.08 1674.89,683.08 1675.45,683.08 1676.01,683.08 1676.57,683.08 1677.13,683.08 1677.68,683.08 1678.24,683.08 1678.8,683.08 1679.36,683.08 1679.92,683.08 1680.48,683.08 1681.04,683.08 1681.6,683.08 1682.16,683.08 1682.72,683.08 1683.28,683.08 1683.84,683.08 1684.4,683.08 1684.95,683.08 1685.51,683.08 1686.07,683.08 1686.63,683.08 1687.19,683.08 1687.75,683.08 1688.31,683.08 1688.87,683.08 1689.43,683.08 1689.99,683.08 1690.55,683.08 1691.11,683.08 1691.67,683.08 1692.23,683.08 1692.78,683.08 1693.34,683.08 1693.9,683.08 1694.46,683.08 1695.02,683.08 1695.58,683.08 1696.14,683.08 1696.7,683.08 1697.26,683.08 1697.82,683.08 1698.38,683.08 1698.94,683.08 1699.5,683.08 1700.05,683.08 1700.61,683.08 1701.17,683.08 1701.73,683.08 1702.29,683.08 1702.85,683.08 1703.41,683.08 1703.97,683.08 1704.53,683.08 1705.09,683.08 1705.65,683.08 1706.21,683.08 1706.77,683.08 1707.32,683.08 1707.88,683.08 1708.44,683.08 1709,683.08 1709.56,683.08 1710.12,683.08 1710.68,683.08 1711.24,683.08 1711.8,683.08 1712.36,683.08 1712.92,683.08 1713.48,683.08 1714.04,683.08 1714.6,683.08 1715.15,683.08 1715.71,683.08 1716.27,683.08 1716.83,683.08 1717.39,683.08 1717.95,683.08 1718.51,683.08 1719.07,683.08 1719.63,683.08 1720.19,683.08 1720.75,683.08 1721.31,683.08 1721.87,683.08 1722.42,683.08 1722.98,683.08 1723.54,683.08 1724.1,683.08 1724.66,683.08 1725.22,683.08 1725.78,683.08 1726.34,683.08 1726.9,683.08 1727.46,683.08 1728.02,683.08 1728.58,683.08 1729.14,683.08 1729.69,683.08 1730.25,683.08 1730.81,683.08 1731.37,683.08 1731.93,683.08 1732.49,683.08 1733.05,683.08 1733.61,683.08 1734.17,683.08 1734.73,683.08 1735.29,683.08 1735.85,683.08 1736.41,683.08 1736.97,683.08 1737.52,683.08 1738.08,683.08 1738.64,683.08 1739.2,683.08 1739.76,683.08 1740.32,683.08 1740.88,683.08 1741.44,683.08 1742,683.08 1742.56,683.08 1743.12,683.08 1743.68,683.08 1744.24,683.08 1744.79,683.08 1745.35,683.08 1745.91,683.08 1746.47,683.08 1747.03,683.08 1747.59,683.08 1748.15,683.08 1748.71,683.08 1749.27,683.08 1749.83,683.08 1750.39,683.08 1750.95,683.08 1751.51,683.08 1752.06,683.08 1752.62,683.08 1753.18,683.08 1753.74,683.08 1754.3,683.08 1754.86,683.08 1755.42,683.08 1755.98,683.08 1756.54,683.08 1757.1,683.08 1757.66,683.08 1758.22,683.08 1758.78,683.08 1759.34,683.08 1759.89,683.08 1760.45,683.08 1761.01,683.08 1761.57,683.08 1762.13,683.08 1762.69,683.08 1763.25,683.08 1763.81,683.08 1764.37,683.08 1764.93,683.08 1765.49,683.08 1766.05,683.08 1766.61,683.08 1767.16,683.08 1767.72,683.08 1768.28,683.08 1768.84,683.08 1769.4,683.08 1769.96,683.08 1770.52,683.08 1771.08,683.08 1771.64,683.08 1772.2,683.08 1772.76,683.08 1773.32,683.08 1773.88,683.08 1774.43,683.08 1774.99,683.08 1775.55,683.08 1776.11,683.08 1776.67,683.08 1777.23,683.08 1777.79,683.08 1778.35,683.08 1778.91,683.08 1779.47,683.08 1780.03,683.08 1780.59,683.08 1781.15,683.08 1781.71,683.08 1782.26,683.08 1782.82,683.08 1783.38,683.08 1783.94,683.08 1784.5,683.08 1785.06,683.08 1785.62,683.08 1786.18,683.08 1786.74,683.08 1787.3,683.08 1787.86,683.08 1788.42,683.08 1788.98,683.08 1789.53,683.08 1790.09,683.08 1790.65,683.08 1791.21,683.08 1791.77,683.08 1792.33,683.08 1792.89,683.08 1793.45,683.08 1794.01,683.08 1794.57,683.08 1795.13,683.08 1795.69,683.08 1796.25,683.08 1796.8,683.08 1797.36,683.08 1797.92,683.08 1798.48,683.08 1799.04,683.08 1799.6,683.08 1800.16,683.08 1800.72,683.08 1801.28,683.08 1801.84,683.08 1802.4,683.08 1802.96,683.08 1803.52,683.08 1804.08,683.08 1804.63,683.08 1805.19,683.08 1805.75,683.08 1806.31,683.08 1806.87,683.08 1807.43,683.08 1807.99,683.08 1808.55,683.08 1809.11,683.08 1809.67,683.08 1810.23,683.08 1810.79,683.08 1811.35,683.08 1811.9,683.08 1812.46,683.08 1813.02,683.08 1813.58,683.08 1814.14,683.08 1814.7,683.08 1815.26,683.08 1815.82,683.08 1816.38,683.08 1816.94,683.08 1817.5,683.08 1818.06,683.08 1818.62,683.08 1819.18,683.08 1819.73,683.08 1820.29,683.08 1820.85,683.08 1821.41,683.08 1821.97,683.08 1822.53,683.08 1823.09,683.08 1823.65,683.08 1824.21,683.08 1824.77,683.08 1825.33,683.08 1825.89,683.08 1826.45,683.08 1827,683.08 1827.56,683.08 1828.12,683.08 1828.68,683.08 1829.24,683.08 1829.8,683.08 1830.36,683.08 1830.92,683.08 1831.48,683.08 1832.04,683.08 1832.6,683.08 1833.16,683.08 1833.72,683.08 1834.27,683.08 1834.83,683.08 1835.39,683.08 1835.95,683.08 1836.51,683.08 1837.07,683.08 1837.63,683.08 1838.19,683.08 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.02851205925844 ± 0.025914288986239587\nProjected Energy: -4.012545667036145 ± (0.004095880803712149, 0.0038989066720711563)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.542276</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5659e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.9206e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0529e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.303e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.845e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.788e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613376\n -0.7590191922770835\n  0.1358418221962161\n  0.1578999869460933\n  0.8767114411781343\n  1.5305929970973322\n  1.5835732611867295\n  3.072870330325869\n  3.1256726539518445\n  4.862107221562172\n  6.260694850380594\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardRealSpace\nHubbardReal1D\nHubbardReal1DEP\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardRealSpace\nHubbardReal1D\nHubbardReal1DEP\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"hamiltonians.html#Deprecated-Hamiltonians","page":"Hamiltonians","title":"Deprecated Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"BoseHubbardReal1D2C\nBoseHubbardMom1D2C","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\nwarning: Warning\nThis type is deprecated and will be removed in a future release. Use HubbardRealSpace instead.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C{T} <: TwoComponentHamiltonian{T}\n\nSpecial case AbstractHamiltonian for a 2 component Bose gas. Use HubbardMom1D(::BoseFS2C; kwargs...) to construct this type.\n\nwarning: Warning\nThis type is not part of the user interface and may be removed in the future.\n\n\n\n\n\n","category":"type"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
