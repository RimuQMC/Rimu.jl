var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndœÑ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dœÑ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ¬± $(r.œÉ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ¬± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ¬± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ¬± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ¬± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ¬± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ¬± 0.13748856752861724\n   Replica 2: -3.974753826250174 ¬± 0.12466355058904417\n   Replica 3: -4.011054302602586 ¬± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1‚ü©\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1‚ü©\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0‚ü©\"=>-14.1421, fs\"|0 2 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 1 0 2‚ü©\"=>-14.1421, fs\"|1 2 0 1 1 1‚ü©\"=>-14.1421, fs\"|2 0 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 2 0 1‚ü©\"=>-14.1421, fs\"|1 1 2 0 1 1‚ü©\"=>-14.1421, fs\"|1 1 0 2 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 0 2 1‚ü©\"=>-14.1421, fs\"|1 0 2 1 1 1‚ü©\"=>-14.1421, fs\"|2 1 1 1 1 0‚ü©\"=>-14.1421, fs\"|0 1 1 1 1 2‚ü©\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip620\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip621\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip622\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.67 2211.02,1003.67 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.526 2211.02,746.526 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.382 2211.02,489.382 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.238 2211.02,232.238 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.67 423.181,1003.67 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.526 423.181,746.526 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.382 423.181,489.382 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.238 423.181,232.238 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.18 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.18 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M290.043 1017.02 L306.363 1017.02 L306.363 1020.95 L284.418 1020.95 L284.418 1017.02 Q287.08 1014.26 291.664 1009.63 Q296.27 1004.98 297.451 1003.64 Q299.696 1001.11 300.576 999.376 Q301.478 997.617 301.478 995.927 Q301.478 993.173 299.534 991.437 Q297.613 989.7 294.511 989.7 Q292.312 989.7 289.858 990.464 Q287.427 991.228 284.65 992.779 L284.65 988.057 Q287.474 986.923 289.927 986.344 Q292.381 985.765 294.418 985.765 Q299.789 985.765 302.983 988.45 Q306.177 991.136 306.177 995.626 Q306.177 997.756 305.367 999.677 Q304.58 1001.58 302.474 1004.17 Q301.895 1004.84 298.793 1008.06 Q295.691 1011.25 290.043 1017.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 986.39 L334.58 986.39 L334.58 990.325 L320.506 990.325 L320.506 998.798 Q321.524 998.45 322.543 998.288 Q323.562 998.103 324.58 998.103 Q330.367 998.103 333.747 1001.27 Q337.126 1004.45 337.126 1009.86 Q337.126 1015.44 333.654 1018.54 Q330.182 1021.62 323.862 1021.62 Q321.687 1021.62 319.418 1021.25 Q317.173 1020.88 314.765 1020.14 L314.765 1015.44 Q316.849 1016.58 319.071 1017.13 Q321.293 1017.69 323.77 1017.69 Q327.774 1017.69 330.112 1015.58 Q332.45 1013.47 332.45 1009.86 Q332.45 1006.25 330.112 1004.14 Q327.774 1002.04 323.77 1002.04 Q321.895 1002.04 320.02 1002.45 Q318.168 1002.87 316.224 1003.75 L316.224 986.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 989.469 Q352.728 989.469 350.899 993.034 Q349.094 996.575 349.094 1003.7 Q349.094 1010.81 350.899 1014.38 Q352.728 1017.92 356.339 1017.92 Q359.973 1017.92 361.779 1014.38 Q363.608 1010.81 363.608 1003.7 Q363.608 996.575 361.779 993.034 Q359.973 989.469 356.339 989.469 M356.339 985.765 Q362.149 985.765 365.205 990.372 Q368.284 994.955 368.284 1003.7 Q368.284 1012.43 365.205 1017.04 Q362.149 1021.62 356.339 1021.62 Q350.529 1021.62 347.45 1017.04 Q344.395 1012.43 344.395 1003.7 Q344.395 994.955 347.45 990.372 Q350.529 985.765 356.339 985.765 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M286.062 729.246 L304.418 729.246 L304.418 733.181 L290.344 733.181 L290.344 741.654 Q291.363 741.306 292.381 741.144 Q293.4 740.959 294.418 740.959 Q300.205 740.959 303.585 744.13 Q306.964 747.302 306.964 752.718 Q306.964 758.297 303.492 761.399 Q300.02 764.477 293.701 764.477 Q291.525 764.477 289.256 764.107 Q287.011 763.737 284.603 762.996 L284.603 758.297 Q286.687 759.431 288.909 759.987 Q291.131 760.542 293.608 760.542 Q297.613 760.542 299.951 758.436 Q302.288 756.329 302.288 752.718 Q302.288 749.107 299.951 747.001 Q297.613 744.894 293.608 744.894 Q291.733 744.894 289.858 745.311 Q288.006 745.728 286.062 746.607 L286.062 729.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 732.325 Q322.566 732.325 320.737 735.89 Q318.932 739.431 318.932 746.561 Q318.932 753.667 320.737 757.232 Q322.566 760.774 326.177 760.774 Q329.811 760.774 331.617 757.232 Q333.446 753.667 333.446 746.561 Q333.446 739.431 331.617 735.89 Q329.811 732.325 326.177 732.325 M326.177 728.621 Q331.987 728.621 335.043 733.228 Q338.122 737.811 338.122 746.561 Q338.122 755.288 335.043 759.894 Q331.987 764.477 326.177 764.477 Q320.367 764.477 317.288 759.894 Q314.233 755.288 314.233 746.561 Q314.233 737.811 317.288 733.228 Q320.367 728.621 326.177 728.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 732.325 Q352.728 732.325 350.899 735.89 Q349.094 739.431 349.094 746.561 Q349.094 753.667 350.899 757.232 Q352.728 760.774 356.339 760.774 Q359.973 760.774 361.779 757.232 Q363.608 753.667 363.608 746.561 Q363.608 739.431 361.779 735.89 Q359.973 732.325 356.339 732.325 M356.339 728.621 Q362.149 728.621 365.205 733.228 Q368.284 737.811 368.284 746.561 Q368.284 755.288 365.205 759.894 Q362.149 764.477 356.339 764.477 Q350.529 764.477 347.45 759.894 Q344.395 755.288 344.395 746.561 Q344.395 737.811 347.45 733.228 Q350.529 728.621 356.339 728.621 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M284.835 472.102 L307.057 472.102 L307.057 474.093 L294.511 506.662 L289.627 506.662 L301.432 476.037 L284.835 476.037 L284.835 472.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M316.224 472.102 L334.58 472.102 L334.58 476.037 L320.506 476.037 L320.506 484.509 Q321.524 484.162 322.543 484 Q323.562 483.815 324.58 483.815 Q330.367 483.815 333.747 486.986 Q337.126 490.158 337.126 495.574 Q337.126 501.153 333.654 504.255 Q330.182 507.333 323.862 507.333 Q321.687 507.333 319.418 506.963 Q317.173 506.593 314.765 505.852 L314.765 501.153 Q316.849 502.287 319.071 502.843 Q321.293 503.398 323.77 503.398 Q327.774 503.398 330.112 501.292 Q332.45 499.185 332.45 495.574 Q332.45 491.963 330.112 489.857 Q327.774 487.75 323.77 487.75 Q321.895 487.75 320.02 488.167 Q318.168 488.583 316.224 489.463 L316.224 472.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 475.181 Q352.728 475.181 350.899 478.746 Q349.094 482.287 349.094 489.417 Q349.094 496.523 350.899 500.088 Q352.728 503.63 356.339 503.63 Q359.973 503.63 361.779 500.088 Q363.608 496.523 363.608 489.417 Q363.608 482.287 361.779 478.746 Q359.973 475.181 356.339 475.181 M356.339 471.477 Q362.149 471.477 365.205 476.084 Q368.284 480.667 368.284 489.417 Q368.284 498.144 365.205 502.75 Q362.149 507.333 356.339 507.333 Q350.529 507.333 347.45 502.75 Q344.395 498.144 344.395 489.417 Q344.395 480.667 347.45 476.084 Q350.529 471.477 356.339 471.477 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M256.664 245.583 L264.303 245.583 L264.303 219.217 L255.992 220.884 L255.992 216.625 L264.256 214.958 L268.932 214.958 L268.932 245.583 L276.571 245.583 L276.571 249.518 L256.664 249.518 L256.664 245.583 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M296.015 218.037 Q292.404 218.037 290.576 221.602 Q288.77 225.143 288.77 232.273 Q288.77 239.379 290.576 242.944 Q292.404 246.486 296.015 246.486 Q299.65 246.486 301.455 242.944 Q303.284 239.379 303.284 232.273 Q303.284 225.143 301.455 221.602 Q299.65 218.037 296.015 218.037 M296.015 214.333 Q301.826 214.333 304.881 218.939 Q307.96 223.523 307.96 232.273 Q307.96 241 304.881 245.606 Q301.826 250.189 296.015 250.189 Q290.205 250.189 287.127 245.606 Q284.071 241 284.071 232.273 Q284.071 223.523 287.127 218.939 Q290.205 214.333 296.015 214.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M326.177 218.037 Q322.566 218.037 320.737 221.602 Q318.932 225.143 318.932 232.273 Q318.932 239.379 320.737 242.944 Q322.566 246.486 326.177 246.486 Q329.811 246.486 331.617 242.944 Q333.446 239.379 333.446 232.273 Q333.446 225.143 331.617 221.602 Q329.811 218.037 326.177 218.037 M326.177 214.333 Q331.987 214.333 335.043 218.939 Q338.122 223.523 338.122 232.273 Q338.122 241 335.043 245.606 Q331.987 250.189 326.177 250.189 Q320.367 250.189 317.288 245.606 Q314.233 241 314.233 232.273 Q314.233 223.523 317.288 218.939 Q320.367 214.333 326.177 214.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M356.339 218.037 Q352.728 218.037 350.899 221.602 Q349.094 225.143 349.094 232.273 Q349.094 239.379 350.899 242.944 Q352.728 246.486 356.339 246.486 Q359.973 246.486 361.779 242.944 Q363.608 239.379 363.608 232.273 Q363.608 225.143 361.779 221.602 Q359.973 218.037 356.339 218.037 M356.339 214.333 Q362.149 214.333 365.205 218.939 Q368.284 223.523 368.284 232.273 Q368.284 241 365.205 245.606 Q362.149 250.189 356.339 250.189 Q350.529 250.189 347.45 245.606 Q344.395 241 344.395 232.273 Q344.395 223.523 347.45 218.939 Q350.529 214.333 356.339 214.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip622)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.238 4017.76,232.238 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1248.78 458.259,1248.48 458.828,1248.11 459.396,1247.66 459.964,1246.12 460.533,1244.54 461.101,1243.96 461.669,1243.29 462.238,1241.52 462.806,1237.64 463.375,1236.82 463.943,1235.88 464.511,1234.87 465.08,1232.67 465.648,1230.45 466.216,1229.17 466.785,1227.76 467.353,1225.13 467.921,1223.51 468.49,1221.74 469.058,1218.79 469.626,1216.74 470.195,1214.51 470.763,1212.13 471.331,1207.55 471.9,1202.84 472.468,1199.05 473.036,1194.03 473.605,1190.91 474.173,1187.74 474.741,1184.28 475.31,1178.64 475.878,1173.81 476.446,1169.89 477.015,1165.72 477.583,1161.4 478.152,1154.85 478.72,1149.06 479.288,1143.98 479.857,1138.8 480.425,1131.38 480.993,1125.86 481.562,1119.14 482.13,1113.24 482.698,1107.04 483.267,1099.53 483.835,1089.81 484.403,1082.18 484.972,1075.39 485.54,1067.31 486.108,1058.05 486.677,1049.67 487.245,1041.24 487.813,1032.7 488.382,1022.94 488.95,1015.01 489.518,1007.08 490.087,997.112 490.655,988.033 491.224,975.68 491.792,964.2 492.36,955.887 492.929,947.319 493.497,934.322 494.065,924.609 494.634,911.882 495.202,901.307 495.77,892.444 496.339,882.527 496.907,872.722 497.475,862.826 498.044,852.929 498.612,841.985 499.18,831.092 499.749,821.317 500.317,810.377 500.885,800.555 501.454,789.696 502.022,777.853 502.59,768.132 503.159,757.614 503.727,747.175 504.295,737.781 504.864,727.261 505.432,718.067 506.001,706.858 506.569,693.745 507.137,681.83 507.706,672.057 508.274,662.636 508.842,653.094 509.411,641.731 509.979,632.746 510.547,624.683 511.116,617.805 511.684,608.662 512.252,598.976 512.821,589.379 513.389,582.948 513.957,573.363 514.526,567.09 515.094,557.703 515.662,551.889 516.231,544.864 516.799,538.017 517.367,532.137 517.936,525.322 518.504,518.584 519.072,511.933 519.641,504.351 520.209,497.996 520.778,491.665 521.346,486.475 521.914,481.392 522.483,476.193 523.051,471.118 523.619,466.065 524.188,459.821 524.756,454.869 525.324,450.108 525.893,444.299 526.461,437.688 527.029,432.203 527.598,428.275 528.166,423.11 528.734,417.732 529.303,413.797 529.871,409.965 530.439,405.967 531.008,402.232 531.576,398.414 532.144,393.72 532.713,388.264 533.281,383.908 533.85,381.54 534.418,376.325 534.986,371.311 535.555,367.283 536.123,364.435 536.691,361.813 537.26,357.062 537.828,354.372 538.396,351.908 538.965,349.373 539.533,344.388 540.101,342.038 540.67,336.799 541.238,333.613 541.806,331.511 542.375,328.352 542.943,327.598 543.511,325.654 544.08,322.759 544.648,322.009 545.216,320.241 545.785,317.221 546.353,315.465 546.921,312.642 547.49,309.142 548.058,307.719 548.627,304.375 549.195,304.274 549.763,303.746 550.332,302.397 550.9,300.099 551.468,298.759 552.037,297.382 552.605,296.245 553.173,293.876 553.742,291.63 554.31,291.43 554.878,288.331 555.447,284.298 556.015,282.755 556.583,281.142 557.152,278.49 557.72,277.075 558.288,276.699 558.857,276.039 559.425,274.596 559.993,273.059 560.562,271.704 561.13,271.514 561.698,269.232 562.267,269.215 562.835,271.114 563.404,270.611 563.972,271.258 564.54,271.575 565.109,271.054 565.677,270.527 566.245,268.958 566.814,268.568 567.382,266.936 567.95,266.425 568.519,263.954 569.087,262.517 569.655,260.979 570.224,260.515 570.792,260.159 571.36,258.902 571.929,256.699 572.497,256.667 573.065,257.749 573.634,257.473 574.202,256.387 574.77,256.188 575.339,256.08 575.907,253.864 576.476,254.127 577.044,255.16 577.612,253.841 578.181,253.926 578.749,254.847 579.317,252.028 579.886,253.294 580.454,251.004 581.022,250.935 581.591,252.138 582.159,254.163 582.727,251.812 583.296,250.631 583.864,251.824 584.432,253.695 585.001,252.318 585.569,252.164 586.137,251.881 586.706,250.732 587.274,250.326 587.842,251.054 588.411,245.785 588.979,245.793 589.547,246.036 590.116,248.224 590.684,248.134 591.253,249.247 591.821,249.998 592.389,248.846 592.958,250.723 593.526,248.358 594.094,246.207 594.663,247.296 595.231,248.086 595.799,248.81 596.368,249.405 596.936,248.078 597.504,246.693 598.073,248.493 598.641,251.054 599.209,249.542 599.778,246.948 600.346,245.808 600.914,246.462 601.483,248.418 602.051,246.935 602.619,246.897 603.188,244.447 603.756,243.25 604.325,244.44 604.893,245.388 605.461,244.858 606.03,243.51 606.598,243.497 607.166,244.433 607.735,242.272 608.303,241.276 608.871,239.261 609.44,238.169 610.008,237.434 610.576,237.848 611.145,235.069 611.713,235.461 612.281,234.928 612.85,233.215 613.418,233.673 613.986,234.302 614.555,233.76 615.123,231.054 615.691,231.63 616.26,232.44 616.828,227.986 617.396,226.659 617.965,229.822 618.533,229.66 619.102,231.475 619.67,232.194 620.238,233.061 620.807,231.706 621.375,232.321 621.943,233.867 622.512,231.216 623.08,229.928 623.648,227.843 624.217,228.963 624.785,232.122 625.353,232.859 625.922,235.703 626.49,236.1 627.058,238.553 627.627,238.801 628.195,237.248 628.763,236.609 629.332,233.87 629.9,237.451 630.468,236.864 631.037,235.203 631.605,234.738 632.173,235.423 632.742,236.799 633.31,239.325 633.879,240.603 634.447,239.848 635.015,239.102 635.584,239.447 636.152,237.829 636.72,237.193 637.289,238.456 637.857,237.839 638.425,236.989 638.994,237.522 639.562,236.631 640.13,236.769 640.699,237.182 641.267,235.294 641.835,237.913 642.404,234.08 642.972,235.834 643.54,236.136 644.109,239.769 644.677,239.629 645.245,240.52 645.814,238.693 646.382,241.99 646.951,240.985 647.519,242.162 648.087,243.345 648.656,244.259 649.224,243.003 649.792,241.844 650.361,242.91 650.929,244.018 651.497,243.942 652.066,242.55 652.634,243.497 653.202,240.997 653.771,240.75 654.339,241.554 654.907,242.51 655.476,243.39 656.044,243.051 656.612,242.847 657.181,241.584 657.749,242.582 658.317,243.368 658.886,241.043 659.454,240.831 660.022,239.675 660.591,239.604 661.159,239.326 661.728,239.399 662.296,240.405 662.864,239.026 663.433,241.032 664.001,241.714 664.569,239.989 665.138,238.676 665.706,239.594 666.274,239.537 666.843,239.503 667.411,239.205 667.979,239.894 668.548,238.375 669.116,237.221 669.684,235.96 670.253,238.006 670.821,239.848 671.389,240.537 671.958,241.338 672.526,242.124 673.094,240.524 673.663,241.303 674.231,238.851 674.799,239.788 675.368,239.561 675.936,238.376 676.505,237.195 677.073,239.152 677.641,237.762 678.21,236.524 678.778,238.267 679.346,238.05 679.915,236.909 680.483,234.642 681.051,235.689 681.62,234.733 682.188,235.069 682.756,235.419 683.325,235.425 683.893,234.402 684.461,232.514 685.03,232.804 685.598,233.955 686.166,233.792 686.735,232.742 687.303,233.946 687.871,233.102 688.44,232.109 689.008,232.4 689.577,232.675 690.145,232.045 690.713,232.143 691.282,231.299 691.85,234.742 692.418,234.682 692.987,235.783 693.555,236.925 694.123,235.814 694.692,233.723 695.26,231.806 695.828,232.059 696.397,232.272 696.965,236.78 697.533,234.744 698.102,232.519 698.67,232.847 699.238,231.824 699.807,231.717 700.375,232.85 700.943,235.203 701.512,234.15 702.08,233.161 702.648,234.129 703.217,234.087 703.785,233.994 704.354,231.903 704.922,230.952 705.49,233.156 706.059,232.502 706.627,232.712 707.195,232.89 707.764,231.041 708.332,230.24 708.9,229.627 709.469,231.073 710.037,231.213 710.605,229.468 711.174,231.949 711.742,233.176 712.31,233.04 712.879,233.119 713.447,233.262 714.015,232.285 714.584,233.606 715.152,232.613 715.72,231.566 716.289,232.96 716.857,232.912 717.425,230.799 717.994,231.933 718.562,231.231 719.131,232.545 719.699,233.639 720.267,235.792 720.836,235.65 721.404,236.669 721.972,236.688 722.541,237.552 723.109,234.232 723.677,233.066 724.246,232.217 724.814,234.532 725.382,235.45 725.951,234.172 726.519,235.373 727.087,236.691 727.656,233.743 728.224,233.773 728.792,234.823 729.361,234.028 729.929,231.906 730.497,232.082 731.066,233.266 731.634,233.636 732.203,232.758 732.771,232.022 733.339,230.095 733.908,230.579 734.476,232.846 735.044,231.963 735.613,232.374 736.181,232.722 736.749,234.961 737.318,235.082 737.886,236.959 738.454,233.793 739.023,234.922 739.591,235.191 740.159,236.36 740.728,235.311 741.296,235.154 741.864,236.039 742.433,236.924 743.001,235.8 743.569,236.82 744.138,238.604 744.706,237.103 745.274,236.008 745.843,235.896 746.411,235 746.98,232.943 747.548,234.928 748.116,233.636 748.685,233.752 749.253,231.662 749.821,231.873 750.39,232.132 750.958,233.324 751.526,234.401 752.095,233.466 752.663,231.421 753.231,231.845 753.8,230.954 754.368,230.092 754.936,230.552 755.505,230.798 756.073,230.015 756.641,232.291 757.21,231.437 757.778,231.825 758.346,230.104 758.915,229.287 759.483,229.576 760.052,230.979 760.62,229.031 761.188,232.462 761.757,232.624 762.325,233.016 762.893,231.986 763.462,232.087 764.03,233.327 764.598,234.644 765.167,232.5 765.735,229.835 766.303,229.323 766.872,229.894 767.44,230.164 768.008,228.605 768.577,228.116 769.145,229.832 769.713,230.341 770.282,231.687 770.85,232.111 771.418,230.35 771.987,228.795 772.555,229.295 773.123,227.881 773.692,231.381 774.26,232.82 774.829,234.235 775.397,234.409 775.965,234.581 776.534,234.661 777.102,233.639 777.67,233.814 778.239,234.957 778.807,234.003 779.375,232.006 779.944,232.13 780.512,232.594 781.08,233.973 781.649,235.138 782.217,237.176 782.785,236.13 783.354,237.191 783.922,238.146 784.49,236.909 785.059,237.919 785.627,238.838 786.195,240.685 786.764,240.266 787.332,239.784 787.9,239.494 788.469,239.059 789.037,238.77 789.606,238.399 790.174,237.976 790.742,237.651 791.311,237.336 791.879,237.273 792.447,236.812 793.016,234.47 793.584,235.713 794.152,236.546 794.721,236.172 795.289,235.003 795.857,235.941 796.426,232.659 796.994,231.741 797.562,230.769 798.131,232.119 798.699,233.354 799.267,234.393 799.836,231.403 800.404,232.474 800.972,233.667 801.541,231.78 802.109,232.847 802.678,234.171 803.246,233.374 803.814,234.408 804.383,234.412 804.951,235.367 805.519,236.128 806.088,236.014 806.656,236.837 807.224,235.491 807.793,235.282 808.361,237.314 808.929,238.079 809.498,236.693 810.066,236.328 810.634,237.189 811.203,236.854 811.771,234.41 812.339,235.384 812.908,236.26 813.476,234.887 814.044,233.651 814.613,234.672 815.181,233.563 815.749,235.497 816.318,237.398 816.886,236.865 817.455,236.482 818.023,236.242 818.591,237.013 819.16,237.775 819.728,236.296 820.296,233.865 820.865,233.82 821.433,235.772 822.001,234.427 822.57,233.191 823.138,233.153 823.706,232.17 824.275,230.939 824.843,229.961 825.411,227.064 825.98,226.344 826.548,226.701 827.116,226.32 827.685,228.045 828.253,228.593 828.821,228.825 829.39,229.086 829.958,229.22 830.526,232.373 831.095,232.532 831.663,233.419 832.232,232.417 832.8,232.461 833.368,232.489 833.937,233.567 834.505,233.5 835.073,233.395 835.642,233.396 836.21,231.228 836.778,231.354 837.347,230.467 837.915,230.597 838.483,229.829 839.052,230.935 839.62,231.026 840.188,232.509 840.757,233.602 841.325,234.62 841.893,233.523 842.462,231.328 843.03,231.638 843.598,233.736 844.167,234.578 844.735,234.573 845.304,235.578 845.872,234.442 846.44,235.351 847.009,235.354 847.577,234.096 848.145,235.042 848.714,233.872 849.282,232.788 849.85,232.924 850.419,230.667 850.987,230.779 851.555,230.977 852.124,233.191 852.692,234.209 853.26,233.174 853.829,233.326 854.397,230.985 854.965,232.983 855.534,233.601 856.102,234.699 856.67,233.459 857.239,233.468 857.807,233.365 858.375,233.404 858.944,233.315 859.512,230.914 860.081,232.157 860.649,230.2 861.217,230.359 861.786,232.629 862.354,230.461 862.922,232.349 863.491,233.384 864.059,234.28 864.627,233.224 865.196,233.096 865.764,233.839 866.332,231.612 866.901,230.634 867.469,230.686 868.037,230.738 868.606,230.708 869.174,230.831 869.742,232.078 870.311,232.122 870.879,234.134 871.447,234.106 872.016,231.954 872.584,232.017 873.152,230.971 873.721,229.858 874.289,228.967 874.858,229.238 875.426,230.512 875.994,231.771 876.563,231.714 877.131,231.696 877.699,231.826 878.268,231.685 878.836,229.619 879.404,230.624 879.973,228.757 880.541,230.105 881.109,229.327 881.678,228.739 882.246,228.172 882.814,229.689 883.383,231.177 883.951,230.376 884.519,231.731 885.088,230.555 885.656,230.822 886.224,231.148 886.793,232.613 887.361,230.449 887.93,227.486 888.498,228.197 889.066,227.791 889.635,228.235 890.203,229.85 890.771,231.347 891.34,230.477 891.908,229.671 892.476,228.836 893.045,229.482 893.613,227.914 894.181,227.513 894.75,227.942 895.318,229.283 895.886,230.53 896.455,232.851 897.023,233.998 897.591,233.025 898.16,232.33 898.728,232.638 899.296,231.724 899.865,233.004 900.433,235.178 901.001,235.134 901.57,235.124 902.138,233.9 902.707,232.988 903.275,233.106 903.843,232.271 904.412,231.479 904.98,232.068 905.548,232.052 906.117,231.003 906.685,231.307 907.253,230.611 907.822,232.801 908.39,234.037 908.958,231.986 909.527,231.886 910.095,233.078 910.663,232.175 911.232,232.252 911.8,234.554 912.368,237.417 912.937,239.502 913.505,239.072 914.073,238.866 914.642,237.477 915.21,239.307 915.779,239.764 916.347,240.555 916.915,240.977 917.484,239.472 918.052,240.229 918.62,239.653 919.189,242.138 919.757,237.536 920.325,234.282 920.894,234.862 921.462,236.501 922.03,235.275 922.599,234.928 923.167,234.746 923.735,236.52 924.304,236.562 924.872,236.195 925.44,234.853 926.009,236.727 926.577,235.292 927.145,236.956 927.714,235.579 928.282,234.36 928.85,236.303 929.419,236.951 929.987,236.551 930.556,233.936 931.124,233.774 931.692,232.733 932.261,234.695 932.829,234.325 933.397,233.279 933.966,232.117 934.534,229.952 935.102,230.222 935.671,230.222 936.239,233.155 936.807,234.171 937.376,234.912 937.944,234.62 938.512,234.494 939.081,236.213 939.649,236.672 940.217,235.46 940.786,234.005 941.354,234.733 941.922,233.411 942.491,230.5 943.059,228.579 943.627,229.961 944.196,229.208 944.764,230.48 945.333,232.616 945.901,232.489 946.469,231.517 947.038,234.488 947.606,234.413 948.174,235.247 948.743,235.815 949.311,236.545 949.879,237.096 950.448,237.899 951.016,236.254 951.584,235.579 952.153,234.203 952.721,233.984 953.289,233.657 953.858,232.339 954.426,235.255 954.994,238.122 955.563,237.445 956.131,237.248 956.699,235.879 957.268,234.626 957.836,233.272 958.405,231.318 958.973,229.253 959.541,229.798 960.11,230.603 960.678,230.57 961.246,230.506 961.815,228.304 962.383,228.51 962.951,230.813 963.52,230.095 964.088,232.181 964.656,232.122 965.225,230.989 965.793,230.217 966.361,234.083 966.93,233.061 967.498,232.836 968.066,231.782 968.635,232.736 969.203,233.927 969.771,233.827 970.34,232.649 970.908,230.647 971.476,228.834 972.045,229.168 972.613,229.477 973.182,227.683 973.75,227.852 974.318,228.084 974.887,229.307 975.455,227.432 976.023,228.734 976.592,227.915 977.16,230.244 977.728,229.481 978.297,228.532 978.865,228.75 979.433,230.155 980.002,231.423 980.57,231.499 981.138,231.635 981.707,231.729 982.275,232.833 982.843,232.977 983.412,235.04 983.98,233.825 984.548,232.723 985.117,230.452 985.685,233.801 986.253,233.81 986.822,232.579 987.39,231.52 987.959,231.506 988.527,234.813 989.095,233.593 989.664,234.626 990.232,233.61 990.8,233.512 991.369,232.453 991.937,230.39 992.505,227.407 993.074,228.5 993.642,229.957 994.21,229.029 994.779,228.118 995.347,230.417 995.915,231.501 996.484,230.521 997.052,229.687 997.62,231.802 998.189,232.822 998.757,234.727 999.325,234.511 999.894,236.256 1000.46,235.861 1001.03,234.581 1001.6,232.458 1002.17,232.435 1002.74,232.393 1003.3,231.399 1003.87,231.534 1004.44,231.423 1005.01,231.535 1005.58,230.484 1006.15,230.756 1006.71,232.036 1007.28,233.045 1007.85,233.107 1008.42,234.314 1008.99,233.076 1009.56,233.219 1010.12,234.183 1010.69,234.146 1011.26,233.938 1011.83,233.917 1012.4,232.742 1012.97,232.73 1013.53,231.588 1014.1,233.613 1014.67,232.612 1015.24,232.538 1015.81,231.417 1016.38,230.721 1016.94,229.755 1017.51,233.007 1018.08,234.94 1018.65,232.763 1019.22,231.542 1019.79,230.48 1020.35,229.643 1020.92,233.046 1021.49,232.745 1022.06,232.603 1022.63,230.34 1023.2,229.585 1023.76,229.72 1024.33,228.923 1024.9,230.118 1025.47,231.355 1026.04,230.387 1026.61,231.665 1027.17,231.803 1027.74,231.797 1028.31,233.754 1028.88,231.657 1029.45,231.728 1030.02,230.83 1030.58,230.949 1031.15,232.094 1031.72,233.11 1032.29,233.183 1032.86,234.175 1033.43,234.169 1033.99,234.033 1034.56,233.163 1035.13,232.112 1035.7,233.002 1036.27,232.749 1036.84,233.66 1037.4,232.613 1037.97,234.799 1038.54,237.672 1039.11,235.434 1039.68,235.254 1040.25,235.878 1040.81,236.669 1041.38,237.362 1041.95,235.778 1042.52,235.32 1043.09,237.337 1043.66,237.801 1044.22,234.389 1044.79,234.379 1045.36,233.403 1045.93,231.491 1046.5,234.785 1047.07,236.472 1047.63,237.998 1048.2,238.75 1048.77,235.114 1049.34,232.644 1049.91,233.412 1050.48,232.115 1051.05,234.177 1051.61,232.848 1052.18,230.674 1052.75,231.579 1053.32,229.466 1053.89,228.614 1054.46,227.674 1055.02,225.91 1055.59,224.502 1056.16,225.078 1056.73,225.633 1057.3,227.218 1057.87,228.763 1058.43,229.059 1059,229.101 1059.57,230.361 1060.14,230.658 1060.71,230.908 1061.28,231.084 1061.84,231.25 1062.41,229.319 1062.98,226.579 1063.55,226.982 1064.12,225.394 1064.69,219.895 1065.25,220.935 1065.82,222.698 1066.39,221.625 1066.96,223.434 1067.53,222.002 1068.1,220.724 1068.66,223.611 1069.23,223.172 1069.8,225.025 1070.37,226.947 1070.94,227.56 1071.51,228.044 1072.07,227.227 1072.64,227.638 1073.21,228.157 1073.78,230.022 1074.35,229.645 1074.92,230.117 1075.48,229.327 1076.05,231.714 1076.62,230.818 1077.19,232.024 1077.76,233.327 1078.33,231.272 1078.89,230.557 1079.46,228.988 1080.03,230.491 1080.6,231.888 1081.17,231.806 1081.74,232.847 1082.3,233.06 1082.87,232.474 1083.44,231.829 1084.01,234.111 1084.58,234.185 1085.15,234.456 1085.71,234.34 1086.28,234.431 1086.85,233.66 1087.42,233.909 1087.99,232.989 1088.56,234.236 1089.12,234.184 1089.69,234.201 1090.26,233.409 1090.83,235.519 1091.4,237.535 1091.97,238.549 1092.53,236.297 1093.1,234.125 1093.67,234.06 1094.24,236.876 1094.81,235.618 1095.38,236.321 1095.94,235.326 1096.51,238.2 1097.08,240.145 1097.65,239.633 1098.22,241.085 1098.79,237.354 1099.35,240.014 1099.92,239.399 1100.49,239.844 1101.06,239.573 1101.63,239.304 1102.2,239.962 1102.76,238.338 1103.33,239.863 1103.9,240.303 1104.47,238.713 1105.04,237.187 1105.61,236.644 1106.17,234.287 1106.74,233.968 1107.31,235.978 1107.88,236.623 1108.45,235.157 1109.02,232.85 1109.58,230.79 1110.15,228.673 1110.72,229.982 1111.29,231.123 1111.86,233.206 1112.43,232.189 1112.99,232.308 1113.56,233.278 1114.13,233.028 1114.7,232.934 1115.27,232.854 1115.84,234.569 1116.4,231.385 1116.97,227.139 1117.54,227.387 1118.11,225.728 1118.68,225.17 1119.25,227.991 1119.81,229.172 1120.38,229.137 1120.95,230.335 1121.52,232.609 1122.09,232.488 1122.66,232.412 1123.23,231.287 1123.79,230.077 1124.36,233.387 1124.93,237.439 1125.5,238.945 1126.07,238.38 1126.64,237.012 1127.2,235.612 1127.77,238.362 1128.34,234.598 1128.91,233.532 1129.48,233.434 1130.05,232.251 1130.61,232.217 1131.18,231.189 1131.75,229.208 1132.32,230.312 1132.89,231.241 1133.46,227.132 1134.02,226.478 1134.59,225.83 1135.16,227.163 1135.73,225.539 1136.3,226.135 1136.87,227.712 1137.43,228.225 1138,229.567 1138.57,229.829 1139.14,230.025 1139.71,230.439 1140.28,228.71 1140.84,229.022 1141.41,232.469 1141.98,235.596 1142.55,234.277 1143.12,234.116 1143.69,233.087 1144.25,234.199 1144.82,236.24 1145.39,235.111 1145.96,236.612 1146.53,238.52 1147.1,236.919 1147.66,235.648 1148.23,238.413 1148.8,237.984 1149.37,237.593 1149.94,239.476 1150.51,235.745 1151.07,236.222 1151.64,234.947 1152.21,235.588 1152.78,235.395 1153.35,235.115 1153.92,234.902 1154.48,234.657 1155.05,234.188 1155.62,234.049 1156.19,234.907 1156.76,235.737 1157.33,234.419 1157.89,234.098 1158.46,233.784 1159.03,233.851 1159.6,232.568 1160.17,230.535 1160.74,230.693 1161.3,228.881 1161.87,232.055 1162.44,233.118 1163.01,232.762 1163.58,230.606 1164.15,230.284 1164.71,230.524 1165.28,230.514 1165.85,231.552 1166.42,230.557 1166.99,230.448 1167.56,229.438 1168.12,229.657 1168.69,230.798 1169.26,230.754 1169.83,231.888 1170.4,231.847 1170.97,230.733 1171.53,231.625 1172.1,232.541 1172.67,233.511 1173.24,229.213 1173.81,230.355 1174.38,232.475 1174.94,231.387 1175.51,230.366 1176.08,230.405 1176.65,229.976 1177.22,230.997 1177.79,233.136 1178.35,233.212 1178.92,230.899 1179.49,231.901 1180.06,232.04 1180.63,230.83 1181.2,230.124 1181.76,229.213 1182.33,228.269 1182.9,229.512 1183.47,230.73 1184.04,229.136 1184.61,229.523 1185.17,231.925 1185.74,233.066 1186.31,233.08 1186.88,232.023 1187.45,230.043 1188.02,229.256 1188.58,229.4 1189.15,231.667 1189.72,233.692 1190.29,233.478 1190.86,233.388 1191.43,233.305 1192,232.151 1192.56,231.217 1193.13,230.401 1193.7,230.51 1194.27,232.771 1194.84,232.707 1195.41,229.742 1195.97,233.245 1196.54,233.257 1197.11,233.23 1197.68,233.146 1198.25,233.961 1198.82,232.759 1199.38,232.866 1199.95,230.773 1200.52,228.713 1201.09,228.994 1201.66,229.056 1202.23,231.273 1202.79,230.231 1203.36,231.152 1203.93,230.252 1204.5,232.565 1205.07,232.559 1205.64,231.651 1206.2,231.787 1206.77,232.045 1207.34,232.97 1207.91,234.195 1208.48,237.141 1209.05,234.612 1209.61,236.593 1210.18,238.044 1210.75,237.627 1211.32,235.242 1211.89,235.949 1212.46,236.872 1213.02,238.494 1213.59,237.002 1214.16,237.89 1214.73,237.398 1215.3,236.78 1215.87,236.506 1216.43,235.906 1217,233.418 1217.57,232.333 1218.14,233.273 1218.71,231.186 1219.28,231.017 1219.84,234.286 1220.41,234.114 1220.98,232.933 1221.55,232.791 1222.12,232.782 1222.69,230.09 1223.25,230.062 1223.82,230.106 1224.39,229.945 1224.96,229.881 1225.53,223.988 1226.1,223.623 1226.66,221.26 1227.23,222.056 1227.8,225.771 1228.37,225.254 1228.94,226.827 1229.51,228.313 1230.07,228.688 1230.64,229.964 1231.21,230.268 1231.78,231.515 1232.35,230.267 1232.92,230.309 1233.48,230.489 1234.05,231.787 1234.62,232.71 1235.19,232.618 1235.76,230.545 1236.33,230.404 1236.89,230.487 1237.46,229.364 1238.03,229.865 1238.6,232.035 1239.17,229.29 1239.74,230.369 1240.3,229.531 1240.87,230.72 1241.44,231.122 1242.01,230.346 1242.58,230.657 1243.15,232.755 1243.71,232.775 1244.28,230.766 1244.85,232.13 1245.42,235.382 1245.99,234.111 1246.56,235.996 1247.12,238.055 1247.69,237.782 1248.26,238.693 1248.83,238.213 1249.4,238.692 1249.97,239.045 1250.53,238.698 1251.1,238.353 1251.67,240.097 1252.24,238.717 1252.81,237.306 1253.38,234.669 1253.94,233.549 1254.51,232.456 1255.08,232.221 1255.65,231.26 1256.22,230.384 1256.79,230.308 1257.35,230.53 1257.92,228.786 1258.49,227.885 1259.06,228.817 1259.63,228.888 1260.2,229.008 1260.76,229.184 1261.33,228.368 1261.9,228.488 1262.47,229.815 1263.04,230.118 1263.61,232.305 1264.18,232.317 1264.74,233.472 1265.31,235.435 1265.88,236.326 1266.45,237.026 1267.02,234.737 1267.59,232.55 1268.15,231.535 1268.72,230.743 1269.29,231.817 1269.86,234.03 1270.43,236.034 1271,233.879 1271.56,232.92 1272.13,230.734 1272.7,231.696 1273.27,230.808 1273.84,230.907 1274.41,231.012 1274.97,232.031 1275.54,231.025 1276.11,231.177 1276.68,232.45 1277.25,231.411 1277.82,231.64 1278.38,232.719 1278.95,232.61 1279.52,231.645 1280.09,233.537 1280.66,234.475 1281.23,234.309 1281.79,233.131 1282.36,231.208 1282.93,232.067 1283.5,231.233 1284.07,231.374 1284.64,232.526 1285.2,230.572 1285.77,230.491 1286.34,230.686 1286.91,231.849 1287.48,231.113 1288.05,231.227 1288.61,230.218 1289.18,231.335 1289.75,231.571 1290.32,230.633 1290.89,233.897 1291.46,234.765 1292.02,234.427 1292.59,236.552 1293.16,237.38 1293.73,237.097 1294.3,236.903 1294.87,239.454 1295.43,237.856 1296,237.246 1296.57,234.703 1297.14,233.45 1297.71,231.207 1298.28,230.318 1298.84,229.466 1299.41,228.669 1299.98,227.833 1300.55,230.303 1301.12,230.448 1301.69,229.763 1302.25,229.14 1302.82,228.361 1303.39,228.654 1303.96,231.192 1304.53,231.026 1305.1,232.283 1305.66,233.299 1306.23,232.172 1306.8,230.318 1307.37,231.643 1307.94,235.78 1308.51,233.69 1309.07,233.355 1309.64,232.38 1310.21,233.367 1310.78,230.249 1311.35,229.254 1311.92,227.474 1312.48,226.882 1313.05,228.206 1313.62,231.561 1314.19,231.438 1314.76,231.445 1315.33,229.328 1315.89,230.752 1316.46,232.167 1317.03,232.171 1317.6,231.281 1318.17,231.368 1318.74,232.477 1319.3,233.259 1319.87,233.145 1320.44,233.11 1321.01,231.97 1321.58,229.202 1322.15,229.539 1322.71,227.634 1323.28,229.065 1323.85,230.471 1324.42,233.699 1324.99,231.667 1325.56,232.675 1326.12,232.732 1326.69,233.792 1327.26,233.611 1327.83,230.711 1328.4,231.9 1328.97,236.041 1329.53,237.788 1330.1,236.335 1330.67,235.946 1331.24,235.741 1331.81,234.659 1332.38,236.611 1332.94,237.304 1333.51,236.811 1334.08,239.623 1334.65,238.956 1335.22,237.385 1335.79,235.897 1336.36,233.341 1336.92,233.223 1337.49,233.175 1338.06,233.912 1338.63,235.703 1339.2,236.402 1339.77,235.087 1340.33,232.684 1340.9,231.556 1341.47,230.555 1342.04,230.551 1342.61,228.63 1343.18,228.798 1343.74,232.073 1344.31,231.971 1344.88,230.015 1345.45,231.134 1346.02,232.061 1346.59,232.045 1347.15,230.977 1347.72,230.384 1348.29,229.177 1348.86,229.248 1349.43,230.398 1350,231.745 1350.56,231.634 1351.13,232.852 1351.7,233.914 1352.27,233.821 1352.84,232.704 1353.41,233.769 1353.97,234.854 1354.54,234.561 1355.11,235.513 1355.68,235.162 1356.25,236.974 1356.82,237.591 1357.38,236.268 1357.95,235.95 1358.52,235.553 1359.09,233.452 1359.66,232.256 1360.23,231.197 1360.79,230.184 1361.36,231.418 1361.93,231.618 1362.5,231.592 1363.07,231.697 1363.64,231.708 1364.2,229.601 1364.77,229.797 1365.34,226.976 1365.91,227.216 1366.48,227.549 1367.05,227.052 1367.61,226.36 1368.18,228.985 1368.75,230.196 1369.32,230.15 1369.89,232.486 1370.46,232.734 1371.02,231.738 1371.59,231.788 1372.16,230.752 1372.73,230.536 1373.3,228.577 1373.87,227.842 1374.43,225.946 1375,225.614 1375.57,224.023 1376.14,225.737 1376.71,227.236 1377.28,225.463 1377.84,224.94 1378.41,225.554 1378.98,223.008 1379.55,223.66 1380.12,221.357 1380.69,222.959 1381.25,225.884 1381.82,227.47 1382.39,227.062 1382.96,228.408 1383.53,228.845 1384.1,232.529 1384.66,234.492 1385.23,234.136 1385.8,232.192 1386.37,230.214 1386.94,231.475 1387.51,232.788 1388.07,231.672 1388.64,231.871 1389.21,232.126 1389.78,232.35 1390.35,231.568 1390.92,230.744 1391.48,229.858 1392.05,230.881 1392.62,232.313 1393.19,232.306 1393.76,232.42 1394.33,237.651 1394.89,237.448 1395.46,236.067 1396.03,236.734 1396.6,235.611 1397.17,236.607 1397.74,235.431 1398.3,235.376 1398.87,235.335 1399.44,234.466 1400.01,232.38 1400.58,234.497 1401.15,234.61 1401.71,236.641 1402.28,239.415 1402.85,238.798 1403.42,238.239 1403.99,236.978 1404.56,235.862 1405.13,235.713 1405.69,236.495 1406.26,233.24 1406.83,233.358 1407.4,236.458 1407.97,236.115 1408.54,235.937 1409.1,233.56 1409.67,235.434 1410.24,235.243 1410.81,236.148 1411.38,238.074 1411.95,237.511 1412.51,234.922 1413.08,235.98 1413.65,236.815 1414.22,235.617 1414.79,235.185 1415.36,237.026 1415.92,236.927 1416.49,236.394 1417.06,234.059 1417.63,234.853 1418.2,233.577 1418.77,231.346 1419.33,230.559 1419.9,232.682 1420.47,233.437 1421.04,233.091 1421.61,231.151 1422.18,232.496 1422.74,235.337 1423.31,233.029 1423.88,230.739 1424.45,229.436 1425.02,230.458 1425.59,232.584 1426.15,232.491 1426.72,232.278 1427.29,231.264 1427.86,233.465 1428.43,233.229 1429,233.174 1429.56,232.964 1430.13,231.972 1430.7,230.035 1431.27,231.128 1431.84,231.285 1432.41,231.302 1432.97,231.259 1433.54,232.416 1434.11,233.593 1434.68,234.539 1435.25,235.318 1435.82,235.12 1436.38,233.915 1436.95,233.812 1437.52,233.538 1438.09,233.398 1438.66,233.322 1439.23,233.01 1439.79,232.923 1440.36,234.845 1440.93,233.532 1441.5,233.394 1442.07,233.572 1442.64,233.321 1443.2,235.326 1443.77,234.871 1444.34,234.551 1444.91,234.443 1445.48,230.139 1446.05,230.227 1446.61,228.598 1447.18,228.726 1447.75,228.845 1448.32,229.078 1448.89,227.202 1449.46,229.386 1450.02,230.485 1450.59,231.544 1451.16,228.395 1451.73,228.492 1452.3,228.775 1452.87,230.027 1453.43,231.124 1454,230.167 1454.57,230.211 1455.14,230.128 1455.71,230.158 1456.28,230.517 1456.84,229.471 1457.41,231.57 1457.98,230.523 1458.55,231.686 1459.12,231.841 1459.69,231.827 1460.25,231.94 1460.82,231.961 1461.39,231.819 1461.96,231.842 1462.53,232.797 1463.1,231.83 1463.66,231.941 1464.23,232.996 1464.8,232.854 1465.37,234.09 1465.94,237.159 1466.51,235.699 1467.07,236.443 1467.64,233.191 1468.21,232.93 1468.78,231.695 1469.35,231.74 1469.92,232.833 1470.48,231.856 1471.05,232.749 1471.62,232.832 1472.19,232.81 1472.76,234.887 1473.33,234.62 1473.89,235.568 1474.46,237.465 1475.03,237.169 1475.6,236.78 1476.17,237.536 1476.74,233.016 1477.31,232.792 1477.87,232.632 1478.44,232.577 1479.01,233.371 1479.58,234.243 1480.15,234.035 1480.72,233.708 1481.28,231.455 1481.85,232.269 1482.42,231.137 1482.99,230.982 1483.56,228.91 1484.13,228.207 1484.69,229.353 1485.26,229.296 1485.83,230.624 1486.4,227.779 1486.97,226.848 1487.54,228.309 1488.1,228.613 1488.67,227.864 1489.24,227.14 1489.81,225.56 1490.38,226.251 1490.95,225.499 1491.51,226.021 1492.08,226.487 1492.65,228.83 1493.22,230.266 1493.79,230.374 1494.36,230.693 1494.92,229.933 1495.49,231.275 1496.06,232.429 1496.63,233.439 1497.2,232.28 1497.77,233.556 1498.33,235.449 1498.9,237.027 1499.47,238.97 1500.04,238.576 1500.61,240.19 1501.18,236.638 1501.74,234.619 1502.31,235.448 1502.88,234.97 1503.45,233.865 1504.02,234.615 1504.59,233.704 1505.15,233.474 1505.72,233.66 1506.29,233.609 1506.86,229.325 1507.43,229.329 1508,231.659 1508.56,229.601 1509.13,229.842 1509.7,229.117 1510.27,229.476 1510.84,227.596 1511.41,228.128 1511.97,229.372 1512.54,230.609 1513.11,229.595 1513.68,230.637 1514.25,230.953 1514.82,230.113 1515.38,231.319 1515.95,232.274 1516.52,231.448 1517.09,232.44 1517.66,233.557 1518.23,233.695 1518.79,233.69 1519.36,233.415 1519.93,235.206 1520.5,234.984 1521.07,232.813 1521.64,232.597 1522.2,232.593 1522.77,232.587 1523.34,231.626 1523.91,231.62 1524.48,230.634 1525.05,230.66 1525.61,232.823 1526.18,233.948 1526.75,236.006 1527.32,236.022 1527.89,236.782 1528.46,237.446 1529.02,237.318 1529.59,236.773 1530.16,235.352 1530.73,233.065 1531.3,231.915 1531.87,232.833 1532.43,232.71 1533,233.424 1533.57,231.15 1534.14,231.269 1534.71,230.25 1535.28,230.331 1535.84,228.181 1536.41,229.477 1536.98,230.014 1537.55,230.417 1538.12,230.543 1538.69,231.684 1539.25,231.686 1539.82,230.62 1540.39,231.537 1540.96,230.481 1541.53,232.516 1542.1,230.248 1542.66,232.397 1543.23,233.383 1543.8,232.298 1544.37,232.206 1544.94,232.103 1545.51,230.95 1546.08,229.114 1546.64,230.313 1547.21,228.538 1547.78,228.733 1548.35,226.991 1548.92,228.401 1549.49,229.738 1550.05,230.997 1550.62,231.09 1551.19,233.278 1551.76,232.414 1552.33,232.532 1552.9,233.603 1553.46,233.521 1554.03,234.362 1554.6,233.213 1555.17,233.216 1555.74,231.012 1556.31,231.115 1556.87,230.052 1557.44,229.204 1558.01,231.395 1558.58,232.452 1559.15,233.495 1559.72,233.414 1560.28,234.267 1560.85,235.165 1561.42,233.037 1561.99,231.897 1562.56,230.127 1563.13,231.267 1563.69,230.301 1564.26,231.447 1564.83,231.552 1565.4,231.678 1565.97,232.669 1566.54,231.711 1567.1,234.775 1567.67,234.703 1568.24,234.891 1568.81,232.622 1569.38,232.521 1569.95,233.713 1570.51,232.58 1571.08,230.456 1571.65,232.524 1572.22,231.402 1572.79,231.405 1573.36,232.379 1573.92,233.301 1574.49,229.317 1575.06,227.404 1575.63,227.583 1576.2,227.898 1576.77,228.124 1577.33,230.278 1577.9,231.369 1578.47,231.429 1579.04,231.631 1579.61,232.769 1580.18,233.897 1580.74,233.672 1581.31,233.596 1581.88,235.784 1582.45,235.489 1583.02,235.133 1583.59,233.882 1584.15,233.468 1584.72,234.378 1585.29,235.345 1585.86,234.184 1586.43,235.156 1587,236.076 1587.56,235.753 1588.13,234.231 1588.7,234.142 1589.27,232.955 1589.84,234.139 1590.41,231.823 1590.97,231.613 1591.54,229.625 1592.11,230.889 1592.68,231.22 1593.25,231.387 1593.82,231.453 1594.38,232.592 1594.95,232.644 1595.52,232.806 1596.09,231.697 1596.66,233.019 1597.23,232.049 1597.79,232.034 1598.36,231.915 1598.93,232.788 1599.5,233.694 1600.07,232.638 1600.64,233.713 1601.2,236.726 1601.77,236.112 1602.34,235.862 1602.91,235.865 1603.48,233.356 1604.05,233.108 1604.61,232.85 1605.18,232.675 1605.75,233.471 1606.32,234.44 1606.89,234.026 1607.46,234.848 1608.02,235.556 1608.59,236.159 1609.16,236.987 1609.73,236.569 1610.3,235.24 1610.87,231.875 1611.43,229.787 1612,230.089 1612.57,230.365 1613.14,230.31 1613.71,230.553 1614.28,231.791 1614.84,231.724 1615.41,231.909 1615.98,231.933 1616.55,232.847 1617.12,232.642 1617.69,231.436 1618.26,231.417 1618.82,232.641 1619.39,232.536 1619.96,232.56 1620.53,230.495 1621.1,232.5 1621.67,232.496 1622.23,233.413 1622.8,233.156 1623.37,236.096 1623.94,234.725 1624.51,233.446 1625.08,234.404 1625.64,233.46 1626.21,232.246 1626.78,232.43 1627.35,231.205 1627.92,232.415 1628.49,230.32 1629.05,229.442 1629.62,229.611 1630.19,232.754 1630.76,228.533 1631.33,229.88 1631.9,227.782 1632.46,228.156 1633.03,228.494 1633.6,229.656 1634.17,229.974 1634.74,230.141 1635.31,230.382 1635.87,229.63 1636.44,230.752 1637.01,230.025 1637.58,231.234 1638.15,233.582 1638.72,232.601 1639.28,233.688 1639.85,233.581 1640.42,233.46 1640.99,234.489 1641.56,234.243 1642.13,234.138 1642.69,234.193 1643.26,233.855 1643.83,233.849 1644.4,232.651 1644.97,229.731 1645.54,229.799 1646.1,226.616 1646.67,228.171 1647.24,229.53 1647.81,227.85 1648.38,231.312 1648.95,232.436 1649.51,232.595 1650.08,231.576 1650.65,230.578 1651.22,228.681 1651.79,229.075 1652.36,229.348 1652.92,230.878 1653.49,230.167 1654.06,228.373 1654.63,229.831 1655.2,230.106 1655.77,231.357 1656.33,230.5 1656.9,230.694 1657.47,231.2 1658.04,232.397 1658.61,231.127 1659.18,232.151 1659.74,232.112 1660.31,230.997 1660.88,232.184 1661.45,233.274 1662.02,234.427 1662.59,234.312 1663.15,236.243 1663.72,236.018 1664.29,236.982 1664.86,237.508 1665.43,234.95 1666,236.618 1666.56,236.296 1667.13,235.847 1667.7,233.471 1668.27,233.347 1668.84,234.182 1669.41,235.014 1669.97,234.579 1670.54,234.204 1671.11,233.122 1671.68,230.969 1672.25,232.967 1672.82,232.759 1673.38,232.663 1673.95,231.53 1674.52,230.618 1675.09,230.738 1675.66,229.915 1676.23,231.239 1676.79,230.556 1677.36,229.793 1677.93,229.837 1678.5,229.935 1679.07,231.251 1679.64,231.282 1680.2,229.171 1680.77,228.445 1681.34,229.593 1681.91,228.811 1682.48,230.044 1683.05,230.266 1683.61,232.299 1684.18,233.495 1684.75,233.283 1685.32,233.337 1685.89,230.293 1686.46,230.416 1687.02,232.311 1687.59,235.366 1688.16,235.169 1688.73,235.012 1689.3,236.765 1689.87,237.261 1690.44,233.973 1691,232.903 1691.57,231.968 1692.14,232.948 1692.71,233.983 1693.28,234.96 1693.85,233.951 1694.41,233.934 1694.98,233.671 1695.55,233.649 1696.12,233.52 1696.69,234.694 1697.26,235.457 1697.82,237.41 1698.39,238.146 1698.96,234.657 1699.53,235.667 1700.1,233.195 1700.67,231.036 1701.23,230.031 1701.8,232.262 1702.37,233.296 1702.94,233.016 1703.51,235.999 1704.08,233.718 1704.64,235.562 1705.21,234.4 1705.78,231.148 1706.35,229.995 1706.92,228.093 1707.49,228.073 1708.05,229.454 1708.62,226.551 1709.19,227.674 1709.76,227.748 1710.33,228.793 1710.9,228.884 1711.46,229.078 1712.03,232.088 1712.6,231.966 1713.17,233.087 1713.74,234.828 1714.31,233.637 1714.87,231.671 1715.44,233.835 1716.01,235.766 1716.58,235.626 1717.15,235.261 1717.72,237.847 1718.28,237.435 1718.85,238.98 1719.42,239.418 1719.99,237.975 1720.56,237.748 1721.13,236.213 1721.69,234.788 1722.26,234.415 1722.83,234.179 1723.4,231.885 1723.97,233.003 1724.54,233.914 1725.1,232.891 1725.67,232.75 1726.24,230.53 1726.81,231.377 1727.38,232.505 1727.95,232.388 1728.51,232.014 1729.08,230.975 1729.65,231.026 1730.22,230.135 1730.79,231.435 1731.36,231.299 1731.92,230.161 1732.49,229.185 1733.06,231.428 1733.63,231.629 1734.2,232.928 1734.77,234.841 1735.33,236.481 1735.9,235.125 1736.47,235.59 1737.04,234.414 1737.61,233.083 1738.18,233.044 1738.74,234.983 1739.31,234.859 1739.88,233.566 1740.45,232.197 1741.02,230.153 1741.59,231.419 1742.15,232.526 1742.72,232.26 1743.29,232.114 1743.86,229.891 1744.43,231.011 1745,231.003 1745.56,233.168 1746.13,231.932 1746.7,231.117 1747.27,231.147 1747.84,232.149 1748.41,231.017 1748.97,229.048 1749.54,229.996 1750.11,230.023 1750.68,228.977 1751.25,230.116 1751.82,230.242 1752.38,229.245 1752.95,228.448 1753.52,228.801 1754.09,228.844 1754.66,228.022 1755.23,227.142 1755.79,228.376 1756.36,228.274 1756.93,229.563 1757.5,228.624 1758.07,228.931 1758.64,229.167 1759.21,229.355 1759.77,232.315 1760.34,230.174 1760.91,229.176 1761.48,229.538 1762.05,228.873 1762.62,230.216 1763.18,229.283 1763.75,229.532 1764.32,228.847 1764.89,229.132 1765.46,232.288 1766.03,230.392 1766.59,230.67 1767.16,232.852 1767.73,232.832 1768.3,233.001 1768.87,233.06 1769.44,235.107 1770,232.739 1770.57,233.686 1771.14,231.623 1771.71,231.624 1772.28,232.753 1772.85,233.794 1773.41,234.71 1773.98,234.379 1774.55,232.344 1775.12,234.399 1775.69,236.619 1776.26,237.502 1776.82,236.266 1777.39,234.974 1777.96,236.71 1778.53,234.246 1779.1,232.848 1779.67,233.812 1780.23,232.993 1780.8,231.758 1781.37,230.85 1781.94,230.933 1782.51,229.966 1783.08,230.028 1783.64,230.191 1784.21,231.396 1784.78,231.408 1785.35,229.343 1785.92,230.689 1786.49,231.707 1787.05,232.783 1787.62,232.686 1788.19,232.566 1788.76,234.552 1789.33,234.441 1789.9,236.411 1790.46,234.147 1791.03,235.155 1791.6,234.734 1792.17,235.729 1792.74,235.653 1793.31,236.42 1793.87,235.063 1794.44,236.918 1795.01,236.312 1795.58,237.006 1796.15,237.589 1796.72,236.242 1797.28,235.912 1797.85,235.288 1798.42,233.89 1798.99,232.453 1799.56,233.567 1800.13,232.291 1800.69,233.406 1801.26,233.006 1801.83,231.859 1802.4,231.665 1802.97,227.514 1803.54,227.875 1804.1,227.986 1804.67,227.265 1805.24,229.591 1805.81,229.909 1806.38,227.932 1806.95,232.203 1807.51,232.153 1808.08,232.086 1808.65,230.93 1809.22,231.117 1809.79,233.339 1810.36,233.481 1810.92,229.261 1811.49,228.477 1812.06,227.68 1812.63,226.868 1813.2,228.378 1813.77,230.612 1814.33,232.608 1814.9,229.622 1815.47,230.778 1816.04,226.969 1816.61,225.208 1817.18,224.817 1817.74,226.31 1818.31,225.691 1818.88,226.195 1819.45,226.684 1820.02,227.304 1820.59,226.7 1821.15,226.164 1821.72,226.61 1822.29,229.218 1822.86,230.459 1823.43,231.669 1824,231.802 1824.56,233.905 1825.13,233.822 1825.7,233.678 1826.27,234.758 1826.84,233.749 1827.41,232.748 1827.97,233.575 1828.54,234.522 1829.11,234.361 1829.68,236.33 1830.25,236.117 1830.82,235.875 1831.39,236.845 1831.95,237.655 1832.52,236.039 1833.09,234.829 1833.66,234.51 1834.23,232.325 1834.8,232.618 1835.36,230.485 1835.93,230.728 1836.5,230.887 1837.07,232.255 1837.64,232.268 1838.21,232.248 1838.77,233.118 1839.34,229.877 1839.91,229.139 1840.48,231.5 1841.05,232.455 1841.62,235.68 1842.18,237.409 1842.75,238.05 1843.32,239.506 1843.89,240.13 1844.46,237.467 1845.03,235.924 1845.59,235.834 1846.16,236.553 1846.73,236.377 1847.3,235.059 1847.87,237.06 1848.44,235.586 1849,234.233 1849.57,234.151 1850.14,231.902 1850.71,232.192 1851.28,229.972 1851.85,227.065 1852.41,227.279 1852.98,227.571 1853.55,227.947 1854.12,229.207 1854.69,230.484 1855.26,231.602 1855.82,231.559 1856.39,230.66 1856.96,229.62 1857.53,229.562 1858.1,228.817 1858.67,229.225 1859.23,230.318 1859.8,233.501 1860.37,233.373 1860.94,233.357 1861.51,232.055 1862.08,230.147 1862.64,230.187 1863.21,231.428 1863.78,231.329 1864.35,231.349 1864.92,230.332 1865.49,229.497 1866.05,229.431 1866.62,231.743 1867.19,231.813 1867.76,233.822 1868.33,235.77 1868.9,236.444 1869.46,237.332 1870.03,234.865 1870.6,231.504 1871.17,231.62 1871.74,234.87 1872.31,234.778 1872.87,234.481 1873.44,235.28 1874.01,234.901 1874.58,233.631 1875.15,231.387 1875.72,231.507 1876.28,230.312 1876.85,231.222 1877.42,229.385 1877.99,230.677 1878.56,230.796 1879.13,230.646 1879.69,232.751 1880.26,233.667 1880.83,233.546 1881.4,234.38 1881.97,234.29 1882.54,236.226 1883.1,238.947 1883.67,238.427 1884.24,238.794 1884.81,238.105 1885.38,237.667 1885.95,237.282 1886.51,235.823 1887.08,234.467 1887.65,235.228 1888.22,237.174 1888.79,236.648 1889.36,233.392 1889.92,233.183 1890.49,233.072 1891.06,234.581 1891.63,232.133 1892.2,231.974 1892.77,230.804 1893.33,232.763 1893.9,233.373 1894.47,232.078 1895.04,228.974 1895.61,230.171 1896.18,230.307 1896.74,229.297 1897.31,228.576 1897.88,228.824 1898.45,228.991 1899.02,230.151 1899.59,230.272 1900.16,230.191 1900.72,230.186 1901.29,230.132 1901.86,229.371 1902.43,229.573 1903,228.706 1903.57,227.838 1904.13,226.025 1904.7,227.536 1905.27,226.772 1905.84,227.123 1906.41,229.591 1906.98,229.776 1907.54,229.001 1908.11,228.28 1908.68,227.726 1909.25,228.18 1909.82,230.377 1910.39,231.504 1910.95,232.613 1911.52,233.843 1912.09,235.028 1912.66,232.807 1913.23,232.665 1913.8,230.761 1914.36,233.001 1914.93,231.97 1915.5,230.777 1916.07,230.877 1916.64,229.987 1917.21,232.497 1917.77,232.393 1918.34,231.443 1918.91,230.505 1919.48,230.592 1920.05,229.789 1920.62,230.969 1921.18,231.164 1921.75,231.108 1922.32,231.264 1922.89,230.339 1923.46,229.424 1924.03,228.662 1924.59,226.947 1925.16,228.43 1925.73,229.072 1926.3,229.063 1926.87,227.974 1927.44,227.234 1928,227.615 1928.57,228.002 1929.14,228.403 1929.71,228.671 1930.28,230.352 1930.85,229.188 1931.41,229.466 1931.98,230.717 1932.55,230.963 1933.12,231.856 1933.69,231.952 1934.26,231.035 1934.82,231.311 1935.39,232.538 1935.96,230.653 1936.53,231.825 1937.1,233.086 1937.67,233.236 1938.23,233.393 1938.8,235.619 1939.37,235.616 1939.94,235.416 1940.51,233.392 1941.08,232.538 1941.64,232.485 1942.21,232.591 1942.78,233.797 1943.35,233.024 1943.92,234.288 1944.49,234.165 1945.05,234.266 1945.62,231.971 1946.19,230.033 1946.76,231.279 1947.33,234.586 1947.9,233.497 1948.46,232.439 1949.03,232.616 1949.6,232.502 1950.17,233.653 1950.74,233.564 1951.31,235.728 1951.87,234.573 1952.44,235.652 1953.01,236.577 1953.58,236.305 1954.15,237.086 1954.72,234.906 1955.28,234.711 1955.85,233.633 1956.42,232.433 1956.99,233.641 1957.56,234.801 1958.13,233.747 1958.69,232.805 1959.26,231.623 1959.83,233.635 1960.4,232.577 1960.97,232.334 1961.54,231.317 1962.1,230.286 1962.67,230.313 1963.24,231.158 1963.81,231.238 1964.38,231.288 1964.95,231.403 1965.51,233.379 1966.08,233.29 1966.65,233.135 1967.22,235.243 1967.79,236.071 1968.36,235.753 1968.92,236.698 1969.49,234.395 1970.06,234.194 1970.63,231.967 1971.2,232.047 1971.77,232.086 1972.34,229.868 1972.9,227.784 1973.47,226.917 1974.04,228.168 1974.61,227.395 1975.18,226.6 1975.75,228.066 1976.31,231.462 1976.88,231.592 1977.45,230.669 1978.02,230.974 1978.59,229.998 1979.16,230.299 1979.72,232.279 1980.29,232.254 1980.86,231.609 1981.43,228.616 1982,228.785 1982.57,230.263 1983.13,230.612 1983.7,231.698 1984.27,232.921 1984.84,232.893 1985.41,231.721 1985.98,232.642 1986.54,231.818 1987.11,233.854 1987.68,234.902 1988.25,234.824 1988.82,234.817 1989.39,234.611 1989.95,235.896 1990.52,235.666 1991.09,232.268 1991.66,233.147 1992.23,232.006 1992.8,231.743 1993.36,228.812 1993.93,231.009 1994.5,231.991 1995.07,230.051 1995.64,230.351 1996.21,231.351 1996.77,230.28 1997.34,227.426 1997.91,227.733 1998.48,229.173 1999.05,230.684 1999.62,229.688 2000.18,231.961 2000.75,232.054 2001.32,233.372 2001.89,235.387 2002.46,234.188 2003.03,236.304 2003.59,237.37 2004.16,237.088 2004.73,237.808 2005.3,239.632 2005.87,238.281 2006.44,238.887 2007,238.428 2007.57,237.917 2008.14,238.729 2008.71,237.409 2009.28,235.088 2009.85,233.917 2010.41,233.794 2010.98,233.648 2011.55,232.487 2012.12,232.687 2012.69,232.731 2013.26,232.709 2013.82,231.776 2014.39,232.905 2014.96,234.709 2015.53,234.42 2016.1,232.275 2016.67,231.074 2017.23,232.162 2017.8,234.378 2018.37,234.292 2018.94,235.241 2019.51,236.042 2020.08,236.739 2020.64,235.297 2021.21,236.052 2021.78,235.748 2022.35,235.39 2022.92,234.872 2023.49,233.585 2024.05,232.322 2024.62,233.187 2025.19,233.048 2025.76,233.772 2026.33,231.529 2026.9,232.628 2027.46,232.671 2028.03,230.534 2028.6,230.563 2029.17,231.633 2029.74,230.586 2030.31,229.487 2030.87,229.794 2031.44,229.761 2032.01,231.762 2032.58,232.787 2033.15,234.796 2033.72,234.645 2034.28,235.236 2034.85,235.063 2035.42,234.758 2035.99,233.265 2036.56,234.376 2037.13,233.005 2037.69,228.788 2038.26,229.207 2038.83,228.408 2039.4,226.743 2039.97,227.287 2040.54,226.498 2041.11,226.713 2041.67,225.934 2042.24,226.467 2042.81,227.847 2043.38,229.195 2043.95,230.341 2044.52,231.422 2045.08,232.507 2045.65,232.409 2046.22,231.322 2046.79,233.329 2047.36,233.215 2047.93,233.092 2048.49,228.984 2049.06,230.32 2049.63,229.388 2050.2,231.677 2050.77,229.845 2051.34,230.181 2051.9,231.481 2052.47,232.572 2053.04,230.554 2053.61,231.618 2054.18,232.887 2054.75,232.763 2055.31,232.627 2055.88,231.649 2056.45,232.676 2057.02,232.571 2057.59,233.597 2058.16,234.589 2058.72,234.518 2059.29,234.56 2059.86,234.535 2060.43,234.47 2061,234.322 2061.57,232.011 2062.13,232.076 2062.7,231.25 2063.27,233.436 2063.84,233.476 2064.41,233.364 2064.98,234.269 2065.54,233.256 2066.11,231.38 2066.68,231.58 2067.25,231.63 2067.82,231.69 2068.39,231.686 2068.95,230.799 2069.52,229.854 2070.09,230.014 2070.66,233.277 2071.23,232.172 2071.8,231.023 2072.36,231.256 2072.93,232.181 2073.5,232.264 2074.07,231.436 2074.64,233.537 2075.21,230.571 2075.77,230.762 2076.34,228.787 2076.91,230.222 2077.48,230.387 2078.05,231.72 2078.62,231.906 2079.18,231.824 2079.75,230.871 2080.32,231.926 2080.89,232.036 2081.46,232.077 2082.03,235.188 2082.59,235.871 2083.16,235.802 2083.73,235.675 2084.3,235.494 2084.87,235.312 2085.44,235.093 2086,235.822 2086.57,233.383 2087.14,232.156 2087.71,232.301 2088.28,232.149 2088.85,230.913 2089.41,229.821 2089.98,229.026 2090.55,229.424 2091.12,230.622 2091.69,228.747 2092.26,230.129 2092.82,229.473 2093.39,230.858 2093.96,230.824 2094.53,231.918 2095.1,230.73 2095.67,231.914 2096.23,233.914 2096.8,232.592 2097.37,233.663 2097.94,233.651 2098.51,234.624 2099.08,234.43 2099.64,234.19 2100.21,234.204 2100.78,235.117 2101.35,235.907 2101.92,236.881 2102.49,236.513 2103.05,233.941 2103.62,233.592 2104.19,233.503 2104.76,236.371 2105.33,236.18 2105.9,234.936 2106.46,233.549 2107.03,232.519 2107.6,234.325 2108.17,234.151 2108.74,233.735 2109.31,234.665 2109.87,235.7 2110.44,236.417 2111.01,236.103 2111.58,234.734 2112.15,233.344 2112.72,233.147 2113.29,231.984 2113.85,232.926 2114.42,230.677 2114.99,233.764 2115.56,230.62 2116.13,229.605 2116.7,229.694 2117.26,229.677 2117.83,230.751 2118.4,230.794 2118.97,230.928 2119.54,230.918 2120.11,231.108 2120.67,231.059 2121.24,232.208 2121.81,231.017 2122.38,229.971 2122.95,232.071 2123.52,229.917 2124.08,230.975 2124.65,230.88 2125.22,229.812 2125.79,229.137 2126.36,229.517 2126.93,228.819 2127.49,231.006 2128.06,227.869 2128.63,229.26 2129.2,229.328 2129.77,232.45 2130.34,233.538 2130.9,233.453 2131.47,234.23 2132.04,235.087 2132.61,235.031 2133.18,235.888 2133.75,237.633 2134.31,237.033 2134.88,237.807 2135.45,237.45 2136.02,236.966 2136.59,235.54 2137.16,234.358 2137.72,233.215 2138.29,232.076 2138.86,228.739 2139.43,227.906 2140,227.268 2140.57,228.643 2141.13,229.835 2141.7,229.966 2142.27,229.981 2142.84,231.359 2143.41,231.324 2143.98,230.157 2144.54,234.518 2145.11,232.16 2145.68,231.145 2146.25,230.322 2146.82,231.482 2147.39,230.594 2147.95,229.64 2148.52,229.799 2149.09,230.934 2149.66,230.819 2150.23,232.007 2150.8,231.983 2151.36,233.906 2151.93,232.446 2152.5,232.418 2153.07,233.501 2153.64,234.426 2154.21,234.154 2154.77,232.974 2155.34,230.897 2155.91,231.975 2156.48,230.02 2157.05,229.918 2157.62,227.979 2158.18,228.162 2158.75,228.404 2159.32,229.815 2159.89,228.887 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip620)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip620)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip620)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ¬± 0.017\n  with uncertainty of ¬± 0.001054687129473396\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01639 ¬± (0.00210529, 0.00229976) (MC)\n  95% confidence interval: [-4.02088, -4.01222]) (MC)\n  linear error propagation: -4.01656 ¬± 0.00215737\n  |Œ¥_y| = |0.00146274| (‚â§ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0163949097079135, val_l = 0.004482054534708624, val_u = 0.004173005343418801)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip650\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip651\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip652\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1131.66 2211.02,1131.66 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,943.186 2211.02,943.186 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,754.712 2211.02,754.712 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,566.238 2211.02,566.238 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,377.764 2211.02,377.764 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,189.29 2211.02,189.29 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1131.66 365.751,1131.66 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,943.186 365.751,943.186 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,754.712 365.751,754.712 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,566.238 365.751,566.238 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,377.764 365.751,377.764 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,189.29 365.751,189.29 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M298.909 1117.46 Q295.298 1117.46 293.469 1121.02 Q291.664 1124.56 291.664 1131.69 Q291.664 1138.8 293.469 1142.37 Q295.298 1145.91 298.909 1145.91 Q302.543 1145.91 304.349 1142.37 Q306.177 1138.8 306.177 1131.69 Q306.177 1124.56 304.349 1121.02 Q302.543 1117.46 298.909 1117.46 M298.909 1113.75 Q304.719 1113.75 307.775 1118.36 Q310.853 1122.94 310.853 1131.69 Q310.853 1140.42 307.775 1145.03 Q304.719 1149.61 298.909 1149.61 Q293.099 1149.61 290.02 1145.03 Q286.964 1140.42 286.964 1131.69 Q286.964 1122.94 290.02 1118.36 Q293.099 1113.75 298.909 1113.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M259.557 956.531 L267.196 956.531 L267.196 930.165 L258.886 931.832 L258.886 927.573 L267.15 925.906 L271.826 925.906 L271.826 956.531 L279.465 956.531 L279.465 960.466 L259.557 960.466 L259.557 956.531 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 928.985 Q295.298 928.985 293.469 932.549 Q291.664 936.091 291.664 943.221 Q291.664 950.327 293.469 953.892 Q295.298 957.433 298.909 957.433 Q302.543 957.433 304.349 953.892 Q306.177 950.327 306.177 943.221 Q306.177 936.091 304.349 932.549 Q302.543 928.985 298.909 928.985 M298.909 925.281 Q304.719 925.281 307.775 929.887 Q310.853 934.471 310.853 943.221 Q310.853 951.947 307.775 956.554 Q304.719 961.137 298.909 961.137 Q293.099 961.137 290.02 956.554 Q286.964 951.947 286.964 943.221 Q286.964 934.471 290.02 929.887 Q293.099 925.281 298.909 925.281 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M262.775 768.057 L279.094 768.057 L279.094 771.992 L257.15 771.992 L257.15 768.057 Q259.812 765.302 264.395 760.673 Q269.002 756.02 270.182 754.677 Q272.428 752.154 273.307 750.418 Q274.21 748.659 274.21 746.969 Q274.21 744.214 272.266 742.478 Q270.344 740.742 267.242 740.742 Q265.043 740.742 262.59 741.506 Q260.159 742.27 257.381 743.821 L257.381 739.099 Q260.205 737.964 262.659 737.386 Q265.113 736.807 267.15 736.807 Q272.52 736.807 275.715 739.492 Q278.909 742.177 278.909 746.668 Q278.909 748.798 278.099 750.719 Q277.312 752.617 275.205 755.21 Q274.627 755.881 271.525 759.098 Q268.423 762.293 262.775 768.057 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 740.511 Q295.298 740.511 293.469 744.075 Q291.664 747.617 291.664 754.747 Q291.664 761.853 293.469 765.418 Q295.298 768.96 298.909 768.96 Q302.543 768.96 304.349 765.418 Q306.177 761.853 306.177 754.747 Q306.177 747.617 304.349 744.075 Q302.543 740.511 298.909 740.511 M298.909 736.807 Q304.719 736.807 307.775 741.413 Q310.853 745.997 310.853 754.747 Q310.853 763.473 307.775 768.08 Q304.719 772.663 298.909 772.663 Q293.099 772.663 290.02 768.08 Q286.964 763.473 286.964 754.747 Q286.964 745.997 290.02 741.413 Q293.099 736.807 298.909 736.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M272.914 564.884 Q276.27 565.601 278.145 567.87 Q280.043 570.138 280.043 573.472 Q280.043 578.587 276.525 581.388 Q273.006 584.189 266.525 584.189 Q264.349 584.189 262.034 583.749 Q259.742 583.333 257.289 582.476 L257.289 577.962 Q259.233 579.097 261.548 579.675 Q263.863 580.254 266.386 580.254 Q270.784 580.254 273.076 578.518 Q275.39 576.782 275.39 573.472 Q275.39 570.416 273.238 568.703 Q271.108 566.967 267.289 566.967 L263.261 566.967 L263.261 563.125 L267.474 563.125 Q270.923 563.125 272.752 561.759 Q274.58 560.37 274.58 557.777 Q274.58 555.115 272.682 553.703 Q270.807 552.268 267.289 552.268 Q265.367 552.268 263.168 552.685 Q260.969 553.101 258.33 553.981 L258.33 549.814 Q260.992 549.074 263.307 548.703 Q265.645 548.333 267.705 548.333 Q273.029 548.333 276.131 550.763 Q279.233 553.171 279.233 557.291 Q279.233 560.162 277.59 562.152 Q275.946 564.12 272.914 564.884 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 552.037 Q295.298 552.037 293.469 555.601 Q291.664 559.143 291.664 566.273 Q291.664 573.379 293.469 576.944 Q295.298 580.486 298.909 580.486 Q302.543 580.486 304.349 576.944 Q306.177 573.379 306.177 566.273 Q306.177 559.143 304.349 555.601 Q302.543 552.037 298.909 552.037 M298.909 548.333 Q304.719 548.333 307.775 552.939 Q310.853 557.523 310.853 566.273 Q310.853 574.999 307.775 579.606 Q304.719 584.189 298.909 584.189 Q293.099 584.189 290.02 579.606 Q286.964 574.999 286.964 566.273 Q286.964 557.523 290.02 552.939 Q293.099 548.333 298.909 548.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M271.594 364.558 L259.789 383.007 L271.594 383.007 L271.594 364.558 M270.367 360.484 L276.247 360.484 L276.247 383.007 L281.177 383.007 L281.177 386.896 L276.247 386.896 L276.247 395.044 L271.594 395.044 L271.594 386.896 L255.992 386.896 L255.992 382.382 L270.367 360.484 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 363.563 Q295.298 363.563 293.469 367.127 Q291.664 370.669 291.664 377.799 Q291.664 384.905 293.469 388.47 Q295.298 392.012 298.909 392.012 Q302.543 392.012 304.349 388.47 Q306.177 384.905 306.177 377.799 Q306.177 370.669 304.349 367.127 Q302.543 363.563 298.909 363.563 M298.909 359.859 Q304.719 359.859 307.775 364.465 Q310.853 369.049 310.853 377.799 Q310.853 386.525 307.775 391.132 Q304.719 395.715 298.909 395.715 Q293.099 395.715 290.02 391.132 Q286.964 386.525 286.964 377.799 Q286.964 369.049 290.02 364.465 Q293.099 359.859 298.909 359.859 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M258.793 172.01 L277.15 172.01 L277.15 175.945 L263.076 175.945 L263.076 184.417 Q264.094 184.07 265.113 183.908 Q266.131 183.723 267.15 183.723 Q272.937 183.723 276.316 186.894 Q279.696 190.065 279.696 195.482 Q279.696 201.061 276.224 204.163 Q272.752 207.241 266.432 207.241 Q264.256 207.241 261.988 206.871 Q259.742 206.501 257.335 205.76 L257.335 201.061 Q259.418 202.195 261.641 202.751 Q263.863 203.306 266.34 203.306 Q270.344 203.306 272.682 201.2 Q275.02 199.093 275.02 195.482 Q275.02 191.871 272.682 189.764 Q270.344 187.658 266.34 187.658 Q264.465 187.658 262.59 188.075 Q260.738 188.491 258.793 189.371 L258.793 172.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M298.909 175.089 Q295.298 175.089 293.469 178.653 Q291.664 182.195 291.664 189.325 Q291.664 196.431 293.469 199.996 Q295.298 203.538 298.909 203.538 Q302.543 203.538 304.349 199.996 Q306.177 196.431 306.177 189.325 Q306.177 182.195 304.349 178.653 Q302.543 175.089 298.909 175.089 M298.909 171.385 Q304.719 171.385 307.775 175.991 Q310.853 180.575 310.853 189.325 Q310.853 198.051 307.775 202.658 Q304.719 207.241 298.909 207.241 Q293.099 207.241 290.02 202.658 Q286.964 198.051 286.964 189.325 Q286.964 180.575 290.02 175.991 Q293.099 171.385 298.909 171.385 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,992.787 400.199,865.205 400.786,748.144 401.372,640.897 401.958,680.274 402.545,584.083 403.131,496.264 403.718,418.152 404.304,456.729 404.891,485.328 405.477,414.442 406.063,350.207 406.65,375.063 407.236,537.385 407.823,476.336 408.409,422.005 408.995,371.194 409.582,385.383 410.168,393.556 410.755,350.744 411.341,312.686 411.927,326.823 412.514,293.721 413.1,265.18 413.687,278.496 414.273,255.303 414.86,236.095 415.446,219.895 416.032,266.013 416.619,307.069 417.205,317.808 417.792,353.042 418.378,340.89 418.964,327.918 419.551,319.316 420.137,350.377 420.724,362.02 421.31,355.39 421.896,351.088 422.483,347.649 423.069,375.276 423.656,388.659 424.242,390.023 424.829,391.179 425.415,417.61 426.001,419.343 426.588,432.857 427.174,435.878 427.761,440.596 428.347,456.59 428.933,490.776 429.52,503.741 430.106,508.343 430.693,522.291 431.279,543.797 431.865,557.08 432.452,569.588 433.038,581.671 433.625,600.687 434.211,607.011 434.798,612.67 435.384,629.707 435.97,640.721 436.557,668.81 437.143,690.828 437.73,695.841 438.316,701.792 438.902,728.438 439.489,738.916 440.075,762.342 440.662,775.657 441.248,781.413 441.835,791.305 442.421,800.497 443.007,809.826 443.594,818.973 444.18,831.799 444.767,844.194 445.353,852.465 445.939,864.638 446.526,872.916 447.112,884.528 447.699,899.165 448.285,907.017 448.871,917.307 449.458,927.325 450.044,934.257 450.631,944.491 451.217,950.972 451.804,963.134 452.39,980.455 452.976,994.476 453.563,1002.89 454.149,1010.48 454.736,1018.48 455.322,1031.1 455.908,1037.95 456.495,1042.69 457.081,1044.74 457.668,1052.29 458.254,1061.22 458.84,1070.07 459.427,1071.86 460.013,1080.88 460.6,1082.7 461.186,1091.5 461.773,1092.69 462.359,1096.63 462.945,1100.34 463.532,1102.17 464.118,1106.09 464.705,1110 465.291,1113.88 465.877,1119.8 466.464,1123.4 467.05,1127.1 467.637,1128.68 468.223,1130.18 468.809,1132.04 469.396,1133.79 469.982,1135.63 470.569,1139.89 471.155,1141.83 471.742,1143.53 472.328,1147.33 472.914,1152.77 473.501,1156.27 474.087,1157.02 474.674,1160.16 475.26,1163.81 475.846,1164.97 476.433,1166.06 477.019,1167.55 477.606,1168.67 478.192,1170.05 478.778,1173.08 479.365,1177.58 479.951,1180.28 480.538,1179.61 481.124,1183.98 481.711,1188.12 482.297,1190.69 482.883,1191.34 483.47,1191.68 484.056,1195.73 484.643,1196.4 485.229,1196.76 485.815,1197.32 486.402,1202.06 486.988,1202.52 487.575,1207.86 488.161,1209.92 488.748,1210.27 489.334,1212.43 489.92,1210.71 490.507,1210.98 491.093,1212.86 491.68,1211.31 492.266,1211.45 492.852,1213.69 493.439,1213.95 494.025,1215.99 494.612,1219.2 495.198,1219.15 495.784,1222.24 496.371,1220.21 496.957,1218.87 497.544,1218.86 498.13,1220.42 498.717,1220.5 499.303,1220.69 499.889,1220.53 500.476,1222.36 501.062,1224.07 501.649,1222.59 502.235,1225.71 502.821,1230.39 503.408,1231.25 503.994,1232.26 504.581,1234.95 505.167,1235.78 505.753,1235.02 506.34,1234.72 506.926,1235.66 507.513,1236.79 508.099,1237.67 508.686,1236.79 509.272,1239.16 509.858,1238.08 510.445,1234.03 511.031,1233.65 511.618,1231.5 512.204,1229.84 512.79,1229.47 513.377,1229.13 513.963,1230.42 514.55,1229.93 515.136,1231.37 515.722,1231.13 516.309,1233.93 516.895,1235.2 517.482,1236.66 518.068,1236.52 518.655,1236.23 519.241,1237.33 519.827,1239.91 520.414,1239.24 521,1236.86 521.587,1236.52 522.173,1237.44 522.759,1237.02 523.346,1236.48 523.932,1239.16 524.519,1238.12 525.105,1235.89 525.691,1237.23 526.278,1236.46 526.864,1234.41 527.451,1238.04 528.037,1235.52 528.624,1238.39 529.21,1237.94 529.796,1235.55 530.383,1231.87 530.969,1234.81 531.556,1236.03 532.142,1233.67 532.728,1230.24 533.315,1231.7 533.901,1231.34 534.488,1231.18 535.074,1232.35 535.661,1232.42 536.247,1230.78 536.833,1238.23 537.42,1237.81 538.006,1237.05 538.593,1233.32 539.179,1232.98 539.765,1230.82 540.352,1229.18 540.938,1230.4 541.525,1227.06 542.111,1230.11 542.697,1232.9 543.284,1230.83 543.87,1229.19 544.457,1227.62 545.043,1226.23 545.63,1227.73 546.216,1229.37 546.802,1226.21 547.389,1221.83 547.975,1223.58 548.562,1227.01 549.148,1228.3 549.734,1226.91 550.321,1223.52 550.907,1225.29 551.494,1224.92 552.08,1228.2 552.666,1229.65 553.253,1227.52 553.839,1225.73 554.426,1226.14 555.012,1227.81 555.599,1227.5 556.185,1225.75 556.771,1228.65 557.358,1229.86 557.944,1232.63 558.531,1234.07 559.117,1235 559.703,1234.23 560.29,1238.23 560.876,1237.56 561.463,1238.27 562.049,1240.75 562.635,1240.04 563.222,1239.05 563.808,1239.81 564.395,1243.81 564.981,1242.98 565.568,1241.79 566.154,1248.43 566.74,1250.53 567.327,1245.98 567.913,1246.29 568.5,1243.66 569.086,1242.61 569.672,1241.31 570.259,1243.31 570.845,1242.41 571.432,1240.09 572.018,1244.01 572.605,1245.96 573.191,1249.14 573.777,1247.6 574.364,1242.98 574.95,1241.88 575.537,1237.6 576.123,1236.9 576.709,1233.1 577.296,1232.54 577.882,1234.69 578.469,1235.5 579.055,1239.48 579.641,1234.06 580.228,1234.79 580.814,1237.14 581.401,1237.75 581.987,1236.65 582.574,1234.49 583.16,1230.56 583.746,1228.43 584.333,1229.32 584.919,1230.22 585.506,1229.5 586.092,1231.72 586.678,1232.51 587.265,1230.47 587.851,1231.21 588.438,1232.33 589.024,1231.38 589.61,1232.57 590.197,1232.23 590.783,1231.48 591.37,1234.17 591.956,1230.14 592.543,1235.73 593.129,1233.05 593.715,1232.49 594.302,1226.91 594.888,1226.9 595.475,1225.34 596.061,1227.85 596.647,1222.69 597.234,1223.92 597.82,1221.88 598.407,1219.8 598.993,1218.1 599.579,1219.64 600.166,1221.07 600.752,1219.18 601.339,1217.19 601.925,1216.96 602.512,1218.72 603.098,1216.98 603.684,1220.43 604.271,1220.54 604.857,1219.08 605.444,1217.36 606.03,1215.73 606.616,1215.91 607.203,1215.9 607.789,1217.49 608.376,1215.71 608.962,1214.22 609.548,1217.4 610.135,1217.46 610.721,1218.95 611.308,1218.84 611.894,1219.04 612.481,1218.72 613.067,1217 613.653,1218.83 614.24,1215.61 614.826,1214.32 615.413,1216.65 615.999,1218.39 616.585,1216.82 617.172,1216.69 617.758,1216.53 618.345,1216.76 618.931,1215.52 619.518,1217.58 620.104,1219.14 620.69,1220.88 621.277,1217.7 621.863,1214.76 622.45,1213.5 623.036,1212.05 623.622,1210.59 624.209,1212.71 624.795,1211.3 625.382,1214.72 625.968,1213.12 626.554,1213.24 627.141,1214.81 627.727,1216.4 628.314,1213.31 628.9,1215.2 629.487,1216.9 630.073,1214.15 630.659,1214.3 631.246,1215.84 631.832,1219.11 632.419,1217.47 633.005,1218.8 633.591,1218.22 634.178,1217.61 634.764,1217.51 635.351,1218.95 635.937,1221.72 636.523,1221.27 637.11,1219.53 637.696,1219.73 638.283,1221.25 638.869,1219.44 639.456,1220.65 640.042,1222.11 640.628,1221.68 641.215,1221.26 641.801,1222.19 642.388,1222.05 642.974,1223.31 643.56,1218.19 644.147,1218.21 644.733,1216.48 645.32,1214.67 645.906,1216.2 646.492,1219.23 647.079,1222.05 647.665,1221.68 648.252,1221.37 648.838,1214.61 649.425,1217.53 650.011,1220.79 650.597,1220.29 651.184,1221.81 651.77,1221.98 652.357,1220.3 652.943,1216.76 653.529,1218.25 654.116,1219.67 654.702,1218.2 655.289,1218.2 655.875,1218.29 656.462,1221.37 657.048,1222.8 657.634,1219.54 658.221,1220.49 658.807,1220.17 659.394,1219.89 659.98,1222.63 660.566,1223.87 661.153,1224.84 661.739,1222.76 662.326,1222.58 662.912,1225.21 663.498,1221.59 664.085,1219.77 664.671,1219.94 665.258,1219.8 665.844,1219.56 666.431,1220.99 667.017,1219.01 667.603,1220.46 668.19,1222.01 668.776,1219.95 669.363,1220 669.949,1223.14 670.535,1221.49 671.122,1222.54 671.708,1220.61 672.295,1218.96 672.881,1215.7 673.467,1215.8 674.054,1214.17 674.64,1214.02 675.227,1212.59 675.813,1217.41 676.4,1219.1 676.986,1220.35 677.572,1216.88 678.159,1215.44 678.745,1217.26 679.332,1215.4 679.918,1213.33 680.504,1217.62 681.091,1217.53 681.677,1215.92 682.264,1217.03 682.85,1220.15 683.436,1219.9 684.023,1218.13 684.609,1217.55 685.196,1218.82 685.782,1219.91 686.369,1222.79 686.955,1222.13 687.541,1218.79 688.128,1220.1 688.714,1219.49 689.301,1218.96 689.887,1215.6 690.473,1215.34 691.06,1212.43 691.646,1217.04 692.233,1215.31 692.819,1214.83 693.405,1212.99 693.992,1214.44 694.578,1214.58 695.165,1213.17 695.751,1211.73 696.338,1213.28 696.924,1211.64 697.51,1208.83 698.097,1210.9 698.683,1212.4 699.27,1212.46 699.856,1213.69 700.442,1216.69 701.029,1213.7 701.615,1215.55 702.202,1215.34 702.788,1218.42 703.375,1218.12 703.961,1217.75 704.547,1215.97 705.134,1214.32 705.72,1215.66 706.307,1218.68 706.893,1218.07 707.479,1219.41 708.066,1220.74 708.652,1220.11 709.239,1219.8 709.825,1221.01 710.411,1217.67 710.998,1218.95 711.584,1218.39 712.171,1220.97 712.757,1222.25 713.344,1221.91 713.93,1219.9 714.516,1222.84 715.103,1217.81 715.689,1217.56 716.276,1216.96 716.862,1218.48 717.448,1218.34 718.035,1216.49 718.621,1214.48 719.208,1217.62 719.794,1221.59 720.38,1222.43 720.967,1221.66 721.553,1221.33 722.14,1223.71 722.726,1224.55 723.313,1222.11 723.899,1221.42 724.485,1219.47 725.072,1218.85 725.658,1221.48 726.245,1223.86 726.831,1223.21 727.417,1225.41 728.004,1220.31 728.59,1218.19 729.177,1216.05 729.763,1215.73 730.349,1215.41 730.936,1215.22 731.522,1216.68 732.109,1216.38 732.695,1214.62 733.282,1215.97 733.868,1218.91 734.454,1218.73 735.041,1218.04 735.627,1215.96 736.214,1214.17 736.8,1211.02 737.386,1212.45 737.973,1210.74 738.559,1209.16 739.146,1210.84 739.732,1209.19 740.318,1207.64 740.905,1204.66 741.491,1205.05 742.078,1205.54 742.664,1205.75 743.251,1206.19 743.837,1206.43 744.423,1206.79 745.01,1207.25 745.596,1207.57 746.183,1207.88 746.769,1207.83 747.355,1208.37 747.942,1211.75 748.528,1209.82 749.115,1208.47 749.701,1208.9 750.288,1210.54 750.874,1209.05 751.46,1213.86 752.047,1215.22 752.633,1216.69 753.22,1214.71 753.806,1212.87 754.392,1211.28 754.979,1215.69 755.565,1214.12 756.152,1212.32 756.738,1215.1 757.324,1213.52 757.911,1211.52 758.497,1212.66 759.084,1211.08 759.67,1211.01 760.257,1209.51 760.843,1208.28 761.429,1208.34 762.016,1206.99 762.602,1208.87 763.189,1209.09 763.775,1205.95 764.361,1204.65 764.948,1206.57 765.534,1206.98 766.121,1205.57 766.707,1205.93 767.293,1209.46 767.88,1207.93 768.466,1206.53 769.053,1208.47 769.639,1210.24 770.226,1208.67 770.812,1210.26 771.398,1207.32 771.985,1204.37 772.571,1205.02 773.158,1205.46 773.744,1205.7 774.33,1204.42 774.917,1203.14 775.503,1205.2 776.09,1208.72 776.676,1208.74 777.262,1205.77 777.849,1207.68 778.435,1209.47 779.022,1209.5 779.608,1210.94 780.195,1212.78 780.781,1214.28 781.367,1218.66 781.954,1219.89 782.54,1219.53 783.127,1220.25 783.713,1217.86 784.299,1217.17 784.886,1216.93 785.472,1216.64 786.059,1216.53 786.645,1211.91 787.232,1211.67 787.818,1210.33 788.404,1211.8 788.991,1211.73 789.577,1211.68 790.164,1210.06 790.75,1210.12 791.336,1210.24 791.923,1210.21 792.509,1213.41 793.096,1213.26 793.682,1214.6 794.268,1214.46 794.855,1215.66 795.441,1214.08 796.028,1213.98 796.614,1211.8 797.201,1210.15 797.787,1208.59 798.373,1210.16 798.96,1213.41 799.546,1212.97 800.133,1209.85 800.719,1208.55 801.305,1208.48 801.892,1206.91 802.478,1208.51 803.065,1207.09 803.651,1206.99 804.237,1208.79 804.824,1207.31 805.41,1208.98 805.997,1210.56 806.583,1210.34 807.17,1213.69 807.756,1213.57 808.342,1213.32 808.929,1210.04 809.515,1208.49 810.102,1209.98 810.688,1209.73 811.274,1213.2 811.861,1210.25 812.447,1209.3 813.034,1207.62 813.62,1209.4 814.206,1209.35 814.793,1209.47 815.379,1209.38 815.966,1209.48 816.552,1213.04 817.139,1211.22 817.725,1214.14 818.311,1213.97 818.898,1210.63 819.484,1213.86 820.071,1211.09 820.657,1209.54 821.243,1208.16 821.83,1209.68 822.416,1209.85 823.003,1208.71 823.589,1211.99 824.175,1213.47 824.762,1213.44 825.348,1213.41 825.935,1213.5 826.521,1213.36 827.108,1211.54 827.694,1211.48 828.28,1208.47 828.867,1208.45 829.453,1211.62 830.04,1211.53 830.626,1213.1 831.212,1214.8 831.799,1216.2 832.385,1215.89 832.972,1214.08 833.558,1212.25 834.145,1212.35 834.731,1212.39 835.317,1212.21 835.904,1212.43 836.49,1215.53 837.077,1214.11 837.663,1216.94 838.249,1215.04 838.836,1216.26 839.422,1217.22 840.009,1218.17 840.595,1216.02 841.181,1213.88 841.768,1215.11 842.354,1213.14 842.941,1214.91 843.527,1214.56 844.114,1214.11 844.7,1211.96 845.286,1215.18 845.873,1219.65 846.459,1218.73 847.046,1219.45 847.632,1218.92 848.218,1216.63 848.805,1214.46 849.391,1215.79 849.978,1217.04 850.564,1218.36 851.15,1217.5 851.737,1219.92 852.323,1220.64 852.91,1220.14 853.496,1218.27 854.083,1216.49 854.669,1213.08 855.255,1211.34 855.842,1212.75 856.428,1213.76 857.015,1213.3 857.601,1214.65 858.187,1212.76 858.774,1209.48 859.36,1209.45 859.947,1209.38 860.533,1211.13 861.119,1212.45 861.706,1212.25 862.292,1213.48 862.879,1214.66 863.465,1213.8 864.052,1213.83 864.638,1215.4 865.224,1214.98 865.811,1216.05 866.397,1212.83 866.984,1210.96 867.57,1213.98 868.156,1214.13 868.743,1212.36 869.329,1213.69 869.916,1213.57 870.502,1210.13 871.089,1205.76 871.675,1202.47 872.261,1202.91 872.848,1203.02 873.434,1204.91 874.021,1202 874.607,1201.11 875.193,1199.69 875.78,1198.81 876.366,1200.82 876.953,1199.47 877.539,1200.1 878.125,1196.14 878.712,1202.78 879.298,1207.5 879.885,1206.58 880.471,1204.04 881.058,1205.75 881.644,1206.19 882.23,1206.38 882.817,1203.64 883.403,1203.46 883.99,1203.88 884.576,1205.78 885.162,1202.89 885.749,1204.91 886.335,1202.32 886.922,1204.25 887.508,1205.98 888.094,1203 888.681,1201.91 889.267,1202.37 889.854,1206.17 890.44,1206.36 891.027,1207.87 891.613,1204.92 892.199,1205.4 892.786,1206.91 893.372,1208.62 893.959,1211.85 894.545,1211.52 895.131,1211.58 895.718,1207.25 896.304,1205.7 896.891,1204.54 897.477,1204.9 898.063,1205.02 898.65,1202.37 899.236,1201.56 899.823,1203.25 900.409,1205.34 900.996,1204.2 901.582,1206.1 902.168,1210.42 902.755,1213.34 903.341,1211.38 903.928,1212.57 904.514,1210.77 905.1,1207.62 905.687,1207.8 906.273,1209.25 906.86,1204.82 907.446,1204.87 908.032,1203.56 908.619,1202.62 909.205,1201.42 909.792,1200.46 910.378,1199.11 910.965,1201.42 911.551,1202.31 912.137,1204.28 912.724,1204.55 913.31,1204.99 913.897,1206.92 914.483,1202.55 915.069,1198.15 915.656,1199 916.242,1199.14 916.829,1201.05 917.415,1202.82 918.002,1204.78 918.588,1207.67 919.174,1210.78 919.761,1210.05 920.347,1208.92 920.934,1209.02 921.52,1209.17 922.106,1212.5 922.693,1212.31 923.279,1208.98 923.866,1210.09 924.452,1207.04 925.038,1207.13 925.625,1208.83 926.211,1210.02 926.798,1204.3 927.384,1205.77 927.971,1206.08 928.557,1207.64 929.143,1206.23 929.73,1204.43 930.316,1204.53 930.903,1206.25 931.489,1209.23 932.075,1211.98 932.662,1211.58 933.248,1211.21 933.835,1213.97 934.421,1213.85 935.007,1213.63 935.594,1211.93 936.18,1214.81 936.767,1213.01 937.353,1214.33 937.94,1210.99 938.526,1212.18 939.112,1213.68 939.699,1213.46 940.285,1211.47 940.872,1209.64 941.458,1209.55 942.044,1209.37 942.631,1209.24 943.217,1207.61 943.804,1207.37 944.39,1204.26 944.976,1206 945.563,1207.6 946.149,1210.98 946.736,1206.03 947.322,1205.97 947.909,1207.76 948.495,1209.34 949.081,1209.38 949.668,1204.45 950.254,1206.21 950.841,1204.62 951.427,1206.07 952.013,1206.18 952.6,1207.72 953.186,1210.8 953.773,1215.3 954.359,1213.81 954.945,1211.75 955.532,1213.2 956.118,1214.65 956.705,1211.35 957.291,1209.78 957.878,1211.27 958.464,1212.56 959.05,1209.48 959.637,1207.96 960.223,1205.09 960.81,1205.34 961.396,1202.66 961.982,1203.14 962.569,1204.95 963.155,1208.06 963.742,1208.09 964.328,1208.14 964.915,1209.62 965.501,1209.45 966.087,1209.63 966.674,1209.49 967.26,1211.08 967.847,1210.73 968.433,1208.86 969.019,1207.35 969.606,1207.24 970.192,1205.4 970.779,1207.2 971.365,1206.96 971.951,1205.49 972.538,1205.49 973.124,1205.74 973.711,1205.72 974.297,1207.43 974.884,1207.43 975.47,1209.13 976.056,1206.12 976.643,1207.58 977.229,1207.68 977.816,1209.34 978.402,1210.4 978.988,1211.89 979.575,1207.11 980.161,1204.19 980.748,1207.37 981.334,1209.18 981.92,1210.79 982.507,1212.09 983.093,1207.08 983.68,1207.5 984.266,1207.7 984.853,1211.07 985.439,1212.25 986.025,1212.13 986.612,1213.39 987.198,1211.71 987.785,1209.92 988.371,1211.39 988.957,1209.54 989.544,1209.35 990.13,1209.37 990.717,1206.46 991.303,1209.55 991.889,1209.46 992.476,1210.82 993.062,1210.68 993.649,1209.01 994.235,1207.49 994.822,1207.36 995.408,1205.84 995.994,1205.8 996.581,1205.94 997.167,1207.19 997.754,1208.74 998.34,1207.41 998.926,1207.77 999.513,1206.39 1000.1,1207.91 1000.69,1204.63 1001.27,1200.24 1001.86,1203.44 1002.44,1203.62 1003.03,1202.59 1003.62,1201.3 1004.2,1200.13 1004.79,1202.36 1005.38,1202.94 1005.96,1199.82 1006.55,1198.97 1007.14,1203.93 1007.72,1203.88 1008.31,1205.28 1008.9,1208.11 1009.48,1203.2 1010.07,1200.59 1010.65,1198.18 1011.24,1196.88 1011.83,1202.15 1012.41,1205.76 1013,1204.6 1013.59,1206.51 1014.17,1203.42 1014.76,1205.36 1015.35,1208.59 1015.93,1207.28 1016.52,1210.45 1017.11,1211.81 1017.69,1213.31 1018.28,1216.07 1018.86,1218.35 1019.45,1217.72 1020.04,1217.1 1020.62,1214.94 1021.21,1212.78 1021.8,1212.44 1022.38,1212.47 1022.97,1210.69 1023.56,1210.3 1024.14,1209.97 1024.73,1209.75 1025.32,1209.53 1025.9,1212.45 1026.49,1216.61 1027.07,1216.18 1027.66,1218.69 1028.25,1227.04 1028.83,1225.86 1029.42,1223.58 1030.01,1225.45 1030.59,1223.08 1031.18,1225.45 1031.77,1227.64 1032.35,1223.7 1032.94,1224.61 1033.52,1222.12 1034.11,1219.48 1034.7,1218.72 1035.28,1218.14 1035.87,1219.48 1036.46,1219.01 1037.04,1218.37 1037.63,1215.71 1038.22,1216.34 1038.8,1215.71 1039.39,1216.95 1039.98,1213.47 1040.56,1214.83 1041.15,1213.07 1041.73,1211.12 1042.32,1214.16 1042.91,1215.26 1043.49,1217.65 1044.08,1215.5 1044.67,1213.47 1045.25,1213.6 1045.84,1212.06 1046.43,1211.72 1047.01,1212.57 1047.6,1213.53 1048.19,1210.13 1048.77,1209.96 1049.36,1209.5 1049.94,1209.61 1050.53,1209.41 1051.12,1210.5 1051.7,1210.08 1052.29,1211.41 1052.88,1209.52 1053.46,1209.54 1054.05,1209.46 1054.64,1210.59 1055.22,1207.39 1055.81,1204.27 1056.39,1202.59 1056.98,1205.79 1057.57,1208.93 1058.15,1208.97 1058.74,1204.69 1059.33,1206.44 1059.91,1205.29 1060.5,1206.66 1061.09,1202.25 1061.67,1199.15 1062.26,1199.69 1062.85,1197.28 1063.43,1202.64 1064.02,1198.49 1064.6,1199.19 1065.19,1198.3 1065.78,1198.49 1066.36,1198.68 1066.95,1197.48 1067.54,1199.7 1068.12,1197.22 1068.71,1196.33 1069.3,1198.49 1069.88,1200.6 1070.47,1201.26 1071.06,1204.67 1071.64,1205.09 1072.23,1202.02 1072.81,1200.95 1073.4,1203.02 1073.99,1206.39 1074.57,1209.45 1075.16,1212.65 1075.75,1210.8 1076.33,1209.16 1076.92,1206.08 1077.51,1207.57 1078.09,1207.4 1078.68,1205.95 1079.26,1206.29 1079.85,1206.41 1080.44,1206.51 1081.02,1203.92 1081.61,1208.62 1082.2,1214.97 1082.78,1214.75 1083.37,1217.36 1083.96,1218.38 1084.54,1214.39 1085.13,1212.76 1085.72,1212.9 1086.3,1211.2 1086.89,1207.86 1087.47,1208.03 1088.06,1208.14 1088.65,1209.81 1089.23,1211.65 1089.82,1206.76 1090.41,1200.65 1090.99,1198.23 1091.58,1198.89 1092.17,1200.76 1092.75,1202.72 1093.34,1198.49 1093.93,1203.97 1094.51,1205.49 1095.1,1205.6 1095.68,1207.34 1096.27,1207.39 1096.86,1208.92 1097.44,1211.91 1098.03,1210.35 1098.62,1209.02 1099.2,1215.18 1099.79,1216.3 1100.38,1217.43 1100.96,1215.64 1101.55,1218.2 1102.14,1217.51 1102.72,1215.34 1103.31,1214.71 1103.89,1212.83 1104.48,1212.52 1105.07,1212.29 1105.65,1211.74 1106.24,1214.37 1106.83,1214.01 1107.41,1208.96 1108,1204.27 1108.59,1206.15 1109.17,1206.33 1109.76,1207.81 1110.34,1206.12 1110.93,1203 1111.52,1204.58 1112.1,1202.24 1112.69,1199.25 1113.28,1201.47 1113.86,1203.24 1114.45,1198.99 1115.04,1199.45 1115.62,1199.87 1116.21,1196.88 1116.8,1202.27 1117.38,1201.45 1117.97,1203.25 1118.55,1202.21 1119.14,1202.4 1119.73,1202.73 1120.31,1202.96 1120.9,1203.25 1121.49,1203.88 1122.07,1204.03 1122.66,1202.69 1123.25,1201.37 1123.83,1203.24 1124.42,1203.66 1125.01,1204.08 1125.59,1203.93 1126.18,1205.8 1126.76,1208.83 1127.35,1208.65 1127.94,1211.4 1128.52,1206.76 1129.11,1205.17 1129.7,1205.68 1130.28,1208.88 1130.87,1209.41 1131.46,1209.11 1132.04,1209.18 1132.63,1207.68 1133.21,1209.18 1133.8,1209.4 1134.39,1210.96 1134.97,1210.71 1135.56,1209.08 1136.15,1209.19 1136.73,1207.54 1137.32,1207.61 1137.91,1209.29 1138.49,1208 1139.08,1206.65 1139.67,1205.19 1140.25,1211.57 1140.84,1209.96 1141.42,1206.84 1142.01,1208.46 1142.6,1210.01 1143.18,1210.01 1143.77,1210.7 1144.36,1209.25 1144.94,1206.08 1145.53,1205.94 1146.12,1209.37 1146.7,1207.92 1147.29,1207.72 1147.88,1209.53 1148.46,1210.63 1149.05,1212.05 1149.63,1213.54 1150.22,1211.81 1150.81,1210.07 1151.39,1212.49 1151.98,1212 1152.57,1208.5 1153.15,1206.8 1153.74,1206.75 1154.33,1208.31 1154.91,1211.27 1155.5,1212.51 1156.09,1212.39 1156.67,1209.09 1157.26,1206.07 1157.84,1206.35 1158.43,1206.45 1159.02,1206.54 1159.6,1208.23 1160.19,1209.63 1160.78,1210.88 1161.36,1210.77 1161.95,1207.44 1162.54,1207.52 1163.12,1211.94 1163.71,1206.78 1164.29,1206.73 1164.88,1206.74 1165.47,1206.84 1166.05,1205.59 1166.64,1207.34 1167.23,1207.16 1167.81,1210.27 1168.4,1213.39 1168.99,1213.07 1169.57,1213.08 1170.16,1209.86 1170.75,1211.45 1171.33,1210.13 1171.92,1211.5 1172.5,1208.11 1173.09,1208.11 1173.68,1209.45 1174.26,1209.27 1174.85,1208.9 1175.44,1207.52 1176.02,1205.66 1176.61,1201.19 1177.2,1204.84 1177.78,1201.8 1178.37,1199.49 1178.96,1199.94 1179.54,1203.37 1180.13,1202.22 1180.71,1200.72 1181.3,1198.15 1181.89,1200.21 1182.47,1198.73 1183.06,1199.3 1183.65,1200.08 1184.23,1200.36 1184.82,1201.14 1185.41,1204.76 1185.99,1206.35 1186.58,1204.94 1187.16,1208.03 1187.75,1208.31 1188.34,1203.46 1188.92,1203.65 1189.51,1205.37 1190.1,1205.56 1190.68,1205.55 1191.27,1209.56 1191.86,1209.67 1192.44,1209.66 1193.03,1209.97 1193.62,1210.13 1194.2,1218.96 1194.79,1219.75 1195.37,1223.5 1195.96,1222.64 1196.55,1217.43 1197.13,1218.38 1197.72,1216.25 1198.31,1214.2 1198.89,1213.75 1199.48,1211.95 1200.07,1211.57 1200.65,1209.76 1201.24,1211.65 1201.83,1211.64 1202.41,1211.43 1203,1209.54 1203.58,1208.18 1204.17,1208.3 1204.76,1211.39 1205.34,1211.65 1205.93,1211.58 1206.52,1213.3 1207.1,1212.64 1207.69,1209.47 1208.28,1213.57 1208.86,1212.05 1209.45,1213.35 1210.03,1211.66 1210.62,1211.1 1211.21,1212.3 1211.79,1211.89 1212.38,1208.8 1212.97,1208.75 1213.55,1211.74 1214.14,1209.74 1214.73,1204.88 1215.31,1206.69 1215.9,1203.81 1216.49,1200.6 1217.07,1200.85 1217.66,1199.31 1218.24,1199.84 1218.83,1198.95 1219.42,1198.23 1220,1198.55 1220.59,1198.88 1221.18,1196.07 1221.76,1197.92 1222.35,1199.85 1222.94,1203.66 1223.52,1205.26 1224.11,1206.86 1224.7,1207.21 1225.28,1208.64 1225.87,1209.98 1226.45,1210.15 1227.04,1209.87 1227.63,1212.52 1228.21,1213.97 1228.8,1212.71 1229.39,1212.7 1229.97,1212.62 1230.56,1212.45 1231.15,1213.76 1231.73,1213.69 1232.32,1211.82 1232.91,1211.44 1233.49,1208.24 1234.08,1208.22 1234.66,1206.49 1235.25,1203.51 1235.84,1202.08 1236.42,1200.91 1237.01,1204.2 1237.6,1207.4 1238.18,1208.91 1238.77,1210.11 1239.36,1208.55 1239.94,1205.26 1240.53,1202.2 1241.11,1205.32 1241.7,1206.7 1242.29,1209.95 1242.87,1208.56 1243.46,1209.9 1244.05,1209.8 1244.63,1209.68 1245.22,1208.19 1245.81,1209.7 1246.39,1209.51 1246.98,1207.64 1247.57,1209.18 1248.15,1208.87 1248.74,1207.27 1249.32,1207.42 1249.91,1208.85 1250.5,1206.04 1251.08,1204.6 1251.67,1204.78 1252.26,1206.48 1252.84,1209.33 1253.43,1208.08 1254.02,1209.33 1254.6,1209.15 1255.19,1207.45 1255.78,1210.36 1256.36,1210.53 1256.95,1210.29 1257.53,1208.6 1258.12,1209.71 1258.71,1209.57 1259.29,1211.11 1259.88,1209.5 1260.47,1209.18 1261.05,1210.6 1261.64,1205.76 1262.23,1204.41 1262.81,1204.85 1263.4,1201.59 1263.98,1200.22 1264.57,1200.5 1265.16,1200.65 1265.74,1196.67 1266.33,1198.86 1266.92,1199.62 1267.5,1203.29 1268.09,1205.09 1268.68,1208.41 1269.26,1209.77 1269.85,1211.09 1270.44,1212.36 1271.02,1213.71 1271.61,1210.16 1272.19,1210 1272.78,1211.07 1273.37,1212.07 1273.95,1213.33 1274.54,1213 1275.13,1209.32 1275.71,1209.6 1276.3,1207.76 1276.89,1206.24 1277.47,1207.89 1278.06,1210.66 1278.65,1208.74 1279.23,1202.56 1279.82,1205.59 1280.4,1206.05 1280.99,1207.48 1281.58,1206 1282.16,1210.62 1282.75,1212.16 1283.34,1214.9 1283.92,1215.92 1284.51,1214.11 1285.1,1209.22 1285.68,1209.43 1286.27,1209.44 1286.86,1212.62 1287.44,1210.58 1288.03,1208.51 1288.61,1208.51 1289.2,1209.84 1289.79,1209.74 1290.37,1208.11 1290.96,1206.93 1291.55,1207.07 1292.13,1207.1 1292.72,1208.77 1293.31,1212.92 1293.89,1212.5 1294.48,1215.42 1295.06,1213.42 1295.65,1211.42 1296.24,1206.64 1296.82,1209.64 1297.41,1208.15 1298,1208.05 1298.58,1206.45 1299.17,1206.68 1299.76,1210.97 1300.34,1209.24 1300.93,1203.05 1301.52,1200.31 1302.1,1202.33 1302.69,1202.8 1303.27,1202.99 1303.86,1204.51 1304.45,1201.51 1305.03,1200.34 1305.62,1200.94 1306.21,1196.57 1306.79,1197.36 1307.38,1199.52 1307.97,1201.61 1308.55,1205.33 1309.14,1205.48 1309.73,1205.52 1310.31,1204.39 1310.9,1201.65 1311.48,1200.5 1312.07,1202.35 1312.66,1205.87 1313.24,1207.54 1313.83,1209.06 1314.42,1209.11 1315,1212.03 1315.59,1211.88 1316.18,1207.1 1316.76,1207.25 1317.35,1210.18 1317.93,1208.58 1318.52,1207.22 1319.11,1207.25 1319.69,1208.85 1320.28,1209.78 1320.87,1211.63 1321.45,1211.61 1322.04,1209.99 1322.63,1208.03 1323.21,1208.21 1323.8,1206.41 1324.39,1204.8 1324.97,1204.89 1325.56,1206.51 1326.14,1204.91 1326.73,1203.24 1327.32,1203.6 1327.9,1202.1 1328.49,1202.53 1329.08,1199.73 1329.66,1198.66 1330.25,1200.49 1330.84,1200.85 1331.42,1201.34 1332.01,1204.39 1332.6,1206.14 1333.18,1207.72 1333.77,1209.27 1334.35,1207.48 1334.94,1207.21 1335.53,1207.27 1336.11,1207.13 1336.7,1207.13 1337.29,1210.29 1337.87,1210.07 1338.46,1214.35 1339.05,1214.14 1339.63,1213.79 1340.22,1214.67 1340.8,1215.85 1341.39,1212.12 1341.98,1210.41 1342.56,1210.53 1343.15,1207.11 1343.74,1206.73 1344.32,1208.2 1344.91,1208.14 1345.5,1209.7 1346.08,1210.07 1346.67,1213.04 1347.26,1214.24 1347.84,1217.19 1348.43,1217.87 1349.01,1220.42 1349.6,1218.12 1350.19,1216.08 1350.77,1218.86 1351.36,1219.84 1351.95,1219.14 1352.53,1223.11 1353.12,1222.41 1353.71,1226.08 1354.29,1224.02 1354.88,1219.95 1355.47,1217.78 1356.05,1218.52 1356.64,1216.67 1357.22,1216.13 1357.81,1210.73 1358.4,1207.79 1358.98,1208.25 1359.57,1211.11 1360.16,1214.06 1360.74,1212.24 1361.33,1210.3 1361.92,1211.95 1362.5,1211.67 1363.09,1211.3 1363.68,1210.97 1364.26,1212.13 1364.85,1213.38 1365.43,1214.75 1366.02,1213.29 1366.61,1211.19 1367.19,1211.2 1367.78,1211.03 1368.37,1203.18 1368.95,1203.33 1369.54,1205.25 1370.13,1204.13 1370.71,1205.69 1371.3,1204.09 1371.88,1205.73 1372.47,1205.72 1373.06,1205.69 1373.64,1206.9 1374.23,1209.96 1374.82,1206.78 1375.4,1206.55 1375.99,1203.43 1376.58,1199.13 1377.16,1199.85 1377.75,1200.5 1378.34,1202.21 1378.92,1203.75 1379.51,1203.87 1380.09,1202.59 1380.68,1207.35 1381.27,1207.14 1381.85,1202.46 1382.44,1202.85 1383.03,1203 1383.61,1206.46 1384.2,1203.61 1384.79,1203.81 1385.37,1202.36 1385.96,1199.35 1386.55,1200.03 1387.13,1203.76 1387.72,1202.09 1388.3,1200.73 1388.89,1202.39 1389.48,1202.94 1390.06,1200.09 1390.65,1200.1 1391.24,1200.76 1391.82,1204.14 1392.41,1202.9 1393,1204.73 1393.58,1208.03 1394.17,1209.23 1394.75,1206.11 1395.34,1204.96 1395.93,1205.45 1396.51,1208.32 1397.1,1206.34 1397.69,1202.08 1398.27,1205.45 1398.86,1208.85 1399.45,1210.84 1400.03,1209.39 1400.62,1206.27 1401.21,1206.4 1401.79,1206.71 1402.38,1208.22 1402.96,1204.96 1403.55,1205.28 1404.14,1205.33 1404.72,1205.62 1405.31,1207.08 1405.9,1209.98 1406.48,1208.41 1407.07,1208.21 1407.66,1208.21 1408.24,1208.31 1408.83,1206.61 1409.42,1204.84 1410,1203.38 1410.59,1202.15 1411.17,1202.35 1411.76,1204.07 1412.35,1204.18 1412.93,1204.54 1413.52,1204.71 1414.11,1204.79 1414.69,1205.23 1415.28,1205.34 1415.87,1202.44 1416.45,1204.33 1417.04,1204.5 1417.63,1204.2 1418.21,1204.53 1418.8,1201.5 1419.38,1202.09 1419.97,1202.49 1420.56,1202.59 1421.14,1208.96 1421.73,1208.89 1422.32,1211.38 1422.9,1211.29 1423.49,1211.22 1424.08,1210.97 1424.66,1213.85 1425.25,1210.75 1425.83,1209.19 1426.42,1207.66 1427.01,1212.38 1427.59,1212.35 1428.18,1212.04 1428.77,1210.27 1429.35,1208.7 1429.94,1210.16 1430.53,1210.15 1431.11,1210.34 1431.7,1210.35 1432.29,1209.88 1432.87,1211.49 1433.46,1208.44 1434.04,1210.02 1434.63,1208.34 1435.22,1208.12 1435.8,1208.15 1436.39,1208 1436.98,1207.97 1437.56,1208.19 1438.15,1208.17 1438.74,1206.75 1439.32,1208.18 1439.91,1208.03 1440.5,1206.46 1441.08,1206.65 1441.67,1204.78 1442.25,1200.12 1442.84,1202.17 1443.43,1200.95 1444.01,1205.7 1444.6,1206.07 1445.19,1207.89 1445.77,1207.84 1446.36,1206.22 1446.95,1207.67 1447.53,1206.34 1448.12,1206.2 1448.7,1206.22 1449.29,1203.09 1449.88,1203.41 1450.46,1201.92 1451.05,1198.98 1451.64,1199.27 1452.22,1199.71 1452.81,1198.44 1453.4,1205.06 1453.98,1205.37 1454.57,1205.6 1455.16,1205.67 1455.74,1204.47 1456.33,1203.13 1456.91,1203.38 1457.5,1203.82 1458.09,1207.15 1458.67,1205.95 1459.26,1207.64 1459.85,1207.91 1460.43,1211.04 1461.02,1212.18 1461.61,1210.59 1462.19,1210.76 1462.78,1208.86 1463.37,1213.15 1463.95,1214.67 1464.54,1212.65 1465.12,1212.31 1465.71,1213.54 1466.3,1214.74 1466.88,1217.24 1467.47,1216.41 1468.06,1217.7 1468.64,1217.12 1469.23,1216.61 1469.82,1213.29 1470.4,1211.25 1470.99,1211.14 1471.57,1210.72 1472.16,1211.9 1472.75,1209.97 1473.33,1208.27 1473.92,1206.75 1474.51,1208.45 1475.09,1206.54 1475.68,1203.67 1476.27,1201.2 1476.85,1198.14 1477.44,1198.54 1478.03,1195.92 1478.61,1201.03 1479.2,1203.93 1479.78,1202.62 1480.37,1203.24 1480.96,1204.81 1481.54,1203.64 1482.13,1204.94 1482.72,1205.24 1483.3,1204.92 1483.89,1204.96 1484.48,1211.32 1485.06,1211.4 1485.65,1208.01 1486.24,1211.09 1486.82,1210.81 1487.41,1211.96 1487.99,1211.52 1488.58,1214.4 1489.17,1213.75 1489.75,1212.01 1490.34,1210.25 1490.93,1211.81 1491.51,1210.33 1492.1,1209.91 1492.69,1211.2 1493.27,1209.46 1493.86,1208.06 1494.45,1209.3 1495.03,1207.84 1495.62,1206.16 1496.2,1205.91 1496.79,1205.88 1497.38,1206.25 1497.96,1203.53 1498.55,1203.78 1499.14,1206.95 1499.72,1207.25 1500.31,1207.25 1500.9,1207.25 1501.48,1208.67 1502.07,1208.7 1502.65,1210.19 1503.24,1210.2 1503.83,1207.01 1504.41,1205.31 1505,1202.17 1505.59,1202.04 1506.17,1200.79 1506.76,1199.66 1507.35,1199.7 1507.93,1200.37 1508.52,1202.37 1509.11,1205.7 1509.69,1207.4 1510.28,1206.03 1510.86,1206.2 1511.45,1205.12 1512.04,1208.48 1512.62,1208.34 1513.21,1209.89 1513.8,1209.82 1514.38,1213.08 1514.97,1211.27 1515.56,1210.55 1516.14,1210.02 1516.73,1209.88 1517.32,1208.23 1517.9,1208.24 1518.49,1209.85 1519.07,1208.53 1519.66,1210.12 1520.25,1207.13 1520.83,1210.51 1521.42,1207.36 1522.01,1205.88 1522.59,1207.47 1523.18,1207.61 1523.77,1207.76 1524.35,1209.49 1524.94,1212.27 1525.52,1210.57 1526.11,1213.27 1526.7,1213.09 1527.28,1215.79 1527.87,1213.84 1528.46,1211.96 1529.04,1210.16 1529.63,1210.05 1530.22,1206.81 1530.8,1208.08 1531.39,1207.9 1531.98,1206.28 1532.56,1206.37 1533.15,1205.07 1533.73,1206.73 1534.32,1206.69 1534.91,1209.96 1535.49,1209.84 1536.08,1211.46 1536.67,1212.79 1537.25,1209.61 1537.84,1208.06 1538.43,1206.49 1539.01,1206.57 1539.6,1205.26 1540.19,1203.86 1540.77,1206.96 1541.36,1208.64 1541.94,1211.29 1542.53,1209.65 1543.12,1211.12 1543.7,1209.47 1544.29,1209.33 1544.88,1209.17 1545.46,1207.7 1546.05,1209.12 1546.64,1204.55 1547.22,1204.58 1547.81,1204.23 1548.4,1207.55 1548.98,1207.69 1549.57,1205.9 1550.15,1207.55 1550.74,1210.71 1551.33,1207.67 1551.91,1209.34 1552.5,1209.36 1553.09,1207.93 1553.67,1206.55 1554.26,1212.47 1554.85,1215.41 1555.43,1215.28 1556.02,1214.95 1556.6,1214.74 1557.19,1211.65 1557.78,1210.07 1558.36,1210.01 1558.95,1209.73 1559.54,1208.05 1560.12,1206.34 1560.71,1206.63 1561.3,1206.7 1561.88,1203.39 1562.47,1203.72 1563.06,1204.16 1563.64,1205.95 1564.23,1206.52 1564.81,1205.12 1565.4,1203.61 1565.99,1205.26 1566.57,1203.75 1567.16,1202.28 1567.75,1202.65 1568.33,1204.83 1568.92,1204.91 1569.51,1206.63 1570.09,1204.83 1570.68,1208.24 1571.27,1208.57 1571.85,1211.56 1572.44,1209.75 1573.02,1209.29 1573.61,1209.07 1574.2,1209 1574.78,1207.32 1575.37,1207.23 1575.96,1206.98 1576.54,1208.62 1577.13,1206.66 1577.72,1208.08 1578.3,1208.11 1578.89,1208.3 1579.47,1207 1580.06,1205.63 1580.65,1207.17 1581.23,1205.55 1581.82,1200.98 1582.41,1201.77 1582.99,1202.03 1583.58,1201.92 1584.17,1205.58 1584.75,1205.92 1585.34,1206.28 1585.93,1206.52 1586.51,1205.32 1587.1,1203.83 1587.68,1204.38 1588.27,1203.1 1588.86,1201.96 1589.44,1200.96 1590.03,1199.6 1590.62,1200.09 1591.2,1201.96 1591.79,1206.91 1592.38,1210.04 1592.96,1209.66 1593.55,1209.31 1594.14,1209.44 1594.72,1209.14 1595.31,1207.34 1595.89,1207.45 1596.48,1207.19 1597.07,1207.16 1597.65,1205.81 1598.24,1206.1 1598.83,1207.89 1599.41,1207.94 1600,1206.13 1600.59,1206.28 1601.17,1206.23 1601.76,1209.31 1602.34,1206.36 1602.93,1206.36 1603.52,1204.98 1604.1,1205.33 1604.69,1200.9 1605.28,1202.84 1605.86,1204.69 1606.45,1203.22 1607.04,1204.57 1607.62,1206.35 1608.21,1206.07 1608.8,1207.9 1609.38,1206.12 1609.97,1209.24 1610.55,1210.61 1611.14,1210.44 1611.73,1205.82 1612.31,1212.11 1612.9,1210.21 1613.49,1213.4 1614.07,1212.98 1614.66,1212.59 1615.25,1210.97 1615.83,1210.57 1616.42,1210.39 1617.01,1210.09 1617.59,1211.27 1618.18,1209.67 1618.76,1210.8 1619.35,1209.06 1619.94,1205.58 1620.52,1207 1621.11,1205.37 1621.7,1205.48 1622.28,1205.63 1622.87,1204.05 1623.46,1204.35 1624.04,1204.45 1624.63,1204.31 1625.22,1204.76 1625.8,1204.72 1626.39,1206.47 1626.97,1210.82 1627.56,1210.79 1628.15,1215.6 1628.73,1213.45 1629.32,1211.54 1629.91,1214.13 1630.49,1209.09 1631.08,1207.44 1631.67,1207.2 1632.25,1208.71 1632.84,1210.22 1633.42,1213.1 1634.01,1212.61 1634.6,1212.3 1635.18,1210.1 1635.77,1211.2 1636.36,1213.94 1636.94,1211.88 1637.53,1211.54 1638.12,1209.73 1638.7,1211.04 1639.29,1210.8 1639.88,1210.09 1640.46,1208.33 1641.05,1210.22 1641.63,1208.73 1642.22,1208.79 1642.81,1210.46 1643.39,1208.72 1643.98,1207.09 1644.57,1205.33 1645.15,1205.44 1645.74,1202.48 1646.33,1202.71 1646.91,1201.15 1647.5,1200.22 1648.09,1203.9 1648.67,1201.32 1649.26,1201.67 1649.84,1202.23 1650.43,1205.68 1651.02,1205.83 1651.6,1204.55 1652.19,1203.25 1652.78,1203.82 1653.36,1204.31 1653.95,1205.87 1654.54,1209.06 1655.12,1206.12 1655.71,1206.41 1656.29,1206.53 1656.88,1208.22 1657.47,1209.6 1658.05,1209.47 1658.64,1210.74 1659.23,1208.83 1659.81,1209.88 1660.4,1211.07 1660.99,1211.07 1661.57,1211 1662.16,1209.1 1662.75,1209.08 1663.33,1212.26 1663.92,1213.43 1664.5,1211.83 1665.09,1213.08 1665.68,1211.34 1666.26,1211.07 1666.85,1208.09 1667.44,1206.3 1668.02,1206.58 1668.61,1206.47 1669.2,1210.99 1669.78,1210.86 1670.37,1208.08 1670.96,1203.5 1671.54,1203.71 1672.13,1203.86 1672.71,1201.15 1673.3,1200.27 1673.89,1205.05 1674.47,1206.6 1675.06,1207.98 1675.65,1206.53 1676.23,1204.95 1676.82,1203.44 1677.41,1204.87 1677.99,1204.85 1678.58,1205.19 1679.17,1205.18 1679.75,1205.33 1680.34,1203.54 1680.92,1202.32 1681.51,1199.29 1682.1,1198.04 1682.68,1203.1 1683.27,1201.51 1683.86,1205.12 1684.44,1208.32 1685.03,1209.85 1685.62,1206.59 1686.2,1205.04 1686.79,1205.43 1687.37,1200.93 1687.96,1204.24 1688.55,1201.43 1689.13,1203.08 1689.72,1207.88 1690.31,1209.63 1690.89,1212.53 1691.48,1212.69 1692.07,1210.75 1692.65,1215.15 1693.24,1213.65 1693.83,1213.67 1694.41,1212.25 1695,1212.21 1695.58,1212.02 1696.17,1207.62 1696.76,1207.81 1697.34,1206.14 1697.93,1203.51 1698.52,1205.22 1699.1,1208.11 1699.69,1204.89 1700.28,1201.95 1700.86,1202.06 1701.45,1202.51 1702.04,1198.54 1702.62,1198.99 1703.21,1196.51 1703.79,1195.66 1704.38,1197.62 1704.97,1197.79 1705.55,1199.93 1706.14,1201.95 1706.73,1202.44 1707.31,1202.73 1707.9,1206.1 1708.49,1204.44 1709.07,1203.05 1709.66,1204.54 1710.24,1204.73 1710.83,1208.03 1711.42,1206.82 1712,1205.16 1712.59,1205.32 1713.18,1205.88 1713.76,1207.44 1714.35,1207.4 1714.94,1208.76 1715.52,1206.88 1716.11,1207.11 1716.7,1208.84 1717.28,1210.35 1717.87,1207.09 1718.45,1206.82 1719.04,1204.89 1719.63,1202.01 1720.21,1199.47 1720.8,1201.38 1721.39,1200.6 1721.97,1202.26 1722.56,1204.19 1723.15,1204.23 1723.73,1201.3 1724.32,1201.4 1724.91,1203.27 1725.49,1205.27 1726.08,1208.33 1726.66,1206.5 1727.25,1204.87 1727.84,1205.26 1728.42,1205.48 1729.01,1208.8 1729.6,1207.2 1730.18,1207.24 1730.77,1204.04 1731.36,1205.87 1731.94,1207.09 1732.53,1207.08 1733.11,1205.61 1733.7,1207.31 1734.29,1210.28 1734.87,1208.96 1735.46,1208.99 1736.05,1210.61 1736.63,1209.01 1737.22,1208.88 1737.81,1210.43 1738.39,1211.7 1738.98,1211.29 1739.57,1211.33 1740.15,1212.65 1740.74,1214.08 1741.32,1212.39 1741.91,1212.66 1742.5,1210.85 1743.08,1212.33 1743.67,1211.98 1744.26,1211.72 1744.84,1211.54 1745.43,1207.2 1746.02,1210.4 1746.6,1211.94 1747.19,1211.49 1747.78,1212.56 1748.36,1210.66 1748.95,1212.11 1749.53,1211.83 1750.12,1212.93 1750.71,1212.6 1751.29,1207.98 1751.88,1210.81 1752.47,1210.45 1753.05,1207.24 1753.64,1207.25 1754.23,1206.98 1754.81,1206.87 1755.4,1203.78 1755.99,1207.24 1756.57,1205.81 1757.16,1208.85 1757.74,1208.87 1758.33,1207.2 1758.92,1205.62 1759.5,1204.21 1760.09,1204.63 1760.68,1207.61 1761.26,1204.53 1761.85,1201.14 1762.44,1199.68 1763.02,1201.39 1763.61,1203.21 1764.19,1200.52 1764.78,1204.09 1765.37,1206.12 1765.95,1204.66 1766.54,1205.84 1767.13,1207.66 1767.71,1209.03 1768.3,1208.95 1768.89,1210.43 1769.47,1210.41 1770.06,1210.23 1770.65,1208.49 1771.23,1208.49 1771.82,1211.6 1772.4,1209.68 1772.99,1208.2 1773.58,1206.61 1774.16,1206.74 1774.75,1206.9 1775.34,1203.92 1775.92,1204.02 1776.51,1201 1777.1,1204.27 1777.68,1202.71 1778.27,1203.25 1778.86,1201.69 1779.44,1201.7 1780.03,1200.45 1780.61,1202.36 1781.2,1199.49 1781.79,1200.27 1782.37,1199.1 1782.96,1198.09 1783.55,1199.95 1784.13,1200.33 1784.72,1201.16 1785.31,1203.17 1785.89,1205.27 1786.48,1203.59 1787.06,1205.46 1787.65,1203.79 1788.24,1204.36 1788.82,1206.05 1789.41,1206.35 1790,1212.56 1790.58,1212.16 1791.17,1212.12 1791.76,1213.32 1792.34,1210 1792.93,1209.6 1793.52,1212.62 1794.1,1206.37 1794.69,1206.45 1795.27,1206.55 1795.86,1208.28 1796.45,1208.04 1797.03,1204.75 1797.62,1204.51 1798.21,1210.78 1798.79,1212.03 1799.38,1213.33 1799.97,1214.67 1800.55,1212.58 1801.14,1209.36 1801.73,1206.42 1802.31,1210.87 1802.9,1209.23 1803.48,1214.94 1804.07,1217.72 1804.66,1218.5 1805.24,1216.5 1805.83,1217.6 1806.42,1217.04 1807,1216.49 1807.59,1215.73 1808.18,1216.77 1808.76,1217.73 1809.35,1217.24 1809.94,1213.52 1810.52,1211.76 1811.11,1210.01 1811.69,1209.82 1812.28,1206.69 1812.87,1206.77 1813.45,1206.94 1814.04,1205.27 1814.63,1206.71 1815.21,1208.17 1815.8,1206.91 1816.39,1205.46 1816.97,1205.63 1817.56,1202.61 1818.14,1202.82 1818.73,1203.06 1819.32,1201.5 1819.9,1200.15 1820.49,1202.42 1821.08,1204.12 1821.66,1204.52 1822.25,1207.73 1822.84,1207.29 1823.42,1210.46 1824.01,1210.15 1824.6,1209.96 1825.18,1207.95 1825.77,1207.93 1826.35,1207.96 1826.94,1206.66 1827.53,1211.48 1828.11,1212.65 1828.7,1209.21 1829.29,1207.81 1829.87,1202.97 1830.46,1200.27 1831.05,1199.16 1831.63,1196.8 1832.22,1195.64 1832.81,1199.42 1833.39,1201.58 1833.98,1201.61 1834.56,1200.42 1835.15,1200.56 1835.74,1202.42 1836.32,1199.33 1836.91,1201.4 1837.5,1203.33 1838.08,1203.4 1838.67,1206.7 1839.26,1206.28 1839.84,1209.6 1840.43,1214 1841.01,1213.83 1841.6,1213.54 1842.19,1213.11 1842.77,1211.36 1843.36,1209.55 1843.95,1207.93 1844.53,1208.01 1845.12,1209.37 1845.71,1210.97 1846.29,1211.13 1846.88,1212.32 1847.47,1211.82 1848.05,1210.27 1848.64,1205.57 1849.22,1205.73 1849.81,1205.72 1850.4,1207.63 1850.98,1210.49 1851.57,1210.49 1852.16,1208.7 1852.74,1208.87 1853.33,1208.86 1853.92,1210.41 1854.5,1211.71 1855.09,1211.89 1855.68,1208.52 1856.26,1208.43 1856.85,1205.44 1857.43,1202.47 1858.02,1201.36 1858.61,1199.9 1859.19,1203.45 1859.78,1208.4 1860.37,1208.25 1860.95,1203.41 1861.54,1203.47 1862.13,1203.84 1862.71,1202.57 1863.3,1203.05 1863.88,1204.88 1864.47,1208.19 1865.06,1208.04 1865.64,1209.84 1866.23,1208.54 1866.82,1211.31 1867.4,1209.47 1867.99,1209.34 1868.58,1209.6 1869.16,1206.5 1869.75,1205.12 1870.34,1205.26 1870.92,1203.97 1871.51,1204.04 1872.09,1201.08 1872.68,1196.87 1873.27,1197.46 1873.85,1196.72 1874.44,1197.57 1875.03,1198.05 1875.61,1198.47 1876.2,1200.51 1876.79,1202.44 1877.37,1201.24 1877.96,1198.23 1878.55,1198.87 1879.13,1203.62 1879.72,1203.9 1880.3,1204.04 1880.89,1201.76 1881.48,1205.35 1882.06,1205.59 1882.65,1207.35 1883.24,1204.46 1883.82,1203.53 1884.41,1205.44 1885,1210.08 1885.58,1208.39 1886.17,1208.24 1886.76,1209.81 1887.34,1210.97 1887.93,1210.71 1888.51,1210.56 1889.1,1208.92 1889.69,1208.8 1890.27,1208.98 1890.86,1209.05 1891.45,1209.19 1892.03,1210.39 1892.62,1210.17 1893.21,1211.54 1893.79,1212.94 1894.38,1215.76 1894.96,1213.69 1895.55,1214.97 1896.14,1214.61 1896.72,1211.08 1897.31,1210.88 1897.9,1212.11 1898.48,1213.28 1899.07,1214.22 1899.66,1213.68 1900.24,1210.52 1900.83,1208.89 1901.42,1207.25 1902,1205.4 1902.59,1203.58 1903.17,1206.82 1903.76,1207.02 1904.35,1209.85 1904.93,1206.55 1905.52,1208.07 1906.11,1209.86 1906.69,1209.75 1907.28,1211.12 1907.87,1207.44 1908.45,1207.58 1909.04,1209 1909.63,1210.42 1910.21,1210.34 1910.8,1211.59 1911.38,1209.9 1911.97,1209.65 1912.56,1209.76 1913.14,1209.56 1913.73,1210.97 1914.32,1212.39 1914.9,1213.61 1915.49,1216.27 1916.08,1214.22 1916.66,1213.37 1917.25,1213.48 1917.83,1215.19 1918.42,1216.42 1919.01,1216 1919.59,1215.56 1920.18,1215.08 1920.77,1214.8 1921.35,1212.39 1921.94,1214.19 1922.53,1213.86 1923.11,1212.07 1923.7,1211.75 1924.29,1210.46 1924.87,1210.32 1925.46,1211.7 1926.04,1211.32 1926.63,1209.52 1927.22,1212.33 1927.8,1210.62 1928.39,1208.75 1928.98,1208.5 1929.56,1208.23 1930.15,1204.86 1930.74,1204.77 1931.32,1204.97 1931.91,1207.91 1932.5,1209.15 1933.08,1209.22 1933.67,1209.06 1934.25,1207.24 1934.84,1208.35 1935.43,1206.44 1936.01,1206.56 1936.6,1206.35 1937.19,1209.73 1937.77,1212.63 1938.36,1210.84 1938.95,1205.92 1939.53,1207.48 1940.12,1209.03 1940.71,1208.75 1941.29,1208.91 1941.88,1207.18 1942.46,1207.28 1943.05,1203.99 1943.64,1205.62 1944.22,1203.94 1944.81,1202.45 1945.4,1202.73 1945.98,1201.44 1946.57,1204.57 1947.16,1204.78 1947.74,1206.32 1948.33,1208.08 1948.91,1206.26 1949.5,1204.48 1950.09,1205.99 1950.67,1207.35 1951.26,1209.1 1951.85,1206.11 1952.43,1207.66 1953.02,1208.01 1953.61,1209.53 1954.19,1211.09 1954.78,1211.11 1955.37,1209.9 1955.95,1209.82 1956.54,1209.77 1957.12,1209.63 1957.71,1206.7 1958.3,1206.8 1958.88,1207 1959.47,1203.81 1960.06,1202.48 1960.64,1202.85 1961.23,1201.33 1961.82,1204.65 1962.4,1204.89 1962.99,1208.16 1963.58,1208.05 1964.16,1208 1964.75,1211.31 1965.33,1214.49 1965.92,1215.91 1966.51,1214.2 1967.09,1215.47 1967.68,1216.8 1968.27,1214.78 1968.85,1209.84 1969.44,1209.67 1970.03,1211.06 1970.61,1210.65 1971.2,1212.15 1971.78,1211.76 1972.37,1208.86 1972.96,1208.9 1973.54,1209.86 1974.13,1214.35 1974.72,1214.2 1975.3,1212.1 1975.89,1211.63 1976.48,1210.06 1977.06,1208.25 1977.65,1208.27 1978.24,1210 1978.82,1208.64 1979.41,1209.86 1979.99,1206.83 1980.58,1205.21 1981.17,1205.25 1981.75,1205.18 1982.34,1205.42 1982.93,1203.42 1983.51,1203.66 1984.1,1208.65 1984.69,1207.33 1985.27,1209.01 1985.86,1209.41 1986.45,1213.8 1987.03,1210.62 1987.62,1209.19 1988.2,1212.09 1988.79,1211.71 1989.38,1210.27 1989.96,1211.9 1990.55,1216.21 1991.14,1215.89 1991.72,1213.88 1992.31,1211.71 1992.9,1213.25 1993.48,1209.93 1994.07,1209.8 1994.65,1207.83 1995.24,1204.78 1995.83,1206.48 1996.41,1203.25 1997,1201.53 1997.59,1201.8 1998.17,1200.58 1998.76,1197.67 1999.35,1199.49 1999.93,1198.4 2000.52,1198.89 2001.11,1199.48 2001.69,1198.09 2002.28,1199.88 2002.86,1203.22 2003.45,1204.89 2004.04,1205.02 2004.62,1205.2 2005.21,1206.89 2005.8,1206.59 2006.38,1206.51 2006.97,1206.53 2007.56,1207.91 2008.14,1206.23 2008.73,1203.51 2009.32,1203.87 2009.9,1207.02 2010.49,1208.81 2011.07,1207.22 2011.66,1203.91 2012.25,1203.97 2012.83,1202.49 2013.42,1201.2 2014.01,1200.04 2014.59,1202.07 2015.18,1200.85 2015.77,1201.19 2016.35,1201.63 2016.94,1202.31 2017.53,1204.16 2018.11,1206.01 2018.7,1204.72 2019.28,1204.9 2019.87,1203.79 2020.46,1207.1 2021.04,1205.48 2021.63,1205.4 2022.22,1208.58 2022.8,1208.59 2023.39,1207.04 2023.98,1208.62 2024.56,1210.31 2025.15,1209.93 2025.73,1210.05 2026.32,1207.14 2026.91,1205.62 2027.49,1202.59 2028.08,1202.75 2028.67,1201.79 2029.25,1201.96 2029.84,1202.34 2030.43,1204.5 2031.01,1202.8 2031.6,1204.79 2032.19,1211.07 2032.77,1210.54 2033.36,1211.82 2033.94,1214.41 2034.53,1213.77 2035.12,1215.08 2035.7,1214.93 2036.29,1216.25 2036.88,1215.64 2037.46,1213.76 2038.05,1211.88 2038.64,1210.26 2039.22,1208.7 2039.81,1207.1 2040.4,1207.24 2040.98,1208.86 2041.57,1205.89 2042.15,1206.03 2042.74,1206.18 2043.33,1212.29 2043.91,1210.39 2044.5,1211.84 2045.09,1208.51 2045.67,1211.26 2046.26,1210.83 2046.85,1208.95 2047.43,1207.34 2048.02,1210.34 2048.6,1208.8 2049.19,1206.92 2049.78,1207.09 2050.36,1207.28 2050.95,1208.73 2051.54,1207.21 2052.12,1207.36 2052.71,1205.81 2053.3,1204.28 2053.88,1204.32 2054.47,1204.19 2055.06,1204.16 2055.64,1204.19 2056.23,1204.35 2056.81,1207.75 2057.4,1207.65 2057.99,1208.89 2058.57,1205.65 2059.16,1205.56 2059.75,1205.69 2060.33,1204.3 2060.92,1205.76 2061.51,1208.53 2062.09,1208.26 2062.68,1208.21 2063.27,1208.13 2063.85,1208.16 2064.44,1209.5 2065.02,1210.95 2065.61,1210.78 2066.2,1205.97 2066.78,1207.59 2067.37,1209.31 2067.96,1209 2068.54,1207.65 2069.13,1207.52 2069.72,1208.76 2070.3,1205.64 2070.89,1210.04 2071.48,1209.8 2072.06,1212.79 2072.65,1210.75 2073.23,1210.56 2073.82,1208.63 2074.41,1208.36 2074.99,1208.5 2075.58,1209.93 2076.17,1208.4 2076.75,1208.24 2077.34,1208.19 2077.93,1203.53 2078.51,1202.42 2079.1,1202.42 2079.68,1202.5 2080.27,1202.67 2080.86,1202.85 2081.44,1203.09 2082.03,1201.91 2082.62,1205.46 2083.2,1207.26 2083.79,1207.05 2084.38,1207.28 2084.96,1209.12 2085.55,1210.79 2086.14,1212.05 2086.72,1211.55 2087.31,1209.84 2087.89,1212.69 2088.48,1210.73 2089.07,1211.77 2089.65,1209.78 2090.24,1209.88 2090.83,1208.28 2091.41,1210.07 2092,1208.34 2092.59,1205.36 2093.17,1207.29 2093.76,1205.68 2094.35,1205.65 2094.93,1204.15 2095.52,1204.37 2096.1,1204.67 2096.69,1204.59 2097.28,1203.17 2097.86,1201.89 2098.45,1200.33 2099.04,1200.74 2099.62,1204.47 2100.21,1204.95 2100.8,1205.04 2101.38,1200.7 2101.97,1200.87 2102.55,1202.62 2103.14,1204.62 2103.73,1206.12 2104.31,1203.41 2104.9,1203.61 2105.49,1204.17 2106.07,1202.74 2106.66,1201.11 2107.25,1199.94 2107.83,1200.29 2108.42,1202.22 2109.01,1204.23 2109.59,1204.49 2110.18,1206.21 2110.76,1204.81 2111.35,1208.15 2111.94,1203.58 2112.52,1208.23 2113.11,1209.8 2113.7,1209.74 2114.28,1209.84 2114.87,1208.31 2115.46,1208.29 2116.04,1208.13 2116.63,1208.19 2117.22,1207.94 2117.8,1208.05 2118.39,1206.37 2118.97,1208.15 2119.56,1209.74 2120.15,1206.67 2120.73,1209.9 2121.32,1208.38 2121.91,1208.56 2122.49,1210.2 2123.08,1211.27 2123.67,1210.8 2124.25,1211.92 2124.84,1208.76 2125.42,1213.47 2126.01,1211.53 2126.6,1211.51 2127.18,1206.94 2127.77,1205.3 2128.36,1205.39 2128.94,1204.19 2129.53,1202.85 2130.12,1202.85 2130.7,1201.48 2131.29,1198.75 2131.88,1199.5 2132.46,1198.19 2133.05,1198.56 2133.63,1199.14 2134.22,1201.14 2134.81,1202.82 2135.39,1204.46 2135.98,1206.14 2136.57,1211.13 2137.15,1212.47 2137.74,1213.54 2138.33,1211.64 2138.91,1209.97 2139.5,1209.85 2140.09,1209.89 2140.67,1207.9 2141.26,1207.98 2141.84,1209.75 2142.43,1203.29 2143.02,1206.75 2143.6,1208.27 2144.19,1209.53 2144.78,1207.85 2145.36,1209.2 2145.95,1210.67 2146.54,1210.51 2147.12,1208.89 2147.71,1209.1 2148.3,1207.36 2148.88,1207.41 2149.47,1204.54 2150.05,1206.67 2150.64,1206.71 2151.23,1205.08 2151.81,1203.66 2152.4,1204 2152.99,1205.72 2153.57,1208.8 2154.16,1207.23 2154.75,1210.15 2155.33,1210.37 2155.92,1213.33 2156.5,1213.18 2157.09,1212.94 2157.68,1210.95 2158.26,1212.4 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1207.97 L986.612 1207.97 L987.198 1207.97 L987.785 1207.97 L988.371 1207.97 L988.957 1207.97 L989.544 1207.97 L990.13 1207.97 L990.717 1207.97 L991.303 1207.97 L991.889 1207.97 L992.476 1207.97 L993.062 1207.97 L993.649 1207.97 L994.235 1207.97 L994.822 1207.97 L995.408 1207.97 L995.994 1207.97 L996.581 1207.97 L997.167 1207.97 L997.754 1207.97 L998.34 1207.97 L998.926 1207.97 L999.513 1207.97 L1000.1 1207.97 L1000.69 1207.97 L1001.27 1207.97 L1001.86 1207.97 L1002.44 1207.97 L1003.03 1207.97 L1003.62 1207.97 L1004.2 1207.97 L1004.79 1207.97 L1005.38 1207.97 L1005.96 1207.97 L1006.55 1207.97 L1007.14 1207.97 L1007.72 1207.97 L1008.31 1207.97 L1008.9 1207.97 L1009.48 1207.97 L1010.07 1207.97 L1010.65 1207.97 L1011.24 1207.97 L1011.83 1207.97 L1012.41 1207.97 L1013 1207.97 L1013.59 1207.97 L1014.17 1207.97 L1014.76 1207.97 L1015.35 1207.97 L1015.93 1207.97 L1016.52 1207.97 L1017.11 1207.97 L1017.69 1207.97 L1018.28 1207.97 L1018.86 1207.97 L1019.45 1207.97 L1020.04 1207.97 L1020.62 1207.97 L1021.21 1207.97 L1021.8 1207.97 L1022.38 1207.97 L1022.97 1207.97 L1023.56 1207.97 L1024.14 1207.97 L1024.73 1207.97 L1025.32 1207.97 L1025.9 1207.97 L1026.49 1207.97 L1027.07 1207.97 L1027.66 1207.97 L1028.25 1207.97 L1028.83 1207.97 L1029.42 1207.97 L1030.01 1207.97 L1030.59 1207.97 L1031.18 1207.97 L1031.77 1207.97 L1032.35 1207.97 L1032.94 1207.97 L1033.52 1207.97 L1034.11 1207.97 L1034.7 1207.97 L1035.28 1207.97 L1035.87 1207.97 L1036.46 1207.97 L1037.04 1207.97 L1037.63 1207.97 L1038.22 1207.97 L1038.8 1207.97 L1039.39 1207.97 L1039.98 1207.97 L1040.56 1207.97 L1041.15 1207.97 L1041.73 1207.97 L1042.32 1207.97 L1042.91 1207.97 L1043.49 1207.97 L1044.08 1207.97 L1044.67 1207.97 L1045.25 1207.97 L1045.84 1207.97 L1046.43 1207.97 L1047.01 1207.97 L1047.6 1207.97 L1048.19 1207.97 L1048.77 1207.97 L1049.36 1207.97 L1049.94 1207.97 L1050.53 1207.97 L1051.12 1207.97 L1051.7 1207.97 L1052.29 1207.97 L1052.88 1207.97 L1053.46 1207.97 L1054.05 1207.97 L1054.64 1207.97 L1055.22 1207.97 L1055.81 1207.97 L1056.39 1207.97 L1056.98 1207.97 L1057.57 1207.97 L1058.15 1207.97 L1058.74 1207.97 L1059.33 1207.97 L1059.91 1207.97 L1060.5 1207.97 L1061.09 1207.97 L1061.67 1207.97 L1062.26 1207.97 L1062.85 1207.97 L1063.43 1207.97 L1064.02 1207.97 L1064.6 1207.97 L1065.19 1207.97 L1065.78 1207.97 L1066.36 1207.97 L1066.95 1207.97 L1067.54 1207.97 L1068.12 1207.97 L1068.71 1207.97 L1069.3 1207.97 L1069.88 1207.97 L1070.47 1207.97 L1071.06 1207.97 L1071.64 1207.97 L1072.23 1207.97 L1072.81 1207.97 L1073.4 1207.97 L1073.99 1207.97 L1074.57 1207.97 L1075.16 1207.97 L1075.75 1207.97 L1076.33 1207.97 L1076.92 1207.97 L1077.51 1207.97 L1078.09 1207.97 L1078.68 1207.97 L1079.26 1207.97 L1079.85 1207.97 L1080.44 1207.97 L1081.02 1207.97 L1081.61 1207.97 L1082.2 1207.97 L1082.78 1207.97 L1083.37 1207.97 L1083.96 1207.97 L1084.54 1207.97 L1085.13 1207.97 L1085.72 1207.97 L1086.3 1207.97 L1086.89 1207.97 L1087.47 1207.97 L1088.06 1207.97 L1088.65 1207.97 L1089.23 1207.97 L1089.82 1207.97 L1090.41 1207.97 L1090.99 1207.97 L1091.58 1207.97 L1092.17 1207.97 L1092.75 1207.97 L1093.34 1207.97 L1093.93 1207.97 L1094.51 1207.97 L1095.1 1207.97 L1095.68 1207.97 L1096.27 1207.97 L1096.86 1207.97 L1097.44 1207.97 L1098.03 1207.97 L1098.62 1207.97 L1099.2 1207.97 L1099.79 1207.97 L1100.38 1207.97 L1100.96 1207.97 L1101.55 1207.97 L1102.14 1207.97 L1102.72 1207.97 L1103.31 1207.97 L1103.89 1207.97 L1104.48 1207.97 L1105.07 1207.97 L1105.65 1207.97 L1106.24 1207.97 L1106.83 1207.97 L1107.41 1207.97 L1108 1207.97 L1108.59 1207.97 L1109.17 1207.97 L1109.76 1207.97 L1110.34 1207.97 L1110.93 1207.97 L1111.52 1207.97 L1112.1 1207.97 L1112.69 1207.97 L1113.28 1207.97 L1113.86 1207.97 L1114.45 1207.97 L1115.04 1207.97 L1115.62 1207.97 L1116.21 1207.97 L1116.8 1207.97 L1117.38 1207.97 L1117.97 1207.97 L1118.55 1207.97 L1119.14 1207.97 L1119.73 1207.97 L1120.31 1207.97 L1120.9 1207.97 L1121.49 1207.97 L1122.07 1207.97 L1122.66 1207.97 L1123.25 1207.97 L1123.83 1207.97 L1124.42 1207.97 L1125.01 1207.97 L1125.59 1207.97 L1126.18 1207.97 L1126.76 1207.97 L1127.35 1207.97 L1127.94 1207.97 L1128.52 1207.97 L1129.11 1207.97 L1129.7 1207.97 L1130.28 1207.97 L1130.87 1207.97 L1131.46 1207.97 L1132.04 1207.97 L1132.63 1207.97 L1133.21 1207.97 L1133.8 1207.97 L1134.39 1207.97 L1134.97 1207.97 L1135.56 1207.97 L1136.15 1207.97 L1136.73 1207.97 L1137.32 1207.97 L1137.91 1207.97 L1138.49 1207.97 L1139.08 1207.97 L1139.67 1207.97 L1140.25 1207.97 L1140.84 1207.97 L1141.42 1207.97 L1142.01 1207.97 L1142.6 1207.97 L1143.18 1207.97 L1143.77 1207.97 L1144.36 1207.97 L1144.94 1207.97 L1145.53 1207.97 L1146.12 1207.97 L1146.7 1207.97 L1147.29 1207.97 L1147.88 1207.97 L1148.46 1207.97 L1149.05 1207.97 L1149.63 1207.97 L1150.22 1207.97 L1150.81 1207.97 L1151.39 1207.97 L1151.98 1207.97 L1152.57 1207.97 L1153.15 1207.97 L1153.74 1207.97 L1154.33 1207.97 L1154.91 1207.97 L1155.5 1207.97 L1156.09 1207.97 L1156.67 1207.97 L1157.26 1207.97 L1157.84 1207.97 L1158.43 1207.97 L1159.02 1207.97 L1159.6 1207.97 L1160.19 1207.97 L1160.78 1207.97 L1161.36 1207.97 L1161.95 1207.97 L1162.54 1207.97 L1163.12 1207.97 L1163.71 1207.97 L1164.29 1207.97 L1164.88 1207.97 L1165.47 1207.97 L1166.05 1207.97 L1166.64 1207.97 L1167.23 1207.97 L1167.81 1207.97 L1168.4 1207.97 L1168.99 1207.97 L1169.57 1207.97 L1170.16 1207.97 L1170.75 1207.97 L1171.33 1207.97 L1171.92 1207.97 L1172.5 1207.97 L1173.09 1207.97 L1173.68 1207.97 L1174.26 1207.97 L1174.85 1207.97 L1175.44 1207.97 L1176.02 1207.97 L1176.61 1207.97 L1177.2 1207.97 L1177.78 1207.97 L1178.37 1207.97 L1178.96 1207.97 L1179.54 1207.97 L1180.13 1207.97 L1180.71 1207.97 L1181.3 1207.97 L1181.89 1207.97 L1182.47 1207.97 L1183.06 1207.97 L1183.65 1207.97 L1184.23 1207.97 L1184.82 1207.97 L1185.41 1207.97 L1185.99 1207.97 L1186.58 1207.97 L1187.16 1207.97 L1187.75 1207.97 L1188.34 1207.97 L1188.92 1207.97 L1189.51 1207.97 L1190.1 1207.97 L1190.68 1207.97 L1191.27 1207.97 L1191.86 1207.97 L1192.44 1207.97 L1193.03 1207.97 L1193.62 1207.97 L1194.2 1207.97 L1194.79 1207.97 L1195.37 1207.97 L1195.96 1207.97 L1196.55 1207.97 L1197.13 1207.97 L1197.72 1207.97 L1198.31 1207.97 L1198.89 1207.97 L1199.48 1207.97 L1200.07 1207.97 L1200.65 1207.97 L1201.24 1207.97 L1201.83 1207.97 L1202.41 1207.97 L1203 1207.97 L1203.58 1207.97 L1204.17 1207.97 L1204.76 1207.97 L1205.34 1207.97 L1205.93 1207.97 L1206.52 1207.97 L1207.1 1207.97 L1207.69 1207.97 L1208.28 1207.97 L1208.86 1207.97 L1209.45 1207.97 L1210.03 1207.97 L1210.62 1207.97 L1211.21 1207.97 L1211.79 1207.97 L1212.38 1207.97 L1212.97 1207.97 L1213.55 1207.97 L1214.14 1207.97 L1214.73 1207.97 L1215.31 1207.97 L1215.9 1207.97 L1216.49 1207.97 L1217.07 1207.97 L1217.66 1207.97 L1218.24 1207.97 L1218.83 1207.97 L1219.42 1207.97 L1220 1207.97 L1220.59 1207.97 L1221.18 1207.97 L1221.76 1207.97 L1222.35 1207.97 L1222.94 1207.97 L1223.52 1207.97 L1224.11 1207.97 L1224.7 1207.97 L1225.28 1207.97 L1225.87 1207.97 L1226.45 1207.97 L1227.04 1207.97 L1227.63 1207.97 L1228.21 1207.97 L1228.8 1207.97 L1229.39 1207.97 L1229.97 1207.97 L1230.56 1207.97 L1231.15 1207.97 L1231.73 1207.97 L1232.32 1207.97 L1232.91 1207.97 L1233.49 1207.97 L1234.08 1207.97 L1234.66 1207.97 L1235.25 1207.97 L1235.84 1207.97 L1236.42 1207.97 L1237.01 1207.97 L1237.6 1207.97 L1238.18 1207.97 L1238.77 1207.97 L1239.36 1207.97 L1239.94 1207.97 L1240.53 1207.97 L1241.11 1207.97 L1241.7 1207.97 L1242.29 1207.97 L1242.87 1207.97 L1243.46 1207.97 L1244.05 1207.97 L1244.63 1207.97 L1245.22 1207.97 L1245.81 1207.97 L1246.39 1207.97 L1246.98 1207.97 L1247.57 1207.97 L1248.15 1207.97 L1248.74 1207.97 L1249.32 1207.97 L1249.91 1207.97 L1250.5 1207.97 L1251.08 1207.97 L1251.67 1207.97 L1252.26 1207.97 L1252.84 1207.97 L1253.43 1207.97 L1254.02 1207.97 L1254.6 1207.97 L1255.19 1207.97 L1255.78 1207.97 L1256.36 1207.97 L1256.95 1207.97 L1257.53 1207.97 L1258.12 1207.97 L1258.71 1207.97 L1259.29 1207.97 L1259.88 1207.97 L1260.47 1207.97 L1261.05 1207.97 L1261.64 1207.97 L1262.23 1207.97 L1262.81 1207.97 L1263.4 1207.97 L1263.98 1207.97 L1264.57 1207.97 L1265.16 1207.97 L1265.74 1207.97 L1266.33 1207.97 L1266.92 1207.97 L1267.5 1207.97 L1268.09 1207.97 L1268.68 1207.97 L1269.26 1207.97 L1269.85 1207.97 L1270.44 1207.97 L1271.02 1207.97 L1271.61 1207.97 L1272.19 1207.97 L1272.78 1207.97 L1273.37 1207.97 L1273.95 1207.97 L1274.54 1207.97 L1275.13 1207.97 L1275.71 1207.97 L1276.3 1207.97 L1276.89 1207.97 L1277.47 1207.97 L1278.06 1207.97 L1278.65 1207.97 L1279.23 1207.97 L1279.82 1207.97 L1280.4 1207.97 L1280.99 1207.97 L1281.58 1207.97 L1282.16 1207.97 L1282.75 1207.97 L1283.34 1207.97 L1283.92 1207.97 L1284.51 1207.97 L1285.1 1207.97 L1285.68 1207.97 L1286.27 1207.97 L1286.86 1207.97 L1287.44 1207.97 L1288.03 1207.97 L1288.61 1207.97 L1289.2 1207.97 L1289.79 1207.97 L1290.37 1207.97 L1290.96 1207.97 L1291.55 1207.97 L1292.13 1207.97 L1292.72 1207.97 L1293.31 1207.97 L1293.89 1207.97 L1294.48 1207.97 L1295.06 1207.97 L1295.65 1207.97 L1296.24 1207.97 L1296.82 1207.97 L1297.41 1207.97 L1298 1207.97 L1298.58 1207.97 L1299.17 1207.97 L1299.76 1207.97 L1300.34 1207.97 L1300.93 1207.97 L1301.52 1207.97 L1302.1 1207.97 L1302.69 1207.97 L1303.27 1207.97 L1303.86 1207.97 L1304.45 1207.97 L1305.03 1207.97 L1305.62 1207.97 L1306.21 1207.97 L1306.79 1207.97 L1307.38 1207.97 L1307.97 1207.97 L1308.55 1207.97 L1309.14 1207.97 L1309.73 1207.97 L1310.31 1207.97 L1310.9 1207.97 L1311.48 1207.97 L1312.07 1207.97 L1312.66 1207.97 L1313.24 1207.97 L1313.83 1207.97 L1314.42 1207.97 L1315 1207.97 L1315.59 1207.97 L1316.18 1207.97 L1316.76 1207.97 L1317.35 1207.97 L1317.93 1207.97 L1318.52 1207.97 L1319.11 1207.97 L1319.69 1207.97 L1320.28 1207.97 L1320.87 1207.97 L1321.45 1207.97 L1322.04 1207.97 L1322.63 1207.97 L1323.21 1207.97 L1323.8 1207.97 L1324.39 1207.97 L1324.97 1207.97 L1325.56 1207.97 L1326.14 1207.97 L1326.73 1207.97 L1327.32 1207.97 L1327.9 1207.97 L1328.49 1207.97 L1329.08 1207.97 L1329.66 1207.97 L1330.25 1207.97 L1330.84 1207.97 L1331.42 1207.97 L1332.01 1207.97 L1332.6 1207.97 L1333.18 1207.97 L1333.77 1207.97 L1334.35 1207.97 L1334.94 1207.97 L1335.53 1207.97 L1336.11 1207.97 L1336.7 1207.97 L1337.29 1207.97 L1337.87 1207.97 L1338.46 1207.97 L1339.05 1207.97 L1339.63 1207.97 L1340.22 1207.97 L1340.8 1207.97 L1341.39 1207.97 L1341.98 1207.97 L1342.56 1207.97 L1343.15 1207.97 L1343.74 1207.97 L1344.32 1207.97 L1344.91 1207.97 L1345.5 1207.97 L1346.08 1207.97 L1346.67 1207.97 L1347.26 1207.97 L1347.84 1207.97 L1348.43 1207.97 L1349.01 1207.97 L1349.6 1207.97 L1350.19 1207.97 L1350.77 1207.97 L1351.36 1207.97 L1351.95 1207.97 L1352.53 1207.97 L1353.12 1207.97 L1353.71 1207.97 L1354.29 1207.97 L1354.88 1207.97 L1355.47 1207.97 L1356.05 1207.97 L1356.64 1207.97 L1357.22 1207.97 L1357.81 1207.97 L1358.4 1207.97 L1358.98 1207.97 L1359.57 1207.97 L1360.16 1207.97 L1360.74 1207.97 L1361.33 1207.97 L1361.92 1207.97 L1362.5 1207.97 L1363.09 1207.97 L1363.68 1207.97 L1364.26 1207.97 L1364.85 1207.97 L1365.43 1207.97 L1366.02 1207.97 L1366.61 1207.97 L1367.19 1207.97 L1367.78 1207.97 L1368.37 1207.97 L1368.95 1207.97 L1369.54 1207.97 L1370.13 1207.97 L1370.71 1207.97 L1371.3 1207.97 L1371.88 1207.97 L1372.47 1207.97 L1373.06 1207.97 L1373.64 1207.97 L1374.23 1207.97 L1374.82 1207.97 L1375.4 1207.97 L1375.99 1207.97 L1376.58 1207.97 L1377.16 1207.97 L1377.75 1207.97 L1378.34 1207.97 L1378.92 1207.97 L1379.51 1207.97 L1380.09 1207.97 L1380.68 1207.97 L1381.27 1207.97 L1381.85 1207.97 L1382.44 1207.97 L1383.03 1207.97 L1383.61 1207.97 L1384.2 1207.97 L1384.79 1207.97 L1385.37 1207.97 L1385.96 1207.97 L1386.55 1207.97 L1387.13 1207.97 L1387.72 1207.97 L1388.3 1207.97 L1388.89 1207.97 L1389.48 1207.97 L1390.06 1207.97 L1390.65 1207.97 L1391.24 1207.97 L1391.82 1207.97 L1392.41 1207.97 L1393 1207.97 L1393.58 1207.97 L1394.17 1207.97 L1394.75 1207.97 L1395.34 1207.97 L1395.93 1207.97 L1396.51 1207.97 L1397.1 1207.97 L1397.69 1207.97 L1398.27 1207.97 L1398.86 1207.97 L1399.45 1207.97 L1400.03 1207.97 L1400.62 1207.97 L1401.21 1207.97 L1401.79 1207.97 L1402.38 1207.97 L1402.96 1207.97 L1403.55 1207.97 L1404.14 1207.97 L1404.72 1207.97 L1405.31 1207.97 L1405.9 1207.97 L1406.48 1207.97 L1407.07 1207.97 L1407.66 1207.97 L1408.24 1207.97 L1408.83 1207.97 L1409.42 1207.97 L1410 1207.97 L1410.59 1207.97 L1411.17 1207.97 L1411.76 1207.97 L1412.35 1207.97 L1412.93 1207.97 L1413.52 1207.97 L1414.11 1207.97 L1414.69 1207.97 L1415.28 1207.97 L1415.87 1207.97 L1416.45 1207.97 L1417.04 1207.97 L1417.63 1207.97 L1418.21 1207.97 L1418.8 1207.97 L1419.38 1207.97 L1419.97 1207.97 L1420.56 1207.97 L1421.14 1207.97 L1421.73 1207.97 L1422.32 1207.97 L1422.9 1207.97 L1423.49 1207.97 L1424.08 1207.97 L1424.66 1207.97 L1425.25 1207.97 L1425.83 1207.97 L1426.42 1207.97 L1427.01 1207.97 L1427.59 1207.97 L1428.18 1207.97 L1428.77 1207.97 L1429.35 1207.97 L1429.94 1207.97 L1430.53 1207.97 L1431.11 1207.97 L1431.7 1207.97 L1432.29 1207.97 L1432.87 1207.97 L1433.46 1207.97 L1434.04 1207.97 L1434.63 1207.97 L1435.22 1207.97 L1435.8 1207.97 L1436.39 1207.97 L1436.98 1207.97 L1437.56 1207.97 L1438.15 1207.97 L1438.74 1207.97 L1439.32 1207.97 L1439.91 1207.97 L1440.5 1207.97 L1441.08 1207.97 L1441.67 1207.97 L1442.25 1207.97 L1442.84 1207.97 L1443.43 1207.97 L1444.01 1207.97 L1444.6 1207.97 L1445.19 1207.97 L1445.77 1207.97 L1446.36 1207.97 L1446.95 1207.97 L1447.53 1207.97 L1448.12 1207.97 L1448.7 1207.97 L1449.29 1207.97 L1449.88 1207.97 L1450.46 1207.97 L1451.05 1207.97 L1451.64 1207.97 L1452.22 1207.97 L1452.81 1207.97 L1453.4 1207.97 L1453.98 1207.97 L1454.57 1207.97 L1455.16 1207.97 L1455.74 1207.97 L1456.33 1207.97 L1456.91 1207.97 L1457.5 1207.97 L1458.09 1207.97 L1458.67 1207.97 L1459.26 1207.97 L1459.85 1207.97 L1460.43 1207.97 L1461.02 1207.97 L1461.61 1207.97 L1462.19 1207.97 L1462.78 1207.97 L1463.37 1207.97 L1463.95 1207.97 L1464.54 1207.97 L1465.12 1207.97 L1465.71 1207.97 L1466.3 1207.97 L1466.88 1207.97 L1467.47 1207.97 L1468.06 1207.97 L1468.64 1207.97 L1469.23 1207.97 L1469.82 1207.97 L1470.4 1207.97 L1470.99 1207.97 L1471.57 1207.97 L1472.16 1207.97 L1472.75 1207.97 L1473.33 1207.97 L1473.92 1207.97 L1474.51 1207.97 L1475.09 1207.97 L1475.68 1207.97 L1476.27 1207.97 L1476.85 1207.97 L1477.44 1207.97 L1478.03 1207.97 L1478.61 1207.97 L1479.2 1207.97 L1479.78 1207.97 L1480.37 1207.97 L1480.96 1207.97 L1481.54 1207.97 L1482.13 1207.97 L1482.72 1207.97 L1483.3 1207.97 L1483.89 1207.97 L1484.48 1207.97 L1485.06 1207.97 L1485.65 1207.97 L1486.24 1207.97 L1486.82 1207.97 L1487.41 1207.97 L1487.99 1207.97 L1488.58 1207.97 L1489.17 1207.97 L1489.75 1207.97 L1490.34 1207.97 L1490.93 1207.97 L1491.51 1207.97 L1492.1 1207.97 L1492.69 1207.97 L1493.27 1207.97 L1493.86 1207.97 L1494.45 1207.97 L1495.03 1207.97 L1495.62 1207.97 L1496.2 1207.97 L1496.79 1207.97 L1497.38 1207.97 L1497.96 1207.97 L1498.55 1207.97 L1499.14 1207.97 L1499.72 1207.97 L1500.31 1207.97 L1500.9 1207.97 L1501.48 1207.97 L1502.07 1207.97 L1502.65 1207.97 L1503.24 1207.97 L1503.83 1207.97 L1504.41 1207.97 L1505 1207.97 L1505.59 1207.97 L1506.17 1207.97 L1506.76 1207.97 L1507.35 1207.97 L1507.93 1207.97 L1508.52 1207.97 L1509.11 1207.97 L1509.69 1207.97 L1510.28 1207.97 L1510.86 1207.97 L1511.45 1207.97 L1512.04 1207.97 L1512.62 1207.97 L1513.21 1207.97 L1513.8 1207.97 L1514.38 1207.97 L1514.97 1207.97 L1515.56 1207.97 L1516.14 1207.97 L1516.73 1207.97 L1517.32 1207.97 L1517.9 1207.97 L1518.49 1207.97 L1519.07 1207.97 L1519.66 1207.97 L1520.25 1207.97 L1520.83 1207.97 L1521.42 1207.97 L1522.01 1207.97 L1522.59 1207.97 L1523.18 1207.97 L1523.77 1207.97 L1524.35 1207.97 L1524.94 1207.97 L1525.52 1207.97 L1526.11 1207.97 L1526.7 1207.97 L1527.28 1207.97 L1527.87 1207.97 L1528.46 1207.97 L1529.04 1207.97 L1529.63 1207.97 L1530.22 1207.97 L1530.8 1207.97 L1531.39 1207.97 L1531.98 1207.97 L1532.56 1207.97 L1533.15 1207.97 L1533.73 1207.97 L1534.32 1207.97 L1534.91 1207.97 L1535.49 1207.97 L1536.08 1207.97 L1536.67 1207.97 L1537.25 1207.97 L1537.84 1207.97 L1538.43 1207.97 L1539.01 1207.97 L1539.6 1207.97 L1540.19 1207.97 L1540.77 1207.97 L1541.36 1207.97 L1541.94 1207.97 L1542.53 1207.97 L1543.12 1207.97 L1543.7 1207.97 L1544.29 1207.97 L1544.88 1207.97 L1545.46 1207.97 L1546.05 1207.97 L1546.64 1207.97 L1547.22 1207.97 L1547.81 1207.97 L1548.4 1207.97 L1548.98 1207.97 L1549.57 1207.97 L1550.15 1207.97 L1550.74 1207.97 L1551.33 1207.97 L1551.91 1207.97 L1552.5 1207.97 L1553.09 1207.97 L1553.67 1207.97 L1554.26 1207.97 L1554.85 1207.97 L1555.43 1207.97 L1556.02 1207.97 L1556.6 1207.97 L1557.19 1207.97 L1557.78 1207.97 L1558.36 1207.97 L1558.95 1207.97 L1559.54 1207.97 L1560.12 1207.97 L1560.71 1207.97 L1561.3 1207.97 L1561.88 1207.97 L1562.47 1207.97 L1563.06 1207.97 L1563.64 1207.97 L1564.23 1207.97 L1564.81 1207.97 L1565.4 1207.97 L1565.99 1207.97 L1566.57 1207.97 L1567.16 1207.97 L1567.75 1207.97 L1568.33 1207.97 L1568.92 1207.97 L1569.51 1207.97 L1570.09 1207.97 L1570.68 1207.97 L1571.27 1207.97 L1571.85 1207.97 L1572.44 1207.97 L1573.02 1207.97 L1573.61 1207.97 L1574.2 1207.97 L1574.78 1207.97 L1575.37 1207.97 L1575.96 1207.97 L1576.54 1207.97 L1577.13 1207.97 L1577.72 1207.97 L1578.3 1207.97 L1578.89 1207.97 L1579.47 1207.97 L1580.06 1207.97 L1580.65 1207.97 L1581.23 1207.97 L1581.82 1207.97 L1582.41 1207.97 L1582.99 1207.97 L1583.58 1207.97 L1584.17 1207.97 L1584.75 1207.97 L1585.34 1207.97 L1585.93 1207.97 L1586.51 1207.97 L1587.1 1207.97 L1587.68 1207.97 L1588.27 1207.97 L1588.86 1207.97 L1589.44 1207.97 L1590.03 1207.97 L1590.62 1207.97 L1591.2 1207.97 L1591.79 1207.97 L1592.38 1207.97 L1592.96 1207.97 L1593.55 1207.97 L1594.14 1207.97 L1594.72 1207.97 L1595.31 1207.97 L1595.89 1207.97 L1596.48 1207.97 L1597.07 1207.97 L1597.65 1207.97 L1598.24 1207.97 L1598.83 1207.97 L1599.41 1207.97 L1600 1207.97 L1600.59 1207.97 L1601.17 1207.97 L1601.76 1207.97 L1602.34 1207.97 L1602.93 1207.97 L1603.52 1207.97 L1604.1 1207.97 L1604.69 1207.97 L1605.28 1207.97 L1605.86 1207.97 L1606.45 1207.97 L1607.04 1207.97 L1607.62 1207.97 L1608.21 1207.97 L1608.8 1207.97 L1609.38 1207.97 L1609.97 1207.97 L1610.55 1207.97 L1611.14 1207.97 L1611.73 1207.97 L1612.31 1207.97 L1612.9 1207.97 L1613.49 1207.97 L1614.07 1207.97 L1614.66 1207.97 L1615.25 1207.97 L1615.83 1207.97 L1616.42 1207.97 L1617.01 1207.97 L1617.59 1207.97 L1618.18 1207.97 L1618.76 1207.97 L1619.35 1207.97 L1619.94 1207.97 L1620.52 1207.97 L1621.11 1207.97 L1621.7 1207.97 L1622.28 1207.97 L1622.87 1207.97 L1623.46 1207.97 L1624.04 1207.97 L1624.63 1207.97 L1625.22 1207.97 L1625.8 1207.97 L1626.39 1207.97 L1626.97 1207.97 L1627.56 1207.97 L1628.15 1207.97 L1628.73 1207.97 L1629.32 1207.97 L1629.91 1207.97 L1630.49 1207.97 L1631.08 1207.97 L1631.67 1207.97 L1632.25 1207.97 L1632.84 1207.97 L1633.42 1207.97 L1634.01 1207.97 L1634.6 1207.97 L1635.18 1207.97 L1635.77 1207.97 L1636.36 1207.97 L1636.94 1207.97 L1637.53 1207.97 L1638.12 1207.97 L1638.7 1207.97 L1639.29 1207.97 L1639.88 1207.97 L1640.46 1207.97 L1641.05 1207.97 L1641.63 1207.97 L1642.22 1207.97 L1642.81 1207.97 L1643.39 1207.97 L1643.98 1207.97 L1644.57 1207.97 L1645.15 1207.97 L1645.74 1207.97 L1646.33 1207.97 L1646.91 1207.97 L1647.5 1207.97 L1648.09 1207.97 L1648.67 1207.97 L1649.26 1207.97 L1649.84 1207.97 L1650.43 1207.97 L1651.02 1207.97 L1651.6 1207.97 L1652.19 1207.97 L1652.78 1207.97 L1653.36 1207.97 L1653.95 1207.97 L1654.54 1207.97 L1655.12 1207.97 L1655.71 1207.97 L1656.29 1207.97 L1656.88 1207.97 L1657.47 1207.97 L1658.05 1207.97 L1658.64 1207.97 L1659.23 1207.97 L1659.81 1207.97 L1660.4 1207.97 L1660.99 1207.97 L1661.57 1207.97 L1662.16 1207.97 L1662.75 1207.97 L1663.33 1207.97 L1663.92 1207.97 L1664.5 1207.97 L1665.09 1207.97 L1665.68 1207.97 L1666.26 1207.97 L1666.85 1207.97 L1667.44 1207.97 L1668.02 1207.97 L1668.61 1207.97 L1669.2 1207.97 L1669.78 1207.97 L1670.37 1207.97 L1670.96 1207.97 L1671.54 1207.97 L1672.13 1207.97 L1672.71 1207.97 L1673.3 1207.97 L1673.89 1207.97 L1674.47 1207.97 L1675.06 1207.97 L1675.65 1207.97 L1676.23 1207.97 L1676.82 1207.97 L1677.41 1207.97 L1677.99 1207.97 L1678.58 1207.97 L1679.17 1207.97 L1679.75 1207.97 L1680.34 1207.97 L1680.92 1207.97 L1681.51 1207.97 L1682.1 1207.97 L1682.68 1207.97 L1683.27 1207.97 L1683.86 1207.97 L1684.44 1207.97 L1685.03 1207.97 L1685.62 1207.97 L1686.2 1207.97 L1686.79 1207.97 L1687.37 1207.97 L1687.96 1207.97 L1688.55 1207.97 L1689.13 1207.97 L1689.72 1207.97 L1690.31 1207.97 L1690.89 1207.97 L1691.48 1207.97 L1692.07 1207.97 L1692.65 1207.97 L1693.24 1207.97 L1693.83 1207.97 L1694.41 1207.97 L1695 1207.97 L1695.58 1207.97 L1696.17 1207.97 L1696.76 1207.97 L1697.34 1207.97 L1697.93 1207.97 L1698.52 1207.97 L1699.1 1207.97 L1699.69 1207.97 L1700.28 1207.97 L1700.86 1207.97 L1701.45 1207.97 L1702.04 1207.97 L1702.62 1207.97 L1703.21 1207.97 L1703.79 1207.97 L1704.38 1207.97 L1704.97 1207.97 L1705.55 1207.97 L1706.14 1207.97 L1706.73 1207.97 L1707.31 1207.97 L1707.9 1207.97 L1708.49 1207.97 L1709.07 1207.97 L1709.66 1207.97 L1710.24 1207.97 L1710.83 1207.97 L1711.42 1207.97 L1712 1207.97 L1712.59 1207.97 L1713.18 1207.97 L1713.76 1207.97 L1714.35 1207.97 L1714.94 1207.97 L1715.52 1207.97 L1716.11 1207.97 L1716.7 1207.97 L1717.28 1207.97 L1717.87 1207.97 L1718.45 1207.97 L1719.04 1207.97 L1719.63 1207.97 L1720.21 1207.97 L1720.8 1207.97 L1721.39 1207.97 L1721.97 1207.97 L1722.56 1207.97 L1723.15 1207.97 L1723.73 1207.97 L1724.32 1207.97 L1724.91 1207.97 L1725.49 1207.97 L1726.08 1207.97 L1726.66 1207.97 L1727.25 1207.97 L1727.84 1207.97 L1728.42 1207.97 L1729.01 1207.97 L1729.6 1207.97 L1730.18 1207.97 L1730.77 1207.97 L1731.36 1207.97 L1731.94 1207.97 L1732.53 1207.97 L1733.11 1207.97 L1733.7 1207.97 L1734.29 1207.97 L1734.87 1207.97 L1735.46 1207.97 L1736.05 1207.97 L1736.63 1207.97 L1737.22 1207.97 L1737.81 1207.97 L1738.39 1207.97 L1738.98 1207.97 L1739.57 1207.97 L1740.15 1207.97 L1740.74 1207.97 L1741.32 1207.97 L1741.91 1207.97 L1742.5 1207.97 L1743.08 1207.97 L1743.67 1207.97 L1744.26 1207.97 L1744.84 1207.97 L1745.43 1207.97 L1746.02 1207.97 L1746.6 1207.97 L1747.19 1207.97 L1747.78 1207.97 L1748.36 1207.97 L1748.95 1207.97 L1749.53 1207.97 L1750.12 1207.97 L1750.71 1207.97 L1751.29 1207.97 L1751.88 1207.97 L1752.47 1207.97 L1753.05 1207.97 L1753.64 1207.97 L1754.23 1207.97 L1754.81 1207.97 L1755.4 1207.97 L1755.99 1207.97 L1756.57 1207.97 L1757.16 1207.97 L1757.74 1207.97 L1758.33 1207.97 L1758.92 1207.97 L1759.5 1207.97 L1760.09 1207.97 L1760.68 1207.97 L1761.26 1207.97 L1761.85 1207.97 L1762.44 1207.97 L1763.02 1207.97 L1763.61 1207.97 L1764.19 1207.97 L1764.78 1207.97 L1765.37 1207.97 L1765.95 1207.97 L1766.54 1207.97 L1767.13 1207.97 L1767.71 1207.97 L1768.3 1207.97 L1768.89 1207.97 L1769.47 1207.97 L1770.06 1207.97 L1770.65 1207.97 L1771.23 1207.97 L1771.82 1207.97 L1772.4 1207.97 L1772.99 1207.97 L1773.58 1207.97 L1774.16 1207.97 L1774.75 1207.97 L1775.34 1207.97 L1775.92 1207.97 L1776.51 1207.97 L1777.1 1207.97 L1777.68 1207.97 L1778.27 1207.97 L1778.86 1207.97 L1779.44 1207.97 L1780.03 1207.97 L1780.61 1207.97 L1781.2 1207.97 L1781.79 1207.97 L1782.37 1207.97 L1782.96 1207.97 L1783.55 1207.97 L1784.13 1207.97 L1784.72 1207.97 L1785.31 1207.97 L1785.89 1207.97 L1786.48 1207.97 L1787.06 1207.97 L1787.65 1207.97 L1788.24 1207.97 L1788.82 1207.97 L1789.41 1207.97 L1790 1207.97 L1790.58 1207.97 L1791.17 1207.97 L1791.76 1207.97 L1792.34 1207.97 L1792.93 1207.97 L1793.52 1207.97 L1794.1 1207.97 L1794.69 1207.97 L1795.27 1207.97 L1795.86 1207.97 L1796.45 1207.97 L1797.03 1207.97 L1797.62 1207.97 L1798.21 1207.97 L1798.79 1207.97 L1799.38 1207.97 L1799.97 1207.97 L1800.55 1207.97 L1801.14 1207.97 L1801.73 1207.97 L1802.31 1207.97 L1802.9 1207.97 L1803.48 1207.97 L1804.07 1207.97 L1804.66 1207.97 L1805.24 1207.97 L1805.83 1207.97 L1806.42 1207.97 L1807 1207.97 L1807.59 1207.97 L1808.18 1207.97 L1808.76 1207.97 L1809.35 1207.97 L1809.94 1207.97 L1810.52 1207.97 L1811.11 1207.97 L1811.69 1207.97 L1812.28 1207.97 L1812.87 1207.97 L1813.45 1207.97 L1814.04 1207.97 L1814.63 1207.97 L1815.21 1207.97 L1815.8 1207.97 L1816.39 1207.97 L1816.97 1207.97 L1817.56 1207.97 L1818.14 1207.97 L1818.73 1207.97 L1819.32 1207.97 L1819.9 1207.97 L1820.49 1207.97 L1821.08 1207.97 L1821.66 1207.97 L1822.25 1207.97 L1822.84 1207.97 L1823.42 1207.97 L1824.01 1207.97 L1824.6 1207.97 L1825.18 1207.97 L1825.77 1207.97 L1826.35 1207.97 L1826.94 1207.97 L1827.53 1207.97 L1828.11 1207.97 L1828.7 1207.97 L1829.29 1207.97 L1829.87 1207.97 L1830.46 1207.97 L1831.05 1207.97 L1831.63 1207.97 L1832.22 1207.97 L1832.81 1207.97 L1833.39 1207.97 L1833.98 1207.97 L1834.56 1207.97 L1835.15 1207.97 L1835.74 1207.97 L1836.32 1207.97 L1836.91 1207.97 L1837.5 1207.97 L1838.08 1207.97 L1838.67 1207.97 L1839.26 1207.97 L1839.84 1207.97 L1840.43 1207.97 L1841.01 1207.97 L1841.6 1207.97 L1842.19 1207.97 L1842.77 1207.97 L1843.36 1207.97 L1843.95 1207.97 L1844.53 1207.97 L1845.12 1207.97 L1845.71 1207.97 L1846.29 1207.97 L1846.88 1207.97 L1847.47 1207.97 L1848.05 1207.97 L1848.64 1207.97 L1849.22 1207.97 L1849.81 1207.97 L1850.4 1207.97 L1850.98 1207.97 L1851.57 1207.97 L1852.16 1207.97 L1852.74 1207.97 L1853.33 1207.97 L1853.92 1207.97 L1854.5 1207.97 L1855.09 1207.97 L1855.68 1207.97 L1856.26 1207.97 L1856.85 1207.97 L1857.43 1207.97 L1858.02 1207.97 L1858.61 1207.97 L1859.19 1207.97 L1859.78 1207.97 L1860.37 1207.97 L1860.95 1207.97 L1861.54 1207.97 L1862.13 1207.97 L1862.71 1207.97 L1863.3 1207.97 L1863.88 1207.97 L1864.47 1207.97 L1865.06 1207.97 L1865.64 1207.97 L1866.23 1207.97 L1866.82 1207.97 L1867.4 1207.97 L1867.99 1207.97 L1868.58 1207.97 L1869.16 1207.97 L1869.75 1207.97 L1870.34 1207.97 L1870.92 1207.97 L1871.51 1207.97 L1872.09 1207.97 L1872.68 1207.97 L1873.27 1207.97 L1873.85 1207.97 L1874.44 1207.97 L1875.03 1207.97 L1875.61 1207.97 L1876.2 1207.97 L1876.79 1207.97 L1877.37 1207.97 L1877.96 1207.97 L1878.55 1207.97 L1879.13 1207.97 L1879.72 1207.97 L1880.3 1207.97 L1880.89 1207.97 L1881.48 1207.97 L1882.06 1207.97 L1882.65 1207.97 L1883.24 1207.97 L1883.82 1207.97 L1884.41 1207.97 L1885 1207.97 L1885.58 1207.97 L1886.17 1207.97 L1886.76 1207.97 L1887.34 1207.97 L1887.93 1207.97 L1888.51 1207.97 L1889.1 1207.97 L1889.69 1207.97 L1890.27 1207.97 L1890.86 1207.97 L1891.45 1207.97 L1892.03 1207.97 L1892.62 1207.97 L1893.21 1207.97 L1893.79 1207.97 L1894.38 1207.97 L1894.96 1207.97 L1895.55 1207.97 L1896.14 1207.97 L1896.72 1207.97 L1897.31 1207.97 L1897.9 1207.97 L1898.48 1207.97 L1899.07 1207.97 L1899.66 1207.97 L1900.24 1207.97 L1900.83 1207.97 L1901.42 1207.97 L1902 1207.97 L1902.59 1207.97 L1903.17 1207.97 L1903.76 1207.97 L1904.35 1207.97 L1904.93 1207.97 L1905.52 1207.97 L1906.11 1207.97 L1906.69 1207.97 L1907.28 1207.97 L1907.87 1207.97 L1908.45 1207.97 L1909.04 1207.97 L1909.63 1207.97 L1910.21 1207.97 L1910.8 1207.97 L1911.38 1207.97 L1911.97 1207.97 L1912.56 1207.97 L1913.14 1207.97 L1913.73 1207.97 L1914.32 1207.97 L1914.9 1207.97 L1915.49 1207.97 L1916.08 1207.97 L1916.66 1207.97 L1917.25 1207.97 L1917.83 1207.97 L1918.42 1207.97 L1919.01 1207.97 L1919.59 1207.97 L1920.18 1207.97 L1920.77 1207.97 L1921.35 1207.97 L1921.94 1207.97 L1922.53 1207.97 L1923.11 1207.97 L1923.7 1207.97 L1924.29 1207.97 L1924.87 1207.97 L1925.46 1207.97 L1926.04 1207.97 L1926.63 1207.97 L1927.22 1207.97 L1927.8 1207.97 L1928.39 1207.97 L1928.98 1207.97 L1929.56 1207.97 L1930.15 1207.97 L1930.74 1207.97 L1931.32 1207.97 L1931.91 1207.97 L1932.5 1207.97 L1933.08 1207.97 L1933.67 1207.97 L1934.25 1207.97 L1934.84 1207.97 L1935.43 1207.97 L1936.01 1207.97 L1936.6 1207.97 L1937.19 1207.97 L1937.77 1207.97 L1938.36 1207.97 L1938.95 1207.97 L1939.53 1207.97 L1940.12 1207.97 L1940.71 1207.97 L1941.29 1207.97 L1941.88 1207.97 L1942.46 1207.97 L1943.05 1207.97 L1943.64 1207.97 L1944.22 1207.97 L1944.81 1207.97 L1945.4 1207.97 L1945.98 1207.97 L1946.57 1207.97 L1947.16 1207.97 L1947.74 1207.97 L1948.33 1207.97 L1948.91 1207.97 L1949.5 1207.97 L1950.09 1207.97 L1950.67 1207.97 L1951.26 1207.97 L1951.85 1207.97 L1952.43 1207.97 L1953.02 1207.97 L1953.61 1207.97 L1954.19 1207.97 L1954.78 1207.97 L1955.37 1207.97 L1955.95 1207.97 L1956.54 1207.97 L1957.12 1207.97 L1957.71 1207.97 L1958.3 1207.97 L1958.88 1207.97 L1959.47 1207.97 L1960.06 1207.97 L1960.64 1207.97 L1961.23 1207.97 L1961.82 1207.97 L1962.4 1207.97 L1962.99 1207.97 L1963.58 1207.97 L1964.16 1207.97 L1964.75 1207.97 L1965.33 1207.97 L1965.92 1207.97 L1966.51 1207.97 L1967.09 1207.97 L1967.68 1207.97 L1968.27 1207.97 L1968.85 1207.97 L1969.44 1207.97 L1970.03 1207.97 L1970.61 1207.97 L1971.2 1207.97 L1971.78 1207.97 L1972.37 1207.97 L1972.96 1207.97 L1973.54 1207.97 L1974.13 1207.97 L1974.72 1207.97 L1975.3 1207.97 L1975.89 1207.97 L1976.48 1207.97 L1977.06 1207.97 L1977.65 1207.97 L1978.24 1207.97 L1978.82 1207.97 L1979.41 1207.97 L1979.99 1207.97 L1980.58 1207.97 L1981.17 1207.97 L1981.75 1207.97 L1982.34 1207.97 L1982.93 1207.97 L1983.51 1207.97 L1984.1 1207.97 L1984.69 1207.97 L1985.27 1207.97 L1985.86 1207.97 L1986.45 1207.97 L1987.03 1207.97 L1987.62 1207.97 L1988.2 1207.97 L1988.79 1207.97 L1989.38 1207.97 L1989.96 1207.97 L1990.55 1207.97 L1991.14 1207.97 L1991.72 1207.97 L1992.31 1207.97 L1992.9 1207.97 L1993.48 1207.97 L1994.07 1207.97 L1994.65 1207.97 L1995.24 1207.97 L1995.83 1207.97 L1996.41 1207.97 L1997 1207.97 L1997.59 1207.97 L1998.17 1207.97 L1998.76 1207.97 L1999.35 1207.97 L1999.93 1207.97 L2000.52 1207.97 L2001.11 1207.97 L2001.69 1207.97 L2002.28 1207.97 L2002.86 1207.97 L2003.45 1207.97 L2004.04 1207.97 L2004.62 1207.97 L2005.21 1207.97 L2005.8 1207.97 L2006.38 1207.97 L2006.97 1207.97 L2007.56 1207.97 L2008.14 1207.97 L2008.73 1207.97 L2009.32 1207.97 L2009.9 1207.97 L2010.49 1207.97 L2011.07 1207.97 L2011.66 1207.97 L2012.25 1207.97 L2012.83 1207.97 L2013.42 1207.97 L2014.01 1207.97 L2014.59 1207.97 L2015.18 1207.97 L2015.77 1207.97 L2016.35 1207.97 L2016.94 1207.97 L2017.53 1207.97 L2018.11 1207.97 L2018.7 1207.97 L2019.28 1207.97 L2019.87 1207.97 L2020.46 1207.97 L2021.04 1207.97 L2021.63 1207.97 L2022.22 1207.97 L2022.8 1207.97 L2023.39 1207.97 L2023.98 1207.97 L2024.56 1207.97 L2025.15 1207.97 L2025.73 1207.97 L2026.32 1207.97 L2026.91 1207.97 L2027.49 1207.97 L2028.08 1207.97 L2028.67 1207.97 L2029.25 1207.97 L2029.84 1207.97 L2030.43 1207.97 L2031.01 1207.97 L2031.6 1207.97 L2032.19 1207.97 L2032.77 1207.97 L2033.36 1207.97 L2033.94 1207.97 L2034.53 1207.97 L2035.12 1207.97 L2035.7 1207.97 L2036.29 1207.97 L2036.88 1207.97 L2037.46 1207.97 L2038.05 1207.97 L2038.64 1207.97 L2039.22 1207.97 L2039.81 1207.97 L2040.4 1207.97 L2040.98 1207.97 L2041.57 1207.97 L2042.15 1207.97 L2042.74 1207.97 L2043.33 1207.97 L2043.91 1207.97 L2044.5 1207.97 L2045.09 1207.97 L2045.67 1207.97 L2046.26 1207.97 L2046.85 1207.97 L2047.43 1207.97 L2048.02 1207.97 L2048.6 1207.97 L2049.19 1207.97 L2049.78 1207.97 L2050.36 1207.97 L2050.95 1207.97 L2051.54 1207.97 L2052.12 1207.97 L2052.71 1207.97 L2053.3 1207.97 L2053.88 1207.97 L2054.47 1207.97 L2055.06 1207.97 L2055.64 1207.97 L2056.23 1207.97 L2056.81 1207.97 L2057.4 1207.97 L2057.99 1207.97 L2058.57 1207.97 L2059.16 1207.97 L2059.75 1207.97 L2060.33 1207.97 L2060.92 1207.97 L2061.51 1207.97 L2062.09 1207.97 L2062.68 1207.97 L2063.27 1207.97 L2063.85 1207.97 L2064.44 1207.97 L2065.02 1207.97 L2065.61 1207.97 L2066.2 1207.97 L2066.78 1207.97 L2067.37 1207.97 L2067.96 1207.97 L2068.54 1207.97 L2069.13 1207.97 L2069.72 1207.97 L2070.3 1207.97 L2070.89 1207.97 L2071.48 1207.97 L2072.06 1207.97 L2072.65 1207.97 L2073.23 1207.97 L2073.82 1207.97 L2074.41 1207.97 L2074.99 1207.97 L2075.58 1207.97 L2076.17 1207.97 L2076.75 1207.97 L2077.34 1207.97 L2077.93 1207.97 L2078.51 1207.97 L2079.1 1207.97 L2079.68 1207.97 L2080.27 1207.97 L2080.86 1207.97 L2081.44 1207.97 L2082.03 1207.97 L2082.62 1207.97 L2083.2 1207.97 L2083.79 1207.97 L2084.38 1207.97 L2084.96 1207.97 L2085.55 1207.97 L2086.14 1207.97 L2086.72 1207.97 L2087.31 1207.97 L2087.89 1207.97 L2088.48 1207.97 L2089.07 1207.97 L2089.65 1207.97 L2090.24 1207.97 L2090.83 1207.97 L2091.41 1207.97 L2092 1207.97 L2092.59 1207.97 L2093.17 1207.97 L2093.76 1207.97 L2094.35 1207.97 L2094.93 1207.97 L2095.52 1207.97 L2096.1 1207.97 L2096.69 1207.97 L2097.28 1207.97 L2097.86 1207.97 L2098.45 1207.97 L2099.04 1207.97 L2099.62 1207.97 L2100.21 1207.97 L2100.8 1207.97 L2101.38 1207.97 L2101.97 1207.97 L2102.55 1207.97 L2103.14 1207.97 L2103.73 1207.97 L2104.31 1207.97 L2104.9 1207.97 L2105.49 1207.97 L2106.07 1207.97 L2106.66 1207.97 L2107.25 1207.97 L2107.83 1207.97 L2108.42 1207.97 L2109.01 1207.97 L2109.59 1207.97 L2110.18 1207.97 L2110.76 1207.97 L2111.35 1207.97 L2111.94 1207.97 L2112.52 1207.97 L2113.11 1207.97 L2113.7 1207.97 L2114.28 1207.97 L2114.87 1207.97 L2115.46 1207.97 L2116.04 1207.97 L2116.63 1207.97 L2117.22 1207.97 L2117.8 1207.97 L2118.39 1207.97 L2118.97 1207.97 L2119.56 1207.97 L2120.15 1207.97 L2120.73 1207.97 L2121.32 1207.97 L2121.91 1207.97 L2122.49 1207.97 L2123.08 1207.97 L2123.67 1207.97 L2124.25 1207.97 L2124.84 1207.97 L2125.42 1207.97 L2126.01 1207.97 L2126.6 1207.97 L2127.18 1207.97 L2127.77 1207.97 L2128.36 1207.97 L2128.94 1207.97 L2129.53 1207.97 L2130.12 1207.97 L2130.7 1207.97 L2131.29 1207.97 L2131.88 1207.97 L2132.46 1207.97 L2133.05 1207.97 L2133.63 1207.97 L2134.22 1207.97 L2134.81 1207.97 L2135.39 1207.97 L2135.98 1207.97 L2136.57 1207.97 L2137.15 1207.97 L2137.74 1207.97 L2138.33 1207.97 L2138.91 1207.97 L2139.5 1207.97 L2140.09 1207.97 L2140.67 1207.97 L2141.26 1207.97 L2141.84 1207.97 L2142.43 1207.97 L2143.02 1207.97 L2143.6 1207.97 L2144.19 1207.97 L2144.78 1207.97 L2145.36 1207.97 L2145.95 1207.97 L2146.54 1207.97 L2147.12 1207.97 L2147.71 1207.97 L2148.3 1207.97 L2148.88 1207.97 L2149.47 1207.97 L2150.05 1207.97 L2150.64 1207.97 L2151.23 1207.97 L2151.81 1207.97 L2152.4 1207.97 L2152.99 1207.97 L2153.57 1207.97 L2154.16 1207.97 L2154.75 1207.97 L2155.33 1207.97 L2155.92 1207.97 L2156.5 1207.97 L2157.09 1207.97 L2157.68 1207.97 L2158.26 1207.97 L2158.26 1207.35 L2157.68 1207.35 L2157.09 1207.35 L2156.5 1207.35 L2155.92 1207.35 L2155.33 1207.35 L2154.75 1207.35 L2154.16 1207.35 L2153.57 1207.35 L2152.99 1207.35 L2152.4 1207.35 L2151.81 1207.35 L2151.23 1207.35 L2150.64 1207.35 L2150.05 1207.35 L2149.47 1207.35 L2148.88 1207.35 L2148.3 1207.35 L2147.71 1207.35 L2147.12 1207.35 L2146.54 1207.35 L2145.95 1207.35 L2145.36 1207.35 L2144.78 1207.35 L2144.19 1207.35 L2143.6 1207.35 L2143.02 1207.35 L2142.43 1207.35 L2141.84 1207.35 L2141.26 1207.35 L2140.67 1207.35 L2140.09 1207.35 L2139.5 1207.35 L2138.91 1207.35 L2138.33 1207.35 L2137.74 1207.35 L2137.15 1207.35 L2136.57 1207.35 L2135.98 1207.35 L2135.39 1207.35 L2134.81 1207.35 L2134.22 1207.35 L2133.63 1207.35 L2133.05 1207.35 L2132.46 1207.35 L2131.88 1207.35 L2131.29 1207.35 L2130.7 1207.35 L2130.12 1207.35 L2129.53 1207.35 L2128.94 1207.35 L2128.36 1207.35 L2127.77 1207.35 L2127.18 1207.35 L2126.6 1207.35 L2126.01 1207.35 L2125.42 1207.35 L2124.84 1207.35 L2124.25 1207.35 L2123.67 1207.35 L2123.08 1207.35 L2122.49 1207.35 L2121.91 1207.35 L2121.32 1207.35 L2120.73 1207.35 L2120.15 1207.35 L2119.56 1207.35 L2118.97 1207.35 L2118.39 1207.35 L2117.8 1207.35 L2117.22 1207.35 L2116.63 1207.35 L2116.04 1207.35 L2115.46 1207.35 L2114.87 1207.35 L2114.28 1207.35 L2113.7 1207.35 L2113.11 1207.35 L2112.52 1207.35 L2111.94 1207.35 L2111.35 1207.35 L2110.76 1207.35 L2110.18 1207.35 L2109.59 1207.35 L2109.01 1207.35 L2108.42 1207.35 L2107.83 1207.35 L2107.25 1207.35 L2106.66 1207.35 L2106.07 1207.35 L2105.49 1207.35 L2104.9 1207.35 L2104.31 1207.35 L2103.73 1207.35 L2103.14 1207.35 L2102.55 1207.35 L2101.97 1207.35 L2101.38 1207.35 L2100.8 1207.35 L2100.21 1207.35 L2099.62 1207.35 L2099.04 1207.35 L2098.45 1207.35 L2097.86 1207.35 L2097.28 1207.35 L2096.69 1207.35 L2096.1 1207.35 L2095.52 1207.35 L2094.93 1207.35 L2094.35 1207.35 L2093.76 1207.35 L2093.17 1207.35 L2092.59 1207.35 L2092 1207.35 L2091.41 1207.35 L2090.83 1207.35 L2090.24 1207.35 L2089.65 1207.35 L2089.07 1207.35 L2088.48 1207.35 L2087.89 1207.35 L2087.31 1207.35 L2086.72 1207.35 L2086.14 1207.35 L2085.55 1207.35 L2084.96 1207.35 L2084.38 1207.35 L2083.79 1207.35 L2083.2 1207.35 L2082.62 1207.35 L2082.03 1207.35 L2081.44 1207.35 L2080.86 1207.35 L2080.27 1207.35 L2079.68 1207.35 L2079.1 1207.35 L2078.51 1207.35 L2077.93 1207.35 L2077.34 1207.35 L2076.75 1207.35 L2076.17 1207.35 L2075.58 1207.35 L2074.99 1207.35 L2074.41 1207.35 L2073.82 1207.35 L2073.23 1207.35 L2072.65 1207.35 L2072.06 1207.35 L2071.48 1207.35 L2070.89 1207.35 L2070.3 1207.35 L2069.72 1207.35 L2069.13 1207.35 L2068.54 1207.35 L2067.96 1207.35 L2067.37 1207.35 L2066.78 1207.35 L2066.2 1207.35 L2065.61 1207.35 L2065.02 1207.35 L2064.44 1207.35 L2063.85 1207.35 L2063.27 1207.35 L2062.68 1207.35 L2062.09 1207.35 L2061.51 1207.35 L2060.92 1207.35 L2060.33 1207.35 L2059.75 1207.35 L2059.16 1207.35 L2058.57 1207.35 L2057.99 1207.35 L2057.4 1207.35 L2056.81 1207.35 L2056.23 1207.35 L2055.64 1207.35 L2055.06 1207.35 L2054.47 1207.35 L2053.88 1207.35 L2053.3 1207.35 L2052.71 1207.35 L2052.12 1207.35 L2051.54 1207.35 L2050.95 1207.35 L2050.36 1207.35 L2049.78 1207.35 L2049.19 1207.35 L2048.6 1207.35 L2048.02 1207.35 L2047.43 1207.35 L2046.85 1207.35 L2046.26 1207.35 L2045.67 1207.35 L2045.09 1207.35 L2044.5 1207.35 L2043.91 1207.35 L2043.33 1207.35 L2042.74 1207.35 L2042.15 1207.35 L2041.57 1207.35 L2040.98 1207.35 L2040.4 1207.35 L2039.81 1207.35 L2039.22 1207.35 L2038.64 1207.35 L2038.05 1207.35 L2037.46 1207.35 L2036.88 1207.35 L2036.29 1207.35 L2035.7 1207.35 L2035.12 1207.35 L2034.53 1207.35 L2033.94 1207.35 L2033.36 1207.35 L2032.77 1207.35 L2032.19 1207.35 L2031.6 1207.35 L2031.01 1207.35 L2030.43 1207.35 L2029.84 1207.35 L2029.25 1207.35 L2028.67 1207.35 L2028.08 1207.35 L2027.49 1207.35 L2026.91 1207.35 L2026.32 1207.35 L2025.73 1207.35 L2025.15 1207.35 L2024.56 1207.35 L2023.98 1207.35 L2023.39 1207.35 L2022.8 1207.35 L2022.22 1207.35 L2021.63 1207.35 L2021.04 1207.35 L2020.46 1207.35 L2019.87 1207.35 L2019.28 1207.35 L2018.7 1207.35 L2018.11 1207.35 L2017.53 1207.35 L2016.94 1207.35 L2016.35 1207.35 L2015.77 1207.35 L2015.18 1207.35 L2014.59 1207.35 L2014.01 1207.35 L2013.42 1207.35 L2012.83 1207.35 L2012.25 1207.35 L2011.66 1207.35 L2011.07 1207.35 L2010.49 1207.35 L2009.9 1207.35 L2009.32 1207.35 L2008.73 1207.35 L2008.14 1207.35 L2007.56 1207.35 L2006.97 1207.35 L2006.38 1207.35 L2005.8 1207.35 L2005.21 1207.35 L2004.62 1207.35 L2004.04 1207.35 L2003.45 1207.35 L2002.86 1207.35 L2002.28 1207.35 L2001.69 1207.35 L2001.11 1207.35 L2000.52 1207.35 L1999.93 1207.35 L1999.35 1207.35 L1998.76 1207.35 L1998.17 1207.35 L1997.59 1207.35 L1997 1207.35 L1996.41 1207.35 L1995.83 1207.35 L1995.24 1207.35 L1994.65 1207.35 L1994.07 1207.35 L1993.48 1207.35 L1992.9 1207.35 L1992.31 1207.35 L1991.72 1207.35 L1991.14 1207.35 L1990.55 1207.35 L1989.96 1207.35 L1989.38 1207.35 L1988.79 1207.35 L1988.2 1207.35 L1987.62 1207.35 L1987.03 1207.35 L1986.45 1207.35 L1985.86 1207.35 L1985.27 1207.35 L1984.69 1207.35 L1984.1 1207.35 L1983.51 1207.35 L1982.93 1207.35 L1982.34 1207.35 L1981.75 1207.35 L1981.17 1207.35 L1980.58 1207.35 L1979.99 1207.35 L1979.41 1207.35 L1978.82 1207.35 L1978.24 1207.35 L1977.65 1207.35 L1977.06 1207.35 L1976.48 1207.35 L1975.89 1207.35 L1975.3 1207.35 L1974.72 1207.35 L1974.13 1207.35 L1973.54 1207.35 L1972.96 1207.35 L1972.37 1207.35 L1971.78 1207.35 L1971.2 1207.35 L1970.61 1207.35 L1970.03 1207.35 L1969.44 1207.35 L1968.85 1207.35 L1968.27 1207.35 L1967.68 1207.35 L1967.09 1207.35 L1966.51 1207.35 L1965.92 1207.35 L1965.33 1207.35 L1964.75 1207.35 L1964.16 1207.35 L1963.58 1207.35 L1962.99 1207.35 L1962.4 1207.35 L1961.82 1207.35 L1961.23 1207.35 L1960.64 1207.35 L1960.06 1207.35 L1959.47 1207.35 L1958.88 1207.35 L1958.3 1207.35 L1957.71 1207.35 L1957.12 1207.35 L1956.54 1207.35 L1955.95 1207.35 L1955.37 1207.35 L1954.78 1207.35 L1954.19 1207.35 L1953.61 1207.35 L1953.02 1207.35 L1952.43 1207.35 L1951.85 1207.35 L1951.26 1207.35 L1950.67 1207.35 L1950.09 1207.35 L1949.5 1207.35 L1948.91 1207.35 L1948.33 1207.35 L1947.74 1207.35 L1947.16 1207.35 L1946.57 1207.35 L1945.98 1207.35 L1945.4 1207.35 L1944.81 1207.35 L1944.22 1207.35 L1943.64 1207.35 L1943.05 1207.35 L1942.46 1207.35 L1941.88 1207.35 L1941.29 1207.35 L1940.71 1207.35 L1940.12 1207.35 L1939.53 1207.35 L1938.95 1207.35 L1938.36 1207.35 L1937.77 1207.35 L1937.19 1207.35 L1936.6 1207.35 L1936.01 1207.35 L1935.43 1207.35 L1934.84 1207.35 L1934.25 1207.35 L1933.67 1207.35 L1933.08 1207.35 L1932.5 1207.35 L1931.91 1207.35 L1931.32 1207.35 L1930.74 1207.35 L1930.15 1207.35 L1929.56 1207.35 L1928.98 1207.35 L1928.39 1207.35 L1927.8 1207.35 L1927.22 1207.35 L1926.63 1207.35 L1926.04 1207.35 L1925.46 1207.35 L1924.87 1207.35 L1924.29 1207.35 L1923.7 1207.35 L1923.11 1207.35 L1922.53 1207.35 L1921.94 1207.35 L1921.35 1207.35 L1920.77 1207.35 L1920.18 1207.35 L1919.59 1207.35 L1919.01 1207.35 L1918.42 1207.35 L1917.83 1207.35 L1917.25 1207.35 L1916.66 1207.35 L1916.08 1207.35 L1915.49 1207.35 L1914.9 1207.35 L1914.32 1207.35 L1913.73 1207.35 L1913.14 1207.35 L1912.56 1207.35 L1911.97 1207.35 L1911.38 1207.35 L1910.8 1207.35 L1910.21 1207.35 L1909.63 1207.35 L1909.04 1207.35 L1908.45 1207.35 L1907.87 1207.35 L1907.28 1207.35 L1906.69 1207.35 L1906.11 1207.35 L1905.52 1207.35 L1904.93 1207.35 L1904.35 1207.35 L1903.76 1207.35 L1903.17 1207.35 L1902.59 1207.35 L1902 1207.35 L1901.42 1207.35 L1900.83 1207.35 L1900.24 1207.35 L1899.66 1207.35 L1899.07 1207.35 L1898.48 1207.35 L1897.9 1207.35 L1897.31 1207.35 L1896.72 1207.35 L1896.14 1207.35 L1895.55 1207.35 L1894.96 1207.35 L1894.38 1207.35 L1893.79 1207.35 L1893.21 1207.35 L1892.62 1207.35 L1892.03 1207.35 L1891.45 1207.35 L1890.86 1207.35 L1890.27 1207.35 L1889.69 1207.35 L1889.1 1207.35 L1888.51 1207.35 L1887.93 1207.35 L1887.34 1207.35 L1886.76 1207.35 L1886.17 1207.35 L1885.58 1207.35 L1885 1207.35 L1884.41 1207.35 L1883.82 1207.35 L1883.24 1207.35 L1882.65 1207.35 L1882.06 1207.35 L1881.48 1207.35 L1880.89 1207.35 L1880.3 1207.35 L1879.72 1207.35 L1879.13 1207.35 L1878.55 1207.35 L1877.96 1207.35 L1877.37 1207.35 L1876.79 1207.35 L1876.2 1207.35 L1875.61 1207.35 L1875.03 1207.35 L1874.44 1207.35 L1873.85 1207.35 L1873.27 1207.35 L1872.68 1207.35 L1872.09 1207.35 L1871.51 1207.35 L1870.92 1207.35 L1870.34 1207.35 L1869.75 1207.35 L1869.16 1207.35 L1868.58 1207.35 L1867.99 1207.35 L1867.4 1207.35 L1866.82 1207.35 L1866.23 1207.35 L1865.64 1207.35 L1865.06 1207.35 L1864.47 1207.35 L1863.88 1207.35 L1863.3 1207.35 L1862.71 1207.35 L1862.13 1207.35 L1861.54 1207.35 L1860.95 1207.35 L1860.37 1207.35 L1859.78 1207.35 L1859.19 1207.35 L1858.61 1207.35 L1858.02 1207.35 L1857.43 1207.35 L1856.85 1207.35 L1856.26 1207.35 L1855.68 1207.35 L1855.09 1207.35 L1854.5 1207.35 L1853.92 1207.35 L1853.33 1207.35 L1852.74 1207.35 L1852.16 1207.35 L1851.57 1207.35 L1850.98 1207.35 L1850.4 1207.35 L1849.81 1207.35 L1849.22 1207.35 L1848.64 1207.35 L1848.05 1207.35 L1847.47 1207.35 L1846.88 1207.35 L1846.29 1207.35 L1845.71 1207.35 L1845.12 1207.35 L1844.53 1207.35 L1843.95 1207.35 L1843.36 1207.35 L1842.77 1207.35 L1842.19 1207.35 L1841.6 1207.35 L1841.01 1207.35 L1840.43 1207.35 L1839.84 1207.35 L1839.26 1207.35 L1838.67 1207.35 L1838.08 1207.35 L1837.5 1207.35 L1836.91 1207.35 L1836.32 1207.35 L1835.74 1207.35 L1835.15 1207.35 L1834.56 1207.35 L1833.98 1207.35 L1833.39 1207.35 L1832.81 1207.35 L1832.22 1207.35 L1831.63 1207.35 L1831.05 1207.35 L1830.46 1207.35 L1829.87 1207.35 L1829.29 1207.35 L1828.7 1207.35 L1828.11 1207.35 L1827.53 1207.35 L1826.94 1207.35 L1826.35 1207.35 L1825.77 1207.35 L1825.18 1207.35 L1824.6 1207.35 L1824.01 1207.35 L1823.42 1207.35 L1822.84 1207.35 L1822.25 1207.35 L1821.66 1207.35 L1821.08 1207.35 L1820.49 1207.35 L1819.9 1207.35 L1819.32 1207.35 L1818.73 1207.35 L1818.14 1207.35 L1817.56 1207.35 L1816.97 1207.35 L1816.39 1207.35 L1815.8 1207.35 L1815.21 1207.35 L1814.63 1207.35 L1814.04 1207.35 L1813.45 1207.35 L1812.87 1207.35 L1812.28 1207.35 L1811.69 1207.35 L1811.11 1207.35 L1810.52 1207.35 L1809.94 1207.35 L1809.35 1207.35 L1808.76 1207.35 L1808.18 1207.35 L1807.59 1207.35 L1807 1207.35 L1806.42 1207.35 L1805.83 1207.35 L1805.24 1207.35 L1804.66 1207.35 L1804.07 1207.35 L1803.48 1207.35 L1802.9 1207.35 L1802.31 1207.35 L1801.73 1207.35 L1801.14 1207.35 L1800.55 1207.35 L1799.97 1207.35 L1799.38 1207.35 L1798.79 1207.35 L1798.21 1207.35 L1797.62 1207.35 L1797.03 1207.35 L1796.45 1207.35 L1795.86 1207.35 L1795.27 1207.35 L1794.69 1207.35 L1794.1 1207.35 L1793.52 1207.35 L1792.93 1207.35 L1792.34 1207.35 L1791.76 1207.35 L1791.17 1207.35 L1790.58 1207.35 L1790 1207.35 L1789.41 1207.35 L1788.82 1207.35 L1788.24 1207.35 L1787.65 1207.35 L1787.06 1207.35 L1786.48 1207.35 L1785.89 1207.35 L1785.31 1207.35 L1784.72 1207.35 L1784.13 1207.35 L1783.55 1207.35 L1782.96 1207.35 L1782.37 1207.35 L1781.79 1207.35 L1781.2 1207.35 L1780.61 1207.35 L1780.03 1207.35 L1779.44 1207.35 L1778.86 1207.35 L1778.27 1207.35 L1777.68 1207.35 L1777.1 1207.35 L1776.51 1207.35 L1775.92 1207.35 L1775.34 1207.35 L1774.75 1207.35 L1774.16 1207.35 L1773.58 1207.35 L1772.99 1207.35 L1772.4 1207.35 L1771.82 1207.35 L1771.23 1207.35 L1770.65 1207.35 L1770.06 1207.35 L1769.47 1207.35 L1768.89 1207.35 L1768.3 1207.35 L1767.71 1207.35 L1767.13 1207.35 L1766.54 1207.35 L1765.95 1207.35 L1765.37 1207.35 L1764.78 1207.35 L1764.19 1207.35 L1763.61 1207.35 L1763.02 1207.35 L1762.44 1207.35 L1761.85 1207.35 L1761.26 1207.35 L1760.68 1207.35 L1760.09 1207.35 L1759.5 1207.35 L1758.92 1207.35 L1758.33 1207.35 L1757.74 1207.35 L1757.16 1207.35 L1756.57 1207.35 L1755.99 1207.35 L1755.4 1207.35 L1754.81 1207.35 L1754.23 1207.35 L1753.64 1207.35 L1753.05 1207.35 L1752.47 1207.35 L1751.88 1207.35 L1751.29 1207.35 L1750.71 1207.35 L1750.12 1207.35 L1749.53 1207.35 L1748.95 1207.35 L1748.36 1207.35 L1747.78 1207.35 L1747.19 1207.35 L1746.6 1207.35 L1746.02 1207.35 L1745.43 1207.35 L1744.84 1207.35 L1744.26 1207.35 L1743.67 1207.35 L1743.08 1207.35 L1742.5 1207.35 L1741.91 1207.35 L1741.32 1207.35 L1740.74 1207.35 L1740.15 1207.35 L1739.57 1207.35 L1738.98 1207.35 L1738.39 1207.35 L1737.81 1207.35 L1737.22 1207.35 L1736.63 1207.35 L1736.05 1207.35 L1735.46 1207.35 L1734.87 1207.35 L1734.29 1207.35 L1733.7 1207.35 L1733.11 1207.35 L1732.53 1207.35 L1731.94 1207.35 L1731.36 1207.35 L1730.77 1207.35 L1730.18 1207.35 L1729.6 1207.35 L1729.01 1207.35 L1728.42 1207.35 L1727.84 1207.35 L1727.25 1207.35 L1726.66 1207.35 L1726.08 1207.35 L1725.49 1207.35 L1724.91 1207.35 L1724.32 1207.35 L1723.73 1207.35 L1723.15 1207.35 L1722.56 1207.35 L1721.97 1207.35 L1721.39 1207.35 L1720.8 1207.35 L1720.21 1207.35 L1719.63 1207.35 L1719.04 1207.35 L1718.45 1207.35 L1717.87 1207.35 L1717.28 1207.35 L1716.7 1207.35 L1716.11 1207.35 L1715.52 1207.35 L1714.94 1207.35 L1714.35 1207.35 L1713.76 1207.35 L1713.18 1207.35 L1712.59 1207.35 L1712 1207.35 L1711.42 1207.35 L1710.83 1207.35 L1710.24 1207.35 L1709.66 1207.35 L1709.07 1207.35 L1708.49 1207.35 L1707.9 1207.35 L1707.31 1207.35 L1706.73 1207.35 L1706.14 1207.35 L1705.55 1207.35 L1704.97 1207.35 L1704.38 1207.35 L1703.79 1207.35 L1703.21 1207.35 L1702.62 1207.35 L1702.04 1207.35 L1701.45 1207.35 L1700.86 1207.35 L1700.28 1207.35 L1699.69 1207.35 L1699.1 1207.35 L1698.52 1207.35 L1697.93 1207.35 L1697.34 1207.35 L1696.76 1207.35 L1696.17 1207.35 L1695.58 1207.35 L1695 1207.35 L1694.41 1207.35 L1693.83 1207.35 L1693.24 1207.35 L1692.65 1207.35 L1692.07 1207.35 L1691.48 1207.35 L1690.89 1207.35 L1690.31 1207.35 L1689.72 1207.35 L1689.13 1207.35 L1688.55 1207.35 L1687.96 1207.35 L1687.37 1207.35 L1686.79 1207.35 L1686.2 1207.35 L1685.62 1207.35 L1685.03 1207.35 L1684.44 1207.35 L1683.86 1207.35 L1683.27 1207.35 L1682.68 1207.35 L1682.1 1207.35 L1681.51 1207.35 L1680.92 1207.35 L1680.34 1207.35 L1679.75 1207.35 L1679.17 1207.35 L1678.58 1207.35 L1677.99 1207.35 L1677.41 1207.35 L1676.82 1207.35 L1676.23 1207.35 L1675.65 1207.35 L1675.06 1207.35 L1674.47 1207.35 L1673.89 1207.35 L1673.3 1207.35 L1672.71 1207.35 L1672.13 1207.35 L1671.54 1207.35 L1670.96 1207.35 L1670.37 1207.35 L1669.78 1207.35 L1669.2 1207.35 L1668.61 1207.35 L1668.02 1207.35 L1667.44 1207.35 L1666.85 1207.35 L1666.26 1207.35 L1665.68 1207.35 L1665.09 1207.35 L1664.5 1207.35 L1663.92 1207.35 L1663.33 1207.35 L1662.75 1207.35 L1662.16 1207.35 L1661.57 1207.35 L1660.99 1207.35 L1660.4 1207.35 L1659.81 1207.35 L1659.23 1207.35 L1658.64 1207.35 L1658.05 1207.35 L1657.47 1207.35 L1656.88 1207.35 L1656.29 1207.35 L1655.71 1207.35 L1655.12 1207.35 L1654.54 1207.35 L1653.95 1207.35 L1653.36 1207.35 L1652.78 1207.35 L1652.19 1207.35 L1651.6 1207.35 L1651.02 1207.35 L1650.43 1207.35 L1649.84 1207.35 L1649.26 1207.35 L1648.67 1207.35 L1648.09 1207.35 L1647.5 1207.35 L1646.91 1207.35 L1646.33 1207.35 L1645.74 1207.35 L1645.15 1207.35 L1644.57 1207.35 L1643.98 1207.35 L1643.39 1207.35 L1642.81 1207.35 L1642.22 1207.35 L1641.63 1207.35 L1641.05 1207.35 L1640.46 1207.35 L1639.88 1207.35 L1639.29 1207.35 L1638.7 1207.35 L1638.12 1207.35 L1637.53 1207.35 L1636.94 1207.35 L1636.36 1207.35 L1635.77 1207.35 L1635.18 1207.35 L1634.6 1207.35 L1634.01 1207.35 L1633.42 1207.35 L1632.84 1207.35 L1632.25 1207.35 L1631.67 1207.35 L1631.08 1207.35 L1630.49 1207.35 L1629.91 1207.35 L1629.32 1207.35 L1628.73 1207.35 L1628.15 1207.35 L1627.56 1207.35 L1626.97 1207.35 L1626.39 1207.35 L1625.8 1207.35 L1625.22 1207.35 L1624.63 1207.35 L1624.04 1207.35 L1623.46 1207.35 L1622.87 1207.35 L1622.28 1207.35 L1621.7 1207.35 L1621.11 1207.35 L1620.52 1207.35 L1619.94 1207.35 L1619.35 1207.35 L1618.76 1207.35 L1618.18 1207.35 L1617.59 1207.35 L1617.01 1207.35 L1616.42 1207.35 L1615.83 1207.35 L1615.25 1207.35 L1614.66 1207.35 L1614.07 1207.35 L1613.49 1207.35 L1612.9 1207.35 L1612.31 1207.35 L1611.73 1207.35 L1611.14 1207.35 L1610.55 1207.35 L1609.97 1207.35 L1609.38 1207.35 L1608.8 1207.35 L1608.21 1207.35 L1607.62 1207.35 L1607.04 1207.35 L1606.45 1207.35 L1605.86 1207.35 L1605.28 1207.35 L1604.69 1207.35 L1604.1 1207.35 L1603.52 1207.35 L1602.93 1207.35 L1602.34 1207.35 L1601.76 1207.35 L1601.17 1207.35 L1600.59 1207.35 L1600 1207.35 L1599.41 1207.35 L1598.83 1207.35 L1598.24 1207.35 L1597.65 1207.35 L1597.07 1207.35 L1596.48 1207.35 L1595.89 1207.35 L1595.31 1207.35 L1594.72 1207.35 L1594.14 1207.35 L1593.55 1207.35 L1592.96 1207.35 L1592.38 1207.35 L1591.79 1207.35 L1591.2 1207.35 L1590.62 1207.35 L1590.03 1207.35 L1589.44 1207.35 L1588.86 1207.35 L1588.27 1207.35 L1587.68 1207.35 L1587.1 1207.35 L1586.51 1207.35 L1585.93 1207.35 L1585.34 1207.35 L1584.75 1207.35 L1584.17 1207.35 L1583.58 1207.35 L1582.99 1207.35 L1582.41 1207.35 L1581.82 1207.35 L1581.23 1207.35 L1580.65 1207.35 L1580.06 1207.35 L1579.47 1207.35 L1578.89 1207.35 L1578.3 1207.35 L1577.72 1207.35 L1577.13 1207.35 L1576.54 1207.35 L1575.96 1207.35 L1575.37 1207.35 L1574.78 1207.35 L1574.2 1207.35 L1573.61 1207.35 L1573.02 1207.35 L1572.44 1207.35 L1571.85 1207.35 L1571.27 1207.35 L1570.68 1207.35 L1570.09 1207.35 L1569.51 1207.35 L1568.92 1207.35 L1568.33 1207.35 L1567.75 1207.35 L1567.16 1207.35 L1566.57 1207.35 L1565.99 1207.35 L1565.4 1207.35 L1564.81 1207.35 L1564.23 1207.35 L1563.64 1207.35 L1563.06 1207.35 L1562.47 1207.35 L1561.88 1207.35 L1561.3 1207.35 L1560.71 1207.35 L1560.12 1207.35 L1559.54 1207.35 L1558.95 1207.35 L1558.36 1207.35 L1557.78 1207.35 L1557.19 1207.35 L1556.6 1207.35 L1556.02 1207.35 L1555.43 1207.35 L1554.85 1207.35 L1554.26 1207.35 L1553.67 1207.35 L1553.09 1207.35 L1552.5 1207.35 L1551.91 1207.35 L1551.33 1207.35 L1550.74 1207.35 L1550.15 1207.35 L1549.57 1207.35 L1548.98 1207.35 L1548.4 1207.35 L1547.81 1207.35 L1547.22 1207.35 L1546.64 1207.35 L1546.05 1207.35 L1545.46 1207.35 L1544.88 1207.35 L1544.29 1207.35 L1543.7 1207.35 L1543.12 1207.35 L1542.53 1207.35 L1541.94 1207.35 L1541.36 1207.35 L1540.77 1207.35 L1540.19 1207.35 L1539.6 1207.35 L1539.01 1207.35 L1538.43 1207.35 L1537.84 1207.35 L1537.25 1207.35 L1536.67 1207.35 L1536.08 1207.35 L1535.49 1207.35 L1534.91 1207.35 L1534.32 1207.35 L1533.73 1207.35 L1533.15 1207.35 L1532.56 1207.35 L1531.98 1207.35 L1531.39 1207.35 L1530.8 1207.35 L1530.22 1207.35 L1529.63 1207.35 L1529.04 1207.35 L1528.46 1207.35 L1527.87 1207.35 L1527.28 1207.35 L1526.7 1207.35 L1526.11 1207.35 L1525.52 1207.35 L1524.94 1207.35 L1524.35 1207.35 L1523.77 1207.35 L1523.18 1207.35 L1522.59 1207.35 L1522.01 1207.35 L1521.42 1207.35 L1520.83 1207.35 L1520.25 1207.35 L1519.66 1207.35 L1519.07 1207.35 L1518.49 1207.35 L1517.9 1207.35 L1517.32 1207.35 L1516.73 1207.35 L1516.14 1207.35 L1515.56 1207.35 L1514.97 1207.35 L1514.38 1207.35 L1513.8 1207.35 L1513.21 1207.35 L1512.62 1207.35 L1512.04 1207.35 L1511.45 1207.35 L1510.86 1207.35 L1510.28 1207.35 L1509.69 1207.35 L1509.11 1207.35 L1508.52 1207.35 L1507.93 1207.35 L1507.35 1207.35 L1506.76 1207.35 L1506.17 1207.35 L1505.59 1207.35 L1505 1207.35 L1504.41 1207.35 L1503.83 1207.35 L1503.24 1207.35 L1502.65 1207.35 L1502.07 1207.35 L1501.48 1207.35 L1500.9 1207.35 L1500.31 1207.35 L1499.72 1207.35 L1499.14 1207.35 L1498.55 1207.35 L1497.96 1207.35 L1497.38 1207.35 L1496.79 1207.35 L1496.2 1207.35 L1495.62 1207.35 L1495.03 1207.35 L1494.45 1207.35 L1493.86 1207.35 L1493.27 1207.35 L1492.69 1207.35 L1492.1 1207.35 L1491.51 1207.35 L1490.93 1207.35 L1490.34 1207.35 L1489.75 1207.35 L1489.17 1207.35 L1488.58 1207.35 L1487.99 1207.35 L1487.41 1207.35 L1486.82 1207.35 L1486.24 1207.35 L1485.65 1207.35 L1485.06 1207.35 L1484.48 1207.35 L1483.89 1207.35 L1483.3 1207.35 L1482.72 1207.35 L1482.13 1207.35 L1481.54 1207.35 L1480.96 1207.35 L1480.37 1207.35 L1479.78 1207.35 L1479.2 1207.35 L1478.61 1207.35 L1478.03 1207.35 L1477.44 1207.35 L1476.85 1207.35 L1476.27 1207.35 L1475.68 1207.35 L1475.09 1207.35 L1474.51 1207.35 L1473.92 1207.35 L1473.33 1207.35 L1472.75 1207.35 L1472.16 1207.35 L1471.57 1207.35 L1470.99 1207.35 L1470.4 1207.35 L1469.82 1207.35 L1469.23 1207.35 L1468.64 1207.35 L1468.06 1207.35 L1467.47 1207.35 L1466.88 1207.35 L1466.3 1207.35 L1465.71 1207.35 L1465.12 1207.35 L1464.54 1207.35 L1463.95 1207.35 L1463.37 1207.35 L1462.78 1207.35 L1462.19 1207.35 L1461.61 1207.35 L1461.02 1207.35 L1460.43 1207.35 L1459.85 1207.35 L1459.26 1207.35 L1458.67 1207.35 L1458.09 1207.35 L1457.5 1207.35 L1456.91 1207.35 L1456.33 1207.35 L1455.74 1207.35 L1455.16 1207.35 L1454.57 1207.35 L1453.98 1207.35 L1453.4 1207.35 L1452.81 1207.35 L1452.22 1207.35 L1451.64 1207.35 L1451.05 1207.35 L1450.46 1207.35 L1449.88 1207.35 L1449.29 1207.35 L1448.7 1207.35 L1448.12 1207.35 L1447.53 1207.35 L1446.95 1207.35 L1446.36 1207.35 L1445.77 1207.35 L1445.19 1207.35 L1444.6 1207.35 L1444.01 1207.35 L1443.43 1207.35 L1442.84 1207.35 L1442.25 1207.35 L1441.67 1207.35 L1441.08 1207.35 L1440.5 1207.35 L1439.91 1207.35 L1439.32 1207.35 L1438.74 1207.35 L1438.15 1207.35 L1437.56 1207.35 L1436.98 1207.35 L1436.39 1207.35 L1435.8 1207.35 L1435.22 1207.35 L1434.63 1207.35 L1434.04 1207.35 L1433.46 1207.35 L1432.87 1207.35 L1432.29 1207.35 L1431.7 1207.35 L1431.11 1207.35 L1430.53 1207.35 L1429.94 1207.35 L1429.35 1207.35 L1428.77 1207.35 L1428.18 1207.35 L1427.59 1207.35 L1427.01 1207.35 L1426.42 1207.35 L1425.83 1207.35 L1425.25 1207.35 L1424.66 1207.35 L1424.08 1207.35 L1423.49 1207.35 L1422.9 1207.35 L1422.32 1207.35 L1421.73 1207.35 L1421.14 1207.35 L1420.56 1207.35 L1419.97 1207.35 L1419.38 1207.35 L1418.8 1207.35 L1418.21 1207.35 L1417.63 1207.35 L1417.04 1207.35 L1416.45 1207.35 L1415.87 1207.35 L1415.28 1207.35 L1414.69 1207.35 L1414.11 1207.35 L1413.52 1207.35 L1412.93 1207.35 L1412.35 1207.35 L1411.76 1207.35 L1411.17 1207.35 L1410.59 1207.35 L1410 1207.35 L1409.42 1207.35 L1408.83 1207.35 L1408.24 1207.35 L1407.66 1207.35 L1407.07 1207.35 L1406.48 1207.35 L1405.9 1207.35 L1405.31 1207.35 L1404.72 1207.35 L1404.14 1207.35 L1403.55 1207.35 L1402.96 1207.35 L1402.38 1207.35 L1401.79 1207.35 L1401.21 1207.35 L1400.62 1207.35 L1400.03 1207.35 L1399.45 1207.35 L1398.86 1207.35 L1398.27 1207.35 L1397.69 1207.35 L1397.1 1207.35 L1396.51 1207.35 L1395.93 1207.35 L1395.34 1207.35 L1394.75 1207.35 L1394.17 1207.35 L1393.58 1207.35 L1393 1207.35 L1392.41 1207.35 L1391.82 1207.35 L1391.24 1207.35 L1390.65 1207.35 L1390.06 1207.35 L1389.48 1207.35 L1388.89 1207.35 L1388.3 1207.35 L1387.72 1207.35 L1387.13 1207.35 L1386.55 1207.35 L1385.96 1207.35 L1385.37 1207.35 L1384.79 1207.35 L1384.2 1207.35 L1383.61 1207.35 L1383.03 1207.35 L1382.44 1207.35 L1381.85 1207.35 L1381.27 1207.35 L1380.68 1207.35 L1380.09 1207.35 L1379.51 1207.35 L1378.92 1207.35 L1378.34 1207.35 L1377.75 1207.35 L1377.16 1207.35 L1376.58 1207.35 L1375.99 1207.35 L1375.4 1207.35 L1374.82 1207.35 L1374.23 1207.35 L1373.64 1207.35 L1373.06 1207.35 L1372.47 1207.35 L1371.88 1207.35 L1371.3 1207.35 L1370.71 1207.35 L1370.13 1207.35 L1369.54 1207.35 L1368.95 1207.35 L1368.37 1207.35 L1367.78 1207.35 L1367.19 1207.35 L1366.61 1207.35 L1366.02 1207.35 L1365.43 1207.35 L1364.85 1207.35 L1364.26 1207.35 L1363.68 1207.35 L1363.09 1207.35 L1362.5 1207.35 L1361.92 1207.35 L1361.33 1207.35 L1360.74 1207.35 L1360.16 1207.35 L1359.57 1207.35 L1358.98 1207.35 L1358.4 1207.35 L1357.81 1207.35 L1357.22 1207.35 L1356.64 1207.35 L1356.05 1207.35 L1355.47 1207.35 L1354.88 1207.35 L1354.29 1207.35 L1353.71 1207.35 L1353.12 1207.35 L1352.53 1207.35 L1351.95 1207.35 L1351.36 1207.35 L1350.77 1207.35 L1350.19 1207.35 L1349.6 1207.35 L1349.01 1207.35 L1348.43 1207.35 L1347.84 1207.35 L1347.26 1207.35 L1346.67 1207.35 L1346.08 1207.35 L1345.5 1207.35 L1344.91 1207.35 L1344.32 1207.35 L1343.74 1207.35 L1343.15 1207.35 L1342.56 1207.35 L1341.98 1207.35 L1341.39 1207.35 L1340.8 1207.35 L1340.22 1207.35 L1339.63 1207.35 L1339.05 1207.35 L1338.46 1207.35 L1337.87 1207.35 L1337.29 1207.35 L1336.7 1207.35 L1336.11 1207.35 L1335.53 1207.35 L1334.94 1207.35 L1334.35 1207.35 L1333.77 1207.35 L1333.18 1207.35 L1332.6 1207.35 L1332.01 1207.35 L1331.42 1207.35 L1330.84 1207.35 L1330.25 1207.35 L1329.66 1207.35 L1329.08 1207.35 L1328.49 1207.35 L1327.9 1207.35 L1327.32 1207.35 L1326.73 1207.35 L1326.14 1207.35 L1325.56 1207.35 L1324.97 1207.35 L1324.39 1207.35 L1323.8 1207.35 L1323.21 1207.35 L1322.63 1207.35 L1322.04 1207.35 L1321.45 1207.35 L1320.87 1207.35 L1320.28 1207.35 L1319.69 1207.35 L1319.11 1207.35 L1318.52 1207.35 L1317.93 1207.35 L1317.35 1207.35 L1316.76 1207.35 L1316.18 1207.35 L1315.59 1207.35 L1315 1207.35 L1314.42 1207.35 L1313.83 1207.35 L1313.24 1207.35 L1312.66 1207.35 L1312.07 1207.35 L1311.48 1207.35 L1310.9 1207.35 L1310.31 1207.35 L1309.73 1207.35 L1309.14 1207.35 L1308.55 1207.35 L1307.97 1207.35 L1307.38 1207.35 L1306.79 1207.35 L1306.21 1207.35 L1305.62 1207.35 L1305.03 1207.35 L1304.45 1207.35 L1303.86 1207.35 L1303.27 1207.35 L1302.69 1207.35 L1302.1 1207.35 L1301.52 1207.35 L1300.93 1207.35 L1300.34 1207.35 L1299.76 1207.35 L1299.17 1207.35 L1298.58 1207.35 L1298 1207.35 L1297.41 1207.35 L1296.82 1207.35 L1296.24 1207.35 L1295.65 1207.35 L1295.06 1207.35 L1294.48 1207.35 L1293.89 1207.35 L1293.31 1207.35 L1292.72 1207.35 L1292.13 1207.35 L1291.55 1207.35 L1290.96 1207.35 L1290.37 1207.35 L1289.79 1207.35 L1289.2 1207.35 L1288.61 1207.35 L1288.03 1207.35 L1287.44 1207.35 L1286.86 1207.35 L1286.27 1207.35 L1285.68 1207.35 L1285.1 1207.35 L1284.51 1207.35 L1283.92 1207.35 L1283.34 1207.35 L1282.75 1207.35 L1282.16 1207.35 L1281.58 1207.35 L1280.99 1207.35 L1280.4 1207.35 L1279.82 1207.35 L1279.23 1207.35 L1278.65 1207.35 L1278.06 1207.35 L1277.47 1207.35 L1276.89 1207.35 L1276.3 1207.35 L1275.71 1207.35 L1275.13 1207.35 L1274.54 1207.35 L1273.95 1207.35 L1273.37 1207.35 L1272.78 1207.35 L1272.19 1207.35 L1271.61 1207.35 L1271.02 1207.35 L1270.44 1207.35 L1269.85 1207.35 L1269.26 1207.35 L1268.68 1207.35 L1268.09 1207.35 L1267.5 1207.35 L1266.92 1207.35 L1266.33 1207.35 L1265.74 1207.35 L1265.16 1207.35 L1264.57 1207.35 L1263.98 1207.35 L1263.4 1207.35 L1262.81 1207.35 L1262.23 1207.35 L1261.64 1207.35 L1261.05 1207.35 L1260.47 1207.35 L1259.88 1207.35 L1259.29 1207.35 L1258.71 1207.35 L1258.12 1207.35 L1257.53 1207.35 L1256.95 1207.35 L1256.36 1207.35 L1255.78 1207.35 L1255.19 1207.35 L1254.6 1207.35 L1254.02 1207.35 L1253.43 1207.35 L1252.84 1207.35 L1252.26 1207.35 L1251.67 1207.35 L1251.08 1207.35 L1250.5 1207.35 L1249.91 1207.35 L1249.32 1207.35 L1248.74 1207.35 L1248.15 1207.35 L1247.57 1207.35 L1246.98 1207.35 L1246.39 1207.35 L1245.81 1207.35 L1245.22 1207.35 L1244.63 1207.35 L1244.05 1207.35 L1243.46 1207.35 L1242.87 1207.35 L1242.29 1207.35 L1241.7 1207.35 L1241.11 1207.35 L1240.53 1207.35 L1239.94 1207.35 L1239.36 1207.35 L1238.77 1207.35 L1238.18 1207.35 L1237.6 1207.35 L1237.01 1207.35 L1236.42 1207.35 L1235.84 1207.35 L1235.25 1207.35 L1234.66 1207.35 L1234.08 1207.35 L1233.49 1207.35 L1232.91 1207.35 L1232.32 1207.35 L1231.73 1207.35 L1231.15 1207.35 L1230.56 1207.35 L1229.97 1207.35 L1229.39 1207.35 L1228.8 1207.35 L1228.21 1207.35 L1227.63 1207.35 L1227.04 1207.35 L1226.45 1207.35 L1225.87 1207.35 L1225.28 1207.35 L1224.7 1207.35 L1224.11 1207.35 L1223.52 1207.35 L1222.94 1207.35 L1222.35 1207.35 L1221.76 1207.35 L1221.18 1207.35 L1220.59 1207.35 L1220 1207.35 L1219.42 1207.35 L1218.83 1207.35 L1218.24 1207.35 L1217.66 1207.35 L1217.07 1207.35 L1216.49 1207.35 L1215.9 1207.35 L1215.31 1207.35 L1214.73 1207.35 L1214.14 1207.35 L1213.55 1207.35 L1212.97 1207.35 L1212.38 1207.35 L1211.79 1207.35 L1211.21 1207.35 L1210.62 1207.35 L1210.03 1207.35 L1209.45 1207.35 L1208.86 1207.35 L1208.28 1207.35 L1207.69 1207.35 L1207.1 1207.35 L1206.52 1207.35 L1205.93 1207.35 L1205.34 1207.35 L1204.76 1207.35 L1204.17 1207.35 L1203.58 1207.35 L1203 1207.35 L1202.41 1207.35 L1201.83 1207.35 L1201.24 1207.35 L1200.65 1207.35 L1200.07 1207.35 L1199.48 1207.35 L1198.89 1207.35 L1198.31 1207.35 L1197.72 1207.35 L1197.13 1207.35 L1196.55 1207.35 L1195.96 1207.35 L1195.37 1207.35 L1194.79 1207.35 L1194.2 1207.35 L1193.62 1207.35 L1193.03 1207.35 L1192.44 1207.35 L1191.86 1207.35 L1191.27 1207.35 L1190.68 1207.35 L1190.1 1207.35 L1189.51 1207.35 L1188.92 1207.35 L1188.34 1207.35 L1187.75 1207.35 L1187.16 1207.35 L1186.58 1207.35 L1185.99 1207.35 L1185.41 1207.35 L1184.82 1207.35 L1184.23 1207.35 L1183.65 1207.35 L1183.06 1207.35 L1182.47 1207.35 L1181.89 1207.35 L1181.3 1207.35 L1180.71 1207.35 L1180.13 1207.35 L1179.54 1207.35 L1178.96 1207.35 L1178.37 1207.35 L1177.78 1207.35 L1177.2 1207.35 L1176.61 1207.35 L1176.02 1207.35 L1175.44 1207.35 L1174.85 1207.35 L1174.26 1207.35 L1173.68 1207.35 L1173.09 1207.35 L1172.5 1207.35 L1171.92 1207.35 L1171.33 1207.35 L1170.75 1207.35 L1170.16 1207.35 L1169.57 1207.35 L1168.99 1207.35 L1168.4 1207.35 L1167.81 1207.35 L1167.23 1207.35 L1166.64 1207.35 L1166.05 1207.35 L1165.47 1207.35 L1164.88 1207.35 L1164.29 1207.35 L1163.71 1207.35 L1163.12 1207.35 L1162.54 1207.35 L1161.95 1207.35 L1161.36 1207.35 L1160.78 1207.35 L1160.19 1207.35 L1159.6 1207.35 L1159.02 1207.35 L1158.43 1207.35 L1157.84 1207.35 L1157.26 1207.35 L1156.67 1207.35 L1156.09 1207.35 L1155.5 1207.35 L1154.91 1207.35 L1154.33 1207.35 L1153.74 1207.35 L1153.15 1207.35 L1152.57 1207.35 L1151.98 1207.35 L1151.39 1207.35 L1150.81 1207.35 L1150.22 1207.35 L1149.63 1207.35 L1149.05 1207.35 L1148.46 1207.35 L1147.88 1207.35 L1147.29 1207.35 L1146.7 1207.35 L1146.12 1207.35 L1145.53 1207.35 L1144.94 1207.35 L1144.36 1207.35 L1143.77 1207.35 L1143.18 1207.35 L1142.6 1207.35 L1142.01 1207.35 L1141.42 1207.35 L1140.84 1207.35 L1140.25 1207.35 L1139.67 1207.35 L1139.08 1207.35 L1138.49 1207.35 L1137.91 1207.35 L1137.32 1207.35 L1136.73 1207.35 L1136.15 1207.35 L1135.56 1207.35 L1134.97 1207.35 L1134.39 1207.35 L1133.8 1207.35 L1133.21 1207.35 L1132.63 1207.35 L1132.04 1207.35 L1131.46 1207.35 L1130.87 1207.35 L1130.28 1207.35 L1129.7 1207.35 L1129.11 1207.35 L1128.52 1207.35 L1127.94 1207.35 L1127.35 1207.35 L1126.76 1207.35 L1126.18 1207.35 L1125.59 1207.35 L1125.01 1207.35 L1124.42 1207.35 L1123.83 1207.35 L1123.25 1207.35 L1122.66 1207.35 L1122.07 1207.35 L1121.49 1207.35 L1120.9 1207.35 L1120.31 1207.35 L1119.73 1207.35 L1119.14 1207.35 L1118.55 1207.35 L1117.97 1207.35 L1117.38 1207.35 L1116.8 1207.35 L1116.21 1207.35 L1115.62 1207.35 L1115.04 1207.35 L1114.45 1207.35 L1113.86 1207.35 L1113.28 1207.35 L1112.69 1207.35 L1112.1 1207.35 L1111.52 1207.35 L1110.93 1207.35 L1110.34 1207.35 L1109.76 1207.35 L1109.17 1207.35 L1108.59 1207.35 L1108 1207.35 L1107.41 1207.35 L1106.83 1207.35 L1106.24 1207.35 L1105.65 1207.35 L1105.07 1207.35 L1104.48 1207.35 L1103.89 1207.35 L1103.31 1207.35 L1102.72 1207.35 L1102.14 1207.35 L1101.55 1207.35 L1100.96 1207.35 L1100.38 1207.35 L1099.79 1207.35 L1099.2 1207.35 L1098.62 1207.35 L1098.03 1207.35 L1097.44 1207.35 L1096.86 1207.35 L1096.27 1207.35 L1095.68 1207.35 L1095.1 1207.35 L1094.51 1207.35 L1093.93 1207.35 L1093.34 1207.35 L1092.75 1207.35 L1092.17 1207.35 L1091.58 1207.35 L1090.99 1207.35 L1090.41 1207.35 L1089.82 1207.35 L1089.23 1207.35 L1088.65 1207.35 L1088.06 1207.35 L1087.47 1207.35 L1086.89 1207.35 L1086.3 1207.35 L1085.72 1207.35 L1085.13 1207.35 L1084.54 1207.35 L1083.96 1207.35 L1083.37 1207.35 L1082.78 1207.35 L1082.2 1207.35 L1081.61 1207.35 L1081.02 1207.35 L1080.44 1207.35 L1079.85 1207.35 L1079.26 1207.35 L1078.68 1207.35 L1078.09 1207.35 L1077.51 1207.35 L1076.92 1207.35 L1076.33 1207.35 L1075.75 1207.35 L1075.16 1207.35 L1074.57 1207.35 L1073.99 1207.35 L1073.4 1207.35 L1072.81 1207.35 L1072.23 1207.35 L1071.64 1207.35 L1071.06 1207.35 L1070.47 1207.35 L1069.88 1207.35 L1069.3 1207.35 L1068.71 1207.35 L1068.12 1207.35 L1067.54 1207.35 L1066.95 1207.35 L1066.36 1207.35 L1065.78 1207.35 L1065.19 1207.35 L1064.6 1207.35 L1064.02 1207.35 L1063.43 1207.35 L1062.85 1207.35 L1062.26 1207.35 L1061.67 1207.35 L1061.09 1207.35 L1060.5 1207.35 L1059.91 1207.35 L1059.33 1207.35 L1058.74 1207.35 L1058.15 1207.35 L1057.57 1207.35 L1056.98 1207.35 L1056.39 1207.35 L1055.81 1207.35 L1055.22 1207.35 L1054.64 1207.35 L1054.05 1207.35 L1053.46 1207.35 L1052.88 1207.35 L1052.29 1207.35 L1051.7 1207.35 L1051.12 1207.35 L1050.53 1207.35 L1049.94 1207.35 L1049.36 1207.35 L1048.77 1207.35 L1048.19 1207.35 L1047.6 1207.35 L1047.01 1207.35 L1046.43 1207.35 L1045.84 1207.35 L1045.25 1207.35 L1044.67 1207.35 L1044.08 1207.35 L1043.49 1207.35 L1042.91 1207.35 L1042.32 1207.35 L1041.73 1207.35 L1041.15 1207.35 L1040.56 1207.35 L1039.98 1207.35 L1039.39 1207.35 L1038.8 1207.35 L1038.22 1207.35 L1037.63 1207.35 L1037.04 1207.35 L1036.46 1207.35 L1035.87 1207.35 L1035.28 1207.35 L1034.7 1207.35 L1034.11 1207.35 L1033.52 1207.35 L1032.94 1207.35 L1032.35 1207.35 L1031.77 1207.35 L1031.18 1207.35 L1030.59 1207.35 L1030.01 1207.35 L1029.42 1207.35 L1028.83 1207.35 L1028.25 1207.35 L1027.66 1207.35 L1027.07 1207.35 L1026.49 1207.35 L1025.9 1207.35 L1025.32 1207.35 L1024.73 1207.35 L1024.14 1207.35 L1023.56 1207.35 L1022.97 1207.35 L1022.38 1207.35 L1021.8 1207.35 L1021.21 1207.35 L1020.62 1207.35 L1020.04 1207.35 L1019.45 1207.35 L1018.86 1207.35 L1018.28 1207.35 L1017.69 1207.35 L1017.11 1207.35 L1016.52 1207.35 L1015.93 1207.35 L1015.35 1207.35 L1014.76 1207.35 L1014.17 1207.35 L1013.59 1207.35 L1013 1207.35 L1012.41 1207.35 L1011.83 1207.35 L1011.24 1207.35 L1010.65 1207.35 L1010.07 1207.35 L1009.48 1207.35 L1008.9 1207.35 L1008.31 1207.35 L1007.72 1207.35 L1007.14 1207.35 L1006.55 1207.35 L1005.96 1207.35 L1005.38 1207.35 L1004.79 1207.35 L1004.2 1207.35 L1003.62 1207.35 L1003.03 1207.35 L1002.44 1207.35 L1001.86 1207.35 L1001.27 1207.35 L1000.69 1207.35 L1000.1 1207.35 L999.513 1207.35 L998.926 1207.35 L998.34 1207.35 L997.754 1207.35 L997.167 1207.35 L996.581 1207.35 L995.994 1207.35 L995.408 1207.35 L994.822 1207.35 L994.235 1207.35 L993.649 1207.35 L993.062 1207.35 L992.476 1207.35 L991.889 1207.35 L991.303 1207.35 L990.717 1207.35 L990.13 1207.35 L989.544 1207.35 L988.957 1207.35 L988.371 1207.35 L987.785 1207.35 L987.198 1207.35 L986.612 1207.35 L986.025 1207.35  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.66 986.612,1207.66 987.198,1207.66 987.785,1207.66 988.371,1207.66 988.957,1207.66 989.544,1207.66 990.13,1207.66 990.717,1207.66 991.303,1207.66 991.889,1207.66 992.476,1207.66 993.062,1207.66 993.649,1207.66 994.235,1207.66 994.822,1207.66 995.408,1207.66 995.994,1207.66 996.581,1207.66 997.167,1207.66 997.754,1207.66 998.34,1207.66 998.926,1207.66 999.513,1207.66 1000.1,1207.66 1000.69,1207.66 1001.27,1207.66 1001.86,1207.66 1002.44,1207.66 1003.03,1207.66 1003.62,1207.66 1004.2,1207.66 1004.79,1207.66 1005.38,1207.66 1005.96,1207.66 1006.55,1207.66 1007.14,1207.66 1007.72,1207.66 1008.31,1207.66 1008.9,1207.66 1009.48,1207.66 1010.07,1207.66 1010.65,1207.66 1011.24,1207.66 1011.83,1207.66 1012.41,1207.66 1013,1207.66 1013.59,1207.66 1014.17,1207.66 1014.76,1207.66 1015.35,1207.66 1015.93,1207.66 1016.52,1207.66 1017.11,1207.66 1017.69,1207.66 1018.28,1207.66 1018.86,1207.66 1019.45,1207.66 1020.04,1207.66 1020.62,1207.66 1021.21,1207.66 1021.8,1207.66 1022.38,1207.66 1022.97,1207.66 1023.56,1207.66 1024.14,1207.66 1024.73,1207.66 1025.32,1207.66 1025.9,1207.66 1026.49,1207.66 1027.07,1207.66 1027.66,1207.66 1028.25,1207.66 1028.83,1207.66 1029.42,1207.66 1030.01,1207.66 1030.59,1207.66 1031.18,1207.66 1031.77,1207.66 1032.35,1207.66 1032.94,1207.66 1033.52,1207.66 1034.11,1207.66 1034.7,1207.66 1035.28,1207.66 1035.87,1207.66 1036.46,1207.66 1037.04,1207.66 1037.63,1207.66 1038.22,1207.66 1038.8,1207.66 1039.39,1207.66 1039.98,1207.66 1040.56,1207.66 1041.15,1207.66 1041.73,1207.66 1042.32,1207.66 1042.91,1207.66 1043.49,1207.66 1044.08,1207.66 1044.67,1207.66 1045.25,1207.66 1045.84,1207.66 1046.43,1207.66 1047.01,1207.66 1047.6,1207.66 1048.19,1207.66 1048.77,1207.66 1049.36,1207.66 1049.94,1207.66 1050.53,1207.66 1051.12,1207.66 1051.7,1207.66 1052.29,1207.66 1052.88,1207.66 1053.46,1207.66 1054.05,1207.66 1054.64,1207.66 1055.22,1207.66 1055.81,1207.66 1056.39,1207.66 1056.98,1207.66 1057.57,1207.66 1058.15,1207.66 1058.74,1207.66 1059.33,1207.66 1059.91,1207.66 1060.5,1207.66 1061.09,1207.66 1061.67,1207.66 1062.26,1207.66 1062.85,1207.66 1063.43,1207.66 1064.02,1207.66 1064.6,1207.66 1065.19,1207.66 1065.78,1207.66 1066.36,1207.66 1066.95,1207.66 1067.54,1207.66 1068.12,1207.66 1068.71,1207.66 1069.3,1207.66 1069.88,1207.66 1070.47,1207.66 1071.06,1207.66 1071.64,1207.66 1072.23,1207.66 1072.81,1207.66 1073.4,1207.66 1073.99,1207.66 1074.57,1207.66 1075.16,1207.66 1075.75,1207.66 1076.33,1207.66 1076.92,1207.66 1077.51,1207.66 1078.09,1207.66 1078.68,1207.66 1079.26,1207.66 1079.85,1207.66 1080.44,1207.66 1081.02,1207.66 1081.61,1207.66 1082.2,1207.66 1082.78,1207.66 1083.37,1207.66 1083.96,1207.66 1084.54,1207.66 1085.13,1207.66 1085.72,1207.66 1086.3,1207.66 1086.89,1207.66 1087.47,1207.66 1088.06,1207.66 1088.65,1207.66 1089.23,1207.66 1089.82,1207.66 1090.41,1207.66 1090.99,1207.66 1091.58,1207.66 1092.17,1207.66 1092.75,1207.66 1093.34,1207.66 1093.93,1207.66 1094.51,1207.66 1095.1,1207.66 1095.68,1207.66 1096.27,1207.66 1096.86,1207.66 1097.44,1207.66 1098.03,1207.66 1098.62,1207.66 1099.2,1207.66 1099.79,1207.66 1100.38,1207.66 1100.96,1207.66 1101.55,1207.66 1102.14,1207.66 1102.72,1207.66 1103.31,1207.66 1103.89,1207.66 1104.48,1207.66 1105.07,1207.66 1105.65,1207.66 1106.24,1207.66 1106.83,1207.66 1107.41,1207.66 1108,1207.66 1108.59,1207.66 1109.17,1207.66 1109.76,1207.66 1110.34,1207.66 1110.93,1207.66 1111.52,1207.66 1112.1,1207.66 1112.69,1207.66 1113.28,1207.66 1113.86,1207.66 1114.45,1207.66 1115.04,1207.66 1115.62,1207.66 1116.21,1207.66 1116.8,1207.66 1117.38,1207.66 1117.97,1207.66 1118.55,1207.66 1119.14,1207.66 1119.73,1207.66 1120.31,1207.66 1120.9,1207.66 1121.49,1207.66 1122.07,1207.66 1122.66,1207.66 1123.25,1207.66 1123.83,1207.66 1124.42,1207.66 1125.01,1207.66 1125.59,1207.66 1126.18,1207.66 1126.76,1207.66 1127.35,1207.66 1127.94,1207.66 1128.52,1207.66 1129.11,1207.66 1129.7,1207.66 1130.28,1207.66 1130.87,1207.66 1131.46,1207.66 1132.04,1207.66 1132.63,1207.66 1133.21,1207.66 1133.8,1207.66 1134.39,1207.66 1134.97,1207.66 1135.56,1207.66 1136.15,1207.66 1136.73,1207.66 1137.32,1207.66 1137.91,1207.66 1138.49,1207.66 1139.08,1207.66 1139.67,1207.66 1140.25,1207.66 1140.84,1207.66 1141.42,1207.66 1142.01,1207.66 1142.6,1207.66 1143.18,1207.66 1143.77,1207.66 1144.36,1207.66 1144.94,1207.66 1145.53,1207.66 1146.12,1207.66 1146.7,1207.66 1147.29,1207.66 1147.88,1207.66 1148.46,1207.66 1149.05,1207.66 1149.63,1207.66 1150.22,1207.66 1150.81,1207.66 1151.39,1207.66 1151.98,1207.66 1152.57,1207.66 1153.15,1207.66 1153.74,1207.66 1154.33,1207.66 1154.91,1207.66 1155.5,1207.66 1156.09,1207.66 1156.67,1207.66 1157.26,1207.66 1157.84,1207.66 1158.43,1207.66 1159.02,1207.66 1159.6,1207.66 1160.19,1207.66 1160.78,1207.66 1161.36,1207.66 1161.95,1207.66 1162.54,1207.66 1163.12,1207.66 1163.71,1207.66 1164.29,1207.66 1164.88,1207.66 1165.47,1207.66 1166.05,1207.66 1166.64,1207.66 1167.23,1207.66 1167.81,1207.66 1168.4,1207.66 1168.99,1207.66 1169.57,1207.66 1170.16,1207.66 1170.75,1207.66 1171.33,1207.66 1171.92,1207.66 1172.5,1207.66 1173.09,1207.66 1173.68,1207.66 1174.26,1207.66 1174.85,1207.66 1175.44,1207.66 1176.02,1207.66 1176.61,1207.66 1177.2,1207.66 1177.78,1207.66 1178.37,1207.66 1178.96,1207.66 1179.54,1207.66 1180.13,1207.66 1180.71,1207.66 1181.3,1207.66 1181.89,1207.66 1182.47,1207.66 1183.06,1207.66 1183.65,1207.66 1184.23,1207.66 1184.82,1207.66 1185.41,1207.66 1185.99,1207.66 1186.58,1207.66 1187.16,1207.66 1187.75,1207.66 1188.34,1207.66 1188.92,1207.66 1189.51,1207.66 1190.1,1207.66 1190.68,1207.66 1191.27,1207.66 1191.86,1207.66 1192.44,1207.66 1193.03,1207.66 1193.62,1207.66 1194.2,1207.66 1194.79,1207.66 1195.37,1207.66 1195.96,1207.66 1196.55,1207.66 1197.13,1207.66 1197.72,1207.66 1198.31,1207.66 1198.89,1207.66 1199.48,1207.66 1200.07,1207.66 1200.65,1207.66 1201.24,1207.66 1201.83,1207.66 1202.41,1207.66 1203,1207.66 1203.58,1207.66 1204.17,1207.66 1204.76,1207.66 1205.34,1207.66 1205.93,1207.66 1206.52,1207.66 1207.1,1207.66 1207.69,1207.66 1208.28,1207.66 1208.86,1207.66 1209.45,1207.66 1210.03,1207.66 1210.62,1207.66 1211.21,1207.66 1211.79,1207.66 1212.38,1207.66 1212.97,1207.66 1213.55,1207.66 1214.14,1207.66 1214.73,1207.66 1215.31,1207.66 1215.9,1207.66 1216.49,1207.66 1217.07,1207.66 1217.66,1207.66 1218.24,1207.66 1218.83,1207.66 1219.42,1207.66 1220,1207.66 1220.59,1207.66 1221.18,1207.66 1221.76,1207.66 1222.35,1207.66 1222.94,1207.66 1223.52,1207.66 1224.11,1207.66 1224.7,1207.66 1225.28,1207.66 1225.87,1207.66 1226.45,1207.66 1227.04,1207.66 1227.63,1207.66 1228.21,1207.66 1228.8,1207.66 1229.39,1207.66 1229.97,1207.66 1230.56,1207.66 1231.15,1207.66 1231.73,1207.66 1232.32,1207.66 1232.91,1207.66 1233.49,1207.66 1234.08,1207.66 1234.66,1207.66 1235.25,1207.66 1235.84,1207.66 1236.42,1207.66 1237.01,1207.66 1237.6,1207.66 1238.18,1207.66 1238.77,1207.66 1239.36,1207.66 1239.94,1207.66 1240.53,1207.66 1241.11,1207.66 1241.7,1207.66 1242.29,1207.66 1242.87,1207.66 1243.46,1207.66 1244.05,1207.66 1244.63,1207.66 1245.22,1207.66 1245.81,1207.66 1246.39,1207.66 1246.98,1207.66 1247.57,1207.66 1248.15,1207.66 1248.74,1207.66 1249.32,1207.66 1249.91,1207.66 1250.5,1207.66 1251.08,1207.66 1251.67,1207.66 1252.26,1207.66 1252.84,1207.66 1253.43,1207.66 1254.02,1207.66 1254.6,1207.66 1255.19,1207.66 1255.78,1207.66 1256.36,1207.66 1256.95,1207.66 1257.53,1207.66 1258.12,1207.66 1258.71,1207.66 1259.29,1207.66 1259.88,1207.66 1260.47,1207.66 1261.05,1207.66 1261.64,1207.66 1262.23,1207.66 1262.81,1207.66 1263.4,1207.66 1263.98,1207.66 1264.57,1207.66 1265.16,1207.66 1265.74,1207.66 1266.33,1207.66 1266.92,1207.66 1267.5,1207.66 1268.09,1207.66 1268.68,1207.66 1269.26,1207.66 1269.85,1207.66 1270.44,1207.66 1271.02,1207.66 1271.61,1207.66 1272.19,1207.66 1272.78,1207.66 1273.37,1207.66 1273.95,1207.66 1274.54,1207.66 1275.13,1207.66 1275.71,1207.66 1276.3,1207.66 1276.89,1207.66 1277.47,1207.66 1278.06,1207.66 1278.65,1207.66 1279.23,1207.66 1279.82,1207.66 1280.4,1207.66 1280.99,1207.66 1281.58,1207.66 1282.16,1207.66 1282.75,1207.66 1283.34,1207.66 1283.92,1207.66 1284.51,1207.66 1285.1,1207.66 1285.68,1207.66 1286.27,1207.66 1286.86,1207.66 1287.44,1207.66 1288.03,1207.66 1288.61,1207.66 1289.2,1207.66 1289.79,1207.66 1290.37,1207.66 1290.96,1207.66 1291.55,1207.66 1292.13,1207.66 1292.72,1207.66 1293.31,1207.66 1293.89,1207.66 1294.48,1207.66 1295.06,1207.66 1295.65,1207.66 1296.24,1207.66 1296.82,1207.66 1297.41,1207.66 1298,1207.66 1298.58,1207.66 1299.17,1207.66 1299.76,1207.66 1300.34,1207.66 1300.93,1207.66 1301.52,1207.66 1302.1,1207.66 1302.69,1207.66 1303.27,1207.66 1303.86,1207.66 1304.45,1207.66 1305.03,1207.66 1305.62,1207.66 1306.21,1207.66 1306.79,1207.66 1307.38,1207.66 1307.97,1207.66 1308.55,1207.66 1309.14,1207.66 1309.73,1207.66 1310.31,1207.66 1310.9,1207.66 1311.48,1207.66 1312.07,1207.66 1312.66,1207.66 1313.24,1207.66 1313.83,1207.66 1314.42,1207.66 1315,1207.66 1315.59,1207.66 1316.18,1207.66 1316.76,1207.66 1317.35,1207.66 1317.93,1207.66 1318.52,1207.66 1319.11,1207.66 1319.69,1207.66 1320.28,1207.66 1320.87,1207.66 1321.45,1207.66 1322.04,1207.66 1322.63,1207.66 1323.21,1207.66 1323.8,1207.66 1324.39,1207.66 1324.97,1207.66 1325.56,1207.66 1326.14,1207.66 1326.73,1207.66 1327.32,1207.66 1327.9,1207.66 1328.49,1207.66 1329.08,1207.66 1329.66,1207.66 1330.25,1207.66 1330.84,1207.66 1331.42,1207.66 1332.01,1207.66 1332.6,1207.66 1333.18,1207.66 1333.77,1207.66 1334.35,1207.66 1334.94,1207.66 1335.53,1207.66 1336.11,1207.66 1336.7,1207.66 1337.29,1207.66 1337.87,1207.66 1338.46,1207.66 1339.05,1207.66 1339.63,1207.66 1340.22,1207.66 1340.8,1207.66 1341.39,1207.66 1341.98,1207.66 1342.56,1207.66 1343.15,1207.66 1343.74,1207.66 1344.32,1207.66 1344.91,1207.66 1345.5,1207.66 1346.08,1207.66 1346.67,1207.66 1347.26,1207.66 1347.84,1207.66 1348.43,1207.66 1349.01,1207.66 1349.6,1207.66 1350.19,1207.66 1350.77,1207.66 1351.36,1207.66 1351.95,1207.66 1352.53,1207.66 1353.12,1207.66 1353.71,1207.66 1354.29,1207.66 1354.88,1207.66 1355.47,1207.66 1356.05,1207.66 1356.64,1207.66 1357.22,1207.66 1357.81,1207.66 1358.4,1207.66 1358.98,1207.66 1359.57,1207.66 1360.16,1207.66 1360.74,1207.66 1361.33,1207.66 1361.92,1207.66 1362.5,1207.66 1363.09,1207.66 1363.68,1207.66 1364.26,1207.66 1364.85,1207.66 1365.43,1207.66 1366.02,1207.66 1366.61,1207.66 1367.19,1207.66 1367.78,1207.66 1368.37,1207.66 1368.95,1207.66 1369.54,1207.66 1370.13,1207.66 1370.71,1207.66 1371.3,1207.66 1371.88,1207.66 1372.47,1207.66 1373.06,1207.66 1373.64,1207.66 1374.23,1207.66 1374.82,1207.66 1375.4,1207.66 1375.99,1207.66 1376.58,1207.66 1377.16,1207.66 1377.75,1207.66 1378.34,1207.66 1378.92,1207.66 1379.51,1207.66 1380.09,1207.66 1380.68,1207.66 1381.27,1207.66 1381.85,1207.66 1382.44,1207.66 1383.03,1207.66 1383.61,1207.66 1384.2,1207.66 1384.79,1207.66 1385.37,1207.66 1385.96,1207.66 1386.55,1207.66 1387.13,1207.66 1387.72,1207.66 1388.3,1207.66 1388.89,1207.66 1389.48,1207.66 1390.06,1207.66 1390.65,1207.66 1391.24,1207.66 1391.82,1207.66 1392.41,1207.66 1393,1207.66 1393.58,1207.66 1394.17,1207.66 1394.75,1207.66 1395.34,1207.66 1395.93,1207.66 1396.51,1207.66 1397.1,1207.66 1397.69,1207.66 1398.27,1207.66 1398.86,1207.66 1399.45,1207.66 1400.03,1207.66 1400.62,1207.66 1401.21,1207.66 1401.79,1207.66 1402.38,1207.66 1402.96,1207.66 1403.55,1207.66 1404.14,1207.66 1404.72,1207.66 1405.31,1207.66 1405.9,1207.66 1406.48,1207.66 1407.07,1207.66 1407.66,1207.66 1408.24,1207.66 1408.83,1207.66 1409.42,1207.66 1410,1207.66 1410.59,1207.66 1411.17,1207.66 1411.76,1207.66 1412.35,1207.66 1412.93,1207.66 1413.52,1207.66 1414.11,1207.66 1414.69,1207.66 1415.28,1207.66 1415.87,1207.66 1416.45,1207.66 1417.04,1207.66 1417.63,1207.66 1418.21,1207.66 1418.8,1207.66 1419.38,1207.66 1419.97,1207.66 1420.56,1207.66 1421.14,1207.66 1421.73,1207.66 1422.32,1207.66 1422.9,1207.66 1423.49,1207.66 1424.08,1207.66 1424.66,1207.66 1425.25,1207.66 1425.83,1207.66 1426.42,1207.66 1427.01,1207.66 1427.59,1207.66 1428.18,1207.66 1428.77,1207.66 1429.35,1207.66 1429.94,1207.66 1430.53,1207.66 1431.11,1207.66 1431.7,1207.66 1432.29,1207.66 1432.87,1207.66 1433.46,1207.66 1434.04,1207.66 1434.63,1207.66 1435.22,1207.66 1435.8,1207.66 1436.39,1207.66 1436.98,1207.66 1437.56,1207.66 1438.15,1207.66 1438.74,1207.66 1439.32,1207.66 1439.91,1207.66 1440.5,1207.66 1441.08,1207.66 1441.67,1207.66 1442.25,1207.66 1442.84,1207.66 1443.43,1207.66 1444.01,1207.66 1444.6,1207.66 1445.19,1207.66 1445.77,1207.66 1446.36,1207.66 1446.95,1207.66 1447.53,1207.66 1448.12,1207.66 1448.7,1207.66 1449.29,1207.66 1449.88,1207.66 1450.46,1207.66 1451.05,1207.66 1451.64,1207.66 1452.22,1207.66 1452.81,1207.66 1453.4,1207.66 1453.98,1207.66 1454.57,1207.66 1455.16,1207.66 1455.74,1207.66 1456.33,1207.66 1456.91,1207.66 1457.5,1207.66 1458.09,1207.66 1458.67,1207.66 1459.26,1207.66 1459.85,1207.66 1460.43,1207.66 1461.02,1207.66 1461.61,1207.66 1462.19,1207.66 1462.78,1207.66 1463.37,1207.66 1463.95,1207.66 1464.54,1207.66 1465.12,1207.66 1465.71,1207.66 1466.3,1207.66 1466.88,1207.66 1467.47,1207.66 1468.06,1207.66 1468.64,1207.66 1469.23,1207.66 1469.82,1207.66 1470.4,1207.66 1470.99,1207.66 1471.57,1207.66 1472.16,1207.66 1472.75,1207.66 1473.33,1207.66 1473.92,1207.66 1474.51,1207.66 1475.09,1207.66 1475.68,1207.66 1476.27,1207.66 1476.85,1207.66 1477.44,1207.66 1478.03,1207.66 1478.61,1207.66 1479.2,1207.66 1479.78,1207.66 1480.37,1207.66 1480.96,1207.66 1481.54,1207.66 1482.13,1207.66 1482.72,1207.66 1483.3,1207.66 1483.89,1207.66 1484.48,1207.66 1485.06,1207.66 1485.65,1207.66 1486.24,1207.66 1486.82,1207.66 1487.41,1207.66 1487.99,1207.66 1488.58,1207.66 1489.17,1207.66 1489.75,1207.66 1490.34,1207.66 1490.93,1207.66 1491.51,1207.66 1492.1,1207.66 1492.69,1207.66 1493.27,1207.66 1493.86,1207.66 1494.45,1207.66 1495.03,1207.66 1495.62,1207.66 1496.2,1207.66 1496.79,1207.66 1497.38,1207.66 1497.96,1207.66 1498.55,1207.66 1499.14,1207.66 1499.72,1207.66 1500.31,1207.66 1500.9,1207.66 1501.48,1207.66 1502.07,1207.66 1502.65,1207.66 1503.24,1207.66 1503.83,1207.66 1504.41,1207.66 1505,1207.66 1505.59,1207.66 1506.17,1207.66 1506.76,1207.66 1507.35,1207.66 1507.93,1207.66 1508.52,1207.66 1509.11,1207.66 1509.69,1207.66 1510.28,1207.66 1510.86,1207.66 1511.45,1207.66 1512.04,1207.66 1512.62,1207.66 1513.21,1207.66 1513.8,1207.66 1514.38,1207.66 1514.97,1207.66 1515.56,1207.66 1516.14,1207.66 1516.73,1207.66 1517.32,1207.66 1517.9,1207.66 1518.49,1207.66 1519.07,1207.66 1519.66,1207.66 1520.25,1207.66 1520.83,1207.66 1521.42,1207.66 1522.01,1207.66 1522.59,1207.66 1523.18,1207.66 1523.77,1207.66 1524.35,1207.66 1524.94,1207.66 1525.52,1207.66 1526.11,1207.66 1526.7,1207.66 1527.28,1207.66 1527.87,1207.66 1528.46,1207.66 1529.04,1207.66 1529.63,1207.66 1530.22,1207.66 1530.8,1207.66 1531.39,1207.66 1531.98,1207.66 1532.56,1207.66 1533.15,1207.66 1533.73,1207.66 1534.32,1207.66 1534.91,1207.66 1535.49,1207.66 1536.08,1207.66 1536.67,1207.66 1537.25,1207.66 1537.84,1207.66 1538.43,1207.66 1539.01,1207.66 1539.6,1207.66 1540.19,1207.66 1540.77,1207.66 1541.36,1207.66 1541.94,1207.66 1542.53,1207.66 1543.12,1207.66 1543.7,1207.66 1544.29,1207.66 1544.88,1207.66 1545.46,1207.66 1546.05,1207.66 1546.64,1207.66 1547.22,1207.66 1547.81,1207.66 1548.4,1207.66 1548.98,1207.66 1549.57,1207.66 1550.15,1207.66 1550.74,1207.66 1551.33,1207.66 1551.91,1207.66 1552.5,1207.66 1553.09,1207.66 1553.67,1207.66 1554.26,1207.66 1554.85,1207.66 1555.43,1207.66 1556.02,1207.66 1556.6,1207.66 1557.19,1207.66 1557.78,1207.66 1558.36,1207.66 1558.95,1207.66 1559.54,1207.66 1560.12,1207.66 1560.71,1207.66 1561.3,1207.66 1561.88,1207.66 1562.47,1207.66 1563.06,1207.66 1563.64,1207.66 1564.23,1207.66 1564.81,1207.66 1565.4,1207.66 1565.99,1207.66 1566.57,1207.66 1567.16,1207.66 1567.75,1207.66 1568.33,1207.66 1568.92,1207.66 1569.51,1207.66 1570.09,1207.66 1570.68,1207.66 1571.27,1207.66 1571.85,1207.66 1572.44,1207.66 1573.02,1207.66 1573.61,1207.66 1574.2,1207.66 1574.78,1207.66 1575.37,1207.66 1575.96,1207.66 1576.54,1207.66 1577.13,1207.66 1577.72,1207.66 1578.3,1207.66 1578.89,1207.66 1579.47,1207.66 1580.06,1207.66 1580.65,1207.66 1581.23,1207.66 1581.82,1207.66 1582.41,1207.66 1582.99,1207.66 1583.58,1207.66 1584.17,1207.66 1584.75,1207.66 1585.34,1207.66 1585.93,1207.66 1586.51,1207.66 1587.1,1207.66 1587.68,1207.66 1588.27,1207.66 1588.86,1207.66 1589.44,1207.66 1590.03,1207.66 1590.62,1207.66 1591.2,1207.66 1591.79,1207.66 1592.38,1207.66 1592.96,1207.66 1593.55,1207.66 1594.14,1207.66 1594.72,1207.66 1595.31,1207.66 1595.89,1207.66 1596.48,1207.66 1597.07,1207.66 1597.65,1207.66 1598.24,1207.66 1598.83,1207.66 1599.41,1207.66 1600,1207.66 1600.59,1207.66 1601.17,1207.66 1601.76,1207.66 1602.34,1207.66 1602.93,1207.66 1603.52,1207.66 1604.1,1207.66 1604.69,1207.66 1605.28,1207.66 1605.86,1207.66 1606.45,1207.66 1607.04,1207.66 1607.62,1207.66 1608.21,1207.66 1608.8,1207.66 1609.38,1207.66 1609.97,1207.66 1610.55,1207.66 1611.14,1207.66 1611.73,1207.66 1612.31,1207.66 1612.9,1207.66 1613.49,1207.66 1614.07,1207.66 1614.66,1207.66 1615.25,1207.66 1615.83,1207.66 1616.42,1207.66 1617.01,1207.66 1617.59,1207.66 1618.18,1207.66 1618.76,1207.66 1619.35,1207.66 1619.94,1207.66 1620.52,1207.66 1621.11,1207.66 1621.7,1207.66 1622.28,1207.66 1622.87,1207.66 1623.46,1207.66 1624.04,1207.66 1624.63,1207.66 1625.22,1207.66 1625.8,1207.66 1626.39,1207.66 1626.97,1207.66 1627.56,1207.66 1628.15,1207.66 1628.73,1207.66 1629.32,1207.66 1629.91,1207.66 1630.49,1207.66 1631.08,1207.66 1631.67,1207.66 1632.25,1207.66 1632.84,1207.66 1633.42,1207.66 1634.01,1207.66 1634.6,1207.66 1635.18,1207.66 1635.77,1207.66 1636.36,1207.66 1636.94,1207.66 1637.53,1207.66 1638.12,1207.66 1638.7,1207.66 1639.29,1207.66 1639.88,1207.66 1640.46,1207.66 1641.05,1207.66 1641.63,1207.66 1642.22,1207.66 1642.81,1207.66 1643.39,1207.66 1643.98,1207.66 1644.57,1207.66 1645.15,1207.66 1645.74,1207.66 1646.33,1207.66 1646.91,1207.66 1647.5,1207.66 1648.09,1207.66 1648.67,1207.66 1649.26,1207.66 1649.84,1207.66 1650.43,1207.66 1651.02,1207.66 1651.6,1207.66 1652.19,1207.66 1652.78,1207.66 1653.36,1207.66 1653.95,1207.66 1654.54,1207.66 1655.12,1207.66 1655.71,1207.66 1656.29,1207.66 1656.88,1207.66 1657.47,1207.66 1658.05,1207.66 1658.64,1207.66 1659.23,1207.66 1659.81,1207.66 1660.4,1207.66 1660.99,1207.66 1661.57,1207.66 1662.16,1207.66 1662.75,1207.66 1663.33,1207.66 1663.92,1207.66 1664.5,1207.66 1665.09,1207.66 1665.68,1207.66 1666.26,1207.66 1666.85,1207.66 1667.44,1207.66 1668.02,1207.66 1668.61,1207.66 1669.2,1207.66 1669.78,1207.66 1670.37,1207.66 1670.96,1207.66 1671.54,1207.66 1672.13,1207.66 1672.71,1207.66 1673.3,1207.66 1673.89,1207.66 1674.47,1207.66 1675.06,1207.66 1675.65,1207.66 1676.23,1207.66 1676.82,1207.66 1677.41,1207.66 1677.99,1207.66 1678.58,1207.66 1679.17,1207.66 1679.75,1207.66 1680.34,1207.66 1680.92,1207.66 1681.51,1207.66 1682.1,1207.66 1682.68,1207.66 1683.27,1207.66 1683.86,1207.66 1684.44,1207.66 1685.03,1207.66 1685.62,1207.66 1686.2,1207.66 1686.79,1207.66 1687.37,1207.66 1687.96,1207.66 1688.55,1207.66 1689.13,1207.66 1689.72,1207.66 1690.31,1207.66 1690.89,1207.66 1691.48,1207.66 1692.07,1207.66 1692.65,1207.66 1693.24,1207.66 1693.83,1207.66 1694.41,1207.66 1695,1207.66 1695.58,1207.66 1696.17,1207.66 1696.76,1207.66 1697.34,1207.66 1697.93,1207.66 1698.52,1207.66 1699.1,1207.66 1699.69,1207.66 1700.28,1207.66 1700.86,1207.66 1701.45,1207.66 1702.04,1207.66 1702.62,1207.66 1703.21,1207.66 1703.79,1207.66 1704.38,1207.66 1704.97,1207.66 1705.55,1207.66 1706.14,1207.66 1706.73,1207.66 1707.31,1207.66 1707.9,1207.66 1708.49,1207.66 1709.07,1207.66 1709.66,1207.66 1710.24,1207.66 1710.83,1207.66 1711.42,1207.66 1712,1207.66 1712.59,1207.66 1713.18,1207.66 1713.76,1207.66 1714.35,1207.66 1714.94,1207.66 1715.52,1207.66 1716.11,1207.66 1716.7,1207.66 1717.28,1207.66 1717.87,1207.66 1718.45,1207.66 1719.04,1207.66 1719.63,1207.66 1720.21,1207.66 1720.8,1207.66 1721.39,1207.66 1721.97,1207.66 1722.56,1207.66 1723.15,1207.66 1723.73,1207.66 1724.32,1207.66 1724.91,1207.66 1725.49,1207.66 1726.08,1207.66 1726.66,1207.66 1727.25,1207.66 1727.84,1207.66 1728.42,1207.66 1729.01,1207.66 1729.6,1207.66 1730.18,1207.66 1730.77,1207.66 1731.36,1207.66 1731.94,1207.66 1732.53,1207.66 1733.11,1207.66 1733.7,1207.66 1734.29,1207.66 1734.87,1207.66 1735.46,1207.66 1736.05,1207.66 1736.63,1207.66 1737.22,1207.66 1737.81,1207.66 1738.39,1207.66 1738.98,1207.66 1739.57,1207.66 1740.15,1207.66 1740.74,1207.66 1741.32,1207.66 1741.91,1207.66 1742.5,1207.66 1743.08,1207.66 1743.67,1207.66 1744.26,1207.66 1744.84,1207.66 1745.43,1207.66 1746.02,1207.66 1746.6,1207.66 1747.19,1207.66 1747.78,1207.66 1748.36,1207.66 1748.95,1207.66 1749.53,1207.66 1750.12,1207.66 1750.71,1207.66 1751.29,1207.66 1751.88,1207.66 1752.47,1207.66 1753.05,1207.66 1753.64,1207.66 1754.23,1207.66 1754.81,1207.66 1755.4,1207.66 1755.99,1207.66 1756.57,1207.66 1757.16,1207.66 1757.74,1207.66 1758.33,1207.66 1758.92,1207.66 1759.5,1207.66 1760.09,1207.66 1760.68,1207.66 1761.26,1207.66 1761.85,1207.66 1762.44,1207.66 1763.02,1207.66 1763.61,1207.66 1764.19,1207.66 1764.78,1207.66 1765.37,1207.66 1765.95,1207.66 1766.54,1207.66 1767.13,1207.66 1767.71,1207.66 1768.3,1207.66 1768.89,1207.66 1769.47,1207.66 1770.06,1207.66 1770.65,1207.66 1771.23,1207.66 1771.82,1207.66 1772.4,1207.66 1772.99,1207.66 1773.58,1207.66 1774.16,1207.66 1774.75,1207.66 1775.34,1207.66 1775.92,1207.66 1776.51,1207.66 1777.1,1207.66 1777.68,1207.66 1778.27,1207.66 1778.86,1207.66 1779.44,1207.66 1780.03,1207.66 1780.61,1207.66 1781.2,1207.66 1781.79,1207.66 1782.37,1207.66 1782.96,1207.66 1783.55,1207.66 1784.13,1207.66 1784.72,1207.66 1785.31,1207.66 1785.89,1207.66 1786.48,1207.66 1787.06,1207.66 1787.65,1207.66 1788.24,1207.66 1788.82,1207.66 1789.41,1207.66 1790,1207.66 1790.58,1207.66 1791.17,1207.66 1791.76,1207.66 1792.34,1207.66 1792.93,1207.66 1793.52,1207.66 1794.1,1207.66 1794.69,1207.66 1795.27,1207.66 1795.86,1207.66 1796.45,1207.66 1797.03,1207.66 1797.62,1207.66 1798.21,1207.66 1798.79,1207.66 1799.38,1207.66 1799.97,1207.66 1800.55,1207.66 1801.14,1207.66 1801.73,1207.66 1802.31,1207.66 1802.9,1207.66 1803.48,1207.66 1804.07,1207.66 1804.66,1207.66 1805.24,1207.66 1805.83,1207.66 1806.42,1207.66 1807,1207.66 1807.59,1207.66 1808.18,1207.66 1808.76,1207.66 1809.35,1207.66 1809.94,1207.66 1810.52,1207.66 1811.11,1207.66 1811.69,1207.66 1812.28,1207.66 1812.87,1207.66 1813.45,1207.66 1814.04,1207.66 1814.63,1207.66 1815.21,1207.66 1815.8,1207.66 1816.39,1207.66 1816.97,1207.66 1817.56,1207.66 1818.14,1207.66 1818.73,1207.66 1819.32,1207.66 1819.9,1207.66 1820.49,1207.66 1821.08,1207.66 1821.66,1207.66 1822.25,1207.66 1822.84,1207.66 1823.42,1207.66 1824.01,1207.66 1824.6,1207.66 1825.18,1207.66 1825.77,1207.66 1826.35,1207.66 1826.94,1207.66 1827.53,1207.66 1828.11,1207.66 1828.7,1207.66 1829.29,1207.66 1829.87,1207.66 1830.46,1207.66 1831.05,1207.66 1831.63,1207.66 1832.22,1207.66 1832.81,1207.66 1833.39,1207.66 1833.98,1207.66 1834.56,1207.66 1835.15,1207.66 1835.74,1207.66 1836.32,1207.66 1836.91,1207.66 1837.5,1207.66 1838.08,1207.66 1838.67,1207.66 1839.26,1207.66 1839.84,1207.66 1840.43,1207.66 1841.01,1207.66 1841.6,1207.66 1842.19,1207.66 1842.77,1207.66 1843.36,1207.66 1843.95,1207.66 1844.53,1207.66 1845.12,1207.66 1845.71,1207.66 1846.29,1207.66 1846.88,1207.66 1847.47,1207.66 1848.05,1207.66 1848.64,1207.66 1849.22,1207.66 1849.81,1207.66 1850.4,1207.66 1850.98,1207.66 1851.57,1207.66 1852.16,1207.66 1852.74,1207.66 1853.33,1207.66 1853.92,1207.66 1854.5,1207.66 1855.09,1207.66 1855.68,1207.66 1856.26,1207.66 1856.85,1207.66 1857.43,1207.66 1858.02,1207.66 1858.61,1207.66 1859.19,1207.66 1859.78,1207.66 1860.37,1207.66 1860.95,1207.66 1861.54,1207.66 1862.13,1207.66 1862.71,1207.66 1863.3,1207.66 1863.88,1207.66 1864.47,1207.66 1865.06,1207.66 1865.64,1207.66 1866.23,1207.66 1866.82,1207.66 1867.4,1207.66 1867.99,1207.66 1868.58,1207.66 1869.16,1207.66 1869.75,1207.66 1870.34,1207.66 1870.92,1207.66 1871.51,1207.66 1872.09,1207.66 1872.68,1207.66 1873.27,1207.66 1873.85,1207.66 1874.44,1207.66 1875.03,1207.66 1875.61,1207.66 1876.2,1207.66 1876.79,1207.66 1877.37,1207.66 1877.96,1207.66 1878.55,1207.66 1879.13,1207.66 1879.72,1207.66 1880.3,1207.66 1880.89,1207.66 1881.48,1207.66 1882.06,1207.66 1882.65,1207.66 1883.24,1207.66 1883.82,1207.66 1884.41,1207.66 1885,1207.66 1885.58,1207.66 1886.17,1207.66 1886.76,1207.66 1887.34,1207.66 1887.93,1207.66 1888.51,1207.66 1889.1,1207.66 1889.69,1207.66 1890.27,1207.66 1890.86,1207.66 1891.45,1207.66 1892.03,1207.66 1892.62,1207.66 1893.21,1207.66 1893.79,1207.66 1894.38,1207.66 1894.96,1207.66 1895.55,1207.66 1896.14,1207.66 1896.72,1207.66 1897.31,1207.66 1897.9,1207.66 1898.48,1207.66 1899.07,1207.66 1899.66,1207.66 1900.24,1207.66 1900.83,1207.66 1901.42,1207.66 1902,1207.66 1902.59,1207.66 1903.17,1207.66 1903.76,1207.66 1904.35,1207.66 1904.93,1207.66 1905.52,1207.66 1906.11,1207.66 1906.69,1207.66 1907.28,1207.66 1907.87,1207.66 1908.45,1207.66 1909.04,1207.66 1909.63,1207.66 1910.21,1207.66 1910.8,1207.66 1911.38,1207.66 1911.97,1207.66 1912.56,1207.66 1913.14,1207.66 1913.73,1207.66 1914.32,1207.66 1914.9,1207.66 1915.49,1207.66 1916.08,1207.66 1916.66,1207.66 1917.25,1207.66 1917.83,1207.66 1918.42,1207.66 1919.01,1207.66 1919.59,1207.66 1920.18,1207.66 1920.77,1207.66 1921.35,1207.66 1921.94,1207.66 1922.53,1207.66 1923.11,1207.66 1923.7,1207.66 1924.29,1207.66 1924.87,1207.66 1925.46,1207.66 1926.04,1207.66 1926.63,1207.66 1927.22,1207.66 1927.8,1207.66 1928.39,1207.66 1928.98,1207.66 1929.56,1207.66 1930.15,1207.66 1930.74,1207.66 1931.32,1207.66 1931.91,1207.66 1932.5,1207.66 1933.08,1207.66 1933.67,1207.66 1934.25,1207.66 1934.84,1207.66 1935.43,1207.66 1936.01,1207.66 1936.6,1207.66 1937.19,1207.66 1937.77,1207.66 1938.36,1207.66 1938.95,1207.66 1939.53,1207.66 1940.12,1207.66 1940.71,1207.66 1941.29,1207.66 1941.88,1207.66 1942.46,1207.66 1943.05,1207.66 1943.64,1207.66 1944.22,1207.66 1944.81,1207.66 1945.4,1207.66 1945.98,1207.66 1946.57,1207.66 1947.16,1207.66 1947.74,1207.66 1948.33,1207.66 1948.91,1207.66 1949.5,1207.66 1950.09,1207.66 1950.67,1207.66 1951.26,1207.66 1951.85,1207.66 1952.43,1207.66 1953.02,1207.66 1953.61,1207.66 1954.19,1207.66 1954.78,1207.66 1955.37,1207.66 1955.95,1207.66 1956.54,1207.66 1957.12,1207.66 1957.71,1207.66 1958.3,1207.66 1958.88,1207.66 1959.47,1207.66 1960.06,1207.66 1960.64,1207.66 1961.23,1207.66 1961.82,1207.66 1962.4,1207.66 1962.99,1207.66 1963.58,1207.66 1964.16,1207.66 1964.75,1207.66 1965.33,1207.66 1965.92,1207.66 1966.51,1207.66 1967.09,1207.66 1967.68,1207.66 1968.27,1207.66 1968.85,1207.66 1969.44,1207.66 1970.03,1207.66 1970.61,1207.66 1971.2,1207.66 1971.78,1207.66 1972.37,1207.66 1972.96,1207.66 1973.54,1207.66 1974.13,1207.66 1974.72,1207.66 1975.3,1207.66 1975.89,1207.66 1976.48,1207.66 1977.06,1207.66 1977.65,1207.66 1978.24,1207.66 1978.82,1207.66 1979.41,1207.66 1979.99,1207.66 1980.58,1207.66 1981.17,1207.66 1981.75,1207.66 1982.34,1207.66 1982.93,1207.66 1983.51,1207.66 1984.1,1207.66 1984.69,1207.66 1985.27,1207.66 1985.86,1207.66 1986.45,1207.66 1987.03,1207.66 1987.62,1207.66 1988.2,1207.66 1988.79,1207.66 1989.38,1207.66 1989.96,1207.66 1990.55,1207.66 1991.14,1207.66 1991.72,1207.66 1992.31,1207.66 1992.9,1207.66 1993.48,1207.66 1994.07,1207.66 1994.65,1207.66 1995.24,1207.66 1995.83,1207.66 1996.41,1207.66 1997,1207.66 1997.59,1207.66 1998.17,1207.66 1998.76,1207.66 1999.35,1207.66 1999.93,1207.66 2000.52,1207.66 2001.11,1207.66 2001.69,1207.66 2002.28,1207.66 2002.86,1207.66 2003.45,1207.66 2004.04,1207.66 2004.62,1207.66 2005.21,1207.66 2005.8,1207.66 2006.38,1207.66 2006.97,1207.66 2007.56,1207.66 2008.14,1207.66 2008.73,1207.66 2009.32,1207.66 2009.9,1207.66 2010.49,1207.66 2011.07,1207.66 2011.66,1207.66 2012.25,1207.66 2012.83,1207.66 2013.42,1207.66 2014.01,1207.66 2014.59,1207.66 2015.18,1207.66 2015.77,1207.66 2016.35,1207.66 2016.94,1207.66 2017.53,1207.66 2018.11,1207.66 2018.7,1207.66 2019.28,1207.66 2019.87,1207.66 2020.46,1207.66 2021.04,1207.66 2021.63,1207.66 2022.22,1207.66 2022.8,1207.66 2023.39,1207.66 2023.98,1207.66 2024.56,1207.66 2025.15,1207.66 2025.73,1207.66 2026.32,1207.66 2026.91,1207.66 2027.49,1207.66 2028.08,1207.66 2028.67,1207.66 2029.25,1207.66 2029.84,1207.66 2030.43,1207.66 2031.01,1207.66 2031.6,1207.66 2032.19,1207.66 2032.77,1207.66 2033.36,1207.66 2033.94,1207.66 2034.53,1207.66 2035.12,1207.66 2035.7,1207.66 2036.29,1207.66 2036.88,1207.66 2037.46,1207.66 2038.05,1207.66 2038.64,1207.66 2039.22,1207.66 2039.81,1207.66 2040.4,1207.66 2040.98,1207.66 2041.57,1207.66 2042.15,1207.66 2042.74,1207.66 2043.33,1207.66 2043.91,1207.66 2044.5,1207.66 2045.09,1207.66 2045.67,1207.66 2046.26,1207.66 2046.85,1207.66 2047.43,1207.66 2048.02,1207.66 2048.6,1207.66 2049.19,1207.66 2049.78,1207.66 2050.36,1207.66 2050.95,1207.66 2051.54,1207.66 2052.12,1207.66 2052.71,1207.66 2053.3,1207.66 2053.88,1207.66 2054.47,1207.66 2055.06,1207.66 2055.64,1207.66 2056.23,1207.66 2056.81,1207.66 2057.4,1207.66 2057.99,1207.66 2058.57,1207.66 2059.16,1207.66 2059.75,1207.66 2060.33,1207.66 2060.92,1207.66 2061.51,1207.66 2062.09,1207.66 2062.68,1207.66 2063.27,1207.66 2063.85,1207.66 2064.44,1207.66 2065.02,1207.66 2065.61,1207.66 2066.2,1207.66 2066.78,1207.66 2067.37,1207.66 2067.96,1207.66 2068.54,1207.66 2069.13,1207.66 2069.72,1207.66 2070.3,1207.66 2070.89,1207.66 2071.48,1207.66 2072.06,1207.66 2072.65,1207.66 2073.23,1207.66 2073.82,1207.66 2074.41,1207.66 2074.99,1207.66 2075.58,1207.66 2076.17,1207.66 2076.75,1207.66 2077.34,1207.66 2077.93,1207.66 2078.51,1207.66 2079.1,1207.66 2079.68,1207.66 2080.27,1207.66 2080.86,1207.66 2081.44,1207.66 2082.03,1207.66 2082.62,1207.66 2083.2,1207.66 2083.79,1207.66 2084.38,1207.66 2084.96,1207.66 2085.55,1207.66 2086.14,1207.66 2086.72,1207.66 2087.31,1207.66 2087.89,1207.66 2088.48,1207.66 2089.07,1207.66 2089.65,1207.66 2090.24,1207.66 2090.83,1207.66 2091.41,1207.66 2092,1207.66 2092.59,1207.66 2093.17,1207.66 2093.76,1207.66 2094.35,1207.66 2094.93,1207.66 2095.52,1207.66 2096.1,1207.66 2096.69,1207.66 2097.28,1207.66 2097.86,1207.66 2098.45,1207.66 2099.04,1207.66 2099.62,1207.66 2100.21,1207.66 2100.8,1207.66 2101.38,1207.66 2101.97,1207.66 2102.55,1207.66 2103.14,1207.66 2103.73,1207.66 2104.31,1207.66 2104.9,1207.66 2105.49,1207.66 2106.07,1207.66 2106.66,1207.66 2107.25,1207.66 2107.83,1207.66 2108.42,1207.66 2109.01,1207.66 2109.59,1207.66 2110.18,1207.66 2110.76,1207.66 2111.35,1207.66 2111.94,1207.66 2112.52,1207.66 2113.11,1207.66 2113.7,1207.66 2114.28,1207.66 2114.87,1207.66 2115.46,1207.66 2116.04,1207.66 2116.63,1207.66 2117.22,1207.66 2117.8,1207.66 2118.39,1207.66 2118.97,1207.66 2119.56,1207.66 2120.15,1207.66 2120.73,1207.66 2121.32,1207.66 2121.91,1207.66 2122.49,1207.66 2123.08,1207.66 2123.67,1207.66 2124.25,1207.66 2124.84,1207.66 2125.42,1207.66 2126.01,1207.66 2126.6,1207.66 2127.18,1207.66 2127.77,1207.66 2128.36,1207.66 2128.94,1207.66 2129.53,1207.66 2130.12,1207.66 2130.7,1207.66 2131.29,1207.66 2131.88,1207.66 2132.46,1207.66 2133.05,1207.66 2133.63,1207.66 2134.22,1207.66 2134.81,1207.66 2135.39,1207.66 2135.98,1207.66 2136.57,1207.66 2137.15,1207.66 2137.74,1207.66 2138.33,1207.66 2138.91,1207.66 2139.5,1207.66 2140.09,1207.66 2140.67,1207.66 2141.26,1207.66 2141.84,1207.66 2142.43,1207.66 2143.02,1207.66 2143.6,1207.66 2144.19,1207.66 2144.78,1207.66 2145.36,1207.66 2145.95,1207.66 2146.54,1207.66 2147.12,1207.66 2147.71,1207.66 2148.3,1207.66 2148.88,1207.66 2149.47,1207.66 2150.05,1207.66 2150.64,1207.66 2151.23,1207.66 2151.81,1207.66 2152.4,1207.66 2152.99,1207.66 2153.57,1207.66 2154.16,1207.66 2154.75,1207.66 2155.33,1207.66 2155.92,1207.66 2156.5,1207.66 2157.09,1207.66 2157.68,1207.66 2158.26,1207.66 \"/>\n<path clip-path=\"url(#clip652)\" d=\"M986.025 1207.44 L986.612 1207.44 L987.198 1207.44 L987.785 1207.44 L988.371 1207.44 L988.957 1207.44 L989.544 1207.44 L990.13 1207.44 L990.717 1207.44 L991.303 1207.44 L991.889 1207.44 L992.476 1207.44 L993.062 1207.44 L993.649 1207.44 L994.235 1207.44 L994.822 1207.44 L995.408 1207.44 L995.994 1207.44 L996.581 1207.44 L997.167 1207.44 L997.754 1207.44 L998.34 1207.44 L998.926 1207.44 L999.513 1207.44 L1000.1 1207.44 L1000.69 1207.44 L1001.27 1207.44 L1001.86 1207.44 L1002.44 1207.44 L1003.03 1207.44 L1003.62 1207.44 L1004.2 1207.44 L1004.79 1207.44 L1005.38 1207.44 L1005.96 1207.44 L1006.55 1207.44 L1007.14 1207.44 L1007.72 1207.44 L1008.31 1207.44 L1008.9 1207.44 L1009.48 1207.44 L1010.07 1207.44 L1010.65 1207.44 L1011.24 1207.44 L1011.83 1207.44 L1012.41 1207.44 L1013 1207.44 L1013.59 1207.44 L1014.17 1207.44 L1014.76 1207.44 L1015.35 1207.44 L1015.93 1207.44 L1016.52 1207.44 L1017.11 1207.44 L1017.69 1207.44 L1018.28 1207.44 L1018.86 1207.44 L1019.45 1207.44 L1020.04 1207.44 L1020.62 1207.44 L1021.21 1207.44 L1021.8 1207.44 L1022.38 1207.44 L1022.97 1207.44 L1023.56 1207.44 L1024.14 1207.44 L1024.73 1207.44 L1025.32 1207.44 L1025.9 1207.44 L1026.49 1207.44 L1027.07 1207.44 L1027.66 1207.44 L1028.25 1207.44 L1028.83 1207.44 L1029.42 1207.44 L1030.01 1207.44 L1030.59 1207.44 L1031.18 1207.44 L1031.77 1207.44 L1032.35 1207.44 L1032.94 1207.44 L1033.52 1207.44 L1034.11 1207.44 L1034.7 1207.44 L1035.28 1207.44 L1035.87 1207.44 L1036.46 1207.44 L1037.04 1207.44 L1037.63 1207.44 L1038.22 1207.44 L1038.8 1207.44 L1039.39 1207.44 L1039.98 1207.44 L1040.56 1207.44 L1041.15 1207.44 L1041.73 1207.44 L1042.32 1207.44 L1042.91 1207.44 L1043.49 1207.44 L1044.08 1207.44 L1044.67 1207.44 L1045.25 1207.44 L1045.84 1207.44 L1046.43 1207.44 L1047.01 1207.44 L1047.6 1207.44 L1048.19 1207.44 L1048.77 1207.44 L1049.36 1207.44 L1049.94 1207.44 L1050.53 1207.44 L1051.12 1207.44 L1051.7 1207.44 L1052.29 1207.44 L1052.88 1207.44 L1053.46 1207.44 L1054.05 1207.44 L1054.64 1207.44 L1055.22 1207.44 L1055.81 1207.44 L1056.39 1207.44 L1056.98 1207.44 L1057.57 1207.44 L1058.15 1207.44 L1058.74 1207.44 L1059.33 1207.44 L1059.91 1207.44 L1060.5 1207.44 L1061.09 1207.44 L1061.67 1207.44 L1062.26 1207.44 L1062.85 1207.44 L1063.43 1207.44 L1064.02 1207.44 L1064.6 1207.44 L1065.19 1207.44 L1065.78 1207.44 L1066.36 1207.44 L1066.95 1207.44 L1067.54 1207.44 L1068.12 1207.44 L1068.71 1207.44 L1069.3 1207.44 L1069.88 1207.44 L1070.47 1207.44 L1071.06 1207.44 L1071.64 1207.44 L1072.23 1207.44 L1072.81 1207.44 L1073.4 1207.44 L1073.99 1207.44 L1074.57 1207.44 L1075.16 1207.44 L1075.75 1207.44 L1076.33 1207.44 L1076.92 1207.44 L1077.51 1207.44 L1078.09 1207.44 L1078.68 1207.44 L1079.26 1207.44 L1079.85 1207.44 L1080.44 1207.44 L1081.02 1207.44 L1081.61 1207.44 L1082.2 1207.44 L1082.78 1207.44 L1083.37 1207.44 L1083.96 1207.44 L1084.54 1207.44 L1085.13 1207.44 L1085.72 1207.44 L1086.3 1207.44 L1086.89 1207.44 L1087.47 1207.44 L1088.06 1207.44 L1088.65 1207.44 L1089.23 1207.44 L1089.82 1207.44 L1090.41 1207.44 L1090.99 1207.44 L1091.58 1207.44 L1092.17 1207.44 L1092.75 1207.44 L1093.34 1207.44 L1093.93 1207.44 L1094.51 1207.44 L1095.1 1207.44 L1095.68 1207.44 L1096.27 1207.44 L1096.86 1207.44 L1097.44 1207.44 L1098.03 1207.44 L1098.62 1207.44 L1099.2 1207.44 L1099.79 1207.44 L1100.38 1207.44 L1100.96 1207.44 L1101.55 1207.44 L1102.14 1207.44 L1102.72 1207.44 L1103.31 1207.44 L1103.89 1207.44 L1104.48 1207.44 L1105.07 1207.44 L1105.65 1207.44 L1106.24 1207.44 L1106.83 1207.44 L1107.41 1207.44 L1108 1207.44 L1108.59 1207.44 L1109.17 1207.44 L1109.76 1207.44 L1110.34 1207.44 L1110.93 1207.44 L1111.52 1207.44 L1112.1 1207.44 L1112.69 1207.44 L1113.28 1207.44 L1113.86 1207.44 L1114.45 1207.44 L1115.04 1207.44 L1115.62 1207.44 L1116.21 1207.44 L1116.8 1207.44 L1117.38 1207.44 L1117.97 1207.44 L1118.55 1207.44 L1119.14 1207.44 L1119.73 1207.44 L1120.31 1207.44 L1120.9 1207.44 L1121.49 1207.44 L1122.07 1207.44 L1122.66 1207.44 L1123.25 1207.44 L1123.83 1207.44 L1124.42 1207.44 L1125.01 1207.44 L1125.59 1207.44 L1126.18 1207.44 L1126.76 1207.44 L1127.35 1207.44 L1127.94 1207.44 L1128.52 1207.44 L1129.11 1207.44 L1129.7 1207.44 L1130.28 1207.44 L1130.87 1207.44 L1131.46 1207.44 L1132.04 1207.44 L1132.63 1207.44 L1133.21 1207.44 L1133.8 1207.44 L1134.39 1207.44 L1134.97 1207.44 L1135.56 1207.44 L1136.15 1207.44 L1136.73 1207.44 L1137.32 1207.44 L1137.91 1207.44 L1138.49 1207.44 L1139.08 1207.44 L1139.67 1207.44 L1140.25 1207.44 L1140.84 1207.44 L1141.42 1207.44 L1142.01 1207.44 L1142.6 1207.44 L1143.18 1207.44 L1143.77 1207.44 L1144.36 1207.44 L1144.94 1207.44 L1145.53 1207.44 L1146.12 1207.44 L1146.7 1207.44 L1147.29 1207.44 L1147.88 1207.44 L1148.46 1207.44 L1149.05 1207.44 L1149.63 1207.44 L1150.22 1207.44 L1150.81 1207.44 L1151.39 1207.44 L1151.98 1207.44 L1152.57 1207.44 L1153.15 1207.44 L1153.74 1207.44 L1154.33 1207.44 L1154.91 1207.44 L1155.5 1207.44 L1156.09 1207.44 L1156.67 1207.44 L1157.26 1207.44 L1157.84 1207.44 L1158.43 1207.44 L1159.02 1207.44 L1159.6 1207.44 L1160.19 1207.44 L1160.78 1207.44 L1161.36 1207.44 L1161.95 1207.44 L1162.54 1207.44 L1163.12 1207.44 L1163.71 1207.44 L1164.29 1207.44 L1164.88 1207.44 L1165.47 1207.44 L1166.05 1207.44 L1166.64 1207.44 L1167.23 1207.44 L1167.81 1207.44 L1168.4 1207.44 L1168.99 1207.44 L1169.57 1207.44 L1170.16 1207.44 L1170.75 1207.44 L1171.33 1207.44 L1171.92 1207.44 L1172.5 1207.44 L1173.09 1207.44 L1173.68 1207.44 L1174.26 1207.44 L1174.85 1207.44 L1175.44 1207.44 L1176.02 1207.44 L1176.61 1207.44 L1177.2 1207.44 L1177.78 1207.44 L1178.37 1207.44 L1178.96 1207.44 L1179.54 1207.44 L1180.13 1207.44 L1180.71 1207.44 L1181.3 1207.44 L1181.89 1207.44 L1182.47 1207.44 L1183.06 1207.44 L1183.65 1207.44 L1184.23 1207.44 L1184.82 1207.44 L1185.41 1207.44 L1185.99 1207.44 L1186.58 1207.44 L1187.16 1207.44 L1187.75 1207.44 L1188.34 1207.44 L1188.92 1207.44 L1189.51 1207.44 L1190.1 1207.44 L1190.68 1207.44 L1191.27 1207.44 L1191.86 1207.44 L1192.44 1207.44 L1193.03 1207.44 L1193.62 1207.44 L1194.2 1207.44 L1194.79 1207.44 L1195.37 1207.44 L1195.96 1207.44 L1196.55 1207.44 L1197.13 1207.44 L1197.72 1207.44 L1198.31 1207.44 L1198.89 1207.44 L1199.48 1207.44 L1200.07 1207.44 L1200.65 1207.44 L1201.24 1207.44 L1201.83 1207.44 L1202.41 1207.44 L1203 1207.44 L1203.58 1207.44 L1204.17 1207.44 L1204.76 1207.44 L1205.34 1207.44 L1205.93 1207.44 L1206.52 1207.44 L1207.1 1207.44 L1207.69 1207.44 L1208.28 1207.44 L1208.86 1207.44 L1209.45 1207.44 L1210.03 1207.44 L1210.62 1207.44 L1211.21 1207.44 L1211.79 1207.44 L1212.38 1207.44 L1212.97 1207.44 L1213.55 1207.44 L1214.14 1207.44 L1214.73 1207.44 L1215.31 1207.44 L1215.9 1207.44 L1216.49 1207.44 L1217.07 1207.44 L1217.66 1207.44 L1218.24 1207.44 L1218.83 1207.44 L1219.42 1207.44 L1220 1207.44 L1220.59 1207.44 L1221.18 1207.44 L1221.76 1207.44 L1222.35 1207.44 L1222.94 1207.44 L1223.52 1207.44 L1224.11 1207.44 L1224.7 1207.44 L1225.28 1207.44 L1225.87 1207.44 L1226.45 1207.44 L1227.04 1207.44 L1227.63 1207.44 L1228.21 1207.44 L1228.8 1207.44 L1229.39 1207.44 L1229.97 1207.44 L1230.56 1207.44 L1231.15 1207.44 L1231.73 1207.44 L1232.32 1207.44 L1232.91 1207.44 L1233.49 1207.44 L1234.08 1207.44 L1234.66 1207.44 L1235.25 1207.44 L1235.84 1207.44 L1236.42 1207.44 L1237.01 1207.44 L1237.6 1207.44 L1238.18 1207.44 L1238.77 1207.44 L1239.36 1207.44 L1239.94 1207.44 L1240.53 1207.44 L1241.11 1207.44 L1241.7 1207.44 L1242.29 1207.44 L1242.87 1207.44 L1243.46 1207.44 L1244.05 1207.44 L1244.63 1207.44 L1245.22 1207.44 L1245.81 1207.44 L1246.39 1207.44 L1246.98 1207.44 L1247.57 1207.44 L1248.15 1207.44 L1248.74 1207.44 L1249.32 1207.44 L1249.91 1207.44 L1250.5 1207.44 L1251.08 1207.44 L1251.67 1207.44 L1252.26 1207.44 L1252.84 1207.44 L1253.43 1207.44 L1254.02 1207.44 L1254.6 1207.44 L1255.19 1207.44 L1255.78 1207.44 L1256.36 1207.44 L1256.95 1207.44 L1257.53 1207.44 L1258.12 1207.44 L1258.71 1207.44 L1259.29 1207.44 L1259.88 1207.44 L1260.47 1207.44 L1261.05 1207.44 L1261.64 1207.44 L1262.23 1207.44 L1262.81 1207.44 L1263.4 1207.44 L1263.98 1207.44 L1264.57 1207.44 L1265.16 1207.44 L1265.74 1207.44 L1266.33 1207.44 L1266.92 1207.44 L1267.5 1207.44 L1268.09 1207.44 L1268.68 1207.44 L1269.26 1207.44 L1269.85 1207.44 L1270.44 1207.44 L1271.02 1207.44 L1271.61 1207.44 L1272.19 1207.44 L1272.78 1207.44 L1273.37 1207.44 L1273.95 1207.44 L1274.54 1207.44 L1275.13 1207.44 L1275.71 1207.44 L1276.3 1207.44 L1276.89 1207.44 L1277.47 1207.44 L1278.06 1207.44 L1278.65 1207.44 L1279.23 1207.44 L1279.82 1207.44 L1280.4 1207.44 L1280.99 1207.44 L1281.58 1207.44 L1282.16 1207.44 L1282.75 1207.44 L1283.34 1207.44 L1283.92 1207.44 L1284.51 1207.44 L1285.1 1207.44 L1285.68 1207.44 L1286.27 1207.44 L1286.86 1207.44 L1287.44 1207.44 L1288.03 1207.44 L1288.61 1207.44 L1289.2 1207.44 L1289.79 1207.44 L1290.37 1207.44 L1290.96 1207.44 L1291.55 1207.44 L1292.13 1207.44 L1292.72 1207.44 L1293.31 1207.44 L1293.89 1207.44 L1294.48 1207.44 L1295.06 1207.44 L1295.65 1207.44 L1296.24 1207.44 L1296.82 1207.44 L1297.41 1207.44 L1298 1207.44 L1298.58 1207.44 L1299.17 1207.44 L1299.76 1207.44 L1300.34 1207.44 L1300.93 1207.44 L1301.52 1207.44 L1302.1 1207.44 L1302.69 1207.44 L1303.27 1207.44 L1303.86 1207.44 L1304.45 1207.44 L1305.03 1207.44 L1305.62 1207.44 L1306.21 1207.44 L1306.79 1207.44 L1307.38 1207.44 L1307.97 1207.44 L1308.55 1207.44 L1309.14 1207.44 L1309.73 1207.44 L1310.31 1207.44 L1310.9 1207.44 L1311.48 1207.44 L1312.07 1207.44 L1312.66 1207.44 L1313.24 1207.44 L1313.83 1207.44 L1314.42 1207.44 L1315 1207.44 L1315.59 1207.44 L1316.18 1207.44 L1316.76 1207.44 L1317.35 1207.44 L1317.93 1207.44 L1318.52 1207.44 L1319.11 1207.44 L1319.69 1207.44 L1320.28 1207.44 L1320.87 1207.44 L1321.45 1207.44 L1322.04 1207.44 L1322.63 1207.44 L1323.21 1207.44 L1323.8 1207.44 L1324.39 1207.44 L1324.97 1207.44 L1325.56 1207.44 L1326.14 1207.44 L1326.73 1207.44 L1327.32 1207.44 L1327.9 1207.44 L1328.49 1207.44 L1329.08 1207.44 L1329.66 1207.44 L1330.25 1207.44 L1330.84 1207.44 L1331.42 1207.44 L1332.01 1207.44 L1332.6 1207.44 L1333.18 1207.44 L1333.77 1207.44 L1334.35 1207.44 L1334.94 1207.44 L1335.53 1207.44 L1336.11 1207.44 L1336.7 1207.44 L1337.29 1207.44 L1337.87 1207.44 L1338.46 1207.44 L1339.05 1207.44 L1339.63 1207.44 L1340.22 1207.44 L1340.8 1207.44 L1341.39 1207.44 L1341.98 1207.44 L1342.56 1207.44 L1343.15 1207.44 L1343.74 1207.44 L1344.32 1207.44 L1344.91 1207.44 L1345.5 1207.44 L1346.08 1207.44 L1346.67 1207.44 L1347.26 1207.44 L1347.84 1207.44 L1348.43 1207.44 L1349.01 1207.44 L1349.6 1207.44 L1350.19 1207.44 L1350.77 1207.44 L1351.36 1207.44 L1351.95 1207.44 L1352.53 1207.44 L1353.12 1207.44 L1353.71 1207.44 L1354.29 1207.44 L1354.88 1207.44 L1355.47 1207.44 L1356.05 1207.44 L1356.64 1207.44 L1357.22 1207.44 L1357.81 1207.44 L1358.4 1207.44 L1358.98 1207.44 L1359.57 1207.44 L1360.16 1207.44 L1360.74 1207.44 L1361.33 1207.44 L1361.92 1207.44 L1362.5 1207.44 L1363.09 1207.44 L1363.68 1207.44 L1364.26 1207.44 L1364.85 1207.44 L1365.43 1207.44 L1366.02 1207.44 L1366.61 1207.44 L1367.19 1207.44 L1367.78 1207.44 L1368.37 1207.44 L1368.95 1207.44 L1369.54 1207.44 L1370.13 1207.44 L1370.71 1207.44 L1371.3 1207.44 L1371.88 1207.44 L1372.47 1207.44 L1373.06 1207.44 L1373.64 1207.44 L1374.23 1207.44 L1374.82 1207.44 L1375.4 1207.44 L1375.99 1207.44 L1376.58 1207.44 L1377.16 1207.44 L1377.75 1207.44 L1378.34 1207.44 L1378.92 1207.44 L1379.51 1207.44 L1380.09 1207.44 L1380.68 1207.44 L1381.27 1207.44 L1381.85 1207.44 L1382.44 1207.44 L1383.03 1207.44 L1383.61 1207.44 L1384.2 1207.44 L1384.79 1207.44 L1385.37 1207.44 L1385.96 1207.44 L1386.55 1207.44 L1387.13 1207.44 L1387.72 1207.44 L1388.3 1207.44 L1388.89 1207.44 L1389.48 1207.44 L1390.06 1207.44 L1390.65 1207.44 L1391.24 1207.44 L1391.82 1207.44 L1392.41 1207.44 L1393 1207.44 L1393.58 1207.44 L1394.17 1207.44 L1394.75 1207.44 L1395.34 1207.44 L1395.93 1207.44 L1396.51 1207.44 L1397.1 1207.44 L1397.69 1207.44 L1398.27 1207.44 L1398.86 1207.44 L1399.45 1207.44 L1400.03 1207.44 L1400.62 1207.44 L1401.21 1207.44 L1401.79 1207.44 L1402.38 1207.44 L1402.96 1207.44 L1403.55 1207.44 L1404.14 1207.44 L1404.72 1207.44 L1405.31 1207.44 L1405.9 1207.44 L1406.48 1207.44 L1407.07 1207.44 L1407.66 1207.44 L1408.24 1207.44 L1408.83 1207.44 L1409.42 1207.44 L1410 1207.44 L1410.59 1207.44 L1411.17 1207.44 L1411.76 1207.44 L1412.35 1207.44 L1412.93 1207.44 L1413.52 1207.44 L1414.11 1207.44 L1414.69 1207.44 L1415.28 1207.44 L1415.87 1207.44 L1416.45 1207.44 L1417.04 1207.44 L1417.63 1207.44 L1418.21 1207.44 L1418.8 1207.44 L1419.38 1207.44 L1419.97 1207.44 L1420.56 1207.44 L1421.14 1207.44 L1421.73 1207.44 L1422.32 1207.44 L1422.9 1207.44 L1423.49 1207.44 L1424.08 1207.44 L1424.66 1207.44 L1425.25 1207.44 L1425.83 1207.44 L1426.42 1207.44 L1427.01 1207.44 L1427.59 1207.44 L1428.18 1207.44 L1428.77 1207.44 L1429.35 1207.44 L1429.94 1207.44 L1430.53 1207.44 L1431.11 1207.44 L1431.7 1207.44 L1432.29 1207.44 L1432.87 1207.44 L1433.46 1207.44 L1434.04 1207.44 L1434.63 1207.44 L1435.22 1207.44 L1435.8 1207.44 L1436.39 1207.44 L1436.98 1207.44 L1437.56 1207.44 L1438.15 1207.44 L1438.74 1207.44 L1439.32 1207.44 L1439.91 1207.44 L1440.5 1207.44 L1441.08 1207.44 L1441.67 1207.44 L1442.25 1207.44 L1442.84 1207.44 L1443.43 1207.44 L1444.01 1207.44 L1444.6 1207.44 L1445.19 1207.44 L1445.77 1207.44 L1446.36 1207.44 L1446.95 1207.44 L1447.53 1207.44 L1448.12 1207.44 L1448.7 1207.44 L1449.29 1207.44 L1449.88 1207.44 L1450.46 1207.44 L1451.05 1207.44 L1451.64 1207.44 L1452.22 1207.44 L1452.81 1207.44 L1453.4 1207.44 L1453.98 1207.44 L1454.57 1207.44 L1455.16 1207.44 L1455.74 1207.44 L1456.33 1207.44 L1456.91 1207.44 L1457.5 1207.44 L1458.09 1207.44 L1458.67 1207.44 L1459.26 1207.44 L1459.85 1207.44 L1460.43 1207.44 L1461.02 1207.44 L1461.61 1207.44 L1462.19 1207.44 L1462.78 1207.44 L1463.37 1207.44 L1463.95 1207.44 L1464.54 1207.44 L1465.12 1207.44 L1465.71 1207.44 L1466.3 1207.44 L1466.88 1207.44 L1467.47 1207.44 L1468.06 1207.44 L1468.64 1207.44 L1469.23 1207.44 L1469.82 1207.44 L1470.4 1207.44 L1470.99 1207.44 L1471.57 1207.44 L1472.16 1207.44 L1472.75 1207.44 L1473.33 1207.44 L1473.92 1207.44 L1474.51 1207.44 L1475.09 1207.44 L1475.68 1207.44 L1476.27 1207.44 L1476.85 1207.44 L1477.44 1207.44 L1478.03 1207.44 L1478.61 1207.44 L1479.2 1207.44 L1479.78 1207.44 L1480.37 1207.44 L1480.96 1207.44 L1481.54 1207.44 L1482.13 1207.44 L1482.72 1207.44 L1483.3 1207.44 L1483.89 1207.44 L1484.48 1207.44 L1485.06 1207.44 L1485.65 1207.44 L1486.24 1207.44 L1486.82 1207.44 L1487.41 1207.44 L1487.99 1207.44 L1488.58 1207.44 L1489.17 1207.44 L1489.75 1207.44 L1490.34 1207.44 L1490.93 1207.44 L1491.51 1207.44 L1492.1 1207.44 L1492.69 1207.44 L1493.27 1207.44 L1493.86 1207.44 L1494.45 1207.44 L1495.03 1207.44 L1495.62 1207.44 L1496.2 1207.44 L1496.79 1207.44 L1497.38 1207.44 L1497.96 1207.44 L1498.55 1207.44 L1499.14 1207.44 L1499.72 1207.44 L1500.31 1207.44 L1500.9 1207.44 L1501.48 1207.44 L1502.07 1207.44 L1502.65 1207.44 L1503.24 1207.44 L1503.83 1207.44 L1504.41 1207.44 L1505 1207.44 L1505.59 1207.44 L1506.17 1207.44 L1506.76 1207.44 L1507.35 1207.44 L1507.93 1207.44 L1508.52 1207.44 L1509.11 1207.44 L1509.69 1207.44 L1510.28 1207.44 L1510.86 1207.44 L1511.45 1207.44 L1512.04 1207.44 L1512.62 1207.44 L1513.21 1207.44 L1513.8 1207.44 L1514.38 1207.44 L1514.97 1207.44 L1515.56 1207.44 L1516.14 1207.44 L1516.73 1207.44 L1517.32 1207.44 L1517.9 1207.44 L1518.49 1207.44 L1519.07 1207.44 L1519.66 1207.44 L1520.25 1207.44 L1520.83 1207.44 L1521.42 1207.44 L1522.01 1207.44 L1522.59 1207.44 L1523.18 1207.44 L1523.77 1207.44 L1524.35 1207.44 L1524.94 1207.44 L1525.52 1207.44 L1526.11 1207.44 L1526.7 1207.44 L1527.28 1207.44 L1527.87 1207.44 L1528.46 1207.44 L1529.04 1207.44 L1529.63 1207.44 L1530.22 1207.44 L1530.8 1207.44 L1531.39 1207.44 L1531.98 1207.44 L1532.56 1207.44 L1533.15 1207.44 L1533.73 1207.44 L1534.32 1207.44 L1534.91 1207.44 L1535.49 1207.44 L1536.08 1207.44 L1536.67 1207.44 L1537.25 1207.44 L1537.84 1207.44 L1538.43 1207.44 L1539.01 1207.44 L1539.6 1207.44 L1540.19 1207.44 L1540.77 1207.44 L1541.36 1207.44 L1541.94 1207.44 L1542.53 1207.44 L1543.12 1207.44 L1543.7 1207.44 L1544.29 1207.44 L1544.88 1207.44 L1545.46 1207.44 L1546.05 1207.44 L1546.64 1207.44 L1547.22 1207.44 L1547.81 1207.44 L1548.4 1207.44 L1548.98 1207.44 L1549.57 1207.44 L1550.15 1207.44 L1550.74 1207.44 L1551.33 1207.44 L1551.91 1207.44 L1552.5 1207.44 L1553.09 1207.44 L1553.67 1207.44 L1554.26 1207.44 L1554.85 1207.44 L1555.43 1207.44 L1556.02 1207.44 L1556.6 1207.44 L1557.19 1207.44 L1557.78 1207.44 L1558.36 1207.44 L1558.95 1207.44 L1559.54 1207.44 L1560.12 1207.44 L1560.71 1207.44 L1561.3 1207.44 L1561.88 1207.44 L1562.47 1207.44 L1563.06 1207.44 L1563.64 1207.44 L1564.23 1207.44 L1564.81 1207.44 L1565.4 1207.44 L1565.99 1207.44 L1566.57 1207.44 L1567.16 1207.44 L1567.75 1207.44 L1568.33 1207.44 L1568.92 1207.44 L1569.51 1207.44 L1570.09 1207.44 L1570.68 1207.44 L1571.27 1207.44 L1571.85 1207.44 L1572.44 1207.44 L1573.02 1207.44 L1573.61 1207.44 L1574.2 1207.44 L1574.78 1207.44 L1575.37 1207.44 L1575.96 1207.44 L1576.54 1207.44 L1577.13 1207.44 L1577.72 1207.44 L1578.3 1207.44 L1578.89 1207.44 L1579.47 1207.44 L1580.06 1207.44 L1580.65 1207.44 L1581.23 1207.44 L1581.82 1207.44 L1582.41 1207.44 L1582.99 1207.44 L1583.58 1207.44 L1584.17 1207.44 L1584.75 1207.44 L1585.34 1207.44 L1585.93 1207.44 L1586.51 1207.44 L1587.1 1207.44 L1587.68 1207.44 L1588.27 1207.44 L1588.86 1207.44 L1589.44 1207.44 L1590.03 1207.44 L1590.62 1207.44 L1591.2 1207.44 L1591.79 1207.44 L1592.38 1207.44 L1592.96 1207.44 L1593.55 1207.44 L1594.14 1207.44 L1594.72 1207.44 L1595.31 1207.44 L1595.89 1207.44 L1596.48 1207.44 L1597.07 1207.44 L1597.65 1207.44 L1598.24 1207.44 L1598.83 1207.44 L1599.41 1207.44 L1600 1207.44 L1600.59 1207.44 L1601.17 1207.44 L1601.76 1207.44 L1602.34 1207.44 L1602.93 1207.44 L1603.52 1207.44 L1604.1 1207.44 L1604.69 1207.44 L1605.28 1207.44 L1605.86 1207.44 L1606.45 1207.44 L1607.04 1207.44 L1607.62 1207.44 L1608.21 1207.44 L1608.8 1207.44 L1609.38 1207.44 L1609.97 1207.44 L1610.55 1207.44 L1611.14 1207.44 L1611.73 1207.44 L1612.31 1207.44 L1612.9 1207.44 L1613.49 1207.44 L1614.07 1207.44 L1614.66 1207.44 L1615.25 1207.44 L1615.83 1207.44 L1616.42 1207.44 L1617.01 1207.44 L1617.59 1207.44 L1618.18 1207.44 L1618.76 1207.44 L1619.35 1207.44 L1619.94 1207.44 L1620.52 1207.44 L1621.11 1207.44 L1621.7 1207.44 L1622.28 1207.44 L1622.87 1207.44 L1623.46 1207.44 L1624.04 1207.44 L1624.63 1207.44 L1625.22 1207.44 L1625.8 1207.44 L1626.39 1207.44 L1626.97 1207.44 L1627.56 1207.44 L1628.15 1207.44 L1628.73 1207.44 L1629.32 1207.44 L1629.91 1207.44 L1630.49 1207.44 L1631.08 1207.44 L1631.67 1207.44 L1632.25 1207.44 L1632.84 1207.44 L1633.42 1207.44 L1634.01 1207.44 L1634.6 1207.44 L1635.18 1207.44 L1635.77 1207.44 L1636.36 1207.44 L1636.94 1207.44 L1637.53 1207.44 L1638.12 1207.44 L1638.7 1207.44 L1639.29 1207.44 L1639.88 1207.44 L1640.46 1207.44 L1641.05 1207.44 L1641.63 1207.44 L1642.22 1207.44 L1642.81 1207.44 L1643.39 1207.44 L1643.98 1207.44 L1644.57 1207.44 L1645.15 1207.44 L1645.74 1207.44 L1646.33 1207.44 L1646.91 1207.44 L1647.5 1207.44 L1648.09 1207.44 L1648.67 1207.44 L1649.26 1207.44 L1649.84 1207.44 L1650.43 1207.44 L1651.02 1207.44 L1651.6 1207.44 L1652.19 1207.44 L1652.78 1207.44 L1653.36 1207.44 L1653.95 1207.44 L1654.54 1207.44 L1655.12 1207.44 L1655.71 1207.44 L1656.29 1207.44 L1656.88 1207.44 L1657.47 1207.44 L1658.05 1207.44 L1658.64 1207.44 L1659.23 1207.44 L1659.81 1207.44 L1660.4 1207.44 L1660.99 1207.44 L1661.57 1207.44 L1662.16 1207.44 L1662.75 1207.44 L1663.33 1207.44 L1663.92 1207.44 L1664.5 1207.44 L1665.09 1207.44 L1665.68 1207.44 L1666.26 1207.44 L1666.85 1207.44 L1667.44 1207.44 L1668.02 1207.44 L1668.61 1207.44 L1669.2 1207.44 L1669.78 1207.44 L1670.37 1207.44 L1670.96 1207.44 L1671.54 1207.44 L1672.13 1207.44 L1672.71 1207.44 L1673.3 1207.44 L1673.89 1207.44 L1674.47 1207.44 L1675.06 1207.44 L1675.65 1207.44 L1676.23 1207.44 L1676.82 1207.44 L1677.41 1207.44 L1677.99 1207.44 L1678.58 1207.44 L1679.17 1207.44 L1679.75 1207.44 L1680.34 1207.44 L1680.92 1207.44 L1681.51 1207.44 L1682.1 1207.44 L1682.68 1207.44 L1683.27 1207.44 L1683.86 1207.44 L1684.44 1207.44 L1685.03 1207.44 L1685.62 1207.44 L1686.2 1207.44 L1686.79 1207.44 L1687.37 1207.44 L1687.96 1207.44 L1688.55 1207.44 L1689.13 1207.44 L1689.72 1207.44 L1690.31 1207.44 L1690.89 1207.44 L1691.48 1207.44 L1692.07 1207.44 L1692.65 1207.44 L1693.24 1207.44 L1693.83 1207.44 L1694.41 1207.44 L1695 1207.44 L1695.58 1207.44 L1696.17 1207.44 L1696.76 1207.44 L1697.34 1207.44 L1697.93 1207.44 L1698.52 1207.44 L1699.1 1207.44 L1699.69 1207.44 L1700.28 1207.44 L1700.86 1207.44 L1701.45 1207.44 L1702.04 1207.44 L1702.62 1207.44 L1703.21 1207.44 L1703.79 1207.44 L1704.38 1207.44 L1704.97 1207.44 L1705.55 1207.44 L1706.14 1207.44 L1706.73 1207.44 L1707.31 1207.44 L1707.9 1207.44 L1708.49 1207.44 L1709.07 1207.44 L1709.66 1207.44 L1710.24 1207.44 L1710.83 1207.44 L1711.42 1207.44 L1712 1207.44 L1712.59 1207.44 L1713.18 1207.44 L1713.76 1207.44 L1714.35 1207.44 L1714.94 1207.44 L1715.52 1207.44 L1716.11 1207.44 L1716.7 1207.44 L1717.28 1207.44 L1717.87 1207.44 L1718.45 1207.44 L1719.04 1207.44 L1719.63 1207.44 L1720.21 1207.44 L1720.8 1207.44 L1721.39 1207.44 L1721.97 1207.44 L1722.56 1207.44 L1723.15 1207.44 L1723.73 1207.44 L1724.32 1207.44 L1724.91 1207.44 L1725.49 1207.44 L1726.08 1207.44 L1726.66 1207.44 L1727.25 1207.44 L1727.84 1207.44 L1728.42 1207.44 L1729.01 1207.44 L1729.6 1207.44 L1730.18 1207.44 L1730.77 1207.44 L1731.36 1207.44 L1731.94 1207.44 L1732.53 1207.44 L1733.11 1207.44 L1733.7 1207.44 L1734.29 1207.44 L1734.87 1207.44 L1735.46 1207.44 L1736.05 1207.44 L1736.63 1207.44 L1737.22 1207.44 L1737.81 1207.44 L1738.39 1207.44 L1738.98 1207.44 L1739.57 1207.44 L1740.15 1207.44 L1740.74 1207.44 L1741.32 1207.44 L1741.91 1207.44 L1742.5 1207.44 L1743.08 1207.44 L1743.67 1207.44 L1744.26 1207.44 L1744.84 1207.44 L1745.43 1207.44 L1746.02 1207.44 L1746.6 1207.44 L1747.19 1207.44 L1747.78 1207.44 L1748.36 1207.44 L1748.95 1207.44 L1749.53 1207.44 L1750.12 1207.44 L1750.71 1207.44 L1751.29 1207.44 L1751.88 1207.44 L1752.47 1207.44 L1753.05 1207.44 L1753.64 1207.44 L1754.23 1207.44 L1754.81 1207.44 L1755.4 1207.44 L1755.99 1207.44 L1756.57 1207.44 L1757.16 1207.44 L1757.74 1207.44 L1758.33 1207.44 L1758.92 1207.44 L1759.5 1207.44 L1760.09 1207.44 L1760.68 1207.44 L1761.26 1207.44 L1761.85 1207.44 L1762.44 1207.44 L1763.02 1207.44 L1763.61 1207.44 L1764.19 1207.44 L1764.78 1207.44 L1765.37 1207.44 L1765.95 1207.44 L1766.54 1207.44 L1767.13 1207.44 L1767.71 1207.44 L1768.3 1207.44 L1768.89 1207.44 L1769.47 1207.44 L1770.06 1207.44 L1770.65 1207.44 L1771.23 1207.44 L1771.82 1207.44 L1772.4 1207.44 L1772.99 1207.44 L1773.58 1207.44 L1774.16 1207.44 L1774.75 1207.44 L1775.34 1207.44 L1775.92 1207.44 L1776.51 1207.44 L1777.1 1207.44 L1777.68 1207.44 L1778.27 1207.44 L1778.86 1207.44 L1779.44 1207.44 L1780.03 1207.44 L1780.61 1207.44 L1781.2 1207.44 L1781.79 1207.44 L1782.37 1207.44 L1782.96 1207.44 L1783.55 1207.44 L1784.13 1207.44 L1784.72 1207.44 L1785.31 1207.44 L1785.89 1207.44 L1786.48 1207.44 L1787.06 1207.44 L1787.65 1207.44 L1788.24 1207.44 L1788.82 1207.44 L1789.41 1207.44 L1790 1207.44 L1790.58 1207.44 L1791.17 1207.44 L1791.76 1207.44 L1792.34 1207.44 L1792.93 1207.44 L1793.52 1207.44 L1794.1 1207.44 L1794.69 1207.44 L1795.27 1207.44 L1795.86 1207.44 L1796.45 1207.44 L1797.03 1207.44 L1797.62 1207.44 L1798.21 1207.44 L1798.79 1207.44 L1799.38 1207.44 L1799.97 1207.44 L1800.55 1207.44 L1801.14 1207.44 L1801.73 1207.44 L1802.31 1207.44 L1802.9 1207.44 L1803.48 1207.44 L1804.07 1207.44 L1804.66 1207.44 L1805.24 1207.44 L1805.83 1207.44 L1806.42 1207.44 L1807 1207.44 L1807.59 1207.44 L1808.18 1207.44 L1808.76 1207.44 L1809.35 1207.44 L1809.94 1207.44 L1810.52 1207.44 L1811.11 1207.44 L1811.69 1207.44 L1812.28 1207.44 L1812.87 1207.44 L1813.45 1207.44 L1814.04 1207.44 L1814.63 1207.44 L1815.21 1207.44 L1815.8 1207.44 L1816.39 1207.44 L1816.97 1207.44 L1817.56 1207.44 L1818.14 1207.44 L1818.73 1207.44 L1819.32 1207.44 L1819.9 1207.44 L1820.49 1207.44 L1821.08 1207.44 L1821.66 1207.44 L1822.25 1207.44 L1822.84 1207.44 L1823.42 1207.44 L1824.01 1207.44 L1824.6 1207.44 L1825.18 1207.44 L1825.77 1207.44 L1826.35 1207.44 L1826.94 1207.44 L1827.53 1207.44 L1828.11 1207.44 L1828.7 1207.44 L1829.29 1207.44 L1829.87 1207.44 L1830.46 1207.44 L1831.05 1207.44 L1831.63 1207.44 L1832.22 1207.44 L1832.81 1207.44 L1833.39 1207.44 L1833.98 1207.44 L1834.56 1207.44 L1835.15 1207.44 L1835.74 1207.44 L1836.32 1207.44 L1836.91 1207.44 L1837.5 1207.44 L1838.08 1207.44 L1838.67 1207.44 L1839.26 1207.44 L1839.84 1207.44 L1840.43 1207.44 L1841.01 1207.44 L1841.6 1207.44 L1842.19 1207.44 L1842.77 1207.44 L1843.36 1207.44 L1843.95 1207.44 L1844.53 1207.44 L1845.12 1207.44 L1845.71 1207.44 L1846.29 1207.44 L1846.88 1207.44 L1847.47 1207.44 L1848.05 1207.44 L1848.64 1207.44 L1849.22 1207.44 L1849.81 1207.44 L1850.4 1207.44 L1850.98 1207.44 L1851.57 1207.44 L1852.16 1207.44 L1852.74 1207.44 L1853.33 1207.44 L1853.92 1207.44 L1854.5 1207.44 L1855.09 1207.44 L1855.68 1207.44 L1856.26 1207.44 L1856.85 1207.44 L1857.43 1207.44 L1858.02 1207.44 L1858.61 1207.44 L1859.19 1207.44 L1859.78 1207.44 L1860.37 1207.44 L1860.95 1207.44 L1861.54 1207.44 L1862.13 1207.44 L1862.71 1207.44 L1863.3 1207.44 L1863.88 1207.44 L1864.47 1207.44 L1865.06 1207.44 L1865.64 1207.44 L1866.23 1207.44 L1866.82 1207.44 L1867.4 1207.44 L1867.99 1207.44 L1868.58 1207.44 L1869.16 1207.44 L1869.75 1207.44 L1870.34 1207.44 L1870.92 1207.44 L1871.51 1207.44 L1872.09 1207.44 L1872.68 1207.44 L1873.27 1207.44 L1873.85 1207.44 L1874.44 1207.44 L1875.03 1207.44 L1875.61 1207.44 L1876.2 1207.44 L1876.79 1207.44 L1877.37 1207.44 L1877.96 1207.44 L1878.55 1207.44 L1879.13 1207.44 L1879.72 1207.44 L1880.3 1207.44 L1880.89 1207.44 L1881.48 1207.44 L1882.06 1207.44 L1882.65 1207.44 L1883.24 1207.44 L1883.82 1207.44 L1884.41 1207.44 L1885 1207.44 L1885.58 1207.44 L1886.17 1207.44 L1886.76 1207.44 L1887.34 1207.44 L1887.93 1207.44 L1888.51 1207.44 L1889.1 1207.44 L1889.69 1207.44 L1890.27 1207.44 L1890.86 1207.44 L1891.45 1207.44 L1892.03 1207.44 L1892.62 1207.44 L1893.21 1207.44 L1893.79 1207.44 L1894.38 1207.44 L1894.96 1207.44 L1895.55 1207.44 L1896.14 1207.44 L1896.72 1207.44 L1897.31 1207.44 L1897.9 1207.44 L1898.48 1207.44 L1899.07 1207.44 L1899.66 1207.44 L1900.24 1207.44 L1900.83 1207.44 L1901.42 1207.44 L1902 1207.44 L1902.59 1207.44 L1903.17 1207.44 L1903.76 1207.44 L1904.35 1207.44 L1904.93 1207.44 L1905.52 1207.44 L1906.11 1207.44 L1906.69 1207.44 L1907.28 1207.44 L1907.87 1207.44 L1908.45 1207.44 L1909.04 1207.44 L1909.63 1207.44 L1910.21 1207.44 L1910.8 1207.44 L1911.38 1207.44 L1911.97 1207.44 L1912.56 1207.44 L1913.14 1207.44 L1913.73 1207.44 L1914.32 1207.44 L1914.9 1207.44 L1915.49 1207.44 L1916.08 1207.44 L1916.66 1207.44 L1917.25 1207.44 L1917.83 1207.44 L1918.42 1207.44 L1919.01 1207.44 L1919.59 1207.44 L1920.18 1207.44 L1920.77 1207.44 L1921.35 1207.44 L1921.94 1207.44 L1922.53 1207.44 L1923.11 1207.44 L1923.7 1207.44 L1924.29 1207.44 L1924.87 1207.44 L1925.46 1207.44 L1926.04 1207.44 L1926.63 1207.44 L1927.22 1207.44 L1927.8 1207.44 L1928.39 1207.44 L1928.98 1207.44 L1929.56 1207.44 L1930.15 1207.44 L1930.74 1207.44 L1931.32 1207.44 L1931.91 1207.44 L1932.5 1207.44 L1933.08 1207.44 L1933.67 1207.44 L1934.25 1207.44 L1934.84 1207.44 L1935.43 1207.44 L1936.01 1207.44 L1936.6 1207.44 L1937.19 1207.44 L1937.77 1207.44 L1938.36 1207.44 L1938.95 1207.44 L1939.53 1207.44 L1940.12 1207.44 L1940.71 1207.44 L1941.29 1207.44 L1941.88 1207.44 L1942.46 1207.44 L1943.05 1207.44 L1943.64 1207.44 L1944.22 1207.44 L1944.81 1207.44 L1945.4 1207.44 L1945.98 1207.44 L1946.57 1207.44 L1947.16 1207.44 L1947.74 1207.44 L1948.33 1207.44 L1948.91 1207.44 L1949.5 1207.44 L1950.09 1207.44 L1950.67 1207.44 L1951.26 1207.44 L1951.85 1207.44 L1952.43 1207.44 L1953.02 1207.44 L1953.61 1207.44 L1954.19 1207.44 L1954.78 1207.44 L1955.37 1207.44 L1955.95 1207.44 L1956.54 1207.44 L1957.12 1207.44 L1957.71 1207.44 L1958.3 1207.44 L1958.88 1207.44 L1959.47 1207.44 L1960.06 1207.44 L1960.64 1207.44 L1961.23 1207.44 L1961.82 1207.44 L1962.4 1207.44 L1962.99 1207.44 L1963.58 1207.44 L1964.16 1207.44 L1964.75 1207.44 L1965.33 1207.44 L1965.92 1207.44 L1966.51 1207.44 L1967.09 1207.44 L1967.68 1207.44 L1968.27 1207.44 L1968.85 1207.44 L1969.44 1207.44 L1970.03 1207.44 L1970.61 1207.44 L1971.2 1207.44 L1971.78 1207.44 L1972.37 1207.44 L1972.96 1207.44 L1973.54 1207.44 L1974.13 1207.44 L1974.72 1207.44 L1975.3 1207.44 L1975.89 1207.44 L1976.48 1207.44 L1977.06 1207.44 L1977.65 1207.44 L1978.24 1207.44 L1978.82 1207.44 L1979.41 1207.44 L1979.99 1207.44 L1980.58 1207.44 L1981.17 1207.44 L1981.75 1207.44 L1982.34 1207.44 L1982.93 1207.44 L1983.51 1207.44 L1984.1 1207.44 L1984.69 1207.44 L1985.27 1207.44 L1985.86 1207.44 L1986.45 1207.44 L1987.03 1207.44 L1987.62 1207.44 L1988.2 1207.44 L1988.79 1207.44 L1989.38 1207.44 L1989.96 1207.44 L1990.55 1207.44 L1991.14 1207.44 L1991.72 1207.44 L1992.31 1207.44 L1992.9 1207.44 L1993.48 1207.44 L1994.07 1207.44 L1994.65 1207.44 L1995.24 1207.44 L1995.83 1207.44 L1996.41 1207.44 L1997 1207.44 L1997.59 1207.44 L1998.17 1207.44 L1998.76 1207.44 L1999.35 1207.44 L1999.93 1207.44 L2000.52 1207.44 L2001.11 1207.44 L2001.69 1207.44 L2002.28 1207.44 L2002.86 1207.44 L2003.45 1207.44 L2004.04 1207.44 L2004.62 1207.44 L2005.21 1207.44 L2005.8 1207.44 L2006.38 1207.44 L2006.97 1207.44 L2007.56 1207.44 L2008.14 1207.44 L2008.73 1207.44 L2009.32 1207.44 L2009.9 1207.44 L2010.49 1207.44 L2011.07 1207.44 L2011.66 1207.44 L2012.25 1207.44 L2012.83 1207.44 L2013.42 1207.44 L2014.01 1207.44 L2014.59 1207.44 L2015.18 1207.44 L2015.77 1207.44 L2016.35 1207.44 L2016.94 1207.44 L2017.53 1207.44 L2018.11 1207.44 L2018.7 1207.44 L2019.28 1207.44 L2019.87 1207.44 L2020.46 1207.44 L2021.04 1207.44 L2021.63 1207.44 L2022.22 1207.44 L2022.8 1207.44 L2023.39 1207.44 L2023.98 1207.44 L2024.56 1207.44 L2025.15 1207.44 L2025.73 1207.44 L2026.32 1207.44 L2026.91 1207.44 L2027.49 1207.44 L2028.08 1207.44 L2028.67 1207.44 L2029.25 1207.44 L2029.84 1207.44 L2030.43 1207.44 L2031.01 1207.44 L2031.6 1207.44 L2032.19 1207.44 L2032.77 1207.44 L2033.36 1207.44 L2033.94 1207.44 L2034.53 1207.44 L2035.12 1207.44 L2035.7 1207.44 L2036.29 1207.44 L2036.88 1207.44 L2037.46 1207.44 L2038.05 1207.44 L2038.64 1207.44 L2039.22 1207.44 L2039.81 1207.44 L2040.4 1207.44 L2040.98 1207.44 L2041.57 1207.44 L2042.15 1207.44 L2042.74 1207.44 L2043.33 1207.44 L2043.91 1207.44 L2044.5 1207.44 L2045.09 1207.44 L2045.67 1207.44 L2046.26 1207.44 L2046.85 1207.44 L2047.43 1207.44 L2048.02 1207.44 L2048.6 1207.44 L2049.19 1207.44 L2049.78 1207.44 L2050.36 1207.44 L2050.95 1207.44 L2051.54 1207.44 L2052.12 1207.44 L2052.71 1207.44 L2053.3 1207.44 L2053.88 1207.44 L2054.47 1207.44 L2055.06 1207.44 L2055.64 1207.44 L2056.23 1207.44 L2056.81 1207.44 L2057.4 1207.44 L2057.99 1207.44 L2058.57 1207.44 L2059.16 1207.44 L2059.75 1207.44 L2060.33 1207.44 L2060.92 1207.44 L2061.51 1207.44 L2062.09 1207.44 L2062.68 1207.44 L2063.27 1207.44 L2063.85 1207.44 L2064.44 1207.44 L2065.02 1207.44 L2065.61 1207.44 L2066.2 1207.44 L2066.78 1207.44 L2067.37 1207.44 L2067.96 1207.44 L2068.54 1207.44 L2069.13 1207.44 L2069.72 1207.44 L2070.3 1207.44 L2070.89 1207.44 L2071.48 1207.44 L2072.06 1207.44 L2072.65 1207.44 L2073.23 1207.44 L2073.82 1207.44 L2074.41 1207.44 L2074.99 1207.44 L2075.58 1207.44 L2076.17 1207.44 L2076.75 1207.44 L2077.34 1207.44 L2077.93 1207.44 L2078.51 1207.44 L2079.1 1207.44 L2079.68 1207.44 L2080.27 1207.44 L2080.86 1207.44 L2081.44 1207.44 L2082.03 1207.44 L2082.62 1207.44 L2083.2 1207.44 L2083.79 1207.44 L2084.38 1207.44 L2084.96 1207.44 L2085.55 1207.44 L2086.14 1207.44 L2086.72 1207.44 L2087.31 1207.44 L2087.89 1207.44 L2088.48 1207.44 L2089.07 1207.44 L2089.65 1207.44 L2090.24 1207.44 L2090.83 1207.44 L2091.41 1207.44 L2092 1207.44 L2092.59 1207.44 L2093.17 1207.44 L2093.76 1207.44 L2094.35 1207.44 L2094.93 1207.44 L2095.52 1207.44 L2096.1 1207.44 L2096.69 1207.44 L2097.28 1207.44 L2097.86 1207.44 L2098.45 1207.44 L2099.04 1207.44 L2099.62 1207.44 L2100.21 1207.44 L2100.8 1207.44 L2101.38 1207.44 L2101.97 1207.44 L2102.55 1207.44 L2103.14 1207.44 L2103.73 1207.44 L2104.31 1207.44 L2104.9 1207.44 L2105.49 1207.44 L2106.07 1207.44 L2106.66 1207.44 L2107.25 1207.44 L2107.83 1207.44 L2108.42 1207.44 L2109.01 1207.44 L2109.59 1207.44 L2110.18 1207.44 L2110.76 1207.44 L2111.35 1207.44 L2111.94 1207.44 L2112.52 1207.44 L2113.11 1207.44 L2113.7 1207.44 L2114.28 1207.44 L2114.87 1207.44 L2115.46 1207.44 L2116.04 1207.44 L2116.63 1207.44 L2117.22 1207.44 L2117.8 1207.44 L2118.39 1207.44 L2118.97 1207.44 L2119.56 1207.44 L2120.15 1207.44 L2120.73 1207.44 L2121.32 1207.44 L2121.91 1207.44 L2122.49 1207.44 L2123.08 1207.44 L2123.67 1207.44 L2124.25 1207.44 L2124.84 1207.44 L2125.42 1207.44 L2126.01 1207.44 L2126.6 1207.44 L2127.18 1207.44 L2127.77 1207.44 L2128.36 1207.44 L2128.94 1207.44 L2129.53 1207.44 L2130.12 1207.44 L2130.7 1207.44 L2131.29 1207.44 L2131.88 1207.44 L2132.46 1207.44 L2133.05 1207.44 L2133.63 1207.44 L2134.22 1207.44 L2134.81 1207.44 L2135.39 1207.44 L2135.98 1207.44 L2136.57 1207.44 L2137.15 1207.44 L2137.74 1207.44 L2138.33 1207.44 L2138.91 1207.44 L2139.5 1207.44 L2140.09 1207.44 L2140.67 1207.44 L2141.26 1207.44 L2141.84 1207.44 L2142.43 1207.44 L2143.02 1207.44 L2143.6 1207.44 L2144.19 1207.44 L2144.78 1207.44 L2145.36 1207.44 L2145.95 1207.44 L2146.54 1207.44 L2147.12 1207.44 L2147.71 1207.44 L2148.3 1207.44 L2148.88 1207.44 L2149.47 1207.44 L2150.05 1207.44 L2150.64 1207.44 L2151.23 1207.44 L2151.81 1207.44 L2152.4 1207.44 L2152.99 1207.44 L2153.57 1207.44 L2154.16 1207.44 L2154.75 1207.44 L2155.33 1207.44 L2155.92 1207.44 L2156.5 1207.44 L2157.09 1207.44 L2157.68 1207.44 L2158.26 1207.44 L2158.26 1207.28 L2157.68 1207.28 L2157.09 1207.28 L2156.5 1207.28 L2155.92 1207.28 L2155.33 1207.28 L2154.75 1207.28 L2154.16 1207.28 L2153.57 1207.28 L2152.99 1207.28 L2152.4 1207.28 L2151.81 1207.28 L2151.23 1207.28 L2150.64 1207.28 L2150.05 1207.28 L2149.47 1207.28 L2148.88 1207.28 L2148.3 1207.28 L2147.71 1207.28 L2147.12 1207.28 L2146.54 1207.28 L2145.95 1207.28 L2145.36 1207.28 L2144.78 1207.28 L2144.19 1207.28 L2143.6 1207.28 L2143.02 1207.28 L2142.43 1207.28 L2141.84 1207.28 L2141.26 1207.28 L2140.67 1207.28 L2140.09 1207.28 L2139.5 1207.28 L2138.91 1207.28 L2138.33 1207.28 L2137.74 1207.28 L2137.15 1207.28 L2136.57 1207.28 L2135.98 1207.28 L2135.39 1207.28 L2134.81 1207.28 L2134.22 1207.28 L2133.63 1207.28 L2133.05 1207.28 L2132.46 1207.28 L2131.88 1207.28 L2131.29 1207.28 L2130.7 1207.28 L2130.12 1207.28 L2129.53 1207.28 L2128.94 1207.28 L2128.36 1207.28 L2127.77 1207.28 L2127.18 1207.28 L2126.6 1207.28 L2126.01 1207.28 L2125.42 1207.28 L2124.84 1207.28 L2124.25 1207.28 L2123.67 1207.28 L2123.08 1207.28 L2122.49 1207.28 L2121.91 1207.28 L2121.32 1207.28 L2120.73 1207.28 L2120.15 1207.28 L2119.56 1207.28 L2118.97 1207.28 L2118.39 1207.28 L2117.8 1207.28 L2117.22 1207.28 L2116.63 1207.28 L2116.04 1207.28 L2115.46 1207.28 L2114.87 1207.28 L2114.28 1207.28 L2113.7 1207.28 L2113.11 1207.28 L2112.52 1207.28 L2111.94 1207.28 L2111.35 1207.28 L2110.76 1207.28 L2110.18 1207.28 L2109.59 1207.28 L2109.01 1207.28 L2108.42 1207.28 L2107.83 1207.28 L2107.25 1207.28 L2106.66 1207.28 L2106.07 1207.28 L2105.49 1207.28 L2104.9 1207.28 L2104.31 1207.28 L2103.73 1207.28 L2103.14 1207.28 L2102.55 1207.28 L2101.97 1207.28 L2101.38 1207.28 L2100.8 1207.28 L2100.21 1207.28 L2099.62 1207.28 L2099.04 1207.28 L2098.45 1207.28 L2097.86 1207.28 L2097.28 1207.28 L2096.69 1207.28 L2096.1 1207.28 L2095.52 1207.28 L2094.93 1207.28 L2094.35 1207.28 L2093.76 1207.28 L2093.17 1207.28 L2092.59 1207.28 L2092 1207.28 L2091.41 1207.28 L2090.83 1207.28 L2090.24 1207.28 L2089.65 1207.28 L2089.07 1207.28 L2088.48 1207.28 L2087.89 1207.28 L2087.31 1207.28 L2086.72 1207.28 L2086.14 1207.28 L2085.55 1207.28 L2084.96 1207.28 L2084.38 1207.28 L2083.79 1207.28 L2083.2 1207.28 L2082.62 1207.28 L2082.03 1207.28 L2081.44 1207.28 L2080.86 1207.28 L2080.27 1207.28 L2079.68 1207.28 L2079.1 1207.28 L2078.51 1207.28 L2077.93 1207.28 L2077.34 1207.28 L2076.75 1207.28 L2076.17 1207.28 L2075.58 1207.28 L2074.99 1207.28 L2074.41 1207.28 L2073.82 1207.28 L2073.23 1207.28 L2072.65 1207.28 L2072.06 1207.28 L2071.48 1207.28 L2070.89 1207.28 L2070.3 1207.28 L2069.72 1207.28 L2069.13 1207.28 L2068.54 1207.28 L2067.96 1207.28 L2067.37 1207.28 L2066.78 1207.28 L2066.2 1207.28 L2065.61 1207.28 L2065.02 1207.28 L2064.44 1207.28 L2063.85 1207.28 L2063.27 1207.28 L2062.68 1207.28 L2062.09 1207.28 L2061.51 1207.28 L2060.92 1207.28 L2060.33 1207.28 L2059.75 1207.28 L2059.16 1207.28 L2058.57 1207.28 L2057.99 1207.28 L2057.4 1207.28 L2056.81 1207.28 L2056.23 1207.28 L2055.64 1207.28 L2055.06 1207.28 L2054.47 1207.28 L2053.88 1207.28 L2053.3 1207.28 L2052.71 1207.28 L2052.12 1207.28 L2051.54 1207.28 L2050.95 1207.28 L2050.36 1207.28 L2049.78 1207.28 L2049.19 1207.28 L2048.6 1207.28 L2048.02 1207.28 L2047.43 1207.28 L2046.85 1207.28 L2046.26 1207.28 L2045.67 1207.28 L2045.09 1207.28 L2044.5 1207.28 L2043.91 1207.28 L2043.33 1207.28 L2042.74 1207.28 L2042.15 1207.28 L2041.57 1207.28 L2040.98 1207.28 L2040.4 1207.28 L2039.81 1207.28 L2039.22 1207.28 L2038.64 1207.28 L2038.05 1207.28 L2037.46 1207.28 L2036.88 1207.28 L2036.29 1207.28 L2035.7 1207.28 L2035.12 1207.28 L2034.53 1207.28 L2033.94 1207.28 L2033.36 1207.28 L2032.77 1207.28 L2032.19 1207.28 L2031.6 1207.28 L2031.01 1207.28 L2030.43 1207.28 L2029.84 1207.28 L2029.25 1207.28 L2028.67 1207.28 L2028.08 1207.28 L2027.49 1207.28 L2026.91 1207.28 L2026.32 1207.28 L2025.73 1207.28 L2025.15 1207.28 L2024.56 1207.28 L2023.98 1207.28 L2023.39 1207.28 L2022.8 1207.28 L2022.22 1207.28 L2021.63 1207.28 L2021.04 1207.28 L2020.46 1207.28 L2019.87 1207.28 L2019.28 1207.28 L2018.7 1207.28 L2018.11 1207.28 L2017.53 1207.28 L2016.94 1207.28 L2016.35 1207.28 L2015.77 1207.28 L2015.18 1207.28 L2014.59 1207.28 L2014.01 1207.28 L2013.42 1207.28 L2012.83 1207.28 L2012.25 1207.28 L2011.66 1207.28 L2011.07 1207.28 L2010.49 1207.28 L2009.9 1207.28 L2009.32 1207.28 L2008.73 1207.28 L2008.14 1207.28 L2007.56 1207.28 L2006.97 1207.28 L2006.38 1207.28 L2005.8 1207.28 L2005.21 1207.28 L2004.62 1207.28 L2004.04 1207.28 L2003.45 1207.28 L2002.86 1207.28 L2002.28 1207.28 L2001.69 1207.28 L2001.11 1207.28 L2000.52 1207.28 L1999.93 1207.28 L1999.35 1207.28 L1998.76 1207.28 L1998.17 1207.28 L1997.59 1207.28 L1997 1207.28 L1996.41 1207.28 L1995.83 1207.28 L1995.24 1207.28 L1994.65 1207.28 L1994.07 1207.28 L1993.48 1207.28 L1992.9 1207.28 L1992.31 1207.28 L1991.72 1207.28 L1991.14 1207.28 L1990.55 1207.28 L1989.96 1207.28 L1989.38 1207.28 L1988.79 1207.28 L1988.2 1207.28 L1987.62 1207.28 L1987.03 1207.28 L1986.45 1207.28 L1985.86 1207.28 L1985.27 1207.28 L1984.69 1207.28 L1984.1 1207.28 L1983.51 1207.28 L1982.93 1207.28 L1982.34 1207.28 L1981.75 1207.28 L1981.17 1207.28 L1980.58 1207.28 L1979.99 1207.28 L1979.41 1207.28 L1978.82 1207.28 L1978.24 1207.28 L1977.65 1207.28 L1977.06 1207.28 L1976.48 1207.28 L1975.89 1207.28 L1975.3 1207.28 L1974.72 1207.28 L1974.13 1207.28 L1973.54 1207.28 L1972.96 1207.28 L1972.37 1207.28 L1971.78 1207.28 L1971.2 1207.28 L1970.61 1207.28 L1970.03 1207.28 L1969.44 1207.28 L1968.85 1207.28 L1968.27 1207.28 L1967.68 1207.28 L1967.09 1207.28 L1966.51 1207.28 L1965.92 1207.28 L1965.33 1207.28 L1964.75 1207.28 L1964.16 1207.28 L1963.58 1207.28 L1962.99 1207.28 L1962.4 1207.28 L1961.82 1207.28 L1961.23 1207.28 L1960.64 1207.28 L1960.06 1207.28 L1959.47 1207.28 L1958.88 1207.28 L1958.3 1207.28 L1957.71 1207.28 L1957.12 1207.28 L1956.54 1207.28 L1955.95 1207.28 L1955.37 1207.28 L1954.78 1207.28 L1954.19 1207.28 L1953.61 1207.28 L1953.02 1207.28 L1952.43 1207.28 L1951.85 1207.28 L1951.26 1207.28 L1950.67 1207.28 L1950.09 1207.28 L1949.5 1207.28 L1948.91 1207.28 L1948.33 1207.28 L1947.74 1207.28 L1947.16 1207.28 L1946.57 1207.28 L1945.98 1207.28 L1945.4 1207.28 L1944.81 1207.28 L1944.22 1207.28 L1943.64 1207.28 L1943.05 1207.28 L1942.46 1207.28 L1941.88 1207.28 L1941.29 1207.28 L1940.71 1207.28 L1940.12 1207.28 L1939.53 1207.28 L1938.95 1207.28 L1938.36 1207.28 L1937.77 1207.28 L1937.19 1207.28 L1936.6 1207.28 L1936.01 1207.28 L1935.43 1207.28 L1934.84 1207.28 L1934.25 1207.28 L1933.67 1207.28 L1933.08 1207.28 L1932.5 1207.28 L1931.91 1207.28 L1931.32 1207.28 L1930.74 1207.28 L1930.15 1207.28 L1929.56 1207.28 L1928.98 1207.28 L1928.39 1207.28 L1927.8 1207.28 L1927.22 1207.28 L1926.63 1207.28 L1926.04 1207.28 L1925.46 1207.28 L1924.87 1207.28 L1924.29 1207.28 L1923.7 1207.28 L1923.11 1207.28 L1922.53 1207.28 L1921.94 1207.28 L1921.35 1207.28 L1920.77 1207.28 L1920.18 1207.28 L1919.59 1207.28 L1919.01 1207.28 L1918.42 1207.28 L1917.83 1207.28 L1917.25 1207.28 L1916.66 1207.28 L1916.08 1207.28 L1915.49 1207.28 L1914.9 1207.28 L1914.32 1207.28 L1913.73 1207.28 L1913.14 1207.28 L1912.56 1207.28 L1911.97 1207.28 L1911.38 1207.28 L1910.8 1207.28 L1910.21 1207.28 L1909.63 1207.28 L1909.04 1207.28 L1908.45 1207.28 L1907.87 1207.28 L1907.28 1207.28 L1906.69 1207.28 L1906.11 1207.28 L1905.52 1207.28 L1904.93 1207.28 L1904.35 1207.28 L1903.76 1207.28 L1903.17 1207.28 L1902.59 1207.28 L1902 1207.28 L1901.42 1207.28 L1900.83 1207.28 L1900.24 1207.28 L1899.66 1207.28 L1899.07 1207.28 L1898.48 1207.28 L1897.9 1207.28 L1897.31 1207.28 L1896.72 1207.28 L1896.14 1207.28 L1895.55 1207.28 L1894.96 1207.28 L1894.38 1207.28 L1893.79 1207.28 L1893.21 1207.28 L1892.62 1207.28 L1892.03 1207.28 L1891.45 1207.28 L1890.86 1207.28 L1890.27 1207.28 L1889.69 1207.28 L1889.1 1207.28 L1888.51 1207.28 L1887.93 1207.28 L1887.34 1207.28 L1886.76 1207.28 L1886.17 1207.28 L1885.58 1207.28 L1885 1207.28 L1884.41 1207.28 L1883.82 1207.28 L1883.24 1207.28 L1882.65 1207.28 L1882.06 1207.28 L1881.48 1207.28 L1880.89 1207.28 L1880.3 1207.28 L1879.72 1207.28 L1879.13 1207.28 L1878.55 1207.28 L1877.96 1207.28 L1877.37 1207.28 L1876.79 1207.28 L1876.2 1207.28 L1875.61 1207.28 L1875.03 1207.28 L1874.44 1207.28 L1873.85 1207.28 L1873.27 1207.28 L1872.68 1207.28 L1872.09 1207.28 L1871.51 1207.28 L1870.92 1207.28 L1870.34 1207.28 L1869.75 1207.28 L1869.16 1207.28 L1868.58 1207.28 L1867.99 1207.28 L1867.4 1207.28 L1866.82 1207.28 L1866.23 1207.28 L1865.64 1207.28 L1865.06 1207.28 L1864.47 1207.28 L1863.88 1207.28 L1863.3 1207.28 L1862.71 1207.28 L1862.13 1207.28 L1861.54 1207.28 L1860.95 1207.28 L1860.37 1207.28 L1859.78 1207.28 L1859.19 1207.28 L1858.61 1207.28 L1858.02 1207.28 L1857.43 1207.28 L1856.85 1207.28 L1856.26 1207.28 L1855.68 1207.28 L1855.09 1207.28 L1854.5 1207.28 L1853.92 1207.28 L1853.33 1207.28 L1852.74 1207.28 L1852.16 1207.28 L1851.57 1207.28 L1850.98 1207.28 L1850.4 1207.28 L1849.81 1207.28 L1849.22 1207.28 L1848.64 1207.28 L1848.05 1207.28 L1847.47 1207.28 L1846.88 1207.28 L1846.29 1207.28 L1845.71 1207.28 L1845.12 1207.28 L1844.53 1207.28 L1843.95 1207.28 L1843.36 1207.28 L1842.77 1207.28 L1842.19 1207.28 L1841.6 1207.28 L1841.01 1207.28 L1840.43 1207.28 L1839.84 1207.28 L1839.26 1207.28 L1838.67 1207.28 L1838.08 1207.28 L1837.5 1207.28 L1836.91 1207.28 L1836.32 1207.28 L1835.74 1207.28 L1835.15 1207.28 L1834.56 1207.28 L1833.98 1207.28 L1833.39 1207.28 L1832.81 1207.28 L1832.22 1207.28 L1831.63 1207.28 L1831.05 1207.28 L1830.46 1207.28 L1829.87 1207.28 L1829.29 1207.28 L1828.7 1207.28 L1828.11 1207.28 L1827.53 1207.28 L1826.94 1207.28 L1826.35 1207.28 L1825.77 1207.28 L1825.18 1207.28 L1824.6 1207.28 L1824.01 1207.28 L1823.42 1207.28 L1822.84 1207.28 L1822.25 1207.28 L1821.66 1207.28 L1821.08 1207.28 L1820.49 1207.28 L1819.9 1207.28 L1819.32 1207.28 L1818.73 1207.28 L1818.14 1207.28 L1817.56 1207.28 L1816.97 1207.28 L1816.39 1207.28 L1815.8 1207.28 L1815.21 1207.28 L1814.63 1207.28 L1814.04 1207.28 L1813.45 1207.28 L1812.87 1207.28 L1812.28 1207.28 L1811.69 1207.28 L1811.11 1207.28 L1810.52 1207.28 L1809.94 1207.28 L1809.35 1207.28 L1808.76 1207.28 L1808.18 1207.28 L1807.59 1207.28 L1807 1207.28 L1806.42 1207.28 L1805.83 1207.28 L1805.24 1207.28 L1804.66 1207.28 L1804.07 1207.28 L1803.48 1207.28 L1802.9 1207.28 L1802.31 1207.28 L1801.73 1207.28 L1801.14 1207.28 L1800.55 1207.28 L1799.97 1207.28 L1799.38 1207.28 L1798.79 1207.28 L1798.21 1207.28 L1797.62 1207.28 L1797.03 1207.28 L1796.45 1207.28 L1795.86 1207.28 L1795.27 1207.28 L1794.69 1207.28 L1794.1 1207.28 L1793.52 1207.28 L1792.93 1207.28 L1792.34 1207.28 L1791.76 1207.28 L1791.17 1207.28 L1790.58 1207.28 L1790 1207.28 L1789.41 1207.28 L1788.82 1207.28 L1788.24 1207.28 L1787.65 1207.28 L1787.06 1207.28 L1786.48 1207.28 L1785.89 1207.28 L1785.31 1207.28 L1784.72 1207.28 L1784.13 1207.28 L1783.55 1207.28 L1782.96 1207.28 L1782.37 1207.28 L1781.79 1207.28 L1781.2 1207.28 L1780.61 1207.28 L1780.03 1207.28 L1779.44 1207.28 L1778.86 1207.28 L1778.27 1207.28 L1777.68 1207.28 L1777.1 1207.28 L1776.51 1207.28 L1775.92 1207.28 L1775.34 1207.28 L1774.75 1207.28 L1774.16 1207.28 L1773.58 1207.28 L1772.99 1207.28 L1772.4 1207.28 L1771.82 1207.28 L1771.23 1207.28 L1770.65 1207.28 L1770.06 1207.28 L1769.47 1207.28 L1768.89 1207.28 L1768.3 1207.28 L1767.71 1207.28 L1767.13 1207.28 L1766.54 1207.28 L1765.95 1207.28 L1765.37 1207.28 L1764.78 1207.28 L1764.19 1207.28 L1763.61 1207.28 L1763.02 1207.28 L1762.44 1207.28 L1761.85 1207.28 L1761.26 1207.28 L1760.68 1207.28 L1760.09 1207.28 L1759.5 1207.28 L1758.92 1207.28 L1758.33 1207.28 L1757.74 1207.28 L1757.16 1207.28 L1756.57 1207.28 L1755.99 1207.28 L1755.4 1207.28 L1754.81 1207.28 L1754.23 1207.28 L1753.64 1207.28 L1753.05 1207.28 L1752.47 1207.28 L1751.88 1207.28 L1751.29 1207.28 L1750.71 1207.28 L1750.12 1207.28 L1749.53 1207.28 L1748.95 1207.28 L1748.36 1207.28 L1747.78 1207.28 L1747.19 1207.28 L1746.6 1207.28 L1746.02 1207.28 L1745.43 1207.28 L1744.84 1207.28 L1744.26 1207.28 L1743.67 1207.28 L1743.08 1207.28 L1742.5 1207.28 L1741.91 1207.28 L1741.32 1207.28 L1740.74 1207.28 L1740.15 1207.28 L1739.57 1207.28 L1738.98 1207.28 L1738.39 1207.28 L1737.81 1207.28 L1737.22 1207.28 L1736.63 1207.28 L1736.05 1207.28 L1735.46 1207.28 L1734.87 1207.28 L1734.29 1207.28 L1733.7 1207.28 L1733.11 1207.28 L1732.53 1207.28 L1731.94 1207.28 L1731.36 1207.28 L1730.77 1207.28 L1730.18 1207.28 L1729.6 1207.28 L1729.01 1207.28 L1728.42 1207.28 L1727.84 1207.28 L1727.25 1207.28 L1726.66 1207.28 L1726.08 1207.28 L1725.49 1207.28 L1724.91 1207.28 L1724.32 1207.28 L1723.73 1207.28 L1723.15 1207.28 L1722.56 1207.28 L1721.97 1207.28 L1721.39 1207.28 L1720.8 1207.28 L1720.21 1207.28 L1719.63 1207.28 L1719.04 1207.28 L1718.45 1207.28 L1717.87 1207.28 L1717.28 1207.28 L1716.7 1207.28 L1716.11 1207.28 L1715.52 1207.28 L1714.94 1207.28 L1714.35 1207.28 L1713.76 1207.28 L1713.18 1207.28 L1712.59 1207.28 L1712 1207.28 L1711.42 1207.28 L1710.83 1207.28 L1710.24 1207.28 L1709.66 1207.28 L1709.07 1207.28 L1708.49 1207.28 L1707.9 1207.28 L1707.31 1207.28 L1706.73 1207.28 L1706.14 1207.28 L1705.55 1207.28 L1704.97 1207.28 L1704.38 1207.28 L1703.79 1207.28 L1703.21 1207.28 L1702.62 1207.28 L1702.04 1207.28 L1701.45 1207.28 L1700.86 1207.28 L1700.28 1207.28 L1699.69 1207.28 L1699.1 1207.28 L1698.52 1207.28 L1697.93 1207.28 L1697.34 1207.28 L1696.76 1207.28 L1696.17 1207.28 L1695.58 1207.28 L1695 1207.28 L1694.41 1207.28 L1693.83 1207.28 L1693.24 1207.28 L1692.65 1207.28 L1692.07 1207.28 L1691.48 1207.28 L1690.89 1207.28 L1690.31 1207.28 L1689.72 1207.28 L1689.13 1207.28 L1688.55 1207.28 L1687.96 1207.28 L1687.37 1207.28 L1686.79 1207.28 L1686.2 1207.28 L1685.62 1207.28 L1685.03 1207.28 L1684.44 1207.28 L1683.86 1207.28 L1683.27 1207.28 L1682.68 1207.28 L1682.1 1207.28 L1681.51 1207.28 L1680.92 1207.28 L1680.34 1207.28 L1679.75 1207.28 L1679.17 1207.28 L1678.58 1207.28 L1677.99 1207.28 L1677.41 1207.28 L1676.82 1207.28 L1676.23 1207.28 L1675.65 1207.28 L1675.06 1207.28 L1674.47 1207.28 L1673.89 1207.28 L1673.3 1207.28 L1672.71 1207.28 L1672.13 1207.28 L1671.54 1207.28 L1670.96 1207.28 L1670.37 1207.28 L1669.78 1207.28 L1669.2 1207.28 L1668.61 1207.28 L1668.02 1207.28 L1667.44 1207.28 L1666.85 1207.28 L1666.26 1207.28 L1665.68 1207.28 L1665.09 1207.28 L1664.5 1207.28 L1663.92 1207.28 L1663.33 1207.28 L1662.75 1207.28 L1662.16 1207.28 L1661.57 1207.28 L1660.99 1207.28 L1660.4 1207.28 L1659.81 1207.28 L1659.23 1207.28 L1658.64 1207.28 L1658.05 1207.28 L1657.47 1207.28 L1656.88 1207.28 L1656.29 1207.28 L1655.71 1207.28 L1655.12 1207.28 L1654.54 1207.28 L1653.95 1207.28 L1653.36 1207.28 L1652.78 1207.28 L1652.19 1207.28 L1651.6 1207.28 L1651.02 1207.28 L1650.43 1207.28 L1649.84 1207.28 L1649.26 1207.28 L1648.67 1207.28 L1648.09 1207.28 L1647.5 1207.28 L1646.91 1207.28 L1646.33 1207.28 L1645.74 1207.28 L1645.15 1207.28 L1644.57 1207.28 L1643.98 1207.28 L1643.39 1207.28 L1642.81 1207.28 L1642.22 1207.28 L1641.63 1207.28 L1641.05 1207.28 L1640.46 1207.28 L1639.88 1207.28 L1639.29 1207.28 L1638.7 1207.28 L1638.12 1207.28 L1637.53 1207.28 L1636.94 1207.28 L1636.36 1207.28 L1635.77 1207.28 L1635.18 1207.28 L1634.6 1207.28 L1634.01 1207.28 L1633.42 1207.28 L1632.84 1207.28 L1632.25 1207.28 L1631.67 1207.28 L1631.08 1207.28 L1630.49 1207.28 L1629.91 1207.28 L1629.32 1207.28 L1628.73 1207.28 L1628.15 1207.28 L1627.56 1207.28 L1626.97 1207.28 L1626.39 1207.28 L1625.8 1207.28 L1625.22 1207.28 L1624.63 1207.28 L1624.04 1207.28 L1623.46 1207.28 L1622.87 1207.28 L1622.28 1207.28 L1621.7 1207.28 L1621.11 1207.28 L1620.52 1207.28 L1619.94 1207.28 L1619.35 1207.28 L1618.76 1207.28 L1618.18 1207.28 L1617.59 1207.28 L1617.01 1207.28 L1616.42 1207.28 L1615.83 1207.28 L1615.25 1207.28 L1614.66 1207.28 L1614.07 1207.28 L1613.49 1207.28 L1612.9 1207.28 L1612.31 1207.28 L1611.73 1207.28 L1611.14 1207.28 L1610.55 1207.28 L1609.97 1207.28 L1609.38 1207.28 L1608.8 1207.28 L1608.21 1207.28 L1607.62 1207.28 L1607.04 1207.28 L1606.45 1207.28 L1605.86 1207.28 L1605.28 1207.28 L1604.69 1207.28 L1604.1 1207.28 L1603.52 1207.28 L1602.93 1207.28 L1602.34 1207.28 L1601.76 1207.28 L1601.17 1207.28 L1600.59 1207.28 L1600 1207.28 L1599.41 1207.28 L1598.83 1207.28 L1598.24 1207.28 L1597.65 1207.28 L1597.07 1207.28 L1596.48 1207.28 L1595.89 1207.28 L1595.31 1207.28 L1594.72 1207.28 L1594.14 1207.28 L1593.55 1207.28 L1592.96 1207.28 L1592.38 1207.28 L1591.79 1207.28 L1591.2 1207.28 L1590.62 1207.28 L1590.03 1207.28 L1589.44 1207.28 L1588.86 1207.28 L1588.27 1207.28 L1587.68 1207.28 L1587.1 1207.28 L1586.51 1207.28 L1585.93 1207.28 L1585.34 1207.28 L1584.75 1207.28 L1584.17 1207.28 L1583.58 1207.28 L1582.99 1207.28 L1582.41 1207.28 L1581.82 1207.28 L1581.23 1207.28 L1580.65 1207.28 L1580.06 1207.28 L1579.47 1207.28 L1578.89 1207.28 L1578.3 1207.28 L1577.72 1207.28 L1577.13 1207.28 L1576.54 1207.28 L1575.96 1207.28 L1575.37 1207.28 L1574.78 1207.28 L1574.2 1207.28 L1573.61 1207.28 L1573.02 1207.28 L1572.44 1207.28 L1571.85 1207.28 L1571.27 1207.28 L1570.68 1207.28 L1570.09 1207.28 L1569.51 1207.28 L1568.92 1207.28 L1568.33 1207.28 L1567.75 1207.28 L1567.16 1207.28 L1566.57 1207.28 L1565.99 1207.28 L1565.4 1207.28 L1564.81 1207.28 L1564.23 1207.28 L1563.64 1207.28 L1563.06 1207.28 L1562.47 1207.28 L1561.88 1207.28 L1561.3 1207.28 L1560.71 1207.28 L1560.12 1207.28 L1559.54 1207.28 L1558.95 1207.28 L1558.36 1207.28 L1557.78 1207.28 L1557.19 1207.28 L1556.6 1207.28 L1556.02 1207.28 L1555.43 1207.28 L1554.85 1207.28 L1554.26 1207.28 L1553.67 1207.28 L1553.09 1207.28 L1552.5 1207.28 L1551.91 1207.28 L1551.33 1207.28 L1550.74 1207.28 L1550.15 1207.28 L1549.57 1207.28 L1548.98 1207.28 L1548.4 1207.28 L1547.81 1207.28 L1547.22 1207.28 L1546.64 1207.28 L1546.05 1207.28 L1545.46 1207.28 L1544.88 1207.28 L1544.29 1207.28 L1543.7 1207.28 L1543.12 1207.28 L1542.53 1207.28 L1541.94 1207.28 L1541.36 1207.28 L1540.77 1207.28 L1540.19 1207.28 L1539.6 1207.28 L1539.01 1207.28 L1538.43 1207.28 L1537.84 1207.28 L1537.25 1207.28 L1536.67 1207.28 L1536.08 1207.28 L1535.49 1207.28 L1534.91 1207.28 L1534.32 1207.28 L1533.73 1207.28 L1533.15 1207.28 L1532.56 1207.28 L1531.98 1207.28 L1531.39 1207.28 L1530.8 1207.28 L1530.22 1207.28 L1529.63 1207.28 L1529.04 1207.28 L1528.46 1207.28 L1527.87 1207.28 L1527.28 1207.28 L1526.7 1207.28 L1526.11 1207.28 L1525.52 1207.28 L1524.94 1207.28 L1524.35 1207.28 L1523.77 1207.28 L1523.18 1207.28 L1522.59 1207.28 L1522.01 1207.28 L1521.42 1207.28 L1520.83 1207.28 L1520.25 1207.28 L1519.66 1207.28 L1519.07 1207.28 L1518.49 1207.28 L1517.9 1207.28 L1517.32 1207.28 L1516.73 1207.28 L1516.14 1207.28 L1515.56 1207.28 L1514.97 1207.28 L1514.38 1207.28 L1513.8 1207.28 L1513.21 1207.28 L1512.62 1207.28 L1512.04 1207.28 L1511.45 1207.28 L1510.86 1207.28 L1510.28 1207.28 L1509.69 1207.28 L1509.11 1207.28 L1508.52 1207.28 L1507.93 1207.28 L1507.35 1207.28 L1506.76 1207.28 L1506.17 1207.28 L1505.59 1207.28 L1505 1207.28 L1504.41 1207.28 L1503.83 1207.28 L1503.24 1207.28 L1502.65 1207.28 L1502.07 1207.28 L1501.48 1207.28 L1500.9 1207.28 L1500.31 1207.28 L1499.72 1207.28 L1499.14 1207.28 L1498.55 1207.28 L1497.96 1207.28 L1497.38 1207.28 L1496.79 1207.28 L1496.2 1207.28 L1495.62 1207.28 L1495.03 1207.28 L1494.45 1207.28 L1493.86 1207.28 L1493.27 1207.28 L1492.69 1207.28 L1492.1 1207.28 L1491.51 1207.28 L1490.93 1207.28 L1490.34 1207.28 L1489.75 1207.28 L1489.17 1207.28 L1488.58 1207.28 L1487.99 1207.28 L1487.41 1207.28 L1486.82 1207.28 L1486.24 1207.28 L1485.65 1207.28 L1485.06 1207.28 L1484.48 1207.28 L1483.89 1207.28 L1483.3 1207.28 L1482.72 1207.28 L1482.13 1207.28 L1481.54 1207.28 L1480.96 1207.28 L1480.37 1207.28 L1479.78 1207.28 L1479.2 1207.28 L1478.61 1207.28 L1478.03 1207.28 L1477.44 1207.28 L1476.85 1207.28 L1476.27 1207.28 L1475.68 1207.28 L1475.09 1207.28 L1474.51 1207.28 L1473.92 1207.28 L1473.33 1207.28 L1472.75 1207.28 L1472.16 1207.28 L1471.57 1207.28 L1470.99 1207.28 L1470.4 1207.28 L1469.82 1207.28 L1469.23 1207.28 L1468.64 1207.28 L1468.06 1207.28 L1467.47 1207.28 L1466.88 1207.28 L1466.3 1207.28 L1465.71 1207.28 L1465.12 1207.28 L1464.54 1207.28 L1463.95 1207.28 L1463.37 1207.28 L1462.78 1207.28 L1462.19 1207.28 L1461.61 1207.28 L1461.02 1207.28 L1460.43 1207.28 L1459.85 1207.28 L1459.26 1207.28 L1458.67 1207.28 L1458.09 1207.28 L1457.5 1207.28 L1456.91 1207.28 L1456.33 1207.28 L1455.74 1207.28 L1455.16 1207.28 L1454.57 1207.28 L1453.98 1207.28 L1453.4 1207.28 L1452.81 1207.28 L1452.22 1207.28 L1451.64 1207.28 L1451.05 1207.28 L1450.46 1207.28 L1449.88 1207.28 L1449.29 1207.28 L1448.7 1207.28 L1448.12 1207.28 L1447.53 1207.28 L1446.95 1207.28 L1446.36 1207.28 L1445.77 1207.28 L1445.19 1207.28 L1444.6 1207.28 L1444.01 1207.28 L1443.43 1207.28 L1442.84 1207.28 L1442.25 1207.28 L1441.67 1207.28 L1441.08 1207.28 L1440.5 1207.28 L1439.91 1207.28 L1439.32 1207.28 L1438.74 1207.28 L1438.15 1207.28 L1437.56 1207.28 L1436.98 1207.28 L1436.39 1207.28 L1435.8 1207.28 L1435.22 1207.28 L1434.63 1207.28 L1434.04 1207.28 L1433.46 1207.28 L1432.87 1207.28 L1432.29 1207.28 L1431.7 1207.28 L1431.11 1207.28 L1430.53 1207.28 L1429.94 1207.28 L1429.35 1207.28 L1428.77 1207.28 L1428.18 1207.28 L1427.59 1207.28 L1427.01 1207.28 L1426.42 1207.28 L1425.83 1207.28 L1425.25 1207.28 L1424.66 1207.28 L1424.08 1207.28 L1423.49 1207.28 L1422.9 1207.28 L1422.32 1207.28 L1421.73 1207.28 L1421.14 1207.28 L1420.56 1207.28 L1419.97 1207.28 L1419.38 1207.28 L1418.8 1207.28 L1418.21 1207.28 L1417.63 1207.28 L1417.04 1207.28 L1416.45 1207.28 L1415.87 1207.28 L1415.28 1207.28 L1414.69 1207.28 L1414.11 1207.28 L1413.52 1207.28 L1412.93 1207.28 L1412.35 1207.28 L1411.76 1207.28 L1411.17 1207.28 L1410.59 1207.28 L1410 1207.28 L1409.42 1207.28 L1408.83 1207.28 L1408.24 1207.28 L1407.66 1207.28 L1407.07 1207.28 L1406.48 1207.28 L1405.9 1207.28 L1405.31 1207.28 L1404.72 1207.28 L1404.14 1207.28 L1403.55 1207.28 L1402.96 1207.28 L1402.38 1207.28 L1401.79 1207.28 L1401.21 1207.28 L1400.62 1207.28 L1400.03 1207.28 L1399.45 1207.28 L1398.86 1207.28 L1398.27 1207.28 L1397.69 1207.28 L1397.1 1207.28 L1396.51 1207.28 L1395.93 1207.28 L1395.34 1207.28 L1394.75 1207.28 L1394.17 1207.28 L1393.58 1207.28 L1393 1207.28 L1392.41 1207.28 L1391.82 1207.28 L1391.24 1207.28 L1390.65 1207.28 L1390.06 1207.28 L1389.48 1207.28 L1388.89 1207.28 L1388.3 1207.28 L1387.72 1207.28 L1387.13 1207.28 L1386.55 1207.28 L1385.96 1207.28 L1385.37 1207.28 L1384.79 1207.28 L1384.2 1207.28 L1383.61 1207.28 L1383.03 1207.28 L1382.44 1207.28 L1381.85 1207.28 L1381.27 1207.28 L1380.68 1207.28 L1380.09 1207.28 L1379.51 1207.28 L1378.92 1207.28 L1378.34 1207.28 L1377.75 1207.28 L1377.16 1207.28 L1376.58 1207.28 L1375.99 1207.28 L1375.4 1207.28 L1374.82 1207.28 L1374.23 1207.28 L1373.64 1207.28 L1373.06 1207.28 L1372.47 1207.28 L1371.88 1207.28 L1371.3 1207.28 L1370.71 1207.28 L1370.13 1207.28 L1369.54 1207.28 L1368.95 1207.28 L1368.37 1207.28 L1367.78 1207.28 L1367.19 1207.28 L1366.61 1207.28 L1366.02 1207.28 L1365.43 1207.28 L1364.85 1207.28 L1364.26 1207.28 L1363.68 1207.28 L1363.09 1207.28 L1362.5 1207.28 L1361.92 1207.28 L1361.33 1207.28 L1360.74 1207.28 L1360.16 1207.28 L1359.57 1207.28 L1358.98 1207.28 L1358.4 1207.28 L1357.81 1207.28 L1357.22 1207.28 L1356.64 1207.28 L1356.05 1207.28 L1355.47 1207.28 L1354.88 1207.28 L1354.29 1207.28 L1353.71 1207.28 L1353.12 1207.28 L1352.53 1207.28 L1351.95 1207.28 L1351.36 1207.28 L1350.77 1207.28 L1350.19 1207.28 L1349.6 1207.28 L1349.01 1207.28 L1348.43 1207.28 L1347.84 1207.28 L1347.26 1207.28 L1346.67 1207.28 L1346.08 1207.28 L1345.5 1207.28 L1344.91 1207.28 L1344.32 1207.28 L1343.74 1207.28 L1343.15 1207.28 L1342.56 1207.28 L1341.98 1207.28 L1341.39 1207.28 L1340.8 1207.28 L1340.22 1207.28 L1339.63 1207.28 L1339.05 1207.28 L1338.46 1207.28 L1337.87 1207.28 L1337.29 1207.28 L1336.7 1207.28 L1336.11 1207.28 L1335.53 1207.28 L1334.94 1207.28 L1334.35 1207.28 L1333.77 1207.28 L1333.18 1207.28 L1332.6 1207.28 L1332.01 1207.28 L1331.42 1207.28 L1330.84 1207.28 L1330.25 1207.28 L1329.66 1207.28 L1329.08 1207.28 L1328.49 1207.28 L1327.9 1207.28 L1327.32 1207.28 L1326.73 1207.28 L1326.14 1207.28 L1325.56 1207.28 L1324.97 1207.28 L1324.39 1207.28 L1323.8 1207.28 L1323.21 1207.28 L1322.63 1207.28 L1322.04 1207.28 L1321.45 1207.28 L1320.87 1207.28 L1320.28 1207.28 L1319.69 1207.28 L1319.11 1207.28 L1318.52 1207.28 L1317.93 1207.28 L1317.35 1207.28 L1316.76 1207.28 L1316.18 1207.28 L1315.59 1207.28 L1315 1207.28 L1314.42 1207.28 L1313.83 1207.28 L1313.24 1207.28 L1312.66 1207.28 L1312.07 1207.28 L1311.48 1207.28 L1310.9 1207.28 L1310.31 1207.28 L1309.73 1207.28 L1309.14 1207.28 L1308.55 1207.28 L1307.97 1207.28 L1307.38 1207.28 L1306.79 1207.28 L1306.21 1207.28 L1305.62 1207.28 L1305.03 1207.28 L1304.45 1207.28 L1303.86 1207.28 L1303.27 1207.28 L1302.69 1207.28 L1302.1 1207.28 L1301.52 1207.28 L1300.93 1207.28 L1300.34 1207.28 L1299.76 1207.28 L1299.17 1207.28 L1298.58 1207.28 L1298 1207.28 L1297.41 1207.28 L1296.82 1207.28 L1296.24 1207.28 L1295.65 1207.28 L1295.06 1207.28 L1294.48 1207.28 L1293.89 1207.28 L1293.31 1207.28 L1292.72 1207.28 L1292.13 1207.28 L1291.55 1207.28 L1290.96 1207.28 L1290.37 1207.28 L1289.79 1207.28 L1289.2 1207.28 L1288.61 1207.28 L1288.03 1207.28 L1287.44 1207.28 L1286.86 1207.28 L1286.27 1207.28 L1285.68 1207.28 L1285.1 1207.28 L1284.51 1207.28 L1283.92 1207.28 L1283.34 1207.28 L1282.75 1207.28 L1282.16 1207.28 L1281.58 1207.28 L1280.99 1207.28 L1280.4 1207.28 L1279.82 1207.28 L1279.23 1207.28 L1278.65 1207.28 L1278.06 1207.28 L1277.47 1207.28 L1276.89 1207.28 L1276.3 1207.28 L1275.71 1207.28 L1275.13 1207.28 L1274.54 1207.28 L1273.95 1207.28 L1273.37 1207.28 L1272.78 1207.28 L1272.19 1207.28 L1271.61 1207.28 L1271.02 1207.28 L1270.44 1207.28 L1269.85 1207.28 L1269.26 1207.28 L1268.68 1207.28 L1268.09 1207.28 L1267.5 1207.28 L1266.92 1207.28 L1266.33 1207.28 L1265.74 1207.28 L1265.16 1207.28 L1264.57 1207.28 L1263.98 1207.28 L1263.4 1207.28 L1262.81 1207.28 L1262.23 1207.28 L1261.64 1207.28 L1261.05 1207.28 L1260.47 1207.28 L1259.88 1207.28 L1259.29 1207.28 L1258.71 1207.28 L1258.12 1207.28 L1257.53 1207.28 L1256.95 1207.28 L1256.36 1207.28 L1255.78 1207.28 L1255.19 1207.28 L1254.6 1207.28 L1254.02 1207.28 L1253.43 1207.28 L1252.84 1207.28 L1252.26 1207.28 L1251.67 1207.28 L1251.08 1207.28 L1250.5 1207.28 L1249.91 1207.28 L1249.32 1207.28 L1248.74 1207.28 L1248.15 1207.28 L1247.57 1207.28 L1246.98 1207.28 L1246.39 1207.28 L1245.81 1207.28 L1245.22 1207.28 L1244.63 1207.28 L1244.05 1207.28 L1243.46 1207.28 L1242.87 1207.28 L1242.29 1207.28 L1241.7 1207.28 L1241.11 1207.28 L1240.53 1207.28 L1239.94 1207.28 L1239.36 1207.28 L1238.77 1207.28 L1238.18 1207.28 L1237.6 1207.28 L1237.01 1207.28 L1236.42 1207.28 L1235.84 1207.28 L1235.25 1207.28 L1234.66 1207.28 L1234.08 1207.28 L1233.49 1207.28 L1232.91 1207.28 L1232.32 1207.28 L1231.73 1207.28 L1231.15 1207.28 L1230.56 1207.28 L1229.97 1207.28 L1229.39 1207.28 L1228.8 1207.28 L1228.21 1207.28 L1227.63 1207.28 L1227.04 1207.28 L1226.45 1207.28 L1225.87 1207.28 L1225.28 1207.28 L1224.7 1207.28 L1224.11 1207.28 L1223.52 1207.28 L1222.94 1207.28 L1222.35 1207.28 L1221.76 1207.28 L1221.18 1207.28 L1220.59 1207.28 L1220 1207.28 L1219.42 1207.28 L1218.83 1207.28 L1218.24 1207.28 L1217.66 1207.28 L1217.07 1207.28 L1216.49 1207.28 L1215.9 1207.28 L1215.31 1207.28 L1214.73 1207.28 L1214.14 1207.28 L1213.55 1207.28 L1212.97 1207.28 L1212.38 1207.28 L1211.79 1207.28 L1211.21 1207.28 L1210.62 1207.28 L1210.03 1207.28 L1209.45 1207.28 L1208.86 1207.28 L1208.28 1207.28 L1207.69 1207.28 L1207.1 1207.28 L1206.52 1207.28 L1205.93 1207.28 L1205.34 1207.28 L1204.76 1207.28 L1204.17 1207.28 L1203.58 1207.28 L1203 1207.28 L1202.41 1207.28 L1201.83 1207.28 L1201.24 1207.28 L1200.65 1207.28 L1200.07 1207.28 L1199.48 1207.28 L1198.89 1207.28 L1198.31 1207.28 L1197.72 1207.28 L1197.13 1207.28 L1196.55 1207.28 L1195.96 1207.28 L1195.37 1207.28 L1194.79 1207.28 L1194.2 1207.28 L1193.62 1207.28 L1193.03 1207.28 L1192.44 1207.28 L1191.86 1207.28 L1191.27 1207.28 L1190.68 1207.28 L1190.1 1207.28 L1189.51 1207.28 L1188.92 1207.28 L1188.34 1207.28 L1187.75 1207.28 L1187.16 1207.28 L1186.58 1207.28 L1185.99 1207.28 L1185.41 1207.28 L1184.82 1207.28 L1184.23 1207.28 L1183.65 1207.28 L1183.06 1207.28 L1182.47 1207.28 L1181.89 1207.28 L1181.3 1207.28 L1180.71 1207.28 L1180.13 1207.28 L1179.54 1207.28 L1178.96 1207.28 L1178.37 1207.28 L1177.78 1207.28 L1177.2 1207.28 L1176.61 1207.28 L1176.02 1207.28 L1175.44 1207.28 L1174.85 1207.28 L1174.26 1207.28 L1173.68 1207.28 L1173.09 1207.28 L1172.5 1207.28 L1171.92 1207.28 L1171.33 1207.28 L1170.75 1207.28 L1170.16 1207.28 L1169.57 1207.28 L1168.99 1207.28 L1168.4 1207.28 L1167.81 1207.28 L1167.23 1207.28 L1166.64 1207.28 L1166.05 1207.28 L1165.47 1207.28 L1164.88 1207.28 L1164.29 1207.28 L1163.71 1207.28 L1163.12 1207.28 L1162.54 1207.28 L1161.95 1207.28 L1161.36 1207.28 L1160.78 1207.28 L1160.19 1207.28 L1159.6 1207.28 L1159.02 1207.28 L1158.43 1207.28 L1157.84 1207.28 L1157.26 1207.28 L1156.67 1207.28 L1156.09 1207.28 L1155.5 1207.28 L1154.91 1207.28 L1154.33 1207.28 L1153.74 1207.28 L1153.15 1207.28 L1152.57 1207.28 L1151.98 1207.28 L1151.39 1207.28 L1150.81 1207.28 L1150.22 1207.28 L1149.63 1207.28 L1149.05 1207.28 L1148.46 1207.28 L1147.88 1207.28 L1147.29 1207.28 L1146.7 1207.28 L1146.12 1207.28 L1145.53 1207.28 L1144.94 1207.28 L1144.36 1207.28 L1143.77 1207.28 L1143.18 1207.28 L1142.6 1207.28 L1142.01 1207.28 L1141.42 1207.28 L1140.84 1207.28 L1140.25 1207.28 L1139.67 1207.28 L1139.08 1207.28 L1138.49 1207.28 L1137.91 1207.28 L1137.32 1207.28 L1136.73 1207.28 L1136.15 1207.28 L1135.56 1207.28 L1134.97 1207.28 L1134.39 1207.28 L1133.8 1207.28 L1133.21 1207.28 L1132.63 1207.28 L1132.04 1207.28 L1131.46 1207.28 L1130.87 1207.28 L1130.28 1207.28 L1129.7 1207.28 L1129.11 1207.28 L1128.52 1207.28 L1127.94 1207.28 L1127.35 1207.28 L1126.76 1207.28 L1126.18 1207.28 L1125.59 1207.28 L1125.01 1207.28 L1124.42 1207.28 L1123.83 1207.28 L1123.25 1207.28 L1122.66 1207.28 L1122.07 1207.28 L1121.49 1207.28 L1120.9 1207.28 L1120.31 1207.28 L1119.73 1207.28 L1119.14 1207.28 L1118.55 1207.28 L1117.97 1207.28 L1117.38 1207.28 L1116.8 1207.28 L1116.21 1207.28 L1115.62 1207.28 L1115.04 1207.28 L1114.45 1207.28 L1113.86 1207.28 L1113.28 1207.28 L1112.69 1207.28 L1112.1 1207.28 L1111.52 1207.28 L1110.93 1207.28 L1110.34 1207.28 L1109.76 1207.28 L1109.17 1207.28 L1108.59 1207.28 L1108 1207.28 L1107.41 1207.28 L1106.83 1207.28 L1106.24 1207.28 L1105.65 1207.28 L1105.07 1207.28 L1104.48 1207.28 L1103.89 1207.28 L1103.31 1207.28 L1102.72 1207.28 L1102.14 1207.28 L1101.55 1207.28 L1100.96 1207.28 L1100.38 1207.28 L1099.79 1207.28 L1099.2 1207.28 L1098.62 1207.28 L1098.03 1207.28 L1097.44 1207.28 L1096.86 1207.28 L1096.27 1207.28 L1095.68 1207.28 L1095.1 1207.28 L1094.51 1207.28 L1093.93 1207.28 L1093.34 1207.28 L1092.75 1207.28 L1092.17 1207.28 L1091.58 1207.28 L1090.99 1207.28 L1090.41 1207.28 L1089.82 1207.28 L1089.23 1207.28 L1088.65 1207.28 L1088.06 1207.28 L1087.47 1207.28 L1086.89 1207.28 L1086.3 1207.28 L1085.72 1207.28 L1085.13 1207.28 L1084.54 1207.28 L1083.96 1207.28 L1083.37 1207.28 L1082.78 1207.28 L1082.2 1207.28 L1081.61 1207.28 L1081.02 1207.28 L1080.44 1207.28 L1079.85 1207.28 L1079.26 1207.28 L1078.68 1207.28 L1078.09 1207.28 L1077.51 1207.28 L1076.92 1207.28 L1076.33 1207.28 L1075.75 1207.28 L1075.16 1207.28 L1074.57 1207.28 L1073.99 1207.28 L1073.4 1207.28 L1072.81 1207.28 L1072.23 1207.28 L1071.64 1207.28 L1071.06 1207.28 L1070.47 1207.28 L1069.88 1207.28 L1069.3 1207.28 L1068.71 1207.28 L1068.12 1207.28 L1067.54 1207.28 L1066.95 1207.28 L1066.36 1207.28 L1065.78 1207.28 L1065.19 1207.28 L1064.6 1207.28 L1064.02 1207.28 L1063.43 1207.28 L1062.85 1207.28 L1062.26 1207.28 L1061.67 1207.28 L1061.09 1207.28 L1060.5 1207.28 L1059.91 1207.28 L1059.33 1207.28 L1058.74 1207.28 L1058.15 1207.28 L1057.57 1207.28 L1056.98 1207.28 L1056.39 1207.28 L1055.81 1207.28 L1055.22 1207.28 L1054.64 1207.28 L1054.05 1207.28 L1053.46 1207.28 L1052.88 1207.28 L1052.29 1207.28 L1051.7 1207.28 L1051.12 1207.28 L1050.53 1207.28 L1049.94 1207.28 L1049.36 1207.28 L1048.77 1207.28 L1048.19 1207.28 L1047.6 1207.28 L1047.01 1207.28 L1046.43 1207.28 L1045.84 1207.28 L1045.25 1207.28 L1044.67 1207.28 L1044.08 1207.28 L1043.49 1207.28 L1042.91 1207.28 L1042.32 1207.28 L1041.73 1207.28 L1041.15 1207.28 L1040.56 1207.28 L1039.98 1207.28 L1039.39 1207.28 L1038.8 1207.28 L1038.22 1207.28 L1037.63 1207.28 L1037.04 1207.28 L1036.46 1207.28 L1035.87 1207.28 L1035.28 1207.28 L1034.7 1207.28 L1034.11 1207.28 L1033.52 1207.28 L1032.94 1207.28 L1032.35 1207.28 L1031.77 1207.28 L1031.18 1207.28 L1030.59 1207.28 L1030.01 1207.28 L1029.42 1207.28 L1028.83 1207.28 L1028.25 1207.28 L1027.66 1207.28 L1027.07 1207.28 L1026.49 1207.28 L1025.9 1207.28 L1025.32 1207.28 L1024.73 1207.28 L1024.14 1207.28 L1023.56 1207.28 L1022.97 1207.28 L1022.38 1207.28 L1021.8 1207.28 L1021.21 1207.28 L1020.62 1207.28 L1020.04 1207.28 L1019.45 1207.28 L1018.86 1207.28 L1018.28 1207.28 L1017.69 1207.28 L1017.11 1207.28 L1016.52 1207.28 L1015.93 1207.28 L1015.35 1207.28 L1014.76 1207.28 L1014.17 1207.28 L1013.59 1207.28 L1013 1207.28 L1012.41 1207.28 L1011.83 1207.28 L1011.24 1207.28 L1010.65 1207.28 L1010.07 1207.28 L1009.48 1207.28 L1008.9 1207.28 L1008.31 1207.28 L1007.72 1207.28 L1007.14 1207.28 L1006.55 1207.28 L1005.96 1207.28 L1005.38 1207.28 L1004.79 1207.28 L1004.2 1207.28 L1003.62 1207.28 L1003.03 1207.28 L1002.44 1207.28 L1001.86 1207.28 L1001.27 1207.28 L1000.69 1207.28 L1000.1 1207.28 L999.513 1207.28 L998.926 1207.28 L998.34 1207.28 L997.754 1207.28 L997.167 1207.28 L996.581 1207.28 L995.994 1207.28 L995.408 1207.28 L994.822 1207.28 L994.235 1207.28 L993.649 1207.28 L993.062 1207.28 L992.476 1207.28 L991.889 1207.28 L991.303 1207.28 L990.717 1207.28 L990.13 1207.28 L989.544 1207.28 L988.957 1207.28 L988.371 1207.28 L987.785 1207.28 L987.198 1207.28 L986.612 1207.28 L986.025 1207.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.36 986.612,1207.36 987.198,1207.36 987.785,1207.36 988.371,1207.36 988.957,1207.36 989.544,1207.36 990.13,1207.36 990.717,1207.36 991.303,1207.36 991.889,1207.36 992.476,1207.36 993.062,1207.36 993.649,1207.36 994.235,1207.36 994.822,1207.36 995.408,1207.36 995.994,1207.36 996.581,1207.36 997.167,1207.36 997.754,1207.36 998.34,1207.36 998.926,1207.36 999.513,1207.36 1000.1,1207.36 1000.69,1207.36 1001.27,1207.36 1001.86,1207.36 1002.44,1207.36 1003.03,1207.36 1003.62,1207.36 1004.2,1207.36 1004.79,1207.36 1005.38,1207.36 1005.96,1207.36 1006.55,1207.36 1007.14,1207.36 1007.72,1207.36 1008.31,1207.36 1008.9,1207.36 1009.48,1207.36 1010.07,1207.36 1010.65,1207.36 1011.24,1207.36 1011.83,1207.36 1012.41,1207.36 1013,1207.36 1013.59,1207.36 1014.17,1207.36 1014.76,1207.36 1015.35,1207.36 1015.93,1207.36 1016.52,1207.36 1017.11,1207.36 1017.69,1207.36 1018.28,1207.36 1018.86,1207.36 1019.45,1207.36 1020.04,1207.36 1020.62,1207.36 1021.21,1207.36 1021.8,1207.36 1022.38,1207.36 1022.97,1207.36 1023.56,1207.36 1024.14,1207.36 1024.73,1207.36 1025.32,1207.36 1025.9,1207.36 1026.49,1207.36 1027.07,1207.36 1027.66,1207.36 1028.25,1207.36 1028.83,1207.36 1029.42,1207.36 1030.01,1207.36 1030.59,1207.36 1031.18,1207.36 1031.77,1207.36 1032.35,1207.36 1032.94,1207.36 1033.52,1207.36 1034.11,1207.36 1034.7,1207.36 1035.28,1207.36 1035.87,1207.36 1036.46,1207.36 1037.04,1207.36 1037.63,1207.36 1038.22,1207.36 1038.8,1207.36 1039.39,1207.36 1039.98,1207.36 1040.56,1207.36 1041.15,1207.36 1041.73,1207.36 1042.32,1207.36 1042.91,1207.36 1043.49,1207.36 1044.08,1207.36 1044.67,1207.36 1045.25,1207.36 1045.84,1207.36 1046.43,1207.36 1047.01,1207.36 1047.6,1207.36 1048.19,1207.36 1048.77,1207.36 1049.36,1207.36 1049.94,1207.36 1050.53,1207.36 1051.12,1207.36 1051.7,1207.36 1052.29,1207.36 1052.88,1207.36 1053.46,1207.36 1054.05,1207.36 1054.64,1207.36 1055.22,1207.36 1055.81,1207.36 1056.39,1207.36 1056.98,1207.36 1057.57,1207.36 1058.15,1207.36 1058.74,1207.36 1059.33,1207.36 1059.91,1207.36 1060.5,1207.36 1061.09,1207.36 1061.67,1207.36 1062.26,1207.36 1062.85,1207.36 1063.43,1207.36 1064.02,1207.36 1064.6,1207.36 1065.19,1207.36 1065.78,1207.36 1066.36,1207.36 1066.95,1207.36 1067.54,1207.36 1068.12,1207.36 1068.71,1207.36 1069.3,1207.36 1069.88,1207.36 1070.47,1207.36 1071.06,1207.36 1071.64,1207.36 1072.23,1207.36 1072.81,1207.36 1073.4,1207.36 1073.99,1207.36 1074.57,1207.36 1075.16,1207.36 1075.75,1207.36 1076.33,1207.36 1076.92,1207.36 1077.51,1207.36 1078.09,1207.36 1078.68,1207.36 1079.26,1207.36 1079.85,1207.36 1080.44,1207.36 1081.02,1207.36 1081.61,1207.36 1082.2,1207.36 1082.78,1207.36 1083.37,1207.36 1083.96,1207.36 1084.54,1207.36 1085.13,1207.36 1085.72,1207.36 1086.3,1207.36 1086.89,1207.36 1087.47,1207.36 1088.06,1207.36 1088.65,1207.36 1089.23,1207.36 1089.82,1207.36 1090.41,1207.36 1090.99,1207.36 1091.58,1207.36 1092.17,1207.36 1092.75,1207.36 1093.34,1207.36 1093.93,1207.36 1094.51,1207.36 1095.1,1207.36 1095.68,1207.36 1096.27,1207.36 1096.86,1207.36 1097.44,1207.36 1098.03,1207.36 1098.62,1207.36 1099.2,1207.36 1099.79,1207.36 1100.38,1207.36 1100.96,1207.36 1101.55,1207.36 1102.14,1207.36 1102.72,1207.36 1103.31,1207.36 1103.89,1207.36 1104.48,1207.36 1105.07,1207.36 1105.65,1207.36 1106.24,1207.36 1106.83,1207.36 1107.41,1207.36 1108,1207.36 1108.59,1207.36 1109.17,1207.36 1109.76,1207.36 1110.34,1207.36 1110.93,1207.36 1111.52,1207.36 1112.1,1207.36 1112.69,1207.36 1113.28,1207.36 1113.86,1207.36 1114.45,1207.36 1115.04,1207.36 1115.62,1207.36 1116.21,1207.36 1116.8,1207.36 1117.38,1207.36 1117.97,1207.36 1118.55,1207.36 1119.14,1207.36 1119.73,1207.36 1120.31,1207.36 1120.9,1207.36 1121.49,1207.36 1122.07,1207.36 1122.66,1207.36 1123.25,1207.36 1123.83,1207.36 1124.42,1207.36 1125.01,1207.36 1125.59,1207.36 1126.18,1207.36 1126.76,1207.36 1127.35,1207.36 1127.94,1207.36 1128.52,1207.36 1129.11,1207.36 1129.7,1207.36 1130.28,1207.36 1130.87,1207.36 1131.46,1207.36 1132.04,1207.36 1132.63,1207.36 1133.21,1207.36 1133.8,1207.36 1134.39,1207.36 1134.97,1207.36 1135.56,1207.36 1136.15,1207.36 1136.73,1207.36 1137.32,1207.36 1137.91,1207.36 1138.49,1207.36 1139.08,1207.36 1139.67,1207.36 1140.25,1207.36 1140.84,1207.36 1141.42,1207.36 1142.01,1207.36 1142.6,1207.36 1143.18,1207.36 1143.77,1207.36 1144.36,1207.36 1144.94,1207.36 1145.53,1207.36 1146.12,1207.36 1146.7,1207.36 1147.29,1207.36 1147.88,1207.36 1148.46,1207.36 1149.05,1207.36 1149.63,1207.36 1150.22,1207.36 1150.81,1207.36 1151.39,1207.36 1151.98,1207.36 1152.57,1207.36 1153.15,1207.36 1153.74,1207.36 1154.33,1207.36 1154.91,1207.36 1155.5,1207.36 1156.09,1207.36 1156.67,1207.36 1157.26,1207.36 1157.84,1207.36 1158.43,1207.36 1159.02,1207.36 1159.6,1207.36 1160.19,1207.36 1160.78,1207.36 1161.36,1207.36 1161.95,1207.36 1162.54,1207.36 1163.12,1207.36 1163.71,1207.36 1164.29,1207.36 1164.88,1207.36 1165.47,1207.36 1166.05,1207.36 1166.64,1207.36 1167.23,1207.36 1167.81,1207.36 1168.4,1207.36 1168.99,1207.36 1169.57,1207.36 1170.16,1207.36 1170.75,1207.36 1171.33,1207.36 1171.92,1207.36 1172.5,1207.36 1173.09,1207.36 1173.68,1207.36 1174.26,1207.36 1174.85,1207.36 1175.44,1207.36 1176.02,1207.36 1176.61,1207.36 1177.2,1207.36 1177.78,1207.36 1178.37,1207.36 1178.96,1207.36 1179.54,1207.36 1180.13,1207.36 1180.71,1207.36 1181.3,1207.36 1181.89,1207.36 1182.47,1207.36 1183.06,1207.36 1183.65,1207.36 1184.23,1207.36 1184.82,1207.36 1185.41,1207.36 1185.99,1207.36 1186.58,1207.36 1187.16,1207.36 1187.75,1207.36 1188.34,1207.36 1188.92,1207.36 1189.51,1207.36 1190.1,1207.36 1190.68,1207.36 1191.27,1207.36 1191.86,1207.36 1192.44,1207.36 1193.03,1207.36 1193.62,1207.36 1194.2,1207.36 1194.79,1207.36 1195.37,1207.36 1195.96,1207.36 1196.55,1207.36 1197.13,1207.36 1197.72,1207.36 1198.31,1207.36 1198.89,1207.36 1199.48,1207.36 1200.07,1207.36 1200.65,1207.36 1201.24,1207.36 1201.83,1207.36 1202.41,1207.36 1203,1207.36 1203.58,1207.36 1204.17,1207.36 1204.76,1207.36 1205.34,1207.36 1205.93,1207.36 1206.52,1207.36 1207.1,1207.36 1207.69,1207.36 1208.28,1207.36 1208.86,1207.36 1209.45,1207.36 1210.03,1207.36 1210.62,1207.36 1211.21,1207.36 1211.79,1207.36 1212.38,1207.36 1212.97,1207.36 1213.55,1207.36 1214.14,1207.36 1214.73,1207.36 1215.31,1207.36 1215.9,1207.36 1216.49,1207.36 1217.07,1207.36 1217.66,1207.36 1218.24,1207.36 1218.83,1207.36 1219.42,1207.36 1220,1207.36 1220.59,1207.36 1221.18,1207.36 1221.76,1207.36 1222.35,1207.36 1222.94,1207.36 1223.52,1207.36 1224.11,1207.36 1224.7,1207.36 1225.28,1207.36 1225.87,1207.36 1226.45,1207.36 1227.04,1207.36 1227.63,1207.36 1228.21,1207.36 1228.8,1207.36 1229.39,1207.36 1229.97,1207.36 1230.56,1207.36 1231.15,1207.36 1231.73,1207.36 1232.32,1207.36 1232.91,1207.36 1233.49,1207.36 1234.08,1207.36 1234.66,1207.36 1235.25,1207.36 1235.84,1207.36 1236.42,1207.36 1237.01,1207.36 1237.6,1207.36 1238.18,1207.36 1238.77,1207.36 1239.36,1207.36 1239.94,1207.36 1240.53,1207.36 1241.11,1207.36 1241.7,1207.36 1242.29,1207.36 1242.87,1207.36 1243.46,1207.36 1244.05,1207.36 1244.63,1207.36 1245.22,1207.36 1245.81,1207.36 1246.39,1207.36 1246.98,1207.36 1247.57,1207.36 1248.15,1207.36 1248.74,1207.36 1249.32,1207.36 1249.91,1207.36 1250.5,1207.36 1251.08,1207.36 1251.67,1207.36 1252.26,1207.36 1252.84,1207.36 1253.43,1207.36 1254.02,1207.36 1254.6,1207.36 1255.19,1207.36 1255.78,1207.36 1256.36,1207.36 1256.95,1207.36 1257.53,1207.36 1258.12,1207.36 1258.71,1207.36 1259.29,1207.36 1259.88,1207.36 1260.47,1207.36 1261.05,1207.36 1261.64,1207.36 1262.23,1207.36 1262.81,1207.36 1263.4,1207.36 1263.98,1207.36 1264.57,1207.36 1265.16,1207.36 1265.74,1207.36 1266.33,1207.36 1266.92,1207.36 1267.5,1207.36 1268.09,1207.36 1268.68,1207.36 1269.26,1207.36 1269.85,1207.36 1270.44,1207.36 1271.02,1207.36 1271.61,1207.36 1272.19,1207.36 1272.78,1207.36 1273.37,1207.36 1273.95,1207.36 1274.54,1207.36 1275.13,1207.36 1275.71,1207.36 1276.3,1207.36 1276.89,1207.36 1277.47,1207.36 1278.06,1207.36 1278.65,1207.36 1279.23,1207.36 1279.82,1207.36 1280.4,1207.36 1280.99,1207.36 1281.58,1207.36 1282.16,1207.36 1282.75,1207.36 1283.34,1207.36 1283.92,1207.36 1284.51,1207.36 1285.1,1207.36 1285.68,1207.36 1286.27,1207.36 1286.86,1207.36 1287.44,1207.36 1288.03,1207.36 1288.61,1207.36 1289.2,1207.36 1289.79,1207.36 1290.37,1207.36 1290.96,1207.36 1291.55,1207.36 1292.13,1207.36 1292.72,1207.36 1293.31,1207.36 1293.89,1207.36 1294.48,1207.36 1295.06,1207.36 1295.65,1207.36 1296.24,1207.36 1296.82,1207.36 1297.41,1207.36 1298,1207.36 1298.58,1207.36 1299.17,1207.36 1299.76,1207.36 1300.34,1207.36 1300.93,1207.36 1301.52,1207.36 1302.1,1207.36 1302.69,1207.36 1303.27,1207.36 1303.86,1207.36 1304.45,1207.36 1305.03,1207.36 1305.62,1207.36 1306.21,1207.36 1306.79,1207.36 1307.38,1207.36 1307.97,1207.36 1308.55,1207.36 1309.14,1207.36 1309.73,1207.36 1310.31,1207.36 1310.9,1207.36 1311.48,1207.36 1312.07,1207.36 1312.66,1207.36 1313.24,1207.36 1313.83,1207.36 1314.42,1207.36 1315,1207.36 1315.59,1207.36 1316.18,1207.36 1316.76,1207.36 1317.35,1207.36 1317.93,1207.36 1318.52,1207.36 1319.11,1207.36 1319.69,1207.36 1320.28,1207.36 1320.87,1207.36 1321.45,1207.36 1322.04,1207.36 1322.63,1207.36 1323.21,1207.36 1323.8,1207.36 1324.39,1207.36 1324.97,1207.36 1325.56,1207.36 1326.14,1207.36 1326.73,1207.36 1327.32,1207.36 1327.9,1207.36 1328.49,1207.36 1329.08,1207.36 1329.66,1207.36 1330.25,1207.36 1330.84,1207.36 1331.42,1207.36 1332.01,1207.36 1332.6,1207.36 1333.18,1207.36 1333.77,1207.36 1334.35,1207.36 1334.94,1207.36 1335.53,1207.36 1336.11,1207.36 1336.7,1207.36 1337.29,1207.36 1337.87,1207.36 1338.46,1207.36 1339.05,1207.36 1339.63,1207.36 1340.22,1207.36 1340.8,1207.36 1341.39,1207.36 1341.98,1207.36 1342.56,1207.36 1343.15,1207.36 1343.74,1207.36 1344.32,1207.36 1344.91,1207.36 1345.5,1207.36 1346.08,1207.36 1346.67,1207.36 1347.26,1207.36 1347.84,1207.36 1348.43,1207.36 1349.01,1207.36 1349.6,1207.36 1350.19,1207.36 1350.77,1207.36 1351.36,1207.36 1351.95,1207.36 1352.53,1207.36 1353.12,1207.36 1353.71,1207.36 1354.29,1207.36 1354.88,1207.36 1355.47,1207.36 1356.05,1207.36 1356.64,1207.36 1357.22,1207.36 1357.81,1207.36 1358.4,1207.36 1358.98,1207.36 1359.57,1207.36 1360.16,1207.36 1360.74,1207.36 1361.33,1207.36 1361.92,1207.36 1362.5,1207.36 1363.09,1207.36 1363.68,1207.36 1364.26,1207.36 1364.85,1207.36 1365.43,1207.36 1366.02,1207.36 1366.61,1207.36 1367.19,1207.36 1367.78,1207.36 1368.37,1207.36 1368.95,1207.36 1369.54,1207.36 1370.13,1207.36 1370.71,1207.36 1371.3,1207.36 1371.88,1207.36 1372.47,1207.36 1373.06,1207.36 1373.64,1207.36 1374.23,1207.36 1374.82,1207.36 1375.4,1207.36 1375.99,1207.36 1376.58,1207.36 1377.16,1207.36 1377.75,1207.36 1378.34,1207.36 1378.92,1207.36 1379.51,1207.36 1380.09,1207.36 1380.68,1207.36 1381.27,1207.36 1381.85,1207.36 1382.44,1207.36 1383.03,1207.36 1383.61,1207.36 1384.2,1207.36 1384.79,1207.36 1385.37,1207.36 1385.96,1207.36 1386.55,1207.36 1387.13,1207.36 1387.72,1207.36 1388.3,1207.36 1388.89,1207.36 1389.48,1207.36 1390.06,1207.36 1390.65,1207.36 1391.24,1207.36 1391.82,1207.36 1392.41,1207.36 1393,1207.36 1393.58,1207.36 1394.17,1207.36 1394.75,1207.36 1395.34,1207.36 1395.93,1207.36 1396.51,1207.36 1397.1,1207.36 1397.69,1207.36 1398.27,1207.36 1398.86,1207.36 1399.45,1207.36 1400.03,1207.36 1400.62,1207.36 1401.21,1207.36 1401.79,1207.36 1402.38,1207.36 1402.96,1207.36 1403.55,1207.36 1404.14,1207.36 1404.72,1207.36 1405.31,1207.36 1405.9,1207.36 1406.48,1207.36 1407.07,1207.36 1407.66,1207.36 1408.24,1207.36 1408.83,1207.36 1409.42,1207.36 1410,1207.36 1410.59,1207.36 1411.17,1207.36 1411.76,1207.36 1412.35,1207.36 1412.93,1207.36 1413.52,1207.36 1414.11,1207.36 1414.69,1207.36 1415.28,1207.36 1415.87,1207.36 1416.45,1207.36 1417.04,1207.36 1417.63,1207.36 1418.21,1207.36 1418.8,1207.36 1419.38,1207.36 1419.97,1207.36 1420.56,1207.36 1421.14,1207.36 1421.73,1207.36 1422.32,1207.36 1422.9,1207.36 1423.49,1207.36 1424.08,1207.36 1424.66,1207.36 1425.25,1207.36 1425.83,1207.36 1426.42,1207.36 1427.01,1207.36 1427.59,1207.36 1428.18,1207.36 1428.77,1207.36 1429.35,1207.36 1429.94,1207.36 1430.53,1207.36 1431.11,1207.36 1431.7,1207.36 1432.29,1207.36 1432.87,1207.36 1433.46,1207.36 1434.04,1207.36 1434.63,1207.36 1435.22,1207.36 1435.8,1207.36 1436.39,1207.36 1436.98,1207.36 1437.56,1207.36 1438.15,1207.36 1438.74,1207.36 1439.32,1207.36 1439.91,1207.36 1440.5,1207.36 1441.08,1207.36 1441.67,1207.36 1442.25,1207.36 1442.84,1207.36 1443.43,1207.36 1444.01,1207.36 1444.6,1207.36 1445.19,1207.36 1445.77,1207.36 1446.36,1207.36 1446.95,1207.36 1447.53,1207.36 1448.12,1207.36 1448.7,1207.36 1449.29,1207.36 1449.88,1207.36 1450.46,1207.36 1451.05,1207.36 1451.64,1207.36 1452.22,1207.36 1452.81,1207.36 1453.4,1207.36 1453.98,1207.36 1454.57,1207.36 1455.16,1207.36 1455.74,1207.36 1456.33,1207.36 1456.91,1207.36 1457.5,1207.36 1458.09,1207.36 1458.67,1207.36 1459.26,1207.36 1459.85,1207.36 1460.43,1207.36 1461.02,1207.36 1461.61,1207.36 1462.19,1207.36 1462.78,1207.36 1463.37,1207.36 1463.95,1207.36 1464.54,1207.36 1465.12,1207.36 1465.71,1207.36 1466.3,1207.36 1466.88,1207.36 1467.47,1207.36 1468.06,1207.36 1468.64,1207.36 1469.23,1207.36 1469.82,1207.36 1470.4,1207.36 1470.99,1207.36 1471.57,1207.36 1472.16,1207.36 1472.75,1207.36 1473.33,1207.36 1473.92,1207.36 1474.51,1207.36 1475.09,1207.36 1475.68,1207.36 1476.27,1207.36 1476.85,1207.36 1477.44,1207.36 1478.03,1207.36 1478.61,1207.36 1479.2,1207.36 1479.78,1207.36 1480.37,1207.36 1480.96,1207.36 1481.54,1207.36 1482.13,1207.36 1482.72,1207.36 1483.3,1207.36 1483.89,1207.36 1484.48,1207.36 1485.06,1207.36 1485.65,1207.36 1486.24,1207.36 1486.82,1207.36 1487.41,1207.36 1487.99,1207.36 1488.58,1207.36 1489.17,1207.36 1489.75,1207.36 1490.34,1207.36 1490.93,1207.36 1491.51,1207.36 1492.1,1207.36 1492.69,1207.36 1493.27,1207.36 1493.86,1207.36 1494.45,1207.36 1495.03,1207.36 1495.62,1207.36 1496.2,1207.36 1496.79,1207.36 1497.38,1207.36 1497.96,1207.36 1498.55,1207.36 1499.14,1207.36 1499.72,1207.36 1500.31,1207.36 1500.9,1207.36 1501.48,1207.36 1502.07,1207.36 1502.65,1207.36 1503.24,1207.36 1503.83,1207.36 1504.41,1207.36 1505,1207.36 1505.59,1207.36 1506.17,1207.36 1506.76,1207.36 1507.35,1207.36 1507.93,1207.36 1508.52,1207.36 1509.11,1207.36 1509.69,1207.36 1510.28,1207.36 1510.86,1207.36 1511.45,1207.36 1512.04,1207.36 1512.62,1207.36 1513.21,1207.36 1513.8,1207.36 1514.38,1207.36 1514.97,1207.36 1515.56,1207.36 1516.14,1207.36 1516.73,1207.36 1517.32,1207.36 1517.9,1207.36 1518.49,1207.36 1519.07,1207.36 1519.66,1207.36 1520.25,1207.36 1520.83,1207.36 1521.42,1207.36 1522.01,1207.36 1522.59,1207.36 1523.18,1207.36 1523.77,1207.36 1524.35,1207.36 1524.94,1207.36 1525.52,1207.36 1526.11,1207.36 1526.7,1207.36 1527.28,1207.36 1527.87,1207.36 1528.46,1207.36 1529.04,1207.36 1529.63,1207.36 1530.22,1207.36 1530.8,1207.36 1531.39,1207.36 1531.98,1207.36 1532.56,1207.36 1533.15,1207.36 1533.73,1207.36 1534.32,1207.36 1534.91,1207.36 1535.49,1207.36 1536.08,1207.36 1536.67,1207.36 1537.25,1207.36 1537.84,1207.36 1538.43,1207.36 1539.01,1207.36 1539.6,1207.36 1540.19,1207.36 1540.77,1207.36 1541.36,1207.36 1541.94,1207.36 1542.53,1207.36 1543.12,1207.36 1543.7,1207.36 1544.29,1207.36 1544.88,1207.36 1545.46,1207.36 1546.05,1207.36 1546.64,1207.36 1547.22,1207.36 1547.81,1207.36 1548.4,1207.36 1548.98,1207.36 1549.57,1207.36 1550.15,1207.36 1550.74,1207.36 1551.33,1207.36 1551.91,1207.36 1552.5,1207.36 1553.09,1207.36 1553.67,1207.36 1554.26,1207.36 1554.85,1207.36 1555.43,1207.36 1556.02,1207.36 1556.6,1207.36 1557.19,1207.36 1557.78,1207.36 1558.36,1207.36 1558.95,1207.36 1559.54,1207.36 1560.12,1207.36 1560.71,1207.36 1561.3,1207.36 1561.88,1207.36 1562.47,1207.36 1563.06,1207.36 1563.64,1207.36 1564.23,1207.36 1564.81,1207.36 1565.4,1207.36 1565.99,1207.36 1566.57,1207.36 1567.16,1207.36 1567.75,1207.36 1568.33,1207.36 1568.92,1207.36 1569.51,1207.36 1570.09,1207.36 1570.68,1207.36 1571.27,1207.36 1571.85,1207.36 1572.44,1207.36 1573.02,1207.36 1573.61,1207.36 1574.2,1207.36 1574.78,1207.36 1575.37,1207.36 1575.96,1207.36 1576.54,1207.36 1577.13,1207.36 1577.72,1207.36 1578.3,1207.36 1578.89,1207.36 1579.47,1207.36 1580.06,1207.36 1580.65,1207.36 1581.23,1207.36 1581.82,1207.36 1582.41,1207.36 1582.99,1207.36 1583.58,1207.36 1584.17,1207.36 1584.75,1207.36 1585.34,1207.36 1585.93,1207.36 1586.51,1207.36 1587.1,1207.36 1587.68,1207.36 1588.27,1207.36 1588.86,1207.36 1589.44,1207.36 1590.03,1207.36 1590.62,1207.36 1591.2,1207.36 1591.79,1207.36 1592.38,1207.36 1592.96,1207.36 1593.55,1207.36 1594.14,1207.36 1594.72,1207.36 1595.31,1207.36 1595.89,1207.36 1596.48,1207.36 1597.07,1207.36 1597.65,1207.36 1598.24,1207.36 1598.83,1207.36 1599.41,1207.36 1600,1207.36 1600.59,1207.36 1601.17,1207.36 1601.76,1207.36 1602.34,1207.36 1602.93,1207.36 1603.52,1207.36 1604.1,1207.36 1604.69,1207.36 1605.28,1207.36 1605.86,1207.36 1606.45,1207.36 1607.04,1207.36 1607.62,1207.36 1608.21,1207.36 1608.8,1207.36 1609.38,1207.36 1609.97,1207.36 1610.55,1207.36 1611.14,1207.36 1611.73,1207.36 1612.31,1207.36 1612.9,1207.36 1613.49,1207.36 1614.07,1207.36 1614.66,1207.36 1615.25,1207.36 1615.83,1207.36 1616.42,1207.36 1617.01,1207.36 1617.59,1207.36 1618.18,1207.36 1618.76,1207.36 1619.35,1207.36 1619.94,1207.36 1620.52,1207.36 1621.11,1207.36 1621.7,1207.36 1622.28,1207.36 1622.87,1207.36 1623.46,1207.36 1624.04,1207.36 1624.63,1207.36 1625.22,1207.36 1625.8,1207.36 1626.39,1207.36 1626.97,1207.36 1627.56,1207.36 1628.15,1207.36 1628.73,1207.36 1629.32,1207.36 1629.91,1207.36 1630.49,1207.36 1631.08,1207.36 1631.67,1207.36 1632.25,1207.36 1632.84,1207.36 1633.42,1207.36 1634.01,1207.36 1634.6,1207.36 1635.18,1207.36 1635.77,1207.36 1636.36,1207.36 1636.94,1207.36 1637.53,1207.36 1638.12,1207.36 1638.7,1207.36 1639.29,1207.36 1639.88,1207.36 1640.46,1207.36 1641.05,1207.36 1641.63,1207.36 1642.22,1207.36 1642.81,1207.36 1643.39,1207.36 1643.98,1207.36 1644.57,1207.36 1645.15,1207.36 1645.74,1207.36 1646.33,1207.36 1646.91,1207.36 1647.5,1207.36 1648.09,1207.36 1648.67,1207.36 1649.26,1207.36 1649.84,1207.36 1650.43,1207.36 1651.02,1207.36 1651.6,1207.36 1652.19,1207.36 1652.78,1207.36 1653.36,1207.36 1653.95,1207.36 1654.54,1207.36 1655.12,1207.36 1655.71,1207.36 1656.29,1207.36 1656.88,1207.36 1657.47,1207.36 1658.05,1207.36 1658.64,1207.36 1659.23,1207.36 1659.81,1207.36 1660.4,1207.36 1660.99,1207.36 1661.57,1207.36 1662.16,1207.36 1662.75,1207.36 1663.33,1207.36 1663.92,1207.36 1664.5,1207.36 1665.09,1207.36 1665.68,1207.36 1666.26,1207.36 1666.85,1207.36 1667.44,1207.36 1668.02,1207.36 1668.61,1207.36 1669.2,1207.36 1669.78,1207.36 1670.37,1207.36 1670.96,1207.36 1671.54,1207.36 1672.13,1207.36 1672.71,1207.36 1673.3,1207.36 1673.89,1207.36 1674.47,1207.36 1675.06,1207.36 1675.65,1207.36 1676.23,1207.36 1676.82,1207.36 1677.41,1207.36 1677.99,1207.36 1678.58,1207.36 1679.17,1207.36 1679.75,1207.36 1680.34,1207.36 1680.92,1207.36 1681.51,1207.36 1682.1,1207.36 1682.68,1207.36 1683.27,1207.36 1683.86,1207.36 1684.44,1207.36 1685.03,1207.36 1685.62,1207.36 1686.2,1207.36 1686.79,1207.36 1687.37,1207.36 1687.96,1207.36 1688.55,1207.36 1689.13,1207.36 1689.72,1207.36 1690.31,1207.36 1690.89,1207.36 1691.48,1207.36 1692.07,1207.36 1692.65,1207.36 1693.24,1207.36 1693.83,1207.36 1694.41,1207.36 1695,1207.36 1695.58,1207.36 1696.17,1207.36 1696.76,1207.36 1697.34,1207.36 1697.93,1207.36 1698.52,1207.36 1699.1,1207.36 1699.69,1207.36 1700.28,1207.36 1700.86,1207.36 1701.45,1207.36 1702.04,1207.36 1702.62,1207.36 1703.21,1207.36 1703.79,1207.36 1704.38,1207.36 1704.97,1207.36 1705.55,1207.36 1706.14,1207.36 1706.73,1207.36 1707.31,1207.36 1707.9,1207.36 1708.49,1207.36 1709.07,1207.36 1709.66,1207.36 1710.24,1207.36 1710.83,1207.36 1711.42,1207.36 1712,1207.36 1712.59,1207.36 1713.18,1207.36 1713.76,1207.36 1714.35,1207.36 1714.94,1207.36 1715.52,1207.36 1716.11,1207.36 1716.7,1207.36 1717.28,1207.36 1717.87,1207.36 1718.45,1207.36 1719.04,1207.36 1719.63,1207.36 1720.21,1207.36 1720.8,1207.36 1721.39,1207.36 1721.97,1207.36 1722.56,1207.36 1723.15,1207.36 1723.73,1207.36 1724.32,1207.36 1724.91,1207.36 1725.49,1207.36 1726.08,1207.36 1726.66,1207.36 1727.25,1207.36 1727.84,1207.36 1728.42,1207.36 1729.01,1207.36 1729.6,1207.36 1730.18,1207.36 1730.77,1207.36 1731.36,1207.36 1731.94,1207.36 1732.53,1207.36 1733.11,1207.36 1733.7,1207.36 1734.29,1207.36 1734.87,1207.36 1735.46,1207.36 1736.05,1207.36 1736.63,1207.36 1737.22,1207.36 1737.81,1207.36 1738.39,1207.36 1738.98,1207.36 1739.57,1207.36 1740.15,1207.36 1740.74,1207.36 1741.32,1207.36 1741.91,1207.36 1742.5,1207.36 1743.08,1207.36 1743.67,1207.36 1744.26,1207.36 1744.84,1207.36 1745.43,1207.36 1746.02,1207.36 1746.6,1207.36 1747.19,1207.36 1747.78,1207.36 1748.36,1207.36 1748.95,1207.36 1749.53,1207.36 1750.12,1207.36 1750.71,1207.36 1751.29,1207.36 1751.88,1207.36 1752.47,1207.36 1753.05,1207.36 1753.64,1207.36 1754.23,1207.36 1754.81,1207.36 1755.4,1207.36 1755.99,1207.36 1756.57,1207.36 1757.16,1207.36 1757.74,1207.36 1758.33,1207.36 1758.92,1207.36 1759.5,1207.36 1760.09,1207.36 1760.68,1207.36 1761.26,1207.36 1761.85,1207.36 1762.44,1207.36 1763.02,1207.36 1763.61,1207.36 1764.19,1207.36 1764.78,1207.36 1765.37,1207.36 1765.95,1207.36 1766.54,1207.36 1767.13,1207.36 1767.71,1207.36 1768.3,1207.36 1768.89,1207.36 1769.47,1207.36 1770.06,1207.36 1770.65,1207.36 1771.23,1207.36 1771.82,1207.36 1772.4,1207.36 1772.99,1207.36 1773.58,1207.36 1774.16,1207.36 1774.75,1207.36 1775.34,1207.36 1775.92,1207.36 1776.51,1207.36 1777.1,1207.36 1777.68,1207.36 1778.27,1207.36 1778.86,1207.36 1779.44,1207.36 1780.03,1207.36 1780.61,1207.36 1781.2,1207.36 1781.79,1207.36 1782.37,1207.36 1782.96,1207.36 1783.55,1207.36 1784.13,1207.36 1784.72,1207.36 1785.31,1207.36 1785.89,1207.36 1786.48,1207.36 1787.06,1207.36 1787.65,1207.36 1788.24,1207.36 1788.82,1207.36 1789.41,1207.36 1790,1207.36 1790.58,1207.36 1791.17,1207.36 1791.76,1207.36 1792.34,1207.36 1792.93,1207.36 1793.52,1207.36 1794.1,1207.36 1794.69,1207.36 1795.27,1207.36 1795.86,1207.36 1796.45,1207.36 1797.03,1207.36 1797.62,1207.36 1798.21,1207.36 1798.79,1207.36 1799.38,1207.36 1799.97,1207.36 1800.55,1207.36 1801.14,1207.36 1801.73,1207.36 1802.31,1207.36 1802.9,1207.36 1803.48,1207.36 1804.07,1207.36 1804.66,1207.36 1805.24,1207.36 1805.83,1207.36 1806.42,1207.36 1807,1207.36 1807.59,1207.36 1808.18,1207.36 1808.76,1207.36 1809.35,1207.36 1809.94,1207.36 1810.52,1207.36 1811.11,1207.36 1811.69,1207.36 1812.28,1207.36 1812.87,1207.36 1813.45,1207.36 1814.04,1207.36 1814.63,1207.36 1815.21,1207.36 1815.8,1207.36 1816.39,1207.36 1816.97,1207.36 1817.56,1207.36 1818.14,1207.36 1818.73,1207.36 1819.32,1207.36 1819.9,1207.36 1820.49,1207.36 1821.08,1207.36 1821.66,1207.36 1822.25,1207.36 1822.84,1207.36 1823.42,1207.36 1824.01,1207.36 1824.6,1207.36 1825.18,1207.36 1825.77,1207.36 1826.35,1207.36 1826.94,1207.36 1827.53,1207.36 1828.11,1207.36 1828.7,1207.36 1829.29,1207.36 1829.87,1207.36 1830.46,1207.36 1831.05,1207.36 1831.63,1207.36 1832.22,1207.36 1832.81,1207.36 1833.39,1207.36 1833.98,1207.36 1834.56,1207.36 1835.15,1207.36 1835.74,1207.36 1836.32,1207.36 1836.91,1207.36 1837.5,1207.36 1838.08,1207.36 1838.67,1207.36 1839.26,1207.36 1839.84,1207.36 1840.43,1207.36 1841.01,1207.36 1841.6,1207.36 1842.19,1207.36 1842.77,1207.36 1843.36,1207.36 1843.95,1207.36 1844.53,1207.36 1845.12,1207.36 1845.71,1207.36 1846.29,1207.36 1846.88,1207.36 1847.47,1207.36 1848.05,1207.36 1848.64,1207.36 1849.22,1207.36 1849.81,1207.36 1850.4,1207.36 1850.98,1207.36 1851.57,1207.36 1852.16,1207.36 1852.74,1207.36 1853.33,1207.36 1853.92,1207.36 1854.5,1207.36 1855.09,1207.36 1855.68,1207.36 1856.26,1207.36 1856.85,1207.36 1857.43,1207.36 1858.02,1207.36 1858.61,1207.36 1859.19,1207.36 1859.78,1207.36 1860.37,1207.36 1860.95,1207.36 1861.54,1207.36 1862.13,1207.36 1862.71,1207.36 1863.3,1207.36 1863.88,1207.36 1864.47,1207.36 1865.06,1207.36 1865.64,1207.36 1866.23,1207.36 1866.82,1207.36 1867.4,1207.36 1867.99,1207.36 1868.58,1207.36 1869.16,1207.36 1869.75,1207.36 1870.34,1207.36 1870.92,1207.36 1871.51,1207.36 1872.09,1207.36 1872.68,1207.36 1873.27,1207.36 1873.85,1207.36 1874.44,1207.36 1875.03,1207.36 1875.61,1207.36 1876.2,1207.36 1876.79,1207.36 1877.37,1207.36 1877.96,1207.36 1878.55,1207.36 1879.13,1207.36 1879.72,1207.36 1880.3,1207.36 1880.89,1207.36 1881.48,1207.36 1882.06,1207.36 1882.65,1207.36 1883.24,1207.36 1883.82,1207.36 1884.41,1207.36 1885,1207.36 1885.58,1207.36 1886.17,1207.36 1886.76,1207.36 1887.34,1207.36 1887.93,1207.36 1888.51,1207.36 1889.1,1207.36 1889.69,1207.36 1890.27,1207.36 1890.86,1207.36 1891.45,1207.36 1892.03,1207.36 1892.62,1207.36 1893.21,1207.36 1893.79,1207.36 1894.38,1207.36 1894.96,1207.36 1895.55,1207.36 1896.14,1207.36 1896.72,1207.36 1897.31,1207.36 1897.9,1207.36 1898.48,1207.36 1899.07,1207.36 1899.66,1207.36 1900.24,1207.36 1900.83,1207.36 1901.42,1207.36 1902,1207.36 1902.59,1207.36 1903.17,1207.36 1903.76,1207.36 1904.35,1207.36 1904.93,1207.36 1905.52,1207.36 1906.11,1207.36 1906.69,1207.36 1907.28,1207.36 1907.87,1207.36 1908.45,1207.36 1909.04,1207.36 1909.63,1207.36 1910.21,1207.36 1910.8,1207.36 1911.38,1207.36 1911.97,1207.36 1912.56,1207.36 1913.14,1207.36 1913.73,1207.36 1914.32,1207.36 1914.9,1207.36 1915.49,1207.36 1916.08,1207.36 1916.66,1207.36 1917.25,1207.36 1917.83,1207.36 1918.42,1207.36 1919.01,1207.36 1919.59,1207.36 1920.18,1207.36 1920.77,1207.36 1921.35,1207.36 1921.94,1207.36 1922.53,1207.36 1923.11,1207.36 1923.7,1207.36 1924.29,1207.36 1924.87,1207.36 1925.46,1207.36 1926.04,1207.36 1926.63,1207.36 1927.22,1207.36 1927.8,1207.36 1928.39,1207.36 1928.98,1207.36 1929.56,1207.36 1930.15,1207.36 1930.74,1207.36 1931.32,1207.36 1931.91,1207.36 1932.5,1207.36 1933.08,1207.36 1933.67,1207.36 1934.25,1207.36 1934.84,1207.36 1935.43,1207.36 1936.01,1207.36 1936.6,1207.36 1937.19,1207.36 1937.77,1207.36 1938.36,1207.36 1938.95,1207.36 1939.53,1207.36 1940.12,1207.36 1940.71,1207.36 1941.29,1207.36 1941.88,1207.36 1942.46,1207.36 1943.05,1207.36 1943.64,1207.36 1944.22,1207.36 1944.81,1207.36 1945.4,1207.36 1945.98,1207.36 1946.57,1207.36 1947.16,1207.36 1947.74,1207.36 1948.33,1207.36 1948.91,1207.36 1949.5,1207.36 1950.09,1207.36 1950.67,1207.36 1951.26,1207.36 1951.85,1207.36 1952.43,1207.36 1953.02,1207.36 1953.61,1207.36 1954.19,1207.36 1954.78,1207.36 1955.37,1207.36 1955.95,1207.36 1956.54,1207.36 1957.12,1207.36 1957.71,1207.36 1958.3,1207.36 1958.88,1207.36 1959.47,1207.36 1960.06,1207.36 1960.64,1207.36 1961.23,1207.36 1961.82,1207.36 1962.4,1207.36 1962.99,1207.36 1963.58,1207.36 1964.16,1207.36 1964.75,1207.36 1965.33,1207.36 1965.92,1207.36 1966.51,1207.36 1967.09,1207.36 1967.68,1207.36 1968.27,1207.36 1968.85,1207.36 1969.44,1207.36 1970.03,1207.36 1970.61,1207.36 1971.2,1207.36 1971.78,1207.36 1972.37,1207.36 1972.96,1207.36 1973.54,1207.36 1974.13,1207.36 1974.72,1207.36 1975.3,1207.36 1975.89,1207.36 1976.48,1207.36 1977.06,1207.36 1977.65,1207.36 1978.24,1207.36 1978.82,1207.36 1979.41,1207.36 1979.99,1207.36 1980.58,1207.36 1981.17,1207.36 1981.75,1207.36 1982.34,1207.36 1982.93,1207.36 1983.51,1207.36 1984.1,1207.36 1984.69,1207.36 1985.27,1207.36 1985.86,1207.36 1986.45,1207.36 1987.03,1207.36 1987.62,1207.36 1988.2,1207.36 1988.79,1207.36 1989.38,1207.36 1989.96,1207.36 1990.55,1207.36 1991.14,1207.36 1991.72,1207.36 1992.31,1207.36 1992.9,1207.36 1993.48,1207.36 1994.07,1207.36 1994.65,1207.36 1995.24,1207.36 1995.83,1207.36 1996.41,1207.36 1997,1207.36 1997.59,1207.36 1998.17,1207.36 1998.76,1207.36 1999.35,1207.36 1999.93,1207.36 2000.52,1207.36 2001.11,1207.36 2001.69,1207.36 2002.28,1207.36 2002.86,1207.36 2003.45,1207.36 2004.04,1207.36 2004.62,1207.36 2005.21,1207.36 2005.8,1207.36 2006.38,1207.36 2006.97,1207.36 2007.56,1207.36 2008.14,1207.36 2008.73,1207.36 2009.32,1207.36 2009.9,1207.36 2010.49,1207.36 2011.07,1207.36 2011.66,1207.36 2012.25,1207.36 2012.83,1207.36 2013.42,1207.36 2014.01,1207.36 2014.59,1207.36 2015.18,1207.36 2015.77,1207.36 2016.35,1207.36 2016.94,1207.36 2017.53,1207.36 2018.11,1207.36 2018.7,1207.36 2019.28,1207.36 2019.87,1207.36 2020.46,1207.36 2021.04,1207.36 2021.63,1207.36 2022.22,1207.36 2022.8,1207.36 2023.39,1207.36 2023.98,1207.36 2024.56,1207.36 2025.15,1207.36 2025.73,1207.36 2026.32,1207.36 2026.91,1207.36 2027.49,1207.36 2028.08,1207.36 2028.67,1207.36 2029.25,1207.36 2029.84,1207.36 2030.43,1207.36 2031.01,1207.36 2031.6,1207.36 2032.19,1207.36 2032.77,1207.36 2033.36,1207.36 2033.94,1207.36 2034.53,1207.36 2035.12,1207.36 2035.7,1207.36 2036.29,1207.36 2036.88,1207.36 2037.46,1207.36 2038.05,1207.36 2038.64,1207.36 2039.22,1207.36 2039.81,1207.36 2040.4,1207.36 2040.98,1207.36 2041.57,1207.36 2042.15,1207.36 2042.74,1207.36 2043.33,1207.36 2043.91,1207.36 2044.5,1207.36 2045.09,1207.36 2045.67,1207.36 2046.26,1207.36 2046.85,1207.36 2047.43,1207.36 2048.02,1207.36 2048.6,1207.36 2049.19,1207.36 2049.78,1207.36 2050.36,1207.36 2050.95,1207.36 2051.54,1207.36 2052.12,1207.36 2052.71,1207.36 2053.3,1207.36 2053.88,1207.36 2054.47,1207.36 2055.06,1207.36 2055.64,1207.36 2056.23,1207.36 2056.81,1207.36 2057.4,1207.36 2057.99,1207.36 2058.57,1207.36 2059.16,1207.36 2059.75,1207.36 2060.33,1207.36 2060.92,1207.36 2061.51,1207.36 2062.09,1207.36 2062.68,1207.36 2063.27,1207.36 2063.85,1207.36 2064.44,1207.36 2065.02,1207.36 2065.61,1207.36 2066.2,1207.36 2066.78,1207.36 2067.37,1207.36 2067.96,1207.36 2068.54,1207.36 2069.13,1207.36 2069.72,1207.36 2070.3,1207.36 2070.89,1207.36 2071.48,1207.36 2072.06,1207.36 2072.65,1207.36 2073.23,1207.36 2073.82,1207.36 2074.41,1207.36 2074.99,1207.36 2075.58,1207.36 2076.17,1207.36 2076.75,1207.36 2077.34,1207.36 2077.93,1207.36 2078.51,1207.36 2079.1,1207.36 2079.68,1207.36 2080.27,1207.36 2080.86,1207.36 2081.44,1207.36 2082.03,1207.36 2082.62,1207.36 2083.2,1207.36 2083.79,1207.36 2084.38,1207.36 2084.96,1207.36 2085.55,1207.36 2086.14,1207.36 2086.72,1207.36 2087.31,1207.36 2087.89,1207.36 2088.48,1207.36 2089.07,1207.36 2089.65,1207.36 2090.24,1207.36 2090.83,1207.36 2091.41,1207.36 2092,1207.36 2092.59,1207.36 2093.17,1207.36 2093.76,1207.36 2094.35,1207.36 2094.93,1207.36 2095.52,1207.36 2096.1,1207.36 2096.69,1207.36 2097.28,1207.36 2097.86,1207.36 2098.45,1207.36 2099.04,1207.36 2099.62,1207.36 2100.21,1207.36 2100.8,1207.36 2101.38,1207.36 2101.97,1207.36 2102.55,1207.36 2103.14,1207.36 2103.73,1207.36 2104.31,1207.36 2104.9,1207.36 2105.49,1207.36 2106.07,1207.36 2106.66,1207.36 2107.25,1207.36 2107.83,1207.36 2108.42,1207.36 2109.01,1207.36 2109.59,1207.36 2110.18,1207.36 2110.76,1207.36 2111.35,1207.36 2111.94,1207.36 2112.52,1207.36 2113.11,1207.36 2113.7,1207.36 2114.28,1207.36 2114.87,1207.36 2115.46,1207.36 2116.04,1207.36 2116.63,1207.36 2117.22,1207.36 2117.8,1207.36 2118.39,1207.36 2118.97,1207.36 2119.56,1207.36 2120.15,1207.36 2120.73,1207.36 2121.32,1207.36 2121.91,1207.36 2122.49,1207.36 2123.08,1207.36 2123.67,1207.36 2124.25,1207.36 2124.84,1207.36 2125.42,1207.36 2126.01,1207.36 2126.6,1207.36 2127.18,1207.36 2127.77,1207.36 2128.36,1207.36 2128.94,1207.36 2129.53,1207.36 2130.12,1207.36 2130.7,1207.36 2131.29,1207.36 2131.88,1207.36 2132.46,1207.36 2133.05,1207.36 2133.63,1207.36 2134.22,1207.36 2134.81,1207.36 2135.39,1207.36 2135.98,1207.36 2136.57,1207.36 2137.15,1207.36 2137.74,1207.36 2138.33,1207.36 2138.91,1207.36 2139.5,1207.36 2140.09,1207.36 2140.67,1207.36 2141.26,1207.36 2141.84,1207.36 2142.43,1207.36 2143.02,1207.36 2143.6,1207.36 2144.19,1207.36 2144.78,1207.36 2145.36,1207.36 2145.95,1207.36 2146.54,1207.36 2147.12,1207.36 2147.71,1207.36 2148.3,1207.36 2148.88,1207.36 2149.47,1207.36 2150.05,1207.36 2150.64,1207.36 2151.23,1207.36 2151.81,1207.36 2152.4,1207.36 2152.99,1207.36 2153.57,1207.36 2154.16,1207.36 2154.75,1207.36 2155.33,1207.36 2155.92,1207.36 2156.5,1207.36 2157.09,1207.36 2157.68,1207.36 2158.26,1207.36 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.32,1186.32 1400.5,899.083 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.78 985.439,1186.32 2158.26,1186.32 2158.26,1227.78 985.439,1227.78 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip653\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip653)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-4871.05 163.792,-5884.8 164.351,-6810.32 164.91,-7633.54 165.469,-7226.97 166.029,-6925.57 166.588,-7672.64 167.147,-8349.6 167.706,-8087.65 168.266,-6376.95 168.825,-7020.34 169.384,-7592.93 169.943,-8128.42 170.503,-7978.89 171.062,-7892.75 171.621,-8343.94 172.18,-8745.03 172.74,-8596.04 173.299,-8944.9 173.858,-9245.69 174.417,-9105.36 174.977,-9349.79 175.536,-9552.21 176.095,-9722.94 176.655,-9236.91 177.214,-8804.23 177.773,-8691.05 178.332,-8319.72 178.892,-8447.79 179.451,-8584.5 180.01,-8675.16 180.569,-8347.81 181.129,-8225.11 181.688,-8294.97 182.247,-8340.31 182.806,-8376.56 183.366,-8085.4 183.925,-7944.36 184.484,-7929.99 185.043,-7917.8 185.603,-7639.25 186.162,-7620.98 186.721,-7478.56 187.28,-7446.72 187.84,-7397 188.399,-7228.44 188.958,-6868.16 189.517,-6731.52 190.077,-6683.02 190.636,-6536.02 191.195,-6309.37 191.754,-6169.38 192.314,-6037.57 192.873,-5910.22 193.432,-5709.82 193.991,-5643.16 194.551,-5583.53 195.11,-5403.98 195.669,-5287.9 196.228,-4991.87 196.788,-4759.82 197.347,-4707 197.906,-4644.28 198.465,-4363.46 199.025,-4253.03 199.584,-4006.15 200.143,-3865.82 200.702,-3805.16 201.262,-3700.9 201.821,-3604.03 202.38,-3505.71 202.939,-3409.32 203.499,-3274.14 204.058,-3143.52 204.617,-3056.34 205.176,-2928.06 205.736,-2840.81 206.295,-2718.44 206.854,-2564.17 207.413,-2481.43 207.973,-2372.99 208.532,-2267.4 209.091,-2194.35 209.65,-2086.49 210.21,-2018.19 210.769,-1890.01 211.328,-1707.48 211.887,-1559.7 212.447,-1471.03 213.006,-1391.02 213.565,-1306.78 214.124,-1173.76 214.684,-1101.56 215.243,-1051.59 215.802,-1030 216.361,-950.452 216.921,-856.282 217.48,-763.078 218.039,-744.116 218.598,-649.053 219.158,-629.899 219.717,-537.209 220.276,-524.647 220.835,-483.089 221.395,-443.969 221.954,-424.769 222.513,-383.434 223.072,-342.217 223.632,-301.315 224.191,-238.911 224.75,-200.958 225.309,-161.996 225.869,-145.359 226.428,-129.548 226.987,-109.947 227.546,-91.4927 228.106,-72.1006 228.665,-27.2188 229.224,-6.79562 229.783,11.1554 230.343,51.2203 230.902,108.552 231.461,145.389 232.02,153.331 232.58,186.377 233.139,224.877 233.698,237.15 234.257,248.584 234.817,264.27 235.376,276.15 235.935,290.653 236.494,322.633 237.054,370.023 237.613,398.448 238.172,391.452 238.731,437.457 239.291,481.119 239.85,508.182 240.409,515.031 240.968,518.661 241.528,561.302 242.087,568.353 242.646,572.183 243.205,578.016 243.765,627.995 244.324,632.812 244.883,689.097 245.442,710.812 246.002,714.546 246.561,737.297 247.12,719.209 247.679,722.028 248.239,741.861 248.798,725.538 249.357,727.007 249.916,750.539 250.476,753.271 251.035,774.78 251.594,808.643 252.153,808.151 252.713,840.697 253.272,819.304 253.831,805.168 254.39,805.099 254.95,821.475 255.509,822.36 256.068,824.304 256.627,822.633 257.187,841.965 257.746,859.927 258.305,844.374 258.864,877.278 259.424,926.523 259.983,935.618 260.542,946.313 261.101,974.65 261.661,983.354 262.22,975.385 262.779,972.205 263.338,982.111 263.898,993.993 264.457,1003.34 265.016,994.009 265.575,1018.98 266.135,1007.62 266.694,964.917 267.253,960.91 267.812,938.225 268.372,920.754 268.931,916.895 269.49,913.293 270.049,926.896 270.609,921.714 271.168,936.927 271.727,934.353 272.286,963.836 272.846,977.223 273.405,992.688 273.964,991.189 274.523,988.109 275.083,999.704 275.642,1026.95 276.201,1019.83 276.76,994.717 277.32,991.195 277.879,1000.83 278.438,996.487 278.997,990.74 279.557,1019 280.116,1008.01 280.675,984.532 281.234,998.613 281.794,990.51 282.353,968.905 282.912,1007.19 283.471,980.655 284.031,1010.89 284.59,1006.14 285.149,980.995 285.708,942.205 286.268,973.173 286.827,986.029 287.386,961.136 287.945,924.944 288.505,940.397 289.064,936.599 289.623,934.927 290.182,947.249 290.742,948.002 291.301,930.679 291.86,1009.17 292.419,1004.82 292.979,996.728 293.538,957.451 294.097,953.912 294.656,931.135 295.216,913.798 295.775,926.73 296.334,891.461 296.893,923.612 297.453,952.982 298.012,931.239 298.571,913.914 299.13,897.383 299.69,882.685 300.249,898.583 300.808,915.802 301.368,882.51 301.927,836.402 302.486,854.774 303.045,890.908 303.605,904.542 304.164,889.878 304.723,854.165 305.282,872.85 305.842,868.896 306.401,903.444 306.96,918.721 307.519,896.341 308.079,877.417 308.638,881.786 309.197,899.357 309.756,896.063 310.316,877.652 310.875,908.28 311.434,921.004 311.993,950.205 312.553,965.347 313.112,975.155 313.671,966.992 314.23,1009.22 314.79,1002.15 315.349,1009.57 315.908,1035.78 316.467,1028.26 317.027,1017.89 317.586,1025.8 318.145,1067.97 318.704,1059.28 319.264,1046.69 319.823,1116.68 320.382,1138.81 320.941,1090.89 321.501,1094.17 322.06,1066.41 322.619,1055.32 323.178,1041.66 323.738,1062.77 324.297,1053.25 324.856,1028.84 325.415,1070.12 325.975,1090.69 326.534,1124.16 327.093,1107.94 327.652,1059.25 328.212,1047.67 328.771,1002.57 329.33,995.219 329.889,955.175 330.449,949.278 331.008,971.863 331.567,980.433 332.126,1022.37 332.686,965.237 333.245,972.923 333.804,997.758 334.363,1004.19 334.923,992.594 335.482,969.829 336.041,928.396 336.6,905.901 337.16,915.302 337.719,924.783 338.278,917.171 338.837,940.59 339.397,948.94 339.956,927.392 340.515,935.25 341.074,946.972 341.634,937.053 342.193,949.525 342.752,945.993 343.311,938.05 343.871,966.383 344.43,923.988 344.989,982.857 345.548,954.568 346.108,948.683 346.667,889.898 347.226,889.793 347.785,873.36 348.345,899.784 348.904,845.413 349.463,858.366 350.022,836.937 350.582,815.011 351.141,796.999 351.7,813.283 352.259,828.389 352.819,808.428 353.378,787.47 353.937,785.022 354.496,803.547 355.056,785.264 355.615,821.559 356.174,822.765 356.733,807.345 357.293,789.245 357.852,772.033 358.411,773.966 358.97,773.856 359.53,790.672 360.089,771.886 360.648,756.158 361.207,789.699 361.767,790.329 362.326,806.028 362.885,804.845 363.444,806.979 364.004,803.621 364.563,785.42 365.122,804.776 365.681,770.823 366.241,757.255 366.8,781.723 367.359,800.147 367.918,783.593 368.478,782.217 369.037,780.499 369.596,782.977 370.155,769.882 370.715,791.598 371.274,807.976 371.833,826.395 372.392,792.857 372.952,761.847 373.511,748.543 374.07,733.238 374.629,717.917 375.189,740.277 375.748,725.34 376.307,761.461 376.866,744.53 377.426,745.804 377.985,762.331 378.544,779.137 379.103,746.585 379.663,766.469 380.222,784.372 380.781,755.436 381.34,756.998 381.9,773.273 382.459,807.673 383.018,790.391 383.577,804.418 384.137,798.347 384.696,791.932 385.255,790.853 385.814,806.036 386.374,835.154 386.933,830.492 387.492,812.163 388.051,814.205 388.611,830.282 389.17,811.131 389.729,823.924 390.288,839.317 390.848,834.759 391.407,830.385 391.966,840.178 392.525,838.698 393.085,852.01 393.644,798.008 394.203,798.18 394.762,780.017 395.322,760.852 395.881,776.992 396.44,808.916 396.999,838.667 397.559,834.82 398.118,831.524 398.677,760.321 399.236,791.094 399.796,825.429 400.355,820.175 400.914,836.111 401.473,837.922 402.033,820.226 402.592,782.891 403.151,798.609 403.71,813.625 404.27,798.066 404.829,798.144 405.388,799.037 405.947,831.472 406.507,846.554 407.066,812.223 407.625,822.25 408.184,818.854 408.744,815.898 409.303,844.833 409.862,857.807 410.421,868.056 410.981,846.12 411.54,844.274 412.099,872.033 412.658,833.863 413.218,814.602 413.777,816.468 414.336,814.963 414.895,812.432 415.455,827.534 416.014,806.674 416.573,821.918 417.132,838.304 417.692,816.54 418.251,817.069 418.81,850.146 419.369,832.743 419.929,843.894 420.488,823.503 421.047,806.151 421.606,771.712 422.166,772.861 422.725,755.673 423.284,754.012 423.843,738.957 424.403,789.811 424.962,807.584 425.521,820.715 426.08,784.21 426.64,768.994 427.199,788.184 427.758,768.614 428.318,746.802 428.877,792.004 429.436,791.071 429.995,774.024 430.555,785.765 431.114,818.676 431.673,816.008 432.232,797.389 432.792,791.232 433.351,804.657 433.91,816.091 434.469,846.497 435.029,839.544 435.588,804.351 436.147,818.079 436.706,811.683 437.266,806.149 437.825,770.666 438.384,767.911 438.943,737.345 439.503,785.928 440.062,767.622 440.621,762.546 441.18,743.147 441.74,758.451 442.299,759.979 442.858,745.097 443.417,729.914 443.977,746.244 444.536,729.007 445.095,699.313 445.654,721.122 446.214,736.953 446.773,737.561 447.332,750.583 447.891,782.199 448.451,750.652 449.01,770.221 449.569,767.956 450.128,800.441 450.688,797.29 451.247,793.327 451.806,774.566 452.365,757.235 452.925,771.319 453.484,803.174 454.043,796.746 454.602,810.903 455.162,824.855 455.721,818.283 456.28,814.929 456.839,827.688 457.399,792.549 457.958,805.99 458.517,800.119 459.076,827.331 459.636,840.837 460.195,837.212 460.754,815.968 461.313,846.984 461.873,793.99 462.432,791.355 462.991,785.06 463.55,801.055 464.11,799.541 464.669,780.043 465.228,758.916 465.787,791.992 466.347,833.871 466.906,842.662 467.465,834.59 468.024,831.057 468.584,856.201 469.143,864.99 469.702,839.318 470.261,832.045 470.821,811.454 471.38,804.939 471.939,832.711 472.498,857.721 473.058,850.939 473.617,874.043 474.176,820.383 474.735,797.973 475.295,775.464 475.854,772.101 476.413,768.713 476.972,766.725 477.532,782.109 478.091,778.914 478.65,760.381 479.209,774.604 479.769,805.549 480.328,803.671 480.887,796.389 481.446,774.52 482.006,755.583 482.565,722.45 483.124,737.477 483.683,719.482 484.243,702.814 484.802,720.587 485.361,703.138 485.92,686.812 486.48,655.451 487.039,659.482 487.598,664.648 488.157,666.911 488.717,671.558 489.276,674.032 489.835,677.885 490.394,682.686 490.954,686.048 491.513,689.365 492.072,688.785 492.631,694.528 493.191,730.134 493.75,709.808 494.309,695.547 494.868,700.13 495.428,717.39 495.987,701.716 496.546,752.391 497.105,766.728 497.665,782.179 498.224,761.369 498.783,741.946 499.342,725.194 499.902,771.679 500.461,755.057 501.02,736.181 501.579,765.485 502.139,748.818 502.698,727.734 503.257,739.716 503.816,723.05 504.376,722.314 504.935,706.545 505.494,693.546 506.053,694.143 506.613,679.957 507.172,699.822 507.731,702.116 508.29,669.035 508.85,655.339 509.409,675.483 509.968,679.869 510.527,664.981 511.087,668.759 511.646,705.964 512.205,689.908 512.764,675.082 513.324,695.533 513.883,714.226 514.442,697.682 515.001,714.427 515.561,683.486 516.12,652.398 516.679,659.225 517.238,663.861 517.798,666.351 518.357,652.896 518.916,639.35 519.475,661.051 520.035,698.211 520.594,698.42 521.153,667.09 521.712,687.248 522.272,706.079 522.831,706.383 523.39,721.609 523.949,741.008 524.509,756.802 525.068,802.988 525.627,815.865 526.186,812.084 526.746,819.761 527.305,794.54 527.864,787.219 528.423,784.708 528.983,781.657 529.542,780.53 530.101,731.838 530.66,729.294 531.22,715.208 531.779,730.65 532.338,729.896 532.897,729.392 533.457,712.313 534.016,712.966 534.575,714.229 535.134,713.857 535.694,747.656 536.253,745.993 536.812,760.214 537.371,758.73 537.931,771.302 538.49,754.653 539.049,753.624 539.608,730.643 540.168,713.317 540.727,696.823 541.286,713.414 541.845,747.613 542.405,742.998 542.964,710.115 543.523,696.366 544.082,695.714 544.642,679.118 545.201,696.026 545.76,680.991 546.319,679.975 546.879,698.886 547.438,683.372 547.997,700.976 548.556,717.573 549.116,715.262 549.675,750.598 550.234,749.321 550.793,746.652 551.353,712.156 551.912,695.799 552.471,711.525 553.031,708.836 553.59,745.381 554.149,714.303 554.708,704.312 555.268,686.557 555.827,705.374 556.386,704.85 556.945,706.104 557.505,705.134 558.064,706.182 558.623,743.68 559.182,724.515 559.742,755.341 560.301,753.479 560.86,718.305 561.419,752.334 561.979,723.151 562.538,706.791 563.097,692.301 563.656,708.335 564.216,710.054 564.775,698.057 565.334,732.668 565.893,748.256 566.453,747.945 567.012,747.598 567.571,748.533 568.13,747.066 568.69,727.871 569.249,727.235 569.808,695.538 570.367,695.379 570.927,728.739 571.486,727.837 572.045,744.378 572.604,762.278 573.164,777.017 573.723,773.774 574.282,754.665 574.841,735.371 575.401,736.427 575.96,736.866 576.519,734.988 577.078,737.33 577.638,770.007 578.197,755.015 578.756,784.865 579.315,764.752 579.875,777.646 580.434,787.768 580.993,797.759 581.552,775.176 582.112,752.561 582.671,765.494 583.23,744.745 583.789,763.404 584.349,759.733 584.908,755.029 585.467,732.29 586.026,766.252 586.586,813.355 587.145,803.659 587.704,811.281 588.263,805.679 588.823,781.549 589.382,758.735 589.941,772.688 590.5,785.906 591.06,799.829 591.619,790.719 592.178,816.191 592.737,823.816 593.297,818.543 593.856,798.823 594.415,780.128 594.974,744.1 595.534,725.804 596.093,740.624 596.652,751.33 597.211,746.445 597.771,760.723 598.33,740.719 598.889,706.161 599.448,705.939 600.008,705.2 600.567,723.637 601.126,737.514 601.685,735.419 602.245,748.31 602.804,760.781 603.363,751.739 603.922,752.043 604.482,768.622 605.041,764.22 605.6,775.451 606.159,741.464 606.719,721.798 607.278,753.58 607.837,755.232 608.396,736.555 608.956,750.536 609.515,749.343 610.074,713.024 610.633,667.018 611.193,632.36 611.752,636.926 612.311,638.086 612.87,658.046 613.43,627.411 613.989,617.967 614.548,603.069 615.107,593.784 615.667,614.969 616.226,600.707 616.785,607.377 617.344,565.579 617.904,635.573 618.463,685.386 619.022,675.6 619.581,648.877 620.141,666.94 620.7,671.479 621.259,673.522 621.818,644.707 622.378,642.709 622.937,647.182 623.496,667.169 624.055,636.73 624.615,658.038 625.174,630.775 625.733,651.098 626.292,669.311 626.852,637.953 627.411,626.44 627.97,631.312 628.529,671.303 629.089,673.335 629.648,689.275 630.207,658.162 630.766,663.241 631.326,679.111 631.885,697.1 632.444,731.229 633.003,727.68 633.563,728.303 634.122,682.735 634.681,666.409 635.24,654.117 635.8,657.898 636.359,659.149 636.918,631.283 637.477,622.785 638.037,640.59 638.596,662.576 639.155,650.541 639.714,670.629 640.274,716.125 640.833,746.86 641.392,726.272 641.951,738.815 642.511,719.748 643.07,686.65 643.629,688.542 644.188,703.777 644.748,657.143 645.307,657.63 645.866,643.787 646.425,633.877 646.985,621.225 647.544,611.168 648.103,596.941 648.662,621.237 649.222,630.669 649.781,651.375 650.34,654.222 650.899,658.837 651.459,679.181 652.018,633.139 652.577,586.83 653.136,595.722 653.696,597.231 654.255,617.353 654.814,636.03 655.373,656.662 655.933,687.128 656.492,719.893 657.051,712.251 657.61,700.344 658.17,701.371 658.729,702.888 659.288,738.032 659.847,736.003 660.407,700.957 660.966,712.681 661.525,680.519 662.084,681.46 662.644,699.333 663.203,711.873 663.762,651.578 664.321,667.126 664.881,670.424 665.44,686.854 665.999,671.957 666.558,653.022 667.118,654.078 667.677,672.159 668.236,703.565 668.795,732.556 669.355,728.356 669.914,724.456 670.473,753.482 671.032,752.22 671.592,749.942 672.151,732.021 672.71,762.352 673.269,743.396 673.829,757.336 674.388,722.084 674.947,734.7 675.506,750.458 676.066,748.175 676.625,727.164 677.184,707.863 677.743,706.909 678.303,704.997 678.862,703.706 679.421,686.461 679.981,684.011 680.54,651.21 681.099,669.538 681.658,686.425 682.218,722.04 682.777,669.823 683.336,669.196 683.895,688.125 684.455,704.708 685.014,705.147 685.573,653.224 686.132,671.692 686.692,654.954 687.251,670.266 687.81,671.379 688.369,687.691 688.929,720.101 689.488,767.536 690.047,751.866 690.606,730.129 691.166,745.418 691.725,760.713 692.284,725.86 692.843,709.362 693.403,725.018 693.962,738.662 694.521,706.164 695.08,690.23 695.64,659.976 696.199,662.622 696.758,634.338 697.317,639.341 697.877,658.448 698.436,691.22 698.995,691.506 699.554,692.12 700.114,707.718 700.673,705.854 701.232,707.831 701.791,706.314 702.351,723.071 702.91,719.332 703.469,699.629 704.028,683.79 704.588,682.569 705.147,663.253 705.706,682.146 706.265,679.636 706.825,664.121 707.384,664.105 707.943,666.788 708.502,666.591 709.062,684.614 709.621,684.648 710.18,702.485 710.739,670.767 711.299,686.137 711.858,687.185 712.417,704.746 712.976,715.95 713.536,731.615 714.095,681.181 714.654,650.435 715.213,683.955 715.773,703.03 716.332,719.962 716.891,733.668 717.45,680.896 718.01,685.382 718.569,687.47 719.128,722.981 719.687,735.44 720.247,734.143 720.806,747.45 721.365,729.691 721.924,710.874 722.484,726.376 723.043,706.834 723.602,704.848 724.161,705.063 724.721,674.359 725.28,706.946 725.839,706.004 726.398,720.305 726.958,718.866 727.517,701.228 728.076,685.263 728.635,683.831 729.195,667.885 729.754,667.385 730.313,668.943 730.872,682.106 731.432,698.391 731.991,684.401 732.55,688.151 733.109,673.624 733.669,689.695 734.228,655.084 734.787,608.843 735.346,642.584 735.906,644.427 736.465,633.637 737.024,619.989 737.583,607.648 738.143,631.136 738.702,637.271 739.261,604.41 739.82,595.482 740.38,647.732 740.939,647.215 741.498,661.955 742.057,691.741 742.617,640.022 743.176,612.56 743.735,587.083 744.294,573.38 744.854,628.918 745.413,667.009 745.972,654.777 746.531,674.858 747.091,642.382 747.65,662.747 748.209,696.798 748.768,683.042 749.328,716.476 749.887,730.724 750.446,746.593 751.005,775.643 751.565,799.642 752.124,792.999 752.683,786.515 753.242,763.713 753.802,741.026 754.361,737.441 754.92,737.763 755.479,718.923 756.039,714.839 756.598,711.392 757.157,709.032 757.716,706.77 758.276,737.453 758.835,781.35 759.394,776.775 759.953,803.274 760.513,891.224 761.072,878.825 761.631,854.785 762.19,874.467 762.75,849.489 763.309,874.557 763.868,897.639 764.427,856.113 764.987,865.632 765.546,839.448 766.105,811.573 766.664,803.585 767.224,797.44 767.783,811.541 768.342,806.644 768.901,799.919 769.461,771.868 770.02,778.484 770.579,771.859 771.138,784.936 771.698,748.286 772.257,762.553 772.816,743.996 773.375,723.53 773.935,755.57 774.494,767.122 775.053,792.302 775.612,769.68 776.172,748.23 776.731,749.629 777.29,733.361 777.849,729.82 778.409,738.792 778.968,748.884 779.527,713.028 780.086,711.288 780.646,706.395 781.205,707.551 781.764,705.458 782.323,716.953 782.883,712.579 783.442,726.574 784.001,706.673 784.56,706.875 785.12,706 785.679,717.891 786.238,684.207 786.797,651.297 787.357,633.587 787.916,667.301 788.475,700.369 789.034,700.816 789.594,655.731 790.153,674.192 790.712,662.024 791.271,676.506 791.831,630.057 792.39,597.344 792.949,603.031 793.508,577.67 794.068,634.118 794.627,590.359 795.186,597.708 795.745,588.419 796.305,590.362 796.864,592.365 797.423,579.732 797.982,603.09 798.542,577.005 799.101,567.663 799.66,590.399 800.219,612.571 800.779,619.622 801.338,655.525 801.897,659.929 802.456,627.633 803.016,616.268 803.575,638.101 804.134,673.602 804.693,705.863 805.253,739.597 805.812,720.132 806.371,702.877 806.931,670.394 807.49,686.126 808.049,684.272 808.608,668.96 809.168,672.571 809.727,673.811 810.286,674.852 810.845,647.603 811.405,697.096 811.964,764.071 812.523,761.757 813.082,789.255 813.642,799.992 814.201,757.95 814.76,740.723 815.319,742.218 815.879,724.346 816.438,689.121 816.997,690.915 817.556,692.03 818.116,709.702 818.675,729.041 819.234,677.575 819.793,613.169 820.353,587.684 820.912,594.559 821.471,614.328 822.03,635.004 822.59,590.418 823.149,648.085 823.708,664.178 824.267,665.331 824.827,683.617 825.386,684.135 825.945,700.341 826.504,731.823 827.064,715.405 827.623,701.38 828.182,766.239 828.741,778.064 829.301,789.992 829.86,771.081 830.419,798.088 830.978,790.816 831.538,767.974 832.097,761.321 832.656,741.471 833.215,738.19 833.775,735.839 834.334,730.02 834.893,757.742 835.452,753.935 836.012,700.69 836.571,651.25 837.13,671.061 837.689,672.96 838.249,688.628 838.808,670.816 839.367,637.953 839.926,654.555 840.486,629.942 841.045,598.366 841.604,621.781 842.163,640.441 842.723,595.611 843.282,600.497 843.841,604.907 844.4,573.385 844.96,630.255 845.519,621.617 846.078,640.542 846.637,629.577 847.197,631.587 847.756,635.03 848.315,637.511 848.874,640.554 849.434,647.223 849.993,648.807 850.552,634.696 851.111,620.75 851.671,640.492 852.23,644.885 852.789,649.265 853.348,647.738 853.908,667.469 854.467,699.393 855.026,697.422 855.585,726.391 856.145,677.502 856.704,660.8 857.263,666.13 857.822,699.932 858.382,705.494 858.941,702.32 859.5,703.013 860.059,687.207 860.619,703.082 861.178,705.317 861.737,721.75 862.296,719.177 862.856,702.016 863.415,703.164 863.974,685.765 864.533,686.515 865.093,704.173 865.652,690.598 866.211,676.349 866.77,660.961 867.33,728.234 867.889,711.219 868.448,678.424 869.007,695.485 869.567,711.819 870.126,711.788 870.685,719.103 871.244,703.729 871.804,670.416 872.363,668.947 872.922,705.075 873.481,689.716 874.041,687.634 874.6,706.744 875.159,718.285 875.718,733.26 876.278,749.023 876.837,730.719 877.396,712.409 877.955,737.94 878.515,732.811 879.074,695.851 879.633,677.956 880.192,677.482 880.752,693.89 881.311,725.12 881.87,738.173 882.429,736.828 882.989,702.042 883.548,670.294 884.107,673.219 884.666,674.246 885.226,675.198 885.785,693.077 886.344,707.801 886.903,720.964 887.463,719.813 888.022,684.734 888.581,685.581 889.14,732.116 889.7,677.728 890.259,677.228 890.818,677.333 891.377,678.359 891.937,665.213 892.496,683.638 893.055,681.787 893.614,714.563 894.174,747.411 894.733,744.074 895.292,744.105 895.851,710.221 896.411,726.914 896.97,713.048 897.529,727.535 898.088,691.734 898.648,691.721 899.207,705.938 899.766,703.981 900.325,700.046 900.885,685.529 901.444,665.971 902.003,618.785 902.562,657.259 903.122,625.218 903.681,600.889 904.24,605.69 904.799,641.76 905.359,629.647 905.918,613.894 906.477,586.773 907.036,608.468 907.596,592.927 908.155,598.969 908.714,607.161 909.273,610.095 909.833,618.265 910.392,656.425 910.951,673.172 911.51,658.31 912.07,690.883 912.629,693.859 913.188,642.712 913.747,644.784 914.307,662.84 914.866,664.863 915.425,664.836 915.984,707.059 916.544,708.158 917.103,708.134 917.662,711.326 918.221,713.04 918.781,806.155 919.34,814.397 919.899,853.942 920.458,844.893 921.018,789.949 921.577,800.046 922.136,777.55 922.695,755.905 923.255,751.23 923.814,732.27 924.373,728.191 924.932,709.182 925.492,729.044 926.051,728.986 926.61,726.752 927.169,706.861 927.729,692.459 928.288,693.764 928.847,726.295 929.406,729.03 929.966,728.294 930.525,746.493 931.084,739.509 931.644,706.088 932.203,749.34 932.762,733.284 933.321,747.031 933.881,729.165 934.44,723.315 934.999,735.871 935.558,731.56 936.118,698.999 936.677,698.528 937.236,730.007 937.795,708.986 938.355,657.694 938.914,676.795 939.473,646.44 940.032,612.669 940.592,615.201 941.151,599.042 941.71,604.655 942.269,595.203 942.829,587.613 943.388,591.006 943.947,594.465 944.506,564.909 945.066,584.362 945.625,604.72 946.184,644.845 946.743,661.775 947.303,678.611 947.862,682.249 948.421,697.397 948.98,711.473 949.54,713.252 950.099,710.346 950.658,738.294 951.217,753.498 951.777,740.205 952.336,740.156 952.895,739.291 953.454,737.527 954.014,751.292 954.573,750.598 955.132,730.903 955.691,726.893 956.251,693.108 956.81,692.901 957.369,674.667 957.928,643.285 958.488,628.201 959.047,615.863 959.606,650.575 960.165,684.308 960.725,700.203 961.284,712.89 961.843,696.448 962.402,661.68 962.962,629.466 963.521,662.328 964.08,676.95 964.639,711.184 965.199,696.493 965.758,710.64 966.317,709.533 966.876,708.289 967.436,692.623 967.995,708.532 968.554,706.507 969.113,686.784 969.673,703.086 970.232,699.728 970.791,682.912 971.35,684.485 971.91,699.584 972.469,669.933 973.028,654.73 973.587,656.651 974.147,674.604 974.706,704.63 975.265,691.415 975.824,704.61 976.384,702.695 976.943,684.824 977.502,715.498 978.061,717.295 978.621,714.761 979.18,696.928 979.739,708.637 980.298,707.198 980.858,723.378 981.417,706.431 981.976,702.992 982.535,717.965 983.095,667.025 983.654,652.81 984.213,657.362 984.772,623.095 985.332,608.645 985.891,611.537 986.45,613.103 987.009,571.223 987.569,594.326 988.128,602.248 988.687,640.921 989.246,659.939 989.806,694.914 990.365,709.215 990.924,723.196 991.483,736.571 992.043,750.803 992.602,713.36 993.161,711.67 993.72,723.004 994.28,733.551 994.839,746.742 995.398,743.344 995.957,704.547 996.517,707.469 997.076,688.06 997.635,672.028 998.194,689.465 998.754,718.663 999.313,698.403 999.872,633.299 1000.43,665.223 1000.99,670.055 1001.55,685.082 1002.11,669.488 1002.67,718.24 1003.23,734.498 1003.79,763.364 1004.35,774.112 1004.91,754.999 1005.46,703.502 1006.02,705.635 1006.58,705.785 1007.14,739.317 1007.7,717.829 1008.26,696.004 1008.82,695.968 1009.38,710.012 1009.94,708.928 1010.5,691.727 1011.06,679.324 1011.62,680.802 1012.18,681.079 1012.73,698.773 1013.29,742.409 1013.85,738.052 1014.41,768.795 1014.97,747.754 1015.53,726.63 1016.09,676.311 1016.65,707.89 1017.21,692.194 1017.77,691.152 1018.33,674.288 1018.89,676.661 1019.45,721.924 1020.01,703.674 1020.56,638.426 1021.12,609.591 1021.68,630.875 1022.24,635.755 1022.8,637.852 1023.36,653.872 1023.92,622.255 1024.48,609.93 1025.04,616.168 1025.6,570.179 1026.16,578.47 1026.72,601.286 1027.28,623.239 1027.83,662.485 1028.39,664.012 1028.95,664.461 1029.51,652.538 1030.07,623.73 1030.63,611.593 1031.19,631.1 1031.75,668.145 1032.31,685.779 1032.87,701.748 1033.43,702.339 1033.99,733.051 1034.55,731.53 1035.1,681.072 1035.66,682.726 1036.22,713.591 1036.78,696.68 1037.34,682.415 1037.9,682.723 1038.46,699.599 1039.02,709.321 1039.58,728.875 1040.14,728.695 1040.7,711.546 1041.26,690.903 1041.82,692.808 1042.38,673.8 1042.93,656.848 1043.49,657.808 1044.05,674.928 1044.61,657.997 1045.17,640.39 1045.73,644.205 1046.29,628.45 1046.85,632.984 1047.41,603.407 1047.97,592.17 1048.53,611.462 1049.09,615.248 1049.65,620.37 1050.2,652.522 1050.76,671.009 1051.32,687.68 1051.88,703.944 1052.44,685.165 1053,682.269 1053.56,682.863 1054.12,681.415 1054.68,681.408 1055.24,714.722 1055.8,712.449 1056.36,757.501 1056.92,755.358 1057.48,751.676 1058.03,760.915 1058.59,773.367 1059.15,733.989 1059.71,715.956 1060.27,717.311 1060.83,681.174 1061.39,677.189 1061.95,692.732 1062.51,692.109 1063.07,708.557 1063.63,712.411 1064.19,743.717 1064.75,756.394 1065.3,787.474 1065.86,794.599 1066.42,821.535 1066.98,797.25 1067.54,775.765 1068.1,805.084 1068.66,815.355 1069.22,807.996 1069.78,849.855 1070.34,842.511 1070.9,881.112 1071.46,859.456 1072.02,816.561 1072.57,793.659 1073.13,801.528 1073.69,782.004 1074.25,776.33 1074.81,719.409 1075.37,688.345 1075.93,693.266 1076.49,723.338 1077.05,754.496 1077.61,735.27 1078.17,714.829 1078.73,732.24 1079.29,729.274 1079.85,725.376 1080.4,721.877 1080.96,734.165 1081.52,747.341 1082.08,761.742 1082.64,746.384 1083.2,724.249 1083.76,724.34 1084.32,722.515 1084.88,639.811 1085.44,641.353 1086,661.592 1086.56,649.85 1087.12,666.22 1087.67,649.431 1088.23,666.678 1088.79,666.56 1089.35,666.233 1089.91,679.009 1090.47,711.229 1091.03,677.78 1091.59,675.299 1092.15,642.448 1092.71,597.133 1093.27,604.69 1093.83,611.526 1094.39,629.634 1094.94,645.826 1095.5,647.059 1096.06,633.613 1096.62,683.723 1097.18,681.546 1097.74,632.235 1098.3,636.354 1098.86,637.957 1099.42,674.365 1099.98,644.364 1100.54,646.396 1101.1,631.148 1101.66,599.444 1102.22,606.566 1102.77,645.888 1103.33,628.329 1103.89,613.966 1104.45,631.49 1105.01,637.273 1105.57,607.251 1106.13,607.33 1106.69,614.315 1107.25,649.934 1107.81,636.83 1108.37,656.169 1108.93,690.914 1109.49,703.568 1110.04,670.661 1110.6,658.606 1111.16,663.702 1111.72,693.997 1112.28,673.158 1112.84,628.229 1113.4,663.715 1113.96,699.544 1114.52,720.496 1115.08,705.293 1115.64,672.361 1116.2,673.726 1116.76,677.004 1117.31,692.962 1117.87,658.571 1118.43,661.921 1118.99,662.481 1119.55,665.495 1120.11,680.902 1120.67,711.473 1121.23,694.955 1121.79,692.838 1122.35,692.863 1122.91,693.832 1123.47,675.907 1124.03,657.285 1124.59,641.935 1125.14,628.913 1125.7,631.095 1126.26,649.234 1126.82,650.336 1127.38,654.175 1127.94,655.979 1128.5,656.818 1129.06,661.401 1129.62,662.542 1130.18,631.996 1130.74,651.917 1131.3,653.694 1131.86,650.523 1132.41,654.07 1132.97,622.079 1133.53,628.309 1134.09,632.563 1134.65,633.545 1135.21,700.684 1135.77,699.948 1136.33,726.175 1136.89,725.283 1137.45,724.496 1138.01,721.894 1138.57,752.306 1139.13,719.576 1139.68,703.169 1140.24,687.053 1140.8,736.773 1141.36,736.433 1141.92,733.142 1142.48,714.542 1143.04,697.97 1143.6,713.363 1144.16,713.314 1144.72,715.245 1145.28,715.418 1145.84,710.413 1146.4,727.406 1146.96,695.239 1147.51,711.925 1148.07,694.141 1148.63,691.869 1149.19,692.212 1149.75,690.555 1150.31,690.329 1150.87,692.651 1151.43,692.408 1151.99,677.481 1152.55,692.544 1153.11,690.932 1153.67,674.396 1154.23,676.395 1154.78,656.707 1155.34,607.604 1155.9,629.183 1156.46,616.347 1157.02,666.416 1157.58,670.25 1158.14,689.499 1158.7,688.954 1159.26,671.875 1159.82,687.093 1160.38,673.142 1160.94,671.671 1161.5,671.84 1162.05,638.871 1162.61,642.278 1163.17,626.558 1163.73,595.514 1164.29,598.581 1164.85,603.209 1165.41,589.833 1165.97,659.625 1166.53,662.926 1167.09,665.275 1167.65,666.013 1168.21,653.39 1168.77,639.278 1169.33,641.944 1169.88,646.544 1170.44,681.611 1171,669.024 1171.56,686.847 1172.12,689.626 1172.68,722.592 1173.24,734.652 1173.8,717.905 1174.36,719.692 1174.92,699.719 1175.48,744.92 1176.04,760.888 1176.6,739.627 1177.15,736.077 1177.71,748.948 1178.27,761.647 1178.83,787.984 1179.39,779.213 1179.95,792.837 1180.51,786.729 1181.07,781.344 1181.63,746.364 1182.19,724.84 1182.75,723.751 1183.31,719.312 1183.87,731.746 1184.43,711.346 1184.98,693.455 1185.54,677.473 1186.1,695.377 1186.66,675.246 1187.22,644.936 1187.78,618.981 1188.34,586.705 1188.9,590.869 1189.46,563.291 1190.02,617.139 1190.58,647.701 1191.14,633.86 1191.7,640.432 1192.25,657.025 1192.81,644.682 1193.37,658.327 1193.93,661.506 1194.49,658.19 1195.05,658.558 1195.61,725.584 1196.17,726.423 1196.73,690.675 1197.29,723.223 1197.85,720.249 1198.41,732.383 1198.97,727.703 1199.52,758.084 1200.08,751.155 1200.64,732.892 1201.2,714.32 1201.76,730.777 1202.32,715.206 1202.88,710.723 1203.44,724.34 1204,706.013 1204.56,691.261 1205.12,704.262 1205.68,688.877 1206.24,671.199 1206.8,668.616 1207.35,668.237 1207.91,672.137 1208.47,643.486 1209.03,646.081 1209.59,679.493 1210.15,682.727 1210.71,682.666 1211.27,682.66 1211.83,697.689 1212.39,697.971 1212.95,713.68 1213.51,713.768 1214.07,680.197 1214.62,662.261 1215.18,629.214 1215.74,627.797 1216.3,614.607 1216.86,602.679 1217.42,603.09 1217.98,610.158 1218.54,631.227 1219.1,666.369 1219.66,684.236 1220.22,669.876 1220.78,671.622 1221.34,660.218 1221.89,695.686 1222.45,694.157 1223.01,710.486 1223.57,709.817 1224.13,744.195 1224.69,725.094 1225.25,717.501 1225.81,711.853 1226.37,710.429 1226.93,692.987 1227.49,693.132 1228.05,710.078 1228.61,696.153 1229.17,712.991 1229.72,681.481 1230.28,717.109 1230.84,683.881 1231.4,668.284 1231.96,685.042 1232.52,686.473 1233.08,688.103 1233.64,706.311 1234.2,735.58 1234.76,717.689 1235.32,746.184 1235.88,744.256 1236.44,772.679 1236.99,752.176 1237.55,732.355 1238.11,713.322 1238.67,712.232 1239.23,678.111 1239.79,691.414 1240.35,689.502 1240.91,672.514 1241.47,673.39 1242.03,659.727 1242.59,677.193 1243.15,676.852 1243.71,711.278 1244.26,710.036 1244.82,727.1 1245.38,741.099 1245.94,707.579 1246.5,691.191 1247.06,674.675 1247.62,675.56 1248.18,661.744 1248.74,646.929 1249.3,679.609 1249.86,697.343 1250.42,725.295 1250.98,708.013 1251.54,723.521 1252.09,706.077 1252.65,704.674 1253.21,702.904 1253.77,687.447 1254.33,702.419 1254.89,654.252 1255.45,654.601 1256.01,650.877 1256.57,685.85 1257.13,687.327 1257.69,668.451 1258.25,685.86 1258.81,719.202 1259.36,687.179 1259.92,704.769 1260.48,704.976 1261.04,689.892 1261.6,675.314 1262.16,737.708 1262.72,768.648 1263.28,767.331 1263.84,763.817 1264.4,761.616 1264.96,729.035 1265.52,712.472 1266.08,711.796 1266.63,708.857 1267.19,691.122 1267.75,673.159 1268.31,676.199 1268.87,676.957 1269.43,641.983 1269.99,645.54 1270.55,650.16 1271.11,669.017 1271.67,675.052 1272.23,660.306 1272.79,644.368 1273.35,661.748 1273.91,645.797 1274.46,630.341 1275.02,634.262 1275.58,657.23 1276.14,658.007 1276.7,676.146 1277.26,657.243 1277.82,693.178 1278.38,696.619 1278.94,728.092 1279.5,709.011 1280.06,704.217 1280.62,701.899 1281.18,701.136 1281.73,683.434 1282.29,682.499 1282.85,679.815 1283.41,697.118 1283.97,676.455 1284.53,691.496 1285.09,691.789 1285.65,693.739 1286.21,680.078 1286.77,665.608 1287.33,681.819 1287.89,664.744 1288.45,616.664 1289,624.996 1289.56,627.74 1290.12,626.576 1290.68,665.09 1291.24,668.642 1291.8,672.455 1292.36,675.026 1292.92,662.337 1293.48,646.661 1294.04,652.504 1294.6,638.982 1295.16,626.985 1295.72,616.41 1296.28,602.1 1296.83,607.248 1297.39,626.922 1297.95,679.082 1298.51,712.06 1299.07,708.064 1299.63,704.384 1300.19,705.835 1300.75,702.603 1301.31,683.628 1301.87,684.823 1302.43,682.08 1302.99,681.802 1303.55,667.487 1304.1,670.532 1304.66,689.41 1305.22,689.96 1305.78,670.929 1306.34,672.453 1306.9,671.981 1307.46,704.4 1308.02,673.375 1308.58,673.356 1309.14,658.808 1309.7,662.503 1310.26,615.778 1310.82,636.256 1311.38,655.677 1311.93,640.181 1312.49,654.413 1313.05,673.183 1313.61,670.273 1314.17,689.52 1314.73,670.775 1315.29,703.695 1315.85,718.102 1316.41,716.312 1316.97,667.633 1317.53,733.886 1318.09,713.876 1318.65,747.547 1319.2,743.059 1319.76,739.001 1320.32,721.899 1320.88,717.704 1321.44,715.772 1322,712.637 1322.56,725.026 1323.12,708.197 1323.68,720.085 1324.24,701.743 1324.8,665.051 1325.36,680.105 1325.92,662.858 1326.47,664.094 1327.03,665.582 1327.59,648.962 1328.15,652.148 1328.71,653.19 1329.27,651.741 1329.83,656.47 1330.39,656.065 1330.95,674.462 1331.51,720.3 1332.07,720.007 1332.63,770.717 1333.19,748.064 1333.75,727.965 1334.3,755.193 1334.86,702.121 1335.42,684.706 1335.98,682.137 1336.54,698.09 1337.1,714.001 1337.66,744.329 1338.22,739.236 1338.78,735.921 1339.34,712.756 1339.9,724.365 1340.46,753.194 1341.02,731.474 1341.57,727.896 1342.13,708.867 1342.69,722.619 1343.25,720.105 1343.81,712.624 1344.37,694.083 1344.93,714.042 1345.49,698.258 1346.05,698.904 1346.61,716.501 1347.17,698.19 1347.73,681.019 1348.29,662.511 1348.84,663.64 1349.4,632.482 1349.96,634.804 1350.52,618.375 1351.08,608.576 1351.64,647.415 1352.2,620.204 1352.76,623.944 1353.32,629.779 1353.88,666.198 1354.44,667.764 1355,654.253 1355.56,640.512 1356.12,646.522 1356.67,651.712 1357.23,668.182 1357.79,701.829 1358.35,670.751 1358.91,673.808 1359.47,675.161 1360.03,692.877 1360.59,707.447 1361.15,706.055 1361.71,719.463 1362.27,699.359 1362.83,710.409 1363.39,722.938 1363.94,723.001 1364.5,722.193 1365.06,702.208 1365.62,702.025 1366.18,735.507 1366.74,747.866 1367.3,730.998 1367.86,744.103 1368.42,725.786 1368.98,722.969 1369.54,691.562 1370.1,672.695 1370.66,675.641 1371.21,674.472 1371.77,722.074 1372.33,720.74 1372.89,691.468 1373.45,643.232 1374.01,645.38 1374.57,646.955 1375.13,618.369 1375.69,609.111 1376.25,659.545 1376.81,675.889 1377.37,690.416 1377.93,675.065 1378.49,658.509 1379.04,642.545 1379.6,657.64 1380.16,657.368 1380.72,660.997 1381.28,660.907 1381.84,662.504 1382.4,643.566 1382.96,630.751 1383.52,598.852 1384.08,585.601 1384.64,638.963 1385.2,622.256 1385.76,660.237 1386.31,693.957 1386.87,710.142 1387.43,675.706 1387.99,659.389 1388.55,663.477 1389.11,616.134 1389.67,651.001 1390.23,621.412 1390.79,638.752 1391.35,689.353 1391.91,707.83 1392.47,738.397 1393.03,739.996 1393.58,719.589 1394.14,766.004 1394.7,750.147 1395.26,750.397 1395.82,735.382 1396.38,735.002 1396.94,732.994 1397.5,686.615 1398.06,688.584 1398.62,671.001 1399.18,643.255 1399.74,661.263 1400.3,691.811 1400.86,657.876 1401.41,626.882 1401.97,627.995 1402.53,632.727 1403.09,590.856 1403.65,595.655 1404.21,569.557 1404.77,560.521 1405.33,581.169 1405.89,582.996 1406.45,605.583 1407.01,626.885 1407.57,631.988 1408.13,635.035 1408.68,670.614 1409.24,653.102 1409.8,638.486 1410.36,654.117 1410.92,656.134 1411.48,690.929 1412.04,678.126 1412.6,660.629 1413.16,662.396 1413.72,668.232 1414.28,684.66 1414.84,684.259 1415.4,698.653 1415.95,678.844 1416.51,681.223 1417.07,699.418 1417.63,715.4 1418.19,681.064 1418.75,678.16 1419.31,657.878 1419.87,627.461 1420.43,600.725 1420.99,620.861 1421.55,612.625 1422.11,630.158 1422.67,650.486 1423.23,650.85 1423.78,619.994 1424.34,621.092 1424.9,640.707 1425.46,661.876 1426.02,694.068 1426.58,674.788 1427.14,657.608 1427.7,661.711 1428.26,663.998 1428.82,699.023 1429.38,682.127 1429.94,682.632 1430.5,648.905 1431.05,668.11 1431.61,681.034 1432.17,680.905 1432.73,665.464 1433.29,683.324 1433.85,714.661 1434.41,700.738 1434.97,701.008 1435.53,718.132 1436.09,701.239 1436.65,699.902 1437.21,716.19 1437.77,729.641 1438.33,725.26 1438.88,725.649 1439.44,739.594 1440,754.7 1440.56,736.921 1441.12,739.705 1441.68,720.68 1442.24,736.266 1442.8,732.55 1443.36,729.858 1443.92,727.867 1444.48,682.173 1445.04,715.851 1445.6,732.173 1446.15,727.437 1446.71,738.705 1447.27,718.636 1447.83,733.938 1448.39,730.927 1448.95,742.527 1449.51,739.093 1450.07,690.392 1450.63,720.232 1451.19,716.431 1451.75,682.544 1452.31,682.664 1452.87,679.815 1453.42,678.658 1453.98,646.091 1454.54,682.571 1455.1,667.488 1455.66,699.556 1456.22,699.739 1456.78,682.128 1457.34,665.555 1457.9,650.612 1458.46,655.08 1459.02,686.508 1459.58,654.069 1460.14,618.303 1460.7,602.961 1461.25,620.901 1461.81,640.084 1462.37,611.78 1462.93,649.352 1463.49,670.78 1464.05,655.378 1464.61,667.814 1465.17,687.042 1465.73,701.487 1466.29,700.609 1466.85,716.23 1467.41,715.958 1467.97,714.074 1468.52,695.74 1469.08,695.821 1469.64,728.56 1470.2,708.276 1470.76,692.736 1471.32,675.944 1471.88,677.303 1472.44,679.055 1473,647.623 1473.56,648.662 1474.12,616.831 1474.68,651.334 1475.24,634.817 1475.79,640.568 1476.35,624.065 1476.91,624.195 1477.47,611.004 1478.03,631.164 1478.59,600.952 1479.15,609.092 1479.71,596.843 1480.27,586.143 1480.83,605.801 1481.39,609.788 1481.95,618.514 1482.51,639.655 1483.07,661.809 1483.62,644.172 1484.18,663.873 1484.74,646.286 1485.3,652.225 1485.86,670.074 1486.42,673.244 1486.98,738.66 1487.54,734.454 1488.1,734.057 1488.66,746.674 1489.22,711.699 1489.78,707.513 1490.34,739.289 1490.89,673.447 1491.45,674.243 1492.01,675.329 1492.57,693.585 1493.13,691.046 1493.69,656.381 1494.25,653.796 1494.81,719.854 1495.37,733.094 1495.93,746.761 1496.49,760.897 1497.05,738.861 1497.61,704.937 1498.16,674.005 1498.72,720.903 1499.28,703.527 1499.84,763.797 1500.4,793.019 1500.96,801.296 1501.52,780.206 1502.08,791.73 1502.64,785.848 1503.2,780.047 1503.76,772.032 1504.32,783.028 1504.88,793.131 1505.44,788.016 1505.99,748.83 1506.55,730.246 1507.11,711.76 1507.67,709.828 1508.23,676.803 1508.79,677.604 1509.35,679.394 1509.91,661.887 1510.47,677.048 1511.03,692.369 1511.59,679.166 1512.15,663.792 1512.71,665.633 1513.26,633.851 1513.82,635.963 1514.38,638.586 1514.94,622.111 1515.5,607.868 1516.06,631.757 1516.62,649.718 1517.18,653.943 1517.74,687.723 1518.3,683.075 1518.86,716.539 1519.42,713.262 1519.98,711.222 1520.53,690.108 1521.09,689.885 1521.65,690.2 1522.21,676.479 1522.77,727.241 1523.33,739.568 1523.89,703.394 1524.45,688.566 1525.01,637.598 1525.57,609.176 1526.13,597.412 1526.69,572.519 1527.25,560.359 1527.81,600.152 1528.36,622.953 1528.92,623.229 1529.48,610.741 1530.04,612.194 1530.6,631.756 1531.16,599.228 1531.72,621.051 1532.28,641.396 1532.84,642.075 1533.4,676.95 1533.96,672.477 1534.52,707.439 1535.08,753.789 1535.63,752.019 1536.19,748.971 1536.75,744.506 1537.31,726.052 1537.87,706.9 1538.43,689.846 1538.99,690.722 1539.55,705.089 1540.11,721.921 1540.67,723.641 1541.23,736.172 1541.79,730.818 1542.35,714.578 1542.9,665.018 1543.46,666.653 1544.02,666.551 1544.58,686.727 1545.14,716.818 1545.7,716.837 1546.26,697.947 1546.82,699.756 1547.38,699.716 1547.94,715.992 1548.5,729.71 1549.06,731.59 1549.62,696.083 1550.18,695.143 1550.73,663.59 1551.29,632.326 1551.85,620.582 1552.41,605.221 1552.97,642.662 1553.53,694.864 1554.09,693.264 1554.65,642.195 1555.21,642.828 1555.77,646.732 1556.33,633.412 1556.89,638.461 1557.45,657.686 1558,692.627 1558.56,690.996 1559.12,710.033 1559.68,696.305 1560.24,725.516 1560.8,706.083 1561.36,704.692 1561.92,707.496 1562.48,674.836 1563.04,660.224 1563.6,661.702 1564.16,648.134 1564.72,648.889 1565.28,617.663 1565.83,573.317 1566.39,579.487 1566.95,571.743 1567.51,580.64 1568.07,585.762 1568.63,590.179 1569.19,611.705 1569.75,632.023 1570.31,619.316 1570.87,587.608 1571.43,594.391 1571.99,644.479 1572.55,647.426 1573.1,648.885 1573.66,624.803 1574.22,662.697 1574.78,665.235 1575.34,683.737 1575.9,653.332 1576.46,643.539 1577.02,663.609 1577.58,712.484 1578.14,694.689 1578.7,693.179 1579.26,709.651 1579.82,721.895 1580.37,719.125 1580.93,717.561 1581.49,700.318 1582.05,699.07 1582.61,700.953 1583.17,701.651 1583.73,703.143 1584.29,715.759 1584.85,713.455 1585.41,727.9 1585.97,742.62 1586.53,772.403 1587.09,750.623 1587.65,764.063 1588.2,760.243 1588.76,723.07 1589.32,720.979 1589.88,733.921 1590.44,746.233 1591,756.155 1591.56,750.428 1592.12,717.146 1592.68,699.994 1593.24,682.747 1593.8,663.221 1594.36,644.01 1594.92,678.209 1595.47,680.265 1596.03,710.12 1596.59,675.298 1597.15,691.311 1597.71,710.177 1598.27,709.049 1598.83,723.481 1599.39,684.652 1599.95,686.22 1600.51,701.14 1601.07,716.148 1601.63,715.307 1602.19,728.452 1602.74,710.633 1603.3,707.96 1603.86,709.177 1604.42,707.071 1604.98,721.921 1605.54,736.904 1606.1,749.739 1606.66,777.75 1607.22,756.116 1607.78,747.202 1608.34,748.316 1608.9,766.408 1609.46,779.319 1610.02,774.896 1610.57,770.245 1611.13,765.258 1611.69,762.234 1612.25,736.918 1612.81,755.795 1613.37,752.373 1613.93,733.547 1614.49,730.143 1615.05,716.483 1615.61,715.079 1616.17,729.616 1616.73,725.639 1617.29,706.59 1617.84,736.197 1618.4,718.228 1618.96,698.485 1619.52,695.859 1620.08,693.072 1620.64,657.557 1621.2,656.553 1621.76,658.677 1622.32,689.659 1622.88,702.759 1623.44,703.499 1624,701.752 1624.56,682.63 1625.11,694.332 1625.67,674.156 1626.23,675.465 1626.79,673.266 1627.35,708.844 1627.91,739.427 1628.47,720.499 1629.03,668.647 1629.59,685.115 1630.15,701.413 1630.71,698.555 1631.27,700.233 1631.83,681.997 1632.39,682.969 1632.94,648.382 1633.5,665.55 1634.06,647.776 1634.62,632.081 1635.18,635.048 1635.74,621.422 1636.3,654.407 1636.86,656.656 1637.42,672.913 1637.98,691.405 1638.54,672.299 1639.1,653.544 1639.66,669.404 1640.21,683.785 1640.77,702.244 1641.33,670.712 1641.89,686.975 1642.45,690.696 1643.01,706.683 1643.57,723.195 1644.13,723.364 1644.69,710.662 1645.25,709.748 1645.81,709.259 1646.37,707.749 1646.93,676.865 1647.48,677.913 1648.04,680.031 1648.6,646.466 1649.16,632.456 1649.72,636.295 1650.28,620.26 1650.84,655.278 1651.4,657.797 1651.96,692.304 1652.52,691.13 1653.08,690.57 1653.64,725.536 1654.2,759.001 1654.76,773.959 1655.31,755.985 1655.87,769.36 1656.43,783.326 1656.99,762.073 1657.55,709.97 1658.11,708.156 1658.67,722.895 1659.23,718.576 1659.79,734.324 1660.35,730.272 1660.91,699.698 1661.47,700.084 1662.03,710.237 1662.58,757.501 1663.14,755.967 1663.7,733.799 1664.26,728.912 1664.82,712.326 1665.38,693.219 1665.94,693.456 1666.5,711.719 1667.06,697.371 1667.62,710.217 1668.18,678.258 1668.74,661.196 1669.3,661.605 1669.85,660.93 1670.41,663.375 1670.97,642.332 1671.53,644.846 1672.09,697.414 1672.65,683.555 1673.21,701.256 1673.77,705.462 1674.33,751.724 1674.89,718.231 1675.45,703.145 1676.01,733.756 1676.57,729.721 1677.13,714.57 1677.68,731.687 1678.24,777.116 1678.8,773.783 1679.36,752.571 1679.92,729.752 1680.48,745.904 1681.04,710.914 1681.6,709.536 1682.16,688.822 1682.72,656.651 1683.28,674.609 1683.84,640.568 1684.4,622.435 1684.95,625.308 1685.51,612.407 1686.07,581.755 1686.63,600.893 1687.19,589.413 1687.75,594.629 1688.31,600.807 1688.87,586.179 1689.43,605.082 1689.99,640.196 1690.55,657.808 1691.11,659.239 1691.67,661.058 1692.23,678.938 1692.78,675.704 1693.34,674.866 1693.9,675.062 1694.46,689.623 1695.02,671.975 1695.58,643.3 1696.14,647.098 1696.7,680.25 1697.26,699.156 1697.82,682.382 1698.38,647.453 1698.94,648.146 1699.5,632.524 1700.05,618.936 1700.61,606.722 1701.17,628.143 1701.73,615.256 1702.29,618.885 1702.85,623.455 1703.41,630.657 1703.97,650.164 1704.53,669.672 1705.09,656.006 1705.65,657.897 1706.21,646.228 1706.77,681.122 1707.32,664.02 1707.88,663.229 1708.44,696.738 1709,696.813 1709.56,680.484 1710.12,697.153 1710.68,714.95 1711.24,710.976 1711.8,712.248 1712.36,681.527 1712.92,665.518 1713.48,633.641 1714.04,635.242 1714.6,625.155 1715.15,626.96 1715.71,630.908 1716.27,653.685 1716.83,635.838 1717.39,656.817 1717.95,722.934 1718.51,717.422 1719.07,730.9 1719.63,758.201 1720.19,751.366 1720.75,765.262 1721.31,763.658 1721.87,777.574 1722.42,771.163 1722.98,751.303 1723.54,731.485 1724.1,714.421 1724.66,697.989 1725.22,681.143 1725.78,682.609 1726.34,699.68 1726.9,668.333 1727.46,669.798 1728.02,671.425 1728.58,735.83 1729.14,715.831 1729.69,731.072 1730.25,695.942 1730.81,724.95 1731.37,720.406 1731.93,700.57 1732.49,683.618 1733.05,715.293 1733.61,699.066 1734.17,679.259 1734.73,681.022 1735.29,682.999 1735.85,698.285 1736.41,682.293 1736.97,683.818 1737.52,667.52 1738.08,651.45 1738.64,651.845 1739.2,650.473 1739.76,650.156 1740.32,650.471 1740.88,652.106 1741.44,687.92 1742,686.957 1742.56,700.026 1743.12,665.88 1743.68,664.879 1744.24,666.262 1744.79,651.631 1745.35,666.991 1745.91,696.244 1746.47,693.347 1747.03,692.769 1747.59,692.01 1748.15,692.249 1748.71,706.38 1749.27,721.685 1749.83,719.907 1750.39,669.207 1750.95,686.306 1751.51,704.415 1752.06,701.123 1752.62,686.867 1753.18,685.573 1753.74,698.6 1754.3,665.736 1754.86,712.067 1755.42,709.576 1755.98,741.076 1756.54,719.583 1757.1,717.614 1757.66,697.21 1758.22,694.445 1758.78,695.829 1759.34,710.962 1759.89,694.781 1760.45,693.146 1761.01,692.558 1761.57,643.507 1762.13,631.803 1762.69,631.774 1763.25,632.676 1763.81,634.473 1764.37,636.347 1764.93,638.854 1765.49,626.446 1766.05,663.866 1766.61,682.843 1767.16,680.598 1767.72,682.966 1768.28,702.456 1768.84,720.048 1769.4,733.29 1769.96,728.015 1770.52,710.046 1771.08,740.017 1771.64,719.379 1772.2,730.337 1772.76,709.417 1773.32,710.376 1773.88,693.587 1774.43,712.398 1774.99,694.218 1775.55,662.781 1776.11,683.12 1776.67,666.107 1777.23,665.861 1777.79,650.071 1778.35,652.395 1778.91,655.505 1779.47,654.677 1780.03,639.651 1780.59,626.262 1781.15,609.73 1781.71,614.104 1782.26,653.431 1782.82,658.419 1783.38,659.403 1783.94,613.697 1784.5,615.439 1785.06,633.887 1785.62,654.948 1786.18,670.788 1786.74,642.212 1787.3,644.31 1787.86,650.278 1788.42,635.143 1788.98,618.027 1789.53,605.625 1790.09,609.299 1790.65,629.74 1791.21,650.904 1791.77,653.665 1792.33,671.716 1792.89,656.951 1793.45,692.159 1794.01,644.007 1794.57,693.071 1795.13,709.534 1795.69,708.94 1796.25,710.007 1796.8,693.893 1797.36,693.688 1797.92,692.023 1798.48,692.582 1799.04,690 1799.6,691.113 1800.16,673.392 1800.72,692.151 1801.28,708.983 1801.84,676.627 1802.4,710.583 1802.96,694.661 1803.52,696.537 1804.08,713.766 1804.63,725.12 1805.19,720.107 1805.75,731.914 1806.31,698.584 1806.87,748.26 1807.43,727.769 1807.99,727.611 1808.55,679.383 1809.11,662.157 1809.67,663.095 1810.23,650.464 1810.79,636.309 1811.35,636.314 1811.9,621.897 1812.46,593.156 1813.02,600.976 1813.58,587.229 1814.14,591.16 1814.7,597.212 1815.26,618.312 1815.82,635.966 1816.38,653.344 1816.94,670.997 1817.5,723.549 1818.06,737.692 1818.62,749.043 1819.18,728.995 1819.73,711.381 1820.29,710.057 1820.85,710.523 1821.41,689.537 1821.97,690.354 1822.53,709.012 1823.09,640.915 1823.65,677.416 1824.21,693.427 1824.77,706.703 1825.33,689.04 1825.89,703.252 1826.45,718.772 1827,717.069 1827.56,699.965 1828.12,702.183 1828.68,683.91 1829.24,684.37 1829.8,654.123 1830.36,676.628 1830.92,677.004 1831.48,659.868 1832.04,644.882 1832.6,648.5 1833.16,666.529 1833.72,699.021 1834.27,682.46 1834.83,713.314 1835.39,715.601 1835.95,746.773 1836.51,745.211 1837.07,742.665 1837.63,721.689 1838.19,737.023 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 690.331 L720.806 690.331 L721.365 690.331 L721.924 690.331 L722.484 690.331 L723.043 690.331 L723.602 690.331 L724.161 690.331 L724.721 690.331 L725.28 690.331 L725.839 690.331 L726.398 690.331 L726.958 690.331 L727.517 690.331 L728.076 690.331 L728.635 690.331 L729.195 690.331 L729.754 690.331 L730.313 690.331 L730.872 690.331 L731.432 690.331 L731.991 690.331 L732.55 690.331 L733.109 690.331 L733.669 690.331 L734.228 690.331 L734.787 690.331 L735.346 690.331 L735.906 690.331 L736.465 690.331 L737.024 690.331 L737.583 690.331 L738.143 690.331 L738.702 690.331 L739.261 690.331 L739.82 690.331 L740.38 690.331 L740.939 690.331 L741.498 690.331 L742.057 690.331 L742.617 690.331 L743.176 690.331 L743.735 690.331 L744.294 690.331 L744.854 690.331 L745.413 690.331 L745.972 690.331 L746.531 690.331 L747.091 690.331 L747.65 690.331 L748.209 690.331 L748.768 690.331 L749.328 690.331 L749.887 690.331 L750.446 690.331 L751.005 690.331 L751.565 690.331 L752.124 690.331 L752.683 690.331 L753.242 690.331 L753.802 690.331 L754.361 690.331 L754.92 690.331 L755.479 690.331 L756.039 690.331 L756.598 690.331 L757.157 690.331 L757.716 690.331 L758.276 690.331 L758.835 690.331 L759.394 690.331 L759.953 690.331 L760.513 690.331 L761.072 690.331 L761.631 690.331 L762.19 690.331 L762.75 690.331 L763.309 690.331 L763.868 690.331 L764.427 690.331 L764.987 690.331 L765.546 690.331 L766.105 690.331 L766.664 690.331 L767.224 690.331 L767.783 690.331 L768.342 690.331 L768.901 690.331 L769.461 690.331 L770.02 690.331 L770.579 690.331 L771.138 690.331 L771.698 690.331 L772.257 690.331 L772.816 690.331 L773.375 690.331 L773.935 690.331 L774.494 690.331 L775.053 690.331 L775.612 690.331 L776.172 690.331 L776.731 690.331 L777.29 690.331 L777.849 690.331 L778.409 690.331 L778.968 690.331 L779.527 690.331 L780.086 690.331 L780.646 690.331 L781.205 690.331 L781.764 690.331 L782.323 690.331 L782.883 690.331 L783.442 690.331 L784.001 690.331 L784.56 690.331 L785.12 690.331 L785.679 690.331 L786.238 690.331 L786.797 690.331 L787.357 690.331 L787.916 690.331 L788.475 690.331 L789.034 690.331 L789.594 690.331 L790.153 690.331 L790.712 690.331 L791.271 690.331 L791.831 690.331 L792.39 690.331 L792.949 690.331 L793.508 690.331 L794.068 690.331 L794.627 690.331 L795.186 690.331 L795.745 690.331 L796.305 690.331 L796.864 690.331 L797.423 690.331 L797.982 690.331 L798.542 690.331 L799.101 690.331 L799.66 690.331 L800.219 690.331 L800.779 690.331 L801.338 690.331 L801.897 690.331 L802.456 690.331 L803.016 690.331 L803.575 690.331 L804.134 690.331 L804.693 690.331 L805.253 690.331 L805.812 690.331 L806.371 690.331 L806.931 690.331 L807.49 690.331 L808.049 690.331 L808.608 690.331 L809.168 690.331 L809.727 690.331 L810.286 690.331 L810.845 690.331 L811.405 690.331 L811.964 690.331 L812.523 690.331 L813.082 690.331 L813.642 690.331 L814.201 690.331 L814.76 690.331 L815.319 690.331 L815.879 690.331 L816.438 690.331 L816.997 690.331 L817.556 690.331 L818.116 690.331 L818.675 690.331 L819.234 690.331 L819.793 690.331 L820.353 690.331 L820.912 690.331 L821.471 690.331 L822.03 690.331 L822.59 690.331 L823.149 690.331 L823.708 690.331 L824.267 690.331 L824.827 690.331 L825.386 690.331 L825.945 690.331 L826.504 690.331 L827.064 690.331 L827.623 690.331 L828.182 690.331 L828.741 690.331 L829.301 690.331 L829.86 690.331 L830.419 690.331 L830.978 690.331 L831.538 690.331 L832.097 690.331 L832.656 690.331 L833.215 690.331 L833.775 690.331 L834.334 690.331 L834.893 690.331 L835.452 690.331 L836.012 690.331 L836.571 690.331 L837.13 690.331 L837.689 690.331 L838.249 690.331 L838.808 690.331 L839.367 690.331 L839.926 690.331 L840.486 690.331 L841.045 690.331 L841.604 690.331 L842.163 690.331 L842.723 690.331 L843.282 690.331 L843.841 690.331 L844.4 690.331 L844.96 690.331 L845.519 690.331 L846.078 690.331 L846.637 690.331 L847.197 690.331 L847.756 690.331 L848.315 690.331 L848.874 690.331 L849.434 690.331 L849.993 690.331 L850.552 690.331 L851.111 690.331 L851.671 690.331 L852.23 690.331 L852.789 690.331 L853.348 690.331 L853.908 690.331 L854.467 690.331 L855.026 690.331 L855.585 690.331 L856.145 690.331 L856.704 690.331 L857.263 690.331 L857.822 690.331 L858.382 690.331 L858.941 690.331 L859.5 690.331 L860.059 690.331 L860.619 690.331 L861.178 690.331 L861.737 690.331 L862.296 690.331 L862.856 690.331 L863.415 690.331 L863.974 690.331 L864.533 690.331 L865.093 690.331 L865.652 690.331 L866.211 690.331 L866.77 690.331 L867.33 690.331 L867.889 690.331 L868.448 690.331 L869.007 690.331 L869.567 690.331 L870.126 690.331 L870.685 690.331 L871.244 690.331 L871.804 690.331 L872.363 690.331 L872.922 690.331 L873.481 690.331 L874.041 690.331 L874.6 690.331 L875.159 690.331 L875.718 690.331 L876.278 690.331 L876.837 690.331 L877.396 690.331 L877.955 690.331 L878.515 690.331 L879.074 690.331 L879.633 690.331 L880.192 690.331 L880.752 690.331 L881.311 690.331 L881.87 690.331 L882.429 690.331 L882.989 690.331 L883.548 690.331 L884.107 690.331 L884.666 690.331 L885.226 690.331 L885.785 690.331 L886.344 690.331 L886.903 690.331 L887.463 690.331 L888.022 690.331 L888.581 690.331 L889.14 690.331 L889.7 690.331 L890.259 690.331 L890.818 690.331 L891.377 690.331 L891.937 690.331 L892.496 690.331 L893.055 690.331 L893.614 690.331 L894.174 690.331 L894.733 690.331 L895.292 690.331 L895.851 690.331 L896.411 690.331 L896.97 690.331 L897.529 690.331 L898.088 690.331 L898.648 690.331 L899.207 690.331 L899.766 690.331 L900.325 690.331 L900.885 690.331 L901.444 690.331 L902.003 690.331 L902.562 690.331 L903.122 690.331 L903.681 690.331 L904.24 690.331 L904.799 690.331 L905.359 690.331 L905.918 690.331 L906.477 690.331 L907.036 690.331 L907.596 690.331 L908.155 690.331 L908.714 690.331 L909.273 690.331 L909.833 690.331 L910.392 690.331 L910.951 690.331 L911.51 690.331 L912.07 690.331 L912.629 690.331 L913.188 690.331 L913.747 690.331 L914.307 690.331 L914.866 690.331 L915.425 690.331 L915.984 690.331 L916.544 690.331 L917.103 690.331 L917.662 690.331 L918.221 690.331 L918.781 690.331 L919.34 690.331 L919.899 690.331 L920.458 690.331 L921.018 690.331 L921.577 690.331 L922.136 690.331 L922.695 690.331 L923.255 690.331 L923.814 690.331 L924.373 690.331 L924.932 690.331 L925.492 690.331 L926.051 690.331 L926.61 690.331 L927.169 690.331 L927.729 690.331 L928.288 690.331 L928.847 690.331 L929.406 690.331 L929.966 690.331 L930.525 690.331 L931.084 690.331 L931.644 690.331 L932.203 690.331 L932.762 690.331 L933.321 690.331 L933.881 690.331 L934.44 690.331 L934.999 690.331 L935.558 690.331 L936.118 690.331 L936.677 690.331 L937.236 690.331 L937.795 690.331 L938.355 690.331 L938.914 690.331 L939.473 690.331 L940.032 690.331 L940.592 690.331 L941.151 690.331 L941.71 690.331 L942.269 690.331 L942.829 690.331 L943.388 690.331 L943.947 690.331 L944.506 690.331 L945.066 690.331 L945.625 690.331 L946.184 690.331 L946.743 690.331 L947.303 690.331 L947.862 690.331 L948.421 690.331 L948.98 690.331 L949.54 690.331 L950.099 690.331 L950.658 690.331 L951.217 690.331 L951.777 690.331 L952.336 690.331 L952.895 690.331 L953.454 690.331 L954.014 690.331 L954.573 690.331 L955.132 690.331 L955.691 690.331 L956.251 690.331 L956.81 690.331 L957.369 690.331 L957.928 690.331 L958.488 690.331 L959.047 690.331 L959.606 690.331 L960.165 690.331 L960.725 690.331 L961.284 690.331 L961.843 690.331 L962.402 690.331 L962.962 690.331 L963.521 690.331 L964.08 690.331 L964.639 690.331 L965.199 690.331 L965.758 690.331 L966.317 690.331 L966.876 690.331 L967.436 690.331 L967.995 690.331 L968.554 690.331 L969.113 690.331 L969.673 690.331 L970.232 690.331 L970.791 690.331 L971.35 690.331 L971.91 690.331 L972.469 690.331 L973.028 690.331 L973.587 690.331 L974.147 690.331 L974.706 690.331 L975.265 690.331 L975.824 690.331 L976.384 690.331 L976.943 690.331 L977.502 690.331 L978.061 690.331 L978.621 690.331 L979.18 690.331 L979.739 690.331 L980.298 690.331 L980.858 690.331 L981.417 690.331 L981.976 690.331 L982.535 690.331 L983.095 690.331 L983.654 690.331 L984.213 690.331 L984.772 690.331 L985.332 690.331 L985.891 690.331 L986.45 690.331 L987.009 690.331 L987.569 690.331 L988.128 690.331 L988.687 690.331 L989.246 690.331 L989.806 690.331 L990.365 690.331 L990.924 690.331 L991.483 690.331 L992.043 690.331 L992.602 690.331 L993.161 690.331 L993.72 690.331 L994.28 690.331 L994.839 690.331 L995.398 690.331 L995.957 690.331 L996.517 690.331 L997.076 690.331 L997.635 690.331 L998.194 690.331 L998.754 690.331 L999.313 690.331 L999.872 690.331 L1000.43 690.331 L1000.99 690.331 L1001.55 690.331 L1002.11 690.331 L1002.67 690.331 L1003.23 690.331 L1003.79 690.331 L1004.35 690.331 L1004.91 690.331 L1005.46 690.331 L1006.02 690.331 L1006.58 690.331 L1007.14 690.331 L1007.7 690.331 L1008.26 690.331 L1008.82 690.331 L1009.38 690.331 L1009.94 690.331 L1010.5 690.331 L1011.06 690.331 L1011.62 690.331 L1012.18 690.331 L1012.73 690.331 L1013.29 690.331 L1013.85 690.331 L1014.41 690.331 L1014.97 690.331 L1015.53 690.331 L1016.09 690.331 L1016.65 690.331 L1017.21 690.331 L1017.77 690.331 L1018.33 690.331 L1018.89 690.331 L1019.45 690.331 L1020.01 690.331 L1020.56 690.331 L1021.12 690.331 L1021.68 690.331 L1022.24 690.331 L1022.8 690.331 L1023.36 690.331 L1023.92 690.331 L1024.48 690.331 L1025.04 690.331 L1025.6 690.331 L1026.16 690.331 L1026.72 690.331 L1027.28 690.331 L1027.83 690.331 L1028.39 690.331 L1028.95 690.331 L1029.51 690.331 L1030.07 690.331 L1030.63 690.331 L1031.19 690.331 L1031.75 690.331 L1032.31 690.331 L1032.87 690.331 L1033.43 690.331 L1033.99 690.331 L1034.55 690.331 L1035.1 690.331 L1035.66 690.331 L1036.22 690.331 L1036.78 690.331 L1037.34 690.331 L1037.9 690.331 L1038.46 690.331 L1039.02 690.331 L1039.58 690.331 L1040.14 690.331 L1040.7 690.331 L1041.26 690.331 L1041.82 690.331 L1042.38 690.331 L1042.93 690.331 L1043.49 690.331 L1044.05 690.331 L1044.61 690.331 L1045.17 690.331 L1045.73 690.331 L1046.29 690.331 L1046.85 690.331 L1047.41 690.331 L1047.97 690.331 L1048.53 690.331 L1049.09 690.331 L1049.65 690.331 L1050.2 690.331 L1050.76 690.331 L1051.32 690.331 L1051.88 690.331 L1052.44 690.331 L1053 690.331 L1053.56 690.331 L1054.12 690.331 L1054.68 690.331 L1055.24 690.331 L1055.8 690.331 L1056.36 690.331 L1056.92 690.331 L1057.48 690.331 L1058.03 690.331 L1058.59 690.331 L1059.15 690.331 L1059.71 690.331 L1060.27 690.331 L1060.83 690.331 L1061.39 690.331 L1061.95 690.331 L1062.51 690.331 L1063.07 690.331 L1063.63 690.331 L1064.19 690.331 L1064.75 690.331 L1065.3 690.331 L1065.86 690.331 L1066.42 690.331 L1066.98 690.331 L1067.54 690.331 L1068.1 690.331 L1068.66 690.331 L1069.22 690.331 L1069.78 690.331 L1070.34 690.331 L1070.9 690.331 L1071.46 690.331 L1072.02 690.331 L1072.57 690.331 L1073.13 690.331 L1073.69 690.331 L1074.25 690.331 L1074.81 690.331 L1075.37 690.331 L1075.93 690.331 L1076.49 690.331 L1077.05 690.331 L1077.61 690.331 L1078.17 690.331 L1078.73 690.331 L1079.29 690.331 L1079.85 690.331 L1080.4 690.331 L1080.96 690.331 L1081.52 690.331 L1082.08 690.331 L1082.64 690.331 L1083.2 690.331 L1083.76 690.331 L1084.32 690.331 L1084.88 690.331 L1085.44 690.331 L1086 690.331 L1086.56 690.331 L1087.12 690.331 L1087.67 690.331 L1088.23 690.331 L1088.79 690.331 L1089.35 690.331 L1089.91 690.331 L1090.47 690.331 L1091.03 690.331 L1091.59 690.331 L1092.15 690.331 L1092.71 690.331 L1093.27 690.331 L1093.83 690.331 L1094.39 690.331 L1094.94 690.331 L1095.5 690.331 L1096.06 690.331 L1096.62 690.331 L1097.18 690.331 L1097.74 690.331 L1098.3 690.331 L1098.86 690.331 L1099.42 690.331 L1099.98 690.331 L1100.54 690.331 L1101.1 690.331 L1101.66 690.331 L1102.22 690.331 L1102.77 690.331 L1103.33 690.331 L1103.89 690.331 L1104.45 690.331 L1105.01 690.331 L1105.57 690.331 L1106.13 690.331 L1106.69 690.331 L1107.25 690.331 L1107.81 690.331 L1108.37 690.331 L1108.93 690.331 L1109.49 690.331 L1110.04 690.331 L1110.6 690.331 L1111.16 690.331 L1111.72 690.331 L1112.28 690.331 L1112.84 690.331 L1113.4 690.331 L1113.96 690.331 L1114.52 690.331 L1115.08 690.331 L1115.64 690.331 L1116.2 690.331 L1116.76 690.331 L1117.31 690.331 L1117.87 690.331 L1118.43 690.331 L1118.99 690.331 L1119.55 690.331 L1120.11 690.331 L1120.67 690.331 L1121.23 690.331 L1121.79 690.331 L1122.35 690.331 L1122.91 690.331 L1123.47 690.331 L1124.03 690.331 L1124.59 690.331 L1125.14 690.331 L1125.7 690.331 L1126.26 690.331 L1126.82 690.331 L1127.38 690.331 L1127.94 690.331 L1128.5 690.331 L1129.06 690.331 L1129.62 690.331 L1130.18 690.331 L1130.74 690.331 L1131.3 690.331 L1131.86 690.331 L1132.41 690.331 L1132.97 690.331 L1133.53 690.331 L1134.09 690.331 L1134.65 690.331 L1135.21 690.331 L1135.77 690.331 L1136.33 690.331 L1136.89 690.331 L1137.45 690.331 L1138.01 690.331 L1138.57 690.331 L1139.13 690.331 L1139.68 690.331 L1140.24 690.331 L1140.8 690.331 L1141.36 690.331 L1141.92 690.331 L1142.48 690.331 L1143.04 690.331 L1143.6 690.331 L1144.16 690.331 L1144.72 690.331 L1145.28 690.331 L1145.84 690.331 L1146.4 690.331 L1146.96 690.331 L1147.51 690.331 L1148.07 690.331 L1148.63 690.331 L1149.19 690.331 L1149.75 690.331 L1150.31 690.331 L1150.87 690.331 L1151.43 690.331 L1151.99 690.331 L1152.55 690.331 L1153.11 690.331 L1153.67 690.331 L1154.23 690.331 L1154.78 690.331 L1155.34 690.331 L1155.9 690.331 L1156.46 690.331 L1157.02 690.331 L1157.58 690.331 L1158.14 690.331 L1158.7 690.331 L1159.26 690.331 L1159.82 690.331 L1160.38 690.331 L1160.94 690.331 L1161.5 690.331 L1162.05 690.331 L1162.61 690.331 L1163.17 690.331 L1163.73 690.331 L1164.29 690.331 L1164.85 690.331 L1165.41 690.331 L1165.97 690.331 L1166.53 690.331 L1167.09 690.331 L1167.65 690.331 L1168.21 690.331 L1168.77 690.331 L1169.33 690.331 L1169.88 690.331 L1170.44 690.331 L1171 690.331 L1171.56 690.331 L1172.12 690.331 L1172.68 690.331 L1173.24 690.331 L1173.8 690.331 L1174.36 690.331 L1174.92 690.331 L1175.48 690.331 L1176.04 690.331 L1176.6 690.331 L1177.15 690.331 L1177.71 690.331 L1178.27 690.331 L1178.83 690.331 L1179.39 690.331 L1179.95 690.331 L1180.51 690.331 L1181.07 690.331 L1181.63 690.331 L1182.19 690.331 L1182.75 690.331 L1183.31 690.331 L1183.87 690.331 L1184.43 690.331 L1184.98 690.331 L1185.54 690.331 L1186.1 690.331 L1186.66 690.331 L1187.22 690.331 L1187.78 690.331 L1188.34 690.331 L1188.9 690.331 L1189.46 690.331 L1190.02 690.331 L1190.58 690.331 L1191.14 690.331 L1191.7 690.331 L1192.25 690.331 L1192.81 690.331 L1193.37 690.331 L1193.93 690.331 L1194.49 690.331 L1195.05 690.331 L1195.61 690.331 L1196.17 690.331 L1196.73 690.331 L1197.29 690.331 L1197.85 690.331 L1198.41 690.331 L1198.97 690.331 L1199.52 690.331 L1200.08 690.331 L1200.64 690.331 L1201.2 690.331 L1201.76 690.331 L1202.32 690.331 L1202.88 690.331 L1203.44 690.331 L1204 690.331 L1204.56 690.331 L1205.12 690.331 L1205.68 690.331 L1206.24 690.331 L1206.8 690.331 L1207.35 690.331 L1207.91 690.331 L1208.47 690.331 L1209.03 690.331 L1209.59 690.331 L1210.15 690.331 L1210.71 690.331 L1211.27 690.331 L1211.83 690.331 L1212.39 690.331 L1212.95 690.331 L1213.51 690.331 L1214.07 690.331 L1214.62 690.331 L1215.18 690.331 L1215.74 690.331 L1216.3 690.331 L1216.86 690.331 L1217.42 690.331 L1217.98 690.331 L1218.54 690.331 L1219.1 690.331 L1219.66 690.331 L1220.22 690.331 L1220.78 690.331 L1221.34 690.331 L1221.89 690.331 L1222.45 690.331 L1223.01 690.331 L1223.57 690.331 L1224.13 690.331 L1224.69 690.331 L1225.25 690.331 L1225.81 690.331 L1226.37 690.331 L1226.93 690.331 L1227.49 690.331 L1228.05 690.331 L1228.61 690.331 L1229.17 690.331 L1229.72 690.331 L1230.28 690.331 L1230.84 690.331 L1231.4 690.331 L1231.96 690.331 L1232.52 690.331 L1233.08 690.331 L1233.64 690.331 L1234.2 690.331 L1234.76 690.331 L1235.32 690.331 L1235.88 690.331 L1236.44 690.331 L1236.99 690.331 L1237.55 690.331 L1238.11 690.331 L1238.67 690.331 L1239.23 690.331 L1239.79 690.331 L1240.35 690.331 L1240.91 690.331 L1241.47 690.331 L1242.03 690.331 L1242.59 690.331 L1243.15 690.331 L1243.71 690.331 L1244.26 690.331 L1244.82 690.331 L1245.38 690.331 L1245.94 690.331 L1246.5 690.331 L1247.06 690.331 L1247.62 690.331 L1248.18 690.331 L1248.74 690.331 L1249.3 690.331 L1249.86 690.331 L1250.42 690.331 L1250.98 690.331 L1251.54 690.331 L1252.09 690.331 L1252.65 690.331 L1253.21 690.331 L1253.77 690.331 L1254.33 690.331 L1254.89 690.331 L1255.45 690.331 L1256.01 690.331 L1256.57 690.331 L1257.13 690.331 L1257.69 690.331 L1258.25 690.331 L1258.81 690.331 L1259.36 690.331 L1259.92 690.331 L1260.48 690.331 L1261.04 690.331 L1261.6 690.331 L1262.16 690.331 L1262.72 690.331 L1263.28 690.331 L1263.84 690.331 L1264.4 690.331 L1264.96 690.331 L1265.52 690.331 L1266.08 690.331 L1266.63 690.331 L1267.19 690.331 L1267.75 690.331 L1268.31 690.331 L1268.87 690.331 L1269.43 690.331 L1269.99 690.331 L1270.55 690.331 L1271.11 690.331 L1271.67 690.331 L1272.23 690.331 L1272.79 690.331 L1273.35 690.331 L1273.91 690.331 L1274.46 690.331 L1275.02 690.331 L1275.58 690.331 L1276.14 690.331 L1276.7 690.331 L1277.26 690.331 L1277.82 690.331 L1278.38 690.331 L1278.94 690.331 L1279.5 690.331 L1280.06 690.331 L1280.62 690.331 L1281.18 690.331 L1281.73 690.331 L1282.29 690.331 L1282.85 690.331 L1283.41 690.331 L1283.97 690.331 L1284.53 690.331 L1285.09 690.331 L1285.65 690.331 L1286.21 690.331 L1286.77 690.331 L1287.33 690.331 L1287.89 690.331 L1288.45 690.331 L1289 690.331 L1289.56 690.331 L1290.12 690.331 L1290.68 690.331 L1291.24 690.331 L1291.8 690.331 L1292.36 690.331 L1292.92 690.331 L1293.48 690.331 L1294.04 690.331 L1294.6 690.331 L1295.16 690.331 L1295.72 690.331 L1296.28 690.331 L1296.83 690.331 L1297.39 690.331 L1297.95 690.331 L1298.51 690.331 L1299.07 690.331 L1299.63 690.331 L1300.19 690.331 L1300.75 690.331 L1301.31 690.331 L1301.87 690.331 L1302.43 690.331 L1302.99 690.331 L1303.55 690.331 L1304.1 690.331 L1304.66 690.331 L1305.22 690.331 L1305.78 690.331 L1306.34 690.331 L1306.9 690.331 L1307.46 690.331 L1308.02 690.331 L1308.58 690.331 L1309.14 690.331 L1309.7 690.331 L1310.26 690.331 L1310.82 690.331 L1311.38 690.331 L1311.93 690.331 L1312.49 690.331 L1313.05 690.331 L1313.61 690.331 L1314.17 690.331 L1314.73 690.331 L1315.29 690.331 L1315.85 690.331 L1316.41 690.331 L1316.97 690.331 L1317.53 690.331 L1318.09 690.331 L1318.65 690.331 L1319.2 690.331 L1319.76 690.331 L1320.32 690.331 L1320.88 690.331 L1321.44 690.331 L1322 690.331 L1322.56 690.331 L1323.12 690.331 L1323.68 690.331 L1324.24 690.331 L1324.8 690.331 L1325.36 690.331 L1325.92 690.331 L1326.47 690.331 L1327.03 690.331 L1327.59 690.331 L1328.15 690.331 L1328.71 690.331 L1329.27 690.331 L1329.83 690.331 L1330.39 690.331 L1330.95 690.331 L1331.51 690.331 L1332.07 690.331 L1332.63 690.331 L1333.19 690.331 L1333.75 690.331 L1334.3 690.331 L1334.86 690.331 L1335.42 690.331 L1335.98 690.331 L1336.54 690.331 L1337.1 690.331 L1337.66 690.331 L1338.22 690.331 L1338.78 690.331 L1339.34 690.331 L1339.9 690.331 L1340.46 690.331 L1341.02 690.331 L1341.57 690.331 L1342.13 690.331 L1342.69 690.331 L1343.25 690.331 L1343.81 690.331 L1344.37 690.331 L1344.93 690.331 L1345.49 690.331 L1346.05 690.331 L1346.61 690.331 L1347.17 690.331 L1347.73 690.331 L1348.29 690.331 L1348.84 690.331 L1349.4 690.331 L1349.96 690.331 L1350.52 690.331 L1351.08 690.331 L1351.64 690.331 L1352.2 690.331 L1352.76 690.331 L1353.32 690.331 L1353.88 690.331 L1354.44 690.331 L1355 690.331 L1355.56 690.331 L1356.12 690.331 L1356.67 690.331 L1357.23 690.331 L1357.79 690.331 L1358.35 690.331 L1358.91 690.331 L1359.47 690.331 L1360.03 690.331 L1360.59 690.331 L1361.15 690.331 L1361.71 690.331 L1362.27 690.331 L1362.83 690.331 L1363.39 690.331 L1363.94 690.331 L1364.5 690.331 L1365.06 690.331 L1365.62 690.331 L1366.18 690.331 L1366.74 690.331 L1367.3 690.331 L1367.86 690.331 L1368.42 690.331 L1368.98 690.331 L1369.54 690.331 L1370.1 690.331 L1370.66 690.331 L1371.21 690.331 L1371.77 690.331 L1372.33 690.331 L1372.89 690.331 L1373.45 690.331 L1374.01 690.331 L1374.57 690.331 L1375.13 690.331 L1375.69 690.331 L1376.25 690.331 L1376.81 690.331 L1377.37 690.331 L1377.93 690.331 L1378.49 690.331 L1379.04 690.331 L1379.6 690.331 L1380.16 690.331 L1380.72 690.331 L1381.28 690.331 L1381.84 690.331 L1382.4 690.331 L1382.96 690.331 L1383.52 690.331 L1384.08 690.331 L1384.64 690.331 L1385.2 690.331 L1385.76 690.331 L1386.31 690.331 L1386.87 690.331 L1387.43 690.331 L1387.99 690.331 L1388.55 690.331 L1389.11 690.331 L1389.67 690.331 L1390.23 690.331 L1390.79 690.331 L1391.35 690.331 L1391.91 690.331 L1392.47 690.331 L1393.03 690.331 L1393.58 690.331 L1394.14 690.331 L1394.7 690.331 L1395.26 690.331 L1395.82 690.331 L1396.38 690.331 L1396.94 690.331 L1397.5 690.331 L1398.06 690.331 L1398.62 690.331 L1399.18 690.331 L1399.74 690.331 L1400.3 690.331 L1400.86 690.331 L1401.41 690.331 L1401.97 690.331 L1402.53 690.331 L1403.09 690.331 L1403.65 690.331 L1404.21 690.331 L1404.77 690.331 L1405.33 690.331 L1405.89 690.331 L1406.45 690.331 L1407.01 690.331 L1407.57 690.331 L1408.13 690.331 L1408.68 690.331 L1409.24 690.331 L1409.8 690.331 L1410.36 690.331 L1410.92 690.331 L1411.48 690.331 L1412.04 690.331 L1412.6 690.331 L1413.16 690.331 L1413.72 690.331 L1414.28 690.331 L1414.84 690.331 L1415.4 690.331 L1415.95 690.331 L1416.51 690.331 L1417.07 690.331 L1417.63 690.331 L1418.19 690.331 L1418.75 690.331 L1419.31 690.331 L1419.87 690.331 L1420.43 690.331 L1420.99 690.331 L1421.55 690.331 L1422.11 690.331 L1422.67 690.331 L1423.23 690.331 L1423.78 690.331 L1424.34 690.331 L1424.9 690.331 L1425.46 690.331 L1426.02 690.331 L1426.58 690.331 L1427.14 690.331 L1427.7 690.331 L1428.26 690.331 L1428.82 690.331 L1429.38 690.331 L1429.94 690.331 L1430.5 690.331 L1431.05 690.331 L1431.61 690.331 L1432.17 690.331 L1432.73 690.331 L1433.29 690.331 L1433.85 690.331 L1434.41 690.331 L1434.97 690.331 L1435.53 690.331 L1436.09 690.331 L1436.65 690.331 L1437.21 690.331 L1437.77 690.331 L1438.33 690.331 L1438.88 690.331 L1439.44 690.331 L1440 690.331 L1440.56 690.331 L1441.12 690.331 L1441.68 690.331 L1442.24 690.331 L1442.8 690.331 L1443.36 690.331 L1443.92 690.331 L1444.48 690.331 L1445.04 690.331 L1445.6 690.331 L1446.15 690.331 L1446.71 690.331 L1447.27 690.331 L1447.83 690.331 L1448.39 690.331 L1448.95 690.331 L1449.51 690.331 L1450.07 690.331 L1450.63 690.331 L1451.19 690.331 L1451.75 690.331 L1452.31 690.331 L1452.87 690.331 L1453.42 690.331 L1453.98 690.331 L1454.54 690.331 L1455.1 690.331 L1455.66 690.331 L1456.22 690.331 L1456.78 690.331 L1457.34 690.331 L1457.9 690.331 L1458.46 690.331 L1459.02 690.331 L1459.58 690.331 L1460.14 690.331 L1460.7 690.331 L1461.25 690.331 L1461.81 690.331 L1462.37 690.331 L1462.93 690.331 L1463.49 690.331 L1464.05 690.331 L1464.61 690.331 L1465.17 690.331 L1465.73 690.331 L1466.29 690.331 L1466.85 690.331 L1467.41 690.331 L1467.97 690.331 L1468.52 690.331 L1469.08 690.331 L1469.64 690.331 L1470.2 690.331 L1470.76 690.331 L1471.32 690.331 L1471.88 690.331 L1472.44 690.331 L1473 690.331 L1473.56 690.331 L1474.12 690.331 L1474.68 690.331 L1475.24 690.331 L1475.79 690.331 L1476.35 690.331 L1476.91 690.331 L1477.47 690.331 L1478.03 690.331 L1478.59 690.331 L1479.15 690.331 L1479.71 690.331 L1480.27 690.331 L1480.83 690.331 L1481.39 690.331 L1481.95 690.331 L1482.51 690.331 L1483.07 690.331 L1483.62 690.331 L1484.18 690.331 L1484.74 690.331 L1485.3 690.331 L1485.86 690.331 L1486.42 690.331 L1486.98 690.331 L1487.54 690.331 L1488.1 690.331 L1488.66 690.331 L1489.22 690.331 L1489.78 690.331 L1490.34 690.331 L1490.89 690.331 L1491.45 690.331 L1492.01 690.331 L1492.57 690.331 L1493.13 690.331 L1493.69 690.331 L1494.25 690.331 L1494.81 690.331 L1495.37 690.331 L1495.93 690.331 L1496.49 690.331 L1497.05 690.331 L1497.61 690.331 L1498.16 690.331 L1498.72 690.331 L1499.28 690.331 L1499.84 690.331 L1500.4 690.331 L1500.96 690.331 L1501.52 690.331 L1502.08 690.331 L1502.64 690.331 L1503.2 690.331 L1503.76 690.331 L1504.32 690.331 L1504.88 690.331 L1505.44 690.331 L1505.99 690.331 L1506.55 690.331 L1507.11 690.331 L1507.67 690.331 L1508.23 690.331 L1508.79 690.331 L1509.35 690.331 L1509.91 690.331 L1510.47 690.331 L1511.03 690.331 L1511.59 690.331 L1512.15 690.331 L1512.71 690.331 L1513.26 690.331 L1513.82 690.331 L1514.38 690.331 L1514.94 690.331 L1515.5 690.331 L1516.06 690.331 L1516.62 690.331 L1517.18 690.331 L1517.74 690.331 L1518.3 690.331 L1518.86 690.331 L1519.42 690.331 L1519.98 690.331 L1520.53 690.331 L1521.09 690.331 L1521.65 690.331 L1522.21 690.331 L1522.77 690.331 L1523.33 690.331 L1523.89 690.331 L1524.45 690.331 L1525.01 690.331 L1525.57 690.331 L1526.13 690.331 L1526.69 690.331 L1527.25 690.331 L1527.81 690.331 L1528.36 690.331 L1528.92 690.331 L1529.48 690.331 L1530.04 690.331 L1530.6 690.331 L1531.16 690.331 L1531.72 690.331 L1532.28 690.331 L1532.84 690.331 L1533.4 690.331 L1533.96 690.331 L1534.52 690.331 L1535.08 690.331 L1535.63 690.331 L1536.19 690.331 L1536.75 690.331 L1537.31 690.331 L1537.87 690.331 L1538.43 690.331 L1538.99 690.331 L1539.55 690.331 L1540.11 690.331 L1540.67 690.331 L1541.23 690.331 L1541.79 690.331 L1542.35 690.331 L1542.9 690.331 L1543.46 690.331 L1544.02 690.331 L1544.58 690.331 L1545.14 690.331 L1545.7 690.331 L1546.26 690.331 L1546.82 690.331 L1547.38 690.331 L1547.94 690.331 L1548.5 690.331 L1549.06 690.331 L1549.62 690.331 L1550.18 690.331 L1550.73 690.331 L1551.29 690.331 L1551.85 690.331 L1552.41 690.331 L1552.97 690.331 L1553.53 690.331 L1554.09 690.331 L1554.65 690.331 L1555.21 690.331 L1555.77 690.331 L1556.33 690.331 L1556.89 690.331 L1557.45 690.331 L1558 690.331 L1558.56 690.331 L1559.12 690.331 L1559.68 690.331 L1560.24 690.331 L1560.8 690.331 L1561.36 690.331 L1561.92 690.331 L1562.48 690.331 L1563.04 690.331 L1563.6 690.331 L1564.16 690.331 L1564.72 690.331 L1565.28 690.331 L1565.83 690.331 L1566.39 690.331 L1566.95 690.331 L1567.51 690.331 L1568.07 690.331 L1568.63 690.331 L1569.19 690.331 L1569.75 690.331 L1570.31 690.331 L1570.87 690.331 L1571.43 690.331 L1571.99 690.331 L1572.55 690.331 L1573.1 690.331 L1573.66 690.331 L1574.22 690.331 L1574.78 690.331 L1575.34 690.331 L1575.9 690.331 L1576.46 690.331 L1577.02 690.331 L1577.58 690.331 L1578.14 690.331 L1578.7 690.331 L1579.26 690.331 L1579.82 690.331 L1580.37 690.331 L1580.93 690.331 L1581.49 690.331 L1582.05 690.331 L1582.61 690.331 L1583.17 690.331 L1583.73 690.331 L1584.29 690.331 L1584.85 690.331 L1585.41 690.331 L1585.97 690.331 L1586.53 690.331 L1587.09 690.331 L1587.65 690.331 L1588.2 690.331 L1588.76 690.331 L1589.32 690.331 L1589.88 690.331 L1590.44 690.331 L1591 690.331 L1591.56 690.331 L1592.12 690.331 L1592.68 690.331 L1593.24 690.331 L1593.8 690.331 L1594.36 690.331 L1594.92 690.331 L1595.47 690.331 L1596.03 690.331 L1596.59 690.331 L1597.15 690.331 L1597.71 690.331 L1598.27 690.331 L1598.83 690.331 L1599.39 690.331 L1599.95 690.331 L1600.51 690.331 L1601.07 690.331 L1601.63 690.331 L1602.19 690.331 L1602.74 690.331 L1603.3 690.331 L1603.86 690.331 L1604.42 690.331 L1604.98 690.331 L1605.54 690.331 L1606.1 690.331 L1606.66 690.331 L1607.22 690.331 L1607.78 690.331 L1608.34 690.331 L1608.9 690.331 L1609.46 690.331 L1610.02 690.331 L1610.57 690.331 L1611.13 690.331 L1611.69 690.331 L1612.25 690.331 L1612.81 690.331 L1613.37 690.331 L1613.93 690.331 L1614.49 690.331 L1615.05 690.331 L1615.61 690.331 L1616.17 690.331 L1616.73 690.331 L1617.29 690.331 L1617.84 690.331 L1618.4 690.331 L1618.96 690.331 L1619.52 690.331 L1620.08 690.331 L1620.64 690.331 L1621.2 690.331 L1621.76 690.331 L1622.32 690.331 L1622.88 690.331 L1623.44 690.331 L1624 690.331 L1624.56 690.331 L1625.11 690.331 L1625.67 690.331 L1626.23 690.331 L1626.79 690.331 L1627.35 690.331 L1627.91 690.331 L1628.47 690.331 L1629.03 690.331 L1629.59 690.331 L1630.15 690.331 L1630.71 690.331 L1631.27 690.331 L1631.83 690.331 L1632.39 690.331 L1632.94 690.331 L1633.5 690.331 L1634.06 690.331 L1634.62 690.331 L1635.18 690.331 L1635.74 690.331 L1636.3 690.331 L1636.86 690.331 L1637.42 690.331 L1637.98 690.331 L1638.54 690.331 L1639.1 690.331 L1639.66 690.331 L1640.21 690.331 L1640.77 690.331 L1641.33 690.331 L1641.89 690.331 L1642.45 690.331 L1643.01 690.331 L1643.57 690.331 L1644.13 690.331 L1644.69 690.331 L1645.25 690.331 L1645.81 690.331 L1646.37 690.331 L1646.93 690.331 L1647.48 690.331 L1648.04 690.331 L1648.6 690.331 L1649.16 690.331 L1649.72 690.331 L1650.28 690.331 L1650.84 690.331 L1651.4 690.331 L1651.96 690.331 L1652.52 690.331 L1653.08 690.331 L1653.64 690.331 L1654.2 690.331 L1654.76 690.331 L1655.31 690.331 L1655.87 690.331 L1656.43 690.331 L1656.99 690.331 L1657.55 690.331 L1658.11 690.331 L1658.67 690.331 L1659.23 690.331 L1659.79 690.331 L1660.35 690.331 L1660.91 690.331 L1661.47 690.331 L1662.03 690.331 L1662.58 690.331 L1663.14 690.331 L1663.7 690.331 L1664.26 690.331 L1664.82 690.331 L1665.38 690.331 L1665.94 690.331 L1666.5 690.331 L1667.06 690.331 L1667.62 690.331 L1668.18 690.331 L1668.74 690.331 L1669.3 690.331 L1669.85 690.331 L1670.41 690.331 L1670.97 690.331 L1671.53 690.331 L1672.09 690.331 L1672.65 690.331 L1673.21 690.331 L1673.77 690.331 L1674.33 690.331 L1674.89 690.331 L1675.45 690.331 L1676.01 690.331 L1676.57 690.331 L1677.13 690.331 L1677.68 690.331 L1678.24 690.331 L1678.8 690.331 L1679.36 690.331 L1679.92 690.331 L1680.48 690.331 L1681.04 690.331 L1681.6 690.331 L1682.16 690.331 L1682.72 690.331 L1683.28 690.331 L1683.84 690.331 L1684.4 690.331 L1684.95 690.331 L1685.51 690.331 L1686.07 690.331 L1686.63 690.331 L1687.19 690.331 L1687.75 690.331 L1688.31 690.331 L1688.87 690.331 L1689.43 690.331 L1689.99 690.331 L1690.55 690.331 L1691.11 690.331 L1691.67 690.331 L1692.23 690.331 L1692.78 690.331 L1693.34 690.331 L1693.9 690.331 L1694.46 690.331 L1695.02 690.331 L1695.58 690.331 L1696.14 690.331 L1696.7 690.331 L1697.26 690.331 L1697.82 690.331 L1698.38 690.331 L1698.94 690.331 L1699.5 690.331 L1700.05 690.331 L1700.61 690.331 L1701.17 690.331 L1701.73 690.331 L1702.29 690.331 L1702.85 690.331 L1703.41 690.331 L1703.97 690.331 L1704.53 690.331 L1705.09 690.331 L1705.65 690.331 L1706.21 690.331 L1706.77 690.331 L1707.32 690.331 L1707.88 690.331 L1708.44 690.331 L1709 690.331 L1709.56 690.331 L1710.12 690.331 L1710.68 690.331 L1711.24 690.331 L1711.8 690.331 L1712.36 690.331 L1712.92 690.331 L1713.48 690.331 L1714.04 690.331 L1714.6 690.331 L1715.15 690.331 L1715.71 690.331 L1716.27 690.331 L1716.83 690.331 L1717.39 690.331 L1717.95 690.331 L1718.51 690.331 L1719.07 690.331 L1719.63 690.331 L1720.19 690.331 L1720.75 690.331 L1721.31 690.331 L1721.87 690.331 L1722.42 690.331 L1722.98 690.331 L1723.54 690.331 L1724.1 690.331 L1724.66 690.331 L1725.22 690.331 L1725.78 690.331 L1726.34 690.331 L1726.9 690.331 L1727.46 690.331 L1728.02 690.331 L1728.58 690.331 L1729.14 690.331 L1729.69 690.331 L1730.25 690.331 L1730.81 690.331 L1731.37 690.331 L1731.93 690.331 L1732.49 690.331 L1733.05 690.331 L1733.61 690.331 L1734.17 690.331 L1734.73 690.331 L1735.29 690.331 L1735.85 690.331 L1736.41 690.331 L1736.97 690.331 L1737.52 690.331 L1738.08 690.331 L1738.64 690.331 L1739.2 690.331 L1739.76 690.331 L1740.32 690.331 L1740.88 690.331 L1741.44 690.331 L1742 690.331 L1742.56 690.331 L1743.12 690.331 L1743.68 690.331 L1744.24 690.331 L1744.79 690.331 L1745.35 690.331 L1745.91 690.331 L1746.47 690.331 L1747.03 690.331 L1747.59 690.331 L1748.15 690.331 L1748.71 690.331 L1749.27 690.331 L1749.83 690.331 L1750.39 690.331 L1750.95 690.331 L1751.51 690.331 L1752.06 690.331 L1752.62 690.331 L1753.18 690.331 L1753.74 690.331 L1754.3 690.331 L1754.86 690.331 L1755.42 690.331 L1755.98 690.331 L1756.54 690.331 L1757.1 690.331 L1757.66 690.331 L1758.22 690.331 L1758.78 690.331 L1759.34 690.331 L1759.89 690.331 L1760.45 690.331 L1761.01 690.331 L1761.57 690.331 L1762.13 690.331 L1762.69 690.331 L1763.25 690.331 L1763.81 690.331 L1764.37 690.331 L1764.93 690.331 L1765.49 690.331 L1766.05 690.331 L1766.61 690.331 L1767.16 690.331 L1767.72 690.331 L1768.28 690.331 L1768.84 690.331 L1769.4 690.331 L1769.96 690.331 L1770.52 690.331 L1771.08 690.331 L1771.64 690.331 L1772.2 690.331 L1772.76 690.331 L1773.32 690.331 L1773.88 690.331 L1774.43 690.331 L1774.99 690.331 L1775.55 690.331 L1776.11 690.331 L1776.67 690.331 L1777.23 690.331 L1777.79 690.331 L1778.35 690.331 L1778.91 690.331 L1779.47 690.331 L1780.03 690.331 L1780.59 690.331 L1781.15 690.331 L1781.71 690.331 L1782.26 690.331 L1782.82 690.331 L1783.38 690.331 L1783.94 690.331 L1784.5 690.331 L1785.06 690.331 L1785.62 690.331 L1786.18 690.331 L1786.74 690.331 L1787.3 690.331 L1787.86 690.331 L1788.42 690.331 L1788.98 690.331 L1789.53 690.331 L1790.09 690.331 L1790.65 690.331 L1791.21 690.331 L1791.77 690.331 L1792.33 690.331 L1792.89 690.331 L1793.45 690.331 L1794.01 690.331 L1794.57 690.331 L1795.13 690.331 L1795.69 690.331 L1796.25 690.331 L1796.8 690.331 L1797.36 690.331 L1797.92 690.331 L1798.48 690.331 L1799.04 690.331 L1799.6 690.331 L1800.16 690.331 L1800.72 690.331 L1801.28 690.331 L1801.84 690.331 L1802.4 690.331 L1802.96 690.331 L1803.52 690.331 L1804.08 690.331 L1804.63 690.331 L1805.19 690.331 L1805.75 690.331 L1806.31 690.331 L1806.87 690.331 L1807.43 690.331 L1807.99 690.331 L1808.55 690.331 L1809.11 690.331 L1809.67 690.331 L1810.23 690.331 L1810.79 690.331 L1811.35 690.331 L1811.9 690.331 L1812.46 690.331 L1813.02 690.331 L1813.58 690.331 L1814.14 690.331 L1814.7 690.331 L1815.26 690.331 L1815.82 690.331 L1816.38 690.331 L1816.94 690.331 L1817.5 690.331 L1818.06 690.331 L1818.62 690.331 L1819.18 690.331 L1819.73 690.331 L1820.29 690.331 L1820.85 690.331 L1821.41 690.331 L1821.97 690.331 L1822.53 690.331 L1823.09 690.331 L1823.65 690.331 L1824.21 690.331 L1824.77 690.331 L1825.33 690.331 L1825.89 690.331 L1826.45 690.331 L1827 690.331 L1827.56 690.331 L1828.12 690.331 L1828.68 690.331 L1829.24 690.331 L1829.8 690.331 L1830.36 690.331 L1830.92 690.331 L1831.48 690.331 L1832.04 690.331 L1832.6 690.331 L1833.16 690.331 L1833.72 690.331 L1834.27 690.331 L1834.83 690.331 L1835.39 690.331 L1835.95 690.331 L1836.51 690.331 L1837.07 690.331 L1837.63 690.331 L1838.19 690.331 L1838.19 683.733 L1837.63 683.733 L1837.07 683.733 L1836.51 683.733 L1835.95 683.733 L1835.39 683.733 L1834.83 683.733 L1834.27 683.733 L1833.72 683.733 L1833.16 683.733 L1832.6 683.733 L1832.04 683.733 L1831.48 683.733 L1830.92 683.733 L1830.36 683.733 L1829.8 683.733 L1829.24 683.733 L1828.68 683.733 L1828.12 683.733 L1827.56 683.733 L1827 683.733 L1826.45 683.733 L1825.89 683.733 L1825.33 683.733 L1824.77 683.733 L1824.21 683.733 L1823.65 683.733 L1823.09 683.733 L1822.53 683.733 L1821.97 683.733 L1821.41 683.733 L1820.85 683.733 L1820.29 683.733 L1819.73 683.733 L1819.18 683.733 L1818.62 683.733 L1818.06 683.733 L1817.5 683.733 L1816.94 683.733 L1816.38 683.733 L1815.82 683.733 L1815.26 683.733 L1814.7 683.733 L1814.14 683.733 L1813.58 683.733 L1813.02 683.733 L1812.46 683.733 L1811.9 683.733 L1811.35 683.733 L1810.79 683.733 L1810.23 683.733 L1809.67 683.733 L1809.11 683.733 L1808.55 683.733 L1807.99 683.733 L1807.43 683.733 L1806.87 683.733 L1806.31 683.733 L1805.75 683.733 L1805.19 683.733 L1804.63 683.733 L1804.08 683.733 L1803.52 683.733 L1802.96 683.733 L1802.4 683.733 L1801.84 683.733 L1801.28 683.733 L1800.72 683.733 L1800.16 683.733 L1799.6 683.733 L1799.04 683.733 L1798.48 683.733 L1797.92 683.733 L1797.36 683.733 L1796.8 683.733 L1796.25 683.733 L1795.69 683.733 L1795.13 683.733 L1794.57 683.733 L1794.01 683.733 L1793.45 683.733 L1792.89 683.733 L1792.33 683.733 L1791.77 683.733 L1791.21 683.733 L1790.65 683.733 L1790.09 683.733 L1789.53 683.733 L1788.98 683.733 L1788.42 683.733 L1787.86 683.733 L1787.3 683.733 L1786.74 683.733 L1786.18 683.733 L1785.62 683.733 L1785.06 683.733 L1784.5 683.733 L1783.94 683.733 L1783.38 683.733 L1782.82 683.733 L1782.26 683.733 L1781.71 683.733 L1781.15 683.733 L1780.59 683.733 L1780.03 683.733 L1779.47 683.733 L1778.91 683.733 L1778.35 683.733 L1777.79 683.733 L1777.23 683.733 L1776.67 683.733 L1776.11 683.733 L1775.55 683.733 L1774.99 683.733 L1774.43 683.733 L1773.88 683.733 L1773.32 683.733 L1772.76 683.733 L1772.2 683.733 L1771.64 683.733 L1771.08 683.733 L1770.52 683.733 L1769.96 683.733 L1769.4 683.733 L1768.84 683.733 L1768.28 683.733 L1767.72 683.733 L1767.16 683.733 L1766.61 683.733 L1766.05 683.733 L1765.49 683.733 L1764.93 683.733 L1764.37 683.733 L1763.81 683.733 L1763.25 683.733 L1762.69 683.733 L1762.13 683.733 L1761.57 683.733 L1761.01 683.733 L1760.45 683.733 L1759.89 683.733 L1759.34 683.733 L1758.78 683.733 L1758.22 683.733 L1757.66 683.733 L1757.1 683.733 L1756.54 683.733 L1755.98 683.733 L1755.42 683.733 L1754.86 683.733 L1754.3 683.733 L1753.74 683.733 L1753.18 683.733 L1752.62 683.733 L1752.06 683.733 L1751.51 683.733 L1750.95 683.733 L1750.39 683.733 L1749.83 683.733 L1749.27 683.733 L1748.71 683.733 L1748.15 683.733 L1747.59 683.733 L1747.03 683.733 L1746.47 683.733 L1745.91 683.733 L1745.35 683.733 L1744.79 683.733 L1744.24 683.733 L1743.68 683.733 L1743.12 683.733 L1742.56 683.733 L1742 683.733 L1741.44 683.733 L1740.88 683.733 L1740.32 683.733 L1739.76 683.733 L1739.2 683.733 L1738.64 683.733 L1738.08 683.733 L1737.52 683.733 L1736.97 683.733 L1736.41 683.733 L1735.85 683.733 L1735.29 683.733 L1734.73 683.733 L1734.17 683.733 L1733.61 683.733 L1733.05 683.733 L1732.49 683.733 L1731.93 683.733 L1731.37 683.733 L1730.81 683.733 L1730.25 683.733 L1729.69 683.733 L1729.14 683.733 L1728.58 683.733 L1728.02 683.733 L1727.46 683.733 L1726.9 683.733 L1726.34 683.733 L1725.78 683.733 L1725.22 683.733 L1724.66 683.733 L1724.1 683.733 L1723.54 683.733 L1722.98 683.733 L1722.42 683.733 L1721.87 683.733 L1721.31 683.733 L1720.75 683.733 L1720.19 683.733 L1719.63 683.733 L1719.07 683.733 L1718.51 683.733 L1717.95 683.733 L1717.39 683.733 L1716.83 683.733 L1716.27 683.733 L1715.71 683.733 L1715.15 683.733 L1714.6 683.733 L1714.04 683.733 L1713.48 683.733 L1712.92 683.733 L1712.36 683.733 L1711.8 683.733 L1711.24 683.733 L1710.68 683.733 L1710.12 683.733 L1709.56 683.733 L1709 683.733 L1708.44 683.733 L1707.88 683.733 L1707.32 683.733 L1706.77 683.733 L1706.21 683.733 L1705.65 683.733 L1705.09 683.733 L1704.53 683.733 L1703.97 683.733 L1703.41 683.733 L1702.85 683.733 L1702.29 683.733 L1701.73 683.733 L1701.17 683.733 L1700.61 683.733 L1700.05 683.733 L1699.5 683.733 L1698.94 683.733 L1698.38 683.733 L1697.82 683.733 L1697.26 683.733 L1696.7 683.733 L1696.14 683.733 L1695.58 683.733 L1695.02 683.733 L1694.46 683.733 L1693.9 683.733 L1693.34 683.733 L1692.78 683.733 L1692.23 683.733 L1691.67 683.733 L1691.11 683.733 L1690.55 683.733 L1689.99 683.733 L1689.43 683.733 L1688.87 683.733 L1688.31 683.733 L1687.75 683.733 L1687.19 683.733 L1686.63 683.733 L1686.07 683.733 L1685.51 683.733 L1684.95 683.733 L1684.4 683.733 L1683.84 683.733 L1683.28 683.733 L1682.72 683.733 L1682.16 683.733 L1681.6 683.733 L1681.04 683.733 L1680.48 683.733 L1679.92 683.733 L1679.36 683.733 L1678.8 683.733 L1678.24 683.733 L1677.68 683.733 L1677.13 683.733 L1676.57 683.733 L1676.01 683.733 L1675.45 683.733 L1674.89 683.733 L1674.33 683.733 L1673.77 683.733 L1673.21 683.733 L1672.65 683.733 L1672.09 683.733 L1671.53 683.733 L1670.97 683.733 L1670.41 683.733 L1669.85 683.733 L1669.3 683.733 L1668.74 683.733 L1668.18 683.733 L1667.62 683.733 L1667.06 683.733 L1666.5 683.733 L1665.94 683.733 L1665.38 683.733 L1664.82 683.733 L1664.26 683.733 L1663.7 683.733 L1663.14 683.733 L1662.58 683.733 L1662.03 683.733 L1661.47 683.733 L1660.91 683.733 L1660.35 683.733 L1659.79 683.733 L1659.23 683.733 L1658.67 683.733 L1658.11 683.733 L1657.55 683.733 L1656.99 683.733 L1656.43 683.733 L1655.87 683.733 L1655.31 683.733 L1654.76 683.733 L1654.2 683.733 L1653.64 683.733 L1653.08 683.733 L1652.52 683.733 L1651.96 683.733 L1651.4 683.733 L1650.84 683.733 L1650.28 683.733 L1649.72 683.733 L1649.16 683.733 L1648.6 683.733 L1648.04 683.733 L1647.48 683.733 L1646.93 683.733 L1646.37 683.733 L1645.81 683.733 L1645.25 683.733 L1644.69 683.733 L1644.13 683.733 L1643.57 683.733 L1643.01 683.733 L1642.45 683.733 L1641.89 683.733 L1641.33 683.733 L1640.77 683.733 L1640.21 683.733 L1639.66 683.733 L1639.1 683.733 L1638.54 683.733 L1637.98 683.733 L1637.42 683.733 L1636.86 683.733 L1636.3 683.733 L1635.74 683.733 L1635.18 683.733 L1634.62 683.733 L1634.06 683.733 L1633.5 683.733 L1632.94 683.733 L1632.39 683.733 L1631.83 683.733 L1631.27 683.733 L1630.71 683.733 L1630.15 683.733 L1629.59 683.733 L1629.03 683.733 L1628.47 683.733 L1627.91 683.733 L1627.35 683.733 L1626.79 683.733 L1626.23 683.733 L1625.67 683.733 L1625.11 683.733 L1624.56 683.733 L1624 683.733 L1623.44 683.733 L1622.88 683.733 L1622.32 683.733 L1621.76 683.733 L1621.2 683.733 L1620.64 683.733 L1620.08 683.733 L1619.52 683.733 L1618.96 683.733 L1618.4 683.733 L1617.84 683.733 L1617.29 683.733 L1616.73 683.733 L1616.17 683.733 L1615.61 683.733 L1615.05 683.733 L1614.49 683.733 L1613.93 683.733 L1613.37 683.733 L1612.81 683.733 L1612.25 683.733 L1611.69 683.733 L1611.13 683.733 L1610.57 683.733 L1610.02 683.733 L1609.46 683.733 L1608.9 683.733 L1608.34 683.733 L1607.78 683.733 L1607.22 683.733 L1606.66 683.733 L1606.1 683.733 L1605.54 683.733 L1604.98 683.733 L1604.42 683.733 L1603.86 683.733 L1603.3 683.733 L1602.74 683.733 L1602.19 683.733 L1601.63 683.733 L1601.07 683.733 L1600.51 683.733 L1599.95 683.733 L1599.39 683.733 L1598.83 683.733 L1598.27 683.733 L1597.71 683.733 L1597.15 683.733 L1596.59 683.733 L1596.03 683.733 L1595.47 683.733 L1594.92 683.733 L1594.36 683.733 L1593.8 683.733 L1593.24 683.733 L1592.68 683.733 L1592.12 683.733 L1591.56 683.733 L1591 683.733 L1590.44 683.733 L1589.88 683.733 L1589.32 683.733 L1588.76 683.733 L1588.2 683.733 L1587.65 683.733 L1587.09 683.733 L1586.53 683.733 L1585.97 683.733 L1585.41 683.733 L1584.85 683.733 L1584.29 683.733 L1583.73 683.733 L1583.17 683.733 L1582.61 683.733 L1582.05 683.733 L1581.49 683.733 L1580.93 683.733 L1580.37 683.733 L1579.82 683.733 L1579.26 683.733 L1578.7 683.733 L1578.14 683.733 L1577.58 683.733 L1577.02 683.733 L1576.46 683.733 L1575.9 683.733 L1575.34 683.733 L1574.78 683.733 L1574.22 683.733 L1573.66 683.733 L1573.1 683.733 L1572.55 683.733 L1571.99 683.733 L1571.43 683.733 L1570.87 683.733 L1570.31 683.733 L1569.75 683.733 L1569.19 683.733 L1568.63 683.733 L1568.07 683.733 L1567.51 683.733 L1566.95 683.733 L1566.39 683.733 L1565.83 683.733 L1565.28 683.733 L1564.72 683.733 L1564.16 683.733 L1563.6 683.733 L1563.04 683.733 L1562.48 683.733 L1561.92 683.733 L1561.36 683.733 L1560.8 683.733 L1560.24 683.733 L1559.68 683.733 L1559.12 683.733 L1558.56 683.733 L1558 683.733 L1557.45 683.733 L1556.89 683.733 L1556.33 683.733 L1555.77 683.733 L1555.21 683.733 L1554.65 683.733 L1554.09 683.733 L1553.53 683.733 L1552.97 683.733 L1552.41 683.733 L1551.85 683.733 L1551.29 683.733 L1550.73 683.733 L1550.18 683.733 L1549.62 683.733 L1549.06 683.733 L1548.5 683.733 L1547.94 683.733 L1547.38 683.733 L1546.82 683.733 L1546.26 683.733 L1545.7 683.733 L1545.14 683.733 L1544.58 683.733 L1544.02 683.733 L1543.46 683.733 L1542.9 683.733 L1542.35 683.733 L1541.79 683.733 L1541.23 683.733 L1540.67 683.733 L1540.11 683.733 L1539.55 683.733 L1538.99 683.733 L1538.43 683.733 L1537.87 683.733 L1537.31 683.733 L1536.75 683.733 L1536.19 683.733 L1535.63 683.733 L1535.08 683.733 L1534.52 683.733 L1533.96 683.733 L1533.4 683.733 L1532.84 683.733 L1532.28 683.733 L1531.72 683.733 L1531.16 683.733 L1530.6 683.733 L1530.04 683.733 L1529.48 683.733 L1528.92 683.733 L1528.36 683.733 L1527.81 683.733 L1527.25 683.733 L1526.69 683.733 L1526.13 683.733 L1525.57 683.733 L1525.01 683.733 L1524.45 683.733 L1523.89 683.733 L1523.33 683.733 L1522.77 683.733 L1522.21 683.733 L1521.65 683.733 L1521.09 683.733 L1520.53 683.733 L1519.98 683.733 L1519.42 683.733 L1518.86 683.733 L1518.3 683.733 L1517.74 683.733 L1517.18 683.733 L1516.62 683.733 L1516.06 683.733 L1515.5 683.733 L1514.94 683.733 L1514.38 683.733 L1513.82 683.733 L1513.26 683.733 L1512.71 683.733 L1512.15 683.733 L1511.59 683.733 L1511.03 683.733 L1510.47 683.733 L1509.91 683.733 L1509.35 683.733 L1508.79 683.733 L1508.23 683.733 L1507.67 683.733 L1507.11 683.733 L1506.55 683.733 L1505.99 683.733 L1505.44 683.733 L1504.88 683.733 L1504.32 683.733 L1503.76 683.733 L1503.2 683.733 L1502.64 683.733 L1502.08 683.733 L1501.52 683.733 L1500.96 683.733 L1500.4 683.733 L1499.84 683.733 L1499.28 683.733 L1498.72 683.733 L1498.16 683.733 L1497.61 683.733 L1497.05 683.733 L1496.49 683.733 L1495.93 683.733 L1495.37 683.733 L1494.81 683.733 L1494.25 683.733 L1493.69 683.733 L1493.13 683.733 L1492.57 683.733 L1492.01 683.733 L1491.45 683.733 L1490.89 683.733 L1490.34 683.733 L1489.78 683.733 L1489.22 683.733 L1488.66 683.733 L1488.1 683.733 L1487.54 683.733 L1486.98 683.733 L1486.42 683.733 L1485.86 683.733 L1485.3 683.733 L1484.74 683.733 L1484.18 683.733 L1483.62 683.733 L1483.07 683.733 L1482.51 683.733 L1481.95 683.733 L1481.39 683.733 L1480.83 683.733 L1480.27 683.733 L1479.71 683.733 L1479.15 683.733 L1478.59 683.733 L1478.03 683.733 L1477.47 683.733 L1476.91 683.733 L1476.35 683.733 L1475.79 683.733 L1475.24 683.733 L1474.68 683.733 L1474.12 683.733 L1473.56 683.733 L1473 683.733 L1472.44 683.733 L1471.88 683.733 L1471.32 683.733 L1470.76 683.733 L1470.2 683.733 L1469.64 683.733 L1469.08 683.733 L1468.52 683.733 L1467.97 683.733 L1467.41 683.733 L1466.85 683.733 L1466.29 683.733 L1465.73 683.733 L1465.17 683.733 L1464.61 683.733 L1464.05 683.733 L1463.49 683.733 L1462.93 683.733 L1462.37 683.733 L1461.81 683.733 L1461.25 683.733 L1460.7 683.733 L1460.14 683.733 L1459.58 683.733 L1459.02 683.733 L1458.46 683.733 L1457.9 683.733 L1457.34 683.733 L1456.78 683.733 L1456.22 683.733 L1455.66 683.733 L1455.1 683.733 L1454.54 683.733 L1453.98 683.733 L1453.42 683.733 L1452.87 683.733 L1452.31 683.733 L1451.75 683.733 L1451.19 683.733 L1450.63 683.733 L1450.07 683.733 L1449.51 683.733 L1448.95 683.733 L1448.39 683.733 L1447.83 683.733 L1447.27 683.733 L1446.71 683.733 L1446.15 683.733 L1445.6 683.733 L1445.04 683.733 L1444.48 683.733 L1443.92 683.733 L1443.36 683.733 L1442.8 683.733 L1442.24 683.733 L1441.68 683.733 L1441.12 683.733 L1440.56 683.733 L1440 683.733 L1439.44 683.733 L1438.88 683.733 L1438.33 683.733 L1437.77 683.733 L1437.21 683.733 L1436.65 683.733 L1436.09 683.733 L1435.53 683.733 L1434.97 683.733 L1434.41 683.733 L1433.85 683.733 L1433.29 683.733 L1432.73 683.733 L1432.17 683.733 L1431.61 683.733 L1431.05 683.733 L1430.5 683.733 L1429.94 683.733 L1429.38 683.733 L1428.82 683.733 L1428.26 683.733 L1427.7 683.733 L1427.14 683.733 L1426.58 683.733 L1426.02 683.733 L1425.46 683.733 L1424.9 683.733 L1424.34 683.733 L1423.78 683.733 L1423.23 683.733 L1422.67 683.733 L1422.11 683.733 L1421.55 683.733 L1420.99 683.733 L1420.43 683.733 L1419.87 683.733 L1419.31 683.733 L1418.75 683.733 L1418.19 683.733 L1417.63 683.733 L1417.07 683.733 L1416.51 683.733 L1415.95 683.733 L1415.4 683.733 L1414.84 683.733 L1414.28 683.733 L1413.72 683.733 L1413.16 683.733 L1412.6 683.733 L1412.04 683.733 L1411.48 683.733 L1410.92 683.733 L1410.36 683.733 L1409.8 683.733 L1409.24 683.733 L1408.68 683.733 L1408.13 683.733 L1407.57 683.733 L1407.01 683.733 L1406.45 683.733 L1405.89 683.733 L1405.33 683.733 L1404.77 683.733 L1404.21 683.733 L1403.65 683.733 L1403.09 683.733 L1402.53 683.733 L1401.97 683.733 L1401.41 683.733 L1400.86 683.733 L1400.3 683.733 L1399.74 683.733 L1399.18 683.733 L1398.62 683.733 L1398.06 683.733 L1397.5 683.733 L1396.94 683.733 L1396.38 683.733 L1395.82 683.733 L1395.26 683.733 L1394.7 683.733 L1394.14 683.733 L1393.58 683.733 L1393.03 683.733 L1392.47 683.733 L1391.91 683.733 L1391.35 683.733 L1390.79 683.733 L1390.23 683.733 L1389.67 683.733 L1389.11 683.733 L1388.55 683.733 L1387.99 683.733 L1387.43 683.733 L1386.87 683.733 L1386.31 683.733 L1385.76 683.733 L1385.2 683.733 L1384.64 683.733 L1384.08 683.733 L1383.52 683.733 L1382.96 683.733 L1382.4 683.733 L1381.84 683.733 L1381.28 683.733 L1380.72 683.733 L1380.16 683.733 L1379.6 683.733 L1379.04 683.733 L1378.49 683.733 L1377.93 683.733 L1377.37 683.733 L1376.81 683.733 L1376.25 683.733 L1375.69 683.733 L1375.13 683.733 L1374.57 683.733 L1374.01 683.733 L1373.45 683.733 L1372.89 683.733 L1372.33 683.733 L1371.77 683.733 L1371.21 683.733 L1370.66 683.733 L1370.1 683.733 L1369.54 683.733 L1368.98 683.733 L1368.42 683.733 L1367.86 683.733 L1367.3 683.733 L1366.74 683.733 L1366.18 683.733 L1365.62 683.733 L1365.06 683.733 L1364.5 683.733 L1363.94 683.733 L1363.39 683.733 L1362.83 683.733 L1362.27 683.733 L1361.71 683.733 L1361.15 683.733 L1360.59 683.733 L1360.03 683.733 L1359.47 683.733 L1358.91 683.733 L1358.35 683.733 L1357.79 683.733 L1357.23 683.733 L1356.67 683.733 L1356.12 683.733 L1355.56 683.733 L1355 683.733 L1354.44 683.733 L1353.88 683.733 L1353.32 683.733 L1352.76 683.733 L1352.2 683.733 L1351.64 683.733 L1351.08 683.733 L1350.52 683.733 L1349.96 683.733 L1349.4 683.733 L1348.84 683.733 L1348.29 683.733 L1347.73 683.733 L1347.17 683.733 L1346.61 683.733 L1346.05 683.733 L1345.49 683.733 L1344.93 683.733 L1344.37 683.733 L1343.81 683.733 L1343.25 683.733 L1342.69 683.733 L1342.13 683.733 L1341.57 683.733 L1341.02 683.733 L1340.46 683.733 L1339.9 683.733 L1339.34 683.733 L1338.78 683.733 L1338.22 683.733 L1337.66 683.733 L1337.1 683.733 L1336.54 683.733 L1335.98 683.733 L1335.42 683.733 L1334.86 683.733 L1334.3 683.733 L1333.75 683.733 L1333.19 683.733 L1332.63 683.733 L1332.07 683.733 L1331.51 683.733 L1330.95 683.733 L1330.39 683.733 L1329.83 683.733 L1329.27 683.733 L1328.71 683.733 L1328.15 683.733 L1327.59 683.733 L1327.03 683.733 L1326.47 683.733 L1325.92 683.733 L1325.36 683.733 L1324.8 683.733 L1324.24 683.733 L1323.68 683.733 L1323.12 683.733 L1322.56 683.733 L1322 683.733 L1321.44 683.733 L1320.88 683.733 L1320.32 683.733 L1319.76 683.733 L1319.2 683.733 L1318.65 683.733 L1318.09 683.733 L1317.53 683.733 L1316.97 683.733 L1316.41 683.733 L1315.85 683.733 L1315.29 683.733 L1314.73 683.733 L1314.17 683.733 L1313.61 683.733 L1313.05 683.733 L1312.49 683.733 L1311.93 683.733 L1311.38 683.733 L1310.82 683.733 L1310.26 683.733 L1309.7 683.733 L1309.14 683.733 L1308.58 683.733 L1308.02 683.733 L1307.46 683.733 L1306.9 683.733 L1306.34 683.733 L1305.78 683.733 L1305.22 683.733 L1304.66 683.733 L1304.1 683.733 L1303.55 683.733 L1302.99 683.733 L1302.43 683.733 L1301.87 683.733 L1301.31 683.733 L1300.75 683.733 L1300.19 683.733 L1299.63 683.733 L1299.07 683.733 L1298.51 683.733 L1297.95 683.733 L1297.39 683.733 L1296.83 683.733 L1296.28 683.733 L1295.72 683.733 L1295.16 683.733 L1294.6 683.733 L1294.04 683.733 L1293.48 683.733 L1292.92 683.733 L1292.36 683.733 L1291.8 683.733 L1291.24 683.733 L1290.68 683.733 L1290.12 683.733 L1289.56 683.733 L1289 683.733 L1288.45 683.733 L1287.89 683.733 L1287.33 683.733 L1286.77 683.733 L1286.21 683.733 L1285.65 683.733 L1285.09 683.733 L1284.53 683.733 L1283.97 683.733 L1283.41 683.733 L1282.85 683.733 L1282.29 683.733 L1281.73 683.733 L1281.18 683.733 L1280.62 683.733 L1280.06 683.733 L1279.5 683.733 L1278.94 683.733 L1278.38 683.733 L1277.82 683.733 L1277.26 683.733 L1276.7 683.733 L1276.14 683.733 L1275.58 683.733 L1275.02 683.733 L1274.46 683.733 L1273.91 683.733 L1273.35 683.733 L1272.79 683.733 L1272.23 683.733 L1271.67 683.733 L1271.11 683.733 L1270.55 683.733 L1269.99 683.733 L1269.43 683.733 L1268.87 683.733 L1268.31 683.733 L1267.75 683.733 L1267.19 683.733 L1266.63 683.733 L1266.08 683.733 L1265.52 683.733 L1264.96 683.733 L1264.4 683.733 L1263.84 683.733 L1263.28 683.733 L1262.72 683.733 L1262.16 683.733 L1261.6 683.733 L1261.04 683.733 L1260.48 683.733 L1259.92 683.733 L1259.36 683.733 L1258.81 683.733 L1258.25 683.733 L1257.69 683.733 L1257.13 683.733 L1256.57 683.733 L1256.01 683.733 L1255.45 683.733 L1254.89 683.733 L1254.33 683.733 L1253.77 683.733 L1253.21 683.733 L1252.65 683.733 L1252.09 683.733 L1251.54 683.733 L1250.98 683.733 L1250.42 683.733 L1249.86 683.733 L1249.3 683.733 L1248.74 683.733 L1248.18 683.733 L1247.62 683.733 L1247.06 683.733 L1246.5 683.733 L1245.94 683.733 L1245.38 683.733 L1244.82 683.733 L1244.26 683.733 L1243.71 683.733 L1243.15 683.733 L1242.59 683.733 L1242.03 683.733 L1241.47 683.733 L1240.91 683.733 L1240.35 683.733 L1239.79 683.733 L1239.23 683.733 L1238.67 683.733 L1238.11 683.733 L1237.55 683.733 L1236.99 683.733 L1236.44 683.733 L1235.88 683.733 L1235.32 683.733 L1234.76 683.733 L1234.2 683.733 L1233.64 683.733 L1233.08 683.733 L1232.52 683.733 L1231.96 683.733 L1231.4 683.733 L1230.84 683.733 L1230.28 683.733 L1229.72 683.733 L1229.17 683.733 L1228.61 683.733 L1228.05 683.733 L1227.49 683.733 L1226.93 683.733 L1226.37 683.733 L1225.81 683.733 L1225.25 683.733 L1224.69 683.733 L1224.13 683.733 L1223.57 683.733 L1223.01 683.733 L1222.45 683.733 L1221.89 683.733 L1221.34 683.733 L1220.78 683.733 L1220.22 683.733 L1219.66 683.733 L1219.1 683.733 L1218.54 683.733 L1217.98 683.733 L1217.42 683.733 L1216.86 683.733 L1216.3 683.733 L1215.74 683.733 L1215.18 683.733 L1214.62 683.733 L1214.07 683.733 L1213.51 683.733 L1212.95 683.733 L1212.39 683.733 L1211.83 683.733 L1211.27 683.733 L1210.71 683.733 L1210.15 683.733 L1209.59 683.733 L1209.03 683.733 L1208.47 683.733 L1207.91 683.733 L1207.35 683.733 L1206.8 683.733 L1206.24 683.733 L1205.68 683.733 L1205.12 683.733 L1204.56 683.733 L1204 683.733 L1203.44 683.733 L1202.88 683.733 L1202.32 683.733 L1201.76 683.733 L1201.2 683.733 L1200.64 683.733 L1200.08 683.733 L1199.52 683.733 L1198.97 683.733 L1198.41 683.733 L1197.85 683.733 L1197.29 683.733 L1196.73 683.733 L1196.17 683.733 L1195.61 683.733 L1195.05 683.733 L1194.49 683.733 L1193.93 683.733 L1193.37 683.733 L1192.81 683.733 L1192.25 683.733 L1191.7 683.733 L1191.14 683.733 L1190.58 683.733 L1190.02 683.733 L1189.46 683.733 L1188.9 683.733 L1188.34 683.733 L1187.78 683.733 L1187.22 683.733 L1186.66 683.733 L1186.1 683.733 L1185.54 683.733 L1184.98 683.733 L1184.43 683.733 L1183.87 683.733 L1183.31 683.733 L1182.75 683.733 L1182.19 683.733 L1181.63 683.733 L1181.07 683.733 L1180.51 683.733 L1179.95 683.733 L1179.39 683.733 L1178.83 683.733 L1178.27 683.733 L1177.71 683.733 L1177.15 683.733 L1176.6 683.733 L1176.04 683.733 L1175.48 683.733 L1174.92 683.733 L1174.36 683.733 L1173.8 683.733 L1173.24 683.733 L1172.68 683.733 L1172.12 683.733 L1171.56 683.733 L1171 683.733 L1170.44 683.733 L1169.88 683.733 L1169.33 683.733 L1168.77 683.733 L1168.21 683.733 L1167.65 683.733 L1167.09 683.733 L1166.53 683.733 L1165.97 683.733 L1165.41 683.733 L1164.85 683.733 L1164.29 683.733 L1163.73 683.733 L1163.17 683.733 L1162.61 683.733 L1162.05 683.733 L1161.5 683.733 L1160.94 683.733 L1160.38 683.733 L1159.82 683.733 L1159.26 683.733 L1158.7 683.733 L1158.14 683.733 L1157.58 683.733 L1157.02 683.733 L1156.46 683.733 L1155.9 683.733 L1155.34 683.733 L1154.78 683.733 L1154.23 683.733 L1153.67 683.733 L1153.11 683.733 L1152.55 683.733 L1151.99 683.733 L1151.43 683.733 L1150.87 683.733 L1150.31 683.733 L1149.75 683.733 L1149.19 683.733 L1148.63 683.733 L1148.07 683.733 L1147.51 683.733 L1146.96 683.733 L1146.4 683.733 L1145.84 683.733 L1145.28 683.733 L1144.72 683.733 L1144.16 683.733 L1143.6 683.733 L1143.04 683.733 L1142.48 683.733 L1141.92 683.733 L1141.36 683.733 L1140.8 683.733 L1140.24 683.733 L1139.68 683.733 L1139.13 683.733 L1138.57 683.733 L1138.01 683.733 L1137.45 683.733 L1136.89 683.733 L1136.33 683.733 L1135.77 683.733 L1135.21 683.733 L1134.65 683.733 L1134.09 683.733 L1133.53 683.733 L1132.97 683.733 L1132.41 683.733 L1131.86 683.733 L1131.3 683.733 L1130.74 683.733 L1130.18 683.733 L1129.62 683.733 L1129.06 683.733 L1128.5 683.733 L1127.94 683.733 L1127.38 683.733 L1126.82 683.733 L1126.26 683.733 L1125.7 683.733 L1125.14 683.733 L1124.59 683.733 L1124.03 683.733 L1123.47 683.733 L1122.91 683.733 L1122.35 683.733 L1121.79 683.733 L1121.23 683.733 L1120.67 683.733 L1120.11 683.733 L1119.55 683.733 L1118.99 683.733 L1118.43 683.733 L1117.87 683.733 L1117.31 683.733 L1116.76 683.733 L1116.2 683.733 L1115.64 683.733 L1115.08 683.733 L1114.52 683.733 L1113.96 683.733 L1113.4 683.733 L1112.84 683.733 L1112.28 683.733 L1111.72 683.733 L1111.16 683.733 L1110.6 683.733 L1110.04 683.733 L1109.49 683.733 L1108.93 683.733 L1108.37 683.733 L1107.81 683.733 L1107.25 683.733 L1106.69 683.733 L1106.13 683.733 L1105.57 683.733 L1105.01 683.733 L1104.45 683.733 L1103.89 683.733 L1103.33 683.733 L1102.77 683.733 L1102.22 683.733 L1101.66 683.733 L1101.1 683.733 L1100.54 683.733 L1099.98 683.733 L1099.42 683.733 L1098.86 683.733 L1098.3 683.733 L1097.74 683.733 L1097.18 683.733 L1096.62 683.733 L1096.06 683.733 L1095.5 683.733 L1094.94 683.733 L1094.39 683.733 L1093.83 683.733 L1093.27 683.733 L1092.71 683.733 L1092.15 683.733 L1091.59 683.733 L1091.03 683.733 L1090.47 683.733 L1089.91 683.733 L1089.35 683.733 L1088.79 683.733 L1088.23 683.733 L1087.67 683.733 L1087.12 683.733 L1086.56 683.733 L1086 683.733 L1085.44 683.733 L1084.88 683.733 L1084.32 683.733 L1083.76 683.733 L1083.2 683.733 L1082.64 683.733 L1082.08 683.733 L1081.52 683.733 L1080.96 683.733 L1080.4 683.733 L1079.85 683.733 L1079.29 683.733 L1078.73 683.733 L1078.17 683.733 L1077.61 683.733 L1077.05 683.733 L1076.49 683.733 L1075.93 683.733 L1075.37 683.733 L1074.81 683.733 L1074.25 683.733 L1073.69 683.733 L1073.13 683.733 L1072.57 683.733 L1072.02 683.733 L1071.46 683.733 L1070.9 683.733 L1070.34 683.733 L1069.78 683.733 L1069.22 683.733 L1068.66 683.733 L1068.1 683.733 L1067.54 683.733 L1066.98 683.733 L1066.42 683.733 L1065.86 683.733 L1065.3 683.733 L1064.75 683.733 L1064.19 683.733 L1063.63 683.733 L1063.07 683.733 L1062.51 683.733 L1061.95 683.733 L1061.39 683.733 L1060.83 683.733 L1060.27 683.733 L1059.71 683.733 L1059.15 683.733 L1058.59 683.733 L1058.03 683.733 L1057.48 683.733 L1056.92 683.733 L1056.36 683.733 L1055.8 683.733 L1055.24 683.733 L1054.68 683.733 L1054.12 683.733 L1053.56 683.733 L1053 683.733 L1052.44 683.733 L1051.88 683.733 L1051.32 683.733 L1050.76 683.733 L1050.2 683.733 L1049.65 683.733 L1049.09 683.733 L1048.53 683.733 L1047.97 683.733 L1047.41 683.733 L1046.85 683.733 L1046.29 683.733 L1045.73 683.733 L1045.17 683.733 L1044.61 683.733 L1044.05 683.733 L1043.49 683.733 L1042.93 683.733 L1042.38 683.733 L1041.82 683.733 L1041.26 683.733 L1040.7 683.733 L1040.14 683.733 L1039.58 683.733 L1039.02 683.733 L1038.46 683.733 L1037.9 683.733 L1037.34 683.733 L1036.78 683.733 L1036.22 683.733 L1035.66 683.733 L1035.1 683.733 L1034.55 683.733 L1033.99 683.733 L1033.43 683.733 L1032.87 683.733 L1032.31 683.733 L1031.75 683.733 L1031.19 683.733 L1030.63 683.733 L1030.07 683.733 L1029.51 683.733 L1028.95 683.733 L1028.39 683.733 L1027.83 683.733 L1027.28 683.733 L1026.72 683.733 L1026.16 683.733 L1025.6 683.733 L1025.04 683.733 L1024.48 683.733 L1023.92 683.733 L1023.36 683.733 L1022.8 683.733 L1022.24 683.733 L1021.68 683.733 L1021.12 683.733 L1020.56 683.733 L1020.01 683.733 L1019.45 683.733 L1018.89 683.733 L1018.33 683.733 L1017.77 683.733 L1017.21 683.733 L1016.65 683.733 L1016.09 683.733 L1015.53 683.733 L1014.97 683.733 L1014.41 683.733 L1013.85 683.733 L1013.29 683.733 L1012.73 683.733 L1012.18 683.733 L1011.62 683.733 L1011.06 683.733 L1010.5 683.733 L1009.94 683.733 L1009.38 683.733 L1008.82 683.733 L1008.26 683.733 L1007.7 683.733 L1007.14 683.733 L1006.58 683.733 L1006.02 683.733 L1005.46 683.733 L1004.91 683.733 L1004.35 683.733 L1003.79 683.733 L1003.23 683.733 L1002.67 683.733 L1002.11 683.733 L1001.55 683.733 L1000.99 683.733 L1000.43 683.733 L999.872 683.733 L999.313 683.733 L998.754 683.733 L998.194 683.733 L997.635 683.733 L997.076 683.733 L996.517 683.733 L995.957 683.733 L995.398 683.733 L994.839 683.733 L994.28 683.733 L993.72 683.733 L993.161 683.733 L992.602 683.733 L992.043 683.733 L991.483 683.733 L990.924 683.733 L990.365 683.733 L989.806 683.733 L989.246 683.733 L988.687 683.733 L988.128 683.733 L987.569 683.733 L987.009 683.733 L986.45 683.733 L985.891 683.733 L985.332 683.733 L984.772 683.733 L984.213 683.733 L983.654 683.733 L983.095 683.733 L982.535 683.733 L981.976 683.733 L981.417 683.733 L980.858 683.733 L980.298 683.733 L979.739 683.733 L979.18 683.733 L978.621 683.733 L978.061 683.733 L977.502 683.733 L976.943 683.733 L976.384 683.733 L975.824 683.733 L975.265 683.733 L974.706 683.733 L974.147 683.733 L973.587 683.733 L973.028 683.733 L972.469 683.733 L971.91 683.733 L971.35 683.733 L970.791 683.733 L970.232 683.733 L969.673 683.733 L969.113 683.733 L968.554 683.733 L967.995 683.733 L967.436 683.733 L966.876 683.733 L966.317 683.733 L965.758 683.733 L965.199 683.733 L964.639 683.733 L964.08 683.733 L963.521 683.733 L962.962 683.733 L962.402 683.733 L961.843 683.733 L961.284 683.733 L960.725 683.733 L960.165 683.733 L959.606 683.733 L959.047 683.733 L958.488 683.733 L957.928 683.733 L957.369 683.733 L956.81 683.733 L956.251 683.733 L955.691 683.733 L955.132 683.733 L954.573 683.733 L954.014 683.733 L953.454 683.733 L952.895 683.733 L952.336 683.733 L951.777 683.733 L951.217 683.733 L950.658 683.733 L950.099 683.733 L949.54 683.733 L948.98 683.733 L948.421 683.733 L947.862 683.733 L947.303 683.733 L946.743 683.733 L946.184 683.733 L945.625 683.733 L945.066 683.733 L944.506 683.733 L943.947 683.733 L943.388 683.733 L942.829 683.733 L942.269 683.733 L941.71 683.733 L941.151 683.733 L940.592 683.733 L940.032 683.733 L939.473 683.733 L938.914 683.733 L938.355 683.733 L937.795 683.733 L937.236 683.733 L936.677 683.733 L936.118 683.733 L935.558 683.733 L934.999 683.733 L934.44 683.733 L933.881 683.733 L933.321 683.733 L932.762 683.733 L932.203 683.733 L931.644 683.733 L931.084 683.733 L930.525 683.733 L929.966 683.733 L929.406 683.733 L928.847 683.733 L928.288 683.733 L927.729 683.733 L927.169 683.733 L926.61 683.733 L926.051 683.733 L925.492 683.733 L924.932 683.733 L924.373 683.733 L923.814 683.733 L923.255 683.733 L922.695 683.733 L922.136 683.733 L921.577 683.733 L921.018 683.733 L920.458 683.733 L919.899 683.733 L919.34 683.733 L918.781 683.733 L918.221 683.733 L917.662 683.733 L917.103 683.733 L916.544 683.733 L915.984 683.733 L915.425 683.733 L914.866 683.733 L914.307 683.733 L913.747 683.733 L913.188 683.733 L912.629 683.733 L912.07 683.733 L911.51 683.733 L910.951 683.733 L910.392 683.733 L909.833 683.733 L909.273 683.733 L908.714 683.733 L908.155 683.733 L907.596 683.733 L907.036 683.733 L906.477 683.733 L905.918 683.733 L905.359 683.733 L904.799 683.733 L904.24 683.733 L903.681 683.733 L903.122 683.733 L902.562 683.733 L902.003 683.733 L901.444 683.733 L900.885 683.733 L900.325 683.733 L899.766 683.733 L899.207 683.733 L898.648 683.733 L898.088 683.733 L897.529 683.733 L896.97 683.733 L896.411 683.733 L895.851 683.733 L895.292 683.733 L894.733 683.733 L894.174 683.733 L893.614 683.733 L893.055 683.733 L892.496 683.733 L891.937 683.733 L891.377 683.733 L890.818 683.733 L890.259 683.733 L889.7 683.733 L889.14 683.733 L888.581 683.733 L888.022 683.733 L887.463 683.733 L886.903 683.733 L886.344 683.733 L885.785 683.733 L885.226 683.733 L884.666 683.733 L884.107 683.733 L883.548 683.733 L882.989 683.733 L882.429 683.733 L881.87 683.733 L881.311 683.733 L880.752 683.733 L880.192 683.733 L879.633 683.733 L879.074 683.733 L878.515 683.733 L877.955 683.733 L877.396 683.733 L876.837 683.733 L876.278 683.733 L875.718 683.733 L875.159 683.733 L874.6 683.733 L874.041 683.733 L873.481 683.733 L872.922 683.733 L872.363 683.733 L871.804 683.733 L871.244 683.733 L870.685 683.733 L870.126 683.733 L869.567 683.733 L869.007 683.733 L868.448 683.733 L867.889 683.733 L867.33 683.733 L866.77 683.733 L866.211 683.733 L865.652 683.733 L865.093 683.733 L864.533 683.733 L863.974 683.733 L863.415 683.733 L862.856 683.733 L862.296 683.733 L861.737 683.733 L861.178 683.733 L860.619 683.733 L860.059 683.733 L859.5 683.733 L858.941 683.733 L858.382 683.733 L857.822 683.733 L857.263 683.733 L856.704 683.733 L856.145 683.733 L855.585 683.733 L855.026 683.733 L854.467 683.733 L853.908 683.733 L853.348 683.733 L852.789 683.733 L852.23 683.733 L851.671 683.733 L851.111 683.733 L850.552 683.733 L849.993 683.733 L849.434 683.733 L848.874 683.733 L848.315 683.733 L847.756 683.733 L847.197 683.733 L846.637 683.733 L846.078 683.733 L845.519 683.733 L844.96 683.733 L844.4 683.733 L843.841 683.733 L843.282 683.733 L842.723 683.733 L842.163 683.733 L841.604 683.733 L841.045 683.733 L840.486 683.733 L839.926 683.733 L839.367 683.733 L838.808 683.733 L838.249 683.733 L837.689 683.733 L837.13 683.733 L836.571 683.733 L836.012 683.733 L835.452 683.733 L834.893 683.733 L834.334 683.733 L833.775 683.733 L833.215 683.733 L832.656 683.733 L832.097 683.733 L831.538 683.733 L830.978 683.733 L830.419 683.733 L829.86 683.733 L829.301 683.733 L828.741 683.733 L828.182 683.733 L827.623 683.733 L827.064 683.733 L826.504 683.733 L825.945 683.733 L825.386 683.733 L824.827 683.733 L824.267 683.733 L823.708 683.733 L823.149 683.733 L822.59 683.733 L822.03 683.733 L821.471 683.733 L820.912 683.733 L820.353 683.733 L819.793 683.733 L819.234 683.733 L818.675 683.733 L818.116 683.733 L817.556 683.733 L816.997 683.733 L816.438 683.733 L815.879 683.733 L815.319 683.733 L814.76 683.733 L814.201 683.733 L813.642 683.733 L813.082 683.733 L812.523 683.733 L811.964 683.733 L811.405 683.733 L810.845 683.733 L810.286 683.733 L809.727 683.733 L809.168 683.733 L808.608 683.733 L808.049 683.733 L807.49 683.733 L806.931 683.733 L806.371 683.733 L805.812 683.733 L805.253 683.733 L804.693 683.733 L804.134 683.733 L803.575 683.733 L803.016 683.733 L802.456 683.733 L801.897 683.733 L801.338 683.733 L800.779 683.733 L800.219 683.733 L799.66 683.733 L799.101 683.733 L798.542 683.733 L797.982 683.733 L797.423 683.733 L796.864 683.733 L796.305 683.733 L795.745 683.733 L795.186 683.733 L794.627 683.733 L794.068 683.733 L793.508 683.733 L792.949 683.733 L792.39 683.733 L791.831 683.733 L791.271 683.733 L790.712 683.733 L790.153 683.733 L789.594 683.733 L789.034 683.733 L788.475 683.733 L787.916 683.733 L787.357 683.733 L786.797 683.733 L786.238 683.733 L785.679 683.733 L785.12 683.733 L784.56 683.733 L784.001 683.733 L783.442 683.733 L782.883 683.733 L782.323 683.733 L781.764 683.733 L781.205 683.733 L780.646 683.733 L780.086 683.733 L779.527 683.733 L778.968 683.733 L778.409 683.733 L777.849 683.733 L777.29 683.733 L776.731 683.733 L776.172 683.733 L775.612 683.733 L775.053 683.733 L774.494 683.733 L773.935 683.733 L773.375 683.733 L772.816 683.733 L772.257 683.733 L771.698 683.733 L771.138 683.733 L770.579 683.733 L770.02 683.733 L769.461 683.733 L768.901 683.733 L768.342 683.733 L767.783 683.733 L767.224 683.733 L766.664 683.733 L766.105 683.733 L765.546 683.733 L764.987 683.733 L764.427 683.733 L763.868 683.733 L763.309 683.733 L762.75 683.733 L762.19 683.733 L761.631 683.733 L761.072 683.733 L760.513 683.733 L759.953 683.733 L759.394 683.733 L758.835 683.733 L758.276 683.733 L757.716 683.733 L757.157 683.733 L756.598 683.733 L756.039 683.733 L755.479 683.733 L754.92 683.733 L754.361 683.733 L753.802 683.733 L753.242 683.733 L752.683 683.733 L752.124 683.733 L751.565 683.733 L751.005 683.733 L750.446 683.733 L749.887 683.733 L749.328 683.733 L748.768 683.733 L748.209 683.733 L747.65 683.733 L747.091 683.733 L746.531 683.733 L745.972 683.733 L745.413 683.733 L744.854 683.733 L744.294 683.733 L743.735 683.733 L743.176 683.733 L742.617 683.733 L742.057 683.733 L741.498 683.733 L740.939 683.733 L740.38 683.733 L739.82 683.733 L739.261 683.733 L738.702 683.733 L738.143 683.733 L737.583 683.733 L737.024 683.733 L736.465 683.733 L735.906 683.733 L735.346 683.733 L734.787 683.733 L734.228 683.733 L733.669 683.733 L733.109 683.733 L732.55 683.733 L731.991 683.733 L731.432 683.733 L730.872 683.733 L730.313 683.733 L729.754 683.733 L729.195 683.733 L728.635 683.733 L728.076 683.733 L727.517 683.733 L726.958 683.733 L726.398 683.733 L725.839 683.733 L725.28 683.733 L724.721 683.733 L724.161 683.733 L723.602 683.733 L723.043 683.733 L722.484 683.733 L721.924 683.733 L721.365 683.733 L720.806 683.733 L720.247 683.733  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.032 720.806,687.032 721.365,687.032 721.924,687.032 722.484,687.032 723.043,687.032 723.602,687.032 724.161,687.032 724.721,687.032 725.28,687.032 725.839,687.032 726.398,687.032 726.958,687.032 727.517,687.032 728.076,687.032 728.635,687.032 729.195,687.032 729.754,687.032 730.313,687.032 730.872,687.032 731.432,687.032 731.991,687.032 732.55,687.032 733.109,687.032 733.669,687.032 734.228,687.032 734.787,687.032 735.346,687.032 735.906,687.032 736.465,687.032 737.024,687.032 737.583,687.032 738.143,687.032 738.702,687.032 739.261,687.032 739.82,687.032 740.38,687.032 740.939,687.032 741.498,687.032 742.057,687.032 742.617,687.032 743.176,687.032 743.735,687.032 744.294,687.032 744.854,687.032 745.413,687.032 745.972,687.032 746.531,687.032 747.091,687.032 747.65,687.032 748.209,687.032 748.768,687.032 749.328,687.032 749.887,687.032 750.446,687.032 751.005,687.032 751.565,687.032 752.124,687.032 752.683,687.032 753.242,687.032 753.802,687.032 754.361,687.032 754.92,687.032 755.479,687.032 756.039,687.032 756.598,687.032 757.157,687.032 757.716,687.032 758.276,687.032 758.835,687.032 759.394,687.032 759.953,687.032 760.513,687.032 761.072,687.032 761.631,687.032 762.19,687.032 762.75,687.032 763.309,687.032 763.868,687.032 764.427,687.032 764.987,687.032 765.546,687.032 766.105,687.032 766.664,687.032 767.224,687.032 767.783,687.032 768.342,687.032 768.901,687.032 769.461,687.032 770.02,687.032 770.579,687.032 771.138,687.032 771.698,687.032 772.257,687.032 772.816,687.032 773.375,687.032 773.935,687.032 774.494,687.032 775.053,687.032 775.612,687.032 776.172,687.032 776.731,687.032 777.29,687.032 777.849,687.032 778.409,687.032 778.968,687.032 779.527,687.032 780.086,687.032 780.646,687.032 781.205,687.032 781.764,687.032 782.323,687.032 782.883,687.032 783.442,687.032 784.001,687.032 784.56,687.032 785.12,687.032 785.679,687.032 786.238,687.032 786.797,687.032 787.357,687.032 787.916,687.032 788.475,687.032 789.034,687.032 789.594,687.032 790.153,687.032 790.712,687.032 791.271,687.032 791.831,687.032 792.39,687.032 792.949,687.032 793.508,687.032 794.068,687.032 794.627,687.032 795.186,687.032 795.745,687.032 796.305,687.032 796.864,687.032 797.423,687.032 797.982,687.032 798.542,687.032 799.101,687.032 799.66,687.032 800.219,687.032 800.779,687.032 801.338,687.032 801.897,687.032 802.456,687.032 803.016,687.032 803.575,687.032 804.134,687.032 804.693,687.032 805.253,687.032 805.812,687.032 806.371,687.032 806.931,687.032 807.49,687.032 808.049,687.032 808.608,687.032 809.168,687.032 809.727,687.032 810.286,687.032 810.845,687.032 811.405,687.032 811.964,687.032 812.523,687.032 813.082,687.032 813.642,687.032 814.201,687.032 814.76,687.032 815.319,687.032 815.879,687.032 816.438,687.032 816.997,687.032 817.556,687.032 818.116,687.032 818.675,687.032 819.234,687.032 819.793,687.032 820.353,687.032 820.912,687.032 821.471,687.032 822.03,687.032 822.59,687.032 823.149,687.032 823.708,687.032 824.267,687.032 824.827,687.032 825.386,687.032 825.945,687.032 826.504,687.032 827.064,687.032 827.623,687.032 828.182,687.032 828.741,687.032 829.301,687.032 829.86,687.032 830.419,687.032 830.978,687.032 831.538,687.032 832.097,687.032 832.656,687.032 833.215,687.032 833.775,687.032 834.334,687.032 834.893,687.032 835.452,687.032 836.012,687.032 836.571,687.032 837.13,687.032 837.689,687.032 838.249,687.032 838.808,687.032 839.367,687.032 839.926,687.032 840.486,687.032 841.045,687.032 841.604,687.032 842.163,687.032 842.723,687.032 843.282,687.032 843.841,687.032 844.4,687.032 844.96,687.032 845.519,687.032 846.078,687.032 846.637,687.032 847.197,687.032 847.756,687.032 848.315,687.032 848.874,687.032 849.434,687.032 849.993,687.032 850.552,687.032 851.111,687.032 851.671,687.032 852.23,687.032 852.789,687.032 853.348,687.032 853.908,687.032 854.467,687.032 855.026,687.032 855.585,687.032 856.145,687.032 856.704,687.032 857.263,687.032 857.822,687.032 858.382,687.032 858.941,687.032 859.5,687.032 860.059,687.032 860.619,687.032 861.178,687.032 861.737,687.032 862.296,687.032 862.856,687.032 863.415,687.032 863.974,687.032 864.533,687.032 865.093,687.032 865.652,687.032 866.211,687.032 866.77,687.032 867.33,687.032 867.889,687.032 868.448,687.032 869.007,687.032 869.567,687.032 870.126,687.032 870.685,687.032 871.244,687.032 871.804,687.032 872.363,687.032 872.922,687.032 873.481,687.032 874.041,687.032 874.6,687.032 875.159,687.032 875.718,687.032 876.278,687.032 876.837,687.032 877.396,687.032 877.955,687.032 878.515,687.032 879.074,687.032 879.633,687.032 880.192,687.032 880.752,687.032 881.311,687.032 881.87,687.032 882.429,687.032 882.989,687.032 883.548,687.032 884.107,687.032 884.666,687.032 885.226,687.032 885.785,687.032 886.344,687.032 886.903,687.032 887.463,687.032 888.022,687.032 888.581,687.032 889.14,687.032 889.7,687.032 890.259,687.032 890.818,687.032 891.377,687.032 891.937,687.032 892.496,687.032 893.055,687.032 893.614,687.032 894.174,687.032 894.733,687.032 895.292,687.032 895.851,687.032 896.411,687.032 896.97,687.032 897.529,687.032 898.088,687.032 898.648,687.032 899.207,687.032 899.766,687.032 900.325,687.032 900.885,687.032 901.444,687.032 902.003,687.032 902.562,687.032 903.122,687.032 903.681,687.032 904.24,687.032 904.799,687.032 905.359,687.032 905.918,687.032 906.477,687.032 907.036,687.032 907.596,687.032 908.155,687.032 908.714,687.032 909.273,687.032 909.833,687.032 910.392,687.032 910.951,687.032 911.51,687.032 912.07,687.032 912.629,687.032 913.188,687.032 913.747,687.032 914.307,687.032 914.866,687.032 915.425,687.032 915.984,687.032 916.544,687.032 917.103,687.032 917.662,687.032 918.221,687.032 918.781,687.032 919.34,687.032 919.899,687.032 920.458,687.032 921.018,687.032 921.577,687.032 922.136,687.032 922.695,687.032 923.255,687.032 923.814,687.032 924.373,687.032 924.932,687.032 925.492,687.032 926.051,687.032 926.61,687.032 927.169,687.032 927.729,687.032 928.288,687.032 928.847,687.032 929.406,687.032 929.966,687.032 930.525,687.032 931.084,687.032 931.644,687.032 932.203,687.032 932.762,687.032 933.321,687.032 933.881,687.032 934.44,687.032 934.999,687.032 935.558,687.032 936.118,687.032 936.677,687.032 937.236,687.032 937.795,687.032 938.355,687.032 938.914,687.032 939.473,687.032 940.032,687.032 940.592,687.032 941.151,687.032 941.71,687.032 942.269,687.032 942.829,687.032 943.388,687.032 943.947,687.032 944.506,687.032 945.066,687.032 945.625,687.032 946.184,687.032 946.743,687.032 947.303,687.032 947.862,687.032 948.421,687.032 948.98,687.032 949.54,687.032 950.099,687.032 950.658,687.032 951.217,687.032 951.777,687.032 952.336,687.032 952.895,687.032 953.454,687.032 954.014,687.032 954.573,687.032 955.132,687.032 955.691,687.032 956.251,687.032 956.81,687.032 957.369,687.032 957.928,687.032 958.488,687.032 959.047,687.032 959.606,687.032 960.165,687.032 960.725,687.032 961.284,687.032 961.843,687.032 962.402,687.032 962.962,687.032 963.521,687.032 964.08,687.032 964.639,687.032 965.199,687.032 965.758,687.032 966.317,687.032 966.876,687.032 967.436,687.032 967.995,687.032 968.554,687.032 969.113,687.032 969.673,687.032 970.232,687.032 970.791,687.032 971.35,687.032 971.91,687.032 972.469,687.032 973.028,687.032 973.587,687.032 974.147,687.032 974.706,687.032 975.265,687.032 975.824,687.032 976.384,687.032 976.943,687.032 977.502,687.032 978.061,687.032 978.621,687.032 979.18,687.032 979.739,687.032 980.298,687.032 980.858,687.032 981.417,687.032 981.976,687.032 982.535,687.032 983.095,687.032 983.654,687.032 984.213,687.032 984.772,687.032 985.332,687.032 985.891,687.032 986.45,687.032 987.009,687.032 987.569,687.032 988.128,687.032 988.687,687.032 989.246,687.032 989.806,687.032 990.365,687.032 990.924,687.032 991.483,687.032 992.043,687.032 992.602,687.032 993.161,687.032 993.72,687.032 994.28,687.032 994.839,687.032 995.398,687.032 995.957,687.032 996.517,687.032 997.076,687.032 997.635,687.032 998.194,687.032 998.754,687.032 999.313,687.032 999.872,687.032 1000.43,687.032 1000.99,687.032 1001.55,687.032 1002.11,687.032 1002.67,687.032 1003.23,687.032 1003.79,687.032 1004.35,687.032 1004.91,687.032 1005.46,687.032 1006.02,687.032 1006.58,687.032 1007.14,687.032 1007.7,687.032 1008.26,687.032 1008.82,687.032 1009.38,687.032 1009.94,687.032 1010.5,687.032 1011.06,687.032 1011.62,687.032 1012.18,687.032 1012.73,687.032 1013.29,687.032 1013.85,687.032 1014.41,687.032 1014.97,687.032 1015.53,687.032 1016.09,687.032 1016.65,687.032 1017.21,687.032 1017.77,687.032 1018.33,687.032 1018.89,687.032 1019.45,687.032 1020.01,687.032 1020.56,687.032 1021.12,687.032 1021.68,687.032 1022.24,687.032 1022.8,687.032 1023.36,687.032 1023.92,687.032 1024.48,687.032 1025.04,687.032 1025.6,687.032 1026.16,687.032 1026.72,687.032 1027.28,687.032 1027.83,687.032 1028.39,687.032 1028.95,687.032 1029.51,687.032 1030.07,687.032 1030.63,687.032 1031.19,687.032 1031.75,687.032 1032.31,687.032 1032.87,687.032 1033.43,687.032 1033.99,687.032 1034.55,687.032 1035.1,687.032 1035.66,687.032 1036.22,687.032 1036.78,687.032 1037.34,687.032 1037.9,687.032 1038.46,687.032 1039.02,687.032 1039.58,687.032 1040.14,687.032 1040.7,687.032 1041.26,687.032 1041.82,687.032 1042.38,687.032 1042.93,687.032 1043.49,687.032 1044.05,687.032 1044.61,687.032 1045.17,687.032 1045.73,687.032 1046.29,687.032 1046.85,687.032 1047.41,687.032 1047.97,687.032 1048.53,687.032 1049.09,687.032 1049.65,687.032 1050.2,687.032 1050.76,687.032 1051.32,687.032 1051.88,687.032 1052.44,687.032 1053,687.032 1053.56,687.032 1054.12,687.032 1054.68,687.032 1055.24,687.032 1055.8,687.032 1056.36,687.032 1056.92,687.032 1057.48,687.032 1058.03,687.032 1058.59,687.032 1059.15,687.032 1059.71,687.032 1060.27,687.032 1060.83,687.032 1061.39,687.032 1061.95,687.032 1062.51,687.032 1063.07,687.032 1063.63,687.032 1064.19,687.032 1064.75,687.032 1065.3,687.032 1065.86,687.032 1066.42,687.032 1066.98,687.032 1067.54,687.032 1068.1,687.032 1068.66,687.032 1069.22,687.032 1069.78,687.032 1070.34,687.032 1070.9,687.032 1071.46,687.032 1072.02,687.032 1072.57,687.032 1073.13,687.032 1073.69,687.032 1074.25,687.032 1074.81,687.032 1075.37,687.032 1075.93,687.032 1076.49,687.032 1077.05,687.032 1077.61,687.032 1078.17,687.032 1078.73,687.032 1079.29,687.032 1079.85,687.032 1080.4,687.032 1080.96,687.032 1081.52,687.032 1082.08,687.032 1082.64,687.032 1083.2,687.032 1083.76,687.032 1084.32,687.032 1084.88,687.032 1085.44,687.032 1086,687.032 1086.56,687.032 1087.12,687.032 1087.67,687.032 1088.23,687.032 1088.79,687.032 1089.35,687.032 1089.91,687.032 1090.47,687.032 1091.03,687.032 1091.59,687.032 1092.15,687.032 1092.71,687.032 1093.27,687.032 1093.83,687.032 1094.39,687.032 1094.94,687.032 1095.5,687.032 1096.06,687.032 1096.62,687.032 1097.18,687.032 1097.74,687.032 1098.3,687.032 1098.86,687.032 1099.42,687.032 1099.98,687.032 1100.54,687.032 1101.1,687.032 1101.66,687.032 1102.22,687.032 1102.77,687.032 1103.33,687.032 1103.89,687.032 1104.45,687.032 1105.01,687.032 1105.57,687.032 1106.13,687.032 1106.69,687.032 1107.25,687.032 1107.81,687.032 1108.37,687.032 1108.93,687.032 1109.49,687.032 1110.04,687.032 1110.6,687.032 1111.16,687.032 1111.72,687.032 1112.28,687.032 1112.84,687.032 1113.4,687.032 1113.96,687.032 1114.52,687.032 1115.08,687.032 1115.64,687.032 1116.2,687.032 1116.76,687.032 1117.31,687.032 1117.87,687.032 1118.43,687.032 1118.99,687.032 1119.55,687.032 1120.11,687.032 1120.67,687.032 1121.23,687.032 1121.79,687.032 1122.35,687.032 1122.91,687.032 1123.47,687.032 1124.03,687.032 1124.59,687.032 1125.14,687.032 1125.7,687.032 1126.26,687.032 1126.82,687.032 1127.38,687.032 1127.94,687.032 1128.5,687.032 1129.06,687.032 1129.62,687.032 1130.18,687.032 1130.74,687.032 1131.3,687.032 1131.86,687.032 1132.41,687.032 1132.97,687.032 1133.53,687.032 1134.09,687.032 1134.65,687.032 1135.21,687.032 1135.77,687.032 1136.33,687.032 1136.89,687.032 1137.45,687.032 1138.01,687.032 1138.57,687.032 1139.13,687.032 1139.68,687.032 1140.24,687.032 1140.8,687.032 1141.36,687.032 1141.92,687.032 1142.48,687.032 1143.04,687.032 1143.6,687.032 1144.16,687.032 1144.72,687.032 1145.28,687.032 1145.84,687.032 1146.4,687.032 1146.96,687.032 1147.51,687.032 1148.07,687.032 1148.63,687.032 1149.19,687.032 1149.75,687.032 1150.31,687.032 1150.87,687.032 1151.43,687.032 1151.99,687.032 1152.55,687.032 1153.11,687.032 1153.67,687.032 1154.23,687.032 1154.78,687.032 1155.34,687.032 1155.9,687.032 1156.46,687.032 1157.02,687.032 1157.58,687.032 1158.14,687.032 1158.7,687.032 1159.26,687.032 1159.82,687.032 1160.38,687.032 1160.94,687.032 1161.5,687.032 1162.05,687.032 1162.61,687.032 1163.17,687.032 1163.73,687.032 1164.29,687.032 1164.85,687.032 1165.41,687.032 1165.97,687.032 1166.53,687.032 1167.09,687.032 1167.65,687.032 1168.21,687.032 1168.77,687.032 1169.33,687.032 1169.88,687.032 1170.44,687.032 1171,687.032 1171.56,687.032 1172.12,687.032 1172.68,687.032 1173.24,687.032 1173.8,687.032 1174.36,687.032 1174.92,687.032 1175.48,687.032 1176.04,687.032 1176.6,687.032 1177.15,687.032 1177.71,687.032 1178.27,687.032 1178.83,687.032 1179.39,687.032 1179.95,687.032 1180.51,687.032 1181.07,687.032 1181.63,687.032 1182.19,687.032 1182.75,687.032 1183.31,687.032 1183.87,687.032 1184.43,687.032 1184.98,687.032 1185.54,687.032 1186.1,687.032 1186.66,687.032 1187.22,687.032 1187.78,687.032 1188.34,687.032 1188.9,687.032 1189.46,687.032 1190.02,687.032 1190.58,687.032 1191.14,687.032 1191.7,687.032 1192.25,687.032 1192.81,687.032 1193.37,687.032 1193.93,687.032 1194.49,687.032 1195.05,687.032 1195.61,687.032 1196.17,687.032 1196.73,687.032 1197.29,687.032 1197.85,687.032 1198.41,687.032 1198.97,687.032 1199.52,687.032 1200.08,687.032 1200.64,687.032 1201.2,687.032 1201.76,687.032 1202.32,687.032 1202.88,687.032 1203.44,687.032 1204,687.032 1204.56,687.032 1205.12,687.032 1205.68,687.032 1206.24,687.032 1206.8,687.032 1207.35,687.032 1207.91,687.032 1208.47,687.032 1209.03,687.032 1209.59,687.032 1210.15,687.032 1210.71,687.032 1211.27,687.032 1211.83,687.032 1212.39,687.032 1212.95,687.032 1213.51,687.032 1214.07,687.032 1214.62,687.032 1215.18,687.032 1215.74,687.032 1216.3,687.032 1216.86,687.032 1217.42,687.032 1217.98,687.032 1218.54,687.032 1219.1,687.032 1219.66,687.032 1220.22,687.032 1220.78,687.032 1221.34,687.032 1221.89,687.032 1222.45,687.032 1223.01,687.032 1223.57,687.032 1224.13,687.032 1224.69,687.032 1225.25,687.032 1225.81,687.032 1226.37,687.032 1226.93,687.032 1227.49,687.032 1228.05,687.032 1228.61,687.032 1229.17,687.032 1229.72,687.032 1230.28,687.032 1230.84,687.032 1231.4,687.032 1231.96,687.032 1232.52,687.032 1233.08,687.032 1233.64,687.032 1234.2,687.032 1234.76,687.032 1235.32,687.032 1235.88,687.032 1236.44,687.032 1236.99,687.032 1237.55,687.032 1238.11,687.032 1238.67,687.032 1239.23,687.032 1239.79,687.032 1240.35,687.032 1240.91,687.032 1241.47,687.032 1242.03,687.032 1242.59,687.032 1243.15,687.032 1243.71,687.032 1244.26,687.032 1244.82,687.032 1245.38,687.032 1245.94,687.032 1246.5,687.032 1247.06,687.032 1247.62,687.032 1248.18,687.032 1248.74,687.032 1249.3,687.032 1249.86,687.032 1250.42,687.032 1250.98,687.032 1251.54,687.032 1252.09,687.032 1252.65,687.032 1253.21,687.032 1253.77,687.032 1254.33,687.032 1254.89,687.032 1255.45,687.032 1256.01,687.032 1256.57,687.032 1257.13,687.032 1257.69,687.032 1258.25,687.032 1258.81,687.032 1259.36,687.032 1259.92,687.032 1260.48,687.032 1261.04,687.032 1261.6,687.032 1262.16,687.032 1262.72,687.032 1263.28,687.032 1263.84,687.032 1264.4,687.032 1264.96,687.032 1265.52,687.032 1266.08,687.032 1266.63,687.032 1267.19,687.032 1267.75,687.032 1268.31,687.032 1268.87,687.032 1269.43,687.032 1269.99,687.032 1270.55,687.032 1271.11,687.032 1271.67,687.032 1272.23,687.032 1272.79,687.032 1273.35,687.032 1273.91,687.032 1274.46,687.032 1275.02,687.032 1275.58,687.032 1276.14,687.032 1276.7,687.032 1277.26,687.032 1277.82,687.032 1278.38,687.032 1278.94,687.032 1279.5,687.032 1280.06,687.032 1280.62,687.032 1281.18,687.032 1281.73,687.032 1282.29,687.032 1282.85,687.032 1283.41,687.032 1283.97,687.032 1284.53,687.032 1285.09,687.032 1285.65,687.032 1286.21,687.032 1286.77,687.032 1287.33,687.032 1287.89,687.032 1288.45,687.032 1289,687.032 1289.56,687.032 1290.12,687.032 1290.68,687.032 1291.24,687.032 1291.8,687.032 1292.36,687.032 1292.92,687.032 1293.48,687.032 1294.04,687.032 1294.6,687.032 1295.16,687.032 1295.72,687.032 1296.28,687.032 1296.83,687.032 1297.39,687.032 1297.95,687.032 1298.51,687.032 1299.07,687.032 1299.63,687.032 1300.19,687.032 1300.75,687.032 1301.31,687.032 1301.87,687.032 1302.43,687.032 1302.99,687.032 1303.55,687.032 1304.1,687.032 1304.66,687.032 1305.22,687.032 1305.78,687.032 1306.34,687.032 1306.9,687.032 1307.46,687.032 1308.02,687.032 1308.58,687.032 1309.14,687.032 1309.7,687.032 1310.26,687.032 1310.82,687.032 1311.38,687.032 1311.93,687.032 1312.49,687.032 1313.05,687.032 1313.61,687.032 1314.17,687.032 1314.73,687.032 1315.29,687.032 1315.85,687.032 1316.41,687.032 1316.97,687.032 1317.53,687.032 1318.09,687.032 1318.65,687.032 1319.2,687.032 1319.76,687.032 1320.32,687.032 1320.88,687.032 1321.44,687.032 1322,687.032 1322.56,687.032 1323.12,687.032 1323.68,687.032 1324.24,687.032 1324.8,687.032 1325.36,687.032 1325.92,687.032 1326.47,687.032 1327.03,687.032 1327.59,687.032 1328.15,687.032 1328.71,687.032 1329.27,687.032 1329.83,687.032 1330.39,687.032 1330.95,687.032 1331.51,687.032 1332.07,687.032 1332.63,687.032 1333.19,687.032 1333.75,687.032 1334.3,687.032 1334.86,687.032 1335.42,687.032 1335.98,687.032 1336.54,687.032 1337.1,687.032 1337.66,687.032 1338.22,687.032 1338.78,687.032 1339.34,687.032 1339.9,687.032 1340.46,687.032 1341.02,687.032 1341.57,687.032 1342.13,687.032 1342.69,687.032 1343.25,687.032 1343.81,687.032 1344.37,687.032 1344.93,687.032 1345.49,687.032 1346.05,687.032 1346.61,687.032 1347.17,687.032 1347.73,687.032 1348.29,687.032 1348.84,687.032 1349.4,687.032 1349.96,687.032 1350.52,687.032 1351.08,687.032 1351.64,687.032 1352.2,687.032 1352.76,687.032 1353.32,687.032 1353.88,687.032 1354.44,687.032 1355,687.032 1355.56,687.032 1356.12,687.032 1356.67,687.032 1357.23,687.032 1357.79,687.032 1358.35,687.032 1358.91,687.032 1359.47,687.032 1360.03,687.032 1360.59,687.032 1361.15,687.032 1361.71,687.032 1362.27,687.032 1362.83,687.032 1363.39,687.032 1363.94,687.032 1364.5,687.032 1365.06,687.032 1365.62,687.032 1366.18,687.032 1366.74,687.032 1367.3,687.032 1367.86,687.032 1368.42,687.032 1368.98,687.032 1369.54,687.032 1370.1,687.032 1370.66,687.032 1371.21,687.032 1371.77,687.032 1372.33,687.032 1372.89,687.032 1373.45,687.032 1374.01,687.032 1374.57,687.032 1375.13,687.032 1375.69,687.032 1376.25,687.032 1376.81,687.032 1377.37,687.032 1377.93,687.032 1378.49,687.032 1379.04,687.032 1379.6,687.032 1380.16,687.032 1380.72,687.032 1381.28,687.032 1381.84,687.032 1382.4,687.032 1382.96,687.032 1383.52,687.032 1384.08,687.032 1384.64,687.032 1385.2,687.032 1385.76,687.032 1386.31,687.032 1386.87,687.032 1387.43,687.032 1387.99,687.032 1388.55,687.032 1389.11,687.032 1389.67,687.032 1390.23,687.032 1390.79,687.032 1391.35,687.032 1391.91,687.032 1392.47,687.032 1393.03,687.032 1393.58,687.032 1394.14,687.032 1394.7,687.032 1395.26,687.032 1395.82,687.032 1396.38,687.032 1396.94,687.032 1397.5,687.032 1398.06,687.032 1398.62,687.032 1399.18,687.032 1399.74,687.032 1400.3,687.032 1400.86,687.032 1401.41,687.032 1401.97,687.032 1402.53,687.032 1403.09,687.032 1403.65,687.032 1404.21,687.032 1404.77,687.032 1405.33,687.032 1405.89,687.032 1406.45,687.032 1407.01,687.032 1407.57,687.032 1408.13,687.032 1408.68,687.032 1409.24,687.032 1409.8,687.032 1410.36,687.032 1410.92,687.032 1411.48,687.032 1412.04,687.032 1412.6,687.032 1413.16,687.032 1413.72,687.032 1414.28,687.032 1414.84,687.032 1415.4,687.032 1415.95,687.032 1416.51,687.032 1417.07,687.032 1417.63,687.032 1418.19,687.032 1418.75,687.032 1419.31,687.032 1419.87,687.032 1420.43,687.032 1420.99,687.032 1421.55,687.032 1422.11,687.032 1422.67,687.032 1423.23,687.032 1423.78,687.032 1424.34,687.032 1424.9,687.032 1425.46,687.032 1426.02,687.032 1426.58,687.032 1427.14,687.032 1427.7,687.032 1428.26,687.032 1428.82,687.032 1429.38,687.032 1429.94,687.032 1430.5,687.032 1431.05,687.032 1431.61,687.032 1432.17,687.032 1432.73,687.032 1433.29,687.032 1433.85,687.032 1434.41,687.032 1434.97,687.032 1435.53,687.032 1436.09,687.032 1436.65,687.032 1437.21,687.032 1437.77,687.032 1438.33,687.032 1438.88,687.032 1439.44,687.032 1440,687.032 1440.56,687.032 1441.12,687.032 1441.68,687.032 1442.24,687.032 1442.8,687.032 1443.36,687.032 1443.92,687.032 1444.48,687.032 1445.04,687.032 1445.6,687.032 1446.15,687.032 1446.71,687.032 1447.27,687.032 1447.83,687.032 1448.39,687.032 1448.95,687.032 1449.51,687.032 1450.07,687.032 1450.63,687.032 1451.19,687.032 1451.75,687.032 1452.31,687.032 1452.87,687.032 1453.42,687.032 1453.98,687.032 1454.54,687.032 1455.1,687.032 1455.66,687.032 1456.22,687.032 1456.78,687.032 1457.34,687.032 1457.9,687.032 1458.46,687.032 1459.02,687.032 1459.58,687.032 1460.14,687.032 1460.7,687.032 1461.25,687.032 1461.81,687.032 1462.37,687.032 1462.93,687.032 1463.49,687.032 1464.05,687.032 1464.61,687.032 1465.17,687.032 1465.73,687.032 1466.29,687.032 1466.85,687.032 1467.41,687.032 1467.97,687.032 1468.52,687.032 1469.08,687.032 1469.64,687.032 1470.2,687.032 1470.76,687.032 1471.32,687.032 1471.88,687.032 1472.44,687.032 1473,687.032 1473.56,687.032 1474.12,687.032 1474.68,687.032 1475.24,687.032 1475.79,687.032 1476.35,687.032 1476.91,687.032 1477.47,687.032 1478.03,687.032 1478.59,687.032 1479.15,687.032 1479.71,687.032 1480.27,687.032 1480.83,687.032 1481.39,687.032 1481.95,687.032 1482.51,687.032 1483.07,687.032 1483.62,687.032 1484.18,687.032 1484.74,687.032 1485.3,687.032 1485.86,687.032 1486.42,687.032 1486.98,687.032 1487.54,687.032 1488.1,687.032 1488.66,687.032 1489.22,687.032 1489.78,687.032 1490.34,687.032 1490.89,687.032 1491.45,687.032 1492.01,687.032 1492.57,687.032 1493.13,687.032 1493.69,687.032 1494.25,687.032 1494.81,687.032 1495.37,687.032 1495.93,687.032 1496.49,687.032 1497.05,687.032 1497.61,687.032 1498.16,687.032 1498.72,687.032 1499.28,687.032 1499.84,687.032 1500.4,687.032 1500.96,687.032 1501.52,687.032 1502.08,687.032 1502.64,687.032 1503.2,687.032 1503.76,687.032 1504.32,687.032 1504.88,687.032 1505.44,687.032 1505.99,687.032 1506.55,687.032 1507.11,687.032 1507.67,687.032 1508.23,687.032 1508.79,687.032 1509.35,687.032 1509.91,687.032 1510.47,687.032 1511.03,687.032 1511.59,687.032 1512.15,687.032 1512.71,687.032 1513.26,687.032 1513.82,687.032 1514.38,687.032 1514.94,687.032 1515.5,687.032 1516.06,687.032 1516.62,687.032 1517.18,687.032 1517.74,687.032 1518.3,687.032 1518.86,687.032 1519.42,687.032 1519.98,687.032 1520.53,687.032 1521.09,687.032 1521.65,687.032 1522.21,687.032 1522.77,687.032 1523.33,687.032 1523.89,687.032 1524.45,687.032 1525.01,687.032 1525.57,687.032 1526.13,687.032 1526.69,687.032 1527.25,687.032 1527.81,687.032 1528.36,687.032 1528.92,687.032 1529.48,687.032 1530.04,687.032 1530.6,687.032 1531.16,687.032 1531.72,687.032 1532.28,687.032 1532.84,687.032 1533.4,687.032 1533.96,687.032 1534.52,687.032 1535.08,687.032 1535.63,687.032 1536.19,687.032 1536.75,687.032 1537.31,687.032 1537.87,687.032 1538.43,687.032 1538.99,687.032 1539.55,687.032 1540.11,687.032 1540.67,687.032 1541.23,687.032 1541.79,687.032 1542.35,687.032 1542.9,687.032 1543.46,687.032 1544.02,687.032 1544.58,687.032 1545.14,687.032 1545.7,687.032 1546.26,687.032 1546.82,687.032 1547.38,687.032 1547.94,687.032 1548.5,687.032 1549.06,687.032 1549.62,687.032 1550.18,687.032 1550.73,687.032 1551.29,687.032 1551.85,687.032 1552.41,687.032 1552.97,687.032 1553.53,687.032 1554.09,687.032 1554.65,687.032 1555.21,687.032 1555.77,687.032 1556.33,687.032 1556.89,687.032 1557.45,687.032 1558,687.032 1558.56,687.032 1559.12,687.032 1559.68,687.032 1560.24,687.032 1560.8,687.032 1561.36,687.032 1561.92,687.032 1562.48,687.032 1563.04,687.032 1563.6,687.032 1564.16,687.032 1564.72,687.032 1565.28,687.032 1565.83,687.032 1566.39,687.032 1566.95,687.032 1567.51,687.032 1568.07,687.032 1568.63,687.032 1569.19,687.032 1569.75,687.032 1570.31,687.032 1570.87,687.032 1571.43,687.032 1571.99,687.032 1572.55,687.032 1573.1,687.032 1573.66,687.032 1574.22,687.032 1574.78,687.032 1575.34,687.032 1575.9,687.032 1576.46,687.032 1577.02,687.032 1577.58,687.032 1578.14,687.032 1578.7,687.032 1579.26,687.032 1579.82,687.032 1580.37,687.032 1580.93,687.032 1581.49,687.032 1582.05,687.032 1582.61,687.032 1583.17,687.032 1583.73,687.032 1584.29,687.032 1584.85,687.032 1585.41,687.032 1585.97,687.032 1586.53,687.032 1587.09,687.032 1587.65,687.032 1588.2,687.032 1588.76,687.032 1589.32,687.032 1589.88,687.032 1590.44,687.032 1591,687.032 1591.56,687.032 1592.12,687.032 1592.68,687.032 1593.24,687.032 1593.8,687.032 1594.36,687.032 1594.92,687.032 1595.47,687.032 1596.03,687.032 1596.59,687.032 1597.15,687.032 1597.71,687.032 1598.27,687.032 1598.83,687.032 1599.39,687.032 1599.95,687.032 1600.51,687.032 1601.07,687.032 1601.63,687.032 1602.19,687.032 1602.74,687.032 1603.3,687.032 1603.86,687.032 1604.42,687.032 1604.98,687.032 1605.54,687.032 1606.1,687.032 1606.66,687.032 1607.22,687.032 1607.78,687.032 1608.34,687.032 1608.9,687.032 1609.46,687.032 1610.02,687.032 1610.57,687.032 1611.13,687.032 1611.69,687.032 1612.25,687.032 1612.81,687.032 1613.37,687.032 1613.93,687.032 1614.49,687.032 1615.05,687.032 1615.61,687.032 1616.17,687.032 1616.73,687.032 1617.29,687.032 1617.84,687.032 1618.4,687.032 1618.96,687.032 1619.52,687.032 1620.08,687.032 1620.64,687.032 1621.2,687.032 1621.76,687.032 1622.32,687.032 1622.88,687.032 1623.44,687.032 1624,687.032 1624.56,687.032 1625.11,687.032 1625.67,687.032 1626.23,687.032 1626.79,687.032 1627.35,687.032 1627.91,687.032 1628.47,687.032 1629.03,687.032 1629.59,687.032 1630.15,687.032 1630.71,687.032 1631.27,687.032 1631.83,687.032 1632.39,687.032 1632.94,687.032 1633.5,687.032 1634.06,687.032 1634.62,687.032 1635.18,687.032 1635.74,687.032 1636.3,687.032 1636.86,687.032 1637.42,687.032 1637.98,687.032 1638.54,687.032 1639.1,687.032 1639.66,687.032 1640.21,687.032 1640.77,687.032 1641.33,687.032 1641.89,687.032 1642.45,687.032 1643.01,687.032 1643.57,687.032 1644.13,687.032 1644.69,687.032 1645.25,687.032 1645.81,687.032 1646.37,687.032 1646.93,687.032 1647.48,687.032 1648.04,687.032 1648.6,687.032 1649.16,687.032 1649.72,687.032 1650.28,687.032 1650.84,687.032 1651.4,687.032 1651.96,687.032 1652.52,687.032 1653.08,687.032 1653.64,687.032 1654.2,687.032 1654.76,687.032 1655.31,687.032 1655.87,687.032 1656.43,687.032 1656.99,687.032 1657.55,687.032 1658.11,687.032 1658.67,687.032 1659.23,687.032 1659.79,687.032 1660.35,687.032 1660.91,687.032 1661.47,687.032 1662.03,687.032 1662.58,687.032 1663.14,687.032 1663.7,687.032 1664.26,687.032 1664.82,687.032 1665.38,687.032 1665.94,687.032 1666.5,687.032 1667.06,687.032 1667.62,687.032 1668.18,687.032 1668.74,687.032 1669.3,687.032 1669.85,687.032 1670.41,687.032 1670.97,687.032 1671.53,687.032 1672.09,687.032 1672.65,687.032 1673.21,687.032 1673.77,687.032 1674.33,687.032 1674.89,687.032 1675.45,687.032 1676.01,687.032 1676.57,687.032 1677.13,687.032 1677.68,687.032 1678.24,687.032 1678.8,687.032 1679.36,687.032 1679.92,687.032 1680.48,687.032 1681.04,687.032 1681.6,687.032 1682.16,687.032 1682.72,687.032 1683.28,687.032 1683.84,687.032 1684.4,687.032 1684.95,687.032 1685.51,687.032 1686.07,687.032 1686.63,687.032 1687.19,687.032 1687.75,687.032 1688.31,687.032 1688.87,687.032 1689.43,687.032 1689.99,687.032 1690.55,687.032 1691.11,687.032 1691.67,687.032 1692.23,687.032 1692.78,687.032 1693.34,687.032 1693.9,687.032 1694.46,687.032 1695.02,687.032 1695.58,687.032 1696.14,687.032 1696.7,687.032 1697.26,687.032 1697.82,687.032 1698.38,687.032 1698.94,687.032 1699.5,687.032 1700.05,687.032 1700.61,687.032 1701.17,687.032 1701.73,687.032 1702.29,687.032 1702.85,687.032 1703.41,687.032 1703.97,687.032 1704.53,687.032 1705.09,687.032 1705.65,687.032 1706.21,687.032 1706.77,687.032 1707.32,687.032 1707.88,687.032 1708.44,687.032 1709,687.032 1709.56,687.032 1710.12,687.032 1710.68,687.032 1711.24,687.032 1711.8,687.032 1712.36,687.032 1712.92,687.032 1713.48,687.032 1714.04,687.032 1714.6,687.032 1715.15,687.032 1715.71,687.032 1716.27,687.032 1716.83,687.032 1717.39,687.032 1717.95,687.032 1718.51,687.032 1719.07,687.032 1719.63,687.032 1720.19,687.032 1720.75,687.032 1721.31,687.032 1721.87,687.032 1722.42,687.032 1722.98,687.032 1723.54,687.032 1724.1,687.032 1724.66,687.032 1725.22,687.032 1725.78,687.032 1726.34,687.032 1726.9,687.032 1727.46,687.032 1728.02,687.032 1728.58,687.032 1729.14,687.032 1729.69,687.032 1730.25,687.032 1730.81,687.032 1731.37,687.032 1731.93,687.032 1732.49,687.032 1733.05,687.032 1733.61,687.032 1734.17,687.032 1734.73,687.032 1735.29,687.032 1735.85,687.032 1736.41,687.032 1736.97,687.032 1737.52,687.032 1738.08,687.032 1738.64,687.032 1739.2,687.032 1739.76,687.032 1740.32,687.032 1740.88,687.032 1741.44,687.032 1742,687.032 1742.56,687.032 1743.12,687.032 1743.68,687.032 1744.24,687.032 1744.79,687.032 1745.35,687.032 1745.91,687.032 1746.47,687.032 1747.03,687.032 1747.59,687.032 1748.15,687.032 1748.71,687.032 1749.27,687.032 1749.83,687.032 1750.39,687.032 1750.95,687.032 1751.51,687.032 1752.06,687.032 1752.62,687.032 1753.18,687.032 1753.74,687.032 1754.3,687.032 1754.86,687.032 1755.42,687.032 1755.98,687.032 1756.54,687.032 1757.1,687.032 1757.66,687.032 1758.22,687.032 1758.78,687.032 1759.34,687.032 1759.89,687.032 1760.45,687.032 1761.01,687.032 1761.57,687.032 1762.13,687.032 1762.69,687.032 1763.25,687.032 1763.81,687.032 1764.37,687.032 1764.93,687.032 1765.49,687.032 1766.05,687.032 1766.61,687.032 1767.16,687.032 1767.72,687.032 1768.28,687.032 1768.84,687.032 1769.4,687.032 1769.96,687.032 1770.52,687.032 1771.08,687.032 1771.64,687.032 1772.2,687.032 1772.76,687.032 1773.32,687.032 1773.88,687.032 1774.43,687.032 1774.99,687.032 1775.55,687.032 1776.11,687.032 1776.67,687.032 1777.23,687.032 1777.79,687.032 1778.35,687.032 1778.91,687.032 1779.47,687.032 1780.03,687.032 1780.59,687.032 1781.15,687.032 1781.71,687.032 1782.26,687.032 1782.82,687.032 1783.38,687.032 1783.94,687.032 1784.5,687.032 1785.06,687.032 1785.62,687.032 1786.18,687.032 1786.74,687.032 1787.3,687.032 1787.86,687.032 1788.42,687.032 1788.98,687.032 1789.53,687.032 1790.09,687.032 1790.65,687.032 1791.21,687.032 1791.77,687.032 1792.33,687.032 1792.89,687.032 1793.45,687.032 1794.01,687.032 1794.57,687.032 1795.13,687.032 1795.69,687.032 1796.25,687.032 1796.8,687.032 1797.36,687.032 1797.92,687.032 1798.48,687.032 1799.04,687.032 1799.6,687.032 1800.16,687.032 1800.72,687.032 1801.28,687.032 1801.84,687.032 1802.4,687.032 1802.96,687.032 1803.52,687.032 1804.08,687.032 1804.63,687.032 1805.19,687.032 1805.75,687.032 1806.31,687.032 1806.87,687.032 1807.43,687.032 1807.99,687.032 1808.55,687.032 1809.11,687.032 1809.67,687.032 1810.23,687.032 1810.79,687.032 1811.35,687.032 1811.9,687.032 1812.46,687.032 1813.02,687.032 1813.58,687.032 1814.14,687.032 1814.7,687.032 1815.26,687.032 1815.82,687.032 1816.38,687.032 1816.94,687.032 1817.5,687.032 1818.06,687.032 1818.62,687.032 1819.18,687.032 1819.73,687.032 1820.29,687.032 1820.85,687.032 1821.41,687.032 1821.97,687.032 1822.53,687.032 1823.09,687.032 1823.65,687.032 1824.21,687.032 1824.77,687.032 1825.33,687.032 1825.89,687.032 1826.45,687.032 1827,687.032 1827.56,687.032 1828.12,687.032 1828.68,687.032 1829.24,687.032 1829.8,687.032 1830.36,687.032 1830.92,687.032 1831.48,687.032 1832.04,687.032 1832.6,687.032 1833.16,687.032 1833.72,687.032 1834.27,687.032 1834.83,687.032 1835.39,687.032 1835.95,687.032 1836.51,687.032 1837.07,687.032 1837.63,687.032 1838.19,687.032 \"/>\n<path clip-path=\"url(#clip653)\" d=\"M720.247 684.735 L720.806 684.735 L721.365 684.735 L721.924 684.735 L722.484 684.735 L723.043 684.735 L723.602 684.735 L724.161 684.735 L724.721 684.735 L725.28 684.735 L725.839 684.735 L726.398 684.735 L726.958 684.735 L727.517 684.735 L728.076 684.735 L728.635 684.735 L729.195 684.735 L729.754 684.735 L730.313 684.735 L730.872 684.735 L731.432 684.735 L731.991 684.735 L732.55 684.735 L733.109 684.735 L733.669 684.735 L734.228 684.735 L734.787 684.735 L735.346 684.735 L735.906 684.735 L736.465 684.735 L737.024 684.735 L737.583 684.735 L738.143 684.735 L738.702 684.735 L739.261 684.735 L739.82 684.735 L740.38 684.735 L740.939 684.735 L741.498 684.735 L742.057 684.735 L742.617 684.735 L743.176 684.735 L743.735 684.735 L744.294 684.735 L744.854 684.735 L745.413 684.735 L745.972 684.735 L746.531 684.735 L747.091 684.735 L747.65 684.735 L748.209 684.735 L748.768 684.735 L749.328 684.735 L749.887 684.735 L750.446 684.735 L751.005 684.735 L751.565 684.735 L752.124 684.735 L752.683 684.735 L753.242 684.735 L753.802 684.735 L754.361 684.735 L754.92 684.735 L755.479 684.735 L756.039 684.735 L756.598 684.735 L757.157 684.735 L757.716 684.735 L758.276 684.735 L758.835 684.735 L759.394 684.735 L759.953 684.735 L760.513 684.735 L761.072 684.735 L761.631 684.735 L762.19 684.735 L762.75 684.735 L763.309 684.735 L763.868 684.735 L764.427 684.735 L764.987 684.735 L765.546 684.735 L766.105 684.735 L766.664 684.735 L767.224 684.735 L767.783 684.735 L768.342 684.735 L768.901 684.735 L769.461 684.735 L770.02 684.735 L770.579 684.735 L771.138 684.735 L771.698 684.735 L772.257 684.735 L772.816 684.735 L773.375 684.735 L773.935 684.735 L774.494 684.735 L775.053 684.735 L775.612 684.735 L776.172 684.735 L776.731 684.735 L777.29 684.735 L777.849 684.735 L778.409 684.735 L778.968 684.735 L779.527 684.735 L780.086 684.735 L780.646 684.735 L781.205 684.735 L781.764 684.735 L782.323 684.735 L782.883 684.735 L783.442 684.735 L784.001 684.735 L784.56 684.735 L785.12 684.735 L785.679 684.735 L786.238 684.735 L786.797 684.735 L787.357 684.735 L787.916 684.735 L788.475 684.735 L789.034 684.735 L789.594 684.735 L790.153 684.735 L790.712 684.735 L791.271 684.735 L791.831 684.735 L792.39 684.735 L792.949 684.735 L793.508 684.735 L794.068 684.735 L794.627 684.735 L795.186 684.735 L795.745 684.735 L796.305 684.735 L796.864 684.735 L797.423 684.735 L797.982 684.735 L798.542 684.735 L799.101 684.735 L799.66 684.735 L800.219 684.735 L800.779 684.735 L801.338 684.735 L801.897 684.735 L802.456 684.735 L803.016 684.735 L803.575 684.735 L804.134 684.735 L804.693 684.735 L805.253 684.735 L805.812 684.735 L806.371 684.735 L806.931 684.735 L807.49 684.735 L808.049 684.735 L808.608 684.735 L809.168 684.735 L809.727 684.735 L810.286 684.735 L810.845 684.735 L811.405 684.735 L811.964 684.735 L812.523 684.735 L813.082 684.735 L813.642 684.735 L814.201 684.735 L814.76 684.735 L815.319 684.735 L815.879 684.735 L816.438 684.735 L816.997 684.735 L817.556 684.735 L818.116 684.735 L818.675 684.735 L819.234 684.735 L819.793 684.735 L820.353 684.735 L820.912 684.735 L821.471 684.735 L822.03 684.735 L822.59 684.735 L823.149 684.735 L823.708 684.735 L824.267 684.735 L824.827 684.735 L825.386 684.735 L825.945 684.735 L826.504 684.735 L827.064 684.735 L827.623 684.735 L828.182 684.735 L828.741 684.735 L829.301 684.735 L829.86 684.735 L830.419 684.735 L830.978 684.735 L831.538 684.735 L832.097 684.735 L832.656 684.735 L833.215 684.735 L833.775 684.735 L834.334 684.735 L834.893 684.735 L835.452 684.735 L836.012 684.735 L836.571 684.735 L837.13 684.735 L837.689 684.735 L838.249 684.735 L838.808 684.735 L839.367 684.735 L839.926 684.735 L840.486 684.735 L841.045 684.735 L841.604 684.735 L842.163 684.735 L842.723 684.735 L843.282 684.735 L843.841 684.735 L844.4 684.735 L844.96 684.735 L845.519 684.735 L846.078 684.735 L846.637 684.735 L847.197 684.735 L847.756 684.735 L848.315 684.735 L848.874 684.735 L849.434 684.735 L849.993 684.735 L850.552 684.735 L851.111 684.735 L851.671 684.735 L852.23 684.735 L852.789 684.735 L853.348 684.735 L853.908 684.735 L854.467 684.735 L855.026 684.735 L855.585 684.735 L856.145 684.735 L856.704 684.735 L857.263 684.735 L857.822 684.735 L858.382 684.735 L858.941 684.735 L859.5 684.735 L860.059 684.735 L860.619 684.735 L861.178 684.735 L861.737 684.735 L862.296 684.735 L862.856 684.735 L863.415 684.735 L863.974 684.735 L864.533 684.735 L865.093 684.735 L865.652 684.735 L866.211 684.735 L866.77 684.735 L867.33 684.735 L867.889 684.735 L868.448 684.735 L869.007 684.735 L869.567 684.735 L870.126 684.735 L870.685 684.735 L871.244 684.735 L871.804 684.735 L872.363 684.735 L872.922 684.735 L873.481 684.735 L874.041 684.735 L874.6 684.735 L875.159 684.735 L875.718 684.735 L876.278 684.735 L876.837 684.735 L877.396 684.735 L877.955 684.735 L878.515 684.735 L879.074 684.735 L879.633 684.735 L880.192 684.735 L880.752 684.735 L881.311 684.735 L881.87 684.735 L882.429 684.735 L882.989 684.735 L883.548 684.735 L884.107 684.735 L884.666 684.735 L885.226 684.735 L885.785 684.735 L886.344 684.735 L886.903 684.735 L887.463 684.735 L888.022 684.735 L888.581 684.735 L889.14 684.735 L889.7 684.735 L890.259 684.735 L890.818 684.735 L891.377 684.735 L891.937 684.735 L892.496 684.735 L893.055 684.735 L893.614 684.735 L894.174 684.735 L894.733 684.735 L895.292 684.735 L895.851 684.735 L896.411 684.735 L896.97 684.735 L897.529 684.735 L898.088 684.735 L898.648 684.735 L899.207 684.735 L899.766 684.735 L900.325 684.735 L900.885 684.735 L901.444 684.735 L902.003 684.735 L902.562 684.735 L903.122 684.735 L903.681 684.735 L904.24 684.735 L904.799 684.735 L905.359 684.735 L905.918 684.735 L906.477 684.735 L907.036 684.735 L907.596 684.735 L908.155 684.735 L908.714 684.735 L909.273 684.735 L909.833 684.735 L910.392 684.735 L910.951 684.735 L911.51 684.735 L912.07 684.735 L912.629 684.735 L913.188 684.735 L913.747 684.735 L914.307 684.735 L914.866 684.735 L915.425 684.735 L915.984 684.735 L916.544 684.735 L917.103 684.735 L917.662 684.735 L918.221 684.735 L918.781 684.735 L919.34 684.735 L919.899 684.735 L920.458 684.735 L921.018 684.735 L921.577 684.735 L922.136 684.735 L922.695 684.735 L923.255 684.735 L923.814 684.735 L924.373 684.735 L924.932 684.735 L925.492 684.735 L926.051 684.735 L926.61 684.735 L927.169 684.735 L927.729 684.735 L928.288 684.735 L928.847 684.735 L929.406 684.735 L929.966 684.735 L930.525 684.735 L931.084 684.735 L931.644 684.735 L932.203 684.735 L932.762 684.735 L933.321 684.735 L933.881 684.735 L934.44 684.735 L934.999 684.735 L935.558 684.735 L936.118 684.735 L936.677 684.735 L937.236 684.735 L937.795 684.735 L938.355 684.735 L938.914 684.735 L939.473 684.735 L940.032 684.735 L940.592 684.735 L941.151 684.735 L941.71 684.735 L942.269 684.735 L942.829 684.735 L943.388 684.735 L943.947 684.735 L944.506 684.735 L945.066 684.735 L945.625 684.735 L946.184 684.735 L946.743 684.735 L947.303 684.735 L947.862 684.735 L948.421 684.735 L948.98 684.735 L949.54 684.735 L950.099 684.735 L950.658 684.735 L951.217 684.735 L951.777 684.735 L952.336 684.735 L952.895 684.735 L953.454 684.735 L954.014 684.735 L954.573 684.735 L955.132 684.735 L955.691 684.735 L956.251 684.735 L956.81 684.735 L957.369 684.735 L957.928 684.735 L958.488 684.735 L959.047 684.735 L959.606 684.735 L960.165 684.735 L960.725 684.735 L961.284 684.735 L961.843 684.735 L962.402 684.735 L962.962 684.735 L963.521 684.735 L964.08 684.735 L964.639 684.735 L965.199 684.735 L965.758 684.735 L966.317 684.735 L966.876 684.735 L967.436 684.735 L967.995 684.735 L968.554 684.735 L969.113 684.735 L969.673 684.735 L970.232 684.735 L970.791 684.735 L971.35 684.735 L971.91 684.735 L972.469 684.735 L973.028 684.735 L973.587 684.735 L974.147 684.735 L974.706 684.735 L975.265 684.735 L975.824 684.735 L976.384 684.735 L976.943 684.735 L977.502 684.735 L978.061 684.735 L978.621 684.735 L979.18 684.735 L979.739 684.735 L980.298 684.735 L980.858 684.735 L981.417 684.735 L981.976 684.735 L982.535 684.735 L983.095 684.735 L983.654 684.735 L984.213 684.735 L984.772 684.735 L985.332 684.735 L985.891 684.735 L986.45 684.735 L987.009 684.735 L987.569 684.735 L988.128 684.735 L988.687 684.735 L989.246 684.735 L989.806 684.735 L990.365 684.735 L990.924 684.735 L991.483 684.735 L992.043 684.735 L992.602 684.735 L993.161 684.735 L993.72 684.735 L994.28 684.735 L994.839 684.735 L995.398 684.735 L995.957 684.735 L996.517 684.735 L997.076 684.735 L997.635 684.735 L998.194 684.735 L998.754 684.735 L999.313 684.735 L999.872 684.735 L1000.43 684.735 L1000.99 684.735 L1001.55 684.735 L1002.11 684.735 L1002.67 684.735 L1003.23 684.735 L1003.79 684.735 L1004.35 684.735 L1004.91 684.735 L1005.46 684.735 L1006.02 684.735 L1006.58 684.735 L1007.14 684.735 L1007.7 684.735 L1008.26 684.735 L1008.82 684.735 L1009.38 684.735 L1009.94 684.735 L1010.5 684.735 L1011.06 684.735 L1011.62 684.735 L1012.18 684.735 L1012.73 684.735 L1013.29 684.735 L1013.85 684.735 L1014.41 684.735 L1014.97 684.735 L1015.53 684.735 L1016.09 684.735 L1016.65 684.735 L1017.21 684.735 L1017.77 684.735 L1018.33 684.735 L1018.89 684.735 L1019.45 684.735 L1020.01 684.735 L1020.56 684.735 L1021.12 684.735 L1021.68 684.735 L1022.24 684.735 L1022.8 684.735 L1023.36 684.735 L1023.92 684.735 L1024.48 684.735 L1025.04 684.735 L1025.6 684.735 L1026.16 684.735 L1026.72 684.735 L1027.28 684.735 L1027.83 684.735 L1028.39 684.735 L1028.95 684.735 L1029.51 684.735 L1030.07 684.735 L1030.63 684.735 L1031.19 684.735 L1031.75 684.735 L1032.31 684.735 L1032.87 684.735 L1033.43 684.735 L1033.99 684.735 L1034.55 684.735 L1035.1 684.735 L1035.66 684.735 L1036.22 684.735 L1036.78 684.735 L1037.34 684.735 L1037.9 684.735 L1038.46 684.735 L1039.02 684.735 L1039.58 684.735 L1040.14 684.735 L1040.7 684.735 L1041.26 684.735 L1041.82 684.735 L1042.38 684.735 L1042.93 684.735 L1043.49 684.735 L1044.05 684.735 L1044.61 684.735 L1045.17 684.735 L1045.73 684.735 L1046.29 684.735 L1046.85 684.735 L1047.41 684.735 L1047.97 684.735 L1048.53 684.735 L1049.09 684.735 L1049.65 684.735 L1050.2 684.735 L1050.76 684.735 L1051.32 684.735 L1051.88 684.735 L1052.44 684.735 L1053 684.735 L1053.56 684.735 L1054.12 684.735 L1054.68 684.735 L1055.24 684.735 L1055.8 684.735 L1056.36 684.735 L1056.92 684.735 L1057.48 684.735 L1058.03 684.735 L1058.59 684.735 L1059.15 684.735 L1059.71 684.735 L1060.27 684.735 L1060.83 684.735 L1061.39 684.735 L1061.95 684.735 L1062.51 684.735 L1063.07 684.735 L1063.63 684.735 L1064.19 684.735 L1064.75 684.735 L1065.3 684.735 L1065.86 684.735 L1066.42 684.735 L1066.98 684.735 L1067.54 684.735 L1068.1 684.735 L1068.66 684.735 L1069.22 684.735 L1069.78 684.735 L1070.34 684.735 L1070.9 684.735 L1071.46 684.735 L1072.02 684.735 L1072.57 684.735 L1073.13 684.735 L1073.69 684.735 L1074.25 684.735 L1074.81 684.735 L1075.37 684.735 L1075.93 684.735 L1076.49 684.735 L1077.05 684.735 L1077.61 684.735 L1078.17 684.735 L1078.73 684.735 L1079.29 684.735 L1079.85 684.735 L1080.4 684.735 L1080.96 684.735 L1081.52 684.735 L1082.08 684.735 L1082.64 684.735 L1083.2 684.735 L1083.76 684.735 L1084.32 684.735 L1084.88 684.735 L1085.44 684.735 L1086 684.735 L1086.56 684.735 L1087.12 684.735 L1087.67 684.735 L1088.23 684.735 L1088.79 684.735 L1089.35 684.735 L1089.91 684.735 L1090.47 684.735 L1091.03 684.735 L1091.59 684.735 L1092.15 684.735 L1092.71 684.735 L1093.27 684.735 L1093.83 684.735 L1094.39 684.735 L1094.94 684.735 L1095.5 684.735 L1096.06 684.735 L1096.62 684.735 L1097.18 684.735 L1097.74 684.735 L1098.3 684.735 L1098.86 684.735 L1099.42 684.735 L1099.98 684.735 L1100.54 684.735 L1101.1 684.735 L1101.66 684.735 L1102.22 684.735 L1102.77 684.735 L1103.33 684.735 L1103.89 684.735 L1104.45 684.735 L1105.01 684.735 L1105.57 684.735 L1106.13 684.735 L1106.69 684.735 L1107.25 684.735 L1107.81 684.735 L1108.37 684.735 L1108.93 684.735 L1109.49 684.735 L1110.04 684.735 L1110.6 684.735 L1111.16 684.735 L1111.72 684.735 L1112.28 684.735 L1112.84 684.735 L1113.4 684.735 L1113.96 684.735 L1114.52 684.735 L1115.08 684.735 L1115.64 684.735 L1116.2 684.735 L1116.76 684.735 L1117.31 684.735 L1117.87 684.735 L1118.43 684.735 L1118.99 684.735 L1119.55 684.735 L1120.11 684.735 L1120.67 684.735 L1121.23 684.735 L1121.79 684.735 L1122.35 684.735 L1122.91 684.735 L1123.47 684.735 L1124.03 684.735 L1124.59 684.735 L1125.14 684.735 L1125.7 684.735 L1126.26 684.735 L1126.82 684.735 L1127.38 684.735 L1127.94 684.735 L1128.5 684.735 L1129.06 684.735 L1129.62 684.735 L1130.18 684.735 L1130.74 684.735 L1131.3 684.735 L1131.86 684.735 L1132.41 684.735 L1132.97 684.735 L1133.53 684.735 L1134.09 684.735 L1134.65 684.735 L1135.21 684.735 L1135.77 684.735 L1136.33 684.735 L1136.89 684.735 L1137.45 684.735 L1138.01 684.735 L1138.57 684.735 L1139.13 684.735 L1139.68 684.735 L1140.24 684.735 L1140.8 684.735 L1141.36 684.735 L1141.92 684.735 L1142.48 684.735 L1143.04 684.735 L1143.6 684.735 L1144.16 684.735 L1144.72 684.735 L1145.28 684.735 L1145.84 684.735 L1146.4 684.735 L1146.96 684.735 L1147.51 684.735 L1148.07 684.735 L1148.63 684.735 L1149.19 684.735 L1149.75 684.735 L1150.31 684.735 L1150.87 684.735 L1151.43 684.735 L1151.99 684.735 L1152.55 684.735 L1153.11 684.735 L1153.67 684.735 L1154.23 684.735 L1154.78 684.735 L1155.34 684.735 L1155.9 684.735 L1156.46 684.735 L1157.02 684.735 L1157.58 684.735 L1158.14 684.735 L1158.7 684.735 L1159.26 684.735 L1159.82 684.735 L1160.38 684.735 L1160.94 684.735 L1161.5 684.735 L1162.05 684.735 L1162.61 684.735 L1163.17 684.735 L1163.73 684.735 L1164.29 684.735 L1164.85 684.735 L1165.41 684.735 L1165.97 684.735 L1166.53 684.735 L1167.09 684.735 L1167.65 684.735 L1168.21 684.735 L1168.77 684.735 L1169.33 684.735 L1169.88 684.735 L1170.44 684.735 L1171 684.735 L1171.56 684.735 L1172.12 684.735 L1172.68 684.735 L1173.24 684.735 L1173.8 684.735 L1174.36 684.735 L1174.92 684.735 L1175.48 684.735 L1176.04 684.735 L1176.6 684.735 L1177.15 684.735 L1177.71 684.735 L1178.27 684.735 L1178.83 684.735 L1179.39 684.735 L1179.95 684.735 L1180.51 684.735 L1181.07 684.735 L1181.63 684.735 L1182.19 684.735 L1182.75 684.735 L1183.31 684.735 L1183.87 684.735 L1184.43 684.735 L1184.98 684.735 L1185.54 684.735 L1186.1 684.735 L1186.66 684.735 L1187.22 684.735 L1187.78 684.735 L1188.34 684.735 L1188.9 684.735 L1189.46 684.735 L1190.02 684.735 L1190.58 684.735 L1191.14 684.735 L1191.7 684.735 L1192.25 684.735 L1192.81 684.735 L1193.37 684.735 L1193.93 684.735 L1194.49 684.735 L1195.05 684.735 L1195.61 684.735 L1196.17 684.735 L1196.73 684.735 L1197.29 684.735 L1197.85 684.735 L1198.41 684.735 L1198.97 684.735 L1199.52 684.735 L1200.08 684.735 L1200.64 684.735 L1201.2 684.735 L1201.76 684.735 L1202.32 684.735 L1202.88 684.735 L1203.44 684.735 L1204 684.735 L1204.56 684.735 L1205.12 684.735 L1205.68 684.735 L1206.24 684.735 L1206.8 684.735 L1207.35 684.735 L1207.91 684.735 L1208.47 684.735 L1209.03 684.735 L1209.59 684.735 L1210.15 684.735 L1210.71 684.735 L1211.27 684.735 L1211.83 684.735 L1212.39 684.735 L1212.95 684.735 L1213.51 684.735 L1214.07 684.735 L1214.62 684.735 L1215.18 684.735 L1215.74 684.735 L1216.3 684.735 L1216.86 684.735 L1217.42 684.735 L1217.98 684.735 L1218.54 684.735 L1219.1 684.735 L1219.66 684.735 L1220.22 684.735 L1220.78 684.735 L1221.34 684.735 L1221.89 684.735 L1222.45 684.735 L1223.01 684.735 L1223.57 684.735 L1224.13 684.735 L1224.69 684.735 L1225.25 684.735 L1225.81 684.735 L1226.37 684.735 L1226.93 684.735 L1227.49 684.735 L1228.05 684.735 L1228.61 684.735 L1229.17 684.735 L1229.72 684.735 L1230.28 684.735 L1230.84 684.735 L1231.4 684.735 L1231.96 684.735 L1232.52 684.735 L1233.08 684.735 L1233.64 684.735 L1234.2 684.735 L1234.76 684.735 L1235.32 684.735 L1235.88 684.735 L1236.44 684.735 L1236.99 684.735 L1237.55 684.735 L1238.11 684.735 L1238.67 684.735 L1239.23 684.735 L1239.79 684.735 L1240.35 684.735 L1240.91 684.735 L1241.47 684.735 L1242.03 684.735 L1242.59 684.735 L1243.15 684.735 L1243.71 684.735 L1244.26 684.735 L1244.82 684.735 L1245.38 684.735 L1245.94 684.735 L1246.5 684.735 L1247.06 684.735 L1247.62 684.735 L1248.18 684.735 L1248.74 684.735 L1249.3 684.735 L1249.86 684.735 L1250.42 684.735 L1250.98 684.735 L1251.54 684.735 L1252.09 684.735 L1252.65 684.735 L1253.21 684.735 L1253.77 684.735 L1254.33 684.735 L1254.89 684.735 L1255.45 684.735 L1256.01 684.735 L1256.57 684.735 L1257.13 684.735 L1257.69 684.735 L1258.25 684.735 L1258.81 684.735 L1259.36 684.735 L1259.92 684.735 L1260.48 684.735 L1261.04 684.735 L1261.6 684.735 L1262.16 684.735 L1262.72 684.735 L1263.28 684.735 L1263.84 684.735 L1264.4 684.735 L1264.96 684.735 L1265.52 684.735 L1266.08 684.735 L1266.63 684.735 L1267.19 684.735 L1267.75 684.735 L1268.31 684.735 L1268.87 684.735 L1269.43 684.735 L1269.99 684.735 L1270.55 684.735 L1271.11 684.735 L1271.67 684.735 L1272.23 684.735 L1272.79 684.735 L1273.35 684.735 L1273.91 684.735 L1274.46 684.735 L1275.02 684.735 L1275.58 684.735 L1276.14 684.735 L1276.7 684.735 L1277.26 684.735 L1277.82 684.735 L1278.38 684.735 L1278.94 684.735 L1279.5 684.735 L1280.06 684.735 L1280.62 684.735 L1281.18 684.735 L1281.73 684.735 L1282.29 684.735 L1282.85 684.735 L1283.41 684.735 L1283.97 684.735 L1284.53 684.735 L1285.09 684.735 L1285.65 684.735 L1286.21 684.735 L1286.77 684.735 L1287.33 684.735 L1287.89 684.735 L1288.45 684.735 L1289 684.735 L1289.56 684.735 L1290.12 684.735 L1290.68 684.735 L1291.24 684.735 L1291.8 684.735 L1292.36 684.735 L1292.92 684.735 L1293.48 684.735 L1294.04 684.735 L1294.6 684.735 L1295.16 684.735 L1295.72 684.735 L1296.28 684.735 L1296.83 684.735 L1297.39 684.735 L1297.95 684.735 L1298.51 684.735 L1299.07 684.735 L1299.63 684.735 L1300.19 684.735 L1300.75 684.735 L1301.31 684.735 L1301.87 684.735 L1302.43 684.735 L1302.99 684.735 L1303.55 684.735 L1304.1 684.735 L1304.66 684.735 L1305.22 684.735 L1305.78 684.735 L1306.34 684.735 L1306.9 684.735 L1307.46 684.735 L1308.02 684.735 L1308.58 684.735 L1309.14 684.735 L1309.7 684.735 L1310.26 684.735 L1310.82 684.735 L1311.38 684.735 L1311.93 684.735 L1312.49 684.735 L1313.05 684.735 L1313.61 684.735 L1314.17 684.735 L1314.73 684.735 L1315.29 684.735 L1315.85 684.735 L1316.41 684.735 L1316.97 684.735 L1317.53 684.735 L1318.09 684.735 L1318.65 684.735 L1319.2 684.735 L1319.76 684.735 L1320.32 684.735 L1320.88 684.735 L1321.44 684.735 L1322 684.735 L1322.56 684.735 L1323.12 684.735 L1323.68 684.735 L1324.24 684.735 L1324.8 684.735 L1325.36 684.735 L1325.92 684.735 L1326.47 684.735 L1327.03 684.735 L1327.59 684.735 L1328.15 684.735 L1328.71 684.735 L1329.27 684.735 L1329.83 684.735 L1330.39 684.735 L1330.95 684.735 L1331.51 684.735 L1332.07 684.735 L1332.63 684.735 L1333.19 684.735 L1333.75 684.735 L1334.3 684.735 L1334.86 684.735 L1335.42 684.735 L1335.98 684.735 L1336.54 684.735 L1337.1 684.735 L1337.66 684.735 L1338.22 684.735 L1338.78 684.735 L1339.34 684.735 L1339.9 684.735 L1340.46 684.735 L1341.02 684.735 L1341.57 684.735 L1342.13 684.735 L1342.69 684.735 L1343.25 684.735 L1343.81 684.735 L1344.37 684.735 L1344.93 684.735 L1345.49 684.735 L1346.05 684.735 L1346.61 684.735 L1347.17 684.735 L1347.73 684.735 L1348.29 684.735 L1348.84 684.735 L1349.4 684.735 L1349.96 684.735 L1350.52 684.735 L1351.08 684.735 L1351.64 684.735 L1352.2 684.735 L1352.76 684.735 L1353.32 684.735 L1353.88 684.735 L1354.44 684.735 L1355 684.735 L1355.56 684.735 L1356.12 684.735 L1356.67 684.735 L1357.23 684.735 L1357.79 684.735 L1358.35 684.735 L1358.91 684.735 L1359.47 684.735 L1360.03 684.735 L1360.59 684.735 L1361.15 684.735 L1361.71 684.735 L1362.27 684.735 L1362.83 684.735 L1363.39 684.735 L1363.94 684.735 L1364.5 684.735 L1365.06 684.735 L1365.62 684.735 L1366.18 684.735 L1366.74 684.735 L1367.3 684.735 L1367.86 684.735 L1368.42 684.735 L1368.98 684.735 L1369.54 684.735 L1370.1 684.735 L1370.66 684.735 L1371.21 684.735 L1371.77 684.735 L1372.33 684.735 L1372.89 684.735 L1373.45 684.735 L1374.01 684.735 L1374.57 684.735 L1375.13 684.735 L1375.69 684.735 L1376.25 684.735 L1376.81 684.735 L1377.37 684.735 L1377.93 684.735 L1378.49 684.735 L1379.04 684.735 L1379.6 684.735 L1380.16 684.735 L1380.72 684.735 L1381.28 684.735 L1381.84 684.735 L1382.4 684.735 L1382.96 684.735 L1383.52 684.735 L1384.08 684.735 L1384.64 684.735 L1385.2 684.735 L1385.76 684.735 L1386.31 684.735 L1386.87 684.735 L1387.43 684.735 L1387.99 684.735 L1388.55 684.735 L1389.11 684.735 L1389.67 684.735 L1390.23 684.735 L1390.79 684.735 L1391.35 684.735 L1391.91 684.735 L1392.47 684.735 L1393.03 684.735 L1393.58 684.735 L1394.14 684.735 L1394.7 684.735 L1395.26 684.735 L1395.82 684.735 L1396.38 684.735 L1396.94 684.735 L1397.5 684.735 L1398.06 684.735 L1398.62 684.735 L1399.18 684.735 L1399.74 684.735 L1400.3 684.735 L1400.86 684.735 L1401.41 684.735 L1401.97 684.735 L1402.53 684.735 L1403.09 684.735 L1403.65 684.735 L1404.21 684.735 L1404.77 684.735 L1405.33 684.735 L1405.89 684.735 L1406.45 684.735 L1407.01 684.735 L1407.57 684.735 L1408.13 684.735 L1408.68 684.735 L1409.24 684.735 L1409.8 684.735 L1410.36 684.735 L1410.92 684.735 L1411.48 684.735 L1412.04 684.735 L1412.6 684.735 L1413.16 684.735 L1413.72 684.735 L1414.28 684.735 L1414.84 684.735 L1415.4 684.735 L1415.95 684.735 L1416.51 684.735 L1417.07 684.735 L1417.63 684.735 L1418.19 684.735 L1418.75 684.735 L1419.31 684.735 L1419.87 684.735 L1420.43 684.735 L1420.99 684.735 L1421.55 684.735 L1422.11 684.735 L1422.67 684.735 L1423.23 684.735 L1423.78 684.735 L1424.34 684.735 L1424.9 684.735 L1425.46 684.735 L1426.02 684.735 L1426.58 684.735 L1427.14 684.735 L1427.7 684.735 L1428.26 684.735 L1428.82 684.735 L1429.38 684.735 L1429.94 684.735 L1430.5 684.735 L1431.05 684.735 L1431.61 684.735 L1432.17 684.735 L1432.73 684.735 L1433.29 684.735 L1433.85 684.735 L1434.41 684.735 L1434.97 684.735 L1435.53 684.735 L1436.09 684.735 L1436.65 684.735 L1437.21 684.735 L1437.77 684.735 L1438.33 684.735 L1438.88 684.735 L1439.44 684.735 L1440 684.735 L1440.56 684.735 L1441.12 684.735 L1441.68 684.735 L1442.24 684.735 L1442.8 684.735 L1443.36 684.735 L1443.92 684.735 L1444.48 684.735 L1445.04 684.735 L1445.6 684.735 L1446.15 684.735 L1446.71 684.735 L1447.27 684.735 L1447.83 684.735 L1448.39 684.735 L1448.95 684.735 L1449.51 684.735 L1450.07 684.735 L1450.63 684.735 L1451.19 684.735 L1451.75 684.735 L1452.31 684.735 L1452.87 684.735 L1453.42 684.735 L1453.98 684.735 L1454.54 684.735 L1455.1 684.735 L1455.66 684.735 L1456.22 684.735 L1456.78 684.735 L1457.34 684.735 L1457.9 684.735 L1458.46 684.735 L1459.02 684.735 L1459.58 684.735 L1460.14 684.735 L1460.7 684.735 L1461.25 684.735 L1461.81 684.735 L1462.37 684.735 L1462.93 684.735 L1463.49 684.735 L1464.05 684.735 L1464.61 684.735 L1465.17 684.735 L1465.73 684.735 L1466.29 684.735 L1466.85 684.735 L1467.41 684.735 L1467.97 684.735 L1468.52 684.735 L1469.08 684.735 L1469.64 684.735 L1470.2 684.735 L1470.76 684.735 L1471.32 684.735 L1471.88 684.735 L1472.44 684.735 L1473 684.735 L1473.56 684.735 L1474.12 684.735 L1474.68 684.735 L1475.24 684.735 L1475.79 684.735 L1476.35 684.735 L1476.91 684.735 L1477.47 684.735 L1478.03 684.735 L1478.59 684.735 L1479.15 684.735 L1479.71 684.735 L1480.27 684.735 L1480.83 684.735 L1481.39 684.735 L1481.95 684.735 L1482.51 684.735 L1483.07 684.735 L1483.62 684.735 L1484.18 684.735 L1484.74 684.735 L1485.3 684.735 L1485.86 684.735 L1486.42 684.735 L1486.98 684.735 L1487.54 684.735 L1488.1 684.735 L1488.66 684.735 L1489.22 684.735 L1489.78 684.735 L1490.34 684.735 L1490.89 684.735 L1491.45 684.735 L1492.01 684.735 L1492.57 684.735 L1493.13 684.735 L1493.69 684.735 L1494.25 684.735 L1494.81 684.735 L1495.37 684.735 L1495.93 684.735 L1496.49 684.735 L1497.05 684.735 L1497.61 684.735 L1498.16 684.735 L1498.72 684.735 L1499.28 684.735 L1499.84 684.735 L1500.4 684.735 L1500.96 684.735 L1501.52 684.735 L1502.08 684.735 L1502.64 684.735 L1503.2 684.735 L1503.76 684.735 L1504.32 684.735 L1504.88 684.735 L1505.44 684.735 L1505.99 684.735 L1506.55 684.735 L1507.11 684.735 L1507.67 684.735 L1508.23 684.735 L1508.79 684.735 L1509.35 684.735 L1509.91 684.735 L1510.47 684.735 L1511.03 684.735 L1511.59 684.735 L1512.15 684.735 L1512.71 684.735 L1513.26 684.735 L1513.82 684.735 L1514.38 684.735 L1514.94 684.735 L1515.5 684.735 L1516.06 684.735 L1516.62 684.735 L1517.18 684.735 L1517.74 684.735 L1518.3 684.735 L1518.86 684.735 L1519.42 684.735 L1519.98 684.735 L1520.53 684.735 L1521.09 684.735 L1521.65 684.735 L1522.21 684.735 L1522.77 684.735 L1523.33 684.735 L1523.89 684.735 L1524.45 684.735 L1525.01 684.735 L1525.57 684.735 L1526.13 684.735 L1526.69 684.735 L1527.25 684.735 L1527.81 684.735 L1528.36 684.735 L1528.92 684.735 L1529.48 684.735 L1530.04 684.735 L1530.6 684.735 L1531.16 684.735 L1531.72 684.735 L1532.28 684.735 L1532.84 684.735 L1533.4 684.735 L1533.96 684.735 L1534.52 684.735 L1535.08 684.735 L1535.63 684.735 L1536.19 684.735 L1536.75 684.735 L1537.31 684.735 L1537.87 684.735 L1538.43 684.735 L1538.99 684.735 L1539.55 684.735 L1540.11 684.735 L1540.67 684.735 L1541.23 684.735 L1541.79 684.735 L1542.35 684.735 L1542.9 684.735 L1543.46 684.735 L1544.02 684.735 L1544.58 684.735 L1545.14 684.735 L1545.7 684.735 L1546.26 684.735 L1546.82 684.735 L1547.38 684.735 L1547.94 684.735 L1548.5 684.735 L1549.06 684.735 L1549.62 684.735 L1550.18 684.735 L1550.73 684.735 L1551.29 684.735 L1551.85 684.735 L1552.41 684.735 L1552.97 684.735 L1553.53 684.735 L1554.09 684.735 L1554.65 684.735 L1555.21 684.735 L1555.77 684.735 L1556.33 684.735 L1556.89 684.735 L1557.45 684.735 L1558 684.735 L1558.56 684.735 L1559.12 684.735 L1559.68 684.735 L1560.24 684.735 L1560.8 684.735 L1561.36 684.735 L1561.92 684.735 L1562.48 684.735 L1563.04 684.735 L1563.6 684.735 L1564.16 684.735 L1564.72 684.735 L1565.28 684.735 L1565.83 684.735 L1566.39 684.735 L1566.95 684.735 L1567.51 684.735 L1568.07 684.735 L1568.63 684.735 L1569.19 684.735 L1569.75 684.735 L1570.31 684.735 L1570.87 684.735 L1571.43 684.735 L1571.99 684.735 L1572.55 684.735 L1573.1 684.735 L1573.66 684.735 L1574.22 684.735 L1574.78 684.735 L1575.34 684.735 L1575.9 684.735 L1576.46 684.735 L1577.02 684.735 L1577.58 684.735 L1578.14 684.735 L1578.7 684.735 L1579.26 684.735 L1579.82 684.735 L1580.37 684.735 L1580.93 684.735 L1581.49 684.735 L1582.05 684.735 L1582.61 684.735 L1583.17 684.735 L1583.73 684.735 L1584.29 684.735 L1584.85 684.735 L1585.41 684.735 L1585.97 684.735 L1586.53 684.735 L1587.09 684.735 L1587.65 684.735 L1588.2 684.735 L1588.76 684.735 L1589.32 684.735 L1589.88 684.735 L1590.44 684.735 L1591 684.735 L1591.56 684.735 L1592.12 684.735 L1592.68 684.735 L1593.24 684.735 L1593.8 684.735 L1594.36 684.735 L1594.92 684.735 L1595.47 684.735 L1596.03 684.735 L1596.59 684.735 L1597.15 684.735 L1597.71 684.735 L1598.27 684.735 L1598.83 684.735 L1599.39 684.735 L1599.95 684.735 L1600.51 684.735 L1601.07 684.735 L1601.63 684.735 L1602.19 684.735 L1602.74 684.735 L1603.3 684.735 L1603.86 684.735 L1604.42 684.735 L1604.98 684.735 L1605.54 684.735 L1606.1 684.735 L1606.66 684.735 L1607.22 684.735 L1607.78 684.735 L1608.34 684.735 L1608.9 684.735 L1609.46 684.735 L1610.02 684.735 L1610.57 684.735 L1611.13 684.735 L1611.69 684.735 L1612.25 684.735 L1612.81 684.735 L1613.37 684.735 L1613.93 684.735 L1614.49 684.735 L1615.05 684.735 L1615.61 684.735 L1616.17 684.735 L1616.73 684.735 L1617.29 684.735 L1617.84 684.735 L1618.4 684.735 L1618.96 684.735 L1619.52 684.735 L1620.08 684.735 L1620.64 684.735 L1621.2 684.735 L1621.76 684.735 L1622.32 684.735 L1622.88 684.735 L1623.44 684.735 L1624 684.735 L1624.56 684.735 L1625.11 684.735 L1625.67 684.735 L1626.23 684.735 L1626.79 684.735 L1627.35 684.735 L1627.91 684.735 L1628.47 684.735 L1629.03 684.735 L1629.59 684.735 L1630.15 684.735 L1630.71 684.735 L1631.27 684.735 L1631.83 684.735 L1632.39 684.735 L1632.94 684.735 L1633.5 684.735 L1634.06 684.735 L1634.62 684.735 L1635.18 684.735 L1635.74 684.735 L1636.3 684.735 L1636.86 684.735 L1637.42 684.735 L1637.98 684.735 L1638.54 684.735 L1639.1 684.735 L1639.66 684.735 L1640.21 684.735 L1640.77 684.735 L1641.33 684.735 L1641.89 684.735 L1642.45 684.735 L1643.01 684.735 L1643.57 684.735 L1644.13 684.735 L1644.69 684.735 L1645.25 684.735 L1645.81 684.735 L1646.37 684.735 L1646.93 684.735 L1647.48 684.735 L1648.04 684.735 L1648.6 684.735 L1649.16 684.735 L1649.72 684.735 L1650.28 684.735 L1650.84 684.735 L1651.4 684.735 L1651.96 684.735 L1652.52 684.735 L1653.08 684.735 L1653.64 684.735 L1654.2 684.735 L1654.76 684.735 L1655.31 684.735 L1655.87 684.735 L1656.43 684.735 L1656.99 684.735 L1657.55 684.735 L1658.11 684.735 L1658.67 684.735 L1659.23 684.735 L1659.79 684.735 L1660.35 684.735 L1660.91 684.735 L1661.47 684.735 L1662.03 684.735 L1662.58 684.735 L1663.14 684.735 L1663.7 684.735 L1664.26 684.735 L1664.82 684.735 L1665.38 684.735 L1665.94 684.735 L1666.5 684.735 L1667.06 684.735 L1667.62 684.735 L1668.18 684.735 L1668.74 684.735 L1669.3 684.735 L1669.85 684.735 L1670.41 684.735 L1670.97 684.735 L1671.53 684.735 L1672.09 684.735 L1672.65 684.735 L1673.21 684.735 L1673.77 684.735 L1674.33 684.735 L1674.89 684.735 L1675.45 684.735 L1676.01 684.735 L1676.57 684.735 L1677.13 684.735 L1677.68 684.735 L1678.24 684.735 L1678.8 684.735 L1679.36 684.735 L1679.92 684.735 L1680.48 684.735 L1681.04 684.735 L1681.6 684.735 L1682.16 684.735 L1682.72 684.735 L1683.28 684.735 L1683.84 684.735 L1684.4 684.735 L1684.95 684.735 L1685.51 684.735 L1686.07 684.735 L1686.63 684.735 L1687.19 684.735 L1687.75 684.735 L1688.31 684.735 L1688.87 684.735 L1689.43 684.735 L1689.99 684.735 L1690.55 684.735 L1691.11 684.735 L1691.67 684.735 L1692.23 684.735 L1692.78 684.735 L1693.34 684.735 L1693.9 684.735 L1694.46 684.735 L1695.02 684.735 L1695.58 684.735 L1696.14 684.735 L1696.7 684.735 L1697.26 684.735 L1697.82 684.735 L1698.38 684.735 L1698.94 684.735 L1699.5 684.735 L1700.05 684.735 L1700.61 684.735 L1701.17 684.735 L1701.73 684.735 L1702.29 684.735 L1702.85 684.735 L1703.41 684.735 L1703.97 684.735 L1704.53 684.735 L1705.09 684.735 L1705.65 684.735 L1706.21 684.735 L1706.77 684.735 L1707.32 684.735 L1707.88 684.735 L1708.44 684.735 L1709 684.735 L1709.56 684.735 L1710.12 684.735 L1710.68 684.735 L1711.24 684.735 L1711.8 684.735 L1712.36 684.735 L1712.92 684.735 L1713.48 684.735 L1714.04 684.735 L1714.6 684.735 L1715.15 684.735 L1715.71 684.735 L1716.27 684.735 L1716.83 684.735 L1717.39 684.735 L1717.95 684.735 L1718.51 684.735 L1719.07 684.735 L1719.63 684.735 L1720.19 684.735 L1720.75 684.735 L1721.31 684.735 L1721.87 684.735 L1722.42 684.735 L1722.98 684.735 L1723.54 684.735 L1724.1 684.735 L1724.66 684.735 L1725.22 684.735 L1725.78 684.735 L1726.34 684.735 L1726.9 684.735 L1727.46 684.735 L1728.02 684.735 L1728.58 684.735 L1729.14 684.735 L1729.69 684.735 L1730.25 684.735 L1730.81 684.735 L1731.37 684.735 L1731.93 684.735 L1732.49 684.735 L1733.05 684.735 L1733.61 684.735 L1734.17 684.735 L1734.73 684.735 L1735.29 684.735 L1735.85 684.735 L1736.41 684.735 L1736.97 684.735 L1737.52 684.735 L1738.08 684.735 L1738.64 684.735 L1739.2 684.735 L1739.76 684.735 L1740.32 684.735 L1740.88 684.735 L1741.44 684.735 L1742 684.735 L1742.56 684.735 L1743.12 684.735 L1743.68 684.735 L1744.24 684.735 L1744.79 684.735 L1745.35 684.735 L1745.91 684.735 L1746.47 684.735 L1747.03 684.735 L1747.59 684.735 L1748.15 684.735 L1748.71 684.735 L1749.27 684.735 L1749.83 684.735 L1750.39 684.735 L1750.95 684.735 L1751.51 684.735 L1752.06 684.735 L1752.62 684.735 L1753.18 684.735 L1753.74 684.735 L1754.3 684.735 L1754.86 684.735 L1755.42 684.735 L1755.98 684.735 L1756.54 684.735 L1757.1 684.735 L1757.66 684.735 L1758.22 684.735 L1758.78 684.735 L1759.34 684.735 L1759.89 684.735 L1760.45 684.735 L1761.01 684.735 L1761.57 684.735 L1762.13 684.735 L1762.69 684.735 L1763.25 684.735 L1763.81 684.735 L1764.37 684.735 L1764.93 684.735 L1765.49 684.735 L1766.05 684.735 L1766.61 684.735 L1767.16 684.735 L1767.72 684.735 L1768.28 684.735 L1768.84 684.735 L1769.4 684.735 L1769.96 684.735 L1770.52 684.735 L1771.08 684.735 L1771.64 684.735 L1772.2 684.735 L1772.76 684.735 L1773.32 684.735 L1773.88 684.735 L1774.43 684.735 L1774.99 684.735 L1775.55 684.735 L1776.11 684.735 L1776.67 684.735 L1777.23 684.735 L1777.79 684.735 L1778.35 684.735 L1778.91 684.735 L1779.47 684.735 L1780.03 684.735 L1780.59 684.735 L1781.15 684.735 L1781.71 684.735 L1782.26 684.735 L1782.82 684.735 L1783.38 684.735 L1783.94 684.735 L1784.5 684.735 L1785.06 684.735 L1785.62 684.735 L1786.18 684.735 L1786.74 684.735 L1787.3 684.735 L1787.86 684.735 L1788.42 684.735 L1788.98 684.735 L1789.53 684.735 L1790.09 684.735 L1790.65 684.735 L1791.21 684.735 L1791.77 684.735 L1792.33 684.735 L1792.89 684.735 L1793.45 684.735 L1794.01 684.735 L1794.57 684.735 L1795.13 684.735 L1795.69 684.735 L1796.25 684.735 L1796.8 684.735 L1797.36 684.735 L1797.92 684.735 L1798.48 684.735 L1799.04 684.735 L1799.6 684.735 L1800.16 684.735 L1800.72 684.735 L1801.28 684.735 L1801.84 684.735 L1802.4 684.735 L1802.96 684.735 L1803.52 684.735 L1804.08 684.735 L1804.63 684.735 L1805.19 684.735 L1805.75 684.735 L1806.31 684.735 L1806.87 684.735 L1807.43 684.735 L1807.99 684.735 L1808.55 684.735 L1809.11 684.735 L1809.67 684.735 L1810.23 684.735 L1810.79 684.735 L1811.35 684.735 L1811.9 684.735 L1812.46 684.735 L1813.02 684.735 L1813.58 684.735 L1814.14 684.735 L1814.7 684.735 L1815.26 684.735 L1815.82 684.735 L1816.38 684.735 L1816.94 684.735 L1817.5 684.735 L1818.06 684.735 L1818.62 684.735 L1819.18 684.735 L1819.73 684.735 L1820.29 684.735 L1820.85 684.735 L1821.41 684.735 L1821.97 684.735 L1822.53 684.735 L1823.09 684.735 L1823.65 684.735 L1824.21 684.735 L1824.77 684.735 L1825.33 684.735 L1825.89 684.735 L1826.45 684.735 L1827 684.735 L1827.56 684.735 L1828.12 684.735 L1828.68 684.735 L1829.24 684.735 L1829.8 684.735 L1830.36 684.735 L1830.92 684.735 L1831.48 684.735 L1832.04 684.735 L1832.6 684.735 L1833.16 684.735 L1833.72 684.735 L1834.27 684.735 L1834.83 684.735 L1835.39 684.735 L1835.95 684.735 L1836.51 684.735 L1837.07 684.735 L1837.63 684.735 L1838.19 684.735 L1838.19 683.016 L1837.63 683.016 L1837.07 683.016 L1836.51 683.016 L1835.95 683.016 L1835.39 683.016 L1834.83 683.016 L1834.27 683.016 L1833.72 683.016 L1833.16 683.016 L1832.6 683.016 L1832.04 683.016 L1831.48 683.016 L1830.92 683.016 L1830.36 683.016 L1829.8 683.016 L1829.24 683.016 L1828.68 683.016 L1828.12 683.016 L1827.56 683.016 L1827 683.016 L1826.45 683.016 L1825.89 683.016 L1825.33 683.016 L1824.77 683.016 L1824.21 683.016 L1823.65 683.016 L1823.09 683.016 L1822.53 683.016 L1821.97 683.016 L1821.41 683.016 L1820.85 683.016 L1820.29 683.016 L1819.73 683.016 L1819.18 683.016 L1818.62 683.016 L1818.06 683.016 L1817.5 683.016 L1816.94 683.016 L1816.38 683.016 L1815.82 683.016 L1815.26 683.016 L1814.7 683.016 L1814.14 683.016 L1813.58 683.016 L1813.02 683.016 L1812.46 683.016 L1811.9 683.016 L1811.35 683.016 L1810.79 683.016 L1810.23 683.016 L1809.67 683.016 L1809.11 683.016 L1808.55 683.016 L1807.99 683.016 L1807.43 683.016 L1806.87 683.016 L1806.31 683.016 L1805.75 683.016 L1805.19 683.016 L1804.63 683.016 L1804.08 683.016 L1803.52 683.016 L1802.96 683.016 L1802.4 683.016 L1801.84 683.016 L1801.28 683.016 L1800.72 683.016 L1800.16 683.016 L1799.6 683.016 L1799.04 683.016 L1798.48 683.016 L1797.92 683.016 L1797.36 683.016 L1796.8 683.016 L1796.25 683.016 L1795.69 683.016 L1795.13 683.016 L1794.57 683.016 L1794.01 683.016 L1793.45 683.016 L1792.89 683.016 L1792.33 683.016 L1791.77 683.016 L1791.21 683.016 L1790.65 683.016 L1790.09 683.016 L1789.53 683.016 L1788.98 683.016 L1788.42 683.016 L1787.86 683.016 L1787.3 683.016 L1786.74 683.016 L1786.18 683.016 L1785.62 683.016 L1785.06 683.016 L1784.5 683.016 L1783.94 683.016 L1783.38 683.016 L1782.82 683.016 L1782.26 683.016 L1781.71 683.016 L1781.15 683.016 L1780.59 683.016 L1780.03 683.016 L1779.47 683.016 L1778.91 683.016 L1778.35 683.016 L1777.79 683.016 L1777.23 683.016 L1776.67 683.016 L1776.11 683.016 L1775.55 683.016 L1774.99 683.016 L1774.43 683.016 L1773.88 683.016 L1773.32 683.016 L1772.76 683.016 L1772.2 683.016 L1771.64 683.016 L1771.08 683.016 L1770.52 683.016 L1769.96 683.016 L1769.4 683.016 L1768.84 683.016 L1768.28 683.016 L1767.72 683.016 L1767.16 683.016 L1766.61 683.016 L1766.05 683.016 L1765.49 683.016 L1764.93 683.016 L1764.37 683.016 L1763.81 683.016 L1763.25 683.016 L1762.69 683.016 L1762.13 683.016 L1761.57 683.016 L1761.01 683.016 L1760.45 683.016 L1759.89 683.016 L1759.34 683.016 L1758.78 683.016 L1758.22 683.016 L1757.66 683.016 L1757.1 683.016 L1756.54 683.016 L1755.98 683.016 L1755.42 683.016 L1754.86 683.016 L1754.3 683.016 L1753.74 683.016 L1753.18 683.016 L1752.62 683.016 L1752.06 683.016 L1751.51 683.016 L1750.95 683.016 L1750.39 683.016 L1749.83 683.016 L1749.27 683.016 L1748.71 683.016 L1748.15 683.016 L1747.59 683.016 L1747.03 683.016 L1746.47 683.016 L1745.91 683.016 L1745.35 683.016 L1744.79 683.016 L1744.24 683.016 L1743.68 683.016 L1743.12 683.016 L1742.56 683.016 L1742 683.016 L1741.44 683.016 L1740.88 683.016 L1740.32 683.016 L1739.76 683.016 L1739.2 683.016 L1738.64 683.016 L1738.08 683.016 L1737.52 683.016 L1736.97 683.016 L1736.41 683.016 L1735.85 683.016 L1735.29 683.016 L1734.73 683.016 L1734.17 683.016 L1733.61 683.016 L1733.05 683.016 L1732.49 683.016 L1731.93 683.016 L1731.37 683.016 L1730.81 683.016 L1730.25 683.016 L1729.69 683.016 L1729.14 683.016 L1728.58 683.016 L1728.02 683.016 L1727.46 683.016 L1726.9 683.016 L1726.34 683.016 L1725.78 683.016 L1725.22 683.016 L1724.66 683.016 L1724.1 683.016 L1723.54 683.016 L1722.98 683.016 L1722.42 683.016 L1721.87 683.016 L1721.31 683.016 L1720.75 683.016 L1720.19 683.016 L1719.63 683.016 L1719.07 683.016 L1718.51 683.016 L1717.95 683.016 L1717.39 683.016 L1716.83 683.016 L1716.27 683.016 L1715.71 683.016 L1715.15 683.016 L1714.6 683.016 L1714.04 683.016 L1713.48 683.016 L1712.92 683.016 L1712.36 683.016 L1711.8 683.016 L1711.24 683.016 L1710.68 683.016 L1710.12 683.016 L1709.56 683.016 L1709 683.016 L1708.44 683.016 L1707.88 683.016 L1707.32 683.016 L1706.77 683.016 L1706.21 683.016 L1705.65 683.016 L1705.09 683.016 L1704.53 683.016 L1703.97 683.016 L1703.41 683.016 L1702.85 683.016 L1702.29 683.016 L1701.73 683.016 L1701.17 683.016 L1700.61 683.016 L1700.05 683.016 L1699.5 683.016 L1698.94 683.016 L1698.38 683.016 L1697.82 683.016 L1697.26 683.016 L1696.7 683.016 L1696.14 683.016 L1695.58 683.016 L1695.02 683.016 L1694.46 683.016 L1693.9 683.016 L1693.34 683.016 L1692.78 683.016 L1692.23 683.016 L1691.67 683.016 L1691.11 683.016 L1690.55 683.016 L1689.99 683.016 L1689.43 683.016 L1688.87 683.016 L1688.31 683.016 L1687.75 683.016 L1687.19 683.016 L1686.63 683.016 L1686.07 683.016 L1685.51 683.016 L1684.95 683.016 L1684.4 683.016 L1683.84 683.016 L1683.28 683.016 L1682.72 683.016 L1682.16 683.016 L1681.6 683.016 L1681.04 683.016 L1680.48 683.016 L1679.92 683.016 L1679.36 683.016 L1678.8 683.016 L1678.24 683.016 L1677.68 683.016 L1677.13 683.016 L1676.57 683.016 L1676.01 683.016 L1675.45 683.016 L1674.89 683.016 L1674.33 683.016 L1673.77 683.016 L1673.21 683.016 L1672.65 683.016 L1672.09 683.016 L1671.53 683.016 L1670.97 683.016 L1670.41 683.016 L1669.85 683.016 L1669.3 683.016 L1668.74 683.016 L1668.18 683.016 L1667.62 683.016 L1667.06 683.016 L1666.5 683.016 L1665.94 683.016 L1665.38 683.016 L1664.82 683.016 L1664.26 683.016 L1663.7 683.016 L1663.14 683.016 L1662.58 683.016 L1662.03 683.016 L1661.47 683.016 L1660.91 683.016 L1660.35 683.016 L1659.79 683.016 L1659.23 683.016 L1658.67 683.016 L1658.11 683.016 L1657.55 683.016 L1656.99 683.016 L1656.43 683.016 L1655.87 683.016 L1655.31 683.016 L1654.76 683.016 L1654.2 683.016 L1653.64 683.016 L1653.08 683.016 L1652.52 683.016 L1651.96 683.016 L1651.4 683.016 L1650.84 683.016 L1650.28 683.016 L1649.72 683.016 L1649.16 683.016 L1648.6 683.016 L1648.04 683.016 L1647.48 683.016 L1646.93 683.016 L1646.37 683.016 L1645.81 683.016 L1645.25 683.016 L1644.69 683.016 L1644.13 683.016 L1643.57 683.016 L1643.01 683.016 L1642.45 683.016 L1641.89 683.016 L1641.33 683.016 L1640.77 683.016 L1640.21 683.016 L1639.66 683.016 L1639.1 683.016 L1638.54 683.016 L1637.98 683.016 L1637.42 683.016 L1636.86 683.016 L1636.3 683.016 L1635.74 683.016 L1635.18 683.016 L1634.62 683.016 L1634.06 683.016 L1633.5 683.016 L1632.94 683.016 L1632.39 683.016 L1631.83 683.016 L1631.27 683.016 L1630.71 683.016 L1630.15 683.016 L1629.59 683.016 L1629.03 683.016 L1628.47 683.016 L1627.91 683.016 L1627.35 683.016 L1626.79 683.016 L1626.23 683.016 L1625.67 683.016 L1625.11 683.016 L1624.56 683.016 L1624 683.016 L1623.44 683.016 L1622.88 683.016 L1622.32 683.016 L1621.76 683.016 L1621.2 683.016 L1620.64 683.016 L1620.08 683.016 L1619.52 683.016 L1618.96 683.016 L1618.4 683.016 L1617.84 683.016 L1617.29 683.016 L1616.73 683.016 L1616.17 683.016 L1615.61 683.016 L1615.05 683.016 L1614.49 683.016 L1613.93 683.016 L1613.37 683.016 L1612.81 683.016 L1612.25 683.016 L1611.69 683.016 L1611.13 683.016 L1610.57 683.016 L1610.02 683.016 L1609.46 683.016 L1608.9 683.016 L1608.34 683.016 L1607.78 683.016 L1607.22 683.016 L1606.66 683.016 L1606.1 683.016 L1605.54 683.016 L1604.98 683.016 L1604.42 683.016 L1603.86 683.016 L1603.3 683.016 L1602.74 683.016 L1602.19 683.016 L1601.63 683.016 L1601.07 683.016 L1600.51 683.016 L1599.95 683.016 L1599.39 683.016 L1598.83 683.016 L1598.27 683.016 L1597.71 683.016 L1597.15 683.016 L1596.59 683.016 L1596.03 683.016 L1595.47 683.016 L1594.92 683.016 L1594.36 683.016 L1593.8 683.016 L1593.24 683.016 L1592.68 683.016 L1592.12 683.016 L1591.56 683.016 L1591 683.016 L1590.44 683.016 L1589.88 683.016 L1589.32 683.016 L1588.76 683.016 L1588.2 683.016 L1587.65 683.016 L1587.09 683.016 L1586.53 683.016 L1585.97 683.016 L1585.41 683.016 L1584.85 683.016 L1584.29 683.016 L1583.73 683.016 L1583.17 683.016 L1582.61 683.016 L1582.05 683.016 L1581.49 683.016 L1580.93 683.016 L1580.37 683.016 L1579.82 683.016 L1579.26 683.016 L1578.7 683.016 L1578.14 683.016 L1577.58 683.016 L1577.02 683.016 L1576.46 683.016 L1575.9 683.016 L1575.34 683.016 L1574.78 683.016 L1574.22 683.016 L1573.66 683.016 L1573.1 683.016 L1572.55 683.016 L1571.99 683.016 L1571.43 683.016 L1570.87 683.016 L1570.31 683.016 L1569.75 683.016 L1569.19 683.016 L1568.63 683.016 L1568.07 683.016 L1567.51 683.016 L1566.95 683.016 L1566.39 683.016 L1565.83 683.016 L1565.28 683.016 L1564.72 683.016 L1564.16 683.016 L1563.6 683.016 L1563.04 683.016 L1562.48 683.016 L1561.92 683.016 L1561.36 683.016 L1560.8 683.016 L1560.24 683.016 L1559.68 683.016 L1559.12 683.016 L1558.56 683.016 L1558 683.016 L1557.45 683.016 L1556.89 683.016 L1556.33 683.016 L1555.77 683.016 L1555.21 683.016 L1554.65 683.016 L1554.09 683.016 L1553.53 683.016 L1552.97 683.016 L1552.41 683.016 L1551.85 683.016 L1551.29 683.016 L1550.73 683.016 L1550.18 683.016 L1549.62 683.016 L1549.06 683.016 L1548.5 683.016 L1547.94 683.016 L1547.38 683.016 L1546.82 683.016 L1546.26 683.016 L1545.7 683.016 L1545.14 683.016 L1544.58 683.016 L1544.02 683.016 L1543.46 683.016 L1542.9 683.016 L1542.35 683.016 L1541.79 683.016 L1541.23 683.016 L1540.67 683.016 L1540.11 683.016 L1539.55 683.016 L1538.99 683.016 L1538.43 683.016 L1537.87 683.016 L1537.31 683.016 L1536.75 683.016 L1536.19 683.016 L1535.63 683.016 L1535.08 683.016 L1534.52 683.016 L1533.96 683.016 L1533.4 683.016 L1532.84 683.016 L1532.28 683.016 L1531.72 683.016 L1531.16 683.016 L1530.6 683.016 L1530.04 683.016 L1529.48 683.016 L1528.92 683.016 L1528.36 683.016 L1527.81 683.016 L1527.25 683.016 L1526.69 683.016 L1526.13 683.016 L1525.57 683.016 L1525.01 683.016 L1524.45 683.016 L1523.89 683.016 L1523.33 683.016 L1522.77 683.016 L1522.21 683.016 L1521.65 683.016 L1521.09 683.016 L1520.53 683.016 L1519.98 683.016 L1519.42 683.016 L1518.86 683.016 L1518.3 683.016 L1517.74 683.016 L1517.18 683.016 L1516.62 683.016 L1516.06 683.016 L1515.5 683.016 L1514.94 683.016 L1514.38 683.016 L1513.82 683.016 L1513.26 683.016 L1512.71 683.016 L1512.15 683.016 L1511.59 683.016 L1511.03 683.016 L1510.47 683.016 L1509.91 683.016 L1509.35 683.016 L1508.79 683.016 L1508.23 683.016 L1507.67 683.016 L1507.11 683.016 L1506.55 683.016 L1505.99 683.016 L1505.44 683.016 L1504.88 683.016 L1504.32 683.016 L1503.76 683.016 L1503.2 683.016 L1502.64 683.016 L1502.08 683.016 L1501.52 683.016 L1500.96 683.016 L1500.4 683.016 L1499.84 683.016 L1499.28 683.016 L1498.72 683.016 L1498.16 683.016 L1497.61 683.016 L1497.05 683.016 L1496.49 683.016 L1495.93 683.016 L1495.37 683.016 L1494.81 683.016 L1494.25 683.016 L1493.69 683.016 L1493.13 683.016 L1492.57 683.016 L1492.01 683.016 L1491.45 683.016 L1490.89 683.016 L1490.34 683.016 L1489.78 683.016 L1489.22 683.016 L1488.66 683.016 L1488.1 683.016 L1487.54 683.016 L1486.98 683.016 L1486.42 683.016 L1485.86 683.016 L1485.3 683.016 L1484.74 683.016 L1484.18 683.016 L1483.62 683.016 L1483.07 683.016 L1482.51 683.016 L1481.95 683.016 L1481.39 683.016 L1480.83 683.016 L1480.27 683.016 L1479.71 683.016 L1479.15 683.016 L1478.59 683.016 L1478.03 683.016 L1477.47 683.016 L1476.91 683.016 L1476.35 683.016 L1475.79 683.016 L1475.24 683.016 L1474.68 683.016 L1474.12 683.016 L1473.56 683.016 L1473 683.016 L1472.44 683.016 L1471.88 683.016 L1471.32 683.016 L1470.76 683.016 L1470.2 683.016 L1469.64 683.016 L1469.08 683.016 L1468.52 683.016 L1467.97 683.016 L1467.41 683.016 L1466.85 683.016 L1466.29 683.016 L1465.73 683.016 L1465.17 683.016 L1464.61 683.016 L1464.05 683.016 L1463.49 683.016 L1462.93 683.016 L1462.37 683.016 L1461.81 683.016 L1461.25 683.016 L1460.7 683.016 L1460.14 683.016 L1459.58 683.016 L1459.02 683.016 L1458.46 683.016 L1457.9 683.016 L1457.34 683.016 L1456.78 683.016 L1456.22 683.016 L1455.66 683.016 L1455.1 683.016 L1454.54 683.016 L1453.98 683.016 L1453.42 683.016 L1452.87 683.016 L1452.31 683.016 L1451.75 683.016 L1451.19 683.016 L1450.63 683.016 L1450.07 683.016 L1449.51 683.016 L1448.95 683.016 L1448.39 683.016 L1447.83 683.016 L1447.27 683.016 L1446.71 683.016 L1446.15 683.016 L1445.6 683.016 L1445.04 683.016 L1444.48 683.016 L1443.92 683.016 L1443.36 683.016 L1442.8 683.016 L1442.24 683.016 L1441.68 683.016 L1441.12 683.016 L1440.56 683.016 L1440 683.016 L1439.44 683.016 L1438.88 683.016 L1438.33 683.016 L1437.77 683.016 L1437.21 683.016 L1436.65 683.016 L1436.09 683.016 L1435.53 683.016 L1434.97 683.016 L1434.41 683.016 L1433.85 683.016 L1433.29 683.016 L1432.73 683.016 L1432.17 683.016 L1431.61 683.016 L1431.05 683.016 L1430.5 683.016 L1429.94 683.016 L1429.38 683.016 L1428.82 683.016 L1428.26 683.016 L1427.7 683.016 L1427.14 683.016 L1426.58 683.016 L1426.02 683.016 L1425.46 683.016 L1424.9 683.016 L1424.34 683.016 L1423.78 683.016 L1423.23 683.016 L1422.67 683.016 L1422.11 683.016 L1421.55 683.016 L1420.99 683.016 L1420.43 683.016 L1419.87 683.016 L1419.31 683.016 L1418.75 683.016 L1418.19 683.016 L1417.63 683.016 L1417.07 683.016 L1416.51 683.016 L1415.95 683.016 L1415.4 683.016 L1414.84 683.016 L1414.28 683.016 L1413.72 683.016 L1413.16 683.016 L1412.6 683.016 L1412.04 683.016 L1411.48 683.016 L1410.92 683.016 L1410.36 683.016 L1409.8 683.016 L1409.24 683.016 L1408.68 683.016 L1408.13 683.016 L1407.57 683.016 L1407.01 683.016 L1406.45 683.016 L1405.89 683.016 L1405.33 683.016 L1404.77 683.016 L1404.21 683.016 L1403.65 683.016 L1403.09 683.016 L1402.53 683.016 L1401.97 683.016 L1401.41 683.016 L1400.86 683.016 L1400.3 683.016 L1399.74 683.016 L1399.18 683.016 L1398.62 683.016 L1398.06 683.016 L1397.5 683.016 L1396.94 683.016 L1396.38 683.016 L1395.82 683.016 L1395.26 683.016 L1394.7 683.016 L1394.14 683.016 L1393.58 683.016 L1393.03 683.016 L1392.47 683.016 L1391.91 683.016 L1391.35 683.016 L1390.79 683.016 L1390.23 683.016 L1389.67 683.016 L1389.11 683.016 L1388.55 683.016 L1387.99 683.016 L1387.43 683.016 L1386.87 683.016 L1386.31 683.016 L1385.76 683.016 L1385.2 683.016 L1384.64 683.016 L1384.08 683.016 L1383.52 683.016 L1382.96 683.016 L1382.4 683.016 L1381.84 683.016 L1381.28 683.016 L1380.72 683.016 L1380.16 683.016 L1379.6 683.016 L1379.04 683.016 L1378.49 683.016 L1377.93 683.016 L1377.37 683.016 L1376.81 683.016 L1376.25 683.016 L1375.69 683.016 L1375.13 683.016 L1374.57 683.016 L1374.01 683.016 L1373.45 683.016 L1372.89 683.016 L1372.33 683.016 L1371.77 683.016 L1371.21 683.016 L1370.66 683.016 L1370.1 683.016 L1369.54 683.016 L1368.98 683.016 L1368.42 683.016 L1367.86 683.016 L1367.3 683.016 L1366.74 683.016 L1366.18 683.016 L1365.62 683.016 L1365.06 683.016 L1364.5 683.016 L1363.94 683.016 L1363.39 683.016 L1362.83 683.016 L1362.27 683.016 L1361.71 683.016 L1361.15 683.016 L1360.59 683.016 L1360.03 683.016 L1359.47 683.016 L1358.91 683.016 L1358.35 683.016 L1357.79 683.016 L1357.23 683.016 L1356.67 683.016 L1356.12 683.016 L1355.56 683.016 L1355 683.016 L1354.44 683.016 L1353.88 683.016 L1353.32 683.016 L1352.76 683.016 L1352.2 683.016 L1351.64 683.016 L1351.08 683.016 L1350.52 683.016 L1349.96 683.016 L1349.4 683.016 L1348.84 683.016 L1348.29 683.016 L1347.73 683.016 L1347.17 683.016 L1346.61 683.016 L1346.05 683.016 L1345.49 683.016 L1344.93 683.016 L1344.37 683.016 L1343.81 683.016 L1343.25 683.016 L1342.69 683.016 L1342.13 683.016 L1341.57 683.016 L1341.02 683.016 L1340.46 683.016 L1339.9 683.016 L1339.34 683.016 L1338.78 683.016 L1338.22 683.016 L1337.66 683.016 L1337.1 683.016 L1336.54 683.016 L1335.98 683.016 L1335.42 683.016 L1334.86 683.016 L1334.3 683.016 L1333.75 683.016 L1333.19 683.016 L1332.63 683.016 L1332.07 683.016 L1331.51 683.016 L1330.95 683.016 L1330.39 683.016 L1329.83 683.016 L1329.27 683.016 L1328.71 683.016 L1328.15 683.016 L1327.59 683.016 L1327.03 683.016 L1326.47 683.016 L1325.92 683.016 L1325.36 683.016 L1324.8 683.016 L1324.24 683.016 L1323.68 683.016 L1323.12 683.016 L1322.56 683.016 L1322 683.016 L1321.44 683.016 L1320.88 683.016 L1320.32 683.016 L1319.76 683.016 L1319.2 683.016 L1318.65 683.016 L1318.09 683.016 L1317.53 683.016 L1316.97 683.016 L1316.41 683.016 L1315.85 683.016 L1315.29 683.016 L1314.73 683.016 L1314.17 683.016 L1313.61 683.016 L1313.05 683.016 L1312.49 683.016 L1311.93 683.016 L1311.38 683.016 L1310.82 683.016 L1310.26 683.016 L1309.7 683.016 L1309.14 683.016 L1308.58 683.016 L1308.02 683.016 L1307.46 683.016 L1306.9 683.016 L1306.34 683.016 L1305.78 683.016 L1305.22 683.016 L1304.66 683.016 L1304.1 683.016 L1303.55 683.016 L1302.99 683.016 L1302.43 683.016 L1301.87 683.016 L1301.31 683.016 L1300.75 683.016 L1300.19 683.016 L1299.63 683.016 L1299.07 683.016 L1298.51 683.016 L1297.95 683.016 L1297.39 683.016 L1296.83 683.016 L1296.28 683.016 L1295.72 683.016 L1295.16 683.016 L1294.6 683.016 L1294.04 683.016 L1293.48 683.016 L1292.92 683.016 L1292.36 683.016 L1291.8 683.016 L1291.24 683.016 L1290.68 683.016 L1290.12 683.016 L1289.56 683.016 L1289 683.016 L1288.45 683.016 L1287.89 683.016 L1287.33 683.016 L1286.77 683.016 L1286.21 683.016 L1285.65 683.016 L1285.09 683.016 L1284.53 683.016 L1283.97 683.016 L1283.41 683.016 L1282.85 683.016 L1282.29 683.016 L1281.73 683.016 L1281.18 683.016 L1280.62 683.016 L1280.06 683.016 L1279.5 683.016 L1278.94 683.016 L1278.38 683.016 L1277.82 683.016 L1277.26 683.016 L1276.7 683.016 L1276.14 683.016 L1275.58 683.016 L1275.02 683.016 L1274.46 683.016 L1273.91 683.016 L1273.35 683.016 L1272.79 683.016 L1272.23 683.016 L1271.67 683.016 L1271.11 683.016 L1270.55 683.016 L1269.99 683.016 L1269.43 683.016 L1268.87 683.016 L1268.31 683.016 L1267.75 683.016 L1267.19 683.016 L1266.63 683.016 L1266.08 683.016 L1265.52 683.016 L1264.96 683.016 L1264.4 683.016 L1263.84 683.016 L1263.28 683.016 L1262.72 683.016 L1262.16 683.016 L1261.6 683.016 L1261.04 683.016 L1260.48 683.016 L1259.92 683.016 L1259.36 683.016 L1258.81 683.016 L1258.25 683.016 L1257.69 683.016 L1257.13 683.016 L1256.57 683.016 L1256.01 683.016 L1255.45 683.016 L1254.89 683.016 L1254.33 683.016 L1253.77 683.016 L1253.21 683.016 L1252.65 683.016 L1252.09 683.016 L1251.54 683.016 L1250.98 683.016 L1250.42 683.016 L1249.86 683.016 L1249.3 683.016 L1248.74 683.016 L1248.18 683.016 L1247.62 683.016 L1247.06 683.016 L1246.5 683.016 L1245.94 683.016 L1245.38 683.016 L1244.82 683.016 L1244.26 683.016 L1243.71 683.016 L1243.15 683.016 L1242.59 683.016 L1242.03 683.016 L1241.47 683.016 L1240.91 683.016 L1240.35 683.016 L1239.79 683.016 L1239.23 683.016 L1238.67 683.016 L1238.11 683.016 L1237.55 683.016 L1236.99 683.016 L1236.44 683.016 L1235.88 683.016 L1235.32 683.016 L1234.76 683.016 L1234.2 683.016 L1233.64 683.016 L1233.08 683.016 L1232.52 683.016 L1231.96 683.016 L1231.4 683.016 L1230.84 683.016 L1230.28 683.016 L1229.72 683.016 L1229.17 683.016 L1228.61 683.016 L1228.05 683.016 L1227.49 683.016 L1226.93 683.016 L1226.37 683.016 L1225.81 683.016 L1225.25 683.016 L1224.69 683.016 L1224.13 683.016 L1223.57 683.016 L1223.01 683.016 L1222.45 683.016 L1221.89 683.016 L1221.34 683.016 L1220.78 683.016 L1220.22 683.016 L1219.66 683.016 L1219.1 683.016 L1218.54 683.016 L1217.98 683.016 L1217.42 683.016 L1216.86 683.016 L1216.3 683.016 L1215.74 683.016 L1215.18 683.016 L1214.62 683.016 L1214.07 683.016 L1213.51 683.016 L1212.95 683.016 L1212.39 683.016 L1211.83 683.016 L1211.27 683.016 L1210.71 683.016 L1210.15 683.016 L1209.59 683.016 L1209.03 683.016 L1208.47 683.016 L1207.91 683.016 L1207.35 683.016 L1206.8 683.016 L1206.24 683.016 L1205.68 683.016 L1205.12 683.016 L1204.56 683.016 L1204 683.016 L1203.44 683.016 L1202.88 683.016 L1202.32 683.016 L1201.76 683.016 L1201.2 683.016 L1200.64 683.016 L1200.08 683.016 L1199.52 683.016 L1198.97 683.016 L1198.41 683.016 L1197.85 683.016 L1197.29 683.016 L1196.73 683.016 L1196.17 683.016 L1195.61 683.016 L1195.05 683.016 L1194.49 683.016 L1193.93 683.016 L1193.37 683.016 L1192.81 683.016 L1192.25 683.016 L1191.7 683.016 L1191.14 683.016 L1190.58 683.016 L1190.02 683.016 L1189.46 683.016 L1188.9 683.016 L1188.34 683.016 L1187.78 683.016 L1187.22 683.016 L1186.66 683.016 L1186.1 683.016 L1185.54 683.016 L1184.98 683.016 L1184.43 683.016 L1183.87 683.016 L1183.31 683.016 L1182.75 683.016 L1182.19 683.016 L1181.63 683.016 L1181.07 683.016 L1180.51 683.016 L1179.95 683.016 L1179.39 683.016 L1178.83 683.016 L1178.27 683.016 L1177.71 683.016 L1177.15 683.016 L1176.6 683.016 L1176.04 683.016 L1175.48 683.016 L1174.92 683.016 L1174.36 683.016 L1173.8 683.016 L1173.24 683.016 L1172.68 683.016 L1172.12 683.016 L1171.56 683.016 L1171 683.016 L1170.44 683.016 L1169.88 683.016 L1169.33 683.016 L1168.77 683.016 L1168.21 683.016 L1167.65 683.016 L1167.09 683.016 L1166.53 683.016 L1165.97 683.016 L1165.41 683.016 L1164.85 683.016 L1164.29 683.016 L1163.73 683.016 L1163.17 683.016 L1162.61 683.016 L1162.05 683.016 L1161.5 683.016 L1160.94 683.016 L1160.38 683.016 L1159.82 683.016 L1159.26 683.016 L1158.7 683.016 L1158.14 683.016 L1157.58 683.016 L1157.02 683.016 L1156.46 683.016 L1155.9 683.016 L1155.34 683.016 L1154.78 683.016 L1154.23 683.016 L1153.67 683.016 L1153.11 683.016 L1152.55 683.016 L1151.99 683.016 L1151.43 683.016 L1150.87 683.016 L1150.31 683.016 L1149.75 683.016 L1149.19 683.016 L1148.63 683.016 L1148.07 683.016 L1147.51 683.016 L1146.96 683.016 L1146.4 683.016 L1145.84 683.016 L1145.28 683.016 L1144.72 683.016 L1144.16 683.016 L1143.6 683.016 L1143.04 683.016 L1142.48 683.016 L1141.92 683.016 L1141.36 683.016 L1140.8 683.016 L1140.24 683.016 L1139.68 683.016 L1139.13 683.016 L1138.57 683.016 L1138.01 683.016 L1137.45 683.016 L1136.89 683.016 L1136.33 683.016 L1135.77 683.016 L1135.21 683.016 L1134.65 683.016 L1134.09 683.016 L1133.53 683.016 L1132.97 683.016 L1132.41 683.016 L1131.86 683.016 L1131.3 683.016 L1130.74 683.016 L1130.18 683.016 L1129.62 683.016 L1129.06 683.016 L1128.5 683.016 L1127.94 683.016 L1127.38 683.016 L1126.82 683.016 L1126.26 683.016 L1125.7 683.016 L1125.14 683.016 L1124.59 683.016 L1124.03 683.016 L1123.47 683.016 L1122.91 683.016 L1122.35 683.016 L1121.79 683.016 L1121.23 683.016 L1120.67 683.016 L1120.11 683.016 L1119.55 683.016 L1118.99 683.016 L1118.43 683.016 L1117.87 683.016 L1117.31 683.016 L1116.76 683.016 L1116.2 683.016 L1115.64 683.016 L1115.08 683.016 L1114.52 683.016 L1113.96 683.016 L1113.4 683.016 L1112.84 683.016 L1112.28 683.016 L1111.72 683.016 L1111.16 683.016 L1110.6 683.016 L1110.04 683.016 L1109.49 683.016 L1108.93 683.016 L1108.37 683.016 L1107.81 683.016 L1107.25 683.016 L1106.69 683.016 L1106.13 683.016 L1105.57 683.016 L1105.01 683.016 L1104.45 683.016 L1103.89 683.016 L1103.33 683.016 L1102.77 683.016 L1102.22 683.016 L1101.66 683.016 L1101.1 683.016 L1100.54 683.016 L1099.98 683.016 L1099.42 683.016 L1098.86 683.016 L1098.3 683.016 L1097.74 683.016 L1097.18 683.016 L1096.62 683.016 L1096.06 683.016 L1095.5 683.016 L1094.94 683.016 L1094.39 683.016 L1093.83 683.016 L1093.27 683.016 L1092.71 683.016 L1092.15 683.016 L1091.59 683.016 L1091.03 683.016 L1090.47 683.016 L1089.91 683.016 L1089.35 683.016 L1088.79 683.016 L1088.23 683.016 L1087.67 683.016 L1087.12 683.016 L1086.56 683.016 L1086 683.016 L1085.44 683.016 L1084.88 683.016 L1084.32 683.016 L1083.76 683.016 L1083.2 683.016 L1082.64 683.016 L1082.08 683.016 L1081.52 683.016 L1080.96 683.016 L1080.4 683.016 L1079.85 683.016 L1079.29 683.016 L1078.73 683.016 L1078.17 683.016 L1077.61 683.016 L1077.05 683.016 L1076.49 683.016 L1075.93 683.016 L1075.37 683.016 L1074.81 683.016 L1074.25 683.016 L1073.69 683.016 L1073.13 683.016 L1072.57 683.016 L1072.02 683.016 L1071.46 683.016 L1070.9 683.016 L1070.34 683.016 L1069.78 683.016 L1069.22 683.016 L1068.66 683.016 L1068.1 683.016 L1067.54 683.016 L1066.98 683.016 L1066.42 683.016 L1065.86 683.016 L1065.3 683.016 L1064.75 683.016 L1064.19 683.016 L1063.63 683.016 L1063.07 683.016 L1062.51 683.016 L1061.95 683.016 L1061.39 683.016 L1060.83 683.016 L1060.27 683.016 L1059.71 683.016 L1059.15 683.016 L1058.59 683.016 L1058.03 683.016 L1057.48 683.016 L1056.92 683.016 L1056.36 683.016 L1055.8 683.016 L1055.24 683.016 L1054.68 683.016 L1054.12 683.016 L1053.56 683.016 L1053 683.016 L1052.44 683.016 L1051.88 683.016 L1051.32 683.016 L1050.76 683.016 L1050.2 683.016 L1049.65 683.016 L1049.09 683.016 L1048.53 683.016 L1047.97 683.016 L1047.41 683.016 L1046.85 683.016 L1046.29 683.016 L1045.73 683.016 L1045.17 683.016 L1044.61 683.016 L1044.05 683.016 L1043.49 683.016 L1042.93 683.016 L1042.38 683.016 L1041.82 683.016 L1041.26 683.016 L1040.7 683.016 L1040.14 683.016 L1039.58 683.016 L1039.02 683.016 L1038.46 683.016 L1037.9 683.016 L1037.34 683.016 L1036.78 683.016 L1036.22 683.016 L1035.66 683.016 L1035.1 683.016 L1034.55 683.016 L1033.99 683.016 L1033.43 683.016 L1032.87 683.016 L1032.31 683.016 L1031.75 683.016 L1031.19 683.016 L1030.63 683.016 L1030.07 683.016 L1029.51 683.016 L1028.95 683.016 L1028.39 683.016 L1027.83 683.016 L1027.28 683.016 L1026.72 683.016 L1026.16 683.016 L1025.6 683.016 L1025.04 683.016 L1024.48 683.016 L1023.92 683.016 L1023.36 683.016 L1022.8 683.016 L1022.24 683.016 L1021.68 683.016 L1021.12 683.016 L1020.56 683.016 L1020.01 683.016 L1019.45 683.016 L1018.89 683.016 L1018.33 683.016 L1017.77 683.016 L1017.21 683.016 L1016.65 683.016 L1016.09 683.016 L1015.53 683.016 L1014.97 683.016 L1014.41 683.016 L1013.85 683.016 L1013.29 683.016 L1012.73 683.016 L1012.18 683.016 L1011.62 683.016 L1011.06 683.016 L1010.5 683.016 L1009.94 683.016 L1009.38 683.016 L1008.82 683.016 L1008.26 683.016 L1007.7 683.016 L1007.14 683.016 L1006.58 683.016 L1006.02 683.016 L1005.46 683.016 L1004.91 683.016 L1004.35 683.016 L1003.79 683.016 L1003.23 683.016 L1002.67 683.016 L1002.11 683.016 L1001.55 683.016 L1000.99 683.016 L1000.43 683.016 L999.872 683.016 L999.313 683.016 L998.754 683.016 L998.194 683.016 L997.635 683.016 L997.076 683.016 L996.517 683.016 L995.957 683.016 L995.398 683.016 L994.839 683.016 L994.28 683.016 L993.72 683.016 L993.161 683.016 L992.602 683.016 L992.043 683.016 L991.483 683.016 L990.924 683.016 L990.365 683.016 L989.806 683.016 L989.246 683.016 L988.687 683.016 L988.128 683.016 L987.569 683.016 L987.009 683.016 L986.45 683.016 L985.891 683.016 L985.332 683.016 L984.772 683.016 L984.213 683.016 L983.654 683.016 L983.095 683.016 L982.535 683.016 L981.976 683.016 L981.417 683.016 L980.858 683.016 L980.298 683.016 L979.739 683.016 L979.18 683.016 L978.621 683.016 L978.061 683.016 L977.502 683.016 L976.943 683.016 L976.384 683.016 L975.824 683.016 L975.265 683.016 L974.706 683.016 L974.147 683.016 L973.587 683.016 L973.028 683.016 L972.469 683.016 L971.91 683.016 L971.35 683.016 L970.791 683.016 L970.232 683.016 L969.673 683.016 L969.113 683.016 L968.554 683.016 L967.995 683.016 L967.436 683.016 L966.876 683.016 L966.317 683.016 L965.758 683.016 L965.199 683.016 L964.639 683.016 L964.08 683.016 L963.521 683.016 L962.962 683.016 L962.402 683.016 L961.843 683.016 L961.284 683.016 L960.725 683.016 L960.165 683.016 L959.606 683.016 L959.047 683.016 L958.488 683.016 L957.928 683.016 L957.369 683.016 L956.81 683.016 L956.251 683.016 L955.691 683.016 L955.132 683.016 L954.573 683.016 L954.014 683.016 L953.454 683.016 L952.895 683.016 L952.336 683.016 L951.777 683.016 L951.217 683.016 L950.658 683.016 L950.099 683.016 L949.54 683.016 L948.98 683.016 L948.421 683.016 L947.862 683.016 L947.303 683.016 L946.743 683.016 L946.184 683.016 L945.625 683.016 L945.066 683.016 L944.506 683.016 L943.947 683.016 L943.388 683.016 L942.829 683.016 L942.269 683.016 L941.71 683.016 L941.151 683.016 L940.592 683.016 L940.032 683.016 L939.473 683.016 L938.914 683.016 L938.355 683.016 L937.795 683.016 L937.236 683.016 L936.677 683.016 L936.118 683.016 L935.558 683.016 L934.999 683.016 L934.44 683.016 L933.881 683.016 L933.321 683.016 L932.762 683.016 L932.203 683.016 L931.644 683.016 L931.084 683.016 L930.525 683.016 L929.966 683.016 L929.406 683.016 L928.847 683.016 L928.288 683.016 L927.729 683.016 L927.169 683.016 L926.61 683.016 L926.051 683.016 L925.492 683.016 L924.932 683.016 L924.373 683.016 L923.814 683.016 L923.255 683.016 L922.695 683.016 L922.136 683.016 L921.577 683.016 L921.018 683.016 L920.458 683.016 L919.899 683.016 L919.34 683.016 L918.781 683.016 L918.221 683.016 L917.662 683.016 L917.103 683.016 L916.544 683.016 L915.984 683.016 L915.425 683.016 L914.866 683.016 L914.307 683.016 L913.747 683.016 L913.188 683.016 L912.629 683.016 L912.07 683.016 L911.51 683.016 L910.951 683.016 L910.392 683.016 L909.833 683.016 L909.273 683.016 L908.714 683.016 L908.155 683.016 L907.596 683.016 L907.036 683.016 L906.477 683.016 L905.918 683.016 L905.359 683.016 L904.799 683.016 L904.24 683.016 L903.681 683.016 L903.122 683.016 L902.562 683.016 L902.003 683.016 L901.444 683.016 L900.885 683.016 L900.325 683.016 L899.766 683.016 L899.207 683.016 L898.648 683.016 L898.088 683.016 L897.529 683.016 L896.97 683.016 L896.411 683.016 L895.851 683.016 L895.292 683.016 L894.733 683.016 L894.174 683.016 L893.614 683.016 L893.055 683.016 L892.496 683.016 L891.937 683.016 L891.377 683.016 L890.818 683.016 L890.259 683.016 L889.7 683.016 L889.14 683.016 L888.581 683.016 L888.022 683.016 L887.463 683.016 L886.903 683.016 L886.344 683.016 L885.785 683.016 L885.226 683.016 L884.666 683.016 L884.107 683.016 L883.548 683.016 L882.989 683.016 L882.429 683.016 L881.87 683.016 L881.311 683.016 L880.752 683.016 L880.192 683.016 L879.633 683.016 L879.074 683.016 L878.515 683.016 L877.955 683.016 L877.396 683.016 L876.837 683.016 L876.278 683.016 L875.718 683.016 L875.159 683.016 L874.6 683.016 L874.041 683.016 L873.481 683.016 L872.922 683.016 L872.363 683.016 L871.804 683.016 L871.244 683.016 L870.685 683.016 L870.126 683.016 L869.567 683.016 L869.007 683.016 L868.448 683.016 L867.889 683.016 L867.33 683.016 L866.77 683.016 L866.211 683.016 L865.652 683.016 L865.093 683.016 L864.533 683.016 L863.974 683.016 L863.415 683.016 L862.856 683.016 L862.296 683.016 L861.737 683.016 L861.178 683.016 L860.619 683.016 L860.059 683.016 L859.5 683.016 L858.941 683.016 L858.382 683.016 L857.822 683.016 L857.263 683.016 L856.704 683.016 L856.145 683.016 L855.585 683.016 L855.026 683.016 L854.467 683.016 L853.908 683.016 L853.348 683.016 L852.789 683.016 L852.23 683.016 L851.671 683.016 L851.111 683.016 L850.552 683.016 L849.993 683.016 L849.434 683.016 L848.874 683.016 L848.315 683.016 L847.756 683.016 L847.197 683.016 L846.637 683.016 L846.078 683.016 L845.519 683.016 L844.96 683.016 L844.4 683.016 L843.841 683.016 L843.282 683.016 L842.723 683.016 L842.163 683.016 L841.604 683.016 L841.045 683.016 L840.486 683.016 L839.926 683.016 L839.367 683.016 L838.808 683.016 L838.249 683.016 L837.689 683.016 L837.13 683.016 L836.571 683.016 L836.012 683.016 L835.452 683.016 L834.893 683.016 L834.334 683.016 L833.775 683.016 L833.215 683.016 L832.656 683.016 L832.097 683.016 L831.538 683.016 L830.978 683.016 L830.419 683.016 L829.86 683.016 L829.301 683.016 L828.741 683.016 L828.182 683.016 L827.623 683.016 L827.064 683.016 L826.504 683.016 L825.945 683.016 L825.386 683.016 L824.827 683.016 L824.267 683.016 L823.708 683.016 L823.149 683.016 L822.59 683.016 L822.03 683.016 L821.471 683.016 L820.912 683.016 L820.353 683.016 L819.793 683.016 L819.234 683.016 L818.675 683.016 L818.116 683.016 L817.556 683.016 L816.997 683.016 L816.438 683.016 L815.879 683.016 L815.319 683.016 L814.76 683.016 L814.201 683.016 L813.642 683.016 L813.082 683.016 L812.523 683.016 L811.964 683.016 L811.405 683.016 L810.845 683.016 L810.286 683.016 L809.727 683.016 L809.168 683.016 L808.608 683.016 L808.049 683.016 L807.49 683.016 L806.931 683.016 L806.371 683.016 L805.812 683.016 L805.253 683.016 L804.693 683.016 L804.134 683.016 L803.575 683.016 L803.016 683.016 L802.456 683.016 L801.897 683.016 L801.338 683.016 L800.779 683.016 L800.219 683.016 L799.66 683.016 L799.101 683.016 L798.542 683.016 L797.982 683.016 L797.423 683.016 L796.864 683.016 L796.305 683.016 L795.745 683.016 L795.186 683.016 L794.627 683.016 L794.068 683.016 L793.508 683.016 L792.949 683.016 L792.39 683.016 L791.831 683.016 L791.271 683.016 L790.712 683.016 L790.153 683.016 L789.594 683.016 L789.034 683.016 L788.475 683.016 L787.916 683.016 L787.357 683.016 L786.797 683.016 L786.238 683.016 L785.679 683.016 L785.12 683.016 L784.56 683.016 L784.001 683.016 L783.442 683.016 L782.883 683.016 L782.323 683.016 L781.764 683.016 L781.205 683.016 L780.646 683.016 L780.086 683.016 L779.527 683.016 L778.968 683.016 L778.409 683.016 L777.849 683.016 L777.29 683.016 L776.731 683.016 L776.172 683.016 L775.612 683.016 L775.053 683.016 L774.494 683.016 L773.935 683.016 L773.375 683.016 L772.816 683.016 L772.257 683.016 L771.698 683.016 L771.138 683.016 L770.579 683.016 L770.02 683.016 L769.461 683.016 L768.901 683.016 L768.342 683.016 L767.783 683.016 L767.224 683.016 L766.664 683.016 L766.105 683.016 L765.546 683.016 L764.987 683.016 L764.427 683.016 L763.868 683.016 L763.309 683.016 L762.75 683.016 L762.19 683.016 L761.631 683.016 L761.072 683.016 L760.513 683.016 L759.953 683.016 L759.394 683.016 L758.835 683.016 L758.276 683.016 L757.716 683.016 L757.157 683.016 L756.598 683.016 L756.039 683.016 L755.479 683.016 L754.92 683.016 L754.361 683.016 L753.802 683.016 L753.242 683.016 L752.683 683.016 L752.124 683.016 L751.565 683.016 L751.005 683.016 L750.446 683.016 L749.887 683.016 L749.328 683.016 L748.768 683.016 L748.209 683.016 L747.65 683.016 L747.091 683.016 L746.531 683.016 L745.972 683.016 L745.413 683.016 L744.854 683.016 L744.294 683.016 L743.735 683.016 L743.176 683.016 L742.617 683.016 L742.057 683.016 L741.498 683.016 L740.939 683.016 L740.38 683.016 L739.82 683.016 L739.261 683.016 L738.702 683.016 L738.143 683.016 L737.583 683.016 L737.024 683.016 L736.465 683.016 L735.906 683.016 L735.346 683.016 L734.787 683.016 L734.228 683.016 L733.669 683.016 L733.109 683.016 L732.55 683.016 L731.991 683.016 L731.432 683.016 L730.872 683.016 L730.313 683.016 L729.754 683.016 L729.195 683.016 L728.635 683.016 L728.076 683.016 L727.517 683.016 L726.958 683.016 L726.398 683.016 L725.839 683.016 L725.28 683.016 L724.721 683.016 L724.161 683.016 L723.602 683.016 L723.043 683.016 L722.484 683.016 L721.924 683.016 L721.365 683.016 L720.806 683.016 L720.247 683.016  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip653)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.845 720.806,683.845 721.365,683.845 721.924,683.845 722.484,683.845 723.043,683.845 723.602,683.845 724.161,683.845 724.721,683.845 725.28,683.845 725.839,683.845 726.398,683.845 726.958,683.845 727.517,683.845 728.076,683.845 728.635,683.845 729.195,683.845 729.754,683.845 730.313,683.845 730.872,683.845 731.432,683.845 731.991,683.845 732.55,683.845 733.109,683.845 733.669,683.845 734.228,683.845 734.787,683.845 735.346,683.845 735.906,683.845 736.465,683.845 737.024,683.845 737.583,683.845 738.143,683.845 738.702,683.845 739.261,683.845 739.82,683.845 740.38,683.845 740.939,683.845 741.498,683.845 742.057,683.845 742.617,683.845 743.176,683.845 743.735,683.845 744.294,683.845 744.854,683.845 745.413,683.845 745.972,683.845 746.531,683.845 747.091,683.845 747.65,683.845 748.209,683.845 748.768,683.845 749.328,683.845 749.887,683.845 750.446,683.845 751.005,683.845 751.565,683.845 752.124,683.845 752.683,683.845 753.242,683.845 753.802,683.845 754.361,683.845 754.92,683.845 755.479,683.845 756.039,683.845 756.598,683.845 757.157,683.845 757.716,683.845 758.276,683.845 758.835,683.845 759.394,683.845 759.953,683.845 760.513,683.845 761.072,683.845 761.631,683.845 762.19,683.845 762.75,683.845 763.309,683.845 763.868,683.845 764.427,683.845 764.987,683.845 765.546,683.845 766.105,683.845 766.664,683.845 767.224,683.845 767.783,683.845 768.342,683.845 768.901,683.845 769.461,683.845 770.02,683.845 770.579,683.845 771.138,683.845 771.698,683.845 772.257,683.845 772.816,683.845 773.375,683.845 773.935,683.845 774.494,683.845 775.053,683.845 775.612,683.845 776.172,683.845 776.731,683.845 777.29,683.845 777.849,683.845 778.409,683.845 778.968,683.845 779.527,683.845 780.086,683.845 780.646,683.845 781.205,683.845 781.764,683.845 782.323,683.845 782.883,683.845 783.442,683.845 784.001,683.845 784.56,683.845 785.12,683.845 785.679,683.845 786.238,683.845 786.797,683.845 787.357,683.845 787.916,683.845 788.475,683.845 789.034,683.845 789.594,683.845 790.153,683.845 790.712,683.845 791.271,683.845 791.831,683.845 792.39,683.845 792.949,683.845 793.508,683.845 794.068,683.845 794.627,683.845 795.186,683.845 795.745,683.845 796.305,683.845 796.864,683.845 797.423,683.845 797.982,683.845 798.542,683.845 799.101,683.845 799.66,683.845 800.219,683.845 800.779,683.845 801.338,683.845 801.897,683.845 802.456,683.845 803.016,683.845 803.575,683.845 804.134,683.845 804.693,683.845 805.253,683.845 805.812,683.845 806.371,683.845 806.931,683.845 807.49,683.845 808.049,683.845 808.608,683.845 809.168,683.845 809.727,683.845 810.286,683.845 810.845,683.845 811.405,683.845 811.964,683.845 812.523,683.845 813.082,683.845 813.642,683.845 814.201,683.845 814.76,683.845 815.319,683.845 815.879,683.845 816.438,683.845 816.997,683.845 817.556,683.845 818.116,683.845 818.675,683.845 819.234,683.845 819.793,683.845 820.353,683.845 820.912,683.845 821.471,683.845 822.03,683.845 822.59,683.845 823.149,683.845 823.708,683.845 824.267,683.845 824.827,683.845 825.386,683.845 825.945,683.845 826.504,683.845 827.064,683.845 827.623,683.845 828.182,683.845 828.741,683.845 829.301,683.845 829.86,683.845 830.419,683.845 830.978,683.845 831.538,683.845 832.097,683.845 832.656,683.845 833.215,683.845 833.775,683.845 834.334,683.845 834.893,683.845 835.452,683.845 836.012,683.845 836.571,683.845 837.13,683.845 837.689,683.845 838.249,683.845 838.808,683.845 839.367,683.845 839.926,683.845 840.486,683.845 841.045,683.845 841.604,683.845 842.163,683.845 842.723,683.845 843.282,683.845 843.841,683.845 844.4,683.845 844.96,683.845 845.519,683.845 846.078,683.845 846.637,683.845 847.197,683.845 847.756,683.845 848.315,683.845 848.874,683.845 849.434,683.845 849.993,683.845 850.552,683.845 851.111,683.845 851.671,683.845 852.23,683.845 852.789,683.845 853.348,683.845 853.908,683.845 854.467,683.845 855.026,683.845 855.585,683.845 856.145,683.845 856.704,683.845 857.263,683.845 857.822,683.845 858.382,683.845 858.941,683.845 859.5,683.845 860.059,683.845 860.619,683.845 861.178,683.845 861.737,683.845 862.296,683.845 862.856,683.845 863.415,683.845 863.974,683.845 864.533,683.845 865.093,683.845 865.652,683.845 866.211,683.845 866.77,683.845 867.33,683.845 867.889,683.845 868.448,683.845 869.007,683.845 869.567,683.845 870.126,683.845 870.685,683.845 871.244,683.845 871.804,683.845 872.363,683.845 872.922,683.845 873.481,683.845 874.041,683.845 874.6,683.845 875.159,683.845 875.718,683.845 876.278,683.845 876.837,683.845 877.396,683.845 877.955,683.845 878.515,683.845 879.074,683.845 879.633,683.845 880.192,683.845 880.752,683.845 881.311,683.845 881.87,683.845 882.429,683.845 882.989,683.845 883.548,683.845 884.107,683.845 884.666,683.845 885.226,683.845 885.785,683.845 886.344,683.845 886.903,683.845 887.463,683.845 888.022,683.845 888.581,683.845 889.14,683.845 889.7,683.845 890.259,683.845 890.818,683.845 891.377,683.845 891.937,683.845 892.496,683.845 893.055,683.845 893.614,683.845 894.174,683.845 894.733,683.845 895.292,683.845 895.851,683.845 896.411,683.845 896.97,683.845 897.529,683.845 898.088,683.845 898.648,683.845 899.207,683.845 899.766,683.845 900.325,683.845 900.885,683.845 901.444,683.845 902.003,683.845 902.562,683.845 903.122,683.845 903.681,683.845 904.24,683.845 904.799,683.845 905.359,683.845 905.918,683.845 906.477,683.845 907.036,683.845 907.596,683.845 908.155,683.845 908.714,683.845 909.273,683.845 909.833,683.845 910.392,683.845 910.951,683.845 911.51,683.845 912.07,683.845 912.629,683.845 913.188,683.845 913.747,683.845 914.307,683.845 914.866,683.845 915.425,683.845 915.984,683.845 916.544,683.845 917.103,683.845 917.662,683.845 918.221,683.845 918.781,683.845 919.34,683.845 919.899,683.845 920.458,683.845 921.018,683.845 921.577,683.845 922.136,683.845 922.695,683.845 923.255,683.845 923.814,683.845 924.373,683.845 924.932,683.845 925.492,683.845 926.051,683.845 926.61,683.845 927.169,683.845 927.729,683.845 928.288,683.845 928.847,683.845 929.406,683.845 929.966,683.845 930.525,683.845 931.084,683.845 931.644,683.845 932.203,683.845 932.762,683.845 933.321,683.845 933.881,683.845 934.44,683.845 934.999,683.845 935.558,683.845 936.118,683.845 936.677,683.845 937.236,683.845 937.795,683.845 938.355,683.845 938.914,683.845 939.473,683.845 940.032,683.845 940.592,683.845 941.151,683.845 941.71,683.845 942.269,683.845 942.829,683.845 943.388,683.845 943.947,683.845 944.506,683.845 945.066,683.845 945.625,683.845 946.184,683.845 946.743,683.845 947.303,683.845 947.862,683.845 948.421,683.845 948.98,683.845 949.54,683.845 950.099,683.845 950.658,683.845 951.217,683.845 951.777,683.845 952.336,683.845 952.895,683.845 953.454,683.845 954.014,683.845 954.573,683.845 955.132,683.845 955.691,683.845 956.251,683.845 956.81,683.845 957.369,683.845 957.928,683.845 958.488,683.845 959.047,683.845 959.606,683.845 960.165,683.845 960.725,683.845 961.284,683.845 961.843,683.845 962.402,683.845 962.962,683.845 963.521,683.845 964.08,683.845 964.639,683.845 965.199,683.845 965.758,683.845 966.317,683.845 966.876,683.845 967.436,683.845 967.995,683.845 968.554,683.845 969.113,683.845 969.673,683.845 970.232,683.845 970.791,683.845 971.35,683.845 971.91,683.845 972.469,683.845 973.028,683.845 973.587,683.845 974.147,683.845 974.706,683.845 975.265,683.845 975.824,683.845 976.384,683.845 976.943,683.845 977.502,683.845 978.061,683.845 978.621,683.845 979.18,683.845 979.739,683.845 980.298,683.845 980.858,683.845 981.417,683.845 981.976,683.845 982.535,683.845 983.095,683.845 983.654,683.845 984.213,683.845 984.772,683.845 985.332,683.845 985.891,683.845 986.45,683.845 987.009,683.845 987.569,683.845 988.128,683.845 988.687,683.845 989.246,683.845 989.806,683.845 990.365,683.845 990.924,683.845 991.483,683.845 992.043,683.845 992.602,683.845 993.161,683.845 993.72,683.845 994.28,683.845 994.839,683.845 995.398,683.845 995.957,683.845 996.517,683.845 997.076,683.845 997.635,683.845 998.194,683.845 998.754,683.845 999.313,683.845 999.872,683.845 1000.43,683.845 1000.99,683.845 1001.55,683.845 1002.11,683.845 1002.67,683.845 1003.23,683.845 1003.79,683.845 1004.35,683.845 1004.91,683.845 1005.46,683.845 1006.02,683.845 1006.58,683.845 1007.14,683.845 1007.7,683.845 1008.26,683.845 1008.82,683.845 1009.38,683.845 1009.94,683.845 1010.5,683.845 1011.06,683.845 1011.62,683.845 1012.18,683.845 1012.73,683.845 1013.29,683.845 1013.85,683.845 1014.41,683.845 1014.97,683.845 1015.53,683.845 1016.09,683.845 1016.65,683.845 1017.21,683.845 1017.77,683.845 1018.33,683.845 1018.89,683.845 1019.45,683.845 1020.01,683.845 1020.56,683.845 1021.12,683.845 1021.68,683.845 1022.24,683.845 1022.8,683.845 1023.36,683.845 1023.92,683.845 1024.48,683.845 1025.04,683.845 1025.6,683.845 1026.16,683.845 1026.72,683.845 1027.28,683.845 1027.83,683.845 1028.39,683.845 1028.95,683.845 1029.51,683.845 1030.07,683.845 1030.63,683.845 1031.19,683.845 1031.75,683.845 1032.31,683.845 1032.87,683.845 1033.43,683.845 1033.99,683.845 1034.55,683.845 1035.1,683.845 1035.66,683.845 1036.22,683.845 1036.78,683.845 1037.34,683.845 1037.9,683.845 1038.46,683.845 1039.02,683.845 1039.58,683.845 1040.14,683.845 1040.7,683.845 1041.26,683.845 1041.82,683.845 1042.38,683.845 1042.93,683.845 1043.49,683.845 1044.05,683.845 1044.61,683.845 1045.17,683.845 1045.73,683.845 1046.29,683.845 1046.85,683.845 1047.41,683.845 1047.97,683.845 1048.53,683.845 1049.09,683.845 1049.65,683.845 1050.2,683.845 1050.76,683.845 1051.32,683.845 1051.88,683.845 1052.44,683.845 1053,683.845 1053.56,683.845 1054.12,683.845 1054.68,683.845 1055.24,683.845 1055.8,683.845 1056.36,683.845 1056.92,683.845 1057.48,683.845 1058.03,683.845 1058.59,683.845 1059.15,683.845 1059.71,683.845 1060.27,683.845 1060.83,683.845 1061.39,683.845 1061.95,683.845 1062.51,683.845 1063.07,683.845 1063.63,683.845 1064.19,683.845 1064.75,683.845 1065.3,683.845 1065.86,683.845 1066.42,683.845 1066.98,683.845 1067.54,683.845 1068.1,683.845 1068.66,683.845 1069.22,683.845 1069.78,683.845 1070.34,683.845 1070.9,683.845 1071.46,683.845 1072.02,683.845 1072.57,683.845 1073.13,683.845 1073.69,683.845 1074.25,683.845 1074.81,683.845 1075.37,683.845 1075.93,683.845 1076.49,683.845 1077.05,683.845 1077.61,683.845 1078.17,683.845 1078.73,683.845 1079.29,683.845 1079.85,683.845 1080.4,683.845 1080.96,683.845 1081.52,683.845 1082.08,683.845 1082.64,683.845 1083.2,683.845 1083.76,683.845 1084.32,683.845 1084.88,683.845 1085.44,683.845 1086,683.845 1086.56,683.845 1087.12,683.845 1087.67,683.845 1088.23,683.845 1088.79,683.845 1089.35,683.845 1089.91,683.845 1090.47,683.845 1091.03,683.845 1091.59,683.845 1092.15,683.845 1092.71,683.845 1093.27,683.845 1093.83,683.845 1094.39,683.845 1094.94,683.845 1095.5,683.845 1096.06,683.845 1096.62,683.845 1097.18,683.845 1097.74,683.845 1098.3,683.845 1098.86,683.845 1099.42,683.845 1099.98,683.845 1100.54,683.845 1101.1,683.845 1101.66,683.845 1102.22,683.845 1102.77,683.845 1103.33,683.845 1103.89,683.845 1104.45,683.845 1105.01,683.845 1105.57,683.845 1106.13,683.845 1106.69,683.845 1107.25,683.845 1107.81,683.845 1108.37,683.845 1108.93,683.845 1109.49,683.845 1110.04,683.845 1110.6,683.845 1111.16,683.845 1111.72,683.845 1112.28,683.845 1112.84,683.845 1113.4,683.845 1113.96,683.845 1114.52,683.845 1115.08,683.845 1115.64,683.845 1116.2,683.845 1116.76,683.845 1117.31,683.845 1117.87,683.845 1118.43,683.845 1118.99,683.845 1119.55,683.845 1120.11,683.845 1120.67,683.845 1121.23,683.845 1121.79,683.845 1122.35,683.845 1122.91,683.845 1123.47,683.845 1124.03,683.845 1124.59,683.845 1125.14,683.845 1125.7,683.845 1126.26,683.845 1126.82,683.845 1127.38,683.845 1127.94,683.845 1128.5,683.845 1129.06,683.845 1129.62,683.845 1130.18,683.845 1130.74,683.845 1131.3,683.845 1131.86,683.845 1132.41,683.845 1132.97,683.845 1133.53,683.845 1134.09,683.845 1134.65,683.845 1135.21,683.845 1135.77,683.845 1136.33,683.845 1136.89,683.845 1137.45,683.845 1138.01,683.845 1138.57,683.845 1139.13,683.845 1139.68,683.845 1140.24,683.845 1140.8,683.845 1141.36,683.845 1141.92,683.845 1142.48,683.845 1143.04,683.845 1143.6,683.845 1144.16,683.845 1144.72,683.845 1145.28,683.845 1145.84,683.845 1146.4,683.845 1146.96,683.845 1147.51,683.845 1148.07,683.845 1148.63,683.845 1149.19,683.845 1149.75,683.845 1150.31,683.845 1150.87,683.845 1151.43,683.845 1151.99,683.845 1152.55,683.845 1153.11,683.845 1153.67,683.845 1154.23,683.845 1154.78,683.845 1155.34,683.845 1155.9,683.845 1156.46,683.845 1157.02,683.845 1157.58,683.845 1158.14,683.845 1158.7,683.845 1159.26,683.845 1159.82,683.845 1160.38,683.845 1160.94,683.845 1161.5,683.845 1162.05,683.845 1162.61,683.845 1163.17,683.845 1163.73,683.845 1164.29,683.845 1164.85,683.845 1165.41,683.845 1165.97,683.845 1166.53,683.845 1167.09,683.845 1167.65,683.845 1168.21,683.845 1168.77,683.845 1169.33,683.845 1169.88,683.845 1170.44,683.845 1171,683.845 1171.56,683.845 1172.12,683.845 1172.68,683.845 1173.24,683.845 1173.8,683.845 1174.36,683.845 1174.92,683.845 1175.48,683.845 1176.04,683.845 1176.6,683.845 1177.15,683.845 1177.71,683.845 1178.27,683.845 1178.83,683.845 1179.39,683.845 1179.95,683.845 1180.51,683.845 1181.07,683.845 1181.63,683.845 1182.19,683.845 1182.75,683.845 1183.31,683.845 1183.87,683.845 1184.43,683.845 1184.98,683.845 1185.54,683.845 1186.1,683.845 1186.66,683.845 1187.22,683.845 1187.78,683.845 1188.34,683.845 1188.9,683.845 1189.46,683.845 1190.02,683.845 1190.58,683.845 1191.14,683.845 1191.7,683.845 1192.25,683.845 1192.81,683.845 1193.37,683.845 1193.93,683.845 1194.49,683.845 1195.05,683.845 1195.61,683.845 1196.17,683.845 1196.73,683.845 1197.29,683.845 1197.85,683.845 1198.41,683.845 1198.97,683.845 1199.52,683.845 1200.08,683.845 1200.64,683.845 1201.2,683.845 1201.76,683.845 1202.32,683.845 1202.88,683.845 1203.44,683.845 1204,683.845 1204.56,683.845 1205.12,683.845 1205.68,683.845 1206.24,683.845 1206.8,683.845 1207.35,683.845 1207.91,683.845 1208.47,683.845 1209.03,683.845 1209.59,683.845 1210.15,683.845 1210.71,683.845 1211.27,683.845 1211.83,683.845 1212.39,683.845 1212.95,683.845 1213.51,683.845 1214.07,683.845 1214.62,683.845 1215.18,683.845 1215.74,683.845 1216.3,683.845 1216.86,683.845 1217.42,683.845 1217.98,683.845 1218.54,683.845 1219.1,683.845 1219.66,683.845 1220.22,683.845 1220.78,683.845 1221.34,683.845 1221.89,683.845 1222.45,683.845 1223.01,683.845 1223.57,683.845 1224.13,683.845 1224.69,683.845 1225.25,683.845 1225.81,683.845 1226.37,683.845 1226.93,683.845 1227.49,683.845 1228.05,683.845 1228.61,683.845 1229.17,683.845 1229.72,683.845 1230.28,683.845 1230.84,683.845 1231.4,683.845 1231.96,683.845 1232.52,683.845 1233.08,683.845 1233.64,683.845 1234.2,683.845 1234.76,683.845 1235.32,683.845 1235.88,683.845 1236.44,683.845 1236.99,683.845 1237.55,683.845 1238.11,683.845 1238.67,683.845 1239.23,683.845 1239.79,683.845 1240.35,683.845 1240.91,683.845 1241.47,683.845 1242.03,683.845 1242.59,683.845 1243.15,683.845 1243.71,683.845 1244.26,683.845 1244.82,683.845 1245.38,683.845 1245.94,683.845 1246.5,683.845 1247.06,683.845 1247.62,683.845 1248.18,683.845 1248.74,683.845 1249.3,683.845 1249.86,683.845 1250.42,683.845 1250.98,683.845 1251.54,683.845 1252.09,683.845 1252.65,683.845 1253.21,683.845 1253.77,683.845 1254.33,683.845 1254.89,683.845 1255.45,683.845 1256.01,683.845 1256.57,683.845 1257.13,683.845 1257.69,683.845 1258.25,683.845 1258.81,683.845 1259.36,683.845 1259.92,683.845 1260.48,683.845 1261.04,683.845 1261.6,683.845 1262.16,683.845 1262.72,683.845 1263.28,683.845 1263.84,683.845 1264.4,683.845 1264.96,683.845 1265.52,683.845 1266.08,683.845 1266.63,683.845 1267.19,683.845 1267.75,683.845 1268.31,683.845 1268.87,683.845 1269.43,683.845 1269.99,683.845 1270.55,683.845 1271.11,683.845 1271.67,683.845 1272.23,683.845 1272.79,683.845 1273.35,683.845 1273.91,683.845 1274.46,683.845 1275.02,683.845 1275.58,683.845 1276.14,683.845 1276.7,683.845 1277.26,683.845 1277.82,683.845 1278.38,683.845 1278.94,683.845 1279.5,683.845 1280.06,683.845 1280.62,683.845 1281.18,683.845 1281.73,683.845 1282.29,683.845 1282.85,683.845 1283.41,683.845 1283.97,683.845 1284.53,683.845 1285.09,683.845 1285.65,683.845 1286.21,683.845 1286.77,683.845 1287.33,683.845 1287.89,683.845 1288.45,683.845 1289,683.845 1289.56,683.845 1290.12,683.845 1290.68,683.845 1291.24,683.845 1291.8,683.845 1292.36,683.845 1292.92,683.845 1293.48,683.845 1294.04,683.845 1294.6,683.845 1295.16,683.845 1295.72,683.845 1296.28,683.845 1296.83,683.845 1297.39,683.845 1297.95,683.845 1298.51,683.845 1299.07,683.845 1299.63,683.845 1300.19,683.845 1300.75,683.845 1301.31,683.845 1301.87,683.845 1302.43,683.845 1302.99,683.845 1303.55,683.845 1304.1,683.845 1304.66,683.845 1305.22,683.845 1305.78,683.845 1306.34,683.845 1306.9,683.845 1307.46,683.845 1308.02,683.845 1308.58,683.845 1309.14,683.845 1309.7,683.845 1310.26,683.845 1310.82,683.845 1311.38,683.845 1311.93,683.845 1312.49,683.845 1313.05,683.845 1313.61,683.845 1314.17,683.845 1314.73,683.845 1315.29,683.845 1315.85,683.845 1316.41,683.845 1316.97,683.845 1317.53,683.845 1318.09,683.845 1318.65,683.845 1319.2,683.845 1319.76,683.845 1320.32,683.845 1320.88,683.845 1321.44,683.845 1322,683.845 1322.56,683.845 1323.12,683.845 1323.68,683.845 1324.24,683.845 1324.8,683.845 1325.36,683.845 1325.92,683.845 1326.47,683.845 1327.03,683.845 1327.59,683.845 1328.15,683.845 1328.71,683.845 1329.27,683.845 1329.83,683.845 1330.39,683.845 1330.95,683.845 1331.51,683.845 1332.07,683.845 1332.63,683.845 1333.19,683.845 1333.75,683.845 1334.3,683.845 1334.86,683.845 1335.42,683.845 1335.98,683.845 1336.54,683.845 1337.1,683.845 1337.66,683.845 1338.22,683.845 1338.78,683.845 1339.34,683.845 1339.9,683.845 1340.46,683.845 1341.02,683.845 1341.57,683.845 1342.13,683.845 1342.69,683.845 1343.25,683.845 1343.81,683.845 1344.37,683.845 1344.93,683.845 1345.49,683.845 1346.05,683.845 1346.61,683.845 1347.17,683.845 1347.73,683.845 1348.29,683.845 1348.84,683.845 1349.4,683.845 1349.96,683.845 1350.52,683.845 1351.08,683.845 1351.64,683.845 1352.2,683.845 1352.76,683.845 1353.32,683.845 1353.88,683.845 1354.44,683.845 1355,683.845 1355.56,683.845 1356.12,683.845 1356.67,683.845 1357.23,683.845 1357.79,683.845 1358.35,683.845 1358.91,683.845 1359.47,683.845 1360.03,683.845 1360.59,683.845 1361.15,683.845 1361.71,683.845 1362.27,683.845 1362.83,683.845 1363.39,683.845 1363.94,683.845 1364.5,683.845 1365.06,683.845 1365.62,683.845 1366.18,683.845 1366.74,683.845 1367.3,683.845 1367.86,683.845 1368.42,683.845 1368.98,683.845 1369.54,683.845 1370.1,683.845 1370.66,683.845 1371.21,683.845 1371.77,683.845 1372.33,683.845 1372.89,683.845 1373.45,683.845 1374.01,683.845 1374.57,683.845 1375.13,683.845 1375.69,683.845 1376.25,683.845 1376.81,683.845 1377.37,683.845 1377.93,683.845 1378.49,683.845 1379.04,683.845 1379.6,683.845 1380.16,683.845 1380.72,683.845 1381.28,683.845 1381.84,683.845 1382.4,683.845 1382.96,683.845 1383.52,683.845 1384.08,683.845 1384.64,683.845 1385.2,683.845 1385.76,683.845 1386.31,683.845 1386.87,683.845 1387.43,683.845 1387.99,683.845 1388.55,683.845 1389.11,683.845 1389.67,683.845 1390.23,683.845 1390.79,683.845 1391.35,683.845 1391.91,683.845 1392.47,683.845 1393.03,683.845 1393.58,683.845 1394.14,683.845 1394.7,683.845 1395.26,683.845 1395.82,683.845 1396.38,683.845 1396.94,683.845 1397.5,683.845 1398.06,683.845 1398.62,683.845 1399.18,683.845 1399.74,683.845 1400.3,683.845 1400.86,683.845 1401.41,683.845 1401.97,683.845 1402.53,683.845 1403.09,683.845 1403.65,683.845 1404.21,683.845 1404.77,683.845 1405.33,683.845 1405.89,683.845 1406.45,683.845 1407.01,683.845 1407.57,683.845 1408.13,683.845 1408.68,683.845 1409.24,683.845 1409.8,683.845 1410.36,683.845 1410.92,683.845 1411.48,683.845 1412.04,683.845 1412.6,683.845 1413.16,683.845 1413.72,683.845 1414.28,683.845 1414.84,683.845 1415.4,683.845 1415.95,683.845 1416.51,683.845 1417.07,683.845 1417.63,683.845 1418.19,683.845 1418.75,683.845 1419.31,683.845 1419.87,683.845 1420.43,683.845 1420.99,683.845 1421.55,683.845 1422.11,683.845 1422.67,683.845 1423.23,683.845 1423.78,683.845 1424.34,683.845 1424.9,683.845 1425.46,683.845 1426.02,683.845 1426.58,683.845 1427.14,683.845 1427.7,683.845 1428.26,683.845 1428.82,683.845 1429.38,683.845 1429.94,683.845 1430.5,683.845 1431.05,683.845 1431.61,683.845 1432.17,683.845 1432.73,683.845 1433.29,683.845 1433.85,683.845 1434.41,683.845 1434.97,683.845 1435.53,683.845 1436.09,683.845 1436.65,683.845 1437.21,683.845 1437.77,683.845 1438.33,683.845 1438.88,683.845 1439.44,683.845 1440,683.845 1440.56,683.845 1441.12,683.845 1441.68,683.845 1442.24,683.845 1442.8,683.845 1443.36,683.845 1443.92,683.845 1444.48,683.845 1445.04,683.845 1445.6,683.845 1446.15,683.845 1446.71,683.845 1447.27,683.845 1447.83,683.845 1448.39,683.845 1448.95,683.845 1449.51,683.845 1450.07,683.845 1450.63,683.845 1451.19,683.845 1451.75,683.845 1452.31,683.845 1452.87,683.845 1453.42,683.845 1453.98,683.845 1454.54,683.845 1455.1,683.845 1455.66,683.845 1456.22,683.845 1456.78,683.845 1457.34,683.845 1457.9,683.845 1458.46,683.845 1459.02,683.845 1459.58,683.845 1460.14,683.845 1460.7,683.845 1461.25,683.845 1461.81,683.845 1462.37,683.845 1462.93,683.845 1463.49,683.845 1464.05,683.845 1464.61,683.845 1465.17,683.845 1465.73,683.845 1466.29,683.845 1466.85,683.845 1467.41,683.845 1467.97,683.845 1468.52,683.845 1469.08,683.845 1469.64,683.845 1470.2,683.845 1470.76,683.845 1471.32,683.845 1471.88,683.845 1472.44,683.845 1473,683.845 1473.56,683.845 1474.12,683.845 1474.68,683.845 1475.24,683.845 1475.79,683.845 1476.35,683.845 1476.91,683.845 1477.47,683.845 1478.03,683.845 1478.59,683.845 1479.15,683.845 1479.71,683.845 1480.27,683.845 1480.83,683.845 1481.39,683.845 1481.95,683.845 1482.51,683.845 1483.07,683.845 1483.62,683.845 1484.18,683.845 1484.74,683.845 1485.3,683.845 1485.86,683.845 1486.42,683.845 1486.98,683.845 1487.54,683.845 1488.1,683.845 1488.66,683.845 1489.22,683.845 1489.78,683.845 1490.34,683.845 1490.89,683.845 1491.45,683.845 1492.01,683.845 1492.57,683.845 1493.13,683.845 1493.69,683.845 1494.25,683.845 1494.81,683.845 1495.37,683.845 1495.93,683.845 1496.49,683.845 1497.05,683.845 1497.61,683.845 1498.16,683.845 1498.72,683.845 1499.28,683.845 1499.84,683.845 1500.4,683.845 1500.96,683.845 1501.52,683.845 1502.08,683.845 1502.64,683.845 1503.2,683.845 1503.76,683.845 1504.32,683.845 1504.88,683.845 1505.44,683.845 1505.99,683.845 1506.55,683.845 1507.11,683.845 1507.67,683.845 1508.23,683.845 1508.79,683.845 1509.35,683.845 1509.91,683.845 1510.47,683.845 1511.03,683.845 1511.59,683.845 1512.15,683.845 1512.71,683.845 1513.26,683.845 1513.82,683.845 1514.38,683.845 1514.94,683.845 1515.5,683.845 1516.06,683.845 1516.62,683.845 1517.18,683.845 1517.74,683.845 1518.3,683.845 1518.86,683.845 1519.42,683.845 1519.98,683.845 1520.53,683.845 1521.09,683.845 1521.65,683.845 1522.21,683.845 1522.77,683.845 1523.33,683.845 1523.89,683.845 1524.45,683.845 1525.01,683.845 1525.57,683.845 1526.13,683.845 1526.69,683.845 1527.25,683.845 1527.81,683.845 1528.36,683.845 1528.92,683.845 1529.48,683.845 1530.04,683.845 1530.6,683.845 1531.16,683.845 1531.72,683.845 1532.28,683.845 1532.84,683.845 1533.4,683.845 1533.96,683.845 1534.52,683.845 1535.08,683.845 1535.63,683.845 1536.19,683.845 1536.75,683.845 1537.31,683.845 1537.87,683.845 1538.43,683.845 1538.99,683.845 1539.55,683.845 1540.11,683.845 1540.67,683.845 1541.23,683.845 1541.79,683.845 1542.35,683.845 1542.9,683.845 1543.46,683.845 1544.02,683.845 1544.58,683.845 1545.14,683.845 1545.7,683.845 1546.26,683.845 1546.82,683.845 1547.38,683.845 1547.94,683.845 1548.5,683.845 1549.06,683.845 1549.62,683.845 1550.18,683.845 1550.73,683.845 1551.29,683.845 1551.85,683.845 1552.41,683.845 1552.97,683.845 1553.53,683.845 1554.09,683.845 1554.65,683.845 1555.21,683.845 1555.77,683.845 1556.33,683.845 1556.89,683.845 1557.45,683.845 1558,683.845 1558.56,683.845 1559.12,683.845 1559.68,683.845 1560.24,683.845 1560.8,683.845 1561.36,683.845 1561.92,683.845 1562.48,683.845 1563.04,683.845 1563.6,683.845 1564.16,683.845 1564.72,683.845 1565.28,683.845 1565.83,683.845 1566.39,683.845 1566.95,683.845 1567.51,683.845 1568.07,683.845 1568.63,683.845 1569.19,683.845 1569.75,683.845 1570.31,683.845 1570.87,683.845 1571.43,683.845 1571.99,683.845 1572.55,683.845 1573.1,683.845 1573.66,683.845 1574.22,683.845 1574.78,683.845 1575.34,683.845 1575.9,683.845 1576.46,683.845 1577.02,683.845 1577.58,683.845 1578.14,683.845 1578.7,683.845 1579.26,683.845 1579.82,683.845 1580.37,683.845 1580.93,683.845 1581.49,683.845 1582.05,683.845 1582.61,683.845 1583.17,683.845 1583.73,683.845 1584.29,683.845 1584.85,683.845 1585.41,683.845 1585.97,683.845 1586.53,683.845 1587.09,683.845 1587.65,683.845 1588.2,683.845 1588.76,683.845 1589.32,683.845 1589.88,683.845 1590.44,683.845 1591,683.845 1591.56,683.845 1592.12,683.845 1592.68,683.845 1593.24,683.845 1593.8,683.845 1594.36,683.845 1594.92,683.845 1595.47,683.845 1596.03,683.845 1596.59,683.845 1597.15,683.845 1597.71,683.845 1598.27,683.845 1598.83,683.845 1599.39,683.845 1599.95,683.845 1600.51,683.845 1601.07,683.845 1601.63,683.845 1602.19,683.845 1602.74,683.845 1603.3,683.845 1603.86,683.845 1604.42,683.845 1604.98,683.845 1605.54,683.845 1606.1,683.845 1606.66,683.845 1607.22,683.845 1607.78,683.845 1608.34,683.845 1608.9,683.845 1609.46,683.845 1610.02,683.845 1610.57,683.845 1611.13,683.845 1611.69,683.845 1612.25,683.845 1612.81,683.845 1613.37,683.845 1613.93,683.845 1614.49,683.845 1615.05,683.845 1615.61,683.845 1616.17,683.845 1616.73,683.845 1617.29,683.845 1617.84,683.845 1618.4,683.845 1618.96,683.845 1619.52,683.845 1620.08,683.845 1620.64,683.845 1621.2,683.845 1621.76,683.845 1622.32,683.845 1622.88,683.845 1623.44,683.845 1624,683.845 1624.56,683.845 1625.11,683.845 1625.67,683.845 1626.23,683.845 1626.79,683.845 1627.35,683.845 1627.91,683.845 1628.47,683.845 1629.03,683.845 1629.59,683.845 1630.15,683.845 1630.71,683.845 1631.27,683.845 1631.83,683.845 1632.39,683.845 1632.94,683.845 1633.5,683.845 1634.06,683.845 1634.62,683.845 1635.18,683.845 1635.74,683.845 1636.3,683.845 1636.86,683.845 1637.42,683.845 1637.98,683.845 1638.54,683.845 1639.1,683.845 1639.66,683.845 1640.21,683.845 1640.77,683.845 1641.33,683.845 1641.89,683.845 1642.45,683.845 1643.01,683.845 1643.57,683.845 1644.13,683.845 1644.69,683.845 1645.25,683.845 1645.81,683.845 1646.37,683.845 1646.93,683.845 1647.48,683.845 1648.04,683.845 1648.6,683.845 1649.16,683.845 1649.72,683.845 1650.28,683.845 1650.84,683.845 1651.4,683.845 1651.96,683.845 1652.52,683.845 1653.08,683.845 1653.64,683.845 1654.2,683.845 1654.76,683.845 1655.31,683.845 1655.87,683.845 1656.43,683.845 1656.99,683.845 1657.55,683.845 1658.11,683.845 1658.67,683.845 1659.23,683.845 1659.79,683.845 1660.35,683.845 1660.91,683.845 1661.47,683.845 1662.03,683.845 1662.58,683.845 1663.14,683.845 1663.7,683.845 1664.26,683.845 1664.82,683.845 1665.38,683.845 1665.94,683.845 1666.5,683.845 1667.06,683.845 1667.62,683.845 1668.18,683.845 1668.74,683.845 1669.3,683.845 1669.85,683.845 1670.41,683.845 1670.97,683.845 1671.53,683.845 1672.09,683.845 1672.65,683.845 1673.21,683.845 1673.77,683.845 1674.33,683.845 1674.89,683.845 1675.45,683.845 1676.01,683.845 1676.57,683.845 1677.13,683.845 1677.68,683.845 1678.24,683.845 1678.8,683.845 1679.36,683.845 1679.92,683.845 1680.48,683.845 1681.04,683.845 1681.6,683.845 1682.16,683.845 1682.72,683.845 1683.28,683.845 1683.84,683.845 1684.4,683.845 1684.95,683.845 1685.51,683.845 1686.07,683.845 1686.63,683.845 1687.19,683.845 1687.75,683.845 1688.31,683.845 1688.87,683.845 1689.43,683.845 1689.99,683.845 1690.55,683.845 1691.11,683.845 1691.67,683.845 1692.23,683.845 1692.78,683.845 1693.34,683.845 1693.9,683.845 1694.46,683.845 1695.02,683.845 1695.58,683.845 1696.14,683.845 1696.7,683.845 1697.26,683.845 1697.82,683.845 1698.38,683.845 1698.94,683.845 1699.5,683.845 1700.05,683.845 1700.61,683.845 1701.17,683.845 1701.73,683.845 1702.29,683.845 1702.85,683.845 1703.41,683.845 1703.97,683.845 1704.53,683.845 1705.09,683.845 1705.65,683.845 1706.21,683.845 1706.77,683.845 1707.32,683.845 1707.88,683.845 1708.44,683.845 1709,683.845 1709.56,683.845 1710.12,683.845 1710.68,683.845 1711.24,683.845 1711.8,683.845 1712.36,683.845 1712.92,683.845 1713.48,683.845 1714.04,683.845 1714.6,683.845 1715.15,683.845 1715.71,683.845 1716.27,683.845 1716.83,683.845 1717.39,683.845 1717.95,683.845 1718.51,683.845 1719.07,683.845 1719.63,683.845 1720.19,683.845 1720.75,683.845 1721.31,683.845 1721.87,683.845 1722.42,683.845 1722.98,683.845 1723.54,683.845 1724.1,683.845 1724.66,683.845 1725.22,683.845 1725.78,683.845 1726.34,683.845 1726.9,683.845 1727.46,683.845 1728.02,683.845 1728.58,683.845 1729.14,683.845 1729.69,683.845 1730.25,683.845 1730.81,683.845 1731.37,683.845 1731.93,683.845 1732.49,683.845 1733.05,683.845 1733.61,683.845 1734.17,683.845 1734.73,683.845 1735.29,683.845 1735.85,683.845 1736.41,683.845 1736.97,683.845 1737.52,683.845 1738.08,683.845 1738.64,683.845 1739.2,683.845 1739.76,683.845 1740.32,683.845 1740.88,683.845 1741.44,683.845 1742,683.845 1742.56,683.845 1743.12,683.845 1743.68,683.845 1744.24,683.845 1744.79,683.845 1745.35,683.845 1745.91,683.845 1746.47,683.845 1747.03,683.845 1747.59,683.845 1748.15,683.845 1748.71,683.845 1749.27,683.845 1749.83,683.845 1750.39,683.845 1750.95,683.845 1751.51,683.845 1752.06,683.845 1752.62,683.845 1753.18,683.845 1753.74,683.845 1754.3,683.845 1754.86,683.845 1755.42,683.845 1755.98,683.845 1756.54,683.845 1757.1,683.845 1757.66,683.845 1758.22,683.845 1758.78,683.845 1759.34,683.845 1759.89,683.845 1760.45,683.845 1761.01,683.845 1761.57,683.845 1762.13,683.845 1762.69,683.845 1763.25,683.845 1763.81,683.845 1764.37,683.845 1764.93,683.845 1765.49,683.845 1766.05,683.845 1766.61,683.845 1767.16,683.845 1767.72,683.845 1768.28,683.845 1768.84,683.845 1769.4,683.845 1769.96,683.845 1770.52,683.845 1771.08,683.845 1771.64,683.845 1772.2,683.845 1772.76,683.845 1773.32,683.845 1773.88,683.845 1774.43,683.845 1774.99,683.845 1775.55,683.845 1776.11,683.845 1776.67,683.845 1777.23,683.845 1777.79,683.845 1778.35,683.845 1778.91,683.845 1779.47,683.845 1780.03,683.845 1780.59,683.845 1781.15,683.845 1781.71,683.845 1782.26,683.845 1782.82,683.845 1783.38,683.845 1783.94,683.845 1784.5,683.845 1785.06,683.845 1785.62,683.845 1786.18,683.845 1786.74,683.845 1787.3,683.845 1787.86,683.845 1788.42,683.845 1788.98,683.845 1789.53,683.845 1790.09,683.845 1790.65,683.845 1791.21,683.845 1791.77,683.845 1792.33,683.845 1792.89,683.845 1793.45,683.845 1794.01,683.845 1794.57,683.845 1795.13,683.845 1795.69,683.845 1796.25,683.845 1796.8,683.845 1797.36,683.845 1797.92,683.845 1798.48,683.845 1799.04,683.845 1799.6,683.845 1800.16,683.845 1800.72,683.845 1801.28,683.845 1801.84,683.845 1802.4,683.845 1802.96,683.845 1803.52,683.845 1804.08,683.845 1804.63,683.845 1805.19,683.845 1805.75,683.845 1806.31,683.845 1806.87,683.845 1807.43,683.845 1807.99,683.845 1808.55,683.845 1809.11,683.845 1809.67,683.845 1810.23,683.845 1810.79,683.845 1811.35,683.845 1811.9,683.845 1812.46,683.845 1813.02,683.845 1813.58,683.845 1814.14,683.845 1814.7,683.845 1815.26,683.845 1815.82,683.845 1816.38,683.845 1816.94,683.845 1817.5,683.845 1818.06,683.845 1818.62,683.845 1819.18,683.845 1819.73,683.845 1820.29,683.845 1820.85,683.845 1821.41,683.845 1821.97,683.845 1822.53,683.845 1823.09,683.845 1823.65,683.845 1824.21,683.845 1824.77,683.845 1825.33,683.845 1825.89,683.845 1826.45,683.845 1827,683.845 1827.56,683.845 1828.12,683.845 1828.68,683.845 1829.24,683.845 1829.8,683.845 1830.36,683.845 1830.92,683.845 1831.48,683.845 1832.04,683.845 1832.6,683.845 1833.16,683.845 1833.72,683.845 1834.27,683.845 1834.83,683.845 1835.39,683.845 1835.95,683.845 1836.51,683.845 1837.07,683.845 1837.63,683.845 1838.19,683.845 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ¬± $(se.err)\n    Projected Energy: $(v.val) ¬± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032438852511232 ¬± 0.016609229524184872\nProjected Energy: -4.0163949097079135 ¬± (0.004482054534708624, 0.004173005343418801)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; Œ± = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-Œ±.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ¬± 0.0029\n  with uncertainty of ¬± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13√ó6 DataFrame\n Row ‚îÇ blocks  mean      std_err      std_err_err  p_cov       mj\n     ‚îÇ Int64   Float64   Float64      Float64      Float64     Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 ‚îÇ   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 ‚îÇ   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 ‚îÇ   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 ‚îÇ    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 ‚îÇ    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 ‚îÇ    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 ‚îÇ     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 ‚îÇ     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 ‚îÇ     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 ‚îÇ      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 ‚îÇ      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 ‚îÇ      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ästd err vs blocking steps‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n               ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n    0.00423501 ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ m test\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ std err\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°†‚¢∫‚†í‚†í‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ü‚£Ä‚†§‚°ó‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ß‚†§‚†î‚°ó‚†ä‚†â‚°è‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚¢£‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚°á‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£¶‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n   -0.00012335 ‚îÇ‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚îÇ\n               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n               ‚†Ä0.64‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äk‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä13.36‚†Ä\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; Œ± = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; Œ±=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.œÉ_f using x_by_y_linear. The standard error estimate r.œÉ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.Œ¥_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ¬± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*œÉ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3√ó3 DataFrame\n Row ‚îÇ res      res_l    res_u\n     ‚îÇ Float64  Float64  Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282\n   2 ‚îÇ    13.0  1.7282   1.7282\n   3 ‚îÇ    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dœÑ=df.dœÑ[end], skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ‚â• 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dœÑ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dœÑln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dœÑ=df.dœÑ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |œà‚ü© and |œï‚ü© is defined as\n\nF(œàœï) = fracœàœï^2œàœàœïœï \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v‚ãÖv == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ‚â• 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:¬±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ¬± 0.029\n  with uncertainty of ¬± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; Œ± = 0.01) -> k\nmtest(table::NamedTuple; Œ± = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-Œ± after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, œÉ_f, Œ¥_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nœÉ_f::T: std from linear propagation\nŒ¥_y::T: coefficient of variation for denominator (‚â§ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, Œº, œÉ)\nparticles(samples, Œº::AbstractVector, Œ£::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, œÉ_f, Œ¥_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nœÉ_f standard deviation of f from linear error propagation (normal approximation)\nŒ¥_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(Œº_x,Œº_y,œÉ_x,œÉ_y,œÅ) -> f, œÉ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013).\n\nœÉ_f = sqrtfracœÉ_xŒº_y^2 + fracŒº_x œÉ_yŒº_y^2^2 - frac2 œÅ Œº_xŒº_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3√ó7 DataFrame\n Row ‚îÇ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     ‚îÇ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 ‚îÇ    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 ‚îÇ    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1√ó9 DataFrame\n Row ‚îÇ val       val_l      val_u      val_f     val_œÉ_f    val_Œ¥_y    val_k  val_blocks  val_success\n     ‚îÇ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dœÑ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7√ó6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS‚Ä¶</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple‚Ä¶</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.52075</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5709e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8535e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.558e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.663e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.975e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.646e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ‚â† basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10√ó10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10√ó10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nŒîE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ŒîE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0‚ü©\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0‚ü©\"\n fs\"|0 1 2 1 0‚ü©\"\n fs\"|1 0 2 0 1‚ü©\"\n fs\"|1 0 1 2 0‚ü©\"\n fs\"|0 0 1 1 2‚ü©\"\n fs\"|0 2 1 0 1‚ü©\"\n fs\"|2 1 1 0 0‚ü©\"\n fs\"|0 2 0 2 0‚ü©\"\n fs\"|1 1 0 1 1‚ü©\"\n fs\"|2 0 0 0 2‚ü©\"\n fs\"|0 0 0 3 1‚ü©\"\n fs\"|3 0 0 1 0‚ü©\"\n fs\"|0 1 0 0 3‚ü©\"\n fs\"|1 3 0 0 0‚ü©\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ‚âà all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0‚ü©\" => -0.0214153\n  fs\"|2 0 0 0 2‚ü©\" => -0.00237613\n  fs\"|0 0 4 0 0‚ü©\" => -0.980348\n  fs\"|0 0 0 3 1‚ü©\" => 0.00363555\n  fs\"|2 1 1 0 0‚ü©\" => -0.0119687\n  fs\"|1 0 2 0 1‚ü©\" => 0.0768085\n  fs\"|1 3 0 0 0‚ü©\" => 0.00363555\n  fs\"|0 1 2 1 0‚ü©\" => 0.177701\n  fs\"|0 0 1 1 2‚ü©\" => -0.0119687\n  fs\"|3 0 0 1 0‚ü©\" => 0.00195478\n  fs\"|0 2 0 2 0‚ü©\" => -0.0138439\n  fs\"|1 1 0 1 1‚ü©\" => -0.00234782\n  fs\"|0 1 0 0 3‚ü©\" => 0.00195478\n  fs\"|0 2 1 0 1‚ü©\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardRealSpace\nHubbardReal1D\nHubbardReal1DEP\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardRealSpace\nHubbardReal1D\nHubbardReal1DEP\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleœÉ t_œÉ a^_iœÉ a_jœÉ +\n  frac12sum_iœÉ u_œÉœÉ n_iœÉ (n_iœÉ - 1) +\n  sum_iœÉœÑu_œÉœÑ n_iœÉ n_iœÑ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iœÉd v_œÉd x_di^2 n_iœÉ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C √ó D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i œµ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential œµ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, Œ∑, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, Œ∑, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i œµ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi œµ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nŒ∑s = (): a tuple of aspect ratios for the remaining dimensions (Œ∑_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/Œ∑_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kœÉk^2 n_kœÉ \n    quad + sum_pqkœÉœÉ T_pqk a^_p-kœÉ a^_q+kœÉ a_qœÉ a_pœÉ \n    quad + sum_pqskkœÉœÉ Q_kka^_p-kœÉ a^_q+kœÉ a^_s+k-kœÉ\n                                       a_sœÉ a_qœÉ a_pœÉ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + œâN - v Œ£‚Çñ(a‚Çñ^ + a‚Çñ)\n\nwhere p is the total momentum, p_f = Œ£_k k a‚Çñ^ a‚Çñ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2œÄl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons œâ.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0‚ü©{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M√∑2, M√∑2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M√∑2, M√∑2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address Œ± is replaced by frac12(Œ±  Œ±) for even and odd parity, respectively, where Œ±ÃÑ == reverse(Œ±).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1‚ü©\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ‚âà eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ‚âà eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ‚â§ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0‚ü©{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ‚â§ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, œÉ=1, œÑ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_œÉœÑ(d) = frac1M _i n_œÉi (n_œÑi+d - Œ¥_0dŒ¥_œÉœÑ)\n\nFor multicomponent addresses, œÉ and œÑ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s b^_p  b_q a_r Œ¥_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s a^_p  a_q a_r Œ¥_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ‚â§ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ‚â§ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iœÉ = hat a^_iœÉ hat a_iœÉ\n\nwhere i is the mode and œÉ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0‚ü©\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0‚ü©\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x‚ãÖ(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1‚ü©\", -3.0)\n (fs\"|2 2 2‚ü©\", -2.449489742783178)\n (fs\"|3 1 2‚ü©\", -2.0)\n (fs\"|4 1 1‚ü©\", -2.8284271247461903)\n (fs\"|4 2 0‚ü©\", -2.0)\n (fs\"|3 3 0‚ü©\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ‚Ä¶.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb‚ãÖ(1:7) == onr(b)‚ãÖ(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w‚ãÖop(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ‚ãÖ A ‚ãÖ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"hamiltonians.html#Deprecated-Hamiltonians","page":"Hamiltonians","title":"Deprecated Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"BoseHubbardReal1D2C\nBoseHubbardMom1D2C","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\nwarning: Warning\nThis type is deprecated and will be removed in a future release. Use HubbardRealSpace instead.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C{T} <: TwoComponentHamiltonian{T}\n\nSpecial case AbstractHamiltonian for a 2 component Bose gas. Use HubbardMom1D(::BoseFS2C; kwargs...) to construct this type.\n\nwarning: Warning\nThis type is not part of the user interface and may be removed in the future.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1‚ü©\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ‚âà values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3√ó3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2√ó2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1‚ü©\" => -0.57735   fs\"|0 1 0‚ü©\" => -0.57735   fs\"|1 0 0‚ü©\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nŒ±mathrmnaddrrangle\n\nReturns the new address naddr and the factor Œ±. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0‚ü©\" => 1\n\njulia> fs\"|0 1 2 0‚ü©\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3‚ü©‚äó|0 1 0‚ü©\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üë‚ü©\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0‚ü©{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0‚ü©{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ‚â§ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Œ£_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) √∑ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ‚â§ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|‚ãÖ‚Üë‚Üë‚Üë‚ãÖ‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üì‚ü©\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3‚ü©{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n‚Üí (nadd, Œ±)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3‚ü©{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, Œ± = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dœÑ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ after projecting onto projector.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracPŒ®^(n+1)PŒ®^(n)right)-fracŒædœÑlnleft(fracPŒ®^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4, Œ± = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracŒædœÑlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-Œ±)*walkernumber() + Œ±*UniformProjector()‚ãÖœà computed with walkernumber() and UniformProjector(). When Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)-fracŒædœÑlnleft(fracŒ®_1^n+1Œ®_1^texttargetright)\n\nWhen Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08, Œæ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, Œ∂ = 0.08,   Œæ = Œ∂^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dœÑ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\nùêì = 1 + dœÑ(S - ùêá)\n\nwhere ùêá is the hamiltonian and S is the shift.\n\nùêì represents the first order expansion of the exponential evolution operator of the imaginary-time Schr√∂dinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nŒ∂ = 0.08: Damping parameter for the shift update.\nŒæ = Œ∂^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, Œ∂, Œæ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dœÑ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(‚ãÖ,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dœÑ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndœÑ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3‚ü©\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nœÑ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, Œ∂ = 0.08, Œæ = Œ∂^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ‚âà num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0, fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5\n  fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dœÑ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dœÑ","text":"update_dœÑ(s<:TimeStepStrategy, dœÑ, tnorm) -> new dœÑ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    targetwalkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schr√∂dinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Bl√∂te PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schr√∂dinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija ƒåufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. ƒåufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelm√ºller, D. Huber, M. ƒåufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/œÄ^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => -1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -2.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 3.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 3.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()‚ãÖv == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
