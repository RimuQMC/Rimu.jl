var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the lomc! function with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.05 2211.02,1004.05 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.219 2211.02,746.219 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.391 2211.02,488.391 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.564 2211.02,230.564 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.05 423.181,1004.05 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.219 423.181,746.219 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.391 423.181,488.391 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.564 423.181,230.564 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.91 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M290.043 1017.39 L306.363 1017.39 L306.363 1021.33 L284.418 1021.33 L284.418 1017.39 Q287.08 1014.64 291.664 1010.01 Q296.27 1005.35 297.451 1004.01 Q299.696 1001.49 300.576 999.752 Q301.478 997.993 301.478 996.303 Q301.478 993.548 299.534 991.812 Q297.613 990.076 294.511 990.076 Q292.312 990.076 289.858 990.84 Q287.427 991.604 284.65 993.155 L284.65 988.432 Q287.474 987.298 289.927 986.719 Q292.381 986.141 294.418 986.141 Q299.789 986.141 302.983 988.826 Q306.177 991.511 306.177 996.002 Q306.177 998.131 305.367 1000.05 Q304.58 1001.95 302.474 1004.54 Q301.895 1005.21 298.793 1008.43 Q295.691 1011.63 290.043 1017.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 986.766 L334.58 986.766 L334.58 990.701 L320.506 990.701 L320.506 999.173 Q321.524 998.826 322.543 998.664 Q323.562 998.479 324.58 998.479 Q330.367 998.479 333.747 1001.65 Q337.126 1004.82 337.126 1010.24 Q337.126 1015.82 333.654 1018.92 Q330.182 1022 323.862 1022 Q321.687 1022 319.418 1021.63 Q317.173 1021.26 314.765 1020.52 L314.765 1015.82 Q316.849 1016.95 319.071 1017.51 Q321.293 1018.06 323.77 1018.06 Q327.774 1018.06 330.112 1015.96 Q332.45 1013.85 332.45 1010.24 Q332.45 1006.63 330.112 1004.52 Q327.774 1002.41 323.77 1002.41 Q321.895 1002.41 320.02 1002.83 Q318.168 1003.25 316.224 1004.13 L316.224 986.766 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 989.844 Q352.728 989.844 350.899 993.409 Q349.094 996.951 349.094 1004.08 Q349.094 1011.19 350.899 1014.75 Q352.728 1018.29 356.339 1018.29 Q359.973 1018.29 361.779 1014.75 Q363.608 1011.19 363.608 1004.08 Q363.608 996.951 361.779 993.409 Q359.973 989.844 356.339 989.844 M356.339 986.141 Q362.149 986.141 365.205 990.747 Q368.284 995.331 368.284 1004.08 Q368.284 1012.81 365.205 1017.41 Q362.149 1022 356.339 1022 Q350.529 1022 347.45 1017.41 Q344.395 1012.81 344.395 1004.08 Q344.395 995.331 347.45 990.747 Q350.529 986.141 356.339 986.141 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M286.062 728.939 L304.418 728.939 L304.418 732.874 L290.344 732.874 L290.344 741.346 Q291.363 740.999 292.381 740.837 Q293.4 740.652 294.418 740.652 Q300.205 740.652 303.585 743.823 Q306.964 746.994 306.964 752.411 Q306.964 757.989 303.492 761.091 Q300.02 764.17 293.701 764.17 Q291.525 764.17 289.256 763.8 Q287.011 763.429 284.603 762.688 L284.603 757.989 Q286.687 759.124 288.909 759.679 Q291.131 760.235 293.608 760.235 Q297.613 760.235 299.951 758.128 Q302.288 756.022 302.288 752.411 Q302.288 748.8 299.951 746.693 Q297.613 744.587 293.608 744.587 Q291.733 744.587 289.858 745.003 Q288.006 745.42 286.062 746.3 L286.062 728.939 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 732.017 Q322.566 732.017 320.737 735.582 Q318.932 739.124 318.932 746.253 Q318.932 753.36 320.737 756.925 Q322.566 760.466 326.177 760.466 Q329.811 760.466 331.617 756.925 Q333.446 753.36 333.446 746.253 Q333.446 739.124 331.617 735.582 Q329.811 732.017 326.177 732.017 M326.177 728.314 Q331.987 728.314 335.043 732.92 Q338.122 737.503 338.122 746.253 Q338.122 754.98 335.043 759.587 Q331.987 764.17 326.177 764.17 Q320.367 764.17 317.288 759.587 Q314.233 754.98 314.233 746.253 Q314.233 737.503 317.288 732.92 Q320.367 728.314 326.177 728.314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 732.017 Q352.728 732.017 350.899 735.582 Q349.094 739.124 349.094 746.253 Q349.094 753.36 350.899 756.925 Q352.728 760.466 356.339 760.466 Q359.973 760.466 361.779 756.925 Q363.608 753.36 363.608 746.253 Q363.608 739.124 361.779 735.582 Q359.973 732.017 356.339 732.017 M356.339 728.314 Q362.149 728.314 365.205 732.92 Q368.284 737.503 368.284 746.253 Q368.284 754.98 365.205 759.587 Q362.149 764.17 356.339 764.17 Q350.529 764.17 347.45 759.587 Q344.395 754.98 344.395 746.253 Q344.395 737.503 347.45 732.92 Q350.529 728.314 356.339 728.314 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M284.835 471.111 L307.057 471.111 L307.057 473.102 L294.511 505.671 L289.627 505.671 L301.432 475.047 L284.835 475.047 L284.835 471.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 471.111 L334.58 471.111 L334.58 475.047 L320.506 475.047 L320.506 483.519 Q321.524 483.172 322.543 483.01 Q323.562 482.824 324.58 482.824 Q330.367 482.824 333.747 485.996 Q337.126 489.167 337.126 494.584 Q337.126 500.162 333.654 503.264 Q330.182 506.343 323.862 506.343 Q321.687 506.343 319.418 505.972 Q317.173 505.602 314.765 504.861 L314.765 500.162 Q316.849 501.296 319.071 501.852 Q321.293 502.408 323.77 502.408 Q327.774 502.408 330.112 500.301 Q332.45 498.195 332.45 494.584 Q332.45 490.972 330.112 488.866 Q327.774 486.759 323.77 486.759 Q321.895 486.759 320.02 487.176 Q318.168 487.593 316.224 488.472 L316.224 471.111 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 474.19 Q352.728 474.19 350.899 477.755 Q349.094 481.297 349.094 488.426 Q349.094 495.533 350.899 499.097 Q352.728 502.639 356.339 502.639 Q359.973 502.639 361.779 499.097 Q363.608 495.533 363.608 488.426 Q363.608 481.297 361.779 477.755 Q359.973 474.19 356.339 474.19 M356.339 470.486 Q362.149 470.486 365.205 475.093 Q368.284 479.676 368.284 488.426 Q368.284 497.153 365.205 501.759 Q362.149 506.343 356.339 506.343 Q350.529 506.343 347.45 501.759 Q344.395 497.153 344.395 488.426 Q344.395 479.676 347.45 475.093 Q350.529 470.486 356.339 470.486 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M256.664 243.909 L264.303 243.909 L264.303 217.543 L255.992 219.21 L255.992 214.951 L264.256 213.284 L268.932 213.284 L268.932 243.909 L276.571 243.909 L276.571 247.844 L256.664 247.844 L256.664 243.909 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M296.015 216.363 Q292.404 216.363 290.576 219.928 Q288.77 223.469 288.77 230.599 Q288.77 237.705 290.576 241.27 Q292.404 244.812 296.015 244.812 Q299.65 244.812 301.455 241.27 Q303.284 237.705 303.284 230.599 Q303.284 223.469 301.455 219.928 Q299.65 216.363 296.015 216.363 M296.015 212.659 Q301.826 212.659 304.881 217.266 Q307.96 221.849 307.96 230.599 Q307.96 239.326 304.881 243.932 Q301.826 248.516 296.015 248.516 Q290.205 248.516 287.127 243.932 Q284.071 239.326 284.071 230.599 Q284.071 221.849 287.127 217.266 Q290.205 212.659 296.015 212.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 216.363 Q322.566 216.363 320.737 219.928 Q318.932 223.469 318.932 230.599 Q318.932 237.705 320.737 241.27 Q322.566 244.812 326.177 244.812 Q329.811 244.812 331.617 241.27 Q333.446 237.705 333.446 230.599 Q333.446 223.469 331.617 219.928 Q329.811 216.363 326.177 216.363 M326.177 212.659 Q331.987 212.659 335.043 217.266 Q338.122 221.849 338.122 230.599 Q338.122 239.326 335.043 243.932 Q331.987 248.516 326.177 248.516 Q320.367 248.516 317.288 243.932 Q314.233 239.326 314.233 230.599 Q314.233 221.849 317.288 217.266 Q320.367 212.659 326.177 212.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 216.363 Q352.728 216.363 350.899 219.928 Q349.094 223.469 349.094 230.599 Q349.094 237.705 350.899 241.27 Q352.728 244.812 356.339 244.812 Q359.973 244.812 361.779 241.27 Q363.608 237.705 363.608 230.599 Q363.608 223.469 361.779 219.928 Q359.973 216.363 356.339 216.363 M356.339 212.659 Q362.149 212.659 365.205 217.266 Q368.284 221.849 368.284 230.599 Q368.284 239.326 365.205 243.932 Q362.149 248.516 356.339 248.516 Q350.529 248.516 347.45 243.932 Q344.395 239.326 344.395 230.599 Q344.395 221.849 347.45 217.266 Q350.529 212.659 356.339 212.659 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.564 4017.76,230.564 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1248.47 456.554,1247.48 457.123,1247.51 457.691,1247.48 458.259,1247.35 458.828,1247.13 459.396,1245.79 459.964,1245.4 460.533,1244.96 461.101,1244.44 461.669,1243.8 462.238,1243.09 462.806,1242.25 463.375,1240.34 463.943,1239.39 464.511,1238.34 465.08,1237.18 465.648,1235.92 466.216,1233.51 466.785,1232.03 467.353,1230.42 467.921,1226.64 468.49,1224.84 469.058,1221.89 469.626,1219.85 470.195,1217.67 470.763,1215.29 471.331,1211.75 471.9,1209.04 472.468,1206.21 473.036,1203.19 473.605,1199.96 474.173,1196.59 474.741,1191.99 475.31,1185.14 475.878,1180.13 476.446,1174.98 477.015,1170.69 477.583,1165.04 478.152,1159.26 478.72,1154.4 479.288,1147.19 479.857,1141.95 480.425,1135.5 480.993,1129.92 481.562,1121.99 482.13,1115.85 482.698,1107.53 483.267,1097.79 483.835,1091.11 484.403,1083.03 484.972,1075.93 485.54,1066.53 486.108,1055.9 486.677,1047.29 487.245,1038.58 487.813,1029.72 488.382,1021.71 488.95,1012.52 489.518,1004.15 490.087,995.623 490.655,984.837 491.224,975.209 491.792,966.287 492.36,953.162 492.929,942.248 493.497,930.178 494.065,921.258 494.634,911.283 495.202,901.283 495.77,891.144 496.339,881.027 496.907,870.825 497.475,860.461 498.044,851.287 498.612,841.906 499.18,830.4 499.749,818.064 500.317,806.78 500.885,794.594 501.454,784.654 502.022,776.659 502.59,767.547 503.159,757.423 503.727,748.234 504.295,738.039 504.864,727.999 505.432,718.143 506.001,706.267 506.569,695.419 507.137,686.067 507.706,673.404 508.274,665.098 508.842,655.968 509.411,644.825 509.979,635.993 510.547,626.002 511.116,617.19 511.684,607.673 512.252,598.049 512.821,589.786 513.389,583.724 513.957,574.456 514.526,566.441 515.094,557.557 515.662,549.545 516.231,540.982 516.799,533.724 517.367,526.39 517.936,519.123 518.504,512.009 519.072,506.068 519.641,499.001 520.209,488.121 520.778,481.533 521.346,474.106 521.914,465.991 522.483,459.072 523.051,454.751 523.619,449.079 524.188,443.662 524.756,438.294 525.324,433.174 525.893,428.027 526.461,423.062 527.029,419.204 527.598,415.317 528.166,410.639 528.734,404.047 529.303,400.621 529.871,396.143 530.439,393.841 531.008,390.49 531.576,386.081 532.144,381.545 532.713,376.493 533.281,372.492 533.85,369.577 534.418,364.707 534.986,361.109 535.555,358.692 536.123,356.121 536.691,353.674 537.26,350.122 537.828,347.768 538.396,344.292 538.965,341.877 539.533,337.606 540.101,333.525 540.67,330.536 541.238,328.844 541.806,328.102 542.375,324.373 542.943,322.471 543.511,319.651 544.08,317.112 544.648,311.413 545.216,308.174 545.785,304.842 546.353,301.842 546.921,302.829 547.49,300.643 548.058,301.499 548.627,300.381 549.195,299.137 549.763,297.877 550.332,295.909 550.9,294.843 551.468,292.636 552.037,292.753 552.605,290.5 553.173,288.361 553.742,286.463 554.31,285.686 554.878,281.603 555.447,281.22 556.015,279.62 556.583,275.846 557.152,273.547 557.72,272.917 558.288,273.43 558.857,271.761 559.425,271.311 559.993,268.898 560.562,265.793 561.13,267.898 561.698,266.617 562.267,266.385 562.835,268.382 563.404,268.051 563.972,268.781 564.54,268.366 565.109,264.657 565.677,265.308 566.245,265.949 566.814,267.565 567.382,264.851 567.95,263.753 568.519,262.308 569.087,262.971 569.655,261.685 570.224,260.247 570.792,259.124 571.36,254.781 571.929,253.724 572.497,252.967 573.065,252.988 573.634,253.082 574.202,251.031 574.77,251.172 575.339,251.52 575.907,250.533 576.476,249.556 577.044,249.627 577.612,248.841 578.181,247.156 578.749,248.369 579.317,248.681 579.886,245.685 580.454,248.086 581.022,246.324 581.591,245.662 582.159,245.967 582.727,242.949 583.296,245.586 583.864,244.835 584.432,244.001 585.001,244.407 585.569,243.858 586.137,243.362 586.706,241.844 587.274,242.346 587.842,241.703 588.411,242.078 588.979,242.634 589.547,244.133 590.116,243.549 590.684,246.893 591.253,249.151 591.821,248.865 592.389,245.783 592.958,243.982 593.526,244.103 594.094,243.453 594.663,243.646 595.231,240.633 595.799,241.203 596.368,242.791 596.936,243.291 597.504,242.847 598.073,242.163 598.641,242.402 599.209,241.583 599.778,241.89 600.346,244.458 600.914,242.409 601.483,242.624 602.051,240.933 602.619,240.252 603.188,240.838 603.756,242.391 604.325,242.574 604.893,241.665 605.461,242.875 606.03,243.054 606.598,243.069 607.166,243.243 607.735,241.33 608.303,241.36 608.871,240.311 609.44,241.381 610.008,242.483 610.576,242.498 611.145,243.573 611.713,243.701 612.281,242.619 612.85,241.478 613.418,241.621 613.986,242.681 614.555,244.632 615.123,243.418 615.691,244.316 616.26,244.263 616.828,242.772 617.396,244.738 617.965,245.653 618.533,246.4 619.102,246.085 619.67,245.833 620.238,245.361 620.807,244.109 621.375,241.742 621.943,241.744 622.512,238.665 623.08,236.697 623.648,235.9 624.217,233.204 624.785,234.765 625.353,237.233 625.922,237.63 626.49,238.912 627.058,240.3 627.627,240.377 628.195,239.253 628.763,238.164 629.332,238.206 629.9,240.449 630.468,241.258 631.037,242.103 631.605,241.777 632.173,243.649 632.742,242.349 633.31,242.912 633.879,241.552 634.447,241.155 635.015,242.721 635.584,243.371 636.152,243.023 636.72,242.501 637.289,242.14 637.857,239.635 638.425,239.436 638.994,237.97 639.562,237.852 640.13,237.678 640.699,236.441 641.267,237.382 641.835,238.286 642.404,238.247 642.972,238.287 643.54,236.08 644.109,233.949 644.677,233.012 645.245,234.09 645.814,233.988 646.382,235.219 646.951,235.311 647.519,234.315 648.087,235.609 648.656,235.564 649.224,237.504 649.792,237.516 650.361,237.197 650.929,237.154 651.497,238.275 652.066,238.962 652.634,238.795 653.202,240.425 653.771,241.001 654.339,239.459 654.907,238.27 655.476,237.19 656.044,234.974 656.612,235.283 657.181,236.156 657.749,235.111 658.317,238.209 658.886,238.95 659.454,239.442 660.022,238.084 660.591,236.997 661.159,236.705 661.728,236.456 662.296,236.317 662.864,236.33 663.433,236.197 664.001,235.992 664.569,232.946 665.138,231.225 665.706,231.436 666.274,229.572 666.843,229.936 667.411,227.046 667.979,227.485 668.548,226.78 669.116,226.465 669.684,223.835 670.253,225.569 670.821,224.158 671.389,224.848 671.958,225.555 672.526,229.213 673.094,227.554 673.663,229.744 674.231,234.025 674.799,235.06 675.368,233.132 675.936,233.332 676.505,233.52 677.073,232.577 677.641,231.45 678.21,231.703 678.778,232.143 679.346,234.628 679.915,235.886 680.483,233.685 681.051,234.813 681.62,233.737 682.188,232.847 682.756,232.762 683.325,231.237 683.893,232.936 684.461,233.026 685.03,231.163 685.598,230.157 686.166,229.329 686.735,228.551 687.303,228.946 687.871,229.542 688.44,229 689.008,229.253 689.577,230.736 690.145,231.062 690.713,231.405 691.282,232.522 691.85,232.45 692.418,231.524 692.987,231.731 693.555,232.982 694.123,233.107 694.692,232.323 695.26,230.464 695.828,230.828 696.397,231.095 696.965,230.428 697.533,229.962 698.102,229.295 698.67,230.77 699.238,231.12 699.807,232.499 700.375,231.638 700.943,228.779 701.512,231.299 702.08,229.497 702.648,230.994 703.217,231.154 703.785,233.63 704.354,233.721 704.922,234.99 705.49,235.044 706.059,233.989 706.627,234.179 707.195,235.466 707.764,235.504 708.332,233.448 708.9,232.869 709.469,233.003 710.037,234.24 710.605,234.425 711.174,235.411 711.742,235.262 712.31,233.105 712.879,233.53 713.447,232.621 714.015,231.841 714.584,232.223 715.152,232.318 715.72,231.424 716.289,232.605 716.857,234.672 717.425,234.792 717.994,233.968 718.562,236.056 719.131,235.978 719.699,235.077 720.267,234.115 720.836,232.09 721.404,233.188 721.972,231.127 722.541,232.223 723.109,231.307 723.677,231.684 724.246,230.851 724.814,232.137 725.382,234.415 725.951,233.3 726.519,234.409 727.087,237.446 727.656,236.063 728.224,232.936 728.792,232.887 729.361,234.935 729.929,235.918 730.497,235.668 731.066,233.684 731.634,234.811 732.203,231.571 732.771,232.661 733.339,233.574 733.908,233.595 734.476,232.551 735.044,232.675 735.613,231.366 736.181,231.517 736.749,234.761 737.318,234.695 737.886,233.556 738.454,231.378 739.023,231.696 739.591,232.992 740.159,236.101 740.728,236.067 741.296,232.915 741.864,231.743 742.433,231.651 743.001,227.76 743.569,228.252 744.138,227.615 744.706,230.04 745.274,229.082 745.843,231.609 746.411,233.815 746.98,230.73 747.548,228.924 748.116,228.275 748.685,228.696 749.253,227.964 749.821,228.419 750.39,229.938 750.958,230.2 751.526,233.499 752.095,234.527 752.663,233.379 753.231,234.329 753.8,233.243 754.368,236.337 754.936,236.838 755.505,237.771 756.073,236.46 756.641,235.151 757.21,235.173 757.778,234.141 758.346,235.169 758.915,233.036 759.483,234.21 760.052,230.993 760.62,233.138 761.188,233.065 761.757,232.118 762.325,230.064 762.893,228.366 763.462,229.824 764.03,229.995 764.598,228.145 765.167,229.358 765.735,229.727 766.303,231.06 766.872,233.085 767.44,231.963 768.008,232.994 768.577,233.058 769.145,232.053 769.713,230.17 770.282,231.654 770.85,229.546 771.418,231.884 771.987,232.151 772.555,232.302 773.123,233.396 773.692,232.224 774.26,232.325 774.829,231.553 775.397,230.703 775.965,230.9 776.534,234.152 777.102,234.003 777.67,234.761 778.239,234.485 778.807,235.259 779.375,234.861 779.944,234.694 780.512,233.68 781.08,231.591 781.649,233.518 782.217,232.346 782.785,232.135 783.354,233.391 783.922,234.511 784.49,236.438 785.059,237.238 785.627,236.821 786.195,235.42 786.764,236.204 787.332,234.929 787.9,230.516 788.469,229.68 789.037,227.846 789.606,226.039 790.174,226.597 790.742,228.025 791.311,226.178 791.879,224.633 792.447,224.127 793.016,222.718 793.584,222.524 794.152,221.402 794.721,223.323 795.289,222.869 795.857,224.577 796.426,227.268 796.994,225.479 797.562,226.101 798.131,224.676 798.699,224.27 799.267,227.177 799.836,227.659 800.404,229.071 800.972,230.599 801.541,232.997 802.109,234.185 802.678,233.153 803.246,232.198 803.814,236.225 804.383,236.139 804.951,236.998 805.519,236.595 806.088,236.226 806.656,239.02 807.224,240.912 807.793,241.34 808.361,239.865 808.929,238.081 809.498,239.92 810.066,239.423 810.634,242.924 811.203,242.953 811.771,244.126 812.339,245.208 812.908,244.073 813.476,241.299 814.044,240.589 814.613,240.856 815.181,238.132 815.749,237.695 816.318,237.215 816.886,234.856 817.455,235.591 818.023,233.934 818.591,234.038 819.16,232.823 819.728,232.735 820.296,232.779 820.865,234.519 821.433,235.315 822.001,234.94 822.57,233.592 823.138,233.285 823.706,234.218 824.275,234.095 824.843,233.764 825.411,232.548 825.98,232.523 826.548,230.251 827.116,232.349 827.685,233.048 828.253,230.732 828.821,231.663 829.39,231.485 829.958,232.459 830.526,231.161 831.095,230.137 831.663,231.198 832.232,232.247 832.8,231.139 833.368,230.014 833.937,229.833 834.505,230.932 835.073,229.846 835.642,231.822 836.21,232.596 836.778,232.35 837.347,230.173 837.915,230.231 838.483,227.865 839.052,229.056 839.62,228.997 840.188,226.713 840.757,226.835 841.325,226.019 841.893,226.265 842.462,226.592 843.03,225.857 843.598,229.26 844.167,230.241 844.735,230.128 845.304,231.071 845.872,230.798 846.44,229.821 847.009,229.84 847.577,226.75 848.145,227.03 848.714,229.237 849.282,230.112 849.85,228.016 850.419,229.406 850.987,228.527 851.555,229.816 852.124,230.223 852.692,229.359 853.26,229.235 853.829,229.219 854.397,228.213 854.965,228.271 855.534,230.538 856.102,230.714 856.67,228.911 857.239,228.96 857.807,229.252 858.375,230.489 858.944,230.582 859.512,230.824 860.081,232.869 860.649,232.561 861.217,233.672 861.786,233.351 862.354,234.005 862.922,234.943 863.491,234.506 864.059,234.05 864.627,233.84 865.196,231.712 865.764,232.558 866.332,231.448 866.901,230.481 867.469,230.382 868.037,228.409 868.606,227.229 869.174,227.427 869.742,228.787 870.311,229.999 870.879,231.091 871.447,229.995 872.016,230.034 872.584,229.952 873.152,228.009 873.721,229.074 874.289,230.121 874.858,231.391 875.426,231.153 875.994,232.956 876.563,231.63 877.131,232.653 877.699,234.67 878.268,231.479 878.836,231.332 879.404,230.255 879.973,228.492 880.541,229.666 881.109,227.579 881.678,227.883 882.246,227.97 882.814,229.015 883.383,227.087 883.951,227.387 884.519,226.447 885.088,224.753 885.656,228.361 886.224,227.803 886.793,229.858 887.361,228.873 887.93,227.078 888.498,227.388 889.066,228.887 889.635,226.135 890.203,227.612 890.771,229.001 891.34,230.272 891.908,230.436 892.476,228.446 893.045,228.635 893.613,229.9 894.181,231.03 894.75,231.158 895.318,231.136 895.886,231.136 896.455,232.198 897.023,232.249 897.591,230.224 898.16,230.307 898.728,230.342 899.296,232.469 899.865,231.34 900.433,233.466 901.001,231.385 901.57,231.334 902.138,231.339 902.707,231.335 903.275,231.422 903.843,231.76 904.412,229.616 904.98,228.717 905.548,226.084 906.117,226.51 906.685,229.919 907.253,231.135 907.822,229.005 908.39,230.309 908.958,230.425 909.527,230.541 910.095,229.721 910.663,232.981 911.232,233.155 911.8,232.223 912.368,231.167 912.937,231.401 913.505,232.273 914.073,233.12 914.642,231.851 915.21,232.644 915.779,232.623 916.347,232.562 916.915,230.44 917.484,232.536 918.052,234.411 918.62,236.221 919.189,236.987 919.757,236.797 920.325,236.351 920.894,235.815 921.462,236.378 922.03,236.105 922.599,234.862 923.167,234.438 923.735,234.162 924.304,234.023 924.872,234.636 925.44,233.142 926.009,232.034 926.577,232.67 927.145,233.426 927.714,231.258 928.282,230.316 928.85,228.303 929.419,230.389 929.987,227.429 930.556,226.678 931.124,225.902 931.692,227.319 932.261,226.54 932.829,230.042 933.397,230.233 933.966,231.389 934.534,231.398 935.102,230.202 935.671,230.411 936.239,230.434 936.807,230.692 937.376,231.892 937.944,232.005 938.512,234.072 939.081,233.923 939.649,234.597 940.217,235.486 940.786,233.258 941.354,232.186 941.922,230.851 942.491,233.082 943.059,233.82 943.627,232.4 944.196,233.214 944.764,230.738 945.333,230.726 945.901,228.831 946.469,228.858 947.038,227.798 947.606,231.147 948.174,229.922 948.743,230.873 949.311,230.92 949.879,231.919 950.448,232.884 951.016,234.848 951.584,233.591 952.153,235.54 952.721,235.55 953.289,235.333 953.858,233.677 954.426,233.478 954.994,232.992 955.563,231.922 956.131,230.604 956.699,230.436 957.268,231.396 957.836,231.206 958.405,230.17 958.973,231 959.541,234.04 960.11,234.838 960.678,235.625 961.246,235.587 961.815,234.211 962.383,232.767 962.951,231.698 963.52,230.576 964.088,229.506 964.656,229.362 965.225,228.299 965.793,228.136 966.361,228.223 966.93,227.533 967.498,227.566 968.066,225.884 968.635,226.172 969.203,224.481 969.771,223.958 970.34,224.383 970.908,223.757 971.476,224.21 972.045,228.512 972.613,226.307 973.182,228.841 973.75,230.053 974.318,230.072 974.887,231.119 975.455,231.013 976.023,231.99 976.592,231.84 977.16,231.681 977.728,232.676 978.297,232.665 978.865,231.499 979.433,228.403 980.002,227.527 980.57,225.475 981.138,226.729 981.707,229.119 982.275,228.347 982.843,228.707 983.412,228.056 983.98,227.296 984.548,227.483 985.117,228.843 985.685,228.944 986.253,227.208 986.822,225.426 987.39,226.818 987.959,224.994 988.527,226.491 989.095,226.93 989.664,225.075 990.232,224.598 990.8,226.23 991.369,225.681 991.937,225.127 992.505,226.932 993.074,228.32 993.642,230.662 994.21,232.911 994.779,232.67 995.347,232.417 995.915,232.188 996.484,231.307 997.052,234.452 997.62,231.188 998.189,229.066 998.757,230.219 999.325,230.309 999.894,230.454 1000.46,230.488 1001.03,231.419 1001.6,230.277 1002.17,232.522 1002.74,233.527 1003.3,233.588 1003.87,234.303 1004.44,234.024 1005.01,233.092 1005.58,233.082 1006.15,234.146 1006.71,232.921 1007.28,232.885 1007.85,231.672 1008.42,232.822 1008.99,232.622 1009.56,233.412 1010.12,232.285 1010.69,232.165 1011.26,231.066 1011.83,230.985 1012.4,230.852 1012.97,228.779 1013.53,228.844 1014.1,228.301 1014.67,228.504 1015.24,226.786 1015.81,228.189 1016.38,229.445 1016.94,228.393 1017.51,226.598 1018.08,226.877 1018.65,225.146 1019.22,227.657 1019.79,228.883 1020.35,228.108 1020.92,226.243 1021.49,227.576 1022.06,228.81 1022.63,230.269 1023.2,230.484 1023.76,228.424 1024.33,228.666 1024.9,228.665 1025.47,227.84 1026.04,229.212 1026.61,229.357 1027.17,229.633 1027.74,230.996 1028.31,234.28 1028.88,233.242 1029.45,234.394 1030.02,233.232 1030.58,234.186 1031.15,237.104 1031.72,238.808 1032.29,238.269 1032.86,238.763 1033.43,237.273 1033.99,237.94 1034.56,238.301 1035.13,237.819 1035.7,238.346 1036.27,238.917 1036.84,238.417 1037.4,238.815 1037.97,238.08 1038.54,239.7 1039.11,240.019 1039.68,234.255 1040.25,232.777 1040.81,233.492 1041.38,233.113 1041.95,231.751 1042.52,230.499 1043.09,231.482 1043.66,231.351 1044.22,230.27 1044.79,229.195 1045.36,230.43 1045.93,230.678 1046.5,230.805 1047.07,230.651 1047.63,231.92 1048.2,231.895 1048.77,235.113 1049.34,234.781 1049.91,234.465 1050.48,232.056 1051.05,230.923 1051.61,232.683 1052.18,234.72 1052.75,234.172 1053.32,232.58 1053.89,231.362 1054.46,231.178 1055.02,226.78 1055.59,228.312 1056.16,228.368 1056.73,227.537 1057.3,228.795 1057.87,228.999 1058.43,228.169 1059,226.235 1059.57,225.563 1060.14,226.862 1060.71,228.128 1061.28,228.291 1061.84,227.547 1062.41,227.805 1062.98,228.01 1063.55,227.135 1064.12,228.618 1064.69,229.554 1065.25,229.605 1065.82,230.751 1066.39,230.973 1066.96,231.019 1067.53,232.03 1068.1,230.721 1068.66,230.732 1069.23,230.65 1069.8,229.536 1070.37,228.659 1070.94,226.606 1071.51,225.917 1072.07,226.2 1072.64,229.419 1073.21,228.524 1073.78,229.737 1074.35,226.737 1074.92,227.051 1075.48,225.276 1076.05,227.846 1076.62,229.208 1077.19,230.266 1077.76,231.446 1078.33,231.378 1078.89,232.486 1079.46,233.3 1080.03,232.989 1080.6,232.934 1081.17,229.695 1081.74,230.039 1082.3,232.445 1082.87,230.393 1083.44,230.578 1084.01,227.755 1084.58,228.194 1085.15,227.187 1085.71,228.422 1086.28,228.57 1086.85,228.78 1087.42,229.959 1087.99,229.041 1088.56,228.163 1089.12,228.108 1089.69,229.307 1090.26,229.114 1090.83,228.404 1091.4,228.53 1091.97,226.54 1092.53,226.799 1093.1,226.993 1093.67,227.347 1094.24,229.59 1094.81,229.805 1095.38,228.888 1095.94,229.053 1096.51,228.245 1097.08,227.395 1097.65,227.688 1098.22,226.891 1098.79,230.492 1099.35,226.466 1099.92,226.606 1100.49,224.949 1101.06,224.327 1101.63,225.996 1102.2,225.382 1102.76,229.014 1103.33,229.261 1103.9,230.541 1104.47,231.787 1105.04,232.772 1105.61,231.51 1106.17,231.64 1106.74,230.743 1107.31,231.951 1107.88,231.13 1108.45,231.299 1109.02,230.489 1109.58,231.573 1110.15,230.496 1110.72,232.541 1111.29,233.705 1111.86,233.726 1112.43,234.546 1112.99,233.648 1113.56,231.274 1114.13,229.305 1114.7,229.391 1115.27,228.565 1115.84,228.926 1116.4,229.261 1116.97,229.34 1117.54,230.562 1118.11,232.729 1118.68,232.631 1119.25,233.522 1119.81,232.204 1120.38,232.957 1120.95,233.751 1121.52,233.545 1122.09,233.466 1122.66,233.361 1123.23,232.257 1123.79,231.086 1124.36,231.047 1124.93,229.913 1125.5,232.099 1126.07,231.962 1126.64,231.879 1127.2,231.776 1127.77,230.617 1128.34,232.924 1128.91,232.674 1129.48,233.649 1130.05,235.675 1130.61,233.302 1131.18,234.094 1131.75,233.872 1132.32,233.687 1132.89,231.296 1133.46,231.431 1134.02,230.48 1134.59,230.669 1135.16,228.597 1135.73,230.785 1136.3,230.813 1136.87,230.023 1137.43,230.054 1138,229.921 1138.57,228.861 1139.14,231.942 1139.71,232.022 1140.28,232.079 1140.84,231.834 1141.41,230.767 1141.98,229.879 1142.55,228.937 1143.12,228.254 1143.69,228.323 1144.25,228.56 1144.82,227.52 1145.39,225.767 1145.96,224.974 1146.53,227.687 1147.1,228.866 1147.66,228.09 1148.23,229.354 1148.8,230.93 1149.37,230.949 1149.94,231.85 1150.51,229.855 1151.07,231.127 1151.64,232.262 1152.21,233.113 1152.78,235.149 1153.35,236.729 1153.92,236.145 1154.48,234.568 1155.05,234.174 1155.62,233.839 1156.19,233.478 1156.76,234.371 1157.33,235.066 1157.89,235.887 1158.46,236.647 1159.03,234.158 1159.6,235.064 1160.17,231.953 1160.74,233.842 1161.3,233.615 1161.87,232.235 1162.44,230.998 1163.01,230.179 1163.58,228.145 1164.15,229.258 1164.71,229.492 1165.28,231.647 1165.85,233.745 1166.42,232.328 1166.99,233.513 1167.56,232.183 1168.12,233.344 1168.69,234.256 1169.26,232.873 1169.83,233.519 1170.4,232.311 1170.97,231.172 1171.53,231.235 1172.1,231.159 1172.67,234.15 1173.24,234.922 1173.81,236.817 1174.38,236.313 1174.94,233.75 1175.51,233.44 1176.08,234.221 1176.65,234.116 1177.22,233.692 1177.79,233.358 1178.35,233.076 1178.92,232.91 1179.49,230.608 1180.06,233.373 1180.63,232.263 1181.2,233.969 1181.76,233.738 1182.33,233.452 1182.9,234.079 1183.47,233.01 1184.04,230.654 1184.61,231.734 1185.17,232.491 1185.74,231.166 1186.31,229.864 1186.88,229.056 1187.45,226.943 1188.02,228.215 1188.58,231.298 1189.15,230.933 1189.72,230.879 1190.29,230.818 1190.86,230.825 1191.43,229.869 1192,232.046 1192.56,232.879 1193.13,232.723 1193.7,235.555 1194.27,235.045 1194.84,235.761 1195.41,233.097 1195.97,231.66 1196.54,231.17 1197.11,229.794 1197.68,233.856 1198.25,233.389 1198.82,233.064 1199.38,234.852 1199.95,235.431 1200.52,233.806 1201.09,232.363 1201.66,229.966 1202.23,229.675 1202.79,229.671 1203.36,230.357 1203.93,231.203 1204.5,229.755 1205.07,228.888 1205.64,229.981 1206.2,229.981 1206.77,230.939 1207.34,228.649 1207.91,228.582 1208.48,228.343 1209.05,229.462 1209.61,229.502 1210.18,228.274 1210.75,228.37 1211.32,228.298 1211.89,228.067 1212.46,225.929 1213.02,227.203 1213.59,229.533 1214.16,232.525 1214.73,232.507 1215.3,230.11 1215.87,229.095 1216.43,228.123 1217,228.197 1217.57,224.875 1218.14,225.022 1218.71,227.466 1219.28,227.755 1219.84,227.05 1220.41,228.336 1220.98,229.587 1221.55,228.477 1222.12,229.656 1222.69,229.894 1223.25,230.926 1223.82,232.007 1224.39,231.946 1224.96,231.813 1225.53,230.578 1226.1,230.582 1226.66,226.408 1227.23,225.522 1227.8,224.891 1228.37,225.272 1228.94,220.549 1229.51,221.973 1230.07,223.793 1230.64,224.212 1231.21,223.74 1231.78,223.17 1232.35,225.655 1232.92,225.178 1233.48,226.456 1234.05,225.604 1234.62,224.972 1235.19,226.487 1235.76,228.785 1236.33,229.032 1236.89,228.154 1237.46,229.394 1238.03,229.639 1238.6,227.735 1239.17,227.072 1239.74,226.44 1240.3,228.999 1240.87,229.21 1241.44,230.426 1242.01,233.547 1242.58,235.293 1243.15,235.279 1243.71,234.899 1244.28,232.609 1244.85,232.78 1245.42,232.654 1245.99,232.548 1246.56,232.414 1247.12,233.371 1247.69,233.279 1248.26,233.086 1248.83,234.888 1249.4,234.683 1249.97,235.145 1250.53,235.007 1251.1,233.521 1251.67,232.225 1252.24,233.111 1252.81,233.953 1253.38,234.724 1253.94,234.476 1254.51,236.501 1255.08,237.042 1255.65,234.399 1256.22,234.11 1256.79,233.713 1257.35,234.423 1257.92,233.047 1258.49,232.976 1259.06,230.683 1259.63,233.865 1260.2,233.371 1260.76,231.991 1261.33,231.877 1261.9,231.731 1262.47,232.82 1263.04,232.663 1263.61,230.403 1264.18,229.024 1264.74,231.101 1265.31,231.208 1265.88,231.142 1266.45,233.215 1267.02,232.962 1267.59,233.779 1268.15,234.299 1268.72,234.843 1269.29,234.459 1269.86,233.069 1270.43,231.731 1271,229.313 1271.56,228.433 1272.13,226.435 1272.7,229.734 1273.27,227.589 1273.84,228.725 1274.41,228.806 1274.97,227.853 1275.54,231.216 1276.11,231.388 1276.68,231.151 1277.25,229.946 1277.82,230.961 1278.38,231.77 1278.95,232.678 1279.52,231.461 1280.09,230.276 1280.66,230.093 1281.23,230.961 1281.79,229.707 1282.36,229.656 1282.93,231.524 1283.5,230.36 1284.07,230.268 1284.64,228.992 1285.2,228.061 1285.77,229.145 1286.34,229.207 1286.91,228.185 1287.48,227.319 1288.05,227.515 1288.61,227.551 1289.18,228.864 1289.75,230.099 1290.32,229.746 1290.89,229.742 1291.46,230.647 1292.02,228.585 1292.59,227.83 1293.16,228.873 1293.73,227.928 1294.3,229.171 1294.87,229.362 1295.43,228.463 1296,230.641 1296.57,230.979 1297.14,228.892 1297.71,230.036 1298.28,229.085 1298.84,228.096 1299.41,229.253 1299.98,230.282 1300.55,231.288 1301.12,230.312 1301.69,228.367 1302.25,229.54 1302.82,229.658 1303.39,230.68 1303.96,229.508 1304.53,229.629 1305.1,229.601 1305.66,228.634 1306.23,228.889 1306.8,230.036 1307.37,229.944 1307.94,229.103 1308.51,227.931 1309.07,230.16 1309.64,229.164 1310.21,228.991 1310.78,226.827 1311.35,227.028 1311.92,227.417 1312.48,226.546 1313.05,225.871 1313.62,224.267 1314.19,225.836 1314.76,227.295 1315.33,225.715 1315.89,226.149 1316.46,227.49 1317.03,227.716 1317.6,230.226 1318.17,230.26 1318.74,231.52 1319.3,232.437 1319.87,232.271 1320.44,232.08 1321.01,233.935 1321.58,232.57 1322.15,231.359 1322.71,231.217 1323.28,229.075 1323.85,230.166 1324.42,230.241 1324.99,230.298 1325.56,229.185 1326.12,229.345 1326.69,228.616 1327.26,227.653 1327.83,227.99 1328.4,229.143 1328.97,228.439 1329.53,228.867 1330.1,226.946 1330.67,228.42 1331.24,227.757 1331.81,227.762 1332.38,226.943 1332.94,227.332 1333.51,225.462 1334.08,225.705 1334.65,224.987 1335.22,224.32 1335.79,225.89 1336.36,226.263 1336.92,225.472 1337.49,224.847 1338.06,227.58 1338.63,228.968 1339.2,228.199 1339.77,228.394 1340.33,227.753 1340.9,226.019 1341.47,226.299 1342.04,227.725 1342.61,226.79 1343.18,226.096 1343.74,227.282 1344.31,229.717 1344.88,231.209 1345.45,230.254 1346.02,230.53 1346.59,232.639 1347.15,228.495 1347.72,227.989 1348.29,230.329 1348.86,232.661 1349.43,232.899 1350,233.737 1350.56,232.604 1351.13,231.581 1351.7,231.658 1352.27,233.73 1352.84,233.601 1353.41,232.377 1353.97,232.38 1354.54,230.235 1355.11,231.474 1355.68,233.605 1356.25,235.543 1356.82,233.371 1357.38,231.142 1357.95,230.199 1358.52,230.43 1359.09,228.386 1359.66,229.838 1360.23,231.227 1360.79,230.382 1361.36,233.579 1361.93,232.6 1362.5,231.589 1363.07,230.606 1363.64,230.681 1364.2,233.789 1364.77,233.856 1365.34,232.838 1365.91,231.804 1366.48,233.981 1367.05,233.882 1367.61,233.716 1368.18,232.515 1368.75,231.531 1369.32,228.377 1369.89,228.806 1370.46,230.183 1371.02,230.315 1371.59,229.345 1372.16,230.62 1372.73,228.62 1373.3,229.925 1373.87,231.08 1374.43,232.152 1375,232.106 1375.57,229.21 1376.14,231.305 1376.71,232.136 1377.28,232.237 1377.84,233.471 1378.41,236.498 1378.98,233.984 1379.55,231.859 1380.12,232.025 1380.69,230.795 1381.25,229.816 1381.82,228.78 1382.39,229.107 1382.96,230.344 1383.53,231.539 1384.1,231.634 1384.66,232.557 1385.23,233.274 1385.8,234.007 1386.37,235.858 1386.94,237.628 1387.51,236.176 1388.07,234.736 1388.64,233.352 1389.21,234.432 1389.78,235.138 1390.35,234.852 1390.92,233.361 1391.48,232.212 1392.05,228.936 1392.62,228.951 1393.19,228.139 1393.76,228.338 1394.33,227.543 1394.89,230.007 1395.46,233.196 1396.03,231.134 1396.6,230.964 1397.17,228.885 1397.74,229.732 1398.3,230.769 1398.87,232.681 1399.44,231.566 1400.01,232.366 1400.58,233.333 1401.15,235.141 1401.71,235.848 1402.28,236.256 1402.85,233.996 1403.42,233.662 1403.99,233.377 1404.56,232.149 1405.13,230.254 1405.69,231.174 1406.26,229.994 1406.83,227.779 1407.4,229.207 1407.97,229.415 1408.54,230.539 1409.1,231.568 1409.67,231.347 1410.24,232.152 1410.81,231.056 1411.38,231.882 1411.95,232.712 1412.51,228.434 1413.08,229.599 1413.65,226.839 1414.22,228.126 1414.79,228.071 1415.36,226.103 1415.92,226.41 1416.49,224.745 1417.06,226.205 1417.63,225.487 1418.2,225.816 1418.77,225.142 1419.33,225.526 1419.9,226.025 1420.47,227.369 1421.04,227.641 1421.61,226.796 1422.18,225.944 1422.74,225.266 1423.31,226.272 1423.88,225.649 1424.45,227.103 1425.02,225.391 1425.59,226.173 1426.15,223.492 1426.72,222.246 1427.29,225.957 1427.86,228.418 1428.43,228.73 1429,229.922 1429.56,231.075 1430.13,230.106 1430.7,229.203 1431.27,230.333 1431.84,231.591 1432.41,229.709 1432.97,230.068 1433.54,229.127 1434.11,229.243 1434.68,231.703 1435.25,230.856 1435.82,231.104 1436.38,233.208 1436.95,232.344 1437.52,232.344 1438.09,233.461 1438.66,234.327 1439.23,234.137 1439.79,232.993 1440.36,232.752 1440.93,230.904 1441.5,232.975 1442.07,232.978 1442.64,235.796 1443.2,234.462 1443.77,233.305 1444.34,233.21 1444.91,233.071 1445.48,232.922 1446.05,230.685 1446.61,232.831 1447.18,232.871 1447.75,232.834 1448.32,234.849 1448.89,236.818 1449.46,237.223 1450.02,236.822 1450.59,234.468 1451.16,231.284 1451.73,231.974 1452.3,227.648 1452.87,226.679 1453.43,224.943 1454,227.158 1454.57,227.493 1455.14,229.646 1455.71,230.7 1456.28,231.763 1456.84,230.643 1457.41,229.714 1457.98,229.761 1458.55,226.77 1459.12,227.14 1459.69,228.472 1460.25,230.698 1460.82,228.62 1461.39,229.928 1461.96,232.02 1462.53,233.954 1463.1,233.692 1463.66,235.859 1464.23,235.543 1464.8,231.9 1465.37,231.829 1465.94,234.048 1466.51,232.661 1467.07,232.48 1467.64,231.373 1468.21,232.455 1468.78,231.194 1469.35,233.163 1469.92,234.103 1470.48,232.78 1471.05,233.551 1471.62,232.27 1472.19,230.95 1472.76,231.992 1473.33,233.137 1473.89,231.713 1474.46,232.84 1475.03,232.616 1475.6,232.619 1476.17,232.582 1476.74,231.352 1477.31,230.245 1477.87,231.435 1478.44,230.33 1479.01,230.229 1479.58,234.273 1480.15,234.921 1480.72,234.475 1481.28,235.172 1481.85,232.738 1482.42,233.459 1482.99,234.462 1483.56,233.213 1484.13,235.303 1484.69,235.971 1485.26,237.387 1485.83,234.811 1486.4,231.837 1486.97,232.594 1487.54,232.35 1488.1,231.175 1488.67,231.912 1489.24,230.677 1489.81,231.664 1490.38,230.575 1490.95,230.385 1491.51,230.364 1492.08,232.344 1492.65,233.213 1493.22,233.899 1493.79,235.537 1494.36,235.957 1494.92,234.582 1495.49,232.285 1496.06,231.954 1496.63,231.702 1497.2,232.391 1497.77,231.112 1498.33,227.778 1498.9,228.63 1499.47,230.686 1500.04,231.514 1500.61,230.318 1501.18,229.356 1501.74,226.318 1502.31,225.629 1502.88,225.901 1503.45,225.395 1504.02,225.667 1504.59,227.964 1505.15,225.807 1505.72,228.52 1506.29,228.675 1506.86,229.676 1507.43,228.914 1508,228.894 1508.56,228.891 1509.13,226.935 1509.7,227.004 1510.27,228.305 1510.84,226.379 1511.41,222.681 1511.97,219.895 1512.54,223.762 1513.11,225.139 1513.68,226.638 1514.25,229.062 1514.82,228.115 1515.38,231.283 1515.95,231.068 1516.52,230.078 1517.09,230.179 1517.66,230.215 1518.23,230.172 1518.79,229.249 1519.36,228.32 1519.93,231.664 1520.5,231.674 1521.07,232.569 1521.64,231.488 1522.2,231.314 1522.77,231.452 1523.34,231.62 1523.91,233.514 1524.48,235.466 1525.05,235.271 1525.61,235.986 1526.18,235.647 1526.75,235.198 1527.32,234.948 1527.89,235.714 1528.46,235.394 1529.02,238.195 1529.59,238.812 1530.16,236.984 1530.73,233.362 1531.3,231.98 1531.87,231.683 1532.43,233.344 1533,234.806 1533.57,234.282 1534.14,232.791 1534.71,231.323 1535.28,233.347 1535.84,232.127 1536.41,232.796 1536.98,232.441 1537.55,232.453 1538.12,228.343 1538.69,228.398 1539.25,230.558 1539.82,230.235 1540.39,233.187 1540.96,231.851 1541.53,231.605 1542.1,233.382 1542.66,233.311 1543.23,233.047 1543.8,233.82 1544.37,233.288 1544.94,234.093 1545.51,233.61 1546.08,233.267 1546.64,231.945 1547.21,231.723 1547.78,232.273 1548.35,233.233 1548.92,233.866 1549.49,233.493 1550.05,231.168 1550.62,229.708 1551.19,228.701 1551.76,227.66 1552.33,226.603 1552.9,228.634 1553.46,229.574 1554.03,228.566 1554.6,228.505 1555.17,226.415 1555.74,225.694 1556.31,226.079 1556.87,223.204 1557.44,224.595 1558.01,223.978 1558.58,222.329 1559.15,222.809 1559.72,222.219 1560.28,222.914 1560.85,222.415 1561.42,222.068 1561.99,222.769 1562.56,223.365 1563.13,224.831 1563.69,226.215 1564.26,225.568 1564.83,227.209 1565.4,223.975 1565.97,224.402 1566.54,224.755 1567.1,225.421 1567.67,225.699 1568.24,225.028 1568.81,224.551 1569.38,224.299 1569.95,223.856 1570.51,224.551 1571.08,223.992 1571.65,226.484 1572.22,225.068 1572.79,226.595 1573.36,224.826 1573.92,228.222 1574.49,227.553 1575.06,224.713 1575.63,226.259 1576.2,225.749 1576.77,225.294 1577.33,226.999 1577.9,228.491 1578.47,229.979 1579.04,230.13 1579.61,229.153 1580.18,229.24 1580.74,230.624 1581.31,229.748 1581.88,233.025 1582.45,233.124 1583.02,234.062 1583.59,231.8 1584.15,232.768 1584.72,231.738 1585.29,231.943 1585.86,233.052 1586.43,232.861 1587,232.773 1587.56,232.708 1588.13,235.597 1588.7,235.26 1589.27,236.107 1589.84,234.65 1590.41,235.54 1590.97,236.5 1591.54,234.918 1592.11,236.766 1592.68,236.553 1593.25,234.185 1593.82,234.989 1594.38,234.952 1594.95,234.753 1595.52,232.387 1596.09,232.024 1596.66,229.954 1597.23,230.216 1597.79,230.141 1598.36,229.192 1598.93,229.495 1599.5,227.531 1600.07,228.942 1600.64,227.067 1601.2,228.676 1601.77,233.166 1602.34,234.165 1602.91,233.904 1603.48,234.933 1604.05,233.692 1604.61,231.62 1605.18,233.688 1605.75,233.682 1606.32,233.621 1606.89,234.383 1607.46,234.074 1608.02,232.704 1608.59,231.572 1609.16,231.304 1609.73,230.234 1610.3,229.345 1610.87,228.583 1611.43,230.922 1612,231.053 1612.57,229.688 1613.14,230.546 1613.71,229.591 1614.28,230.588 1614.84,230.662 1615.41,229.493 1615.98,229.882 1616.55,229.016 1617.12,226.132 1617.69,225.507 1618.26,224.793 1618.82,227.084 1619.39,226.392 1619.96,225.703 1620.53,227.202 1621.1,226.435 1621.67,226.713 1622.23,228.259 1622.8,228.577 1623.37,231.833 1623.94,231.927 1624.51,232.998 1625.08,233.951 1625.64,232.886 1626.21,231.636 1626.78,231.699 1627.35,230.76 1627.92,229.719 1628.49,229.76 1629.05,228.66 1629.62,226.991 1630.19,226.362 1630.76,226.745 1631.33,228.094 1631.9,230.478 1632.46,230.607 1633.03,231.54 1633.6,234.679 1634.17,237.557 1634.74,235.015 1635.31,235.712 1635.87,234.431 1636.44,236.56 1637.01,235.401 1637.58,234.126 1638.15,236.225 1638.72,236.974 1639.28,236.576 1639.85,237.104 1640.42,238.774 1640.99,239.318 1641.56,238.458 1642.13,238.826 1642.69,237.017 1643.26,238.676 1643.83,238.125 1644.4,237.615 1644.97,236.868 1645.54,237.393 1646.1,236.767 1646.67,236.332 1647.24,234.89 1647.81,235.697 1648.38,236.355 1648.95,235.938 1649.51,236.397 1650.08,237.024 1650.65,237.384 1651.22,235.728 1651.79,235.109 1652.36,233.733 1652.92,232.169 1653.49,231.686 1654.06,229.694 1654.63,228.455 1655.2,228.638 1655.77,228.574 1656.33,225.442 1656.9,223.544 1657.47,223.831 1658.04,226.287 1658.61,229.393 1659.18,230.473 1659.74,227.397 1660.31,227.333 1660.88,229.562 1661.45,227.513 1662.02,227.671 1662.59,227.777 1663.15,228.839 1663.72,228.894 1664.29,230.031 1664.86,229.809 1665.43,229.711 1666,229.488 1666.56,227.513 1667.13,230.719 1667.7,230.98 1668.27,230.786 1668.84,231.59 1669.41,231.341 1669.97,232.14 1670.54,232.924 1671.11,233.735 1671.68,232.204 1672.25,231.06 1672.82,229.759 1673.38,230.605 1673.95,230.505 1674.52,232.299 1675.09,231.083 1675.66,230.731 1676.23,229.931 1676.79,231.094 1677.36,230.051 1677.93,232.112 1678.5,233.054 1679.07,231.647 1679.64,230.526 1680.2,230.215 1680.77,230.079 1681.34,232.039 1681.91,228.685 1682.48,228.76 1683.05,226.917 1683.61,228.183 1684.18,228.334 1684.75,228.637 1685.32,228.757 1685.89,227.909 1686.46,230.099 1687.02,228.915 1687.59,228.007 1688.16,225.317 1688.73,224.705 1689.3,228.267 1689.87,228.523 1690.44,230.095 1691,229.171 1691.57,228.299 1692.14,226.362 1692.71,227.716 1693.28,227.772 1693.85,227.684 1694.41,227.821 1694.98,228.181 1695.55,229.225 1696.12,230.4 1696.69,231.416 1697.26,230.325 1697.82,231.254 1698.39,231.067 1698.96,230.069 1699.53,229.967 1700.1,230.061 1700.67,228.002 1701.23,228.078 1701.8,227.977 1702.37,230.245 1702.94,230.154 1703.51,230.173 1704.08,232.425 1704.64,232.092 1705.21,229.87 1705.78,228.744 1706.35,227.866 1706.92,227.816 1707.49,225.897 1708.05,226.129 1708.62,227.663 1709.19,226.757 1709.76,227.023 1710.33,227.434 1710.9,227.732 1711.46,228.938 1712.03,230.962 1712.6,229.822 1713.17,232.86 1713.74,233.784 1714.31,233.482 1714.87,236.183 1715.44,236.548 1716.01,235.26 1716.58,234.816 1717.15,234.411 1717.72,231.822 1718.28,232.609 1718.85,233.586 1719.42,232.361 1719.99,231.212 1720.56,231.275 1721.13,231.239 1721.69,227.1 1722.26,225.552 1722.83,225.758 1723.4,226.083 1723.97,227.448 1724.54,227.676 1725.1,230.876 1725.67,230.955 1726.24,232.088 1726.81,231.9 1727.38,231.921 1727.95,230.749 1728.51,229.782 1729.08,229.831 1729.65,229.855 1730.22,229.895 1730.79,229.827 1731.36,228.834 1731.92,227.094 1732.49,226.425 1733.06,227.71 1733.63,228.035 1734.2,228.267 1734.77,229.486 1735.33,229.535 1735.9,230.69 1736.47,227.55 1737.04,227.806 1737.61,227.944 1738.18,228.058 1738.74,227.257 1739.31,227.324 1739.88,229.548 1740.45,227.7 1741.02,227.931 1741.59,225.135 1742.15,224.222 1742.72,226.641 1743.29,227.957 1743.86,230.121 1744.43,228.244 1745,229.352 1745.56,227.498 1746.13,227.358 1746.7,227.65 1747.27,227.813 1747.84,224.109 1748.41,223.6 1748.97,224.154 1749.54,226.715 1750.11,227.931 1750.68,229.446 1751.25,230.633 1751.82,230.761 1752.38,230.923 1752.95,230.656 1753.52,230.552 1754.09,233.588 1754.66,235.288 1755.23,234.082 1755.79,231.97 1756.36,232.938 1756.93,235.081 1757.5,234.831 1758.07,234.641 1758.64,234.265 1759.21,234.88 1759.77,237.855 1760.34,238.21 1760.91,238.912 1761.48,239.399 1762.05,237.679 1762.62,234.883 1763.18,234.567 1763.75,233.333 1764.32,233.058 1764.89,229.755 1765.46,229.787 1766.03,228.631 1766.59,228.711 1767.16,227.767 1767.73,228.913 1768.3,227.928 1768.87,228.16 1769.44,227.401 1770,227.718 1770.57,227.767 1771.14,225.882 1771.71,225.232 1772.28,225.564 1772.85,225.974 1773.41,227.409 1773.98,227.584 1774.55,225.669 1775.12,226 1775.69,224.419 1776.26,226.073 1776.82,225.39 1777.39,226.773 1777.96,226.847 1778.53,227.188 1779.1,225.355 1779.67,223.848 1780.23,225.215 1780.8,225.617 1781.37,227.259 1781.94,230.828 1782.51,229.729 1783.08,230.965 1783.64,230.07 1784.21,230.051 1784.78,231.289 1785.35,232.466 1785.92,232.341 1786.49,233.537 1787.05,231.543 1787.62,234.763 1788.19,235.52 1788.76,236.347 1789.33,236.039 1789.9,236.602 1790.46,234.379 1791.03,235.115 1791.6,234.785 1792.17,236.53 1792.74,237.043 1793.31,235.655 1793.87,235.299 1794.44,237.126 1795.01,239.674 1795.58,237.223 1796.15,235.706 1796.72,237.204 1797.28,237.856 1797.85,236.232 1798.42,237.864 1798.99,236.353 1799.56,234.956 1800.13,236.622 1800.69,236.277 1801.26,235.809 1801.83,234.345 1802.4,235.979 1802.97,235.728 1803.54,234.266 1804.1,233.834 1804.67,233.515 1805.24,234.104 1805.81,233.588 1806.38,231.356 1806.95,230.173 1807.51,230.305 1808.08,229.414 1808.65,227.274 1809.22,227.467 1809.79,228.458 1810.36,230.495 1810.92,230.452 1811.49,230.205 1812.06,227.965 1812.63,228.12 1813.2,228.331 1813.77,227.293 1814.33,227.437 1814.9,225.501 1815.47,225.821 1816.04,227.137 1816.61,229.364 1817.18,229.356 1817.74,229.426 1818.31,229.319 1818.88,229.25 1819.45,228.216 1820.02,228.509 1820.59,228.932 1821.15,226.833 1821.72,224.916 1822.29,224.421 1822.86,226.685 1823.43,224.989 1824,224.549 1824.56,226.184 1825.13,228.51 1825.7,228.644 1826.27,229.811 1826.84,229.91 1827.41,229.899 1827.97,226.991 1828.54,229.348 1829.11,229.337 1829.68,229.504 1830.25,229.667 1830.82,229.765 1831.39,230.797 1831.95,230.842 1832.52,231.012 1833.09,229.25 1833.66,230.579 1834.23,228.663 1834.8,228.792 1835.36,229.33 1835.93,229.477 1836.5,228.503 1837.07,227.677 1837.64,227.861 1838.21,227.113 1838.77,229.591 1839.34,229.813 1839.91,227.87 1840.48,228.118 1841.05,230.544 1841.62,233.411 1842.18,231.202 1842.75,230.191 1843.32,229.266 1843.89,227.434 1844.46,227.631 1845.03,225.836 1845.59,226.259 1846.16,227.615 1846.73,226.909 1847.3,228.426 1847.87,232.751 1848.44,230.88 1849,228.865 1849.57,227.017 1850.14,230.533 1850.71,228.737 1851.28,227.918 1851.85,230.252 1852.41,231.226 1852.98,232.341 1853.55,234.41 1854.12,234.279 1854.69,234.162 1855.26,234.79 1855.82,236.63 1856.39,237.62 1856.96,237.138 1857.53,237.627 1858.1,235.02 1858.67,234.608 1859.23,234.207 1859.8,234.026 1860.37,233.911 1860.94,232.817 1861.51,233.748 1862.08,235.474 1862.64,237.283 1863.21,236.067 1863.78,233.684 1864.35,231.535 1864.92,230.433 1865.49,231.306 1866.05,232.129 1866.62,229.947 1867.19,229.897 1867.76,232.998 1868.33,234.722 1868.9,235.166 1869.46,234.967 1870.03,233.43 1870.6,232.272 1871.17,233.192 1871.74,234.992 1872.31,233.906 1872.87,235.705 1873.44,233.4 1874.01,232.194 1874.58,232.029 1875.15,231.813 1875.72,232.456 1876.28,229.258 1876.85,225.965 1877.42,227.095 1877.99,227.24 1878.56,226.378 1879.13,225.458 1879.69,226.778 1880.26,226.854 1880.83,227.836 1881.4,227.991 1881.97,228.007 1882.54,229.161 1883.1,230.102 1883.67,227.185 1884.24,227.535 1884.81,228.663 1885.38,229.928 1885.95,231.006 1886.51,230.887 1887.08,228.823 1887.65,228.816 1888.22,229.073 1888.79,230.157 1889.36,230.254 1889.92,230.5 1890.49,229.493 1891.06,229.506 1891.63,229.522 1892.2,229.577 1892.77,229.645 1893.33,229.796 1893.9,228.875 1894.47,231.906 1895.04,230.673 1895.61,230.75 1896.18,230.621 1896.74,227.784 1897.31,230.085 1897.88,230.88 1898.45,230.867 1899.02,233.122 1899.59,231.81 1900.16,232.747 1900.72,232.483 1901.29,230.529 1901.86,229.391 1902.43,230.272 1903,230.269 1903.57,227.314 1904.13,227.561 1904.7,226.712 1905.27,226.976 1905.84,228.209 1906.41,230.435 1906.98,232.297 1907.54,232.126 1908.11,231.972 1908.68,229.72 1909.25,227.773 1909.82,227.076 1910.39,226.205 1910.95,225.343 1911.52,227.852 1912.09,228.24 1912.66,229.545 1913.23,231.642 1913.8,231.606 1914.36,229.479 1914.93,231.667 1915.5,231.546 1916.07,233.601 1916.64,234.271 1917.21,233.892 1917.77,233.42 1918.34,233.373 1918.91,234.309 1919.48,231.952 1920.05,230.946 1920.62,230.896 1921.18,232.94 1921.75,233.698 1922.32,233.575 1922.89,234.425 1923.46,233.137 1924.03,231.83 1924.59,231.736 1925.16,232.835 1925.73,234.553 1926.3,235.166 1926.87,233.653 1927.44,234.363 1928,233.076 1928.57,234.95 1929.14,234.619 1929.71,236.466 1930.28,234.977 1930.85,234.512 1931.41,236.368 1931.98,233.75 1932.55,236.565 1933.12,236.29 1933.69,233.525 1934.26,233.204 1934.82,232.035 1935.39,233.807 1935.96,234.535 1936.53,233.298 1937.1,233.107 1937.67,232.681 1938.23,235.421 1938.8,233.975 1939.37,232.547 1939.94,232.185 1940.51,229.753 1941.08,229.91 1941.64,228.508 1942.21,225.578 1942.78,225.832 1943.35,225.012 1943.92,224.264 1944.49,223.731 1945.05,226.538 1945.62,226.681 1946.19,230.051 1946.76,230.834 1947.33,229.604 1947.9,229.595 1948.46,230.049 1949.03,231.003 1949.6,229.771 1950.17,227.768 1950.74,228.884 1951.31,228.071 1951.87,227.954 1952.44,226.013 1953.01,221.031 1953.58,221.854 1954.15,223.35 1954.72,221.973 1955.28,222.47 1955.85,224.1 1956.42,224.458 1956.99,224.993 1957.56,225.576 1958.13,226.842 1958.69,227.204 1959.26,227.474 1959.83,225.777 1960.4,225.012 1960.97,226.701 1961.54,224.977 1962.1,224.314 1962.67,224.9 1963.24,229.362 1963.81,232.572 1964.38,234.367 1964.95,233.153 1965.51,234.019 1966.08,232.838 1966.65,232.736 1967.22,230.597 1967.79,229.915 1968.36,228.133 1968.92,226.462 1969.49,224.759 1970.06,226.053 1970.63,229.728 1971.2,229.019 1971.77,228.058 1972.34,226.218 1972.9,227.585 1973.47,227.706 1974.04,226.983 1974.61,228.501 1975.18,228.876 1975.75,231.312 1976.31,230.361 1976.88,233.679 1977.45,234.689 1978.02,233.481 1978.59,233.451 1979.16,231.096 1979.72,231.243 1980.29,231.394 1980.86,234.389 1981.43,234.284 1982,236.019 1982.57,236.788 1983.13,237.464 1983.7,237.197 1984.27,236.687 1984.84,236.387 1985.41,236.936 1985.98,238.668 1986.54,236.277 1987.11,233.775 1987.68,233.663 1988.25,236.612 1988.82,235.246 1989.39,235.973 1989.95,235.454 1990.52,231.913 1991.09,231.938 1991.66,231.011 1992.23,230.692 1992.8,227.567 1993.36,223.591 1993.93,222.398 1994.5,224.977 1995.07,225.456 1995.64,226.753 1996.21,225.803 1996.77,227.179 1997.34,226.216 1997.91,227.41 1998.48,228.936 1999.05,229.99 1999.62,231.131 2000.18,231.272 2000.75,231.252 2001.32,233.497 2001.89,236.199 2002.46,234.906 2003.03,234.814 2003.59,235.565 2004.16,237.34 2004.73,237.924 2005.3,237.357 2005.87,235.88 2006.44,236.515 2007,235.876 2007.57,237.374 2008.14,236.918 2008.71,236.482 2009.28,237.923 2009.85,236.296 2010.41,235.751 2010.98,234.112 2011.55,233.616 2012.12,232.363 2012.69,233.259 2013.26,229.832 2013.82,228.771 2014.39,229.819 2014.96,228.747 2015.53,229.901 2016.1,230.011 2016.67,229.906 2017.23,231.87 2017.8,233.607 2018.37,233.38 2018.94,233.224 2019.51,230.78 2020.08,228.562 2020.64,227.534 2021.21,226.507 2021.78,226.76 2022.35,225.814 2022.92,229.259 2023.49,228.236 2024.05,226.163 2024.62,227.428 2025.19,226.343 2025.76,229.711 2026.33,231.632 2026.9,231.502 2027.46,230.457 2028.03,228.293 2028.6,229.358 2029.17,230.398 2029.74,231.388 2030.31,231.217 2030.87,231.897 2031.44,231.998 2032.01,230.983 2032.58,230.812 2033.15,231.551 2033.72,229.504 2034.28,226.423 2034.85,227.543 2035.42,228.754 2035.99,229.016 2036.56,227.899 2037.13,226.171 2037.69,227.42 2038.26,228.723 2038.83,229.807 2039.4,226.765 2039.97,225.873 2040.54,227.114 2041.11,225.232 2041.67,225.434 2042.24,224.801 2042.81,225.174 2043.38,225.598 2043.95,225.865 2044.52,226.225 2045.08,226.521 2045.65,228.161 2046.22,229.411 2046.79,227.529 2047.36,226.88 2047.93,229.182 2048.49,230.347 2049.06,231.509 2049.63,229.47 2050.2,227.625 2050.77,228.84 2051.34,227.047 2051.9,227.394 2052.47,226.674 2053.04,227.974 2053.61,229.044 2054.18,229.312 2054.75,229.452 2055.31,229.543 2055.88,229.859 2056.45,229.922 2057.02,229.868 2057.59,228.871 2058.16,228.158 2058.72,228.35 2059.29,229.635 2059.86,232.942 2060.43,232.909 2061,233.837 2061.57,232.646 2062.13,232.664 2062.7,231.424 2063.27,232.544 2063.84,232.153 2064.41,232.306 2064.98,229.116 2065.54,230.157 2066.11,231.345 2066.68,233.238 2067.25,232.146 2067.82,231.111 2068.39,230.188 2068.95,230.198 2069.52,231.35 2070.09,232.049 2070.66,229.982 2071.23,231.125 2071.8,226.933 2072.36,227.141 2072.93,225.273 2073.5,226.702 2074.07,229.054 2074.64,228.298 2075.21,230.864 2075.77,231.056 2076.34,230.977 2076.91,229.951 2077.48,230.055 2078.05,230.199 2078.62,228.454 2079.18,229.629 2079.75,232.991 2080.32,230.822 2080.89,231.922 2081.46,230.928 2082.03,231.696 2082.59,229.469 2083.16,230.8 2083.73,231.805 2084.3,232.96 2084.87,234.044 2085.44,231.85 2086,231.872 2086.57,232.999 2087.14,232.793 2087.71,233.656 2088.28,231.428 2088.85,230.558 2089.41,231.6 2089.98,230.592 2090.55,230.688 2091.12,230.656 2091.69,232.65 2092.26,232.621 2092.82,233.584 2093.39,231.56 2093.96,231.493 2094.53,231.126 2095.1,231.056 2095.67,232.154 2096.23,233.177 2096.8,234.087 2097.37,233.903 2097.94,233.528 2098.51,230.979 2099.08,229.877 2099.64,231.134 2100.21,229.917 2100.78,232.137 2101.35,232.082 2101.92,230.937 2102.49,229.034 2103.05,230.1 2103.62,228.972 2104.19,229.062 2104.76,229.421 2105.33,230.584 2105.9,228.692 2106.46,229.933 2107.03,229.07 2107.6,229.012 2108.17,229.203 2108.74,229.341 2109.31,228.575 2109.87,226.515 2110.44,225.848 2111.01,223.015 2111.58,221.479 2112.15,221.076 2112.72,221.815 2113.29,222.356 2113.85,221.052 2114.42,221.957 2114.99,222.496 2115.56,223.24 2116.13,224.028 2116.7,225.52 2117.26,223.936 2117.83,224.665 2118.4,225.432 2118.97,225.076 2119.54,226.806 2120.11,227.166 2120.67,230.636 2121.24,229.688 2121.81,229.839 2122.38,230.216 2122.95,232.479 2123.52,231.517 2124.08,230.578 2124.65,231.666 2125.22,233.912 2125.79,229.674 2126.36,227.779 2126.93,228.119 2127.49,227.35 2128.06,227.572 2128.63,227.895 2129.2,226.28 2129.77,229.837 2130.34,229.055 2130.9,227.393 2131.47,225.578 2132.04,224.117 2132.61,223.715 2133.18,226.415 2133.75,230.021 2134.31,231.319 2134.88,232.378 2135.45,232.464 2136.02,231.771 2136.59,232.009 2137.16,232.355 2137.72,232.724 2138.29,233.78 2138.86,234.857 2139.43,236.669 2140,238.408 2140.57,239.167 2141.13,239.729 2141.7,240.29 2142.27,239.688 2142.84,240.27 2143.41,239.614 2143.98,238.13 2144.54,236.883 2145.11,236.55 2145.68,234.308 2146.25,233.97 2146.82,234.8 2147.39,233.629 2147.95,233.403 2148.52,234.108 2149.09,233.833 2149.66,232.675 2150.23,231.399 2150.8,230.205 2151.36,230.315 2151.93,230.428 2152.5,230.232 2153.07,235.449 2153.64,239.452 2154.21,238.566 2154.77,237.944 2155.34,237.505 2155.91,238.187 2156.48,236.824 2157.05,235.176 2157.62,233.877 2158.18,232.487 2158.75,231.165 2159.32,230.978 2159.89,230.003 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.038 ± 0.025\n  with uncertainty of ± 0.0022641675658223335\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables. Thankfully, the complications are handled by the following function.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0128 ± (0.00439829, 0.00449974) (MC)\n  95% confidence interval: [-4.02168, -4.0048]) (MC)\n  linear error propagation: -4.01308 ± 0.00432532\n  |δ_y| = |0.00305| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012796436470804, val_l = 0.008888409214884874, val_u = 0.008000135380348716)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1131.95 2211.02,1131.95 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,957.54 2211.02,957.54 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,783.134 2211.02,783.134 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,608.728 2211.02,608.728 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,434.322 2211.02,434.322 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,259.915 2211.02,259.915 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1131.95 365.751,1131.95 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,957.54 365.751,957.54 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,783.134 365.751,783.134 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,608.728 365.751,608.728 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,434.322 365.751,434.322 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,259.915 365.751,259.915 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M298.909 1117.75 Q295.298 1117.75 293.469 1121.31 Q291.664 1124.85 291.664 1131.98 Q291.664 1139.09 293.469 1142.65 Q295.298 1146.19 298.909 1146.19 Q302.543 1146.19 304.349 1142.65 Q306.177 1139.09 306.177 1131.98 Q306.177 1124.85 304.349 1121.31 Q302.543 1117.75 298.909 1117.75 M298.909 1114.04 Q304.719 1114.04 307.775 1118.65 Q310.853 1123.23 310.853 1131.98 Q310.853 1140.71 307.775 1145.31 Q304.719 1149.9 298.909 1149.9 Q293.099 1149.9 290.02 1145.31 Q286.964 1140.71 286.964 1131.98 Q286.964 1123.23 290.02 1118.65 Q293.099 1114.04 298.909 1114.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M259.557 970.885 L267.196 970.885 L267.196 944.519 L258.886 946.186 L258.886 941.927 L267.15 940.26 L271.826 940.26 L271.826 970.885 L279.465 970.885 L279.465 974.82 L259.557 974.82 L259.557 970.885 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 943.339 Q295.298 943.339 293.469 946.904 Q291.664 950.445 291.664 957.575 Q291.664 964.681 293.469 968.246 Q295.298 971.788 298.909 971.788 Q302.543 971.788 304.349 968.246 Q306.177 964.681 306.177 957.575 Q306.177 950.445 304.349 946.904 Q302.543 943.339 298.909 943.339 M298.909 939.635 Q304.719 939.635 307.775 944.242 Q310.853 948.825 310.853 957.575 Q310.853 966.302 307.775 970.908 Q304.719 975.491 298.909 975.491 Q293.099 975.491 290.02 970.908 Q286.964 966.302 286.964 957.575 Q286.964 948.825 290.02 944.242 Q293.099 939.635 298.909 939.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M262.775 796.479 L279.094 796.479 L279.094 800.414 L257.15 800.414 L257.15 796.479 Q259.812 793.724 264.395 789.095 Q269.002 784.442 270.182 783.099 Q272.428 780.576 273.307 778.84 Q274.21 777.081 274.21 775.391 Q274.21 772.636 272.266 770.9 Q270.344 769.164 267.242 769.164 Q265.043 769.164 262.59 769.928 Q260.159 770.692 257.381 772.243 L257.381 767.521 Q260.205 766.386 262.659 765.808 Q265.113 765.229 267.15 765.229 Q272.52 765.229 275.715 767.914 Q278.909 770.599 278.909 775.09 Q278.909 777.22 278.099 779.141 Q277.312 781.039 275.205 783.632 Q274.627 784.303 271.525 787.521 Q268.423 790.715 262.775 796.479 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 768.933 Q295.298 768.933 293.469 772.497 Q291.664 776.039 291.664 783.169 Q291.664 790.275 293.469 793.84 Q295.298 797.382 298.909 797.382 Q302.543 797.382 304.349 793.84 Q306.177 790.275 306.177 783.169 Q306.177 776.039 304.349 772.497 Q302.543 768.933 298.909 768.933 M298.909 765.229 Q304.719 765.229 307.775 769.835 Q310.853 774.419 310.853 783.169 Q310.853 791.895 307.775 796.502 Q304.719 801.085 298.909 801.085 Q293.099 801.085 290.02 796.502 Q286.964 791.895 286.964 783.169 Q286.964 774.419 290.02 769.835 Q293.099 765.229 298.909 765.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M272.914 607.374 Q276.27 608.091 278.145 610.36 Q280.043 612.628 280.043 615.962 Q280.043 621.077 276.525 623.878 Q273.006 626.679 266.525 626.679 Q264.349 626.679 262.034 626.239 Q259.742 625.823 257.289 624.966 L257.289 620.452 Q259.233 621.586 261.548 622.165 Q263.863 622.744 266.386 622.744 Q270.784 622.744 273.076 621.008 Q275.39 619.272 275.39 615.962 Q275.39 612.906 273.238 611.193 Q271.108 609.457 267.289 609.457 L263.261 609.457 L263.261 605.614 L267.474 605.614 Q270.923 605.614 272.752 604.249 Q274.58 602.86 274.58 600.267 Q274.58 597.605 272.682 596.193 Q270.807 594.758 267.289 594.758 Q265.367 594.758 263.168 595.175 Q260.969 595.591 258.33 596.471 L258.33 592.304 Q260.992 591.563 263.307 591.193 Q265.645 590.823 267.705 590.823 Q273.029 590.823 276.131 593.253 Q279.233 595.661 279.233 599.781 Q279.233 602.651 277.59 604.642 Q275.946 606.61 272.914 607.374 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 594.526 Q295.298 594.526 293.469 598.091 Q291.664 601.633 291.664 608.762 Q291.664 615.869 293.469 619.434 Q295.298 622.975 298.909 622.975 Q302.543 622.975 304.349 619.434 Q306.177 615.869 306.177 608.762 Q306.177 601.633 304.349 598.091 Q302.543 594.526 298.909 594.526 M298.909 590.823 Q304.719 590.823 307.775 595.429 Q310.853 600.013 310.853 608.762 Q310.853 617.489 307.775 622.096 Q304.719 626.679 298.909 626.679 Q293.099 626.679 290.02 622.096 Q286.964 617.489 286.964 608.762 Q286.964 600.013 290.02 595.429 Q293.099 590.823 298.909 590.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M271.594 421.116 L259.789 439.565 L271.594 439.565 L271.594 421.116 M270.367 417.042 L276.247 417.042 L276.247 439.565 L281.177 439.565 L281.177 443.453 L276.247 443.453 L276.247 451.602 L271.594 451.602 L271.594 443.453 L255.992 443.453 L255.992 438.94 L270.367 417.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 420.12 Q295.298 420.12 293.469 423.685 Q291.664 427.227 291.664 434.356 Q291.664 441.463 293.469 445.028 Q295.298 448.569 298.909 448.569 Q302.543 448.569 304.349 445.028 Q306.177 441.463 306.177 434.356 Q306.177 427.227 304.349 423.685 Q302.543 420.12 298.909 420.12 M298.909 416.417 Q304.719 416.417 307.775 421.023 Q310.853 425.606 310.853 434.356 Q310.853 443.083 307.775 447.69 Q304.719 452.273 298.909 452.273 Q293.099 452.273 290.02 447.69 Q286.964 443.083 286.964 434.356 Q286.964 425.606 290.02 421.023 Q293.099 416.417 298.909 416.417 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M258.793 242.635 L277.15 242.635 L277.15 246.571 L263.076 246.571 L263.076 255.043 Q264.094 254.695 265.113 254.533 Q266.131 254.348 267.15 254.348 Q272.937 254.348 276.316 257.52 Q279.696 260.691 279.696 266.107 Q279.696 271.686 276.224 274.788 Q272.752 277.867 266.432 277.867 Q264.256 277.867 261.988 277.496 Q259.742 277.126 257.335 276.385 L257.335 271.686 Q259.418 272.82 261.641 273.376 Q263.863 273.931 266.34 273.931 Q270.344 273.931 272.682 271.825 Q275.02 269.719 275.02 266.107 Q275.02 262.496 272.682 260.39 Q270.344 258.283 266.34 258.283 Q264.465 258.283 262.59 258.7 Q260.738 259.117 258.793 259.996 L258.793 242.635 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 245.714 Q295.298 245.714 293.469 249.279 Q291.664 252.82 291.664 259.95 Q291.664 267.057 293.469 270.621 Q295.298 274.163 298.909 274.163 Q302.543 274.163 304.349 270.621 Q306.177 267.057 306.177 259.95 Q306.177 252.82 304.349 249.279 Q302.543 245.714 298.909 245.714 M298.909 242.01 Q304.719 242.01 307.775 246.617 Q310.853 251.2 310.853 259.95 Q310.853 268.677 307.775 273.283 Q304.719 277.867 298.909 277.867 Q293.099 277.867 290.02 273.283 Q286.964 268.677 286.964 259.95 Q286.964 251.2 290.02 246.617 Q293.099 242.01 298.909 242.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1139.08 400.199,1250.53 400.786,1231.06 401.372,1108.22 401.958,992.676 402.545,885.678 403.131,787.971 403.718,793.855 404.304,711.652 404.891,633.282 405.477,562.044 406.063,499.488 406.65,441.417 407.236,391.685 407.823,413.534 408.409,367.029 408.995,325.326 409.582,288.111 410.168,255.093 410.755,278.705 411.341,250.542 411.927,226.592 412.514,290.79 413.1,267.584 413.687,283.733 414.273,263.882 414.86,246.354 415.446,233.052 416.032,250.946 416.619,241.517 417.205,233.014 417.792,226.74 418.378,222.833 418.964,219.895 419.551,239.668 420.137,297.716 420.724,315.107 421.31,331.392 421.896,330.985 422.483,348.779 423.069,365.363 423.656,366.777 424.242,396.029 424.829,398.421 425.415,412.842 426.001,415.755 426.588,441.527 427.174,446.893 427.761,471.174 428.347,505.27 428.933,510.77 429.52,526.353 430.106,532.856 430.693,555.288 431.279,584.232 431.865,597.609 432.452,610.424 433.038,623.056 433.625,629.743 434.211,642.523 434.798,649.896 435.384,657.516 435.97,676.244 436.557,688.183 437.143,696.078 437.73,723.036 438.316,738.824 438.902,758.886 439.489,764.999 440.075,775.161 440.662,785.081 441.248,795.218 441.835,804.985 442.421,814.809 443.007,824.976 443.594,830.802 444.18,837.252 444.767,850.65 445.353,866.45 445.939,878.652 446.526,893.432 447.112,901.295 447.699,903.438 448.285,908.875 448.871,917.205 449.458,922.941 450.044,931.462 450.631,939.576 451.217,947.237 451.804,960.123 452.39,970.382 452.976,976.966 453.563,991.661 454.149,995.951 454.736,1002.3 455.322,1013.39 455.908,1019.28 456.495,1027.88 457.081,1033.98 457.668,1041.72 458.254,1049.8 458.84,1055.11 459.427,1055.94 460.013,1063.56 460.6,1068.74 461.186,1075.81 461.773,1081.27 462.359,1087.95 462.945,1092.21 463.532,1096.76 464.118,1101.32 464.705,1105.73 465.291,1108.06 465.877,1112.64 466.464,1124.38 467.05,1128.42 467.637,1134.12 468.223,1141.19 468.809,1146.28 469.396,1146.93 469.982,1150.06 470.569,1152.86 471.155,1155.71 471.742,1158.26 472.328,1160.96 472.914,1163.48 473.501,1164.25 474.087,1165.16 474.674,1167.49 475.26,1173.12 475.846,1173.65 476.433,1176 477.019,1174.9 477.606,1175.57 478.192,1178.05 478.778,1180.84 479.365,1184.57 479.951,1186.73 480.538,1187.25 481.124,1190.96 481.711,1192.77 482.297,1192.81 482.883,1193.15 483.47,1193.37 484.056,1195.37 484.643,1195.61 485.229,1197.64 485.815,1198.12 486.402,1201.53 486.988,1204.74 487.575,1206.38 488.161,1206.11 488.748,1204.45 489.334,1207.35 489.92,1207.57 490.507,1209.23 491.093,1210.54 491.68,1216.66 492.266,1219.22 492.852,1222 493.439,1224.37 494.025,1220.91 494.612,1222.12 495.198,1218.89 495.784,1218.56 496.371,1218.44 496.957,1218.38 497.544,1219.4 498.13,1219.14 498.717,1220.59 499.303,1218.69 499.889,1220.26 500.476,1221.72 501.062,1222.88 501.649,1222.46 502.235,1226.86 502.821,1226 503.408,1226.92 503.994,1231.02 504.581,1233.08 505.167,1232.8 505.753,1230.89 506.34,1232.1 506.926,1231.61 507.513,1233.95 508.099,1237.34 508.686,1233.36 509.272,1234.16 509.858,1233.5 510.445,1229.65 511.031,1229.09 511.618,1227.01 512.204,1226.55 512.79,1230.81 513.377,1228.94 513.963,1227.07 514.55,1223.78 515.136,1226.64 515.722,1227.27 516.309,1228.41 516.895,1226.6 517.482,1227.54 518.068,1228.73 518.655,1229.51 519.241,1234.87 519.827,1235.7 520.414,1236.14 521,1235.5 521.587,1234.75 522.173,1237.02 522.759,1236.27 523.346,1235.21 523.932,1236.03 524.519,1236.86 525.105,1236.24 525.691,1236.82 526.278,1238.69 526.864,1236.53 527.451,1235.61 528.037,1239.32 528.624,1235.54 529.21,1237.53 529.796,1238.03 530.383,1237.19 530.969,1240.99 531.556,1236.97 532.142,1237.61 532.728,1238.39 533.315,1237.45 533.901,1237.84 534.488,1238.17 535.074,1239.95 535.661,1238.94 536.247,1239.51 536.833,1238.69 537.42,1237.6 538.006,1235.18 538.593,1235.62 539.179,1230.59 539.765,1226.97 540.352,1226.87 540.938,1230.69 541.525,1232.8 542.111,1232.26 542.697,1232.8 543.284,1232.18 543.87,1236.03 544.457,1234.96 545.043,1232.46 545.63,1231.43 546.216,1231.7 546.802,1232.32 547.389,1231.67 547.975,1232.49 548.562,1231.76 549.148,1227.87 549.734,1230.35 550.321,1229.73 550.907,1231.76 551.494,1232.43 552.08,1231.35 552.666,1228.9 553.253,1228.32 553.839,1229.27 554.426,1227.28 555.012,1226.69 555.599,1226.33 556.185,1225.75 556.771,1228.07 557.358,1227.74 557.944,1228.9 558.531,1227.15 559.117,1225.32 559.703,1224.97 560.29,1223.15 560.876,1222.61 561.463,1223.77 562.049,1225.03 562.635,1224.53 563.222,1222.75 563.808,1219.7 564.395,1221.01 564.981,1219.41 565.568,1219.11 566.154,1220.82 566.74,1217.74 567.327,1216.07 567.913,1214.61 568.5,1214.62 569.086,1214.55 569.672,1214.79 570.259,1216.14 570.845,1219.08 571.432,1218.77 572.018,1222.76 572.605,1225.27 573.191,1226.21 573.777,1229.8 574.364,1227.57 574.95,1224.03 575.537,1223.3 576.123,1221.32 576.709,1219.17 577.296,1218.79 577.882,1220.09 578.469,1221.37 579.055,1221.11 579.641,1217.78 580.228,1216.38 580.814,1214.91 581.401,1215.05 581.987,1212.13 582.574,1213.59 583.16,1212.48 583.746,1214.05 584.333,1214.3 584.919,1211.83 585.506,1210.59 586.092,1210.73 586.678,1211.12 587.265,1211.3 587.851,1214.47 588.438,1214.5 589.024,1216.3 589.61,1216.26 590.197,1216.31 590.783,1217.83 591.37,1216.37 591.956,1214.93 592.543,1214.77 593.129,1214.51 593.715,1217.36 594.302,1220.16 594.888,1221.37 595.475,1219.81 596.061,1219.86 596.647,1218.06 597.234,1217.81 597.82,1219.06 598.407,1217.16 598.993,1217.09 599.579,1214.26 600.166,1214.05 600.752,1214.31 601.339,1214.19 601.925,1212.45 602.512,1211.29 603.098,1211.29 603.684,1208.8 604.271,1207.73 604.857,1209.59 605.444,1211 606.03,1212.29 606.616,1215.19 607.203,1214.64 607.789,1213.3 608.376,1214.6 608.962,1210.18 609.548,1208.94 610.135,1208.03 610.721,1209.67 611.308,1210.98 611.894,1211.21 612.481,1211.39 613.067,1211.42 613.653,1211.25 614.24,1211.28 614.826,1211.41 615.413,1215.48 615.999,1217.79 616.585,1217.48 617.172,1220.03 617.758,1219.56 618.345,1223.55 618.931,1223.05 619.518,1224.1 620.104,1224.63 620.69,1228.35 621.277,1226.16 621.863,1228.23 622.45,1227.45 623.036,1226.64 623.622,1221.74 624.209,1224.06 624.795,1221.13 625.382,1215.23 625.968,1213.71 626.554,1216.26 627.141,1215.91 627.727,1215.57 628.314,1216.8 628.9,1218.3 629.487,1217.93 630.073,1217.29 630.659,1213.81 631.246,1211.95 631.832,1214.86 632.419,1213.21 633.005,1214.59 633.591,1215.73 634.178,1215.79 634.764,1217.84 635.351,1215.47 635.937,1215.28 636.523,1217.79 637.11,1219.16 637.696,1220.31 638.283,1221.42 638.869,1220.93 639.456,1220.15 640.042,1220.93 640.628,1220.62 641.215,1218.61 641.801,1218.16 642.388,1217.67 642.974,1216.1 643.56,1216.15 644.147,1217.38 644.733,1217.07 645.32,1215.3 645.906,1215.07 646.492,1216.08 647.079,1218.6 647.665,1218.1 648.252,1217.73 648.838,1218.63 649.425,1219.28 650.011,1220.21 650.597,1218.21 651.184,1217.73 651.77,1215.8 652.357,1216.94 652.943,1220.86 653.529,1217.43 654.116,1219.9 654.702,1217.86 655.289,1217.63 655.875,1214.19 656.462,1213.98 657.048,1212.14 657.634,1211.94 658.221,1213.28 658.807,1212.93 659.394,1211.04 659.98,1210.86 660.566,1213.57 661.153,1214.3 661.739,1214.05 662.326,1212.27 662.912,1211.91 663.498,1210.44 664.085,1210.52 664.671,1213.38 665.258,1212.72 665.844,1213.9 666.431,1214.92 667.017,1214.36 667.603,1214.18 668.19,1215.37 668.776,1213.71 669.363,1210.8 669.949,1210.52 670.535,1211.55 671.122,1208.56 671.708,1208.52 672.295,1209.62 672.881,1210.83 673.467,1213.54 674.054,1211.98 674.64,1214.75 675.227,1213.23 675.813,1214.45 676.4,1213.91 676.986,1215.03 677.572,1213.24 678.159,1210.05 678.745,1211.49 679.332,1209.88 679.918,1205.56 680.504,1207.29 681.091,1211.48 681.677,1211.48 682.264,1208.58 682.85,1207.1 683.436,1207.3 684.023,1209.91 684.609,1208.27 685.196,1212.63 685.782,1211.1 686.369,1209.78 686.955,1209.67 687.541,1211.03 688.128,1210.81 688.714,1212.56 689.301,1212.33 689.887,1207.81 690.473,1207.79 691.06,1209.26 691.646,1212.19 692.233,1211.73 692.819,1209.9 693.405,1205.53 693.992,1205.43 694.578,1209.64 695.165,1211.2 695.751,1211.3 696.338,1216.63 696.924,1216.03 697.51,1216.97 698.097,1213.71 698.683,1215.04 699.27,1211.6 699.856,1208.52 700.442,1212.69 701.029,1215.18 701.615,1216.12 702.202,1215.6 702.788,1216.66 703.375,1216.1 703.961,1214.07 704.547,1213.72 705.134,1209.18 705.72,1207.67 706.307,1209.15 706.893,1207.76 707.479,1209.16 708.066,1204.8 708.652,1203.95 709.239,1202.49 709.825,1204.11 710.411,1205.77 710.998,1205.61 711.584,1206.92 712.171,1205.39 712.757,1208.22 713.344,1206.53 713.93,1210.88 714.516,1207.91 715.103,1207.94 715.689,1209.18 716.276,1211.97 716.862,1214.33 717.448,1212.38 718.035,1212.16 718.621,1214.72 719.208,1213.12 719.794,1212.64 720.38,1210.83 720.967,1208.01 721.553,1209.5 722.14,1208.04 722.726,1207.88 723.313,1209.2 723.899,1211.76 724.485,1209.72 725.072,1212.6 725.658,1209.4 726.245,1209 726.831,1208.75 727.417,1207.19 728.004,1208.73 728.59,1208.55 729.177,1209.57 729.763,1210.71 730.349,1210.44 730.936,1205.93 731.522,1206.04 732.109,1204.9 732.695,1205.17 733.282,1203.99 733.868,1204.41 734.454,1204.53 735.041,1205.82 735.627,1208.62 736.214,1205.93 736.8,1207.47 737.386,1207.72 737.973,1205.94 738.559,1204.31 739.146,1201.53 739.732,1200.26 740.318,1200.66 740.905,1202.43 741.491,1201.21 742.078,1202.83 742.664,1208.81 743.251,1209.97 743.837,1212.52 744.423,1215.07 745.01,1214.43 745.596,1212.57 746.183,1215.18 746.769,1217.42 747.355,1218.28 747.942,1220.38 748.528,1220.86 749.115,1222.61 749.701,1220.23 750.288,1221.04 750.874,1218.91 751.46,1215.37 752.047,1217.92 752.633,1217.2 753.22,1219.28 753.806,1220 754.392,1216.18 754.979,1215.6 755.565,1213.74 756.152,1211.67 756.738,1208.36 757.324,1206.65 757.911,1207.98 758.497,1209.23 759.084,1203.61 759.67,1203.57 760.257,1202.23 760.843,1202.61 761.429,1202.96 762.016,1198.93 762.602,1196.06 763.189,1195.18 763.775,1196.95 764.361,1199.17 764.948,1196.41 765.534,1196.85 766.121,1191.73 766.707,1191.35 767.293,1189.37 767.88,1187.49 768.466,1188.68 769.053,1192.19 769.639,1192.88 770.226,1192.24 770.812,1195.75 771.398,1196.15 771.985,1196.63 772.571,1199.72 773.158,1198.58 773.744,1200.74 774.33,1200.51 774.917,1202.09 775.503,1202.15 776.09,1202.03 776.676,1199.57 777.262,1198.36 777.849,1198.75 778.435,1200.5 779.022,1200.84 779.608,1199.47 780.195,1199.54 780.781,1199.91 781.367,1201.5 781.954,1201.48 782.54,1204.57 783.127,1201.68 783.713,1200.66 784.299,1203.8 784.886,1202.51 785.472,1202.72 786.059,1201.35 786.645,1203.09 787.232,1204.49 787.818,1203.04 788.404,1201.57 788.991,1203.06 789.577,1204.59 790.164,1204.86 790.75,1203.36 791.336,1204.85 791.923,1202.14 792.509,1201.04 793.096,1201.32 793.682,1204.28 794.268,1204.21 794.855,1207.48 795.441,1205.91 796.028,1206.04 796.614,1209.22 797.201,1209.16 797.787,1210.38 798.373,1210.17 798.96,1209.83 799.546,1210.95 800.133,1206.39 800.719,1205.08 801.305,1205.24 801.892,1203.95 802.478,1204.31 803.065,1205.66 803.651,1205.65 804.237,1209.92 804.824,1209.64 805.41,1206.7 805.997,1205.53 806.583,1208.43 807.17,1206.58 807.756,1207.83 808.342,1206.11 808.929,1205.56 809.515,1206.76 810.102,1206.97 810.688,1207.03 811.274,1208.45 811.861,1208.43 812.447,1205.37 813.034,1205.13 813.62,1207.61 814.206,1207.59 814.793,1207.23 815.379,1205.56 815.966,1205.43 816.552,1205.1 817.139,1202.26 817.725,1202.63 818.311,1201.04 818.898,1201.4 819.484,1200.42 820.071,1199.02 820.657,1199.51 821.243,1200.03 821.83,1200.23 822.416,1203.08 823.003,1201.88 823.589,1203.36 824.175,1204.68 824.762,1204.81 825.348,1207.54 825.935,1209.22 826.521,1209.04 827.108,1207.25 827.694,1205.63 828.28,1204.14 828.867,1205.64 829.453,1205.6 830.04,1205.72 830.626,1208.42 831.212,1207.02 831.799,1205.62 832.385,1203.88 832.972,1204.18 833.558,1201.67 834.145,1203.44 834.731,1202 835.317,1199.15 835.904,1203.45 836.49,1203.63 837.077,1205.1 837.663,1207.54 838.249,1205.98 838.836,1208.87 839.422,1208.54 840.009,1208.49 840.595,1207.12 841.181,1209.82 841.768,1209.5 842.354,1210.87 842.941,1213.31 843.527,1208.51 844.114,1209.34 844.7,1206.58 845.286,1207.96 845.873,1210.47 846.459,1210.14 847.046,1208.17 847.632,1212 848.218,1210.08 848.805,1208.25 849.391,1206.54 849.978,1206.32 850.564,1209.07 851.15,1208.87 851.737,1207.18 852.323,1205.64 852.91,1205.45 853.496,1205.46 854.083,1205.44 854.669,1203.96 855.255,1203.85 855.842,1206.6 856.428,1206.49 857.015,1206.45 857.601,1203.52 858.187,1205.03 858.774,1202.07 859.36,1204.87 859.947,1204.91 860.533,1204.89 861.119,1204.87 861.706,1204.73 862.292,1204.24 862.879,1207.17 863.465,1208.43 864.052,1212.1 864.638,1211.64 865.224,1207.05 865.811,1205.39 866.397,1208.32 866.984,1206.56 867.57,1206.41 868.156,1206.25 868.743,1207.38 869.329,1202.9 869.916,1202.6 870.502,1203.82 871.089,1205.23 871.675,1204.89 872.261,1203.66 872.848,1202.45 873.434,1204.13 874.021,1203 874.607,1202.97 875.193,1203 875.78,1205.88 876.366,1202.99 876.953,1200.34 877.539,1197.73 878.125,1196.51 878.712,1196.6 879.298,1197.05 879.885,1197.63 880.471,1196.71 881.058,1196.93 881.644,1198.5 882.23,1198.98 882.817,1199.25 883.403,1199.35 883.99,1198.41 884.576,1200.36 885.162,1201.83 885.749,1200.91 886.335,1199.8 886.922,1202.72 887.508,1204 888.094,1206.79 888.681,1203.97 889.267,1208.06 889.854,1209.17 890.44,1210.34 891.027,1208.52 891.613,1209.68 892.199,1204.97 892.786,1204.72 893.372,1203.13 893.959,1203.1 894.545,1204.72 895.131,1204.45 895.718,1204.42 896.304,1204.07 896.891,1202.41 897.477,1202.21 898.063,1199.32 898.65,1199.43 899.236,1198.4 899.823,1197.06 900.409,1200.01 900.996,1201.42 901.582,1203.22 902.168,1200.13 902.755,1199.04 903.341,1200.92 903.928,1199.74 904.514,1203.09 905.1,1203.1 905.687,1205.71 906.273,1205.72 906.86,1207.23 907.446,1202.69 908.032,1204.36 908.619,1203.07 909.205,1202.99 909.792,1201.6 910.378,1200.23 910.965,1197.45 911.551,1199.08 912.137,1196.29 912.724,1196.15 913.31,1196.31 913.897,1198.48 914.483,1198.67 915.069,1199.26 915.656,1200.67 916.242,1202.46 916.829,1202.69 917.415,1201.37 918.002,1201.61 918.588,1203.02 919.174,1201.88 919.761,1197.67 920.347,1196.47 920.934,1195.26 921.52,1195.18 922.106,1196.95 922.693,1198.85 923.279,1200.27 923.866,1201.78 924.452,1203.26 925.038,1203.49 925.625,1204.98 926.211,1205.27 926.798,1205.21 927.384,1206.23 927.971,1206.26 928.557,1208.66 929.143,1208.39 929.73,1210.83 930.316,1211.71 930.903,1211.31 931.489,1212.33 932.075,1211.89 932.662,1206.15 933.248,1209.24 933.835,1205.87 934.421,1204.25 935.007,1204.23 935.594,1202.8 936.18,1202.93 936.767,1201.57 937.353,1201.74 937.94,1201.92 938.526,1200.52 939.112,1200.48 939.699,1202.03 940.285,1206.28 940.872,1207.54 941.458,1210.44 942.044,1208.86 942.631,1205.67 943.217,1206.77 943.804,1206.34 944.39,1207.28 944.976,1208.4 945.563,1208.23 946.149,1206.44 946.736,1206.35 947.322,1208.78 947.909,1211.32 948.495,1209.55 949.081,1212.15 949.668,1210.25 950.254,1209.75 950.841,1212.4 951.427,1213.2 952.013,1211.12 952.6,1212 953.186,1212.89 953.773,1210.55 954.359,1208.74 954.945,1205.58 955.532,1202.47 956.118,1202.74 956.705,1203.03 957.291,1203.29 957.878,1204.47 958.464,1200.1 959.05,1204.51 959.637,1207.42 960.223,1205.87 960.81,1205.75 961.396,1205.56 961.982,1205.51 962.569,1204.23 963.155,1205.79 963.742,1202.69 964.328,1201.25 964.915,1201.08 965.501,1200.01 966.087,1200.3 966.674,1201.49 967.26,1201.44 967.847,1199.9 968.433,1201.5 969.019,1201.48 969.606,1203.1 970.192,1201.48 970.779,1201.69 971.365,1200.54 971.951,1202.03 972.538,1202.14 973.124,1203.62 973.711,1203.72 974.297,1203.89 974.884,1206.74 975.47,1206.7 976.056,1207.49 976.643,1207.28 977.229,1209.7 977.816,1207.87 978.402,1206.2 978.988,1207.68 979.575,1210.21 980.161,1209.93 980.748,1212.41 981.334,1209.11 981.92,1207.5 982.507,1208.61 983.093,1211.24 983.68,1209.52 984.266,1207.9 984.853,1205.94 985.439,1205.65 986.025,1208.49 986.612,1208.22 987.198,1208.27 987.785,1209.46 988.371,1207.64 988.957,1207.48 989.544,1207.13 990.13,1205.28 990.717,1200.72 991.303,1202.06 991.889,1200.39 992.476,1201.9 993.062,1200.5 993.649,1196.36 994.235,1193.81 994.822,1194.34 995.408,1193.44 995.994,1195.29 996.581,1194.18 997.167,1193.48 997.754,1193.94 998.34,1193.01 998.926,1192.01 999.513,1192.47 1000.1,1191.71 1000.69,1192.51 1001.27,1190.05 1001.86,1189.35 1002.44,1197.1 1003.03,1199.05 1003.62,1198 1004.2,1198.44 1004.79,1200.26 1005.38,1201.95 1005.96,1200.6 1006.55,1200.76 1007.14,1202.23 1007.72,1203.72 1008.31,1202.05 1008.9,1201.71 1009.48,1201.53 1010.07,1201.74 1010.65,1199.99 1011.24,1199.98 1011.83,1195.49 1012.41,1195.83 1013,1196.15 1013.59,1199.38 1014.17,1200.91 1014.76,1198.46 1015.35,1195.59 1015.93,1196.23 1016.52,1198.34 1017.11,1199.97 1017.69,1200.2 1018.28,1206.24 1018.86,1204.24 1019.45,1204.22 1020.04,1205.42 1020.62,1203.77 1021.21,1203.54 1021.8,1204.73 1022.38,1207.45 1022.97,1208.49 1023.56,1206.84 1024.14,1205.2 1024.73,1205.04 1025.32,1206.13 1025.9,1205.85 1026.49,1205.65 1027.07,1206.92 1027.66,1204.97 1028.25,1203.73 1028.83,1203.69 1029.42,1202.13 1030.01,1201.82 1030.59,1201.75 1031.18,1200.34 1031.77,1202.11 1032.35,1202.09 1032.94,1202.2 1033.52,1203.73 1034.11,1204.97 1034.7,1207.84 1035.28,1208.9 1035.87,1208.63 1036.46,1204.32 1037.04,1205.59 1037.63,1203.97 1038.22,1208.12 1038.8,1207.79 1039.39,1210.33 1039.98,1206.94 1040.56,1205.14 1041.15,1203.71 1041.73,1202.09 1042.32,1202.16 1042.91,1200.61 1043.49,1199.43 1044.08,1199.79 1044.67,1199.8 1045.25,1204.21 1045.84,1203.76 1046.43,1200.45 1047.01,1203.23 1047.6,1202.98 1048.19,1206.87 1048.77,1206.34 1049.36,1207.79 1049.94,1206.18 1050.53,1206.04 1051.12,1205.8 1051.7,1204.23 1052.29,1205.51 1052.88,1206.76 1053.46,1206.9 1054.05,1205.31 1054.64,1205.61 1055.22,1206.63 1055.81,1206.52 1056.39,1209.31 1056.98,1209.06 1057.57,1208.9 1058.15,1208.51 1058.74,1205.5 1059.33,1205.23 1059.91,1206.52 1060.5,1206.34 1061.09,1207.49 1061.67,1208.72 1062.26,1208.41 1062.85,1209.58 1063.43,1204.72 1064.02,1210.26 1064.6,1210.18 1065.19,1212.57 1065.78,1213.57 1066.36,1211.45 1066.95,1212.41 1067.54,1207.56 1068.12,1207.26 1068.71,1205.53 1069.3,1203.81 1069.88,1202.41 1070.47,1204.1 1071.06,1203.89 1071.64,1205.1 1072.23,1203.43 1072.81,1204.53 1073.4,1204.28 1073.99,1205.38 1074.57,1203.88 1075.16,1205.34 1075.75,1202.52 1076.33,1200.86 1076.92,1200.74 1077.51,1199.52 1078.09,1200.66 1078.68,1203.85 1079.26,1206.55 1079.85,1206.47 1080.44,1207.64 1081.02,1207.19 1081.61,1206.78 1082.2,1206.7 1082.78,1205.05 1083.37,1202.06 1083.96,1202.13 1084.54,1200.84 1085.13,1202.59 1085.72,1201.5 1086.3,1200.34 1086.89,1200.54 1087.47,1200.57 1088.06,1200.63 1088.65,1202.08 1089.23,1203.66 1089.82,1203.7 1090.41,1205.25 1090.99,1202.25 1091.58,1202.39 1092.17,1202.47 1092.75,1202.58 1093.34,1204.15 1093.93,1200.96 1094.51,1201.24 1095.1,1199.83 1095.68,1196.94 1096.27,1200.09 1096.86,1198.92 1097.44,1199.13 1098.03,1199.3 1098.62,1202.52 1099.2,1202.31 1099.79,1203.6 1100.38,1203.34 1100.96,1206.2 1101.55,1203.23 1102.14,1203.19 1102.72,1204.27 1103.31,1204.24 1103.89,1204.44 1104.48,1205.92 1105.07,1201.72 1105.65,1201.57 1106.24,1201.45 1106.83,1201.75 1107.41,1203.19 1108,1204.41 1108.59,1205.72 1109.17,1206.71 1109.76,1206.68 1110.34,1206.41 1110.93,1207.9 1111.52,1210.39 1112.1,1211.61 1112.69,1208.03 1113.28,1206.48 1113.86,1207.6 1114.45,1205.92 1115.04,1203.78 1115.62,1203.75 1116.21,1202.49 1116.8,1205.21 1117.38,1203.47 1117.97,1201.89 1118.55,1200.67 1119.14,1197.78 1119.73,1195.46 1120.31,1196.11 1120.9,1198.14 1121.49,1198.58 1122.07,1198.94 1122.66,1199.36 1123.25,1198.04 1123.83,1196.97 1124.42,1195.71 1125.01,1194.51 1125.59,1197.8 1126.18,1196.45 1126.76,1200.63 1127.35,1197.98 1127.94,1198.21 1128.52,1200.03 1129.11,1201.7 1129.7,1202.81 1130.28,1205.63 1130.87,1204.16 1131.46,1203.87 1132.04,1200.93 1132.63,1198 1133.21,1199.87 1133.8,1198.18 1134.39,1199.94 1134.97,1198.29 1135.56,1196.96 1136.15,1198.77 1136.73,1197.81 1137.32,1199.4 1137.91,1200.93 1138.49,1200.83 1139.08,1200.91 1139.67,1196.76 1140.25,1195.6 1140.84,1192.85 1141.42,1193.38 1142.01,1196.78 1142.6,1197.12 1143.18,1195.96 1143.77,1196.01 1144.36,1196.5 1144.94,1196.87 1145.53,1197.19 1146.12,1197.35 1146.7,1200.47 1147.29,1196.64 1147.88,1198.1 1148.46,1195.7 1149.05,1195.92 1149.63,1196.24 1150.22,1195.29 1150.81,1196.67 1151.39,1199.86 1151.98,1198.37 1152.57,1197.29 1153.15,1199.07 1153.74,1200.85 1154.33,1201.98 1154.91,1204.93 1155.5,1203.28 1156.09,1199.09 1156.67,1199.58 1157.26,1199.64 1157.84,1199.72 1158.43,1199.7 1159.02,1201.01 1159.6,1198.02 1160.19,1196.83 1160.78,1196.99 1161.36,1193.01 1161.95,1193.58 1162.54,1192.46 1163.12,1196.01 1163.71,1197.93 1164.29,1198.58 1164.88,1200.46 1165.47,1194.87 1166.05,1195.42 1166.64,1195.8 1167.23,1193.25 1167.81,1192.34 1168.4,1194.46 1168.99,1196.36 1169.57,1199.62 1170.16,1200.04 1170.75,1200.07 1171.33,1199.15 1171.92,1197.99 1172.5,1199.97 1173.09,1201.19 1173.68,1199.72 1174.26,1199.74 1174.85,1198.43 1175.44,1201.58 1176.02,1201.73 1176.61,1202.11 1177.2,1200.63 1177.78,1200.6 1178.37,1202.32 1178.96,1202.25 1179.54,1202.41 1180.13,1202.79 1180.71,1205.8 1181.3,1204.17 1181.89,1201.05 1182.47,1196.95 1183.06,1196.92 1183.65,1200.18 1184.23,1201.59 1184.82,1202.97 1185.41,1202.93 1185.99,1207.56 1186.58,1207.52 1187.16,1204.31 1187.75,1203.99 1188.34,1205.04 1188.92,1203.36 1189.51,1201.7 1190.1,1203.26 1190.68,1201.69 1191.27,1201.38 1191.86,1199.98 1192.44,1198.48 1193.03,1198.52 1193.62,1198.67 1194.2,1200.34 1194.79,1200.33 1195.37,1206.08 1195.96,1207.41 1196.55,1208.41 1197.13,1208.04 1197.72,1214.66 1198.31,1212.98 1198.89,1210.72 1199.48,1210.32 1200.07,1211.14 1200.65,1212.11 1201.24,1208.9 1201.83,1209.69 1202.41,1208.08 1203,1209.36 1203.58,1210.36 1204.17,1208.43 1204.76,1205.38 1205.34,1205.08 1205.93,1206.33 1206.52,1204.69 1207.1,1204.39 1207.69,1207.03 1208.28,1208.02 1208.86,1208.99 1209.45,1205.58 1210.03,1205.33 1210.62,1203.69 1211.21,1199.38 1211.79,1196.88 1212.38,1196.77 1212.97,1197.17 1213.55,1200.22 1214.14,1199.93 1214.73,1200.04 1215.31,1200.13 1215.9,1200.26 1216.49,1198.89 1217.07,1198.94 1217.66,1199.14 1218.24,1196.57 1218.83,1196.74 1219.42,1195.99 1220,1196.05 1220.59,1197.99 1221.18,1199.7 1221.76,1198.43 1222.35,1197.2 1222.94,1196.04 1223.52,1196.27 1224.11,1193.36 1224.7,1192.44 1225.28,1195.93 1225.87,1196.23 1226.45,1196.68 1227.04,1195.62 1227.63,1197.42 1228.21,1197.45 1228.8,1200.55 1229.39,1196.15 1229.97,1196.74 1230.56,1198.57 1231.15,1198.69 1231.73,1198.86 1232.32,1197.32 1232.91,1197.48 1233.49,1200.54 1234.08,1202.45 1234.66,1199.63 1235.25,1199.46 1235.84,1199.54 1236.42,1196.66 1237.01,1196.94 1237.6,1195.74 1238.18,1194.93 1238.77,1194.08 1239.36,1194.49 1239.94,1196.31 1240.53,1198.09 1241.11,1201.4 1241.7,1202.65 1242.29,1205.45 1242.87,1201.02 1243.46,1204 1244.05,1202.52 1244.63,1202.45 1245.22,1203.81 1245.81,1199.25 1246.39,1198.99 1246.98,1199.3 1247.57,1200.95 1248.15,1199.56 1248.74,1198.44 1249.32,1197.15 1249.91,1198.77 1250.5,1200.38 1251.08,1200.64 1251.67,1199.46 1252.26,1201.18 1252.84,1201.27 1253.43,1198.72 1254.02,1200.3 1254.6,1200.43 1255.19,1202.2 1255.78,1203.52 1256.36,1202.1 1256.95,1202.05 1257.53,1203.5 1258.12,1204.75 1258.71,1204.57 1259.29,1204.6 1259.88,1202.88 1260.47,1201.22 1261.05,1201.72 1261.64,1201.75 1262.23,1200.52 1262.81,1203.36 1263.4,1204.45 1263.98,1203.09 1264.57,1204.44 1265.16,1202.8 1265.74,1202.57 1266.33,1203.84 1266.92,1200.9 1267.5,1200.43 1268.09,1203.3 1268.68,1201.76 1269.26,1203.09 1269.85,1204.49 1270.44,1202.96 1271.02,1201.58 1271.61,1200.2 1272.19,1201.53 1272.78,1204.22 1273.37,1202.66 1273.95,1202.52 1274.54,1201.14 1275.13,1202.75 1275.71,1202.61 1276.3,1202.68 1276.89,1204.04 1277.47,1203.74 1278.06,1202.2 1278.65,1202.34 1279.23,1203.52 1279.82,1205.17 1280.4,1202.17 1280.99,1203.56 1281.58,1203.83 1282.16,1206.85 1282.75,1206.68 1283.34,1206.24 1283.92,1207.52 1284.51,1208.56 1285.1,1210.89 1285.68,1208.9 1286.27,1207.02 1286.86,1209.28 1287.44,1208.82 1288.03,1207.09 1288.61,1206.87 1289.2,1203.49 1289.79,1203.45 1290.37,1201.72 1290.96,1200.42 1291.55,1200.6 1292.13,1200.82 1292.72,1198.21 1293.31,1200.01 1293.89,1201.63 1294.48,1201.8 1295.06,1204.74 1295.65,1203.28 1296.24,1203.18 1296.82,1203.11 1297.41,1204.66 1298,1204.47 1298.58,1205.51 1299.17,1206.89 1299.76,1206.5 1300.34,1204.99 1300.93,1205.99 1301.52,1205.46 1302.1,1208.15 1302.69,1206.22 1303.27,1207.19 1303.86,1207.26 1304.45,1208.46 1305.03,1208.03 1305.62,1210.68 1306.21,1210.49 1306.79,1211.6 1307.38,1212.67 1307.97,1210.68 1308.55,1210.3 1309.14,1211.5 1309.73,1212.5 1310.31,1208.89 1310.9,1207.06 1311.48,1208.17 1312.07,1207.96 1312.66,1208.9 1313.24,1211.36 1313.83,1211.1 1314.42,1209.25 1315,1210.62 1315.59,1211.67 1316.18,1210.16 1316.76,1206.9 1317.35,1204.86 1317.93,1206.16 1318.52,1205.79 1319.11,1202.88 1319.69,1208.54 1320.28,1209.29 1320.87,1206.14 1321.45,1202.92 1322.04,1202.54 1322.63,1201.32 1323.21,1202.8 1323.8,1204.16 1324.39,1204.02 1324.97,1201.13 1325.56,1201.22 1326.14,1202.83 1326.73,1202.78 1327.32,1205.69 1327.9,1203.99 1328.49,1201.02 1329.08,1198.25 1329.66,1201.12 1330.25,1204.13 1330.84,1205.42 1331.42,1205.11 1332.01,1207.93 1332.6,1205.98 1333.18,1204.09 1333.77,1205.24 1334.35,1200.82 1334.94,1202.1 1335.53,1203.44 1336.11,1204.77 1336.7,1204.66 1337.29,1200.36 1337.87,1200.18 1338.46,1201.5 1339.05,1202.87 1339.63,1199.83 1340.22,1199.87 1340.8,1200.01 1341.39,1201.59 1341.98,1202.89 1342.56,1207.22 1343.15,1206.69 1343.74,1204.84 1344.32,1204.66 1344.91,1206.01 1345.5,1204.28 1346.08,1207.04 1346.67,1205.29 1347.26,1203.72 1347.84,1202.22 1348.43,1202.24 1349.01,1206.2 1349.6,1203.34 1350.19,1202.17 1350.77,1201.99 1351.36,1200.24 1351.95,1195.97 1352.53,1199.29 1353.12,1202.14 1353.71,1201.87 1354.29,1203.53 1354.88,1204.88 1355.47,1206.32 1356.05,1205.92 1356.64,1204.26 1357.22,1202.61 1357.81,1202.45 1358.4,1201.15 1358.98,1200.1 1359.57,1199.02 1360.16,1196.36 1360.74,1193.76 1361.33,1195.58 1361.92,1197.43 1362.5,1199.23 1363.09,1197.66 1363.68,1196.57 1364.26,1196.85 1364.85,1198.8 1365.43,1200.31 1366.02,1204.79 1366.61,1204.81 1367.19,1205.97 1367.78,1205.76 1368.37,1206.92 1368.95,1203.6 1369.54,1199.21 1370.13,1201.99 1370.71,1202.21 1371.3,1205.07 1371.88,1203.95 1372.47,1202.54 1373.06,1199.89 1373.64,1201.37 1374.23,1200.24 1374.82,1198.86 1375.4,1196.28 1375.99,1195.17 1376.58,1194.46 1377.16,1197.44 1377.75,1197.81 1378.34,1198.12 1378.92,1199.74 1379.51,1202.32 1380.09,1201.05 1380.68,1202.67 1381.27,1205.73 1381.85,1203.84 1382.44,1203.59 1383.03,1202.07 1383.61,1200.65 1384.2,1200.93 1384.79,1199.8 1385.37,1201.27 1385.96,1200.11 1386.55,1198.93 1387.13,1204.78 1387.72,1203.23 1388.3,1207.06 1388.89,1205.39 1389.48,1205.53 1390.06,1208.3 1390.65,1208 1391.24,1210.4 1391.82,1208.55 1392.41,1209.65 1393,1209.34 1393.58,1210.39 1394.17,1210.01 1394.75,1209.46 1395.34,1207.74 1395.93,1207.45 1396.51,1208.69 1397.1,1209.97 1397.69,1211.02 1398.27,1209.78 1398.86,1210.75 1399.45,1208.89 1400.03,1211.33 1400.62,1210.4 1401.21,1214.2 1401.79,1216.09 1402.38,1211.23 1402.96,1207.97 1403.55,1207.6 1404.14,1206 1404.72,1204.43 1405.31,1205.75 1405.9,1207.01 1406.48,1205.49 1407.07,1203.76 1407.66,1206.33 1408.24,1205.86 1408.83,1207.17 1409.42,1207.05 1410,1203.69 1410.59,1204.83 1411.17,1204.48 1411.76,1201.55 1412.35,1202.68 1412.93,1202.63 1413.52,1201.04 1414.11,1199.76 1414.69,1199.92 1415.28,1201.41 1415.87,1201.67 1416.45,1204.17 1417.04,1201.3 1417.63,1201.23 1418.21,1197.26 1418.8,1198.97 1419.38,1200.46 1419.97,1200.52 1420.56,1200.64 1421.14,1200.78 1421.73,1203.8 1422.32,1200.84 1422.9,1200.72 1423.49,1200.71 1424.08,1197.86 1424.66,1195.01 1425.25,1194.28 1425.83,1194.65 1426.42,1197.75 1427.01,1202.05 1427.59,1201.07 1428.18,1207 1428.77,1208.41 1429.35,1210.9 1429.94,1208.01 1430.53,1207.64 1431.11,1204.76 1431.7,1203.33 1432.29,1201.86 1432.87,1203.37 1433.46,1204.65 1434.04,1204.61 1434.63,1208.75 1435.22,1208.34 1435.8,1206.6 1436.39,1203.59 1436.98,1206.45 1437.56,1204.7 1438.15,1201.83 1438.74,1199.12 1439.32,1199.39 1439.91,1196.3 1440.5,1196.6 1441.08,1201.5 1441.67,1201.56 1442.25,1198.46 1442.84,1200.29 1443.43,1200.48 1444.01,1201.96 1444.6,1200.44 1445.19,1202.13 1445.77,1199.39 1446.36,1198.02 1446.95,1199.76 1447.53,1198.63 1448.12,1200.32 1448.7,1202.1 1449.29,1200.65 1449.88,1199.03 1450.46,1200.92 1451.05,1199.34 1451.64,1199.58 1452.22,1199.52 1452.81,1199.52 1453.4,1201.17 1453.98,1202.67 1454.57,1201.04 1455.16,1202.54 1455.74,1202.69 1456.33,1197.1 1456.91,1196.11 1457.5,1196.61 1458.09,1195.53 1458.67,1198.78 1459.26,1197.72 1459.85,1196.26 1460.43,1197.88 1461.02,1194.91 1461.61,1193.86 1462.19,1191.75 1462.78,1195.14 1463.37,1199.13 1463.95,1198.05 1464.54,1198.34 1465.12,1199.91 1465.71,1198.88 1466.3,1200.55 1466.88,1199.18 1467.47,1200.65 1468.06,1200.92 1468.64,1200.95 1469.23,1198.22 1469.82,1196.97 1470.4,1195.95 1470.99,1193.59 1471.57,1192.87 1472.16,1194.63 1472.75,1197.7 1473.33,1198.11 1473.92,1198.42 1474.51,1197.44 1475.09,1199.16 1475.68,1203.74 1476.27,1202.64 1476.85,1199.86 1477.44,1198.71 1478.03,1200.34 1478.61,1201.67 1479.2,1205.88 1479.78,1206.94 1480.37,1206.71 1480.96,1207.53 1481.54,1207.29 1482.13,1204.27 1482.72,1207.3 1483.3,1203.7 1483.89,1203.54 1484.48,1202.21 1485.06,1203.29 1485.65,1203.36 1486.24,1203.41 1486.82,1206.14 1487.41,1206.15 1487.99,1204.45 1488.58,1207.16 1489.17,1212.35 1489.75,1216.37 1490.34,1211.37 1490.93,1209.66 1491.51,1207.75 1492.1,1204.52 1492.69,1205.87 1493.27,1201.57 1493.86,1201.84 1494.45,1203.19 1495.03,1203.07 1495.62,1203.03 1496.2,1203.1 1496.79,1204.38 1497.38,1205.7 1497.96,1201.14 1498.55,1201.1 1499.14,1199.83 1499.72,1201.27 1500.31,1201.49 1500.9,1201.28 1501.48,1201.02 1502.07,1198.38 1502.65,1195.59 1503.24,1195.73 1503.83,1194.61 1504.41,1194.93 1505,1195.42 1505.59,1195.64 1506.17,1194.46 1506.76,1194.76 1507.35,1190.74 1507.93,1189.68 1508.52,1191.99 1509.11,1196.84 1509.69,1198.67 1510.28,1199.05 1510.86,1196.72 1511.45,1194.62 1512.04,1195.23 1512.62,1197.19 1513.21,1199.16 1513.8,1196.34 1514.38,1197.96 1514.97,1196.99 1515.56,1197.42 1516.14,1197.35 1516.73,1202.97 1517.32,1202.96 1517.9,1200.04 1518.49,1200.48 1519.07,1196.41 1519.66,1198.19 1520.25,1198.49 1520.83,1196.01 1521.42,1196.03 1522.01,1196.32 1522.59,1195.18 1523.18,1195.83 1523.77,1194.64 1524.35,1195.22 1524.94,1195.61 1525.52,1197.36 1526.11,1197.63 1526.7,1196.84 1527.28,1195.47 1527.87,1194.52 1528.46,1194.95 1529.04,1198.08 1529.63,1200.08 1530.22,1201.49 1530.8,1202.97 1531.39,1204.51 1531.98,1201.82 1532.56,1200.58 1533.15,1201.99 1533.73,1202.13 1534.32,1205.06 1534.91,1206.16 1535.49,1205.77 1536.08,1209.83 1536.67,1208.12 1537.25,1209.13 1537.84,1211.57 1538.43,1211.13 1539.01,1212.15 1539.6,1211.42 1540.19,1212.31 1540.77,1213.01 1541.36,1212.27 1541.94,1211.67 1542.53,1209.85 1543.12,1208.11 1543.7,1209.11 1544.29,1206.99 1544.88,1211.52 1545.46,1211.12 1546.05,1210.8 1546.64,1210.04 1547.22,1209.8 1547.81,1210.85 1548.4,1211.65 1548.98,1212.16 1549.57,1212.94 1550.15,1212.17 1550.74,1213.1 1551.33,1209.85 1551.91,1211.91 1552.5,1209.96 1553.09,1212.49 1553.67,1207.98 1554.26,1208.97 1554.85,1212.95 1555.43,1210.98 1556.02,1211.8 1556.6,1212.56 1557.19,1210.36 1557.78,1208.4 1558.36,1206.4 1558.95,1206.21 1559.54,1207.57 1560.12,1207.49 1560.71,1205.62 1561.3,1206.82 1561.88,1202.32 1562.47,1202.11 1563.06,1200.75 1563.64,1203.78 1564.23,1202.41 1564.81,1203.77 1565.4,1203.46 1565.99,1201.89 1566.57,1202.09 1567.16,1202.14 1567.75,1202.17 1568.33,1198.12 1568.92,1198.45 1569.51,1197.15 1570.09,1199.01 1570.68,1197.67 1571.27,1196.2 1571.85,1198.24 1572.44,1195.55 1573.02,1195.68 1573.61,1198.8 1574.2,1197.59 1574.78,1197.52 1575.37,1197.68 1575.96,1200.84 1576.54,1201.29 1577.13,1204.11 1577.72,1203.77 1578.3,1203.88 1578.89,1205.2 1579.47,1204.82 1580.06,1207.55 1580.65,1205.69 1581.23,1208.31 1581.82,1206.2 1582.41,1200.05 1582.99,1198.59 1583.58,1198.86 1584.17,1197.34 1584.75,1198.94 1585.34,1201.72 1585.93,1198.83 1586.51,1198.76 1587.1,1198.76 1587.68,1197.62 1588.27,1197.95 1588.86,1199.75 1589.44,1201.25 1590.03,1201.6 1590.62,1203.05 1591.2,1204.29 1591.79,1205.37 1592.38,1202.2 1592.96,1202.01 1593.55,1203.88 1594.14,1202.72 1594.72,1204.04 1595.31,1202.69 1595.89,1202.58 1596.48,1204.19 1597.07,1203.69 1597.65,1204.9 1598.24,1208.91 1598.83,1209.89 1599.41,1211 1600,1208.01 1600.59,1209.06 1601.17,1210.12 1601.76,1208.19 1602.34,1209.33 1602.93,1209.06 1603.52,1207.04 1604.1,1206.66 1604.69,1202.23 1605.28,1202.06 1605.86,1200.54 1606.45,1199.16 1607.04,1200.54 1607.62,1202.21 1608.21,1202.09 1608.8,1203.36 1609.38,1204.79 1609.97,1204.75 1610.55,1206.29 1611.14,1208.64 1611.73,1209.6 1612.31,1209.19 1612.9,1207.44 1613.49,1204.22 1614.07,1204.04 1614.66,1202.75 1615.25,1198.38 1615.83,1194.28 1616.42,1197.61 1617.01,1196.53 1617.59,1198.16 1618.18,1195.11 1618.76,1196.55 1619.35,1198.19 1619.94,1195.18 1620.52,1193.99 1621.11,1194.37 1621.7,1193.47 1622.28,1190.97 1622.87,1189.99 1623.46,1190.95 1624.04,1190.22 1624.63,1192.51 1625.22,1190.03 1625.8,1190.58 1626.39,1191.08 1626.97,1191.93 1627.56,1191.03 1628.15,1191.71 1628.73,1192.15 1629.32,1193.99 1629.91,1192.76 1630.49,1191.7 1631.08,1192.12 1631.67,1191.34 1632.25,1190.31 1632.84,1189.64 1633.42,1191.75 1634.01,1192.47 1634.6,1194.25 1635.18,1196.33 1635.77,1196.95 1636.36,1199.67 1636.94,1201.4 1637.53,1201.21 1638.12,1201.35 1638.7,1205.71 1639.29,1208.45 1639.88,1208.25 1640.46,1205.06 1641.05,1200.9 1641.63,1199.44 1642.22,1203.68 1642.81,1203.85 1643.39,1200.87 1643.98,1203.72 1644.57,1203.59 1645.15,1203.52 1645.74,1202.13 1646.33,1202.1 1646.91,1200.58 1647.5,1200.9 1648.09,1201.06 1648.67,1201.39 1649.26,1204.14 1649.84,1199.8 1650.43,1199.44 1651.02,1199.69 1651.6,1198.58 1652.19,1198.89 1652.78,1197.77 1653.36,1196.64 1653.95,1195.46 1654.54,1197.49 1655.12,1199.02 1655.71,1200.8 1656.29,1199.66 1656.88,1199.8 1657.47,1197.32 1658.05,1198.95 1658.64,1199.42 1659.23,1200.52 1659.81,1198.94 1660.4,1200.36 1660.99,1197.53 1661.57,1196.18 1662.16,1198.06 1662.75,1199.58 1663.33,1200.01 1663.92,1200.21 1664.5,1197.52 1665.09,1202.1 1665.68,1202.05 1666.26,1204.64 1666.85,1202.99 1667.44,1202.85 1668.02,1202.49 1668.61,1202.38 1669.2,1203.59 1669.78,1200.65 1670.37,1202.29 1670.96,1203.59 1671.54,1207.36 1672.13,1208.34 1672.71,1203.6 1673.3,1203.31 1673.89,1201.2 1674.47,1202.48 1675.06,1203.72 1675.65,1206.45 1676.23,1204.7 1676.82,1204.7 1677.41,1204.9 1677.99,1204.79 1678.58,1204.36 1679.17,1202.99 1679.75,1201.41 1680.34,1200.01 1680.92,1201.49 1681.51,1200.22 1682.1,1200.46 1682.68,1201.82 1683.27,1201.97 1683.86,1201.86 1684.44,1204.71 1685.03,1204.68 1685.62,1204.88 1686.2,1201.83 1686.79,1201.96 1687.37,1201.95 1687.96,1198.85 1688.55,1199.26 1689.13,1202.28 1689.72,1203.85 1690.31,1205.11 1690.89,1205.25 1691.48,1207.97 1692.07,1207.77 1692.65,1205.78 1693.24,1207.11 1693.83,1206.84 1694.41,1206.38 1695,1206.05 1695.58,1204.47 1696.17,1201.72 1696.76,1203.28 1697.34,1199.11 1697.93,1197.76 1698.52,1198.09 1699.1,1194.27 1699.69,1193.61 1700.28,1195.24 1700.86,1195.73 1701.45,1196.17 1702.04,1199.65 1702.62,1198.53 1703.21,1197.12 1703.79,1198.73 1704.38,1200.27 1704.97,1200.17 1705.55,1200.2 1706.14,1205.88 1706.73,1208.1 1707.31,1207.96 1707.9,1207.64 1708.49,1205.89 1709.07,1205.66 1709.66,1201.32 1710.24,1201.21 1710.83,1199.63 1711.42,1199.85 1712,1199.78 1712.59,1201.37 1713.18,1202.69 1713.76,1202.65 1714.35,1202.63 1714.94,1202.6 1715.52,1202.71 1716.11,1204.1 1716.7,1206.54 1717.28,1207.55 1717.87,1205.9 1718.45,1205.53 1719.04,1205.28 1719.63,1203.66 1720.21,1203.62 1720.8,1202.06 1721.39,1206.38 1721.97,1206.11 1722.56,1205.99 1723.15,1205.91 1723.73,1207.08 1724.32,1207.08 1724.91,1204.1 1725.49,1206.67 1726.08,1206.43 1726.66,1210.35 1727.25,1211.75 1727.84,1208.6 1728.42,1206.89 1729.01,1203.98 1729.6,1206.58 1730.18,1205.12 1730.77,1207.7 1731.36,1207.98 1731.94,1207.66 1732.53,1207.51 1733.11,1212.68 1733.7,1213.55 1734.29,1212.98 1734.87,1209.63 1735.46,1208.07 1736.05,1206.05 1736.63,1204.44 1737.22,1204.26 1737.81,1204.04 1738.39,1204.4 1738.98,1204.54 1739.57,1200.34 1740.15,1197.9 1740.74,1199.45 1741.32,1202.27 1741.91,1200.9 1742.5,1197.86 1743.08,1198.09 1743.67,1198.24 1744.26,1198.65 1744.84,1197.69 1745.43,1193.45 1746.02,1192.76 1746.6,1191.57 1747.19,1190.67 1747.78,1192.82 1748.36,1196.51 1748.95,1196.83 1749.53,1198.43 1750.12,1198.73 1750.71,1203.23 1751.29,1203.21 1751.88,1204.82 1752.47,1204.76 1753.05,1206.11 1753.64,1204.61 1754.23,1206.01 1754.81,1205.76 1755.4,1206.87 1755.99,1206.52 1756.57,1206.53 1757.16,1209.2 1757.74,1210.22 1758.33,1209.9 1758.92,1209.48 1759.5,1207.63 1760.09,1207.47 1760.68,1210.19 1761.26,1209.86 1761.85,1212.16 1762.44,1210.05 1763.02,1211.11 1763.61,1209.35 1764.19,1209.35 1764.78,1208.98 1765.37,1211.59 1765.95,1213.8 1766.54,1212.11 1767.13,1211.7 1767.71,1209.58 1768.3,1204.75 1768.89,1206.26 1769.47,1204.57 1770.06,1205.8 1770.65,1205.84 1771.23,1204.14 1771.82,1202.5 1772.4,1202.62 1772.99,1200.92 1773.58,1203.59 1774.16,1199.11 1774.75,1197.95 1775.34,1196.67 1775.92,1196.94 1776.51,1196.01 1777.1,1198.93 1777.68,1197.8 1778.27,1198.14 1778.86,1195.6 1779.44,1194.73 1780.03,1196.48 1780.61,1196.83 1781.2,1194.17 1781.79,1190.45 1782.37,1193.61 1782.96,1195.53 1783.55,1193.32 1784.13,1192.23 1784.72,1194.29 1785.31,1191.87 1785.89,1193.77 1786.48,1195.55 1787.06,1193.12 1787.65,1193.43 1788.24,1193.93 1788.82,1195.81 1789.41,1193.45 1790,1193.65 1790.58,1195.53 1791.17,1196.03 1791.76,1196.38 1792.34,1195.49 1792.93,1196.11 1793.52,1199.11 1794.1,1200.72 1794.69,1200.55 1795.27,1201.79 1795.86,1204.76 1796.45,1204.59 1797.03,1203.31 1797.62,1200.56 1798.21,1200.62 1798.79,1200.96 1799.38,1204.06 1799.97,1203.91 1800.55,1203.69 1801.14,1205.18 1801.73,1205.07 1802.31,1207.82 1802.9,1207.51 1803.48,1205.83 1804.07,1202.86 1804.66,1202.9 1805.24,1202.84 1805.83,1203.01 1806.42,1203.14 1807,1204.6 1807.59,1204.26 1808.18,1203.74 1808.76,1206.67 1809.35,1209.4 1809.94,1210.24 1810.52,1207.29 1811.11,1209.73 1811.69,1210.48 1812.28,1208.4 1812.87,1205.32 1813.45,1205.19 1814.04,1203.63 1814.63,1203.51 1815.21,1203.55 1815.8,1207.57 1816.39,1204.42 1816.97,1204.47 1817.56,1204.27 1818.14,1204.08 1818.73,1203.97 1819.32,1202.56 1819.9,1202.5 1820.49,1202.25 1821.08,1204.67 1821.66,1202.87 1822.25,1205.52 1822.84,1205.39 1823.42,1204.7 1824.01,1204.53 1824.6,1205.9 1825.18,1207.09 1825.77,1206.92 1826.35,1208.02 1826.94,1204.7 1827.53,1204.42 1828.11,1207.12 1828.7,1206.85 1829.29,1203.57 1829.87,1199.61 1830.46,1202.59 1831.05,1203.96 1831.63,1205.25 1832.22,1207.81 1832.81,1207.62 1833.39,1210.17 1833.98,1209.71 1834.56,1207.97 1835.15,1209.02 1835.74,1207.03 1836.32,1201.12 1836.91,1203.64 1837.5,1206.41 1838.08,1209 1838.67,1204.25 1839.26,1206.73 1839.84,1207.91 1840.43,1204.76 1841.01,1203.43 1841.6,1201.87 1842.19,1198.96 1842.77,1199.04 1843.36,1199.1 1843.95,1198.13 1844.53,1195.46 1845.12,1193.92 1845.71,1194.4 1846.29,1193.54 1846.88,1196.97 1847.47,1197.42 1848.05,1197.87 1848.64,1198.02 1849.22,1198.08 1849.81,1199.51 1850.4,1198.16 1850.98,1195.68 1851.57,1193.04 1852.16,1194.54 1852.74,1197.69 1853.33,1200.58 1853.92,1202.08 1854.5,1200.87 1855.09,1199.72 1855.68,1202.69 1856.26,1202.77 1856.85,1198.51 1857.43,1196.06 1858.02,1195.33 1858.61,1195.48 1859.19,1197.49 1859.78,1199.01 1860.37,1197.69 1860.95,1195.13 1861.54,1196.51 1862.13,1193.93 1862.71,1196.98 1863.3,1198.58 1863.88,1198.76 1864.47,1199.02 1865.06,1198.1 1865.64,1202.46 1866.23,1207.03 1866.82,1205.6 1867.4,1205.49 1867.99,1206.77 1868.58,1208.14 1869.16,1206.47 1869.75,1206.47 1870.34,1205.21 1870.92,1205.07 1871.51,1205.12 1872.09,1203.6 1872.68,1202.34 1873.27,1206.37 1873.85,1205.98 1874.44,1204.51 1875.03,1202.82 1875.61,1201.35 1876.2,1201.5 1876.79,1204.34 1877.37,1204.4 1877.96,1204.09 1878.55,1202.63 1879.13,1202.51 1879.72,1202.18 1880.3,1203.57 1880.89,1203.58 1881.48,1203.59 1882.06,1203.54 1882.65,1203.47 1883.24,1203.29 1883.82,1204.58 1884.41,1200.44 1885,1202.11 1885.58,1202 1886.17,1202.17 1886.76,1206.08 1887.34,1202.99 1887.93,1201.9 1888.51,1201.91 1889.1,1198.79 1889.69,1200.53 1890.27,1199.21 1890.86,1199.51 1891.45,1202.16 1892.03,1203.73 1892.62,1202.55 1893.21,1202.56 1893.79,1206.64 1894.38,1206.38 1894.96,1207.63 1895.55,1207.37 1896.14,1205.77 1896.72,1202.77 1897.31,1200.2 1897.9,1200.39 1898.48,1200.56 1899.07,1203.63 1899.66,1206.34 1900.24,1207.37 1900.83,1208.66 1901.42,1209.96 1902,1206.66 1902.59,1206.2 1903.17,1204.46 1903.76,1201.59 1904.35,1201.62 1904.93,1204.52 1905.52,1201.53 1906.11,1201.67 1906.69,1198.8 1907.28,1197.79 1907.87,1198.21 1908.45,1198.78 1909.04,1198.77 1909.63,1197.39 1910.21,1200.55 1910.8,1201.91 1911.38,1201.96 1911.97,1199.13 1912.56,1198.02 1913.14,1198.1 1913.73,1196.84 1914.32,1198.52 1914.9,1200.26 1915.49,1200.36 1916.08,1198.8 1916.66,1196.37 1917.25,1195.41 1917.83,1197.38 1918.42,1196.31 1919.01,1197.99 1919.59,1195.33 1920.18,1195.67 1920.77,1193 1921.35,1194.9 1921.94,1195.43 1922.53,1192.75 1923.11,1196.22 1923.7,1192.23 1924.29,1192.45 1924.87,1196.12 1925.46,1196.49 1926.04,1198.03 1926.63,1195.54 1927.22,1194.44 1927.8,1196.05 1928.39,1196.24 1928.98,1196.76 1929.56,1192.91 1930.15,1194.78 1930.74,1196.66 1931.32,1197.11 1931.91,1200.42 1932.5,1200.23 1933.08,1202.18 1933.67,1206.27 1934.25,1206.05 1934.84,1207.3 1935.43,1208.48 1936.01,1209.38 1936.6,1205.71 1937.19,1205.62 1937.77,1201.09 1938.36,1200.02 1938.95,1201.71 1939.53,1201.75 1940.12,1201.15 1940.71,1199.85 1941.29,1201.54 1941.88,1204.32 1942.46,1202.86 1943.05,1204.02 1943.64,1204.25 1944.22,1206.99 1944.81,1213.94 1945.4,1213.07 1945.98,1211.26 1946.57,1213.34 1947.16,1212.89 1947.74,1210.87 1948.33,1210.56 1948.91,1209.99 1949.5,1209.34 1950.09,1207.73 1950.67,1207.33 1951.26,1207.05 1951.85,1209.47 1952.43,1210.65 1953.02,1208.48 1953.61,1210.95 1954.19,1212.01 1954.78,1211.38 1955.37,1205.39 1955.95,1200.99 1956.54,1198.46 1957.12,1200.03 1957.71,1198.76 1958.3,1200.3 1958.88,1200.39 1959.47,1203.28 1960.06,1204.22 1960.64,1206.69 1961.23,1209.06 1961.82,1211.51 1962.4,1209.89 1962.99,1204.95 1963.58,1205.95 1964.16,1207.32 1964.75,1209.91 1965.33,1208.15 1965.92,1208.07 1966.51,1209.14 1967.09,1207.15 1967.68,1206.68 1968.27,1203.37 1968.85,1204.66 1969.44,1200.08 1970.03,1198.6 1970.61,1200.16 1971.2,1200.12 1971.78,1203.3 1972.37,1203.08 1972.96,1202.86 1973.54,1198.69 1974.13,1198.73 1974.72,1196.23 1975.3,1195.01 1975.89,1193.9 1976.48,1194.09 1977.06,1194.62 1977.65,1194.87 1978.24,1193.95 1978.82,1191.37 1979.41,1194.47 1979.99,1197.78 1980.58,1197.85 1981.17,1193.68 1981.75,1195.41 1982.34,1194.27 1982.93,1194.85 1983.51,1199.61 1984.1,1199.54 1984.69,1200.79 1985.27,1201.22 1985.86,1205.52 1986.45,1211.06 1987.03,1212.88 1987.62,1209.57 1988.2,1209.06 1988.79,1207.41 1989.38,1208.82 1989.96,1207.06 1990.55,1208.48 1991.14,1206.95 1991.72,1204.94 1992.31,1203.53 1992.9,1201.97 1993.48,1201.76 1994.07,1201.77 1994.65,1198.64 1995.24,1194.82 1995.83,1196.46 1996.41,1196.47 1997,1195.31 1997.59,1192.72 1998.17,1191.72 1998.76,1192.31 1999.35,1194.17 1999.93,1193.15 2000.52,1193.87 2001.11,1191.65 2001.69,1192.1 2002.28,1192.53 2002.86,1190.37 2003.45,1192.43 2004.04,1193.03 2004.62,1195.16 2005.21,1195.75 2005.8,1197.4 2006.38,1196.11 2006.97,1200.77 2007.56,1202.26 2008.14,1200.86 2008.73,1202.36 2009.32,1200.82 2009.9,1200.68 2010.49,1200.84 2011.07,1198.15 2011.66,1195.71 2012.25,1195.94 2012.83,1196.08 2013.42,1199.39 2014.01,1202.44 2014.59,1203.91 2015.18,1205.4 2015.77,1205.17 2016.35,1206.57 2016.94,1201.96 2017.53,1203.4 2018.11,1206.32 2018.7,1204.69 2019.28,1206.27 2019.87,1201.75 2020.46,1199.12 2021.04,1199.27 2021.63,1200.69 2022.22,1203.68 2022.8,1202.27 2023.39,1200.87 2023.98,1199.51 2024.56,1199.72 2025.15,1198.76 2025.73,1198.59 2026.32,1199.95 2026.91,1200.17 2027.49,1199.15 2028.08,1201.95 2028.67,1206.22 2029.25,1204.79 2029.84,1203.2 2030.43,1202.89 2031.01,1204.47 2031.6,1206.92 2032.19,1205.32 2032.77,1203.61 2033.36,1202.17 2033.94,1206.38 2034.53,1207.7 2035.12,1206.12 2035.7,1208.8 2036.29,1208.67 2036.88,1209.68 2037.46,1209.32 2038.05,1208.89 2038.64,1208.65 2039.22,1208.28 2039.81,1207.99 2040.4,1205.85 2040.98,1204.19 2041.57,1206.81 2042.15,1207.79 2042.74,1204.72 2043.33,1203.15 2043.91,1201.55 2044.5,1204.34 2045.09,1206.91 2045.67,1205.32 2046.26,1207.83 2046.85,1207.45 2047.43,1208.53 2048.02,1206.84 2048.6,1205.44 2049.19,1205.11 2049.78,1204.95 2050.36,1204.86 2050.95,1204.45 2051.54,1204.38 2052.12,1204.47 2052.71,1205.86 2053.3,1206.89 2053.88,1206.69 2054.47,1204.98 2055.06,1200.44 2055.64,1200.42 2056.23,1199.07 2056.81,1200.63 2057.4,1200.55 2057.99,1202.21 2058.57,1200.64 2059.16,1201.12 2059.75,1200.87 2060.33,1205.23 2060.92,1203.83 2061.51,1202.2 2062.09,1199.56 2062.68,1201 2063.27,1202.39 2063.85,1203.65 2064.44,1203.64 2065.02,1202.06 2065.61,1201.08 2066.2,1203.89 2066.78,1202.33 2067.37,1208.09 2067.96,1207.9 2068.54,1210.56 2069.13,1208.74 2069.72,1205.61 2070.3,1206.69 2070.89,1203.21 2071.48,1202.94 2072.06,1203.04 2072.65,1204.44 2073.23,1204.31 2073.82,1204.13 2074.41,1206.54 2074.99,1204.98 2075.58,1200.36 2076.17,1203.29 2076.75,1201.77 2077.34,1203.1 2077.93,1202.03 2078.51,1205.08 2079.1,1203.27 2079.68,1201.88 2080.27,1200.25 2080.86,1198.68 2081.44,1201.62 2082.03,1201.56 2082.62,1199.96 2083.2,1200.18 2083.79,1198.93 2084.38,1201.92 2084.96,1203.1 2085.55,1201.66 2086.14,1203.03 2086.72,1202.89 2087.31,1202.93 2087.89,1200.18 2088.48,1200.16 2089.07,1198.77 2089.65,1201.49 2090.24,1201.56 2090.83,1202.04 2091.41,1202.12 2092,1200.59 2092.59,1199.13 2093.17,1197.8 2093.76,1197.96 2094.35,1198.39 2094.93,1201.83 2095.52,1203.34 2096.1,1201.63 2096.69,1203.29 2097.28,1200.24 2097.86,1200.27 2098.45,1201.82 2099.04,1204.43 2099.62,1203 2100.21,1204.57 2100.8,1204.49 2101.38,1204.03 2101.97,1202.46 2102.55,1205.07 2103.14,1203.41 2103.73,1204.62 2104.31,1204.74 2104.9,1204.52 2105.49,1204.36 2106.07,1205.45 2106.66,1208.34 2107.25,1209.36 2107.83,1213.38 2108.42,1215.68 2109.01,1216.48 2109.59,1215.72 2110.18,1215.22 2110.76,1217.22 2111.35,1216.24 2111.94,1215.74 2112.52,1214.94 2113.11,1214.05 2113.7,1212.18 2114.28,1214.49 2114.87,1213.67 2115.46,1212.78 2116.04,1213.4 2116.63,1211.18 2117.22,1210.78 2117.8,1206.09 2118.39,1207.4 2118.97,1207.21 2119.56,1206.71 2120.15,1203.6 2120.73,1204.88 2121.32,1206.15 2121.91,1204.64 2122.49,1201.51 2123.08,1207.27 2123.67,1209.91 2124.25,1209.51 2124.84,1210.64 2125.42,1210.42 2126.01,1210.06 2126.6,1212.35 2127.18,1207.57 2127.77,1208.67 2128.36,1211 2128.94,1213.58 2129.53,1215.71 2130.12,1216.44 2130.7,1212.92 2131.29,1208.07 2131.88,1206.29 2132.46,1204.81 2133.05,1204.64 2133.63,1205.54 2134.22,1205.18 2134.81,1204.67 2135.39,1204.11 2135.98,1202.59 2136.57,1201.01 2137.15,1198.38 2137.74,1195.8 2138.33,1194.53 2138.91,1193.51 2139.5,1192.48 2140.09,1193.06 2140.67,1192 2141.26,1192.65 2141.84,1194.47 2142.43,1195.99 2143.02,1196.28 2143.6,1199.23 2144.19,1199.6 2144.78,1198.35 2145.36,1199.86 2145.95,1200.09 2146.54,1199.04 2147.12,1199.32 2147.71,1200.84 2148.3,1202.54 2148.88,1204.17 2149.47,1204.02 2150.05,1203.88 2150.64,1204.15 2151.23,1196.94 2151.81,1191.25 2152.4,1192.24 2152.99,1192.89 2153.57,1193.3 2154.16,1192.16 2154.75,1193.85 2155.33,1195.97 2155.92,1197.64 2156.5,1199.47 2157.09,1201.25 2157.68,1201.49 2158.26,1202.82 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1202.81 L986.612 1202.81 L987.198 1202.81 L987.785 1202.81 L988.371 1202.81 L988.957 1202.81 L989.544 1202.81 L990.13 1202.81 L990.717 1202.81 L991.303 1202.81 L991.889 1202.81 L992.476 1202.81 L993.062 1202.81 L993.649 1202.81 L994.235 1202.81 L994.822 1202.81 L995.408 1202.81 L995.994 1202.81 L996.581 1202.81 L997.167 1202.81 L997.754 1202.81 L998.34 1202.81 L998.926 1202.81 L999.513 1202.81 L1000.1 1202.81 L1000.69 1202.81 L1001.27 1202.81 L1001.86 1202.81 L1002.44 1202.81 L1003.03 1202.81 L1003.62 1202.81 L1004.2 1202.81 L1004.79 1202.81 L1005.38 1202.81 L1005.96 1202.81 L1006.55 1202.81 L1007.14 1202.81 L1007.72 1202.81 L1008.31 1202.81 L1008.9 1202.81 L1009.48 1202.81 L1010.07 1202.81 L1010.65 1202.81 L1011.24 1202.81 L1011.83 1202.81 L1012.41 1202.81 L1013 1202.81 L1013.59 1202.81 L1014.17 1202.81 L1014.76 1202.81 L1015.35 1202.81 L1015.93 1202.81 L1016.52 1202.81 L1017.11 1202.81 L1017.69 1202.81 L1018.28 1202.81 L1018.86 1202.81 L1019.45 1202.81 L1020.04 1202.81 L1020.62 1202.81 L1021.21 1202.81 L1021.8 1202.81 L1022.38 1202.81 L1022.97 1202.81 L1023.56 1202.81 L1024.14 1202.81 L1024.73 1202.81 L1025.32 1202.81 L1025.9 1202.81 L1026.49 1202.81 L1027.07 1202.81 L1027.66 1202.81 L1028.25 1202.81 L1028.83 1202.81 L1029.42 1202.81 L1030.01 1202.81 L1030.59 1202.81 L1031.18 1202.81 L1031.77 1202.81 L1032.35 1202.81 L1032.94 1202.81 L1033.52 1202.81 L1034.11 1202.81 L1034.7 1202.81 L1035.28 1202.81 L1035.87 1202.81 L1036.46 1202.81 L1037.04 1202.81 L1037.63 1202.81 L1038.22 1202.81 L1038.8 1202.81 L1039.39 1202.81 L1039.98 1202.81 L1040.56 1202.81 L1041.15 1202.81 L1041.73 1202.81 L1042.32 1202.81 L1042.91 1202.81 L1043.49 1202.81 L1044.08 1202.81 L1044.67 1202.81 L1045.25 1202.81 L1045.84 1202.81 L1046.43 1202.81 L1047.01 1202.81 L1047.6 1202.81 L1048.19 1202.81 L1048.77 1202.81 L1049.36 1202.81 L1049.94 1202.81 L1050.53 1202.81 L1051.12 1202.81 L1051.7 1202.81 L1052.29 1202.81 L1052.88 1202.81 L1053.46 1202.81 L1054.05 1202.81 L1054.64 1202.81 L1055.22 1202.81 L1055.81 1202.81 L1056.39 1202.81 L1056.98 1202.81 L1057.57 1202.81 L1058.15 1202.81 L1058.74 1202.81 L1059.33 1202.81 L1059.91 1202.81 L1060.5 1202.81 L1061.09 1202.81 L1061.67 1202.81 L1062.26 1202.81 L1062.85 1202.81 L1063.43 1202.81 L1064.02 1202.81 L1064.6 1202.81 L1065.19 1202.81 L1065.78 1202.81 L1066.36 1202.81 L1066.95 1202.81 L1067.54 1202.81 L1068.12 1202.81 L1068.71 1202.81 L1069.3 1202.81 L1069.88 1202.81 L1070.47 1202.81 L1071.06 1202.81 L1071.64 1202.81 L1072.23 1202.81 L1072.81 1202.81 L1073.4 1202.81 L1073.99 1202.81 L1074.57 1202.81 L1075.16 1202.81 L1075.75 1202.81 L1076.33 1202.81 L1076.92 1202.81 L1077.51 1202.81 L1078.09 1202.81 L1078.68 1202.81 L1079.26 1202.81 L1079.85 1202.81 L1080.44 1202.81 L1081.02 1202.81 L1081.61 1202.81 L1082.2 1202.81 L1082.78 1202.81 L1083.37 1202.81 L1083.96 1202.81 L1084.54 1202.81 L1085.13 1202.81 L1085.72 1202.81 L1086.3 1202.81 L1086.89 1202.81 L1087.47 1202.81 L1088.06 1202.81 L1088.65 1202.81 L1089.23 1202.81 L1089.82 1202.81 L1090.41 1202.81 L1090.99 1202.81 L1091.58 1202.81 L1092.17 1202.81 L1092.75 1202.81 L1093.34 1202.81 L1093.93 1202.81 L1094.51 1202.81 L1095.1 1202.81 L1095.68 1202.81 L1096.27 1202.81 L1096.86 1202.81 L1097.44 1202.81 L1098.03 1202.81 L1098.62 1202.81 L1099.2 1202.81 L1099.79 1202.81 L1100.38 1202.81 L1100.96 1202.81 L1101.55 1202.81 L1102.14 1202.81 L1102.72 1202.81 L1103.31 1202.81 L1103.89 1202.81 L1104.48 1202.81 L1105.07 1202.81 L1105.65 1202.81 L1106.24 1202.81 L1106.83 1202.81 L1107.41 1202.81 L1108 1202.81 L1108.59 1202.81 L1109.17 1202.81 L1109.76 1202.81 L1110.34 1202.81 L1110.93 1202.81 L1111.52 1202.81 L1112.1 1202.81 L1112.69 1202.81 L1113.28 1202.81 L1113.86 1202.81 L1114.45 1202.81 L1115.04 1202.81 L1115.62 1202.81 L1116.21 1202.81 L1116.8 1202.81 L1117.38 1202.81 L1117.97 1202.81 L1118.55 1202.81 L1119.14 1202.81 L1119.73 1202.81 L1120.31 1202.81 L1120.9 1202.81 L1121.49 1202.81 L1122.07 1202.81 L1122.66 1202.81 L1123.25 1202.81 L1123.83 1202.81 L1124.42 1202.81 L1125.01 1202.81 L1125.59 1202.81 L1126.18 1202.81 L1126.76 1202.81 L1127.35 1202.81 L1127.94 1202.81 L1128.52 1202.81 L1129.11 1202.81 L1129.7 1202.81 L1130.28 1202.81 L1130.87 1202.81 L1131.46 1202.81 L1132.04 1202.81 L1132.63 1202.81 L1133.21 1202.81 L1133.8 1202.81 L1134.39 1202.81 L1134.97 1202.81 L1135.56 1202.81 L1136.15 1202.81 L1136.73 1202.81 L1137.32 1202.81 L1137.91 1202.81 L1138.49 1202.81 L1139.08 1202.81 L1139.67 1202.81 L1140.25 1202.81 L1140.84 1202.81 L1141.42 1202.81 L1142.01 1202.81 L1142.6 1202.81 L1143.18 1202.81 L1143.77 1202.81 L1144.36 1202.81 L1144.94 1202.81 L1145.53 1202.81 L1146.12 1202.81 L1146.7 1202.81 L1147.29 1202.81 L1147.88 1202.81 L1148.46 1202.81 L1149.05 1202.81 L1149.63 1202.81 L1150.22 1202.81 L1150.81 1202.81 L1151.39 1202.81 L1151.98 1202.81 L1152.57 1202.81 L1153.15 1202.81 L1153.74 1202.81 L1154.33 1202.81 L1154.91 1202.81 L1155.5 1202.81 L1156.09 1202.81 L1156.67 1202.81 L1157.26 1202.81 L1157.84 1202.81 L1158.43 1202.81 L1159.02 1202.81 L1159.6 1202.81 L1160.19 1202.81 L1160.78 1202.81 L1161.36 1202.81 L1161.95 1202.81 L1162.54 1202.81 L1163.12 1202.81 L1163.71 1202.81 L1164.29 1202.81 L1164.88 1202.81 L1165.47 1202.81 L1166.05 1202.81 L1166.64 1202.81 L1167.23 1202.81 L1167.81 1202.81 L1168.4 1202.81 L1168.99 1202.81 L1169.57 1202.81 L1170.16 1202.81 L1170.75 1202.81 L1171.33 1202.81 L1171.92 1202.81 L1172.5 1202.81 L1173.09 1202.81 L1173.68 1202.81 L1174.26 1202.81 L1174.85 1202.81 L1175.44 1202.81 L1176.02 1202.81 L1176.61 1202.81 L1177.2 1202.81 L1177.78 1202.81 L1178.37 1202.81 L1178.96 1202.81 L1179.54 1202.81 L1180.13 1202.81 L1180.71 1202.81 L1181.3 1202.81 L1181.89 1202.81 L1182.47 1202.81 L1183.06 1202.81 L1183.65 1202.81 L1184.23 1202.81 L1184.82 1202.81 L1185.41 1202.81 L1185.99 1202.81 L1186.58 1202.81 L1187.16 1202.81 L1187.75 1202.81 L1188.34 1202.81 L1188.92 1202.81 L1189.51 1202.81 L1190.1 1202.81 L1190.68 1202.81 L1191.27 1202.81 L1191.86 1202.81 L1192.44 1202.81 L1193.03 1202.81 L1193.62 1202.81 L1194.2 1202.81 L1194.79 1202.81 L1195.37 1202.81 L1195.96 1202.81 L1196.55 1202.81 L1197.13 1202.81 L1197.72 1202.81 L1198.31 1202.81 L1198.89 1202.81 L1199.48 1202.81 L1200.07 1202.81 L1200.65 1202.81 L1201.24 1202.81 L1201.83 1202.81 L1202.41 1202.81 L1203 1202.81 L1203.58 1202.81 L1204.17 1202.81 L1204.76 1202.81 L1205.34 1202.81 L1205.93 1202.81 L1206.52 1202.81 L1207.1 1202.81 L1207.69 1202.81 L1208.28 1202.81 L1208.86 1202.81 L1209.45 1202.81 L1210.03 1202.81 L1210.62 1202.81 L1211.21 1202.81 L1211.79 1202.81 L1212.38 1202.81 L1212.97 1202.81 L1213.55 1202.81 L1214.14 1202.81 L1214.73 1202.81 L1215.31 1202.81 L1215.9 1202.81 L1216.49 1202.81 L1217.07 1202.81 L1217.66 1202.81 L1218.24 1202.81 L1218.83 1202.81 L1219.42 1202.81 L1220 1202.81 L1220.59 1202.81 L1221.18 1202.81 L1221.76 1202.81 L1222.35 1202.81 L1222.94 1202.81 L1223.52 1202.81 L1224.11 1202.81 L1224.7 1202.81 L1225.28 1202.81 L1225.87 1202.81 L1226.45 1202.81 L1227.04 1202.81 L1227.63 1202.81 L1228.21 1202.81 L1228.8 1202.81 L1229.39 1202.81 L1229.97 1202.81 L1230.56 1202.81 L1231.15 1202.81 L1231.73 1202.81 L1232.32 1202.81 L1232.91 1202.81 L1233.49 1202.81 L1234.08 1202.81 L1234.66 1202.81 L1235.25 1202.81 L1235.84 1202.81 L1236.42 1202.81 L1237.01 1202.81 L1237.6 1202.81 L1238.18 1202.81 L1238.77 1202.81 L1239.36 1202.81 L1239.94 1202.81 L1240.53 1202.81 L1241.11 1202.81 L1241.7 1202.81 L1242.29 1202.81 L1242.87 1202.81 L1243.46 1202.81 L1244.05 1202.81 L1244.63 1202.81 L1245.22 1202.81 L1245.81 1202.81 L1246.39 1202.81 L1246.98 1202.81 L1247.57 1202.81 L1248.15 1202.81 L1248.74 1202.81 L1249.32 1202.81 L1249.91 1202.81 L1250.5 1202.81 L1251.08 1202.81 L1251.67 1202.81 L1252.26 1202.81 L1252.84 1202.81 L1253.43 1202.81 L1254.02 1202.81 L1254.6 1202.81 L1255.19 1202.81 L1255.78 1202.81 L1256.36 1202.81 L1256.95 1202.81 L1257.53 1202.81 L1258.12 1202.81 L1258.71 1202.81 L1259.29 1202.81 L1259.88 1202.81 L1260.47 1202.81 L1261.05 1202.81 L1261.64 1202.81 L1262.23 1202.81 L1262.81 1202.81 L1263.4 1202.81 L1263.98 1202.81 L1264.57 1202.81 L1265.16 1202.81 L1265.74 1202.81 L1266.33 1202.81 L1266.92 1202.81 L1267.5 1202.81 L1268.09 1202.81 L1268.68 1202.81 L1269.26 1202.81 L1269.85 1202.81 L1270.44 1202.81 L1271.02 1202.81 L1271.61 1202.81 L1272.19 1202.81 L1272.78 1202.81 L1273.37 1202.81 L1273.95 1202.81 L1274.54 1202.81 L1275.13 1202.81 L1275.71 1202.81 L1276.3 1202.81 L1276.89 1202.81 L1277.47 1202.81 L1278.06 1202.81 L1278.65 1202.81 L1279.23 1202.81 L1279.82 1202.81 L1280.4 1202.81 L1280.99 1202.81 L1281.58 1202.81 L1282.16 1202.81 L1282.75 1202.81 L1283.34 1202.81 L1283.92 1202.81 L1284.51 1202.81 L1285.1 1202.81 L1285.68 1202.81 L1286.27 1202.81 L1286.86 1202.81 L1287.44 1202.81 L1288.03 1202.81 L1288.61 1202.81 L1289.2 1202.81 L1289.79 1202.81 L1290.37 1202.81 L1290.96 1202.81 L1291.55 1202.81 L1292.13 1202.81 L1292.72 1202.81 L1293.31 1202.81 L1293.89 1202.81 L1294.48 1202.81 L1295.06 1202.81 L1295.65 1202.81 L1296.24 1202.81 L1296.82 1202.81 L1297.41 1202.81 L1298 1202.81 L1298.58 1202.81 L1299.17 1202.81 L1299.76 1202.81 L1300.34 1202.81 L1300.93 1202.81 L1301.52 1202.81 L1302.1 1202.81 L1302.69 1202.81 L1303.27 1202.81 L1303.86 1202.81 L1304.45 1202.81 L1305.03 1202.81 L1305.62 1202.81 L1306.21 1202.81 L1306.79 1202.81 L1307.38 1202.81 L1307.97 1202.81 L1308.55 1202.81 L1309.14 1202.81 L1309.73 1202.81 L1310.31 1202.81 L1310.9 1202.81 L1311.48 1202.81 L1312.07 1202.81 L1312.66 1202.81 L1313.24 1202.81 L1313.83 1202.81 L1314.42 1202.81 L1315 1202.81 L1315.59 1202.81 L1316.18 1202.81 L1316.76 1202.81 L1317.35 1202.81 L1317.93 1202.81 L1318.52 1202.81 L1319.11 1202.81 L1319.69 1202.81 L1320.28 1202.81 L1320.87 1202.81 L1321.45 1202.81 L1322.04 1202.81 L1322.63 1202.81 L1323.21 1202.81 L1323.8 1202.81 L1324.39 1202.81 L1324.97 1202.81 L1325.56 1202.81 L1326.14 1202.81 L1326.73 1202.81 L1327.32 1202.81 L1327.9 1202.81 L1328.49 1202.81 L1329.08 1202.81 L1329.66 1202.81 L1330.25 1202.81 L1330.84 1202.81 L1331.42 1202.81 L1332.01 1202.81 L1332.6 1202.81 L1333.18 1202.81 L1333.77 1202.81 L1334.35 1202.81 L1334.94 1202.81 L1335.53 1202.81 L1336.11 1202.81 L1336.7 1202.81 L1337.29 1202.81 L1337.87 1202.81 L1338.46 1202.81 L1339.05 1202.81 L1339.63 1202.81 L1340.22 1202.81 L1340.8 1202.81 L1341.39 1202.81 L1341.98 1202.81 L1342.56 1202.81 L1343.15 1202.81 L1343.74 1202.81 L1344.32 1202.81 L1344.91 1202.81 L1345.5 1202.81 L1346.08 1202.81 L1346.67 1202.81 L1347.26 1202.81 L1347.84 1202.81 L1348.43 1202.81 L1349.01 1202.81 L1349.6 1202.81 L1350.19 1202.81 L1350.77 1202.81 L1351.36 1202.81 L1351.95 1202.81 L1352.53 1202.81 L1353.12 1202.81 L1353.71 1202.81 L1354.29 1202.81 L1354.88 1202.81 L1355.47 1202.81 L1356.05 1202.81 L1356.64 1202.81 L1357.22 1202.81 L1357.81 1202.81 L1358.4 1202.81 L1358.98 1202.81 L1359.57 1202.81 L1360.16 1202.81 L1360.74 1202.81 L1361.33 1202.81 L1361.92 1202.81 L1362.5 1202.81 L1363.09 1202.81 L1363.68 1202.81 L1364.26 1202.81 L1364.85 1202.81 L1365.43 1202.81 L1366.02 1202.81 L1366.61 1202.81 L1367.19 1202.81 L1367.78 1202.81 L1368.37 1202.81 L1368.95 1202.81 L1369.54 1202.81 L1370.13 1202.81 L1370.71 1202.81 L1371.3 1202.81 L1371.88 1202.81 L1372.47 1202.81 L1373.06 1202.81 L1373.64 1202.81 L1374.23 1202.81 L1374.82 1202.81 L1375.4 1202.81 L1375.99 1202.81 L1376.58 1202.81 L1377.16 1202.81 L1377.75 1202.81 L1378.34 1202.81 L1378.92 1202.81 L1379.51 1202.81 L1380.09 1202.81 L1380.68 1202.81 L1381.27 1202.81 L1381.85 1202.81 L1382.44 1202.81 L1383.03 1202.81 L1383.61 1202.81 L1384.2 1202.81 L1384.79 1202.81 L1385.37 1202.81 L1385.96 1202.81 L1386.55 1202.81 L1387.13 1202.81 L1387.72 1202.81 L1388.3 1202.81 L1388.89 1202.81 L1389.48 1202.81 L1390.06 1202.81 L1390.65 1202.81 L1391.24 1202.81 L1391.82 1202.81 L1392.41 1202.81 L1393 1202.81 L1393.58 1202.81 L1394.17 1202.81 L1394.75 1202.81 L1395.34 1202.81 L1395.93 1202.81 L1396.51 1202.81 L1397.1 1202.81 L1397.69 1202.81 L1398.27 1202.81 L1398.86 1202.81 L1399.45 1202.81 L1400.03 1202.81 L1400.62 1202.81 L1401.21 1202.81 L1401.79 1202.81 L1402.38 1202.81 L1402.96 1202.81 L1403.55 1202.81 L1404.14 1202.81 L1404.72 1202.81 L1405.31 1202.81 L1405.9 1202.81 L1406.48 1202.81 L1407.07 1202.81 L1407.66 1202.81 L1408.24 1202.81 L1408.83 1202.81 L1409.42 1202.81 L1410 1202.81 L1410.59 1202.81 L1411.17 1202.81 L1411.76 1202.81 L1412.35 1202.81 L1412.93 1202.81 L1413.52 1202.81 L1414.11 1202.81 L1414.69 1202.81 L1415.28 1202.81 L1415.87 1202.81 L1416.45 1202.81 L1417.04 1202.81 L1417.63 1202.81 L1418.21 1202.81 L1418.8 1202.81 L1419.38 1202.81 L1419.97 1202.81 L1420.56 1202.81 L1421.14 1202.81 L1421.73 1202.81 L1422.32 1202.81 L1422.9 1202.81 L1423.49 1202.81 L1424.08 1202.81 L1424.66 1202.81 L1425.25 1202.81 L1425.83 1202.81 L1426.42 1202.81 L1427.01 1202.81 L1427.59 1202.81 L1428.18 1202.81 L1428.77 1202.81 L1429.35 1202.81 L1429.94 1202.81 L1430.53 1202.81 L1431.11 1202.81 L1431.7 1202.81 L1432.29 1202.81 L1432.87 1202.81 L1433.46 1202.81 L1434.04 1202.81 L1434.63 1202.81 L1435.22 1202.81 L1435.8 1202.81 L1436.39 1202.81 L1436.98 1202.81 L1437.56 1202.81 L1438.15 1202.81 L1438.74 1202.81 L1439.32 1202.81 L1439.91 1202.81 L1440.5 1202.81 L1441.08 1202.81 L1441.67 1202.81 L1442.25 1202.81 L1442.84 1202.81 L1443.43 1202.81 L1444.01 1202.81 L1444.6 1202.81 L1445.19 1202.81 L1445.77 1202.81 L1446.36 1202.81 L1446.95 1202.81 L1447.53 1202.81 L1448.12 1202.81 L1448.7 1202.81 L1449.29 1202.81 L1449.88 1202.81 L1450.46 1202.81 L1451.05 1202.81 L1451.64 1202.81 L1452.22 1202.81 L1452.81 1202.81 L1453.4 1202.81 L1453.98 1202.81 L1454.57 1202.81 L1455.16 1202.81 L1455.74 1202.81 L1456.33 1202.81 L1456.91 1202.81 L1457.5 1202.81 L1458.09 1202.81 L1458.67 1202.81 L1459.26 1202.81 L1459.85 1202.81 L1460.43 1202.81 L1461.02 1202.81 L1461.61 1202.81 L1462.19 1202.81 L1462.78 1202.81 L1463.37 1202.81 L1463.95 1202.81 L1464.54 1202.81 L1465.12 1202.81 L1465.71 1202.81 L1466.3 1202.81 L1466.88 1202.81 L1467.47 1202.81 L1468.06 1202.81 L1468.64 1202.81 L1469.23 1202.81 L1469.82 1202.81 L1470.4 1202.81 L1470.99 1202.81 L1471.57 1202.81 L1472.16 1202.81 L1472.75 1202.81 L1473.33 1202.81 L1473.92 1202.81 L1474.51 1202.81 L1475.09 1202.81 L1475.68 1202.81 L1476.27 1202.81 L1476.85 1202.81 L1477.44 1202.81 L1478.03 1202.81 L1478.61 1202.81 L1479.2 1202.81 L1479.78 1202.81 L1480.37 1202.81 L1480.96 1202.81 L1481.54 1202.81 L1482.13 1202.81 L1482.72 1202.81 L1483.3 1202.81 L1483.89 1202.81 L1484.48 1202.81 L1485.06 1202.81 L1485.65 1202.81 L1486.24 1202.81 L1486.82 1202.81 L1487.41 1202.81 L1487.99 1202.81 L1488.58 1202.81 L1489.17 1202.81 L1489.75 1202.81 L1490.34 1202.81 L1490.93 1202.81 L1491.51 1202.81 L1492.1 1202.81 L1492.69 1202.81 L1493.27 1202.81 L1493.86 1202.81 L1494.45 1202.81 L1495.03 1202.81 L1495.62 1202.81 L1496.2 1202.81 L1496.79 1202.81 L1497.38 1202.81 L1497.96 1202.81 L1498.55 1202.81 L1499.14 1202.81 L1499.72 1202.81 L1500.31 1202.81 L1500.9 1202.81 L1501.48 1202.81 L1502.07 1202.81 L1502.65 1202.81 L1503.24 1202.81 L1503.83 1202.81 L1504.41 1202.81 L1505 1202.81 L1505.59 1202.81 L1506.17 1202.81 L1506.76 1202.81 L1507.35 1202.81 L1507.93 1202.81 L1508.52 1202.81 L1509.11 1202.81 L1509.69 1202.81 L1510.28 1202.81 L1510.86 1202.81 L1511.45 1202.81 L1512.04 1202.81 L1512.62 1202.81 L1513.21 1202.81 L1513.8 1202.81 L1514.38 1202.81 L1514.97 1202.81 L1515.56 1202.81 L1516.14 1202.81 L1516.73 1202.81 L1517.32 1202.81 L1517.9 1202.81 L1518.49 1202.81 L1519.07 1202.81 L1519.66 1202.81 L1520.25 1202.81 L1520.83 1202.81 L1521.42 1202.81 L1522.01 1202.81 L1522.59 1202.81 L1523.18 1202.81 L1523.77 1202.81 L1524.35 1202.81 L1524.94 1202.81 L1525.52 1202.81 L1526.11 1202.81 L1526.7 1202.81 L1527.28 1202.81 L1527.87 1202.81 L1528.46 1202.81 L1529.04 1202.81 L1529.63 1202.81 L1530.22 1202.81 L1530.8 1202.81 L1531.39 1202.81 L1531.98 1202.81 L1532.56 1202.81 L1533.15 1202.81 L1533.73 1202.81 L1534.32 1202.81 L1534.91 1202.81 L1535.49 1202.81 L1536.08 1202.81 L1536.67 1202.81 L1537.25 1202.81 L1537.84 1202.81 L1538.43 1202.81 L1539.01 1202.81 L1539.6 1202.81 L1540.19 1202.81 L1540.77 1202.81 L1541.36 1202.81 L1541.94 1202.81 L1542.53 1202.81 L1543.12 1202.81 L1543.7 1202.81 L1544.29 1202.81 L1544.88 1202.81 L1545.46 1202.81 L1546.05 1202.81 L1546.64 1202.81 L1547.22 1202.81 L1547.81 1202.81 L1548.4 1202.81 L1548.98 1202.81 L1549.57 1202.81 L1550.15 1202.81 L1550.74 1202.81 L1551.33 1202.81 L1551.91 1202.81 L1552.5 1202.81 L1553.09 1202.81 L1553.67 1202.81 L1554.26 1202.81 L1554.85 1202.81 L1555.43 1202.81 L1556.02 1202.81 L1556.6 1202.81 L1557.19 1202.81 L1557.78 1202.81 L1558.36 1202.81 L1558.95 1202.81 L1559.54 1202.81 L1560.12 1202.81 L1560.71 1202.81 L1561.3 1202.81 L1561.88 1202.81 L1562.47 1202.81 L1563.06 1202.81 L1563.64 1202.81 L1564.23 1202.81 L1564.81 1202.81 L1565.4 1202.81 L1565.99 1202.81 L1566.57 1202.81 L1567.16 1202.81 L1567.75 1202.81 L1568.33 1202.81 L1568.92 1202.81 L1569.51 1202.81 L1570.09 1202.81 L1570.68 1202.81 L1571.27 1202.81 L1571.85 1202.81 L1572.44 1202.81 L1573.02 1202.81 L1573.61 1202.81 L1574.2 1202.81 L1574.78 1202.81 L1575.37 1202.81 L1575.96 1202.81 L1576.54 1202.81 L1577.13 1202.81 L1577.72 1202.81 L1578.3 1202.81 L1578.89 1202.81 L1579.47 1202.81 L1580.06 1202.81 L1580.65 1202.81 L1581.23 1202.81 L1581.82 1202.81 L1582.41 1202.81 L1582.99 1202.81 L1583.58 1202.81 L1584.17 1202.81 L1584.75 1202.81 L1585.34 1202.81 L1585.93 1202.81 L1586.51 1202.81 L1587.1 1202.81 L1587.68 1202.81 L1588.27 1202.81 L1588.86 1202.81 L1589.44 1202.81 L1590.03 1202.81 L1590.62 1202.81 L1591.2 1202.81 L1591.79 1202.81 L1592.38 1202.81 L1592.96 1202.81 L1593.55 1202.81 L1594.14 1202.81 L1594.72 1202.81 L1595.31 1202.81 L1595.89 1202.81 L1596.48 1202.81 L1597.07 1202.81 L1597.65 1202.81 L1598.24 1202.81 L1598.83 1202.81 L1599.41 1202.81 L1600 1202.81 L1600.59 1202.81 L1601.17 1202.81 L1601.76 1202.81 L1602.34 1202.81 L1602.93 1202.81 L1603.52 1202.81 L1604.1 1202.81 L1604.69 1202.81 L1605.28 1202.81 L1605.86 1202.81 L1606.45 1202.81 L1607.04 1202.81 L1607.62 1202.81 L1608.21 1202.81 L1608.8 1202.81 L1609.38 1202.81 L1609.97 1202.81 L1610.55 1202.81 L1611.14 1202.81 L1611.73 1202.81 L1612.31 1202.81 L1612.9 1202.81 L1613.49 1202.81 L1614.07 1202.81 L1614.66 1202.81 L1615.25 1202.81 L1615.83 1202.81 L1616.42 1202.81 L1617.01 1202.81 L1617.59 1202.81 L1618.18 1202.81 L1618.76 1202.81 L1619.35 1202.81 L1619.94 1202.81 L1620.52 1202.81 L1621.11 1202.81 L1621.7 1202.81 L1622.28 1202.81 L1622.87 1202.81 L1623.46 1202.81 L1624.04 1202.81 L1624.63 1202.81 L1625.22 1202.81 L1625.8 1202.81 L1626.39 1202.81 L1626.97 1202.81 L1627.56 1202.81 L1628.15 1202.81 L1628.73 1202.81 L1629.32 1202.81 L1629.91 1202.81 L1630.49 1202.81 L1631.08 1202.81 L1631.67 1202.81 L1632.25 1202.81 L1632.84 1202.81 L1633.42 1202.81 L1634.01 1202.81 L1634.6 1202.81 L1635.18 1202.81 L1635.77 1202.81 L1636.36 1202.81 L1636.94 1202.81 L1637.53 1202.81 L1638.12 1202.81 L1638.7 1202.81 L1639.29 1202.81 L1639.88 1202.81 L1640.46 1202.81 L1641.05 1202.81 L1641.63 1202.81 L1642.22 1202.81 L1642.81 1202.81 L1643.39 1202.81 L1643.98 1202.81 L1644.57 1202.81 L1645.15 1202.81 L1645.74 1202.81 L1646.33 1202.81 L1646.91 1202.81 L1647.5 1202.81 L1648.09 1202.81 L1648.67 1202.81 L1649.26 1202.81 L1649.84 1202.81 L1650.43 1202.81 L1651.02 1202.81 L1651.6 1202.81 L1652.19 1202.81 L1652.78 1202.81 L1653.36 1202.81 L1653.95 1202.81 L1654.54 1202.81 L1655.12 1202.81 L1655.71 1202.81 L1656.29 1202.81 L1656.88 1202.81 L1657.47 1202.81 L1658.05 1202.81 L1658.64 1202.81 L1659.23 1202.81 L1659.81 1202.81 L1660.4 1202.81 L1660.99 1202.81 L1661.57 1202.81 L1662.16 1202.81 L1662.75 1202.81 L1663.33 1202.81 L1663.92 1202.81 L1664.5 1202.81 L1665.09 1202.81 L1665.68 1202.81 L1666.26 1202.81 L1666.85 1202.81 L1667.44 1202.81 L1668.02 1202.81 L1668.61 1202.81 L1669.2 1202.81 L1669.78 1202.81 L1670.37 1202.81 L1670.96 1202.81 L1671.54 1202.81 L1672.13 1202.81 L1672.71 1202.81 L1673.3 1202.81 L1673.89 1202.81 L1674.47 1202.81 L1675.06 1202.81 L1675.65 1202.81 L1676.23 1202.81 L1676.82 1202.81 L1677.41 1202.81 L1677.99 1202.81 L1678.58 1202.81 L1679.17 1202.81 L1679.75 1202.81 L1680.34 1202.81 L1680.92 1202.81 L1681.51 1202.81 L1682.1 1202.81 L1682.68 1202.81 L1683.27 1202.81 L1683.86 1202.81 L1684.44 1202.81 L1685.03 1202.81 L1685.62 1202.81 L1686.2 1202.81 L1686.79 1202.81 L1687.37 1202.81 L1687.96 1202.81 L1688.55 1202.81 L1689.13 1202.81 L1689.72 1202.81 L1690.31 1202.81 L1690.89 1202.81 L1691.48 1202.81 L1692.07 1202.81 L1692.65 1202.81 L1693.24 1202.81 L1693.83 1202.81 L1694.41 1202.81 L1695 1202.81 L1695.58 1202.81 L1696.17 1202.81 L1696.76 1202.81 L1697.34 1202.81 L1697.93 1202.81 L1698.52 1202.81 L1699.1 1202.81 L1699.69 1202.81 L1700.28 1202.81 L1700.86 1202.81 L1701.45 1202.81 L1702.04 1202.81 L1702.62 1202.81 L1703.21 1202.81 L1703.79 1202.81 L1704.38 1202.81 L1704.97 1202.81 L1705.55 1202.81 L1706.14 1202.81 L1706.73 1202.81 L1707.31 1202.81 L1707.9 1202.81 L1708.49 1202.81 L1709.07 1202.81 L1709.66 1202.81 L1710.24 1202.81 L1710.83 1202.81 L1711.42 1202.81 L1712 1202.81 L1712.59 1202.81 L1713.18 1202.81 L1713.76 1202.81 L1714.35 1202.81 L1714.94 1202.81 L1715.52 1202.81 L1716.11 1202.81 L1716.7 1202.81 L1717.28 1202.81 L1717.87 1202.81 L1718.45 1202.81 L1719.04 1202.81 L1719.63 1202.81 L1720.21 1202.81 L1720.8 1202.81 L1721.39 1202.81 L1721.97 1202.81 L1722.56 1202.81 L1723.15 1202.81 L1723.73 1202.81 L1724.32 1202.81 L1724.91 1202.81 L1725.49 1202.81 L1726.08 1202.81 L1726.66 1202.81 L1727.25 1202.81 L1727.84 1202.81 L1728.42 1202.81 L1729.01 1202.81 L1729.6 1202.81 L1730.18 1202.81 L1730.77 1202.81 L1731.36 1202.81 L1731.94 1202.81 L1732.53 1202.81 L1733.11 1202.81 L1733.7 1202.81 L1734.29 1202.81 L1734.87 1202.81 L1735.46 1202.81 L1736.05 1202.81 L1736.63 1202.81 L1737.22 1202.81 L1737.81 1202.81 L1738.39 1202.81 L1738.98 1202.81 L1739.57 1202.81 L1740.15 1202.81 L1740.74 1202.81 L1741.32 1202.81 L1741.91 1202.81 L1742.5 1202.81 L1743.08 1202.81 L1743.67 1202.81 L1744.26 1202.81 L1744.84 1202.81 L1745.43 1202.81 L1746.02 1202.81 L1746.6 1202.81 L1747.19 1202.81 L1747.78 1202.81 L1748.36 1202.81 L1748.95 1202.81 L1749.53 1202.81 L1750.12 1202.81 L1750.71 1202.81 L1751.29 1202.81 L1751.88 1202.81 L1752.47 1202.81 L1753.05 1202.81 L1753.64 1202.81 L1754.23 1202.81 L1754.81 1202.81 L1755.4 1202.81 L1755.99 1202.81 L1756.57 1202.81 L1757.16 1202.81 L1757.74 1202.81 L1758.33 1202.81 L1758.92 1202.81 L1759.5 1202.81 L1760.09 1202.81 L1760.68 1202.81 L1761.26 1202.81 L1761.85 1202.81 L1762.44 1202.81 L1763.02 1202.81 L1763.61 1202.81 L1764.19 1202.81 L1764.78 1202.81 L1765.37 1202.81 L1765.95 1202.81 L1766.54 1202.81 L1767.13 1202.81 L1767.71 1202.81 L1768.3 1202.81 L1768.89 1202.81 L1769.47 1202.81 L1770.06 1202.81 L1770.65 1202.81 L1771.23 1202.81 L1771.82 1202.81 L1772.4 1202.81 L1772.99 1202.81 L1773.58 1202.81 L1774.16 1202.81 L1774.75 1202.81 L1775.34 1202.81 L1775.92 1202.81 L1776.51 1202.81 L1777.1 1202.81 L1777.68 1202.81 L1778.27 1202.81 L1778.86 1202.81 L1779.44 1202.81 L1780.03 1202.81 L1780.61 1202.81 L1781.2 1202.81 L1781.79 1202.81 L1782.37 1202.81 L1782.96 1202.81 L1783.55 1202.81 L1784.13 1202.81 L1784.72 1202.81 L1785.31 1202.81 L1785.89 1202.81 L1786.48 1202.81 L1787.06 1202.81 L1787.65 1202.81 L1788.24 1202.81 L1788.82 1202.81 L1789.41 1202.81 L1790 1202.81 L1790.58 1202.81 L1791.17 1202.81 L1791.76 1202.81 L1792.34 1202.81 L1792.93 1202.81 L1793.52 1202.81 L1794.1 1202.81 L1794.69 1202.81 L1795.27 1202.81 L1795.86 1202.81 L1796.45 1202.81 L1797.03 1202.81 L1797.62 1202.81 L1798.21 1202.81 L1798.79 1202.81 L1799.38 1202.81 L1799.97 1202.81 L1800.55 1202.81 L1801.14 1202.81 L1801.73 1202.81 L1802.31 1202.81 L1802.9 1202.81 L1803.48 1202.81 L1804.07 1202.81 L1804.66 1202.81 L1805.24 1202.81 L1805.83 1202.81 L1806.42 1202.81 L1807 1202.81 L1807.59 1202.81 L1808.18 1202.81 L1808.76 1202.81 L1809.35 1202.81 L1809.94 1202.81 L1810.52 1202.81 L1811.11 1202.81 L1811.69 1202.81 L1812.28 1202.81 L1812.87 1202.81 L1813.45 1202.81 L1814.04 1202.81 L1814.63 1202.81 L1815.21 1202.81 L1815.8 1202.81 L1816.39 1202.81 L1816.97 1202.81 L1817.56 1202.81 L1818.14 1202.81 L1818.73 1202.81 L1819.32 1202.81 L1819.9 1202.81 L1820.49 1202.81 L1821.08 1202.81 L1821.66 1202.81 L1822.25 1202.81 L1822.84 1202.81 L1823.42 1202.81 L1824.01 1202.81 L1824.6 1202.81 L1825.18 1202.81 L1825.77 1202.81 L1826.35 1202.81 L1826.94 1202.81 L1827.53 1202.81 L1828.11 1202.81 L1828.7 1202.81 L1829.29 1202.81 L1829.87 1202.81 L1830.46 1202.81 L1831.05 1202.81 L1831.63 1202.81 L1832.22 1202.81 L1832.81 1202.81 L1833.39 1202.81 L1833.98 1202.81 L1834.56 1202.81 L1835.15 1202.81 L1835.74 1202.81 L1836.32 1202.81 L1836.91 1202.81 L1837.5 1202.81 L1838.08 1202.81 L1838.67 1202.81 L1839.26 1202.81 L1839.84 1202.81 L1840.43 1202.81 L1841.01 1202.81 L1841.6 1202.81 L1842.19 1202.81 L1842.77 1202.81 L1843.36 1202.81 L1843.95 1202.81 L1844.53 1202.81 L1845.12 1202.81 L1845.71 1202.81 L1846.29 1202.81 L1846.88 1202.81 L1847.47 1202.81 L1848.05 1202.81 L1848.64 1202.81 L1849.22 1202.81 L1849.81 1202.81 L1850.4 1202.81 L1850.98 1202.81 L1851.57 1202.81 L1852.16 1202.81 L1852.74 1202.81 L1853.33 1202.81 L1853.92 1202.81 L1854.5 1202.81 L1855.09 1202.81 L1855.68 1202.81 L1856.26 1202.81 L1856.85 1202.81 L1857.43 1202.81 L1858.02 1202.81 L1858.61 1202.81 L1859.19 1202.81 L1859.78 1202.81 L1860.37 1202.81 L1860.95 1202.81 L1861.54 1202.81 L1862.13 1202.81 L1862.71 1202.81 L1863.3 1202.81 L1863.88 1202.81 L1864.47 1202.81 L1865.06 1202.81 L1865.64 1202.81 L1866.23 1202.81 L1866.82 1202.81 L1867.4 1202.81 L1867.99 1202.81 L1868.58 1202.81 L1869.16 1202.81 L1869.75 1202.81 L1870.34 1202.81 L1870.92 1202.81 L1871.51 1202.81 L1872.09 1202.81 L1872.68 1202.81 L1873.27 1202.81 L1873.85 1202.81 L1874.44 1202.81 L1875.03 1202.81 L1875.61 1202.81 L1876.2 1202.81 L1876.79 1202.81 L1877.37 1202.81 L1877.96 1202.81 L1878.55 1202.81 L1879.13 1202.81 L1879.72 1202.81 L1880.3 1202.81 L1880.89 1202.81 L1881.48 1202.81 L1882.06 1202.81 L1882.65 1202.81 L1883.24 1202.81 L1883.82 1202.81 L1884.41 1202.81 L1885 1202.81 L1885.58 1202.81 L1886.17 1202.81 L1886.76 1202.81 L1887.34 1202.81 L1887.93 1202.81 L1888.51 1202.81 L1889.1 1202.81 L1889.69 1202.81 L1890.27 1202.81 L1890.86 1202.81 L1891.45 1202.81 L1892.03 1202.81 L1892.62 1202.81 L1893.21 1202.81 L1893.79 1202.81 L1894.38 1202.81 L1894.96 1202.81 L1895.55 1202.81 L1896.14 1202.81 L1896.72 1202.81 L1897.31 1202.81 L1897.9 1202.81 L1898.48 1202.81 L1899.07 1202.81 L1899.66 1202.81 L1900.24 1202.81 L1900.83 1202.81 L1901.42 1202.81 L1902 1202.81 L1902.59 1202.81 L1903.17 1202.81 L1903.76 1202.81 L1904.35 1202.81 L1904.93 1202.81 L1905.52 1202.81 L1906.11 1202.81 L1906.69 1202.81 L1907.28 1202.81 L1907.87 1202.81 L1908.45 1202.81 L1909.04 1202.81 L1909.63 1202.81 L1910.21 1202.81 L1910.8 1202.81 L1911.38 1202.81 L1911.97 1202.81 L1912.56 1202.81 L1913.14 1202.81 L1913.73 1202.81 L1914.32 1202.81 L1914.9 1202.81 L1915.49 1202.81 L1916.08 1202.81 L1916.66 1202.81 L1917.25 1202.81 L1917.83 1202.81 L1918.42 1202.81 L1919.01 1202.81 L1919.59 1202.81 L1920.18 1202.81 L1920.77 1202.81 L1921.35 1202.81 L1921.94 1202.81 L1922.53 1202.81 L1923.11 1202.81 L1923.7 1202.81 L1924.29 1202.81 L1924.87 1202.81 L1925.46 1202.81 L1926.04 1202.81 L1926.63 1202.81 L1927.22 1202.81 L1927.8 1202.81 L1928.39 1202.81 L1928.98 1202.81 L1929.56 1202.81 L1930.15 1202.81 L1930.74 1202.81 L1931.32 1202.81 L1931.91 1202.81 L1932.5 1202.81 L1933.08 1202.81 L1933.67 1202.81 L1934.25 1202.81 L1934.84 1202.81 L1935.43 1202.81 L1936.01 1202.81 L1936.6 1202.81 L1937.19 1202.81 L1937.77 1202.81 L1938.36 1202.81 L1938.95 1202.81 L1939.53 1202.81 L1940.12 1202.81 L1940.71 1202.81 L1941.29 1202.81 L1941.88 1202.81 L1942.46 1202.81 L1943.05 1202.81 L1943.64 1202.81 L1944.22 1202.81 L1944.81 1202.81 L1945.4 1202.81 L1945.98 1202.81 L1946.57 1202.81 L1947.16 1202.81 L1947.74 1202.81 L1948.33 1202.81 L1948.91 1202.81 L1949.5 1202.81 L1950.09 1202.81 L1950.67 1202.81 L1951.26 1202.81 L1951.85 1202.81 L1952.43 1202.81 L1953.02 1202.81 L1953.61 1202.81 L1954.19 1202.81 L1954.78 1202.81 L1955.37 1202.81 L1955.95 1202.81 L1956.54 1202.81 L1957.12 1202.81 L1957.71 1202.81 L1958.3 1202.81 L1958.88 1202.81 L1959.47 1202.81 L1960.06 1202.81 L1960.64 1202.81 L1961.23 1202.81 L1961.82 1202.81 L1962.4 1202.81 L1962.99 1202.81 L1963.58 1202.81 L1964.16 1202.81 L1964.75 1202.81 L1965.33 1202.81 L1965.92 1202.81 L1966.51 1202.81 L1967.09 1202.81 L1967.68 1202.81 L1968.27 1202.81 L1968.85 1202.81 L1969.44 1202.81 L1970.03 1202.81 L1970.61 1202.81 L1971.2 1202.81 L1971.78 1202.81 L1972.37 1202.81 L1972.96 1202.81 L1973.54 1202.81 L1974.13 1202.81 L1974.72 1202.81 L1975.3 1202.81 L1975.89 1202.81 L1976.48 1202.81 L1977.06 1202.81 L1977.65 1202.81 L1978.24 1202.81 L1978.82 1202.81 L1979.41 1202.81 L1979.99 1202.81 L1980.58 1202.81 L1981.17 1202.81 L1981.75 1202.81 L1982.34 1202.81 L1982.93 1202.81 L1983.51 1202.81 L1984.1 1202.81 L1984.69 1202.81 L1985.27 1202.81 L1985.86 1202.81 L1986.45 1202.81 L1987.03 1202.81 L1987.62 1202.81 L1988.2 1202.81 L1988.79 1202.81 L1989.38 1202.81 L1989.96 1202.81 L1990.55 1202.81 L1991.14 1202.81 L1991.72 1202.81 L1992.31 1202.81 L1992.9 1202.81 L1993.48 1202.81 L1994.07 1202.81 L1994.65 1202.81 L1995.24 1202.81 L1995.83 1202.81 L1996.41 1202.81 L1997 1202.81 L1997.59 1202.81 L1998.17 1202.81 L1998.76 1202.81 L1999.35 1202.81 L1999.93 1202.81 L2000.52 1202.81 L2001.11 1202.81 L2001.69 1202.81 L2002.28 1202.81 L2002.86 1202.81 L2003.45 1202.81 L2004.04 1202.81 L2004.62 1202.81 L2005.21 1202.81 L2005.8 1202.81 L2006.38 1202.81 L2006.97 1202.81 L2007.56 1202.81 L2008.14 1202.81 L2008.73 1202.81 L2009.32 1202.81 L2009.9 1202.81 L2010.49 1202.81 L2011.07 1202.81 L2011.66 1202.81 L2012.25 1202.81 L2012.83 1202.81 L2013.42 1202.81 L2014.01 1202.81 L2014.59 1202.81 L2015.18 1202.81 L2015.77 1202.81 L2016.35 1202.81 L2016.94 1202.81 L2017.53 1202.81 L2018.11 1202.81 L2018.7 1202.81 L2019.28 1202.81 L2019.87 1202.81 L2020.46 1202.81 L2021.04 1202.81 L2021.63 1202.81 L2022.22 1202.81 L2022.8 1202.81 L2023.39 1202.81 L2023.98 1202.81 L2024.56 1202.81 L2025.15 1202.81 L2025.73 1202.81 L2026.32 1202.81 L2026.91 1202.81 L2027.49 1202.81 L2028.08 1202.81 L2028.67 1202.81 L2029.25 1202.81 L2029.84 1202.81 L2030.43 1202.81 L2031.01 1202.81 L2031.6 1202.81 L2032.19 1202.81 L2032.77 1202.81 L2033.36 1202.81 L2033.94 1202.81 L2034.53 1202.81 L2035.12 1202.81 L2035.7 1202.81 L2036.29 1202.81 L2036.88 1202.81 L2037.46 1202.81 L2038.05 1202.81 L2038.64 1202.81 L2039.22 1202.81 L2039.81 1202.81 L2040.4 1202.81 L2040.98 1202.81 L2041.57 1202.81 L2042.15 1202.81 L2042.74 1202.81 L2043.33 1202.81 L2043.91 1202.81 L2044.5 1202.81 L2045.09 1202.81 L2045.67 1202.81 L2046.26 1202.81 L2046.85 1202.81 L2047.43 1202.81 L2048.02 1202.81 L2048.6 1202.81 L2049.19 1202.81 L2049.78 1202.81 L2050.36 1202.81 L2050.95 1202.81 L2051.54 1202.81 L2052.12 1202.81 L2052.71 1202.81 L2053.3 1202.81 L2053.88 1202.81 L2054.47 1202.81 L2055.06 1202.81 L2055.64 1202.81 L2056.23 1202.81 L2056.81 1202.81 L2057.4 1202.81 L2057.99 1202.81 L2058.57 1202.81 L2059.16 1202.81 L2059.75 1202.81 L2060.33 1202.81 L2060.92 1202.81 L2061.51 1202.81 L2062.09 1202.81 L2062.68 1202.81 L2063.27 1202.81 L2063.85 1202.81 L2064.44 1202.81 L2065.02 1202.81 L2065.61 1202.81 L2066.2 1202.81 L2066.78 1202.81 L2067.37 1202.81 L2067.96 1202.81 L2068.54 1202.81 L2069.13 1202.81 L2069.72 1202.81 L2070.3 1202.81 L2070.89 1202.81 L2071.48 1202.81 L2072.06 1202.81 L2072.65 1202.81 L2073.23 1202.81 L2073.82 1202.81 L2074.41 1202.81 L2074.99 1202.81 L2075.58 1202.81 L2076.17 1202.81 L2076.75 1202.81 L2077.34 1202.81 L2077.93 1202.81 L2078.51 1202.81 L2079.1 1202.81 L2079.68 1202.81 L2080.27 1202.81 L2080.86 1202.81 L2081.44 1202.81 L2082.03 1202.81 L2082.62 1202.81 L2083.2 1202.81 L2083.79 1202.81 L2084.38 1202.81 L2084.96 1202.81 L2085.55 1202.81 L2086.14 1202.81 L2086.72 1202.81 L2087.31 1202.81 L2087.89 1202.81 L2088.48 1202.81 L2089.07 1202.81 L2089.65 1202.81 L2090.24 1202.81 L2090.83 1202.81 L2091.41 1202.81 L2092 1202.81 L2092.59 1202.81 L2093.17 1202.81 L2093.76 1202.81 L2094.35 1202.81 L2094.93 1202.81 L2095.52 1202.81 L2096.1 1202.81 L2096.69 1202.81 L2097.28 1202.81 L2097.86 1202.81 L2098.45 1202.81 L2099.04 1202.81 L2099.62 1202.81 L2100.21 1202.81 L2100.8 1202.81 L2101.38 1202.81 L2101.97 1202.81 L2102.55 1202.81 L2103.14 1202.81 L2103.73 1202.81 L2104.31 1202.81 L2104.9 1202.81 L2105.49 1202.81 L2106.07 1202.81 L2106.66 1202.81 L2107.25 1202.81 L2107.83 1202.81 L2108.42 1202.81 L2109.01 1202.81 L2109.59 1202.81 L2110.18 1202.81 L2110.76 1202.81 L2111.35 1202.81 L2111.94 1202.81 L2112.52 1202.81 L2113.11 1202.81 L2113.7 1202.81 L2114.28 1202.81 L2114.87 1202.81 L2115.46 1202.81 L2116.04 1202.81 L2116.63 1202.81 L2117.22 1202.81 L2117.8 1202.81 L2118.39 1202.81 L2118.97 1202.81 L2119.56 1202.81 L2120.15 1202.81 L2120.73 1202.81 L2121.32 1202.81 L2121.91 1202.81 L2122.49 1202.81 L2123.08 1202.81 L2123.67 1202.81 L2124.25 1202.81 L2124.84 1202.81 L2125.42 1202.81 L2126.01 1202.81 L2126.6 1202.81 L2127.18 1202.81 L2127.77 1202.81 L2128.36 1202.81 L2128.94 1202.81 L2129.53 1202.81 L2130.12 1202.81 L2130.7 1202.81 L2131.29 1202.81 L2131.88 1202.81 L2132.46 1202.81 L2133.05 1202.81 L2133.63 1202.81 L2134.22 1202.81 L2134.81 1202.81 L2135.39 1202.81 L2135.98 1202.81 L2136.57 1202.81 L2137.15 1202.81 L2137.74 1202.81 L2138.33 1202.81 L2138.91 1202.81 L2139.5 1202.81 L2140.09 1202.81 L2140.67 1202.81 L2141.26 1202.81 L2141.84 1202.81 L2142.43 1202.81 L2143.02 1202.81 L2143.6 1202.81 L2144.19 1202.81 L2144.78 1202.81 L2145.36 1202.81 L2145.95 1202.81 L2146.54 1202.81 L2147.12 1202.81 L2147.71 1202.81 L2148.3 1202.81 L2148.88 1202.81 L2149.47 1202.81 L2150.05 1202.81 L2150.64 1202.81 L2151.23 1202.81 L2151.81 1202.81 L2152.4 1202.81 L2152.99 1202.81 L2153.57 1202.81 L2154.16 1202.81 L2154.75 1202.81 L2155.33 1202.81 L2155.92 1202.81 L2156.5 1202.81 L2157.09 1202.81 L2157.68 1202.81 L2158.26 1202.81 L2158.26 1201.94 L2157.68 1201.94 L2157.09 1201.94 L2156.5 1201.94 L2155.92 1201.94 L2155.33 1201.94 L2154.75 1201.94 L2154.16 1201.94 L2153.57 1201.94 L2152.99 1201.94 L2152.4 1201.94 L2151.81 1201.94 L2151.23 1201.94 L2150.64 1201.94 L2150.05 1201.94 L2149.47 1201.94 L2148.88 1201.94 L2148.3 1201.94 L2147.71 1201.94 L2147.12 1201.94 L2146.54 1201.94 L2145.95 1201.94 L2145.36 1201.94 L2144.78 1201.94 L2144.19 1201.94 L2143.6 1201.94 L2143.02 1201.94 L2142.43 1201.94 L2141.84 1201.94 L2141.26 1201.94 L2140.67 1201.94 L2140.09 1201.94 L2139.5 1201.94 L2138.91 1201.94 L2138.33 1201.94 L2137.74 1201.94 L2137.15 1201.94 L2136.57 1201.94 L2135.98 1201.94 L2135.39 1201.94 L2134.81 1201.94 L2134.22 1201.94 L2133.63 1201.94 L2133.05 1201.94 L2132.46 1201.94 L2131.88 1201.94 L2131.29 1201.94 L2130.7 1201.94 L2130.12 1201.94 L2129.53 1201.94 L2128.94 1201.94 L2128.36 1201.94 L2127.77 1201.94 L2127.18 1201.94 L2126.6 1201.94 L2126.01 1201.94 L2125.42 1201.94 L2124.84 1201.94 L2124.25 1201.94 L2123.67 1201.94 L2123.08 1201.94 L2122.49 1201.94 L2121.91 1201.94 L2121.32 1201.94 L2120.73 1201.94 L2120.15 1201.94 L2119.56 1201.94 L2118.97 1201.94 L2118.39 1201.94 L2117.8 1201.94 L2117.22 1201.94 L2116.63 1201.94 L2116.04 1201.94 L2115.46 1201.94 L2114.87 1201.94 L2114.28 1201.94 L2113.7 1201.94 L2113.11 1201.94 L2112.52 1201.94 L2111.94 1201.94 L2111.35 1201.94 L2110.76 1201.94 L2110.18 1201.94 L2109.59 1201.94 L2109.01 1201.94 L2108.42 1201.94 L2107.83 1201.94 L2107.25 1201.94 L2106.66 1201.94 L2106.07 1201.94 L2105.49 1201.94 L2104.9 1201.94 L2104.31 1201.94 L2103.73 1201.94 L2103.14 1201.94 L2102.55 1201.94 L2101.97 1201.94 L2101.38 1201.94 L2100.8 1201.94 L2100.21 1201.94 L2099.62 1201.94 L2099.04 1201.94 L2098.45 1201.94 L2097.86 1201.94 L2097.28 1201.94 L2096.69 1201.94 L2096.1 1201.94 L2095.52 1201.94 L2094.93 1201.94 L2094.35 1201.94 L2093.76 1201.94 L2093.17 1201.94 L2092.59 1201.94 L2092 1201.94 L2091.41 1201.94 L2090.83 1201.94 L2090.24 1201.94 L2089.65 1201.94 L2089.07 1201.94 L2088.48 1201.94 L2087.89 1201.94 L2087.31 1201.94 L2086.72 1201.94 L2086.14 1201.94 L2085.55 1201.94 L2084.96 1201.94 L2084.38 1201.94 L2083.79 1201.94 L2083.2 1201.94 L2082.62 1201.94 L2082.03 1201.94 L2081.44 1201.94 L2080.86 1201.94 L2080.27 1201.94 L2079.68 1201.94 L2079.1 1201.94 L2078.51 1201.94 L2077.93 1201.94 L2077.34 1201.94 L2076.75 1201.94 L2076.17 1201.94 L2075.58 1201.94 L2074.99 1201.94 L2074.41 1201.94 L2073.82 1201.94 L2073.23 1201.94 L2072.65 1201.94 L2072.06 1201.94 L2071.48 1201.94 L2070.89 1201.94 L2070.3 1201.94 L2069.72 1201.94 L2069.13 1201.94 L2068.54 1201.94 L2067.96 1201.94 L2067.37 1201.94 L2066.78 1201.94 L2066.2 1201.94 L2065.61 1201.94 L2065.02 1201.94 L2064.44 1201.94 L2063.85 1201.94 L2063.27 1201.94 L2062.68 1201.94 L2062.09 1201.94 L2061.51 1201.94 L2060.92 1201.94 L2060.33 1201.94 L2059.75 1201.94 L2059.16 1201.94 L2058.57 1201.94 L2057.99 1201.94 L2057.4 1201.94 L2056.81 1201.94 L2056.23 1201.94 L2055.64 1201.94 L2055.06 1201.94 L2054.47 1201.94 L2053.88 1201.94 L2053.3 1201.94 L2052.71 1201.94 L2052.12 1201.94 L2051.54 1201.94 L2050.95 1201.94 L2050.36 1201.94 L2049.78 1201.94 L2049.19 1201.94 L2048.6 1201.94 L2048.02 1201.94 L2047.43 1201.94 L2046.85 1201.94 L2046.26 1201.94 L2045.67 1201.94 L2045.09 1201.94 L2044.5 1201.94 L2043.91 1201.94 L2043.33 1201.94 L2042.74 1201.94 L2042.15 1201.94 L2041.57 1201.94 L2040.98 1201.94 L2040.4 1201.94 L2039.81 1201.94 L2039.22 1201.94 L2038.64 1201.94 L2038.05 1201.94 L2037.46 1201.94 L2036.88 1201.94 L2036.29 1201.94 L2035.7 1201.94 L2035.12 1201.94 L2034.53 1201.94 L2033.94 1201.94 L2033.36 1201.94 L2032.77 1201.94 L2032.19 1201.94 L2031.6 1201.94 L2031.01 1201.94 L2030.43 1201.94 L2029.84 1201.94 L2029.25 1201.94 L2028.67 1201.94 L2028.08 1201.94 L2027.49 1201.94 L2026.91 1201.94 L2026.32 1201.94 L2025.73 1201.94 L2025.15 1201.94 L2024.56 1201.94 L2023.98 1201.94 L2023.39 1201.94 L2022.8 1201.94 L2022.22 1201.94 L2021.63 1201.94 L2021.04 1201.94 L2020.46 1201.94 L2019.87 1201.94 L2019.28 1201.94 L2018.7 1201.94 L2018.11 1201.94 L2017.53 1201.94 L2016.94 1201.94 L2016.35 1201.94 L2015.77 1201.94 L2015.18 1201.94 L2014.59 1201.94 L2014.01 1201.94 L2013.42 1201.94 L2012.83 1201.94 L2012.25 1201.94 L2011.66 1201.94 L2011.07 1201.94 L2010.49 1201.94 L2009.9 1201.94 L2009.32 1201.94 L2008.73 1201.94 L2008.14 1201.94 L2007.56 1201.94 L2006.97 1201.94 L2006.38 1201.94 L2005.8 1201.94 L2005.21 1201.94 L2004.62 1201.94 L2004.04 1201.94 L2003.45 1201.94 L2002.86 1201.94 L2002.28 1201.94 L2001.69 1201.94 L2001.11 1201.94 L2000.52 1201.94 L1999.93 1201.94 L1999.35 1201.94 L1998.76 1201.94 L1998.17 1201.94 L1997.59 1201.94 L1997 1201.94 L1996.41 1201.94 L1995.83 1201.94 L1995.24 1201.94 L1994.65 1201.94 L1994.07 1201.94 L1993.48 1201.94 L1992.9 1201.94 L1992.31 1201.94 L1991.72 1201.94 L1991.14 1201.94 L1990.55 1201.94 L1989.96 1201.94 L1989.38 1201.94 L1988.79 1201.94 L1988.2 1201.94 L1987.62 1201.94 L1987.03 1201.94 L1986.45 1201.94 L1985.86 1201.94 L1985.27 1201.94 L1984.69 1201.94 L1984.1 1201.94 L1983.51 1201.94 L1982.93 1201.94 L1982.34 1201.94 L1981.75 1201.94 L1981.17 1201.94 L1980.58 1201.94 L1979.99 1201.94 L1979.41 1201.94 L1978.82 1201.94 L1978.24 1201.94 L1977.65 1201.94 L1977.06 1201.94 L1976.48 1201.94 L1975.89 1201.94 L1975.3 1201.94 L1974.72 1201.94 L1974.13 1201.94 L1973.54 1201.94 L1972.96 1201.94 L1972.37 1201.94 L1971.78 1201.94 L1971.2 1201.94 L1970.61 1201.94 L1970.03 1201.94 L1969.44 1201.94 L1968.85 1201.94 L1968.27 1201.94 L1967.68 1201.94 L1967.09 1201.94 L1966.51 1201.94 L1965.92 1201.94 L1965.33 1201.94 L1964.75 1201.94 L1964.16 1201.94 L1963.58 1201.94 L1962.99 1201.94 L1962.4 1201.94 L1961.82 1201.94 L1961.23 1201.94 L1960.64 1201.94 L1960.06 1201.94 L1959.47 1201.94 L1958.88 1201.94 L1958.3 1201.94 L1957.71 1201.94 L1957.12 1201.94 L1956.54 1201.94 L1955.95 1201.94 L1955.37 1201.94 L1954.78 1201.94 L1954.19 1201.94 L1953.61 1201.94 L1953.02 1201.94 L1952.43 1201.94 L1951.85 1201.94 L1951.26 1201.94 L1950.67 1201.94 L1950.09 1201.94 L1949.5 1201.94 L1948.91 1201.94 L1948.33 1201.94 L1947.74 1201.94 L1947.16 1201.94 L1946.57 1201.94 L1945.98 1201.94 L1945.4 1201.94 L1944.81 1201.94 L1944.22 1201.94 L1943.64 1201.94 L1943.05 1201.94 L1942.46 1201.94 L1941.88 1201.94 L1941.29 1201.94 L1940.71 1201.94 L1940.12 1201.94 L1939.53 1201.94 L1938.95 1201.94 L1938.36 1201.94 L1937.77 1201.94 L1937.19 1201.94 L1936.6 1201.94 L1936.01 1201.94 L1935.43 1201.94 L1934.84 1201.94 L1934.25 1201.94 L1933.67 1201.94 L1933.08 1201.94 L1932.5 1201.94 L1931.91 1201.94 L1931.32 1201.94 L1930.74 1201.94 L1930.15 1201.94 L1929.56 1201.94 L1928.98 1201.94 L1928.39 1201.94 L1927.8 1201.94 L1927.22 1201.94 L1926.63 1201.94 L1926.04 1201.94 L1925.46 1201.94 L1924.87 1201.94 L1924.29 1201.94 L1923.7 1201.94 L1923.11 1201.94 L1922.53 1201.94 L1921.94 1201.94 L1921.35 1201.94 L1920.77 1201.94 L1920.18 1201.94 L1919.59 1201.94 L1919.01 1201.94 L1918.42 1201.94 L1917.83 1201.94 L1917.25 1201.94 L1916.66 1201.94 L1916.08 1201.94 L1915.49 1201.94 L1914.9 1201.94 L1914.32 1201.94 L1913.73 1201.94 L1913.14 1201.94 L1912.56 1201.94 L1911.97 1201.94 L1911.38 1201.94 L1910.8 1201.94 L1910.21 1201.94 L1909.63 1201.94 L1909.04 1201.94 L1908.45 1201.94 L1907.87 1201.94 L1907.28 1201.94 L1906.69 1201.94 L1906.11 1201.94 L1905.52 1201.94 L1904.93 1201.94 L1904.35 1201.94 L1903.76 1201.94 L1903.17 1201.94 L1902.59 1201.94 L1902 1201.94 L1901.42 1201.94 L1900.83 1201.94 L1900.24 1201.94 L1899.66 1201.94 L1899.07 1201.94 L1898.48 1201.94 L1897.9 1201.94 L1897.31 1201.94 L1896.72 1201.94 L1896.14 1201.94 L1895.55 1201.94 L1894.96 1201.94 L1894.38 1201.94 L1893.79 1201.94 L1893.21 1201.94 L1892.62 1201.94 L1892.03 1201.94 L1891.45 1201.94 L1890.86 1201.94 L1890.27 1201.94 L1889.69 1201.94 L1889.1 1201.94 L1888.51 1201.94 L1887.93 1201.94 L1887.34 1201.94 L1886.76 1201.94 L1886.17 1201.94 L1885.58 1201.94 L1885 1201.94 L1884.41 1201.94 L1883.82 1201.94 L1883.24 1201.94 L1882.65 1201.94 L1882.06 1201.94 L1881.48 1201.94 L1880.89 1201.94 L1880.3 1201.94 L1879.72 1201.94 L1879.13 1201.94 L1878.55 1201.94 L1877.96 1201.94 L1877.37 1201.94 L1876.79 1201.94 L1876.2 1201.94 L1875.61 1201.94 L1875.03 1201.94 L1874.44 1201.94 L1873.85 1201.94 L1873.27 1201.94 L1872.68 1201.94 L1872.09 1201.94 L1871.51 1201.94 L1870.92 1201.94 L1870.34 1201.94 L1869.75 1201.94 L1869.16 1201.94 L1868.58 1201.94 L1867.99 1201.94 L1867.4 1201.94 L1866.82 1201.94 L1866.23 1201.94 L1865.64 1201.94 L1865.06 1201.94 L1864.47 1201.94 L1863.88 1201.94 L1863.3 1201.94 L1862.71 1201.94 L1862.13 1201.94 L1861.54 1201.94 L1860.95 1201.94 L1860.37 1201.94 L1859.78 1201.94 L1859.19 1201.94 L1858.61 1201.94 L1858.02 1201.94 L1857.43 1201.94 L1856.85 1201.94 L1856.26 1201.94 L1855.68 1201.94 L1855.09 1201.94 L1854.5 1201.94 L1853.92 1201.94 L1853.33 1201.94 L1852.74 1201.94 L1852.16 1201.94 L1851.57 1201.94 L1850.98 1201.94 L1850.4 1201.94 L1849.81 1201.94 L1849.22 1201.94 L1848.64 1201.94 L1848.05 1201.94 L1847.47 1201.94 L1846.88 1201.94 L1846.29 1201.94 L1845.71 1201.94 L1845.12 1201.94 L1844.53 1201.94 L1843.95 1201.94 L1843.36 1201.94 L1842.77 1201.94 L1842.19 1201.94 L1841.6 1201.94 L1841.01 1201.94 L1840.43 1201.94 L1839.84 1201.94 L1839.26 1201.94 L1838.67 1201.94 L1838.08 1201.94 L1837.5 1201.94 L1836.91 1201.94 L1836.32 1201.94 L1835.74 1201.94 L1835.15 1201.94 L1834.56 1201.94 L1833.98 1201.94 L1833.39 1201.94 L1832.81 1201.94 L1832.22 1201.94 L1831.63 1201.94 L1831.05 1201.94 L1830.46 1201.94 L1829.87 1201.94 L1829.29 1201.94 L1828.7 1201.94 L1828.11 1201.94 L1827.53 1201.94 L1826.94 1201.94 L1826.35 1201.94 L1825.77 1201.94 L1825.18 1201.94 L1824.6 1201.94 L1824.01 1201.94 L1823.42 1201.94 L1822.84 1201.94 L1822.25 1201.94 L1821.66 1201.94 L1821.08 1201.94 L1820.49 1201.94 L1819.9 1201.94 L1819.32 1201.94 L1818.73 1201.94 L1818.14 1201.94 L1817.56 1201.94 L1816.97 1201.94 L1816.39 1201.94 L1815.8 1201.94 L1815.21 1201.94 L1814.63 1201.94 L1814.04 1201.94 L1813.45 1201.94 L1812.87 1201.94 L1812.28 1201.94 L1811.69 1201.94 L1811.11 1201.94 L1810.52 1201.94 L1809.94 1201.94 L1809.35 1201.94 L1808.76 1201.94 L1808.18 1201.94 L1807.59 1201.94 L1807 1201.94 L1806.42 1201.94 L1805.83 1201.94 L1805.24 1201.94 L1804.66 1201.94 L1804.07 1201.94 L1803.48 1201.94 L1802.9 1201.94 L1802.31 1201.94 L1801.73 1201.94 L1801.14 1201.94 L1800.55 1201.94 L1799.97 1201.94 L1799.38 1201.94 L1798.79 1201.94 L1798.21 1201.94 L1797.62 1201.94 L1797.03 1201.94 L1796.45 1201.94 L1795.86 1201.94 L1795.27 1201.94 L1794.69 1201.94 L1794.1 1201.94 L1793.52 1201.94 L1792.93 1201.94 L1792.34 1201.94 L1791.76 1201.94 L1791.17 1201.94 L1790.58 1201.94 L1790 1201.94 L1789.41 1201.94 L1788.82 1201.94 L1788.24 1201.94 L1787.65 1201.94 L1787.06 1201.94 L1786.48 1201.94 L1785.89 1201.94 L1785.31 1201.94 L1784.72 1201.94 L1784.13 1201.94 L1783.55 1201.94 L1782.96 1201.94 L1782.37 1201.94 L1781.79 1201.94 L1781.2 1201.94 L1780.61 1201.94 L1780.03 1201.94 L1779.44 1201.94 L1778.86 1201.94 L1778.27 1201.94 L1777.68 1201.94 L1777.1 1201.94 L1776.51 1201.94 L1775.92 1201.94 L1775.34 1201.94 L1774.75 1201.94 L1774.16 1201.94 L1773.58 1201.94 L1772.99 1201.94 L1772.4 1201.94 L1771.82 1201.94 L1771.23 1201.94 L1770.65 1201.94 L1770.06 1201.94 L1769.47 1201.94 L1768.89 1201.94 L1768.3 1201.94 L1767.71 1201.94 L1767.13 1201.94 L1766.54 1201.94 L1765.95 1201.94 L1765.37 1201.94 L1764.78 1201.94 L1764.19 1201.94 L1763.61 1201.94 L1763.02 1201.94 L1762.44 1201.94 L1761.85 1201.94 L1761.26 1201.94 L1760.68 1201.94 L1760.09 1201.94 L1759.5 1201.94 L1758.92 1201.94 L1758.33 1201.94 L1757.74 1201.94 L1757.16 1201.94 L1756.57 1201.94 L1755.99 1201.94 L1755.4 1201.94 L1754.81 1201.94 L1754.23 1201.94 L1753.64 1201.94 L1753.05 1201.94 L1752.47 1201.94 L1751.88 1201.94 L1751.29 1201.94 L1750.71 1201.94 L1750.12 1201.94 L1749.53 1201.94 L1748.95 1201.94 L1748.36 1201.94 L1747.78 1201.94 L1747.19 1201.94 L1746.6 1201.94 L1746.02 1201.94 L1745.43 1201.94 L1744.84 1201.94 L1744.26 1201.94 L1743.67 1201.94 L1743.08 1201.94 L1742.5 1201.94 L1741.91 1201.94 L1741.32 1201.94 L1740.74 1201.94 L1740.15 1201.94 L1739.57 1201.94 L1738.98 1201.94 L1738.39 1201.94 L1737.81 1201.94 L1737.22 1201.94 L1736.63 1201.94 L1736.05 1201.94 L1735.46 1201.94 L1734.87 1201.94 L1734.29 1201.94 L1733.7 1201.94 L1733.11 1201.94 L1732.53 1201.94 L1731.94 1201.94 L1731.36 1201.94 L1730.77 1201.94 L1730.18 1201.94 L1729.6 1201.94 L1729.01 1201.94 L1728.42 1201.94 L1727.84 1201.94 L1727.25 1201.94 L1726.66 1201.94 L1726.08 1201.94 L1725.49 1201.94 L1724.91 1201.94 L1724.32 1201.94 L1723.73 1201.94 L1723.15 1201.94 L1722.56 1201.94 L1721.97 1201.94 L1721.39 1201.94 L1720.8 1201.94 L1720.21 1201.94 L1719.63 1201.94 L1719.04 1201.94 L1718.45 1201.94 L1717.87 1201.94 L1717.28 1201.94 L1716.7 1201.94 L1716.11 1201.94 L1715.52 1201.94 L1714.94 1201.94 L1714.35 1201.94 L1713.76 1201.94 L1713.18 1201.94 L1712.59 1201.94 L1712 1201.94 L1711.42 1201.94 L1710.83 1201.94 L1710.24 1201.94 L1709.66 1201.94 L1709.07 1201.94 L1708.49 1201.94 L1707.9 1201.94 L1707.31 1201.94 L1706.73 1201.94 L1706.14 1201.94 L1705.55 1201.94 L1704.97 1201.94 L1704.38 1201.94 L1703.79 1201.94 L1703.21 1201.94 L1702.62 1201.94 L1702.04 1201.94 L1701.45 1201.94 L1700.86 1201.94 L1700.28 1201.94 L1699.69 1201.94 L1699.1 1201.94 L1698.52 1201.94 L1697.93 1201.94 L1697.34 1201.94 L1696.76 1201.94 L1696.17 1201.94 L1695.58 1201.94 L1695 1201.94 L1694.41 1201.94 L1693.83 1201.94 L1693.24 1201.94 L1692.65 1201.94 L1692.07 1201.94 L1691.48 1201.94 L1690.89 1201.94 L1690.31 1201.94 L1689.72 1201.94 L1689.13 1201.94 L1688.55 1201.94 L1687.96 1201.94 L1687.37 1201.94 L1686.79 1201.94 L1686.2 1201.94 L1685.62 1201.94 L1685.03 1201.94 L1684.44 1201.94 L1683.86 1201.94 L1683.27 1201.94 L1682.68 1201.94 L1682.1 1201.94 L1681.51 1201.94 L1680.92 1201.94 L1680.34 1201.94 L1679.75 1201.94 L1679.17 1201.94 L1678.58 1201.94 L1677.99 1201.94 L1677.41 1201.94 L1676.82 1201.94 L1676.23 1201.94 L1675.65 1201.94 L1675.06 1201.94 L1674.47 1201.94 L1673.89 1201.94 L1673.3 1201.94 L1672.71 1201.94 L1672.13 1201.94 L1671.54 1201.94 L1670.96 1201.94 L1670.37 1201.94 L1669.78 1201.94 L1669.2 1201.94 L1668.61 1201.94 L1668.02 1201.94 L1667.44 1201.94 L1666.85 1201.94 L1666.26 1201.94 L1665.68 1201.94 L1665.09 1201.94 L1664.5 1201.94 L1663.92 1201.94 L1663.33 1201.94 L1662.75 1201.94 L1662.16 1201.94 L1661.57 1201.94 L1660.99 1201.94 L1660.4 1201.94 L1659.81 1201.94 L1659.23 1201.94 L1658.64 1201.94 L1658.05 1201.94 L1657.47 1201.94 L1656.88 1201.94 L1656.29 1201.94 L1655.71 1201.94 L1655.12 1201.94 L1654.54 1201.94 L1653.95 1201.94 L1653.36 1201.94 L1652.78 1201.94 L1652.19 1201.94 L1651.6 1201.94 L1651.02 1201.94 L1650.43 1201.94 L1649.84 1201.94 L1649.26 1201.94 L1648.67 1201.94 L1648.09 1201.94 L1647.5 1201.94 L1646.91 1201.94 L1646.33 1201.94 L1645.74 1201.94 L1645.15 1201.94 L1644.57 1201.94 L1643.98 1201.94 L1643.39 1201.94 L1642.81 1201.94 L1642.22 1201.94 L1641.63 1201.94 L1641.05 1201.94 L1640.46 1201.94 L1639.88 1201.94 L1639.29 1201.94 L1638.7 1201.94 L1638.12 1201.94 L1637.53 1201.94 L1636.94 1201.94 L1636.36 1201.94 L1635.77 1201.94 L1635.18 1201.94 L1634.6 1201.94 L1634.01 1201.94 L1633.42 1201.94 L1632.84 1201.94 L1632.25 1201.94 L1631.67 1201.94 L1631.08 1201.94 L1630.49 1201.94 L1629.91 1201.94 L1629.32 1201.94 L1628.73 1201.94 L1628.15 1201.94 L1627.56 1201.94 L1626.97 1201.94 L1626.39 1201.94 L1625.8 1201.94 L1625.22 1201.94 L1624.63 1201.94 L1624.04 1201.94 L1623.46 1201.94 L1622.87 1201.94 L1622.28 1201.94 L1621.7 1201.94 L1621.11 1201.94 L1620.52 1201.94 L1619.94 1201.94 L1619.35 1201.94 L1618.76 1201.94 L1618.18 1201.94 L1617.59 1201.94 L1617.01 1201.94 L1616.42 1201.94 L1615.83 1201.94 L1615.25 1201.94 L1614.66 1201.94 L1614.07 1201.94 L1613.49 1201.94 L1612.9 1201.94 L1612.31 1201.94 L1611.73 1201.94 L1611.14 1201.94 L1610.55 1201.94 L1609.97 1201.94 L1609.38 1201.94 L1608.8 1201.94 L1608.21 1201.94 L1607.62 1201.94 L1607.04 1201.94 L1606.45 1201.94 L1605.86 1201.94 L1605.28 1201.94 L1604.69 1201.94 L1604.1 1201.94 L1603.52 1201.94 L1602.93 1201.94 L1602.34 1201.94 L1601.76 1201.94 L1601.17 1201.94 L1600.59 1201.94 L1600 1201.94 L1599.41 1201.94 L1598.83 1201.94 L1598.24 1201.94 L1597.65 1201.94 L1597.07 1201.94 L1596.48 1201.94 L1595.89 1201.94 L1595.31 1201.94 L1594.72 1201.94 L1594.14 1201.94 L1593.55 1201.94 L1592.96 1201.94 L1592.38 1201.94 L1591.79 1201.94 L1591.2 1201.94 L1590.62 1201.94 L1590.03 1201.94 L1589.44 1201.94 L1588.86 1201.94 L1588.27 1201.94 L1587.68 1201.94 L1587.1 1201.94 L1586.51 1201.94 L1585.93 1201.94 L1585.34 1201.94 L1584.75 1201.94 L1584.17 1201.94 L1583.58 1201.94 L1582.99 1201.94 L1582.41 1201.94 L1581.82 1201.94 L1581.23 1201.94 L1580.65 1201.94 L1580.06 1201.94 L1579.47 1201.94 L1578.89 1201.94 L1578.3 1201.94 L1577.72 1201.94 L1577.13 1201.94 L1576.54 1201.94 L1575.96 1201.94 L1575.37 1201.94 L1574.78 1201.94 L1574.2 1201.94 L1573.61 1201.94 L1573.02 1201.94 L1572.44 1201.94 L1571.85 1201.94 L1571.27 1201.94 L1570.68 1201.94 L1570.09 1201.94 L1569.51 1201.94 L1568.92 1201.94 L1568.33 1201.94 L1567.75 1201.94 L1567.16 1201.94 L1566.57 1201.94 L1565.99 1201.94 L1565.4 1201.94 L1564.81 1201.94 L1564.23 1201.94 L1563.64 1201.94 L1563.06 1201.94 L1562.47 1201.94 L1561.88 1201.94 L1561.3 1201.94 L1560.71 1201.94 L1560.12 1201.94 L1559.54 1201.94 L1558.95 1201.94 L1558.36 1201.94 L1557.78 1201.94 L1557.19 1201.94 L1556.6 1201.94 L1556.02 1201.94 L1555.43 1201.94 L1554.85 1201.94 L1554.26 1201.94 L1553.67 1201.94 L1553.09 1201.94 L1552.5 1201.94 L1551.91 1201.94 L1551.33 1201.94 L1550.74 1201.94 L1550.15 1201.94 L1549.57 1201.94 L1548.98 1201.94 L1548.4 1201.94 L1547.81 1201.94 L1547.22 1201.94 L1546.64 1201.94 L1546.05 1201.94 L1545.46 1201.94 L1544.88 1201.94 L1544.29 1201.94 L1543.7 1201.94 L1543.12 1201.94 L1542.53 1201.94 L1541.94 1201.94 L1541.36 1201.94 L1540.77 1201.94 L1540.19 1201.94 L1539.6 1201.94 L1539.01 1201.94 L1538.43 1201.94 L1537.84 1201.94 L1537.25 1201.94 L1536.67 1201.94 L1536.08 1201.94 L1535.49 1201.94 L1534.91 1201.94 L1534.32 1201.94 L1533.73 1201.94 L1533.15 1201.94 L1532.56 1201.94 L1531.98 1201.94 L1531.39 1201.94 L1530.8 1201.94 L1530.22 1201.94 L1529.63 1201.94 L1529.04 1201.94 L1528.46 1201.94 L1527.87 1201.94 L1527.28 1201.94 L1526.7 1201.94 L1526.11 1201.94 L1525.52 1201.94 L1524.94 1201.94 L1524.35 1201.94 L1523.77 1201.94 L1523.18 1201.94 L1522.59 1201.94 L1522.01 1201.94 L1521.42 1201.94 L1520.83 1201.94 L1520.25 1201.94 L1519.66 1201.94 L1519.07 1201.94 L1518.49 1201.94 L1517.9 1201.94 L1517.32 1201.94 L1516.73 1201.94 L1516.14 1201.94 L1515.56 1201.94 L1514.97 1201.94 L1514.38 1201.94 L1513.8 1201.94 L1513.21 1201.94 L1512.62 1201.94 L1512.04 1201.94 L1511.45 1201.94 L1510.86 1201.94 L1510.28 1201.94 L1509.69 1201.94 L1509.11 1201.94 L1508.52 1201.94 L1507.93 1201.94 L1507.35 1201.94 L1506.76 1201.94 L1506.17 1201.94 L1505.59 1201.94 L1505 1201.94 L1504.41 1201.94 L1503.83 1201.94 L1503.24 1201.94 L1502.65 1201.94 L1502.07 1201.94 L1501.48 1201.94 L1500.9 1201.94 L1500.31 1201.94 L1499.72 1201.94 L1499.14 1201.94 L1498.55 1201.94 L1497.96 1201.94 L1497.38 1201.94 L1496.79 1201.94 L1496.2 1201.94 L1495.62 1201.94 L1495.03 1201.94 L1494.45 1201.94 L1493.86 1201.94 L1493.27 1201.94 L1492.69 1201.94 L1492.1 1201.94 L1491.51 1201.94 L1490.93 1201.94 L1490.34 1201.94 L1489.75 1201.94 L1489.17 1201.94 L1488.58 1201.94 L1487.99 1201.94 L1487.41 1201.94 L1486.82 1201.94 L1486.24 1201.94 L1485.65 1201.94 L1485.06 1201.94 L1484.48 1201.94 L1483.89 1201.94 L1483.3 1201.94 L1482.72 1201.94 L1482.13 1201.94 L1481.54 1201.94 L1480.96 1201.94 L1480.37 1201.94 L1479.78 1201.94 L1479.2 1201.94 L1478.61 1201.94 L1478.03 1201.94 L1477.44 1201.94 L1476.85 1201.94 L1476.27 1201.94 L1475.68 1201.94 L1475.09 1201.94 L1474.51 1201.94 L1473.92 1201.94 L1473.33 1201.94 L1472.75 1201.94 L1472.16 1201.94 L1471.57 1201.94 L1470.99 1201.94 L1470.4 1201.94 L1469.82 1201.94 L1469.23 1201.94 L1468.64 1201.94 L1468.06 1201.94 L1467.47 1201.94 L1466.88 1201.94 L1466.3 1201.94 L1465.71 1201.94 L1465.12 1201.94 L1464.54 1201.94 L1463.95 1201.94 L1463.37 1201.94 L1462.78 1201.94 L1462.19 1201.94 L1461.61 1201.94 L1461.02 1201.94 L1460.43 1201.94 L1459.85 1201.94 L1459.26 1201.94 L1458.67 1201.94 L1458.09 1201.94 L1457.5 1201.94 L1456.91 1201.94 L1456.33 1201.94 L1455.74 1201.94 L1455.16 1201.94 L1454.57 1201.94 L1453.98 1201.94 L1453.4 1201.94 L1452.81 1201.94 L1452.22 1201.94 L1451.64 1201.94 L1451.05 1201.94 L1450.46 1201.94 L1449.88 1201.94 L1449.29 1201.94 L1448.7 1201.94 L1448.12 1201.94 L1447.53 1201.94 L1446.95 1201.94 L1446.36 1201.94 L1445.77 1201.94 L1445.19 1201.94 L1444.6 1201.94 L1444.01 1201.94 L1443.43 1201.94 L1442.84 1201.94 L1442.25 1201.94 L1441.67 1201.94 L1441.08 1201.94 L1440.5 1201.94 L1439.91 1201.94 L1439.32 1201.94 L1438.74 1201.94 L1438.15 1201.94 L1437.56 1201.94 L1436.98 1201.94 L1436.39 1201.94 L1435.8 1201.94 L1435.22 1201.94 L1434.63 1201.94 L1434.04 1201.94 L1433.46 1201.94 L1432.87 1201.94 L1432.29 1201.94 L1431.7 1201.94 L1431.11 1201.94 L1430.53 1201.94 L1429.94 1201.94 L1429.35 1201.94 L1428.77 1201.94 L1428.18 1201.94 L1427.59 1201.94 L1427.01 1201.94 L1426.42 1201.94 L1425.83 1201.94 L1425.25 1201.94 L1424.66 1201.94 L1424.08 1201.94 L1423.49 1201.94 L1422.9 1201.94 L1422.32 1201.94 L1421.73 1201.94 L1421.14 1201.94 L1420.56 1201.94 L1419.97 1201.94 L1419.38 1201.94 L1418.8 1201.94 L1418.21 1201.94 L1417.63 1201.94 L1417.04 1201.94 L1416.45 1201.94 L1415.87 1201.94 L1415.28 1201.94 L1414.69 1201.94 L1414.11 1201.94 L1413.52 1201.94 L1412.93 1201.94 L1412.35 1201.94 L1411.76 1201.94 L1411.17 1201.94 L1410.59 1201.94 L1410 1201.94 L1409.42 1201.94 L1408.83 1201.94 L1408.24 1201.94 L1407.66 1201.94 L1407.07 1201.94 L1406.48 1201.94 L1405.9 1201.94 L1405.31 1201.94 L1404.72 1201.94 L1404.14 1201.94 L1403.55 1201.94 L1402.96 1201.94 L1402.38 1201.94 L1401.79 1201.94 L1401.21 1201.94 L1400.62 1201.94 L1400.03 1201.94 L1399.45 1201.94 L1398.86 1201.94 L1398.27 1201.94 L1397.69 1201.94 L1397.1 1201.94 L1396.51 1201.94 L1395.93 1201.94 L1395.34 1201.94 L1394.75 1201.94 L1394.17 1201.94 L1393.58 1201.94 L1393 1201.94 L1392.41 1201.94 L1391.82 1201.94 L1391.24 1201.94 L1390.65 1201.94 L1390.06 1201.94 L1389.48 1201.94 L1388.89 1201.94 L1388.3 1201.94 L1387.72 1201.94 L1387.13 1201.94 L1386.55 1201.94 L1385.96 1201.94 L1385.37 1201.94 L1384.79 1201.94 L1384.2 1201.94 L1383.61 1201.94 L1383.03 1201.94 L1382.44 1201.94 L1381.85 1201.94 L1381.27 1201.94 L1380.68 1201.94 L1380.09 1201.94 L1379.51 1201.94 L1378.92 1201.94 L1378.34 1201.94 L1377.75 1201.94 L1377.16 1201.94 L1376.58 1201.94 L1375.99 1201.94 L1375.4 1201.94 L1374.82 1201.94 L1374.23 1201.94 L1373.64 1201.94 L1373.06 1201.94 L1372.47 1201.94 L1371.88 1201.94 L1371.3 1201.94 L1370.71 1201.94 L1370.13 1201.94 L1369.54 1201.94 L1368.95 1201.94 L1368.37 1201.94 L1367.78 1201.94 L1367.19 1201.94 L1366.61 1201.94 L1366.02 1201.94 L1365.43 1201.94 L1364.85 1201.94 L1364.26 1201.94 L1363.68 1201.94 L1363.09 1201.94 L1362.5 1201.94 L1361.92 1201.94 L1361.33 1201.94 L1360.74 1201.94 L1360.16 1201.94 L1359.57 1201.94 L1358.98 1201.94 L1358.4 1201.94 L1357.81 1201.94 L1357.22 1201.94 L1356.64 1201.94 L1356.05 1201.94 L1355.47 1201.94 L1354.88 1201.94 L1354.29 1201.94 L1353.71 1201.94 L1353.12 1201.94 L1352.53 1201.94 L1351.95 1201.94 L1351.36 1201.94 L1350.77 1201.94 L1350.19 1201.94 L1349.6 1201.94 L1349.01 1201.94 L1348.43 1201.94 L1347.84 1201.94 L1347.26 1201.94 L1346.67 1201.94 L1346.08 1201.94 L1345.5 1201.94 L1344.91 1201.94 L1344.32 1201.94 L1343.74 1201.94 L1343.15 1201.94 L1342.56 1201.94 L1341.98 1201.94 L1341.39 1201.94 L1340.8 1201.94 L1340.22 1201.94 L1339.63 1201.94 L1339.05 1201.94 L1338.46 1201.94 L1337.87 1201.94 L1337.29 1201.94 L1336.7 1201.94 L1336.11 1201.94 L1335.53 1201.94 L1334.94 1201.94 L1334.35 1201.94 L1333.77 1201.94 L1333.18 1201.94 L1332.6 1201.94 L1332.01 1201.94 L1331.42 1201.94 L1330.84 1201.94 L1330.25 1201.94 L1329.66 1201.94 L1329.08 1201.94 L1328.49 1201.94 L1327.9 1201.94 L1327.32 1201.94 L1326.73 1201.94 L1326.14 1201.94 L1325.56 1201.94 L1324.97 1201.94 L1324.39 1201.94 L1323.8 1201.94 L1323.21 1201.94 L1322.63 1201.94 L1322.04 1201.94 L1321.45 1201.94 L1320.87 1201.94 L1320.28 1201.94 L1319.69 1201.94 L1319.11 1201.94 L1318.52 1201.94 L1317.93 1201.94 L1317.35 1201.94 L1316.76 1201.94 L1316.18 1201.94 L1315.59 1201.94 L1315 1201.94 L1314.42 1201.94 L1313.83 1201.94 L1313.24 1201.94 L1312.66 1201.94 L1312.07 1201.94 L1311.48 1201.94 L1310.9 1201.94 L1310.31 1201.94 L1309.73 1201.94 L1309.14 1201.94 L1308.55 1201.94 L1307.97 1201.94 L1307.38 1201.94 L1306.79 1201.94 L1306.21 1201.94 L1305.62 1201.94 L1305.03 1201.94 L1304.45 1201.94 L1303.86 1201.94 L1303.27 1201.94 L1302.69 1201.94 L1302.1 1201.94 L1301.52 1201.94 L1300.93 1201.94 L1300.34 1201.94 L1299.76 1201.94 L1299.17 1201.94 L1298.58 1201.94 L1298 1201.94 L1297.41 1201.94 L1296.82 1201.94 L1296.24 1201.94 L1295.65 1201.94 L1295.06 1201.94 L1294.48 1201.94 L1293.89 1201.94 L1293.31 1201.94 L1292.72 1201.94 L1292.13 1201.94 L1291.55 1201.94 L1290.96 1201.94 L1290.37 1201.94 L1289.79 1201.94 L1289.2 1201.94 L1288.61 1201.94 L1288.03 1201.94 L1287.44 1201.94 L1286.86 1201.94 L1286.27 1201.94 L1285.68 1201.94 L1285.1 1201.94 L1284.51 1201.94 L1283.92 1201.94 L1283.34 1201.94 L1282.75 1201.94 L1282.16 1201.94 L1281.58 1201.94 L1280.99 1201.94 L1280.4 1201.94 L1279.82 1201.94 L1279.23 1201.94 L1278.65 1201.94 L1278.06 1201.94 L1277.47 1201.94 L1276.89 1201.94 L1276.3 1201.94 L1275.71 1201.94 L1275.13 1201.94 L1274.54 1201.94 L1273.95 1201.94 L1273.37 1201.94 L1272.78 1201.94 L1272.19 1201.94 L1271.61 1201.94 L1271.02 1201.94 L1270.44 1201.94 L1269.85 1201.94 L1269.26 1201.94 L1268.68 1201.94 L1268.09 1201.94 L1267.5 1201.94 L1266.92 1201.94 L1266.33 1201.94 L1265.74 1201.94 L1265.16 1201.94 L1264.57 1201.94 L1263.98 1201.94 L1263.4 1201.94 L1262.81 1201.94 L1262.23 1201.94 L1261.64 1201.94 L1261.05 1201.94 L1260.47 1201.94 L1259.88 1201.94 L1259.29 1201.94 L1258.71 1201.94 L1258.12 1201.94 L1257.53 1201.94 L1256.95 1201.94 L1256.36 1201.94 L1255.78 1201.94 L1255.19 1201.94 L1254.6 1201.94 L1254.02 1201.94 L1253.43 1201.94 L1252.84 1201.94 L1252.26 1201.94 L1251.67 1201.94 L1251.08 1201.94 L1250.5 1201.94 L1249.91 1201.94 L1249.32 1201.94 L1248.74 1201.94 L1248.15 1201.94 L1247.57 1201.94 L1246.98 1201.94 L1246.39 1201.94 L1245.81 1201.94 L1245.22 1201.94 L1244.63 1201.94 L1244.05 1201.94 L1243.46 1201.94 L1242.87 1201.94 L1242.29 1201.94 L1241.7 1201.94 L1241.11 1201.94 L1240.53 1201.94 L1239.94 1201.94 L1239.36 1201.94 L1238.77 1201.94 L1238.18 1201.94 L1237.6 1201.94 L1237.01 1201.94 L1236.42 1201.94 L1235.84 1201.94 L1235.25 1201.94 L1234.66 1201.94 L1234.08 1201.94 L1233.49 1201.94 L1232.91 1201.94 L1232.32 1201.94 L1231.73 1201.94 L1231.15 1201.94 L1230.56 1201.94 L1229.97 1201.94 L1229.39 1201.94 L1228.8 1201.94 L1228.21 1201.94 L1227.63 1201.94 L1227.04 1201.94 L1226.45 1201.94 L1225.87 1201.94 L1225.28 1201.94 L1224.7 1201.94 L1224.11 1201.94 L1223.52 1201.94 L1222.94 1201.94 L1222.35 1201.94 L1221.76 1201.94 L1221.18 1201.94 L1220.59 1201.94 L1220 1201.94 L1219.42 1201.94 L1218.83 1201.94 L1218.24 1201.94 L1217.66 1201.94 L1217.07 1201.94 L1216.49 1201.94 L1215.9 1201.94 L1215.31 1201.94 L1214.73 1201.94 L1214.14 1201.94 L1213.55 1201.94 L1212.97 1201.94 L1212.38 1201.94 L1211.79 1201.94 L1211.21 1201.94 L1210.62 1201.94 L1210.03 1201.94 L1209.45 1201.94 L1208.86 1201.94 L1208.28 1201.94 L1207.69 1201.94 L1207.1 1201.94 L1206.52 1201.94 L1205.93 1201.94 L1205.34 1201.94 L1204.76 1201.94 L1204.17 1201.94 L1203.58 1201.94 L1203 1201.94 L1202.41 1201.94 L1201.83 1201.94 L1201.24 1201.94 L1200.65 1201.94 L1200.07 1201.94 L1199.48 1201.94 L1198.89 1201.94 L1198.31 1201.94 L1197.72 1201.94 L1197.13 1201.94 L1196.55 1201.94 L1195.96 1201.94 L1195.37 1201.94 L1194.79 1201.94 L1194.2 1201.94 L1193.62 1201.94 L1193.03 1201.94 L1192.44 1201.94 L1191.86 1201.94 L1191.27 1201.94 L1190.68 1201.94 L1190.1 1201.94 L1189.51 1201.94 L1188.92 1201.94 L1188.34 1201.94 L1187.75 1201.94 L1187.16 1201.94 L1186.58 1201.94 L1185.99 1201.94 L1185.41 1201.94 L1184.82 1201.94 L1184.23 1201.94 L1183.65 1201.94 L1183.06 1201.94 L1182.47 1201.94 L1181.89 1201.94 L1181.3 1201.94 L1180.71 1201.94 L1180.13 1201.94 L1179.54 1201.94 L1178.96 1201.94 L1178.37 1201.94 L1177.78 1201.94 L1177.2 1201.94 L1176.61 1201.94 L1176.02 1201.94 L1175.44 1201.94 L1174.85 1201.94 L1174.26 1201.94 L1173.68 1201.94 L1173.09 1201.94 L1172.5 1201.94 L1171.92 1201.94 L1171.33 1201.94 L1170.75 1201.94 L1170.16 1201.94 L1169.57 1201.94 L1168.99 1201.94 L1168.4 1201.94 L1167.81 1201.94 L1167.23 1201.94 L1166.64 1201.94 L1166.05 1201.94 L1165.47 1201.94 L1164.88 1201.94 L1164.29 1201.94 L1163.71 1201.94 L1163.12 1201.94 L1162.54 1201.94 L1161.95 1201.94 L1161.36 1201.94 L1160.78 1201.94 L1160.19 1201.94 L1159.6 1201.94 L1159.02 1201.94 L1158.43 1201.94 L1157.84 1201.94 L1157.26 1201.94 L1156.67 1201.94 L1156.09 1201.94 L1155.5 1201.94 L1154.91 1201.94 L1154.33 1201.94 L1153.74 1201.94 L1153.15 1201.94 L1152.57 1201.94 L1151.98 1201.94 L1151.39 1201.94 L1150.81 1201.94 L1150.22 1201.94 L1149.63 1201.94 L1149.05 1201.94 L1148.46 1201.94 L1147.88 1201.94 L1147.29 1201.94 L1146.7 1201.94 L1146.12 1201.94 L1145.53 1201.94 L1144.94 1201.94 L1144.36 1201.94 L1143.77 1201.94 L1143.18 1201.94 L1142.6 1201.94 L1142.01 1201.94 L1141.42 1201.94 L1140.84 1201.94 L1140.25 1201.94 L1139.67 1201.94 L1139.08 1201.94 L1138.49 1201.94 L1137.91 1201.94 L1137.32 1201.94 L1136.73 1201.94 L1136.15 1201.94 L1135.56 1201.94 L1134.97 1201.94 L1134.39 1201.94 L1133.8 1201.94 L1133.21 1201.94 L1132.63 1201.94 L1132.04 1201.94 L1131.46 1201.94 L1130.87 1201.94 L1130.28 1201.94 L1129.7 1201.94 L1129.11 1201.94 L1128.52 1201.94 L1127.94 1201.94 L1127.35 1201.94 L1126.76 1201.94 L1126.18 1201.94 L1125.59 1201.94 L1125.01 1201.94 L1124.42 1201.94 L1123.83 1201.94 L1123.25 1201.94 L1122.66 1201.94 L1122.07 1201.94 L1121.49 1201.94 L1120.9 1201.94 L1120.31 1201.94 L1119.73 1201.94 L1119.14 1201.94 L1118.55 1201.94 L1117.97 1201.94 L1117.38 1201.94 L1116.8 1201.94 L1116.21 1201.94 L1115.62 1201.94 L1115.04 1201.94 L1114.45 1201.94 L1113.86 1201.94 L1113.28 1201.94 L1112.69 1201.94 L1112.1 1201.94 L1111.52 1201.94 L1110.93 1201.94 L1110.34 1201.94 L1109.76 1201.94 L1109.17 1201.94 L1108.59 1201.94 L1108 1201.94 L1107.41 1201.94 L1106.83 1201.94 L1106.24 1201.94 L1105.65 1201.94 L1105.07 1201.94 L1104.48 1201.94 L1103.89 1201.94 L1103.31 1201.94 L1102.72 1201.94 L1102.14 1201.94 L1101.55 1201.94 L1100.96 1201.94 L1100.38 1201.94 L1099.79 1201.94 L1099.2 1201.94 L1098.62 1201.94 L1098.03 1201.94 L1097.44 1201.94 L1096.86 1201.94 L1096.27 1201.94 L1095.68 1201.94 L1095.1 1201.94 L1094.51 1201.94 L1093.93 1201.94 L1093.34 1201.94 L1092.75 1201.94 L1092.17 1201.94 L1091.58 1201.94 L1090.99 1201.94 L1090.41 1201.94 L1089.82 1201.94 L1089.23 1201.94 L1088.65 1201.94 L1088.06 1201.94 L1087.47 1201.94 L1086.89 1201.94 L1086.3 1201.94 L1085.72 1201.94 L1085.13 1201.94 L1084.54 1201.94 L1083.96 1201.94 L1083.37 1201.94 L1082.78 1201.94 L1082.2 1201.94 L1081.61 1201.94 L1081.02 1201.94 L1080.44 1201.94 L1079.85 1201.94 L1079.26 1201.94 L1078.68 1201.94 L1078.09 1201.94 L1077.51 1201.94 L1076.92 1201.94 L1076.33 1201.94 L1075.75 1201.94 L1075.16 1201.94 L1074.57 1201.94 L1073.99 1201.94 L1073.4 1201.94 L1072.81 1201.94 L1072.23 1201.94 L1071.64 1201.94 L1071.06 1201.94 L1070.47 1201.94 L1069.88 1201.94 L1069.3 1201.94 L1068.71 1201.94 L1068.12 1201.94 L1067.54 1201.94 L1066.95 1201.94 L1066.36 1201.94 L1065.78 1201.94 L1065.19 1201.94 L1064.6 1201.94 L1064.02 1201.94 L1063.43 1201.94 L1062.85 1201.94 L1062.26 1201.94 L1061.67 1201.94 L1061.09 1201.94 L1060.5 1201.94 L1059.91 1201.94 L1059.33 1201.94 L1058.74 1201.94 L1058.15 1201.94 L1057.57 1201.94 L1056.98 1201.94 L1056.39 1201.94 L1055.81 1201.94 L1055.22 1201.94 L1054.64 1201.94 L1054.05 1201.94 L1053.46 1201.94 L1052.88 1201.94 L1052.29 1201.94 L1051.7 1201.94 L1051.12 1201.94 L1050.53 1201.94 L1049.94 1201.94 L1049.36 1201.94 L1048.77 1201.94 L1048.19 1201.94 L1047.6 1201.94 L1047.01 1201.94 L1046.43 1201.94 L1045.84 1201.94 L1045.25 1201.94 L1044.67 1201.94 L1044.08 1201.94 L1043.49 1201.94 L1042.91 1201.94 L1042.32 1201.94 L1041.73 1201.94 L1041.15 1201.94 L1040.56 1201.94 L1039.98 1201.94 L1039.39 1201.94 L1038.8 1201.94 L1038.22 1201.94 L1037.63 1201.94 L1037.04 1201.94 L1036.46 1201.94 L1035.87 1201.94 L1035.28 1201.94 L1034.7 1201.94 L1034.11 1201.94 L1033.52 1201.94 L1032.94 1201.94 L1032.35 1201.94 L1031.77 1201.94 L1031.18 1201.94 L1030.59 1201.94 L1030.01 1201.94 L1029.42 1201.94 L1028.83 1201.94 L1028.25 1201.94 L1027.66 1201.94 L1027.07 1201.94 L1026.49 1201.94 L1025.9 1201.94 L1025.32 1201.94 L1024.73 1201.94 L1024.14 1201.94 L1023.56 1201.94 L1022.97 1201.94 L1022.38 1201.94 L1021.8 1201.94 L1021.21 1201.94 L1020.62 1201.94 L1020.04 1201.94 L1019.45 1201.94 L1018.86 1201.94 L1018.28 1201.94 L1017.69 1201.94 L1017.11 1201.94 L1016.52 1201.94 L1015.93 1201.94 L1015.35 1201.94 L1014.76 1201.94 L1014.17 1201.94 L1013.59 1201.94 L1013 1201.94 L1012.41 1201.94 L1011.83 1201.94 L1011.24 1201.94 L1010.65 1201.94 L1010.07 1201.94 L1009.48 1201.94 L1008.9 1201.94 L1008.31 1201.94 L1007.72 1201.94 L1007.14 1201.94 L1006.55 1201.94 L1005.96 1201.94 L1005.38 1201.94 L1004.79 1201.94 L1004.2 1201.94 L1003.62 1201.94 L1003.03 1201.94 L1002.44 1201.94 L1001.86 1201.94 L1001.27 1201.94 L1000.69 1201.94 L1000.1 1201.94 L999.513 1201.94 L998.926 1201.94 L998.34 1201.94 L997.754 1201.94 L997.167 1201.94 L996.581 1201.94 L995.994 1201.94 L995.408 1201.94 L994.822 1201.94 L994.235 1201.94 L993.649 1201.94 L993.062 1201.94 L992.476 1201.94 L991.889 1201.94 L991.303 1201.94 L990.717 1201.94 L990.13 1201.94 L989.544 1201.94 L988.957 1201.94 L988.371 1201.94 L987.785 1201.94 L987.198 1201.94 L986.612 1201.94 L986.025 1201.94  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1202.37 986.612,1202.37 987.198,1202.37 987.785,1202.37 988.371,1202.37 988.957,1202.37 989.544,1202.37 990.13,1202.37 990.717,1202.37 991.303,1202.37 991.889,1202.37 992.476,1202.37 993.062,1202.37 993.649,1202.37 994.235,1202.37 994.822,1202.37 995.408,1202.37 995.994,1202.37 996.581,1202.37 997.167,1202.37 997.754,1202.37 998.34,1202.37 998.926,1202.37 999.513,1202.37 1000.1,1202.37 1000.69,1202.37 1001.27,1202.37 1001.86,1202.37 1002.44,1202.37 1003.03,1202.37 1003.62,1202.37 1004.2,1202.37 1004.79,1202.37 1005.38,1202.37 1005.96,1202.37 1006.55,1202.37 1007.14,1202.37 1007.72,1202.37 1008.31,1202.37 1008.9,1202.37 1009.48,1202.37 1010.07,1202.37 1010.65,1202.37 1011.24,1202.37 1011.83,1202.37 1012.41,1202.37 1013,1202.37 1013.59,1202.37 1014.17,1202.37 1014.76,1202.37 1015.35,1202.37 1015.93,1202.37 1016.52,1202.37 1017.11,1202.37 1017.69,1202.37 1018.28,1202.37 1018.86,1202.37 1019.45,1202.37 1020.04,1202.37 1020.62,1202.37 1021.21,1202.37 1021.8,1202.37 1022.38,1202.37 1022.97,1202.37 1023.56,1202.37 1024.14,1202.37 1024.73,1202.37 1025.32,1202.37 1025.9,1202.37 1026.49,1202.37 1027.07,1202.37 1027.66,1202.37 1028.25,1202.37 1028.83,1202.37 1029.42,1202.37 1030.01,1202.37 1030.59,1202.37 1031.18,1202.37 1031.77,1202.37 1032.35,1202.37 1032.94,1202.37 1033.52,1202.37 1034.11,1202.37 1034.7,1202.37 1035.28,1202.37 1035.87,1202.37 1036.46,1202.37 1037.04,1202.37 1037.63,1202.37 1038.22,1202.37 1038.8,1202.37 1039.39,1202.37 1039.98,1202.37 1040.56,1202.37 1041.15,1202.37 1041.73,1202.37 1042.32,1202.37 1042.91,1202.37 1043.49,1202.37 1044.08,1202.37 1044.67,1202.37 1045.25,1202.37 1045.84,1202.37 1046.43,1202.37 1047.01,1202.37 1047.6,1202.37 1048.19,1202.37 1048.77,1202.37 1049.36,1202.37 1049.94,1202.37 1050.53,1202.37 1051.12,1202.37 1051.7,1202.37 1052.29,1202.37 1052.88,1202.37 1053.46,1202.37 1054.05,1202.37 1054.64,1202.37 1055.22,1202.37 1055.81,1202.37 1056.39,1202.37 1056.98,1202.37 1057.57,1202.37 1058.15,1202.37 1058.74,1202.37 1059.33,1202.37 1059.91,1202.37 1060.5,1202.37 1061.09,1202.37 1061.67,1202.37 1062.26,1202.37 1062.85,1202.37 1063.43,1202.37 1064.02,1202.37 1064.6,1202.37 1065.19,1202.37 1065.78,1202.37 1066.36,1202.37 1066.95,1202.37 1067.54,1202.37 1068.12,1202.37 1068.71,1202.37 1069.3,1202.37 1069.88,1202.37 1070.47,1202.37 1071.06,1202.37 1071.64,1202.37 1072.23,1202.37 1072.81,1202.37 1073.4,1202.37 1073.99,1202.37 1074.57,1202.37 1075.16,1202.37 1075.75,1202.37 1076.33,1202.37 1076.92,1202.37 1077.51,1202.37 1078.09,1202.37 1078.68,1202.37 1079.26,1202.37 1079.85,1202.37 1080.44,1202.37 1081.02,1202.37 1081.61,1202.37 1082.2,1202.37 1082.78,1202.37 1083.37,1202.37 1083.96,1202.37 1084.54,1202.37 1085.13,1202.37 1085.72,1202.37 1086.3,1202.37 1086.89,1202.37 1087.47,1202.37 1088.06,1202.37 1088.65,1202.37 1089.23,1202.37 1089.82,1202.37 1090.41,1202.37 1090.99,1202.37 1091.58,1202.37 1092.17,1202.37 1092.75,1202.37 1093.34,1202.37 1093.93,1202.37 1094.51,1202.37 1095.1,1202.37 1095.68,1202.37 1096.27,1202.37 1096.86,1202.37 1097.44,1202.37 1098.03,1202.37 1098.62,1202.37 1099.2,1202.37 1099.79,1202.37 1100.38,1202.37 1100.96,1202.37 1101.55,1202.37 1102.14,1202.37 1102.72,1202.37 1103.31,1202.37 1103.89,1202.37 1104.48,1202.37 1105.07,1202.37 1105.65,1202.37 1106.24,1202.37 1106.83,1202.37 1107.41,1202.37 1108,1202.37 1108.59,1202.37 1109.17,1202.37 1109.76,1202.37 1110.34,1202.37 1110.93,1202.37 1111.52,1202.37 1112.1,1202.37 1112.69,1202.37 1113.28,1202.37 1113.86,1202.37 1114.45,1202.37 1115.04,1202.37 1115.62,1202.37 1116.21,1202.37 1116.8,1202.37 1117.38,1202.37 1117.97,1202.37 1118.55,1202.37 1119.14,1202.37 1119.73,1202.37 1120.31,1202.37 1120.9,1202.37 1121.49,1202.37 1122.07,1202.37 1122.66,1202.37 1123.25,1202.37 1123.83,1202.37 1124.42,1202.37 1125.01,1202.37 1125.59,1202.37 1126.18,1202.37 1126.76,1202.37 1127.35,1202.37 1127.94,1202.37 1128.52,1202.37 1129.11,1202.37 1129.7,1202.37 1130.28,1202.37 1130.87,1202.37 1131.46,1202.37 1132.04,1202.37 1132.63,1202.37 1133.21,1202.37 1133.8,1202.37 1134.39,1202.37 1134.97,1202.37 1135.56,1202.37 1136.15,1202.37 1136.73,1202.37 1137.32,1202.37 1137.91,1202.37 1138.49,1202.37 1139.08,1202.37 1139.67,1202.37 1140.25,1202.37 1140.84,1202.37 1141.42,1202.37 1142.01,1202.37 1142.6,1202.37 1143.18,1202.37 1143.77,1202.37 1144.36,1202.37 1144.94,1202.37 1145.53,1202.37 1146.12,1202.37 1146.7,1202.37 1147.29,1202.37 1147.88,1202.37 1148.46,1202.37 1149.05,1202.37 1149.63,1202.37 1150.22,1202.37 1150.81,1202.37 1151.39,1202.37 1151.98,1202.37 1152.57,1202.37 1153.15,1202.37 1153.74,1202.37 1154.33,1202.37 1154.91,1202.37 1155.5,1202.37 1156.09,1202.37 1156.67,1202.37 1157.26,1202.37 1157.84,1202.37 1158.43,1202.37 1159.02,1202.37 1159.6,1202.37 1160.19,1202.37 1160.78,1202.37 1161.36,1202.37 1161.95,1202.37 1162.54,1202.37 1163.12,1202.37 1163.71,1202.37 1164.29,1202.37 1164.88,1202.37 1165.47,1202.37 1166.05,1202.37 1166.64,1202.37 1167.23,1202.37 1167.81,1202.37 1168.4,1202.37 1168.99,1202.37 1169.57,1202.37 1170.16,1202.37 1170.75,1202.37 1171.33,1202.37 1171.92,1202.37 1172.5,1202.37 1173.09,1202.37 1173.68,1202.37 1174.26,1202.37 1174.85,1202.37 1175.44,1202.37 1176.02,1202.37 1176.61,1202.37 1177.2,1202.37 1177.78,1202.37 1178.37,1202.37 1178.96,1202.37 1179.54,1202.37 1180.13,1202.37 1180.71,1202.37 1181.3,1202.37 1181.89,1202.37 1182.47,1202.37 1183.06,1202.37 1183.65,1202.37 1184.23,1202.37 1184.82,1202.37 1185.41,1202.37 1185.99,1202.37 1186.58,1202.37 1187.16,1202.37 1187.75,1202.37 1188.34,1202.37 1188.92,1202.37 1189.51,1202.37 1190.1,1202.37 1190.68,1202.37 1191.27,1202.37 1191.86,1202.37 1192.44,1202.37 1193.03,1202.37 1193.62,1202.37 1194.2,1202.37 1194.79,1202.37 1195.37,1202.37 1195.96,1202.37 1196.55,1202.37 1197.13,1202.37 1197.72,1202.37 1198.31,1202.37 1198.89,1202.37 1199.48,1202.37 1200.07,1202.37 1200.65,1202.37 1201.24,1202.37 1201.83,1202.37 1202.41,1202.37 1203,1202.37 1203.58,1202.37 1204.17,1202.37 1204.76,1202.37 1205.34,1202.37 1205.93,1202.37 1206.52,1202.37 1207.1,1202.37 1207.69,1202.37 1208.28,1202.37 1208.86,1202.37 1209.45,1202.37 1210.03,1202.37 1210.62,1202.37 1211.21,1202.37 1211.79,1202.37 1212.38,1202.37 1212.97,1202.37 1213.55,1202.37 1214.14,1202.37 1214.73,1202.37 1215.31,1202.37 1215.9,1202.37 1216.49,1202.37 1217.07,1202.37 1217.66,1202.37 1218.24,1202.37 1218.83,1202.37 1219.42,1202.37 1220,1202.37 1220.59,1202.37 1221.18,1202.37 1221.76,1202.37 1222.35,1202.37 1222.94,1202.37 1223.52,1202.37 1224.11,1202.37 1224.7,1202.37 1225.28,1202.37 1225.87,1202.37 1226.45,1202.37 1227.04,1202.37 1227.63,1202.37 1228.21,1202.37 1228.8,1202.37 1229.39,1202.37 1229.97,1202.37 1230.56,1202.37 1231.15,1202.37 1231.73,1202.37 1232.32,1202.37 1232.91,1202.37 1233.49,1202.37 1234.08,1202.37 1234.66,1202.37 1235.25,1202.37 1235.84,1202.37 1236.42,1202.37 1237.01,1202.37 1237.6,1202.37 1238.18,1202.37 1238.77,1202.37 1239.36,1202.37 1239.94,1202.37 1240.53,1202.37 1241.11,1202.37 1241.7,1202.37 1242.29,1202.37 1242.87,1202.37 1243.46,1202.37 1244.05,1202.37 1244.63,1202.37 1245.22,1202.37 1245.81,1202.37 1246.39,1202.37 1246.98,1202.37 1247.57,1202.37 1248.15,1202.37 1248.74,1202.37 1249.32,1202.37 1249.91,1202.37 1250.5,1202.37 1251.08,1202.37 1251.67,1202.37 1252.26,1202.37 1252.84,1202.37 1253.43,1202.37 1254.02,1202.37 1254.6,1202.37 1255.19,1202.37 1255.78,1202.37 1256.36,1202.37 1256.95,1202.37 1257.53,1202.37 1258.12,1202.37 1258.71,1202.37 1259.29,1202.37 1259.88,1202.37 1260.47,1202.37 1261.05,1202.37 1261.64,1202.37 1262.23,1202.37 1262.81,1202.37 1263.4,1202.37 1263.98,1202.37 1264.57,1202.37 1265.16,1202.37 1265.74,1202.37 1266.33,1202.37 1266.92,1202.37 1267.5,1202.37 1268.09,1202.37 1268.68,1202.37 1269.26,1202.37 1269.85,1202.37 1270.44,1202.37 1271.02,1202.37 1271.61,1202.37 1272.19,1202.37 1272.78,1202.37 1273.37,1202.37 1273.95,1202.37 1274.54,1202.37 1275.13,1202.37 1275.71,1202.37 1276.3,1202.37 1276.89,1202.37 1277.47,1202.37 1278.06,1202.37 1278.65,1202.37 1279.23,1202.37 1279.82,1202.37 1280.4,1202.37 1280.99,1202.37 1281.58,1202.37 1282.16,1202.37 1282.75,1202.37 1283.34,1202.37 1283.92,1202.37 1284.51,1202.37 1285.1,1202.37 1285.68,1202.37 1286.27,1202.37 1286.86,1202.37 1287.44,1202.37 1288.03,1202.37 1288.61,1202.37 1289.2,1202.37 1289.79,1202.37 1290.37,1202.37 1290.96,1202.37 1291.55,1202.37 1292.13,1202.37 1292.72,1202.37 1293.31,1202.37 1293.89,1202.37 1294.48,1202.37 1295.06,1202.37 1295.65,1202.37 1296.24,1202.37 1296.82,1202.37 1297.41,1202.37 1298,1202.37 1298.58,1202.37 1299.17,1202.37 1299.76,1202.37 1300.34,1202.37 1300.93,1202.37 1301.52,1202.37 1302.1,1202.37 1302.69,1202.37 1303.27,1202.37 1303.86,1202.37 1304.45,1202.37 1305.03,1202.37 1305.62,1202.37 1306.21,1202.37 1306.79,1202.37 1307.38,1202.37 1307.97,1202.37 1308.55,1202.37 1309.14,1202.37 1309.73,1202.37 1310.31,1202.37 1310.9,1202.37 1311.48,1202.37 1312.07,1202.37 1312.66,1202.37 1313.24,1202.37 1313.83,1202.37 1314.42,1202.37 1315,1202.37 1315.59,1202.37 1316.18,1202.37 1316.76,1202.37 1317.35,1202.37 1317.93,1202.37 1318.52,1202.37 1319.11,1202.37 1319.69,1202.37 1320.28,1202.37 1320.87,1202.37 1321.45,1202.37 1322.04,1202.37 1322.63,1202.37 1323.21,1202.37 1323.8,1202.37 1324.39,1202.37 1324.97,1202.37 1325.56,1202.37 1326.14,1202.37 1326.73,1202.37 1327.32,1202.37 1327.9,1202.37 1328.49,1202.37 1329.08,1202.37 1329.66,1202.37 1330.25,1202.37 1330.84,1202.37 1331.42,1202.37 1332.01,1202.37 1332.6,1202.37 1333.18,1202.37 1333.77,1202.37 1334.35,1202.37 1334.94,1202.37 1335.53,1202.37 1336.11,1202.37 1336.7,1202.37 1337.29,1202.37 1337.87,1202.37 1338.46,1202.37 1339.05,1202.37 1339.63,1202.37 1340.22,1202.37 1340.8,1202.37 1341.39,1202.37 1341.98,1202.37 1342.56,1202.37 1343.15,1202.37 1343.74,1202.37 1344.32,1202.37 1344.91,1202.37 1345.5,1202.37 1346.08,1202.37 1346.67,1202.37 1347.26,1202.37 1347.84,1202.37 1348.43,1202.37 1349.01,1202.37 1349.6,1202.37 1350.19,1202.37 1350.77,1202.37 1351.36,1202.37 1351.95,1202.37 1352.53,1202.37 1353.12,1202.37 1353.71,1202.37 1354.29,1202.37 1354.88,1202.37 1355.47,1202.37 1356.05,1202.37 1356.64,1202.37 1357.22,1202.37 1357.81,1202.37 1358.4,1202.37 1358.98,1202.37 1359.57,1202.37 1360.16,1202.37 1360.74,1202.37 1361.33,1202.37 1361.92,1202.37 1362.5,1202.37 1363.09,1202.37 1363.68,1202.37 1364.26,1202.37 1364.85,1202.37 1365.43,1202.37 1366.02,1202.37 1366.61,1202.37 1367.19,1202.37 1367.78,1202.37 1368.37,1202.37 1368.95,1202.37 1369.54,1202.37 1370.13,1202.37 1370.71,1202.37 1371.3,1202.37 1371.88,1202.37 1372.47,1202.37 1373.06,1202.37 1373.64,1202.37 1374.23,1202.37 1374.82,1202.37 1375.4,1202.37 1375.99,1202.37 1376.58,1202.37 1377.16,1202.37 1377.75,1202.37 1378.34,1202.37 1378.92,1202.37 1379.51,1202.37 1380.09,1202.37 1380.68,1202.37 1381.27,1202.37 1381.85,1202.37 1382.44,1202.37 1383.03,1202.37 1383.61,1202.37 1384.2,1202.37 1384.79,1202.37 1385.37,1202.37 1385.96,1202.37 1386.55,1202.37 1387.13,1202.37 1387.72,1202.37 1388.3,1202.37 1388.89,1202.37 1389.48,1202.37 1390.06,1202.37 1390.65,1202.37 1391.24,1202.37 1391.82,1202.37 1392.41,1202.37 1393,1202.37 1393.58,1202.37 1394.17,1202.37 1394.75,1202.37 1395.34,1202.37 1395.93,1202.37 1396.51,1202.37 1397.1,1202.37 1397.69,1202.37 1398.27,1202.37 1398.86,1202.37 1399.45,1202.37 1400.03,1202.37 1400.62,1202.37 1401.21,1202.37 1401.79,1202.37 1402.38,1202.37 1402.96,1202.37 1403.55,1202.37 1404.14,1202.37 1404.72,1202.37 1405.31,1202.37 1405.9,1202.37 1406.48,1202.37 1407.07,1202.37 1407.66,1202.37 1408.24,1202.37 1408.83,1202.37 1409.42,1202.37 1410,1202.37 1410.59,1202.37 1411.17,1202.37 1411.76,1202.37 1412.35,1202.37 1412.93,1202.37 1413.52,1202.37 1414.11,1202.37 1414.69,1202.37 1415.28,1202.37 1415.87,1202.37 1416.45,1202.37 1417.04,1202.37 1417.63,1202.37 1418.21,1202.37 1418.8,1202.37 1419.38,1202.37 1419.97,1202.37 1420.56,1202.37 1421.14,1202.37 1421.73,1202.37 1422.32,1202.37 1422.9,1202.37 1423.49,1202.37 1424.08,1202.37 1424.66,1202.37 1425.25,1202.37 1425.83,1202.37 1426.42,1202.37 1427.01,1202.37 1427.59,1202.37 1428.18,1202.37 1428.77,1202.37 1429.35,1202.37 1429.94,1202.37 1430.53,1202.37 1431.11,1202.37 1431.7,1202.37 1432.29,1202.37 1432.87,1202.37 1433.46,1202.37 1434.04,1202.37 1434.63,1202.37 1435.22,1202.37 1435.8,1202.37 1436.39,1202.37 1436.98,1202.37 1437.56,1202.37 1438.15,1202.37 1438.74,1202.37 1439.32,1202.37 1439.91,1202.37 1440.5,1202.37 1441.08,1202.37 1441.67,1202.37 1442.25,1202.37 1442.84,1202.37 1443.43,1202.37 1444.01,1202.37 1444.6,1202.37 1445.19,1202.37 1445.77,1202.37 1446.36,1202.37 1446.95,1202.37 1447.53,1202.37 1448.12,1202.37 1448.7,1202.37 1449.29,1202.37 1449.88,1202.37 1450.46,1202.37 1451.05,1202.37 1451.64,1202.37 1452.22,1202.37 1452.81,1202.37 1453.4,1202.37 1453.98,1202.37 1454.57,1202.37 1455.16,1202.37 1455.74,1202.37 1456.33,1202.37 1456.91,1202.37 1457.5,1202.37 1458.09,1202.37 1458.67,1202.37 1459.26,1202.37 1459.85,1202.37 1460.43,1202.37 1461.02,1202.37 1461.61,1202.37 1462.19,1202.37 1462.78,1202.37 1463.37,1202.37 1463.95,1202.37 1464.54,1202.37 1465.12,1202.37 1465.71,1202.37 1466.3,1202.37 1466.88,1202.37 1467.47,1202.37 1468.06,1202.37 1468.64,1202.37 1469.23,1202.37 1469.82,1202.37 1470.4,1202.37 1470.99,1202.37 1471.57,1202.37 1472.16,1202.37 1472.75,1202.37 1473.33,1202.37 1473.92,1202.37 1474.51,1202.37 1475.09,1202.37 1475.68,1202.37 1476.27,1202.37 1476.85,1202.37 1477.44,1202.37 1478.03,1202.37 1478.61,1202.37 1479.2,1202.37 1479.78,1202.37 1480.37,1202.37 1480.96,1202.37 1481.54,1202.37 1482.13,1202.37 1482.72,1202.37 1483.3,1202.37 1483.89,1202.37 1484.48,1202.37 1485.06,1202.37 1485.65,1202.37 1486.24,1202.37 1486.82,1202.37 1487.41,1202.37 1487.99,1202.37 1488.58,1202.37 1489.17,1202.37 1489.75,1202.37 1490.34,1202.37 1490.93,1202.37 1491.51,1202.37 1492.1,1202.37 1492.69,1202.37 1493.27,1202.37 1493.86,1202.37 1494.45,1202.37 1495.03,1202.37 1495.62,1202.37 1496.2,1202.37 1496.79,1202.37 1497.38,1202.37 1497.96,1202.37 1498.55,1202.37 1499.14,1202.37 1499.72,1202.37 1500.31,1202.37 1500.9,1202.37 1501.48,1202.37 1502.07,1202.37 1502.65,1202.37 1503.24,1202.37 1503.83,1202.37 1504.41,1202.37 1505,1202.37 1505.59,1202.37 1506.17,1202.37 1506.76,1202.37 1507.35,1202.37 1507.93,1202.37 1508.52,1202.37 1509.11,1202.37 1509.69,1202.37 1510.28,1202.37 1510.86,1202.37 1511.45,1202.37 1512.04,1202.37 1512.62,1202.37 1513.21,1202.37 1513.8,1202.37 1514.38,1202.37 1514.97,1202.37 1515.56,1202.37 1516.14,1202.37 1516.73,1202.37 1517.32,1202.37 1517.9,1202.37 1518.49,1202.37 1519.07,1202.37 1519.66,1202.37 1520.25,1202.37 1520.83,1202.37 1521.42,1202.37 1522.01,1202.37 1522.59,1202.37 1523.18,1202.37 1523.77,1202.37 1524.35,1202.37 1524.94,1202.37 1525.52,1202.37 1526.11,1202.37 1526.7,1202.37 1527.28,1202.37 1527.87,1202.37 1528.46,1202.37 1529.04,1202.37 1529.63,1202.37 1530.22,1202.37 1530.8,1202.37 1531.39,1202.37 1531.98,1202.37 1532.56,1202.37 1533.15,1202.37 1533.73,1202.37 1534.32,1202.37 1534.91,1202.37 1535.49,1202.37 1536.08,1202.37 1536.67,1202.37 1537.25,1202.37 1537.84,1202.37 1538.43,1202.37 1539.01,1202.37 1539.6,1202.37 1540.19,1202.37 1540.77,1202.37 1541.36,1202.37 1541.94,1202.37 1542.53,1202.37 1543.12,1202.37 1543.7,1202.37 1544.29,1202.37 1544.88,1202.37 1545.46,1202.37 1546.05,1202.37 1546.64,1202.37 1547.22,1202.37 1547.81,1202.37 1548.4,1202.37 1548.98,1202.37 1549.57,1202.37 1550.15,1202.37 1550.74,1202.37 1551.33,1202.37 1551.91,1202.37 1552.5,1202.37 1553.09,1202.37 1553.67,1202.37 1554.26,1202.37 1554.85,1202.37 1555.43,1202.37 1556.02,1202.37 1556.6,1202.37 1557.19,1202.37 1557.78,1202.37 1558.36,1202.37 1558.95,1202.37 1559.54,1202.37 1560.12,1202.37 1560.71,1202.37 1561.3,1202.37 1561.88,1202.37 1562.47,1202.37 1563.06,1202.37 1563.64,1202.37 1564.23,1202.37 1564.81,1202.37 1565.4,1202.37 1565.99,1202.37 1566.57,1202.37 1567.16,1202.37 1567.75,1202.37 1568.33,1202.37 1568.92,1202.37 1569.51,1202.37 1570.09,1202.37 1570.68,1202.37 1571.27,1202.37 1571.85,1202.37 1572.44,1202.37 1573.02,1202.37 1573.61,1202.37 1574.2,1202.37 1574.78,1202.37 1575.37,1202.37 1575.96,1202.37 1576.54,1202.37 1577.13,1202.37 1577.72,1202.37 1578.3,1202.37 1578.89,1202.37 1579.47,1202.37 1580.06,1202.37 1580.65,1202.37 1581.23,1202.37 1581.82,1202.37 1582.41,1202.37 1582.99,1202.37 1583.58,1202.37 1584.17,1202.37 1584.75,1202.37 1585.34,1202.37 1585.93,1202.37 1586.51,1202.37 1587.1,1202.37 1587.68,1202.37 1588.27,1202.37 1588.86,1202.37 1589.44,1202.37 1590.03,1202.37 1590.62,1202.37 1591.2,1202.37 1591.79,1202.37 1592.38,1202.37 1592.96,1202.37 1593.55,1202.37 1594.14,1202.37 1594.72,1202.37 1595.31,1202.37 1595.89,1202.37 1596.48,1202.37 1597.07,1202.37 1597.65,1202.37 1598.24,1202.37 1598.83,1202.37 1599.41,1202.37 1600,1202.37 1600.59,1202.37 1601.17,1202.37 1601.76,1202.37 1602.34,1202.37 1602.93,1202.37 1603.52,1202.37 1604.1,1202.37 1604.69,1202.37 1605.28,1202.37 1605.86,1202.37 1606.45,1202.37 1607.04,1202.37 1607.62,1202.37 1608.21,1202.37 1608.8,1202.37 1609.38,1202.37 1609.97,1202.37 1610.55,1202.37 1611.14,1202.37 1611.73,1202.37 1612.31,1202.37 1612.9,1202.37 1613.49,1202.37 1614.07,1202.37 1614.66,1202.37 1615.25,1202.37 1615.83,1202.37 1616.42,1202.37 1617.01,1202.37 1617.59,1202.37 1618.18,1202.37 1618.76,1202.37 1619.35,1202.37 1619.94,1202.37 1620.52,1202.37 1621.11,1202.37 1621.7,1202.37 1622.28,1202.37 1622.87,1202.37 1623.46,1202.37 1624.04,1202.37 1624.63,1202.37 1625.22,1202.37 1625.8,1202.37 1626.39,1202.37 1626.97,1202.37 1627.56,1202.37 1628.15,1202.37 1628.73,1202.37 1629.32,1202.37 1629.91,1202.37 1630.49,1202.37 1631.08,1202.37 1631.67,1202.37 1632.25,1202.37 1632.84,1202.37 1633.42,1202.37 1634.01,1202.37 1634.6,1202.37 1635.18,1202.37 1635.77,1202.37 1636.36,1202.37 1636.94,1202.37 1637.53,1202.37 1638.12,1202.37 1638.7,1202.37 1639.29,1202.37 1639.88,1202.37 1640.46,1202.37 1641.05,1202.37 1641.63,1202.37 1642.22,1202.37 1642.81,1202.37 1643.39,1202.37 1643.98,1202.37 1644.57,1202.37 1645.15,1202.37 1645.74,1202.37 1646.33,1202.37 1646.91,1202.37 1647.5,1202.37 1648.09,1202.37 1648.67,1202.37 1649.26,1202.37 1649.84,1202.37 1650.43,1202.37 1651.02,1202.37 1651.6,1202.37 1652.19,1202.37 1652.78,1202.37 1653.36,1202.37 1653.95,1202.37 1654.54,1202.37 1655.12,1202.37 1655.71,1202.37 1656.29,1202.37 1656.88,1202.37 1657.47,1202.37 1658.05,1202.37 1658.64,1202.37 1659.23,1202.37 1659.81,1202.37 1660.4,1202.37 1660.99,1202.37 1661.57,1202.37 1662.16,1202.37 1662.75,1202.37 1663.33,1202.37 1663.92,1202.37 1664.5,1202.37 1665.09,1202.37 1665.68,1202.37 1666.26,1202.37 1666.85,1202.37 1667.44,1202.37 1668.02,1202.37 1668.61,1202.37 1669.2,1202.37 1669.78,1202.37 1670.37,1202.37 1670.96,1202.37 1671.54,1202.37 1672.13,1202.37 1672.71,1202.37 1673.3,1202.37 1673.89,1202.37 1674.47,1202.37 1675.06,1202.37 1675.65,1202.37 1676.23,1202.37 1676.82,1202.37 1677.41,1202.37 1677.99,1202.37 1678.58,1202.37 1679.17,1202.37 1679.75,1202.37 1680.34,1202.37 1680.92,1202.37 1681.51,1202.37 1682.1,1202.37 1682.68,1202.37 1683.27,1202.37 1683.86,1202.37 1684.44,1202.37 1685.03,1202.37 1685.62,1202.37 1686.2,1202.37 1686.79,1202.37 1687.37,1202.37 1687.96,1202.37 1688.55,1202.37 1689.13,1202.37 1689.72,1202.37 1690.31,1202.37 1690.89,1202.37 1691.48,1202.37 1692.07,1202.37 1692.65,1202.37 1693.24,1202.37 1693.83,1202.37 1694.41,1202.37 1695,1202.37 1695.58,1202.37 1696.17,1202.37 1696.76,1202.37 1697.34,1202.37 1697.93,1202.37 1698.52,1202.37 1699.1,1202.37 1699.69,1202.37 1700.28,1202.37 1700.86,1202.37 1701.45,1202.37 1702.04,1202.37 1702.62,1202.37 1703.21,1202.37 1703.79,1202.37 1704.38,1202.37 1704.97,1202.37 1705.55,1202.37 1706.14,1202.37 1706.73,1202.37 1707.31,1202.37 1707.9,1202.37 1708.49,1202.37 1709.07,1202.37 1709.66,1202.37 1710.24,1202.37 1710.83,1202.37 1711.42,1202.37 1712,1202.37 1712.59,1202.37 1713.18,1202.37 1713.76,1202.37 1714.35,1202.37 1714.94,1202.37 1715.52,1202.37 1716.11,1202.37 1716.7,1202.37 1717.28,1202.37 1717.87,1202.37 1718.45,1202.37 1719.04,1202.37 1719.63,1202.37 1720.21,1202.37 1720.8,1202.37 1721.39,1202.37 1721.97,1202.37 1722.56,1202.37 1723.15,1202.37 1723.73,1202.37 1724.32,1202.37 1724.91,1202.37 1725.49,1202.37 1726.08,1202.37 1726.66,1202.37 1727.25,1202.37 1727.84,1202.37 1728.42,1202.37 1729.01,1202.37 1729.6,1202.37 1730.18,1202.37 1730.77,1202.37 1731.36,1202.37 1731.94,1202.37 1732.53,1202.37 1733.11,1202.37 1733.7,1202.37 1734.29,1202.37 1734.87,1202.37 1735.46,1202.37 1736.05,1202.37 1736.63,1202.37 1737.22,1202.37 1737.81,1202.37 1738.39,1202.37 1738.98,1202.37 1739.57,1202.37 1740.15,1202.37 1740.74,1202.37 1741.32,1202.37 1741.91,1202.37 1742.5,1202.37 1743.08,1202.37 1743.67,1202.37 1744.26,1202.37 1744.84,1202.37 1745.43,1202.37 1746.02,1202.37 1746.6,1202.37 1747.19,1202.37 1747.78,1202.37 1748.36,1202.37 1748.95,1202.37 1749.53,1202.37 1750.12,1202.37 1750.71,1202.37 1751.29,1202.37 1751.88,1202.37 1752.47,1202.37 1753.05,1202.37 1753.64,1202.37 1754.23,1202.37 1754.81,1202.37 1755.4,1202.37 1755.99,1202.37 1756.57,1202.37 1757.16,1202.37 1757.74,1202.37 1758.33,1202.37 1758.92,1202.37 1759.5,1202.37 1760.09,1202.37 1760.68,1202.37 1761.26,1202.37 1761.85,1202.37 1762.44,1202.37 1763.02,1202.37 1763.61,1202.37 1764.19,1202.37 1764.78,1202.37 1765.37,1202.37 1765.95,1202.37 1766.54,1202.37 1767.13,1202.37 1767.71,1202.37 1768.3,1202.37 1768.89,1202.37 1769.47,1202.37 1770.06,1202.37 1770.65,1202.37 1771.23,1202.37 1771.82,1202.37 1772.4,1202.37 1772.99,1202.37 1773.58,1202.37 1774.16,1202.37 1774.75,1202.37 1775.34,1202.37 1775.92,1202.37 1776.51,1202.37 1777.1,1202.37 1777.68,1202.37 1778.27,1202.37 1778.86,1202.37 1779.44,1202.37 1780.03,1202.37 1780.61,1202.37 1781.2,1202.37 1781.79,1202.37 1782.37,1202.37 1782.96,1202.37 1783.55,1202.37 1784.13,1202.37 1784.72,1202.37 1785.31,1202.37 1785.89,1202.37 1786.48,1202.37 1787.06,1202.37 1787.65,1202.37 1788.24,1202.37 1788.82,1202.37 1789.41,1202.37 1790,1202.37 1790.58,1202.37 1791.17,1202.37 1791.76,1202.37 1792.34,1202.37 1792.93,1202.37 1793.52,1202.37 1794.1,1202.37 1794.69,1202.37 1795.27,1202.37 1795.86,1202.37 1796.45,1202.37 1797.03,1202.37 1797.62,1202.37 1798.21,1202.37 1798.79,1202.37 1799.38,1202.37 1799.97,1202.37 1800.55,1202.37 1801.14,1202.37 1801.73,1202.37 1802.31,1202.37 1802.9,1202.37 1803.48,1202.37 1804.07,1202.37 1804.66,1202.37 1805.24,1202.37 1805.83,1202.37 1806.42,1202.37 1807,1202.37 1807.59,1202.37 1808.18,1202.37 1808.76,1202.37 1809.35,1202.37 1809.94,1202.37 1810.52,1202.37 1811.11,1202.37 1811.69,1202.37 1812.28,1202.37 1812.87,1202.37 1813.45,1202.37 1814.04,1202.37 1814.63,1202.37 1815.21,1202.37 1815.8,1202.37 1816.39,1202.37 1816.97,1202.37 1817.56,1202.37 1818.14,1202.37 1818.73,1202.37 1819.32,1202.37 1819.9,1202.37 1820.49,1202.37 1821.08,1202.37 1821.66,1202.37 1822.25,1202.37 1822.84,1202.37 1823.42,1202.37 1824.01,1202.37 1824.6,1202.37 1825.18,1202.37 1825.77,1202.37 1826.35,1202.37 1826.94,1202.37 1827.53,1202.37 1828.11,1202.37 1828.7,1202.37 1829.29,1202.37 1829.87,1202.37 1830.46,1202.37 1831.05,1202.37 1831.63,1202.37 1832.22,1202.37 1832.81,1202.37 1833.39,1202.37 1833.98,1202.37 1834.56,1202.37 1835.15,1202.37 1835.74,1202.37 1836.32,1202.37 1836.91,1202.37 1837.5,1202.37 1838.08,1202.37 1838.67,1202.37 1839.26,1202.37 1839.84,1202.37 1840.43,1202.37 1841.01,1202.37 1841.6,1202.37 1842.19,1202.37 1842.77,1202.37 1843.36,1202.37 1843.95,1202.37 1844.53,1202.37 1845.12,1202.37 1845.71,1202.37 1846.29,1202.37 1846.88,1202.37 1847.47,1202.37 1848.05,1202.37 1848.64,1202.37 1849.22,1202.37 1849.81,1202.37 1850.4,1202.37 1850.98,1202.37 1851.57,1202.37 1852.16,1202.37 1852.74,1202.37 1853.33,1202.37 1853.92,1202.37 1854.5,1202.37 1855.09,1202.37 1855.68,1202.37 1856.26,1202.37 1856.85,1202.37 1857.43,1202.37 1858.02,1202.37 1858.61,1202.37 1859.19,1202.37 1859.78,1202.37 1860.37,1202.37 1860.95,1202.37 1861.54,1202.37 1862.13,1202.37 1862.71,1202.37 1863.3,1202.37 1863.88,1202.37 1864.47,1202.37 1865.06,1202.37 1865.64,1202.37 1866.23,1202.37 1866.82,1202.37 1867.4,1202.37 1867.99,1202.37 1868.58,1202.37 1869.16,1202.37 1869.75,1202.37 1870.34,1202.37 1870.92,1202.37 1871.51,1202.37 1872.09,1202.37 1872.68,1202.37 1873.27,1202.37 1873.85,1202.37 1874.44,1202.37 1875.03,1202.37 1875.61,1202.37 1876.2,1202.37 1876.79,1202.37 1877.37,1202.37 1877.96,1202.37 1878.55,1202.37 1879.13,1202.37 1879.72,1202.37 1880.3,1202.37 1880.89,1202.37 1881.48,1202.37 1882.06,1202.37 1882.65,1202.37 1883.24,1202.37 1883.82,1202.37 1884.41,1202.37 1885,1202.37 1885.58,1202.37 1886.17,1202.37 1886.76,1202.37 1887.34,1202.37 1887.93,1202.37 1888.51,1202.37 1889.1,1202.37 1889.69,1202.37 1890.27,1202.37 1890.86,1202.37 1891.45,1202.37 1892.03,1202.37 1892.62,1202.37 1893.21,1202.37 1893.79,1202.37 1894.38,1202.37 1894.96,1202.37 1895.55,1202.37 1896.14,1202.37 1896.72,1202.37 1897.31,1202.37 1897.9,1202.37 1898.48,1202.37 1899.07,1202.37 1899.66,1202.37 1900.24,1202.37 1900.83,1202.37 1901.42,1202.37 1902,1202.37 1902.59,1202.37 1903.17,1202.37 1903.76,1202.37 1904.35,1202.37 1904.93,1202.37 1905.52,1202.37 1906.11,1202.37 1906.69,1202.37 1907.28,1202.37 1907.87,1202.37 1908.45,1202.37 1909.04,1202.37 1909.63,1202.37 1910.21,1202.37 1910.8,1202.37 1911.38,1202.37 1911.97,1202.37 1912.56,1202.37 1913.14,1202.37 1913.73,1202.37 1914.32,1202.37 1914.9,1202.37 1915.49,1202.37 1916.08,1202.37 1916.66,1202.37 1917.25,1202.37 1917.83,1202.37 1918.42,1202.37 1919.01,1202.37 1919.59,1202.37 1920.18,1202.37 1920.77,1202.37 1921.35,1202.37 1921.94,1202.37 1922.53,1202.37 1923.11,1202.37 1923.7,1202.37 1924.29,1202.37 1924.87,1202.37 1925.46,1202.37 1926.04,1202.37 1926.63,1202.37 1927.22,1202.37 1927.8,1202.37 1928.39,1202.37 1928.98,1202.37 1929.56,1202.37 1930.15,1202.37 1930.74,1202.37 1931.32,1202.37 1931.91,1202.37 1932.5,1202.37 1933.08,1202.37 1933.67,1202.37 1934.25,1202.37 1934.84,1202.37 1935.43,1202.37 1936.01,1202.37 1936.6,1202.37 1937.19,1202.37 1937.77,1202.37 1938.36,1202.37 1938.95,1202.37 1939.53,1202.37 1940.12,1202.37 1940.71,1202.37 1941.29,1202.37 1941.88,1202.37 1942.46,1202.37 1943.05,1202.37 1943.64,1202.37 1944.22,1202.37 1944.81,1202.37 1945.4,1202.37 1945.98,1202.37 1946.57,1202.37 1947.16,1202.37 1947.74,1202.37 1948.33,1202.37 1948.91,1202.37 1949.5,1202.37 1950.09,1202.37 1950.67,1202.37 1951.26,1202.37 1951.85,1202.37 1952.43,1202.37 1953.02,1202.37 1953.61,1202.37 1954.19,1202.37 1954.78,1202.37 1955.37,1202.37 1955.95,1202.37 1956.54,1202.37 1957.12,1202.37 1957.71,1202.37 1958.3,1202.37 1958.88,1202.37 1959.47,1202.37 1960.06,1202.37 1960.64,1202.37 1961.23,1202.37 1961.82,1202.37 1962.4,1202.37 1962.99,1202.37 1963.58,1202.37 1964.16,1202.37 1964.75,1202.37 1965.33,1202.37 1965.92,1202.37 1966.51,1202.37 1967.09,1202.37 1967.68,1202.37 1968.27,1202.37 1968.85,1202.37 1969.44,1202.37 1970.03,1202.37 1970.61,1202.37 1971.2,1202.37 1971.78,1202.37 1972.37,1202.37 1972.96,1202.37 1973.54,1202.37 1974.13,1202.37 1974.72,1202.37 1975.3,1202.37 1975.89,1202.37 1976.48,1202.37 1977.06,1202.37 1977.65,1202.37 1978.24,1202.37 1978.82,1202.37 1979.41,1202.37 1979.99,1202.37 1980.58,1202.37 1981.17,1202.37 1981.75,1202.37 1982.34,1202.37 1982.93,1202.37 1983.51,1202.37 1984.1,1202.37 1984.69,1202.37 1985.27,1202.37 1985.86,1202.37 1986.45,1202.37 1987.03,1202.37 1987.62,1202.37 1988.2,1202.37 1988.79,1202.37 1989.38,1202.37 1989.96,1202.37 1990.55,1202.37 1991.14,1202.37 1991.72,1202.37 1992.31,1202.37 1992.9,1202.37 1993.48,1202.37 1994.07,1202.37 1994.65,1202.37 1995.24,1202.37 1995.83,1202.37 1996.41,1202.37 1997,1202.37 1997.59,1202.37 1998.17,1202.37 1998.76,1202.37 1999.35,1202.37 1999.93,1202.37 2000.52,1202.37 2001.11,1202.37 2001.69,1202.37 2002.28,1202.37 2002.86,1202.37 2003.45,1202.37 2004.04,1202.37 2004.62,1202.37 2005.21,1202.37 2005.8,1202.37 2006.38,1202.37 2006.97,1202.37 2007.56,1202.37 2008.14,1202.37 2008.73,1202.37 2009.32,1202.37 2009.9,1202.37 2010.49,1202.37 2011.07,1202.37 2011.66,1202.37 2012.25,1202.37 2012.83,1202.37 2013.42,1202.37 2014.01,1202.37 2014.59,1202.37 2015.18,1202.37 2015.77,1202.37 2016.35,1202.37 2016.94,1202.37 2017.53,1202.37 2018.11,1202.37 2018.7,1202.37 2019.28,1202.37 2019.87,1202.37 2020.46,1202.37 2021.04,1202.37 2021.63,1202.37 2022.22,1202.37 2022.8,1202.37 2023.39,1202.37 2023.98,1202.37 2024.56,1202.37 2025.15,1202.37 2025.73,1202.37 2026.32,1202.37 2026.91,1202.37 2027.49,1202.37 2028.08,1202.37 2028.67,1202.37 2029.25,1202.37 2029.84,1202.37 2030.43,1202.37 2031.01,1202.37 2031.6,1202.37 2032.19,1202.37 2032.77,1202.37 2033.36,1202.37 2033.94,1202.37 2034.53,1202.37 2035.12,1202.37 2035.7,1202.37 2036.29,1202.37 2036.88,1202.37 2037.46,1202.37 2038.05,1202.37 2038.64,1202.37 2039.22,1202.37 2039.81,1202.37 2040.4,1202.37 2040.98,1202.37 2041.57,1202.37 2042.15,1202.37 2042.74,1202.37 2043.33,1202.37 2043.91,1202.37 2044.5,1202.37 2045.09,1202.37 2045.67,1202.37 2046.26,1202.37 2046.85,1202.37 2047.43,1202.37 2048.02,1202.37 2048.6,1202.37 2049.19,1202.37 2049.78,1202.37 2050.36,1202.37 2050.95,1202.37 2051.54,1202.37 2052.12,1202.37 2052.71,1202.37 2053.3,1202.37 2053.88,1202.37 2054.47,1202.37 2055.06,1202.37 2055.64,1202.37 2056.23,1202.37 2056.81,1202.37 2057.4,1202.37 2057.99,1202.37 2058.57,1202.37 2059.16,1202.37 2059.75,1202.37 2060.33,1202.37 2060.92,1202.37 2061.51,1202.37 2062.09,1202.37 2062.68,1202.37 2063.27,1202.37 2063.85,1202.37 2064.44,1202.37 2065.02,1202.37 2065.61,1202.37 2066.2,1202.37 2066.78,1202.37 2067.37,1202.37 2067.96,1202.37 2068.54,1202.37 2069.13,1202.37 2069.72,1202.37 2070.3,1202.37 2070.89,1202.37 2071.48,1202.37 2072.06,1202.37 2072.65,1202.37 2073.23,1202.37 2073.82,1202.37 2074.41,1202.37 2074.99,1202.37 2075.58,1202.37 2076.17,1202.37 2076.75,1202.37 2077.34,1202.37 2077.93,1202.37 2078.51,1202.37 2079.1,1202.37 2079.68,1202.37 2080.27,1202.37 2080.86,1202.37 2081.44,1202.37 2082.03,1202.37 2082.62,1202.37 2083.2,1202.37 2083.79,1202.37 2084.38,1202.37 2084.96,1202.37 2085.55,1202.37 2086.14,1202.37 2086.72,1202.37 2087.31,1202.37 2087.89,1202.37 2088.48,1202.37 2089.07,1202.37 2089.65,1202.37 2090.24,1202.37 2090.83,1202.37 2091.41,1202.37 2092,1202.37 2092.59,1202.37 2093.17,1202.37 2093.76,1202.37 2094.35,1202.37 2094.93,1202.37 2095.52,1202.37 2096.1,1202.37 2096.69,1202.37 2097.28,1202.37 2097.86,1202.37 2098.45,1202.37 2099.04,1202.37 2099.62,1202.37 2100.21,1202.37 2100.8,1202.37 2101.38,1202.37 2101.97,1202.37 2102.55,1202.37 2103.14,1202.37 2103.73,1202.37 2104.31,1202.37 2104.9,1202.37 2105.49,1202.37 2106.07,1202.37 2106.66,1202.37 2107.25,1202.37 2107.83,1202.37 2108.42,1202.37 2109.01,1202.37 2109.59,1202.37 2110.18,1202.37 2110.76,1202.37 2111.35,1202.37 2111.94,1202.37 2112.52,1202.37 2113.11,1202.37 2113.7,1202.37 2114.28,1202.37 2114.87,1202.37 2115.46,1202.37 2116.04,1202.37 2116.63,1202.37 2117.22,1202.37 2117.8,1202.37 2118.39,1202.37 2118.97,1202.37 2119.56,1202.37 2120.15,1202.37 2120.73,1202.37 2121.32,1202.37 2121.91,1202.37 2122.49,1202.37 2123.08,1202.37 2123.67,1202.37 2124.25,1202.37 2124.84,1202.37 2125.42,1202.37 2126.01,1202.37 2126.6,1202.37 2127.18,1202.37 2127.77,1202.37 2128.36,1202.37 2128.94,1202.37 2129.53,1202.37 2130.12,1202.37 2130.7,1202.37 2131.29,1202.37 2131.88,1202.37 2132.46,1202.37 2133.05,1202.37 2133.63,1202.37 2134.22,1202.37 2134.81,1202.37 2135.39,1202.37 2135.98,1202.37 2136.57,1202.37 2137.15,1202.37 2137.74,1202.37 2138.33,1202.37 2138.91,1202.37 2139.5,1202.37 2140.09,1202.37 2140.67,1202.37 2141.26,1202.37 2141.84,1202.37 2142.43,1202.37 2143.02,1202.37 2143.6,1202.37 2144.19,1202.37 2144.78,1202.37 2145.36,1202.37 2145.95,1202.37 2146.54,1202.37 2147.12,1202.37 2147.71,1202.37 2148.3,1202.37 2148.88,1202.37 2149.47,1202.37 2150.05,1202.37 2150.64,1202.37 2151.23,1202.37 2151.81,1202.37 2152.4,1202.37 2152.99,1202.37 2153.57,1202.37 2154.16,1202.37 2154.75,1202.37 2155.33,1202.37 2155.92,1202.37 2156.5,1202.37 2157.09,1202.37 2157.68,1202.37 2158.26,1202.37 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1202.09 L986.612 1202.09 L987.198 1202.09 L987.785 1202.09 L988.371 1202.09 L988.957 1202.09 L989.544 1202.09 L990.13 1202.09 L990.717 1202.09 L991.303 1202.09 L991.889 1202.09 L992.476 1202.09 L993.062 1202.09 L993.649 1202.09 L994.235 1202.09 L994.822 1202.09 L995.408 1202.09 L995.994 1202.09 L996.581 1202.09 L997.167 1202.09 L997.754 1202.09 L998.34 1202.09 L998.926 1202.09 L999.513 1202.09 L1000.1 1202.09 L1000.69 1202.09 L1001.27 1202.09 L1001.86 1202.09 L1002.44 1202.09 L1003.03 1202.09 L1003.62 1202.09 L1004.2 1202.09 L1004.79 1202.09 L1005.38 1202.09 L1005.96 1202.09 L1006.55 1202.09 L1007.14 1202.09 L1007.72 1202.09 L1008.31 1202.09 L1008.9 1202.09 L1009.48 1202.09 L1010.07 1202.09 L1010.65 1202.09 L1011.24 1202.09 L1011.83 1202.09 L1012.41 1202.09 L1013 1202.09 L1013.59 1202.09 L1014.17 1202.09 L1014.76 1202.09 L1015.35 1202.09 L1015.93 1202.09 L1016.52 1202.09 L1017.11 1202.09 L1017.69 1202.09 L1018.28 1202.09 L1018.86 1202.09 L1019.45 1202.09 L1020.04 1202.09 L1020.62 1202.09 L1021.21 1202.09 L1021.8 1202.09 L1022.38 1202.09 L1022.97 1202.09 L1023.56 1202.09 L1024.14 1202.09 L1024.73 1202.09 L1025.32 1202.09 L1025.9 1202.09 L1026.49 1202.09 L1027.07 1202.09 L1027.66 1202.09 L1028.25 1202.09 L1028.83 1202.09 L1029.42 1202.09 L1030.01 1202.09 L1030.59 1202.09 L1031.18 1202.09 L1031.77 1202.09 L1032.35 1202.09 L1032.94 1202.09 L1033.52 1202.09 L1034.11 1202.09 L1034.7 1202.09 L1035.28 1202.09 L1035.87 1202.09 L1036.46 1202.09 L1037.04 1202.09 L1037.63 1202.09 L1038.22 1202.09 L1038.8 1202.09 L1039.39 1202.09 L1039.98 1202.09 L1040.56 1202.09 L1041.15 1202.09 L1041.73 1202.09 L1042.32 1202.09 L1042.91 1202.09 L1043.49 1202.09 L1044.08 1202.09 L1044.67 1202.09 L1045.25 1202.09 L1045.84 1202.09 L1046.43 1202.09 L1047.01 1202.09 L1047.6 1202.09 L1048.19 1202.09 L1048.77 1202.09 L1049.36 1202.09 L1049.94 1202.09 L1050.53 1202.09 L1051.12 1202.09 L1051.7 1202.09 L1052.29 1202.09 L1052.88 1202.09 L1053.46 1202.09 L1054.05 1202.09 L1054.64 1202.09 L1055.22 1202.09 L1055.81 1202.09 L1056.39 1202.09 L1056.98 1202.09 L1057.57 1202.09 L1058.15 1202.09 L1058.74 1202.09 L1059.33 1202.09 L1059.91 1202.09 L1060.5 1202.09 L1061.09 1202.09 L1061.67 1202.09 L1062.26 1202.09 L1062.85 1202.09 L1063.43 1202.09 L1064.02 1202.09 L1064.6 1202.09 L1065.19 1202.09 L1065.78 1202.09 L1066.36 1202.09 L1066.95 1202.09 L1067.54 1202.09 L1068.12 1202.09 L1068.71 1202.09 L1069.3 1202.09 L1069.88 1202.09 L1070.47 1202.09 L1071.06 1202.09 L1071.64 1202.09 L1072.23 1202.09 L1072.81 1202.09 L1073.4 1202.09 L1073.99 1202.09 L1074.57 1202.09 L1075.16 1202.09 L1075.75 1202.09 L1076.33 1202.09 L1076.92 1202.09 L1077.51 1202.09 L1078.09 1202.09 L1078.68 1202.09 L1079.26 1202.09 L1079.85 1202.09 L1080.44 1202.09 L1081.02 1202.09 L1081.61 1202.09 L1082.2 1202.09 L1082.78 1202.09 L1083.37 1202.09 L1083.96 1202.09 L1084.54 1202.09 L1085.13 1202.09 L1085.72 1202.09 L1086.3 1202.09 L1086.89 1202.09 L1087.47 1202.09 L1088.06 1202.09 L1088.65 1202.09 L1089.23 1202.09 L1089.82 1202.09 L1090.41 1202.09 L1090.99 1202.09 L1091.58 1202.09 L1092.17 1202.09 L1092.75 1202.09 L1093.34 1202.09 L1093.93 1202.09 L1094.51 1202.09 L1095.1 1202.09 L1095.68 1202.09 L1096.27 1202.09 L1096.86 1202.09 L1097.44 1202.09 L1098.03 1202.09 L1098.62 1202.09 L1099.2 1202.09 L1099.79 1202.09 L1100.38 1202.09 L1100.96 1202.09 L1101.55 1202.09 L1102.14 1202.09 L1102.72 1202.09 L1103.31 1202.09 L1103.89 1202.09 L1104.48 1202.09 L1105.07 1202.09 L1105.65 1202.09 L1106.24 1202.09 L1106.83 1202.09 L1107.41 1202.09 L1108 1202.09 L1108.59 1202.09 L1109.17 1202.09 L1109.76 1202.09 L1110.34 1202.09 L1110.93 1202.09 L1111.52 1202.09 L1112.1 1202.09 L1112.69 1202.09 L1113.28 1202.09 L1113.86 1202.09 L1114.45 1202.09 L1115.04 1202.09 L1115.62 1202.09 L1116.21 1202.09 L1116.8 1202.09 L1117.38 1202.09 L1117.97 1202.09 L1118.55 1202.09 L1119.14 1202.09 L1119.73 1202.09 L1120.31 1202.09 L1120.9 1202.09 L1121.49 1202.09 L1122.07 1202.09 L1122.66 1202.09 L1123.25 1202.09 L1123.83 1202.09 L1124.42 1202.09 L1125.01 1202.09 L1125.59 1202.09 L1126.18 1202.09 L1126.76 1202.09 L1127.35 1202.09 L1127.94 1202.09 L1128.52 1202.09 L1129.11 1202.09 L1129.7 1202.09 L1130.28 1202.09 L1130.87 1202.09 L1131.46 1202.09 L1132.04 1202.09 L1132.63 1202.09 L1133.21 1202.09 L1133.8 1202.09 L1134.39 1202.09 L1134.97 1202.09 L1135.56 1202.09 L1136.15 1202.09 L1136.73 1202.09 L1137.32 1202.09 L1137.91 1202.09 L1138.49 1202.09 L1139.08 1202.09 L1139.67 1202.09 L1140.25 1202.09 L1140.84 1202.09 L1141.42 1202.09 L1142.01 1202.09 L1142.6 1202.09 L1143.18 1202.09 L1143.77 1202.09 L1144.36 1202.09 L1144.94 1202.09 L1145.53 1202.09 L1146.12 1202.09 L1146.7 1202.09 L1147.29 1202.09 L1147.88 1202.09 L1148.46 1202.09 L1149.05 1202.09 L1149.63 1202.09 L1150.22 1202.09 L1150.81 1202.09 L1151.39 1202.09 L1151.98 1202.09 L1152.57 1202.09 L1153.15 1202.09 L1153.74 1202.09 L1154.33 1202.09 L1154.91 1202.09 L1155.5 1202.09 L1156.09 1202.09 L1156.67 1202.09 L1157.26 1202.09 L1157.84 1202.09 L1158.43 1202.09 L1159.02 1202.09 L1159.6 1202.09 L1160.19 1202.09 L1160.78 1202.09 L1161.36 1202.09 L1161.95 1202.09 L1162.54 1202.09 L1163.12 1202.09 L1163.71 1202.09 L1164.29 1202.09 L1164.88 1202.09 L1165.47 1202.09 L1166.05 1202.09 L1166.64 1202.09 L1167.23 1202.09 L1167.81 1202.09 L1168.4 1202.09 L1168.99 1202.09 L1169.57 1202.09 L1170.16 1202.09 L1170.75 1202.09 L1171.33 1202.09 L1171.92 1202.09 L1172.5 1202.09 L1173.09 1202.09 L1173.68 1202.09 L1174.26 1202.09 L1174.85 1202.09 L1175.44 1202.09 L1176.02 1202.09 L1176.61 1202.09 L1177.2 1202.09 L1177.78 1202.09 L1178.37 1202.09 L1178.96 1202.09 L1179.54 1202.09 L1180.13 1202.09 L1180.71 1202.09 L1181.3 1202.09 L1181.89 1202.09 L1182.47 1202.09 L1183.06 1202.09 L1183.65 1202.09 L1184.23 1202.09 L1184.82 1202.09 L1185.41 1202.09 L1185.99 1202.09 L1186.58 1202.09 L1187.16 1202.09 L1187.75 1202.09 L1188.34 1202.09 L1188.92 1202.09 L1189.51 1202.09 L1190.1 1202.09 L1190.68 1202.09 L1191.27 1202.09 L1191.86 1202.09 L1192.44 1202.09 L1193.03 1202.09 L1193.62 1202.09 L1194.2 1202.09 L1194.79 1202.09 L1195.37 1202.09 L1195.96 1202.09 L1196.55 1202.09 L1197.13 1202.09 L1197.72 1202.09 L1198.31 1202.09 L1198.89 1202.09 L1199.48 1202.09 L1200.07 1202.09 L1200.65 1202.09 L1201.24 1202.09 L1201.83 1202.09 L1202.41 1202.09 L1203 1202.09 L1203.58 1202.09 L1204.17 1202.09 L1204.76 1202.09 L1205.34 1202.09 L1205.93 1202.09 L1206.52 1202.09 L1207.1 1202.09 L1207.69 1202.09 L1208.28 1202.09 L1208.86 1202.09 L1209.45 1202.09 L1210.03 1202.09 L1210.62 1202.09 L1211.21 1202.09 L1211.79 1202.09 L1212.38 1202.09 L1212.97 1202.09 L1213.55 1202.09 L1214.14 1202.09 L1214.73 1202.09 L1215.31 1202.09 L1215.9 1202.09 L1216.49 1202.09 L1217.07 1202.09 L1217.66 1202.09 L1218.24 1202.09 L1218.83 1202.09 L1219.42 1202.09 L1220 1202.09 L1220.59 1202.09 L1221.18 1202.09 L1221.76 1202.09 L1222.35 1202.09 L1222.94 1202.09 L1223.52 1202.09 L1224.11 1202.09 L1224.7 1202.09 L1225.28 1202.09 L1225.87 1202.09 L1226.45 1202.09 L1227.04 1202.09 L1227.63 1202.09 L1228.21 1202.09 L1228.8 1202.09 L1229.39 1202.09 L1229.97 1202.09 L1230.56 1202.09 L1231.15 1202.09 L1231.73 1202.09 L1232.32 1202.09 L1232.91 1202.09 L1233.49 1202.09 L1234.08 1202.09 L1234.66 1202.09 L1235.25 1202.09 L1235.84 1202.09 L1236.42 1202.09 L1237.01 1202.09 L1237.6 1202.09 L1238.18 1202.09 L1238.77 1202.09 L1239.36 1202.09 L1239.94 1202.09 L1240.53 1202.09 L1241.11 1202.09 L1241.7 1202.09 L1242.29 1202.09 L1242.87 1202.09 L1243.46 1202.09 L1244.05 1202.09 L1244.63 1202.09 L1245.22 1202.09 L1245.81 1202.09 L1246.39 1202.09 L1246.98 1202.09 L1247.57 1202.09 L1248.15 1202.09 L1248.74 1202.09 L1249.32 1202.09 L1249.91 1202.09 L1250.5 1202.09 L1251.08 1202.09 L1251.67 1202.09 L1252.26 1202.09 L1252.84 1202.09 L1253.43 1202.09 L1254.02 1202.09 L1254.6 1202.09 L1255.19 1202.09 L1255.78 1202.09 L1256.36 1202.09 L1256.95 1202.09 L1257.53 1202.09 L1258.12 1202.09 L1258.71 1202.09 L1259.29 1202.09 L1259.88 1202.09 L1260.47 1202.09 L1261.05 1202.09 L1261.64 1202.09 L1262.23 1202.09 L1262.81 1202.09 L1263.4 1202.09 L1263.98 1202.09 L1264.57 1202.09 L1265.16 1202.09 L1265.74 1202.09 L1266.33 1202.09 L1266.92 1202.09 L1267.5 1202.09 L1268.09 1202.09 L1268.68 1202.09 L1269.26 1202.09 L1269.85 1202.09 L1270.44 1202.09 L1271.02 1202.09 L1271.61 1202.09 L1272.19 1202.09 L1272.78 1202.09 L1273.37 1202.09 L1273.95 1202.09 L1274.54 1202.09 L1275.13 1202.09 L1275.71 1202.09 L1276.3 1202.09 L1276.89 1202.09 L1277.47 1202.09 L1278.06 1202.09 L1278.65 1202.09 L1279.23 1202.09 L1279.82 1202.09 L1280.4 1202.09 L1280.99 1202.09 L1281.58 1202.09 L1282.16 1202.09 L1282.75 1202.09 L1283.34 1202.09 L1283.92 1202.09 L1284.51 1202.09 L1285.1 1202.09 L1285.68 1202.09 L1286.27 1202.09 L1286.86 1202.09 L1287.44 1202.09 L1288.03 1202.09 L1288.61 1202.09 L1289.2 1202.09 L1289.79 1202.09 L1290.37 1202.09 L1290.96 1202.09 L1291.55 1202.09 L1292.13 1202.09 L1292.72 1202.09 L1293.31 1202.09 L1293.89 1202.09 L1294.48 1202.09 L1295.06 1202.09 L1295.65 1202.09 L1296.24 1202.09 L1296.82 1202.09 L1297.41 1202.09 L1298 1202.09 L1298.58 1202.09 L1299.17 1202.09 L1299.76 1202.09 L1300.34 1202.09 L1300.93 1202.09 L1301.52 1202.09 L1302.1 1202.09 L1302.69 1202.09 L1303.27 1202.09 L1303.86 1202.09 L1304.45 1202.09 L1305.03 1202.09 L1305.62 1202.09 L1306.21 1202.09 L1306.79 1202.09 L1307.38 1202.09 L1307.97 1202.09 L1308.55 1202.09 L1309.14 1202.09 L1309.73 1202.09 L1310.31 1202.09 L1310.9 1202.09 L1311.48 1202.09 L1312.07 1202.09 L1312.66 1202.09 L1313.24 1202.09 L1313.83 1202.09 L1314.42 1202.09 L1315 1202.09 L1315.59 1202.09 L1316.18 1202.09 L1316.76 1202.09 L1317.35 1202.09 L1317.93 1202.09 L1318.52 1202.09 L1319.11 1202.09 L1319.69 1202.09 L1320.28 1202.09 L1320.87 1202.09 L1321.45 1202.09 L1322.04 1202.09 L1322.63 1202.09 L1323.21 1202.09 L1323.8 1202.09 L1324.39 1202.09 L1324.97 1202.09 L1325.56 1202.09 L1326.14 1202.09 L1326.73 1202.09 L1327.32 1202.09 L1327.9 1202.09 L1328.49 1202.09 L1329.08 1202.09 L1329.66 1202.09 L1330.25 1202.09 L1330.84 1202.09 L1331.42 1202.09 L1332.01 1202.09 L1332.6 1202.09 L1333.18 1202.09 L1333.77 1202.09 L1334.35 1202.09 L1334.94 1202.09 L1335.53 1202.09 L1336.11 1202.09 L1336.7 1202.09 L1337.29 1202.09 L1337.87 1202.09 L1338.46 1202.09 L1339.05 1202.09 L1339.63 1202.09 L1340.22 1202.09 L1340.8 1202.09 L1341.39 1202.09 L1341.98 1202.09 L1342.56 1202.09 L1343.15 1202.09 L1343.74 1202.09 L1344.32 1202.09 L1344.91 1202.09 L1345.5 1202.09 L1346.08 1202.09 L1346.67 1202.09 L1347.26 1202.09 L1347.84 1202.09 L1348.43 1202.09 L1349.01 1202.09 L1349.6 1202.09 L1350.19 1202.09 L1350.77 1202.09 L1351.36 1202.09 L1351.95 1202.09 L1352.53 1202.09 L1353.12 1202.09 L1353.71 1202.09 L1354.29 1202.09 L1354.88 1202.09 L1355.47 1202.09 L1356.05 1202.09 L1356.64 1202.09 L1357.22 1202.09 L1357.81 1202.09 L1358.4 1202.09 L1358.98 1202.09 L1359.57 1202.09 L1360.16 1202.09 L1360.74 1202.09 L1361.33 1202.09 L1361.92 1202.09 L1362.5 1202.09 L1363.09 1202.09 L1363.68 1202.09 L1364.26 1202.09 L1364.85 1202.09 L1365.43 1202.09 L1366.02 1202.09 L1366.61 1202.09 L1367.19 1202.09 L1367.78 1202.09 L1368.37 1202.09 L1368.95 1202.09 L1369.54 1202.09 L1370.13 1202.09 L1370.71 1202.09 L1371.3 1202.09 L1371.88 1202.09 L1372.47 1202.09 L1373.06 1202.09 L1373.64 1202.09 L1374.23 1202.09 L1374.82 1202.09 L1375.4 1202.09 L1375.99 1202.09 L1376.58 1202.09 L1377.16 1202.09 L1377.75 1202.09 L1378.34 1202.09 L1378.92 1202.09 L1379.51 1202.09 L1380.09 1202.09 L1380.68 1202.09 L1381.27 1202.09 L1381.85 1202.09 L1382.44 1202.09 L1383.03 1202.09 L1383.61 1202.09 L1384.2 1202.09 L1384.79 1202.09 L1385.37 1202.09 L1385.96 1202.09 L1386.55 1202.09 L1387.13 1202.09 L1387.72 1202.09 L1388.3 1202.09 L1388.89 1202.09 L1389.48 1202.09 L1390.06 1202.09 L1390.65 1202.09 L1391.24 1202.09 L1391.82 1202.09 L1392.41 1202.09 L1393 1202.09 L1393.58 1202.09 L1394.17 1202.09 L1394.75 1202.09 L1395.34 1202.09 L1395.93 1202.09 L1396.51 1202.09 L1397.1 1202.09 L1397.69 1202.09 L1398.27 1202.09 L1398.86 1202.09 L1399.45 1202.09 L1400.03 1202.09 L1400.62 1202.09 L1401.21 1202.09 L1401.79 1202.09 L1402.38 1202.09 L1402.96 1202.09 L1403.55 1202.09 L1404.14 1202.09 L1404.72 1202.09 L1405.31 1202.09 L1405.9 1202.09 L1406.48 1202.09 L1407.07 1202.09 L1407.66 1202.09 L1408.24 1202.09 L1408.83 1202.09 L1409.42 1202.09 L1410 1202.09 L1410.59 1202.09 L1411.17 1202.09 L1411.76 1202.09 L1412.35 1202.09 L1412.93 1202.09 L1413.52 1202.09 L1414.11 1202.09 L1414.69 1202.09 L1415.28 1202.09 L1415.87 1202.09 L1416.45 1202.09 L1417.04 1202.09 L1417.63 1202.09 L1418.21 1202.09 L1418.8 1202.09 L1419.38 1202.09 L1419.97 1202.09 L1420.56 1202.09 L1421.14 1202.09 L1421.73 1202.09 L1422.32 1202.09 L1422.9 1202.09 L1423.49 1202.09 L1424.08 1202.09 L1424.66 1202.09 L1425.25 1202.09 L1425.83 1202.09 L1426.42 1202.09 L1427.01 1202.09 L1427.59 1202.09 L1428.18 1202.09 L1428.77 1202.09 L1429.35 1202.09 L1429.94 1202.09 L1430.53 1202.09 L1431.11 1202.09 L1431.7 1202.09 L1432.29 1202.09 L1432.87 1202.09 L1433.46 1202.09 L1434.04 1202.09 L1434.63 1202.09 L1435.22 1202.09 L1435.8 1202.09 L1436.39 1202.09 L1436.98 1202.09 L1437.56 1202.09 L1438.15 1202.09 L1438.74 1202.09 L1439.32 1202.09 L1439.91 1202.09 L1440.5 1202.09 L1441.08 1202.09 L1441.67 1202.09 L1442.25 1202.09 L1442.84 1202.09 L1443.43 1202.09 L1444.01 1202.09 L1444.6 1202.09 L1445.19 1202.09 L1445.77 1202.09 L1446.36 1202.09 L1446.95 1202.09 L1447.53 1202.09 L1448.12 1202.09 L1448.7 1202.09 L1449.29 1202.09 L1449.88 1202.09 L1450.46 1202.09 L1451.05 1202.09 L1451.64 1202.09 L1452.22 1202.09 L1452.81 1202.09 L1453.4 1202.09 L1453.98 1202.09 L1454.57 1202.09 L1455.16 1202.09 L1455.74 1202.09 L1456.33 1202.09 L1456.91 1202.09 L1457.5 1202.09 L1458.09 1202.09 L1458.67 1202.09 L1459.26 1202.09 L1459.85 1202.09 L1460.43 1202.09 L1461.02 1202.09 L1461.61 1202.09 L1462.19 1202.09 L1462.78 1202.09 L1463.37 1202.09 L1463.95 1202.09 L1464.54 1202.09 L1465.12 1202.09 L1465.71 1202.09 L1466.3 1202.09 L1466.88 1202.09 L1467.47 1202.09 L1468.06 1202.09 L1468.64 1202.09 L1469.23 1202.09 L1469.82 1202.09 L1470.4 1202.09 L1470.99 1202.09 L1471.57 1202.09 L1472.16 1202.09 L1472.75 1202.09 L1473.33 1202.09 L1473.92 1202.09 L1474.51 1202.09 L1475.09 1202.09 L1475.68 1202.09 L1476.27 1202.09 L1476.85 1202.09 L1477.44 1202.09 L1478.03 1202.09 L1478.61 1202.09 L1479.2 1202.09 L1479.78 1202.09 L1480.37 1202.09 L1480.96 1202.09 L1481.54 1202.09 L1482.13 1202.09 L1482.72 1202.09 L1483.3 1202.09 L1483.89 1202.09 L1484.48 1202.09 L1485.06 1202.09 L1485.65 1202.09 L1486.24 1202.09 L1486.82 1202.09 L1487.41 1202.09 L1487.99 1202.09 L1488.58 1202.09 L1489.17 1202.09 L1489.75 1202.09 L1490.34 1202.09 L1490.93 1202.09 L1491.51 1202.09 L1492.1 1202.09 L1492.69 1202.09 L1493.27 1202.09 L1493.86 1202.09 L1494.45 1202.09 L1495.03 1202.09 L1495.62 1202.09 L1496.2 1202.09 L1496.79 1202.09 L1497.38 1202.09 L1497.96 1202.09 L1498.55 1202.09 L1499.14 1202.09 L1499.72 1202.09 L1500.31 1202.09 L1500.9 1202.09 L1501.48 1202.09 L1502.07 1202.09 L1502.65 1202.09 L1503.24 1202.09 L1503.83 1202.09 L1504.41 1202.09 L1505 1202.09 L1505.59 1202.09 L1506.17 1202.09 L1506.76 1202.09 L1507.35 1202.09 L1507.93 1202.09 L1508.52 1202.09 L1509.11 1202.09 L1509.69 1202.09 L1510.28 1202.09 L1510.86 1202.09 L1511.45 1202.09 L1512.04 1202.09 L1512.62 1202.09 L1513.21 1202.09 L1513.8 1202.09 L1514.38 1202.09 L1514.97 1202.09 L1515.56 1202.09 L1516.14 1202.09 L1516.73 1202.09 L1517.32 1202.09 L1517.9 1202.09 L1518.49 1202.09 L1519.07 1202.09 L1519.66 1202.09 L1520.25 1202.09 L1520.83 1202.09 L1521.42 1202.09 L1522.01 1202.09 L1522.59 1202.09 L1523.18 1202.09 L1523.77 1202.09 L1524.35 1202.09 L1524.94 1202.09 L1525.52 1202.09 L1526.11 1202.09 L1526.7 1202.09 L1527.28 1202.09 L1527.87 1202.09 L1528.46 1202.09 L1529.04 1202.09 L1529.63 1202.09 L1530.22 1202.09 L1530.8 1202.09 L1531.39 1202.09 L1531.98 1202.09 L1532.56 1202.09 L1533.15 1202.09 L1533.73 1202.09 L1534.32 1202.09 L1534.91 1202.09 L1535.49 1202.09 L1536.08 1202.09 L1536.67 1202.09 L1537.25 1202.09 L1537.84 1202.09 L1538.43 1202.09 L1539.01 1202.09 L1539.6 1202.09 L1540.19 1202.09 L1540.77 1202.09 L1541.36 1202.09 L1541.94 1202.09 L1542.53 1202.09 L1543.12 1202.09 L1543.7 1202.09 L1544.29 1202.09 L1544.88 1202.09 L1545.46 1202.09 L1546.05 1202.09 L1546.64 1202.09 L1547.22 1202.09 L1547.81 1202.09 L1548.4 1202.09 L1548.98 1202.09 L1549.57 1202.09 L1550.15 1202.09 L1550.74 1202.09 L1551.33 1202.09 L1551.91 1202.09 L1552.5 1202.09 L1553.09 1202.09 L1553.67 1202.09 L1554.26 1202.09 L1554.85 1202.09 L1555.43 1202.09 L1556.02 1202.09 L1556.6 1202.09 L1557.19 1202.09 L1557.78 1202.09 L1558.36 1202.09 L1558.95 1202.09 L1559.54 1202.09 L1560.12 1202.09 L1560.71 1202.09 L1561.3 1202.09 L1561.88 1202.09 L1562.47 1202.09 L1563.06 1202.09 L1563.64 1202.09 L1564.23 1202.09 L1564.81 1202.09 L1565.4 1202.09 L1565.99 1202.09 L1566.57 1202.09 L1567.16 1202.09 L1567.75 1202.09 L1568.33 1202.09 L1568.92 1202.09 L1569.51 1202.09 L1570.09 1202.09 L1570.68 1202.09 L1571.27 1202.09 L1571.85 1202.09 L1572.44 1202.09 L1573.02 1202.09 L1573.61 1202.09 L1574.2 1202.09 L1574.78 1202.09 L1575.37 1202.09 L1575.96 1202.09 L1576.54 1202.09 L1577.13 1202.09 L1577.72 1202.09 L1578.3 1202.09 L1578.89 1202.09 L1579.47 1202.09 L1580.06 1202.09 L1580.65 1202.09 L1581.23 1202.09 L1581.82 1202.09 L1582.41 1202.09 L1582.99 1202.09 L1583.58 1202.09 L1584.17 1202.09 L1584.75 1202.09 L1585.34 1202.09 L1585.93 1202.09 L1586.51 1202.09 L1587.1 1202.09 L1587.68 1202.09 L1588.27 1202.09 L1588.86 1202.09 L1589.44 1202.09 L1590.03 1202.09 L1590.62 1202.09 L1591.2 1202.09 L1591.79 1202.09 L1592.38 1202.09 L1592.96 1202.09 L1593.55 1202.09 L1594.14 1202.09 L1594.72 1202.09 L1595.31 1202.09 L1595.89 1202.09 L1596.48 1202.09 L1597.07 1202.09 L1597.65 1202.09 L1598.24 1202.09 L1598.83 1202.09 L1599.41 1202.09 L1600 1202.09 L1600.59 1202.09 L1601.17 1202.09 L1601.76 1202.09 L1602.34 1202.09 L1602.93 1202.09 L1603.52 1202.09 L1604.1 1202.09 L1604.69 1202.09 L1605.28 1202.09 L1605.86 1202.09 L1606.45 1202.09 L1607.04 1202.09 L1607.62 1202.09 L1608.21 1202.09 L1608.8 1202.09 L1609.38 1202.09 L1609.97 1202.09 L1610.55 1202.09 L1611.14 1202.09 L1611.73 1202.09 L1612.31 1202.09 L1612.9 1202.09 L1613.49 1202.09 L1614.07 1202.09 L1614.66 1202.09 L1615.25 1202.09 L1615.83 1202.09 L1616.42 1202.09 L1617.01 1202.09 L1617.59 1202.09 L1618.18 1202.09 L1618.76 1202.09 L1619.35 1202.09 L1619.94 1202.09 L1620.52 1202.09 L1621.11 1202.09 L1621.7 1202.09 L1622.28 1202.09 L1622.87 1202.09 L1623.46 1202.09 L1624.04 1202.09 L1624.63 1202.09 L1625.22 1202.09 L1625.8 1202.09 L1626.39 1202.09 L1626.97 1202.09 L1627.56 1202.09 L1628.15 1202.09 L1628.73 1202.09 L1629.32 1202.09 L1629.91 1202.09 L1630.49 1202.09 L1631.08 1202.09 L1631.67 1202.09 L1632.25 1202.09 L1632.84 1202.09 L1633.42 1202.09 L1634.01 1202.09 L1634.6 1202.09 L1635.18 1202.09 L1635.77 1202.09 L1636.36 1202.09 L1636.94 1202.09 L1637.53 1202.09 L1638.12 1202.09 L1638.7 1202.09 L1639.29 1202.09 L1639.88 1202.09 L1640.46 1202.09 L1641.05 1202.09 L1641.63 1202.09 L1642.22 1202.09 L1642.81 1202.09 L1643.39 1202.09 L1643.98 1202.09 L1644.57 1202.09 L1645.15 1202.09 L1645.74 1202.09 L1646.33 1202.09 L1646.91 1202.09 L1647.5 1202.09 L1648.09 1202.09 L1648.67 1202.09 L1649.26 1202.09 L1649.84 1202.09 L1650.43 1202.09 L1651.02 1202.09 L1651.6 1202.09 L1652.19 1202.09 L1652.78 1202.09 L1653.36 1202.09 L1653.95 1202.09 L1654.54 1202.09 L1655.12 1202.09 L1655.71 1202.09 L1656.29 1202.09 L1656.88 1202.09 L1657.47 1202.09 L1658.05 1202.09 L1658.64 1202.09 L1659.23 1202.09 L1659.81 1202.09 L1660.4 1202.09 L1660.99 1202.09 L1661.57 1202.09 L1662.16 1202.09 L1662.75 1202.09 L1663.33 1202.09 L1663.92 1202.09 L1664.5 1202.09 L1665.09 1202.09 L1665.68 1202.09 L1666.26 1202.09 L1666.85 1202.09 L1667.44 1202.09 L1668.02 1202.09 L1668.61 1202.09 L1669.2 1202.09 L1669.78 1202.09 L1670.37 1202.09 L1670.96 1202.09 L1671.54 1202.09 L1672.13 1202.09 L1672.71 1202.09 L1673.3 1202.09 L1673.89 1202.09 L1674.47 1202.09 L1675.06 1202.09 L1675.65 1202.09 L1676.23 1202.09 L1676.82 1202.09 L1677.41 1202.09 L1677.99 1202.09 L1678.58 1202.09 L1679.17 1202.09 L1679.75 1202.09 L1680.34 1202.09 L1680.92 1202.09 L1681.51 1202.09 L1682.1 1202.09 L1682.68 1202.09 L1683.27 1202.09 L1683.86 1202.09 L1684.44 1202.09 L1685.03 1202.09 L1685.62 1202.09 L1686.2 1202.09 L1686.79 1202.09 L1687.37 1202.09 L1687.96 1202.09 L1688.55 1202.09 L1689.13 1202.09 L1689.72 1202.09 L1690.31 1202.09 L1690.89 1202.09 L1691.48 1202.09 L1692.07 1202.09 L1692.65 1202.09 L1693.24 1202.09 L1693.83 1202.09 L1694.41 1202.09 L1695 1202.09 L1695.58 1202.09 L1696.17 1202.09 L1696.76 1202.09 L1697.34 1202.09 L1697.93 1202.09 L1698.52 1202.09 L1699.1 1202.09 L1699.69 1202.09 L1700.28 1202.09 L1700.86 1202.09 L1701.45 1202.09 L1702.04 1202.09 L1702.62 1202.09 L1703.21 1202.09 L1703.79 1202.09 L1704.38 1202.09 L1704.97 1202.09 L1705.55 1202.09 L1706.14 1202.09 L1706.73 1202.09 L1707.31 1202.09 L1707.9 1202.09 L1708.49 1202.09 L1709.07 1202.09 L1709.66 1202.09 L1710.24 1202.09 L1710.83 1202.09 L1711.42 1202.09 L1712 1202.09 L1712.59 1202.09 L1713.18 1202.09 L1713.76 1202.09 L1714.35 1202.09 L1714.94 1202.09 L1715.52 1202.09 L1716.11 1202.09 L1716.7 1202.09 L1717.28 1202.09 L1717.87 1202.09 L1718.45 1202.09 L1719.04 1202.09 L1719.63 1202.09 L1720.21 1202.09 L1720.8 1202.09 L1721.39 1202.09 L1721.97 1202.09 L1722.56 1202.09 L1723.15 1202.09 L1723.73 1202.09 L1724.32 1202.09 L1724.91 1202.09 L1725.49 1202.09 L1726.08 1202.09 L1726.66 1202.09 L1727.25 1202.09 L1727.84 1202.09 L1728.42 1202.09 L1729.01 1202.09 L1729.6 1202.09 L1730.18 1202.09 L1730.77 1202.09 L1731.36 1202.09 L1731.94 1202.09 L1732.53 1202.09 L1733.11 1202.09 L1733.7 1202.09 L1734.29 1202.09 L1734.87 1202.09 L1735.46 1202.09 L1736.05 1202.09 L1736.63 1202.09 L1737.22 1202.09 L1737.81 1202.09 L1738.39 1202.09 L1738.98 1202.09 L1739.57 1202.09 L1740.15 1202.09 L1740.74 1202.09 L1741.32 1202.09 L1741.91 1202.09 L1742.5 1202.09 L1743.08 1202.09 L1743.67 1202.09 L1744.26 1202.09 L1744.84 1202.09 L1745.43 1202.09 L1746.02 1202.09 L1746.6 1202.09 L1747.19 1202.09 L1747.78 1202.09 L1748.36 1202.09 L1748.95 1202.09 L1749.53 1202.09 L1750.12 1202.09 L1750.71 1202.09 L1751.29 1202.09 L1751.88 1202.09 L1752.47 1202.09 L1753.05 1202.09 L1753.64 1202.09 L1754.23 1202.09 L1754.81 1202.09 L1755.4 1202.09 L1755.99 1202.09 L1756.57 1202.09 L1757.16 1202.09 L1757.74 1202.09 L1758.33 1202.09 L1758.92 1202.09 L1759.5 1202.09 L1760.09 1202.09 L1760.68 1202.09 L1761.26 1202.09 L1761.85 1202.09 L1762.44 1202.09 L1763.02 1202.09 L1763.61 1202.09 L1764.19 1202.09 L1764.78 1202.09 L1765.37 1202.09 L1765.95 1202.09 L1766.54 1202.09 L1767.13 1202.09 L1767.71 1202.09 L1768.3 1202.09 L1768.89 1202.09 L1769.47 1202.09 L1770.06 1202.09 L1770.65 1202.09 L1771.23 1202.09 L1771.82 1202.09 L1772.4 1202.09 L1772.99 1202.09 L1773.58 1202.09 L1774.16 1202.09 L1774.75 1202.09 L1775.34 1202.09 L1775.92 1202.09 L1776.51 1202.09 L1777.1 1202.09 L1777.68 1202.09 L1778.27 1202.09 L1778.86 1202.09 L1779.44 1202.09 L1780.03 1202.09 L1780.61 1202.09 L1781.2 1202.09 L1781.79 1202.09 L1782.37 1202.09 L1782.96 1202.09 L1783.55 1202.09 L1784.13 1202.09 L1784.72 1202.09 L1785.31 1202.09 L1785.89 1202.09 L1786.48 1202.09 L1787.06 1202.09 L1787.65 1202.09 L1788.24 1202.09 L1788.82 1202.09 L1789.41 1202.09 L1790 1202.09 L1790.58 1202.09 L1791.17 1202.09 L1791.76 1202.09 L1792.34 1202.09 L1792.93 1202.09 L1793.52 1202.09 L1794.1 1202.09 L1794.69 1202.09 L1795.27 1202.09 L1795.86 1202.09 L1796.45 1202.09 L1797.03 1202.09 L1797.62 1202.09 L1798.21 1202.09 L1798.79 1202.09 L1799.38 1202.09 L1799.97 1202.09 L1800.55 1202.09 L1801.14 1202.09 L1801.73 1202.09 L1802.31 1202.09 L1802.9 1202.09 L1803.48 1202.09 L1804.07 1202.09 L1804.66 1202.09 L1805.24 1202.09 L1805.83 1202.09 L1806.42 1202.09 L1807 1202.09 L1807.59 1202.09 L1808.18 1202.09 L1808.76 1202.09 L1809.35 1202.09 L1809.94 1202.09 L1810.52 1202.09 L1811.11 1202.09 L1811.69 1202.09 L1812.28 1202.09 L1812.87 1202.09 L1813.45 1202.09 L1814.04 1202.09 L1814.63 1202.09 L1815.21 1202.09 L1815.8 1202.09 L1816.39 1202.09 L1816.97 1202.09 L1817.56 1202.09 L1818.14 1202.09 L1818.73 1202.09 L1819.32 1202.09 L1819.9 1202.09 L1820.49 1202.09 L1821.08 1202.09 L1821.66 1202.09 L1822.25 1202.09 L1822.84 1202.09 L1823.42 1202.09 L1824.01 1202.09 L1824.6 1202.09 L1825.18 1202.09 L1825.77 1202.09 L1826.35 1202.09 L1826.94 1202.09 L1827.53 1202.09 L1828.11 1202.09 L1828.7 1202.09 L1829.29 1202.09 L1829.87 1202.09 L1830.46 1202.09 L1831.05 1202.09 L1831.63 1202.09 L1832.22 1202.09 L1832.81 1202.09 L1833.39 1202.09 L1833.98 1202.09 L1834.56 1202.09 L1835.15 1202.09 L1835.74 1202.09 L1836.32 1202.09 L1836.91 1202.09 L1837.5 1202.09 L1838.08 1202.09 L1838.67 1202.09 L1839.26 1202.09 L1839.84 1202.09 L1840.43 1202.09 L1841.01 1202.09 L1841.6 1202.09 L1842.19 1202.09 L1842.77 1202.09 L1843.36 1202.09 L1843.95 1202.09 L1844.53 1202.09 L1845.12 1202.09 L1845.71 1202.09 L1846.29 1202.09 L1846.88 1202.09 L1847.47 1202.09 L1848.05 1202.09 L1848.64 1202.09 L1849.22 1202.09 L1849.81 1202.09 L1850.4 1202.09 L1850.98 1202.09 L1851.57 1202.09 L1852.16 1202.09 L1852.74 1202.09 L1853.33 1202.09 L1853.92 1202.09 L1854.5 1202.09 L1855.09 1202.09 L1855.68 1202.09 L1856.26 1202.09 L1856.85 1202.09 L1857.43 1202.09 L1858.02 1202.09 L1858.61 1202.09 L1859.19 1202.09 L1859.78 1202.09 L1860.37 1202.09 L1860.95 1202.09 L1861.54 1202.09 L1862.13 1202.09 L1862.71 1202.09 L1863.3 1202.09 L1863.88 1202.09 L1864.47 1202.09 L1865.06 1202.09 L1865.64 1202.09 L1866.23 1202.09 L1866.82 1202.09 L1867.4 1202.09 L1867.99 1202.09 L1868.58 1202.09 L1869.16 1202.09 L1869.75 1202.09 L1870.34 1202.09 L1870.92 1202.09 L1871.51 1202.09 L1872.09 1202.09 L1872.68 1202.09 L1873.27 1202.09 L1873.85 1202.09 L1874.44 1202.09 L1875.03 1202.09 L1875.61 1202.09 L1876.2 1202.09 L1876.79 1202.09 L1877.37 1202.09 L1877.96 1202.09 L1878.55 1202.09 L1879.13 1202.09 L1879.72 1202.09 L1880.3 1202.09 L1880.89 1202.09 L1881.48 1202.09 L1882.06 1202.09 L1882.65 1202.09 L1883.24 1202.09 L1883.82 1202.09 L1884.41 1202.09 L1885 1202.09 L1885.58 1202.09 L1886.17 1202.09 L1886.76 1202.09 L1887.34 1202.09 L1887.93 1202.09 L1888.51 1202.09 L1889.1 1202.09 L1889.69 1202.09 L1890.27 1202.09 L1890.86 1202.09 L1891.45 1202.09 L1892.03 1202.09 L1892.62 1202.09 L1893.21 1202.09 L1893.79 1202.09 L1894.38 1202.09 L1894.96 1202.09 L1895.55 1202.09 L1896.14 1202.09 L1896.72 1202.09 L1897.31 1202.09 L1897.9 1202.09 L1898.48 1202.09 L1899.07 1202.09 L1899.66 1202.09 L1900.24 1202.09 L1900.83 1202.09 L1901.42 1202.09 L1902 1202.09 L1902.59 1202.09 L1903.17 1202.09 L1903.76 1202.09 L1904.35 1202.09 L1904.93 1202.09 L1905.52 1202.09 L1906.11 1202.09 L1906.69 1202.09 L1907.28 1202.09 L1907.87 1202.09 L1908.45 1202.09 L1909.04 1202.09 L1909.63 1202.09 L1910.21 1202.09 L1910.8 1202.09 L1911.38 1202.09 L1911.97 1202.09 L1912.56 1202.09 L1913.14 1202.09 L1913.73 1202.09 L1914.32 1202.09 L1914.9 1202.09 L1915.49 1202.09 L1916.08 1202.09 L1916.66 1202.09 L1917.25 1202.09 L1917.83 1202.09 L1918.42 1202.09 L1919.01 1202.09 L1919.59 1202.09 L1920.18 1202.09 L1920.77 1202.09 L1921.35 1202.09 L1921.94 1202.09 L1922.53 1202.09 L1923.11 1202.09 L1923.7 1202.09 L1924.29 1202.09 L1924.87 1202.09 L1925.46 1202.09 L1926.04 1202.09 L1926.63 1202.09 L1927.22 1202.09 L1927.8 1202.09 L1928.39 1202.09 L1928.98 1202.09 L1929.56 1202.09 L1930.15 1202.09 L1930.74 1202.09 L1931.32 1202.09 L1931.91 1202.09 L1932.5 1202.09 L1933.08 1202.09 L1933.67 1202.09 L1934.25 1202.09 L1934.84 1202.09 L1935.43 1202.09 L1936.01 1202.09 L1936.6 1202.09 L1937.19 1202.09 L1937.77 1202.09 L1938.36 1202.09 L1938.95 1202.09 L1939.53 1202.09 L1940.12 1202.09 L1940.71 1202.09 L1941.29 1202.09 L1941.88 1202.09 L1942.46 1202.09 L1943.05 1202.09 L1943.64 1202.09 L1944.22 1202.09 L1944.81 1202.09 L1945.4 1202.09 L1945.98 1202.09 L1946.57 1202.09 L1947.16 1202.09 L1947.74 1202.09 L1948.33 1202.09 L1948.91 1202.09 L1949.5 1202.09 L1950.09 1202.09 L1950.67 1202.09 L1951.26 1202.09 L1951.85 1202.09 L1952.43 1202.09 L1953.02 1202.09 L1953.61 1202.09 L1954.19 1202.09 L1954.78 1202.09 L1955.37 1202.09 L1955.95 1202.09 L1956.54 1202.09 L1957.12 1202.09 L1957.71 1202.09 L1958.3 1202.09 L1958.88 1202.09 L1959.47 1202.09 L1960.06 1202.09 L1960.64 1202.09 L1961.23 1202.09 L1961.82 1202.09 L1962.4 1202.09 L1962.99 1202.09 L1963.58 1202.09 L1964.16 1202.09 L1964.75 1202.09 L1965.33 1202.09 L1965.92 1202.09 L1966.51 1202.09 L1967.09 1202.09 L1967.68 1202.09 L1968.27 1202.09 L1968.85 1202.09 L1969.44 1202.09 L1970.03 1202.09 L1970.61 1202.09 L1971.2 1202.09 L1971.78 1202.09 L1972.37 1202.09 L1972.96 1202.09 L1973.54 1202.09 L1974.13 1202.09 L1974.72 1202.09 L1975.3 1202.09 L1975.89 1202.09 L1976.48 1202.09 L1977.06 1202.09 L1977.65 1202.09 L1978.24 1202.09 L1978.82 1202.09 L1979.41 1202.09 L1979.99 1202.09 L1980.58 1202.09 L1981.17 1202.09 L1981.75 1202.09 L1982.34 1202.09 L1982.93 1202.09 L1983.51 1202.09 L1984.1 1202.09 L1984.69 1202.09 L1985.27 1202.09 L1985.86 1202.09 L1986.45 1202.09 L1987.03 1202.09 L1987.62 1202.09 L1988.2 1202.09 L1988.79 1202.09 L1989.38 1202.09 L1989.96 1202.09 L1990.55 1202.09 L1991.14 1202.09 L1991.72 1202.09 L1992.31 1202.09 L1992.9 1202.09 L1993.48 1202.09 L1994.07 1202.09 L1994.65 1202.09 L1995.24 1202.09 L1995.83 1202.09 L1996.41 1202.09 L1997 1202.09 L1997.59 1202.09 L1998.17 1202.09 L1998.76 1202.09 L1999.35 1202.09 L1999.93 1202.09 L2000.52 1202.09 L2001.11 1202.09 L2001.69 1202.09 L2002.28 1202.09 L2002.86 1202.09 L2003.45 1202.09 L2004.04 1202.09 L2004.62 1202.09 L2005.21 1202.09 L2005.8 1202.09 L2006.38 1202.09 L2006.97 1202.09 L2007.56 1202.09 L2008.14 1202.09 L2008.73 1202.09 L2009.32 1202.09 L2009.9 1202.09 L2010.49 1202.09 L2011.07 1202.09 L2011.66 1202.09 L2012.25 1202.09 L2012.83 1202.09 L2013.42 1202.09 L2014.01 1202.09 L2014.59 1202.09 L2015.18 1202.09 L2015.77 1202.09 L2016.35 1202.09 L2016.94 1202.09 L2017.53 1202.09 L2018.11 1202.09 L2018.7 1202.09 L2019.28 1202.09 L2019.87 1202.09 L2020.46 1202.09 L2021.04 1202.09 L2021.63 1202.09 L2022.22 1202.09 L2022.8 1202.09 L2023.39 1202.09 L2023.98 1202.09 L2024.56 1202.09 L2025.15 1202.09 L2025.73 1202.09 L2026.32 1202.09 L2026.91 1202.09 L2027.49 1202.09 L2028.08 1202.09 L2028.67 1202.09 L2029.25 1202.09 L2029.84 1202.09 L2030.43 1202.09 L2031.01 1202.09 L2031.6 1202.09 L2032.19 1202.09 L2032.77 1202.09 L2033.36 1202.09 L2033.94 1202.09 L2034.53 1202.09 L2035.12 1202.09 L2035.7 1202.09 L2036.29 1202.09 L2036.88 1202.09 L2037.46 1202.09 L2038.05 1202.09 L2038.64 1202.09 L2039.22 1202.09 L2039.81 1202.09 L2040.4 1202.09 L2040.98 1202.09 L2041.57 1202.09 L2042.15 1202.09 L2042.74 1202.09 L2043.33 1202.09 L2043.91 1202.09 L2044.5 1202.09 L2045.09 1202.09 L2045.67 1202.09 L2046.26 1202.09 L2046.85 1202.09 L2047.43 1202.09 L2048.02 1202.09 L2048.6 1202.09 L2049.19 1202.09 L2049.78 1202.09 L2050.36 1202.09 L2050.95 1202.09 L2051.54 1202.09 L2052.12 1202.09 L2052.71 1202.09 L2053.3 1202.09 L2053.88 1202.09 L2054.47 1202.09 L2055.06 1202.09 L2055.64 1202.09 L2056.23 1202.09 L2056.81 1202.09 L2057.4 1202.09 L2057.99 1202.09 L2058.57 1202.09 L2059.16 1202.09 L2059.75 1202.09 L2060.33 1202.09 L2060.92 1202.09 L2061.51 1202.09 L2062.09 1202.09 L2062.68 1202.09 L2063.27 1202.09 L2063.85 1202.09 L2064.44 1202.09 L2065.02 1202.09 L2065.61 1202.09 L2066.2 1202.09 L2066.78 1202.09 L2067.37 1202.09 L2067.96 1202.09 L2068.54 1202.09 L2069.13 1202.09 L2069.72 1202.09 L2070.3 1202.09 L2070.89 1202.09 L2071.48 1202.09 L2072.06 1202.09 L2072.65 1202.09 L2073.23 1202.09 L2073.82 1202.09 L2074.41 1202.09 L2074.99 1202.09 L2075.58 1202.09 L2076.17 1202.09 L2076.75 1202.09 L2077.34 1202.09 L2077.93 1202.09 L2078.51 1202.09 L2079.1 1202.09 L2079.68 1202.09 L2080.27 1202.09 L2080.86 1202.09 L2081.44 1202.09 L2082.03 1202.09 L2082.62 1202.09 L2083.2 1202.09 L2083.79 1202.09 L2084.38 1202.09 L2084.96 1202.09 L2085.55 1202.09 L2086.14 1202.09 L2086.72 1202.09 L2087.31 1202.09 L2087.89 1202.09 L2088.48 1202.09 L2089.07 1202.09 L2089.65 1202.09 L2090.24 1202.09 L2090.83 1202.09 L2091.41 1202.09 L2092 1202.09 L2092.59 1202.09 L2093.17 1202.09 L2093.76 1202.09 L2094.35 1202.09 L2094.93 1202.09 L2095.52 1202.09 L2096.1 1202.09 L2096.69 1202.09 L2097.28 1202.09 L2097.86 1202.09 L2098.45 1202.09 L2099.04 1202.09 L2099.62 1202.09 L2100.21 1202.09 L2100.8 1202.09 L2101.38 1202.09 L2101.97 1202.09 L2102.55 1202.09 L2103.14 1202.09 L2103.73 1202.09 L2104.31 1202.09 L2104.9 1202.09 L2105.49 1202.09 L2106.07 1202.09 L2106.66 1202.09 L2107.25 1202.09 L2107.83 1202.09 L2108.42 1202.09 L2109.01 1202.09 L2109.59 1202.09 L2110.18 1202.09 L2110.76 1202.09 L2111.35 1202.09 L2111.94 1202.09 L2112.52 1202.09 L2113.11 1202.09 L2113.7 1202.09 L2114.28 1202.09 L2114.87 1202.09 L2115.46 1202.09 L2116.04 1202.09 L2116.63 1202.09 L2117.22 1202.09 L2117.8 1202.09 L2118.39 1202.09 L2118.97 1202.09 L2119.56 1202.09 L2120.15 1202.09 L2120.73 1202.09 L2121.32 1202.09 L2121.91 1202.09 L2122.49 1202.09 L2123.08 1202.09 L2123.67 1202.09 L2124.25 1202.09 L2124.84 1202.09 L2125.42 1202.09 L2126.01 1202.09 L2126.6 1202.09 L2127.18 1202.09 L2127.77 1202.09 L2128.36 1202.09 L2128.94 1202.09 L2129.53 1202.09 L2130.12 1202.09 L2130.7 1202.09 L2131.29 1202.09 L2131.88 1202.09 L2132.46 1202.09 L2133.05 1202.09 L2133.63 1202.09 L2134.22 1202.09 L2134.81 1202.09 L2135.39 1202.09 L2135.98 1202.09 L2136.57 1202.09 L2137.15 1202.09 L2137.74 1202.09 L2138.33 1202.09 L2138.91 1202.09 L2139.5 1202.09 L2140.09 1202.09 L2140.67 1202.09 L2141.26 1202.09 L2141.84 1202.09 L2142.43 1202.09 L2143.02 1202.09 L2143.6 1202.09 L2144.19 1202.09 L2144.78 1202.09 L2145.36 1202.09 L2145.95 1202.09 L2146.54 1202.09 L2147.12 1202.09 L2147.71 1202.09 L2148.3 1202.09 L2148.88 1202.09 L2149.47 1202.09 L2150.05 1202.09 L2150.64 1202.09 L2151.23 1202.09 L2151.81 1202.09 L2152.4 1202.09 L2152.99 1202.09 L2153.57 1202.09 L2154.16 1202.09 L2154.75 1202.09 L2155.33 1202.09 L2155.92 1202.09 L2156.5 1202.09 L2157.09 1202.09 L2157.68 1202.09 L2158.26 1202.09 L2158.26 1201.79 L2157.68 1201.79 L2157.09 1201.79 L2156.5 1201.79 L2155.92 1201.79 L2155.33 1201.79 L2154.75 1201.79 L2154.16 1201.79 L2153.57 1201.79 L2152.99 1201.79 L2152.4 1201.79 L2151.81 1201.79 L2151.23 1201.79 L2150.64 1201.79 L2150.05 1201.79 L2149.47 1201.79 L2148.88 1201.79 L2148.3 1201.79 L2147.71 1201.79 L2147.12 1201.79 L2146.54 1201.79 L2145.95 1201.79 L2145.36 1201.79 L2144.78 1201.79 L2144.19 1201.79 L2143.6 1201.79 L2143.02 1201.79 L2142.43 1201.79 L2141.84 1201.79 L2141.26 1201.79 L2140.67 1201.79 L2140.09 1201.79 L2139.5 1201.79 L2138.91 1201.79 L2138.33 1201.79 L2137.74 1201.79 L2137.15 1201.79 L2136.57 1201.79 L2135.98 1201.79 L2135.39 1201.79 L2134.81 1201.79 L2134.22 1201.79 L2133.63 1201.79 L2133.05 1201.79 L2132.46 1201.79 L2131.88 1201.79 L2131.29 1201.79 L2130.7 1201.79 L2130.12 1201.79 L2129.53 1201.79 L2128.94 1201.79 L2128.36 1201.79 L2127.77 1201.79 L2127.18 1201.79 L2126.6 1201.79 L2126.01 1201.79 L2125.42 1201.79 L2124.84 1201.79 L2124.25 1201.79 L2123.67 1201.79 L2123.08 1201.79 L2122.49 1201.79 L2121.91 1201.79 L2121.32 1201.79 L2120.73 1201.79 L2120.15 1201.79 L2119.56 1201.79 L2118.97 1201.79 L2118.39 1201.79 L2117.8 1201.79 L2117.22 1201.79 L2116.63 1201.79 L2116.04 1201.79 L2115.46 1201.79 L2114.87 1201.79 L2114.28 1201.79 L2113.7 1201.79 L2113.11 1201.79 L2112.52 1201.79 L2111.94 1201.79 L2111.35 1201.79 L2110.76 1201.79 L2110.18 1201.79 L2109.59 1201.79 L2109.01 1201.79 L2108.42 1201.79 L2107.83 1201.79 L2107.25 1201.79 L2106.66 1201.79 L2106.07 1201.79 L2105.49 1201.79 L2104.9 1201.79 L2104.31 1201.79 L2103.73 1201.79 L2103.14 1201.79 L2102.55 1201.79 L2101.97 1201.79 L2101.38 1201.79 L2100.8 1201.79 L2100.21 1201.79 L2099.62 1201.79 L2099.04 1201.79 L2098.45 1201.79 L2097.86 1201.79 L2097.28 1201.79 L2096.69 1201.79 L2096.1 1201.79 L2095.52 1201.79 L2094.93 1201.79 L2094.35 1201.79 L2093.76 1201.79 L2093.17 1201.79 L2092.59 1201.79 L2092 1201.79 L2091.41 1201.79 L2090.83 1201.79 L2090.24 1201.79 L2089.65 1201.79 L2089.07 1201.79 L2088.48 1201.79 L2087.89 1201.79 L2087.31 1201.79 L2086.72 1201.79 L2086.14 1201.79 L2085.55 1201.79 L2084.96 1201.79 L2084.38 1201.79 L2083.79 1201.79 L2083.2 1201.79 L2082.62 1201.79 L2082.03 1201.79 L2081.44 1201.79 L2080.86 1201.79 L2080.27 1201.79 L2079.68 1201.79 L2079.1 1201.79 L2078.51 1201.79 L2077.93 1201.79 L2077.34 1201.79 L2076.75 1201.79 L2076.17 1201.79 L2075.58 1201.79 L2074.99 1201.79 L2074.41 1201.79 L2073.82 1201.79 L2073.23 1201.79 L2072.65 1201.79 L2072.06 1201.79 L2071.48 1201.79 L2070.89 1201.79 L2070.3 1201.79 L2069.72 1201.79 L2069.13 1201.79 L2068.54 1201.79 L2067.96 1201.79 L2067.37 1201.79 L2066.78 1201.79 L2066.2 1201.79 L2065.61 1201.79 L2065.02 1201.79 L2064.44 1201.79 L2063.85 1201.79 L2063.27 1201.79 L2062.68 1201.79 L2062.09 1201.79 L2061.51 1201.79 L2060.92 1201.79 L2060.33 1201.79 L2059.75 1201.79 L2059.16 1201.79 L2058.57 1201.79 L2057.99 1201.79 L2057.4 1201.79 L2056.81 1201.79 L2056.23 1201.79 L2055.64 1201.79 L2055.06 1201.79 L2054.47 1201.79 L2053.88 1201.79 L2053.3 1201.79 L2052.71 1201.79 L2052.12 1201.79 L2051.54 1201.79 L2050.95 1201.79 L2050.36 1201.79 L2049.78 1201.79 L2049.19 1201.79 L2048.6 1201.79 L2048.02 1201.79 L2047.43 1201.79 L2046.85 1201.79 L2046.26 1201.79 L2045.67 1201.79 L2045.09 1201.79 L2044.5 1201.79 L2043.91 1201.79 L2043.33 1201.79 L2042.74 1201.79 L2042.15 1201.79 L2041.57 1201.79 L2040.98 1201.79 L2040.4 1201.79 L2039.81 1201.79 L2039.22 1201.79 L2038.64 1201.79 L2038.05 1201.79 L2037.46 1201.79 L2036.88 1201.79 L2036.29 1201.79 L2035.7 1201.79 L2035.12 1201.79 L2034.53 1201.79 L2033.94 1201.79 L2033.36 1201.79 L2032.77 1201.79 L2032.19 1201.79 L2031.6 1201.79 L2031.01 1201.79 L2030.43 1201.79 L2029.84 1201.79 L2029.25 1201.79 L2028.67 1201.79 L2028.08 1201.79 L2027.49 1201.79 L2026.91 1201.79 L2026.32 1201.79 L2025.73 1201.79 L2025.15 1201.79 L2024.56 1201.79 L2023.98 1201.79 L2023.39 1201.79 L2022.8 1201.79 L2022.22 1201.79 L2021.63 1201.79 L2021.04 1201.79 L2020.46 1201.79 L2019.87 1201.79 L2019.28 1201.79 L2018.7 1201.79 L2018.11 1201.79 L2017.53 1201.79 L2016.94 1201.79 L2016.35 1201.79 L2015.77 1201.79 L2015.18 1201.79 L2014.59 1201.79 L2014.01 1201.79 L2013.42 1201.79 L2012.83 1201.79 L2012.25 1201.79 L2011.66 1201.79 L2011.07 1201.79 L2010.49 1201.79 L2009.9 1201.79 L2009.32 1201.79 L2008.73 1201.79 L2008.14 1201.79 L2007.56 1201.79 L2006.97 1201.79 L2006.38 1201.79 L2005.8 1201.79 L2005.21 1201.79 L2004.62 1201.79 L2004.04 1201.79 L2003.45 1201.79 L2002.86 1201.79 L2002.28 1201.79 L2001.69 1201.79 L2001.11 1201.79 L2000.52 1201.79 L1999.93 1201.79 L1999.35 1201.79 L1998.76 1201.79 L1998.17 1201.79 L1997.59 1201.79 L1997 1201.79 L1996.41 1201.79 L1995.83 1201.79 L1995.24 1201.79 L1994.65 1201.79 L1994.07 1201.79 L1993.48 1201.79 L1992.9 1201.79 L1992.31 1201.79 L1991.72 1201.79 L1991.14 1201.79 L1990.55 1201.79 L1989.96 1201.79 L1989.38 1201.79 L1988.79 1201.79 L1988.2 1201.79 L1987.62 1201.79 L1987.03 1201.79 L1986.45 1201.79 L1985.86 1201.79 L1985.27 1201.79 L1984.69 1201.79 L1984.1 1201.79 L1983.51 1201.79 L1982.93 1201.79 L1982.34 1201.79 L1981.75 1201.79 L1981.17 1201.79 L1980.58 1201.79 L1979.99 1201.79 L1979.41 1201.79 L1978.82 1201.79 L1978.24 1201.79 L1977.65 1201.79 L1977.06 1201.79 L1976.48 1201.79 L1975.89 1201.79 L1975.3 1201.79 L1974.72 1201.79 L1974.13 1201.79 L1973.54 1201.79 L1972.96 1201.79 L1972.37 1201.79 L1971.78 1201.79 L1971.2 1201.79 L1970.61 1201.79 L1970.03 1201.79 L1969.44 1201.79 L1968.85 1201.79 L1968.27 1201.79 L1967.68 1201.79 L1967.09 1201.79 L1966.51 1201.79 L1965.92 1201.79 L1965.33 1201.79 L1964.75 1201.79 L1964.16 1201.79 L1963.58 1201.79 L1962.99 1201.79 L1962.4 1201.79 L1961.82 1201.79 L1961.23 1201.79 L1960.64 1201.79 L1960.06 1201.79 L1959.47 1201.79 L1958.88 1201.79 L1958.3 1201.79 L1957.71 1201.79 L1957.12 1201.79 L1956.54 1201.79 L1955.95 1201.79 L1955.37 1201.79 L1954.78 1201.79 L1954.19 1201.79 L1953.61 1201.79 L1953.02 1201.79 L1952.43 1201.79 L1951.85 1201.79 L1951.26 1201.79 L1950.67 1201.79 L1950.09 1201.79 L1949.5 1201.79 L1948.91 1201.79 L1948.33 1201.79 L1947.74 1201.79 L1947.16 1201.79 L1946.57 1201.79 L1945.98 1201.79 L1945.4 1201.79 L1944.81 1201.79 L1944.22 1201.79 L1943.64 1201.79 L1943.05 1201.79 L1942.46 1201.79 L1941.88 1201.79 L1941.29 1201.79 L1940.71 1201.79 L1940.12 1201.79 L1939.53 1201.79 L1938.95 1201.79 L1938.36 1201.79 L1937.77 1201.79 L1937.19 1201.79 L1936.6 1201.79 L1936.01 1201.79 L1935.43 1201.79 L1934.84 1201.79 L1934.25 1201.79 L1933.67 1201.79 L1933.08 1201.79 L1932.5 1201.79 L1931.91 1201.79 L1931.32 1201.79 L1930.74 1201.79 L1930.15 1201.79 L1929.56 1201.79 L1928.98 1201.79 L1928.39 1201.79 L1927.8 1201.79 L1927.22 1201.79 L1926.63 1201.79 L1926.04 1201.79 L1925.46 1201.79 L1924.87 1201.79 L1924.29 1201.79 L1923.7 1201.79 L1923.11 1201.79 L1922.53 1201.79 L1921.94 1201.79 L1921.35 1201.79 L1920.77 1201.79 L1920.18 1201.79 L1919.59 1201.79 L1919.01 1201.79 L1918.42 1201.79 L1917.83 1201.79 L1917.25 1201.79 L1916.66 1201.79 L1916.08 1201.79 L1915.49 1201.79 L1914.9 1201.79 L1914.32 1201.79 L1913.73 1201.79 L1913.14 1201.79 L1912.56 1201.79 L1911.97 1201.79 L1911.38 1201.79 L1910.8 1201.79 L1910.21 1201.79 L1909.63 1201.79 L1909.04 1201.79 L1908.45 1201.79 L1907.87 1201.79 L1907.28 1201.79 L1906.69 1201.79 L1906.11 1201.79 L1905.52 1201.79 L1904.93 1201.79 L1904.35 1201.79 L1903.76 1201.79 L1903.17 1201.79 L1902.59 1201.79 L1902 1201.79 L1901.42 1201.79 L1900.83 1201.79 L1900.24 1201.79 L1899.66 1201.79 L1899.07 1201.79 L1898.48 1201.79 L1897.9 1201.79 L1897.31 1201.79 L1896.72 1201.79 L1896.14 1201.79 L1895.55 1201.79 L1894.96 1201.79 L1894.38 1201.79 L1893.79 1201.79 L1893.21 1201.79 L1892.62 1201.79 L1892.03 1201.79 L1891.45 1201.79 L1890.86 1201.79 L1890.27 1201.79 L1889.69 1201.79 L1889.1 1201.79 L1888.51 1201.79 L1887.93 1201.79 L1887.34 1201.79 L1886.76 1201.79 L1886.17 1201.79 L1885.58 1201.79 L1885 1201.79 L1884.41 1201.79 L1883.82 1201.79 L1883.24 1201.79 L1882.65 1201.79 L1882.06 1201.79 L1881.48 1201.79 L1880.89 1201.79 L1880.3 1201.79 L1879.72 1201.79 L1879.13 1201.79 L1878.55 1201.79 L1877.96 1201.79 L1877.37 1201.79 L1876.79 1201.79 L1876.2 1201.79 L1875.61 1201.79 L1875.03 1201.79 L1874.44 1201.79 L1873.85 1201.79 L1873.27 1201.79 L1872.68 1201.79 L1872.09 1201.79 L1871.51 1201.79 L1870.92 1201.79 L1870.34 1201.79 L1869.75 1201.79 L1869.16 1201.79 L1868.58 1201.79 L1867.99 1201.79 L1867.4 1201.79 L1866.82 1201.79 L1866.23 1201.79 L1865.64 1201.79 L1865.06 1201.79 L1864.47 1201.79 L1863.88 1201.79 L1863.3 1201.79 L1862.71 1201.79 L1862.13 1201.79 L1861.54 1201.79 L1860.95 1201.79 L1860.37 1201.79 L1859.78 1201.79 L1859.19 1201.79 L1858.61 1201.79 L1858.02 1201.79 L1857.43 1201.79 L1856.85 1201.79 L1856.26 1201.79 L1855.68 1201.79 L1855.09 1201.79 L1854.5 1201.79 L1853.92 1201.79 L1853.33 1201.79 L1852.74 1201.79 L1852.16 1201.79 L1851.57 1201.79 L1850.98 1201.79 L1850.4 1201.79 L1849.81 1201.79 L1849.22 1201.79 L1848.64 1201.79 L1848.05 1201.79 L1847.47 1201.79 L1846.88 1201.79 L1846.29 1201.79 L1845.71 1201.79 L1845.12 1201.79 L1844.53 1201.79 L1843.95 1201.79 L1843.36 1201.79 L1842.77 1201.79 L1842.19 1201.79 L1841.6 1201.79 L1841.01 1201.79 L1840.43 1201.79 L1839.84 1201.79 L1839.26 1201.79 L1838.67 1201.79 L1838.08 1201.79 L1837.5 1201.79 L1836.91 1201.79 L1836.32 1201.79 L1835.74 1201.79 L1835.15 1201.79 L1834.56 1201.79 L1833.98 1201.79 L1833.39 1201.79 L1832.81 1201.79 L1832.22 1201.79 L1831.63 1201.79 L1831.05 1201.79 L1830.46 1201.79 L1829.87 1201.79 L1829.29 1201.79 L1828.7 1201.79 L1828.11 1201.79 L1827.53 1201.79 L1826.94 1201.79 L1826.35 1201.79 L1825.77 1201.79 L1825.18 1201.79 L1824.6 1201.79 L1824.01 1201.79 L1823.42 1201.79 L1822.84 1201.79 L1822.25 1201.79 L1821.66 1201.79 L1821.08 1201.79 L1820.49 1201.79 L1819.9 1201.79 L1819.32 1201.79 L1818.73 1201.79 L1818.14 1201.79 L1817.56 1201.79 L1816.97 1201.79 L1816.39 1201.79 L1815.8 1201.79 L1815.21 1201.79 L1814.63 1201.79 L1814.04 1201.79 L1813.45 1201.79 L1812.87 1201.79 L1812.28 1201.79 L1811.69 1201.79 L1811.11 1201.79 L1810.52 1201.79 L1809.94 1201.79 L1809.35 1201.79 L1808.76 1201.79 L1808.18 1201.79 L1807.59 1201.79 L1807 1201.79 L1806.42 1201.79 L1805.83 1201.79 L1805.24 1201.79 L1804.66 1201.79 L1804.07 1201.79 L1803.48 1201.79 L1802.9 1201.79 L1802.31 1201.79 L1801.73 1201.79 L1801.14 1201.79 L1800.55 1201.79 L1799.97 1201.79 L1799.38 1201.79 L1798.79 1201.79 L1798.21 1201.79 L1797.62 1201.79 L1797.03 1201.79 L1796.45 1201.79 L1795.86 1201.79 L1795.27 1201.79 L1794.69 1201.79 L1794.1 1201.79 L1793.52 1201.79 L1792.93 1201.79 L1792.34 1201.79 L1791.76 1201.79 L1791.17 1201.79 L1790.58 1201.79 L1790 1201.79 L1789.41 1201.79 L1788.82 1201.79 L1788.24 1201.79 L1787.65 1201.79 L1787.06 1201.79 L1786.48 1201.79 L1785.89 1201.79 L1785.31 1201.79 L1784.72 1201.79 L1784.13 1201.79 L1783.55 1201.79 L1782.96 1201.79 L1782.37 1201.79 L1781.79 1201.79 L1781.2 1201.79 L1780.61 1201.79 L1780.03 1201.79 L1779.44 1201.79 L1778.86 1201.79 L1778.27 1201.79 L1777.68 1201.79 L1777.1 1201.79 L1776.51 1201.79 L1775.92 1201.79 L1775.34 1201.79 L1774.75 1201.79 L1774.16 1201.79 L1773.58 1201.79 L1772.99 1201.79 L1772.4 1201.79 L1771.82 1201.79 L1771.23 1201.79 L1770.65 1201.79 L1770.06 1201.79 L1769.47 1201.79 L1768.89 1201.79 L1768.3 1201.79 L1767.71 1201.79 L1767.13 1201.79 L1766.54 1201.79 L1765.95 1201.79 L1765.37 1201.79 L1764.78 1201.79 L1764.19 1201.79 L1763.61 1201.79 L1763.02 1201.79 L1762.44 1201.79 L1761.85 1201.79 L1761.26 1201.79 L1760.68 1201.79 L1760.09 1201.79 L1759.5 1201.79 L1758.92 1201.79 L1758.33 1201.79 L1757.74 1201.79 L1757.16 1201.79 L1756.57 1201.79 L1755.99 1201.79 L1755.4 1201.79 L1754.81 1201.79 L1754.23 1201.79 L1753.64 1201.79 L1753.05 1201.79 L1752.47 1201.79 L1751.88 1201.79 L1751.29 1201.79 L1750.71 1201.79 L1750.12 1201.79 L1749.53 1201.79 L1748.95 1201.79 L1748.36 1201.79 L1747.78 1201.79 L1747.19 1201.79 L1746.6 1201.79 L1746.02 1201.79 L1745.43 1201.79 L1744.84 1201.79 L1744.26 1201.79 L1743.67 1201.79 L1743.08 1201.79 L1742.5 1201.79 L1741.91 1201.79 L1741.32 1201.79 L1740.74 1201.79 L1740.15 1201.79 L1739.57 1201.79 L1738.98 1201.79 L1738.39 1201.79 L1737.81 1201.79 L1737.22 1201.79 L1736.63 1201.79 L1736.05 1201.79 L1735.46 1201.79 L1734.87 1201.79 L1734.29 1201.79 L1733.7 1201.79 L1733.11 1201.79 L1732.53 1201.79 L1731.94 1201.79 L1731.36 1201.79 L1730.77 1201.79 L1730.18 1201.79 L1729.6 1201.79 L1729.01 1201.79 L1728.42 1201.79 L1727.84 1201.79 L1727.25 1201.79 L1726.66 1201.79 L1726.08 1201.79 L1725.49 1201.79 L1724.91 1201.79 L1724.32 1201.79 L1723.73 1201.79 L1723.15 1201.79 L1722.56 1201.79 L1721.97 1201.79 L1721.39 1201.79 L1720.8 1201.79 L1720.21 1201.79 L1719.63 1201.79 L1719.04 1201.79 L1718.45 1201.79 L1717.87 1201.79 L1717.28 1201.79 L1716.7 1201.79 L1716.11 1201.79 L1715.52 1201.79 L1714.94 1201.79 L1714.35 1201.79 L1713.76 1201.79 L1713.18 1201.79 L1712.59 1201.79 L1712 1201.79 L1711.42 1201.79 L1710.83 1201.79 L1710.24 1201.79 L1709.66 1201.79 L1709.07 1201.79 L1708.49 1201.79 L1707.9 1201.79 L1707.31 1201.79 L1706.73 1201.79 L1706.14 1201.79 L1705.55 1201.79 L1704.97 1201.79 L1704.38 1201.79 L1703.79 1201.79 L1703.21 1201.79 L1702.62 1201.79 L1702.04 1201.79 L1701.45 1201.79 L1700.86 1201.79 L1700.28 1201.79 L1699.69 1201.79 L1699.1 1201.79 L1698.52 1201.79 L1697.93 1201.79 L1697.34 1201.79 L1696.76 1201.79 L1696.17 1201.79 L1695.58 1201.79 L1695 1201.79 L1694.41 1201.79 L1693.83 1201.79 L1693.24 1201.79 L1692.65 1201.79 L1692.07 1201.79 L1691.48 1201.79 L1690.89 1201.79 L1690.31 1201.79 L1689.72 1201.79 L1689.13 1201.79 L1688.55 1201.79 L1687.96 1201.79 L1687.37 1201.79 L1686.79 1201.79 L1686.2 1201.79 L1685.62 1201.79 L1685.03 1201.79 L1684.44 1201.79 L1683.86 1201.79 L1683.27 1201.79 L1682.68 1201.79 L1682.1 1201.79 L1681.51 1201.79 L1680.92 1201.79 L1680.34 1201.79 L1679.75 1201.79 L1679.17 1201.79 L1678.58 1201.79 L1677.99 1201.79 L1677.41 1201.79 L1676.82 1201.79 L1676.23 1201.79 L1675.65 1201.79 L1675.06 1201.79 L1674.47 1201.79 L1673.89 1201.79 L1673.3 1201.79 L1672.71 1201.79 L1672.13 1201.79 L1671.54 1201.79 L1670.96 1201.79 L1670.37 1201.79 L1669.78 1201.79 L1669.2 1201.79 L1668.61 1201.79 L1668.02 1201.79 L1667.44 1201.79 L1666.85 1201.79 L1666.26 1201.79 L1665.68 1201.79 L1665.09 1201.79 L1664.5 1201.79 L1663.92 1201.79 L1663.33 1201.79 L1662.75 1201.79 L1662.16 1201.79 L1661.57 1201.79 L1660.99 1201.79 L1660.4 1201.79 L1659.81 1201.79 L1659.23 1201.79 L1658.64 1201.79 L1658.05 1201.79 L1657.47 1201.79 L1656.88 1201.79 L1656.29 1201.79 L1655.71 1201.79 L1655.12 1201.79 L1654.54 1201.79 L1653.95 1201.79 L1653.36 1201.79 L1652.78 1201.79 L1652.19 1201.79 L1651.6 1201.79 L1651.02 1201.79 L1650.43 1201.79 L1649.84 1201.79 L1649.26 1201.79 L1648.67 1201.79 L1648.09 1201.79 L1647.5 1201.79 L1646.91 1201.79 L1646.33 1201.79 L1645.74 1201.79 L1645.15 1201.79 L1644.57 1201.79 L1643.98 1201.79 L1643.39 1201.79 L1642.81 1201.79 L1642.22 1201.79 L1641.63 1201.79 L1641.05 1201.79 L1640.46 1201.79 L1639.88 1201.79 L1639.29 1201.79 L1638.7 1201.79 L1638.12 1201.79 L1637.53 1201.79 L1636.94 1201.79 L1636.36 1201.79 L1635.77 1201.79 L1635.18 1201.79 L1634.6 1201.79 L1634.01 1201.79 L1633.42 1201.79 L1632.84 1201.79 L1632.25 1201.79 L1631.67 1201.79 L1631.08 1201.79 L1630.49 1201.79 L1629.91 1201.79 L1629.32 1201.79 L1628.73 1201.79 L1628.15 1201.79 L1627.56 1201.79 L1626.97 1201.79 L1626.39 1201.79 L1625.8 1201.79 L1625.22 1201.79 L1624.63 1201.79 L1624.04 1201.79 L1623.46 1201.79 L1622.87 1201.79 L1622.28 1201.79 L1621.7 1201.79 L1621.11 1201.79 L1620.52 1201.79 L1619.94 1201.79 L1619.35 1201.79 L1618.76 1201.79 L1618.18 1201.79 L1617.59 1201.79 L1617.01 1201.79 L1616.42 1201.79 L1615.83 1201.79 L1615.25 1201.79 L1614.66 1201.79 L1614.07 1201.79 L1613.49 1201.79 L1612.9 1201.79 L1612.31 1201.79 L1611.73 1201.79 L1611.14 1201.79 L1610.55 1201.79 L1609.97 1201.79 L1609.38 1201.79 L1608.8 1201.79 L1608.21 1201.79 L1607.62 1201.79 L1607.04 1201.79 L1606.45 1201.79 L1605.86 1201.79 L1605.28 1201.79 L1604.69 1201.79 L1604.1 1201.79 L1603.52 1201.79 L1602.93 1201.79 L1602.34 1201.79 L1601.76 1201.79 L1601.17 1201.79 L1600.59 1201.79 L1600 1201.79 L1599.41 1201.79 L1598.83 1201.79 L1598.24 1201.79 L1597.65 1201.79 L1597.07 1201.79 L1596.48 1201.79 L1595.89 1201.79 L1595.31 1201.79 L1594.72 1201.79 L1594.14 1201.79 L1593.55 1201.79 L1592.96 1201.79 L1592.38 1201.79 L1591.79 1201.79 L1591.2 1201.79 L1590.62 1201.79 L1590.03 1201.79 L1589.44 1201.79 L1588.86 1201.79 L1588.27 1201.79 L1587.68 1201.79 L1587.1 1201.79 L1586.51 1201.79 L1585.93 1201.79 L1585.34 1201.79 L1584.75 1201.79 L1584.17 1201.79 L1583.58 1201.79 L1582.99 1201.79 L1582.41 1201.79 L1581.82 1201.79 L1581.23 1201.79 L1580.65 1201.79 L1580.06 1201.79 L1579.47 1201.79 L1578.89 1201.79 L1578.3 1201.79 L1577.72 1201.79 L1577.13 1201.79 L1576.54 1201.79 L1575.96 1201.79 L1575.37 1201.79 L1574.78 1201.79 L1574.2 1201.79 L1573.61 1201.79 L1573.02 1201.79 L1572.44 1201.79 L1571.85 1201.79 L1571.27 1201.79 L1570.68 1201.79 L1570.09 1201.79 L1569.51 1201.79 L1568.92 1201.79 L1568.33 1201.79 L1567.75 1201.79 L1567.16 1201.79 L1566.57 1201.79 L1565.99 1201.79 L1565.4 1201.79 L1564.81 1201.79 L1564.23 1201.79 L1563.64 1201.79 L1563.06 1201.79 L1562.47 1201.79 L1561.88 1201.79 L1561.3 1201.79 L1560.71 1201.79 L1560.12 1201.79 L1559.54 1201.79 L1558.95 1201.79 L1558.36 1201.79 L1557.78 1201.79 L1557.19 1201.79 L1556.6 1201.79 L1556.02 1201.79 L1555.43 1201.79 L1554.85 1201.79 L1554.26 1201.79 L1553.67 1201.79 L1553.09 1201.79 L1552.5 1201.79 L1551.91 1201.79 L1551.33 1201.79 L1550.74 1201.79 L1550.15 1201.79 L1549.57 1201.79 L1548.98 1201.79 L1548.4 1201.79 L1547.81 1201.79 L1547.22 1201.79 L1546.64 1201.79 L1546.05 1201.79 L1545.46 1201.79 L1544.88 1201.79 L1544.29 1201.79 L1543.7 1201.79 L1543.12 1201.79 L1542.53 1201.79 L1541.94 1201.79 L1541.36 1201.79 L1540.77 1201.79 L1540.19 1201.79 L1539.6 1201.79 L1539.01 1201.79 L1538.43 1201.79 L1537.84 1201.79 L1537.25 1201.79 L1536.67 1201.79 L1536.08 1201.79 L1535.49 1201.79 L1534.91 1201.79 L1534.32 1201.79 L1533.73 1201.79 L1533.15 1201.79 L1532.56 1201.79 L1531.98 1201.79 L1531.39 1201.79 L1530.8 1201.79 L1530.22 1201.79 L1529.63 1201.79 L1529.04 1201.79 L1528.46 1201.79 L1527.87 1201.79 L1527.28 1201.79 L1526.7 1201.79 L1526.11 1201.79 L1525.52 1201.79 L1524.94 1201.79 L1524.35 1201.79 L1523.77 1201.79 L1523.18 1201.79 L1522.59 1201.79 L1522.01 1201.79 L1521.42 1201.79 L1520.83 1201.79 L1520.25 1201.79 L1519.66 1201.79 L1519.07 1201.79 L1518.49 1201.79 L1517.9 1201.79 L1517.32 1201.79 L1516.73 1201.79 L1516.14 1201.79 L1515.56 1201.79 L1514.97 1201.79 L1514.38 1201.79 L1513.8 1201.79 L1513.21 1201.79 L1512.62 1201.79 L1512.04 1201.79 L1511.45 1201.79 L1510.86 1201.79 L1510.28 1201.79 L1509.69 1201.79 L1509.11 1201.79 L1508.52 1201.79 L1507.93 1201.79 L1507.35 1201.79 L1506.76 1201.79 L1506.17 1201.79 L1505.59 1201.79 L1505 1201.79 L1504.41 1201.79 L1503.83 1201.79 L1503.24 1201.79 L1502.65 1201.79 L1502.07 1201.79 L1501.48 1201.79 L1500.9 1201.79 L1500.31 1201.79 L1499.72 1201.79 L1499.14 1201.79 L1498.55 1201.79 L1497.96 1201.79 L1497.38 1201.79 L1496.79 1201.79 L1496.2 1201.79 L1495.62 1201.79 L1495.03 1201.79 L1494.45 1201.79 L1493.86 1201.79 L1493.27 1201.79 L1492.69 1201.79 L1492.1 1201.79 L1491.51 1201.79 L1490.93 1201.79 L1490.34 1201.79 L1489.75 1201.79 L1489.17 1201.79 L1488.58 1201.79 L1487.99 1201.79 L1487.41 1201.79 L1486.82 1201.79 L1486.24 1201.79 L1485.65 1201.79 L1485.06 1201.79 L1484.48 1201.79 L1483.89 1201.79 L1483.3 1201.79 L1482.72 1201.79 L1482.13 1201.79 L1481.54 1201.79 L1480.96 1201.79 L1480.37 1201.79 L1479.78 1201.79 L1479.2 1201.79 L1478.61 1201.79 L1478.03 1201.79 L1477.44 1201.79 L1476.85 1201.79 L1476.27 1201.79 L1475.68 1201.79 L1475.09 1201.79 L1474.51 1201.79 L1473.92 1201.79 L1473.33 1201.79 L1472.75 1201.79 L1472.16 1201.79 L1471.57 1201.79 L1470.99 1201.79 L1470.4 1201.79 L1469.82 1201.79 L1469.23 1201.79 L1468.64 1201.79 L1468.06 1201.79 L1467.47 1201.79 L1466.88 1201.79 L1466.3 1201.79 L1465.71 1201.79 L1465.12 1201.79 L1464.54 1201.79 L1463.95 1201.79 L1463.37 1201.79 L1462.78 1201.79 L1462.19 1201.79 L1461.61 1201.79 L1461.02 1201.79 L1460.43 1201.79 L1459.85 1201.79 L1459.26 1201.79 L1458.67 1201.79 L1458.09 1201.79 L1457.5 1201.79 L1456.91 1201.79 L1456.33 1201.79 L1455.74 1201.79 L1455.16 1201.79 L1454.57 1201.79 L1453.98 1201.79 L1453.4 1201.79 L1452.81 1201.79 L1452.22 1201.79 L1451.64 1201.79 L1451.05 1201.79 L1450.46 1201.79 L1449.88 1201.79 L1449.29 1201.79 L1448.7 1201.79 L1448.12 1201.79 L1447.53 1201.79 L1446.95 1201.79 L1446.36 1201.79 L1445.77 1201.79 L1445.19 1201.79 L1444.6 1201.79 L1444.01 1201.79 L1443.43 1201.79 L1442.84 1201.79 L1442.25 1201.79 L1441.67 1201.79 L1441.08 1201.79 L1440.5 1201.79 L1439.91 1201.79 L1439.32 1201.79 L1438.74 1201.79 L1438.15 1201.79 L1437.56 1201.79 L1436.98 1201.79 L1436.39 1201.79 L1435.8 1201.79 L1435.22 1201.79 L1434.63 1201.79 L1434.04 1201.79 L1433.46 1201.79 L1432.87 1201.79 L1432.29 1201.79 L1431.7 1201.79 L1431.11 1201.79 L1430.53 1201.79 L1429.94 1201.79 L1429.35 1201.79 L1428.77 1201.79 L1428.18 1201.79 L1427.59 1201.79 L1427.01 1201.79 L1426.42 1201.79 L1425.83 1201.79 L1425.25 1201.79 L1424.66 1201.79 L1424.08 1201.79 L1423.49 1201.79 L1422.9 1201.79 L1422.32 1201.79 L1421.73 1201.79 L1421.14 1201.79 L1420.56 1201.79 L1419.97 1201.79 L1419.38 1201.79 L1418.8 1201.79 L1418.21 1201.79 L1417.63 1201.79 L1417.04 1201.79 L1416.45 1201.79 L1415.87 1201.79 L1415.28 1201.79 L1414.69 1201.79 L1414.11 1201.79 L1413.52 1201.79 L1412.93 1201.79 L1412.35 1201.79 L1411.76 1201.79 L1411.17 1201.79 L1410.59 1201.79 L1410 1201.79 L1409.42 1201.79 L1408.83 1201.79 L1408.24 1201.79 L1407.66 1201.79 L1407.07 1201.79 L1406.48 1201.79 L1405.9 1201.79 L1405.31 1201.79 L1404.72 1201.79 L1404.14 1201.79 L1403.55 1201.79 L1402.96 1201.79 L1402.38 1201.79 L1401.79 1201.79 L1401.21 1201.79 L1400.62 1201.79 L1400.03 1201.79 L1399.45 1201.79 L1398.86 1201.79 L1398.27 1201.79 L1397.69 1201.79 L1397.1 1201.79 L1396.51 1201.79 L1395.93 1201.79 L1395.34 1201.79 L1394.75 1201.79 L1394.17 1201.79 L1393.58 1201.79 L1393 1201.79 L1392.41 1201.79 L1391.82 1201.79 L1391.24 1201.79 L1390.65 1201.79 L1390.06 1201.79 L1389.48 1201.79 L1388.89 1201.79 L1388.3 1201.79 L1387.72 1201.79 L1387.13 1201.79 L1386.55 1201.79 L1385.96 1201.79 L1385.37 1201.79 L1384.79 1201.79 L1384.2 1201.79 L1383.61 1201.79 L1383.03 1201.79 L1382.44 1201.79 L1381.85 1201.79 L1381.27 1201.79 L1380.68 1201.79 L1380.09 1201.79 L1379.51 1201.79 L1378.92 1201.79 L1378.34 1201.79 L1377.75 1201.79 L1377.16 1201.79 L1376.58 1201.79 L1375.99 1201.79 L1375.4 1201.79 L1374.82 1201.79 L1374.23 1201.79 L1373.64 1201.79 L1373.06 1201.79 L1372.47 1201.79 L1371.88 1201.79 L1371.3 1201.79 L1370.71 1201.79 L1370.13 1201.79 L1369.54 1201.79 L1368.95 1201.79 L1368.37 1201.79 L1367.78 1201.79 L1367.19 1201.79 L1366.61 1201.79 L1366.02 1201.79 L1365.43 1201.79 L1364.85 1201.79 L1364.26 1201.79 L1363.68 1201.79 L1363.09 1201.79 L1362.5 1201.79 L1361.92 1201.79 L1361.33 1201.79 L1360.74 1201.79 L1360.16 1201.79 L1359.57 1201.79 L1358.98 1201.79 L1358.4 1201.79 L1357.81 1201.79 L1357.22 1201.79 L1356.64 1201.79 L1356.05 1201.79 L1355.47 1201.79 L1354.88 1201.79 L1354.29 1201.79 L1353.71 1201.79 L1353.12 1201.79 L1352.53 1201.79 L1351.95 1201.79 L1351.36 1201.79 L1350.77 1201.79 L1350.19 1201.79 L1349.6 1201.79 L1349.01 1201.79 L1348.43 1201.79 L1347.84 1201.79 L1347.26 1201.79 L1346.67 1201.79 L1346.08 1201.79 L1345.5 1201.79 L1344.91 1201.79 L1344.32 1201.79 L1343.74 1201.79 L1343.15 1201.79 L1342.56 1201.79 L1341.98 1201.79 L1341.39 1201.79 L1340.8 1201.79 L1340.22 1201.79 L1339.63 1201.79 L1339.05 1201.79 L1338.46 1201.79 L1337.87 1201.79 L1337.29 1201.79 L1336.7 1201.79 L1336.11 1201.79 L1335.53 1201.79 L1334.94 1201.79 L1334.35 1201.79 L1333.77 1201.79 L1333.18 1201.79 L1332.6 1201.79 L1332.01 1201.79 L1331.42 1201.79 L1330.84 1201.79 L1330.25 1201.79 L1329.66 1201.79 L1329.08 1201.79 L1328.49 1201.79 L1327.9 1201.79 L1327.32 1201.79 L1326.73 1201.79 L1326.14 1201.79 L1325.56 1201.79 L1324.97 1201.79 L1324.39 1201.79 L1323.8 1201.79 L1323.21 1201.79 L1322.63 1201.79 L1322.04 1201.79 L1321.45 1201.79 L1320.87 1201.79 L1320.28 1201.79 L1319.69 1201.79 L1319.11 1201.79 L1318.52 1201.79 L1317.93 1201.79 L1317.35 1201.79 L1316.76 1201.79 L1316.18 1201.79 L1315.59 1201.79 L1315 1201.79 L1314.42 1201.79 L1313.83 1201.79 L1313.24 1201.79 L1312.66 1201.79 L1312.07 1201.79 L1311.48 1201.79 L1310.9 1201.79 L1310.31 1201.79 L1309.73 1201.79 L1309.14 1201.79 L1308.55 1201.79 L1307.97 1201.79 L1307.38 1201.79 L1306.79 1201.79 L1306.21 1201.79 L1305.62 1201.79 L1305.03 1201.79 L1304.45 1201.79 L1303.86 1201.79 L1303.27 1201.79 L1302.69 1201.79 L1302.1 1201.79 L1301.52 1201.79 L1300.93 1201.79 L1300.34 1201.79 L1299.76 1201.79 L1299.17 1201.79 L1298.58 1201.79 L1298 1201.79 L1297.41 1201.79 L1296.82 1201.79 L1296.24 1201.79 L1295.65 1201.79 L1295.06 1201.79 L1294.48 1201.79 L1293.89 1201.79 L1293.31 1201.79 L1292.72 1201.79 L1292.13 1201.79 L1291.55 1201.79 L1290.96 1201.79 L1290.37 1201.79 L1289.79 1201.79 L1289.2 1201.79 L1288.61 1201.79 L1288.03 1201.79 L1287.44 1201.79 L1286.86 1201.79 L1286.27 1201.79 L1285.68 1201.79 L1285.1 1201.79 L1284.51 1201.79 L1283.92 1201.79 L1283.34 1201.79 L1282.75 1201.79 L1282.16 1201.79 L1281.58 1201.79 L1280.99 1201.79 L1280.4 1201.79 L1279.82 1201.79 L1279.23 1201.79 L1278.65 1201.79 L1278.06 1201.79 L1277.47 1201.79 L1276.89 1201.79 L1276.3 1201.79 L1275.71 1201.79 L1275.13 1201.79 L1274.54 1201.79 L1273.95 1201.79 L1273.37 1201.79 L1272.78 1201.79 L1272.19 1201.79 L1271.61 1201.79 L1271.02 1201.79 L1270.44 1201.79 L1269.85 1201.79 L1269.26 1201.79 L1268.68 1201.79 L1268.09 1201.79 L1267.5 1201.79 L1266.92 1201.79 L1266.33 1201.79 L1265.74 1201.79 L1265.16 1201.79 L1264.57 1201.79 L1263.98 1201.79 L1263.4 1201.79 L1262.81 1201.79 L1262.23 1201.79 L1261.64 1201.79 L1261.05 1201.79 L1260.47 1201.79 L1259.88 1201.79 L1259.29 1201.79 L1258.71 1201.79 L1258.12 1201.79 L1257.53 1201.79 L1256.95 1201.79 L1256.36 1201.79 L1255.78 1201.79 L1255.19 1201.79 L1254.6 1201.79 L1254.02 1201.79 L1253.43 1201.79 L1252.84 1201.79 L1252.26 1201.79 L1251.67 1201.79 L1251.08 1201.79 L1250.5 1201.79 L1249.91 1201.79 L1249.32 1201.79 L1248.74 1201.79 L1248.15 1201.79 L1247.57 1201.79 L1246.98 1201.79 L1246.39 1201.79 L1245.81 1201.79 L1245.22 1201.79 L1244.63 1201.79 L1244.05 1201.79 L1243.46 1201.79 L1242.87 1201.79 L1242.29 1201.79 L1241.7 1201.79 L1241.11 1201.79 L1240.53 1201.79 L1239.94 1201.79 L1239.36 1201.79 L1238.77 1201.79 L1238.18 1201.79 L1237.6 1201.79 L1237.01 1201.79 L1236.42 1201.79 L1235.84 1201.79 L1235.25 1201.79 L1234.66 1201.79 L1234.08 1201.79 L1233.49 1201.79 L1232.91 1201.79 L1232.32 1201.79 L1231.73 1201.79 L1231.15 1201.79 L1230.56 1201.79 L1229.97 1201.79 L1229.39 1201.79 L1228.8 1201.79 L1228.21 1201.79 L1227.63 1201.79 L1227.04 1201.79 L1226.45 1201.79 L1225.87 1201.79 L1225.28 1201.79 L1224.7 1201.79 L1224.11 1201.79 L1223.52 1201.79 L1222.94 1201.79 L1222.35 1201.79 L1221.76 1201.79 L1221.18 1201.79 L1220.59 1201.79 L1220 1201.79 L1219.42 1201.79 L1218.83 1201.79 L1218.24 1201.79 L1217.66 1201.79 L1217.07 1201.79 L1216.49 1201.79 L1215.9 1201.79 L1215.31 1201.79 L1214.73 1201.79 L1214.14 1201.79 L1213.55 1201.79 L1212.97 1201.79 L1212.38 1201.79 L1211.79 1201.79 L1211.21 1201.79 L1210.62 1201.79 L1210.03 1201.79 L1209.45 1201.79 L1208.86 1201.79 L1208.28 1201.79 L1207.69 1201.79 L1207.1 1201.79 L1206.52 1201.79 L1205.93 1201.79 L1205.34 1201.79 L1204.76 1201.79 L1204.17 1201.79 L1203.58 1201.79 L1203 1201.79 L1202.41 1201.79 L1201.83 1201.79 L1201.24 1201.79 L1200.65 1201.79 L1200.07 1201.79 L1199.48 1201.79 L1198.89 1201.79 L1198.31 1201.79 L1197.72 1201.79 L1197.13 1201.79 L1196.55 1201.79 L1195.96 1201.79 L1195.37 1201.79 L1194.79 1201.79 L1194.2 1201.79 L1193.62 1201.79 L1193.03 1201.79 L1192.44 1201.79 L1191.86 1201.79 L1191.27 1201.79 L1190.68 1201.79 L1190.1 1201.79 L1189.51 1201.79 L1188.92 1201.79 L1188.34 1201.79 L1187.75 1201.79 L1187.16 1201.79 L1186.58 1201.79 L1185.99 1201.79 L1185.41 1201.79 L1184.82 1201.79 L1184.23 1201.79 L1183.65 1201.79 L1183.06 1201.79 L1182.47 1201.79 L1181.89 1201.79 L1181.3 1201.79 L1180.71 1201.79 L1180.13 1201.79 L1179.54 1201.79 L1178.96 1201.79 L1178.37 1201.79 L1177.78 1201.79 L1177.2 1201.79 L1176.61 1201.79 L1176.02 1201.79 L1175.44 1201.79 L1174.85 1201.79 L1174.26 1201.79 L1173.68 1201.79 L1173.09 1201.79 L1172.5 1201.79 L1171.92 1201.79 L1171.33 1201.79 L1170.75 1201.79 L1170.16 1201.79 L1169.57 1201.79 L1168.99 1201.79 L1168.4 1201.79 L1167.81 1201.79 L1167.23 1201.79 L1166.64 1201.79 L1166.05 1201.79 L1165.47 1201.79 L1164.88 1201.79 L1164.29 1201.79 L1163.71 1201.79 L1163.12 1201.79 L1162.54 1201.79 L1161.95 1201.79 L1161.36 1201.79 L1160.78 1201.79 L1160.19 1201.79 L1159.6 1201.79 L1159.02 1201.79 L1158.43 1201.79 L1157.84 1201.79 L1157.26 1201.79 L1156.67 1201.79 L1156.09 1201.79 L1155.5 1201.79 L1154.91 1201.79 L1154.33 1201.79 L1153.74 1201.79 L1153.15 1201.79 L1152.57 1201.79 L1151.98 1201.79 L1151.39 1201.79 L1150.81 1201.79 L1150.22 1201.79 L1149.63 1201.79 L1149.05 1201.79 L1148.46 1201.79 L1147.88 1201.79 L1147.29 1201.79 L1146.7 1201.79 L1146.12 1201.79 L1145.53 1201.79 L1144.94 1201.79 L1144.36 1201.79 L1143.77 1201.79 L1143.18 1201.79 L1142.6 1201.79 L1142.01 1201.79 L1141.42 1201.79 L1140.84 1201.79 L1140.25 1201.79 L1139.67 1201.79 L1139.08 1201.79 L1138.49 1201.79 L1137.91 1201.79 L1137.32 1201.79 L1136.73 1201.79 L1136.15 1201.79 L1135.56 1201.79 L1134.97 1201.79 L1134.39 1201.79 L1133.8 1201.79 L1133.21 1201.79 L1132.63 1201.79 L1132.04 1201.79 L1131.46 1201.79 L1130.87 1201.79 L1130.28 1201.79 L1129.7 1201.79 L1129.11 1201.79 L1128.52 1201.79 L1127.94 1201.79 L1127.35 1201.79 L1126.76 1201.79 L1126.18 1201.79 L1125.59 1201.79 L1125.01 1201.79 L1124.42 1201.79 L1123.83 1201.79 L1123.25 1201.79 L1122.66 1201.79 L1122.07 1201.79 L1121.49 1201.79 L1120.9 1201.79 L1120.31 1201.79 L1119.73 1201.79 L1119.14 1201.79 L1118.55 1201.79 L1117.97 1201.79 L1117.38 1201.79 L1116.8 1201.79 L1116.21 1201.79 L1115.62 1201.79 L1115.04 1201.79 L1114.45 1201.79 L1113.86 1201.79 L1113.28 1201.79 L1112.69 1201.79 L1112.1 1201.79 L1111.52 1201.79 L1110.93 1201.79 L1110.34 1201.79 L1109.76 1201.79 L1109.17 1201.79 L1108.59 1201.79 L1108 1201.79 L1107.41 1201.79 L1106.83 1201.79 L1106.24 1201.79 L1105.65 1201.79 L1105.07 1201.79 L1104.48 1201.79 L1103.89 1201.79 L1103.31 1201.79 L1102.72 1201.79 L1102.14 1201.79 L1101.55 1201.79 L1100.96 1201.79 L1100.38 1201.79 L1099.79 1201.79 L1099.2 1201.79 L1098.62 1201.79 L1098.03 1201.79 L1097.44 1201.79 L1096.86 1201.79 L1096.27 1201.79 L1095.68 1201.79 L1095.1 1201.79 L1094.51 1201.79 L1093.93 1201.79 L1093.34 1201.79 L1092.75 1201.79 L1092.17 1201.79 L1091.58 1201.79 L1090.99 1201.79 L1090.41 1201.79 L1089.82 1201.79 L1089.23 1201.79 L1088.65 1201.79 L1088.06 1201.79 L1087.47 1201.79 L1086.89 1201.79 L1086.3 1201.79 L1085.72 1201.79 L1085.13 1201.79 L1084.54 1201.79 L1083.96 1201.79 L1083.37 1201.79 L1082.78 1201.79 L1082.2 1201.79 L1081.61 1201.79 L1081.02 1201.79 L1080.44 1201.79 L1079.85 1201.79 L1079.26 1201.79 L1078.68 1201.79 L1078.09 1201.79 L1077.51 1201.79 L1076.92 1201.79 L1076.33 1201.79 L1075.75 1201.79 L1075.16 1201.79 L1074.57 1201.79 L1073.99 1201.79 L1073.4 1201.79 L1072.81 1201.79 L1072.23 1201.79 L1071.64 1201.79 L1071.06 1201.79 L1070.47 1201.79 L1069.88 1201.79 L1069.3 1201.79 L1068.71 1201.79 L1068.12 1201.79 L1067.54 1201.79 L1066.95 1201.79 L1066.36 1201.79 L1065.78 1201.79 L1065.19 1201.79 L1064.6 1201.79 L1064.02 1201.79 L1063.43 1201.79 L1062.85 1201.79 L1062.26 1201.79 L1061.67 1201.79 L1061.09 1201.79 L1060.5 1201.79 L1059.91 1201.79 L1059.33 1201.79 L1058.74 1201.79 L1058.15 1201.79 L1057.57 1201.79 L1056.98 1201.79 L1056.39 1201.79 L1055.81 1201.79 L1055.22 1201.79 L1054.64 1201.79 L1054.05 1201.79 L1053.46 1201.79 L1052.88 1201.79 L1052.29 1201.79 L1051.7 1201.79 L1051.12 1201.79 L1050.53 1201.79 L1049.94 1201.79 L1049.36 1201.79 L1048.77 1201.79 L1048.19 1201.79 L1047.6 1201.79 L1047.01 1201.79 L1046.43 1201.79 L1045.84 1201.79 L1045.25 1201.79 L1044.67 1201.79 L1044.08 1201.79 L1043.49 1201.79 L1042.91 1201.79 L1042.32 1201.79 L1041.73 1201.79 L1041.15 1201.79 L1040.56 1201.79 L1039.98 1201.79 L1039.39 1201.79 L1038.8 1201.79 L1038.22 1201.79 L1037.63 1201.79 L1037.04 1201.79 L1036.46 1201.79 L1035.87 1201.79 L1035.28 1201.79 L1034.7 1201.79 L1034.11 1201.79 L1033.52 1201.79 L1032.94 1201.79 L1032.35 1201.79 L1031.77 1201.79 L1031.18 1201.79 L1030.59 1201.79 L1030.01 1201.79 L1029.42 1201.79 L1028.83 1201.79 L1028.25 1201.79 L1027.66 1201.79 L1027.07 1201.79 L1026.49 1201.79 L1025.9 1201.79 L1025.32 1201.79 L1024.73 1201.79 L1024.14 1201.79 L1023.56 1201.79 L1022.97 1201.79 L1022.38 1201.79 L1021.8 1201.79 L1021.21 1201.79 L1020.62 1201.79 L1020.04 1201.79 L1019.45 1201.79 L1018.86 1201.79 L1018.28 1201.79 L1017.69 1201.79 L1017.11 1201.79 L1016.52 1201.79 L1015.93 1201.79 L1015.35 1201.79 L1014.76 1201.79 L1014.17 1201.79 L1013.59 1201.79 L1013 1201.79 L1012.41 1201.79 L1011.83 1201.79 L1011.24 1201.79 L1010.65 1201.79 L1010.07 1201.79 L1009.48 1201.79 L1008.9 1201.79 L1008.31 1201.79 L1007.72 1201.79 L1007.14 1201.79 L1006.55 1201.79 L1005.96 1201.79 L1005.38 1201.79 L1004.79 1201.79 L1004.2 1201.79 L1003.62 1201.79 L1003.03 1201.79 L1002.44 1201.79 L1001.86 1201.79 L1001.27 1201.79 L1000.69 1201.79 L1000.1 1201.79 L999.513 1201.79 L998.926 1201.79 L998.34 1201.79 L997.754 1201.79 L997.167 1201.79 L996.581 1201.79 L995.994 1201.79 L995.408 1201.79 L994.822 1201.79 L994.235 1201.79 L993.649 1201.79 L993.062 1201.79 L992.476 1201.79 L991.889 1201.79 L991.303 1201.79 L990.717 1201.79 L990.13 1201.79 L989.544 1201.79 L988.957 1201.79 L988.371 1201.79 L987.785 1201.79 L987.198 1201.79 L986.612 1201.79 L986.025 1201.79  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1201.93 986.612,1201.93 987.198,1201.93 987.785,1201.93 988.371,1201.93 988.957,1201.93 989.544,1201.93 990.13,1201.93 990.717,1201.93 991.303,1201.93 991.889,1201.93 992.476,1201.93 993.062,1201.93 993.649,1201.93 994.235,1201.93 994.822,1201.93 995.408,1201.93 995.994,1201.93 996.581,1201.93 997.167,1201.93 997.754,1201.93 998.34,1201.93 998.926,1201.93 999.513,1201.93 1000.1,1201.93 1000.69,1201.93 1001.27,1201.93 1001.86,1201.93 1002.44,1201.93 1003.03,1201.93 1003.62,1201.93 1004.2,1201.93 1004.79,1201.93 1005.38,1201.93 1005.96,1201.93 1006.55,1201.93 1007.14,1201.93 1007.72,1201.93 1008.31,1201.93 1008.9,1201.93 1009.48,1201.93 1010.07,1201.93 1010.65,1201.93 1011.24,1201.93 1011.83,1201.93 1012.41,1201.93 1013,1201.93 1013.59,1201.93 1014.17,1201.93 1014.76,1201.93 1015.35,1201.93 1015.93,1201.93 1016.52,1201.93 1017.11,1201.93 1017.69,1201.93 1018.28,1201.93 1018.86,1201.93 1019.45,1201.93 1020.04,1201.93 1020.62,1201.93 1021.21,1201.93 1021.8,1201.93 1022.38,1201.93 1022.97,1201.93 1023.56,1201.93 1024.14,1201.93 1024.73,1201.93 1025.32,1201.93 1025.9,1201.93 1026.49,1201.93 1027.07,1201.93 1027.66,1201.93 1028.25,1201.93 1028.83,1201.93 1029.42,1201.93 1030.01,1201.93 1030.59,1201.93 1031.18,1201.93 1031.77,1201.93 1032.35,1201.93 1032.94,1201.93 1033.52,1201.93 1034.11,1201.93 1034.7,1201.93 1035.28,1201.93 1035.87,1201.93 1036.46,1201.93 1037.04,1201.93 1037.63,1201.93 1038.22,1201.93 1038.8,1201.93 1039.39,1201.93 1039.98,1201.93 1040.56,1201.93 1041.15,1201.93 1041.73,1201.93 1042.32,1201.93 1042.91,1201.93 1043.49,1201.93 1044.08,1201.93 1044.67,1201.93 1045.25,1201.93 1045.84,1201.93 1046.43,1201.93 1047.01,1201.93 1047.6,1201.93 1048.19,1201.93 1048.77,1201.93 1049.36,1201.93 1049.94,1201.93 1050.53,1201.93 1051.12,1201.93 1051.7,1201.93 1052.29,1201.93 1052.88,1201.93 1053.46,1201.93 1054.05,1201.93 1054.64,1201.93 1055.22,1201.93 1055.81,1201.93 1056.39,1201.93 1056.98,1201.93 1057.57,1201.93 1058.15,1201.93 1058.74,1201.93 1059.33,1201.93 1059.91,1201.93 1060.5,1201.93 1061.09,1201.93 1061.67,1201.93 1062.26,1201.93 1062.85,1201.93 1063.43,1201.93 1064.02,1201.93 1064.6,1201.93 1065.19,1201.93 1065.78,1201.93 1066.36,1201.93 1066.95,1201.93 1067.54,1201.93 1068.12,1201.93 1068.71,1201.93 1069.3,1201.93 1069.88,1201.93 1070.47,1201.93 1071.06,1201.93 1071.64,1201.93 1072.23,1201.93 1072.81,1201.93 1073.4,1201.93 1073.99,1201.93 1074.57,1201.93 1075.16,1201.93 1075.75,1201.93 1076.33,1201.93 1076.92,1201.93 1077.51,1201.93 1078.09,1201.93 1078.68,1201.93 1079.26,1201.93 1079.85,1201.93 1080.44,1201.93 1081.02,1201.93 1081.61,1201.93 1082.2,1201.93 1082.78,1201.93 1083.37,1201.93 1083.96,1201.93 1084.54,1201.93 1085.13,1201.93 1085.72,1201.93 1086.3,1201.93 1086.89,1201.93 1087.47,1201.93 1088.06,1201.93 1088.65,1201.93 1089.23,1201.93 1089.82,1201.93 1090.41,1201.93 1090.99,1201.93 1091.58,1201.93 1092.17,1201.93 1092.75,1201.93 1093.34,1201.93 1093.93,1201.93 1094.51,1201.93 1095.1,1201.93 1095.68,1201.93 1096.27,1201.93 1096.86,1201.93 1097.44,1201.93 1098.03,1201.93 1098.62,1201.93 1099.2,1201.93 1099.79,1201.93 1100.38,1201.93 1100.96,1201.93 1101.55,1201.93 1102.14,1201.93 1102.72,1201.93 1103.31,1201.93 1103.89,1201.93 1104.48,1201.93 1105.07,1201.93 1105.65,1201.93 1106.24,1201.93 1106.83,1201.93 1107.41,1201.93 1108,1201.93 1108.59,1201.93 1109.17,1201.93 1109.76,1201.93 1110.34,1201.93 1110.93,1201.93 1111.52,1201.93 1112.1,1201.93 1112.69,1201.93 1113.28,1201.93 1113.86,1201.93 1114.45,1201.93 1115.04,1201.93 1115.62,1201.93 1116.21,1201.93 1116.8,1201.93 1117.38,1201.93 1117.97,1201.93 1118.55,1201.93 1119.14,1201.93 1119.73,1201.93 1120.31,1201.93 1120.9,1201.93 1121.49,1201.93 1122.07,1201.93 1122.66,1201.93 1123.25,1201.93 1123.83,1201.93 1124.42,1201.93 1125.01,1201.93 1125.59,1201.93 1126.18,1201.93 1126.76,1201.93 1127.35,1201.93 1127.94,1201.93 1128.52,1201.93 1129.11,1201.93 1129.7,1201.93 1130.28,1201.93 1130.87,1201.93 1131.46,1201.93 1132.04,1201.93 1132.63,1201.93 1133.21,1201.93 1133.8,1201.93 1134.39,1201.93 1134.97,1201.93 1135.56,1201.93 1136.15,1201.93 1136.73,1201.93 1137.32,1201.93 1137.91,1201.93 1138.49,1201.93 1139.08,1201.93 1139.67,1201.93 1140.25,1201.93 1140.84,1201.93 1141.42,1201.93 1142.01,1201.93 1142.6,1201.93 1143.18,1201.93 1143.77,1201.93 1144.36,1201.93 1144.94,1201.93 1145.53,1201.93 1146.12,1201.93 1146.7,1201.93 1147.29,1201.93 1147.88,1201.93 1148.46,1201.93 1149.05,1201.93 1149.63,1201.93 1150.22,1201.93 1150.81,1201.93 1151.39,1201.93 1151.98,1201.93 1152.57,1201.93 1153.15,1201.93 1153.74,1201.93 1154.33,1201.93 1154.91,1201.93 1155.5,1201.93 1156.09,1201.93 1156.67,1201.93 1157.26,1201.93 1157.84,1201.93 1158.43,1201.93 1159.02,1201.93 1159.6,1201.93 1160.19,1201.93 1160.78,1201.93 1161.36,1201.93 1161.95,1201.93 1162.54,1201.93 1163.12,1201.93 1163.71,1201.93 1164.29,1201.93 1164.88,1201.93 1165.47,1201.93 1166.05,1201.93 1166.64,1201.93 1167.23,1201.93 1167.81,1201.93 1168.4,1201.93 1168.99,1201.93 1169.57,1201.93 1170.16,1201.93 1170.75,1201.93 1171.33,1201.93 1171.92,1201.93 1172.5,1201.93 1173.09,1201.93 1173.68,1201.93 1174.26,1201.93 1174.85,1201.93 1175.44,1201.93 1176.02,1201.93 1176.61,1201.93 1177.2,1201.93 1177.78,1201.93 1178.37,1201.93 1178.96,1201.93 1179.54,1201.93 1180.13,1201.93 1180.71,1201.93 1181.3,1201.93 1181.89,1201.93 1182.47,1201.93 1183.06,1201.93 1183.65,1201.93 1184.23,1201.93 1184.82,1201.93 1185.41,1201.93 1185.99,1201.93 1186.58,1201.93 1187.16,1201.93 1187.75,1201.93 1188.34,1201.93 1188.92,1201.93 1189.51,1201.93 1190.1,1201.93 1190.68,1201.93 1191.27,1201.93 1191.86,1201.93 1192.44,1201.93 1193.03,1201.93 1193.62,1201.93 1194.2,1201.93 1194.79,1201.93 1195.37,1201.93 1195.96,1201.93 1196.55,1201.93 1197.13,1201.93 1197.72,1201.93 1198.31,1201.93 1198.89,1201.93 1199.48,1201.93 1200.07,1201.93 1200.65,1201.93 1201.24,1201.93 1201.83,1201.93 1202.41,1201.93 1203,1201.93 1203.58,1201.93 1204.17,1201.93 1204.76,1201.93 1205.34,1201.93 1205.93,1201.93 1206.52,1201.93 1207.1,1201.93 1207.69,1201.93 1208.28,1201.93 1208.86,1201.93 1209.45,1201.93 1210.03,1201.93 1210.62,1201.93 1211.21,1201.93 1211.79,1201.93 1212.38,1201.93 1212.97,1201.93 1213.55,1201.93 1214.14,1201.93 1214.73,1201.93 1215.31,1201.93 1215.9,1201.93 1216.49,1201.93 1217.07,1201.93 1217.66,1201.93 1218.24,1201.93 1218.83,1201.93 1219.42,1201.93 1220,1201.93 1220.59,1201.93 1221.18,1201.93 1221.76,1201.93 1222.35,1201.93 1222.94,1201.93 1223.52,1201.93 1224.11,1201.93 1224.7,1201.93 1225.28,1201.93 1225.87,1201.93 1226.45,1201.93 1227.04,1201.93 1227.63,1201.93 1228.21,1201.93 1228.8,1201.93 1229.39,1201.93 1229.97,1201.93 1230.56,1201.93 1231.15,1201.93 1231.73,1201.93 1232.32,1201.93 1232.91,1201.93 1233.49,1201.93 1234.08,1201.93 1234.66,1201.93 1235.25,1201.93 1235.84,1201.93 1236.42,1201.93 1237.01,1201.93 1237.6,1201.93 1238.18,1201.93 1238.77,1201.93 1239.36,1201.93 1239.94,1201.93 1240.53,1201.93 1241.11,1201.93 1241.7,1201.93 1242.29,1201.93 1242.87,1201.93 1243.46,1201.93 1244.05,1201.93 1244.63,1201.93 1245.22,1201.93 1245.81,1201.93 1246.39,1201.93 1246.98,1201.93 1247.57,1201.93 1248.15,1201.93 1248.74,1201.93 1249.32,1201.93 1249.91,1201.93 1250.5,1201.93 1251.08,1201.93 1251.67,1201.93 1252.26,1201.93 1252.84,1201.93 1253.43,1201.93 1254.02,1201.93 1254.6,1201.93 1255.19,1201.93 1255.78,1201.93 1256.36,1201.93 1256.95,1201.93 1257.53,1201.93 1258.12,1201.93 1258.71,1201.93 1259.29,1201.93 1259.88,1201.93 1260.47,1201.93 1261.05,1201.93 1261.64,1201.93 1262.23,1201.93 1262.81,1201.93 1263.4,1201.93 1263.98,1201.93 1264.57,1201.93 1265.16,1201.93 1265.74,1201.93 1266.33,1201.93 1266.92,1201.93 1267.5,1201.93 1268.09,1201.93 1268.68,1201.93 1269.26,1201.93 1269.85,1201.93 1270.44,1201.93 1271.02,1201.93 1271.61,1201.93 1272.19,1201.93 1272.78,1201.93 1273.37,1201.93 1273.95,1201.93 1274.54,1201.93 1275.13,1201.93 1275.71,1201.93 1276.3,1201.93 1276.89,1201.93 1277.47,1201.93 1278.06,1201.93 1278.65,1201.93 1279.23,1201.93 1279.82,1201.93 1280.4,1201.93 1280.99,1201.93 1281.58,1201.93 1282.16,1201.93 1282.75,1201.93 1283.34,1201.93 1283.92,1201.93 1284.51,1201.93 1285.1,1201.93 1285.68,1201.93 1286.27,1201.93 1286.86,1201.93 1287.44,1201.93 1288.03,1201.93 1288.61,1201.93 1289.2,1201.93 1289.79,1201.93 1290.37,1201.93 1290.96,1201.93 1291.55,1201.93 1292.13,1201.93 1292.72,1201.93 1293.31,1201.93 1293.89,1201.93 1294.48,1201.93 1295.06,1201.93 1295.65,1201.93 1296.24,1201.93 1296.82,1201.93 1297.41,1201.93 1298,1201.93 1298.58,1201.93 1299.17,1201.93 1299.76,1201.93 1300.34,1201.93 1300.93,1201.93 1301.52,1201.93 1302.1,1201.93 1302.69,1201.93 1303.27,1201.93 1303.86,1201.93 1304.45,1201.93 1305.03,1201.93 1305.62,1201.93 1306.21,1201.93 1306.79,1201.93 1307.38,1201.93 1307.97,1201.93 1308.55,1201.93 1309.14,1201.93 1309.73,1201.93 1310.31,1201.93 1310.9,1201.93 1311.48,1201.93 1312.07,1201.93 1312.66,1201.93 1313.24,1201.93 1313.83,1201.93 1314.42,1201.93 1315,1201.93 1315.59,1201.93 1316.18,1201.93 1316.76,1201.93 1317.35,1201.93 1317.93,1201.93 1318.52,1201.93 1319.11,1201.93 1319.69,1201.93 1320.28,1201.93 1320.87,1201.93 1321.45,1201.93 1322.04,1201.93 1322.63,1201.93 1323.21,1201.93 1323.8,1201.93 1324.39,1201.93 1324.97,1201.93 1325.56,1201.93 1326.14,1201.93 1326.73,1201.93 1327.32,1201.93 1327.9,1201.93 1328.49,1201.93 1329.08,1201.93 1329.66,1201.93 1330.25,1201.93 1330.84,1201.93 1331.42,1201.93 1332.01,1201.93 1332.6,1201.93 1333.18,1201.93 1333.77,1201.93 1334.35,1201.93 1334.94,1201.93 1335.53,1201.93 1336.11,1201.93 1336.7,1201.93 1337.29,1201.93 1337.87,1201.93 1338.46,1201.93 1339.05,1201.93 1339.63,1201.93 1340.22,1201.93 1340.8,1201.93 1341.39,1201.93 1341.98,1201.93 1342.56,1201.93 1343.15,1201.93 1343.74,1201.93 1344.32,1201.93 1344.91,1201.93 1345.5,1201.93 1346.08,1201.93 1346.67,1201.93 1347.26,1201.93 1347.84,1201.93 1348.43,1201.93 1349.01,1201.93 1349.6,1201.93 1350.19,1201.93 1350.77,1201.93 1351.36,1201.93 1351.95,1201.93 1352.53,1201.93 1353.12,1201.93 1353.71,1201.93 1354.29,1201.93 1354.88,1201.93 1355.47,1201.93 1356.05,1201.93 1356.64,1201.93 1357.22,1201.93 1357.81,1201.93 1358.4,1201.93 1358.98,1201.93 1359.57,1201.93 1360.16,1201.93 1360.74,1201.93 1361.33,1201.93 1361.92,1201.93 1362.5,1201.93 1363.09,1201.93 1363.68,1201.93 1364.26,1201.93 1364.85,1201.93 1365.43,1201.93 1366.02,1201.93 1366.61,1201.93 1367.19,1201.93 1367.78,1201.93 1368.37,1201.93 1368.95,1201.93 1369.54,1201.93 1370.13,1201.93 1370.71,1201.93 1371.3,1201.93 1371.88,1201.93 1372.47,1201.93 1373.06,1201.93 1373.64,1201.93 1374.23,1201.93 1374.82,1201.93 1375.4,1201.93 1375.99,1201.93 1376.58,1201.93 1377.16,1201.93 1377.75,1201.93 1378.34,1201.93 1378.92,1201.93 1379.51,1201.93 1380.09,1201.93 1380.68,1201.93 1381.27,1201.93 1381.85,1201.93 1382.44,1201.93 1383.03,1201.93 1383.61,1201.93 1384.2,1201.93 1384.79,1201.93 1385.37,1201.93 1385.96,1201.93 1386.55,1201.93 1387.13,1201.93 1387.72,1201.93 1388.3,1201.93 1388.89,1201.93 1389.48,1201.93 1390.06,1201.93 1390.65,1201.93 1391.24,1201.93 1391.82,1201.93 1392.41,1201.93 1393,1201.93 1393.58,1201.93 1394.17,1201.93 1394.75,1201.93 1395.34,1201.93 1395.93,1201.93 1396.51,1201.93 1397.1,1201.93 1397.69,1201.93 1398.27,1201.93 1398.86,1201.93 1399.45,1201.93 1400.03,1201.93 1400.62,1201.93 1401.21,1201.93 1401.79,1201.93 1402.38,1201.93 1402.96,1201.93 1403.55,1201.93 1404.14,1201.93 1404.72,1201.93 1405.31,1201.93 1405.9,1201.93 1406.48,1201.93 1407.07,1201.93 1407.66,1201.93 1408.24,1201.93 1408.83,1201.93 1409.42,1201.93 1410,1201.93 1410.59,1201.93 1411.17,1201.93 1411.76,1201.93 1412.35,1201.93 1412.93,1201.93 1413.52,1201.93 1414.11,1201.93 1414.69,1201.93 1415.28,1201.93 1415.87,1201.93 1416.45,1201.93 1417.04,1201.93 1417.63,1201.93 1418.21,1201.93 1418.8,1201.93 1419.38,1201.93 1419.97,1201.93 1420.56,1201.93 1421.14,1201.93 1421.73,1201.93 1422.32,1201.93 1422.9,1201.93 1423.49,1201.93 1424.08,1201.93 1424.66,1201.93 1425.25,1201.93 1425.83,1201.93 1426.42,1201.93 1427.01,1201.93 1427.59,1201.93 1428.18,1201.93 1428.77,1201.93 1429.35,1201.93 1429.94,1201.93 1430.53,1201.93 1431.11,1201.93 1431.7,1201.93 1432.29,1201.93 1432.87,1201.93 1433.46,1201.93 1434.04,1201.93 1434.63,1201.93 1435.22,1201.93 1435.8,1201.93 1436.39,1201.93 1436.98,1201.93 1437.56,1201.93 1438.15,1201.93 1438.74,1201.93 1439.32,1201.93 1439.91,1201.93 1440.5,1201.93 1441.08,1201.93 1441.67,1201.93 1442.25,1201.93 1442.84,1201.93 1443.43,1201.93 1444.01,1201.93 1444.6,1201.93 1445.19,1201.93 1445.77,1201.93 1446.36,1201.93 1446.95,1201.93 1447.53,1201.93 1448.12,1201.93 1448.7,1201.93 1449.29,1201.93 1449.88,1201.93 1450.46,1201.93 1451.05,1201.93 1451.64,1201.93 1452.22,1201.93 1452.81,1201.93 1453.4,1201.93 1453.98,1201.93 1454.57,1201.93 1455.16,1201.93 1455.74,1201.93 1456.33,1201.93 1456.91,1201.93 1457.5,1201.93 1458.09,1201.93 1458.67,1201.93 1459.26,1201.93 1459.85,1201.93 1460.43,1201.93 1461.02,1201.93 1461.61,1201.93 1462.19,1201.93 1462.78,1201.93 1463.37,1201.93 1463.95,1201.93 1464.54,1201.93 1465.12,1201.93 1465.71,1201.93 1466.3,1201.93 1466.88,1201.93 1467.47,1201.93 1468.06,1201.93 1468.64,1201.93 1469.23,1201.93 1469.82,1201.93 1470.4,1201.93 1470.99,1201.93 1471.57,1201.93 1472.16,1201.93 1472.75,1201.93 1473.33,1201.93 1473.92,1201.93 1474.51,1201.93 1475.09,1201.93 1475.68,1201.93 1476.27,1201.93 1476.85,1201.93 1477.44,1201.93 1478.03,1201.93 1478.61,1201.93 1479.2,1201.93 1479.78,1201.93 1480.37,1201.93 1480.96,1201.93 1481.54,1201.93 1482.13,1201.93 1482.72,1201.93 1483.3,1201.93 1483.89,1201.93 1484.48,1201.93 1485.06,1201.93 1485.65,1201.93 1486.24,1201.93 1486.82,1201.93 1487.41,1201.93 1487.99,1201.93 1488.58,1201.93 1489.17,1201.93 1489.75,1201.93 1490.34,1201.93 1490.93,1201.93 1491.51,1201.93 1492.1,1201.93 1492.69,1201.93 1493.27,1201.93 1493.86,1201.93 1494.45,1201.93 1495.03,1201.93 1495.62,1201.93 1496.2,1201.93 1496.79,1201.93 1497.38,1201.93 1497.96,1201.93 1498.55,1201.93 1499.14,1201.93 1499.72,1201.93 1500.31,1201.93 1500.9,1201.93 1501.48,1201.93 1502.07,1201.93 1502.65,1201.93 1503.24,1201.93 1503.83,1201.93 1504.41,1201.93 1505,1201.93 1505.59,1201.93 1506.17,1201.93 1506.76,1201.93 1507.35,1201.93 1507.93,1201.93 1508.52,1201.93 1509.11,1201.93 1509.69,1201.93 1510.28,1201.93 1510.86,1201.93 1511.45,1201.93 1512.04,1201.93 1512.62,1201.93 1513.21,1201.93 1513.8,1201.93 1514.38,1201.93 1514.97,1201.93 1515.56,1201.93 1516.14,1201.93 1516.73,1201.93 1517.32,1201.93 1517.9,1201.93 1518.49,1201.93 1519.07,1201.93 1519.66,1201.93 1520.25,1201.93 1520.83,1201.93 1521.42,1201.93 1522.01,1201.93 1522.59,1201.93 1523.18,1201.93 1523.77,1201.93 1524.35,1201.93 1524.94,1201.93 1525.52,1201.93 1526.11,1201.93 1526.7,1201.93 1527.28,1201.93 1527.87,1201.93 1528.46,1201.93 1529.04,1201.93 1529.63,1201.93 1530.22,1201.93 1530.8,1201.93 1531.39,1201.93 1531.98,1201.93 1532.56,1201.93 1533.15,1201.93 1533.73,1201.93 1534.32,1201.93 1534.91,1201.93 1535.49,1201.93 1536.08,1201.93 1536.67,1201.93 1537.25,1201.93 1537.84,1201.93 1538.43,1201.93 1539.01,1201.93 1539.6,1201.93 1540.19,1201.93 1540.77,1201.93 1541.36,1201.93 1541.94,1201.93 1542.53,1201.93 1543.12,1201.93 1543.7,1201.93 1544.29,1201.93 1544.88,1201.93 1545.46,1201.93 1546.05,1201.93 1546.64,1201.93 1547.22,1201.93 1547.81,1201.93 1548.4,1201.93 1548.98,1201.93 1549.57,1201.93 1550.15,1201.93 1550.74,1201.93 1551.33,1201.93 1551.91,1201.93 1552.5,1201.93 1553.09,1201.93 1553.67,1201.93 1554.26,1201.93 1554.85,1201.93 1555.43,1201.93 1556.02,1201.93 1556.6,1201.93 1557.19,1201.93 1557.78,1201.93 1558.36,1201.93 1558.95,1201.93 1559.54,1201.93 1560.12,1201.93 1560.71,1201.93 1561.3,1201.93 1561.88,1201.93 1562.47,1201.93 1563.06,1201.93 1563.64,1201.93 1564.23,1201.93 1564.81,1201.93 1565.4,1201.93 1565.99,1201.93 1566.57,1201.93 1567.16,1201.93 1567.75,1201.93 1568.33,1201.93 1568.92,1201.93 1569.51,1201.93 1570.09,1201.93 1570.68,1201.93 1571.27,1201.93 1571.85,1201.93 1572.44,1201.93 1573.02,1201.93 1573.61,1201.93 1574.2,1201.93 1574.78,1201.93 1575.37,1201.93 1575.96,1201.93 1576.54,1201.93 1577.13,1201.93 1577.72,1201.93 1578.3,1201.93 1578.89,1201.93 1579.47,1201.93 1580.06,1201.93 1580.65,1201.93 1581.23,1201.93 1581.82,1201.93 1582.41,1201.93 1582.99,1201.93 1583.58,1201.93 1584.17,1201.93 1584.75,1201.93 1585.34,1201.93 1585.93,1201.93 1586.51,1201.93 1587.1,1201.93 1587.68,1201.93 1588.27,1201.93 1588.86,1201.93 1589.44,1201.93 1590.03,1201.93 1590.62,1201.93 1591.2,1201.93 1591.79,1201.93 1592.38,1201.93 1592.96,1201.93 1593.55,1201.93 1594.14,1201.93 1594.72,1201.93 1595.31,1201.93 1595.89,1201.93 1596.48,1201.93 1597.07,1201.93 1597.65,1201.93 1598.24,1201.93 1598.83,1201.93 1599.41,1201.93 1600,1201.93 1600.59,1201.93 1601.17,1201.93 1601.76,1201.93 1602.34,1201.93 1602.93,1201.93 1603.52,1201.93 1604.1,1201.93 1604.69,1201.93 1605.28,1201.93 1605.86,1201.93 1606.45,1201.93 1607.04,1201.93 1607.62,1201.93 1608.21,1201.93 1608.8,1201.93 1609.38,1201.93 1609.97,1201.93 1610.55,1201.93 1611.14,1201.93 1611.73,1201.93 1612.31,1201.93 1612.9,1201.93 1613.49,1201.93 1614.07,1201.93 1614.66,1201.93 1615.25,1201.93 1615.83,1201.93 1616.42,1201.93 1617.01,1201.93 1617.59,1201.93 1618.18,1201.93 1618.76,1201.93 1619.35,1201.93 1619.94,1201.93 1620.52,1201.93 1621.11,1201.93 1621.7,1201.93 1622.28,1201.93 1622.87,1201.93 1623.46,1201.93 1624.04,1201.93 1624.63,1201.93 1625.22,1201.93 1625.8,1201.93 1626.39,1201.93 1626.97,1201.93 1627.56,1201.93 1628.15,1201.93 1628.73,1201.93 1629.32,1201.93 1629.91,1201.93 1630.49,1201.93 1631.08,1201.93 1631.67,1201.93 1632.25,1201.93 1632.84,1201.93 1633.42,1201.93 1634.01,1201.93 1634.6,1201.93 1635.18,1201.93 1635.77,1201.93 1636.36,1201.93 1636.94,1201.93 1637.53,1201.93 1638.12,1201.93 1638.7,1201.93 1639.29,1201.93 1639.88,1201.93 1640.46,1201.93 1641.05,1201.93 1641.63,1201.93 1642.22,1201.93 1642.81,1201.93 1643.39,1201.93 1643.98,1201.93 1644.57,1201.93 1645.15,1201.93 1645.74,1201.93 1646.33,1201.93 1646.91,1201.93 1647.5,1201.93 1648.09,1201.93 1648.67,1201.93 1649.26,1201.93 1649.84,1201.93 1650.43,1201.93 1651.02,1201.93 1651.6,1201.93 1652.19,1201.93 1652.78,1201.93 1653.36,1201.93 1653.95,1201.93 1654.54,1201.93 1655.12,1201.93 1655.71,1201.93 1656.29,1201.93 1656.88,1201.93 1657.47,1201.93 1658.05,1201.93 1658.64,1201.93 1659.23,1201.93 1659.81,1201.93 1660.4,1201.93 1660.99,1201.93 1661.57,1201.93 1662.16,1201.93 1662.75,1201.93 1663.33,1201.93 1663.92,1201.93 1664.5,1201.93 1665.09,1201.93 1665.68,1201.93 1666.26,1201.93 1666.85,1201.93 1667.44,1201.93 1668.02,1201.93 1668.61,1201.93 1669.2,1201.93 1669.78,1201.93 1670.37,1201.93 1670.96,1201.93 1671.54,1201.93 1672.13,1201.93 1672.71,1201.93 1673.3,1201.93 1673.89,1201.93 1674.47,1201.93 1675.06,1201.93 1675.65,1201.93 1676.23,1201.93 1676.82,1201.93 1677.41,1201.93 1677.99,1201.93 1678.58,1201.93 1679.17,1201.93 1679.75,1201.93 1680.34,1201.93 1680.92,1201.93 1681.51,1201.93 1682.1,1201.93 1682.68,1201.93 1683.27,1201.93 1683.86,1201.93 1684.44,1201.93 1685.03,1201.93 1685.62,1201.93 1686.2,1201.93 1686.79,1201.93 1687.37,1201.93 1687.96,1201.93 1688.55,1201.93 1689.13,1201.93 1689.72,1201.93 1690.31,1201.93 1690.89,1201.93 1691.48,1201.93 1692.07,1201.93 1692.65,1201.93 1693.24,1201.93 1693.83,1201.93 1694.41,1201.93 1695,1201.93 1695.58,1201.93 1696.17,1201.93 1696.76,1201.93 1697.34,1201.93 1697.93,1201.93 1698.52,1201.93 1699.1,1201.93 1699.69,1201.93 1700.28,1201.93 1700.86,1201.93 1701.45,1201.93 1702.04,1201.93 1702.62,1201.93 1703.21,1201.93 1703.79,1201.93 1704.38,1201.93 1704.97,1201.93 1705.55,1201.93 1706.14,1201.93 1706.73,1201.93 1707.31,1201.93 1707.9,1201.93 1708.49,1201.93 1709.07,1201.93 1709.66,1201.93 1710.24,1201.93 1710.83,1201.93 1711.42,1201.93 1712,1201.93 1712.59,1201.93 1713.18,1201.93 1713.76,1201.93 1714.35,1201.93 1714.94,1201.93 1715.52,1201.93 1716.11,1201.93 1716.7,1201.93 1717.28,1201.93 1717.87,1201.93 1718.45,1201.93 1719.04,1201.93 1719.63,1201.93 1720.21,1201.93 1720.8,1201.93 1721.39,1201.93 1721.97,1201.93 1722.56,1201.93 1723.15,1201.93 1723.73,1201.93 1724.32,1201.93 1724.91,1201.93 1725.49,1201.93 1726.08,1201.93 1726.66,1201.93 1727.25,1201.93 1727.84,1201.93 1728.42,1201.93 1729.01,1201.93 1729.6,1201.93 1730.18,1201.93 1730.77,1201.93 1731.36,1201.93 1731.94,1201.93 1732.53,1201.93 1733.11,1201.93 1733.7,1201.93 1734.29,1201.93 1734.87,1201.93 1735.46,1201.93 1736.05,1201.93 1736.63,1201.93 1737.22,1201.93 1737.81,1201.93 1738.39,1201.93 1738.98,1201.93 1739.57,1201.93 1740.15,1201.93 1740.74,1201.93 1741.32,1201.93 1741.91,1201.93 1742.5,1201.93 1743.08,1201.93 1743.67,1201.93 1744.26,1201.93 1744.84,1201.93 1745.43,1201.93 1746.02,1201.93 1746.6,1201.93 1747.19,1201.93 1747.78,1201.93 1748.36,1201.93 1748.95,1201.93 1749.53,1201.93 1750.12,1201.93 1750.71,1201.93 1751.29,1201.93 1751.88,1201.93 1752.47,1201.93 1753.05,1201.93 1753.64,1201.93 1754.23,1201.93 1754.81,1201.93 1755.4,1201.93 1755.99,1201.93 1756.57,1201.93 1757.16,1201.93 1757.74,1201.93 1758.33,1201.93 1758.92,1201.93 1759.5,1201.93 1760.09,1201.93 1760.68,1201.93 1761.26,1201.93 1761.85,1201.93 1762.44,1201.93 1763.02,1201.93 1763.61,1201.93 1764.19,1201.93 1764.78,1201.93 1765.37,1201.93 1765.95,1201.93 1766.54,1201.93 1767.13,1201.93 1767.71,1201.93 1768.3,1201.93 1768.89,1201.93 1769.47,1201.93 1770.06,1201.93 1770.65,1201.93 1771.23,1201.93 1771.82,1201.93 1772.4,1201.93 1772.99,1201.93 1773.58,1201.93 1774.16,1201.93 1774.75,1201.93 1775.34,1201.93 1775.92,1201.93 1776.51,1201.93 1777.1,1201.93 1777.68,1201.93 1778.27,1201.93 1778.86,1201.93 1779.44,1201.93 1780.03,1201.93 1780.61,1201.93 1781.2,1201.93 1781.79,1201.93 1782.37,1201.93 1782.96,1201.93 1783.55,1201.93 1784.13,1201.93 1784.72,1201.93 1785.31,1201.93 1785.89,1201.93 1786.48,1201.93 1787.06,1201.93 1787.65,1201.93 1788.24,1201.93 1788.82,1201.93 1789.41,1201.93 1790,1201.93 1790.58,1201.93 1791.17,1201.93 1791.76,1201.93 1792.34,1201.93 1792.93,1201.93 1793.52,1201.93 1794.1,1201.93 1794.69,1201.93 1795.27,1201.93 1795.86,1201.93 1796.45,1201.93 1797.03,1201.93 1797.62,1201.93 1798.21,1201.93 1798.79,1201.93 1799.38,1201.93 1799.97,1201.93 1800.55,1201.93 1801.14,1201.93 1801.73,1201.93 1802.31,1201.93 1802.9,1201.93 1803.48,1201.93 1804.07,1201.93 1804.66,1201.93 1805.24,1201.93 1805.83,1201.93 1806.42,1201.93 1807,1201.93 1807.59,1201.93 1808.18,1201.93 1808.76,1201.93 1809.35,1201.93 1809.94,1201.93 1810.52,1201.93 1811.11,1201.93 1811.69,1201.93 1812.28,1201.93 1812.87,1201.93 1813.45,1201.93 1814.04,1201.93 1814.63,1201.93 1815.21,1201.93 1815.8,1201.93 1816.39,1201.93 1816.97,1201.93 1817.56,1201.93 1818.14,1201.93 1818.73,1201.93 1819.32,1201.93 1819.9,1201.93 1820.49,1201.93 1821.08,1201.93 1821.66,1201.93 1822.25,1201.93 1822.84,1201.93 1823.42,1201.93 1824.01,1201.93 1824.6,1201.93 1825.18,1201.93 1825.77,1201.93 1826.35,1201.93 1826.94,1201.93 1827.53,1201.93 1828.11,1201.93 1828.7,1201.93 1829.29,1201.93 1829.87,1201.93 1830.46,1201.93 1831.05,1201.93 1831.63,1201.93 1832.22,1201.93 1832.81,1201.93 1833.39,1201.93 1833.98,1201.93 1834.56,1201.93 1835.15,1201.93 1835.74,1201.93 1836.32,1201.93 1836.91,1201.93 1837.5,1201.93 1838.08,1201.93 1838.67,1201.93 1839.26,1201.93 1839.84,1201.93 1840.43,1201.93 1841.01,1201.93 1841.6,1201.93 1842.19,1201.93 1842.77,1201.93 1843.36,1201.93 1843.95,1201.93 1844.53,1201.93 1845.12,1201.93 1845.71,1201.93 1846.29,1201.93 1846.88,1201.93 1847.47,1201.93 1848.05,1201.93 1848.64,1201.93 1849.22,1201.93 1849.81,1201.93 1850.4,1201.93 1850.98,1201.93 1851.57,1201.93 1852.16,1201.93 1852.74,1201.93 1853.33,1201.93 1853.92,1201.93 1854.5,1201.93 1855.09,1201.93 1855.68,1201.93 1856.26,1201.93 1856.85,1201.93 1857.43,1201.93 1858.02,1201.93 1858.61,1201.93 1859.19,1201.93 1859.78,1201.93 1860.37,1201.93 1860.95,1201.93 1861.54,1201.93 1862.13,1201.93 1862.71,1201.93 1863.3,1201.93 1863.88,1201.93 1864.47,1201.93 1865.06,1201.93 1865.64,1201.93 1866.23,1201.93 1866.82,1201.93 1867.4,1201.93 1867.99,1201.93 1868.58,1201.93 1869.16,1201.93 1869.75,1201.93 1870.34,1201.93 1870.92,1201.93 1871.51,1201.93 1872.09,1201.93 1872.68,1201.93 1873.27,1201.93 1873.85,1201.93 1874.44,1201.93 1875.03,1201.93 1875.61,1201.93 1876.2,1201.93 1876.79,1201.93 1877.37,1201.93 1877.96,1201.93 1878.55,1201.93 1879.13,1201.93 1879.72,1201.93 1880.3,1201.93 1880.89,1201.93 1881.48,1201.93 1882.06,1201.93 1882.65,1201.93 1883.24,1201.93 1883.82,1201.93 1884.41,1201.93 1885,1201.93 1885.58,1201.93 1886.17,1201.93 1886.76,1201.93 1887.34,1201.93 1887.93,1201.93 1888.51,1201.93 1889.1,1201.93 1889.69,1201.93 1890.27,1201.93 1890.86,1201.93 1891.45,1201.93 1892.03,1201.93 1892.62,1201.93 1893.21,1201.93 1893.79,1201.93 1894.38,1201.93 1894.96,1201.93 1895.55,1201.93 1896.14,1201.93 1896.72,1201.93 1897.31,1201.93 1897.9,1201.93 1898.48,1201.93 1899.07,1201.93 1899.66,1201.93 1900.24,1201.93 1900.83,1201.93 1901.42,1201.93 1902,1201.93 1902.59,1201.93 1903.17,1201.93 1903.76,1201.93 1904.35,1201.93 1904.93,1201.93 1905.52,1201.93 1906.11,1201.93 1906.69,1201.93 1907.28,1201.93 1907.87,1201.93 1908.45,1201.93 1909.04,1201.93 1909.63,1201.93 1910.21,1201.93 1910.8,1201.93 1911.38,1201.93 1911.97,1201.93 1912.56,1201.93 1913.14,1201.93 1913.73,1201.93 1914.32,1201.93 1914.9,1201.93 1915.49,1201.93 1916.08,1201.93 1916.66,1201.93 1917.25,1201.93 1917.83,1201.93 1918.42,1201.93 1919.01,1201.93 1919.59,1201.93 1920.18,1201.93 1920.77,1201.93 1921.35,1201.93 1921.94,1201.93 1922.53,1201.93 1923.11,1201.93 1923.7,1201.93 1924.29,1201.93 1924.87,1201.93 1925.46,1201.93 1926.04,1201.93 1926.63,1201.93 1927.22,1201.93 1927.8,1201.93 1928.39,1201.93 1928.98,1201.93 1929.56,1201.93 1930.15,1201.93 1930.74,1201.93 1931.32,1201.93 1931.91,1201.93 1932.5,1201.93 1933.08,1201.93 1933.67,1201.93 1934.25,1201.93 1934.84,1201.93 1935.43,1201.93 1936.01,1201.93 1936.6,1201.93 1937.19,1201.93 1937.77,1201.93 1938.36,1201.93 1938.95,1201.93 1939.53,1201.93 1940.12,1201.93 1940.71,1201.93 1941.29,1201.93 1941.88,1201.93 1942.46,1201.93 1943.05,1201.93 1943.64,1201.93 1944.22,1201.93 1944.81,1201.93 1945.4,1201.93 1945.98,1201.93 1946.57,1201.93 1947.16,1201.93 1947.74,1201.93 1948.33,1201.93 1948.91,1201.93 1949.5,1201.93 1950.09,1201.93 1950.67,1201.93 1951.26,1201.93 1951.85,1201.93 1952.43,1201.93 1953.02,1201.93 1953.61,1201.93 1954.19,1201.93 1954.78,1201.93 1955.37,1201.93 1955.95,1201.93 1956.54,1201.93 1957.12,1201.93 1957.71,1201.93 1958.3,1201.93 1958.88,1201.93 1959.47,1201.93 1960.06,1201.93 1960.64,1201.93 1961.23,1201.93 1961.82,1201.93 1962.4,1201.93 1962.99,1201.93 1963.58,1201.93 1964.16,1201.93 1964.75,1201.93 1965.33,1201.93 1965.92,1201.93 1966.51,1201.93 1967.09,1201.93 1967.68,1201.93 1968.27,1201.93 1968.85,1201.93 1969.44,1201.93 1970.03,1201.93 1970.61,1201.93 1971.2,1201.93 1971.78,1201.93 1972.37,1201.93 1972.96,1201.93 1973.54,1201.93 1974.13,1201.93 1974.72,1201.93 1975.3,1201.93 1975.89,1201.93 1976.48,1201.93 1977.06,1201.93 1977.65,1201.93 1978.24,1201.93 1978.82,1201.93 1979.41,1201.93 1979.99,1201.93 1980.58,1201.93 1981.17,1201.93 1981.75,1201.93 1982.34,1201.93 1982.93,1201.93 1983.51,1201.93 1984.1,1201.93 1984.69,1201.93 1985.27,1201.93 1985.86,1201.93 1986.45,1201.93 1987.03,1201.93 1987.62,1201.93 1988.2,1201.93 1988.79,1201.93 1989.38,1201.93 1989.96,1201.93 1990.55,1201.93 1991.14,1201.93 1991.72,1201.93 1992.31,1201.93 1992.9,1201.93 1993.48,1201.93 1994.07,1201.93 1994.65,1201.93 1995.24,1201.93 1995.83,1201.93 1996.41,1201.93 1997,1201.93 1997.59,1201.93 1998.17,1201.93 1998.76,1201.93 1999.35,1201.93 1999.93,1201.93 2000.52,1201.93 2001.11,1201.93 2001.69,1201.93 2002.28,1201.93 2002.86,1201.93 2003.45,1201.93 2004.04,1201.93 2004.62,1201.93 2005.21,1201.93 2005.8,1201.93 2006.38,1201.93 2006.97,1201.93 2007.56,1201.93 2008.14,1201.93 2008.73,1201.93 2009.32,1201.93 2009.9,1201.93 2010.49,1201.93 2011.07,1201.93 2011.66,1201.93 2012.25,1201.93 2012.83,1201.93 2013.42,1201.93 2014.01,1201.93 2014.59,1201.93 2015.18,1201.93 2015.77,1201.93 2016.35,1201.93 2016.94,1201.93 2017.53,1201.93 2018.11,1201.93 2018.7,1201.93 2019.28,1201.93 2019.87,1201.93 2020.46,1201.93 2021.04,1201.93 2021.63,1201.93 2022.22,1201.93 2022.8,1201.93 2023.39,1201.93 2023.98,1201.93 2024.56,1201.93 2025.15,1201.93 2025.73,1201.93 2026.32,1201.93 2026.91,1201.93 2027.49,1201.93 2028.08,1201.93 2028.67,1201.93 2029.25,1201.93 2029.84,1201.93 2030.43,1201.93 2031.01,1201.93 2031.6,1201.93 2032.19,1201.93 2032.77,1201.93 2033.36,1201.93 2033.94,1201.93 2034.53,1201.93 2035.12,1201.93 2035.7,1201.93 2036.29,1201.93 2036.88,1201.93 2037.46,1201.93 2038.05,1201.93 2038.64,1201.93 2039.22,1201.93 2039.81,1201.93 2040.4,1201.93 2040.98,1201.93 2041.57,1201.93 2042.15,1201.93 2042.74,1201.93 2043.33,1201.93 2043.91,1201.93 2044.5,1201.93 2045.09,1201.93 2045.67,1201.93 2046.26,1201.93 2046.85,1201.93 2047.43,1201.93 2048.02,1201.93 2048.6,1201.93 2049.19,1201.93 2049.78,1201.93 2050.36,1201.93 2050.95,1201.93 2051.54,1201.93 2052.12,1201.93 2052.71,1201.93 2053.3,1201.93 2053.88,1201.93 2054.47,1201.93 2055.06,1201.93 2055.64,1201.93 2056.23,1201.93 2056.81,1201.93 2057.4,1201.93 2057.99,1201.93 2058.57,1201.93 2059.16,1201.93 2059.75,1201.93 2060.33,1201.93 2060.92,1201.93 2061.51,1201.93 2062.09,1201.93 2062.68,1201.93 2063.27,1201.93 2063.85,1201.93 2064.44,1201.93 2065.02,1201.93 2065.61,1201.93 2066.2,1201.93 2066.78,1201.93 2067.37,1201.93 2067.96,1201.93 2068.54,1201.93 2069.13,1201.93 2069.72,1201.93 2070.3,1201.93 2070.89,1201.93 2071.48,1201.93 2072.06,1201.93 2072.65,1201.93 2073.23,1201.93 2073.82,1201.93 2074.41,1201.93 2074.99,1201.93 2075.58,1201.93 2076.17,1201.93 2076.75,1201.93 2077.34,1201.93 2077.93,1201.93 2078.51,1201.93 2079.1,1201.93 2079.68,1201.93 2080.27,1201.93 2080.86,1201.93 2081.44,1201.93 2082.03,1201.93 2082.62,1201.93 2083.2,1201.93 2083.79,1201.93 2084.38,1201.93 2084.96,1201.93 2085.55,1201.93 2086.14,1201.93 2086.72,1201.93 2087.31,1201.93 2087.89,1201.93 2088.48,1201.93 2089.07,1201.93 2089.65,1201.93 2090.24,1201.93 2090.83,1201.93 2091.41,1201.93 2092,1201.93 2092.59,1201.93 2093.17,1201.93 2093.76,1201.93 2094.35,1201.93 2094.93,1201.93 2095.52,1201.93 2096.1,1201.93 2096.69,1201.93 2097.28,1201.93 2097.86,1201.93 2098.45,1201.93 2099.04,1201.93 2099.62,1201.93 2100.21,1201.93 2100.8,1201.93 2101.38,1201.93 2101.97,1201.93 2102.55,1201.93 2103.14,1201.93 2103.73,1201.93 2104.31,1201.93 2104.9,1201.93 2105.49,1201.93 2106.07,1201.93 2106.66,1201.93 2107.25,1201.93 2107.83,1201.93 2108.42,1201.93 2109.01,1201.93 2109.59,1201.93 2110.18,1201.93 2110.76,1201.93 2111.35,1201.93 2111.94,1201.93 2112.52,1201.93 2113.11,1201.93 2113.7,1201.93 2114.28,1201.93 2114.87,1201.93 2115.46,1201.93 2116.04,1201.93 2116.63,1201.93 2117.22,1201.93 2117.8,1201.93 2118.39,1201.93 2118.97,1201.93 2119.56,1201.93 2120.15,1201.93 2120.73,1201.93 2121.32,1201.93 2121.91,1201.93 2122.49,1201.93 2123.08,1201.93 2123.67,1201.93 2124.25,1201.93 2124.84,1201.93 2125.42,1201.93 2126.01,1201.93 2126.6,1201.93 2127.18,1201.93 2127.77,1201.93 2128.36,1201.93 2128.94,1201.93 2129.53,1201.93 2130.12,1201.93 2130.7,1201.93 2131.29,1201.93 2131.88,1201.93 2132.46,1201.93 2133.05,1201.93 2133.63,1201.93 2134.22,1201.93 2134.81,1201.93 2135.39,1201.93 2135.98,1201.93 2136.57,1201.93 2137.15,1201.93 2137.74,1201.93 2138.33,1201.93 2138.91,1201.93 2139.5,1201.93 2140.09,1201.93 2140.67,1201.93 2141.26,1201.93 2141.84,1201.93 2142.43,1201.93 2143.02,1201.93 2143.6,1201.93 2144.19,1201.93 2144.78,1201.93 2145.36,1201.93 2145.95,1201.93 2146.54,1201.93 2147.12,1201.93 2147.71,1201.93 2148.3,1201.93 2148.88,1201.93 2149.47,1201.93 2150.05,1201.93 2150.64,1201.93 2151.23,1201.93 2151.81,1201.93 2152.4,1201.93 2152.99,1201.93 2153.57,1201.93 2154.16,1201.93 2154.75,1201.93 2155.33,1201.93 2155.92,1201.93 2156.5,1201.93 2157.09,1201.93 2157.68,1201.93 2158.26,1201.93 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.07,1182.52 1401.75,899.083 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1220.89 985.439,1182.52 2158.26,1182.52 2158.26,1220.89 985.439,1220.89 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip503\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,1236.6 162.114,1014.91 162.673,-384.129 163.232,-1700.08 163.792,-2918.68 164.351,-4031.46 164.91,-3964.46 165.469,-4900.67 166.029,-5793.22 166.588,-6604.55 167.147,-7317 167.706,-7978.37 168.266,-8544.76 168.825,-8295.93 169.384,-8825.57 169.943,-9300.54 170.503,-9724.37 171.062,-10100.4 171.621,-9831.5 172.18,-10152.2 172.74,-10425 173.299,-9693.87 173.858,-9958.15 174.417,-9774.24 174.977,-10000.3 175.536,-10199.9 176.095,-10351.4 176.655,-10147.6 177.214,-10255 177.773,-10351.9 178.332,-10423.3 178.892,-10467.8 179.451,-10501.3 180.01,-10276.1 180.569,-9614.98 181.129,-9416.91 181.688,-9231.44 182.247,-9236.08 182.806,-9033.43 183.366,-8844.55 183.925,-8828.45 184.484,-8495.29 185.043,-8468.06 185.603,-8303.81 186.162,-8270.64 186.721,-7977.12 187.28,-7916.01 187.84,-7639.47 188.399,-7251.15 188.958,-7188.51 189.517,-7011.04 190.077,-6936.98 190.636,-6681.5 191.195,-6351.86 191.754,-6199.5 192.314,-6053.55 192.873,-5909.69 193.432,-5833.53 193.991,-5687.98 194.551,-5604.01 195.11,-5517.22 195.669,-5303.93 196.228,-5167.95 196.788,-5078.04 197.347,-4771.01 197.906,-4591.2 198.465,-4362.71 199.025,-4293.09 199.584,-4177.36 200.143,-4064.39 200.702,-3948.94 201.262,-3837.7 201.821,-3725.81 202.38,-3610.02 202.939,-3543.67 203.499,-3470.2 204.058,-3317.62 204.617,-3137.67 205.176,-2998.71 205.736,-2830.38 206.295,-2740.82 206.854,-2716.42 207.413,-2654.49 207.973,-2559.62 208.532,-2494.29 209.091,-2397.25 209.65,-2304.84 210.21,-2217.58 210.769,-2070.83 211.328,-1953.99 211.887,-1879.01 212.447,-1711.64 213.006,-1662.79 213.565,-1590.53 214.124,-1464.21 214.684,-1397.1 215.243,-1299.11 215.802,-1229.72 216.361,-1141.53 216.921,-1049.47 217.48,-988.992 218.039,-979.538 218.598,-892.746 219.158,-833.769 219.717,-753.276 220.276,-691.129 220.835,-615.042 221.395,-566.496 221.954,-514.666 222.513,-462.751 223.072,-412.554 223.632,-385.941 224.191,-333.871 224.75,-200.161 225.309,-154.049 225.869,-89.1393 226.428,-8.63308 226.987,49.3015 227.546,56.7059 228.106,92.312 228.665,124.298 229.224,156.735 229.783,185.707 230.343,216.542 230.902,245.233 231.461,253.945 232.02,264.342 232.58,290.922 233.139,354.962 233.698,361.038 234.257,387.823 234.817,375.235 235.376,382.911 235.935,411.161 236.494,442.947 237.054,485.399 237.613,509.993 238.172,515.96 238.731,558.171 239.291,578.772 239.85,579.189 240.409,583.097 240.968,585.575 241.528,608.444 242.087,611.079 242.646,634.24 243.205,639.714 243.765,678.495 244.324,715.068 244.883,733.75 245.442,730.763 246.002,711.821 246.561,744.849 247.12,747.382 247.679,766.295 248.239,781.216 248.798,850.826 249.357,880.019 249.916,911.696 250.476,938.669 251.035,899.232 251.594,913.047 252.153,876.244 252.713,872.455 253.272,871.128 253.831,870.463 254.39,882.07 254.95,879.144 255.509,895.645 256.068,873.956 256.627,891.823 257.187,908.446 257.746,921.691 258.305,916.879 258.864,967.086 259.424,957.285 259.983,967.694 260.542,1014.36 261.101,1037.85 261.661,1034.64 262.22,1012.9 262.779,1026.76 263.338,1021.16 263.898,1047.78 264.457,1086.36 265.016,1041.03 265.575,1050.18 266.135,1042.65 266.694,998.856 267.253,992.389 267.812,968.707 268.372,963.49 268.931,1012.02 269.49,990.744 270.049,969.417 270.609,932.009 271.168,964.572 271.727,971.673 272.286,984.724 272.846,964.034 273.405,974.743 273.964,988.282 274.523,997.171 275.083,1058.29 275.642,1067.75 276.201,1072.7 276.76,1065.38 277.32,1056.88 277.879,1082.78 278.438,1074.15 278.997,1062.15 279.557,1071.45 280.116,1080.88 280.675,1073.84 281.234,1080.49 281.794,1101.75 282.353,1077.21 282.912,1066.68 283.471,1108.91 284.031,1065.88 284.59,1088.57 285.149,1094.24 285.708,1084.69 286.268,1127.99 286.827,1082.15 287.386,1089.45 287.945,1098.32 288.505,1087.68 289.064,1092.13 289.623,1095.9 290.182,1116.07 290.742,1104.6 291.301,1111.16 291.86,1101.75 292.419,1089.34 292.979,1061.75 293.538,1066.84 294.097,1009.5 294.656,968.331 295.216,967.131 295.775,1010.68 296.334,1034.65 296.893,1028.57 297.453,1034.71 298.012,1027.64 298.571,1071.47 299.13,1059.3 299.69,1030.78 300.249,1019.03 300.808,1022.15 301.368,1029.22 301.927,1021.83 302.486,1031.17 303.045,1022.87 303.605,978.516 304.164,1006.81 304.723,999.712 305.282,1022.85 305.842,1030.45 306.401,1018.15 306.96,990.291 307.519,983.715 308.079,994.441 308.638,971.763 309.197,965.102 309.756,960.997 310.316,954.351 310.875,980.834 311.434,977.012 311.993,990.317 312.553,970.318 313.112,949.452 313.671,945.523 314.23,924.726 314.79,918.653 315.349,931.8 315.908,946.188 316.467,940.536 317.027,920.261 317.586,885.445 318.145,900.423 318.704,882.136 319.264,878.716 319.823,898.196 320.382,863.112 320.941,844.131 321.501,827.517 322.06,827.626 322.619,826.83 323.178,829.621 323.738,844.981 324.297,878.423 324.856,874.936 325.415,920.323 325.975,948.957 326.534,959.657 327.093,1000.54 327.652,975.105 328.212,934.828 328.771,926.474 329.33,903.991 329.889,879.4 330.449,875.163 331.008,889.95 331.567,904.519 332.126,901.498 332.686,863.581 333.245,847.686 333.804,830.941 334.363,832.54 334.923,799.301 335.482,815.921 336.041,803.315 336.6,821.114 337.16,824.012 337.719,795.836 338.278,781.742 338.837,783.298 339.397,787.733 339.956,789.783 340.515,825.953 341.074,826.313 341.634,846.786 342.193,846.367 342.752,846.867 343.311,864.225 343.871,847.523 344.43,831.108 344.989,829.34 345.548,826.336 346.108,858.857 346.667,890.784 347.226,904.508 347.785,886.767 348.345,887.282 348.904,866.807 349.463,863.911 350.022,878.164 350.582,856.589 351.141,855.734 351.7,823.529 352.259,821.182 352.819,824.085 353.378,822.714 353.937,802.933 354.496,789.672 355.056,789.721 355.615,761.321 356.174,749.133 356.733,770.367 357.293,786.452 357.852,801.154 358.411,834.116 358.97,827.879 359.53,812.627 360.089,827.415 360.648,777.035 361.207,762.927 361.767,752.532 362.326,771.302 362.885,786.18 363.444,788.806 364.004,790.843 364.563,791.217 365.122,789.24 365.681,789.555 366.241,791.057 366.8,837.432 367.359,863.784 367.918,860.255 368.478,889.28 369.037,883.868 369.596,929.393 370.155,923.597 370.715,935.587 371.274,941.688 371.833,984.061 372.392,959.029 372.952,982.621 373.511,973.805 374.07,964.513 374.629,908.744 375.189,935.169 375.748,901.742 376.307,834.632 376.866,817.241 377.426,846.255 377.985,842.304 378.544,838.486 379.103,852.435 379.663,869.559 380.222,865.3 380.781,858.023 381.34,818.373 381.9,797.265 382.459,830.34 383.018,811.594 383.577,827.25 384.137,840.297 384.696,840.925 385.255,864.25 385.814,837.306 386.374,835.155 386.933,863.717 387.492,879.344 388.051,892.468 388.611,905.062 389.17,899.484 389.729,890.622 390.288,899.446 390.848,895.96 391.407,873.068 391.966,867.899 392.525,862.344 393.085,844.511 393.644,845.046 394.203,859.032 394.762,855.484 395.322,835.42 395.881,832.704 396.44,844.263 396.999,872.965 397.559,867.278 398.118,863.003 398.677,873.325 399.236,880.678 399.796,891.346 400.355,868.562 400.914,863 401.473,841.121 402.033,854.088 402.592,898.663 403.151,859.627 403.71,887.725 404.27,864.526 404.829,861.888 405.388,822.718 405.947,820.345 406.507,799.349 407.066,797.134 407.625,812.384 408.184,808.335 408.744,786.905 409.303,784.793 409.862,815.698 410.421,823.937 410.981,821.11 411.54,800.859 412.099,796.812 412.658,780.063 413.218,780.914 413.777,813.475 414.336,806 414.895,819.409 415.455,831.055 416.014,824.648 416.573,822.637 417.132,836.165 417.692,817.305 418.251,784.102 418.81,780.942 419.369,792.623 419.929,758.616 420.488,758.152 421.047,770.709 421.606,784.502 422.166,815.299 422.725,797.548 423.284,829.17 423.843,811.758 424.403,825.655 424.962,819.496 425.521,832.252 426.08,811.93 426.64,775.562 427.199,791.943 427.758,773.622 428.318,724.449 428.877,744.19 429.436,791.819 429.995,791.866 430.555,758.853 431.114,741.977 431.673,744.276 432.232,774.009 432.792,755.275 433.351,805.001 433.91,787.541 434.469,772.514 435.029,771.256 435.588,786.765 436.147,784.196 436.706,804.142 437.266,801.531 437.825,750.117 438.384,749.873 438.943,766.55 439.503,799.922 440.062,794.67 440.621,773.915 441.18,724.121 441.74,722.948 442.299,770.97 442.858,788.694 443.417,789.782 443.977,850.549 444.536,843.693 445.095,854.39 445.654,817.256 446.214,832.451 446.773,793.206 447.332,758.141 447.891,805.697 448.451,834.012 449.01,844.698 449.569,838.795 450.128,850.855 450.688,844.522 451.247,821.337 451.806,817.42 452.365,765.622 452.925,748.497 453.484,765.382 454.043,749.532 454.602,765.487 455.162,715.841 455.721,706.135 456.28,689.431 456.839,707.946 457.399,726.793 457.958,725.037 458.517,739.898 459.076,722.568 459.636,754.782 460.195,735.527 460.754,785.054 461.313,751.157 461.873,751.513 462.432,765.654 462.991,797.478 463.55,824.285 464.11,802.079 464.669,799.624 465.228,828.823 465.787,810.543 466.347,805.113 466.906,784.431 467.465,752.408 468.024,769.292 468.584,752.638 469.143,750.876 469.702,765.926 470.261,795.079 470.821,771.869 471.38,804.661 471.939,768.23 472.498,763.622 473.058,760.754 473.617,742.982 474.176,760.566 474.735,758.472 475.295,770.072 475.854,783.137 476.413,779.992 476.972,728.692 477.532,729.928 478.091,716.904 478.65,719.961 479.209,706.539 479.769,711.374 480.328,712.686 480.887,727.4 481.446,759.341 482.006,728.677 482.565,746.231 483.124,748.998 483.683,728.727 484.243,710.203 484.802,678.543 485.361,664.079 485.92,668.615 486.48,688.816 487.039,674.935 487.598,693.331 488.157,761.48 488.717,774.636 489.276,803.671 489.835,832.808 490.394,825.467 490.954,804.326 491.513,834.035 492.072,859.539 492.631,869.263 493.191,893.238 493.75,898.675 494.309,918.624 494.868,891.482 495.428,900.795 495.987,876.488 496.546,836.225 497.105,865.237 497.665,857.072 498.224,880.736 498.783,888.88 499.342,845.344 499.902,838.829 500.461,817.581 501.02,794.049 501.579,756.297 502.139,736.82 502.698,751.975 503.257,766.218 503.816,702.207 504.376,701.816 504.935,686.508 505.494,690.89 506.053,694.867 506.613,648.893 507.172,616.264 507.731,606.269 508.29,626.344 508.85,651.728 509.409,620.27 509.968,625.246 510.527,566.913 511.087,562.616 511.646,540.102 512.205,518.655 512.764,532.194 513.324,572.123 513.883,580.079 514.442,572.738 515.001,612.733 515.561,617.312 516.12,622.691 516.679,657.91 517.238,644.974 517.798,669.583 518.357,666.891 518.916,684.979 519.475,685.668 520.035,684.299 520.594,656.184 521.153,642.41 521.712,646.856 522.272,666.768 522.831,670.67 523.39,655.12 523.949,655.94 524.509,660.059 525.068,678.235 525.627,678.014 526.186,713.15 526.746,680.248 527.305,668.684 527.864,704.377 528.423,689.681 528.983,692.133 529.542,676.521 530.101,696.358 530.66,712.273 531.22,695.73 531.779,679.031 532.338,695.948 532.897,713.451 533.457,716.458 534.016,699.425 534.575,716.37 535.134,685.528 535.694,672.954 536.253,676.195 536.812,709.893 537.371,709.097 537.931,746.329 538.49,728.476 539.049,729.865 539.608,766.161 540.168,765.433 540.727,779.346 541.286,776.899 541.845,773.103 542.405,785.829 542.964,733.952 543.523,718.945 544.082,720.815 544.642,706.131 545.201,710.269 545.76,725.54 546.319,725.478 546.879,774.159 547.438,770.944 547.997,737.425 548.556,724.103 549.116,757.133 549.675,736.108 550.234,750.256 550.793,730.658 551.353,724.485 551.912,738.16 552.471,740.476 553.031,741.146 553.59,757.345 554.149,757.158 554.708,722.277 555.268,719.519 555.827,747.787 556.386,747.527 556.945,743.436 557.505,724.406 558.064,722.973 558.623,719.161 559.182,686.903 559.742,691.045 560.301,672.929 560.86,677.021 561.419,665.854 561.979,649.996 562.538,655.542 563.097,661.507 563.656,663.746 564.216,696.245 564.775,682.583 565.334,699.442 565.893,714.371 566.453,715.951 567.012,746.973 567.571,766.131 568.13,764.066 568.69,743.705 569.249,725.225 569.808,708.238 570.367,725.303 570.927,724.861 571.486,726.312 572.045,756.991 572.604,741.08 573.164,725.087 573.723,705.273 574.282,708.755 574.841,680.195 575.401,700.325 575.96,683.894 576.519,651.467 577.078,700.468 577.638,702.493 578.197,719.197 578.756,746.965 579.315,729.178 579.875,762.187 580.434,758.349 580.993,757.808 581.552,742.216 582.112,772.911 582.671,769.294 583.23,784.98 583.789,812.754 584.349,758.05 584.908,767.475 585.467,736.084 586.026,751.763 586.586,780.423 587.145,776.638 587.704,754.122 588.263,797.758 588.823,775.984 589.382,755.114 589.941,735.637 590.5,733.143 591.06,764.426 591.619,762.115 592.178,742.858 592.737,725.306 593.297,723.153 593.856,723.311 594.415,723.135 594.974,706.246 595.534,704.944 596.093,736.263 596.652,735.062 597.211,734.601 597.771,701.212 598.33,718.384 598.889,684.683 599.448,716.545 600.008,717.102 600.567,716.776 601.126,716.613 601.685,715.006 602.245,709.412 602.804,742.756 603.363,757.157 603.922,798.972 604.482,793.68 605.041,741.471 605.6,722.559 606.159,755.84 606.719,735.846 607.278,734.113 607.837,732.333 608.396,745.222 608.956,694.205 609.515,690.719 610.074,704.591 610.633,720.693 611.193,716.825 611.752,702.857 612.311,688.98 612.87,708.183 613.43,695.298 613.989,694.99 614.548,695.308 615.107,728.071 615.667,695.147 616.226,664.989 616.785,635.222 617.344,621.365 617.904,622.38 618.463,627.509 619.022,634.18 619.581,623.661 620.141,626.186 620.7,644.096 621.259,649.467 621.818,652.618 622.378,653.696 622.937,642.969 623.496,665.263 624.055,681.923 624.615,671.45 625.174,658.888 625.733,692.138 626.292,706.738 626.852,738.407 627.411,706.364 627.97,752.866 628.529,765.588 629.089,778.925 629.648,758.177 630.207,771.37 630.766,717.7 631.326,714.857 631.885,696.782 632.444,696.394 633.003,714.927 633.563,711.767 634.122,711.453 634.681,707.435 635.24,688.519 635.8,686.339 636.359,653.333 636.918,654.587 637.477,642.927 638.037,627.65 638.596,661.276 639.155,677.323 639.714,697.822 640.274,662.623 640.833,650.225 641.392,671.58 641.951,658.201 642.511,696.347 643.07,696.486 643.629,726.194 644.188,726.309 644.748,743.458 645.307,691.727 645.866,710.802 646.425,696.045 646.985,695.22 647.544,679.395 648.103,663.777 648.662,632.1 649.222,650.602 649.781,618.923 650.34,617.226 650.899,619.114 651.459,643.766 652.018,645.933 652.577,652.705 653.136,668.804 653.696,689.11 654.255,691.739 654.814,676.688 655.373,679.409 655.933,695.503 656.492,682.578 657.051,634.58 657.61,620.916 658.17,607.17 658.729,606.206 659.288,626.372 659.847,648.004 660.407,664.158 660.966,681.446 661.525,698.247 662.084,700.84 662.644,717.886 663.203,721.136 663.762,720.513 664.321,732.062 664.881,732.477 665.44,759.731 665.999,756.668 666.558,784.465 667.118,794.499 667.677,789.888 668.236,801.567 668.795,796.582 669.355,731.195 669.914,766.379 670.473,727.969 671.032,709.481 671.592,709.333 672.151,693.037 672.71,694.531 673.269,679.03 673.829,680.947 674.388,683.048 674.947,667.038 675.506,666.567 676.066,684.27 676.625,732.608 677.184,747.01 677.743,780.07 678.303,762.002 678.862,725.715 679.421,738.271 679.981,733.308 680.54,744.088 681.099,756.782 681.658,754.861 682.218,734.48 682.777,733.428 683.336,761.14 683.895,790.068 684.455,769.863 685.014,799.542 685.573,777.842 686.132,772.219 686.692,802.373 687.251,811.504 687.81,787.818 688.369,797.747 688.929,807.911 689.488,781.333 690.047,760.699 690.606,724.624 691.166,689.203 691.725,692.28 692.284,695.614 692.843,698.639 693.403,712.005 693.962,662.23 694.521,712.45 695.08,745.588 695.64,727.944 696.199,726.637 696.758,724.439 697.317,723.933 697.877,709.322 698.436,727.013 698.995,691.796 699.554,675.356 700.114,673.479 700.673,661.275 701.232,664.524 701.791,678.145 702.351,677.511 702.91,659.971 703.469,678.167 704.028,678.018 704.588,696.391 705.147,677.94 705.706,680.406 706.265,667.318 706.825,684.2 707.384,685.543 707.943,702.34 708.502,703.471 709.062,705.421 709.621,737.896 710.18,737.432 710.739,746.464 711.299,743.988 711.858,771.546 712.417,750.714 712.976,731.743 713.536,748.59 714.095,777.391 714.654,774.249 715.213,802.461 715.773,764.829 716.332,746.488 716.891,759.174 717.45,789.137 718.01,769.59 718.569,751.156 719.128,728.791 719.687,725.503 720.247,757.87 720.806,754.738 721.365,755.328 721.924,768.85 722.484,748.176 723.043,746.318 723.602,742.358 724.161,721.23 724.721,669.381 725.28,684.585 725.839,665.602 726.398,682.736 726.958,666.872 727.517,619.679 728.076,590.684 728.635,596.67 729.195,586.451 729.754,607.507 730.313,594.877 730.872,586.889 731.432,592.122 731.991,581.539 732.55,570.085 733.109,575.416 733.669,566.686 734.228,575.766 734.787,547.778 735.346,539.889 735.906,628.132 736.465,650.29 737.024,638.341 737.583,643.416 738.143,664.07 738.702,683.39 739.261,667.956 739.82,669.729 740.38,686.482 740.939,703.449 741.498,684.486 742.057,680.631 742.617,678.594 743.176,680.936 743.735,660.964 744.294,660.935 744.854,609.805 745.413,613.641 745.972,617.322 746.531,654.078 747.091,671.44 747.65,643.642 748.209,610.873 748.768,618.227 749.328,642.211 749.887,660.749 750.446,663.405 751.005,732.223 751.565,709.383 752.124,709.193 752.683,722.909 753.242,704.107 753.802,701.459 754.361,714.961 754.92,745.983 755.479,757.835 756.039,739.044 756.598,720.34 757.157,718.541 757.716,730.9 758.276,727.787 758.835,725.419 759.394,739.922 759.953,717.724 760.513,703.627 761.072,703.152 761.631,685.439 762.19,681.889 762.75,681.044 763.309,665.002 763.868,685.125 764.427,684.907 764.987,686.15 765.546,703.622 766.105,717.706 766.664,750.465 767.224,762.466 767.783,759.462 768.342,710.353 768.901,724.749 769.461,706.339 770.02,753.635 770.579,749.89 771.138,778.751 771.698,740.153 772.257,719.623 772.816,703.429 773.375,684.971 773.935,685.769 774.494,668.069 775.053,654.652 775.612,658.717 776.172,658.83 776.731,709.051 777.29,703.917 777.849,666.231 778.409,697.932 778.968,695.071 779.527,739.37 780.086,733.352 780.646,749.878 781.205,731.561 781.764,729.891 782.323,727.212 782.883,709.25 783.442,723.851 784.001,738.099 784.56,739.699 785.12,721.635 785.679,725.052 786.238,736.643 786.797,735.328 787.357,767.136 787.916,764.327 788.475,762.444 789.034,758.001 789.594,723.806 790.153,720.726 790.712,735.355 791.271,733.282 791.831,746.423 792.39,760.458 792.949,756.855 793.508,770.213 794.068,714.851 794.627,778.032 795.186,777.096 795.745,804.236 796.305,815.686 796.864,791.496 797.423,802.507 797.982,747.206 798.542,743.813 799.101,724.107 799.66,704.516 800.219,688.628 800.779,707.813 801.338,705.485 801.897,719.251 802.456,700.208 803.016,712.691 803.575,709.854 804.134,722.362 804.693,705.345 805.253,721.971 805.812,689.816 806.371,670.869 806.931,669.575 807.49,655.664 808.049,668.598 808.608,705.026 809.168,735.74 809.727,734.771 810.286,748.094 810.845,743.057 811.405,738.305 811.964,737.468 812.523,718.643 813.082,684.552 813.642,685.426 814.201,670.745 814.76,690.594 815.319,678.235 815.879,664.981 816.438,667.253 816.997,667.58 817.556,668.339 818.116,684.862 818.675,702.764 819.234,703.211 819.793,720.881 820.353,686.71 820.912,688.398 821.471,689.277 822.03,690.492 822.59,708.341 823.149,672.021 823.708,675.239 824.267,659.223 824.827,626.304 825.386,662.154 825.945,648.831 826.504,651.246 827.064,653.137 827.623,689.827 828.182,687.468 828.741,702.153 829.301,699.217 829.86,731.715 830.419,697.955 830.978,697.454 831.538,709.792 832.097,709.471 832.656,711.724 833.215,728.558 833.775,680.671 834.334,678.98 834.893,677.631 835.452,681.03 836.012,697.422 836.571,711.31 837.13,726.304 837.689,737.511 838.249,737.153 838.808,734.117 839.367,751.048 839.926,779.428 840.486,793.297 841.045,752.548 841.604,734.958 842.163,747.646 842.723,728.579 843.282,704.185 843.841,703.78 844.4,689.483 844.96,720.455 845.519,700.679 846.078,682.651 846.637,668.724 847.197,635.829 847.756,609.448 848.315,616.788 848.874,639.955 849.434,644.937 849.993,649.107 850.552,653.789 851.111,638.801 851.671,626.659 852.23,612.306 852.789,598.656 853.348,636.073 853.908,620.675 854.467,668.306 855.026,638.129 855.585,640.7 856.145,661.488 856.704,680.436 857.263,693.168 857.822,725.222 858.382,708.51 858.941,705.236 859.5,671.688 860.059,638.324 860.619,659.653 861.178,640.449 861.737,660.49 862.296,641.702 862.856,626.459 863.415,647.132 863.974,636.241 864.533,654.349 865.093,671.734 865.652,670.56 866.211,671.538 866.77,624.252 867.33,610.967 867.889,579.683 868.448,585.723 869.007,624.401 869.567,628.315 870.126,615.105 870.685,615.631 871.244,621.226 871.804,625.516 872.363,629.096 872.922,630.944 873.481,666.439 874.041,622.904 874.6,639.53 875.159,612.118 875.718,614.716 876.278,618.251 876.837,607.465 877.396,623.233 877.955,659.558 878.515,642.546 879.074,630.266 879.633,650.525 880.192,670.8 880.752,683.691 881.311,717.286 881.87,698.474 882.429,650.78 882.989,656.292 883.548,657.017 884.107,657.886 884.666,657.7 885.226,672.633 885.785,638.629 886.344,625.05 886.903,626.797 887.463,581.473 888.022,587.981 888.581,575.286 889.14,615.705 889.7,637.557 890.259,644.916 890.818,666.35 891.377,602.68 891.937,609.021 892.496,613.266 893.055,584.306 893.614,573.842 894.174,597.977 894.733,619.715 895.292,656.85 895.851,661.605 896.411,661.945 896.97,651.434 897.529,638.208 898.088,660.766 898.648,674.629 899.207,657.984 899.766,658.168 900.325,643.283 900.885,679.14 901.444,680.776 902.003,685.137 902.562,668.26 903.122,667.975 903.681,687.566 904.24,686.767 904.799,688.577 905.359,692.892 905.918,727.139 906.477,708.619 907.036,673.113 907.596,626.385 908.155,626.077 908.714,663.166 909.273,679.239 909.833,694.945 910.392,694.545 910.951,747.279 911.51,746.721 912.07,710.174 912.629,706.605 913.188,718.517 913.747,699.444 914.307,680.493 914.866,698.208 915.425,680.345 915.984,676.889 916.544,660.877 917.103,643.765 917.662,644.277 918.221,645.951 918.781,664.98 919.34,664.914 919.899,730.38 920.458,745.515 921.018,756.932 921.577,752.722 922.136,828.039 922.695,808.933 923.255,783.166 923.814,778.702 924.373,788.033 924.932,799.014 925.492,762.472 926.051,771.432 926.61,753.095 927.169,767.689 927.729,779.109 928.288,757.116 928.847,722.36 929.406,719.028 929.966,733.273 930.525,714.566 931.084,711.087 931.644,741.229 932.203,752.499 932.762,763.462 933.321,724.628 933.881,721.788 934.44,703.116 934.999,654.032 935.558,625.57 936.118,624.334 936.677,628.879 937.236,663.64 937.795,660.31 938.355,661.619 938.914,662.642 939.473,664.14 940.032,648.488 940.592,649.072 941.151,651.287 941.71,622.096 942.269,623.995 942.829,615.433 943.388,616.191 943.947,638.258 944.506,657.761 945.066,643.293 945.625,629.242 946.184,616.033 946.743,618.662 947.303,585.47 947.862,575.08 948.421,614.819 948.98,618.195 949.54,623.369 950.099,611.203 950.658,631.691 951.217,632.044 951.777,667.391 952.336,617.255 952.895,624.032 953.454,644.891 954.014,646.247 954.573,648.146 955.132,630.635 955.691,632.411 956.251,667.314 956.81,689.02 957.369,656.872 957.928,655.025 958.488,655.87 959.047,623.047 959.606,626.228 960.165,612.61 960.725,603.419 961.284,593.683 961.843,598.411 962.402,619.127 962.962,639.427 963.521,677.066 964.08,691.255 964.639,723.222 965.199,672.767 965.758,706.664 966.317,689.771 966.876,689.074 967.436,704.546 967.995,652.587 968.554,649.673 969.113,653.149 969.673,671.913 970.232,656.153 970.791,643.307 971.35,628.637 971.91,647.142 972.469,665.489 973.028,668.451 973.587,654.954 974.147,674.541 974.706,675.615 975.265,646.532 975.824,664.532 976.384,666.049 976.943,686.169 977.502,701.256 978.061,685.02 978.621,684.49 979.18,700.94 979.739,715.239 980.298,713.168 980.858,713.541 981.417,693.877 981.976,675.021 982.535,680.702 983.095,681.023 983.654,667.054 984.213,699.412 984.772,711.856 985.332,696.336 985.891,711.687 986.45,692.999 987.009,690.434 987.569,704.906 988.128,671.35 988.687,666.016 989.246,698.671 989.806,681.22 990.365,696.319 990.924,712.29 991.483,694.892 992.043,679.134 992.602,663.42 993.161,678.529 993.72,709.14 994.28,691.411 994.839,689.874 995.398,674.091 995.957,692.478 996.517,690.898 997.076,691.633 997.635,707.103 998.194,703.692 998.754,686.195 999.313,687.807 999.872,701.207 1000.43,720.035 1000.99,685.872 1001.55,701.64 1002.11,704.785 1002.67,739.191 1003.23,737.188 1003.79,732.187 1004.35,746.788 1004.91,758.589 1005.46,785.113 1006.02,762.514 1006.58,741.124 1007.14,766.866 1007.7,761.562 1008.26,741.927 1008.82,739.33 1009.38,700.821 1009.94,700.391 1010.5,680.684 1011.06,665.951 1011.62,667.992 1012.18,670.462 1012.73,640.779 1013.29,661.238 1013.85,679.686 1014.41,681.671 1014.97,715.122 1015.53,698.455 1016.09,697.391 1016.65,696.596 1017.21,714.159 1017.77,712.064 1018.33,723.889 1018.89,739.585 1019.45,735.206 1020.01,717.904 1020.56,729.387 1021.12,723.322 1021.68,753.963 1022.24,731.974 1022.8,743.028 1023.36,743.817 1023.92,757.51 1024.48,752.539 1025.04,782.8 1025.6,780.565 1026.16,793.28 1026.72,805.425 1027.28,782.792 1027.83,778.394 1028.39,792.089 1028.95,803.432 1029.51,762.423 1030.07,741.563 1030.63,754.125 1031.19,751.8 1031.75,762.516 1032.31,790.539 1032.87,787.555 1033.43,766.526 1033.99,782.05 1034.55,794.075 1035.1,776.88 1035.66,739.696 1036.22,716.514 1036.78,731.313 1037.34,727.085 1037.9,693.918 1038.46,758.395 1039.02,766.964 1039.58,731.038 1040.14,694.432 1040.7,690.027 1041.26,676.105 1041.82,692.978 1042.38,708.456 1042.93,706.927 1043.49,673.956 1044.05,675.014 1044.61,693.364 1045.17,692.76 1045.73,725.921 1046.29,706.554 1046.85,672.708 1047.41,641.207 1047.97,673.933 1048.53,708.156 1049.09,722.8 1049.65,719.273 1050.2,751.405 1050.76,729.287 1051.32,707.69 1051.88,720.766 1052.44,670.507 1053,684.995 1053.56,700.279 1054.12,715.419 1054.68,714.239 1055.24,665.278 1055.8,663.213 1056.36,678.247 1056.92,693.818 1057.48,659.157 1058.03,659.657 1058.59,661.242 1059.15,679.195 1059.71,694.076 1060.27,743.326 1060.83,737.265 1061.39,716.197 1061.95,714.238 1062.51,729.552 1063.07,709.901 1063.63,741.277 1064.19,721.389 1064.75,703.445 1065.3,686.411 1065.86,686.652 1066.42,731.691 1066.98,699.199 1067.54,685.89 1068.1,683.812 1068.66,663.872 1069.22,615.188 1069.78,653.049 1070.34,685.463 1070.9,682.455 1071.46,701.344 1072.02,716.657 1072.57,733.158 1073.13,728.571 1073.69,709.595 1074.25,690.872 1074.81,689.086 1075.37,674.221 1075.93,662.313 1076.49,649.926 1077.05,619.645 1077.61,590.03 1078.17,610.798 1078.73,631.81 1079.29,652.337 1079.85,634.448 1080.4,622.114 1080.96,625.216 1081.52,647.418 1082.08,664.644 1082.64,715.625 1083.2,715.891 1083.76,729.125 1084.32,726.753 1084.88,739.892 1085.44,702.168 1086,652.166 1086.56,683.817 1087.12,686.309 1087.67,718.84 1088.23,706.064 1088.79,690.027 1089.35,659.877 1089.91,676.783 1090.47,663.884 1091.03,648.094 1091.59,618.722 1092.15,606.152 1092.71,598.058 1093.27,631.989 1093.83,636.185 1094.39,639.732 1094.94,658.196 1095.5,687.503 1096.06,673.141 1096.62,691.498 1097.18,726.438 1097.74,704.894 1098.3,702.052 1098.86,684.752 1099.42,668.572 1099.98,671.744 1100.54,658.828 1101.1,675.58 1101.66,662.434 1102.22,648.964 1102.77,715.544 1103.33,697.908 1103.89,741.482 1104.45,722.471 1105.01,724.075 1105.57,755.67 1106.13,752.246 1106.69,779.555 1107.25,758.523 1107.81,771.082 1108.37,767.51 1108.93,779.498 1109.49,775.161 1110.04,768.903 1110.6,749.256 1111.16,745.974 1111.72,760.118 1112.28,774.621 1112.84,786.635 1113.4,772.527 1113.96,783.591 1114.52,762.348 1115.08,790.203 1115.64,779.569 1116.2,822.817 1116.76,844.425 1117.31,789.015 1117.87,751.878 1118.43,747.656 1118.99,729.5 1119.55,711.584 1120.11,726.651 1120.67,740.978 1121.23,723.655 1121.79,703.938 1122.35,733.208 1122.91,727.83 1123.47,742.766 1124.03,741.381 1124.59,703.129 1125.14,716.101 1125.7,712.111 1126.26,678.83 1126.82,691.619 1127.38,691.067 1127.94,672.923 1128.5,658.378 1129.06,660.206 1129.62,677.146 1130.18,680.181 1130.74,708.592 1131.3,675.902 1131.86,675.112 1132.41,629.913 1132.97,649.345 1133.53,666.387 1134.09,667.036 1134.65,668.406 1135.21,669.99 1135.77,704.455 1136.33,670.66 1136.89,669.334 1137.45,669.193 1138.01,636.728 1138.57,604.293 1139.13,595.956 1139.68,600.244 1140.24,635.484 1140.8,684.433 1141.36,673.365 1141.92,740.86 1142.48,756.938 1143.04,785.297 1143.6,752.364 1144.16,748.164 1144.72,715.334 1145.28,699.053 1145.84,682.302 1146.4,699.539 1146.96,714.121 1147.51,713.636 1148.07,760.782 1148.63,756.158 1149.19,736.341 1149.75,702.033 1150.31,734.621 1150.87,714.677 1151.43,681.997 1151.99,651.074 1152.55,654.155 1153.11,619 1153.67,622.351 1154.23,678.241 1154.78,678.95 1155.34,643.612 1155.9,664.388 1156.46,666.587 1157.02,683.419 1157.58,666.147 1158.14,685.395 1158.7,654.214 1159.26,638.597 1159.82,658.35 1160.38,645.527 1160.94,664.786 1161.5,685.025 1162.05,668.511 1162.61,650.037 1163.17,671.661 1163.73,653.574 1164.29,656.398 1164.85,655.715 1165.41,655.669 1165.97,674.396 1166.53,691.565 1167.09,672.942 1167.65,690.048 1168.21,691.713 1168.77,628.154 1169.33,616.784 1169.88,622.481 1170.44,610.271 1171,647.226 1171.56,635.191 1172.12,618.485 1172.68,636.981 1173.24,603.196 1173.8,591.187 1174.36,567.126 1174.92,605.721 1175.48,651.269 1176.04,638.962 1176.6,642.183 1177.15,660.111 1177.71,648.332 1178.27,667.348 1178.83,651.78 1179.39,668.563 1179.95,671.551 1180.51,671.933 1181.07,640.854 1181.63,626.622 1182.19,614.991 1182.75,588.117 1183.31,579.952 1183.87,599.993 1184.43,634.951 1184.98,639.635 1185.54,643.16 1186.1,631.977 1186.66,651.528 1187.22,703.703 1187.78,691.2 1188.34,659.517 1188.9,646.456 1189.46,664.962 1190.02,680.145 1190.58,728.14 1191.14,740.22 1191.7,737.497 1192.25,746.844 1192.81,744.18 1193.37,709.71 1193.93,744.292 1194.49,703.257 1195.05,701.459 1195.61,686.322 1196.17,698.563 1196.73,699.372 1197.29,699.935 1197.85,731.111 1198.41,731.153 1198.97,711.864 1199.52,742.727 1200.08,801.792 1200.64,847.607 1201.2,790.625 1201.76,771.188 1202.32,749.407 1202.88,712.624 1203.44,727.936 1204,678.953 1204.56,682.098 1205.12,697.506 1205.68,696.079 1206.24,695.618 1206.8,696.405 1207.35,711.027 1207.91,725.998 1208.47,674.162 1209.03,673.672 1209.59,659.244 1210.15,675.631 1210.71,678.093 1211.27,675.684 1211.83,672.779 1212.39,642.628 1212.95,610.91 1213.51,612.48 1214.07,599.733 1214.62,603.42 1215.18,608.939 1215.74,611.453 1216.3,598.006 1216.86,601.463 1217.42,555.684 1217.98,543.558 1218.54,569.928 1219.1,625.122 1219.66,646.024 1220.22,650.262 1220.78,623.767 1221.34,599.859 1221.89,606.804 1222.45,629.158 1223.01,651.582 1223.57,619.479 1224.13,637.843 1224.69,626.823 1225.25,631.727 1225.81,630.961 1226.37,694.952 1226.93,694.781 1227.49,661.538 1228.05,666.62 1228.61,620.274 1229.17,640.493 1229.72,643.972 1230.28,615.663 1230.84,615.916 1231.4,619.237 1231.96,606.284 1232.52,613.661 1233.08,600.127 1233.64,606.658 1234.2,611.118 1234.76,631.104 1235.32,634.177 1235.88,625.167 1236.44,609.518 1236.99,598.721 1237.55,603.577 1238.11,639.276 1238.67,662.028 1239.23,678.097 1239.79,695.002 1240.35,712.448 1240.91,681.84 1241.47,667.685 1242.03,683.797 1242.59,685.371 1243.15,718.759 1243.71,731.318 1244.26,726.794 1244.82,773.097 1245.38,753.629 1245.94,765.1 1246.5,792.865 1247.06,787.906 1247.62,799.486 1248.18,791.209 1248.74,801.342 1249.3,809.249 1249.86,800.926 1250.42,794.018 1250.98,773.339 1251.54,753.457 1252.09,764.907 1252.65,740.759 1253.21,792.372 1253.77,787.725 1254.33,784.108 1254.89,775.481 1255.45,772.713 1256.01,784.707 1256.57,793.861 1257.13,799.641 1257.69,808.495 1258.25,799.689 1258.81,810.273 1259.36,773.324 1259.92,796.737 1260.48,774.538 1261.04,803.42 1261.6,752.025 1262.16,763.238 1262.72,808.599 1263.28,786.229 1263.84,795.532 1264.4,804.121 1264.96,779.061 1265.52,756.769 1266.08,734.05 1266.63,731.857 1267.19,747.333 1267.75,746.404 1268.31,725.08 1268.87,738.83 1269.43,687.527 1269.99,685.212 1270.55,669.64 1271.11,704.19 1271.67,688.567 1272.23,704.108 1272.79,700.511 1273.35,682.632 1273.91,684.873 1274.46,685.543 1275.02,685.889 1275.58,639.671 1276.14,643.43 1276.7,628.611 1277.26,649.902 1277.82,634.592 1278.38,617.884 1278.94,641.041 1279.5,610.494 1280.06,611.943 1280.62,647.483 1281.18,633.689 1281.73,632.895 1282.29,634.693 1282.85,670.681 1283.41,675.835 1283.97,707.929 1284.53,704.011 1285.09,705.29 1285.65,720.326 1286.21,715.999 1286.77,747.127 1287.33,725.932 1287.89,755.822 1288.45,731.684 1289,661.669 1289.56,645.123 1290.12,648.121 1290.68,630.855 1291.24,649.081 1291.8,680.754 1292.36,647.856 1292.92,646.995 1293.48,646.985 1294.04,634.025 1294.6,637.724 1295.16,658.236 1295.72,675.397 1296.28,679.293 1296.83,695.884 1297.39,709.946 1297.95,722.281 1298.51,686.169 1299.07,683.994 1299.63,705.291 1300.19,692.088 1300.75,707.085 1301.31,691.731 1301.87,690.55 1302.43,708.885 1302.99,703.109 1303.55,716.915 1304.1,762.591 1304.66,773.723 1305.22,786.443 1305.78,752.374 1306.34,764.28 1306.9,776.339 1307.46,754.368 1308.02,767.414 1308.58,764.341 1309.14,741.302 1309.7,737.012 1310.26,686.473 1310.82,684.598 1311.38,667.32 1311.93,651.553 1312.49,667.283 1313.05,686.255 1313.61,684.931 1314.17,699.34 1314.73,715.645 1315.29,715.264 1315.85,732.779 1316.41,759.513 1316.97,770.469 1317.53,765.769 1318.09,745.808 1318.65,709.145 1319.2,707.132 1319.76,692.455 1320.32,642.699 1320.88,595.947 1321.44,633.961 1322,621.583 1322.56,640.221 1323.12,605.398 1323.68,621.854 1324.24,640.486 1324.8,606.24 1325.36,592.66 1325.92,596.963 1326.47,586.761 1327.03,558.308 1327.59,547.14 1328.15,558.054 1328.71,549.792 1329.27,575.863 1329.83,547.61 1330.39,553.827 1330.95,559.569 1331.51,569.199 1332.07,558.948 1332.63,566.744 1333.19,571.692 1333.75,592.691 1334.3,578.619 1334.86,566.626 1335.42,571.427 1335.98,562.517 1336.54,550.799 1337.1,543.112 1337.66,567.179 1338.22,575.353 1338.78,595.666 1339.34,619.321 1339.9,626.43 1340.46,657.397 1341.02,677.111 1341.57,674.891 1342.13,676.485 1342.69,726.148 1343.25,757.371 1343.81,755.055 1344.37,718.733 1344.93,671.351 1345.49,654.758 1346.05,703.051 1346.61,705.025 1347.17,671.06 1347.73,703.516 1348.29,701.974 1348.84,701.207 1349.4,685.406 1349.96,685.074 1350.52,667.744 1351.08,671.388 1351.64,673.159 1352.2,676.92 1352.76,708.236 1353.32,658.862 1353.88,654.698 1354.44,657.631 1355,644.917 1355.56,648.508 1356.12,635.711 1356.67,622.874 1357.23,609.371 1357.79,632.508 1358.35,649.994 1358.91,670.281 1359.47,657.251 1360.03,658.806 1360.59,630.606 1361.15,649.206 1361.71,654.568 1362.27,667.101 1362.83,649.005 1363.39,665.235 1363.94,632.992 1364.5,617.673 1365.06,639.056 1365.62,656.361 1366.18,661.261 1366.74,663.492 1367.3,632.829 1367.86,685.078 1368.42,684.476 1368.98,713.923 1369.54,695.202 1370.1,693.57 1370.66,689.507 1371.21,688.219 1371.77,702.066 1372.33,668.525 1372.89,687.253 1373.45,702.007 1374.01,744.91 1374.57,756.094 1375.13,702.121 1375.69,698.817 1376.25,674.777 1376.81,689.426 1377.37,703.541 1377.93,734.586 1378.49,714.668 1379.04,714.667 1379.6,716.909 1380.16,715.642 1380.72,710.837 1381.28,695.199 1381.84,677.157 1382.4,661.237 1382.96,678.124 1383.52,663.588 1384.08,666.324 1384.64,681.845 1385.2,683.612 1385.76,682.317 1386.31,714.777 1386.87,714.382 1387.43,716.73 1387.99,681.93 1388.55,683.459 1389.11,683.285 1389.67,647.985 1390.23,652.659 1390.79,687.124 1391.35,705.011 1391.91,719.338 1392.47,720.954 1393.03,751.843 1393.58,749.646 1394.14,726.999 1394.7,742.08 1395.26,739.077 1395.82,733.735 1396.38,730.029 1396.94,711.981 1397.5,680.701 1398.06,698.484 1398.62,650.935 1399.18,635.665 1399.74,639.428 1400.3,595.912 1400.86,588.402 1401.41,606.898 1401.97,612.454 1402.53,617.534 1403.09,657.139 1403.65,644.36 1404.21,628.331 1404.77,646.698 1405.33,664.227 1405.89,663.042 1406.45,663.379 1407.01,728.141 1407.57,753.427 1408.13,751.759 1408.68,748.149 1409.24,728.156 1409.8,725.533 1410.36,676.199 1410.92,674.856 1411.48,656.907 1412.04,659.401 1412.6,658.657 1413.16,676.681 1413.72,691.81 1414.28,691.286 1414.84,691.135 1415.4,690.723 1415.95,691.989 1416.51,707.804 1417.07,735.622 1417.63,747.164 1418.19,728.307 1418.75,724.098 1419.31,721.238 1419.87,702.811 1420.43,702.374 1420.99,684.551 1421.55,733.785 1422.11,730.703 1422.67,729.399 1423.23,728.406 1423.78,741.733 1424.34,741.711 1424.9,707.818 1425.46,737.117 1426.02,734.384 1426.58,778.965 1427.14,794.905 1427.7,759.018 1428.26,739.608 1428.82,706.449 1429.38,736.055 1429.94,719.385 1430.5,748.832 1431.05,751.969 1431.61,748.385 1432.17,746.714 1432.73,805.529 1433.29,815.452 1433.85,808.941 1434.41,770.852 1434.97,752.996 1435.53,730.034 1436.09,711.733 1436.65,709.698 1437.21,707.1 1437.77,711.186 1438.33,712.787 1438.88,664.999 1439.44,637.253 1440,654.822 1440.56,687.005 1441.12,671.331 1441.68,636.806 1442.24,639.361 1442.8,641.035 1443.36,645.71 1443.92,634.872 1444.48,586.511 1445.04,578.643 1445.6,565.152 1446.15,554.859 1446.71,579.361 1447.27,621.355 1447.83,625.008 1448.39,643.228 1448.95,646.705 1449.51,697.893 1450.07,697.642 1450.63,716.018 1451.19,715.359 1451.75,730.735 1452.31,713.622 1452.87,729.584 1453.42,726.756 1453.98,739.394 1454.54,735.397 1455.1,735.503 1455.66,765.884 1456.22,777.496 1456.78,773.932 1457.34,769.06 1457.9,748.008 1458.46,746.226 1459.02,777.128 1459.58,773.458 1460.14,799.581 1460.7,775.613 1461.25,787.667 1461.81,767.624 1462.37,767.629 1462.93,763.425 1463.49,793.15 1464.05,818.305 1464.61,799.016 1465.17,794.368 1465.73,770.19 1466.29,715.201 1466.85,732.374 1467.41,713.224 1467.97,727.159 1468.52,727.602 1469.08,708.306 1469.64,689.562 1470.2,690.941 1470.76,671.555 1471.32,702.045 1471.88,651.007 1472.44,637.748 1473,623.158 1473.56,626.234 1474.12,615.646 1474.68,648.887 1475.24,636.089 1475.79,639.9 1476.35,611.034 1476.91,601.08 1477.47,621.009 1478.03,625.067 1478.59,594.735 1479.15,552.351 1479.71,588.343 1480.27,610.26 1480.83,584.993 1481.39,572.634 1481.95,596.064 1482.51,568.503 1483.07,590.138 1483.62,610.409 1484.18,582.744 1484.74,586.327 1485.3,591.945 1485.86,613.448 1486.42,586.476 1486.98,588.775 1487.54,610.256 1488.1,615.927 1488.66,619.942 1489.22,609.748 1489.78,616.794 1490.34,650.998 1490.89,669.346 1491.45,667.39 1492.01,681.465 1492.57,715.392 1493.13,713.377 1493.69,698.787 1494.25,667.451 1494.81,668.153 1495.37,672.069 1495.93,707.332 1496.49,705.701 1497.05,703.157 1497.61,720.111 1498.16,718.852 1498.72,750.133 1499.28,746.678 1499.84,727.536 1500.4,693.671 1500.96,694.169 1501.52,693.436 1502.08,695.463 1502.64,696.93 1503.2,713.556 1503.76,709.691 1504.32,703.688 1504.88,737.096 1505.44,768.227 1505.99,777.703 1506.55,744.184 1507.11,771.902 1507.67,780.495 1508.23,756.772 1508.79,721.682 1509.35,720.207 1509.91,702.479 1510.47,701.158 1511.03,701.531 1511.59,747.356 1512.15,711.493 1512.71,712.033 1513.26,709.788 1513.82,707.556 1514.38,706.299 1514.94,690.329 1515.5,689.558 1516.06,686.799 1516.62,714.34 1517.18,693.861 1517.74,723.953 1518.3,722.512 1518.86,714.619 1519.42,712.68 1519.98,728.3 1520.53,741.883 1521.09,739.898 1521.65,752.442 1522.21,714.646 1522.77,711.458 1523.33,742.175 1523.89,739.113 1524.45,701.792 1525.01,656.675 1525.57,690.57 1526.13,706.267 1526.69,720.911 1527.25,750.043 1527.81,747.907 1528.36,776.923 1528.92,771.761 1529.48,751.851 1530.04,763.814 1530.6,741.168 1531.16,673.848 1531.72,702.618 1532.28,734.169 1532.84,763.649 1533.4,709.579 1533.96,737.792 1534.52,751.205 1535.08,715.391 1535.63,700.18 1536.19,682.419 1536.75,649.278 1537.31,650.152 1537.87,650.85 1538.43,639.838 1538.99,609.46 1539.55,591.929 1540.11,597.368 1540.67,587.598 1541.23,626.619 1541.79,631.744 1542.35,636.831 1542.9,638.548 1543.46,639.295 1544.02,655.508 1544.58,640.136 1545.14,611.924 1545.7,581.821 1546.26,598.972 1546.82,634.869 1547.38,667.745 1547.94,684.785 1548.5,671.092 1549.06,657.919 1549.62,691.75 1550.18,692.718 1550.73,644.152 1551.29,616.214 1551.85,607.924 1552.41,609.65 1552.97,632.52 1553.53,649.883 1554.09,634.859 1554.65,605.671 1555.21,621.433 1555.77,592.009 1556.33,626.786 1556.89,644.904 1557.45,647.003 1558,649.943 1558.56,639.448 1559.12,689.135 1559.68,741.149 1560.24,724.862 1560.8,723.663 1561.36,738.191 1561.92,753.874 1562.48,734.782 1563.04,734.762 1563.6,720.504 1564.16,718.915 1564.72,719.461 1565.28,702.147 1565.83,687.804 1566.39,733.709 1566.95,729.259 1567.51,712.511 1568.07,693.241 1568.63,676.484 1569.19,678.229 1569.75,710.549 1570.31,711.189 1570.87,707.693 1571.43,691.131 1571.99,689.738 1572.55,685.971 1573.1,701.805 1573.66,701.933 1574.22,702.001 1574.78,701.459 1575.34,700.689 1575.9,698.614 1576.46,713.296 1577.02,666.194 1577.58,685.17 1578.14,683.932 1578.7,685.892 1579.26,730.402 1579.82,695.154 1580.37,682.811 1580.93,682.926 1581.49,647.334 1582.05,667.207 1582.61,652.073 1583.17,655.551 1583.73,685.697 1584.29,703.588 1584.85,690.117 1585.41,690.242 1585.97,736.696 1586.53,733.839 1587.09,748.049 1587.65,745.099 1588.2,726.885 1588.76,692.672 1589.32,663.418 1589.88,665.575 1590.44,667.526 1591,702.491 1591.56,733.291 1592.12,745.072 1592.68,759.792 1593.24,774.61 1593.8,736.941 1594.36,731.689 1594.92,711.925 1595.47,679.276 1596.03,679.52 1596.59,712.629 1597.15,678.573 1597.71,680.13 1598.27,647.471 1598.83,635.963 1599.39,640.797 1599.95,647.216 1600.51,647.073 1601.07,631.448 1601.63,667.423 1602.19,682.829 1602.74,683.499 1603.3,651.227 1603.86,638.552 1604.42,639.523 1604.98,625.18 1605.54,644.308 1606.1,664.085 1606.66,665.173 1607.22,647.511 1607.78,619.729 1608.34,608.831 1608.9,631.275 1609.46,619.118 1610.02,638.236 1610.57,607.909 1611.13,611.781 1611.69,581.361 1612.25,603.048 1612.81,609.036 1613.37,578.509 1613.93,618.035 1614.49,572.615 1615.05,575.103 1615.61,616.97 1616.17,621.123 1616.73,638.711 1617.29,610.347 1617.84,597.858 1618.4,616.136 1618.96,618.315 1619.52,624.228 1620.08,580.37 1620.64,601.696 1621.2,623.139 1621.76,628.227 1622.32,665.966 1622.88,663.752 1623.44,685.959 1624,732.485 1624.56,730.038 1625.11,744.32 1625.67,757.721 1626.23,767.971 1626.79,726.186 1627.35,725.179 1627.91,673.534 1628.47,661.391 1629.03,680.622 1629.59,681.061 1630.15,674.225 1630.71,659.402 1631.27,678.616 1631.83,710.284 1632.39,693.65 1632.94,706.918 1633.5,709.525 1634.06,740.715 1634.62,819.881 1635.18,809.993 1635.74,789.327 1636.3,813.018 1636.86,807.911 1637.42,784.963 1637.98,781.355 1638.54,774.874 1639.1,767.471 1639.66,749.181 1640.21,744.659 1640.77,741.459 1641.33,768.991 1641.89,782.417 1642.45,757.708 1643.01,785.86 1643.57,797.946 1644.13,790.696 1644.69,722.542 1645.25,672.454 1645.81,643.548 1646.37,661.513 1646.93,647.054 1647.48,664.598 1648.04,665.515 1648.6,698.499 1649.16,709.192 1649.72,737.355 1650.28,764.294 1650.84,792.187 1651.4,773.742 1651.96,717.518 1652.52,728.902 1653.08,744.451 1653.64,774.038 1654.2,753.981 1654.76,752.993 1655.31,765.195 1655.87,742.518 1656.43,737.258 1656.99,699.522 1657.55,714.234 1658.11,662.085 1658.67,645.188 1659.23,662.963 1659.79,662.532 1660.35,698.726 1660.91,696.247 1661.47,693.659 1662.03,646.222 1662.58,646.704 1663.14,618.165 1663.7,604.317 1664.26,591.707 1664.82,593.803 1665.38,599.816 1665.94,602.664 1666.5,592.192 1667.06,562.796 1667.62,598.123 1668.18,635.854 1668.74,636.629 1669.3,589.111 1669.85,608.831 1670.41,595.901 1670.97,602.43 1671.53,656.741 1672.09,655.934 1672.65,670.086 1673.21,674.968 1673.77,723.964 1674.33,787.072 1674.89,807.84 1675.45,770.082 1676.01,764.302 1676.57,745.573 1677.13,761.615 1677.68,741.54 1678.24,757.664 1678.8,740.309 1679.36,717.348 1679.92,701.294 1680.48,683.547 1681.04,681.158 1681.6,681.241 1682.16,645.693 1682.72,602.147 1683.28,620.817 1683.84,620.937 1684.4,607.767 1684.95,578.172 1685.51,566.822 1686.07,573.527 1686.63,594.768 1687.19,583.101 1687.75,591.348 1688.31,566.03 1688.87,571.134 1689.43,576.064 1689.99,551.441 1690.55,574.91 1691.11,581.75 1691.67,606.015 1692.23,612.736 1692.78,631.531 1693.34,616.859 1693.9,669.951 1694.46,686.824 1695.02,670.92 1695.58,687.978 1696.14,670.421 1696.7,668.899 1697.26,670.718 1697.82,640.055 1698.38,612.297 1698.94,614.927 1699.5,616.525 1700.05,654.161 1700.61,688.916 1701.17,705.659 1701.73,722.667 1702.29,719.965 1702.85,735.931 1703.41,683.42 1703.97,699.858 1704.53,733.061 1705.09,714.594 1705.65,732.552 1706.21,681.058 1706.77,651.115 1707.32,652.845 1707.88,668.971 1708.44,702.986 1709,686.979 1709.56,671.014 1710.12,655.497 1710.68,657.932 1711.24,647.041 1711.8,645.028 1712.36,660.551 1712.92,663.109 1713.48,651.426 1714.04,683.283 1714.6,731.916 1715.15,715.639 1715.71,697.586 1716.27,694.038 1716.83,712.031 1717.39,739.921 1717.95,721.699 1718.51,702.238 1719.07,685.801 1719.63,733.732 1720.19,748.867 1720.75,730.871 1721.31,761.399 1721.87,759.872 1722.42,771.351 1722.98,767.293 1723.54,762.319 1724.1,759.658 1724.66,755.469 1725.22,752.173 1725.78,727.718 1726.34,708.852 1726.9,738.729 1727.46,749.831 1728.02,714.869 1728.58,696.993 1729.14,678.796 1729.69,710.55 1730.25,739.827 1730.81,721.685 1731.37,750.315 1731.93,745.963 1732.49,758.22 1733.05,739.041 1733.61,723.058 1734.17,719.328 1734.73,717.513 1735.29,716.422 1735.85,711.775 1736.41,711.012 1736.97,712.056 1737.52,727.914 1738.08,739.627 1738.64,737.353 1739.2,717.868 1739.76,666.141 1740.32,665.927 1740.88,650.588 1741.44,668.336 1742,667.415 1742.56,686.289 1743.12,668.39 1743.68,673.937 1744.24,671.039 1744.79,720.644 1745.35,704.743 1745.91,686.189 1746.47,656.149 1747.03,672.526 1747.59,688.315 1748.15,702.664 1748.71,702.621 1749.27,684.615 1749.83,673.377 1750.39,705.419 1750.95,687.641 1751.51,753.252 1752.06,751.115 1752.62,781.391 1753.18,760.667 1753.74,724.987 1754.3,737.305 1754.86,697.72 1755.42,694.608 1755.98,695.704 1756.54,711.699 1757.1,710.253 1757.66,708.147 1758.22,735.641 1758.78,717.857 1759.34,665.275 1759.89,698.646 1760.45,681.274 1761.01,696.487 1761.57,684.3 1762.13,718.957 1762.69,698.375 1763.25,682.494 1763.81,663.927 1764.37,646.114 1764.93,679.594 1765.49,678.85 1766.05,660.697 1766.61,663.193 1767.16,648.905 1767.72,683.042 1768.28,696.46 1768.84,680.064 1769.4,695.596 1769.96,694.079 1770.52,694.542 1771.08,663.146 1771.64,662.957 1772.2,647.154 1772.76,678.091 1773.32,678.845 1773.88,684.322 1774.43,685.248 1774.99,667.835 1775.55,651.222 1776.11,636.083 1776.67,637.89 1777.23,642.767 1777.79,681.98 1778.35,699.179 1778.91,679.64 1779.47,698.585 1780.03,663.878 1780.59,664.252 1781.15,681.799 1781.71,711.576 1782.26,695.316 1782.82,713.159 1783.38,712.239 1783.94,707.069 1784.5,689.155 1785.06,718.86 1785.62,699.946 1786.18,713.69 1786.74,715.064 1787.3,712.552 1787.86,710.796 1788.42,723.202 1788.98,756.086 1789.53,767.781 1790.09,813.48 1790.65,839.755 1791.21,848.807 1791.77,840.211 1792.33,834.461 1792.89,857.297 1793.45,846.115 1794.01,840.362 1794.57,831.227 1795.13,821.178 1795.69,799.874 1796.25,826.179 1796.8,816.827 1797.36,806.635 1797.92,813.783 1798.48,788.409 1799.04,783.927 1799.6,730.52 1800.16,745.391 1800.72,743.29 1801.28,737.591 1801.84,702.108 1802.4,716.651 1802.96,731.128 1803.52,714.009 1804.08,678.3 1804.63,743.952 1805.19,773.95 1805.75,769.488 1806.31,782.286 1806.87,779.791 1807.43,775.663 1807.99,801.772 1808.55,747.322 1809.11,759.826 1809.67,786.358 1810.23,815.737 1810.79,840.103 1811.35,848.371 1811.9,808.262 1812.46,752.984 1813.02,732.764 1813.58,715.861 1814.14,713.946 1814.7,724.273 1815.26,720.158 1815.82,714.259 1816.38,707.898 1816.94,690.592 1817.5,672.614 1818.06,642.663 1818.62,613.261 1819.18,598.807 1819.73,587.229 1820.29,575.502 1820.85,582.044 1821.41,569.984 1821.97,577.386 1822.53,598.092 1823.09,615.491 1823.65,618.804 1824.21,652.353 1824.77,656.518 1825.33,642.373 1825.89,659.545 1826.45,662.152 1827,650.163 1827.56,653.402 1828.12,670.651 1828.68,690.079 1829.24,708.598 1829.8,706.966 1830.36,705.276 1830.92,708.392 1831.48,626.319 1832.04,561.477 1832.6,572.773 1833.16,580.147 1833.72,584.807 1834.27,571.865 1834.83,591.081 1835.39,615.184 1835.95,634.255 1836.51,655.121 1837.07,675.331 1837.63,678.094 1838.19,693.281 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 693.119 L720.806 693.119 L721.365 693.119 L721.924 693.119 L722.484 693.119 L723.043 693.119 L723.602 693.119 L724.161 693.119 L724.721 693.119 L725.28 693.119 L725.839 693.119 L726.398 693.119 L726.958 693.119 L727.517 693.119 L728.076 693.119 L728.635 693.119 L729.195 693.119 L729.754 693.119 L730.313 693.119 L730.872 693.119 L731.432 693.119 L731.991 693.119 L732.55 693.119 L733.109 693.119 L733.669 693.119 L734.228 693.119 L734.787 693.119 L735.346 693.119 L735.906 693.119 L736.465 693.119 L737.024 693.119 L737.583 693.119 L738.143 693.119 L738.702 693.119 L739.261 693.119 L739.82 693.119 L740.38 693.119 L740.939 693.119 L741.498 693.119 L742.057 693.119 L742.617 693.119 L743.176 693.119 L743.735 693.119 L744.294 693.119 L744.854 693.119 L745.413 693.119 L745.972 693.119 L746.531 693.119 L747.091 693.119 L747.65 693.119 L748.209 693.119 L748.768 693.119 L749.328 693.119 L749.887 693.119 L750.446 693.119 L751.005 693.119 L751.565 693.119 L752.124 693.119 L752.683 693.119 L753.242 693.119 L753.802 693.119 L754.361 693.119 L754.92 693.119 L755.479 693.119 L756.039 693.119 L756.598 693.119 L757.157 693.119 L757.716 693.119 L758.276 693.119 L758.835 693.119 L759.394 693.119 L759.953 693.119 L760.513 693.119 L761.072 693.119 L761.631 693.119 L762.19 693.119 L762.75 693.119 L763.309 693.119 L763.868 693.119 L764.427 693.119 L764.987 693.119 L765.546 693.119 L766.105 693.119 L766.664 693.119 L767.224 693.119 L767.783 693.119 L768.342 693.119 L768.901 693.119 L769.461 693.119 L770.02 693.119 L770.579 693.119 L771.138 693.119 L771.698 693.119 L772.257 693.119 L772.816 693.119 L773.375 693.119 L773.935 693.119 L774.494 693.119 L775.053 693.119 L775.612 693.119 L776.172 693.119 L776.731 693.119 L777.29 693.119 L777.849 693.119 L778.409 693.119 L778.968 693.119 L779.527 693.119 L780.086 693.119 L780.646 693.119 L781.205 693.119 L781.764 693.119 L782.323 693.119 L782.883 693.119 L783.442 693.119 L784.001 693.119 L784.56 693.119 L785.12 693.119 L785.679 693.119 L786.238 693.119 L786.797 693.119 L787.357 693.119 L787.916 693.119 L788.475 693.119 L789.034 693.119 L789.594 693.119 L790.153 693.119 L790.712 693.119 L791.271 693.119 L791.831 693.119 L792.39 693.119 L792.949 693.119 L793.508 693.119 L794.068 693.119 L794.627 693.119 L795.186 693.119 L795.745 693.119 L796.305 693.119 L796.864 693.119 L797.423 693.119 L797.982 693.119 L798.542 693.119 L799.101 693.119 L799.66 693.119 L800.219 693.119 L800.779 693.119 L801.338 693.119 L801.897 693.119 L802.456 693.119 L803.016 693.119 L803.575 693.119 L804.134 693.119 L804.693 693.119 L805.253 693.119 L805.812 693.119 L806.371 693.119 L806.931 693.119 L807.49 693.119 L808.049 693.119 L808.608 693.119 L809.168 693.119 L809.727 693.119 L810.286 693.119 L810.845 693.119 L811.405 693.119 L811.964 693.119 L812.523 693.119 L813.082 693.119 L813.642 693.119 L814.201 693.119 L814.76 693.119 L815.319 693.119 L815.879 693.119 L816.438 693.119 L816.997 693.119 L817.556 693.119 L818.116 693.119 L818.675 693.119 L819.234 693.119 L819.793 693.119 L820.353 693.119 L820.912 693.119 L821.471 693.119 L822.03 693.119 L822.59 693.119 L823.149 693.119 L823.708 693.119 L824.267 693.119 L824.827 693.119 L825.386 693.119 L825.945 693.119 L826.504 693.119 L827.064 693.119 L827.623 693.119 L828.182 693.119 L828.741 693.119 L829.301 693.119 L829.86 693.119 L830.419 693.119 L830.978 693.119 L831.538 693.119 L832.097 693.119 L832.656 693.119 L833.215 693.119 L833.775 693.119 L834.334 693.119 L834.893 693.119 L835.452 693.119 L836.012 693.119 L836.571 693.119 L837.13 693.119 L837.689 693.119 L838.249 693.119 L838.808 693.119 L839.367 693.119 L839.926 693.119 L840.486 693.119 L841.045 693.119 L841.604 693.119 L842.163 693.119 L842.723 693.119 L843.282 693.119 L843.841 693.119 L844.4 693.119 L844.96 693.119 L845.519 693.119 L846.078 693.119 L846.637 693.119 L847.197 693.119 L847.756 693.119 L848.315 693.119 L848.874 693.119 L849.434 693.119 L849.993 693.119 L850.552 693.119 L851.111 693.119 L851.671 693.119 L852.23 693.119 L852.789 693.119 L853.348 693.119 L853.908 693.119 L854.467 693.119 L855.026 693.119 L855.585 693.119 L856.145 693.119 L856.704 693.119 L857.263 693.119 L857.822 693.119 L858.382 693.119 L858.941 693.119 L859.5 693.119 L860.059 693.119 L860.619 693.119 L861.178 693.119 L861.737 693.119 L862.296 693.119 L862.856 693.119 L863.415 693.119 L863.974 693.119 L864.533 693.119 L865.093 693.119 L865.652 693.119 L866.211 693.119 L866.77 693.119 L867.33 693.119 L867.889 693.119 L868.448 693.119 L869.007 693.119 L869.567 693.119 L870.126 693.119 L870.685 693.119 L871.244 693.119 L871.804 693.119 L872.363 693.119 L872.922 693.119 L873.481 693.119 L874.041 693.119 L874.6 693.119 L875.159 693.119 L875.718 693.119 L876.278 693.119 L876.837 693.119 L877.396 693.119 L877.955 693.119 L878.515 693.119 L879.074 693.119 L879.633 693.119 L880.192 693.119 L880.752 693.119 L881.311 693.119 L881.87 693.119 L882.429 693.119 L882.989 693.119 L883.548 693.119 L884.107 693.119 L884.666 693.119 L885.226 693.119 L885.785 693.119 L886.344 693.119 L886.903 693.119 L887.463 693.119 L888.022 693.119 L888.581 693.119 L889.14 693.119 L889.7 693.119 L890.259 693.119 L890.818 693.119 L891.377 693.119 L891.937 693.119 L892.496 693.119 L893.055 693.119 L893.614 693.119 L894.174 693.119 L894.733 693.119 L895.292 693.119 L895.851 693.119 L896.411 693.119 L896.97 693.119 L897.529 693.119 L898.088 693.119 L898.648 693.119 L899.207 693.119 L899.766 693.119 L900.325 693.119 L900.885 693.119 L901.444 693.119 L902.003 693.119 L902.562 693.119 L903.122 693.119 L903.681 693.119 L904.24 693.119 L904.799 693.119 L905.359 693.119 L905.918 693.119 L906.477 693.119 L907.036 693.119 L907.596 693.119 L908.155 693.119 L908.714 693.119 L909.273 693.119 L909.833 693.119 L910.392 693.119 L910.951 693.119 L911.51 693.119 L912.07 693.119 L912.629 693.119 L913.188 693.119 L913.747 693.119 L914.307 693.119 L914.866 693.119 L915.425 693.119 L915.984 693.119 L916.544 693.119 L917.103 693.119 L917.662 693.119 L918.221 693.119 L918.781 693.119 L919.34 693.119 L919.899 693.119 L920.458 693.119 L921.018 693.119 L921.577 693.119 L922.136 693.119 L922.695 693.119 L923.255 693.119 L923.814 693.119 L924.373 693.119 L924.932 693.119 L925.492 693.119 L926.051 693.119 L926.61 693.119 L927.169 693.119 L927.729 693.119 L928.288 693.119 L928.847 693.119 L929.406 693.119 L929.966 693.119 L930.525 693.119 L931.084 693.119 L931.644 693.119 L932.203 693.119 L932.762 693.119 L933.321 693.119 L933.881 693.119 L934.44 693.119 L934.999 693.119 L935.558 693.119 L936.118 693.119 L936.677 693.119 L937.236 693.119 L937.795 693.119 L938.355 693.119 L938.914 693.119 L939.473 693.119 L940.032 693.119 L940.592 693.119 L941.151 693.119 L941.71 693.119 L942.269 693.119 L942.829 693.119 L943.388 693.119 L943.947 693.119 L944.506 693.119 L945.066 693.119 L945.625 693.119 L946.184 693.119 L946.743 693.119 L947.303 693.119 L947.862 693.119 L948.421 693.119 L948.98 693.119 L949.54 693.119 L950.099 693.119 L950.658 693.119 L951.217 693.119 L951.777 693.119 L952.336 693.119 L952.895 693.119 L953.454 693.119 L954.014 693.119 L954.573 693.119 L955.132 693.119 L955.691 693.119 L956.251 693.119 L956.81 693.119 L957.369 693.119 L957.928 693.119 L958.488 693.119 L959.047 693.119 L959.606 693.119 L960.165 693.119 L960.725 693.119 L961.284 693.119 L961.843 693.119 L962.402 693.119 L962.962 693.119 L963.521 693.119 L964.08 693.119 L964.639 693.119 L965.199 693.119 L965.758 693.119 L966.317 693.119 L966.876 693.119 L967.436 693.119 L967.995 693.119 L968.554 693.119 L969.113 693.119 L969.673 693.119 L970.232 693.119 L970.791 693.119 L971.35 693.119 L971.91 693.119 L972.469 693.119 L973.028 693.119 L973.587 693.119 L974.147 693.119 L974.706 693.119 L975.265 693.119 L975.824 693.119 L976.384 693.119 L976.943 693.119 L977.502 693.119 L978.061 693.119 L978.621 693.119 L979.18 693.119 L979.739 693.119 L980.298 693.119 L980.858 693.119 L981.417 693.119 L981.976 693.119 L982.535 693.119 L983.095 693.119 L983.654 693.119 L984.213 693.119 L984.772 693.119 L985.332 693.119 L985.891 693.119 L986.45 693.119 L987.009 693.119 L987.569 693.119 L988.128 693.119 L988.687 693.119 L989.246 693.119 L989.806 693.119 L990.365 693.119 L990.924 693.119 L991.483 693.119 L992.043 693.119 L992.602 693.119 L993.161 693.119 L993.72 693.119 L994.28 693.119 L994.839 693.119 L995.398 693.119 L995.957 693.119 L996.517 693.119 L997.076 693.119 L997.635 693.119 L998.194 693.119 L998.754 693.119 L999.313 693.119 L999.872 693.119 L1000.43 693.119 L1000.99 693.119 L1001.55 693.119 L1002.11 693.119 L1002.67 693.119 L1003.23 693.119 L1003.79 693.119 L1004.35 693.119 L1004.91 693.119 L1005.46 693.119 L1006.02 693.119 L1006.58 693.119 L1007.14 693.119 L1007.7 693.119 L1008.26 693.119 L1008.82 693.119 L1009.38 693.119 L1009.94 693.119 L1010.5 693.119 L1011.06 693.119 L1011.62 693.119 L1012.18 693.119 L1012.73 693.119 L1013.29 693.119 L1013.85 693.119 L1014.41 693.119 L1014.97 693.119 L1015.53 693.119 L1016.09 693.119 L1016.65 693.119 L1017.21 693.119 L1017.77 693.119 L1018.33 693.119 L1018.89 693.119 L1019.45 693.119 L1020.01 693.119 L1020.56 693.119 L1021.12 693.119 L1021.68 693.119 L1022.24 693.119 L1022.8 693.119 L1023.36 693.119 L1023.92 693.119 L1024.48 693.119 L1025.04 693.119 L1025.6 693.119 L1026.16 693.119 L1026.72 693.119 L1027.28 693.119 L1027.83 693.119 L1028.39 693.119 L1028.95 693.119 L1029.51 693.119 L1030.07 693.119 L1030.63 693.119 L1031.19 693.119 L1031.75 693.119 L1032.31 693.119 L1032.87 693.119 L1033.43 693.119 L1033.99 693.119 L1034.55 693.119 L1035.1 693.119 L1035.66 693.119 L1036.22 693.119 L1036.78 693.119 L1037.34 693.119 L1037.9 693.119 L1038.46 693.119 L1039.02 693.119 L1039.58 693.119 L1040.14 693.119 L1040.7 693.119 L1041.26 693.119 L1041.82 693.119 L1042.38 693.119 L1042.93 693.119 L1043.49 693.119 L1044.05 693.119 L1044.61 693.119 L1045.17 693.119 L1045.73 693.119 L1046.29 693.119 L1046.85 693.119 L1047.41 693.119 L1047.97 693.119 L1048.53 693.119 L1049.09 693.119 L1049.65 693.119 L1050.2 693.119 L1050.76 693.119 L1051.32 693.119 L1051.88 693.119 L1052.44 693.119 L1053 693.119 L1053.56 693.119 L1054.12 693.119 L1054.68 693.119 L1055.24 693.119 L1055.8 693.119 L1056.36 693.119 L1056.92 693.119 L1057.48 693.119 L1058.03 693.119 L1058.59 693.119 L1059.15 693.119 L1059.71 693.119 L1060.27 693.119 L1060.83 693.119 L1061.39 693.119 L1061.95 693.119 L1062.51 693.119 L1063.07 693.119 L1063.63 693.119 L1064.19 693.119 L1064.75 693.119 L1065.3 693.119 L1065.86 693.119 L1066.42 693.119 L1066.98 693.119 L1067.54 693.119 L1068.1 693.119 L1068.66 693.119 L1069.22 693.119 L1069.78 693.119 L1070.34 693.119 L1070.9 693.119 L1071.46 693.119 L1072.02 693.119 L1072.57 693.119 L1073.13 693.119 L1073.69 693.119 L1074.25 693.119 L1074.81 693.119 L1075.37 693.119 L1075.93 693.119 L1076.49 693.119 L1077.05 693.119 L1077.61 693.119 L1078.17 693.119 L1078.73 693.119 L1079.29 693.119 L1079.85 693.119 L1080.4 693.119 L1080.96 693.119 L1081.52 693.119 L1082.08 693.119 L1082.64 693.119 L1083.2 693.119 L1083.76 693.119 L1084.32 693.119 L1084.88 693.119 L1085.44 693.119 L1086 693.119 L1086.56 693.119 L1087.12 693.119 L1087.67 693.119 L1088.23 693.119 L1088.79 693.119 L1089.35 693.119 L1089.91 693.119 L1090.47 693.119 L1091.03 693.119 L1091.59 693.119 L1092.15 693.119 L1092.71 693.119 L1093.27 693.119 L1093.83 693.119 L1094.39 693.119 L1094.94 693.119 L1095.5 693.119 L1096.06 693.119 L1096.62 693.119 L1097.18 693.119 L1097.74 693.119 L1098.3 693.119 L1098.86 693.119 L1099.42 693.119 L1099.98 693.119 L1100.54 693.119 L1101.1 693.119 L1101.66 693.119 L1102.22 693.119 L1102.77 693.119 L1103.33 693.119 L1103.89 693.119 L1104.45 693.119 L1105.01 693.119 L1105.57 693.119 L1106.13 693.119 L1106.69 693.119 L1107.25 693.119 L1107.81 693.119 L1108.37 693.119 L1108.93 693.119 L1109.49 693.119 L1110.04 693.119 L1110.6 693.119 L1111.16 693.119 L1111.72 693.119 L1112.28 693.119 L1112.84 693.119 L1113.4 693.119 L1113.96 693.119 L1114.52 693.119 L1115.08 693.119 L1115.64 693.119 L1116.2 693.119 L1116.76 693.119 L1117.31 693.119 L1117.87 693.119 L1118.43 693.119 L1118.99 693.119 L1119.55 693.119 L1120.11 693.119 L1120.67 693.119 L1121.23 693.119 L1121.79 693.119 L1122.35 693.119 L1122.91 693.119 L1123.47 693.119 L1124.03 693.119 L1124.59 693.119 L1125.14 693.119 L1125.7 693.119 L1126.26 693.119 L1126.82 693.119 L1127.38 693.119 L1127.94 693.119 L1128.5 693.119 L1129.06 693.119 L1129.62 693.119 L1130.18 693.119 L1130.74 693.119 L1131.3 693.119 L1131.86 693.119 L1132.41 693.119 L1132.97 693.119 L1133.53 693.119 L1134.09 693.119 L1134.65 693.119 L1135.21 693.119 L1135.77 693.119 L1136.33 693.119 L1136.89 693.119 L1137.45 693.119 L1138.01 693.119 L1138.57 693.119 L1139.13 693.119 L1139.68 693.119 L1140.24 693.119 L1140.8 693.119 L1141.36 693.119 L1141.92 693.119 L1142.48 693.119 L1143.04 693.119 L1143.6 693.119 L1144.16 693.119 L1144.72 693.119 L1145.28 693.119 L1145.84 693.119 L1146.4 693.119 L1146.96 693.119 L1147.51 693.119 L1148.07 693.119 L1148.63 693.119 L1149.19 693.119 L1149.75 693.119 L1150.31 693.119 L1150.87 693.119 L1151.43 693.119 L1151.99 693.119 L1152.55 693.119 L1153.11 693.119 L1153.67 693.119 L1154.23 693.119 L1154.78 693.119 L1155.34 693.119 L1155.9 693.119 L1156.46 693.119 L1157.02 693.119 L1157.58 693.119 L1158.14 693.119 L1158.7 693.119 L1159.26 693.119 L1159.82 693.119 L1160.38 693.119 L1160.94 693.119 L1161.5 693.119 L1162.05 693.119 L1162.61 693.119 L1163.17 693.119 L1163.73 693.119 L1164.29 693.119 L1164.85 693.119 L1165.41 693.119 L1165.97 693.119 L1166.53 693.119 L1167.09 693.119 L1167.65 693.119 L1168.21 693.119 L1168.77 693.119 L1169.33 693.119 L1169.88 693.119 L1170.44 693.119 L1171 693.119 L1171.56 693.119 L1172.12 693.119 L1172.68 693.119 L1173.24 693.119 L1173.8 693.119 L1174.36 693.119 L1174.92 693.119 L1175.48 693.119 L1176.04 693.119 L1176.6 693.119 L1177.15 693.119 L1177.71 693.119 L1178.27 693.119 L1178.83 693.119 L1179.39 693.119 L1179.95 693.119 L1180.51 693.119 L1181.07 693.119 L1181.63 693.119 L1182.19 693.119 L1182.75 693.119 L1183.31 693.119 L1183.87 693.119 L1184.43 693.119 L1184.98 693.119 L1185.54 693.119 L1186.1 693.119 L1186.66 693.119 L1187.22 693.119 L1187.78 693.119 L1188.34 693.119 L1188.9 693.119 L1189.46 693.119 L1190.02 693.119 L1190.58 693.119 L1191.14 693.119 L1191.7 693.119 L1192.25 693.119 L1192.81 693.119 L1193.37 693.119 L1193.93 693.119 L1194.49 693.119 L1195.05 693.119 L1195.61 693.119 L1196.17 693.119 L1196.73 693.119 L1197.29 693.119 L1197.85 693.119 L1198.41 693.119 L1198.97 693.119 L1199.52 693.119 L1200.08 693.119 L1200.64 693.119 L1201.2 693.119 L1201.76 693.119 L1202.32 693.119 L1202.88 693.119 L1203.44 693.119 L1204 693.119 L1204.56 693.119 L1205.12 693.119 L1205.68 693.119 L1206.24 693.119 L1206.8 693.119 L1207.35 693.119 L1207.91 693.119 L1208.47 693.119 L1209.03 693.119 L1209.59 693.119 L1210.15 693.119 L1210.71 693.119 L1211.27 693.119 L1211.83 693.119 L1212.39 693.119 L1212.95 693.119 L1213.51 693.119 L1214.07 693.119 L1214.62 693.119 L1215.18 693.119 L1215.74 693.119 L1216.3 693.119 L1216.86 693.119 L1217.42 693.119 L1217.98 693.119 L1218.54 693.119 L1219.1 693.119 L1219.66 693.119 L1220.22 693.119 L1220.78 693.119 L1221.34 693.119 L1221.89 693.119 L1222.45 693.119 L1223.01 693.119 L1223.57 693.119 L1224.13 693.119 L1224.69 693.119 L1225.25 693.119 L1225.81 693.119 L1226.37 693.119 L1226.93 693.119 L1227.49 693.119 L1228.05 693.119 L1228.61 693.119 L1229.17 693.119 L1229.72 693.119 L1230.28 693.119 L1230.84 693.119 L1231.4 693.119 L1231.96 693.119 L1232.52 693.119 L1233.08 693.119 L1233.64 693.119 L1234.2 693.119 L1234.76 693.119 L1235.32 693.119 L1235.88 693.119 L1236.44 693.119 L1236.99 693.119 L1237.55 693.119 L1238.11 693.119 L1238.67 693.119 L1239.23 693.119 L1239.79 693.119 L1240.35 693.119 L1240.91 693.119 L1241.47 693.119 L1242.03 693.119 L1242.59 693.119 L1243.15 693.119 L1243.71 693.119 L1244.26 693.119 L1244.82 693.119 L1245.38 693.119 L1245.94 693.119 L1246.5 693.119 L1247.06 693.119 L1247.62 693.119 L1248.18 693.119 L1248.74 693.119 L1249.3 693.119 L1249.86 693.119 L1250.42 693.119 L1250.98 693.119 L1251.54 693.119 L1252.09 693.119 L1252.65 693.119 L1253.21 693.119 L1253.77 693.119 L1254.33 693.119 L1254.89 693.119 L1255.45 693.119 L1256.01 693.119 L1256.57 693.119 L1257.13 693.119 L1257.69 693.119 L1258.25 693.119 L1258.81 693.119 L1259.36 693.119 L1259.92 693.119 L1260.48 693.119 L1261.04 693.119 L1261.6 693.119 L1262.16 693.119 L1262.72 693.119 L1263.28 693.119 L1263.84 693.119 L1264.4 693.119 L1264.96 693.119 L1265.52 693.119 L1266.08 693.119 L1266.63 693.119 L1267.19 693.119 L1267.75 693.119 L1268.31 693.119 L1268.87 693.119 L1269.43 693.119 L1269.99 693.119 L1270.55 693.119 L1271.11 693.119 L1271.67 693.119 L1272.23 693.119 L1272.79 693.119 L1273.35 693.119 L1273.91 693.119 L1274.46 693.119 L1275.02 693.119 L1275.58 693.119 L1276.14 693.119 L1276.7 693.119 L1277.26 693.119 L1277.82 693.119 L1278.38 693.119 L1278.94 693.119 L1279.5 693.119 L1280.06 693.119 L1280.62 693.119 L1281.18 693.119 L1281.73 693.119 L1282.29 693.119 L1282.85 693.119 L1283.41 693.119 L1283.97 693.119 L1284.53 693.119 L1285.09 693.119 L1285.65 693.119 L1286.21 693.119 L1286.77 693.119 L1287.33 693.119 L1287.89 693.119 L1288.45 693.119 L1289 693.119 L1289.56 693.119 L1290.12 693.119 L1290.68 693.119 L1291.24 693.119 L1291.8 693.119 L1292.36 693.119 L1292.92 693.119 L1293.48 693.119 L1294.04 693.119 L1294.6 693.119 L1295.16 693.119 L1295.72 693.119 L1296.28 693.119 L1296.83 693.119 L1297.39 693.119 L1297.95 693.119 L1298.51 693.119 L1299.07 693.119 L1299.63 693.119 L1300.19 693.119 L1300.75 693.119 L1301.31 693.119 L1301.87 693.119 L1302.43 693.119 L1302.99 693.119 L1303.55 693.119 L1304.1 693.119 L1304.66 693.119 L1305.22 693.119 L1305.78 693.119 L1306.34 693.119 L1306.9 693.119 L1307.46 693.119 L1308.02 693.119 L1308.58 693.119 L1309.14 693.119 L1309.7 693.119 L1310.26 693.119 L1310.82 693.119 L1311.38 693.119 L1311.93 693.119 L1312.49 693.119 L1313.05 693.119 L1313.61 693.119 L1314.17 693.119 L1314.73 693.119 L1315.29 693.119 L1315.85 693.119 L1316.41 693.119 L1316.97 693.119 L1317.53 693.119 L1318.09 693.119 L1318.65 693.119 L1319.2 693.119 L1319.76 693.119 L1320.32 693.119 L1320.88 693.119 L1321.44 693.119 L1322 693.119 L1322.56 693.119 L1323.12 693.119 L1323.68 693.119 L1324.24 693.119 L1324.8 693.119 L1325.36 693.119 L1325.92 693.119 L1326.47 693.119 L1327.03 693.119 L1327.59 693.119 L1328.15 693.119 L1328.71 693.119 L1329.27 693.119 L1329.83 693.119 L1330.39 693.119 L1330.95 693.119 L1331.51 693.119 L1332.07 693.119 L1332.63 693.119 L1333.19 693.119 L1333.75 693.119 L1334.3 693.119 L1334.86 693.119 L1335.42 693.119 L1335.98 693.119 L1336.54 693.119 L1337.1 693.119 L1337.66 693.119 L1338.22 693.119 L1338.78 693.119 L1339.34 693.119 L1339.9 693.119 L1340.46 693.119 L1341.02 693.119 L1341.57 693.119 L1342.13 693.119 L1342.69 693.119 L1343.25 693.119 L1343.81 693.119 L1344.37 693.119 L1344.93 693.119 L1345.49 693.119 L1346.05 693.119 L1346.61 693.119 L1347.17 693.119 L1347.73 693.119 L1348.29 693.119 L1348.84 693.119 L1349.4 693.119 L1349.96 693.119 L1350.52 693.119 L1351.08 693.119 L1351.64 693.119 L1352.2 693.119 L1352.76 693.119 L1353.32 693.119 L1353.88 693.119 L1354.44 693.119 L1355 693.119 L1355.56 693.119 L1356.12 693.119 L1356.67 693.119 L1357.23 693.119 L1357.79 693.119 L1358.35 693.119 L1358.91 693.119 L1359.47 693.119 L1360.03 693.119 L1360.59 693.119 L1361.15 693.119 L1361.71 693.119 L1362.27 693.119 L1362.83 693.119 L1363.39 693.119 L1363.94 693.119 L1364.5 693.119 L1365.06 693.119 L1365.62 693.119 L1366.18 693.119 L1366.74 693.119 L1367.3 693.119 L1367.86 693.119 L1368.42 693.119 L1368.98 693.119 L1369.54 693.119 L1370.1 693.119 L1370.66 693.119 L1371.21 693.119 L1371.77 693.119 L1372.33 693.119 L1372.89 693.119 L1373.45 693.119 L1374.01 693.119 L1374.57 693.119 L1375.13 693.119 L1375.69 693.119 L1376.25 693.119 L1376.81 693.119 L1377.37 693.119 L1377.93 693.119 L1378.49 693.119 L1379.04 693.119 L1379.6 693.119 L1380.16 693.119 L1380.72 693.119 L1381.28 693.119 L1381.84 693.119 L1382.4 693.119 L1382.96 693.119 L1383.52 693.119 L1384.08 693.119 L1384.64 693.119 L1385.2 693.119 L1385.76 693.119 L1386.31 693.119 L1386.87 693.119 L1387.43 693.119 L1387.99 693.119 L1388.55 693.119 L1389.11 693.119 L1389.67 693.119 L1390.23 693.119 L1390.79 693.119 L1391.35 693.119 L1391.91 693.119 L1392.47 693.119 L1393.03 693.119 L1393.58 693.119 L1394.14 693.119 L1394.7 693.119 L1395.26 693.119 L1395.82 693.119 L1396.38 693.119 L1396.94 693.119 L1397.5 693.119 L1398.06 693.119 L1398.62 693.119 L1399.18 693.119 L1399.74 693.119 L1400.3 693.119 L1400.86 693.119 L1401.41 693.119 L1401.97 693.119 L1402.53 693.119 L1403.09 693.119 L1403.65 693.119 L1404.21 693.119 L1404.77 693.119 L1405.33 693.119 L1405.89 693.119 L1406.45 693.119 L1407.01 693.119 L1407.57 693.119 L1408.13 693.119 L1408.68 693.119 L1409.24 693.119 L1409.8 693.119 L1410.36 693.119 L1410.92 693.119 L1411.48 693.119 L1412.04 693.119 L1412.6 693.119 L1413.16 693.119 L1413.72 693.119 L1414.28 693.119 L1414.84 693.119 L1415.4 693.119 L1415.95 693.119 L1416.51 693.119 L1417.07 693.119 L1417.63 693.119 L1418.19 693.119 L1418.75 693.119 L1419.31 693.119 L1419.87 693.119 L1420.43 693.119 L1420.99 693.119 L1421.55 693.119 L1422.11 693.119 L1422.67 693.119 L1423.23 693.119 L1423.78 693.119 L1424.34 693.119 L1424.9 693.119 L1425.46 693.119 L1426.02 693.119 L1426.58 693.119 L1427.14 693.119 L1427.7 693.119 L1428.26 693.119 L1428.82 693.119 L1429.38 693.119 L1429.94 693.119 L1430.5 693.119 L1431.05 693.119 L1431.61 693.119 L1432.17 693.119 L1432.73 693.119 L1433.29 693.119 L1433.85 693.119 L1434.41 693.119 L1434.97 693.119 L1435.53 693.119 L1436.09 693.119 L1436.65 693.119 L1437.21 693.119 L1437.77 693.119 L1438.33 693.119 L1438.88 693.119 L1439.44 693.119 L1440 693.119 L1440.56 693.119 L1441.12 693.119 L1441.68 693.119 L1442.24 693.119 L1442.8 693.119 L1443.36 693.119 L1443.92 693.119 L1444.48 693.119 L1445.04 693.119 L1445.6 693.119 L1446.15 693.119 L1446.71 693.119 L1447.27 693.119 L1447.83 693.119 L1448.39 693.119 L1448.95 693.119 L1449.51 693.119 L1450.07 693.119 L1450.63 693.119 L1451.19 693.119 L1451.75 693.119 L1452.31 693.119 L1452.87 693.119 L1453.42 693.119 L1453.98 693.119 L1454.54 693.119 L1455.1 693.119 L1455.66 693.119 L1456.22 693.119 L1456.78 693.119 L1457.34 693.119 L1457.9 693.119 L1458.46 693.119 L1459.02 693.119 L1459.58 693.119 L1460.14 693.119 L1460.7 693.119 L1461.25 693.119 L1461.81 693.119 L1462.37 693.119 L1462.93 693.119 L1463.49 693.119 L1464.05 693.119 L1464.61 693.119 L1465.17 693.119 L1465.73 693.119 L1466.29 693.119 L1466.85 693.119 L1467.41 693.119 L1467.97 693.119 L1468.52 693.119 L1469.08 693.119 L1469.64 693.119 L1470.2 693.119 L1470.76 693.119 L1471.32 693.119 L1471.88 693.119 L1472.44 693.119 L1473 693.119 L1473.56 693.119 L1474.12 693.119 L1474.68 693.119 L1475.24 693.119 L1475.79 693.119 L1476.35 693.119 L1476.91 693.119 L1477.47 693.119 L1478.03 693.119 L1478.59 693.119 L1479.15 693.119 L1479.71 693.119 L1480.27 693.119 L1480.83 693.119 L1481.39 693.119 L1481.95 693.119 L1482.51 693.119 L1483.07 693.119 L1483.62 693.119 L1484.18 693.119 L1484.74 693.119 L1485.3 693.119 L1485.86 693.119 L1486.42 693.119 L1486.98 693.119 L1487.54 693.119 L1488.1 693.119 L1488.66 693.119 L1489.22 693.119 L1489.78 693.119 L1490.34 693.119 L1490.89 693.119 L1491.45 693.119 L1492.01 693.119 L1492.57 693.119 L1493.13 693.119 L1493.69 693.119 L1494.25 693.119 L1494.81 693.119 L1495.37 693.119 L1495.93 693.119 L1496.49 693.119 L1497.05 693.119 L1497.61 693.119 L1498.16 693.119 L1498.72 693.119 L1499.28 693.119 L1499.84 693.119 L1500.4 693.119 L1500.96 693.119 L1501.52 693.119 L1502.08 693.119 L1502.64 693.119 L1503.2 693.119 L1503.76 693.119 L1504.32 693.119 L1504.88 693.119 L1505.44 693.119 L1505.99 693.119 L1506.55 693.119 L1507.11 693.119 L1507.67 693.119 L1508.23 693.119 L1508.79 693.119 L1509.35 693.119 L1509.91 693.119 L1510.47 693.119 L1511.03 693.119 L1511.59 693.119 L1512.15 693.119 L1512.71 693.119 L1513.26 693.119 L1513.82 693.119 L1514.38 693.119 L1514.94 693.119 L1515.5 693.119 L1516.06 693.119 L1516.62 693.119 L1517.18 693.119 L1517.74 693.119 L1518.3 693.119 L1518.86 693.119 L1519.42 693.119 L1519.98 693.119 L1520.53 693.119 L1521.09 693.119 L1521.65 693.119 L1522.21 693.119 L1522.77 693.119 L1523.33 693.119 L1523.89 693.119 L1524.45 693.119 L1525.01 693.119 L1525.57 693.119 L1526.13 693.119 L1526.69 693.119 L1527.25 693.119 L1527.81 693.119 L1528.36 693.119 L1528.92 693.119 L1529.48 693.119 L1530.04 693.119 L1530.6 693.119 L1531.16 693.119 L1531.72 693.119 L1532.28 693.119 L1532.84 693.119 L1533.4 693.119 L1533.96 693.119 L1534.52 693.119 L1535.08 693.119 L1535.63 693.119 L1536.19 693.119 L1536.75 693.119 L1537.31 693.119 L1537.87 693.119 L1538.43 693.119 L1538.99 693.119 L1539.55 693.119 L1540.11 693.119 L1540.67 693.119 L1541.23 693.119 L1541.79 693.119 L1542.35 693.119 L1542.9 693.119 L1543.46 693.119 L1544.02 693.119 L1544.58 693.119 L1545.14 693.119 L1545.7 693.119 L1546.26 693.119 L1546.82 693.119 L1547.38 693.119 L1547.94 693.119 L1548.5 693.119 L1549.06 693.119 L1549.62 693.119 L1550.18 693.119 L1550.73 693.119 L1551.29 693.119 L1551.85 693.119 L1552.41 693.119 L1552.97 693.119 L1553.53 693.119 L1554.09 693.119 L1554.65 693.119 L1555.21 693.119 L1555.77 693.119 L1556.33 693.119 L1556.89 693.119 L1557.45 693.119 L1558 693.119 L1558.56 693.119 L1559.12 693.119 L1559.68 693.119 L1560.24 693.119 L1560.8 693.119 L1561.36 693.119 L1561.92 693.119 L1562.48 693.119 L1563.04 693.119 L1563.6 693.119 L1564.16 693.119 L1564.72 693.119 L1565.28 693.119 L1565.83 693.119 L1566.39 693.119 L1566.95 693.119 L1567.51 693.119 L1568.07 693.119 L1568.63 693.119 L1569.19 693.119 L1569.75 693.119 L1570.31 693.119 L1570.87 693.119 L1571.43 693.119 L1571.99 693.119 L1572.55 693.119 L1573.1 693.119 L1573.66 693.119 L1574.22 693.119 L1574.78 693.119 L1575.34 693.119 L1575.9 693.119 L1576.46 693.119 L1577.02 693.119 L1577.58 693.119 L1578.14 693.119 L1578.7 693.119 L1579.26 693.119 L1579.82 693.119 L1580.37 693.119 L1580.93 693.119 L1581.49 693.119 L1582.05 693.119 L1582.61 693.119 L1583.17 693.119 L1583.73 693.119 L1584.29 693.119 L1584.85 693.119 L1585.41 693.119 L1585.97 693.119 L1586.53 693.119 L1587.09 693.119 L1587.65 693.119 L1588.2 693.119 L1588.76 693.119 L1589.32 693.119 L1589.88 693.119 L1590.44 693.119 L1591 693.119 L1591.56 693.119 L1592.12 693.119 L1592.68 693.119 L1593.24 693.119 L1593.8 693.119 L1594.36 693.119 L1594.92 693.119 L1595.47 693.119 L1596.03 693.119 L1596.59 693.119 L1597.15 693.119 L1597.71 693.119 L1598.27 693.119 L1598.83 693.119 L1599.39 693.119 L1599.95 693.119 L1600.51 693.119 L1601.07 693.119 L1601.63 693.119 L1602.19 693.119 L1602.74 693.119 L1603.3 693.119 L1603.86 693.119 L1604.42 693.119 L1604.98 693.119 L1605.54 693.119 L1606.1 693.119 L1606.66 693.119 L1607.22 693.119 L1607.78 693.119 L1608.34 693.119 L1608.9 693.119 L1609.46 693.119 L1610.02 693.119 L1610.57 693.119 L1611.13 693.119 L1611.69 693.119 L1612.25 693.119 L1612.81 693.119 L1613.37 693.119 L1613.93 693.119 L1614.49 693.119 L1615.05 693.119 L1615.61 693.119 L1616.17 693.119 L1616.73 693.119 L1617.29 693.119 L1617.84 693.119 L1618.4 693.119 L1618.96 693.119 L1619.52 693.119 L1620.08 693.119 L1620.64 693.119 L1621.2 693.119 L1621.76 693.119 L1622.32 693.119 L1622.88 693.119 L1623.44 693.119 L1624 693.119 L1624.56 693.119 L1625.11 693.119 L1625.67 693.119 L1626.23 693.119 L1626.79 693.119 L1627.35 693.119 L1627.91 693.119 L1628.47 693.119 L1629.03 693.119 L1629.59 693.119 L1630.15 693.119 L1630.71 693.119 L1631.27 693.119 L1631.83 693.119 L1632.39 693.119 L1632.94 693.119 L1633.5 693.119 L1634.06 693.119 L1634.62 693.119 L1635.18 693.119 L1635.74 693.119 L1636.3 693.119 L1636.86 693.119 L1637.42 693.119 L1637.98 693.119 L1638.54 693.119 L1639.1 693.119 L1639.66 693.119 L1640.21 693.119 L1640.77 693.119 L1641.33 693.119 L1641.89 693.119 L1642.45 693.119 L1643.01 693.119 L1643.57 693.119 L1644.13 693.119 L1644.69 693.119 L1645.25 693.119 L1645.81 693.119 L1646.37 693.119 L1646.93 693.119 L1647.48 693.119 L1648.04 693.119 L1648.6 693.119 L1649.16 693.119 L1649.72 693.119 L1650.28 693.119 L1650.84 693.119 L1651.4 693.119 L1651.96 693.119 L1652.52 693.119 L1653.08 693.119 L1653.64 693.119 L1654.2 693.119 L1654.76 693.119 L1655.31 693.119 L1655.87 693.119 L1656.43 693.119 L1656.99 693.119 L1657.55 693.119 L1658.11 693.119 L1658.67 693.119 L1659.23 693.119 L1659.79 693.119 L1660.35 693.119 L1660.91 693.119 L1661.47 693.119 L1662.03 693.119 L1662.58 693.119 L1663.14 693.119 L1663.7 693.119 L1664.26 693.119 L1664.82 693.119 L1665.38 693.119 L1665.94 693.119 L1666.5 693.119 L1667.06 693.119 L1667.62 693.119 L1668.18 693.119 L1668.74 693.119 L1669.3 693.119 L1669.85 693.119 L1670.41 693.119 L1670.97 693.119 L1671.53 693.119 L1672.09 693.119 L1672.65 693.119 L1673.21 693.119 L1673.77 693.119 L1674.33 693.119 L1674.89 693.119 L1675.45 693.119 L1676.01 693.119 L1676.57 693.119 L1677.13 693.119 L1677.68 693.119 L1678.24 693.119 L1678.8 693.119 L1679.36 693.119 L1679.92 693.119 L1680.48 693.119 L1681.04 693.119 L1681.6 693.119 L1682.16 693.119 L1682.72 693.119 L1683.28 693.119 L1683.84 693.119 L1684.4 693.119 L1684.95 693.119 L1685.51 693.119 L1686.07 693.119 L1686.63 693.119 L1687.19 693.119 L1687.75 693.119 L1688.31 693.119 L1688.87 693.119 L1689.43 693.119 L1689.99 693.119 L1690.55 693.119 L1691.11 693.119 L1691.67 693.119 L1692.23 693.119 L1692.78 693.119 L1693.34 693.119 L1693.9 693.119 L1694.46 693.119 L1695.02 693.119 L1695.58 693.119 L1696.14 693.119 L1696.7 693.119 L1697.26 693.119 L1697.82 693.119 L1698.38 693.119 L1698.94 693.119 L1699.5 693.119 L1700.05 693.119 L1700.61 693.119 L1701.17 693.119 L1701.73 693.119 L1702.29 693.119 L1702.85 693.119 L1703.41 693.119 L1703.97 693.119 L1704.53 693.119 L1705.09 693.119 L1705.65 693.119 L1706.21 693.119 L1706.77 693.119 L1707.32 693.119 L1707.88 693.119 L1708.44 693.119 L1709 693.119 L1709.56 693.119 L1710.12 693.119 L1710.68 693.119 L1711.24 693.119 L1711.8 693.119 L1712.36 693.119 L1712.92 693.119 L1713.48 693.119 L1714.04 693.119 L1714.6 693.119 L1715.15 693.119 L1715.71 693.119 L1716.27 693.119 L1716.83 693.119 L1717.39 693.119 L1717.95 693.119 L1718.51 693.119 L1719.07 693.119 L1719.63 693.119 L1720.19 693.119 L1720.75 693.119 L1721.31 693.119 L1721.87 693.119 L1722.42 693.119 L1722.98 693.119 L1723.54 693.119 L1724.1 693.119 L1724.66 693.119 L1725.22 693.119 L1725.78 693.119 L1726.34 693.119 L1726.9 693.119 L1727.46 693.119 L1728.02 693.119 L1728.58 693.119 L1729.14 693.119 L1729.69 693.119 L1730.25 693.119 L1730.81 693.119 L1731.37 693.119 L1731.93 693.119 L1732.49 693.119 L1733.05 693.119 L1733.61 693.119 L1734.17 693.119 L1734.73 693.119 L1735.29 693.119 L1735.85 693.119 L1736.41 693.119 L1736.97 693.119 L1737.52 693.119 L1738.08 693.119 L1738.64 693.119 L1739.2 693.119 L1739.76 693.119 L1740.32 693.119 L1740.88 693.119 L1741.44 693.119 L1742 693.119 L1742.56 693.119 L1743.12 693.119 L1743.68 693.119 L1744.24 693.119 L1744.79 693.119 L1745.35 693.119 L1745.91 693.119 L1746.47 693.119 L1747.03 693.119 L1747.59 693.119 L1748.15 693.119 L1748.71 693.119 L1749.27 693.119 L1749.83 693.119 L1750.39 693.119 L1750.95 693.119 L1751.51 693.119 L1752.06 693.119 L1752.62 693.119 L1753.18 693.119 L1753.74 693.119 L1754.3 693.119 L1754.86 693.119 L1755.42 693.119 L1755.98 693.119 L1756.54 693.119 L1757.1 693.119 L1757.66 693.119 L1758.22 693.119 L1758.78 693.119 L1759.34 693.119 L1759.89 693.119 L1760.45 693.119 L1761.01 693.119 L1761.57 693.119 L1762.13 693.119 L1762.69 693.119 L1763.25 693.119 L1763.81 693.119 L1764.37 693.119 L1764.93 693.119 L1765.49 693.119 L1766.05 693.119 L1766.61 693.119 L1767.16 693.119 L1767.72 693.119 L1768.28 693.119 L1768.84 693.119 L1769.4 693.119 L1769.96 693.119 L1770.52 693.119 L1771.08 693.119 L1771.64 693.119 L1772.2 693.119 L1772.76 693.119 L1773.32 693.119 L1773.88 693.119 L1774.43 693.119 L1774.99 693.119 L1775.55 693.119 L1776.11 693.119 L1776.67 693.119 L1777.23 693.119 L1777.79 693.119 L1778.35 693.119 L1778.91 693.119 L1779.47 693.119 L1780.03 693.119 L1780.59 693.119 L1781.15 693.119 L1781.71 693.119 L1782.26 693.119 L1782.82 693.119 L1783.38 693.119 L1783.94 693.119 L1784.5 693.119 L1785.06 693.119 L1785.62 693.119 L1786.18 693.119 L1786.74 693.119 L1787.3 693.119 L1787.86 693.119 L1788.42 693.119 L1788.98 693.119 L1789.53 693.119 L1790.09 693.119 L1790.65 693.119 L1791.21 693.119 L1791.77 693.119 L1792.33 693.119 L1792.89 693.119 L1793.45 693.119 L1794.01 693.119 L1794.57 693.119 L1795.13 693.119 L1795.69 693.119 L1796.25 693.119 L1796.8 693.119 L1797.36 693.119 L1797.92 693.119 L1798.48 693.119 L1799.04 693.119 L1799.6 693.119 L1800.16 693.119 L1800.72 693.119 L1801.28 693.119 L1801.84 693.119 L1802.4 693.119 L1802.96 693.119 L1803.52 693.119 L1804.08 693.119 L1804.63 693.119 L1805.19 693.119 L1805.75 693.119 L1806.31 693.119 L1806.87 693.119 L1807.43 693.119 L1807.99 693.119 L1808.55 693.119 L1809.11 693.119 L1809.67 693.119 L1810.23 693.119 L1810.79 693.119 L1811.35 693.119 L1811.9 693.119 L1812.46 693.119 L1813.02 693.119 L1813.58 693.119 L1814.14 693.119 L1814.7 693.119 L1815.26 693.119 L1815.82 693.119 L1816.38 693.119 L1816.94 693.119 L1817.5 693.119 L1818.06 693.119 L1818.62 693.119 L1819.18 693.119 L1819.73 693.119 L1820.29 693.119 L1820.85 693.119 L1821.41 693.119 L1821.97 693.119 L1822.53 693.119 L1823.09 693.119 L1823.65 693.119 L1824.21 693.119 L1824.77 693.119 L1825.33 693.119 L1825.89 693.119 L1826.45 693.119 L1827 693.119 L1827.56 693.119 L1828.12 693.119 L1828.68 693.119 L1829.24 693.119 L1829.8 693.119 L1830.36 693.119 L1830.92 693.119 L1831.48 693.119 L1832.04 693.119 L1832.6 693.119 L1833.16 693.119 L1833.72 693.119 L1834.27 693.119 L1834.83 693.119 L1835.39 693.119 L1835.95 693.119 L1836.51 693.119 L1837.07 693.119 L1837.63 693.119 L1838.19 693.119 L1838.19 683.184 L1837.63 683.184 L1837.07 683.184 L1836.51 683.184 L1835.95 683.184 L1835.39 683.184 L1834.83 683.184 L1834.27 683.184 L1833.72 683.184 L1833.16 683.184 L1832.6 683.184 L1832.04 683.184 L1831.48 683.184 L1830.92 683.184 L1830.36 683.184 L1829.8 683.184 L1829.24 683.184 L1828.68 683.184 L1828.12 683.184 L1827.56 683.184 L1827 683.184 L1826.45 683.184 L1825.89 683.184 L1825.33 683.184 L1824.77 683.184 L1824.21 683.184 L1823.65 683.184 L1823.09 683.184 L1822.53 683.184 L1821.97 683.184 L1821.41 683.184 L1820.85 683.184 L1820.29 683.184 L1819.73 683.184 L1819.18 683.184 L1818.62 683.184 L1818.06 683.184 L1817.5 683.184 L1816.94 683.184 L1816.38 683.184 L1815.82 683.184 L1815.26 683.184 L1814.7 683.184 L1814.14 683.184 L1813.58 683.184 L1813.02 683.184 L1812.46 683.184 L1811.9 683.184 L1811.35 683.184 L1810.79 683.184 L1810.23 683.184 L1809.67 683.184 L1809.11 683.184 L1808.55 683.184 L1807.99 683.184 L1807.43 683.184 L1806.87 683.184 L1806.31 683.184 L1805.75 683.184 L1805.19 683.184 L1804.63 683.184 L1804.08 683.184 L1803.52 683.184 L1802.96 683.184 L1802.4 683.184 L1801.84 683.184 L1801.28 683.184 L1800.72 683.184 L1800.16 683.184 L1799.6 683.184 L1799.04 683.184 L1798.48 683.184 L1797.92 683.184 L1797.36 683.184 L1796.8 683.184 L1796.25 683.184 L1795.69 683.184 L1795.13 683.184 L1794.57 683.184 L1794.01 683.184 L1793.45 683.184 L1792.89 683.184 L1792.33 683.184 L1791.77 683.184 L1791.21 683.184 L1790.65 683.184 L1790.09 683.184 L1789.53 683.184 L1788.98 683.184 L1788.42 683.184 L1787.86 683.184 L1787.3 683.184 L1786.74 683.184 L1786.18 683.184 L1785.62 683.184 L1785.06 683.184 L1784.5 683.184 L1783.94 683.184 L1783.38 683.184 L1782.82 683.184 L1782.26 683.184 L1781.71 683.184 L1781.15 683.184 L1780.59 683.184 L1780.03 683.184 L1779.47 683.184 L1778.91 683.184 L1778.35 683.184 L1777.79 683.184 L1777.23 683.184 L1776.67 683.184 L1776.11 683.184 L1775.55 683.184 L1774.99 683.184 L1774.43 683.184 L1773.88 683.184 L1773.32 683.184 L1772.76 683.184 L1772.2 683.184 L1771.64 683.184 L1771.08 683.184 L1770.52 683.184 L1769.96 683.184 L1769.4 683.184 L1768.84 683.184 L1768.28 683.184 L1767.72 683.184 L1767.16 683.184 L1766.61 683.184 L1766.05 683.184 L1765.49 683.184 L1764.93 683.184 L1764.37 683.184 L1763.81 683.184 L1763.25 683.184 L1762.69 683.184 L1762.13 683.184 L1761.57 683.184 L1761.01 683.184 L1760.45 683.184 L1759.89 683.184 L1759.34 683.184 L1758.78 683.184 L1758.22 683.184 L1757.66 683.184 L1757.1 683.184 L1756.54 683.184 L1755.98 683.184 L1755.42 683.184 L1754.86 683.184 L1754.3 683.184 L1753.74 683.184 L1753.18 683.184 L1752.62 683.184 L1752.06 683.184 L1751.51 683.184 L1750.95 683.184 L1750.39 683.184 L1749.83 683.184 L1749.27 683.184 L1748.71 683.184 L1748.15 683.184 L1747.59 683.184 L1747.03 683.184 L1746.47 683.184 L1745.91 683.184 L1745.35 683.184 L1744.79 683.184 L1744.24 683.184 L1743.68 683.184 L1743.12 683.184 L1742.56 683.184 L1742 683.184 L1741.44 683.184 L1740.88 683.184 L1740.32 683.184 L1739.76 683.184 L1739.2 683.184 L1738.64 683.184 L1738.08 683.184 L1737.52 683.184 L1736.97 683.184 L1736.41 683.184 L1735.85 683.184 L1735.29 683.184 L1734.73 683.184 L1734.17 683.184 L1733.61 683.184 L1733.05 683.184 L1732.49 683.184 L1731.93 683.184 L1731.37 683.184 L1730.81 683.184 L1730.25 683.184 L1729.69 683.184 L1729.14 683.184 L1728.58 683.184 L1728.02 683.184 L1727.46 683.184 L1726.9 683.184 L1726.34 683.184 L1725.78 683.184 L1725.22 683.184 L1724.66 683.184 L1724.1 683.184 L1723.54 683.184 L1722.98 683.184 L1722.42 683.184 L1721.87 683.184 L1721.31 683.184 L1720.75 683.184 L1720.19 683.184 L1719.63 683.184 L1719.07 683.184 L1718.51 683.184 L1717.95 683.184 L1717.39 683.184 L1716.83 683.184 L1716.27 683.184 L1715.71 683.184 L1715.15 683.184 L1714.6 683.184 L1714.04 683.184 L1713.48 683.184 L1712.92 683.184 L1712.36 683.184 L1711.8 683.184 L1711.24 683.184 L1710.68 683.184 L1710.12 683.184 L1709.56 683.184 L1709 683.184 L1708.44 683.184 L1707.88 683.184 L1707.32 683.184 L1706.77 683.184 L1706.21 683.184 L1705.65 683.184 L1705.09 683.184 L1704.53 683.184 L1703.97 683.184 L1703.41 683.184 L1702.85 683.184 L1702.29 683.184 L1701.73 683.184 L1701.17 683.184 L1700.61 683.184 L1700.05 683.184 L1699.5 683.184 L1698.94 683.184 L1698.38 683.184 L1697.82 683.184 L1697.26 683.184 L1696.7 683.184 L1696.14 683.184 L1695.58 683.184 L1695.02 683.184 L1694.46 683.184 L1693.9 683.184 L1693.34 683.184 L1692.78 683.184 L1692.23 683.184 L1691.67 683.184 L1691.11 683.184 L1690.55 683.184 L1689.99 683.184 L1689.43 683.184 L1688.87 683.184 L1688.31 683.184 L1687.75 683.184 L1687.19 683.184 L1686.63 683.184 L1686.07 683.184 L1685.51 683.184 L1684.95 683.184 L1684.4 683.184 L1683.84 683.184 L1683.28 683.184 L1682.72 683.184 L1682.16 683.184 L1681.6 683.184 L1681.04 683.184 L1680.48 683.184 L1679.92 683.184 L1679.36 683.184 L1678.8 683.184 L1678.24 683.184 L1677.68 683.184 L1677.13 683.184 L1676.57 683.184 L1676.01 683.184 L1675.45 683.184 L1674.89 683.184 L1674.33 683.184 L1673.77 683.184 L1673.21 683.184 L1672.65 683.184 L1672.09 683.184 L1671.53 683.184 L1670.97 683.184 L1670.41 683.184 L1669.85 683.184 L1669.3 683.184 L1668.74 683.184 L1668.18 683.184 L1667.62 683.184 L1667.06 683.184 L1666.5 683.184 L1665.94 683.184 L1665.38 683.184 L1664.82 683.184 L1664.26 683.184 L1663.7 683.184 L1663.14 683.184 L1662.58 683.184 L1662.03 683.184 L1661.47 683.184 L1660.91 683.184 L1660.35 683.184 L1659.79 683.184 L1659.23 683.184 L1658.67 683.184 L1658.11 683.184 L1657.55 683.184 L1656.99 683.184 L1656.43 683.184 L1655.87 683.184 L1655.31 683.184 L1654.76 683.184 L1654.2 683.184 L1653.64 683.184 L1653.08 683.184 L1652.52 683.184 L1651.96 683.184 L1651.4 683.184 L1650.84 683.184 L1650.28 683.184 L1649.72 683.184 L1649.16 683.184 L1648.6 683.184 L1648.04 683.184 L1647.48 683.184 L1646.93 683.184 L1646.37 683.184 L1645.81 683.184 L1645.25 683.184 L1644.69 683.184 L1644.13 683.184 L1643.57 683.184 L1643.01 683.184 L1642.45 683.184 L1641.89 683.184 L1641.33 683.184 L1640.77 683.184 L1640.21 683.184 L1639.66 683.184 L1639.1 683.184 L1638.54 683.184 L1637.98 683.184 L1637.42 683.184 L1636.86 683.184 L1636.3 683.184 L1635.74 683.184 L1635.18 683.184 L1634.62 683.184 L1634.06 683.184 L1633.5 683.184 L1632.94 683.184 L1632.39 683.184 L1631.83 683.184 L1631.27 683.184 L1630.71 683.184 L1630.15 683.184 L1629.59 683.184 L1629.03 683.184 L1628.47 683.184 L1627.91 683.184 L1627.35 683.184 L1626.79 683.184 L1626.23 683.184 L1625.67 683.184 L1625.11 683.184 L1624.56 683.184 L1624 683.184 L1623.44 683.184 L1622.88 683.184 L1622.32 683.184 L1621.76 683.184 L1621.2 683.184 L1620.64 683.184 L1620.08 683.184 L1619.52 683.184 L1618.96 683.184 L1618.4 683.184 L1617.84 683.184 L1617.29 683.184 L1616.73 683.184 L1616.17 683.184 L1615.61 683.184 L1615.05 683.184 L1614.49 683.184 L1613.93 683.184 L1613.37 683.184 L1612.81 683.184 L1612.25 683.184 L1611.69 683.184 L1611.13 683.184 L1610.57 683.184 L1610.02 683.184 L1609.46 683.184 L1608.9 683.184 L1608.34 683.184 L1607.78 683.184 L1607.22 683.184 L1606.66 683.184 L1606.1 683.184 L1605.54 683.184 L1604.98 683.184 L1604.42 683.184 L1603.86 683.184 L1603.3 683.184 L1602.74 683.184 L1602.19 683.184 L1601.63 683.184 L1601.07 683.184 L1600.51 683.184 L1599.95 683.184 L1599.39 683.184 L1598.83 683.184 L1598.27 683.184 L1597.71 683.184 L1597.15 683.184 L1596.59 683.184 L1596.03 683.184 L1595.47 683.184 L1594.92 683.184 L1594.36 683.184 L1593.8 683.184 L1593.24 683.184 L1592.68 683.184 L1592.12 683.184 L1591.56 683.184 L1591 683.184 L1590.44 683.184 L1589.88 683.184 L1589.32 683.184 L1588.76 683.184 L1588.2 683.184 L1587.65 683.184 L1587.09 683.184 L1586.53 683.184 L1585.97 683.184 L1585.41 683.184 L1584.85 683.184 L1584.29 683.184 L1583.73 683.184 L1583.17 683.184 L1582.61 683.184 L1582.05 683.184 L1581.49 683.184 L1580.93 683.184 L1580.37 683.184 L1579.82 683.184 L1579.26 683.184 L1578.7 683.184 L1578.14 683.184 L1577.58 683.184 L1577.02 683.184 L1576.46 683.184 L1575.9 683.184 L1575.34 683.184 L1574.78 683.184 L1574.22 683.184 L1573.66 683.184 L1573.1 683.184 L1572.55 683.184 L1571.99 683.184 L1571.43 683.184 L1570.87 683.184 L1570.31 683.184 L1569.75 683.184 L1569.19 683.184 L1568.63 683.184 L1568.07 683.184 L1567.51 683.184 L1566.95 683.184 L1566.39 683.184 L1565.83 683.184 L1565.28 683.184 L1564.72 683.184 L1564.16 683.184 L1563.6 683.184 L1563.04 683.184 L1562.48 683.184 L1561.92 683.184 L1561.36 683.184 L1560.8 683.184 L1560.24 683.184 L1559.68 683.184 L1559.12 683.184 L1558.56 683.184 L1558 683.184 L1557.45 683.184 L1556.89 683.184 L1556.33 683.184 L1555.77 683.184 L1555.21 683.184 L1554.65 683.184 L1554.09 683.184 L1553.53 683.184 L1552.97 683.184 L1552.41 683.184 L1551.85 683.184 L1551.29 683.184 L1550.73 683.184 L1550.18 683.184 L1549.62 683.184 L1549.06 683.184 L1548.5 683.184 L1547.94 683.184 L1547.38 683.184 L1546.82 683.184 L1546.26 683.184 L1545.7 683.184 L1545.14 683.184 L1544.58 683.184 L1544.02 683.184 L1543.46 683.184 L1542.9 683.184 L1542.35 683.184 L1541.79 683.184 L1541.23 683.184 L1540.67 683.184 L1540.11 683.184 L1539.55 683.184 L1538.99 683.184 L1538.43 683.184 L1537.87 683.184 L1537.31 683.184 L1536.75 683.184 L1536.19 683.184 L1535.63 683.184 L1535.08 683.184 L1534.52 683.184 L1533.96 683.184 L1533.4 683.184 L1532.84 683.184 L1532.28 683.184 L1531.72 683.184 L1531.16 683.184 L1530.6 683.184 L1530.04 683.184 L1529.48 683.184 L1528.92 683.184 L1528.36 683.184 L1527.81 683.184 L1527.25 683.184 L1526.69 683.184 L1526.13 683.184 L1525.57 683.184 L1525.01 683.184 L1524.45 683.184 L1523.89 683.184 L1523.33 683.184 L1522.77 683.184 L1522.21 683.184 L1521.65 683.184 L1521.09 683.184 L1520.53 683.184 L1519.98 683.184 L1519.42 683.184 L1518.86 683.184 L1518.3 683.184 L1517.74 683.184 L1517.18 683.184 L1516.62 683.184 L1516.06 683.184 L1515.5 683.184 L1514.94 683.184 L1514.38 683.184 L1513.82 683.184 L1513.26 683.184 L1512.71 683.184 L1512.15 683.184 L1511.59 683.184 L1511.03 683.184 L1510.47 683.184 L1509.91 683.184 L1509.35 683.184 L1508.79 683.184 L1508.23 683.184 L1507.67 683.184 L1507.11 683.184 L1506.55 683.184 L1505.99 683.184 L1505.44 683.184 L1504.88 683.184 L1504.32 683.184 L1503.76 683.184 L1503.2 683.184 L1502.64 683.184 L1502.08 683.184 L1501.52 683.184 L1500.96 683.184 L1500.4 683.184 L1499.84 683.184 L1499.28 683.184 L1498.72 683.184 L1498.16 683.184 L1497.61 683.184 L1497.05 683.184 L1496.49 683.184 L1495.93 683.184 L1495.37 683.184 L1494.81 683.184 L1494.25 683.184 L1493.69 683.184 L1493.13 683.184 L1492.57 683.184 L1492.01 683.184 L1491.45 683.184 L1490.89 683.184 L1490.34 683.184 L1489.78 683.184 L1489.22 683.184 L1488.66 683.184 L1488.1 683.184 L1487.54 683.184 L1486.98 683.184 L1486.42 683.184 L1485.86 683.184 L1485.3 683.184 L1484.74 683.184 L1484.18 683.184 L1483.62 683.184 L1483.07 683.184 L1482.51 683.184 L1481.95 683.184 L1481.39 683.184 L1480.83 683.184 L1480.27 683.184 L1479.71 683.184 L1479.15 683.184 L1478.59 683.184 L1478.03 683.184 L1477.47 683.184 L1476.91 683.184 L1476.35 683.184 L1475.79 683.184 L1475.24 683.184 L1474.68 683.184 L1474.12 683.184 L1473.56 683.184 L1473 683.184 L1472.44 683.184 L1471.88 683.184 L1471.32 683.184 L1470.76 683.184 L1470.2 683.184 L1469.64 683.184 L1469.08 683.184 L1468.52 683.184 L1467.97 683.184 L1467.41 683.184 L1466.85 683.184 L1466.29 683.184 L1465.73 683.184 L1465.17 683.184 L1464.61 683.184 L1464.05 683.184 L1463.49 683.184 L1462.93 683.184 L1462.37 683.184 L1461.81 683.184 L1461.25 683.184 L1460.7 683.184 L1460.14 683.184 L1459.58 683.184 L1459.02 683.184 L1458.46 683.184 L1457.9 683.184 L1457.34 683.184 L1456.78 683.184 L1456.22 683.184 L1455.66 683.184 L1455.1 683.184 L1454.54 683.184 L1453.98 683.184 L1453.42 683.184 L1452.87 683.184 L1452.31 683.184 L1451.75 683.184 L1451.19 683.184 L1450.63 683.184 L1450.07 683.184 L1449.51 683.184 L1448.95 683.184 L1448.39 683.184 L1447.83 683.184 L1447.27 683.184 L1446.71 683.184 L1446.15 683.184 L1445.6 683.184 L1445.04 683.184 L1444.48 683.184 L1443.92 683.184 L1443.36 683.184 L1442.8 683.184 L1442.24 683.184 L1441.68 683.184 L1441.12 683.184 L1440.56 683.184 L1440 683.184 L1439.44 683.184 L1438.88 683.184 L1438.33 683.184 L1437.77 683.184 L1437.21 683.184 L1436.65 683.184 L1436.09 683.184 L1435.53 683.184 L1434.97 683.184 L1434.41 683.184 L1433.85 683.184 L1433.29 683.184 L1432.73 683.184 L1432.17 683.184 L1431.61 683.184 L1431.05 683.184 L1430.5 683.184 L1429.94 683.184 L1429.38 683.184 L1428.82 683.184 L1428.26 683.184 L1427.7 683.184 L1427.14 683.184 L1426.58 683.184 L1426.02 683.184 L1425.46 683.184 L1424.9 683.184 L1424.34 683.184 L1423.78 683.184 L1423.23 683.184 L1422.67 683.184 L1422.11 683.184 L1421.55 683.184 L1420.99 683.184 L1420.43 683.184 L1419.87 683.184 L1419.31 683.184 L1418.75 683.184 L1418.19 683.184 L1417.63 683.184 L1417.07 683.184 L1416.51 683.184 L1415.95 683.184 L1415.4 683.184 L1414.84 683.184 L1414.28 683.184 L1413.72 683.184 L1413.16 683.184 L1412.6 683.184 L1412.04 683.184 L1411.48 683.184 L1410.92 683.184 L1410.36 683.184 L1409.8 683.184 L1409.24 683.184 L1408.68 683.184 L1408.13 683.184 L1407.57 683.184 L1407.01 683.184 L1406.45 683.184 L1405.89 683.184 L1405.33 683.184 L1404.77 683.184 L1404.21 683.184 L1403.65 683.184 L1403.09 683.184 L1402.53 683.184 L1401.97 683.184 L1401.41 683.184 L1400.86 683.184 L1400.3 683.184 L1399.74 683.184 L1399.18 683.184 L1398.62 683.184 L1398.06 683.184 L1397.5 683.184 L1396.94 683.184 L1396.38 683.184 L1395.82 683.184 L1395.26 683.184 L1394.7 683.184 L1394.14 683.184 L1393.58 683.184 L1393.03 683.184 L1392.47 683.184 L1391.91 683.184 L1391.35 683.184 L1390.79 683.184 L1390.23 683.184 L1389.67 683.184 L1389.11 683.184 L1388.55 683.184 L1387.99 683.184 L1387.43 683.184 L1386.87 683.184 L1386.31 683.184 L1385.76 683.184 L1385.2 683.184 L1384.64 683.184 L1384.08 683.184 L1383.52 683.184 L1382.96 683.184 L1382.4 683.184 L1381.84 683.184 L1381.28 683.184 L1380.72 683.184 L1380.16 683.184 L1379.6 683.184 L1379.04 683.184 L1378.49 683.184 L1377.93 683.184 L1377.37 683.184 L1376.81 683.184 L1376.25 683.184 L1375.69 683.184 L1375.13 683.184 L1374.57 683.184 L1374.01 683.184 L1373.45 683.184 L1372.89 683.184 L1372.33 683.184 L1371.77 683.184 L1371.21 683.184 L1370.66 683.184 L1370.1 683.184 L1369.54 683.184 L1368.98 683.184 L1368.42 683.184 L1367.86 683.184 L1367.3 683.184 L1366.74 683.184 L1366.18 683.184 L1365.62 683.184 L1365.06 683.184 L1364.5 683.184 L1363.94 683.184 L1363.39 683.184 L1362.83 683.184 L1362.27 683.184 L1361.71 683.184 L1361.15 683.184 L1360.59 683.184 L1360.03 683.184 L1359.47 683.184 L1358.91 683.184 L1358.35 683.184 L1357.79 683.184 L1357.23 683.184 L1356.67 683.184 L1356.12 683.184 L1355.56 683.184 L1355 683.184 L1354.44 683.184 L1353.88 683.184 L1353.32 683.184 L1352.76 683.184 L1352.2 683.184 L1351.64 683.184 L1351.08 683.184 L1350.52 683.184 L1349.96 683.184 L1349.4 683.184 L1348.84 683.184 L1348.29 683.184 L1347.73 683.184 L1347.17 683.184 L1346.61 683.184 L1346.05 683.184 L1345.49 683.184 L1344.93 683.184 L1344.37 683.184 L1343.81 683.184 L1343.25 683.184 L1342.69 683.184 L1342.13 683.184 L1341.57 683.184 L1341.02 683.184 L1340.46 683.184 L1339.9 683.184 L1339.34 683.184 L1338.78 683.184 L1338.22 683.184 L1337.66 683.184 L1337.1 683.184 L1336.54 683.184 L1335.98 683.184 L1335.42 683.184 L1334.86 683.184 L1334.3 683.184 L1333.75 683.184 L1333.19 683.184 L1332.63 683.184 L1332.07 683.184 L1331.51 683.184 L1330.95 683.184 L1330.39 683.184 L1329.83 683.184 L1329.27 683.184 L1328.71 683.184 L1328.15 683.184 L1327.59 683.184 L1327.03 683.184 L1326.47 683.184 L1325.92 683.184 L1325.36 683.184 L1324.8 683.184 L1324.24 683.184 L1323.68 683.184 L1323.12 683.184 L1322.56 683.184 L1322 683.184 L1321.44 683.184 L1320.88 683.184 L1320.32 683.184 L1319.76 683.184 L1319.2 683.184 L1318.65 683.184 L1318.09 683.184 L1317.53 683.184 L1316.97 683.184 L1316.41 683.184 L1315.85 683.184 L1315.29 683.184 L1314.73 683.184 L1314.17 683.184 L1313.61 683.184 L1313.05 683.184 L1312.49 683.184 L1311.93 683.184 L1311.38 683.184 L1310.82 683.184 L1310.26 683.184 L1309.7 683.184 L1309.14 683.184 L1308.58 683.184 L1308.02 683.184 L1307.46 683.184 L1306.9 683.184 L1306.34 683.184 L1305.78 683.184 L1305.22 683.184 L1304.66 683.184 L1304.1 683.184 L1303.55 683.184 L1302.99 683.184 L1302.43 683.184 L1301.87 683.184 L1301.31 683.184 L1300.75 683.184 L1300.19 683.184 L1299.63 683.184 L1299.07 683.184 L1298.51 683.184 L1297.95 683.184 L1297.39 683.184 L1296.83 683.184 L1296.28 683.184 L1295.72 683.184 L1295.16 683.184 L1294.6 683.184 L1294.04 683.184 L1293.48 683.184 L1292.92 683.184 L1292.36 683.184 L1291.8 683.184 L1291.24 683.184 L1290.68 683.184 L1290.12 683.184 L1289.56 683.184 L1289 683.184 L1288.45 683.184 L1287.89 683.184 L1287.33 683.184 L1286.77 683.184 L1286.21 683.184 L1285.65 683.184 L1285.09 683.184 L1284.53 683.184 L1283.97 683.184 L1283.41 683.184 L1282.85 683.184 L1282.29 683.184 L1281.73 683.184 L1281.18 683.184 L1280.62 683.184 L1280.06 683.184 L1279.5 683.184 L1278.94 683.184 L1278.38 683.184 L1277.82 683.184 L1277.26 683.184 L1276.7 683.184 L1276.14 683.184 L1275.58 683.184 L1275.02 683.184 L1274.46 683.184 L1273.91 683.184 L1273.35 683.184 L1272.79 683.184 L1272.23 683.184 L1271.67 683.184 L1271.11 683.184 L1270.55 683.184 L1269.99 683.184 L1269.43 683.184 L1268.87 683.184 L1268.31 683.184 L1267.75 683.184 L1267.19 683.184 L1266.63 683.184 L1266.08 683.184 L1265.52 683.184 L1264.96 683.184 L1264.4 683.184 L1263.84 683.184 L1263.28 683.184 L1262.72 683.184 L1262.16 683.184 L1261.6 683.184 L1261.04 683.184 L1260.48 683.184 L1259.92 683.184 L1259.36 683.184 L1258.81 683.184 L1258.25 683.184 L1257.69 683.184 L1257.13 683.184 L1256.57 683.184 L1256.01 683.184 L1255.45 683.184 L1254.89 683.184 L1254.33 683.184 L1253.77 683.184 L1253.21 683.184 L1252.65 683.184 L1252.09 683.184 L1251.54 683.184 L1250.98 683.184 L1250.42 683.184 L1249.86 683.184 L1249.3 683.184 L1248.74 683.184 L1248.18 683.184 L1247.62 683.184 L1247.06 683.184 L1246.5 683.184 L1245.94 683.184 L1245.38 683.184 L1244.82 683.184 L1244.26 683.184 L1243.71 683.184 L1243.15 683.184 L1242.59 683.184 L1242.03 683.184 L1241.47 683.184 L1240.91 683.184 L1240.35 683.184 L1239.79 683.184 L1239.23 683.184 L1238.67 683.184 L1238.11 683.184 L1237.55 683.184 L1236.99 683.184 L1236.44 683.184 L1235.88 683.184 L1235.32 683.184 L1234.76 683.184 L1234.2 683.184 L1233.64 683.184 L1233.08 683.184 L1232.52 683.184 L1231.96 683.184 L1231.4 683.184 L1230.84 683.184 L1230.28 683.184 L1229.72 683.184 L1229.17 683.184 L1228.61 683.184 L1228.05 683.184 L1227.49 683.184 L1226.93 683.184 L1226.37 683.184 L1225.81 683.184 L1225.25 683.184 L1224.69 683.184 L1224.13 683.184 L1223.57 683.184 L1223.01 683.184 L1222.45 683.184 L1221.89 683.184 L1221.34 683.184 L1220.78 683.184 L1220.22 683.184 L1219.66 683.184 L1219.1 683.184 L1218.54 683.184 L1217.98 683.184 L1217.42 683.184 L1216.86 683.184 L1216.3 683.184 L1215.74 683.184 L1215.18 683.184 L1214.62 683.184 L1214.07 683.184 L1213.51 683.184 L1212.95 683.184 L1212.39 683.184 L1211.83 683.184 L1211.27 683.184 L1210.71 683.184 L1210.15 683.184 L1209.59 683.184 L1209.03 683.184 L1208.47 683.184 L1207.91 683.184 L1207.35 683.184 L1206.8 683.184 L1206.24 683.184 L1205.68 683.184 L1205.12 683.184 L1204.56 683.184 L1204 683.184 L1203.44 683.184 L1202.88 683.184 L1202.32 683.184 L1201.76 683.184 L1201.2 683.184 L1200.64 683.184 L1200.08 683.184 L1199.52 683.184 L1198.97 683.184 L1198.41 683.184 L1197.85 683.184 L1197.29 683.184 L1196.73 683.184 L1196.17 683.184 L1195.61 683.184 L1195.05 683.184 L1194.49 683.184 L1193.93 683.184 L1193.37 683.184 L1192.81 683.184 L1192.25 683.184 L1191.7 683.184 L1191.14 683.184 L1190.58 683.184 L1190.02 683.184 L1189.46 683.184 L1188.9 683.184 L1188.34 683.184 L1187.78 683.184 L1187.22 683.184 L1186.66 683.184 L1186.1 683.184 L1185.54 683.184 L1184.98 683.184 L1184.43 683.184 L1183.87 683.184 L1183.31 683.184 L1182.75 683.184 L1182.19 683.184 L1181.63 683.184 L1181.07 683.184 L1180.51 683.184 L1179.95 683.184 L1179.39 683.184 L1178.83 683.184 L1178.27 683.184 L1177.71 683.184 L1177.15 683.184 L1176.6 683.184 L1176.04 683.184 L1175.48 683.184 L1174.92 683.184 L1174.36 683.184 L1173.8 683.184 L1173.24 683.184 L1172.68 683.184 L1172.12 683.184 L1171.56 683.184 L1171 683.184 L1170.44 683.184 L1169.88 683.184 L1169.33 683.184 L1168.77 683.184 L1168.21 683.184 L1167.65 683.184 L1167.09 683.184 L1166.53 683.184 L1165.97 683.184 L1165.41 683.184 L1164.85 683.184 L1164.29 683.184 L1163.73 683.184 L1163.17 683.184 L1162.61 683.184 L1162.05 683.184 L1161.5 683.184 L1160.94 683.184 L1160.38 683.184 L1159.82 683.184 L1159.26 683.184 L1158.7 683.184 L1158.14 683.184 L1157.58 683.184 L1157.02 683.184 L1156.46 683.184 L1155.9 683.184 L1155.34 683.184 L1154.78 683.184 L1154.23 683.184 L1153.67 683.184 L1153.11 683.184 L1152.55 683.184 L1151.99 683.184 L1151.43 683.184 L1150.87 683.184 L1150.31 683.184 L1149.75 683.184 L1149.19 683.184 L1148.63 683.184 L1148.07 683.184 L1147.51 683.184 L1146.96 683.184 L1146.4 683.184 L1145.84 683.184 L1145.28 683.184 L1144.72 683.184 L1144.16 683.184 L1143.6 683.184 L1143.04 683.184 L1142.48 683.184 L1141.92 683.184 L1141.36 683.184 L1140.8 683.184 L1140.24 683.184 L1139.68 683.184 L1139.13 683.184 L1138.57 683.184 L1138.01 683.184 L1137.45 683.184 L1136.89 683.184 L1136.33 683.184 L1135.77 683.184 L1135.21 683.184 L1134.65 683.184 L1134.09 683.184 L1133.53 683.184 L1132.97 683.184 L1132.41 683.184 L1131.86 683.184 L1131.3 683.184 L1130.74 683.184 L1130.18 683.184 L1129.62 683.184 L1129.06 683.184 L1128.5 683.184 L1127.94 683.184 L1127.38 683.184 L1126.82 683.184 L1126.26 683.184 L1125.7 683.184 L1125.14 683.184 L1124.59 683.184 L1124.03 683.184 L1123.47 683.184 L1122.91 683.184 L1122.35 683.184 L1121.79 683.184 L1121.23 683.184 L1120.67 683.184 L1120.11 683.184 L1119.55 683.184 L1118.99 683.184 L1118.43 683.184 L1117.87 683.184 L1117.31 683.184 L1116.76 683.184 L1116.2 683.184 L1115.64 683.184 L1115.08 683.184 L1114.52 683.184 L1113.96 683.184 L1113.4 683.184 L1112.84 683.184 L1112.28 683.184 L1111.72 683.184 L1111.16 683.184 L1110.6 683.184 L1110.04 683.184 L1109.49 683.184 L1108.93 683.184 L1108.37 683.184 L1107.81 683.184 L1107.25 683.184 L1106.69 683.184 L1106.13 683.184 L1105.57 683.184 L1105.01 683.184 L1104.45 683.184 L1103.89 683.184 L1103.33 683.184 L1102.77 683.184 L1102.22 683.184 L1101.66 683.184 L1101.1 683.184 L1100.54 683.184 L1099.98 683.184 L1099.42 683.184 L1098.86 683.184 L1098.3 683.184 L1097.74 683.184 L1097.18 683.184 L1096.62 683.184 L1096.06 683.184 L1095.5 683.184 L1094.94 683.184 L1094.39 683.184 L1093.83 683.184 L1093.27 683.184 L1092.71 683.184 L1092.15 683.184 L1091.59 683.184 L1091.03 683.184 L1090.47 683.184 L1089.91 683.184 L1089.35 683.184 L1088.79 683.184 L1088.23 683.184 L1087.67 683.184 L1087.12 683.184 L1086.56 683.184 L1086 683.184 L1085.44 683.184 L1084.88 683.184 L1084.32 683.184 L1083.76 683.184 L1083.2 683.184 L1082.64 683.184 L1082.08 683.184 L1081.52 683.184 L1080.96 683.184 L1080.4 683.184 L1079.85 683.184 L1079.29 683.184 L1078.73 683.184 L1078.17 683.184 L1077.61 683.184 L1077.05 683.184 L1076.49 683.184 L1075.93 683.184 L1075.37 683.184 L1074.81 683.184 L1074.25 683.184 L1073.69 683.184 L1073.13 683.184 L1072.57 683.184 L1072.02 683.184 L1071.46 683.184 L1070.9 683.184 L1070.34 683.184 L1069.78 683.184 L1069.22 683.184 L1068.66 683.184 L1068.1 683.184 L1067.54 683.184 L1066.98 683.184 L1066.42 683.184 L1065.86 683.184 L1065.3 683.184 L1064.75 683.184 L1064.19 683.184 L1063.63 683.184 L1063.07 683.184 L1062.51 683.184 L1061.95 683.184 L1061.39 683.184 L1060.83 683.184 L1060.27 683.184 L1059.71 683.184 L1059.15 683.184 L1058.59 683.184 L1058.03 683.184 L1057.48 683.184 L1056.92 683.184 L1056.36 683.184 L1055.8 683.184 L1055.24 683.184 L1054.68 683.184 L1054.12 683.184 L1053.56 683.184 L1053 683.184 L1052.44 683.184 L1051.88 683.184 L1051.32 683.184 L1050.76 683.184 L1050.2 683.184 L1049.65 683.184 L1049.09 683.184 L1048.53 683.184 L1047.97 683.184 L1047.41 683.184 L1046.85 683.184 L1046.29 683.184 L1045.73 683.184 L1045.17 683.184 L1044.61 683.184 L1044.05 683.184 L1043.49 683.184 L1042.93 683.184 L1042.38 683.184 L1041.82 683.184 L1041.26 683.184 L1040.7 683.184 L1040.14 683.184 L1039.58 683.184 L1039.02 683.184 L1038.46 683.184 L1037.9 683.184 L1037.34 683.184 L1036.78 683.184 L1036.22 683.184 L1035.66 683.184 L1035.1 683.184 L1034.55 683.184 L1033.99 683.184 L1033.43 683.184 L1032.87 683.184 L1032.31 683.184 L1031.75 683.184 L1031.19 683.184 L1030.63 683.184 L1030.07 683.184 L1029.51 683.184 L1028.95 683.184 L1028.39 683.184 L1027.83 683.184 L1027.28 683.184 L1026.72 683.184 L1026.16 683.184 L1025.6 683.184 L1025.04 683.184 L1024.48 683.184 L1023.92 683.184 L1023.36 683.184 L1022.8 683.184 L1022.24 683.184 L1021.68 683.184 L1021.12 683.184 L1020.56 683.184 L1020.01 683.184 L1019.45 683.184 L1018.89 683.184 L1018.33 683.184 L1017.77 683.184 L1017.21 683.184 L1016.65 683.184 L1016.09 683.184 L1015.53 683.184 L1014.97 683.184 L1014.41 683.184 L1013.85 683.184 L1013.29 683.184 L1012.73 683.184 L1012.18 683.184 L1011.62 683.184 L1011.06 683.184 L1010.5 683.184 L1009.94 683.184 L1009.38 683.184 L1008.82 683.184 L1008.26 683.184 L1007.7 683.184 L1007.14 683.184 L1006.58 683.184 L1006.02 683.184 L1005.46 683.184 L1004.91 683.184 L1004.35 683.184 L1003.79 683.184 L1003.23 683.184 L1002.67 683.184 L1002.11 683.184 L1001.55 683.184 L1000.99 683.184 L1000.43 683.184 L999.872 683.184 L999.313 683.184 L998.754 683.184 L998.194 683.184 L997.635 683.184 L997.076 683.184 L996.517 683.184 L995.957 683.184 L995.398 683.184 L994.839 683.184 L994.28 683.184 L993.72 683.184 L993.161 683.184 L992.602 683.184 L992.043 683.184 L991.483 683.184 L990.924 683.184 L990.365 683.184 L989.806 683.184 L989.246 683.184 L988.687 683.184 L988.128 683.184 L987.569 683.184 L987.009 683.184 L986.45 683.184 L985.891 683.184 L985.332 683.184 L984.772 683.184 L984.213 683.184 L983.654 683.184 L983.095 683.184 L982.535 683.184 L981.976 683.184 L981.417 683.184 L980.858 683.184 L980.298 683.184 L979.739 683.184 L979.18 683.184 L978.621 683.184 L978.061 683.184 L977.502 683.184 L976.943 683.184 L976.384 683.184 L975.824 683.184 L975.265 683.184 L974.706 683.184 L974.147 683.184 L973.587 683.184 L973.028 683.184 L972.469 683.184 L971.91 683.184 L971.35 683.184 L970.791 683.184 L970.232 683.184 L969.673 683.184 L969.113 683.184 L968.554 683.184 L967.995 683.184 L967.436 683.184 L966.876 683.184 L966.317 683.184 L965.758 683.184 L965.199 683.184 L964.639 683.184 L964.08 683.184 L963.521 683.184 L962.962 683.184 L962.402 683.184 L961.843 683.184 L961.284 683.184 L960.725 683.184 L960.165 683.184 L959.606 683.184 L959.047 683.184 L958.488 683.184 L957.928 683.184 L957.369 683.184 L956.81 683.184 L956.251 683.184 L955.691 683.184 L955.132 683.184 L954.573 683.184 L954.014 683.184 L953.454 683.184 L952.895 683.184 L952.336 683.184 L951.777 683.184 L951.217 683.184 L950.658 683.184 L950.099 683.184 L949.54 683.184 L948.98 683.184 L948.421 683.184 L947.862 683.184 L947.303 683.184 L946.743 683.184 L946.184 683.184 L945.625 683.184 L945.066 683.184 L944.506 683.184 L943.947 683.184 L943.388 683.184 L942.829 683.184 L942.269 683.184 L941.71 683.184 L941.151 683.184 L940.592 683.184 L940.032 683.184 L939.473 683.184 L938.914 683.184 L938.355 683.184 L937.795 683.184 L937.236 683.184 L936.677 683.184 L936.118 683.184 L935.558 683.184 L934.999 683.184 L934.44 683.184 L933.881 683.184 L933.321 683.184 L932.762 683.184 L932.203 683.184 L931.644 683.184 L931.084 683.184 L930.525 683.184 L929.966 683.184 L929.406 683.184 L928.847 683.184 L928.288 683.184 L927.729 683.184 L927.169 683.184 L926.61 683.184 L926.051 683.184 L925.492 683.184 L924.932 683.184 L924.373 683.184 L923.814 683.184 L923.255 683.184 L922.695 683.184 L922.136 683.184 L921.577 683.184 L921.018 683.184 L920.458 683.184 L919.899 683.184 L919.34 683.184 L918.781 683.184 L918.221 683.184 L917.662 683.184 L917.103 683.184 L916.544 683.184 L915.984 683.184 L915.425 683.184 L914.866 683.184 L914.307 683.184 L913.747 683.184 L913.188 683.184 L912.629 683.184 L912.07 683.184 L911.51 683.184 L910.951 683.184 L910.392 683.184 L909.833 683.184 L909.273 683.184 L908.714 683.184 L908.155 683.184 L907.596 683.184 L907.036 683.184 L906.477 683.184 L905.918 683.184 L905.359 683.184 L904.799 683.184 L904.24 683.184 L903.681 683.184 L903.122 683.184 L902.562 683.184 L902.003 683.184 L901.444 683.184 L900.885 683.184 L900.325 683.184 L899.766 683.184 L899.207 683.184 L898.648 683.184 L898.088 683.184 L897.529 683.184 L896.97 683.184 L896.411 683.184 L895.851 683.184 L895.292 683.184 L894.733 683.184 L894.174 683.184 L893.614 683.184 L893.055 683.184 L892.496 683.184 L891.937 683.184 L891.377 683.184 L890.818 683.184 L890.259 683.184 L889.7 683.184 L889.14 683.184 L888.581 683.184 L888.022 683.184 L887.463 683.184 L886.903 683.184 L886.344 683.184 L885.785 683.184 L885.226 683.184 L884.666 683.184 L884.107 683.184 L883.548 683.184 L882.989 683.184 L882.429 683.184 L881.87 683.184 L881.311 683.184 L880.752 683.184 L880.192 683.184 L879.633 683.184 L879.074 683.184 L878.515 683.184 L877.955 683.184 L877.396 683.184 L876.837 683.184 L876.278 683.184 L875.718 683.184 L875.159 683.184 L874.6 683.184 L874.041 683.184 L873.481 683.184 L872.922 683.184 L872.363 683.184 L871.804 683.184 L871.244 683.184 L870.685 683.184 L870.126 683.184 L869.567 683.184 L869.007 683.184 L868.448 683.184 L867.889 683.184 L867.33 683.184 L866.77 683.184 L866.211 683.184 L865.652 683.184 L865.093 683.184 L864.533 683.184 L863.974 683.184 L863.415 683.184 L862.856 683.184 L862.296 683.184 L861.737 683.184 L861.178 683.184 L860.619 683.184 L860.059 683.184 L859.5 683.184 L858.941 683.184 L858.382 683.184 L857.822 683.184 L857.263 683.184 L856.704 683.184 L856.145 683.184 L855.585 683.184 L855.026 683.184 L854.467 683.184 L853.908 683.184 L853.348 683.184 L852.789 683.184 L852.23 683.184 L851.671 683.184 L851.111 683.184 L850.552 683.184 L849.993 683.184 L849.434 683.184 L848.874 683.184 L848.315 683.184 L847.756 683.184 L847.197 683.184 L846.637 683.184 L846.078 683.184 L845.519 683.184 L844.96 683.184 L844.4 683.184 L843.841 683.184 L843.282 683.184 L842.723 683.184 L842.163 683.184 L841.604 683.184 L841.045 683.184 L840.486 683.184 L839.926 683.184 L839.367 683.184 L838.808 683.184 L838.249 683.184 L837.689 683.184 L837.13 683.184 L836.571 683.184 L836.012 683.184 L835.452 683.184 L834.893 683.184 L834.334 683.184 L833.775 683.184 L833.215 683.184 L832.656 683.184 L832.097 683.184 L831.538 683.184 L830.978 683.184 L830.419 683.184 L829.86 683.184 L829.301 683.184 L828.741 683.184 L828.182 683.184 L827.623 683.184 L827.064 683.184 L826.504 683.184 L825.945 683.184 L825.386 683.184 L824.827 683.184 L824.267 683.184 L823.708 683.184 L823.149 683.184 L822.59 683.184 L822.03 683.184 L821.471 683.184 L820.912 683.184 L820.353 683.184 L819.793 683.184 L819.234 683.184 L818.675 683.184 L818.116 683.184 L817.556 683.184 L816.997 683.184 L816.438 683.184 L815.879 683.184 L815.319 683.184 L814.76 683.184 L814.201 683.184 L813.642 683.184 L813.082 683.184 L812.523 683.184 L811.964 683.184 L811.405 683.184 L810.845 683.184 L810.286 683.184 L809.727 683.184 L809.168 683.184 L808.608 683.184 L808.049 683.184 L807.49 683.184 L806.931 683.184 L806.371 683.184 L805.812 683.184 L805.253 683.184 L804.693 683.184 L804.134 683.184 L803.575 683.184 L803.016 683.184 L802.456 683.184 L801.897 683.184 L801.338 683.184 L800.779 683.184 L800.219 683.184 L799.66 683.184 L799.101 683.184 L798.542 683.184 L797.982 683.184 L797.423 683.184 L796.864 683.184 L796.305 683.184 L795.745 683.184 L795.186 683.184 L794.627 683.184 L794.068 683.184 L793.508 683.184 L792.949 683.184 L792.39 683.184 L791.831 683.184 L791.271 683.184 L790.712 683.184 L790.153 683.184 L789.594 683.184 L789.034 683.184 L788.475 683.184 L787.916 683.184 L787.357 683.184 L786.797 683.184 L786.238 683.184 L785.679 683.184 L785.12 683.184 L784.56 683.184 L784.001 683.184 L783.442 683.184 L782.883 683.184 L782.323 683.184 L781.764 683.184 L781.205 683.184 L780.646 683.184 L780.086 683.184 L779.527 683.184 L778.968 683.184 L778.409 683.184 L777.849 683.184 L777.29 683.184 L776.731 683.184 L776.172 683.184 L775.612 683.184 L775.053 683.184 L774.494 683.184 L773.935 683.184 L773.375 683.184 L772.816 683.184 L772.257 683.184 L771.698 683.184 L771.138 683.184 L770.579 683.184 L770.02 683.184 L769.461 683.184 L768.901 683.184 L768.342 683.184 L767.783 683.184 L767.224 683.184 L766.664 683.184 L766.105 683.184 L765.546 683.184 L764.987 683.184 L764.427 683.184 L763.868 683.184 L763.309 683.184 L762.75 683.184 L762.19 683.184 L761.631 683.184 L761.072 683.184 L760.513 683.184 L759.953 683.184 L759.394 683.184 L758.835 683.184 L758.276 683.184 L757.716 683.184 L757.157 683.184 L756.598 683.184 L756.039 683.184 L755.479 683.184 L754.92 683.184 L754.361 683.184 L753.802 683.184 L753.242 683.184 L752.683 683.184 L752.124 683.184 L751.565 683.184 L751.005 683.184 L750.446 683.184 L749.887 683.184 L749.328 683.184 L748.768 683.184 L748.209 683.184 L747.65 683.184 L747.091 683.184 L746.531 683.184 L745.972 683.184 L745.413 683.184 L744.854 683.184 L744.294 683.184 L743.735 683.184 L743.176 683.184 L742.617 683.184 L742.057 683.184 L741.498 683.184 L740.939 683.184 L740.38 683.184 L739.82 683.184 L739.261 683.184 L738.702 683.184 L738.143 683.184 L737.583 683.184 L737.024 683.184 L736.465 683.184 L735.906 683.184 L735.346 683.184 L734.787 683.184 L734.228 683.184 L733.669 683.184 L733.109 683.184 L732.55 683.184 L731.991 683.184 L731.432 683.184 L730.872 683.184 L730.313 683.184 L729.754 683.184 L729.195 683.184 L728.635 683.184 L728.076 683.184 L727.517 683.184 L726.958 683.184 L726.398 683.184 L725.839 683.184 L725.28 683.184 L724.721 683.184 L724.161 683.184 L723.602 683.184 L723.043 683.184 L722.484 683.184 L721.924 683.184 L721.365 683.184 L720.806 683.184 L720.247 683.184  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.151 720.806,688.151 721.365,688.151 721.924,688.151 722.484,688.151 723.043,688.151 723.602,688.151 724.161,688.151 724.721,688.151 725.28,688.151 725.839,688.151 726.398,688.151 726.958,688.151 727.517,688.151 728.076,688.151 728.635,688.151 729.195,688.151 729.754,688.151 730.313,688.151 730.872,688.151 731.432,688.151 731.991,688.151 732.55,688.151 733.109,688.151 733.669,688.151 734.228,688.151 734.787,688.151 735.346,688.151 735.906,688.151 736.465,688.151 737.024,688.151 737.583,688.151 738.143,688.151 738.702,688.151 739.261,688.151 739.82,688.151 740.38,688.151 740.939,688.151 741.498,688.151 742.057,688.151 742.617,688.151 743.176,688.151 743.735,688.151 744.294,688.151 744.854,688.151 745.413,688.151 745.972,688.151 746.531,688.151 747.091,688.151 747.65,688.151 748.209,688.151 748.768,688.151 749.328,688.151 749.887,688.151 750.446,688.151 751.005,688.151 751.565,688.151 752.124,688.151 752.683,688.151 753.242,688.151 753.802,688.151 754.361,688.151 754.92,688.151 755.479,688.151 756.039,688.151 756.598,688.151 757.157,688.151 757.716,688.151 758.276,688.151 758.835,688.151 759.394,688.151 759.953,688.151 760.513,688.151 761.072,688.151 761.631,688.151 762.19,688.151 762.75,688.151 763.309,688.151 763.868,688.151 764.427,688.151 764.987,688.151 765.546,688.151 766.105,688.151 766.664,688.151 767.224,688.151 767.783,688.151 768.342,688.151 768.901,688.151 769.461,688.151 770.02,688.151 770.579,688.151 771.138,688.151 771.698,688.151 772.257,688.151 772.816,688.151 773.375,688.151 773.935,688.151 774.494,688.151 775.053,688.151 775.612,688.151 776.172,688.151 776.731,688.151 777.29,688.151 777.849,688.151 778.409,688.151 778.968,688.151 779.527,688.151 780.086,688.151 780.646,688.151 781.205,688.151 781.764,688.151 782.323,688.151 782.883,688.151 783.442,688.151 784.001,688.151 784.56,688.151 785.12,688.151 785.679,688.151 786.238,688.151 786.797,688.151 787.357,688.151 787.916,688.151 788.475,688.151 789.034,688.151 789.594,688.151 790.153,688.151 790.712,688.151 791.271,688.151 791.831,688.151 792.39,688.151 792.949,688.151 793.508,688.151 794.068,688.151 794.627,688.151 795.186,688.151 795.745,688.151 796.305,688.151 796.864,688.151 797.423,688.151 797.982,688.151 798.542,688.151 799.101,688.151 799.66,688.151 800.219,688.151 800.779,688.151 801.338,688.151 801.897,688.151 802.456,688.151 803.016,688.151 803.575,688.151 804.134,688.151 804.693,688.151 805.253,688.151 805.812,688.151 806.371,688.151 806.931,688.151 807.49,688.151 808.049,688.151 808.608,688.151 809.168,688.151 809.727,688.151 810.286,688.151 810.845,688.151 811.405,688.151 811.964,688.151 812.523,688.151 813.082,688.151 813.642,688.151 814.201,688.151 814.76,688.151 815.319,688.151 815.879,688.151 816.438,688.151 816.997,688.151 817.556,688.151 818.116,688.151 818.675,688.151 819.234,688.151 819.793,688.151 820.353,688.151 820.912,688.151 821.471,688.151 822.03,688.151 822.59,688.151 823.149,688.151 823.708,688.151 824.267,688.151 824.827,688.151 825.386,688.151 825.945,688.151 826.504,688.151 827.064,688.151 827.623,688.151 828.182,688.151 828.741,688.151 829.301,688.151 829.86,688.151 830.419,688.151 830.978,688.151 831.538,688.151 832.097,688.151 832.656,688.151 833.215,688.151 833.775,688.151 834.334,688.151 834.893,688.151 835.452,688.151 836.012,688.151 836.571,688.151 837.13,688.151 837.689,688.151 838.249,688.151 838.808,688.151 839.367,688.151 839.926,688.151 840.486,688.151 841.045,688.151 841.604,688.151 842.163,688.151 842.723,688.151 843.282,688.151 843.841,688.151 844.4,688.151 844.96,688.151 845.519,688.151 846.078,688.151 846.637,688.151 847.197,688.151 847.756,688.151 848.315,688.151 848.874,688.151 849.434,688.151 849.993,688.151 850.552,688.151 851.111,688.151 851.671,688.151 852.23,688.151 852.789,688.151 853.348,688.151 853.908,688.151 854.467,688.151 855.026,688.151 855.585,688.151 856.145,688.151 856.704,688.151 857.263,688.151 857.822,688.151 858.382,688.151 858.941,688.151 859.5,688.151 860.059,688.151 860.619,688.151 861.178,688.151 861.737,688.151 862.296,688.151 862.856,688.151 863.415,688.151 863.974,688.151 864.533,688.151 865.093,688.151 865.652,688.151 866.211,688.151 866.77,688.151 867.33,688.151 867.889,688.151 868.448,688.151 869.007,688.151 869.567,688.151 870.126,688.151 870.685,688.151 871.244,688.151 871.804,688.151 872.363,688.151 872.922,688.151 873.481,688.151 874.041,688.151 874.6,688.151 875.159,688.151 875.718,688.151 876.278,688.151 876.837,688.151 877.396,688.151 877.955,688.151 878.515,688.151 879.074,688.151 879.633,688.151 880.192,688.151 880.752,688.151 881.311,688.151 881.87,688.151 882.429,688.151 882.989,688.151 883.548,688.151 884.107,688.151 884.666,688.151 885.226,688.151 885.785,688.151 886.344,688.151 886.903,688.151 887.463,688.151 888.022,688.151 888.581,688.151 889.14,688.151 889.7,688.151 890.259,688.151 890.818,688.151 891.377,688.151 891.937,688.151 892.496,688.151 893.055,688.151 893.614,688.151 894.174,688.151 894.733,688.151 895.292,688.151 895.851,688.151 896.411,688.151 896.97,688.151 897.529,688.151 898.088,688.151 898.648,688.151 899.207,688.151 899.766,688.151 900.325,688.151 900.885,688.151 901.444,688.151 902.003,688.151 902.562,688.151 903.122,688.151 903.681,688.151 904.24,688.151 904.799,688.151 905.359,688.151 905.918,688.151 906.477,688.151 907.036,688.151 907.596,688.151 908.155,688.151 908.714,688.151 909.273,688.151 909.833,688.151 910.392,688.151 910.951,688.151 911.51,688.151 912.07,688.151 912.629,688.151 913.188,688.151 913.747,688.151 914.307,688.151 914.866,688.151 915.425,688.151 915.984,688.151 916.544,688.151 917.103,688.151 917.662,688.151 918.221,688.151 918.781,688.151 919.34,688.151 919.899,688.151 920.458,688.151 921.018,688.151 921.577,688.151 922.136,688.151 922.695,688.151 923.255,688.151 923.814,688.151 924.373,688.151 924.932,688.151 925.492,688.151 926.051,688.151 926.61,688.151 927.169,688.151 927.729,688.151 928.288,688.151 928.847,688.151 929.406,688.151 929.966,688.151 930.525,688.151 931.084,688.151 931.644,688.151 932.203,688.151 932.762,688.151 933.321,688.151 933.881,688.151 934.44,688.151 934.999,688.151 935.558,688.151 936.118,688.151 936.677,688.151 937.236,688.151 937.795,688.151 938.355,688.151 938.914,688.151 939.473,688.151 940.032,688.151 940.592,688.151 941.151,688.151 941.71,688.151 942.269,688.151 942.829,688.151 943.388,688.151 943.947,688.151 944.506,688.151 945.066,688.151 945.625,688.151 946.184,688.151 946.743,688.151 947.303,688.151 947.862,688.151 948.421,688.151 948.98,688.151 949.54,688.151 950.099,688.151 950.658,688.151 951.217,688.151 951.777,688.151 952.336,688.151 952.895,688.151 953.454,688.151 954.014,688.151 954.573,688.151 955.132,688.151 955.691,688.151 956.251,688.151 956.81,688.151 957.369,688.151 957.928,688.151 958.488,688.151 959.047,688.151 959.606,688.151 960.165,688.151 960.725,688.151 961.284,688.151 961.843,688.151 962.402,688.151 962.962,688.151 963.521,688.151 964.08,688.151 964.639,688.151 965.199,688.151 965.758,688.151 966.317,688.151 966.876,688.151 967.436,688.151 967.995,688.151 968.554,688.151 969.113,688.151 969.673,688.151 970.232,688.151 970.791,688.151 971.35,688.151 971.91,688.151 972.469,688.151 973.028,688.151 973.587,688.151 974.147,688.151 974.706,688.151 975.265,688.151 975.824,688.151 976.384,688.151 976.943,688.151 977.502,688.151 978.061,688.151 978.621,688.151 979.18,688.151 979.739,688.151 980.298,688.151 980.858,688.151 981.417,688.151 981.976,688.151 982.535,688.151 983.095,688.151 983.654,688.151 984.213,688.151 984.772,688.151 985.332,688.151 985.891,688.151 986.45,688.151 987.009,688.151 987.569,688.151 988.128,688.151 988.687,688.151 989.246,688.151 989.806,688.151 990.365,688.151 990.924,688.151 991.483,688.151 992.043,688.151 992.602,688.151 993.161,688.151 993.72,688.151 994.28,688.151 994.839,688.151 995.398,688.151 995.957,688.151 996.517,688.151 997.076,688.151 997.635,688.151 998.194,688.151 998.754,688.151 999.313,688.151 999.872,688.151 1000.43,688.151 1000.99,688.151 1001.55,688.151 1002.11,688.151 1002.67,688.151 1003.23,688.151 1003.79,688.151 1004.35,688.151 1004.91,688.151 1005.46,688.151 1006.02,688.151 1006.58,688.151 1007.14,688.151 1007.7,688.151 1008.26,688.151 1008.82,688.151 1009.38,688.151 1009.94,688.151 1010.5,688.151 1011.06,688.151 1011.62,688.151 1012.18,688.151 1012.73,688.151 1013.29,688.151 1013.85,688.151 1014.41,688.151 1014.97,688.151 1015.53,688.151 1016.09,688.151 1016.65,688.151 1017.21,688.151 1017.77,688.151 1018.33,688.151 1018.89,688.151 1019.45,688.151 1020.01,688.151 1020.56,688.151 1021.12,688.151 1021.68,688.151 1022.24,688.151 1022.8,688.151 1023.36,688.151 1023.92,688.151 1024.48,688.151 1025.04,688.151 1025.6,688.151 1026.16,688.151 1026.72,688.151 1027.28,688.151 1027.83,688.151 1028.39,688.151 1028.95,688.151 1029.51,688.151 1030.07,688.151 1030.63,688.151 1031.19,688.151 1031.75,688.151 1032.31,688.151 1032.87,688.151 1033.43,688.151 1033.99,688.151 1034.55,688.151 1035.1,688.151 1035.66,688.151 1036.22,688.151 1036.78,688.151 1037.34,688.151 1037.9,688.151 1038.46,688.151 1039.02,688.151 1039.58,688.151 1040.14,688.151 1040.7,688.151 1041.26,688.151 1041.82,688.151 1042.38,688.151 1042.93,688.151 1043.49,688.151 1044.05,688.151 1044.61,688.151 1045.17,688.151 1045.73,688.151 1046.29,688.151 1046.85,688.151 1047.41,688.151 1047.97,688.151 1048.53,688.151 1049.09,688.151 1049.65,688.151 1050.2,688.151 1050.76,688.151 1051.32,688.151 1051.88,688.151 1052.44,688.151 1053,688.151 1053.56,688.151 1054.12,688.151 1054.68,688.151 1055.24,688.151 1055.8,688.151 1056.36,688.151 1056.92,688.151 1057.48,688.151 1058.03,688.151 1058.59,688.151 1059.15,688.151 1059.71,688.151 1060.27,688.151 1060.83,688.151 1061.39,688.151 1061.95,688.151 1062.51,688.151 1063.07,688.151 1063.63,688.151 1064.19,688.151 1064.75,688.151 1065.3,688.151 1065.86,688.151 1066.42,688.151 1066.98,688.151 1067.54,688.151 1068.1,688.151 1068.66,688.151 1069.22,688.151 1069.78,688.151 1070.34,688.151 1070.9,688.151 1071.46,688.151 1072.02,688.151 1072.57,688.151 1073.13,688.151 1073.69,688.151 1074.25,688.151 1074.81,688.151 1075.37,688.151 1075.93,688.151 1076.49,688.151 1077.05,688.151 1077.61,688.151 1078.17,688.151 1078.73,688.151 1079.29,688.151 1079.85,688.151 1080.4,688.151 1080.96,688.151 1081.52,688.151 1082.08,688.151 1082.64,688.151 1083.2,688.151 1083.76,688.151 1084.32,688.151 1084.88,688.151 1085.44,688.151 1086,688.151 1086.56,688.151 1087.12,688.151 1087.67,688.151 1088.23,688.151 1088.79,688.151 1089.35,688.151 1089.91,688.151 1090.47,688.151 1091.03,688.151 1091.59,688.151 1092.15,688.151 1092.71,688.151 1093.27,688.151 1093.83,688.151 1094.39,688.151 1094.94,688.151 1095.5,688.151 1096.06,688.151 1096.62,688.151 1097.18,688.151 1097.74,688.151 1098.3,688.151 1098.86,688.151 1099.42,688.151 1099.98,688.151 1100.54,688.151 1101.1,688.151 1101.66,688.151 1102.22,688.151 1102.77,688.151 1103.33,688.151 1103.89,688.151 1104.45,688.151 1105.01,688.151 1105.57,688.151 1106.13,688.151 1106.69,688.151 1107.25,688.151 1107.81,688.151 1108.37,688.151 1108.93,688.151 1109.49,688.151 1110.04,688.151 1110.6,688.151 1111.16,688.151 1111.72,688.151 1112.28,688.151 1112.84,688.151 1113.4,688.151 1113.96,688.151 1114.52,688.151 1115.08,688.151 1115.64,688.151 1116.2,688.151 1116.76,688.151 1117.31,688.151 1117.87,688.151 1118.43,688.151 1118.99,688.151 1119.55,688.151 1120.11,688.151 1120.67,688.151 1121.23,688.151 1121.79,688.151 1122.35,688.151 1122.91,688.151 1123.47,688.151 1124.03,688.151 1124.59,688.151 1125.14,688.151 1125.7,688.151 1126.26,688.151 1126.82,688.151 1127.38,688.151 1127.94,688.151 1128.5,688.151 1129.06,688.151 1129.62,688.151 1130.18,688.151 1130.74,688.151 1131.3,688.151 1131.86,688.151 1132.41,688.151 1132.97,688.151 1133.53,688.151 1134.09,688.151 1134.65,688.151 1135.21,688.151 1135.77,688.151 1136.33,688.151 1136.89,688.151 1137.45,688.151 1138.01,688.151 1138.57,688.151 1139.13,688.151 1139.68,688.151 1140.24,688.151 1140.8,688.151 1141.36,688.151 1141.92,688.151 1142.48,688.151 1143.04,688.151 1143.6,688.151 1144.16,688.151 1144.72,688.151 1145.28,688.151 1145.84,688.151 1146.4,688.151 1146.96,688.151 1147.51,688.151 1148.07,688.151 1148.63,688.151 1149.19,688.151 1149.75,688.151 1150.31,688.151 1150.87,688.151 1151.43,688.151 1151.99,688.151 1152.55,688.151 1153.11,688.151 1153.67,688.151 1154.23,688.151 1154.78,688.151 1155.34,688.151 1155.9,688.151 1156.46,688.151 1157.02,688.151 1157.58,688.151 1158.14,688.151 1158.7,688.151 1159.26,688.151 1159.82,688.151 1160.38,688.151 1160.94,688.151 1161.5,688.151 1162.05,688.151 1162.61,688.151 1163.17,688.151 1163.73,688.151 1164.29,688.151 1164.85,688.151 1165.41,688.151 1165.97,688.151 1166.53,688.151 1167.09,688.151 1167.65,688.151 1168.21,688.151 1168.77,688.151 1169.33,688.151 1169.88,688.151 1170.44,688.151 1171,688.151 1171.56,688.151 1172.12,688.151 1172.68,688.151 1173.24,688.151 1173.8,688.151 1174.36,688.151 1174.92,688.151 1175.48,688.151 1176.04,688.151 1176.6,688.151 1177.15,688.151 1177.71,688.151 1178.27,688.151 1178.83,688.151 1179.39,688.151 1179.95,688.151 1180.51,688.151 1181.07,688.151 1181.63,688.151 1182.19,688.151 1182.75,688.151 1183.31,688.151 1183.87,688.151 1184.43,688.151 1184.98,688.151 1185.54,688.151 1186.1,688.151 1186.66,688.151 1187.22,688.151 1187.78,688.151 1188.34,688.151 1188.9,688.151 1189.46,688.151 1190.02,688.151 1190.58,688.151 1191.14,688.151 1191.7,688.151 1192.25,688.151 1192.81,688.151 1193.37,688.151 1193.93,688.151 1194.49,688.151 1195.05,688.151 1195.61,688.151 1196.17,688.151 1196.73,688.151 1197.29,688.151 1197.85,688.151 1198.41,688.151 1198.97,688.151 1199.52,688.151 1200.08,688.151 1200.64,688.151 1201.2,688.151 1201.76,688.151 1202.32,688.151 1202.88,688.151 1203.44,688.151 1204,688.151 1204.56,688.151 1205.12,688.151 1205.68,688.151 1206.24,688.151 1206.8,688.151 1207.35,688.151 1207.91,688.151 1208.47,688.151 1209.03,688.151 1209.59,688.151 1210.15,688.151 1210.71,688.151 1211.27,688.151 1211.83,688.151 1212.39,688.151 1212.95,688.151 1213.51,688.151 1214.07,688.151 1214.62,688.151 1215.18,688.151 1215.74,688.151 1216.3,688.151 1216.86,688.151 1217.42,688.151 1217.98,688.151 1218.54,688.151 1219.1,688.151 1219.66,688.151 1220.22,688.151 1220.78,688.151 1221.34,688.151 1221.89,688.151 1222.45,688.151 1223.01,688.151 1223.57,688.151 1224.13,688.151 1224.69,688.151 1225.25,688.151 1225.81,688.151 1226.37,688.151 1226.93,688.151 1227.49,688.151 1228.05,688.151 1228.61,688.151 1229.17,688.151 1229.72,688.151 1230.28,688.151 1230.84,688.151 1231.4,688.151 1231.96,688.151 1232.52,688.151 1233.08,688.151 1233.64,688.151 1234.2,688.151 1234.76,688.151 1235.32,688.151 1235.88,688.151 1236.44,688.151 1236.99,688.151 1237.55,688.151 1238.11,688.151 1238.67,688.151 1239.23,688.151 1239.79,688.151 1240.35,688.151 1240.91,688.151 1241.47,688.151 1242.03,688.151 1242.59,688.151 1243.15,688.151 1243.71,688.151 1244.26,688.151 1244.82,688.151 1245.38,688.151 1245.94,688.151 1246.5,688.151 1247.06,688.151 1247.62,688.151 1248.18,688.151 1248.74,688.151 1249.3,688.151 1249.86,688.151 1250.42,688.151 1250.98,688.151 1251.54,688.151 1252.09,688.151 1252.65,688.151 1253.21,688.151 1253.77,688.151 1254.33,688.151 1254.89,688.151 1255.45,688.151 1256.01,688.151 1256.57,688.151 1257.13,688.151 1257.69,688.151 1258.25,688.151 1258.81,688.151 1259.36,688.151 1259.92,688.151 1260.48,688.151 1261.04,688.151 1261.6,688.151 1262.16,688.151 1262.72,688.151 1263.28,688.151 1263.84,688.151 1264.4,688.151 1264.96,688.151 1265.52,688.151 1266.08,688.151 1266.63,688.151 1267.19,688.151 1267.75,688.151 1268.31,688.151 1268.87,688.151 1269.43,688.151 1269.99,688.151 1270.55,688.151 1271.11,688.151 1271.67,688.151 1272.23,688.151 1272.79,688.151 1273.35,688.151 1273.91,688.151 1274.46,688.151 1275.02,688.151 1275.58,688.151 1276.14,688.151 1276.7,688.151 1277.26,688.151 1277.82,688.151 1278.38,688.151 1278.94,688.151 1279.5,688.151 1280.06,688.151 1280.62,688.151 1281.18,688.151 1281.73,688.151 1282.29,688.151 1282.85,688.151 1283.41,688.151 1283.97,688.151 1284.53,688.151 1285.09,688.151 1285.65,688.151 1286.21,688.151 1286.77,688.151 1287.33,688.151 1287.89,688.151 1288.45,688.151 1289,688.151 1289.56,688.151 1290.12,688.151 1290.68,688.151 1291.24,688.151 1291.8,688.151 1292.36,688.151 1292.92,688.151 1293.48,688.151 1294.04,688.151 1294.6,688.151 1295.16,688.151 1295.72,688.151 1296.28,688.151 1296.83,688.151 1297.39,688.151 1297.95,688.151 1298.51,688.151 1299.07,688.151 1299.63,688.151 1300.19,688.151 1300.75,688.151 1301.31,688.151 1301.87,688.151 1302.43,688.151 1302.99,688.151 1303.55,688.151 1304.1,688.151 1304.66,688.151 1305.22,688.151 1305.78,688.151 1306.34,688.151 1306.9,688.151 1307.46,688.151 1308.02,688.151 1308.58,688.151 1309.14,688.151 1309.7,688.151 1310.26,688.151 1310.82,688.151 1311.38,688.151 1311.93,688.151 1312.49,688.151 1313.05,688.151 1313.61,688.151 1314.17,688.151 1314.73,688.151 1315.29,688.151 1315.85,688.151 1316.41,688.151 1316.97,688.151 1317.53,688.151 1318.09,688.151 1318.65,688.151 1319.2,688.151 1319.76,688.151 1320.32,688.151 1320.88,688.151 1321.44,688.151 1322,688.151 1322.56,688.151 1323.12,688.151 1323.68,688.151 1324.24,688.151 1324.8,688.151 1325.36,688.151 1325.92,688.151 1326.47,688.151 1327.03,688.151 1327.59,688.151 1328.15,688.151 1328.71,688.151 1329.27,688.151 1329.83,688.151 1330.39,688.151 1330.95,688.151 1331.51,688.151 1332.07,688.151 1332.63,688.151 1333.19,688.151 1333.75,688.151 1334.3,688.151 1334.86,688.151 1335.42,688.151 1335.98,688.151 1336.54,688.151 1337.1,688.151 1337.66,688.151 1338.22,688.151 1338.78,688.151 1339.34,688.151 1339.9,688.151 1340.46,688.151 1341.02,688.151 1341.57,688.151 1342.13,688.151 1342.69,688.151 1343.25,688.151 1343.81,688.151 1344.37,688.151 1344.93,688.151 1345.49,688.151 1346.05,688.151 1346.61,688.151 1347.17,688.151 1347.73,688.151 1348.29,688.151 1348.84,688.151 1349.4,688.151 1349.96,688.151 1350.52,688.151 1351.08,688.151 1351.64,688.151 1352.2,688.151 1352.76,688.151 1353.32,688.151 1353.88,688.151 1354.44,688.151 1355,688.151 1355.56,688.151 1356.12,688.151 1356.67,688.151 1357.23,688.151 1357.79,688.151 1358.35,688.151 1358.91,688.151 1359.47,688.151 1360.03,688.151 1360.59,688.151 1361.15,688.151 1361.71,688.151 1362.27,688.151 1362.83,688.151 1363.39,688.151 1363.94,688.151 1364.5,688.151 1365.06,688.151 1365.62,688.151 1366.18,688.151 1366.74,688.151 1367.3,688.151 1367.86,688.151 1368.42,688.151 1368.98,688.151 1369.54,688.151 1370.1,688.151 1370.66,688.151 1371.21,688.151 1371.77,688.151 1372.33,688.151 1372.89,688.151 1373.45,688.151 1374.01,688.151 1374.57,688.151 1375.13,688.151 1375.69,688.151 1376.25,688.151 1376.81,688.151 1377.37,688.151 1377.93,688.151 1378.49,688.151 1379.04,688.151 1379.6,688.151 1380.16,688.151 1380.72,688.151 1381.28,688.151 1381.84,688.151 1382.4,688.151 1382.96,688.151 1383.52,688.151 1384.08,688.151 1384.64,688.151 1385.2,688.151 1385.76,688.151 1386.31,688.151 1386.87,688.151 1387.43,688.151 1387.99,688.151 1388.55,688.151 1389.11,688.151 1389.67,688.151 1390.23,688.151 1390.79,688.151 1391.35,688.151 1391.91,688.151 1392.47,688.151 1393.03,688.151 1393.58,688.151 1394.14,688.151 1394.7,688.151 1395.26,688.151 1395.82,688.151 1396.38,688.151 1396.94,688.151 1397.5,688.151 1398.06,688.151 1398.62,688.151 1399.18,688.151 1399.74,688.151 1400.3,688.151 1400.86,688.151 1401.41,688.151 1401.97,688.151 1402.53,688.151 1403.09,688.151 1403.65,688.151 1404.21,688.151 1404.77,688.151 1405.33,688.151 1405.89,688.151 1406.45,688.151 1407.01,688.151 1407.57,688.151 1408.13,688.151 1408.68,688.151 1409.24,688.151 1409.8,688.151 1410.36,688.151 1410.92,688.151 1411.48,688.151 1412.04,688.151 1412.6,688.151 1413.16,688.151 1413.72,688.151 1414.28,688.151 1414.84,688.151 1415.4,688.151 1415.95,688.151 1416.51,688.151 1417.07,688.151 1417.63,688.151 1418.19,688.151 1418.75,688.151 1419.31,688.151 1419.87,688.151 1420.43,688.151 1420.99,688.151 1421.55,688.151 1422.11,688.151 1422.67,688.151 1423.23,688.151 1423.78,688.151 1424.34,688.151 1424.9,688.151 1425.46,688.151 1426.02,688.151 1426.58,688.151 1427.14,688.151 1427.7,688.151 1428.26,688.151 1428.82,688.151 1429.38,688.151 1429.94,688.151 1430.5,688.151 1431.05,688.151 1431.61,688.151 1432.17,688.151 1432.73,688.151 1433.29,688.151 1433.85,688.151 1434.41,688.151 1434.97,688.151 1435.53,688.151 1436.09,688.151 1436.65,688.151 1437.21,688.151 1437.77,688.151 1438.33,688.151 1438.88,688.151 1439.44,688.151 1440,688.151 1440.56,688.151 1441.12,688.151 1441.68,688.151 1442.24,688.151 1442.8,688.151 1443.36,688.151 1443.92,688.151 1444.48,688.151 1445.04,688.151 1445.6,688.151 1446.15,688.151 1446.71,688.151 1447.27,688.151 1447.83,688.151 1448.39,688.151 1448.95,688.151 1449.51,688.151 1450.07,688.151 1450.63,688.151 1451.19,688.151 1451.75,688.151 1452.31,688.151 1452.87,688.151 1453.42,688.151 1453.98,688.151 1454.54,688.151 1455.1,688.151 1455.66,688.151 1456.22,688.151 1456.78,688.151 1457.34,688.151 1457.9,688.151 1458.46,688.151 1459.02,688.151 1459.58,688.151 1460.14,688.151 1460.7,688.151 1461.25,688.151 1461.81,688.151 1462.37,688.151 1462.93,688.151 1463.49,688.151 1464.05,688.151 1464.61,688.151 1465.17,688.151 1465.73,688.151 1466.29,688.151 1466.85,688.151 1467.41,688.151 1467.97,688.151 1468.52,688.151 1469.08,688.151 1469.64,688.151 1470.2,688.151 1470.76,688.151 1471.32,688.151 1471.88,688.151 1472.44,688.151 1473,688.151 1473.56,688.151 1474.12,688.151 1474.68,688.151 1475.24,688.151 1475.79,688.151 1476.35,688.151 1476.91,688.151 1477.47,688.151 1478.03,688.151 1478.59,688.151 1479.15,688.151 1479.71,688.151 1480.27,688.151 1480.83,688.151 1481.39,688.151 1481.95,688.151 1482.51,688.151 1483.07,688.151 1483.62,688.151 1484.18,688.151 1484.74,688.151 1485.3,688.151 1485.86,688.151 1486.42,688.151 1486.98,688.151 1487.54,688.151 1488.1,688.151 1488.66,688.151 1489.22,688.151 1489.78,688.151 1490.34,688.151 1490.89,688.151 1491.45,688.151 1492.01,688.151 1492.57,688.151 1493.13,688.151 1493.69,688.151 1494.25,688.151 1494.81,688.151 1495.37,688.151 1495.93,688.151 1496.49,688.151 1497.05,688.151 1497.61,688.151 1498.16,688.151 1498.72,688.151 1499.28,688.151 1499.84,688.151 1500.4,688.151 1500.96,688.151 1501.52,688.151 1502.08,688.151 1502.64,688.151 1503.2,688.151 1503.76,688.151 1504.32,688.151 1504.88,688.151 1505.44,688.151 1505.99,688.151 1506.55,688.151 1507.11,688.151 1507.67,688.151 1508.23,688.151 1508.79,688.151 1509.35,688.151 1509.91,688.151 1510.47,688.151 1511.03,688.151 1511.59,688.151 1512.15,688.151 1512.71,688.151 1513.26,688.151 1513.82,688.151 1514.38,688.151 1514.94,688.151 1515.5,688.151 1516.06,688.151 1516.62,688.151 1517.18,688.151 1517.74,688.151 1518.3,688.151 1518.86,688.151 1519.42,688.151 1519.98,688.151 1520.53,688.151 1521.09,688.151 1521.65,688.151 1522.21,688.151 1522.77,688.151 1523.33,688.151 1523.89,688.151 1524.45,688.151 1525.01,688.151 1525.57,688.151 1526.13,688.151 1526.69,688.151 1527.25,688.151 1527.81,688.151 1528.36,688.151 1528.92,688.151 1529.48,688.151 1530.04,688.151 1530.6,688.151 1531.16,688.151 1531.72,688.151 1532.28,688.151 1532.84,688.151 1533.4,688.151 1533.96,688.151 1534.52,688.151 1535.08,688.151 1535.63,688.151 1536.19,688.151 1536.75,688.151 1537.31,688.151 1537.87,688.151 1538.43,688.151 1538.99,688.151 1539.55,688.151 1540.11,688.151 1540.67,688.151 1541.23,688.151 1541.79,688.151 1542.35,688.151 1542.9,688.151 1543.46,688.151 1544.02,688.151 1544.58,688.151 1545.14,688.151 1545.7,688.151 1546.26,688.151 1546.82,688.151 1547.38,688.151 1547.94,688.151 1548.5,688.151 1549.06,688.151 1549.62,688.151 1550.18,688.151 1550.73,688.151 1551.29,688.151 1551.85,688.151 1552.41,688.151 1552.97,688.151 1553.53,688.151 1554.09,688.151 1554.65,688.151 1555.21,688.151 1555.77,688.151 1556.33,688.151 1556.89,688.151 1557.45,688.151 1558,688.151 1558.56,688.151 1559.12,688.151 1559.68,688.151 1560.24,688.151 1560.8,688.151 1561.36,688.151 1561.92,688.151 1562.48,688.151 1563.04,688.151 1563.6,688.151 1564.16,688.151 1564.72,688.151 1565.28,688.151 1565.83,688.151 1566.39,688.151 1566.95,688.151 1567.51,688.151 1568.07,688.151 1568.63,688.151 1569.19,688.151 1569.75,688.151 1570.31,688.151 1570.87,688.151 1571.43,688.151 1571.99,688.151 1572.55,688.151 1573.1,688.151 1573.66,688.151 1574.22,688.151 1574.78,688.151 1575.34,688.151 1575.9,688.151 1576.46,688.151 1577.02,688.151 1577.58,688.151 1578.14,688.151 1578.7,688.151 1579.26,688.151 1579.82,688.151 1580.37,688.151 1580.93,688.151 1581.49,688.151 1582.05,688.151 1582.61,688.151 1583.17,688.151 1583.73,688.151 1584.29,688.151 1584.85,688.151 1585.41,688.151 1585.97,688.151 1586.53,688.151 1587.09,688.151 1587.65,688.151 1588.2,688.151 1588.76,688.151 1589.32,688.151 1589.88,688.151 1590.44,688.151 1591,688.151 1591.56,688.151 1592.12,688.151 1592.68,688.151 1593.24,688.151 1593.8,688.151 1594.36,688.151 1594.92,688.151 1595.47,688.151 1596.03,688.151 1596.59,688.151 1597.15,688.151 1597.71,688.151 1598.27,688.151 1598.83,688.151 1599.39,688.151 1599.95,688.151 1600.51,688.151 1601.07,688.151 1601.63,688.151 1602.19,688.151 1602.74,688.151 1603.3,688.151 1603.86,688.151 1604.42,688.151 1604.98,688.151 1605.54,688.151 1606.1,688.151 1606.66,688.151 1607.22,688.151 1607.78,688.151 1608.34,688.151 1608.9,688.151 1609.46,688.151 1610.02,688.151 1610.57,688.151 1611.13,688.151 1611.69,688.151 1612.25,688.151 1612.81,688.151 1613.37,688.151 1613.93,688.151 1614.49,688.151 1615.05,688.151 1615.61,688.151 1616.17,688.151 1616.73,688.151 1617.29,688.151 1617.84,688.151 1618.4,688.151 1618.96,688.151 1619.52,688.151 1620.08,688.151 1620.64,688.151 1621.2,688.151 1621.76,688.151 1622.32,688.151 1622.88,688.151 1623.44,688.151 1624,688.151 1624.56,688.151 1625.11,688.151 1625.67,688.151 1626.23,688.151 1626.79,688.151 1627.35,688.151 1627.91,688.151 1628.47,688.151 1629.03,688.151 1629.59,688.151 1630.15,688.151 1630.71,688.151 1631.27,688.151 1631.83,688.151 1632.39,688.151 1632.94,688.151 1633.5,688.151 1634.06,688.151 1634.62,688.151 1635.18,688.151 1635.74,688.151 1636.3,688.151 1636.86,688.151 1637.42,688.151 1637.98,688.151 1638.54,688.151 1639.1,688.151 1639.66,688.151 1640.21,688.151 1640.77,688.151 1641.33,688.151 1641.89,688.151 1642.45,688.151 1643.01,688.151 1643.57,688.151 1644.13,688.151 1644.69,688.151 1645.25,688.151 1645.81,688.151 1646.37,688.151 1646.93,688.151 1647.48,688.151 1648.04,688.151 1648.6,688.151 1649.16,688.151 1649.72,688.151 1650.28,688.151 1650.84,688.151 1651.4,688.151 1651.96,688.151 1652.52,688.151 1653.08,688.151 1653.64,688.151 1654.2,688.151 1654.76,688.151 1655.31,688.151 1655.87,688.151 1656.43,688.151 1656.99,688.151 1657.55,688.151 1658.11,688.151 1658.67,688.151 1659.23,688.151 1659.79,688.151 1660.35,688.151 1660.91,688.151 1661.47,688.151 1662.03,688.151 1662.58,688.151 1663.14,688.151 1663.7,688.151 1664.26,688.151 1664.82,688.151 1665.38,688.151 1665.94,688.151 1666.5,688.151 1667.06,688.151 1667.62,688.151 1668.18,688.151 1668.74,688.151 1669.3,688.151 1669.85,688.151 1670.41,688.151 1670.97,688.151 1671.53,688.151 1672.09,688.151 1672.65,688.151 1673.21,688.151 1673.77,688.151 1674.33,688.151 1674.89,688.151 1675.45,688.151 1676.01,688.151 1676.57,688.151 1677.13,688.151 1677.68,688.151 1678.24,688.151 1678.8,688.151 1679.36,688.151 1679.92,688.151 1680.48,688.151 1681.04,688.151 1681.6,688.151 1682.16,688.151 1682.72,688.151 1683.28,688.151 1683.84,688.151 1684.4,688.151 1684.95,688.151 1685.51,688.151 1686.07,688.151 1686.63,688.151 1687.19,688.151 1687.75,688.151 1688.31,688.151 1688.87,688.151 1689.43,688.151 1689.99,688.151 1690.55,688.151 1691.11,688.151 1691.67,688.151 1692.23,688.151 1692.78,688.151 1693.34,688.151 1693.9,688.151 1694.46,688.151 1695.02,688.151 1695.58,688.151 1696.14,688.151 1696.7,688.151 1697.26,688.151 1697.82,688.151 1698.38,688.151 1698.94,688.151 1699.5,688.151 1700.05,688.151 1700.61,688.151 1701.17,688.151 1701.73,688.151 1702.29,688.151 1702.85,688.151 1703.41,688.151 1703.97,688.151 1704.53,688.151 1705.09,688.151 1705.65,688.151 1706.21,688.151 1706.77,688.151 1707.32,688.151 1707.88,688.151 1708.44,688.151 1709,688.151 1709.56,688.151 1710.12,688.151 1710.68,688.151 1711.24,688.151 1711.8,688.151 1712.36,688.151 1712.92,688.151 1713.48,688.151 1714.04,688.151 1714.6,688.151 1715.15,688.151 1715.71,688.151 1716.27,688.151 1716.83,688.151 1717.39,688.151 1717.95,688.151 1718.51,688.151 1719.07,688.151 1719.63,688.151 1720.19,688.151 1720.75,688.151 1721.31,688.151 1721.87,688.151 1722.42,688.151 1722.98,688.151 1723.54,688.151 1724.1,688.151 1724.66,688.151 1725.22,688.151 1725.78,688.151 1726.34,688.151 1726.9,688.151 1727.46,688.151 1728.02,688.151 1728.58,688.151 1729.14,688.151 1729.69,688.151 1730.25,688.151 1730.81,688.151 1731.37,688.151 1731.93,688.151 1732.49,688.151 1733.05,688.151 1733.61,688.151 1734.17,688.151 1734.73,688.151 1735.29,688.151 1735.85,688.151 1736.41,688.151 1736.97,688.151 1737.52,688.151 1738.08,688.151 1738.64,688.151 1739.2,688.151 1739.76,688.151 1740.32,688.151 1740.88,688.151 1741.44,688.151 1742,688.151 1742.56,688.151 1743.12,688.151 1743.68,688.151 1744.24,688.151 1744.79,688.151 1745.35,688.151 1745.91,688.151 1746.47,688.151 1747.03,688.151 1747.59,688.151 1748.15,688.151 1748.71,688.151 1749.27,688.151 1749.83,688.151 1750.39,688.151 1750.95,688.151 1751.51,688.151 1752.06,688.151 1752.62,688.151 1753.18,688.151 1753.74,688.151 1754.3,688.151 1754.86,688.151 1755.42,688.151 1755.98,688.151 1756.54,688.151 1757.1,688.151 1757.66,688.151 1758.22,688.151 1758.78,688.151 1759.34,688.151 1759.89,688.151 1760.45,688.151 1761.01,688.151 1761.57,688.151 1762.13,688.151 1762.69,688.151 1763.25,688.151 1763.81,688.151 1764.37,688.151 1764.93,688.151 1765.49,688.151 1766.05,688.151 1766.61,688.151 1767.16,688.151 1767.72,688.151 1768.28,688.151 1768.84,688.151 1769.4,688.151 1769.96,688.151 1770.52,688.151 1771.08,688.151 1771.64,688.151 1772.2,688.151 1772.76,688.151 1773.32,688.151 1773.88,688.151 1774.43,688.151 1774.99,688.151 1775.55,688.151 1776.11,688.151 1776.67,688.151 1777.23,688.151 1777.79,688.151 1778.35,688.151 1778.91,688.151 1779.47,688.151 1780.03,688.151 1780.59,688.151 1781.15,688.151 1781.71,688.151 1782.26,688.151 1782.82,688.151 1783.38,688.151 1783.94,688.151 1784.5,688.151 1785.06,688.151 1785.62,688.151 1786.18,688.151 1786.74,688.151 1787.3,688.151 1787.86,688.151 1788.42,688.151 1788.98,688.151 1789.53,688.151 1790.09,688.151 1790.65,688.151 1791.21,688.151 1791.77,688.151 1792.33,688.151 1792.89,688.151 1793.45,688.151 1794.01,688.151 1794.57,688.151 1795.13,688.151 1795.69,688.151 1796.25,688.151 1796.8,688.151 1797.36,688.151 1797.92,688.151 1798.48,688.151 1799.04,688.151 1799.6,688.151 1800.16,688.151 1800.72,688.151 1801.28,688.151 1801.84,688.151 1802.4,688.151 1802.96,688.151 1803.52,688.151 1804.08,688.151 1804.63,688.151 1805.19,688.151 1805.75,688.151 1806.31,688.151 1806.87,688.151 1807.43,688.151 1807.99,688.151 1808.55,688.151 1809.11,688.151 1809.67,688.151 1810.23,688.151 1810.79,688.151 1811.35,688.151 1811.9,688.151 1812.46,688.151 1813.02,688.151 1813.58,688.151 1814.14,688.151 1814.7,688.151 1815.26,688.151 1815.82,688.151 1816.38,688.151 1816.94,688.151 1817.5,688.151 1818.06,688.151 1818.62,688.151 1819.18,688.151 1819.73,688.151 1820.29,688.151 1820.85,688.151 1821.41,688.151 1821.97,688.151 1822.53,688.151 1823.09,688.151 1823.65,688.151 1824.21,688.151 1824.77,688.151 1825.33,688.151 1825.89,688.151 1826.45,688.151 1827,688.151 1827.56,688.151 1828.12,688.151 1828.68,688.151 1829.24,688.151 1829.8,688.151 1830.36,688.151 1830.92,688.151 1831.48,688.151 1832.04,688.151 1832.6,688.151 1833.16,688.151 1833.72,688.151 1834.27,688.151 1834.83,688.151 1835.39,688.151 1835.95,688.151 1836.51,688.151 1837.07,688.151 1837.63,688.151 1838.19,688.151 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 684.896 L720.806 684.896 L721.365 684.896 L721.924 684.896 L722.484 684.896 L723.043 684.896 L723.602 684.896 L724.161 684.896 L724.721 684.896 L725.28 684.896 L725.839 684.896 L726.398 684.896 L726.958 684.896 L727.517 684.896 L728.076 684.896 L728.635 684.896 L729.195 684.896 L729.754 684.896 L730.313 684.896 L730.872 684.896 L731.432 684.896 L731.991 684.896 L732.55 684.896 L733.109 684.896 L733.669 684.896 L734.228 684.896 L734.787 684.896 L735.346 684.896 L735.906 684.896 L736.465 684.896 L737.024 684.896 L737.583 684.896 L738.143 684.896 L738.702 684.896 L739.261 684.896 L739.82 684.896 L740.38 684.896 L740.939 684.896 L741.498 684.896 L742.057 684.896 L742.617 684.896 L743.176 684.896 L743.735 684.896 L744.294 684.896 L744.854 684.896 L745.413 684.896 L745.972 684.896 L746.531 684.896 L747.091 684.896 L747.65 684.896 L748.209 684.896 L748.768 684.896 L749.328 684.896 L749.887 684.896 L750.446 684.896 L751.005 684.896 L751.565 684.896 L752.124 684.896 L752.683 684.896 L753.242 684.896 L753.802 684.896 L754.361 684.896 L754.92 684.896 L755.479 684.896 L756.039 684.896 L756.598 684.896 L757.157 684.896 L757.716 684.896 L758.276 684.896 L758.835 684.896 L759.394 684.896 L759.953 684.896 L760.513 684.896 L761.072 684.896 L761.631 684.896 L762.19 684.896 L762.75 684.896 L763.309 684.896 L763.868 684.896 L764.427 684.896 L764.987 684.896 L765.546 684.896 L766.105 684.896 L766.664 684.896 L767.224 684.896 L767.783 684.896 L768.342 684.896 L768.901 684.896 L769.461 684.896 L770.02 684.896 L770.579 684.896 L771.138 684.896 L771.698 684.896 L772.257 684.896 L772.816 684.896 L773.375 684.896 L773.935 684.896 L774.494 684.896 L775.053 684.896 L775.612 684.896 L776.172 684.896 L776.731 684.896 L777.29 684.896 L777.849 684.896 L778.409 684.896 L778.968 684.896 L779.527 684.896 L780.086 684.896 L780.646 684.896 L781.205 684.896 L781.764 684.896 L782.323 684.896 L782.883 684.896 L783.442 684.896 L784.001 684.896 L784.56 684.896 L785.12 684.896 L785.679 684.896 L786.238 684.896 L786.797 684.896 L787.357 684.896 L787.916 684.896 L788.475 684.896 L789.034 684.896 L789.594 684.896 L790.153 684.896 L790.712 684.896 L791.271 684.896 L791.831 684.896 L792.39 684.896 L792.949 684.896 L793.508 684.896 L794.068 684.896 L794.627 684.896 L795.186 684.896 L795.745 684.896 L796.305 684.896 L796.864 684.896 L797.423 684.896 L797.982 684.896 L798.542 684.896 L799.101 684.896 L799.66 684.896 L800.219 684.896 L800.779 684.896 L801.338 684.896 L801.897 684.896 L802.456 684.896 L803.016 684.896 L803.575 684.896 L804.134 684.896 L804.693 684.896 L805.253 684.896 L805.812 684.896 L806.371 684.896 L806.931 684.896 L807.49 684.896 L808.049 684.896 L808.608 684.896 L809.168 684.896 L809.727 684.896 L810.286 684.896 L810.845 684.896 L811.405 684.896 L811.964 684.896 L812.523 684.896 L813.082 684.896 L813.642 684.896 L814.201 684.896 L814.76 684.896 L815.319 684.896 L815.879 684.896 L816.438 684.896 L816.997 684.896 L817.556 684.896 L818.116 684.896 L818.675 684.896 L819.234 684.896 L819.793 684.896 L820.353 684.896 L820.912 684.896 L821.471 684.896 L822.03 684.896 L822.59 684.896 L823.149 684.896 L823.708 684.896 L824.267 684.896 L824.827 684.896 L825.386 684.896 L825.945 684.896 L826.504 684.896 L827.064 684.896 L827.623 684.896 L828.182 684.896 L828.741 684.896 L829.301 684.896 L829.86 684.896 L830.419 684.896 L830.978 684.896 L831.538 684.896 L832.097 684.896 L832.656 684.896 L833.215 684.896 L833.775 684.896 L834.334 684.896 L834.893 684.896 L835.452 684.896 L836.012 684.896 L836.571 684.896 L837.13 684.896 L837.689 684.896 L838.249 684.896 L838.808 684.896 L839.367 684.896 L839.926 684.896 L840.486 684.896 L841.045 684.896 L841.604 684.896 L842.163 684.896 L842.723 684.896 L843.282 684.896 L843.841 684.896 L844.4 684.896 L844.96 684.896 L845.519 684.896 L846.078 684.896 L846.637 684.896 L847.197 684.896 L847.756 684.896 L848.315 684.896 L848.874 684.896 L849.434 684.896 L849.993 684.896 L850.552 684.896 L851.111 684.896 L851.671 684.896 L852.23 684.896 L852.789 684.896 L853.348 684.896 L853.908 684.896 L854.467 684.896 L855.026 684.896 L855.585 684.896 L856.145 684.896 L856.704 684.896 L857.263 684.896 L857.822 684.896 L858.382 684.896 L858.941 684.896 L859.5 684.896 L860.059 684.896 L860.619 684.896 L861.178 684.896 L861.737 684.896 L862.296 684.896 L862.856 684.896 L863.415 684.896 L863.974 684.896 L864.533 684.896 L865.093 684.896 L865.652 684.896 L866.211 684.896 L866.77 684.896 L867.33 684.896 L867.889 684.896 L868.448 684.896 L869.007 684.896 L869.567 684.896 L870.126 684.896 L870.685 684.896 L871.244 684.896 L871.804 684.896 L872.363 684.896 L872.922 684.896 L873.481 684.896 L874.041 684.896 L874.6 684.896 L875.159 684.896 L875.718 684.896 L876.278 684.896 L876.837 684.896 L877.396 684.896 L877.955 684.896 L878.515 684.896 L879.074 684.896 L879.633 684.896 L880.192 684.896 L880.752 684.896 L881.311 684.896 L881.87 684.896 L882.429 684.896 L882.989 684.896 L883.548 684.896 L884.107 684.896 L884.666 684.896 L885.226 684.896 L885.785 684.896 L886.344 684.896 L886.903 684.896 L887.463 684.896 L888.022 684.896 L888.581 684.896 L889.14 684.896 L889.7 684.896 L890.259 684.896 L890.818 684.896 L891.377 684.896 L891.937 684.896 L892.496 684.896 L893.055 684.896 L893.614 684.896 L894.174 684.896 L894.733 684.896 L895.292 684.896 L895.851 684.896 L896.411 684.896 L896.97 684.896 L897.529 684.896 L898.088 684.896 L898.648 684.896 L899.207 684.896 L899.766 684.896 L900.325 684.896 L900.885 684.896 L901.444 684.896 L902.003 684.896 L902.562 684.896 L903.122 684.896 L903.681 684.896 L904.24 684.896 L904.799 684.896 L905.359 684.896 L905.918 684.896 L906.477 684.896 L907.036 684.896 L907.596 684.896 L908.155 684.896 L908.714 684.896 L909.273 684.896 L909.833 684.896 L910.392 684.896 L910.951 684.896 L911.51 684.896 L912.07 684.896 L912.629 684.896 L913.188 684.896 L913.747 684.896 L914.307 684.896 L914.866 684.896 L915.425 684.896 L915.984 684.896 L916.544 684.896 L917.103 684.896 L917.662 684.896 L918.221 684.896 L918.781 684.896 L919.34 684.896 L919.899 684.896 L920.458 684.896 L921.018 684.896 L921.577 684.896 L922.136 684.896 L922.695 684.896 L923.255 684.896 L923.814 684.896 L924.373 684.896 L924.932 684.896 L925.492 684.896 L926.051 684.896 L926.61 684.896 L927.169 684.896 L927.729 684.896 L928.288 684.896 L928.847 684.896 L929.406 684.896 L929.966 684.896 L930.525 684.896 L931.084 684.896 L931.644 684.896 L932.203 684.896 L932.762 684.896 L933.321 684.896 L933.881 684.896 L934.44 684.896 L934.999 684.896 L935.558 684.896 L936.118 684.896 L936.677 684.896 L937.236 684.896 L937.795 684.896 L938.355 684.896 L938.914 684.896 L939.473 684.896 L940.032 684.896 L940.592 684.896 L941.151 684.896 L941.71 684.896 L942.269 684.896 L942.829 684.896 L943.388 684.896 L943.947 684.896 L944.506 684.896 L945.066 684.896 L945.625 684.896 L946.184 684.896 L946.743 684.896 L947.303 684.896 L947.862 684.896 L948.421 684.896 L948.98 684.896 L949.54 684.896 L950.099 684.896 L950.658 684.896 L951.217 684.896 L951.777 684.896 L952.336 684.896 L952.895 684.896 L953.454 684.896 L954.014 684.896 L954.573 684.896 L955.132 684.896 L955.691 684.896 L956.251 684.896 L956.81 684.896 L957.369 684.896 L957.928 684.896 L958.488 684.896 L959.047 684.896 L959.606 684.896 L960.165 684.896 L960.725 684.896 L961.284 684.896 L961.843 684.896 L962.402 684.896 L962.962 684.896 L963.521 684.896 L964.08 684.896 L964.639 684.896 L965.199 684.896 L965.758 684.896 L966.317 684.896 L966.876 684.896 L967.436 684.896 L967.995 684.896 L968.554 684.896 L969.113 684.896 L969.673 684.896 L970.232 684.896 L970.791 684.896 L971.35 684.896 L971.91 684.896 L972.469 684.896 L973.028 684.896 L973.587 684.896 L974.147 684.896 L974.706 684.896 L975.265 684.896 L975.824 684.896 L976.384 684.896 L976.943 684.896 L977.502 684.896 L978.061 684.896 L978.621 684.896 L979.18 684.896 L979.739 684.896 L980.298 684.896 L980.858 684.896 L981.417 684.896 L981.976 684.896 L982.535 684.896 L983.095 684.896 L983.654 684.896 L984.213 684.896 L984.772 684.896 L985.332 684.896 L985.891 684.896 L986.45 684.896 L987.009 684.896 L987.569 684.896 L988.128 684.896 L988.687 684.896 L989.246 684.896 L989.806 684.896 L990.365 684.896 L990.924 684.896 L991.483 684.896 L992.043 684.896 L992.602 684.896 L993.161 684.896 L993.72 684.896 L994.28 684.896 L994.839 684.896 L995.398 684.896 L995.957 684.896 L996.517 684.896 L997.076 684.896 L997.635 684.896 L998.194 684.896 L998.754 684.896 L999.313 684.896 L999.872 684.896 L1000.43 684.896 L1000.99 684.896 L1001.55 684.896 L1002.11 684.896 L1002.67 684.896 L1003.23 684.896 L1003.79 684.896 L1004.35 684.896 L1004.91 684.896 L1005.46 684.896 L1006.02 684.896 L1006.58 684.896 L1007.14 684.896 L1007.7 684.896 L1008.26 684.896 L1008.82 684.896 L1009.38 684.896 L1009.94 684.896 L1010.5 684.896 L1011.06 684.896 L1011.62 684.896 L1012.18 684.896 L1012.73 684.896 L1013.29 684.896 L1013.85 684.896 L1014.41 684.896 L1014.97 684.896 L1015.53 684.896 L1016.09 684.896 L1016.65 684.896 L1017.21 684.896 L1017.77 684.896 L1018.33 684.896 L1018.89 684.896 L1019.45 684.896 L1020.01 684.896 L1020.56 684.896 L1021.12 684.896 L1021.68 684.896 L1022.24 684.896 L1022.8 684.896 L1023.36 684.896 L1023.92 684.896 L1024.48 684.896 L1025.04 684.896 L1025.6 684.896 L1026.16 684.896 L1026.72 684.896 L1027.28 684.896 L1027.83 684.896 L1028.39 684.896 L1028.95 684.896 L1029.51 684.896 L1030.07 684.896 L1030.63 684.896 L1031.19 684.896 L1031.75 684.896 L1032.31 684.896 L1032.87 684.896 L1033.43 684.896 L1033.99 684.896 L1034.55 684.896 L1035.1 684.896 L1035.66 684.896 L1036.22 684.896 L1036.78 684.896 L1037.34 684.896 L1037.9 684.896 L1038.46 684.896 L1039.02 684.896 L1039.58 684.896 L1040.14 684.896 L1040.7 684.896 L1041.26 684.896 L1041.82 684.896 L1042.38 684.896 L1042.93 684.896 L1043.49 684.896 L1044.05 684.896 L1044.61 684.896 L1045.17 684.896 L1045.73 684.896 L1046.29 684.896 L1046.85 684.896 L1047.41 684.896 L1047.97 684.896 L1048.53 684.896 L1049.09 684.896 L1049.65 684.896 L1050.2 684.896 L1050.76 684.896 L1051.32 684.896 L1051.88 684.896 L1052.44 684.896 L1053 684.896 L1053.56 684.896 L1054.12 684.896 L1054.68 684.896 L1055.24 684.896 L1055.8 684.896 L1056.36 684.896 L1056.92 684.896 L1057.48 684.896 L1058.03 684.896 L1058.59 684.896 L1059.15 684.896 L1059.71 684.896 L1060.27 684.896 L1060.83 684.896 L1061.39 684.896 L1061.95 684.896 L1062.51 684.896 L1063.07 684.896 L1063.63 684.896 L1064.19 684.896 L1064.75 684.896 L1065.3 684.896 L1065.86 684.896 L1066.42 684.896 L1066.98 684.896 L1067.54 684.896 L1068.1 684.896 L1068.66 684.896 L1069.22 684.896 L1069.78 684.896 L1070.34 684.896 L1070.9 684.896 L1071.46 684.896 L1072.02 684.896 L1072.57 684.896 L1073.13 684.896 L1073.69 684.896 L1074.25 684.896 L1074.81 684.896 L1075.37 684.896 L1075.93 684.896 L1076.49 684.896 L1077.05 684.896 L1077.61 684.896 L1078.17 684.896 L1078.73 684.896 L1079.29 684.896 L1079.85 684.896 L1080.4 684.896 L1080.96 684.896 L1081.52 684.896 L1082.08 684.896 L1082.64 684.896 L1083.2 684.896 L1083.76 684.896 L1084.32 684.896 L1084.88 684.896 L1085.44 684.896 L1086 684.896 L1086.56 684.896 L1087.12 684.896 L1087.67 684.896 L1088.23 684.896 L1088.79 684.896 L1089.35 684.896 L1089.91 684.896 L1090.47 684.896 L1091.03 684.896 L1091.59 684.896 L1092.15 684.896 L1092.71 684.896 L1093.27 684.896 L1093.83 684.896 L1094.39 684.896 L1094.94 684.896 L1095.5 684.896 L1096.06 684.896 L1096.62 684.896 L1097.18 684.896 L1097.74 684.896 L1098.3 684.896 L1098.86 684.896 L1099.42 684.896 L1099.98 684.896 L1100.54 684.896 L1101.1 684.896 L1101.66 684.896 L1102.22 684.896 L1102.77 684.896 L1103.33 684.896 L1103.89 684.896 L1104.45 684.896 L1105.01 684.896 L1105.57 684.896 L1106.13 684.896 L1106.69 684.896 L1107.25 684.896 L1107.81 684.896 L1108.37 684.896 L1108.93 684.896 L1109.49 684.896 L1110.04 684.896 L1110.6 684.896 L1111.16 684.896 L1111.72 684.896 L1112.28 684.896 L1112.84 684.896 L1113.4 684.896 L1113.96 684.896 L1114.52 684.896 L1115.08 684.896 L1115.64 684.896 L1116.2 684.896 L1116.76 684.896 L1117.31 684.896 L1117.87 684.896 L1118.43 684.896 L1118.99 684.896 L1119.55 684.896 L1120.11 684.896 L1120.67 684.896 L1121.23 684.896 L1121.79 684.896 L1122.35 684.896 L1122.91 684.896 L1123.47 684.896 L1124.03 684.896 L1124.59 684.896 L1125.14 684.896 L1125.7 684.896 L1126.26 684.896 L1126.82 684.896 L1127.38 684.896 L1127.94 684.896 L1128.5 684.896 L1129.06 684.896 L1129.62 684.896 L1130.18 684.896 L1130.74 684.896 L1131.3 684.896 L1131.86 684.896 L1132.41 684.896 L1132.97 684.896 L1133.53 684.896 L1134.09 684.896 L1134.65 684.896 L1135.21 684.896 L1135.77 684.896 L1136.33 684.896 L1136.89 684.896 L1137.45 684.896 L1138.01 684.896 L1138.57 684.896 L1139.13 684.896 L1139.68 684.896 L1140.24 684.896 L1140.8 684.896 L1141.36 684.896 L1141.92 684.896 L1142.48 684.896 L1143.04 684.896 L1143.6 684.896 L1144.16 684.896 L1144.72 684.896 L1145.28 684.896 L1145.84 684.896 L1146.4 684.896 L1146.96 684.896 L1147.51 684.896 L1148.07 684.896 L1148.63 684.896 L1149.19 684.896 L1149.75 684.896 L1150.31 684.896 L1150.87 684.896 L1151.43 684.896 L1151.99 684.896 L1152.55 684.896 L1153.11 684.896 L1153.67 684.896 L1154.23 684.896 L1154.78 684.896 L1155.34 684.896 L1155.9 684.896 L1156.46 684.896 L1157.02 684.896 L1157.58 684.896 L1158.14 684.896 L1158.7 684.896 L1159.26 684.896 L1159.82 684.896 L1160.38 684.896 L1160.94 684.896 L1161.5 684.896 L1162.05 684.896 L1162.61 684.896 L1163.17 684.896 L1163.73 684.896 L1164.29 684.896 L1164.85 684.896 L1165.41 684.896 L1165.97 684.896 L1166.53 684.896 L1167.09 684.896 L1167.65 684.896 L1168.21 684.896 L1168.77 684.896 L1169.33 684.896 L1169.88 684.896 L1170.44 684.896 L1171 684.896 L1171.56 684.896 L1172.12 684.896 L1172.68 684.896 L1173.24 684.896 L1173.8 684.896 L1174.36 684.896 L1174.92 684.896 L1175.48 684.896 L1176.04 684.896 L1176.6 684.896 L1177.15 684.896 L1177.71 684.896 L1178.27 684.896 L1178.83 684.896 L1179.39 684.896 L1179.95 684.896 L1180.51 684.896 L1181.07 684.896 L1181.63 684.896 L1182.19 684.896 L1182.75 684.896 L1183.31 684.896 L1183.87 684.896 L1184.43 684.896 L1184.98 684.896 L1185.54 684.896 L1186.1 684.896 L1186.66 684.896 L1187.22 684.896 L1187.78 684.896 L1188.34 684.896 L1188.9 684.896 L1189.46 684.896 L1190.02 684.896 L1190.58 684.896 L1191.14 684.896 L1191.7 684.896 L1192.25 684.896 L1192.81 684.896 L1193.37 684.896 L1193.93 684.896 L1194.49 684.896 L1195.05 684.896 L1195.61 684.896 L1196.17 684.896 L1196.73 684.896 L1197.29 684.896 L1197.85 684.896 L1198.41 684.896 L1198.97 684.896 L1199.52 684.896 L1200.08 684.896 L1200.64 684.896 L1201.2 684.896 L1201.76 684.896 L1202.32 684.896 L1202.88 684.896 L1203.44 684.896 L1204 684.896 L1204.56 684.896 L1205.12 684.896 L1205.68 684.896 L1206.24 684.896 L1206.8 684.896 L1207.35 684.896 L1207.91 684.896 L1208.47 684.896 L1209.03 684.896 L1209.59 684.896 L1210.15 684.896 L1210.71 684.896 L1211.27 684.896 L1211.83 684.896 L1212.39 684.896 L1212.95 684.896 L1213.51 684.896 L1214.07 684.896 L1214.62 684.896 L1215.18 684.896 L1215.74 684.896 L1216.3 684.896 L1216.86 684.896 L1217.42 684.896 L1217.98 684.896 L1218.54 684.896 L1219.1 684.896 L1219.66 684.896 L1220.22 684.896 L1220.78 684.896 L1221.34 684.896 L1221.89 684.896 L1222.45 684.896 L1223.01 684.896 L1223.57 684.896 L1224.13 684.896 L1224.69 684.896 L1225.25 684.896 L1225.81 684.896 L1226.37 684.896 L1226.93 684.896 L1227.49 684.896 L1228.05 684.896 L1228.61 684.896 L1229.17 684.896 L1229.72 684.896 L1230.28 684.896 L1230.84 684.896 L1231.4 684.896 L1231.96 684.896 L1232.52 684.896 L1233.08 684.896 L1233.64 684.896 L1234.2 684.896 L1234.76 684.896 L1235.32 684.896 L1235.88 684.896 L1236.44 684.896 L1236.99 684.896 L1237.55 684.896 L1238.11 684.896 L1238.67 684.896 L1239.23 684.896 L1239.79 684.896 L1240.35 684.896 L1240.91 684.896 L1241.47 684.896 L1242.03 684.896 L1242.59 684.896 L1243.15 684.896 L1243.71 684.896 L1244.26 684.896 L1244.82 684.896 L1245.38 684.896 L1245.94 684.896 L1246.5 684.896 L1247.06 684.896 L1247.62 684.896 L1248.18 684.896 L1248.74 684.896 L1249.3 684.896 L1249.86 684.896 L1250.42 684.896 L1250.98 684.896 L1251.54 684.896 L1252.09 684.896 L1252.65 684.896 L1253.21 684.896 L1253.77 684.896 L1254.33 684.896 L1254.89 684.896 L1255.45 684.896 L1256.01 684.896 L1256.57 684.896 L1257.13 684.896 L1257.69 684.896 L1258.25 684.896 L1258.81 684.896 L1259.36 684.896 L1259.92 684.896 L1260.48 684.896 L1261.04 684.896 L1261.6 684.896 L1262.16 684.896 L1262.72 684.896 L1263.28 684.896 L1263.84 684.896 L1264.4 684.896 L1264.96 684.896 L1265.52 684.896 L1266.08 684.896 L1266.63 684.896 L1267.19 684.896 L1267.75 684.896 L1268.31 684.896 L1268.87 684.896 L1269.43 684.896 L1269.99 684.896 L1270.55 684.896 L1271.11 684.896 L1271.67 684.896 L1272.23 684.896 L1272.79 684.896 L1273.35 684.896 L1273.91 684.896 L1274.46 684.896 L1275.02 684.896 L1275.58 684.896 L1276.14 684.896 L1276.7 684.896 L1277.26 684.896 L1277.82 684.896 L1278.38 684.896 L1278.94 684.896 L1279.5 684.896 L1280.06 684.896 L1280.62 684.896 L1281.18 684.896 L1281.73 684.896 L1282.29 684.896 L1282.85 684.896 L1283.41 684.896 L1283.97 684.896 L1284.53 684.896 L1285.09 684.896 L1285.65 684.896 L1286.21 684.896 L1286.77 684.896 L1287.33 684.896 L1287.89 684.896 L1288.45 684.896 L1289 684.896 L1289.56 684.896 L1290.12 684.896 L1290.68 684.896 L1291.24 684.896 L1291.8 684.896 L1292.36 684.896 L1292.92 684.896 L1293.48 684.896 L1294.04 684.896 L1294.6 684.896 L1295.16 684.896 L1295.72 684.896 L1296.28 684.896 L1296.83 684.896 L1297.39 684.896 L1297.95 684.896 L1298.51 684.896 L1299.07 684.896 L1299.63 684.896 L1300.19 684.896 L1300.75 684.896 L1301.31 684.896 L1301.87 684.896 L1302.43 684.896 L1302.99 684.896 L1303.55 684.896 L1304.1 684.896 L1304.66 684.896 L1305.22 684.896 L1305.78 684.896 L1306.34 684.896 L1306.9 684.896 L1307.46 684.896 L1308.02 684.896 L1308.58 684.896 L1309.14 684.896 L1309.7 684.896 L1310.26 684.896 L1310.82 684.896 L1311.38 684.896 L1311.93 684.896 L1312.49 684.896 L1313.05 684.896 L1313.61 684.896 L1314.17 684.896 L1314.73 684.896 L1315.29 684.896 L1315.85 684.896 L1316.41 684.896 L1316.97 684.896 L1317.53 684.896 L1318.09 684.896 L1318.65 684.896 L1319.2 684.896 L1319.76 684.896 L1320.32 684.896 L1320.88 684.896 L1321.44 684.896 L1322 684.896 L1322.56 684.896 L1323.12 684.896 L1323.68 684.896 L1324.24 684.896 L1324.8 684.896 L1325.36 684.896 L1325.92 684.896 L1326.47 684.896 L1327.03 684.896 L1327.59 684.896 L1328.15 684.896 L1328.71 684.896 L1329.27 684.896 L1329.83 684.896 L1330.39 684.896 L1330.95 684.896 L1331.51 684.896 L1332.07 684.896 L1332.63 684.896 L1333.19 684.896 L1333.75 684.896 L1334.3 684.896 L1334.86 684.896 L1335.42 684.896 L1335.98 684.896 L1336.54 684.896 L1337.1 684.896 L1337.66 684.896 L1338.22 684.896 L1338.78 684.896 L1339.34 684.896 L1339.9 684.896 L1340.46 684.896 L1341.02 684.896 L1341.57 684.896 L1342.13 684.896 L1342.69 684.896 L1343.25 684.896 L1343.81 684.896 L1344.37 684.896 L1344.93 684.896 L1345.49 684.896 L1346.05 684.896 L1346.61 684.896 L1347.17 684.896 L1347.73 684.896 L1348.29 684.896 L1348.84 684.896 L1349.4 684.896 L1349.96 684.896 L1350.52 684.896 L1351.08 684.896 L1351.64 684.896 L1352.2 684.896 L1352.76 684.896 L1353.32 684.896 L1353.88 684.896 L1354.44 684.896 L1355 684.896 L1355.56 684.896 L1356.12 684.896 L1356.67 684.896 L1357.23 684.896 L1357.79 684.896 L1358.35 684.896 L1358.91 684.896 L1359.47 684.896 L1360.03 684.896 L1360.59 684.896 L1361.15 684.896 L1361.71 684.896 L1362.27 684.896 L1362.83 684.896 L1363.39 684.896 L1363.94 684.896 L1364.5 684.896 L1365.06 684.896 L1365.62 684.896 L1366.18 684.896 L1366.74 684.896 L1367.3 684.896 L1367.86 684.896 L1368.42 684.896 L1368.98 684.896 L1369.54 684.896 L1370.1 684.896 L1370.66 684.896 L1371.21 684.896 L1371.77 684.896 L1372.33 684.896 L1372.89 684.896 L1373.45 684.896 L1374.01 684.896 L1374.57 684.896 L1375.13 684.896 L1375.69 684.896 L1376.25 684.896 L1376.81 684.896 L1377.37 684.896 L1377.93 684.896 L1378.49 684.896 L1379.04 684.896 L1379.6 684.896 L1380.16 684.896 L1380.72 684.896 L1381.28 684.896 L1381.84 684.896 L1382.4 684.896 L1382.96 684.896 L1383.52 684.896 L1384.08 684.896 L1384.64 684.896 L1385.2 684.896 L1385.76 684.896 L1386.31 684.896 L1386.87 684.896 L1387.43 684.896 L1387.99 684.896 L1388.55 684.896 L1389.11 684.896 L1389.67 684.896 L1390.23 684.896 L1390.79 684.896 L1391.35 684.896 L1391.91 684.896 L1392.47 684.896 L1393.03 684.896 L1393.58 684.896 L1394.14 684.896 L1394.7 684.896 L1395.26 684.896 L1395.82 684.896 L1396.38 684.896 L1396.94 684.896 L1397.5 684.896 L1398.06 684.896 L1398.62 684.896 L1399.18 684.896 L1399.74 684.896 L1400.3 684.896 L1400.86 684.896 L1401.41 684.896 L1401.97 684.896 L1402.53 684.896 L1403.09 684.896 L1403.65 684.896 L1404.21 684.896 L1404.77 684.896 L1405.33 684.896 L1405.89 684.896 L1406.45 684.896 L1407.01 684.896 L1407.57 684.896 L1408.13 684.896 L1408.68 684.896 L1409.24 684.896 L1409.8 684.896 L1410.36 684.896 L1410.92 684.896 L1411.48 684.896 L1412.04 684.896 L1412.6 684.896 L1413.16 684.896 L1413.72 684.896 L1414.28 684.896 L1414.84 684.896 L1415.4 684.896 L1415.95 684.896 L1416.51 684.896 L1417.07 684.896 L1417.63 684.896 L1418.19 684.896 L1418.75 684.896 L1419.31 684.896 L1419.87 684.896 L1420.43 684.896 L1420.99 684.896 L1421.55 684.896 L1422.11 684.896 L1422.67 684.896 L1423.23 684.896 L1423.78 684.896 L1424.34 684.896 L1424.9 684.896 L1425.46 684.896 L1426.02 684.896 L1426.58 684.896 L1427.14 684.896 L1427.7 684.896 L1428.26 684.896 L1428.82 684.896 L1429.38 684.896 L1429.94 684.896 L1430.5 684.896 L1431.05 684.896 L1431.61 684.896 L1432.17 684.896 L1432.73 684.896 L1433.29 684.896 L1433.85 684.896 L1434.41 684.896 L1434.97 684.896 L1435.53 684.896 L1436.09 684.896 L1436.65 684.896 L1437.21 684.896 L1437.77 684.896 L1438.33 684.896 L1438.88 684.896 L1439.44 684.896 L1440 684.896 L1440.56 684.896 L1441.12 684.896 L1441.68 684.896 L1442.24 684.896 L1442.8 684.896 L1443.36 684.896 L1443.92 684.896 L1444.48 684.896 L1445.04 684.896 L1445.6 684.896 L1446.15 684.896 L1446.71 684.896 L1447.27 684.896 L1447.83 684.896 L1448.39 684.896 L1448.95 684.896 L1449.51 684.896 L1450.07 684.896 L1450.63 684.896 L1451.19 684.896 L1451.75 684.896 L1452.31 684.896 L1452.87 684.896 L1453.42 684.896 L1453.98 684.896 L1454.54 684.896 L1455.1 684.896 L1455.66 684.896 L1456.22 684.896 L1456.78 684.896 L1457.34 684.896 L1457.9 684.896 L1458.46 684.896 L1459.02 684.896 L1459.58 684.896 L1460.14 684.896 L1460.7 684.896 L1461.25 684.896 L1461.81 684.896 L1462.37 684.896 L1462.93 684.896 L1463.49 684.896 L1464.05 684.896 L1464.61 684.896 L1465.17 684.896 L1465.73 684.896 L1466.29 684.896 L1466.85 684.896 L1467.41 684.896 L1467.97 684.896 L1468.52 684.896 L1469.08 684.896 L1469.64 684.896 L1470.2 684.896 L1470.76 684.896 L1471.32 684.896 L1471.88 684.896 L1472.44 684.896 L1473 684.896 L1473.56 684.896 L1474.12 684.896 L1474.68 684.896 L1475.24 684.896 L1475.79 684.896 L1476.35 684.896 L1476.91 684.896 L1477.47 684.896 L1478.03 684.896 L1478.59 684.896 L1479.15 684.896 L1479.71 684.896 L1480.27 684.896 L1480.83 684.896 L1481.39 684.896 L1481.95 684.896 L1482.51 684.896 L1483.07 684.896 L1483.62 684.896 L1484.18 684.896 L1484.74 684.896 L1485.3 684.896 L1485.86 684.896 L1486.42 684.896 L1486.98 684.896 L1487.54 684.896 L1488.1 684.896 L1488.66 684.896 L1489.22 684.896 L1489.78 684.896 L1490.34 684.896 L1490.89 684.896 L1491.45 684.896 L1492.01 684.896 L1492.57 684.896 L1493.13 684.896 L1493.69 684.896 L1494.25 684.896 L1494.81 684.896 L1495.37 684.896 L1495.93 684.896 L1496.49 684.896 L1497.05 684.896 L1497.61 684.896 L1498.16 684.896 L1498.72 684.896 L1499.28 684.896 L1499.84 684.896 L1500.4 684.896 L1500.96 684.896 L1501.52 684.896 L1502.08 684.896 L1502.64 684.896 L1503.2 684.896 L1503.76 684.896 L1504.32 684.896 L1504.88 684.896 L1505.44 684.896 L1505.99 684.896 L1506.55 684.896 L1507.11 684.896 L1507.67 684.896 L1508.23 684.896 L1508.79 684.896 L1509.35 684.896 L1509.91 684.896 L1510.47 684.896 L1511.03 684.896 L1511.59 684.896 L1512.15 684.896 L1512.71 684.896 L1513.26 684.896 L1513.82 684.896 L1514.38 684.896 L1514.94 684.896 L1515.5 684.896 L1516.06 684.896 L1516.62 684.896 L1517.18 684.896 L1517.74 684.896 L1518.3 684.896 L1518.86 684.896 L1519.42 684.896 L1519.98 684.896 L1520.53 684.896 L1521.09 684.896 L1521.65 684.896 L1522.21 684.896 L1522.77 684.896 L1523.33 684.896 L1523.89 684.896 L1524.45 684.896 L1525.01 684.896 L1525.57 684.896 L1526.13 684.896 L1526.69 684.896 L1527.25 684.896 L1527.81 684.896 L1528.36 684.896 L1528.92 684.896 L1529.48 684.896 L1530.04 684.896 L1530.6 684.896 L1531.16 684.896 L1531.72 684.896 L1532.28 684.896 L1532.84 684.896 L1533.4 684.896 L1533.96 684.896 L1534.52 684.896 L1535.08 684.896 L1535.63 684.896 L1536.19 684.896 L1536.75 684.896 L1537.31 684.896 L1537.87 684.896 L1538.43 684.896 L1538.99 684.896 L1539.55 684.896 L1540.11 684.896 L1540.67 684.896 L1541.23 684.896 L1541.79 684.896 L1542.35 684.896 L1542.9 684.896 L1543.46 684.896 L1544.02 684.896 L1544.58 684.896 L1545.14 684.896 L1545.7 684.896 L1546.26 684.896 L1546.82 684.896 L1547.38 684.896 L1547.94 684.896 L1548.5 684.896 L1549.06 684.896 L1549.62 684.896 L1550.18 684.896 L1550.73 684.896 L1551.29 684.896 L1551.85 684.896 L1552.41 684.896 L1552.97 684.896 L1553.53 684.896 L1554.09 684.896 L1554.65 684.896 L1555.21 684.896 L1555.77 684.896 L1556.33 684.896 L1556.89 684.896 L1557.45 684.896 L1558 684.896 L1558.56 684.896 L1559.12 684.896 L1559.68 684.896 L1560.24 684.896 L1560.8 684.896 L1561.36 684.896 L1561.92 684.896 L1562.48 684.896 L1563.04 684.896 L1563.6 684.896 L1564.16 684.896 L1564.72 684.896 L1565.28 684.896 L1565.83 684.896 L1566.39 684.896 L1566.95 684.896 L1567.51 684.896 L1568.07 684.896 L1568.63 684.896 L1569.19 684.896 L1569.75 684.896 L1570.31 684.896 L1570.87 684.896 L1571.43 684.896 L1571.99 684.896 L1572.55 684.896 L1573.1 684.896 L1573.66 684.896 L1574.22 684.896 L1574.78 684.896 L1575.34 684.896 L1575.9 684.896 L1576.46 684.896 L1577.02 684.896 L1577.58 684.896 L1578.14 684.896 L1578.7 684.896 L1579.26 684.896 L1579.82 684.896 L1580.37 684.896 L1580.93 684.896 L1581.49 684.896 L1582.05 684.896 L1582.61 684.896 L1583.17 684.896 L1583.73 684.896 L1584.29 684.896 L1584.85 684.896 L1585.41 684.896 L1585.97 684.896 L1586.53 684.896 L1587.09 684.896 L1587.65 684.896 L1588.2 684.896 L1588.76 684.896 L1589.32 684.896 L1589.88 684.896 L1590.44 684.896 L1591 684.896 L1591.56 684.896 L1592.12 684.896 L1592.68 684.896 L1593.24 684.896 L1593.8 684.896 L1594.36 684.896 L1594.92 684.896 L1595.47 684.896 L1596.03 684.896 L1596.59 684.896 L1597.15 684.896 L1597.71 684.896 L1598.27 684.896 L1598.83 684.896 L1599.39 684.896 L1599.95 684.896 L1600.51 684.896 L1601.07 684.896 L1601.63 684.896 L1602.19 684.896 L1602.74 684.896 L1603.3 684.896 L1603.86 684.896 L1604.42 684.896 L1604.98 684.896 L1605.54 684.896 L1606.1 684.896 L1606.66 684.896 L1607.22 684.896 L1607.78 684.896 L1608.34 684.896 L1608.9 684.896 L1609.46 684.896 L1610.02 684.896 L1610.57 684.896 L1611.13 684.896 L1611.69 684.896 L1612.25 684.896 L1612.81 684.896 L1613.37 684.896 L1613.93 684.896 L1614.49 684.896 L1615.05 684.896 L1615.61 684.896 L1616.17 684.896 L1616.73 684.896 L1617.29 684.896 L1617.84 684.896 L1618.4 684.896 L1618.96 684.896 L1619.52 684.896 L1620.08 684.896 L1620.64 684.896 L1621.2 684.896 L1621.76 684.896 L1622.32 684.896 L1622.88 684.896 L1623.44 684.896 L1624 684.896 L1624.56 684.896 L1625.11 684.896 L1625.67 684.896 L1626.23 684.896 L1626.79 684.896 L1627.35 684.896 L1627.91 684.896 L1628.47 684.896 L1629.03 684.896 L1629.59 684.896 L1630.15 684.896 L1630.71 684.896 L1631.27 684.896 L1631.83 684.896 L1632.39 684.896 L1632.94 684.896 L1633.5 684.896 L1634.06 684.896 L1634.62 684.896 L1635.18 684.896 L1635.74 684.896 L1636.3 684.896 L1636.86 684.896 L1637.42 684.896 L1637.98 684.896 L1638.54 684.896 L1639.1 684.896 L1639.66 684.896 L1640.21 684.896 L1640.77 684.896 L1641.33 684.896 L1641.89 684.896 L1642.45 684.896 L1643.01 684.896 L1643.57 684.896 L1644.13 684.896 L1644.69 684.896 L1645.25 684.896 L1645.81 684.896 L1646.37 684.896 L1646.93 684.896 L1647.48 684.896 L1648.04 684.896 L1648.6 684.896 L1649.16 684.896 L1649.72 684.896 L1650.28 684.896 L1650.84 684.896 L1651.4 684.896 L1651.96 684.896 L1652.52 684.896 L1653.08 684.896 L1653.64 684.896 L1654.2 684.896 L1654.76 684.896 L1655.31 684.896 L1655.87 684.896 L1656.43 684.896 L1656.99 684.896 L1657.55 684.896 L1658.11 684.896 L1658.67 684.896 L1659.23 684.896 L1659.79 684.896 L1660.35 684.896 L1660.91 684.896 L1661.47 684.896 L1662.03 684.896 L1662.58 684.896 L1663.14 684.896 L1663.7 684.896 L1664.26 684.896 L1664.82 684.896 L1665.38 684.896 L1665.94 684.896 L1666.5 684.896 L1667.06 684.896 L1667.62 684.896 L1668.18 684.896 L1668.74 684.896 L1669.3 684.896 L1669.85 684.896 L1670.41 684.896 L1670.97 684.896 L1671.53 684.896 L1672.09 684.896 L1672.65 684.896 L1673.21 684.896 L1673.77 684.896 L1674.33 684.896 L1674.89 684.896 L1675.45 684.896 L1676.01 684.896 L1676.57 684.896 L1677.13 684.896 L1677.68 684.896 L1678.24 684.896 L1678.8 684.896 L1679.36 684.896 L1679.92 684.896 L1680.48 684.896 L1681.04 684.896 L1681.6 684.896 L1682.16 684.896 L1682.72 684.896 L1683.28 684.896 L1683.84 684.896 L1684.4 684.896 L1684.95 684.896 L1685.51 684.896 L1686.07 684.896 L1686.63 684.896 L1687.19 684.896 L1687.75 684.896 L1688.31 684.896 L1688.87 684.896 L1689.43 684.896 L1689.99 684.896 L1690.55 684.896 L1691.11 684.896 L1691.67 684.896 L1692.23 684.896 L1692.78 684.896 L1693.34 684.896 L1693.9 684.896 L1694.46 684.896 L1695.02 684.896 L1695.58 684.896 L1696.14 684.896 L1696.7 684.896 L1697.26 684.896 L1697.82 684.896 L1698.38 684.896 L1698.94 684.896 L1699.5 684.896 L1700.05 684.896 L1700.61 684.896 L1701.17 684.896 L1701.73 684.896 L1702.29 684.896 L1702.85 684.896 L1703.41 684.896 L1703.97 684.896 L1704.53 684.896 L1705.09 684.896 L1705.65 684.896 L1706.21 684.896 L1706.77 684.896 L1707.32 684.896 L1707.88 684.896 L1708.44 684.896 L1709 684.896 L1709.56 684.896 L1710.12 684.896 L1710.68 684.896 L1711.24 684.896 L1711.8 684.896 L1712.36 684.896 L1712.92 684.896 L1713.48 684.896 L1714.04 684.896 L1714.6 684.896 L1715.15 684.896 L1715.71 684.896 L1716.27 684.896 L1716.83 684.896 L1717.39 684.896 L1717.95 684.896 L1718.51 684.896 L1719.07 684.896 L1719.63 684.896 L1720.19 684.896 L1720.75 684.896 L1721.31 684.896 L1721.87 684.896 L1722.42 684.896 L1722.98 684.896 L1723.54 684.896 L1724.1 684.896 L1724.66 684.896 L1725.22 684.896 L1725.78 684.896 L1726.34 684.896 L1726.9 684.896 L1727.46 684.896 L1728.02 684.896 L1728.58 684.896 L1729.14 684.896 L1729.69 684.896 L1730.25 684.896 L1730.81 684.896 L1731.37 684.896 L1731.93 684.896 L1732.49 684.896 L1733.05 684.896 L1733.61 684.896 L1734.17 684.896 L1734.73 684.896 L1735.29 684.896 L1735.85 684.896 L1736.41 684.896 L1736.97 684.896 L1737.52 684.896 L1738.08 684.896 L1738.64 684.896 L1739.2 684.896 L1739.76 684.896 L1740.32 684.896 L1740.88 684.896 L1741.44 684.896 L1742 684.896 L1742.56 684.896 L1743.12 684.896 L1743.68 684.896 L1744.24 684.896 L1744.79 684.896 L1745.35 684.896 L1745.91 684.896 L1746.47 684.896 L1747.03 684.896 L1747.59 684.896 L1748.15 684.896 L1748.71 684.896 L1749.27 684.896 L1749.83 684.896 L1750.39 684.896 L1750.95 684.896 L1751.51 684.896 L1752.06 684.896 L1752.62 684.896 L1753.18 684.896 L1753.74 684.896 L1754.3 684.896 L1754.86 684.896 L1755.42 684.896 L1755.98 684.896 L1756.54 684.896 L1757.1 684.896 L1757.66 684.896 L1758.22 684.896 L1758.78 684.896 L1759.34 684.896 L1759.89 684.896 L1760.45 684.896 L1761.01 684.896 L1761.57 684.896 L1762.13 684.896 L1762.69 684.896 L1763.25 684.896 L1763.81 684.896 L1764.37 684.896 L1764.93 684.896 L1765.49 684.896 L1766.05 684.896 L1766.61 684.896 L1767.16 684.896 L1767.72 684.896 L1768.28 684.896 L1768.84 684.896 L1769.4 684.896 L1769.96 684.896 L1770.52 684.896 L1771.08 684.896 L1771.64 684.896 L1772.2 684.896 L1772.76 684.896 L1773.32 684.896 L1773.88 684.896 L1774.43 684.896 L1774.99 684.896 L1775.55 684.896 L1776.11 684.896 L1776.67 684.896 L1777.23 684.896 L1777.79 684.896 L1778.35 684.896 L1778.91 684.896 L1779.47 684.896 L1780.03 684.896 L1780.59 684.896 L1781.15 684.896 L1781.71 684.896 L1782.26 684.896 L1782.82 684.896 L1783.38 684.896 L1783.94 684.896 L1784.5 684.896 L1785.06 684.896 L1785.62 684.896 L1786.18 684.896 L1786.74 684.896 L1787.3 684.896 L1787.86 684.896 L1788.42 684.896 L1788.98 684.896 L1789.53 684.896 L1790.09 684.896 L1790.65 684.896 L1791.21 684.896 L1791.77 684.896 L1792.33 684.896 L1792.89 684.896 L1793.45 684.896 L1794.01 684.896 L1794.57 684.896 L1795.13 684.896 L1795.69 684.896 L1796.25 684.896 L1796.8 684.896 L1797.36 684.896 L1797.92 684.896 L1798.48 684.896 L1799.04 684.896 L1799.6 684.896 L1800.16 684.896 L1800.72 684.896 L1801.28 684.896 L1801.84 684.896 L1802.4 684.896 L1802.96 684.896 L1803.52 684.896 L1804.08 684.896 L1804.63 684.896 L1805.19 684.896 L1805.75 684.896 L1806.31 684.896 L1806.87 684.896 L1807.43 684.896 L1807.99 684.896 L1808.55 684.896 L1809.11 684.896 L1809.67 684.896 L1810.23 684.896 L1810.79 684.896 L1811.35 684.896 L1811.9 684.896 L1812.46 684.896 L1813.02 684.896 L1813.58 684.896 L1814.14 684.896 L1814.7 684.896 L1815.26 684.896 L1815.82 684.896 L1816.38 684.896 L1816.94 684.896 L1817.5 684.896 L1818.06 684.896 L1818.62 684.896 L1819.18 684.896 L1819.73 684.896 L1820.29 684.896 L1820.85 684.896 L1821.41 684.896 L1821.97 684.896 L1822.53 684.896 L1823.09 684.896 L1823.65 684.896 L1824.21 684.896 L1824.77 684.896 L1825.33 684.896 L1825.89 684.896 L1826.45 684.896 L1827 684.896 L1827.56 684.896 L1828.12 684.896 L1828.68 684.896 L1829.24 684.896 L1829.8 684.896 L1830.36 684.896 L1830.92 684.896 L1831.48 684.896 L1832.04 684.896 L1832.6 684.896 L1833.16 684.896 L1833.72 684.896 L1834.27 684.896 L1834.83 684.896 L1835.39 684.896 L1835.95 684.896 L1836.51 684.896 L1837.07 684.896 L1837.63 684.896 L1838.19 684.896 L1838.19 681.541 L1837.63 681.541 L1837.07 681.541 L1836.51 681.541 L1835.95 681.541 L1835.39 681.541 L1834.83 681.541 L1834.27 681.541 L1833.72 681.541 L1833.16 681.541 L1832.6 681.541 L1832.04 681.541 L1831.48 681.541 L1830.92 681.541 L1830.36 681.541 L1829.8 681.541 L1829.24 681.541 L1828.68 681.541 L1828.12 681.541 L1827.56 681.541 L1827 681.541 L1826.45 681.541 L1825.89 681.541 L1825.33 681.541 L1824.77 681.541 L1824.21 681.541 L1823.65 681.541 L1823.09 681.541 L1822.53 681.541 L1821.97 681.541 L1821.41 681.541 L1820.85 681.541 L1820.29 681.541 L1819.73 681.541 L1819.18 681.541 L1818.62 681.541 L1818.06 681.541 L1817.5 681.541 L1816.94 681.541 L1816.38 681.541 L1815.82 681.541 L1815.26 681.541 L1814.7 681.541 L1814.14 681.541 L1813.58 681.541 L1813.02 681.541 L1812.46 681.541 L1811.9 681.541 L1811.35 681.541 L1810.79 681.541 L1810.23 681.541 L1809.67 681.541 L1809.11 681.541 L1808.55 681.541 L1807.99 681.541 L1807.43 681.541 L1806.87 681.541 L1806.31 681.541 L1805.75 681.541 L1805.19 681.541 L1804.63 681.541 L1804.08 681.541 L1803.52 681.541 L1802.96 681.541 L1802.4 681.541 L1801.84 681.541 L1801.28 681.541 L1800.72 681.541 L1800.16 681.541 L1799.6 681.541 L1799.04 681.541 L1798.48 681.541 L1797.92 681.541 L1797.36 681.541 L1796.8 681.541 L1796.25 681.541 L1795.69 681.541 L1795.13 681.541 L1794.57 681.541 L1794.01 681.541 L1793.45 681.541 L1792.89 681.541 L1792.33 681.541 L1791.77 681.541 L1791.21 681.541 L1790.65 681.541 L1790.09 681.541 L1789.53 681.541 L1788.98 681.541 L1788.42 681.541 L1787.86 681.541 L1787.3 681.541 L1786.74 681.541 L1786.18 681.541 L1785.62 681.541 L1785.06 681.541 L1784.5 681.541 L1783.94 681.541 L1783.38 681.541 L1782.82 681.541 L1782.26 681.541 L1781.71 681.541 L1781.15 681.541 L1780.59 681.541 L1780.03 681.541 L1779.47 681.541 L1778.91 681.541 L1778.35 681.541 L1777.79 681.541 L1777.23 681.541 L1776.67 681.541 L1776.11 681.541 L1775.55 681.541 L1774.99 681.541 L1774.43 681.541 L1773.88 681.541 L1773.32 681.541 L1772.76 681.541 L1772.2 681.541 L1771.64 681.541 L1771.08 681.541 L1770.52 681.541 L1769.96 681.541 L1769.4 681.541 L1768.84 681.541 L1768.28 681.541 L1767.72 681.541 L1767.16 681.541 L1766.61 681.541 L1766.05 681.541 L1765.49 681.541 L1764.93 681.541 L1764.37 681.541 L1763.81 681.541 L1763.25 681.541 L1762.69 681.541 L1762.13 681.541 L1761.57 681.541 L1761.01 681.541 L1760.45 681.541 L1759.89 681.541 L1759.34 681.541 L1758.78 681.541 L1758.22 681.541 L1757.66 681.541 L1757.1 681.541 L1756.54 681.541 L1755.98 681.541 L1755.42 681.541 L1754.86 681.541 L1754.3 681.541 L1753.74 681.541 L1753.18 681.541 L1752.62 681.541 L1752.06 681.541 L1751.51 681.541 L1750.95 681.541 L1750.39 681.541 L1749.83 681.541 L1749.27 681.541 L1748.71 681.541 L1748.15 681.541 L1747.59 681.541 L1747.03 681.541 L1746.47 681.541 L1745.91 681.541 L1745.35 681.541 L1744.79 681.541 L1744.24 681.541 L1743.68 681.541 L1743.12 681.541 L1742.56 681.541 L1742 681.541 L1741.44 681.541 L1740.88 681.541 L1740.32 681.541 L1739.76 681.541 L1739.2 681.541 L1738.64 681.541 L1738.08 681.541 L1737.52 681.541 L1736.97 681.541 L1736.41 681.541 L1735.85 681.541 L1735.29 681.541 L1734.73 681.541 L1734.17 681.541 L1733.61 681.541 L1733.05 681.541 L1732.49 681.541 L1731.93 681.541 L1731.37 681.541 L1730.81 681.541 L1730.25 681.541 L1729.69 681.541 L1729.14 681.541 L1728.58 681.541 L1728.02 681.541 L1727.46 681.541 L1726.9 681.541 L1726.34 681.541 L1725.78 681.541 L1725.22 681.541 L1724.66 681.541 L1724.1 681.541 L1723.54 681.541 L1722.98 681.541 L1722.42 681.541 L1721.87 681.541 L1721.31 681.541 L1720.75 681.541 L1720.19 681.541 L1719.63 681.541 L1719.07 681.541 L1718.51 681.541 L1717.95 681.541 L1717.39 681.541 L1716.83 681.541 L1716.27 681.541 L1715.71 681.541 L1715.15 681.541 L1714.6 681.541 L1714.04 681.541 L1713.48 681.541 L1712.92 681.541 L1712.36 681.541 L1711.8 681.541 L1711.24 681.541 L1710.68 681.541 L1710.12 681.541 L1709.56 681.541 L1709 681.541 L1708.44 681.541 L1707.88 681.541 L1707.32 681.541 L1706.77 681.541 L1706.21 681.541 L1705.65 681.541 L1705.09 681.541 L1704.53 681.541 L1703.97 681.541 L1703.41 681.541 L1702.85 681.541 L1702.29 681.541 L1701.73 681.541 L1701.17 681.541 L1700.61 681.541 L1700.05 681.541 L1699.5 681.541 L1698.94 681.541 L1698.38 681.541 L1697.82 681.541 L1697.26 681.541 L1696.7 681.541 L1696.14 681.541 L1695.58 681.541 L1695.02 681.541 L1694.46 681.541 L1693.9 681.541 L1693.34 681.541 L1692.78 681.541 L1692.23 681.541 L1691.67 681.541 L1691.11 681.541 L1690.55 681.541 L1689.99 681.541 L1689.43 681.541 L1688.87 681.541 L1688.31 681.541 L1687.75 681.541 L1687.19 681.541 L1686.63 681.541 L1686.07 681.541 L1685.51 681.541 L1684.95 681.541 L1684.4 681.541 L1683.84 681.541 L1683.28 681.541 L1682.72 681.541 L1682.16 681.541 L1681.6 681.541 L1681.04 681.541 L1680.48 681.541 L1679.92 681.541 L1679.36 681.541 L1678.8 681.541 L1678.24 681.541 L1677.68 681.541 L1677.13 681.541 L1676.57 681.541 L1676.01 681.541 L1675.45 681.541 L1674.89 681.541 L1674.33 681.541 L1673.77 681.541 L1673.21 681.541 L1672.65 681.541 L1672.09 681.541 L1671.53 681.541 L1670.97 681.541 L1670.41 681.541 L1669.85 681.541 L1669.3 681.541 L1668.74 681.541 L1668.18 681.541 L1667.62 681.541 L1667.06 681.541 L1666.5 681.541 L1665.94 681.541 L1665.38 681.541 L1664.82 681.541 L1664.26 681.541 L1663.7 681.541 L1663.14 681.541 L1662.58 681.541 L1662.03 681.541 L1661.47 681.541 L1660.91 681.541 L1660.35 681.541 L1659.79 681.541 L1659.23 681.541 L1658.67 681.541 L1658.11 681.541 L1657.55 681.541 L1656.99 681.541 L1656.43 681.541 L1655.87 681.541 L1655.31 681.541 L1654.76 681.541 L1654.2 681.541 L1653.64 681.541 L1653.08 681.541 L1652.52 681.541 L1651.96 681.541 L1651.4 681.541 L1650.84 681.541 L1650.28 681.541 L1649.72 681.541 L1649.16 681.541 L1648.6 681.541 L1648.04 681.541 L1647.48 681.541 L1646.93 681.541 L1646.37 681.541 L1645.81 681.541 L1645.25 681.541 L1644.69 681.541 L1644.13 681.541 L1643.57 681.541 L1643.01 681.541 L1642.45 681.541 L1641.89 681.541 L1641.33 681.541 L1640.77 681.541 L1640.21 681.541 L1639.66 681.541 L1639.1 681.541 L1638.54 681.541 L1637.98 681.541 L1637.42 681.541 L1636.86 681.541 L1636.3 681.541 L1635.74 681.541 L1635.18 681.541 L1634.62 681.541 L1634.06 681.541 L1633.5 681.541 L1632.94 681.541 L1632.39 681.541 L1631.83 681.541 L1631.27 681.541 L1630.71 681.541 L1630.15 681.541 L1629.59 681.541 L1629.03 681.541 L1628.47 681.541 L1627.91 681.541 L1627.35 681.541 L1626.79 681.541 L1626.23 681.541 L1625.67 681.541 L1625.11 681.541 L1624.56 681.541 L1624 681.541 L1623.44 681.541 L1622.88 681.541 L1622.32 681.541 L1621.76 681.541 L1621.2 681.541 L1620.64 681.541 L1620.08 681.541 L1619.52 681.541 L1618.96 681.541 L1618.4 681.541 L1617.84 681.541 L1617.29 681.541 L1616.73 681.541 L1616.17 681.541 L1615.61 681.541 L1615.05 681.541 L1614.49 681.541 L1613.93 681.541 L1613.37 681.541 L1612.81 681.541 L1612.25 681.541 L1611.69 681.541 L1611.13 681.541 L1610.57 681.541 L1610.02 681.541 L1609.46 681.541 L1608.9 681.541 L1608.34 681.541 L1607.78 681.541 L1607.22 681.541 L1606.66 681.541 L1606.1 681.541 L1605.54 681.541 L1604.98 681.541 L1604.42 681.541 L1603.86 681.541 L1603.3 681.541 L1602.74 681.541 L1602.19 681.541 L1601.63 681.541 L1601.07 681.541 L1600.51 681.541 L1599.95 681.541 L1599.39 681.541 L1598.83 681.541 L1598.27 681.541 L1597.71 681.541 L1597.15 681.541 L1596.59 681.541 L1596.03 681.541 L1595.47 681.541 L1594.92 681.541 L1594.36 681.541 L1593.8 681.541 L1593.24 681.541 L1592.68 681.541 L1592.12 681.541 L1591.56 681.541 L1591 681.541 L1590.44 681.541 L1589.88 681.541 L1589.32 681.541 L1588.76 681.541 L1588.2 681.541 L1587.65 681.541 L1587.09 681.541 L1586.53 681.541 L1585.97 681.541 L1585.41 681.541 L1584.85 681.541 L1584.29 681.541 L1583.73 681.541 L1583.17 681.541 L1582.61 681.541 L1582.05 681.541 L1581.49 681.541 L1580.93 681.541 L1580.37 681.541 L1579.82 681.541 L1579.26 681.541 L1578.7 681.541 L1578.14 681.541 L1577.58 681.541 L1577.02 681.541 L1576.46 681.541 L1575.9 681.541 L1575.34 681.541 L1574.78 681.541 L1574.22 681.541 L1573.66 681.541 L1573.1 681.541 L1572.55 681.541 L1571.99 681.541 L1571.43 681.541 L1570.87 681.541 L1570.31 681.541 L1569.75 681.541 L1569.19 681.541 L1568.63 681.541 L1568.07 681.541 L1567.51 681.541 L1566.95 681.541 L1566.39 681.541 L1565.83 681.541 L1565.28 681.541 L1564.72 681.541 L1564.16 681.541 L1563.6 681.541 L1563.04 681.541 L1562.48 681.541 L1561.92 681.541 L1561.36 681.541 L1560.8 681.541 L1560.24 681.541 L1559.68 681.541 L1559.12 681.541 L1558.56 681.541 L1558 681.541 L1557.45 681.541 L1556.89 681.541 L1556.33 681.541 L1555.77 681.541 L1555.21 681.541 L1554.65 681.541 L1554.09 681.541 L1553.53 681.541 L1552.97 681.541 L1552.41 681.541 L1551.85 681.541 L1551.29 681.541 L1550.73 681.541 L1550.18 681.541 L1549.62 681.541 L1549.06 681.541 L1548.5 681.541 L1547.94 681.541 L1547.38 681.541 L1546.82 681.541 L1546.26 681.541 L1545.7 681.541 L1545.14 681.541 L1544.58 681.541 L1544.02 681.541 L1543.46 681.541 L1542.9 681.541 L1542.35 681.541 L1541.79 681.541 L1541.23 681.541 L1540.67 681.541 L1540.11 681.541 L1539.55 681.541 L1538.99 681.541 L1538.43 681.541 L1537.87 681.541 L1537.31 681.541 L1536.75 681.541 L1536.19 681.541 L1535.63 681.541 L1535.08 681.541 L1534.52 681.541 L1533.96 681.541 L1533.4 681.541 L1532.84 681.541 L1532.28 681.541 L1531.72 681.541 L1531.16 681.541 L1530.6 681.541 L1530.04 681.541 L1529.48 681.541 L1528.92 681.541 L1528.36 681.541 L1527.81 681.541 L1527.25 681.541 L1526.69 681.541 L1526.13 681.541 L1525.57 681.541 L1525.01 681.541 L1524.45 681.541 L1523.89 681.541 L1523.33 681.541 L1522.77 681.541 L1522.21 681.541 L1521.65 681.541 L1521.09 681.541 L1520.53 681.541 L1519.98 681.541 L1519.42 681.541 L1518.86 681.541 L1518.3 681.541 L1517.74 681.541 L1517.18 681.541 L1516.62 681.541 L1516.06 681.541 L1515.5 681.541 L1514.94 681.541 L1514.38 681.541 L1513.82 681.541 L1513.26 681.541 L1512.71 681.541 L1512.15 681.541 L1511.59 681.541 L1511.03 681.541 L1510.47 681.541 L1509.91 681.541 L1509.35 681.541 L1508.79 681.541 L1508.23 681.541 L1507.67 681.541 L1507.11 681.541 L1506.55 681.541 L1505.99 681.541 L1505.44 681.541 L1504.88 681.541 L1504.32 681.541 L1503.76 681.541 L1503.2 681.541 L1502.64 681.541 L1502.08 681.541 L1501.52 681.541 L1500.96 681.541 L1500.4 681.541 L1499.84 681.541 L1499.28 681.541 L1498.72 681.541 L1498.16 681.541 L1497.61 681.541 L1497.05 681.541 L1496.49 681.541 L1495.93 681.541 L1495.37 681.541 L1494.81 681.541 L1494.25 681.541 L1493.69 681.541 L1493.13 681.541 L1492.57 681.541 L1492.01 681.541 L1491.45 681.541 L1490.89 681.541 L1490.34 681.541 L1489.78 681.541 L1489.22 681.541 L1488.66 681.541 L1488.1 681.541 L1487.54 681.541 L1486.98 681.541 L1486.42 681.541 L1485.86 681.541 L1485.3 681.541 L1484.74 681.541 L1484.18 681.541 L1483.62 681.541 L1483.07 681.541 L1482.51 681.541 L1481.95 681.541 L1481.39 681.541 L1480.83 681.541 L1480.27 681.541 L1479.71 681.541 L1479.15 681.541 L1478.59 681.541 L1478.03 681.541 L1477.47 681.541 L1476.91 681.541 L1476.35 681.541 L1475.79 681.541 L1475.24 681.541 L1474.68 681.541 L1474.12 681.541 L1473.56 681.541 L1473 681.541 L1472.44 681.541 L1471.88 681.541 L1471.32 681.541 L1470.76 681.541 L1470.2 681.541 L1469.64 681.541 L1469.08 681.541 L1468.52 681.541 L1467.97 681.541 L1467.41 681.541 L1466.85 681.541 L1466.29 681.541 L1465.73 681.541 L1465.17 681.541 L1464.61 681.541 L1464.05 681.541 L1463.49 681.541 L1462.93 681.541 L1462.37 681.541 L1461.81 681.541 L1461.25 681.541 L1460.7 681.541 L1460.14 681.541 L1459.58 681.541 L1459.02 681.541 L1458.46 681.541 L1457.9 681.541 L1457.34 681.541 L1456.78 681.541 L1456.22 681.541 L1455.66 681.541 L1455.1 681.541 L1454.54 681.541 L1453.98 681.541 L1453.42 681.541 L1452.87 681.541 L1452.31 681.541 L1451.75 681.541 L1451.19 681.541 L1450.63 681.541 L1450.07 681.541 L1449.51 681.541 L1448.95 681.541 L1448.39 681.541 L1447.83 681.541 L1447.27 681.541 L1446.71 681.541 L1446.15 681.541 L1445.6 681.541 L1445.04 681.541 L1444.48 681.541 L1443.92 681.541 L1443.36 681.541 L1442.8 681.541 L1442.24 681.541 L1441.68 681.541 L1441.12 681.541 L1440.56 681.541 L1440 681.541 L1439.44 681.541 L1438.88 681.541 L1438.33 681.541 L1437.77 681.541 L1437.21 681.541 L1436.65 681.541 L1436.09 681.541 L1435.53 681.541 L1434.97 681.541 L1434.41 681.541 L1433.85 681.541 L1433.29 681.541 L1432.73 681.541 L1432.17 681.541 L1431.61 681.541 L1431.05 681.541 L1430.5 681.541 L1429.94 681.541 L1429.38 681.541 L1428.82 681.541 L1428.26 681.541 L1427.7 681.541 L1427.14 681.541 L1426.58 681.541 L1426.02 681.541 L1425.46 681.541 L1424.9 681.541 L1424.34 681.541 L1423.78 681.541 L1423.23 681.541 L1422.67 681.541 L1422.11 681.541 L1421.55 681.541 L1420.99 681.541 L1420.43 681.541 L1419.87 681.541 L1419.31 681.541 L1418.75 681.541 L1418.19 681.541 L1417.63 681.541 L1417.07 681.541 L1416.51 681.541 L1415.95 681.541 L1415.4 681.541 L1414.84 681.541 L1414.28 681.541 L1413.72 681.541 L1413.16 681.541 L1412.6 681.541 L1412.04 681.541 L1411.48 681.541 L1410.92 681.541 L1410.36 681.541 L1409.8 681.541 L1409.24 681.541 L1408.68 681.541 L1408.13 681.541 L1407.57 681.541 L1407.01 681.541 L1406.45 681.541 L1405.89 681.541 L1405.33 681.541 L1404.77 681.541 L1404.21 681.541 L1403.65 681.541 L1403.09 681.541 L1402.53 681.541 L1401.97 681.541 L1401.41 681.541 L1400.86 681.541 L1400.3 681.541 L1399.74 681.541 L1399.18 681.541 L1398.62 681.541 L1398.06 681.541 L1397.5 681.541 L1396.94 681.541 L1396.38 681.541 L1395.82 681.541 L1395.26 681.541 L1394.7 681.541 L1394.14 681.541 L1393.58 681.541 L1393.03 681.541 L1392.47 681.541 L1391.91 681.541 L1391.35 681.541 L1390.79 681.541 L1390.23 681.541 L1389.67 681.541 L1389.11 681.541 L1388.55 681.541 L1387.99 681.541 L1387.43 681.541 L1386.87 681.541 L1386.31 681.541 L1385.76 681.541 L1385.2 681.541 L1384.64 681.541 L1384.08 681.541 L1383.52 681.541 L1382.96 681.541 L1382.4 681.541 L1381.84 681.541 L1381.28 681.541 L1380.72 681.541 L1380.16 681.541 L1379.6 681.541 L1379.04 681.541 L1378.49 681.541 L1377.93 681.541 L1377.37 681.541 L1376.81 681.541 L1376.25 681.541 L1375.69 681.541 L1375.13 681.541 L1374.57 681.541 L1374.01 681.541 L1373.45 681.541 L1372.89 681.541 L1372.33 681.541 L1371.77 681.541 L1371.21 681.541 L1370.66 681.541 L1370.1 681.541 L1369.54 681.541 L1368.98 681.541 L1368.42 681.541 L1367.86 681.541 L1367.3 681.541 L1366.74 681.541 L1366.18 681.541 L1365.62 681.541 L1365.06 681.541 L1364.5 681.541 L1363.94 681.541 L1363.39 681.541 L1362.83 681.541 L1362.27 681.541 L1361.71 681.541 L1361.15 681.541 L1360.59 681.541 L1360.03 681.541 L1359.47 681.541 L1358.91 681.541 L1358.35 681.541 L1357.79 681.541 L1357.23 681.541 L1356.67 681.541 L1356.12 681.541 L1355.56 681.541 L1355 681.541 L1354.44 681.541 L1353.88 681.541 L1353.32 681.541 L1352.76 681.541 L1352.2 681.541 L1351.64 681.541 L1351.08 681.541 L1350.52 681.541 L1349.96 681.541 L1349.4 681.541 L1348.84 681.541 L1348.29 681.541 L1347.73 681.541 L1347.17 681.541 L1346.61 681.541 L1346.05 681.541 L1345.49 681.541 L1344.93 681.541 L1344.37 681.541 L1343.81 681.541 L1343.25 681.541 L1342.69 681.541 L1342.13 681.541 L1341.57 681.541 L1341.02 681.541 L1340.46 681.541 L1339.9 681.541 L1339.34 681.541 L1338.78 681.541 L1338.22 681.541 L1337.66 681.541 L1337.1 681.541 L1336.54 681.541 L1335.98 681.541 L1335.42 681.541 L1334.86 681.541 L1334.3 681.541 L1333.75 681.541 L1333.19 681.541 L1332.63 681.541 L1332.07 681.541 L1331.51 681.541 L1330.95 681.541 L1330.39 681.541 L1329.83 681.541 L1329.27 681.541 L1328.71 681.541 L1328.15 681.541 L1327.59 681.541 L1327.03 681.541 L1326.47 681.541 L1325.92 681.541 L1325.36 681.541 L1324.8 681.541 L1324.24 681.541 L1323.68 681.541 L1323.12 681.541 L1322.56 681.541 L1322 681.541 L1321.44 681.541 L1320.88 681.541 L1320.32 681.541 L1319.76 681.541 L1319.2 681.541 L1318.65 681.541 L1318.09 681.541 L1317.53 681.541 L1316.97 681.541 L1316.41 681.541 L1315.85 681.541 L1315.29 681.541 L1314.73 681.541 L1314.17 681.541 L1313.61 681.541 L1313.05 681.541 L1312.49 681.541 L1311.93 681.541 L1311.38 681.541 L1310.82 681.541 L1310.26 681.541 L1309.7 681.541 L1309.14 681.541 L1308.58 681.541 L1308.02 681.541 L1307.46 681.541 L1306.9 681.541 L1306.34 681.541 L1305.78 681.541 L1305.22 681.541 L1304.66 681.541 L1304.1 681.541 L1303.55 681.541 L1302.99 681.541 L1302.43 681.541 L1301.87 681.541 L1301.31 681.541 L1300.75 681.541 L1300.19 681.541 L1299.63 681.541 L1299.07 681.541 L1298.51 681.541 L1297.95 681.541 L1297.39 681.541 L1296.83 681.541 L1296.28 681.541 L1295.72 681.541 L1295.16 681.541 L1294.6 681.541 L1294.04 681.541 L1293.48 681.541 L1292.92 681.541 L1292.36 681.541 L1291.8 681.541 L1291.24 681.541 L1290.68 681.541 L1290.12 681.541 L1289.56 681.541 L1289 681.541 L1288.45 681.541 L1287.89 681.541 L1287.33 681.541 L1286.77 681.541 L1286.21 681.541 L1285.65 681.541 L1285.09 681.541 L1284.53 681.541 L1283.97 681.541 L1283.41 681.541 L1282.85 681.541 L1282.29 681.541 L1281.73 681.541 L1281.18 681.541 L1280.62 681.541 L1280.06 681.541 L1279.5 681.541 L1278.94 681.541 L1278.38 681.541 L1277.82 681.541 L1277.26 681.541 L1276.7 681.541 L1276.14 681.541 L1275.58 681.541 L1275.02 681.541 L1274.46 681.541 L1273.91 681.541 L1273.35 681.541 L1272.79 681.541 L1272.23 681.541 L1271.67 681.541 L1271.11 681.541 L1270.55 681.541 L1269.99 681.541 L1269.43 681.541 L1268.87 681.541 L1268.31 681.541 L1267.75 681.541 L1267.19 681.541 L1266.63 681.541 L1266.08 681.541 L1265.52 681.541 L1264.96 681.541 L1264.4 681.541 L1263.84 681.541 L1263.28 681.541 L1262.72 681.541 L1262.16 681.541 L1261.6 681.541 L1261.04 681.541 L1260.48 681.541 L1259.92 681.541 L1259.36 681.541 L1258.81 681.541 L1258.25 681.541 L1257.69 681.541 L1257.13 681.541 L1256.57 681.541 L1256.01 681.541 L1255.45 681.541 L1254.89 681.541 L1254.33 681.541 L1253.77 681.541 L1253.21 681.541 L1252.65 681.541 L1252.09 681.541 L1251.54 681.541 L1250.98 681.541 L1250.42 681.541 L1249.86 681.541 L1249.3 681.541 L1248.74 681.541 L1248.18 681.541 L1247.62 681.541 L1247.06 681.541 L1246.5 681.541 L1245.94 681.541 L1245.38 681.541 L1244.82 681.541 L1244.26 681.541 L1243.71 681.541 L1243.15 681.541 L1242.59 681.541 L1242.03 681.541 L1241.47 681.541 L1240.91 681.541 L1240.35 681.541 L1239.79 681.541 L1239.23 681.541 L1238.67 681.541 L1238.11 681.541 L1237.55 681.541 L1236.99 681.541 L1236.44 681.541 L1235.88 681.541 L1235.32 681.541 L1234.76 681.541 L1234.2 681.541 L1233.64 681.541 L1233.08 681.541 L1232.52 681.541 L1231.96 681.541 L1231.4 681.541 L1230.84 681.541 L1230.28 681.541 L1229.72 681.541 L1229.17 681.541 L1228.61 681.541 L1228.05 681.541 L1227.49 681.541 L1226.93 681.541 L1226.37 681.541 L1225.81 681.541 L1225.25 681.541 L1224.69 681.541 L1224.13 681.541 L1223.57 681.541 L1223.01 681.541 L1222.45 681.541 L1221.89 681.541 L1221.34 681.541 L1220.78 681.541 L1220.22 681.541 L1219.66 681.541 L1219.1 681.541 L1218.54 681.541 L1217.98 681.541 L1217.42 681.541 L1216.86 681.541 L1216.3 681.541 L1215.74 681.541 L1215.18 681.541 L1214.62 681.541 L1214.07 681.541 L1213.51 681.541 L1212.95 681.541 L1212.39 681.541 L1211.83 681.541 L1211.27 681.541 L1210.71 681.541 L1210.15 681.541 L1209.59 681.541 L1209.03 681.541 L1208.47 681.541 L1207.91 681.541 L1207.35 681.541 L1206.8 681.541 L1206.24 681.541 L1205.68 681.541 L1205.12 681.541 L1204.56 681.541 L1204 681.541 L1203.44 681.541 L1202.88 681.541 L1202.32 681.541 L1201.76 681.541 L1201.2 681.541 L1200.64 681.541 L1200.08 681.541 L1199.52 681.541 L1198.97 681.541 L1198.41 681.541 L1197.85 681.541 L1197.29 681.541 L1196.73 681.541 L1196.17 681.541 L1195.61 681.541 L1195.05 681.541 L1194.49 681.541 L1193.93 681.541 L1193.37 681.541 L1192.81 681.541 L1192.25 681.541 L1191.7 681.541 L1191.14 681.541 L1190.58 681.541 L1190.02 681.541 L1189.46 681.541 L1188.9 681.541 L1188.34 681.541 L1187.78 681.541 L1187.22 681.541 L1186.66 681.541 L1186.1 681.541 L1185.54 681.541 L1184.98 681.541 L1184.43 681.541 L1183.87 681.541 L1183.31 681.541 L1182.75 681.541 L1182.19 681.541 L1181.63 681.541 L1181.07 681.541 L1180.51 681.541 L1179.95 681.541 L1179.39 681.541 L1178.83 681.541 L1178.27 681.541 L1177.71 681.541 L1177.15 681.541 L1176.6 681.541 L1176.04 681.541 L1175.48 681.541 L1174.92 681.541 L1174.36 681.541 L1173.8 681.541 L1173.24 681.541 L1172.68 681.541 L1172.12 681.541 L1171.56 681.541 L1171 681.541 L1170.44 681.541 L1169.88 681.541 L1169.33 681.541 L1168.77 681.541 L1168.21 681.541 L1167.65 681.541 L1167.09 681.541 L1166.53 681.541 L1165.97 681.541 L1165.41 681.541 L1164.85 681.541 L1164.29 681.541 L1163.73 681.541 L1163.17 681.541 L1162.61 681.541 L1162.05 681.541 L1161.5 681.541 L1160.94 681.541 L1160.38 681.541 L1159.82 681.541 L1159.26 681.541 L1158.7 681.541 L1158.14 681.541 L1157.58 681.541 L1157.02 681.541 L1156.46 681.541 L1155.9 681.541 L1155.34 681.541 L1154.78 681.541 L1154.23 681.541 L1153.67 681.541 L1153.11 681.541 L1152.55 681.541 L1151.99 681.541 L1151.43 681.541 L1150.87 681.541 L1150.31 681.541 L1149.75 681.541 L1149.19 681.541 L1148.63 681.541 L1148.07 681.541 L1147.51 681.541 L1146.96 681.541 L1146.4 681.541 L1145.84 681.541 L1145.28 681.541 L1144.72 681.541 L1144.16 681.541 L1143.6 681.541 L1143.04 681.541 L1142.48 681.541 L1141.92 681.541 L1141.36 681.541 L1140.8 681.541 L1140.24 681.541 L1139.68 681.541 L1139.13 681.541 L1138.57 681.541 L1138.01 681.541 L1137.45 681.541 L1136.89 681.541 L1136.33 681.541 L1135.77 681.541 L1135.21 681.541 L1134.65 681.541 L1134.09 681.541 L1133.53 681.541 L1132.97 681.541 L1132.41 681.541 L1131.86 681.541 L1131.3 681.541 L1130.74 681.541 L1130.18 681.541 L1129.62 681.541 L1129.06 681.541 L1128.5 681.541 L1127.94 681.541 L1127.38 681.541 L1126.82 681.541 L1126.26 681.541 L1125.7 681.541 L1125.14 681.541 L1124.59 681.541 L1124.03 681.541 L1123.47 681.541 L1122.91 681.541 L1122.35 681.541 L1121.79 681.541 L1121.23 681.541 L1120.67 681.541 L1120.11 681.541 L1119.55 681.541 L1118.99 681.541 L1118.43 681.541 L1117.87 681.541 L1117.31 681.541 L1116.76 681.541 L1116.2 681.541 L1115.64 681.541 L1115.08 681.541 L1114.52 681.541 L1113.96 681.541 L1113.4 681.541 L1112.84 681.541 L1112.28 681.541 L1111.72 681.541 L1111.16 681.541 L1110.6 681.541 L1110.04 681.541 L1109.49 681.541 L1108.93 681.541 L1108.37 681.541 L1107.81 681.541 L1107.25 681.541 L1106.69 681.541 L1106.13 681.541 L1105.57 681.541 L1105.01 681.541 L1104.45 681.541 L1103.89 681.541 L1103.33 681.541 L1102.77 681.541 L1102.22 681.541 L1101.66 681.541 L1101.1 681.541 L1100.54 681.541 L1099.98 681.541 L1099.42 681.541 L1098.86 681.541 L1098.3 681.541 L1097.74 681.541 L1097.18 681.541 L1096.62 681.541 L1096.06 681.541 L1095.5 681.541 L1094.94 681.541 L1094.39 681.541 L1093.83 681.541 L1093.27 681.541 L1092.71 681.541 L1092.15 681.541 L1091.59 681.541 L1091.03 681.541 L1090.47 681.541 L1089.91 681.541 L1089.35 681.541 L1088.79 681.541 L1088.23 681.541 L1087.67 681.541 L1087.12 681.541 L1086.56 681.541 L1086 681.541 L1085.44 681.541 L1084.88 681.541 L1084.32 681.541 L1083.76 681.541 L1083.2 681.541 L1082.64 681.541 L1082.08 681.541 L1081.52 681.541 L1080.96 681.541 L1080.4 681.541 L1079.85 681.541 L1079.29 681.541 L1078.73 681.541 L1078.17 681.541 L1077.61 681.541 L1077.05 681.541 L1076.49 681.541 L1075.93 681.541 L1075.37 681.541 L1074.81 681.541 L1074.25 681.541 L1073.69 681.541 L1073.13 681.541 L1072.57 681.541 L1072.02 681.541 L1071.46 681.541 L1070.9 681.541 L1070.34 681.541 L1069.78 681.541 L1069.22 681.541 L1068.66 681.541 L1068.1 681.541 L1067.54 681.541 L1066.98 681.541 L1066.42 681.541 L1065.86 681.541 L1065.3 681.541 L1064.75 681.541 L1064.19 681.541 L1063.63 681.541 L1063.07 681.541 L1062.51 681.541 L1061.95 681.541 L1061.39 681.541 L1060.83 681.541 L1060.27 681.541 L1059.71 681.541 L1059.15 681.541 L1058.59 681.541 L1058.03 681.541 L1057.48 681.541 L1056.92 681.541 L1056.36 681.541 L1055.8 681.541 L1055.24 681.541 L1054.68 681.541 L1054.12 681.541 L1053.56 681.541 L1053 681.541 L1052.44 681.541 L1051.88 681.541 L1051.32 681.541 L1050.76 681.541 L1050.2 681.541 L1049.65 681.541 L1049.09 681.541 L1048.53 681.541 L1047.97 681.541 L1047.41 681.541 L1046.85 681.541 L1046.29 681.541 L1045.73 681.541 L1045.17 681.541 L1044.61 681.541 L1044.05 681.541 L1043.49 681.541 L1042.93 681.541 L1042.38 681.541 L1041.82 681.541 L1041.26 681.541 L1040.7 681.541 L1040.14 681.541 L1039.58 681.541 L1039.02 681.541 L1038.46 681.541 L1037.9 681.541 L1037.34 681.541 L1036.78 681.541 L1036.22 681.541 L1035.66 681.541 L1035.1 681.541 L1034.55 681.541 L1033.99 681.541 L1033.43 681.541 L1032.87 681.541 L1032.31 681.541 L1031.75 681.541 L1031.19 681.541 L1030.63 681.541 L1030.07 681.541 L1029.51 681.541 L1028.95 681.541 L1028.39 681.541 L1027.83 681.541 L1027.28 681.541 L1026.72 681.541 L1026.16 681.541 L1025.6 681.541 L1025.04 681.541 L1024.48 681.541 L1023.92 681.541 L1023.36 681.541 L1022.8 681.541 L1022.24 681.541 L1021.68 681.541 L1021.12 681.541 L1020.56 681.541 L1020.01 681.541 L1019.45 681.541 L1018.89 681.541 L1018.33 681.541 L1017.77 681.541 L1017.21 681.541 L1016.65 681.541 L1016.09 681.541 L1015.53 681.541 L1014.97 681.541 L1014.41 681.541 L1013.85 681.541 L1013.29 681.541 L1012.73 681.541 L1012.18 681.541 L1011.62 681.541 L1011.06 681.541 L1010.5 681.541 L1009.94 681.541 L1009.38 681.541 L1008.82 681.541 L1008.26 681.541 L1007.7 681.541 L1007.14 681.541 L1006.58 681.541 L1006.02 681.541 L1005.46 681.541 L1004.91 681.541 L1004.35 681.541 L1003.79 681.541 L1003.23 681.541 L1002.67 681.541 L1002.11 681.541 L1001.55 681.541 L1000.99 681.541 L1000.43 681.541 L999.872 681.541 L999.313 681.541 L998.754 681.541 L998.194 681.541 L997.635 681.541 L997.076 681.541 L996.517 681.541 L995.957 681.541 L995.398 681.541 L994.839 681.541 L994.28 681.541 L993.72 681.541 L993.161 681.541 L992.602 681.541 L992.043 681.541 L991.483 681.541 L990.924 681.541 L990.365 681.541 L989.806 681.541 L989.246 681.541 L988.687 681.541 L988.128 681.541 L987.569 681.541 L987.009 681.541 L986.45 681.541 L985.891 681.541 L985.332 681.541 L984.772 681.541 L984.213 681.541 L983.654 681.541 L983.095 681.541 L982.535 681.541 L981.976 681.541 L981.417 681.541 L980.858 681.541 L980.298 681.541 L979.739 681.541 L979.18 681.541 L978.621 681.541 L978.061 681.541 L977.502 681.541 L976.943 681.541 L976.384 681.541 L975.824 681.541 L975.265 681.541 L974.706 681.541 L974.147 681.541 L973.587 681.541 L973.028 681.541 L972.469 681.541 L971.91 681.541 L971.35 681.541 L970.791 681.541 L970.232 681.541 L969.673 681.541 L969.113 681.541 L968.554 681.541 L967.995 681.541 L967.436 681.541 L966.876 681.541 L966.317 681.541 L965.758 681.541 L965.199 681.541 L964.639 681.541 L964.08 681.541 L963.521 681.541 L962.962 681.541 L962.402 681.541 L961.843 681.541 L961.284 681.541 L960.725 681.541 L960.165 681.541 L959.606 681.541 L959.047 681.541 L958.488 681.541 L957.928 681.541 L957.369 681.541 L956.81 681.541 L956.251 681.541 L955.691 681.541 L955.132 681.541 L954.573 681.541 L954.014 681.541 L953.454 681.541 L952.895 681.541 L952.336 681.541 L951.777 681.541 L951.217 681.541 L950.658 681.541 L950.099 681.541 L949.54 681.541 L948.98 681.541 L948.421 681.541 L947.862 681.541 L947.303 681.541 L946.743 681.541 L946.184 681.541 L945.625 681.541 L945.066 681.541 L944.506 681.541 L943.947 681.541 L943.388 681.541 L942.829 681.541 L942.269 681.541 L941.71 681.541 L941.151 681.541 L940.592 681.541 L940.032 681.541 L939.473 681.541 L938.914 681.541 L938.355 681.541 L937.795 681.541 L937.236 681.541 L936.677 681.541 L936.118 681.541 L935.558 681.541 L934.999 681.541 L934.44 681.541 L933.881 681.541 L933.321 681.541 L932.762 681.541 L932.203 681.541 L931.644 681.541 L931.084 681.541 L930.525 681.541 L929.966 681.541 L929.406 681.541 L928.847 681.541 L928.288 681.541 L927.729 681.541 L927.169 681.541 L926.61 681.541 L926.051 681.541 L925.492 681.541 L924.932 681.541 L924.373 681.541 L923.814 681.541 L923.255 681.541 L922.695 681.541 L922.136 681.541 L921.577 681.541 L921.018 681.541 L920.458 681.541 L919.899 681.541 L919.34 681.541 L918.781 681.541 L918.221 681.541 L917.662 681.541 L917.103 681.541 L916.544 681.541 L915.984 681.541 L915.425 681.541 L914.866 681.541 L914.307 681.541 L913.747 681.541 L913.188 681.541 L912.629 681.541 L912.07 681.541 L911.51 681.541 L910.951 681.541 L910.392 681.541 L909.833 681.541 L909.273 681.541 L908.714 681.541 L908.155 681.541 L907.596 681.541 L907.036 681.541 L906.477 681.541 L905.918 681.541 L905.359 681.541 L904.799 681.541 L904.24 681.541 L903.681 681.541 L903.122 681.541 L902.562 681.541 L902.003 681.541 L901.444 681.541 L900.885 681.541 L900.325 681.541 L899.766 681.541 L899.207 681.541 L898.648 681.541 L898.088 681.541 L897.529 681.541 L896.97 681.541 L896.411 681.541 L895.851 681.541 L895.292 681.541 L894.733 681.541 L894.174 681.541 L893.614 681.541 L893.055 681.541 L892.496 681.541 L891.937 681.541 L891.377 681.541 L890.818 681.541 L890.259 681.541 L889.7 681.541 L889.14 681.541 L888.581 681.541 L888.022 681.541 L887.463 681.541 L886.903 681.541 L886.344 681.541 L885.785 681.541 L885.226 681.541 L884.666 681.541 L884.107 681.541 L883.548 681.541 L882.989 681.541 L882.429 681.541 L881.87 681.541 L881.311 681.541 L880.752 681.541 L880.192 681.541 L879.633 681.541 L879.074 681.541 L878.515 681.541 L877.955 681.541 L877.396 681.541 L876.837 681.541 L876.278 681.541 L875.718 681.541 L875.159 681.541 L874.6 681.541 L874.041 681.541 L873.481 681.541 L872.922 681.541 L872.363 681.541 L871.804 681.541 L871.244 681.541 L870.685 681.541 L870.126 681.541 L869.567 681.541 L869.007 681.541 L868.448 681.541 L867.889 681.541 L867.33 681.541 L866.77 681.541 L866.211 681.541 L865.652 681.541 L865.093 681.541 L864.533 681.541 L863.974 681.541 L863.415 681.541 L862.856 681.541 L862.296 681.541 L861.737 681.541 L861.178 681.541 L860.619 681.541 L860.059 681.541 L859.5 681.541 L858.941 681.541 L858.382 681.541 L857.822 681.541 L857.263 681.541 L856.704 681.541 L856.145 681.541 L855.585 681.541 L855.026 681.541 L854.467 681.541 L853.908 681.541 L853.348 681.541 L852.789 681.541 L852.23 681.541 L851.671 681.541 L851.111 681.541 L850.552 681.541 L849.993 681.541 L849.434 681.541 L848.874 681.541 L848.315 681.541 L847.756 681.541 L847.197 681.541 L846.637 681.541 L846.078 681.541 L845.519 681.541 L844.96 681.541 L844.4 681.541 L843.841 681.541 L843.282 681.541 L842.723 681.541 L842.163 681.541 L841.604 681.541 L841.045 681.541 L840.486 681.541 L839.926 681.541 L839.367 681.541 L838.808 681.541 L838.249 681.541 L837.689 681.541 L837.13 681.541 L836.571 681.541 L836.012 681.541 L835.452 681.541 L834.893 681.541 L834.334 681.541 L833.775 681.541 L833.215 681.541 L832.656 681.541 L832.097 681.541 L831.538 681.541 L830.978 681.541 L830.419 681.541 L829.86 681.541 L829.301 681.541 L828.741 681.541 L828.182 681.541 L827.623 681.541 L827.064 681.541 L826.504 681.541 L825.945 681.541 L825.386 681.541 L824.827 681.541 L824.267 681.541 L823.708 681.541 L823.149 681.541 L822.59 681.541 L822.03 681.541 L821.471 681.541 L820.912 681.541 L820.353 681.541 L819.793 681.541 L819.234 681.541 L818.675 681.541 L818.116 681.541 L817.556 681.541 L816.997 681.541 L816.438 681.541 L815.879 681.541 L815.319 681.541 L814.76 681.541 L814.201 681.541 L813.642 681.541 L813.082 681.541 L812.523 681.541 L811.964 681.541 L811.405 681.541 L810.845 681.541 L810.286 681.541 L809.727 681.541 L809.168 681.541 L808.608 681.541 L808.049 681.541 L807.49 681.541 L806.931 681.541 L806.371 681.541 L805.812 681.541 L805.253 681.541 L804.693 681.541 L804.134 681.541 L803.575 681.541 L803.016 681.541 L802.456 681.541 L801.897 681.541 L801.338 681.541 L800.779 681.541 L800.219 681.541 L799.66 681.541 L799.101 681.541 L798.542 681.541 L797.982 681.541 L797.423 681.541 L796.864 681.541 L796.305 681.541 L795.745 681.541 L795.186 681.541 L794.627 681.541 L794.068 681.541 L793.508 681.541 L792.949 681.541 L792.39 681.541 L791.831 681.541 L791.271 681.541 L790.712 681.541 L790.153 681.541 L789.594 681.541 L789.034 681.541 L788.475 681.541 L787.916 681.541 L787.357 681.541 L786.797 681.541 L786.238 681.541 L785.679 681.541 L785.12 681.541 L784.56 681.541 L784.001 681.541 L783.442 681.541 L782.883 681.541 L782.323 681.541 L781.764 681.541 L781.205 681.541 L780.646 681.541 L780.086 681.541 L779.527 681.541 L778.968 681.541 L778.409 681.541 L777.849 681.541 L777.29 681.541 L776.731 681.541 L776.172 681.541 L775.612 681.541 L775.053 681.541 L774.494 681.541 L773.935 681.541 L773.375 681.541 L772.816 681.541 L772.257 681.541 L771.698 681.541 L771.138 681.541 L770.579 681.541 L770.02 681.541 L769.461 681.541 L768.901 681.541 L768.342 681.541 L767.783 681.541 L767.224 681.541 L766.664 681.541 L766.105 681.541 L765.546 681.541 L764.987 681.541 L764.427 681.541 L763.868 681.541 L763.309 681.541 L762.75 681.541 L762.19 681.541 L761.631 681.541 L761.072 681.541 L760.513 681.541 L759.953 681.541 L759.394 681.541 L758.835 681.541 L758.276 681.541 L757.716 681.541 L757.157 681.541 L756.598 681.541 L756.039 681.541 L755.479 681.541 L754.92 681.541 L754.361 681.541 L753.802 681.541 L753.242 681.541 L752.683 681.541 L752.124 681.541 L751.565 681.541 L751.005 681.541 L750.446 681.541 L749.887 681.541 L749.328 681.541 L748.768 681.541 L748.209 681.541 L747.65 681.541 L747.091 681.541 L746.531 681.541 L745.972 681.541 L745.413 681.541 L744.854 681.541 L744.294 681.541 L743.735 681.541 L743.176 681.541 L742.617 681.541 L742.057 681.541 L741.498 681.541 L740.939 681.541 L740.38 681.541 L739.82 681.541 L739.261 681.541 L738.702 681.541 L738.143 681.541 L737.583 681.541 L737.024 681.541 L736.465 681.541 L735.906 681.541 L735.346 681.541 L734.787 681.541 L734.228 681.541 L733.669 681.541 L733.109 681.541 L732.55 681.541 L731.991 681.541 L731.432 681.541 L730.872 681.541 L730.313 681.541 L729.754 681.541 L729.195 681.541 L728.635 681.541 L728.076 681.541 L727.517 681.541 L726.958 681.541 L726.398 681.541 L725.839 681.541 L725.28 681.541 L724.721 681.541 L724.161 681.541 L723.602 681.541 L723.043 681.541 L722.484 681.541 L721.924 681.541 L721.365 681.541 L720.806 681.541 L720.247 681.541  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.13 720.806,683.13 721.365,683.13 721.924,683.13 722.484,683.13 723.043,683.13 723.602,683.13 724.161,683.13 724.721,683.13 725.28,683.13 725.839,683.13 726.398,683.13 726.958,683.13 727.517,683.13 728.076,683.13 728.635,683.13 729.195,683.13 729.754,683.13 730.313,683.13 730.872,683.13 731.432,683.13 731.991,683.13 732.55,683.13 733.109,683.13 733.669,683.13 734.228,683.13 734.787,683.13 735.346,683.13 735.906,683.13 736.465,683.13 737.024,683.13 737.583,683.13 738.143,683.13 738.702,683.13 739.261,683.13 739.82,683.13 740.38,683.13 740.939,683.13 741.498,683.13 742.057,683.13 742.617,683.13 743.176,683.13 743.735,683.13 744.294,683.13 744.854,683.13 745.413,683.13 745.972,683.13 746.531,683.13 747.091,683.13 747.65,683.13 748.209,683.13 748.768,683.13 749.328,683.13 749.887,683.13 750.446,683.13 751.005,683.13 751.565,683.13 752.124,683.13 752.683,683.13 753.242,683.13 753.802,683.13 754.361,683.13 754.92,683.13 755.479,683.13 756.039,683.13 756.598,683.13 757.157,683.13 757.716,683.13 758.276,683.13 758.835,683.13 759.394,683.13 759.953,683.13 760.513,683.13 761.072,683.13 761.631,683.13 762.19,683.13 762.75,683.13 763.309,683.13 763.868,683.13 764.427,683.13 764.987,683.13 765.546,683.13 766.105,683.13 766.664,683.13 767.224,683.13 767.783,683.13 768.342,683.13 768.901,683.13 769.461,683.13 770.02,683.13 770.579,683.13 771.138,683.13 771.698,683.13 772.257,683.13 772.816,683.13 773.375,683.13 773.935,683.13 774.494,683.13 775.053,683.13 775.612,683.13 776.172,683.13 776.731,683.13 777.29,683.13 777.849,683.13 778.409,683.13 778.968,683.13 779.527,683.13 780.086,683.13 780.646,683.13 781.205,683.13 781.764,683.13 782.323,683.13 782.883,683.13 783.442,683.13 784.001,683.13 784.56,683.13 785.12,683.13 785.679,683.13 786.238,683.13 786.797,683.13 787.357,683.13 787.916,683.13 788.475,683.13 789.034,683.13 789.594,683.13 790.153,683.13 790.712,683.13 791.271,683.13 791.831,683.13 792.39,683.13 792.949,683.13 793.508,683.13 794.068,683.13 794.627,683.13 795.186,683.13 795.745,683.13 796.305,683.13 796.864,683.13 797.423,683.13 797.982,683.13 798.542,683.13 799.101,683.13 799.66,683.13 800.219,683.13 800.779,683.13 801.338,683.13 801.897,683.13 802.456,683.13 803.016,683.13 803.575,683.13 804.134,683.13 804.693,683.13 805.253,683.13 805.812,683.13 806.371,683.13 806.931,683.13 807.49,683.13 808.049,683.13 808.608,683.13 809.168,683.13 809.727,683.13 810.286,683.13 810.845,683.13 811.405,683.13 811.964,683.13 812.523,683.13 813.082,683.13 813.642,683.13 814.201,683.13 814.76,683.13 815.319,683.13 815.879,683.13 816.438,683.13 816.997,683.13 817.556,683.13 818.116,683.13 818.675,683.13 819.234,683.13 819.793,683.13 820.353,683.13 820.912,683.13 821.471,683.13 822.03,683.13 822.59,683.13 823.149,683.13 823.708,683.13 824.267,683.13 824.827,683.13 825.386,683.13 825.945,683.13 826.504,683.13 827.064,683.13 827.623,683.13 828.182,683.13 828.741,683.13 829.301,683.13 829.86,683.13 830.419,683.13 830.978,683.13 831.538,683.13 832.097,683.13 832.656,683.13 833.215,683.13 833.775,683.13 834.334,683.13 834.893,683.13 835.452,683.13 836.012,683.13 836.571,683.13 837.13,683.13 837.689,683.13 838.249,683.13 838.808,683.13 839.367,683.13 839.926,683.13 840.486,683.13 841.045,683.13 841.604,683.13 842.163,683.13 842.723,683.13 843.282,683.13 843.841,683.13 844.4,683.13 844.96,683.13 845.519,683.13 846.078,683.13 846.637,683.13 847.197,683.13 847.756,683.13 848.315,683.13 848.874,683.13 849.434,683.13 849.993,683.13 850.552,683.13 851.111,683.13 851.671,683.13 852.23,683.13 852.789,683.13 853.348,683.13 853.908,683.13 854.467,683.13 855.026,683.13 855.585,683.13 856.145,683.13 856.704,683.13 857.263,683.13 857.822,683.13 858.382,683.13 858.941,683.13 859.5,683.13 860.059,683.13 860.619,683.13 861.178,683.13 861.737,683.13 862.296,683.13 862.856,683.13 863.415,683.13 863.974,683.13 864.533,683.13 865.093,683.13 865.652,683.13 866.211,683.13 866.77,683.13 867.33,683.13 867.889,683.13 868.448,683.13 869.007,683.13 869.567,683.13 870.126,683.13 870.685,683.13 871.244,683.13 871.804,683.13 872.363,683.13 872.922,683.13 873.481,683.13 874.041,683.13 874.6,683.13 875.159,683.13 875.718,683.13 876.278,683.13 876.837,683.13 877.396,683.13 877.955,683.13 878.515,683.13 879.074,683.13 879.633,683.13 880.192,683.13 880.752,683.13 881.311,683.13 881.87,683.13 882.429,683.13 882.989,683.13 883.548,683.13 884.107,683.13 884.666,683.13 885.226,683.13 885.785,683.13 886.344,683.13 886.903,683.13 887.463,683.13 888.022,683.13 888.581,683.13 889.14,683.13 889.7,683.13 890.259,683.13 890.818,683.13 891.377,683.13 891.937,683.13 892.496,683.13 893.055,683.13 893.614,683.13 894.174,683.13 894.733,683.13 895.292,683.13 895.851,683.13 896.411,683.13 896.97,683.13 897.529,683.13 898.088,683.13 898.648,683.13 899.207,683.13 899.766,683.13 900.325,683.13 900.885,683.13 901.444,683.13 902.003,683.13 902.562,683.13 903.122,683.13 903.681,683.13 904.24,683.13 904.799,683.13 905.359,683.13 905.918,683.13 906.477,683.13 907.036,683.13 907.596,683.13 908.155,683.13 908.714,683.13 909.273,683.13 909.833,683.13 910.392,683.13 910.951,683.13 911.51,683.13 912.07,683.13 912.629,683.13 913.188,683.13 913.747,683.13 914.307,683.13 914.866,683.13 915.425,683.13 915.984,683.13 916.544,683.13 917.103,683.13 917.662,683.13 918.221,683.13 918.781,683.13 919.34,683.13 919.899,683.13 920.458,683.13 921.018,683.13 921.577,683.13 922.136,683.13 922.695,683.13 923.255,683.13 923.814,683.13 924.373,683.13 924.932,683.13 925.492,683.13 926.051,683.13 926.61,683.13 927.169,683.13 927.729,683.13 928.288,683.13 928.847,683.13 929.406,683.13 929.966,683.13 930.525,683.13 931.084,683.13 931.644,683.13 932.203,683.13 932.762,683.13 933.321,683.13 933.881,683.13 934.44,683.13 934.999,683.13 935.558,683.13 936.118,683.13 936.677,683.13 937.236,683.13 937.795,683.13 938.355,683.13 938.914,683.13 939.473,683.13 940.032,683.13 940.592,683.13 941.151,683.13 941.71,683.13 942.269,683.13 942.829,683.13 943.388,683.13 943.947,683.13 944.506,683.13 945.066,683.13 945.625,683.13 946.184,683.13 946.743,683.13 947.303,683.13 947.862,683.13 948.421,683.13 948.98,683.13 949.54,683.13 950.099,683.13 950.658,683.13 951.217,683.13 951.777,683.13 952.336,683.13 952.895,683.13 953.454,683.13 954.014,683.13 954.573,683.13 955.132,683.13 955.691,683.13 956.251,683.13 956.81,683.13 957.369,683.13 957.928,683.13 958.488,683.13 959.047,683.13 959.606,683.13 960.165,683.13 960.725,683.13 961.284,683.13 961.843,683.13 962.402,683.13 962.962,683.13 963.521,683.13 964.08,683.13 964.639,683.13 965.199,683.13 965.758,683.13 966.317,683.13 966.876,683.13 967.436,683.13 967.995,683.13 968.554,683.13 969.113,683.13 969.673,683.13 970.232,683.13 970.791,683.13 971.35,683.13 971.91,683.13 972.469,683.13 973.028,683.13 973.587,683.13 974.147,683.13 974.706,683.13 975.265,683.13 975.824,683.13 976.384,683.13 976.943,683.13 977.502,683.13 978.061,683.13 978.621,683.13 979.18,683.13 979.739,683.13 980.298,683.13 980.858,683.13 981.417,683.13 981.976,683.13 982.535,683.13 983.095,683.13 983.654,683.13 984.213,683.13 984.772,683.13 985.332,683.13 985.891,683.13 986.45,683.13 987.009,683.13 987.569,683.13 988.128,683.13 988.687,683.13 989.246,683.13 989.806,683.13 990.365,683.13 990.924,683.13 991.483,683.13 992.043,683.13 992.602,683.13 993.161,683.13 993.72,683.13 994.28,683.13 994.839,683.13 995.398,683.13 995.957,683.13 996.517,683.13 997.076,683.13 997.635,683.13 998.194,683.13 998.754,683.13 999.313,683.13 999.872,683.13 1000.43,683.13 1000.99,683.13 1001.55,683.13 1002.11,683.13 1002.67,683.13 1003.23,683.13 1003.79,683.13 1004.35,683.13 1004.91,683.13 1005.46,683.13 1006.02,683.13 1006.58,683.13 1007.14,683.13 1007.7,683.13 1008.26,683.13 1008.82,683.13 1009.38,683.13 1009.94,683.13 1010.5,683.13 1011.06,683.13 1011.62,683.13 1012.18,683.13 1012.73,683.13 1013.29,683.13 1013.85,683.13 1014.41,683.13 1014.97,683.13 1015.53,683.13 1016.09,683.13 1016.65,683.13 1017.21,683.13 1017.77,683.13 1018.33,683.13 1018.89,683.13 1019.45,683.13 1020.01,683.13 1020.56,683.13 1021.12,683.13 1021.68,683.13 1022.24,683.13 1022.8,683.13 1023.36,683.13 1023.92,683.13 1024.48,683.13 1025.04,683.13 1025.6,683.13 1026.16,683.13 1026.72,683.13 1027.28,683.13 1027.83,683.13 1028.39,683.13 1028.95,683.13 1029.51,683.13 1030.07,683.13 1030.63,683.13 1031.19,683.13 1031.75,683.13 1032.31,683.13 1032.87,683.13 1033.43,683.13 1033.99,683.13 1034.55,683.13 1035.1,683.13 1035.66,683.13 1036.22,683.13 1036.78,683.13 1037.34,683.13 1037.9,683.13 1038.46,683.13 1039.02,683.13 1039.58,683.13 1040.14,683.13 1040.7,683.13 1041.26,683.13 1041.82,683.13 1042.38,683.13 1042.93,683.13 1043.49,683.13 1044.05,683.13 1044.61,683.13 1045.17,683.13 1045.73,683.13 1046.29,683.13 1046.85,683.13 1047.41,683.13 1047.97,683.13 1048.53,683.13 1049.09,683.13 1049.65,683.13 1050.2,683.13 1050.76,683.13 1051.32,683.13 1051.88,683.13 1052.44,683.13 1053,683.13 1053.56,683.13 1054.12,683.13 1054.68,683.13 1055.24,683.13 1055.8,683.13 1056.36,683.13 1056.92,683.13 1057.48,683.13 1058.03,683.13 1058.59,683.13 1059.15,683.13 1059.71,683.13 1060.27,683.13 1060.83,683.13 1061.39,683.13 1061.95,683.13 1062.51,683.13 1063.07,683.13 1063.63,683.13 1064.19,683.13 1064.75,683.13 1065.3,683.13 1065.86,683.13 1066.42,683.13 1066.98,683.13 1067.54,683.13 1068.1,683.13 1068.66,683.13 1069.22,683.13 1069.78,683.13 1070.34,683.13 1070.9,683.13 1071.46,683.13 1072.02,683.13 1072.57,683.13 1073.13,683.13 1073.69,683.13 1074.25,683.13 1074.81,683.13 1075.37,683.13 1075.93,683.13 1076.49,683.13 1077.05,683.13 1077.61,683.13 1078.17,683.13 1078.73,683.13 1079.29,683.13 1079.85,683.13 1080.4,683.13 1080.96,683.13 1081.52,683.13 1082.08,683.13 1082.64,683.13 1083.2,683.13 1083.76,683.13 1084.32,683.13 1084.88,683.13 1085.44,683.13 1086,683.13 1086.56,683.13 1087.12,683.13 1087.67,683.13 1088.23,683.13 1088.79,683.13 1089.35,683.13 1089.91,683.13 1090.47,683.13 1091.03,683.13 1091.59,683.13 1092.15,683.13 1092.71,683.13 1093.27,683.13 1093.83,683.13 1094.39,683.13 1094.94,683.13 1095.5,683.13 1096.06,683.13 1096.62,683.13 1097.18,683.13 1097.74,683.13 1098.3,683.13 1098.86,683.13 1099.42,683.13 1099.98,683.13 1100.54,683.13 1101.1,683.13 1101.66,683.13 1102.22,683.13 1102.77,683.13 1103.33,683.13 1103.89,683.13 1104.45,683.13 1105.01,683.13 1105.57,683.13 1106.13,683.13 1106.69,683.13 1107.25,683.13 1107.81,683.13 1108.37,683.13 1108.93,683.13 1109.49,683.13 1110.04,683.13 1110.6,683.13 1111.16,683.13 1111.72,683.13 1112.28,683.13 1112.84,683.13 1113.4,683.13 1113.96,683.13 1114.52,683.13 1115.08,683.13 1115.64,683.13 1116.2,683.13 1116.76,683.13 1117.31,683.13 1117.87,683.13 1118.43,683.13 1118.99,683.13 1119.55,683.13 1120.11,683.13 1120.67,683.13 1121.23,683.13 1121.79,683.13 1122.35,683.13 1122.91,683.13 1123.47,683.13 1124.03,683.13 1124.59,683.13 1125.14,683.13 1125.7,683.13 1126.26,683.13 1126.82,683.13 1127.38,683.13 1127.94,683.13 1128.5,683.13 1129.06,683.13 1129.62,683.13 1130.18,683.13 1130.74,683.13 1131.3,683.13 1131.86,683.13 1132.41,683.13 1132.97,683.13 1133.53,683.13 1134.09,683.13 1134.65,683.13 1135.21,683.13 1135.77,683.13 1136.33,683.13 1136.89,683.13 1137.45,683.13 1138.01,683.13 1138.57,683.13 1139.13,683.13 1139.68,683.13 1140.24,683.13 1140.8,683.13 1141.36,683.13 1141.92,683.13 1142.48,683.13 1143.04,683.13 1143.6,683.13 1144.16,683.13 1144.72,683.13 1145.28,683.13 1145.84,683.13 1146.4,683.13 1146.96,683.13 1147.51,683.13 1148.07,683.13 1148.63,683.13 1149.19,683.13 1149.75,683.13 1150.31,683.13 1150.87,683.13 1151.43,683.13 1151.99,683.13 1152.55,683.13 1153.11,683.13 1153.67,683.13 1154.23,683.13 1154.78,683.13 1155.34,683.13 1155.9,683.13 1156.46,683.13 1157.02,683.13 1157.58,683.13 1158.14,683.13 1158.7,683.13 1159.26,683.13 1159.82,683.13 1160.38,683.13 1160.94,683.13 1161.5,683.13 1162.05,683.13 1162.61,683.13 1163.17,683.13 1163.73,683.13 1164.29,683.13 1164.85,683.13 1165.41,683.13 1165.97,683.13 1166.53,683.13 1167.09,683.13 1167.65,683.13 1168.21,683.13 1168.77,683.13 1169.33,683.13 1169.88,683.13 1170.44,683.13 1171,683.13 1171.56,683.13 1172.12,683.13 1172.68,683.13 1173.24,683.13 1173.8,683.13 1174.36,683.13 1174.92,683.13 1175.48,683.13 1176.04,683.13 1176.6,683.13 1177.15,683.13 1177.71,683.13 1178.27,683.13 1178.83,683.13 1179.39,683.13 1179.95,683.13 1180.51,683.13 1181.07,683.13 1181.63,683.13 1182.19,683.13 1182.75,683.13 1183.31,683.13 1183.87,683.13 1184.43,683.13 1184.98,683.13 1185.54,683.13 1186.1,683.13 1186.66,683.13 1187.22,683.13 1187.78,683.13 1188.34,683.13 1188.9,683.13 1189.46,683.13 1190.02,683.13 1190.58,683.13 1191.14,683.13 1191.7,683.13 1192.25,683.13 1192.81,683.13 1193.37,683.13 1193.93,683.13 1194.49,683.13 1195.05,683.13 1195.61,683.13 1196.17,683.13 1196.73,683.13 1197.29,683.13 1197.85,683.13 1198.41,683.13 1198.97,683.13 1199.52,683.13 1200.08,683.13 1200.64,683.13 1201.2,683.13 1201.76,683.13 1202.32,683.13 1202.88,683.13 1203.44,683.13 1204,683.13 1204.56,683.13 1205.12,683.13 1205.68,683.13 1206.24,683.13 1206.8,683.13 1207.35,683.13 1207.91,683.13 1208.47,683.13 1209.03,683.13 1209.59,683.13 1210.15,683.13 1210.71,683.13 1211.27,683.13 1211.83,683.13 1212.39,683.13 1212.95,683.13 1213.51,683.13 1214.07,683.13 1214.62,683.13 1215.18,683.13 1215.74,683.13 1216.3,683.13 1216.86,683.13 1217.42,683.13 1217.98,683.13 1218.54,683.13 1219.1,683.13 1219.66,683.13 1220.22,683.13 1220.78,683.13 1221.34,683.13 1221.89,683.13 1222.45,683.13 1223.01,683.13 1223.57,683.13 1224.13,683.13 1224.69,683.13 1225.25,683.13 1225.81,683.13 1226.37,683.13 1226.93,683.13 1227.49,683.13 1228.05,683.13 1228.61,683.13 1229.17,683.13 1229.72,683.13 1230.28,683.13 1230.84,683.13 1231.4,683.13 1231.96,683.13 1232.52,683.13 1233.08,683.13 1233.64,683.13 1234.2,683.13 1234.76,683.13 1235.32,683.13 1235.88,683.13 1236.44,683.13 1236.99,683.13 1237.55,683.13 1238.11,683.13 1238.67,683.13 1239.23,683.13 1239.79,683.13 1240.35,683.13 1240.91,683.13 1241.47,683.13 1242.03,683.13 1242.59,683.13 1243.15,683.13 1243.71,683.13 1244.26,683.13 1244.82,683.13 1245.38,683.13 1245.94,683.13 1246.5,683.13 1247.06,683.13 1247.62,683.13 1248.18,683.13 1248.74,683.13 1249.3,683.13 1249.86,683.13 1250.42,683.13 1250.98,683.13 1251.54,683.13 1252.09,683.13 1252.65,683.13 1253.21,683.13 1253.77,683.13 1254.33,683.13 1254.89,683.13 1255.45,683.13 1256.01,683.13 1256.57,683.13 1257.13,683.13 1257.69,683.13 1258.25,683.13 1258.81,683.13 1259.36,683.13 1259.92,683.13 1260.48,683.13 1261.04,683.13 1261.6,683.13 1262.16,683.13 1262.72,683.13 1263.28,683.13 1263.84,683.13 1264.4,683.13 1264.96,683.13 1265.52,683.13 1266.08,683.13 1266.63,683.13 1267.19,683.13 1267.75,683.13 1268.31,683.13 1268.87,683.13 1269.43,683.13 1269.99,683.13 1270.55,683.13 1271.11,683.13 1271.67,683.13 1272.23,683.13 1272.79,683.13 1273.35,683.13 1273.91,683.13 1274.46,683.13 1275.02,683.13 1275.58,683.13 1276.14,683.13 1276.7,683.13 1277.26,683.13 1277.82,683.13 1278.38,683.13 1278.94,683.13 1279.5,683.13 1280.06,683.13 1280.62,683.13 1281.18,683.13 1281.73,683.13 1282.29,683.13 1282.85,683.13 1283.41,683.13 1283.97,683.13 1284.53,683.13 1285.09,683.13 1285.65,683.13 1286.21,683.13 1286.77,683.13 1287.33,683.13 1287.89,683.13 1288.45,683.13 1289,683.13 1289.56,683.13 1290.12,683.13 1290.68,683.13 1291.24,683.13 1291.8,683.13 1292.36,683.13 1292.92,683.13 1293.48,683.13 1294.04,683.13 1294.6,683.13 1295.16,683.13 1295.72,683.13 1296.28,683.13 1296.83,683.13 1297.39,683.13 1297.95,683.13 1298.51,683.13 1299.07,683.13 1299.63,683.13 1300.19,683.13 1300.75,683.13 1301.31,683.13 1301.87,683.13 1302.43,683.13 1302.99,683.13 1303.55,683.13 1304.1,683.13 1304.66,683.13 1305.22,683.13 1305.78,683.13 1306.34,683.13 1306.9,683.13 1307.46,683.13 1308.02,683.13 1308.58,683.13 1309.14,683.13 1309.7,683.13 1310.26,683.13 1310.82,683.13 1311.38,683.13 1311.93,683.13 1312.49,683.13 1313.05,683.13 1313.61,683.13 1314.17,683.13 1314.73,683.13 1315.29,683.13 1315.85,683.13 1316.41,683.13 1316.97,683.13 1317.53,683.13 1318.09,683.13 1318.65,683.13 1319.2,683.13 1319.76,683.13 1320.32,683.13 1320.88,683.13 1321.44,683.13 1322,683.13 1322.56,683.13 1323.12,683.13 1323.68,683.13 1324.24,683.13 1324.8,683.13 1325.36,683.13 1325.92,683.13 1326.47,683.13 1327.03,683.13 1327.59,683.13 1328.15,683.13 1328.71,683.13 1329.27,683.13 1329.83,683.13 1330.39,683.13 1330.95,683.13 1331.51,683.13 1332.07,683.13 1332.63,683.13 1333.19,683.13 1333.75,683.13 1334.3,683.13 1334.86,683.13 1335.42,683.13 1335.98,683.13 1336.54,683.13 1337.1,683.13 1337.66,683.13 1338.22,683.13 1338.78,683.13 1339.34,683.13 1339.9,683.13 1340.46,683.13 1341.02,683.13 1341.57,683.13 1342.13,683.13 1342.69,683.13 1343.25,683.13 1343.81,683.13 1344.37,683.13 1344.93,683.13 1345.49,683.13 1346.05,683.13 1346.61,683.13 1347.17,683.13 1347.73,683.13 1348.29,683.13 1348.84,683.13 1349.4,683.13 1349.96,683.13 1350.52,683.13 1351.08,683.13 1351.64,683.13 1352.2,683.13 1352.76,683.13 1353.32,683.13 1353.88,683.13 1354.44,683.13 1355,683.13 1355.56,683.13 1356.12,683.13 1356.67,683.13 1357.23,683.13 1357.79,683.13 1358.35,683.13 1358.91,683.13 1359.47,683.13 1360.03,683.13 1360.59,683.13 1361.15,683.13 1361.71,683.13 1362.27,683.13 1362.83,683.13 1363.39,683.13 1363.94,683.13 1364.5,683.13 1365.06,683.13 1365.62,683.13 1366.18,683.13 1366.74,683.13 1367.3,683.13 1367.86,683.13 1368.42,683.13 1368.98,683.13 1369.54,683.13 1370.1,683.13 1370.66,683.13 1371.21,683.13 1371.77,683.13 1372.33,683.13 1372.89,683.13 1373.45,683.13 1374.01,683.13 1374.57,683.13 1375.13,683.13 1375.69,683.13 1376.25,683.13 1376.81,683.13 1377.37,683.13 1377.93,683.13 1378.49,683.13 1379.04,683.13 1379.6,683.13 1380.16,683.13 1380.72,683.13 1381.28,683.13 1381.84,683.13 1382.4,683.13 1382.96,683.13 1383.52,683.13 1384.08,683.13 1384.64,683.13 1385.2,683.13 1385.76,683.13 1386.31,683.13 1386.87,683.13 1387.43,683.13 1387.99,683.13 1388.55,683.13 1389.11,683.13 1389.67,683.13 1390.23,683.13 1390.79,683.13 1391.35,683.13 1391.91,683.13 1392.47,683.13 1393.03,683.13 1393.58,683.13 1394.14,683.13 1394.7,683.13 1395.26,683.13 1395.82,683.13 1396.38,683.13 1396.94,683.13 1397.5,683.13 1398.06,683.13 1398.62,683.13 1399.18,683.13 1399.74,683.13 1400.3,683.13 1400.86,683.13 1401.41,683.13 1401.97,683.13 1402.53,683.13 1403.09,683.13 1403.65,683.13 1404.21,683.13 1404.77,683.13 1405.33,683.13 1405.89,683.13 1406.45,683.13 1407.01,683.13 1407.57,683.13 1408.13,683.13 1408.68,683.13 1409.24,683.13 1409.8,683.13 1410.36,683.13 1410.92,683.13 1411.48,683.13 1412.04,683.13 1412.6,683.13 1413.16,683.13 1413.72,683.13 1414.28,683.13 1414.84,683.13 1415.4,683.13 1415.95,683.13 1416.51,683.13 1417.07,683.13 1417.63,683.13 1418.19,683.13 1418.75,683.13 1419.31,683.13 1419.87,683.13 1420.43,683.13 1420.99,683.13 1421.55,683.13 1422.11,683.13 1422.67,683.13 1423.23,683.13 1423.78,683.13 1424.34,683.13 1424.9,683.13 1425.46,683.13 1426.02,683.13 1426.58,683.13 1427.14,683.13 1427.7,683.13 1428.26,683.13 1428.82,683.13 1429.38,683.13 1429.94,683.13 1430.5,683.13 1431.05,683.13 1431.61,683.13 1432.17,683.13 1432.73,683.13 1433.29,683.13 1433.85,683.13 1434.41,683.13 1434.97,683.13 1435.53,683.13 1436.09,683.13 1436.65,683.13 1437.21,683.13 1437.77,683.13 1438.33,683.13 1438.88,683.13 1439.44,683.13 1440,683.13 1440.56,683.13 1441.12,683.13 1441.68,683.13 1442.24,683.13 1442.8,683.13 1443.36,683.13 1443.92,683.13 1444.48,683.13 1445.04,683.13 1445.6,683.13 1446.15,683.13 1446.71,683.13 1447.27,683.13 1447.83,683.13 1448.39,683.13 1448.95,683.13 1449.51,683.13 1450.07,683.13 1450.63,683.13 1451.19,683.13 1451.75,683.13 1452.31,683.13 1452.87,683.13 1453.42,683.13 1453.98,683.13 1454.54,683.13 1455.1,683.13 1455.66,683.13 1456.22,683.13 1456.78,683.13 1457.34,683.13 1457.9,683.13 1458.46,683.13 1459.02,683.13 1459.58,683.13 1460.14,683.13 1460.7,683.13 1461.25,683.13 1461.81,683.13 1462.37,683.13 1462.93,683.13 1463.49,683.13 1464.05,683.13 1464.61,683.13 1465.17,683.13 1465.73,683.13 1466.29,683.13 1466.85,683.13 1467.41,683.13 1467.97,683.13 1468.52,683.13 1469.08,683.13 1469.64,683.13 1470.2,683.13 1470.76,683.13 1471.32,683.13 1471.88,683.13 1472.44,683.13 1473,683.13 1473.56,683.13 1474.12,683.13 1474.68,683.13 1475.24,683.13 1475.79,683.13 1476.35,683.13 1476.91,683.13 1477.47,683.13 1478.03,683.13 1478.59,683.13 1479.15,683.13 1479.71,683.13 1480.27,683.13 1480.83,683.13 1481.39,683.13 1481.95,683.13 1482.51,683.13 1483.07,683.13 1483.62,683.13 1484.18,683.13 1484.74,683.13 1485.3,683.13 1485.86,683.13 1486.42,683.13 1486.98,683.13 1487.54,683.13 1488.1,683.13 1488.66,683.13 1489.22,683.13 1489.78,683.13 1490.34,683.13 1490.89,683.13 1491.45,683.13 1492.01,683.13 1492.57,683.13 1493.13,683.13 1493.69,683.13 1494.25,683.13 1494.81,683.13 1495.37,683.13 1495.93,683.13 1496.49,683.13 1497.05,683.13 1497.61,683.13 1498.16,683.13 1498.72,683.13 1499.28,683.13 1499.84,683.13 1500.4,683.13 1500.96,683.13 1501.52,683.13 1502.08,683.13 1502.64,683.13 1503.2,683.13 1503.76,683.13 1504.32,683.13 1504.88,683.13 1505.44,683.13 1505.99,683.13 1506.55,683.13 1507.11,683.13 1507.67,683.13 1508.23,683.13 1508.79,683.13 1509.35,683.13 1509.91,683.13 1510.47,683.13 1511.03,683.13 1511.59,683.13 1512.15,683.13 1512.71,683.13 1513.26,683.13 1513.82,683.13 1514.38,683.13 1514.94,683.13 1515.5,683.13 1516.06,683.13 1516.62,683.13 1517.18,683.13 1517.74,683.13 1518.3,683.13 1518.86,683.13 1519.42,683.13 1519.98,683.13 1520.53,683.13 1521.09,683.13 1521.65,683.13 1522.21,683.13 1522.77,683.13 1523.33,683.13 1523.89,683.13 1524.45,683.13 1525.01,683.13 1525.57,683.13 1526.13,683.13 1526.69,683.13 1527.25,683.13 1527.81,683.13 1528.36,683.13 1528.92,683.13 1529.48,683.13 1530.04,683.13 1530.6,683.13 1531.16,683.13 1531.72,683.13 1532.28,683.13 1532.84,683.13 1533.4,683.13 1533.96,683.13 1534.52,683.13 1535.08,683.13 1535.63,683.13 1536.19,683.13 1536.75,683.13 1537.31,683.13 1537.87,683.13 1538.43,683.13 1538.99,683.13 1539.55,683.13 1540.11,683.13 1540.67,683.13 1541.23,683.13 1541.79,683.13 1542.35,683.13 1542.9,683.13 1543.46,683.13 1544.02,683.13 1544.58,683.13 1545.14,683.13 1545.7,683.13 1546.26,683.13 1546.82,683.13 1547.38,683.13 1547.94,683.13 1548.5,683.13 1549.06,683.13 1549.62,683.13 1550.18,683.13 1550.73,683.13 1551.29,683.13 1551.85,683.13 1552.41,683.13 1552.97,683.13 1553.53,683.13 1554.09,683.13 1554.65,683.13 1555.21,683.13 1555.77,683.13 1556.33,683.13 1556.89,683.13 1557.45,683.13 1558,683.13 1558.56,683.13 1559.12,683.13 1559.68,683.13 1560.24,683.13 1560.8,683.13 1561.36,683.13 1561.92,683.13 1562.48,683.13 1563.04,683.13 1563.6,683.13 1564.16,683.13 1564.72,683.13 1565.28,683.13 1565.83,683.13 1566.39,683.13 1566.95,683.13 1567.51,683.13 1568.07,683.13 1568.63,683.13 1569.19,683.13 1569.75,683.13 1570.31,683.13 1570.87,683.13 1571.43,683.13 1571.99,683.13 1572.55,683.13 1573.1,683.13 1573.66,683.13 1574.22,683.13 1574.78,683.13 1575.34,683.13 1575.9,683.13 1576.46,683.13 1577.02,683.13 1577.58,683.13 1578.14,683.13 1578.7,683.13 1579.26,683.13 1579.82,683.13 1580.37,683.13 1580.93,683.13 1581.49,683.13 1582.05,683.13 1582.61,683.13 1583.17,683.13 1583.73,683.13 1584.29,683.13 1584.85,683.13 1585.41,683.13 1585.97,683.13 1586.53,683.13 1587.09,683.13 1587.65,683.13 1588.2,683.13 1588.76,683.13 1589.32,683.13 1589.88,683.13 1590.44,683.13 1591,683.13 1591.56,683.13 1592.12,683.13 1592.68,683.13 1593.24,683.13 1593.8,683.13 1594.36,683.13 1594.92,683.13 1595.47,683.13 1596.03,683.13 1596.59,683.13 1597.15,683.13 1597.71,683.13 1598.27,683.13 1598.83,683.13 1599.39,683.13 1599.95,683.13 1600.51,683.13 1601.07,683.13 1601.63,683.13 1602.19,683.13 1602.74,683.13 1603.3,683.13 1603.86,683.13 1604.42,683.13 1604.98,683.13 1605.54,683.13 1606.1,683.13 1606.66,683.13 1607.22,683.13 1607.78,683.13 1608.34,683.13 1608.9,683.13 1609.46,683.13 1610.02,683.13 1610.57,683.13 1611.13,683.13 1611.69,683.13 1612.25,683.13 1612.81,683.13 1613.37,683.13 1613.93,683.13 1614.49,683.13 1615.05,683.13 1615.61,683.13 1616.17,683.13 1616.73,683.13 1617.29,683.13 1617.84,683.13 1618.4,683.13 1618.96,683.13 1619.52,683.13 1620.08,683.13 1620.64,683.13 1621.2,683.13 1621.76,683.13 1622.32,683.13 1622.88,683.13 1623.44,683.13 1624,683.13 1624.56,683.13 1625.11,683.13 1625.67,683.13 1626.23,683.13 1626.79,683.13 1627.35,683.13 1627.91,683.13 1628.47,683.13 1629.03,683.13 1629.59,683.13 1630.15,683.13 1630.71,683.13 1631.27,683.13 1631.83,683.13 1632.39,683.13 1632.94,683.13 1633.5,683.13 1634.06,683.13 1634.62,683.13 1635.18,683.13 1635.74,683.13 1636.3,683.13 1636.86,683.13 1637.42,683.13 1637.98,683.13 1638.54,683.13 1639.1,683.13 1639.66,683.13 1640.21,683.13 1640.77,683.13 1641.33,683.13 1641.89,683.13 1642.45,683.13 1643.01,683.13 1643.57,683.13 1644.13,683.13 1644.69,683.13 1645.25,683.13 1645.81,683.13 1646.37,683.13 1646.93,683.13 1647.48,683.13 1648.04,683.13 1648.6,683.13 1649.16,683.13 1649.72,683.13 1650.28,683.13 1650.84,683.13 1651.4,683.13 1651.96,683.13 1652.52,683.13 1653.08,683.13 1653.64,683.13 1654.2,683.13 1654.76,683.13 1655.31,683.13 1655.87,683.13 1656.43,683.13 1656.99,683.13 1657.55,683.13 1658.11,683.13 1658.67,683.13 1659.23,683.13 1659.79,683.13 1660.35,683.13 1660.91,683.13 1661.47,683.13 1662.03,683.13 1662.58,683.13 1663.14,683.13 1663.7,683.13 1664.26,683.13 1664.82,683.13 1665.38,683.13 1665.94,683.13 1666.5,683.13 1667.06,683.13 1667.62,683.13 1668.18,683.13 1668.74,683.13 1669.3,683.13 1669.85,683.13 1670.41,683.13 1670.97,683.13 1671.53,683.13 1672.09,683.13 1672.65,683.13 1673.21,683.13 1673.77,683.13 1674.33,683.13 1674.89,683.13 1675.45,683.13 1676.01,683.13 1676.57,683.13 1677.13,683.13 1677.68,683.13 1678.24,683.13 1678.8,683.13 1679.36,683.13 1679.92,683.13 1680.48,683.13 1681.04,683.13 1681.6,683.13 1682.16,683.13 1682.72,683.13 1683.28,683.13 1683.84,683.13 1684.4,683.13 1684.95,683.13 1685.51,683.13 1686.07,683.13 1686.63,683.13 1687.19,683.13 1687.75,683.13 1688.31,683.13 1688.87,683.13 1689.43,683.13 1689.99,683.13 1690.55,683.13 1691.11,683.13 1691.67,683.13 1692.23,683.13 1692.78,683.13 1693.34,683.13 1693.9,683.13 1694.46,683.13 1695.02,683.13 1695.58,683.13 1696.14,683.13 1696.7,683.13 1697.26,683.13 1697.82,683.13 1698.38,683.13 1698.94,683.13 1699.5,683.13 1700.05,683.13 1700.61,683.13 1701.17,683.13 1701.73,683.13 1702.29,683.13 1702.85,683.13 1703.41,683.13 1703.97,683.13 1704.53,683.13 1705.09,683.13 1705.65,683.13 1706.21,683.13 1706.77,683.13 1707.32,683.13 1707.88,683.13 1708.44,683.13 1709,683.13 1709.56,683.13 1710.12,683.13 1710.68,683.13 1711.24,683.13 1711.8,683.13 1712.36,683.13 1712.92,683.13 1713.48,683.13 1714.04,683.13 1714.6,683.13 1715.15,683.13 1715.71,683.13 1716.27,683.13 1716.83,683.13 1717.39,683.13 1717.95,683.13 1718.51,683.13 1719.07,683.13 1719.63,683.13 1720.19,683.13 1720.75,683.13 1721.31,683.13 1721.87,683.13 1722.42,683.13 1722.98,683.13 1723.54,683.13 1724.1,683.13 1724.66,683.13 1725.22,683.13 1725.78,683.13 1726.34,683.13 1726.9,683.13 1727.46,683.13 1728.02,683.13 1728.58,683.13 1729.14,683.13 1729.69,683.13 1730.25,683.13 1730.81,683.13 1731.37,683.13 1731.93,683.13 1732.49,683.13 1733.05,683.13 1733.61,683.13 1734.17,683.13 1734.73,683.13 1735.29,683.13 1735.85,683.13 1736.41,683.13 1736.97,683.13 1737.52,683.13 1738.08,683.13 1738.64,683.13 1739.2,683.13 1739.76,683.13 1740.32,683.13 1740.88,683.13 1741.44,683.13 1742,683.13 1742.56,683.13 1743.12,683.13 1743.68,683.13 1744.24,683.13 1744.79,683.13 1745.35,683.13 1745.91,683.13 1746.47,683.13 1747.03,683.13 1747.59,683.13 1748.15,683.13 1748.71,683.13 1749.27,683.13 1749.83,683.13 1750.39,683.13 1750.95,683.13 1751.51,683.13 1752.06,683.13 1752.62,683.13 1753.18,683.13 1753.74,683.13 1754.3,683.13 1754.86,683.13 1755.42,683.13 1755.98,683.13 1756.54,683.13 1757.1,683.13 1757.66,683.13 1758.22,683.13 1758.78,683.13 1759.34,683.13 1759.89,683.13 1760.45,683.13 1761.01,683.13 1761.57,683.13 1762.13,683.13 1762.69,683.13 1763.25,683.13 1763.81,683.13 1764.37,683.13 1764.93,683.13 1765.49,683.13 1766.05,683.13 1766.61,683.13 1767.16,683.13 1767.72,683.13 1768.28,683.13 1768.84,683.13 1769.4,683.13 1769.96,683.13 1770.52,683.13 1771.08,683.13 1771.64,683.13 1772.2,683.13 1772.76,683.13 1773.32,683.13 1773.88,683.13 1774.43,683.13 1774.99,683.13 1775.55,683.13 1776.11,683.13 1776.67,683.13 1777.23,683.13 1777.79,683.13 1778.35,683.13 1778.91,683.13 1779.47,683.13 1780.03,683.13 1780.59,683.13 1781.15,683.13 1781.71,683.13 1782.26,683.13 1782.82,683.13 1783.38,683.13 1783.94,683.13 1784.5,683.13 1785.06,683.13 1785.62,683.13 1786.18,683.13 1786.74,683.13 1787.3,683.13 1787.86,683.13 1788.42,683.13 1788.98,683.13 1789.53,683.13 1790.09,683.13 1790.65,683.13 1791.21,683.13 1791.77,683.13 1792.33,683.13 1792.89,683.13 1793.45,683.13 1794.01,683.13 1794.57,683.13 1795.13,683.13 1795.69,683.13 1796.25,683.13 1796.8,683.13 1797.36,683.13 1797.92,683.13 1798.48,683.13 1799.04,683.13 1799.6,683.13 1800.16,683.13 1800.72,683.13 1801.28,683.13 1801.84,683.13 1802.4,683.13 1802.96,683.13 1803.52,683.13 1804.08,683.13 1804.63,683.13 1805.19,683.13 1805.75,683.13 1806.31,683.13 1806.87,683.13 1807.43,683.13 1807.99,683.13 1808.55,683.13 1809.11,683.13 1809.67,683.13 1810.23,683.13 1810.79,683.13 1811.35,683.13 1811.9,683.13 1812.46,683.13 1813.02,683.13 1813.58,683.13 1814.14,683.13 1814.7,683.13 1815.26,683.13 1815.82,683.13 1816.38,683.13 1816.94,683.13 1817.5,683.13 1818.06,683.13 1818.62,683.13 1819.18,683.13 1819.73,683.13 1820.29,683.13 1820.85,683.13 1821.41,683.13 1821.97,683.13 1822.53,683.13 1823.09,683.13 1823.65,683.13 1824.21,683.13 1824.77,683.13 1825.33,683.13 1825.89,683.13 1826.45,683.13 1827,683.13 1827.56,683.13 1828.12,683.13 1828.68,683.13 1829.24,683.13 1829.8,683.13 1830.36,683.13 1830.92,683.13 1831.48,683.13 1832.04,683.13 1832.6,683.13 1833.16,683.13 1833.72,683.13 1834.27,683.13 1834.83,683.13 1835.39,683.13 1835.95,683.13 1836.51,683.13 1837.07,683.13 1837.63,683.13 1838.19,683.13 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0380738739752475 ± 0.025008548167913775\nProjected Energy: -4.012796436470804 ± (0.008888409214884874, 0.008000135380348716)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.444018</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3745e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.518e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.706e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.512e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.725e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve, init, KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsStochasticInteger(),\n    initiator=NonInitiator(),\n    threading=nothing\n)\n\nReturn a default starting vector for lomc!. The default choice for the starting vector is\n\nv = PDVec(address => 10; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => 10; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => 10; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
