var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21318552963172888 ± 0.0026121390685179494\n   G2(1) = 0.9175649009150645 ± 0.0007746920149068161\n   G2(2) = 0.9816671522947944 ± 0.0008961242743712131\n   G2(3) = 0.988350363948552 ± 0.0012393306590515374\n   G2(4) = 0.9816671522947944 ± 0.0008961242743712131\n   G2(5) = 0.9175649009150645 ± 0.0007746920149068161\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.05997124620338 ± 0.1381084783164001\n   Replica 2: -4.011227664142264 ± 0.12829399148948234\n   Replica 3: -4.012935179693533 ± 0.13122634724899435\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.87 2211.02,1002.87 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.9 2211.02,744.9 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.926 2211.02,486.926 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.953 2211.02,228.953 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.87 423.181,1002.87 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.9 423.181,744.9 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.926 423.181,486.926 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.953 423.181,228.953 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.65 356.339 1246.65 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M290.043 1016.22 L306.363 1016.22 L306.363 1020.15 L284.418 1020.15 L284.418 1016.22 Q287.08 1013.46 291.664 1008.83 Q296.27 1004.18 297.451 1002.84 Q299.696 1000.32 300.576 998.58 Q301.478 996.821 301.478 995.131 Q301.478 992.376 299.534 990.64 Q297.613 988.904 294.511 988.904 Q292.312 988.904 289.858 989.668 Q287.427 990.432 284.65 991.983 L284.65 987.26 Q287.474 986.126 289.927 985.547 Q292.381 984.969 294.418 984.969 Q299.789 984.969 302.983 987.654 Q306.177 990.339 306.177 994.83 Q306.177 996.959 305.367 998.881 Q304.58 1000.78 302.474 1003.37 Q301.895 1004.04 298.793 1007.26 Q295.691 1010.45 290.043 1016.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 985.594 L334.58 985.594 L334.58 989.529 L320.506 989.529 L320.506 998.001 Q321.524 997.654 322.543 997.492 Q323.562 997.307 324.58 997.307 Q330.367 997.307 333.747 1000.48 Q337.126 1003.65 337.126 1009.07 Q337.126 1014.64 333.654 1017.75 Q330.182 1020.83 323.862 1020.83 Q321.687 1020.83 319.418 1020.45 Q317.173 1020.08 314.765 1019.34 L314.765 1014.64 Q316.849 1015.78 319.071 1016.33 Q321.293 1016.89 323.77 1016.89 Q327.774 1016.89 330.112 1014.78 Q332.45 1012.68 332.45 1009.07 Q332.45 1005.45 330.112 1003.35 Q327.774 1001.24 323.77 1001.24 Q321.895 1001.24 320.02 1001.66 Q318.168 1002.08 316.224 1002.95 L316.224 985.594 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 988.672 Q352.728 988.672 350.899 992.237 Q349.094 995.779 349.094 1002.91 Q349.094 1010.01 350.899 1013.58 Q352.728 1017.12 356.339 1017.12 Q359.973 1017.12 361.779 1013.58 Q363.608 1010.01 363.608 1002.91 Q363.608 995.779 361.779 992.237 Q359.973 988.672 356.339 988.672 M356.339 984.969 Q362.149 984.969 365.205 989.575 Q368.284 994.159 368.284 1002.91 Q368.284 1011.64 365.205 1016.24 Q362.149 1020.83 356.339 1020.83 Q350.529 1020.83 347.45 1016.24 Q344.395 1011.64 344.395 1002.91 Q344.395 994.159 347.45 989.575 Q350.529 984.969 356.339 984.969 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M286.062 727.62 L304.418 727.62 L304.418 731.555 L290.344 731.555 L290.344 740.027 Q291.363 739.68 292.381 739.518 Q293.4 739.333 294.418 739.333 Q300.205 739.333 303.585 742.504 Q306.964 745.676 306.964 751.092 Q306.964 756.671 303.492 759.773 Q300.02 762.851 293.701 762.851 Q291.525 762.851 289.256 762.481 Q287.011 762.111 284.603 761.37 L284.603 756.671 Q286.687 757.805 288.909 758.361 Q291.131 758.916 293.608 758.916 Q297.613 758.916 299.951 756.81 Q302.288 754.703 302.288 751.092 Q302.288 747.481 299.951 745.375 Q297.613 743.268 293.608 743.268 Q291.733 743.268 289.858 743.685 Q288.006 744.101 286.062 744.981 L286.062 727.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 730.699 Q322.566 730.699 320.737 734.264 Q318.932 737.805 318.932 744.935 Q318.932 752.041 320.737 755.606 Q322.566 759.148 326.177 759.148 Q329.811 759.148 331.617 755.606 Q333.446 752.041 333.446 744.935 Q333.446 737.805 331.617 734.264 Q329.811 730.699 326.177 730.699 M326.177 726.995 Q331.987 726.995 335.043 731.602 Q338.122 736.185 338.122 744.935 Q338.122 753.662 335.043 758.268 Q331.987 762.851 326.177 762.851 Q320.367 762.851 317.288 758.268 Q314.233 753.662 314.233 744.935 Q314.233 736.185 317.288 731.602 Q320.367 726.995 326.177 726.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 730.699 Q352.728 730.699 350.899 734.264 Q349.094 737.805 349.094 744.935 Q349.094 752.041 350.899 755.606 Q352.728 759.148 356.339 759.148 Q359.973 759.148 361.779 755.606 Q363.608 752.041 363.608 744.935 Q363.608 737.805 361.779 734.264 Q359.973 730.699 356.339 730.699 M356.339 726.995 Q362.149 726.995 365.205 731.602 Q368.284 736.185 368.284 744.935 Q368.284 753.662 365.205 758.268 Q362.149 762.851 356.339 762.851 Q350.529 762.851 347.45 758.268 Q344.395 753.662 344.395 744.935 Q344.395 736.185 347.45 731.602 Q350.529 726.995 356.339 726.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M284.835 469.646 L307.057 469.646 L307.057 471.637 L294.511 504.206 L289.627 504.206 L301.432 473.581 L284.835 473.581 L284.835 469.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 469.646 L334.58 469.646 L334.58 473.581 L320.506 473.581 L320.506 482.054 Q321.524 481.706 322.543 481.544 Q323.562 481.359 324.58 481.359 Q330.367 481.359 333.747 484.53 Q337.126 487.702 337.126 493.118 Q337.126 498.697 333.654 501.799 Q330.182 504.878 323.862 504.878 Q321.687 504.878 319.418 504.507 Q317.173 504.137 314.765 503.396 L314.765 498.697 Q316.849 499.831 319.071 500.387 Q321.293 500.942 323.77 500.942 Q327.774 500.942 330.112 498.836 Q332.45 496.73 332.45 493.118 Q332.45 489.507 330.112 487.401 Q327.774 485.294 323.77 485.294 Q321.895 485.294 320.02 485.711 Q318.168 486.128 316.224 487.007 L316.224 469.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 472.725 Q352.728 472.725 350.899 476.29 Q349.094 479.831 349.094 486.961 Q349.094 494.067 350.899 497.632 Q352.728 501.174 356.339 501.174 Q359.973 501.174 361.779 497.632 Q363.608 494.067 363.608 486.961 Q363.608 479.831 361.779 476.29 Q359.973 472.725 356.339 472.725 M356.339 469.021 Q362.149 469.021 365.205 473.628 Q368.284 478.211 368.284 486.961 Q368.284 495.688 365.205 500.294 Q362.149 504.878 356.339 504.878 Q350.529 504.878 347.45 500.294 Q344.395 495.688 344.395 486.961 Q344.395 478.211 347.45 473.628 Q350.529 469.021 356.339 469.021 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M256.664 242.297 L264.303 242.297 L264.303 215.932 L255.992 217.598 L255.992 213.339 L264.256 211.673 L268.932 211.673 L268.932 242.297 L276.571 242.297 L276.571 246.233 L256.664 246.233 L256.664 242.297 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M296.015 214.751 Q292.404 214.751 290.576 218.316 Q288.77 221.858 288.77 228.987 Q288.77 236.094 290.576 239.659 Q292.404 243.2 296.015 243.2 Q299.65 243.2 301.455 239.659 Q303.284 236.094 303.284 228.987 Q303.284 221.858 301.455 218.316 Q299.65 214.751 296.015 214.751 M296.015 211.048 Q301.826 211.048 304.881 215.654 Q307.96 220.237 307.96 228.987 Q307.96 237.714 304.881 242.321 Q301.826 246.904 296.015 246.904 Q290.205 246.904 287.127 242.321 Q284.071 237.714 284.071 228.987 Q284.071 220.237 287.127 215.654 Q290.205 211.048 296.015 211.048 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 214.751 Q322.566 214.751 320.737 218.316 Q318.932 221.858 318.932 228.987 Q318.932 236.094 320.737 239.659 Q322.566 243.2 326.177 243.2 Q329.811 243.2 331.617 239.659 Q333.446 236.094 333.446 228.987 Q333.446 221.858 331.617 218.316 Q329.811 214.751 326.177 214.751 M326.177 211.048 Q331.987 211.048 335.043 215.654 Q338.122 220.237 338.122 228.987 Q338.122 237.714 335.043 242.321 Q331.987 246.904 326.177 246.904 Q320.367 246.904 317.288 242.321 Q314.233 237.714 314.233 228.987 Q314.233 220.237 317.288 215.654 Q320.367 211.048 326.177 211.048 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 214.751 Q352.728 214.751 350.899 218.316 Q349.094 221.858 349.094 228.987 Q349.094 236.094 350.899 239.659 Q352.728 243.2 356.339 243.2 Q359.973 243.2 361.779 239.659 Q363.608 236.094 363.608 228.987 Q363.608 221.858 361.779 218.316 Q359.973 214.751 356.339 214.751 M356.339 211.048 Q362.149 211.048 365.205 215.654 Q368.284 220.237 368.284 228.987 Q368.284 237.714 365.205 242.321 Q362.149 246.904 356.339 246.904 Q350.529 246.904 347.45 242.321 Q344.395 237.714 344.395 228.987 Q344.395 220.237 347.45 215.654 Q350.529 211.048 356.339 211.048 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.953 4017.76,228.953 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.32 457.123,1248.14 457.691,1247.97 458.259,1246.7 458.828,1246.43 459.396,1246.07 459.964,1245.64 460.533,1245.16 461.101,1244.54 461.669,1243.88 462.238,1243.11 462.806,1242.27 463.375,1241.35 463.943,1240.31 464.511,1239.16 465.08,1236.91 465.648,1235.59 466.216,1233.13 466.785,1230.54 467.353,1228.88 467.921,1227.08 468.49,1225.1 469.058,1223.01 469.626,1220.76 470.195,1217.35 470.763,1214.81 471.331,1212.11 471.9,1209.28 472.468,1206.25 473.036,1202.97 473.605,1197.51 474.173,1193.95 474.741,1190.15 475.31,1186.19 475.878,1182.01 476.446,1175.57 477.015,1170.89 477.583,1165.02 478.152,1160 478.72,1152.61 479.288,1144.97 479.857,1139.26 480.425,1133.33 480.993,1126.09 481.562,1118.55 482.13,1111.83 482.698,1103.9 483.267,1095.67 483.835,1088.33 484.403,1080.77 484.972,1072.05 485.54,1063.11 486.108,1055.12 486.677,1045.78 487.245,1034.09 487.813,1024.47 488.382,1015.65 488.95,1006.7 489.518,994.587 490.087,984.44 490.655,972.209 491.224,959.938 491.792,949.668 492.36,940.474 492.929,931.051 493.497,919.487 494.065,907.732 494.634,896.039 495.202,885.381 495.77,872.641 496.339,862.245 496.907,850.56 497.475,838.923 498.044,828.302 498.612,815.749 499.18,806.269 499.749,793.766 500.317,783.529 500.885,773.371 501.454,763.044 502.022,753.958 502.59,744.925 503.159,734.971 503.727,723.928 504.295,714.121 504.864,704.398 505.432,695.722 506.001,686.062 506.569,675.481 507.137,664.976 507.706,656.699 508.274,648.215 508.842,640.067 509.411,629.812 509.979,618.89 510.547,607.033 511.116,598.556 511.684,589.377 512.252,578.046 512.821,570.22 513.389,560.63 513.957,553.251 514.526,546.054 515.094,539.879 515.662,533.796 516.231,526.549 516.799,518.495 517.367,510.816 517.936,503.281 518.504,494.762 519.072,488.509 519.641,481.458 520.209,475.499 520.778,470.606 521.346,466.021 521.914,458.25 522.483,451.786 523.051,446.496 523.619,440.189 524.188,434.259 524.756,428.307 525.324,422.449 525.893,417.933 526.461,413.335 527.029,411.069 527.598,405.565 528.166,402.32 528.734,400.067 529.303,397.71 529.871,394.205 530.439,389.681 531.008,386.491 531.576,382.236 532.144,379.072 532.713,373.085 533.281,369.238 533.85,366.411 534.418,362.782 534.986,359.018 535.555,354.298 536.123,350.828 536.691,346.607 537.26,343.326 537.828,340.207 538.396,336.277 538.965,332.423 539.533,329.646 540.101,326.938 540.67,324.179 541.238,323.608 541.806,319.142 542.375,317.88 542.943,314.544 543.511,311.179 544.08,311.031 544.648,311.989 545.216,309.554 545.785,309.277 546.353,306.992 546.921,305.694 547.49,302.106 548.058,299.846 548.627,298.592 549.195,296.339 549.763,296.462 550.332,295.209 550.9,292.016 551.468,290.112 552.037,291.43 552.605,289.195 553.173,286.095 553.742,286.324 554.31,283.507 554.878,282.714 555.447,279.888 556.015,279.484 556.583,276.894 557.152,277.275 557.72,276.635 558.288,275.029 558.857,272.353 559.425,271.047 559.993,271.766 560.562,270.449 561.13,265.959 561.698,264.942 562.267,267.094 562.835,266.85 563.404,265.462 563.972,264.263 564.54,264.129 565.109,265.019 565.677,265.693 566.245,262.236 566.814,261.154 567.382,258.267 567.95,259.529 568.519,258.48 569.087,255.611 569.655,256.109 570.224,255.246 570.792,257.446 571.36,257.595 571.929,257.472 572.497,254.389 573.065,255.609 573.634,256.694 574.202,256.697 574.77,256.381 575.339,259.223 575.907,261.88 576.476,262.433 577.044,262.699 577.612,261.226 578.181,260.617 578.749,258.841 579.317,257.408 579.886,257.907 580.454,256.335 581.022,254.86 581.591,254.348 582.159,250.945 582.727,250.673 583.296,250.888 583.864,250.845 584.432,250.773 585.001,249.898 585.569,248.86 586.137,247.774 586.706,247.898 587.274,249.797 587.842,250.597 588.411,248.126 588.979,249.832 589.547,249.383 590.116,248.149 590.684,246.888 591.253,246.943 591.821,245.832 592.389,245.648 592.958,243.542 593.526,242.764 594.094,243.99 594.663,243.953 595.231,242.987 595.799,242.117 596.368,243.259 596.936,243.343 597.504,241.287 598.073,240.263 598.641,240.608 599.209,241.693 599.778,240.855 600.346,240.056 600.914,238.359 601.483,235.686 602.051,238.418 602.619,236.862 603.188,235.396 603.756,237.155 604.325,236.526 604.893,236.956 605.461,238.617 606.03,239.003 606.598,237.158 607.166,235.629 607.735,236.15 608.303,236.656 608.871,237.285 609.44,237.491 610.008,235.795 610.576,238.424 611.145,240.684 611.713,239.734 612.281,240.93 612.85,240.952 613.418,241.095 613.986,243.031 614.555,241.86 615.123,240.814 615.691,244.12 616.26,242.6 616.828,242.485 617.396,243.333 617.965,241.158 618.533,240.06 619.102,237.058 619.67,238.499 620.238,239.753 620.807,239.065 621.375,239.067 621.943,240.418 622.512,244.382 623.08,243.044 623.648,240.503 624.217,241.142 624.785,240.892 625.353,240.918 625.922,239.71 626.49,240.409 627.058,240.37 627.627,241.25 628.195,239.178 628.763,239.093 629.332,240.271 629.9,239.087 630.468,237.776 631.037,236.746 631.605,235.553 632.173,235.779 632.742,235.856 633.31,237.056 633.879,235.192 634.447,236.312 635.015,235.549 635.584,237.574 636.152,235.658 636.72,234.967 637.289,235.046 637.857,234.036 638.425,234.322 638.994,232.324 639.562,233.744 640.13,233.076 640.699,234.546 641.267,234.72 641.835,233.766 642.404,234.025 642.972,234.181 643.54,235.597 644.109,233.651 644.677,232.912 645.245,234.29 645.814,234.608 646.382,233.824 646.951,231.942 647.519,232.353 648.087,232.831 648.656,233.205 649.224,231.621 649.792,233.89 650.361,233.08 650.929,233.31 651.497,230.484 652.066,230.853 652.634,231.044 653.202,231.3 653.771,232.898 654.339,234.376 654.907,234.579 655.476,234.688 656.044,233.754 656.612,232.825 657.181,232.967 657.749,231.203 658.317,232.685 658.886,233.792 659.454,233.775 660.022,232.755 660.591,232.748 661.159,234.001 661.728,237.074 662.296,236.804 662.864,235.874 663.433,235.922 664.001,235.758 664.569,235.718 665.138,235.876 665.706,233.846 666.274,233.874 666.843,233.978 667.411,234.041 667.979,234.029 668.548,232.06 669.116,229.86 669.684,230.105 670.253,228.318 670.821,228.746 671.389,227.283 671.958,228.825 672.526,231.402 673.094,234.779 673.663,234.639 674.231,235.762 674.799,234.514 675.368,234.602 675.936,236.493 676.505,236.291 677.073,236.175 677.641,232.98 678.21,233.102 678.778,233.132 679.346,234.285 679.915,233.266 680.483,234.337 681.051,234.188 681.62,234.169 682.188,233.306 682.756,233.401 683.325,234.322 683.893,233.229 684.461,232.405 685.03,231.395 685.598,232.668 686.166,231.808 686.735,231.948 687.303,234.042 687.871,229.776 688.44,231.101 689.008,233.33 689.577,230.229 690.145,228.596 690.713,227.997 691.282,229.427 691.85,229.756 692.418,229.027 692.987,229.414 693.555,232.016 694.123,231.202 694.692,233.527 695.26,233.279 695.828,234.334 696.397,236.276 696.965,232.919 697.533,232.913 698.102,232.929 698.67,233.003 699.238,234.13 699.807,234.25 700.375,234.077 700.943,233.008 701.512,233.222 702.08,233.202 702.648,233.276 703.217,231.104 703.785,232.168 704.354,229.21 704.922,231.551 705.49,229.715 706.059,228.972 706.627,230.163 707.195,230.468 707.764,229.649 708.332,229.767 708.9,226.832 709.469,227.341 710.037,229.728 710.605,231.169 711.174,230.276 711.742,232.305 712.31,232.394 712.879,230.427 713.447,230.921 714.015,229.038 714.584,229.468 715.152,228.652 715.72,231.068 716.289,232.242 716.857,235.345 717.425,234.196 717.994,233.961 718.562,233.929 719.131,232.782 719.699,232.847 720.267,232.713 720.836,232.642 721.404,233.47 721.972,233.438 722.541,233.978 723.109,234.606 723.677,233.599 724.246,233.56 724.814,233.453 725.382,232.501 725.951,233.446 726.519,233.259 727.087,229.006 727.656,229.33 728.224,231.55 728.792,231.68 729.361,231.66 729.929,232.645 730.497,231.671 731.066,230.505 731.634,228.557 732.203,228.871 732.771,228.884 733.339,229.206 733.908,228.184 734.476,227.503 735.044,226.789 735.613,225.953 736.181,225.269 736.749,228.045 737.318,226.363 737.886,225.865 738.454,226.216 739.023,226.612 739.591,227.008 740.159,225.314 740.728,224.888 741.296,224.491 741.864,227.913 742.433,231.184 743.001,234.518 743.569,235.466 744.138,233.498 744.706,235.438 745.274,235.118 745.843,234.766 746.411,231.271 746.98,230.131 747.548,229.201 748.116,231.494 748.685,232.839 749.253,233.71 749.821,233.407 750.39,233.429 750.958,233.182 751.526,237.14 752.095,236.865 752.663,235.489 753.231,234.257 753.8,231.067 754.368,232.209 754.936,230.007 755.505,229.182 756.073,226.357 756.641,225.746 757.21,226.134 757.778,227.705 758.346,228.042 758.915,231.54 759.483,232.809 760.052,229.724 760.62,228.044 761.188,227.369 761.757,227.673 762.325,228.929 762.893,230.129 763.462,229.196 764.03,229.414 764.598,231.741 765.167,231.718 765.735,231.753 766.303,231.807 766.872,231.988 767.44,230.921 768.008,229.991 768.577,231.299 769.145,233.304 769.713,233.259 770.282,231.912 770.85,230.824 771.418,231.015 771.987,230.218 772.555,232.336 773.123,231.245 773.692,232.349 774.26,233.31 774.829,234.118 775.397,231.973 775.965,232.057 776.534,231.767 777.102,232.735 777.67,232.49 778.239,230.318 778.807,228.297 779.375,231.669 779.944,228.624 780.512,227.874 781.08,229.238 781.649,230.33 782.217,231.536 782.785,231.675 783.354,232.713 783.922,232.683 784.49,231.504 785.059,231.469 785.627,230.375 786.195,232.817 786.764,235.831 787.332,235.459 787.9,236.185 788.469,234.736 789.037,233.327 789.606,234.244 790.174,230.67 790.742,231.831 791.311,232.92 791.879,233.902 792.447,233.556 793.016,232.249 793.584,234.116 794.152,234.973 794.721,233.714 795.289,234.471 795.857,234.223 796.426,233.991 796.994,232.709 797.562,233.558 798.131,233.149 798.699,235.129 799.267,233.745 799.836,236.527 800.404,234.179 800.972,233.922 801.541,232.636 802.109,233.529 802.678,233.318 803.246,235.132 803.814,233.679 804.383,232.879 804.951,232.651 805.519,230.158 806.088,229.295 806.656,229.49 807.224,227.457 807.793,226.699 808.361,227.97 808.929,227.057 809.498,227.213 810.066,227.409 810.634,227.621 811.203,228.745 811.771,227.91 812.339,227.006 812.908,225.119 813.476,223.433 814.044,223.85 814.613,223.082 815.181,222.427 815.749,220.79 816.318,220.424 816.886,221.191 817.455,219.895 818.023,221.542 818.591,224.25 819.16,224.724 819.728,225.15 820.296,224.711 820.865,226.1 821.433,229.768 822.001,232.834 822.57,231.534 823.138,231.524 823.706,230.581 824.275,229.467 824.843,229.53 825.411,230.704 825.98,230.719 826.548,230.853 827.116,231.955 827.685,234.997 828.253,235.633 828.821,233.217 829.39,231.834 829.958,230.539 830.526,230.532 831.095,231.369 831.663,232.195 832.232,230.835 832.8,230.759 833.368,229.621 833.937,228.914 834.505,229.84 835.073,229.908 835.642,230.013 836.21,229.818 836.778,228.747 837.347,228.907 837.915,229.799 838.483,228.869 839.052,229.923 839.62,230.815 840.188,230.708 840.757,230.596 841.325,230.6 841.893,232.694 842.462,230.324 843.03,230.322 843.598,230.263 844.167,229.359 844.735,229.602 845.304,229.741 845.872,228.706 846.44,228.965 847.009,228.218 847.577,228.389 848.145,226.488 848.714,226.608 849.282,223.764 849.85,225.259 850.419,225.864 850.987,223.921 851.555,225.427 852.124,225.651 852.692,223.991 853.26,226.485 853.829,227.836 854.397,227.208 854.965,228.409 855.534,229.478 856.102,230.799 856.67,230.876 857.239,230.797 857.807,230.736 858.375,228.822 858.944,228.85 859.512,228.81 860.081,228.149 860.649,230.344 861.217,230.383 861.786,230.266 862.354,230.355 862.922,230.312 863.491,230.584 864.059,230.618 864.627,233.418 865.196,231.262 865.764,233.31 866.332,235.215 866.901,234.897 867.469,234.652 868.037,234.305 868.606,233.884 869.174,233.633 869.742,237.318 870.311,235.676 870.879,235.291 871.447,234.884 872.016,237.619 872.584,237.042 873.152,236.483 873.721,234.827 874.289,234.308 874.858,233.942 875.426,234.566 875.994,233.926 876.563,236.459 877.131,232.735 877.699,230.46 878.268,229.617 878.836,227.416 879.404,227.671 879.973,230.948 880.541,230.85 881.109,231.704 881.678,229.587 882.246,227.725 882.814,227.79 883.383,227.824 883.951,228.064 884.519,228.007 885.088,228.273 885.656,228.164 886.224,229.298 886.793,228.135 887.361,227.209 887.93,227.092 888.498,226.249 889.066,230.437 889.635,228.265 890.203,228.481 890.771,226.46 891.34,227.722 891.908,228.668 892.476,227.622 893.045,226.458 893.613,227.757 894.181,225.966 894.75,226.302 895.318,226.244 895.886,226.397 896.455,226.749 897.023,227.876 897.591,229.952 898.16,227.59 898.728,227.879 899.296,228.969 899.865,228.139 900.433,227.085 901.001,226.019 901.57,226.237 902.138,227.483 902.707,227.661 903.275,226.882 903.843,228.062 904.412,227.217 904.98,226.352 905.548,227.893 906.117,229.909 906.685,230.711 907.253,231.617 907.822,232.624 908.39,232.329 908.958,233.122 909.527,229.84 910.095,228.719 910.663,228.794 911.232,229.905 911.8,228.056 912.368,228.091 912.937,227.327 913.505,226.331 914.073,226.644 914.642,226.88 915.21,224.856 915.779,225.209 916.347,225.585 916.915,225.81 917.484,227.034 918.052,224.203 918.62,224.563 919.189,225.278 919.757,224.754 920.325,225.92 920.894,225.19 921.462,225.63 922.03,226.995 922.599,226.122 923.167,227.447 923.735,228.65 924.304,227.724 924.872,228.926 925.44,230.177 926.009,231.383 926.577,230.274 927.145,228.313 927.714,229.475 928.282,229.684 928.85,229.614 929.419,230.605 929.987,229.695 930.556,228.796 931.124,226.804 931.692,226.056 932.261,227.42 932.829,225.367 933.397,224.698 933.966,224.227 934.534,224.537 935.102,230.038 935.671,230.088 936.239,229.089 936.807,227.136 937.376,228.349 937.944,226.586 938.512,227.017 939.081,229.408 939.649,231.684 940.217,229.567 940.786,230.566 941.354,230.496 941.922,228.589 942.491,228.605 943.059,226.668 943.627,227.97 944.196,228.347 944.764,228.641 945.333,227.646 945.901,227.992 946.469,227.203 947.038,229.608 947.606,227.635 948.174,228.949 948.743,227.938 949.311,230.311 949.879,228.137 950.448,228.445 951.016,228.364 951.584,230.623 952.153,231.819 952.721,231.888 953.289,231.641 953.858,230.62 954.426,231.554 954.994,230.52 955.563,229.521 956.131,228.532 956.699,231.672 957.268,230.41 957.836,229.362 958.405,228.435 958.973,229.565 959.541,227.604 960.11,229.152 960.678,229.284 961.246,230.541 961.815,230.339 962.383,229.348 962.951,230.347 963.52,231.392 964.088,230.206 964.656,228.109 965.225,229.28 965.793,232.24 966.361,230.984 966.93,231.837 967.498,230.815 968.066,230.812 968.635,230.733 969.203,229.942 969.771,227.927 970.34,230.339 970.908,231.366 971.476,232.366 972.045,233.397 972.613,233.096 973.182,229.793 973.75,228.791 974.318,227.874 974.887,229.245 975.455,230.374 976.023,230.51 976.592,230.652 977.16,229.427 977.728,229.779 978.297,228.705 978.865,228.877 979.433,228.932 980.002,226.87 980.57,229.032 981.138,230.209 981.707,232.171 982.275,232.018 982.843,231.815 983.412,231.653 983.98,231.468 984.548,234.683 985.117,234.533 985.685,233.139 986.253,232.902 986.822,231.589 987.39,230.475 987.959,230.435 988.527,228.416 989.095,228.405 989.664,228.259 990.232,228.425 990.8,228.398 991.369,229.631 991.937,228.549 992.505,228.67 993.074,228.639 993.642,227.692 994.21,226.933 994.779,227.154 995.347,228.199 995.915,230.419 996.484,231.343 997.052,231.365 997.62,231.117 998.189,230.952 998.757,230.78 999.325,230.716 999.894,230.851 1000.46,229.722 1001.03,229.647 1001.6,230.758 1002.17,230.769 1002.74,230.633 1003.3,229.72 1003.87,228.58 1004.44,229.662 1005.01,228.626 1005.58,228.831 1006.15,229.757 1006.71,229.824 1007.28,230.808 1007.85,231.851 1008.42,234.625 1008.99,233.226 1009.56,233.086 1010.12,230.711 1010.69,229.48 1011.26,226.557 1011.83,225.66 1012.4,222.916 1012.97,223.361 1013.53,225.984 1014.1,227.202 1014.67,227.056 1015.24,226.219 1015.81,228.64 1016.38,228.674 1016.94,230.862 1017.51,231.579 1018.08,231.443 1018.65,230.207 1019.22,229.176 1019.79,231.068 1020.35,228.814 1020.92,228.956 1021.49,231.197 1022.06,231.301 1022.63,230.916 1023.2,228.769 1023.76,229.61 1024.33,228.942 1024.9,228.783 1025.47,229.666 1026.04,228.803 1026.61,225.873 1027.17,225.935 1027.74,225.224 1028.31,225.546 1028.88,226.102 1029.45,225.413 1030.02,226.73 1030.58,227.94 1031.15,227.184 1031.72,226.46 1032.29,223.706 1032.86,225.277 1033.43,224.595 1033.99,225.891 1034.56,224.088 1035.13,226.629 1035.7,227.067 1036.27,225.235 1036.84,223.337 1037.4,225.932 1037.97,231.409 1038.54,229.353 1039.11,232.627 1039.68,232.329 1040.25,233.258 1040.81,233.932 1041.38,233.7 1041.95,234.688 1042.52,233.35 1043.09,236.274 1043.66,236.997 1044.22,234.558 1044.79,235.393 1045.36,234.01 1045.93,233.615 1046.5,233.179 1047.07,233.152 1047.63,231.899 1048.2,232.721 1048.77,233.52 1049.34,234.193 1049.91,232.827 1050.48,232.605 1051.05,235.507 1051.61,235.968 1052.18,236.406 1052.75,238.909 1053.32,236.849 1053.89,236.167 1054.46,236.725 1055.02,234.093 1055.59,233.539 1056.16,233.149 1056.73,232.913 1057.3,230.47 1057.87,229.265 1058.43,230.018 1059,228.735 1059.57,229.563 1060.14,230.465 1060.71,228.037 1061.28,228.012 1061.84,226.921 1062.41,228.002 1062.98,224.808 1063.55,224.913 1064.12,224.056 1064.69,225.27 1065.25,224.48 1065.82,225.658 1066.39,226.836 1066.96,226.661 1067.53,230.012 1068.1,227.849 1068.66,227.812 1069.23,227.615 1069.8,227.619 1070.37,227.563 1070.94,225.622 1071.51,224.747 1072.07,225.987 1072.64,226.928 1073.21,226.783 1073.78,228.078 1074.35,228.061 1074.92,227.14 1075.48,227.244 1076.05,227.307 1076.62,227.204 1077.19,228.247 1077.76,227.348 1078.33,227.463 1078.89,226.486 1079.46,226.537 1080.03,226.57 1080.6,224.646 1081.17,224.848 1081.74,226.294 1082.3,227.411 1082.87,226.408 1083.44,224.742 1084.01,226.041 1084.58,226.177 1085.15,225.227 1085.71,226.488 1086.28,225.732 1086.85,227.148 1087.42,228.279 1087.99,229.308 1088.56,230.378 1089.12,230.303 1089.69,231.209 1090.26,232.166 1090.83,235.376 1091.4,234.025 1091.97,232.91 1092.53,233.512 1093.1,234.137 1093.67,232.806 1094.24,234.674 1094.81,233.27 1095.38,233.738 1095.94,233.263 1096.51,231.871 1097.08,228.682 1097.65,229.874 1098.22,228.734 1098.79,228.487 1099.35,228.463 1099.92,229.66 1100.49,230.527 1101.06,234.355 1101.63,232.878 1102.2,232.429 1102.76,230.092 1103.33,230.151 1103.9,231.133 1104.47,229.972 1105.04,228.792 1105.61,227.765 1106.17,226.729 1106.74,226.894 1107.31,228.191 1107.88,228.168 1108.45,227.089 1109.02,225.995 1109.58,226.101 1110.15,225.03 1110.72,225.14 1111.29,224.217 1111.86,228.316 1112.43,228.344 1112.99,228.471 1113.56,229.567 1114.13,228.424 1114.7,228.155 1115.27,228.23 1115.84,231.405 1116.4,232.198 1116.97,230.993 1117.54,229.955 1118.11,230.732 1118.68,230.649 1119.25,229.235 1119.81,228.148 1120.38,228.121 1120.95,230.241 1121.52,233.414 1122.09,233.705 1122.66,233.137 1123.23,229.728 1123.79,228.673 1124.36,229.525 1124.93,231.683 1125.5,232.773 1126.07,231.581 1126.64,232.408 1127.2,233.186 1127.77,231.894 1128.34,229.867 1128.91,229.65 1129.48,229.502 1130.05,229.524 1130.61,231.529 1131.18,232.226 1131.75,231.002 1132.32,229.686 1132.89,231.386 1133.46,229.1 1134.02,231.066 1134.59,231.769 1135.16,230.407 1135.73,230.224 1136.3,229.965 1136.87,227.746 1137.43,227.684 1138,227.715 1138.57,229.864 1139.14,228.519 1139.71,228.574 1140.28,229.644 1140.84,229.458 1141.41,228.394 1141.98,229.421 1142.55,226.061 1143.12,227.103 1143.69,227.114 1144.25,227.129 1144.82,229.12 1145.39,229.032 1145.96,227.923 1146.53,225.588 1147.1,224.668 1147.66,224.079 1148.23,223.515 1148.8,224.767 1149.37,226.022 1149.94,223.066 1150.51,222.447 1151.07,222.055 1151.64,223.419 1152.21,222.016 1152.78,222.285 1153.35,222.904 1153.92,223.512 1154.48,223.957 1155.05,226.458 1155.62,228.687 1156.19,229.702 1156.76,230.628 1157.33,232.332 1157.89,233.248 1158.46,232.011 1159.03,229.756 1159.6,230.791 1160.17,231.743 1160.74,228.644 1161.3,227.717 1161.87,226.893 1162.44,226.958 1163.01,228.375 1163.58,228.63 1164.15,227.663 1164.71,229.025 1165.28,228.255 1165.85,229.259 1166.42,230.246 1166.99,227.988 1167.56,225.886 1168.12,225.136 1168.69,224.256 1169.26,225.242 1169.83,224.57 1170.4,225.317 1170.97,226.72 1171.53,228.878 1172.1,228.634 1172.67,227.584 1173.24,228.624 1173.81,228.539 1174.38,226.516 1174.94,229.853 1175.51,229.98 1176.08,229.785 1176.65,228.834 1177.22,228.778 1177.79,230.917 1178.35,231.106 1178.92,230.09 1179.49,228.191 1180.06,227.236 1180.63,228.449 1181.2,228.749 1181.76,229.708 1182.33,229.594 1182.9,229.737 1183.47,230.111 1184.04,232.478 1184.61,231.351 1185.17,232.094 1185.74,231.801 1186.31,233.67 1186.88,232.322 1187.45,233.064 1188.02,235.08 1188.58,233.546 1189.15,231.913 1189.72,231.537 1190.29,231.378 1190.86,233.112 1191.43,231.921 1192,230.633 1192.56,230.64 1193.13,227.317 1193.7,228.62 1194.27,227.784 1194.84,226.836 1195.41,225.745 1195.97,225.709 1196.54,226.882 1197.11,226.867 1197.68,224.914 1198.25,226.152 1198.82,224.187 1199.38,223.505 1199.95,224.865 1200.52,226.397 1201.09,225.622 1201.66,226.774 1202.23,226.757 1202.79,226.898 1203.36,225.062 1203.93,224.528 1204.5,223.875 1205.07,222.194 1205.64,223.485 1206.2,222.937 1206.77,222.653 1207.34,224.276 1207.91,224.793 1208.48,225.216 1209.05,224.422 1209.61,222.899 1210.18,224.763 1210.75,227.304 1211.32,227.362 1211.89,227.612 1212.46,226.768 1213.02,227.949 1213.59,230.436 1214.16,231.493 1214.73,233.504 1215.3,234.424 1215.87,237.538 1216.43,236.027 1217,234.703 1217.57,233.365 1218.14,233.175 1218.71,232.897 1219.28,232.852 1219.84,232.801 1220.41,232.665 1220.98,234.331 1221.55,232.875 1222.12,233.514 1222.69,234.151 1223.25,234.942 1223.82,234.431 1224.39,234.918 1224.96,234.517 1225.53,236.138 1226.1,237.814 1226.66,234.829 1227.23,234.149 1227.8,234.352 1228.37,230.822 1228.94,230.56 1229.51,230.316 1230.07,231.285 1230.64,232.059 1231.21,231.821 1231.78,232.275 1232.35,231.004 1232.92,228.859 1233.48,228.829 1234.05,230.822 1234.62,229.597 1235.19,230.73 1235.76,230.699 1236.33,231.811 1236.89,234.61 1237.46,234.259 1238.03,232.858 1238.6,234.588 1239.17,233.254 1239.74,232.885 1240.3,231.464 1240.87,230.166 1241.44,228.809 1242.01,227.902 1242.58,228.071 1243.15,229.057 1243.71,229.144 1244.28,228.859 1244.85,228.767 1245.42,227.711 1245.99,227.88 1246.56,226.94 1247.12,228.17 1247.69,226.227 1248.26,229.642 1248.83,231.305 1249.4,229.859 1249.97,228.712 1250.53,226.444 1251.1,224.47 1251.67,223.609 1252.24,224.183 1252.81,223.473 1253.38,221.68 1253.94,222.261 1254.51,222.673 1255.08,223.081 1255.65,224.6 1256.22,226.049 1256.79,227.119 1257.35,228.149 1257.92,228.358 1258.49,226.451 1259.06,226.746 1259.63,226.959 1260.2,228.143 1260.76,227.39 1261.33,227.667 1261.9,230.935 1262.47,229.786 1263.04,229.637 1263.61,229.37 1264.18,230.211 1264.74,229.991 1265.31,228.92 1265.88,227.743 1266.45,226.789 1267.02,226.794 1267.59,227.878 1268.15,226.933 1268.72,230.141 1269.29,229.03 1269.86,228.975 1270.43,228.8 1271,226.71 1271.56,227.09 1272.13,228.164 1272.7,227.124 1273.27,227.337 1273.84,227.467 1274.41,228.483 1274.97,230.324 1275.54,230.009 1276.11,230.051 1276.68,231.898 1277.25,230.656 1277.82,230.604 1278.38,230.483 1278.95,230.307 1279.52,232.145 1280.09,230.694 1280.66,230.623 1281.23,229.425 1281.79,228.317 1282.36,230.261 1282.93,228.99 1283.5,230.754 1284.07,230.729 1284.64,229.304 1285.2,226.9 1285.77,227.175 1286.34,228.209 1286.91,229.291 1287.48,229.063 1288.05,227.964 1288.61,226.81 1289.18,229.964 1289.75,226.69 1290.32,226.805 1290.89,227.125 1291.46,227.269 1292.02,226.995 1292.59,227.108 1293.16,229.455 1293.73,232.464 1294.3,230.171 1294.87,231.118 1295.43,234.122 1296,233.64 1296.57,231.129 1297.14,233.997 1297.71,233.806 1298.28,234.711 1298.84,235.444 1299.41,235.599 1299.98,237.251 1300.55,236.684 1301.12,235.033 1301.69,234.414 1302.25,233.821 1302.82,233.367 1303.39,231.76 1303.96,231.378 1304.53,229.871 1305.1,230.622 1305.66,227.448 1306.23,227.319 1306.8,227.321 1307.37,226.212 1307.94,226.188 1308.51,225.207 1309.07,226.261 1309.64,226.467 1310.21,227.459 1310.78,227.308 1311.35,225.259 1311.92,227.624 1312.48,228.788 1313.05,229.843 1313.62,228.977 1314.19,228.814 1314.76,228.818 1315.33,228.752 1315.89,227.556 1316.46,227.61 1317.03,227.419 1317.6,228.375 1318.17,226.096 1318.74,224.961 1319.3,225.169 1319.87,224.393 1320.44,223.671 1321.01,223.892 1321.58,225.245 1322.15,225.512 1322.71,224.638 1323.28,225.919 1323.85,226.164 1324.42,226.368 1324.99,226.373 1325.56,226.604 1326.12,227.821 1326.69,227.968 1327.26,230.29 1327.83,229.054 1328.4,229.086 1328.97,228.913 1329.53,226.762 1330.1,226.986 1330.67,226.213 1331.24,225.493 1331.81,224.741 1332.38,224.015 1332.94,224.101 1333.51,222.483 1334.08,222.882 1334.65,223.391 1335.22,225.982 1335.79,223.966 1336.36,224.335 1336.92,223.823 1337.49,224.193 1338.06,226.602 1338.63,227.702 1339.2,225.453 1339.77,224.724 1340.33,226.969 1340.9,227.106 1341.47,226.382 1342.04,226.816 1342.61,230.181 1343.18,230.159 1343.74,229.975 1344.31,229.011 1344.88,229.061 1345.45,230.259 1346.02,230.298 1346.59,231.431 1347.15,229.366 1347.72,232.746 1348.29,231.494 1348.86,230.538 1349.43,231.665 1350,231.301 1350.56,232.193 1351.13,231.848 1351.7,232.587 1352.27,232.168 1352.84,232.101 1353.41,231.795 1353.97,232.808 1354.54,233.748 1355.11,232.467 1355.68,231.277 1356.25,230.039 1356.82,227.958 1357.38,227.017 1357.95,229.221 1358.52,228.222 1359.09,227.07 1359.66,227.339 1360.23,229.427 1360.79,229.649 1361.36,229.741 1361.93,226.806 1362.5,227.049 1363.07,228.237 1363.64,228.504 1364.2,228.393 1364.77,227.508 1365.34,226.583 1365.91,225.952 1366.48,222.106 1367.05,223.717 1367.61,224.072 1368.18,226.211 1368.75,226.576 1369.32,227.893 1369.89,228.097 1370.46,226.144 1371.02,226.561 1371.59,227.902 1372.16,229.275 1372.73,229.337 1373.3,232.302 1373.87,229.051 1374.43,228.951 1375,228.096 1375.57,228.1 1376.14,228.008 1376.71,225.997 1377.28,227.521 1377.84,228.941 1378.41,229.024 1378.98,229.162 1379.55,227.304 1380.12,225.636 1380.69,226.809 1381.25,226.093 1381.82,228.508 1382.39,228.71 1382.96,226.807 1383.53,228.123 1384.1,229.38 1384.66,228.415 1385.23,225.484 1385.8,225.921 1386.37,225.215 1386.94,226.539 1387.51,225.89 1388.07,224.862 1388.64,222.184 1389.21,222.675 1389.78,220.135 1390.35,223.183 1390.92,223.894 1391.48,224.352 1392.05,226.829 1392.62,227.908 1393.19,228.104 1393.76,227.195 1394.33,228.584 1394.89,228.736 1395.46,229.052 1396.03,232.154 1396.6,232.125 1397.17,229.167 1397.74,227.444 1398.3,227.527 1398.87,225.772 1399.44,227.033 1400.01,229.012 1400.58,231.283 1401.15,230.225 1401.71,228.201 1402.28,229.334 1402.85,231.416 1403.42,232.406 1403.99,230.448 1404.56,229.452 1405.13,229.482 1405.69,227.455 1406.26,228.581 1406.83,229.862 1407.4,230.755 1407.97,232.863 1408.54,232.569 1409.1,231.404 1409.67,229.193 1410.24,228.315 1410.81,229.327 1411.38,230.311 1411.95,229.346 1412.51,227.541 1413.08,228.607 1413.65,228.902 1414.22,227.021 1414.79,228.397 1415.36,227.541 1415.92,227.065 1416.49,231.274 1417.06,232.107 1417.63,234.159 1418.2,235.116 1418.77,237.914 1419.33,237.51 1419.9,237.013 1420.47,236.672 1421.04,235.349 1421.61,235.962 1422.18,236.808 1422.74,235.054 1423.31,233.67 1423.88,233.419 1424.45,232.332 1425.02,230.146 1425.59,230.053 1426.15,227.987 1426.72,227.074 1427.29,229.419 1427.86,228.247 1428.43,229.345 1429,230.119 1429.56,229.96 1430.13,228.874 1430.7,228.979 1431.27,229.251 1431.84,229.254 1432.41,228.289 1432.97,228.369 1433.54,230.642 1434.11,228.514 1434.68,228.48 1435.25,226.504 1435.82,225.687 1436.38,223.715 1436.95,225.242 1437.52,226.282 1438.09,228.342 1438.66,229.537 1439.23,229.554 1439.79,230.606 1440.36,230.174 1440.93,230.088 1441.5,229.82 1442.07,230.648 1442.64,232.728 1443.2,234.312 1443.77,233.049 1444.34,233.948 1444.91,230.664 1445.48,230.56 1446.05,230.298 1446.61,230.161 1447.18,227.85 1447.75,226.883 1448.32,228.252 1448.89,229.548 1449.46,230.721 1450.02,231.6 1450.59,229.387 1451.16,227.33 1451.73,227.583 1452.3,228.806 1452.87,231.741 1453.43,231.392 1454,231.185 1454.57,234.079 1455.14,233.739 1455.71,233.106 1456.28,231.629 1456.84,229.251 1457.41,229.251 1457.98,229.048 1458.55,229.191 1459.12,228.044 1459.69,228.1 1460.25,229.041 1460.82,229.122 1461.39,229.014 1461.96,230.12 1462.53,231.032 1463.1,233.709 1463.66,232.383 1464.23,234.186 1464.8,232.915 1465.37,232.597 1465.94,233.523 1466.51,233.24 1467.07,232.73 1467.64,233.471 1468.21,234.152 1468.78,233.749 1469.35,233.278 1469.92,234.604 1470.48,232.98 1471.05,233.494 1471.62,232.097 1472.19,230.972 1472.76,228.854 1473.33,227.548 1473.89,229.777 1474.46,228.747 1475.03,231.459 1475.6,228.031 1476.17,226.941 1476.74,229.015 1477.31,229.217 1477.87,229.022 1478.44,229.13 1479.01,229.916 1479.58,229.829 1480.15,229.561 1480.72,229.007 1481.28,229.859 1481.85,229.754 1482.42,230.65 1482.99,232.443 1483.56,230.988 1484.13,230.64 1484.69,230.394 1485.26,230.205 1485.83,226.864 1486.4,226.978 1486.97,227.161 1487.54,228.313 1488.1,227.35 1488.67,228.375 1489.24,229.244 1489.81,227.144 1490.38,227.25 1490.95,226.112 1491.51,225.064 1492.08,226.298 1492.65,226.444 1493.22,226.582 1493.79,227.485 1494.36,226.367 1494.92,227.439 1495.49,228.336 1496.06,226.152 1496.63,225.13 1497.2,227.312 1497.77,229.409 1498.33,229.307 1498.9,230.291 1499.47,228.316 1500.04,227.346 1500.61,228.601 1501.18,227.698 1501.74,227.65 1502.31,227.703 1502.88,227.657 1503.45,228.805 1504.02,226.734 1504.59,226.829 1505.15,226.822 1505.72,227.11 1506.29,229.233 1506.86,230.101 1507.43,229.952 1508,227.503 1508.56,226.51 1509.13,227.739 1509.7,227.849 1510.27,227.794 1510.84,227.809 1511.41,228.841 1511.97,227.923 1512.54,226.927 1513.11,225.853 1513.68,225.101 1514.25,227.456 1514.82,223.366 1515.38,222.635 1515.95,223.982 1516.52,222.275 1517.09,222.465 1517.66,220.687 1518.23,222.283 1518.79,221.862 1519.36,222.364 1519.93,222.883 1520.5,225.432 1521.07,226.658 1521.64,227.02 1522.2,226.001 1522.77,226.236 1523.34,227.463 1523.91,226.363 1524.48,224.544 1525.05,225.745 1525.61,226.132 1526.18,225.567 1526.75,225.761 1527.32,226.984 1527.89,228.208 1528.46,231.484 1529.02,233.354 1529.59,232.033 1530.16,232.029 1530.73,230.714 1531.3,230.679 1531.87,229.398 1532.43,231.439 1533,232.415 1533.57,233.349 1534.14,235.032 1534.71,237.986 1535.28,237.361 1535.84,235.942 1536.41,235.471 1536.98,235.949 1537.55,236.443 1538.12,238.14 1538.69,239.593 1539.25,239.932 1539.82,240.436 1540.39,239.314 1540.96,237.342 1541.53,235.693 1542.1,235.224 1542.66,234.534 1543.23,235.309 1543.8,232.659 1544.37,231.661 1544.94,234.715 1545.51,234.085 1546.08,231.404 1546.64,229.976 1547.21,228.793 1547.78,227.633 1548.35,228.666 1548.92,227.361 1549.49,226.34 1550.05,228.422 1550.62,228.398 1551.19,228.38 1551.76,229.332 1552.33,228.102 1552.9,229.056 1553.46,231.044 1554.03,230.539 1554.6,230.378 1555.17,231.585 1555.74,232.299 1556.31,229.698 1556.87,229.473 1557.44,230.046 1558.01,229.774 1558.58,228.685 1559.15,228.534 1559.72,229.506 1560.28,229.163 1560.85,229.126 1561.42,229.933 1561.99,230.976 1562.56,229.88 1563.13,229.644 1563.69,229.316 1564.26,228.417 1564.83,230.356 1565.4,229.863 1565.97,229.396 1566.54,228.348 1567.1,227.398 1567.67,227.56 1568.24,227.403 1568.81,225.3 1569.38,225.517 1569.95,224.588 1570.51,224.999 1571.08,225.067 1571.65,227.406 1572.22,228.444 1572.79,226.382 1573.36,226.41 1573.92,226.62 1574.49,227.732 1575.06,228.67 1575.63,227.398 1576.2,228.419 1576.77,230.346 1577.33,231.094 1577.9,230.781 1578.47,229.372 1579.04,228.182 1579.61,228.154 1580.18,228.12 1580.74,225.826 1581.31,228.188 1581.88,228.208 1582.45,226.2 1583.02,224.3 1583.59,225.685 1584.15,224.896 1584.72,224.113 1585.29,224.423 1585.86,224.776 1586.43,228.331 1587,229.536 1587.56,229.369 1588.13,229.138 1588.7,226.718 1589.27,225.916 1589.84,225.088 1590.41,225.424 1590.97,222.662 1591.54,223.177 1592.11,223.466 1592.68,224.894 1593.25,222.159 1593.82,223.498 1594.38,222.701 1594.95,221.175 1595.52,223.701 1596.09,226.234 1596.66,226.65 1597.23,226.926 1597.79,225.137 1598.36,225.381 1598.93,225.601 1599.5,225.853 1600.07,226.237 1600.64,224.487 1601.2,222.846 1601.77,222.203 1602.34,223.659 1602.91,224.125 1603.48,224.517 1604.05,226.019 1604.61,224.145 1605.18,226.674 1605.75,226.012 1606.32,224.079 1606.89,224.458 1607.46,225.82 1608.02,227.363 1608.59,227.734 1609.16,226.705 1609.73,225.699 1610.3,228.103 1610.87,227.383 1611.43,228.427 1612,228.791 1612.57,228.848 1613.14,225.941 1613.71,226.207 1614.28,230.779 1614.84,231.869 1615.41,230.893 1615.98,229.925 1616.55,228.828 1617.12,229.948 1617.69,229.932 1618.26,229.796 1618.82,228.656 1619.39,226.745 1619.96,225.946 1620.53,226.326 1621.1,227.584 1621.67,228.813 1622.23,230.112 1622.8,229.967 1623.37,230.219 1623.94,231.446 1624.51,231.274 1625.08,233.414 1625.64,232.111 1626.21,234.015 1626.78,234.669 1627.35,234.436 1627.92,233.271 1628.49,230.969 1629.05,228.942 1629.62,231.175 1630.19,229.735 1630.76,229.618 1631.33,230.716 1631.9,230.638 1632.46,231.829 1633.03,229.646 1633.6,229.635 1634.17,230.732 1634.74,229.681 1635.31,230.677 1635.87,229.481 1636.44,229.638 1637.01,230.673 1637.58,230.721 1638.15,228.619 1638.72,229.804 1639.28,230.942 1639.85,229.912 1640.42,229.908 1640.99,229.888 1641.56,228.782 1642.13,230.75 1642.69,230.596 1643.26,230.299 1643.83,229.138 1644.4,229.206 1644.97,227.956 1645.54,226.981 1646.1,228.296 1646.67,228.436 1647.24,231.628 1647.81,231.509 1648.38,230.332 1648.95,229.401 1649.51,228.268 1650.08,227.237 1650.65,228.492 1651.22,228.581 1651.79,227.807 1652.36,226.976 1652.92,226.02 1653.49,229.173 1654.06,230.381 1654.63,231.264 1655.2,231.217 1655.77,232.16 1656.33,231.042 1656.9,231.092 1657.47,230.946 1658.04,233.97 1658.61,234.677 1659.18,233.195 1659.74,234.142 1660.31,233.681 1660.88,233.434 1661.45,231.965 1662.02,231.692 1662.59,232.344 1663.15,233.276 1663.72,231.895 1664.29,231.375 1664.86,228.956 1665.43,229.849 1666,229.704 1666.56,230.696 1667.13,232.457 1667.7,232.05 1668.27,233.911 1668.84,234.429 1669.41,235.083 1669.97,232.479 1670.54,232.015 1671.11,230.809 1671.68,230.518 1672.25,231.266 1672.82,229.895 1673.38,228.582 1673.95,229.182 1674.52,230.131 1675.09,229.138 1675.66,226.932 1676.23,225.864 1676.79,225.11 1677.36,225.2 1677.93,225.474 1678.5,226.846 1679.07,225.871 1679.64,224.943 1680.2,226.25 1680.77,222.257 1681.34,222.714 1681.91,222.115 1682.48,222.618 1683.05,224.008 1683.61,224.493 1684.18,223.915 1684.75,224.264 1685.32,225.882 1685.89,226.039 1686.46,225.101 1687.02,224.482 1687.59,223.9 1688.16,223.376 1688.73,224.782 1689.3,225.35 1689.87,224.84 1690.44,222.209 1691,224.826 1691.57,225.261 1692.14,227.381 1692.71,227.652 1693.28,227.732 1693.85,228.919 1694.41,229.939 1694.98,229.951 1695.55,229.737 1696.12,230.895 1696.69,229.686 1697.26,229.79 1697.82,229.841 1698.39,228.826 1698.96,228.892 1699.53,232.035 1700.1,232.874 1700.67,233.677 1701.23,234.243 1701.8,233.855 1702.37,232.412 1702.94,232.274 1703.51,232.129 1704.08,233.029 1704.64,235.736 1705.21,236.296 1705.78,237.966 1706.35,234.314 1706.92,231.851 1707.49,232.622 1708.05,235.286 1708.62,233.653 1709.19,232.096 1709.76,232.836 1710.33,233.578 1710.9,233.216 1711.46,231.826 1712.03,230.325 1712.6,231.189 1713.17,231.881 1713.74,233.793 1714.31,233.283 1714.87,234.172 1715.44,233.733 1716.01,231.512 1716.58,232.077 1717.15,231.732 1717.72,230.282 1718.28,228.849 1718.85,228.839 1719.42,230.79 1719.99,232.778 1720.56,232.655 1721.13,230.17 1721.69,228.765 1722.26,230.613 1722.83,229.307 1723.4,230.148 1723.97,226.644 1724.54,227.684 1725.1,228.596 1725.67,227.446 1726.24,229.4 1726.81,228.111 1727.38,227.066 1727.95,225.072 1728.51,224.288 1729.08,225.492 1729.65,226.628 1730.22,227.842 1730.79,228.027 1731.36,226.966 1731.92,227.006 1732.49,226.157 1733.06,225.323 1733.63,226.758 1734.2,225.685 1734.77,225.932 1735.33,227.038 1735.9,225.994 1736.47,224.099 1737.04,222.241 1737.61,222.688 1738.18,222.299 1738.74,221.705 1739.31,225.375 1739.88,224.558 1740.45,224.045 1741.02,223.291 1741.59,223.574 1742.15,222.94 1742.72,224.337 1743.29,224.884 1743.86,224.262 1744.43,224.5 1745,225.858 1745.56,226.128 1746.13,225.449 1746.7,228.782 1747.27,228.963 1747.84,228.062 1748.41,228.121 1748.97,226.221 1749.54,227.641 1750.11,226.637 1750.68,228.163 1751.25,227.556 1751.82,227.637 1752.38,227.701 1752.95,226.948 1753.52,227.286 1754.09,227.646 1754.66,228.778 1755.23,228.81 1755.79,229.82 1756.36,228.796 1756.93,228.752 1757.5,229.055 1758.07,228.946 1758.64,229.295 1759.21,229.431 1759.77,230.333 1760.34,232.316 1760.91,232.147 1761.48,230.887 1762.05,230.901 1762.62,231.027 1763.18,231.87 1763.75,230.695 1764.32,231.508 1764.89,232.418 1765.46,230.806 1766.03,231.716 1766.59,232.515 1767.16,231.302 1767.73,227.986 1768.3,228.007 1768.87,229.355 1769.44,231.435 1770,232.459 1770.57,231.032 1771.14,230.805 1771.71,229.852 1772.28,229.774 1772.85,229.719 1773.41,230.721 1773.98,228.648 1774.55,230.86 1775.12,226.516 1775.69,225.863 1776.26,225.98 1776.82,224.074 1777.39,225.54 1777.96,228.103 1778.53,226.119 1779.1,225.256 1779.67,227.694 1780.23,227.71 1780.8,230.204 1781.37,231.25 1781.94,230.267 1782.51,230.096 1783.08,229.083 1783.64,229.193 1784.21,229.188 1784.78,229.447 1785.35,231.755 1785.92,231.845 1786.49,231.679 1787.05,231.506 1787.62,232.505 1788.19,234.393 1788.76,232.992 1789.33,232.695 1789.9,231.328 1790.46,233.37 1791.03,233.005 1791.6,231.66 1792.17,231.614 1792.74,232.332 1793.31,232.182 1793.87,232.794 1794.44,232.252 1795.01,232.063 1795.58,231.684 1796.15,229.492 1796.72,230.589 1797.28,230.326 1797.85,228.109 1798.42,226.169 1798.99,227.408 1799.56,227.268 1800.13,228.062 1800.69,230.018 1801.26,229.963 1801.83,228.806 1802.4,230.787 1802.97,231.427 1803.54,231.137 1804.1,230.888 1804.67,228.585 1805.24,228.783 1805.81,227.864 1806.38,227.995 1806.95,224.745 1807.51,225.083 1808.08,224.367 1808.65,224.76 1809.22,222.098 1809.79,224.672 1810.36,225.11 1810.92,223.326 1811.49,223.885 1812.06,223.365 1812.63,223.714 1813.2,220.923 1813.77,224.643 1814.33,222.907 1814.9,223.433 1815.47,223.944 1816.04,225.552 1816.61,224.907 1817.18,224.348 1817.74,222.832 1818.31,224.48 1818.88,223.043 1819.45,223.421 1820.02,222.887 1820.59,223.253 1821.15,223.802 1821.72,225.405 1822.29,225.859 1822.86,224.88 1823.43,226.204 1824,226.377 1824.56,226.743 1825.13,227.877 1825.7,226.938 1826.27,228.143 1826.84,226.345 1827.41,226.932 1827.97,226.348 1828.54,226.473 1829.11,225.762 1829.68,228.301 1830.25,229.674 1830.82,228.758 1831.39,228.903 1831.95,230.071 1832.52,232.299 1833.09,231.256 1833.66,230.239 1834.23,230.363 1834.8,231.37 1835.36,231.427 1835.93,230.437 1836.5,231.37 1837.07,231.296 1837.64,231.098 1838.21,232.291 1838.77,232.123 1839.34,231.004 1839.91,231.077 1840.48,230.011 1841.05,231.281 1841.62,231.178 1842.18,230.885 1842.75,232.082 1843.32,234.914 1843.89,234.483 1844.46,234.068 1845.03,234.586 1845.59,235.448 1846.16,236.224 1846.73,234.535 1847.3,234.263 1847.87,234.06 1848.44,232.668 1849,233.331 1849.57,233.162 1850.14,232.86 1850.71,230.559 1851.28,229.5 1851.85,230.752 1852.41,231.727 1852.98,233.525 1853.55,234.167 1854.12,236.023 1854.69,236.688 1855.26,236.056 1855.82,235.624 1856.39,236.247 1856.96,235.727 1857.53,233.107 1858.1,232.726 1858.67,232.429 1859.23,231.084 1859.8,231.043 1860.37,229.904 1860.94,230.941 1861.51,229.809 1862.08,228.839 1862.64,231.955 1863.21,230.673 1863.78,233.557 1864.35,232.121 1864.92,230.843 1865.49,230.733 1866.05,230.621 1866.62,230.241 1867.19,231.043 1867.76,229.806 1868.33,229.425 1868.9,228.245 1869.46,229.014 1870.03,228.846 1870.6,227.84 1871.17,226.694 1871.74,227.729 1872.31,228.82 1872.87,223.503 1873.44,223.757 1874.01,225.075 1874.58,224.318 1875.15,224.515 1875.72,225.647 1876.28,226.812 1876.85,229.011 1877.42,227.821 1877.99,227.775 1878.56,225.792 1879.13,225.826 1879.69,225.994 1880.26,226.361 1880.83,226.642 1881.4,225.873 1881.97,227.211 1882.54,226.272 1883.1,226.498 1883.67,225.592 1884.24,225.738 1884.81,225.902 1885.38,225.056 1885.95,225.335 1886.51,229.858 1887.08,228.625 1887.65,228.726 1888.22,227.635 1888.79,225.668 1889.36,225.821 1889.92,225.061 1890.49,226.175 1891.06,226.449 1891.63,228.915 1892.2,230.102 1892.77,231.107 1893.33,231.972 1893.9,232.87 1894.47,228.506 1895.04,229.598 1895.61,226.456 1896.18,227.726 1896.74,229.06 1897.31,228.96 1897.88,227.891 1898.45,229.827 1899.02,229.657 1899.59,228.437 1900.16,228.536 1900.72,229.609 1901.29,230.736 1901.86,234.39 1902.43,233.829 1903,234.563 1903.57,233.016 1904.13,231.752 1904.7,231.265 1905.27,231.12 1905.84,230.957 1906.41,230.973 1906.98,230.709 1907.54,229.46 1908.11,230.424 1908.68,231.275 1909.25,230.801 1909.82,231.73 1910.39,232.463 1910.95,232.136 1911.52,231.734 1912.09,231.382 1912.66,231.108 1913.23,228.132 1913.8,227.983 1914.36,226.905 1914.93,223.06 1915.5,222.55 1916.07,222.988 1916.64,221.413 1917.21,222.765 1917.77,222.358 1918.34,222.026 1918.91,223.379 1919.48,222.918 1920.05,223.264 1920.62,223.626 1921.18,224.046 1921.75,222.354 1922.32,224 1922.89,225.529 1923.46,222.863 1924.03,223.524 1924.59,222.674 1925.16,224.424 1925.73,227.96 1926.3,228.083 1926.87,225.915 1927.44,223.975 1928,223.245 1928.57,224.835 1929.14,225.065 1929.71,225.084 1930.28,222.73 1930.85,223.392 1931.41,222.943 1931.98,223.483 1932.55,223.084 1933.12,224.944 1933.69,229.625 1934.26,228.833 1934.82,230.079 1935.39,230.072 1935.96,228.031 1936.53,229.207 1937.1,228.433 1937.67,230.846 1938.23,230.002 1938.8,229.168 1939.37,230.268 1939.94,228.927 1940.51,229.008 1941.08,229.256 1941.64,229.437 1942.21,226.501 1942.78,225.775 1943.35,231.39 1943.92,232.636 1944.49,233.508 1945.05,233.507 1945.62,233.36 1946.19,232.23 1946.76,233.254 1947.33,230.844 1947.9,230.925 1948.46,231.806 1949.03,231.705 1949.6,230.821 1950.17,232.731 1950.74,232.508 1951.31,235.393 1951.87,235.022 1952.44,235.458 1953.01,234.088 1953.58,233.81 1954.15,236.182 1954.72,235.927 1955.28,237.235 1955.85,235.578 1956.42,236.23 1956.99,236.756 1957.56,236.096 1958.13,234.523 1958.69,234.043 1959.26,230.573 1959.83,229.327 1960.4,230.394 1960.97,230.1 1961.54,228.014 1962.1,230.24 1962.67,231.092 1963.24,232.02 1963.81,231.939 1964.38,226.618 1964.95,223.597 1965.51,222.915 1966.08,224.562 1966.65,225.017 1967.22,227.297 1967.79,228.266 1968.36,227.26 1968.92,227.56 1969.49,228.591 1970.06,228.799 1970.63,229.884 1971.2,228.549 1971.77,228.53 1972.34,229.781 1972.9,229.809 1973.47,229.845 1974.04,229.667 1974.61,227.537 1975.18,228.702 1975.75,229.616 1976.31,230.478 1976.88,230.313 1977.45,231.472 1978.02,233.389 1978.59,234.17 1979.16,234.797 1979.72,233.257 1980.29,234.08 1980.86,234.692 1981.43,236.382 1982,238.943 1982.57,238.168 1983.13,236.479 1983.7,235.983 1984.27,235.321 1984.84,234.897 1985.41,235.559 1985.98,236.155 1986.54,234.73 1987.11,232.038 1987.68,232.754 1988.25,231.471 1988.82,230.203 1989.39,229.792 1989.95,230.45 1990.52,227.153 1991.09,223.962 1991.66,222.973 1992.23,224.336 1992.8,224.625 1993.36,225.881 1993.93,224.987 1994.5,224.165 1995.07,225.412 1995.64,226.587 1996.21,227.613 1996.77,230.552 1997.34,231.293 1997.91,230.969 1998.48,228.905 1999.05,230.066 1999.62,229.969 2000.18,231.87 2000.75,228.462 2001.32,228.338 2001.89,228.392 2002.46,228.263 2003.03,231.205 2003.59,228.866 2004.16,230.852 2004.73,229.566 2005.3,228.384 2005.87,228.27 2006.44,229.004 2007,228.891 2007.57,227.652 2008.14,226.559 2008.71,226.686 2009.28,226.82 2009.85,226.691 2010.41,226.602 2010.98,224.602 2011.55,226.016 2012.12,225.946 2012.69,225.119 2013.26,224.175 2013.82,224.491 2014.39,222.711 2014.96,222.016 2015.53,221.486 2016.1,221.832 2016.67,223.178 2017.23,227.558 2017.8,226.561 2018.37,226.604 2018.94,227.711 2019.51,228.884 2020.08,228.941 2020.64,229.885 2021.21,228.399 2021.78,227.346 2022.35,227.46 2022.92,227.506 2023.49,227.506 2024.05,228.505 2024.62,227.604 2025.19,224.623 2025.76,223.748 2026.33,225.126 2026.9,225.521 2027.46,223.709 2028.03,225.327 2028.6,223.34 2029.17,223.969 2029.74,223.463 2030.31,225.784 2030.87,224.117 2031.44,222.28 2032.01,224.129 2032.58,225.652 2033.15,227.077 2033.72,226.274 2034.28,225.654 2034.85,226.05 2035.42,228.325 2035.99,227.438 2036.56,228.538 2037.13,230.605 2037.69,230.72 2038.26,232.526 2038.83,232.449 2039.4,232.531 2039.97,232.227 2040.54,232.077 2041.11,228.806 2041.67,228.118 2042.24,229.126 2042.81,227.908 2043.38,226.944 2043.95,226.004 2044.52,227.164 2045.08,229.414 2045.65,229.392 2046.22,225.323 2046.79,229.918 2047.36,229 2047.93,231.949 2048.49,233.831 2049.06,234.63 2049.63,236.228 2050.2,233.698 2050.77,231.268 2051.34,228.97 2051.9,229.208 2052.47,227.271 2053.04,227.548 2053.61,229.761 2054.18,227.571 2054.75,227.539 2055.31,227.641 2055.88,227.968 2056.45,228.1 2057.02,228.217 2057.59,228.306 2058.16,226.163 2058.72,228.353 2059.29,229.438 2059.86,230.403 2060.43,229.295 2061,228.272 2061.57,228.246 2062.13,228.25 2062.7,229.407 2063.27,230.215 2063.84,230.166 2064.41,231.16 2064.98,231.93 2065.54,230.487 2066.11,229.656 2066.68,230.672 2067.25,229.615 2067.82,227.762 2068.39,224.802 2068.95,227.192 2069.52,227.402 2070.09,227.629 2070.66,226.795 2071.23,228.924 2071.8,230.019 2072.36,229.14 2072.93,230.172 2073.5,226.013 2074.07,227.303 2074.64,227.478 2075.21,227.737 2075.77,227.456 2076.34,226.496 2076.91,223.606 2077.48,223.175 2078.05,223.671 2078.62,226.074 2079.18,227.302 2079.75,227.317 2080.32,225.622 2080.89,224.77 2081.46,226.188 2082.03,226.551 2082.59,226.93 2083.16,229.118 2083.73,229.107 2084.3,229.08 2084.87,228.056 2085.44,228.09 2086,227.166 2086.57,227.393 2087.14,226.634 2087.71,227.911 2088.28,228.125 2088.85,229.424 2089.41,229.798 2089.98,231.134 2090.55,232.241 2091.12,233.146 2091.69,231.124 2092.26,233.068 2092.82,233.798 2093.39,232.609 2093.96,234.467 2094.53,235.126 2095.1,234.756 2095.67,233.224 2096.23,235.189 2096.8,236.758 2097.37,235.311 2097.94,233.962 2098.51,231.756 2099.08,231.591 2099.64,233.617 2100.21,233.535 2100.78,233.441 2101.35,234.153 2101.92,231.605 2102.49,230.274 2103.05,230.436 2103.62,230.225 2104.19,230.118 2104.76,229.833 2105.33,233.747 2105.9,232.271 2106.46,231.727 2107.03,233.547 2107.6,232.113 2108.17,232.895 2108.74,232.634 2109.31,235.382 2109.87,234.723 2110.44,234.235 2111.01,235.868 2111.58,235.287 2112.15,232.701 2112.72,232.206 2113.29,231.749 2113.85,231.316 2114.42,230.932 2114.99,232.452 2115.56,230.996 2116.13,227.613 2116.7,227.422 2117.26,228.452 2117.83,228.264 2118.4,229.194 2118.97,230.064 2119.54,229.869 2120.11,231.56 2120.67,231.075 2121.24,231.951 2121.81,232.585 2122.38,230.163 2122.95,231.094 2123.52,232.845 2124.08,231.411 2124.65,229.957 2125.22,228.684 2125.79,227.537 2126.36,225.706 2126.93,226.955 2127.49,226.011 2128.06,227.095 2128.63,228.094 2129.2,228.183 2129.77,225.999 2130.34,224.956 2130.9,227.141 2131.47,226.995 2132.04,226.08 2132.61,227.091 2133.18,227.189 2133.75,228.383 2134.31,228.341 2134.88,225.14 2135.45,223.072 2136.02,221.307 2136.59,222.724 2137.16,222.061 2137.72,223.648 2138.29,223.38 2138.86,225.901 2139.43,227.971 2140,226.96 2140.57,226.941 2141.13,228.017 2141.7,227.091 2142.27,228.302 2142.84,228.436 2143.41,228.366 2143.98,228.327 2144.54,229.527 2145.11,229.471 2145.68,229.257 2146.25,230.121 2146.82,231.16 2147.39,228.987 2147.95,228.787 2148.52,227.638 2149.09,227.849 2149.66,228.98 2150.23,228.884 2150.8,229.765 2151.36,229.565 2151.93,232.484 2152.5,232.218 2153.07,229.797 2153.64,228.401 2154.21,226.225 2154.77,226.418 2155.34,223.665 2155.91,226.014 2156.48,227.327 2157.05,227.405 2157.62,227.498 2158.18,228.449 2158.75,228.529 2159.32,227.628 2159.89,227.827 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.026\n  with uncertainty of ± 0.0023181192708253005\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01472 ± (0.00311571, 0.00307903) (MC)\n  95% confidence interval: [-4.02072, -4.00832]) (MC)\n  linear error propagation: -4.01518 ± 0.00316103\n  |δ_y| = |0.00246652| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014719044884229, val_l = 0.006004370935384529, val_u = 0.006396536278363563)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip790\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip791\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip792\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.32 2211.02,1144.32 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,980.405 2211.02,980.405 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,816.49 2211.02,816.49 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,652.575 2211.02,652.575 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,488.66 2211.02,488.66 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,324.746 2211.02,324.746 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.32 365.751,1144.32 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,980.405 365.751,980.405 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,816.49 365.751,816.49 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,652.575 365.751,652.575 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,488.66 365.751,488.66 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,324.746 365.751,324.746 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M298.909 1130.12 Q295.298 1130.12 293.469 1133.68 Q291.664 1137.23 291.664 1144.35 Q291.664 1151.46 293.469 1155.03 Q295.298 1158.57 298.909 1158.57 Q302.543 1158.57 304.349 1155.03 Q306.177 1151.46 306.177 1144.35 Q306.177 1137.23 304.349 1133.68 Q302.543 1130.12 298.909 1130.12 M298.909 1126.42 Q304.719 1126.42 307.775 1131.02 Q310.853 1135.6 310.853 1144.35 Q310.853 1153.08 307.775 1157.69 Q304.719 1162.27 298.909 1162.27 Q293.099 1162.27 290.02 1157.69 Q286.964 1153.08 286.964 1144.35 Q286.964 1135.6 290.02 1131.02 Q293.099 1126.42 298.909 1126.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M259.557 993.75 L267.196 993.75 L267.196 967.384 L258.886 969.051 L258.886 964.792 L267.15 963.125 L271.826 963.125 L271.826 993.75 L279.465 993.75 L279.465 997.685 L259.557 997.685 L259.557 993.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 966.204 Q295.298 966.204 293.469 969.769 Q291.664 973.31 291.664 980.44 Q291.664 987.546 293.469 991.111 Q295.298 994.653 298.909 994.653 Q302.543 994.653 304.349 991.111 Q306.177 987.546 306.177 980.44 Q306.177 973.31 304.349 969.769 Q302.543 966.204 298.909 966.204 M298.909 962.5 Q304.719 962.5 307.775 967.107 Q310.853 971.69 310.853 980.44 Q310.853 989.167 307.775 993.773 Q304.719 998.356 298.909 998.356 Q293.099 998.356 290.02 993.773 Q286.964 989.167 286.964 980.44 Q286.964 971.69 290.02 967.107 Q293.099 962.5 298.909 962.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M262.775 829.835 L279.094 829.835 L279.094 833.77 L257.15 833.77 L257.15 829.835 Q259.812 827.081 264.395 822.451 Q269.002 817.798 270.182 816.456 Q272.428 813.932 273.307 812.196 Q274.21 810.437 274.21 808.747 Q274.21 805.993 272.266 804.257 Q270.344 802.52 267.242 802.52 Q265.043 802.52 262.59 803.284 Q260.159 804.048 257.381 805.599 L257.381 800.877 Q260.205 799.743 262.659 799.164 Q265.113 798.585 267.15 798.585 Q272.52 798.585 275.715 801.27 Q278.909 803.956 278.909 808.446 Q278.909 810.576 278.099 812.497 Q277.312 814.395 275.205 816.988 Q274.627 817.659 271.525 820.877 Q268.423 824.071 262.775 829.835 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 802.289 Q295.298 802.289 293.469 805.854 Q291.664 809.395 291.664 816.525 Q291.664 823.631 293.469 827.196 Q295.298 830.738 298.909 830.738 Q302.543 830.738 304.349 827.196 Q306.177 823.631 306.177 816.525 Q306.177 809.395 304.349 805.854 Q302.543 802.289 298.909 802.289 M298.909 798.585 Q304.719 798.585 307.775 803.192 Q310.853 807.775 310.853 816.525 Q310.853 825.252 307.775 829.858 Q304.719 834.442 298.909 834.442 Q293.099 834.442 290.02 829.858 Q286.964 825.252 286.964 816.525 Q286.964 807.775 290.02 803.192 Q293.099 798.585 298.909 798.585 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M272.914 651.221 Q276.27 651.939 278.145 654.207 Q280.043 656.476 280.043 659.809 Q280.043 664.925 276.525 667.726 Q273.006 670.527 266.525 670.527 Q264.349 670.527 262.034 670.087 Q259.742 669.67 257.289 668.814 L257.289 664.3 Q259.233 665.434 261.548 666.013 Q263.863 666.592 266.386 666.592 Q270.784 666.592 273.076 664.855 Q275.39 663.119 275.39 659.809 Q275.39 656.754 273.238 655.041 Q271.108 653.305 267.289 653.305 L263.261 653.305 L263.261 649.462 L267.474 649.462 Q270.923 649.462 272.752 648.096 Q274.58 646.707 274.58 644.115 Q274.58 641.453 272.682 640.041 Q270.807 638.606 267.289 638.606 Q265.367 638.606 263.168 639.022 Q260.969 639.439 258.33 640.319 L258.33 636.152 Q260.992 635.411 263.307 635.041 Q265.645 634.67 267.705 634.67 Q273.029 634.67 276.131 637.101 Q279.233 639.508 279.233 643.629 Q279.233 646.499 277.59 648.49 Q275.946 650.457 272.914 651.221 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 638.374 Q295.298 638.374 293.469 641.939 Q291.664 645.481 291.664 652.61 Q291.664 659.717 293.469 663.281 Q295.298 666.823 298.909 666.823 Q302.543 666.823 304.349 663.281 Q306.177 659.717 306.177 652.61 Q306.177 645.481 304.349 641.939 Q302.543 638.374 298.909 638.374 M298.909 634.67 Q304.719 634.67 307.775 639.277 Q310.853 643.86 310.853 652.61 Q310.853 661.337 307.775 665.943 Q304.719 670.527 298.909 670.527 Q293.099 670.527 290.02 665.943 Q286.964 661.337 286.964 652.61 Q286.964 643.86 290.02 639.277 Q293.099 634.67 298.909 634.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M271.594 475.455 L259.789 493.904 L271.594 493.904 L271.594 475.455 M270.367 471.38 L276.247 471.38 L276.247 493.904 L281.177 493.904 L281.177 497.792 L276.247 497.792 L276.247 505.94 L271.594 505.94 L271.594 497.792 L255.992 497.792 L255.992 493.279 L270.367 471.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 474.459 Q295.298 474.459 293.469 478.024 Q291.664 481.566 291.664 488.695 Q291.664 495.802 293.469 499.366 Q295.298 502.908 298.909 502.908 Q302.543 502.908 304.349 499.366 Q306.177 495.802 306.177 488.695 Q306.177 481.566 304.349 478.024 Q302.543 474.459 298.909 474.459 M298.909 470.756 Q304.719 470.756 307.775 475.362 Q310.853 479.945 310.853 488.695 Q310.853 497.422 307.775 502.028 Q304.719 506.612 298.909 506.612 Q293.099 506.612 290.02 502.028 Q286.964 497.422 286.964 488.695 Q286.964 479.945 290.02 475.362 Q293.099 470.756 298.909 470.756 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M258.793 307.466 L277.15 307.466 L277.15 311.401 L263.076 311.401 L263.076 319.873 Q264.094 319.526 265.113 319.364 Q266.131 319.178 267.15 319.178 Q272.937 319.178 276.316 322.35 Q279.696 325.521 279.696 330.938 Q279.696 336.516 276.224 339.618 Q272.752 342.697 266.432 342.697 Q264.256 342.697 261.988 342.327 Q259.742 341.956 257.335 341.215 L257.335 336.516 Q259.418 337.651 261.641 338.206 Q263.863 338.762 266.34 338.762 Q270.344 338.762 272.682 336.655 Q275.02 334.549 275.02 330.938 Q275.02 327.327 272.682 325.22 Q270.344 323.114 266.34 323.114 Q264.465 323.114 262.59 323.53 Q260.738 323.947 258.793 324.827 L258.793 307.466 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 310.544 Q295.298 310.544 293.469 314.109 Q291.664 317.651 291.664 324.78 Q291.664 331.887 293.469 335.452 Q295.298 338.993 298.909 338.993 Q302.543 338.993 304.349 335.452 Q306.177 331.887 306.177 324.78 Q306.177 317.651 304.349 314.109 Q302.543 310.544 298.909 310.544 M298.909 306.841 Q304.719 306.841 307.775 311.447 Q310.853 316.03 310.853 324.78 Q310.853 333.507 307.775 338.114 Q304.719 342.697 298.909 342.697 Q293.099 342.697 290.02 338.114 Q286.964 333.507 286.964 324.78 Q286.964 316.03 290.02 311.447 Q293.099 306.841 298.909 306.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1023.54 400.199,1039.18 400.786,933.007 401.372,944.853 401.958,847.779 402.545,858.638 403.131,770.905 403.718,692.68 404.304,618.977 404.891,550.301 405.477,492.356 406.063,436.752 406.65,388.57 407.236,343.264 407.823,302.681 408.409,268.565 408.995,238.451 409.582,268.961 410.168,242.453 410.755,269.368 411.341,293.827 411.927,272.53 412.514,254.867 413.1,241.334 413.687,229.124 414.273,219.895 414.86,243.627 415.446,236.741 416.032,231.439 416.619,226.779 417.205,224.621 417.792,225.512 418.378,270.47 418.964,270.483 419.551,272.573 420.137,275.217 420.724,279.159 421.31,316.778 421.896,322.847 422.483,343.397 423.069,349.314 423.656,382.9 424.242,414.998 424.829,422.024 425.415,429.667 426.001,448.652 426.588,468.096 427.174,477.831 427.761,496.497 428.347,515.392 428.933,525.531 429.52,536.02 430.106,553.476 430.693,570.771 431.279,580.469 431.865,597.513 432.452,627.217 433.038,643.039 433.625,653.372 434.211,663.668 434.798,689.173 435.384,703.674 435.97,727.039 436.557,749.317 437.143,761.883 437.73,769.39 438.316,777.486 438.902,793.67 439.489,809.939 440.075,825.39 440.662,836.638 441.248,854.754 441.835,864.461 442.421,878.161 443.007,891.381 443.594,901.18 444.18,916.641 444.767,922.78 445.353,937.571 445.939,945.78 446.526,953.727 447.112,962.099 447.699,967.176 448.285,972.157 448.871,979.536 449.458,989.655 450.044,996.733 450.631,1003.65 451.217,1008.15 451.804,1015.03 452.39,1024.08 452.976,1033 453.563,1037.05 454.149,1041.66 454.736,1045.66 455.322,1054.25 455.908,1064.3 456.495,1076.33 457.081,1081.6 457.668,1088.38 458.254,1099.49 458.84,1103.9 459.427,1111.82 460.013,1115.67 460.6,1119.31 461.186,1121.19 461.773,1123.02 462.359,1127.1 462.945,1132.77 463.532,1137.9 464.118,1142.9 464.705,1149.75 465.291,1152.82 465.877,1157.37 466.464,1160.2 467.05,1161.35 467.637,1162.09 468.223,1168.26 468.809,1172.39 469.396,1174.73 469.982,1178.84 470.569,1182.46 471.155,1186.24 471.742,1189.99 472.328,1191.73 472.914,1193.7 473.501,1192.11 474.087,1195.65 474.674,1195.79 475.26,1194.48 475.846,1193.38 476.433,1194.11 477.019,1196.5 477.606,1196.95 478.192,1199.1 478.778,1199.69 479.365,1204.62 479.951,1206.45 480.538,1206.86 481.124,1208.52 481.711,1210.47 482.297,1213.92 482.883,1215.64 483.47,1218.53 484.056,1220.15 484.643,1221.61 485.229,1224.31 485.815,1226.99 486.402,1228.22 486.988,1229.41 487.575,1230.74 488.161,1229.01 488.748,1232.85 489.334,1232.24 489.92,1234.6 490.507,1237.08 491.093,1235.11 491.68,1231.59 492.266,1232.81 492.852,1231.07 493.439,1232.15 494.025,1231.91 494.612,1234.9 495.198,1236.12 495.784,1236 496.371,1237.29 496.957,1235.35 497.544,1235.31 498.13,1237.99 498.717,1238.96 499.303,1235.54 499.889,1236.98 500.476,1239.66 501.062,1237.86 501.649,1240.22 502.235,1239.88 502.821,1242.33 503.408,1241.56 503.994,1243.76 504.581,1242 505.167,1241.61 505.753,1242.55 506.34,1244.98 506.926,1245.62 507.513,1243.55 508.099,1244.22 508.686,1249.2 509.272,1249.6 509.858,1245.78 510.445,1245.12 511.031,1246 511.618,1246.67 512.204,1245.94 512.79,1243.83 513.377,1241.99 513.963,1245.68 514.55,1246.27 515.136,1249.3 515.722,1246.85 516.309,1247.47 516.895,1250.53 517.482,1249.18 518.068,1249.63 518.655,1246.02 519.241,1245.09 519.827,1244.51 520.414,1247.88 521,1245.61 521.587,1243.48 522.173,1242.76 522.759,1242.46 523.346,1237.97 523.932,1233.63 524.519,1232.04 525.105,1230.82 525.691,1231.92 526.278,1231.9 526.864,1233.46 527.451,1234.6 528.037,1233.2 528.624,1234.55 529.21,1235.8 529.796,1235.82 530.383,1239.68 530.969,1239.47 531.556,1238.63 532.142,1238.13 532.728,1237.66 533.315,1238.26 533.901,1239.09 534.488,1240.01 535.074,1239.37 535.661,1236.37 536.247,1234.78 536.833,1237.49 537.42,1234.74 538.006,1234.8 538.593,1235.91 539.179,1237.08 539.765,1236.55 540.352,1237.55 540.938,1237.36 541.525,1239.7 542.111,1240.35 542.697,1238.39 543.284,1238.05 543.87,1238.94 544.457,1239.72 545.043,1237.88 545.63,1237.41 546.216,1239.74 546.802,1240.77 547.389,1240.03 547.975,1238.3 548.562,1239.08 549.148,1239.82 549.734,1241.76 550.321,1245.01 550.907,1241.27 551.494,1243.06 552.08,1244.77 552.666,1242.31 553.253,1242.93 553.839,1242.17 554.426,1239.8 555.012,1239.04 555.599,1241.2 556.185,1242.99 556.771,1242.14 557.358,1241.29 557.944,1240.27 558.531,1239.79 559.117,1241.79 559.703,1238.18 560.29,1234.98 560.876,1235.92 561.463,1234.08 562.049,1233.74 562.635,1233.25 563.222,1230.4 563.808,1231.58 564.395,1232.62 564.981,1227.97 565.568,1229.58 566.154,1229.38 566.74,1227.92 567.327,1230.41 567.913,1231.54 568.5,1235.18 569.086,1233.09 569.672,1231.21 570.259,1231.83 570.845,1231.57 571.432,1229.54 572.018,1224.04 572.605,1225.41 573.191,1228.38 573.777,1227.25 574.364,1227.27 574.95,1226.93 575.537,1228.2 576.123,1227.01 576.709,1226.77 577.296,1225.33 577.882,1227.73 578.469,1227.58 579.055,1225.77 579.641,1227.04 580.228,1228.49 580.814,1229.61 581.401,1230.97 581.987,1230.51 582.574,1230.23 583.16,1228.49 583.746,1230.72 584.333,1229.1 584.919,1229.9 585.506,1227.09 586.092,1229.37 586.678,1230.1 587.265,1229.85 587.851,1231.01 588.438,1230.51 589.024,1232.97 589.61,1231.04 590.197,1231.78 590.783,1229.77 591.37,1229.4 591.956,1230.49 592.543,1230.03 593.129,1229.7 593.715,1227.72 594.302,1230.09 594.888,1230.93 595.475,1229.03 596.061,1228.48 596.647,1229.36 597.234,1231.69 597.82,1231.08 598.407,1230.37 598.993,1229.78 599.579,1231.73 600.166,1228.71 600.752,1229.64 601.339,1229.24 601.925,1232.8 602.512,1232.28 603.098,1231.99 603.684,1231.6 604.271,1229.46 604.857,1227.44 605.444,1227.04 606.03,1226.75 606.616,1227.82 607.203,1228.91 607.789,1228.62 608.376,1230.82 608.962,1228.83 609.548,1227.3 610.135,1227.19 610.721,1228.4 611.308,1228.31 611.894,1226.58 612.481,1222.45 613.067,1222.59 613.653,1223.61 614.24,1223.37 614.826,1223.4 615.413,1223.28 615.999,1222.9 616.585,1225.37 617.172,1225.21 617.758,1224.95 618.345,1224.74 618.931,1224.63 619.518,1227.06 620.104,1229.84 620.69,1229.5 621.277,1231.79 621.863,1231.25 622.45,1233.15 623.036,1231.19 623.622,1227.85 624.209,1223.39 624.795,1223.43 625.382,1221.82 625.968,1223.27 626.554,1223.02 627.141,1220.4 627.727,1220.48 628.314,1220.44 628.9,1224.42 629.487,1224.16 630.073,1224.01 630.659,1222.41 631.246,1223.6 631.832,1222.09 632.419,1222.15 633.005,1222.04 633.591,1223.03 634.178,1222.8 634.764,1221.48 635.351,1222.77 635.937,1223.73 636.523,1224.96 637.11,1223.24 637.696,1224.27 638.283,1224.01 638.869,1221.21 639.456,1226.63 640.042,1224.89 640.628,1221.93 641.215,1225.85 641.801,1227.94 642.388,1228.72 642.974,1226.89 643.56,1226.45 644.147,1227.38 644.733,1226.88 645.32,1223.48 645.906,1224.46 646.492,1221.38 647.079,1221.59 647.665,1220.11 648.252,1217.44 648.838,1221.62 649.425,1221.53 650.011,1221.41 650.597,1221.21 651.184,1219.64 651.77,1219.35 652.357,1219.44 652.943,1220.7 653.529,1220.32 654.116,1220.24 654.702,1220.04 655.289,1222.75 655.875,1221.31 656.462,1225.07 657.048,1222.03 657.634,1224.34 658.221,1225.29 658.807,1223.74 659.394,1223.32 659.98,1224.34 660.566,1224.17 661.153,1227.95 661.739,1227.35 662.326,1224.29 662.912,1222.4 663.498,1223.51 664.085,1220.84 664.671,1220.64 665.258,1223.1 665.844,1222.43 666.431,1224.82 667.017,1224.26 667.603,1225.3 668.19,1222.18 668.776,1220.6 669.363,1216.47 669.949,1217.81 670.535,1217.98 671.122,1217.89 671.708,1219.26 672.295,1219.08 672.881,1219.15 673.467,1219.15 674.054,1217.98 674.64,1217.9 675.227,1217.09 675.813,1216.14 676.4,1217.31 676.986,1217.24 677.572,1217.26 678.159,1218.39 678.745,1217.07 679.332,1217.2 679.918,1222.61 680.504,1222.19 681.091,1219.3 681.677,1219.06 682.264,1219.02 682.85,1217.67 683.436,1218.84 684.023,1220.29 684.609,1222.77 685.196,1222.38 685.782,1222.36 686.369,1221.95 686.955,1223.27 687.541,1224.17 688.128,1225.13 688.714,1226.26 689.301,1227.22 689.887,1223.73 690.473,1225.93 691.06,1226.64 691.646,1226.26 692.233,1225.82 692.819,1225.36 693.405,1227.6 693.992,1228.25 694.578,1228.86 695.165,1224.55 695.751,1220.34 696.338,1215.94 696.924,1214.56 697.51,1216.96 698.097,1214.32 698.683,1214.57 699.27,1214.87 699.856,1219.27 700.442,1220.69 701.029,1221.87 701.615,1218.89 702.202,1217.07 702.788,1215.84 703.375,1216.11 703.961,1215.97 704.547,1216.18 705.134,1210.91 705.72,1211.06 706.307,1212.65 706.893,1214.09 707.479,1218.11 708.066,1216.57 708.652,1219.35 709.239,1220.39 709.825,1224.04 710.411,1224.9 710.998,1224.48 711.584,1222.52 712.171,1222.11 712.757,1217.6 713.344,1215.88 713.93,1219.79 714.516,1221.95 715.103,1222.85 715.689,1222.49 716.276,1220.9 716.862,1219.34 717.448,1220.52 718.035,1220.23 718.621,1217.2 719.208,1217.16 719.794,1217.05 720.38,1216.9 720.967,1216.6 721.553,1217.9 722.14,1219.06 722.726,1217.34 723.313,1214.67 723.899,1214.62 724.485,1216.26 725.072,1217.6 725.658,1217.3 726.245,1218.29 726.831,1215.5 727.417,1216.83 728.004,1215.34 728.59,1214 729.177,1212.84 729.763,1215.5 730.349,1215.31 730.936,1215.61 731.522,1214.28 732.109,1214.5 732.695,1217.24 733.282,1219.82 733.868,1215.46 734.454,1219.35 735.041,1220.33 735.627,1218.58 736.214,1217.16 736.8,1215.56 737.386,1215.31 737.973,1213.89 738.559,1213.84 739.146,1215.28 739.732,1215.26 740.318,1216.61 740.905,1213.4 741.491,1209.38 742.078,1209.69 742.664,1208.57 743.251,1210.28 743.837,1211.97 744.423,1210.66 745.01,1215.18 745.596,1213.62 746.183,1212.14 746.769,1210.76 747.355,1211.08 747.942,1212.66 748.528,1210.15 749.115,1208.9 749.701,1210.39 750.288,1209.28 750.874,1209.46 751.46,1209.63 752.047,1211.17 752.633,1209.97 753.22,1210.39 753.806,1207.7 754.392,1209.35 754.979,1205.6 755.565,1208.47 756.152,1208.67 756.738,1210.21 757.324,1208.96 757.911,1209.12 758.497,1206.64 759.084,1208.38 759.67,1209.3 760.257,1209.49 760.843,1212.64 761.429,1213.73 762.016,1213.47 762.602,1216.09 763.189,1217.11 763.775,1215.52 764.361,1216.73 764.948,1216.57 765.534,1216.36 766.121,1216.13 766.707,1214.7 767.293,1215.79 767.88,1216.99 768.466,1219.48 769.053,1221.75 769.639,1221.35 770.226,1222.47 770.812,1223.46 771.398,1225.74 771.985,1226.41 772.571,1225.64 773.158,1227.51 773.744,1225.62 774.33,1222.32 774.917,1221.82 775.503,1221.38 776.09,1222.04 776.676,1220.36 777.262,1215.68 777.849,1211.68 778.435,1213.27 779.022,1213.21 779.608,1214.37 780.195,1215.78 780.781,1215.68 781.367,1214.14 781.954,1214.08 782.54,1213.86 783.127,1212.38 783.713,1208.34 784.299,1207.36 784.886,1210.34 785.472,1212.03 786.059,1213.64 786.645,1213.61 787.232,1212.48 787.818,1211.34 788.404,1213.03 788.991,1213.08 789.577,1214.51 790.164,1215.41 790.75,1214.21 791.336,1214.1 791.923,1213.94 792.509,1214.17 793.096,1215.53 793.682,1215.33 794.268,1214.17 794.855,1215.36 795.441,1213.99 796.028,1212.81 796.614,1212.9 797.201,1213 797.787,1212.96 798.373,1210.19 798.96,1213.18 799.546,1213.15 800.133,1213.19 800.719,1214.33 801.305,1214 801.892,1213.81 802.478,1215.13 803.065,1214.8 803.651,1215.76 804.237,1215.56 804.824,1218.04 805.41,1217.94 805.997,1221.68 806.583,1219.88 807.17,1219.19 807.756,1221.78 808.342,1219.96 808.929,1219.76 809.515,1221.99 810.102,1218.89 810.688,1217.21 811.274,1218.05 811.861,1216.54 812.447,1215.17 813.034,1213.44 813.62,1213.29 814.206,1213.35 814.793,1213.38 815.379,1215.82 815.966,1215.78 816.552,1215.84 817.139,1216.7 817.725,1213.87 818.311,1213.78 818.898,1213.9 819.484,1213.75 820.071,1213.77 820.657,1213.38 821.243,1213.3 821.83,1209.62 822.416,1212.31 823.003,1209.58 823.589,1206.99 824.175,1207.25 824.762,1207.41 825.348,1207.72 825.935,1208.13 826.521,1208.33 827.108,1203.41 827.694,1205.34 828.28,1205.67 828.867,1206.04 829.453,1202.32 830.04,1202.85 830.626,1203.37 831.212,1205.34 831.799,1205.87 832.385,1206.21 832.972,1205.27 833.558,1205.96 834.145,1202.53 834.731,1207.19 835.317,1210.05 835.904,1211.11 836.49,1213.94 837.077,1213.65 837.663,1209.44 838.249,1209.51 838.836,1208.35 839.422,1211.03 840.009,1213.43 840.595,1213.38 841.181,1213.36 841.768,1213.08 842.354,1213.17 842.941,1212.85 843.527,1213.01 844.114,1211.56 844.7,1213.06 845.286,1214.28 845.873,1214.48 846.459,1215.62 847.046,1210.26 847.632,1213.04 848.218,1212.77 848.805,1215.4 849.391,1213.83 849.978,1212.64 850.564,1214 851.15,1215.54 851.737,1213.92 852.323,1216.27 852.91,1215.91 853.496,1216.05 854.083,1215.92 854.669,1215.54 855.255,1214.13 855.842,1211.47 856.428,1214.5 857.015,1214.16 857.601,1212.78 858.187,1213.86 858.774,1215.24 859.36,1216.67 859.947,1216.46 860.533,1214.92 861.119,1214.72 861.706,1215.76 862.292,1214.29 862.879,1215.4 863.465,1216.57 864.052,1214.64 864.638,1212.05 865.224,1210.99 865.811,1209.77 866.397,1208.39 866.984,1208.68 867.57,1207.56 868.156,1211.72 868.743,1213.15 869.329,1213.06 869.916,1211.62 870.502,1214 871.089,1213.97 871.675,1214.99 872.261,1216.32 872.848,1215.98 873.434,1215.73 874.021,1218.4 874.607,1218.05 875.193,1217.66 875.78,1217.45 876.366,1215.95 876.953,1219.65 877.539,1219.31 878.125,1218.5 878.712,1219.27 879.298,1217.87 879.885,1218.89 880.471,1218.42 881.058,1216.74 881.644,1217.91 882.23,1216.27 882.817,1214.75 883.403,1215.96 883.99,1214.43 884.576,1212.81 885.162,1211.21 885.749,1212.59 886.335,1215.1 886.922,1213.61 887.508,1213.33 888.094,1213.4 888.681,1212.1 889.267,1213.24 889.854,1214.38 890.44,1216.97 891.027,1217.99 891.613,1216.3 892.199,1218.99 892.786,1219.94 893.372,1220.66 893.959,1220.38 894.545,1213.37 895.131,1213.28 895.718,1214.55 896.304,1217.07 896.891,1215.55 897.477,1217.85 898.063,1217.35 898.65,1214.3 899.236,1211.34 899.823,1214.01 900.409,1212.7 900.996,1212.75 901.582,1215.19 902.168,1215.17 902.755,1217.69 903.341,1216.06 903.928,1215.6 904.514,1215.23 905.1,1216.53 905.687,1216.12 906.273,1217.16 906.86,1214.09 907.446,1216.63 908.032,1214.96 908.619,1216.27 909.205,1213.22 909.792,1216.01 910.378,1215.63 910.965,1215.75 911.551,1212.83 912.137,1211.24 912.724,1211.07 913.31,1211.32 913.897,1212.58 914.483,1211.32 915.069,1212.6 915.656,1213.85 916.242,1215.12 916.829,1211.06 917.415,1212.63 918.002,1213.95 918.588,1215.14 919.174,1213.69 919.761,1216.21 920.347,1214.24 920.934,1214.07 921.52,1212.43 922.106,1212.65 922.693,1213.9 923.279,1212.59 923.866,1211.2 924.452,1212.68 925.038,1215.37 925.625,1213.87 926.211,1210.02 926.798,1211.57 927.384,1210.41 927.971,1211.66 928.557,1211.62 929.143,1211.67 929.73,1212.65 930.316,1215.24 930.903,1212.14 931.489,1210.77 932.075,1209.41 932.662,1207.98 933.248,1208.26 933.835,1212.45 934.421,1213.72 935.007,1214.92 935.594,1213.17 936.18,1211.7 936.767,1211.48 937.353,1211.26 937.94,1212.81 938.526,1212.34 939.112,1213.71 939.699,1213.49 940.285,1213.42 940.872,1216.09 941.458,1213.35 942.044,1211.82 942.631,1209.24 943.217,1209.35 943.804,1209.54 944.39,1209.68 944.976,1209.85 945.563,1205.6 946.149,1205.65 946.736,1207.32 947.322,1207.52 947.909,1209.13 948.495,1210.51 949.081,1210.53 949.668,1213.11 950.254,1213.13 950.841,1213.34 951.427,1213.14 952.013,1213.19 952.6,1211.6 953.186,1212.99 953.773,1212.84 954.359,1212.89 954.945,1214.12 955.532,1215.14 956.118,1214.9 956.705,1213.6 957.291,1210.74 957.878,1209.5 958.464,1209.41 959.05,1209.67 959.637,1209.83 960.223,1210 960.81,1210.04 961.396,1209.82 961.982,1211.24 962.569,1211.31 963.155,1209.85 963.742,1209.79 964.328,1209.92 964.915,1211.07 965.501,1212.53 966.087,1211.13 966.674,1212.46 967.26,1212.2 967.847,1211 968.433,1210.9 969.019,1209.59 969.606,1208.19 970.192,1204.51 970.779,1206.19 971.365,1206.26 971.951,1209.24 972.538,1210.79 973.124,1214.57 973.711,1215.79 974.297,1219.41 974.884,1218.99 975.47,1215.75 976.056,1214.25 976.643,1214.48 977.229,1215.61 977.816,1212.55 978.402,1212.51 978.988,1209.68 979.575,1208.7 980.161,1208.81 980.748,1210.35 981.334,1211.66 981.92,1209.19 982.507,1212.07 983.093,1211.89 983.68,1208.98 984.266,1208.78 984.853,1209.22 985.439,1211.96 986.025,1210.87 986.612,1211.72 987.198,1211.93 987.785,1210.79 988.371,1211.89 988.957,1215.69 989.544,1215.68 990.13,1216.68 990.717,1216.36 991.303,1215.73 991.889,1216.69 992.476,1215.08 993.062,1213.57 993.649,1214.57 994.235,1215.55 994.822,1219.17 995.408,1217.28 995.994,1218.25 996.581,1216.69 997.167,1219.09 997.754,1215.94 998.34,1215.43 998.926,1217.84 999.513,1220.39 1000.1,1217.18 1000.69,1210.16 1001.27,1212.77 1001.86,1208.5 1002.44,1208.8 1003.03,1207.5 1003.62,1206.52 1004.2,1206.69 1004.79,1205.28 1005.38,1206.88 1005.96,1202.95 1006.55,1201.82 1007.14,1204.8 1007.72,1203.57 1008.31,1205.21 1008.9,1205.59 1009.48,1206.04 1010.07,1205.97 1010.65,1207.49 1011.24,1206.35 1011.83,1205.21 1012.41,1204.22 1013,1205.87 1013.59,1206.06 1014.17,1202.18 1014.76,1201.41 1015.35,1200.66 1015.93,1197.2 1016.52,1199.64 1017.11,1200.33 1017.69,1199.42 1018.28,1202.65 1018.86,1203.24 1019.45,1203.63 1020.04,1203.83 1020.62,1206.91 1021.21,1208.43 1021.8,1207.45 1022.38,1209.08 1022.97,1208.02 1023.56,1206.83 1024.14,1209.94 1024.73,1210 1025.32,1211.43 1025.9,1210.08 1026.49,1214.24 1027.07,1214.21 1027.66,1215.42 1028.25,1213.97 1028.83,1215.09 1029.42,1213.68 1030.01,1212.24 1030.59,1212.52 1031.18,1208.24 1031.77,1211.01 1032.35,1211.09 1032.94,1211.37 1033.52,1211.4 1034.11,1211.51 1034.7,1214.05 1035.28,1215.27 1035.87,1213.77 1036.46,1212.63 1037.04,1212.87 1037.63,1211.25 1038.22,1211.29 1038.8,1212.51 1039.39,1212.42 1039.98,1212.38 1040.56,1212.56 1041.15,1211.25 1041.73,1212.43 1042.32,1212.33 1042.91,1213.63 1043.49,1213.62 1044.08,1213.64 1044.67,1216.19 1045.25,1216.04 1045.84,1214.27 1046.43,1212.9 1047.01,1214.23 1047.6,1216.45 1048.19,1214.88 1048.77,1214.78 1049.36,1216.07 1049.94,1214.54 1050.53,1215.58 1051.12,1213.83 1051.7,1212.41 1052.29,1211.1 1052.88,1209.7 1053.46,1209.76 1054.05,1208.55 1054.64,1207.25 1055.22,1202.99 1055.81,1204.58 1056.39,1205.9 1056.98,1205.02 1057.57,1204.09 1058.15,1205.69 1058.74,1203.16 1059.33,1204.84 1059.91,1204.12 1060.5,1204.62 1061.09,1206.32 1061.67,1210.39 1062.26,1208.85 1062.85,1210.3 1063.43,1210.63 1064.02,1210.67 1064.6,1209.13 1065.19,1207.99 1065.78,1202.97 1066.36,1204.75 1066.95,1205.24 1067.54,1208.19 1068.12,1208.08 1068.71,1206.78 1069.3,1208.23 1069.88,1209.73 1070.47,1211.07 1071.06,1212.44 1071.64,1212.28 1072.23,1210.65 1072.81,1210.7 1073.4,1212.12 1073.99,1213.58 1074.57,1213.52 1075.16,1214.98 1075.75,1214.93 1076.33,1216.22 1076.92,1211.04 1077.51,1211.02 1078.09,1210.87 1078.68,1209.46 1079.26,1210.93 1079.85,1211.29 1080.44,1211.22 1081.02,1207.11 1081.61,1206.02 1082.2,1207.5 1082.78,1208.8 1083.37,1207.77 1083.96,1207.83 1084.54,1209.62 1085.13,1211.02 1085.72,1211.08 1086.3,1208.35 1086.89,1204.19 1087.47,1203.7 1088.06,1204.32 1088.65,1208.64 1089.23,1209.99 1089.82,1208.89 1090.41,1206.08 1090.99,1204.59 1091.58,1206.04 1092.17,1204.9 1092.75,1203.8 1093.34,1205.37 1093.93,1207.93 1094.51,1208.19 1095.1,1208.36 1095.68,1208.32 1096.27,1205.7 1096.86,1204.73 1097.44,1206.24 1098.03,1207.89 1098.62,1205.67 1099.2,1208.57 1099.79,1206.02 1100.38,1205.05 1100.96,1206.75 1101.55,1206.95 1102.14,1207.25 1102.72,1210.1 1103.31,1210.21 1103.89,1210.21 1104.48,1207.45 1105.07,1209.17 1105.65,1209.11 1106.24,1207.74 1106.83,1207.96 1107.41,1209.33 1108,1208.01 1108.59,1212.35 1109.17,1211.07 1109.76,1211.1 1110.34,1211.13 1110.93,1208.6 1111.52,1208.71 1112.1,1210.14 1112.69,1213.19 1113.28,1214.46 1113.86,1215.33 1114.45,1216.18 1115.04,1214.71 1115.62,1213.19 1116.21,1217.08 1116.8,1218.03 1117.38,1218.7 1117.97,1217.11 1118.55,1219.06 1119.14,1218.89 1119.73,1218.26 1120.31,1217.63 1120.9,1217.2 1121.49,1214.09 1122.07,1211.27 1122.66,1209.96 1123.25,1208.74 1123.83,1206.48 1124.42,1205.21 1125.01,1206.71 1125.59,1209.56 1126.18,1208.19 1126.76,1206.91 1127.35,1210.86 1127.94,1212.07 1128.52,1213.17 1129.11,1213.14 1129.7,1211.35 1130.28,1211.04 1130.87,1212.3 1131.46,1210.57 1132.04,1211.56 1132.63,1210.28 1133.21,1208.99 1133.8,1211.88 1134.39,1214.63 1134.97,1215.67 1135.56,1216.91 1136.15,1215.75 1136.73,1216.71 1137.32,1215.86 1137.91,1214.14 1138.49,1211.4 1139.08,1211.72 1139.67,1213.09 1140.25,1211.78 1140.84,1211.89 1141.42,1214.52 1142.01,1210.26 1142.6,1210.08 1143.18,1210.3 1143.77,1211.52 1144.36,1211.59 1144.94,1208.82 1145.53,1208.52 1146.12,1209.79 1146.7,1212.22 1147.29,1213.48 1147.88,1211.95 1148.46,1211.58 1149.05,1210.34 1149.63,1210.47 1150.22,1210.26 1150.81,1209.76 1151.39,1206.65 1151.98,1208.03 1152.57,1207 1153.15,1207.3 1153.74,1204.8 1154.33,1206.43 1154.91,1205.38 1155.5,1202.65 1156.09,1204.49 1156.67,1206.5 1157.26,1206.91 1157.84,1207.06 1158.43,1204.74 1159.02,1206.18 1159.6,1207.78 1160.19,1207.73 1160.78,1211.99 1161.36,1210.35 1161.95,1211.44 1162.54,1212.7 1163.12,1214.16 1163.71,1214.29 1164.29,1212.85 1164.88,1212.92 1165.47,1215.5 1166.05,1214 1166.64,1216.61 1167.23,1217.61 1167.81,1216 1168.4,1214.12 1168.99,1215.19 1169.57,1213.78 1170.16,1213.86 1170.75,1213.73 1171.33,1216.16 1171.92,1216.95 1172.5,1217.9 1173.09,1220.2 1173.68,1218.7 1174.26,1219.55 1174.85,1220.07 1175.44,1218.14 1176.02,1217.59 1176.61,1217.15 1177.2,1218.27 1177.78,1220.35 1178.37,1218.09 1178.96,1214.92 1179.54,1214.88 1180.13,1214.6 1180.71,1215.73 1181.3,1214.25 1181.89,1211.05 1182.47,1209.64 1183.06,1206.96 1183.65,1205.65 1184.23,1201.45 1184.82,1203.2 1185.41,1204.75 1185.99,1206.34 1186.58,1206.48 1187.16,1206.73 1187.75,1206.69 1188.34,1206.66 1188.92,1206.74 1189.51,1204.47 1190.1,1206.23 1190.68,1205.3 1191.27,1204.35 1191.86,1203.19 1192.44,1203.7 1193.03,1202.93 1193.62,1203.3 1194.2,1201.04 1194.79,1198.67 1195.37,1202.34 1195.96,1203.08 1196.55,1202.68 1197.13,1207.14 1197.72,1207.43 1198.31,1207.7 1198.89,1206.41 1199.48,1205.35 1200.07,1205.58 1200.65,1204.91 1201.24,1206.48 1201.83,1209.21 1202.41,1209.25 1203,1206.67 1203.58,1208.21 1204.17,1206.73 1204.76,1206.72 1205.34,1205.23 1205.93,1201.52 1206.52,1201.83 1207.1,1203.52 1207.69,1201.16 1208.28,1202.76 1208.86,1203.13 1209.45,1204.88 1210.03,1206.5 1210.62,1208.23 1211.21,1209.41 1211.79,1209.21 1212.38,1207.96 1212.97,1207.84 1213.55,1208.21 1214.14,1208.33 1214.73,1209.7 1215.31,1209.51 1215.9,1210.76 1216.49,1209.22 1217.07,1211.75 1217.66,1207.4 1218.24,1205.22 1218.83,1207.04 1219.42,1208.5 1220,1211.45 1220.59,1214.06 1221.18,1215.28 1221.76,1214.68 1222.35,1215.72 1222.94,1218.17 1223.52,1217.6 1224.11,1217.24 1224.7,1216.87 1225.28,1215.06 1225.87,1213.3 1226.45,1211.99 1227.04,1210.7 1227.63,1210.45 1228.21,1212.94 1228.8,1212.62 1229.39,1212.4 1229.97,1210.92 1230.56,1211.91 1231.15,1211.6 1231.73,1207.39 1232.32,1208.83 1232.91,1209 1233.49,1209.33 1234.08,1208.23 1234.66,1208.48 1235.25,1209.85 1235.84,1211.37 1236.42,1212.64 1237.01,1212.69 1237.6,1211.34 1238.18,1212.59 1238.77,1208.48 1239.36,1209.89 1239.94,1209.96 1240.53,1210.19 1241.11,1212.9 1241.7,1212.46 1242.29,1211.12 1242.87,1212.49 1243.46,1212.26 1244.05,1212.13 1244.63,1210.85 1245.22,1208.48 1245.81,1208.85 1246.39,1208.77 1246.98,1206.34 1247.57,1207.88 1248.15,1207.91 1248.74,1208.02 1249.32,1208.21 1249.91,1205.79 1250.5,1207.59 1251.08,1207.64 1251.67,1209.15 1252.26,1210.58 1252.84,1208.07 1253.43,1209.69 1254.02,1207.4 1254.6,1207.38 1255.19,1209.19 1255.78,1212.29 1256.36,1211.99 1256.95,1210.7 1257.53,1209.31 1258.12,1209.6 1258.71,1211.02 1259.29,1212.54 1259.88,1208.51 1260.47,1212.72 1261.05,1212.63 1261.64,1212.27 1262.23,1212.13 1262.81,1212.53 1263.4,1212.43 1263.98,1209.44 1264.57,1205.52 1265.16,1208.41 1265.74,1207.15 1266.33,1203.19 1266.92,1203.68 1267.5,1206.83 1268.09,1203.04 1268.68,1203.16 1269.26,1201.86 1269.85,1200.76 1270.44,1200.39 1271.02,1198.06 1271.61,1198.59 1272.19,1200.55 1272.78,1201.2 1273.37,1201.83 1273.95,1202.3 1274.54,1204.28 1275.13,1204.7 1275.71,1206.6 1276.3,1205.6 1276.89,1209.67 1277.47,1209.88 1278.06,1209.92 1278.65,1211.39 1279.23,1211.49 1279.82,1212.83 1280.4,1211.57 1280.99,1211.37 1281.58,1210.15 1282.16,1210.38 1282.75,1213.07 1283.34,1210.11 1283.92,1208.63 1284.51,1207.27 1285.1,1208.37 1285.68,1208.58 1286.27,1208.58 1286.86,1208.67 1287.44,1210.22 1288.03,1210.19 1288.61,1210.47 1289.2,1209.27 1289.79,1212.23 1290.37,1213.77 1290.96,1213.6 1291.55,1214.7 1292.13,1215.75 1292.72,1215.6 1293.31,1213.98 1293.89,1213.73 1294.48,1214.94 1295.06,1213.4 1295.65,1213.16 1296.24,1212.97 1296.82,1213.03 1297.41,1212.79 1298,1211.28 1298.58,1211.12 1299.17,1208.13 1299.76,1209.7 1300.34,1209.66 1300.93,1209.88 1301.52,1212.66 1302.1,1212.43 1302.69,1213.48 1303.27,1214.48 1303.86,1215.54 1304.45,1216.58 1305.03,1216.6 1305.62,1218.8 1306.21,1218.45 1306.79,1217.95 1307.38,1214.75 1307.97,1217.43 1308.55,1217.08 1309.14,1217.85 1309.73,1217.51 1310.31,1214.52 1310.9,1213.15 1311.48,1216.09 1312.07,1217.12 1312.66,1214.33 1313.24,1214.2 1313.83,1215.19 1314.42,1214.69 1315,1210.38 1315.59,1210.38 1316.18,1210.59 1316.76,1211.81 1317.35,1211.75 1317.93,1210.19 1318.52,1210.11 1319.11,1208.6 1319.69,1211.22 1320.28,1206.82 1320.87,1208.35 1321.45,1209.53 1322.04,1208.02 1322.63,1208.43 1323.21,1207.21 1323.8,1207.57 1324.39,1206.54 1324.97,1206.99 1325.56,1207 1326.14,1207.31 1326.73,1205.92 1327.32,1204.6 1327.9,1206.15 1328.49,1207.6 1329.08,1209.15 1329.66,1211.82 1330.25,1213.07 1330.84,1210.26 1331.42,1211.55 1332.01,1213.06 1332.6,1212.76 1333.18,1210.09 1333.77,1209.79 1334.35,1209.66 1334.94,1213.44 1335.53,1213.18 1336.11,1211.69 1336.7,1211.36 1337.29,1211.52 1337.87,1212.68 1338.46,1213.91 1339.05,1214.79 1339.63,1219.82 1340.22,1217.92 1340.8,1217.6 1341.39,1214.96 1341.98,1214.55 1342.56,1212.91 1343.15,1212.67 1343.74,1215.22 1344.32,1214.75 1344.91,1213.08 1345.5,1211.33 1346.08,1211.24 1346.67,1207.38 1347.26,1211.52 1347.84,1211.64 1348.43,1212.75 1349.01,1212.77 1349.6,1212.91 1350.19,1215.53 1350.77,1213.64 1351.36,1211.83 1351.95,1211.73 1352.53,1211.55 1353.12,1213.95 1353.71,1216.15 1354.29,1214.71 1354.88,1215.69 1355.47,1212.64 1356.05,1212.39 1356.64,1214.86 1357.22,1213.21 1357.81,1211.6 1358.4,1212.84 1358.98,1216.65 1359.57,1216.17 1360.16,1217.16 1360.74,1215.55 1361.33,1216.45 1361.92,1217.85 1362.5,1221.41 1363.09,1220.95 1363.68,1224.38 1364.26,1220.67 1364.85,1219.9 1365.43,1219.44 1366.02,1216.36 1366.61,1215.02 1367.19,1214.79 1367.78,1215.99 1368.37,1214.23 1368.95,1214.05 1369.54,1213.64 1370.13,1209.61 1370.71,1209.57 1371.3,1213.33 1371.88,1215.55 1372.47,1215.48 1373.06,1217.79 1373.64,1216.24 1374.23,1213.73 1374.82,1210.78 1375.4,1212.09 1375.99,1214.68 1376.58,1213.24 1377.16,1210.52 1377.75,1209.17 1378.34,1211.63 1378.92,1212.88 1379.51,1212.83 1380.09,1215.45 1380.68,1214.03 1381.27,1212.37 1381.85,1211.19 1382.44,1208.4 1383.03,1208.69 1383.61,1210.11 1384.2,1212.92 1384.79,1214.05 1385.37,1212.75 1385.96,1211.47 1386.55,1212.69 1387.13,1215.01 1387.72,1213.67 1388.3,1213.3 1388.89,1215.73 1389.48,1214 1390.06,1215.12 1390.65,1215.78 1391.24,1210.37 1391.82,1209.22 1392.41,1206.47 1393,1205.09 1393.58,1201.28 1394.17,1201.58 1394.75,1202.01 1395.34,1202.25 1395.93,1203.78 1396.51,1202.82 1397.1,1201.54 1397.69,1203.62 1398.27,1205.27 1398.86,1205.48 1399.45,1206.78 1400.03,1209.53 1400.62,1209.62 1401.21,1212.27 1401.79,1213.48 1402.38,1210.49 1402.96,1212 1403.55,1210.59 1404.14,1209.58 1404.72,1209.76 1405.31,1211.14 1405.9,1211 1406.48,1210.65 1407.07,1210.64 1407.66,1211.88 1408.24,1211.8 1408.83,1208.86 1409.42,1211.58 1410,1211.63 1410.59,1214.21 1411.17,1215.32 1411.76,1217.95 1412.35,1216.11 1412.93,1214.86 1413.52,1212.27 1414.11,1210.73 1414.69,1210.7 1415.28,1209.31 1415.87,1209.83 1416.45,1209.91 1417.04,1210.23 1417.63,1209.14 1418.21,1206.39 1418.8,1204.23 1419.38,1205.74 1419.97,1204.46 1420.56,1208.61 1421.14,1208.7 1421.73,1209 1422.32,1209.14 1422.9,1212.11 1423.49,1213.39 1424.08,1211.67 1424.66,1210 1425.25,1208.47 1425.83,1207.28 1426.42,1210.09 1427.01,1212.74 1427.59,1212.45 1428.18,1210.9 1428.77,1207.1 1429.35,1207.48 1429.94,1207.69 1430.53,1203.87 1431.11,1204.18 1431.7,1204.88 1432.29,1206.7 1432.87,1209.71 1433.46,1209.71 1434.04,1209.96 1434.63,1209.77 1435.22,1211.26 1435.8,1211.21 1436.39,1210.01 1436.98,1209.9 1437.56,1210.04 1438.15,1208.6 1438.74,1207.39 1439.32,1203.85 1439.91,1205.46 1440.5,1203.02 1441.08,1204.54 1441.67,1204.86 1442.25,1203.56 1442.84,1203.81 1443.43,1204.37 1444.01,1203.3 1444.6,1202.3 1445.19,1202.7 1445.77,1203.19 1446.36,1201.35 1446.95,1203.32 1447.53,1202.55 1448.12,1204.25 1448.7,1205.63 1449.29,1208.33 1449.88,1210.02 1450.46,1207.17 1451.05,1208.48 1451.64,1204.97 1452.22,1209.35 1452.81,1210.79 1453.4,1208.15 1453.98,1207.89 1454.57,1208.14 1455.16,1207.99 1455.74,1206.97 1456.33,1207.06 1456.91,1207.38 1457.5,1208.09 1458.09,1206.98 1458.67,1207.09 1459.26,1205.91 1459.85,1203.54 1460.43,1205.34 1461.02,1205.74 1461.61,1206.02 1462.19,1206.22 1462.78,1210.52 1463.37,1210.43 1463.95,1210.24 1464.54,1208.8 1465.12,1210.06 1465.71,1208.77 1466.3,1207.66 1466.88,1210.37 1467.47,1210.28 1468.06,1211.8 1468.64,1213.22 1469.23,1211.73 1469.82,1211.61 1470.4,1211.49 1470.99,1210.38 1471.57,1211.87 1472.16,1210.55 1472.75,1209.42 1473.33,1212.26 1473.92,1213.66 1474.51,1210.93 1475.09,1208.26 1475.68,1208.38 1476.27,1207.09 1476.85,1209.62 1477.44,1210.89 1478.03,1209.31 1478.61,1210.48 1479.2,1210.58 1479.78,1210.54 1480.37,1210.63 1480.96,1209.18 1481.54,1211.87 1482.13,1211.8 1482.72,1211.86 1483.3,1211.54 1483.89,1208.84 1484.48,1207.71 1485.06,1207.87 1485.65,1211.02 1486.24,1212.34 1486.82,1210.81 1487.41,1210.7 1487.99,1210.8 1488.58,1210.81 1489.17,1209.5 1489.75,1210.7 1490.34,1212.01 1490.93,1213.45 1491.51,1214.5 1492.1,1211.55 1492.69,1216.87 1493.27,1217.96 1493.86,1216.38 1494.45,1218.71 1495.03,1218.63 1495.62,1221.09 1496.2,1219.24 1496.79,1219.95 1497.38,1219.49 1497.96,1218.98 1498.55,1215.85 1499.14,1214.35 1499.72,1213.94 1500.31,1215.31 1500.9,1215.08 1501.48,1213.56 1502.07,1215.02 1502.65,1217.44 1503.24,1216 1503.83,1215.58 1504.41,1216.38 1505,1216.22 1505.59,1214.72 1506.17,1213.18 1506.76,1208.95 1507.35,1206.46 1507.93,1208.06 1508.52,1207.99 1509.11,1209.62 1509.69,1209.62 1510.28,1211.24 1510.86,1208.58 1511.45,1207.25 1512.04,1205.94 1512.62,1203.64 1513.21,1199.63 1513.8,1200.21 1514.38,1201.85 1514.97,1202.29 1515.56,1201.5 1516.14,1200.67 1516.73,1198.26 1517.32,1196.13 1517.9,1195.41 1518.49,1194.47 1519.07,1195.65 1519.66,1197.96 1520.25,1199.9 1520.83,1200.34 1521.42,1201.08 1522.01,1199.93 1522.59,1203.22 1523.18,1204.42 1523.77,1200.38 1524.35,1201.05 1524.94,1204.41 1525.52,1206.2 1526.11,1207.71 1526.7,1209.22 1527.28,1207.91 1527.87,1209.61 1528.46,1210.97 1529.04,1208.34 1529.63,1208.39 1530.22,1208.42 1530.8,1207.2 1531.39,1208.79 1531.98,1207.57 1532.56,1204.99 1533.15,1205.59 1533.73,1205.76 1534.32,1204.16 1534.91,1203.16 1535.49,1206.46 1536.08,1206.73 1536.67,1205.97 1537.25,1206.3 1537.84,1207.69 1538.43,1207.89 1539.01,1206.64 1539.6,1207.07 1540.19,1207.12 1540.77,1206.07 1541.36,1204.69 1541.94,1206.06 1542.53,1206.34 1543.12,1206.75 1543.7,1207.9 1544.29,1205.4 1544.88,1206.01 1545.46,1206.59 1546.05,1207.94 1546.64,1209.18 1547.22,1209.01 1547.81,1209.25 1548.4,1212.01 1548.98,1211.82 1549.57,1213.11 1550.15,1212.69 1550.74,1212.7 1551.33,1209.78 1551.91,1208.47 1552.5,1211.15 1553.09,1211.18 1553.67,1210.97 1554.26,1209.59 1554.85,1208.41 1555.43,1210.06 1556.02,1208.78 1556.6,1206.3 1557.19,1205.29 1557.78,1205.64 1558.36,1207.42 1558.95,1208.96 1559.54,1209.01 1560.12,1209.08 1560.71,1212.06 1561.3,1209.09 1561.88,1209.08 1562.47,1211.7 1563.06,1214.22 1563.64,1212.55 1564.23,1213.65 1564.81,1214.77 1565.4,1214.49 1565.99,1214.15 1566.57,1209.66 1567.16,1208.11 1567.75,1208.31 1568.33,1208.6 1568.92,1211.73 1569.51,1212.83 1570.09,1213.97 1570.68,1213.64 1571.27,1217.29 1571.85,1216.79 1572.44,1216.56 1573.02,1214.86 1573.61,1218.48 1574.2,1216.93 1574.78,1218.1 1575.37,1220.22 1575.96,1217.16 1576.54,1214.03 1577.13,1213.56 1577.72,1213.26 1578.3,1215.62 1578.89,1215.4 1579.47,1215.21 1580.06,1214.97 1580.65,1214.55 1581.23,1216.88 1581.82,1219.11 1582.41,1220.09 1582.99,1218.39 1583.58,1217.92 1584.17,1217.54 1584.75,1215.71 1585.34,1218.21 1585.93,1215.06 1586.51,1215.97 1587.1,1218.55 1587.68,1218.18 1588.27,1216.53 1588.86,1214.62 1589.44,1214.18 1590.03,1215.54 1590.62,1216.9 1591.2,1213.87 1591.79,1214.83 1592.38,1213.51 1592.96,1213.05 1593.55,1212.99 1594.14,1216.75 1594.72,1216.48 1595.31,1210.63 1595.89,1209.17 1596.48,1210.36 1597.07,1211.57 1597.65,1212.97 1598.24,1211.52 1598.83,1211.51 1599.41,1211.66 1600,1213.12 1600.59,1215.6 1601.17,1216.69 1601.76,1216.28 1602.34,1214.71 1602.93,1213.16 1603.52,1211.48 1604.1,1211.64 1604.69,1211.28 1605.28,1209.66 1605.86,1209.82 1606.45,1206.97 1607.04,1208.56 1607.62,1206 1608.21,1205.02 1608.8,1205.18 1609.38,1206.55 1609.97,1209.44 1610.55,1212.01 1611.14,1209.12 1611.73,1210.93 1612.31,1211.06 1612.9,1209.62 1613.49,1209.68 1614.07,1208.09 1614.66,1210.85 1615.25,1210.84 1615.83,1209.4 1616.42,1210.72 1617.01,1209.41 1617.59,1210.92 1618.18,1210.7 1618.76,1209.34 1619.35,1209.23 1619.94,1211.92 1620.52,1210.39 1621.11,1208.89 1621.7,1210.18 1622.28,1210.16 1622.87,1210.16 1623.46,1211.57 1624.04,1209.02 1624.63,1209.18 1625.22,1209.52 1625.8,1210.99 1626.39,1210.9 1626.97,1212.51 1627.56,1213.8 1628.15,1212.15 1628.73,1211.98 1629.32,1207.85 1629.91,1207.94 1630.49,1209.4 1631.08,1210.57 1631.67,1212.03 1632.25,1213.38 1632.84,1211.8 1633.42,1211.7 1634.01,1212.71 1634.6,1213.82 1635.18,1215.1 1635.77,1211.09 1636.36,1209.52 1636.94,1208.34 1637.53,1208.34 1638.12,1207.06 1638.7,1208.43 1639.29,1208.31 1639.88,1208.45 1640.46,1204.46 1641.05,1203.41 1641.63,1205.2 1642.22,1203.86 1642.81,1204.33 1643.39,1204.53 1643.98,1206.32 1644.57,1206.6 1645.15,1205.68 1645.74,1204.39 1646.33,1206.07 1646.91,1206.67 1647.5,1209.75 1648.09,1208.59 1648.67,1208.76 1649.26,1207.45 1649.84,1205.12 1650.43,1205.56 1651.02,1203.06 1651.6,1202.26 1652.19,1201.26 1652.78,1204.5 1653.36,1205.01 1653.95,1206.5 1654.54,1206.83 1655.12,1205.82 1655.71,1207.54 1656.29,1209.22 1656.88,1208.45 1657.47,1207.22 1658.05,1208.47 1658.64,1211.33 1659.23,1212.76 1659.81,1213.81 1660.4,1213.79 1660.99,1213.53 1661.57,1211.85 1662.16,1213.16 1662.75,1214.44 1663.33,1212.85 1663.92,1218.07 1664.5,1217.65 1665.09,1218.58 1665.68,1218.11 1666.26,1216.48 1666.85,1215.98 1667.44,1216.84 1668.02,1216.51 1668.61,1214.54 1669.2,1214.42 1669.78,1215.7 1670.37,1216.6 1670.96,1217.46 1671.54,1218.27 1672.13,1216.6 1672.71,1215.97 1673.3,1216.72 1673.89,1220.21 1674.47,1217.01 1675.06,1216.55 1675.65,1213.91 1676.23,1213.6 1676.82,1213.53 1677.41,1212.02 1677.99,1210.7 1678.58,1210.66 1679.17,1210.91 1679.75,1209.39 1680.34,1210.91 1680.92,1210.75 1681.51,1210.66 1682.1,1211.96 1682.68,1211.88 1683.27,1207.8 1683.86,1206.63 1684.44,1205.48 1685.03,1204.62 1685.62,1205 1686.2,1206.75 1686.79,1206.84 1687.37,1206.94 1687.96,1205.69 1688.55,1202.06 1689.13,1201.16 1689.72,1198.79 1690.31,1203.32 1690.89,1206.39 1691.48,1205.32 1692.07,1201.75 1692.65,1203.72 1693.24,1205.63 1693.83,1204.58 1694.41,1203.52 1695,1203.87 1695.58,1205.57 1696.17,1207.45 1696.76,1206.29 1697.34,1205.34 1697.93,1202.77 1698.52,1203.32 1699.1,1202.05 1699.69,1202.49 1700.28,1205.25 1700.86,1204.45 1701.45,1204.82 1702.04,1206.63 1702.62,1208.46 1703.21,1208.47 1703.79,1205.95 1704.38,1203.32 1704.97,1203.38 1705.55,1206.51 1706.14,1208.3 1706.73,1205.91 1707.31,1207.56 1707.9,1206.46 1708.49,1210.97 1709.07,1209.69 1709.66,1208.54 1710.24,1210.04 1710.83,1207.54 1711.42,1209.2 1712,1210.58 1712.59,1213.2 1713.18,1214.31 1713.76,1212.88 1714.35,1211.5 1714.94,1209.98 1715.52,1209.77 1716.11,1211.17 1716.7,1211.17 1717.28,1212.31 1717.87,1213.46 1718.45,1211.7 1719.04,1213.14 1719.63,1212.91 1720.21,1211.55 1720.8,1212.95 1721.39,1215.47 1721.97,1217.99 1722.56,1217.59 1723.15,1218.25 1723.73,1219.18 1724.32,1214.63 1724.91,1215.78 1725.49,1216.55 1726.08,1217.65 1726.66,1217.43 1727.25,1218.38 1727.84,1216.73 1728.42,1216.14 1729.01,1217.05 1729.6,1216.86 1730.18,1215.22 1730.77,1214.95 1731.36,1215.9 1731.94,1211.67 1732.53,1211.44 1733.11,1212.61 1733.7,1212.56 1734.29,1215.04 1734.87,1213.27 1735.46,1214.6 1736.05,1212.68 1736.63,1213.49 1737.22,1213.42 1737.81,1213.37 1738.39,1214.38 1738.98,1213.99 1739.57,1213.57 1740.15,1212.13 1740.74,1212.1 1741.32,1210.79 1741.91,1212.1 1742.5,1212.16 1743.08,1211.77 1743.67,1211.91 1744.26,1211.46 1744.84,1211.27 1745.43,1210.09 1746.02,1207.48 1746.6,1207.61 1747.19,1209.17 1747.78,1209.1 1748.36,1208.89 1748.95,1207.74 1749.53,1209.19 1750.12,1208.09 1750.71,1206.84 1751.29,1208.85 1751.88,1207.62 1752.47,1206.51 1753.05,1208 1753.64,1212.24 1754.23,1212.24 1754.81,1210.51 1755.4,1207.8 1755.99,1206.41 1756.57,1208.17 1757.16,1208.42 1757.74,1209.61 1758.33,1209.68 1758.92,1209.73 1759.5,1208.42 1760.09,1211.06 1760.68,1208.2 1761.26,1213.78 1761.85,1214.68 1762.44,1214.61 1763.02,1217.15 1763.61,1215.38 1764.19,1212.15 1764.78,1214.74 1765.37,1215.93 1765.95,1212.87 1766.54,1212.88 1767.13,1209.68 1767.71,1208.29 1768.3,1209.51 1768.89,1209.69 1769.47,1210.98 1770.06,1210.83 1770.65,1210.83 1771.23,1210.49 1771.82,1207.48 1772.4,1207.29 1772.99,1207.44 1773.58,1207.59 1774.16,1206.23 1774.75,1203.68 1775.34,1205.37 1775.92,1205.65 1776.51,1207.33 1777.1,1204.61 1777.68,1204.98 1778.27,1206.62 1778.86,1206.61 1779.44,1205.61 1780.03,1205.72 1780.61,1204.84 1781.2,1205.45 1781.79,1205.61 1782.37,1206.03 1782.96,1208.8 1783.55,1207.36 1784.13,1207.66 1784.72,1210.5 1785.31,1213.04 1785.89,1211.5 1786.48,1211.72 1787.06,1210.74 1787.65,1208.23 1788.24,1208.27 1788.82,1209.75 1789.41,1207.18 1790,1206.3 1790.58,1206.62 1791.17,1206.88 1791.76,1209.82 1792.34,1209.57 1792.93,1210.77 1793.52,1210.63 1794.1,1214.85 1794.69,1214.52 1795.27,1215.55 1795.86,1215.15 1796.45,1218.69 1797.03,1215.55 1797.62,1215.09 1798.21,1217.49 1798.79,1216.91 1799.38,1217.71 1799.97,1217.4 1800.55,1221.13 1801.14,1216.54 1801.73,1218.89 1802.31,1218.36 1802.9,1217.85 1803.48,1215.9 1804.07,1216.82 1804.66,1217.64 1805.24,1219.71 1805.83,1217.74 1806.42,1219.71 1807,1219.37 1807.59,1220.2 1808.18,1219.88 1808.76,1219.32 1809.35,1217.38 1809.94,1216.88 1810.52,1218.22 1811.11,1216.62 1811.69,1216.46 1812.28,1216.06 1812.87,1214.65 1813.45,1215.89 1814.04,1214.38 1814.63,1216.73 1815.21,1216.03 1815.8,1216.84 1816.39,1216.74 1816.97,1217.73 1817.56,1214.52 1818.14,1212.76 1818.73,1213.93 1819.32,1213.75 1819.9,1212.23 1820.49,1209.31 1821.08,1210.58 1821.66,1211.84 1822.25,1211.65 1822.84,1210.3 1823.42,1210.17 1824.01,1211.39 1824.6,1210.14 1825.18,1210.18 1825.77,1210.37 1826.35,1208.77 1826.94,1208.9 1827.53,1210.28 1828.11,1210.13 1828.7,1211.46 1829.29,1209.78 1829.87,1209.86 1830.46,1210.18 1831.05,1208.58 1831.63,1204.81 1832.22,1205.22 1832.81,1205.62 1833.39,1204.82 1833.98,1203.55 1834.56,1202.37 1835.15,1204.39 1835.74,1204.6 1836.32,1204.73 1836.91,1206.41 1837.5,1205.45 1838.08,1205.56 1838.67,1205.85 1839.26,1208.74 1839.84,1210.07 1840.43,1208.43 1841.01,1207.12 1841.6,1204.71 1842.19,1203.76 1842.77,1201.2 1843.36,1200.16 1843.95,1200.78 1844.53,1201.17 1845.12,1200.18 1845.71,1200.68 1846.29,1203.92 1846.88,1204.31 1847.47,1204.6 1848.05,1206.26 1848.64,1206.26 1849.22,1207.68 1849.81,1206.31 1850.4,1207.73 1850.98,1208.97 1851.57,1204.92 1852.16,1206.51 1852.74,1202.72 1853.33,1204.47 1853.92,1206.05 1854.5,1206.15 1855.09,1206.25 1855.68,1206.7 1856.26,1205.62 1856.85,1207.18 1857.43,1207.65 1858.02,1209.17 1858.61,1208.19 1859.19,1208.4 1859.78,1209.71 1860.37,1211.22 1860.95,1209.94 1861.54,1208.56 1862.13,1215.43 1862.71,1215.24 1863.3,1213.67 1863.88,1214.75 1864.47,1214.61 1865.06,1213.26 1865.64,1211.84 1866.23,1209.05 1866.82,1210.59 1867.4,1210.68 1867.99,1213.27 1868.58,1213.31 1869.16,1213.17 1869.75,1212.77 1870.34,1212.47 1870.92,1213.53 1871.51,1211.87 1872.09,1213.13 1872.68,1212.91 1873.27,1214.14 1873.85,1214.04 1874.44,1213.91 1875.03,1215.08 1875.61,1214.82 1876.2,1209.05 1876.79,1210.63 1877.37,1210.51 1877.96,1211.93 1878.55,1214.5 1879.13,1214.39 1879.72,1215.45 1880.3,1214.11 1880.89,1213.83 1881.48,1210.7 1882.06,1209.16 1882.65,1207.82 1883.24,1206.65 1883.82,1205.4 1884.41,1210.97 1885,1209.56 1885.58,1213.61 1886.17,1212.04 1886.76,1210.34 1887.34,1210.47 1887.93,1211.85 1888.51,1209.37 1889.1,1209.57 1889.69,1211.13 1890.27,1211.01 1890.86,1209.63 1891.45,1208.16 1892.03,1203.36 1892.62,1203.95 1893.21,1202.87 1893.79,1204.74 1894.38,1206.28 1894.96,1206.84 1895.55,1206.97 1896.14,1207.13 1896.72,1207.06 1897.31,1207.35 1897.9,1208.92 1898.48,1207.66 1899.07,1206.52 1899.66,1207.07 1900.24,1205.82 1900.83,1204.8 1901.42,1205.13 1902,1205.57 1902.59,1205.96 1903.17,1206.25 1903.76,1210.06 1904.35,1210.27 1904.93,1211.69 1905.52,1216.71 1906.11,1217.52 1906.69,1217.12 1907.28,1219.29 1907.87,1217.74 1908.45,1218.42 1909.04,1219.02 1909.63,1217.45 1910.21,1218.19 1910.8,1217.89 1911.38,1217.57 1911.97,1217.16 1912.56,1219.47 1913.14,1217.52 1913.73,1215.67 1914.32,1219.19 1914.9,1218.5 1915.49,1219.73 1916.08,1217.63 1916.66,1213.18 1917.25,1213.04 1917.83,1215.87 1918.42,1218.45 1919.01,1219.52 1919.59,1217.61 1920.18,1217.42 1920.77,1217.49 1921.35,1220.63 1921.94,1219.93 1922.53,1220.65 1923.11,1220.11 1923.7,1220.76 1924.29,1218.51 1924.87,1212.56 1925.46,1213.56 1926.04,1211.95 1926.63,1211.93 1927.22,1214.55 1927.8,1213.05 1928.39,1214.05 1928.98,1210.93 1929.56,1211.98 1930.15,1213.03 1930.74,1211.6 1931.32,1213.31 1931.91,1213.2 1932.5,1212.88 1933.08,1212.64 1933.67,1216.43 1934.25,1217.43 1934.84,1210.23 1935.43,1208.55 1936.01,1207.32 1936.6,1207.21 1937.19,1207.28 1937.77,1208.64 1938.36,1207.22 1938.95,1210.25 1939.53,1210.09 1940.12,1208.9 1940.71,1208.96 1941.29,1210.04 1941.88,1207.51 1942.46,1207.7 1943.05,1203.85 1943.64,1204.17 1944.22,1203.45 1944.81,1205.07 1945.4,1205.3 1945.98,1202.08 1946.57,1202.23 1947.16,1200.35 1947.74,1202.3 1948.33,1201.28 1948.91,1200.4 1949.5,1201.07 1950.09,1202.94 1950.67,1203.42 1951.26,1207.8 1951.85,1209.38 1952.43,1207.98 1953.02,1208.33 1953.61,1211.01 1954.19,1208.14 1954.78,1207 1955.37,1205.74 1955.95,1205.77 1956.54,1212.59 1957.12,1216.55 1957.71,1217.57 1958.3,1215.6 1958.88,1215.12 1959.47,1212.28 1960.06,1211.06 1960.64,1212.38 1961.23,1212.04 1961.82,1210.74 1962.4,1210.48 1962.99,1209.07 1963.58,1210.78 1964.16,1210.82 1964.75,1209.2 1965.33,1209.15 1965.92,1209.08 1966.51,1209.29 1967.09,1212.03 1967.68,1210.56 1968.27,1209.38 1968.85,1208.24 1969.44,1208.42 1970.03,1206.88 1970.61,1204.32 1971.2,1203.19 1971.78,1202.24 1972.37,1204.1 1972.96,1202.92 1973.54,1201.99 1974.13,1199.64 1974.72,1196.1 1975.3,1196.86 1975.89,1198.83 1976.48,1199.29 1977.06,1199.97 1977.65,1200.36 1978.24,1199.35 1978.82,1198.4 1979.41,1200.07 1979.99,1203.43 1980.58,1202.42 1981.17,1203.99 1981.75,1205.58 1982.34,1206.08 1982.93,1205.2 1983.51,1209.44 1984.1,1213.61 1984.69,1215.01 1985.27,1213.4 1985.86,1213.15 1986.45,1211.63 1987.03,1212.87 1987.62,1214.03 1988.2,1212.54 1988.79,1211.11 1989.38,1209.84 1989.96,1206.07 1990.55,1205.06 1991.14,1205.42 1991.72,1208.05 1992.31,1206.55 1992.9,1206.64 1993.48,1204.15 1994.07,1208.5 1994.65,1208.67 1995.24,1208.62 1995.83,1208.8 1996.41,1205 1997,1207.98 1997.59,1205.4 1998.17,1207.02 1998.76,1208.54 1999.35,1208.7 1999.93,1207.77 2000.52,1207.91 2001.11,1209.52 2001.69,1210.97 2002.28,1210.86 2002.86,1210.75 2003.45,1210.97 2004.04,1211.14 2004.62,1213.78 2005.21,1212.07 2005.8,1212.23 2006.38,1213.38 2006.97,1214.7 2007.56,1214.41 2008.14,1216.82 2008.73,1217.87 2009.32,1218.73 2009.9,1218.47 2010.49,1216.92 2011.07,1211.41 2011.66,1212.73 2012.25,1212.74 2012.83,1211.36 2013.42,1209.88 2014.01,1209.8 2014.59,1208.58 2015.18,1210.48 2015.77,1211.86 2016.35,1211.75 2016.94,1211.73 2017.53,1211.77 2018.11,1210.51 2018.7,1211.69 2019.28,1215.58 2019.87,1216.82 2020.46,1215.17 2021.04,1214.76 2021.63,1217.18 2022.22,1215.23 2022.8,1217.88 2023.39,1217.22 2023.98,1217.99 2024.56,1215.14 2025.15,1217.37 2025.73,1219.86 2026.32,1217.65 2026.91,1215.8 2027.49,1214.04 2028.08,1215.13 2028.67,1216 2029.25,1215.57 2029.84,1212.7 2030.43,1213.87 2031.01,1212.48 2031.6,1209.81 2032.19,1209.62 2032.77,1207.23 2033.36,1207.23 2033.94,1207.04 2034.53,1207.34 2035.12,1207.46 2035.7,1211.62 2036.29,1212.52 2036.88,1211.23 2037.46,1212.81 2038.05,1214.08 2038.64,1215.35 2039.22,1213.92 2039.81,1211.05 2040.4,1211.07 2040.98,1216.32 2041.57,1210.47 2042.15,1211.63 2042.74,1207.8 2043.33,1205.28 2043.91,1204.11 2044.5,1201.88 2045.09,1205 2045.67,1208.04 2046.26,1210.96 2046.85,1210.65 2047.43,1213.15 2048.02,1212.84 2048.6,1210.01 2049.19,1212.82 2049.78,1212.9 2050.36,1212.8 2050.95,1212.41 2051.54,1212.27 2052.12,1212.14 2052.71,1212.04 2053.3,1214.83 2053.88,1212.07 2054.47,1210.68 2055.06,1209.41 2055.64,1210.81 2056.23,1212.13 2056.81,1212.18 2057.4,1212.19 2057.99,1210.71 2058.57,1209.65 2059.16,1209.68 2059.75,1208.36 2060.33,1207.31 2060.92,1209.1 2061.51,1210.14 2062.09,1208.81 2062.68,1210.13 2063.27,1212.52 2063.85,1216.38 2064.44,1213.39 2065.02,1213.17 2065.61,1212.91 2066.2,1214.02 2066.78,1211.32 2067.37,1209.9 2067.96,1211.02 2068.54,1209.67 2069.13,1215.03 2069.72,1213.43 2070.3,1213.25 2070.89,1212.95 2071.48,1213.35 2072.06,1214.63 2072.65,1218.42 2073.23,1219.11 2073.82,1218.62 2074.41,1215.65 2074.99,1214.13 2075.58,1214.16 2076.17,1216.39 2076.75,1217.58 2077.34,1215.85 2077.93,1215.45 2078.51,1215.02 2079.1,1212.24 2079.68,1212.25 2080.27,1212.28 2080.86,1213.6 2081.44,1213.58 2082.03,1214.8 2082.62,1214.55 2083.2,1215.57 2083.79,1213.98 2084.38,1213.73 2084.96,1212.07 2085.55,1211.57 2086.14,1209.81 2086.72,1208.32 2087.31,1207.06 2087.89,1209.58 2088.48,1207 2089.07,1205.94 2089.65,1207.37 2090.24,1204.85 2090.83,1203.86 2091.41,1204.18 2092,1206.03 2092.59,1203.36 2093.17,1201.15 2093.76,1202.84 2094.35,1204.44 2094.93,1207.18 2095.52,1207.32 2096.1,1204.62 2096.69,1204.61 2097.28,1204.61 2097.86,1203.57 2098.45,1206.76 2099.04,1208.42 2099.62,1208.17 2100.21,1208.41 2100.8,1208.52 2101.38,1208.86 2101.97,1203.75 2102.55,1205.55 2103.14,1206.17 2103.73,1203.73 2104.31,1205.48 2104.9,1204.38 2105.49,1204.62 2106.07,1200.95 2106.66,1201.64 2107.25,1202.13 2107.83,1199.87 2108.42,1200.45 2109.01,1203.66 2109.59,1204.2 2110.18,1204.71 2110.76,1205.21 2111.35,1205.65 2111.94,1203.62 2112.52,1205.42 2113.11,1209.76 2113.7,1210.04 2114.28,1208.74 2114.87,1209 2115.46,1207.81 2116.04,1206.68 2116.63,1206.9 2117.22,1204.68 2117.8,1205.25 2118.39,1204.06 2118.97,1203.15 2119.56,1206.21 2120.15,1204.97 2120.73,1202.64 2121.32,1204.4 2121.91,1206.23 2122.49,1207.85 2123.08,1209.35 2123.67,1211.75 2124.25,1210.22 2124.84,1211.49 2125.42,1210.16 2126.01,1208.92 2126.6,1208.82 2127.18,1211.67 2127.77,1213.09 2128.36,1210.37 2128.94,1210.6 2129.53,1211.84 2130.12,1210.6 2130.7,1210.52 2131.29,1209.02 2131.88,1209.09 2132.46,1213.25 2133.05,1216.01 2133.63,1218.43 2134.22,1216.8 2134.81,1217.81 2135.39,1215.94 2135.98,1216.42 2136.57,1213.31 2137.15,1210.71 2137.74,1212.04 2138.33,1212.12 2138.91,1210.78 2139.5,1212 2140.09,1210.48 2140.67,1210.32 2141.26,1210.42 2141.84,1210.49 2142.43,1208.95 2143.02,1209.01 2143.6,1209.27 2144.19,1208.14 2144.78,1206.76 2145.36,1209.53 2145.95,1209.79 2146.54,1211.28 2147.12,1211.04 2147.71,1209.6 2148.3,1209.73 2148.88,1208.59 2149.47,1208.83 2150.05,1205.02 2150.64,1205.27 2151.23,1208.34 2151.81,1210.12 2152.4,1212.95 2152.99,1212.77 2153.57,1216.39 2154.16,1213.49 2154.75,1211.87 2155.33,1211.81 2155.92,1211.73 2156.5,1210.53 2157.09,1210.44 2157.68,1211.62 2158.26,1211.4 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1210.73 L986.612 1210.73 L987.198 1210.73 L987.785 1210.73 L988.371 1210.73 L988.957 1210.73 L989.544 1210.73 L990.13 1210.73 L990.717 1210.73 L991.303 1210.73 L991.889 1210.73 L992.476 1210.73 L993.062 1210.73 L993.649 1210.73 L994.235 1210.73 L994.822 1210.73 L995.408 1210.73 L995.994 1210.73 L996.581 1210.73 L997.167 1210.73 L997.754 1210.73 L998.34 1210.73 L998.926 1210.73 L999.513 1210.73 L1000.1 1210.73 L1000.69 1210.73 L1001.27 1210.73 L1001.86 1210.73 L1002.44 1210.73 L1003.03 1210.73 L1003.62 1210.73 L1004.2 1210.73 L1004.79 1210.73 L1005.38 1210.73 L1005.96 1210.73 L1006.55 1210.73 L1007.14 1210.73 L1007.72 1210.73 L1008.31 1210.73 L1008.9 1210.73 L1009.48 1210.73 L1010.07 1210.73 L1010.65 1210.73 L1011.24 1210.73 L1011.83 1210.73 L1012.41 1210.73 L1013 1210.73 L1013.59 1210.73 L1014.17 1210.73 L1014.76 1210.73 L1015.35 1210.73 L1015.93 1210.73 L1016.52 1210.73 L1017.11 1210.73 L1017.69 1210.73 L1018.28 1210.73 L1018.86 1210.73 L1019.45 1210.73 L1020.04 1210.73 L1020.62 1210.73 L1021.21 1210.73 L1021.8 1210.73 L1022.38 1210.73 L1022.97 1210.73 L1023.56 1210.73 L1024.14 1210.73 L1024.73 1210.73 L1025.32 1210.73 L1025.9 1210.73 L1026.49 1210.73 L1027.07 1210.73 L1027.66 1210.73 L1028.25 1210.73 L1028.83 1210.73 L1029.42 1210.73 L1030.01 1210.73 L1030.59 1210.73 L1031.18 1210.73 L1031.77 1210.73 L1032.35 1210.73 L1032.94 1210.73 L1033.52 1210.73 L1034.11 1210.73 L1034.7 1210.73 L1035.28 1210.73 L1035.87 1210.73 L1036.46 1210.73 L1037.04 1210.73 L1037.63 1210.73 L1038.22 1210.73 L1038.8 1210.73 L1039.39 1210.73 L1039.98 1210.73 L1040.56 1210.73 L1041.15 1210.73 L1041.73 1210.73 L1042.32 1210.73 L1042.91 1210.73 L1043.49 1210.73 L1044.08 1210.73 L1044.67 1210.73 L1045.25 1210.73 L1045.84 1210.73 L1046.43 1210.73 L1047.01 1210.73 L1047.6 1210.73 L1048.19 1210.73 L1048.77 1210.73 L1049.36 1210.73 L1049.94 1210.73 L1050.53 1210.73 L1051.12 1210.73 L1051.7 1210.73 L1052.29 1210.73 L1052.88 1210.73 L1053.46 1210.73 L1054.05 1210.73 L1054.64 1210.73 L1055.22 1210.73 L1055.81 1210.73 L1056.39 1210.73 L1056.98 1210.73 L1057.57 1210.73 L1058.15 1210.73 L1058.74 1210.73 L1059.33 1210.73 L1059.91 1210.73 L1060.5 1210.73 L1061.09 1210.73 L1061.67 1210.73 L1062.26 1210.73 L1062.85 1210.73 L1063.43 1210.73 L1064.02 1210.73 L1064.6 1210.73 L1065.19 1210.73 L1065.78 1210.73 L1066.36 1210.73 L1066.95 1210.73 L1067.54 1210.73 L1068.12 1210.73 L1068.71 1210.73 L1069.3 1210.73 L1069.88 1210.73 L1070.47 1210.73 L1071.06 1210.73 L1071.64 1210.73 L1072.23 1210.73 L1072.81 1210.73 L1073.4 1210.73 L1073.99 1210.73 L1074.57 1210.73 L1075.16 1210.73 L1075.75 1210.73 L1076.33 1210.73 L1076.92 1210.73 L1077.51 1210.73 L1078.09 1210.73 L1078.68 1210.73 L1079.26 1210.73 L1079.85 1210.73 L1080.44 1210.73 L1081.02 1210.73 L1081.61 1210.73 L1082.2 1210.73 L1082.78 1210.73 L1083.37 1210.73 L1083.96 1210.73 L1084.54 1210.73 L1085.13 1210.73 L1085.72 1210.73 L1086.3 1210.73 L1086.89 1210.73 L1087.47 1210.73 L1088.06 1210.73 L1088.65 1210.73 L1089.23 1210.73 L1089.82 1210.73 L1090.41 1210.73 L1090.99 1210.73 L1091.58 1210.73 L1092.17 1210.73 L1092.75 1210.73 L1093.34 1210.73 L1093.93 1210.73 L1094.51 1210.73 L1095.1 1210.73 L1095.68 1210.73 L1096.27 1210.73 L1096.86 1210.73 L1097.44 1210.73 L1098.03 1210.73 L1098.62 1210.73 L1099.2 1210.73 L1099.79 1210.73 L1100.38 1210.73 L1100.96 1210.73 L1101.55 1210.73 L1102.14 1210.73 L1102.72 1210.73 L1103.31 1210.73 L1103.89 1210.73 L1104.48 1210.73 L1105.07 1210.73 L1105.65 1210.73 L1106.24 1210.73 L1106.83 1210.73 L1107.41 1210.73 L1108 1210.73 L1108.59 1210.73 L1109.17 1210.73 L1109.76 1210.73 L1110.34 1210.73 L1110.93 1210.73 L1111.52 1210.73 L1112.1 1210.73 L1112.69 1210.73 L1113.28 1210.73 L1113.86 1210.73 L1114.45 1210.73 L1115.04 1210.73 L1115.62 1210.73 L1116.21 1210.73 L1116.8 1210.73 L1117.38 1210.73 L1117.97 1210.73 L1118.55 1210.73 L1119.14 1210.73 L1119.73 1210.73 L1120.31 1210.73 L1120.9 1210.73 L1121.49 1210.73 L1122.07 1210.73 L1122.66 1210.73 L1123.25 1210.73 L1123.83 1210.73 L1124.42 1210.73 L1125.01 1210.73 L1125.59 1210.73 L1126.18 1210.73 L1126.76 1210.73 L1127.35 1210.73 L1127.94 1210.73 L1128.52 1210.73 L1129.11 1210.73 L1129.7 1210.73 L1130.28 1210.73 L1130.87 1210.73 L1131.46 1210.73 L1132.04 1210.73 L1132.63 1210.73 L1133.21 1210.73 L1133.8 1210.73 L1134.39 1210.73 L1134.97 1210.73 L1135.56 1210.73 L1136.15 1210.73 L1136.73 1210.73 L1137.32 1210.73 L1137.91 1210.73 L1138.49 1210.73 L1139.08 1210.73 L1139.67 1210.73 L1140.25 1210.73 L1140.84 1210.73 L1141.42 1210.73 L1142.01 1210.73 L1142.6 1210.73 L1143.18 1210.73 L1143.77 1210.73 L1144.36 1210.73 L1144.94 1210.73 L1145.53 1210.73 L1146.12 1210.73 L1146.7 1210.73 L1147.29 1210.73 L1147.88 1210.73 L1148.46 1210.73 L1149.05 1210.73 L1149.63 1210.73 L1150.22 1210.73 L1150.81 1210.73 L1151.39 1210.73 L1151.98 1210.73 L1152.57 1210.73 L1153.15 1210.73 L1153.74 1210.73 L1154.33 1210.73 L1154.91 1210.73 L1155.5 1210.73 L1156.09 1210.73 L1156.67 1210.73 L1157.26 1210.73 L1157.84 1210.73 L1158.43 1210.73 L1159.02 1210.73 L1159.6 1210.73 L1160.19 1210.73 L1160.78 1210.73 L1161.36 1210.73 L1161.95 1210.73 L1162.54 1210.73 L1163.12 1210.73 L1163.71 1210.73 L1164.29 1210.73 L1164.88 1210.73 L1165.47 1210.73 L1166.05 1210.73 L1166.64 1210.73 L1167.23 1210.73 L1167.81 1210.73 L1168.4 1210.73 L1168.99 1210.73 L1169.57 1210.73 L1170.16 1210.73 L1170.75 1210.73 L1171.33 1210.73 L1171.92 1210.73 L1172.5 1210.73 L1173.09 1210.73 L1173.68 1210.73 L1174.26 1210.73 L1174.85 1210.73 L1175.44 1210.73 L1176.02 1210.73 L1176.61 1210.73 L1177.2 1210.73 L1177.78 1210.73 L1178.37 1210.73 L1178.96 1210.73 L1179.54 1210.73 L1180.13 1210.73 L1180.71 1210.73 L1181.3 1210.73 L1181.89 1210.73 L1182.47 1210.73 L1183.06 1210.73 L1183.65 1210.73 L1184.23 1210.73 L1184.82 1210.73 L1185.41 1210.73 L1185.99 1210.73 L1186.58 1210.73 L1187.16 1210.73 L1187.75 1210.73 L1188.34 1210.73 L1188.92 1210.73 L1189.51 1210.73 L1190.1 1210.73 L1190.68 1210.73 L1191.27 1210.73 L1191.86 1210.73 L1192.44 1210.73 L1193.03 1210.73 L1193.62 1210.73 L1194.2 1210.73 L1194.79 1210.73 L1195.37 1210.73 L1195.96 1210.73 L1196.55 1210.73 L1197.13 1210.73 L1197.72 1210.73 L1198.31 1210.73 L1198.89 1210.73 L1199.48 1210.73 L1200.07 1210.73 L1200.65 1210.73 L1201.24 1210.73 L1201.83 1210.73 L1202.41 1210.73 L1203 1210.73 L1203.58 1210.73 L1204.17 1210.73 L1204.76 1210.73 L1205.34 1210.73 L1205.93 1210.73 L1206.52 1210.73 L1207.1 1210.73 L1207.69 1210.73 L1208.28 1210.73 L1208.86 1210.73 L1209.45 1210.73 L1210.03 1210.73 L1210.62 1210.73 L1211.21 1210.73 L1211.79 1210.73 L1212.38 1210.73 L1212.97 1210.73 L1213.55 1210.73 L1214.14 1210.73 L1214.73 1210.73 L1215.31 1210.73 L1215.9 1210.73 L1216.49 1210.73 L1217.07 1210.73 L1217.66 1210.73 L1218.24 1210.73 L1218.83 1210.73 L1219.42 1210.73 L1220 1210.73 L1220.59 1210.73 L1221.18 1210.73 L1221.76 1210.73 L1222.35 1210.73 L1222.94 1210.73 L1223.52 1210.73 L1224.11 1210.73 L1224.7 1210.73 L1225.28 1210.73 L1225.87 1210.73 L1226.45 1210.73 L1227.04 1210.73 L1227.63 1210.73 L1228.21 1210.73 L1228.8 1210.73 L1229.39 1210.73 L1229.97 1210.73 L1230.56 1210.73 L1231.15 1210.73 L1231.73 1210.73 L1232.32 1210.73 L1232.91 1210.73 L1233.49 1210.73 L1234.08 1210.73 L1234.66 1210.73 L1235.25 1210.73 L1235.84 1210.73 L1236.42 1210.73 L1237.01 1210.73 L1237.6 1210.73 L1238.18 1210.73 L1238.77 1210.73 L1239.36 1210.73 L1239.94 1210.73 L1240.53 1210.73 L1241.11 1210.73 L1241.7 1210.73 L1242.29 1210.73 L1242.87 1210.73 L1243.46 1210.73 L1244.05 1210.73 L1244.63 1210.73 L1245.22 1210.73 L1245.81 1210.73 L1246.39 1210.73 L1246.98 1210.73 L1247.57 1210.73 L1248.15 1210.73 L1248.74 1210.73 L1249.32 1210.73 L1249.91 1210.73 L1250.5 1210.73 L1251.08 1210.73 L1251.67 1210.73 L1252.26 1210.73 L1252.84 1210.73 L1253.43 1210.73 L1254.02 1210.73 L1254.6 1210.73 L1255.19 1210.73 L1255.78 1210.73 L1256.36 1210.73 L1256.95 1210.73 L1257.53 1210.73 L1258.12 1210.73 L1258.71 1210.73 L1259.29 1210.73 L1259.88 1210.73 L1260.47 1210.73 L1261.05 1210.73 L1261.64 1210.73 L1262.23 1210.73 L1262.81 1210.73 L1263.4 1210.73 L1263.98 1210.73 L1264.57 1210.73 L1265.16 1210.73 L1265.74 1210.73 L1266.33 1210.73 L1266.92 1210.73 L1267.5 1210.73 L1268.09 1210.73 L1268.68 1210.73 L1269.26 1210.73 L1269.85 1210.73 L1270.44 1210.73 L1271.02 1210.73 L1271.61 1210.73 L1272.19 1210.73 L1272.78 1210.73 L1273.37 1210.73 L1273.95 1210.73 L1274.54 1210.73 L1275.13 1210.73 L1275.71 1210.73 L1276.3 1210.73 L1276.89 1210.73 L1277.47 1210.73 L1278.06 1210.73 L1278.65 1210.73 L1279.23 1210.73 L1279.82 1210.73 L1280.4 1210.73 L1280.99 1210.73 L1281.58 1210.73 L1282.16 1210.73 L1282.75 1210.73 L1283.34 1210.73 L1283.92 1210.73 L1284.51 1210.73 L1285.1 1210.73 L1285.68 1210.73 L1286.27 1210.73 L1286.86 1210.73 L1287.44 1210.73 L1288.03 1210.73 L1288.61 1210.73 L1289.2 1210.73 L1289.79 1210.73 L1290.37 1210.73 L1290.96 1210.73 L1291.55 1210.73 L1292.13 1210.73 L1292.72 1210.73 L1293.31 1210.73 L1293.89 1210.73 L1294.48 1210.73 L1295.06 1210.73 L1295.65 1210.73 L1296.24 1210.73 L1296.82 1210.73 L1297.41 1210.73 L1298 1210.73 L1298.58 1210.73 L1299.17 1210.73 L1299.76 1210.73 L1300.34 1210.73 L1300.93 1210.73 L1301.52 1210.73 L1302.1 1210.73 L1302.69 1210.73 L1303.27 1210.73 L1303.86 1210.73 L1304.45 1210.73 L1305.03 1210.73 L1305.62 1210.73 L1306.21 1210.73 L1306.79 1210.73 L1307.38 1210.73 L1307.97 1210.73 L1308.55 1210.73 L1309.14 1210.73 L1309.73 1210.73 L1310.31 1210.73 L1310.9 1210.73 L1311.48 1210.73 L1312.07 1210.73 L1312.66 1210.73 L1313.24 1210.73 L1313.83 1210.73 L1314.42 1210.73 L1315 1210.73 L1315.59 1210.73 L1316.18 1210.73 L1316.76 1210.73 L1317.35 1210.73 L1317.93 1210.73 L1318.52 1210.73 L1319.11 1210.73 L1319.69 1210.73 L1320.28 1210.73 L1320.87 1210.73 L1321.45 1210.73 L1322.04 1210.73 L1322.63 1210.73 L1323.21 1210.73 L1323.8 1210.73 L1324.39 1210.73 L1324.97 1210.73 L1325.56 1210.73 L1326.14 1210.73 L1326.73 1210.73 L1327.32 1210.73 L1327.9 1210.73 L1328.49 1210.73 L1329.08 1210.73 L1329.66 1210.73 L1330.25 1210.73 L1330.84 1210.73 L1331.42 1210.73 L1332.01 1210.73 L1332.6 1210.73 L1333.18 1210.73 L1333.77 1210.73 L1334.35 1210.73 L1334.94 1210.73 L1335.53 1210.73 L1336.11 1210.73 L1336.7 1210.73 L1337.29 1210.73 L1337.87 1210.73 L1338.46 1210.73 L1339.05 1210.73 L1339.63 1210.73 L1340.22 1210.73 L1340.8 1210.73 L1341.39 1210.73 L1341.98 1210.73 L1342.56 1210.73 L1343.15 1210.73 L1343.74 1210.73 L1344.32 1210.73 L1344.91 1210.73 L1345.5 1210.73 L1346.08 1210.73 L1346.67 1210.73 L1347.26 1210.73 L1347.84 1210.73 L1348.43 1210.73 L1349.01 1210.73 L1349.6 1210.73 L1350.19 1210.73 L1350.77 1210.73 L1351.36 1210.73 L1351.95 1210.73 L1352.53 1210.73 L1353.12 1210.73 L1353.71 1210.73 L1354.29 1210.73 L1354.88 1210.73 L1355.47 1210.73 L1356.05 1210.73 L1356.64 1210.73 L1357.22 1210.73 L1357.81 1210.73 L1358.4 1210.73 L1358.98 1210.73 L1359.57 1210.73 L1360.16 1210.73 L1360.74 1210.73 L1361.33 1210.73 L1361.92 1210.73 L1362.5 1210.73 L1363.09 1210.73 L1363.68 1210.73 L1364.26 1210.73 L1364.85 1210.73 L1365.43 1210.73 L1366.02 1210.73 L1366.61 1210.73 L1367.19 1210.73 L1367.78 1210.73 L1368.37 1210.73 L1368.95 1210.73 L1369.54 1210.73 L1370.13 1210.73 L1370.71 1210.73 L1371.3 1210.73 L1371.88 1210.73 L1372.47 1210.73 L1373.06 1210.73 L1373.64 1210.73 L1374.23 1210.73 L1374.82 1210.73 L1375.4 1210.73 L1375.99 1210.73 L1376.58 1210.73 L1377.16 1210.73 L1377.75 1210.73 L1378.34 1210.73 L1378.92 1210.73 L1379.51 1210.73 L1380.09 1210.73 L1380.68 1210.73 L1381.27 1210.73 L1381.85 1210.73 L1382.44 1210.73 L1383.03 1210.73 L1383.61 1210.73 L1384.2 1210.73 L1384.79 1210.73 L1385.37 1210.73 L1385.96 1210.73 L1386.55 1210.73 L1387.13 1210.73 L1387.72 1210.73 L1388.3 1210.73 L1388.89 1210.73 L1389.48 1210.73 L1390.06 1210.73 L1390.65 1210.73 L1391.24 1210.73 L1391.82 1210.73 L1392.41 1210.73 L1393 1210.73 L1393.58 1210.73 L1394.17 1210.73 L1394.75 1210.73 L1395.34 1210.73 L1395.93 1210.73 L1396.51 1210.73 L1397.1 1210.73 L1397.69 1210.73 L1398.27 1210.73 L1398.86 1210.73 L1399.45 1210.73 L1400.03 1210.73 L1400.62 1210.73 L1401.21 1210.73 L1401.79 1210.73 L1402.38 1210.73 L1402.96 1210.73 L1403.55 1210.73 L1404.14 1210.73 L1404.72 1210.73 L1405.31 1210.73 L1405.9 1210.73 L1406.48 1210.73 L1407.07 1210.73 L1407.66 1210.73 L1408.24 1210.73 L1408.83 1210.73 L1409.42 1210.73 L1410 1210.73 L1410.59 1210.73 L1411.17 1210.73 L1411.76 1210.73 L1412.35 1210.73 L1412.93 1210.73 L1413.52 1210.73 L1414.11 1210.73 L1414.69 1210.73 L1415.28 1210.73 L1415.87 1210.73 L1416.45 1210.73 L1417.04 1210.73 L1417.63 1210.73 L1418.21 1210.73 L1418.8 1210.73 L1419.38 1210.73 L1419.97 1210.73 L1420.56 1210.73 L1421.14 1210.73 L1421.73 1210.73 L1422.32 1210.73 L1422.9 1210.73 L1423.49 1210.73 L1424.08 1210.73 L1424.66 1210.73 L1425.25 1210.73 L1425.83 1210.73 L1426.42 1210.73 L1427.01 1210.73 L1427.59 1210.73 L1428.18 1210.73 L1428.77 1210.73 L1429.35 1210.73 L1429.94 1210.73 L1430.53 1210.73 L1431.11 1210.73 L1431.7 1210.73 L1432.29 1210.73 L1432.87 1210.73 L1433.46 1210.73 L1434.04 1210.73 L1434.63 1210.73 L1435.22 1210.73 L1435.8 1210.73 L1436.39 1210.73 L1436.98 1210.73 L1437.56 1210.73 L1438.15 1210.73 L1438.74 1210.73 L1439.32 1210.73 L1439.91 1210.73 L1440.5 1210.73 L1441.08 1210.73 L1441.67 1210.73 L1442.25 1210.73 L1442.84 1210.73 L1443.43 1210.73 L1444.01 1210.73 L1444.6 1210.73 L1445.19 1210.73 L1445.77 1210.73 L1446.36 1210.73 L1446.95 1210.73 L1447.53 1210.73 L1448.12 1210.73 L1448.7 1210.73 L1449.29 1210.73 L1449.88 1210.73 L1450.46 1210.73 L1451.05 1210.73 L1451.64 1210.73 L1452.22 1210.73 L1452.81 1210.73 L1453.4 1210.73 L1453.98 1210.73 L1454.57 1210.73 L1455.16 1210.73 L1455.74 1210.73 L1456.33 1210.73 L1456.91 1210.73 L1457.5 1210.73 L1458.09 1210.73 L1458.67 1210.73 L1459.26 1210.73 L1459.85 1210.73 L1460.43 1210.73 L1461.02 1210.73 L1461.61 1210.73 L1462.19 1210.73 L1462.78 1210.73 L1463.37 1210.73 L1463.95 1210.73 L1464.54 1210.73 L1465.12 1210.73 L1465.71 1210.73 L1466.3 1210.73 L1466.88 1210.73 L1467.47 1210.73 L1468.06 1210.73 L1468.64 1210.73 L1469.23 1210.73 L1469.82 1210.73 L1470.4 1210.73 L1470.99 1210.73 L1471.57 1210.73 L1472.16 1210.73 L1472.75 1210.73 L1473.33 1210.73 L1473.92 1210.73 L1474.51 1210.73 L1475.09 1210.73 L1475.68 1210.73 L1476.27 1210.73 L1476.85 1210.73 L1477.44 1210.73 L1478.03 1210.73 L1478.61 1210.73 L1479.2 1210.73 L1479.78 1210.73 L1480.37 1210.73 L1480.96 1210.73 L1481.54 1210.73 L1482.13 1210.73 L1482.72 1210.73 L1483.3 1210.73 L1483.89 1210.73 L1484.48 1210.73 L1485.06 1210.73 L1485.65 1210.73 L1486.24 1210.73 L1486.82 1210.73 L1487.41 1210.73 L1487.99 1210.73 L1488.58 1210.73 L1489.17 1210.73 L1489.75 1210.73 L1490.34 1210.73 L1490.93 1210.73 L1491.51 1210.73 L1492.1 1210.73 L1492.69 1210.73 L1493.27 1210.73 L1493.86 1210.73 L1494.45 1210.73 L1495.03 1210.73 L1495.62 1210.73 L1496.2 1210.73 L1496.79 1210.73 L1497.38 1210.73 L1497.96 1210.73 L1498.55 1210.73 L1499.14 1210.73 L1499.72 1210.73 L1500.31 1210.73 L1500.9 1210.73 L1501.48 1210.73 L1502.07 1210.73 L1502.65 1210.73 L1503.24 1210.73 L1503.83 1210.73 L1504.41 1210.73 L1505 1210.73 L1505.59 1210.73 L1506.17 1210.73 L1506.76 1210.73 L1507.35 1210.73 L1507.93 1210.73 L1508.52 1210.73 L1509.11 1210.73 L1509.69 1210.73 L1510.28 1210.73 L1510.86 1210.73 L1511.45 1210.73 L1512.04 1210.73 L1512.62 1210.73 L1513.21 1210.73 L1513.8 1210.73 L1514.38 1210.73 L1514.97 1210.73 L1515.56 1210.73 L1516.14 1210.73 L1516.73 1210.73 L1517.32 1210.73 L1517.9 1210.73 L1518.49 1210.73 L1519.07 1210.73 L1519.66 1210.73 L1520.25 1210.73 L1520.83 1210.73 L1521.42 1210.73 L1522.01 1210.73 L1522.59 1210.73 L1523.18 1210.73 L1523.77 1210.73 L1524.35 1210.73 L1524.94 1210.73 L1525.52 1210.73 L1526.11 1210.73 L1526.7 1210.73 L1527.28 1210.73 L1527.87 1210.73 L1528.46 1210.73 L1529.04 1210.73 L1529.63 1210.73 L1530.22 1210.73 L1530.8 1210.73 L1531.39 1210.73 L1531.98 1210.73 L1532.56 1210.73 L1533.15 1210.73 L1533.73 1210.73 L1534.32 1210.73 L1534.91 1210.73 L1535.49 1210.73 L1536.08 1210.73 L1536.67 1210.73 L1537.25 1210.73 L1537.84 1210.73 L1538.43 1210.73 L1539.01 1210.73 L1539.6 1210.73 L1540.19 1210.73 L1540.77 1210.73 L1541.36 1210.73 L1541.94 1210.73 L1542.53 1210.73 L1543.12 1210.73 L1543.7 1210.73 L1544.29 1210.73 L1544.88 1210.73 L1545.46 1210.73 L1546.05 1210.73 L1546.64 1210.73 L1547.22 1210.73 L1547.81 1210.73 L1548.4 1210.73 L1548.98 1210.73 L1549.57 1210.73 L1550.15 1210.73 L1550.74 1210.73 L1551.33 1210.73 L1551.91 1210.73 L1552.5 1210.73 L1553.09 1210.73 L1553.67 1210.73 L1554.26 1210.73 L1554.85 1210.73 L1555.43 1210.73 L1556.02 1210.73 L1556.6 1210.73 L1557.19 1210.73 L1557.78 1210.73 L1558.36 1210.73 L1558.95 1210.73 L1559.54 1210.73 L1560.12 1210.73 L1560.71 1210.73 L1561.3 1210.73 L1561.88 1210.73 L1562.47 1210.73 L1563.06 1210.73 L1563.64 1210.73 L1564.23 1210.73 L1564.81 1210.73 L1565.4 1210.73 L1565.99 1210.73 L1566.57 1210.73 L1567.16 1210.73 L1567.75 1210.73 L1568.33 1210.73 L1568.92 1210.73 L1569.51 1210.73 L1570.09 1210.73 L1570.68 1210.73 L1571.27 1210.73 L1571.85 1210.73 L1572.44 1210.73 L1573.02 1210.73 L1573.61 1210.73 L1574.2 1210.73 L1574.78 1210.73 L1575.37 1210.73 L1575.96 1210.73 L1576.54 1210.73 L1577.13 1210.73 L1577.72 1210.73 L1578.3 1210.73 L1578.89 1210.73 L1579.47 1210.73 L1580.06 1210.73 L1580.65 1210.73 L1581.23 1210.73 L1581.82 1210.73 L1582.41 1210.73 L1582.99 1210.73 L1583.58 1210.73 L1584.17 1210.73 L1584.75 1210.73 L1585.34 1210.73 L1585.93 1210.73 L1586.51 1210.73 L1587.1 1210.73 L1587.68 1210.73 L1588.27 1210.73 L1588.86 1210.73 L1589.44 1210.73 L1590.03 1210.73 L1590.62 1210.73 L1591.2 1210.73 L1591.79 1210.73 L1592.38 1210.73 L1592.96 1210.73 L1593.55 1210.73 L1594.14 1210.73 L1594.72 1210.73 L1595.31 1210.73 L1595.89 1210.73 L1596.48 1210.73 L1597.07 1210.73 L1597.65 1210.73 L1598.24 1210.73 L1598.83 1210.73 L1599.41 1210.73 L1600 1210.73 L1600.59 1210.73 L1601.17 1210.73 L1601.76 1210.73 L1602.34 1210.73 L1602.93 1210.73 L1603.52 1210.73 L1604.1 1210.73 L1604.69 1210.73 L1605.28 1210.73 L1605.86 1210.73 L1606.45 1210.73 L1607.04 1210.73 L1607.62 1210.73 L1608.21 1210.73 L1608.8 1210.73 L1609.38 1210.73 L1609.97 1210.73 L1610.55 1210.73 L1611.14 1210.73 L1611.73 1210.73 L1612.31 1210.73 L1612.9 1210.73 L1613.49 1210.73 L1614.07 1210.73 L1614.66 1210.73 L1615.25 1210.73 L1615.83 1210.73 L1616.42 1210.73 L1617.01 1210.73 L1617.59 1210.73 L1618.18 1210.73 L1618.76 1210.73 L1619.35 1210.73 L1619.94 1210.73 L1620.52 1210.73 L1621.11 1210.73 L1621.7 1210.73 L1622.28 1210.73 L1622.87 1210.73 L1623.46 1210.73 L1624.04 1210.73 L1624.63 1210.73 L1625.22 1210.73 L1625.8 1210.73 L1626.39 1210.73 L1626.97 1210.73 L1627.56 1210.73 L1628.15 1210.73 L1628.73 1210.73 L1629.32 1210.73 L1629.91 1210.73 L1630.49 1210.73 L1631.08 1210.73 L1631.67 1210.73 L1632.25 1210.73 L1632.84 1210.73 L1633.42 1210.73 L1634.01 1210.73 L1634.6 1210.73 L1635.18 1210.73 L1635.77 1210.73 L1636.36 1210.73 L1636.94 1210.73 L1637.53 1210.73 L1638.12 1210.73 L1638.7 1210.73 L1639.29 1210.73 L1639.88 1210.73 L1640.46 1210.73 L1641.05 1210.73 L1641.63 1210.73 L1642.22 1210.73 L1642.81 1210.73 L1643.39 1210.73 L1643.98 1210.73 L1644.57 1210.73 L1645.15 1210.73 L1645.74 1210.73 L1646.33 1210.73 L1646.91 1210.73 L1647.5 1210.73 L1648.09 1210.73 L1648.67 1210.73 L1649.26 1210.73 L1649.84 1210.73 L1650.43 1210.73 L1651.02 1210.73 L1651.6 1210.73 L1652.19 1210.73 L1652.78 1210.73 L1653.36 1210.73 L1653.95 1210.73 L1654.54 1210.73 L1655.12 1210.73 L1655.71 1210.73 L1656.29 1210.73 L1656.88 1210.73 L1657.47 1210.73 L1658.05 1210.73 L1658.64 1210.73 L1659.23 1210.73 L1659.81 1210.73 L1660.4 1210.73 L1660.99 1210.73 L1661.57 1210.73 L1662.16 1210.73 L1662.75 1210.73 L1663.33 1210.73 L1663.92 1210.73 L1664.5 1210.73 L1665.09 1210.73 L1665.68 1210.73 L1666.26 1210.73 L1666.85 1210.73 L1667.44 1210.73 L1668.02 1210.73 L1668.61 1210.73 L1669.2 1210.73 L1669.78 1210.73 L1670.37 1210.73 L1670.96 1210.73 L1671.54 1210.73 L1672.13 1210.73 L1672.71 1210.73 L1673.3 1210.73 L1673.89 1210.73 L1674.47 1210.73 L1675.06 1210.73 L1675.65 1210.73 L1676.23 1210.73 L1676.82 1210.73 L1677.41 1210.73 L1677.99 1210.73 L1678.58 1210.73 L1679.17 1210.73 L1679.75 1210.73 L1680.34 1210.73 L1680.92 1210.73 L1681.51 1210.73 L1682.1 1210.73 L1682.68 1210.73 L1683.27 1210.73 L1683.86 1210.73 L1684.44 1210.73 L1685.03 1210.73 L1685.62 1210.73 L1686.2 1210.73 L1686.79 1210.73 L1687.37 1210.73 L1687.96 1210.73 L1688.55 1210.73 L1689.13 1210.73 L1689.72 1210.73 L1690.31 1210.73 L1690.89 1210.73 L1691.48 1210.73 L1692.07 1210.73 L1692.65 1210.73 L1693.24 1210.73 L1693.83 1210.73 L1694.41 1210.73 L1695 1210.73 L1695.58 1210.73 L1696.17 1210.73 L1696.76 1210.73 L1697.34 1210.73 L1697.93 1210.73 L1698.52 1210.73 L1699.1 1210.73 L1699.69 1210.73 L1700.28 1210.73 L1700.86 1210.73 L1701.45 1210.73 L1702.04 1210.73 L1702.62 1210.73 L1703.21 1210.73 L1703.79 1210.73 L1704.38 1210.73 L1704.97 1210.73 L1705.55 1210.73 L1706.14 1210.73 L1706.73 1210.73 L1707.31 1210.73 L1707.9 1210.73 L1708.49 1210.73 L1709.07 1210.73 L1709.66 1210.73 L1710.24 1210.73 L1710.83 1210.73 L1711.42 1210.73 L1712 1210.73 L1712.59 1210.73 L1713.18 1210.73 L1713.76 1210.73 L1714.35 1210.73 L1714.94 1210.73 L1715.52 1210.73 L1716.11 1210.73 L1716.7 1210.73 L1717.28 1210.73 L1717.87 1210.73 L1718.45 1210.73 L1719.04 1210.73 L1719.63 1210.73 L1720.21 1210.73 L1720.8 1210.73 L1721.39 1210.73 L1721.97 1210.73 L1722.56 1210.73 L1723.15 1210.73 L1723.73 1210.73 L1724.32 1210.73 L1724.91 1210.73 L1725.49 1210.73 L1726.08 1210.73 L1726.66 1210.73 L1727.25 1210.73 L1727.84 1210.73 L1728.42 1210.73 L1729.01 1210.73 L1729.6 1210.73 L1730.18 1210.73 L1730.77 1210.73 L1731.36 1210.73 L1731.94 1210.73 L1732.53 1210.73 L1733.11 1210.73 L1733.7 1210.73 L1734.29 1210.73 L1734.87 1210.73 L1735.46 1210.73 L1736.05 1210.73 L1736.63 1210.73 L1737.22 1210.73 L1737.81 1210.73 L1738.39 1210.73 L1738.98 1210.73 L1739.57 1210.73 L1740.15 1210.73 L1740.74 1210.73 L1741.32 1210.73 L1741.91 1210.73 L1742.5 1210.73 L1743.08 1210.73 L1743.67 1210.73 L1744.26 1210.73 L1744.84 1210.73 L1745.43 1210.73 L1746.02 1210.73 L1746.6 1210.73 L1747.19 1210.73 L1747.78 1210.73 L1748.36 1210.73 L1748.95 1210.73 L1749.53 1210.73 L1750.12 1210.73 L1750.71 1210.73 L1751.29 1210.73 L1751.88 1210.73 L1752.47 1210.73 L1753.05 1210.73 L1753.64 1210.73 L1754.23 1210.73 L1754.81 1210.73 L1755.4 1210.73 L1755.99 1210.73 L1756.57 1210.73 L1757.16 1210.73 L1757.74 1210.73 L1758.33 1210.73 L1758.92 1210.73 L1759.5 1210.73 L1760.09 1210.73 L1760.68 1210.73 L1761.26 1210.73 L1761.85 1210.73 L1762.44 1210.73 L1763.02 1210.73 L1763.61 1210.73 L1764.19 1210.73 L1764.78 1210.73 L1765.37 1210.73 L1765.95 1210.73 L1766.54 1210.73 L1767.13 1210.73 L1767.71 1210.73 L1768.3 1210.73 L1768.89 1210.73 L1769.47 1210.73 L1770.06 1210.73 L1770.65 1210.73 L1771.23 1210.73 L1771.82 1210.73 L1772.4 1210.73 L1772.99 1210.73 L1773.58 1210.73 L1774.16 1210.73 L1774.75 1210.73 L1775.34 1210.73 L1775.92 1210.73 L1776.51 1210.73 L1777.1 1210.73 L1777.68 1210.73 L1778.27 1210.73 L1778.86 1210.73 L1779.44 1210.73 L1780.03 1210.73 L1780.61 1210.73 L1781.2 1210.73 L1781.79 1210.73 L1782.37 1210.73 L1782.96 1210.73 L1783.55 1210.73 L1784.13 1210.73 L1784.72 1210.73 L1785.31 1210.73 L1785.89 1210.73 L1786.48 1210.73 L1787.06 1210.73 L1787.65 1210.73 L1788.24 1210.73 L1788.82 1210.73 L1789.41 1210.73 L1790 1210.73 L1790.58 1210.73 L1791.17 1210.73 L1791.76 1210.73 L1792.34 1210.73 L1792.93 1210.73 L1793.52 1210.73 L1794.1 1210.73 L1794.69 1210.73 L1795.27 1210.73 L1795.86 1210.73 L1796.45 1210.73 L1797.03 1210.73 L1797.62 1210.73 L1798.21 1210.73 L1798.79 1210.73 L1799.38 1210.73 L1799.97 1210.73 L1800.55 1210.73 L1801.14 1210.73 L1801.73 1210.73 L1802.31 1210.73 L1802.9 1210.73 L1803.48 1210.73 L1804.07 1210.73 L1804.66 1210.73 L1805.24 1210.73 L1805.83 1210.73 L1806.42 1210.73 L1807 1210.73 L1807.59 1210.73 L1808.18 1210.73 L1808.76 1210.73 L1809.35 1210.73 L1809.94 1210.73 L1810.52 1210.73 L1811.11 1210.73 L1811.69 1210.73 L1812.28 1210.73 L1812.87 1210.73 L1813.45 1210.73 L1814.04 1210.73 L1814.63 1210.73 L1815.21 1210.73 L1815.8 1210.73 L1816.39 1210.73 L1816.97 1210.73 L1817.56 1210.73 L1818.14 1210.73 L1818.73 1210.73 L1819.32 1210.73 L1819.9 1210.73 L1820.49 1210.73 L1821.08 1210.73 L1821.66 1210.73 L1822.25 1210.73 L1822.84 1210.73 L1823.42 1210.73 L1824.01 1210.73 L1824.6 1210.73 L1825.18 1210.73 L1825.77 1210.73 L1826.35 1210.73 L1826.94 1210.73 L1827.53 1210.73 L1828.11 1210.73 L1828.7 1210.73 L1829.29 1210.73 L1829.87 1210.73 L1830.46 1210.73 L1831.05 1210.73 L1831.63 1210.73 L1832.22 1210.73 L1832.81 1210.73 L1833.39 1210.73 L1833.98 1210.73 L1834.56 1210.73 L1835.15 1210.73 L1835.74 1210.73 L1836.32 1210.73 L1836.91 1210.73 L1837.5 1210.73 L1838.08 1210.73 L1838.67 1210.73 L1839.26 1210.73 L1839.84 1210.73 L1840.43 1210.73 L1841.01 1210.73 L1841.6 1210.73 L1842.19 1210.73 L1842.77 1210.73 L1843.36 1210.73 L1843.95 1210.73 L1844.53 1210.73 L1845.12 1210.73 L1845.71 1210.73 L1846.29 1210.73 L1846.88 1210.73 L1847.47 1210.73 L1848.05 1210.73 L1848.64 1210.73 L1849.22 1210.73 L1849.81 1210.73 L1850.4 1210.73 L1850.98 1210.73 L1851.57 1210.73 L1852.16 1210.73 L1852.74 1210.73 L1853.33 1210.73 L1853.92 1210.73 L1854.5 1210.73 L1855.09 1210.73 L1855.68 1210.73 L1856.26 1210.73 L1856.85 1210.73 L1857.43 1210.73 L1858.02 1210.73 L1858.61 1210.73 L1859.19 1210.73 L1859.78 1210.73 L1860.37 1210.73 L1860.95 1210.73 L1861.54 1210.73 L1862.13 1210.73 L1862.71 1210.73 L1863.3 1210.73 L1863.88 1210.73 L1864.47 1210.73 L1865.06 1210.73 L1865.64 1210.73 L1866.23 1210.73 L1866.82 1210.73 L1867.4 1210.73 L1867.99 1210.73 L1868.58 1210.73 L1869.16 1210.73 L1869.75 1210.73 L1870.34 1210.73 L1870.92 1210.73 L1871.51 1210.73 L1872.09 1210.73 L1872.68 1210.73 L1873.27 1210.73 L1873.85 1210.73 L1874.44 1210.73 L1875.03 1210.73 L1875.61 1210.73 L1876.2 1210.73 L1876.79 1210.73 L1877.37 1210.73 L1877.96 1210.73 L1878.55 1210.73 L1879.13 1210.73 L1879.72 1210.73 L1880.3 1210.73 L1880.89 1210.73 L1881.48 1210.73 L1882.06 1210.73 L1882.65 1210.73 L1883.24 1210.73 L1883.82 1210.73 L1884.41 1210.73 L1885 1210.73 L1885.58 1210.73 L1886.17 1210.73 L1886.76 1210.73 L1887.34 1210.73 L1887.93 1210.73 L1888.51 1210.73 L1889.1 1210.73 L1889.69 1210.73 L1890.27 1210.73 L1890.86 1210.73 L1891.45 1210.73 L1892.03 1210.73 L1892.62 1210.73 L1893.21 1210.73 L1893.79 1210.73 L1894.38 1210.73 L1894.96 1210.73 L1895.55 1210.73 L1896.14 1210.73 L1896.72 1210.73 L1897.31 1210.73 L1897.9 1210.73 L1898.48 1210.73 L1899.07 1210.73 L1899.66 1210.73 L1900.24 1210.73 L1900.83 1210.73 L1901.42 1210.73 L1902 1210.73 L1902.59 1210.73 L1903.17 1210.73 L1903.76 1210.73 L1904.35 1210.73 L1904.93 1210.73 L1905.52 1210.73 L1906.11 1210.73 L1906.69 1210.73 L1907.28 1210.73 L1907.87 1210.73 L1908.45 1210.73 L1909.04 1210.73 L1909.63 1210.73 L1910.21 1210.73 L1910.8 1210.73 L1911.38 1210.73 L1911.97 1210.73 L1912.56 1210.73 L1913.14 1210.73 L1913.73 1210.73 L1914.32 1210.73 L1914.9 1210.73 L1915.49 1210.73 L1916.08 1210.73 L1916.66 1210.73 L1917.25 1210.73 L1917.83 1210.73 L1918.42 1210.73 L1919.01 1210.73 L1919.59 1210.73 L1920.18 1210.73 L1920.77 1210.73 L1921.35 1210.73 L1921.94 1210.73 L1922.53 1210.73 L1923.11 1210.73 L1923.7 1210.73 L1924.29 1210.73 L1924.87 1210.73 L1925.46 1210.73 L1926.04 1210.73 L1926.63 1210.73 L1927.22 1210.73 L1927.8 1210.73 L1928.39 1210.73 L1928.98 1210.73 L1929.56 1210.73 L1930.15 1210.73 L1930.74 1210.73 L1931.32 1210.73 L1931.91 1210.73 L1932.5 1210.73 L1933.08 1210.73 L1933.67 1210.73 L1934.25 1210.73 L1934.84 1210.73 L1935.43 1210.73 L1936.01 1210.73 L1936.6 1210.73 L1937.19 1210.73 L1937.77 1210.73 L1938.36 1210.73 L1938.95 1210.73 L1939.53 1210.73 L1940.12 1210.73 L1940.71 1210.73 L1941.29 1210.73 L1941.88 1210.73 L1942.46 1210.73 L1943.05 1210.73 L1943.64 1210.73 L1944.22 1210.73 L1944.81 1210.73 L1945.4 1210.73 L1945.98 1210.73 L1946.57 1210.73 L1947.16 1210.73 L1947.74 1210.73 L1948.33 1210.73 L1948.91 1210.73 L1949.5 1210.73 L1950.09 1210.73 L1950.67 1210.73 L1951.26 1210.73 L1951.85 1210.73 L1952.43 1210.73 L1953.02 1210.73 L1953.61 1210.73 L1954.19 1210.73 L1954.78 1210.73 L1955.37 1210.73 L1955.95 1210.73 L1956.54 1210.73 L1957.12 1210.73 L1957.71 1210.73 L1958.3 1210.73 L1958.88 1210.73 L1959.47 1210.73 L1960.06 1210.73 L1960.64 1210.73 L1961.23 1210.73 L1961.82 1210.73 L1962.4 1210.73 L1962.99 1210.73 L1963.58 1210.73 L1964.16 1210.73 L1964.75 1210.73 L1965.33 1210.73 L1965.92 1210.73 L1966.51 1210.73 L1967.09 1210.73 L1967.68 1210.73 L1968.27 1210.73 L1968.85 1210.73 L1969.44 1210.73 L1970.03 1210.73 L1970.61 1210.73 L1971.2 1210.73 L1971.78 1210.73 L1972.37 1210.73 L1972.96 1210.73 L1973.54 1210.73 L1974.13 1210.73 L1974.72 1210.73 L1975.3 1210.73 L1975.89 1210.73 L1976.48 1210.73 L1977.06 1210.73 L1977.65 1210.73 L1978.24 1210.73 L1978.82 1210.73 L1979.41 1210.73 L1979.99 1210.73 L1980.58 1210.73 L1981.17 1210.73 L1981.75 1210.73 L1982.34 1210.73 L1982.93 1210.73 L1983.51 1210.73 L1984.1 1210.73 L1984.69 1210.73 L1985.27 1210.73 L1985.86 1210.73 L1986.45 1210.73 L1987.03 1210.73 L1987.62 1210.73 L1988.2 1210.73 L1988.79 1210.73 L1989.38 1210.73 L1989.96 1210.73 L1990.55 1210.73 L1991.14 1210.73 L1991.72 1210.73 L1992.31 1210.73 L1992.9 1210.73 L1993.48 1210.73 L1994.07 1210.73 L1994.65 1210.73 L1995.24 1210.73 L1995.83 1210.73 L1996.41 1210.73 L1997 1210.73 L1997.59 1210.73 L1998.17 1210.73 L1998.76 1210.73 L1999.35 1210.73 L1999.93 1210.73 L2000.52 1210.73 L2001.11 1210.73 L2001.69 1210.73 L2002.28 1210.73 L2002.86 1210.73 L2003.45 1210.73 L2004.04 1210.73 L2004.62 1210.73 L2005.21 1210.73 L2005.8 1210.73 L2006.38 1210.73 L2006.97 1210.73 L2007.56 1210.73 L2008.14 1210.73 L2008.73 1210.73 L2009.32 1210.73 L2009.9 1210.73 L2010.49 1210.73 L2011.07 1210.73 L2011.66 1210.73 L2012.25 1210.73 L2012.83 1210.73 L2013.42 1210.73 L2014.01 1210.73 L2014.59 1210.73 L2015.18 1210.73 L2015.77 1210.73 L2016.35 1210.73 L2016.94 1210.73 L2017.53 1210.73 L2018.11 1210.73 L2018.7 1210.73 L2019.28 1210.73 L2019.87 1210.73 L2020.46 1210.73 L2021.04 1210.73 L2021.63 1210.73 L2022.22 1210.73 L2022.8 1210.73 L2023.39 1210.73 L2023.98 1210.73 L2024.56 1210.73 L2025.15 1210.73 L2025.73 1210.73 L2026.32 1210.73 L2026.91 1210.73 L2027.49 1210.73 L2028.08 1210.73 L2028.67 1210.73 L2029.25 1210.73 L2029.84 1210.73 L2030.43 1210.73 L2031.01 1210.73 L2031.6 1210.73 L2032.19 1210.73 L2032.77 1210.73 L2033.36 1210.73 L2033.94 1210.73 L2034.53 1210.73 L2035.12 1210.73 L2035.7 1210.73 L2036.29 1210.73 L2036.88 1210.73 L2037.46 1210.73 L2038.05 1210.73 L2038.64 1210.73 L2039.22 1210.73 L2039.81 1210.73 L2040.4 1210.73 L2040.98 1210.73 L2041.57 1210.73 L2042.15 1210.73 L2042.74 1210.73 L2043.33 1210.73 L2043.91 1210.73 L2044.5 1210.73 L2045.09 1210.73 L2045.67 1210.73 L2046.26 1210.73 L2046.85 1210.73 L2047.43 1210.73 L2048.02 1210.73 L2048.6 1210.73 L2049.19 1210.73 L2049.78 1210.73 L2050.36 1210.73 L2050.95 1210.73 L2051.54 1210.73 L2052.12 1210.73 L2052.71 1210.73 L2053.3 1210.73 L2053.88 1210.73 L2054.47 1210.73 L2055.06 1210.73 L2055.64 1210.73 L2056.23 1210.73 L2056.81 1210.73 L2057.4 1210.73 L2057.99 1210.73 L2058.57 1210.73 L2059.16 1210.73 L2059.75 1210.73 L2060.33 1210.73 L2060.92 1210.73 L2061.51 1210.73 L2062.09 1210.73 L2062.68 1210.73 L2063.27 1210.73 L2063.85 1210.73 L2064.44 1210.73 L2065.02 1210.73 L2065.61 1210.73 L2066.2 1210.73 L2066.78 1210.73 L2067.37 1210.73 L2067.96 1210.73 L2068.54 1210.73 L2069.13 1210.73 L2069.72 1210.73 L2070.3 1210.73 L2070.89 1210.73 L2071.48 1210.73 L2072.06 1210.73 L2072.65 1210.73 L2073.23 1210.73 L2073.82 1210.73 L2074.41 1210.73 L2074.99 1210.73 L2075.58 1210.73 L2076.17 1210.73 L2076.75 1210.73 L2077.34 1210.73 L2077.93 1210.73 L2078.51 1210.73 L2079.1 1210.73 L2079.68 1210.73 L2080.27 1210.73 L2080.86 1210.73 L2081.44 1210.73 L2082.03 1210.73 L2082.62 1210.73 L2083.2 1210.73 L2083.79 1210.73 L2084.38 1210.73 L2084.96 1210.73 L2085.55 1210.73 L2086.14 1210.73 L2086.72 1210.73 L2087.31 1210.73 L2087.89 1210.73 L2088.48 1210.73 L2089.07 1210.73 L2089.65 1210.73 L2090.24 1210.73 L2090.83 1210.73 L2091.41 1210.73 L2092 1210.73 L2092.59 1210.73 L2093.17 1210.73 L2093.76 1210.73 L2094.35 1210.73 L2094.93 1210.73 L2095.52 1210.73 L2096.1 1210.73 L2096.69 1210.73 L2097.28 1210.73 L2097.86 1210.73 L2098.45 1210.73 L2099.04 1210.73 L2099.62 1210.73 L2100.21 1210.73 L2100.8 1210.73 L2101.38 1210.73 L2101.97 1210.73 L2102.55 1210.73 L2103.14 1210.73 L2103.73 1210.73 L2104.31 1210.73 L2104.9 1210.73 L2105.49 1210.73 L2106.07 1210.73 L2106.66 1210.73 L2107.25 1210.73 L2107.83 1210.73 L2108.42 1210.73 L2109.01 1210.73 L2109.59 1210.73 L2110.18 1210.73 L2110.76 1210.73 L2111.35 1210.73 L2111.94 1210.73 L2112.52 1210.73 L2113.11 1210.73 L2113.7 1210.73 L2114.28 1210.73 L2114.87 1210.73 L2115.46 1210.73 L2116.04 1210.73 L2116.63 1210.73 L2117.22 1210.73 L2117.8 1210.73 L2118.39 1210.73 L2118.97 1210.73 L2119.56 1210.73 L2120.15 1210.73 L2120.73 1210.73 L2121.32 1210.73 L2121.91 1210.73 L2122.49 1210.73 L2123.08 1210.73 L2123.67 1210.73 L2124.25 1210.73 L2124.84 1210.73 L2125.42 1210.73 L2126.01 1210.73 L2126.6 1210.73 L2127.18 1210.73 L2127.77 1210.73 L2128.36 1210.73 L2128.94 1210.73 L2129.53 1210.73 L2130.12 1210.73 L2130.7 1210.73 L2131.29 1210.73 L2131.88 1210.73 L2132.46 1210.73 L2133.05 1210.73 L2133.63 1210.73 L2134.22 1210.73 L2134.81 1210.73 L2135.39 1210.73 L2135.98 1210.73 L2136.57 1210.73 L2137.15 1210.73 L2137.74 1210.73 L2138.33 1210.73 L2138.91 1210.73 L2139.5 1210.73 L2140.09 1210.73 L2140.67 1210.73 L2141.26 1210.73 L2141.84 1210.73 L2142.43 1210.73 L2143.02 1210.73 L2143.6 1210.73 L2144.19 1210.73 L2144.78 1210.73 L2145.36 1210.73 L2145.95 1210.73 L2146.54 1210.73 L2147.12 1210.73 L2147.71 1210.73 L2148.3 1210.73 L2148.88 1210.73 L2149.47 1210.73 L2150.05 1210.73 L2150.64 1210.73 L2151.23 1210.73 L2151.81 1210.73 L2152.4 1210.73 L2152.99 1210.73 L2153.57 1210.73 L2154.16 1210.73 L2154.75 1210.73 L2155.33 1210.73 L2155.92 1210.73 L2156.5 1210.73 L2157.09 1210.73 L2157.68 1210.73 L2158.26 1210.73 L2158.26 1209.89 L2157.68 1209.89 L2157.09 1209.89 L2156.5 1209.89 L2155.92 1209.89 L2155.33 1209.89 L2154.75 1209.89 L2154.16 1209.89 L2153.57 1209.89 L2152.99 1209.89 L2152.4 1209.89 L2151.81 1209.89 L2151.23 1209.89 L2150.64 1209.89 L2150.05 1209.89 L2149.47 1209.89 L2148.88 1209.89 L2148.3 1209.89 L2147.71 1209.89 L2147.12 1209.89 L2146.54 1209.89 L2145.95 1209.89 L2145.36 1209.89 L2144.78 1209.89 L2144.19 1209.89 L2143.6 1209.89 L2143.02 1209.89 L2142.43 1209.89 L2141.84 1209.89 L2141.26 1209.89 L2140.67 1209.89 L2140.09 1209.89 L2139.5 1209.89 L2138.91 1209.89 L2138.33 1209.89 L2137.74 1209.89 L2137.15 1209.89 L2136.57 1209.89 L2135.98 1209.89 L2135.39 1209.89 L2134.81 1209.89 L2134.22 1209.89 L2133.63 1209.89 L2133.05 1209.89 L2132.46 1209.89 L2131.88 1209.89 L2131.29 1209.89 L2130.7 1209.89 L2130.12 1209.89 L2129.53 1209.89 L2128.94 1209.89 L2128.36 1209.89 L2127.77 1209.89 L2127.18 1209.89 L2126.6 1209.89 L2126.01 1209.89 L2125.42 1209.89 L2124.84 1209.89 L2124.25 1209.89 L2123.67 1209.89 L2123.08 1209.89 L2122.49 1209.89 L2121.91 1209.89 L2121.32 1209.89 L2120.73 1209.89 L2120.15 1209.89 L2119.56 1209.89 L2118.97 1209.89 L2118.39 1209.89 L2117.8 1209.89 L2117.22 1209.89 L2116.63 1209.89 L2116.04 1209.89 L2115.46 1209.89 L2114.87 1209.89 L2114.28 1209.89 L2113.7 1209.89 L2113.11 1209.89 L2112.52 1209.89 L2111.94 1209.89 L2111.35 1209.89 L2110.76 1209.89 L2110.18 1209.89 L2109.59 1209.89 L2109.01 1209.89 L2108.42 1209.89 L2107.83 1209.89 L2107.25 1209.89 L2106.66 1209.89 L2106.07 1209.89 L2105.49 1209.89 L2104.9 1209.89 L2104.31 1209.89 L2103.73 1209.89 L2103.14 1209.89 L2102.55 1209.89 L2101.97 1209.89 L2101.38 1209.89 L2100.8 1209.89 L2100.21 1209.89 L2099.62 1209.89 L2099.04 1209.89 L2098.45 1209.89 L2097.86 1209.89 L2097.28 1209.89 L2096.69 1209.89 L2096.1 1209.89 L2095.52 1209.89 L2094.93 1209.89 L2094.35 1209.89 L2093.76 1209.89 L2093.17 1209.89 L2092.59 1209.89 L2092 1209.89 L2091.41 1209.89 L2090.83 1209.89 L2090.24 1209.89 L2089.65 1209.89 L2089.07 1209.89 L2088.48 1209.89 L2087.89 1209.89 L2087.31 1209.89 L2086.72 1209.89 L2086.14 1209.89 L2085.55 1209.89 L2084.96 1209.89 L2084.38 1209.89 L2083.79 1209.89 L2083.2 1209.89 L2082.62 1209.89 L2082.03 1209.89 L2081.44 1209.89 L2080.86 1209.89 L2080.27 1209.89 L2079.68 1209.89 L2079.1 1209.89 L2078.51 1209.89 L2077.93 1209.89 L2077.34 1209.89 L2076.75 1209.89 L2076.17 1209.89 L2075.58 1209.89 L2074.99 1209.89 L2074.41 1209.89 L2073.82 1209.89 L2073.23 1209.89 L2072.65 1209.89 L2072.06 1209.89 L2071.48 1209.89 L2070.89 1209.89 L2070.3 1209.89 L2069.72 1209.89 L2069.13 1209.89 L2068.54 1209.89 L2067.96 1209.89 L2067.37 1209.89 L2066.78 1209.89 L2066.2 1209.89 L2065.61 1209.89 L2065.02 1209.89 L2064.44 1209.89 L2063.85 1209.89 L2063.27 1209.89 L2062.68 1209.89 L2062.09 1209.89 L2061.51 1209.89 L2060.92 1209.89 L2060.33 1209.89 L2059.75 1209.89 L2059.16 1209.89 L2058.57 1209.89 L2057.99 1209.89 L2057.4 1209.89 L2056.81 1209.89 L2056.23 1209.89 L2055.64 1209.89 L2055.06 1209.89 L2054.47 1209.89 L2053.88 1209.89 L2053.3 1209.89 L2052.71 1209.89 L2052.12 1209.89 L2051.54 1209.89 L2050.95 1209.89 L2050.36 1209.89 L2049.78 1209.89 L2049.19 1209.89 L2048.6 1209.89 L2048.02 1209.89 L2047.43 1209.89 L2046.85 1209.89 L2046.26 1209.89 L2045.67 1209.89 L2045.09 1209.89 L2044.5 1209.89 L2043.91 1209.89 L2043.33 1209.89 L2042.74 1209.89 L2042.15 1209.89 L2041.57 1209.89 L2040.98 1209.89 L2040.4 1209.89 L2039.81 1209.89 L2039.22 1209.89 L2038.64 1209.89 L2038.05 1209.89 L2037.46 1209.89 L2036.88 1209.89 L2036.29 1209.89 L2035.7 1209.89 L2035.12 1209.89 L2034.53 1209.89 L2033.94 1209.89 L2033.36 1209.89 L2032.77 1209.89 L2032.19 1209.89 L2031.6 1209.89 L2031.01 1209.89 L2030.43 1209.89 L2029.84 1209.89 L2029.25 1209.89 L2028.67 1209.89 L2028.08 1209.89 L2027.49 1209.89 L2026.91 1209.89 L2026.32 1209.89 L2025.73 1209.89 L2025.15 1209.89 L2024.56 1209.89 L2023.98 1209.89 L2023.39 1209.89 L2022.8 1209.89 L2022.22 1209.89 L2021.63 1209.89 L2021.04 1209.89 L2020.46 1209.89 L2019.87 1209.89 L2019.28 1209.89 L2018.7 1209.89 L2018.11 1209.89 L2017.53 1209.89 L2016.94 1209.89 L2016.35 1209.89 L2015.77 1209.89 L2015.18 1209.89 L2014.59 1209.89 L2014.01 1209.89 L2013.42 1209.89 L2012.83 1209.89 L2012.25 1209.89 L2011.66 1209.89 L2011.07 1209.89 L2010.49 1209.89 L2009.9 1209.89 L2009.32 1209.89 L2008.73 1209.89 L2008.14 1209.89 L2007.56 1209.89 L2006.97 1209.89 L2006.38 1209.89 L2005.8 1209.89 L2005.21 1209.89 L2004.62 1209.89 L2004.04 1209.89 L2003.45 1209.89 L2002.86 1209.89 L2002.28 1209.89 L2001.69 1209.89 L2001.11 1209.89 L2000.52 1209.89 L1999.93 1209.89 L1999.35 1209.89 L1998.76 1209.89 L1998.17 1209.89 L1997.59 1209.89 L1997 1209.89 L1996.41 1209.89 L1995.83 1209.89 L1995.24 1209.89 L1994.65 1209.89 L1994.07 1209.89 L1993.48 1209.89 L1992.9 1209.89 L1992.31 1209.89 L1991.72 1209.89 L1991.14 1209.89 L1990.55 1209.89 L1989.96 1209.89 L1989.38 1209.89 L1988.79 1209.89 L1988.2 1209.89 L1987.62 1209.89 L1987.03 1209.89 L1986.45 1209.89 L1985.86 1209.89 L1985.27 1209.89 L1984.69 1209.89 L1984.1 1209.89 L1983.51 1209.89 L1982.93 1209.89 L1982.34 1209.89 L1981.75 1209.89 L1981.17 1209.89 L1980.58 1209.89 L1979.99 1209.89 L1979.41 1209.89 L1978.82 1209.89 L1978.24 1209.89 L1977.65 1209.89 L1977.06 1209.89 L1976.48 1209.89 L1975.89 1209.89 L1975.3 1209.89 L1974.72 1209.89 L1974.13 1209.89 L1973.54 1209.89 L1972.96 1209.89 L1972.37 1209.89 L1971.78 1209.89 L1971.2 1209.89 L1970.61 1209.89 L1970.03 1209.89 L1969.44 1209.89 L1968.85 1209.89 L1968.27 1209.89 L1967.68 1209.89 L1967.09 1209.89 L1966.51 1209.89 L1965.92 1209.89 L1965.33 1209.89 L1964.75 1209.89 L1964.16 1209.89 L1963.58 1209.89 L1962.99 1209.89 L1962.4 1209.89 L1961.82 1209.89 L1961.23 1209.89 L1960.64 1209.89 L1960.06 1209.89 L1959.47 1209.89 L1958.88 1209.89 L1958.3 1209.89 L1957.71 1209.89 L1957.12 1209.89 L1956.54 1209.89 L1955.95 1209.89 L1955.37 1209.89 L1954.78 1209.89 L1954.19 1209.89 L1953.61 1209.89 L1953.02 1209.89 L1952.43 1209.89 L1951.85 1209.89 L1951.26 1209.89 L1950.67 1209.89 L1950.09 1209.89 L1949.5 1209.89 L1948.91 1209.89 L1948.33 1209.89 L1947.74 1209.89 L1947.16 1209.89 L1946.57 1209.89 L1945.98 1209.89 L1945.4 1209.89 L1944.81 1209.89 L1944.22 1209.89 L1943.64 1209.89 L1943.05 1209.89 L1942.46 1209.89 L1941.88 1209.89 L1941.29 1209.89 L1940.71 1209.89 L1940.12 1209.89 L1939.53 1209.89 L1938.95 1209.89 L1938.36 1209.89 L1937.77 1209.89 L1937.19 1209.89 L1936.6 1209.89 L1936.01 1209.89 L1935.43 1209.89 L1934.84 1209.89 L1934.25 1209.89 L1933.67 1209.89 L1933.08 1209.89 L1932.5 1209.89 L1931.91 1209.89 L1931.32 1209.89 L1930.74 1209.89 L1930.15 1209.89 L1929.56 1209.89 L1928.98 1209.89 L1928.39 1209.89 L1927.8 1209.89 L1927.22 1209.89 L1926.63 1209.89 L1926.04 1209.89 L1925.46 1209.89 L1924.87 1209.89 L1924.29 1209.89 L1923.7 1209.89 L1923.11 1209.89 L1922.53 1209.89 L1921.94 1209.89 L1921.35 1209.89 L1920.77 1209.89 L1920.18 1209.89 L1919.59 1209.89 L1919.01 1209.89 L1918.42 1209.89 L1917.83 1209.89 L1917.25 1209.89 L1916.66 1209.89 L1916.08 1209.89 L1915.49 1209.89 L1914.9 1209.89 L1914.32 1209.89 L1913.73 1209.89 L1913.14 1209.89 L1912.56 1209.89 L1911.97 1209.89 L1911.38 1209.89 L1910.8 1209.89 L1910.21 1209.89 L1909.63 1209.89 L1909.04 1209.89 L1908.45 1209.89 L1907.87 1209.89 L1907.28 1209.89 L1906.69 1209.89 L1906.11 1209.89 L1905.52 1209.89 L1904.93 1209.89 L1904.35 1209.89 L1903.76 1209.89 L1903.17 1209.89 L1902.59 1209.89 L1902 1209.89 L1901.42 1209.89 L1900.83 1209.89 L1900.24 1209.89 L1899.66 1209.89 L1899.07 1209.89 L1898.48 1209.89 L1897.9 1209.89 L1897.31 1209.89 L1896.72 1209.89 L1896.14 1209.89 L1895.55 1209.89 L1894.96 1209.89 L1894.38 1209.89 L1893.79 1209.89 L1893.21 1209.89 L1892.62 1209.89 L1892.03 1209.89 L1891.45 1209.89 L1890.86 1209.89 L1890.27 1209.89 L1889.69 1209.89 L1889.1 1209.89 L1888.51 1209.89 L1887.93 1209.89 L1887.34 1209.89 L1886.76 1209.89 L1886.17 1209.89 L1885.58 1209.89 L1885 1209.89 L1884.41 1209.89 L1883.82 1209.89 L1883.24 1209.89 L1882.65 1209.89 L1882.06 1209.89 L1881.48 1209.89 L1880.89 1209.89 L1880.3 1209.89 L1879.72 1209.89 L1879.13 1209.89 L1878.55 1209.89 L1877.96 1209.89 L1877.37 1209.89 L1876.79 1209.89 L1876.2 1209.89 L1875.61 1209.89 L1875.03 1209.89 L1874.44 1209.89 L1873.85 1209.89 L1873.27 1209.89 L1872.68 1209.89 L1872.09 1209.89 L1871.51 1209.89 L1870.92 1209.89 L1870.34 1209.89 L1869.75 1209.89 L1869.16 1209.89 L1868.58 1209.89 L1867.99 1209.89 L1867.4 1209.89 L1866.82 1209.89 L1866.23 1209.89 L1865.64 1209.89 L1865.06 1209.89 L1864.47 1209.89 L1863.88 1209.89 L1863.3 1209.89 L1862.71 1209.89 L1862.13 1209.89 L1861.54 1209.89 L1860.95 1209.89 L1860.37 1209.89 L1859.78 1209.89 L1859.19 1209.89 L1858.61 1209.89 L1858.02 1209.89 L1857.43 1209.89 L1856.85 1209.89 L1856.26 1209.89 L1855.68 1209.89 L1855.09 1209.89 L1854.5 1209.89 L1853.92 1209.89 L1853.33 1209.89 L1852.74 1209.89 L1852.16 1209.89 L1851.57 1209.89 L1850.98 1209.89 L1850.4 1209.89 L1849.81 1209.89 L1849.22 1209.89 L1848.64 1209.89 L1848.05 1209.89 L1847.47 1209.89 L1846.88 1209.89 L1846.29 1209.89 L1845.71 1209.89 L1845.12 1209.89 L1844.53 1209.89 L1843.95 1209.89 L1843.36 1209.89 L1842.77 1209.89 L1842.19 1209.89 L1841.6 1209.89 L1841.01 1209.89 L1840.43 1209.89 L1839.84 1209.89 L1839.26 1209.89 L1838.67 1209.89 L1838.08 1209.89 L1837.5 1209.89 L1836.91 1209.89 L1836.32 1209.89 L1835.74 1209.89 L1835.15 1209.89 L1834.56 1209.89 L1833.98 1209.89 L1833.39 1209.89 L1832.81 1209.89 L1832.22 1209.89 L1831.63 1209.89 L1831.05 1209.89 L1830.46 1209.89 L1829.87 1209.89 L1829.29 1209.89 L1828.7 1209.89 L1828.11 1209.89 L1827.53 1209.89 L1826.94 1209.89 L1826.35 1209.89 L1825.77 1209.89 L1825.18 1209.89 L1824.6 1209.89 L1824.01 1209.89 L1823.42 1209.89 L1822.84 1209.89 L1822.25 1209.89 L1821.66 1209.89 L1821.08 1209.89 L1820.49 1209.89 L1819.9 1209.89 L1819.32 1209.89 L1818.73 1209.89 L1818.14 1209.89 L1817.56 1209.89 L1816.97 1209.89 L1816.39 1209.89 L1815.8 1209.89 L1815.21 1209.89 L1814.63 1209.89 L1814.04 1209.89 L1813.45 1209.89 L1812.87 1209.89 L1812.28 1209.89 L1811.69 1209.89 L1811.11 1209.89 L1810.52 1209.89 L1809.94 1209.89 L1809.35 1209.89 L1808.76 1209.89 L1808.18 1209.89 L1807.59 1209.89 L1807 1209.89 L1806.42 1209.89 L1805.83 1209.89 L1805.24 1209.89 L1804.66 1209.89 L1804.07 1209.89 L1803.48 1209.89 L1802.9 1209.89 L1802.31 1209.89 L1801.73 1209.89 L1801.14 1209.89 L1800.55 1209.89 L1799.97 1209.89 L1799.38 1209.89 L1798.79 1209.89 L1798.21 1209.89 L1797.62 1209.89 L1797.03 1209.89 L1796.45 1209.89 L1795.86 1209.89 L1795.27 1209.89 L1794.69 1209.89 L1794.1 1209.89 L1793.52 1209.89 L1792.93 1209.89 L1792.34 1209.89 L1791.76 1209.89 L1791.17 1209.89 L1790.58 1209.89 L1790 1209.89 L1789.41 1209.89 L1788.82 1209.89 L1788.24 1209.89 L1787.65 1209.89 L1787.06 1209.89 L1786.48 1209.89 L1785.89 1209.89 L1785.31 1209.89 L1784.72 1209.89 L1784.13 1209.89 L1783.55 1209.89 L1782.96 1209.89 L1782.37 1209.89 L1781.79 1209.89 L1781.2 1209.89 L1780.61 1209.89 L1780.03 1209.89 L1779.44 1209.89 L1778.86 1209.89 L1778.27 1209.89 L1777.68 1209.89 L1777.1 1209.89 L1776.51 1209.89 L1775.92 1209.89 L1775.34 1209.89 L1774.75 1209.89 L1774.16 1209.89 L1773.58 1209.89 L1772.99 1209.89 L1772.4 1209.89 L1771.82 1209.89 L1771.23 1209.89 L1770.65 1209.89 L1770.06 1209.89 L1769.47 1209.89 L1768.89 1209.89 L1768.3 1209.89 L1767.71 1209.89 L1767.13 1209.89 L1766.54 1209.89 L1765.95 1209.89 L1765.37 1209.89 L1764.78 1209.89 L1764.19 1209.89 L1763.61 1209.89 L1763.02 1209.89 L1762.44 1209.89 L1761.85 1209.89 L1761.26 1209.89 L1760.68 1209.89 L1760.09 1209.89 L1759.5 1209.89 L1758.92 1209.89 L1758.33 1209.89 L1757.74 1209.89 L1757.16 1209.89 L1756.57 1209.89 L1755.99 1209.89 L1755.4 1209.89 L1754.81 1209.89 L1754.23 1209.89 L1753.64 1209.89 L1753.05 1209.89 L1752.47 1209.89 L1751.88 1209.89 L1751.29 1209.89 L1750.71 1209.89 L1750.12 1209.89 L1749.53 1209.89 L1748.95 1209.89 L1748.36 1209.89 L1747.78 1209.89 L1747.19 1209.89 L1746.6 1209.89 L1746.02 1209.89 L1745.43 1209.89 L1744.84 1209.89 L1744.26 1209.89 L1743.67 1209.89 L1743.08 1209.89 L1742.5 1209.89 L1741.91 1209.89 L1741.32 1209.89 L1740.74 1209.89 L1740.15 1209.89 L1739.57 1209.89 L1738.98 1209.89 L1738.39 1209.89 L1737.81 1209.89 L1737.22 1209.89 L1736.63 1209.89 L1736.05 1209.89 L1735.46 1209.89 L1734.87 1209.89 L1734.29 1209.89 L1733.7 1209.89 L1733.11 1209.89 L1732.53 1209.89 L1731.94 1209.89 L1731.36 1209.89 L1730.77 1209.89 L1730.18 1209.89 L1729.6 1209.89 L1729.01 1209.89 L1728.42 1209.89 L1727.84 1209.89 L1727.25 1209.89 L1726.66 1209.89 L1726.08 1209.89 L1725.49 1209.89 L1724.91 1209.89 L1724.32 1209.89 L1723.73 1209.89 L1723.15 1209.89 L1722.56 1209.89 L1721.97 1209.89 L1721.39 1209.89 L1720.8 1209.89 L1720.21 1209.89 L1719.63 1209.89 L1719.04 1209.89 L1718.45 1209.89 L1717.87 1209.89 L1717.28 1209.89 L1716.7 1209.89 L1716.11 1209.89 L1715.52 1209.89 L1714.94 1209.89 L1714.35 1209.89 L1713.76 1209.89 L1713.18 1209.89 L1712.59 1209.89 L1712 1209.89 L1711.42 1209.89 L1710.83 1209.89 L1710.24 1209.89 L1709.66 1209.89 L1709.07 1209.89 L1708.49 1209.89 L1707.9 1209.89 L1707.31 1209.89 L1706.73 1209.89 L1706.14 1209.89 L1705.55 1209.89 L1704.97 1209.89 L1704.38 1209.89 L1703.79 1209.89 L1703.21 1209.89 L1702.62 1209.89 L1702.04 1209.89 L1701.45 1209.89 L1700.86 1209.89 L1700.28 1209.89 L1699.69 1209.89 L1699.1 1209.89 L1698.52 1209.89 L1697.93 1209.89 L1697.34 1209.89 L1696.76 1209.89 L1696.17 1209.89 L1695.58 1209.89 L1695 1209.89 L1694.41 1209.89 L1693.83 1209.89 L1693.24 1209.89 L1692.65 1209.89 L1692.07 1209.89 L1691.48 1209.89 L1690.89 1209.89 L1690.31 1209.89 L1689.72 1209.89 L1689.13 1209.89 L1688.55 1209.89 L1687.96 1209.89 L1687.37 1209.89 L1686.79 1209.89 L1686.2 1209.89 L1685.62 1209.89 L1685.03 1209.89 L1684.44 1209.89 L1683.86 1209.89 L1683.27 1209.89 L1682.68 1209.89 L1682.1 1209.89 L1681.51 1209.89 L1680.92 1209.89 L1680.34 1209.89 L1679.75 1209.89 L1679.17 1209.89 L1678.58 1209.89 L1677.99 1209.89 L1677.41 1209.89 L1676.82 1209.89 L1676.23 1209.89 L1675.65 1209.89 L1675.06 1209.89 L1674.47 1209.89 L1673.89 1209.89 L1673.3 1209.89 L1672.71 1209.89 L1672.13 1209.89 L1671.54 1209.89 L1670.96 1209.89 L1670.37 1209.89 L1669.78 1209.89 L1669.2 1209.89 L1668.61 1209.89 L1668.02 1209.89 L1667.44 1209.89 L1666.85 1209.89 L1666.26 1209.89 L1665.68 1209.89 L1665.09 1209.89 L1664.5 1209.89 L1663.92 1209.89 L1663.33 1209.89 L1662.75 1209.89 L1662.16 1209.89 L1661.57 1209.89 L1660.99 1209.89 L1660.4 1209.89 L1659.81 1209.89 L1659.23 1209.89 L1658.64 1209.89 L1658.05 1209.89 L1657.47 1209.89 L1656.88 1209.89 L1656.29 1209.89 L1655.71 1209.89 L1655.12 1209.89 L1654.54 1209.89 L1653.95 1209.89 L1653.36 1209.89 L1652.78 1209.89 L1652.19 1209.89 L1651.6 1209.89 L1651.02 1209.89 L1650.43 1209.89 L1649.84 1209.89 L1649.26 1209.89 L1648.67 1209.89 L1648.09 1209.89 L1647.5 1209.89 L1646.91 1209.89 L1646.33 1209.89 L1645.74 1209.89 L1645.15 1209.89 L1644.57 1209.89 L1643.98 1209.89 L1643.39 1209.89 L1642.81 1209.89 L1642.22 1209.89 L1641.63 1209.89 L1641.05 1209.89 L1640.46 1209.89 L1639.88 1209.89 L1639.29 1209.89 L1638.7 1209.89 L1638.12 1209.89 L1637.53 1209.89 L1636.94 1209.89 L1636.36 1209.89 L1635.77 1209.89 L1635.18 1209.89 L1634.6 1209.89 L1634.01 1209.89 L1633.42 1209.89 L1632.84 1209.89 L1632.25 1209.89 L1631.67 1209.89 L1631.08 1209.89 L1630.49 1209.89 L1629.91 1209.89 L1629.32 1209.89 L1628.73 1209.89 L1628.15 1209.89 L1627.56 1209.89 L1626.97 1209.89 L1626.39 1209.89 L1625.8 1209.89 L1625.22 1209.89 L1624.63 1209.89 L1624.04 1209.89 L1623.46 1209.89 L1622.87 1209.89 L1622.28 1209.89 L1621.7 1209.89 L1621.11 1209.89 L1620.52 1209.89 L1619.94 1209.89 L1619.35 1209.89 L1618.76 1209.89 L1618.18 1209.89 L1617.59 1209.89 L1617.01 1209.89 L1616.42 1209.89 L1615.83 1209.89 L1615.25 1209.89 L1614.66 1209.89 L1614.07 1209.89 L1613.49 1209.89 L1612.9 1209.89 L1612.31 1209.89 L1611.73 1209.89 L1611.14 1209.89 L1610.55 1209.89 L1609.97 1209.89 L1609.38 1209.89 L1608.8 1209.89 L1608.21 1209.89 L1607.62 1209.89 L1607.04 1209.89 L1606.45 1209.89 L1605.86 1209.89 L1605.28 1209.89 L1604.69 1209.89 L1604.1 1209.89 L1603.52 1209.89 L1602.93 1209.89 L1602.34 1209.89 L1601.76 1209.89 L1601.17 1209.89 L1600.59 1209.89 L1600 1209.89 L1599.41 1209.89 L1598.83 1209.89 L1598.24 1209.89 L1597.65 1209.89 L1597.07 1209.89 L1596.48 1209.89 L1595.89 1209.89 L1595.31 1209.89 L1594.72 1209.89 L1594.14 1209.89 L1593.55 1209.89 L1592.96 1209.89 L1592.38 1209.89 L1591.79 1209.89 L1591.2 1209.89 L1590.62 1209.89 L1590.03 1209.89 L1589.44 1209.89 L1588.86 1209.89 L1588.27 1209.89 L1587.68 1209.89 L1587.1 1209.89 L1586.51 1209.89 L1585.93 1209.89 L1585.34 1209.89 L1584.75 1209.89 L1584.17 1209.89 L1583.58 1209.89 L1582.99 1209.89 L1582.41 1209.89 L1581.82 1209.89 L1581.23 1209.89 L1580.65 1209.89 L1580.06 1209.89 L1579.47 1209.89 L1578.89 1209.89 L1578.3 1209.89 L1577.72 1209.89 L1577.13 1209.89 L1576.54 1209.89 L1575.96 1209.89 L1575.37 1209.89 L1574.78 1209.89 L1574.2 1209.89 L1573.61 1209.89 L1573.02 1209.89 L1572.44 1209.89 L1571.85 1209.89 L1571.27 1209.89 L1570.68 1209.89 L1570.09 1209.89 L1569.51 1209.89 L1568.92 1209.89 L1568.33 1209.89 L1567.75 1209.89 L1567.16 1209.89 L1566.57 1209.89 L1565.99 1209.89 L1565.4 1209.89 L1564.81 1209.89 L1564.23 1209.89 L1563.64 1209.89 L1563.06 1209.89 L1562.47 1209.89 L1561.88 1209.89 L1561.3 1209.89 L1560.71 1209.89 L1560.12 1209.89 L1559.54 1209.89 L1558.95 1209.89 L1558.36 1209.89 L1557.78 1209.89 L1557.19 1209.89 L1556.6 1209.89 L1556.02 1209.89 L1555.43 1209.89 L1554.85 1209.89 L1554.26 1209.89 L1553.67 1209.89 L1553.09 1209.89 L1552.5 1209.89 L1551.91 1209.89 L1551.33 1209.89 L1550.74 1209.89 L1550.15 1209.89 L1549.57 1209.89 L1548.98 1209.89 L1548.4 1209.89 L1547.81 1209.89 L1547.22 1209.89 L1546.64 1209.89 L1546.05 1209.89 L1545.46 1209.89 L1544.88 1209.89 L1544.29 1209.89 L1543.7 1209.89 L1543.12 1209.89 L1542.53 1209.89 L1541.94 1209.89 L1541.36 1209.89 L1540.77 1209.89 L1540.19 1209.89 L1539.6 1209.89 L1539.01 1209.89 L1538.43 1209.89 L1537.84 1209.89 L1537.25 1209.89 L1536.67 1209.89 L1536.08 1209.89 L1535.49 1209.89 L1534.91 1209.89 L1534.32 1209.89 L1533.73 1209.89 L1533.15 1209.89 L1532.56 1209.89 L1531.98 1209.89 L1531.39 1209.89 L1530.8 1209.89 L1530.22 1209.89 L1529.63 1209.89 L1529.04 1209.89 L1528.46 1209.89 L1527.87 1209.89 L1527.28 1209.89 L1526.7 1209.89 L1526.11 1209.89 L1525.52 1209.89 L1524.94 1209.89 L1524.35 1209.89 L1523.77 1209.89 L1523.18 1209.89 L1522.59 1209.89 L1522.01 1209.89 L1521.42 1209.89 L1520.83 1209.89 L1520.25 1209.89 L1519.66 1209.89 L1519.07 1209.89 L1518.49 1209.89 L1517.9 1209.89 L1517.32 1209.89 L1516.73 1209.89 L1516.14 1209.89 L1515.56 1209.89 L1514.97 1209.89 L1514.38 1209.89 L1513.8 1209.89 L1513.21 1209.89 L1512.62 1209.89 L1512.04 1209.89 L1511.45 1209.89 L1510.86 1209.89 L1510.28 1209.89 L1509.69 1209.89 L1509.11 1209.89 L1508.52 1209.89 L1507.93 1209.89 L1507.35 1209.89 L1506.76 1209.89 L1506.17 1209.89 L1505.59 1209.89 L1505 1209.89 L1504.41 1209.89 L1503.83 1209.89 L1503.24 1209.89 L1502.65 1209.89 L1502.07 1209.89 L1501.48 1209.89 L1500.9 1209.89 L1500.31 1209.89 L1499.72 1209.89 L1499.14 1209.89 L1498.55 1209.89 L1497.96 1209.89 L1497.38 1209.89 L1496.79 1209.89 L1496.2 1209.89 L1495.62 1209.89 L1495.03 1209.89 L1494.45 1209.89 L1493.86 1209.89 L1493.27 1209.89 L1492.69 1209.89 L1492.1 1209.89 L1491.51 1209.89 L1490.93 1209.89 L1490.34 1209.89 L1489.75 1209.89 L1489.17 1209.89 L1488.58 1209.89 L1487.99 1209.89 L1487.41 1209.89 L1486.82 1209.89 L1486.24 1209.89 L1485.65 1209.89 L1485.06 1209.89 L1484.48 1209.89 L1483.89 1209.89 L1483.3 1209.89 L1482.72 1209.89 L1482.13 1209.89 L1481.54 1209.89 L1480.96 1209.89 L1480.37 1209.89 L1479.78 1209.89 L1479.2 1209.89 L1478.61 1209.89 L1478.03 1209.89 L1477.44 1209.89 L1476.85 1209.89 L1476.27 1209.89 L1475.68 1209.89 L1475.09 1209.89 L1474.51 1209.89 L1473.92 1209.89 L1473.33 1209.89 L1472.75 1209.89 L1472.16 1209.89 L1471.57 1209.89 L1470.99 1209.89 L1470.4 1209.89 L1469.82 1209.89 L1469.23 1209.89 L1468.64 1209.89 L1468.06 1209.89 L1467.47 1209.89 L1466.88 1209.89 L1466.3 1209.89 L1465.71 1209.89 L1465.12 1209.89 L1464.54 1209.89 L1463.95 1209.89 L1463.37 1209.89 L1462.78 1209.89 L1462.19 1209.89 L1461.61 1209.89 L1461.02 1209.89 L1460.43 1209.89 L1459.85 1209.89 L1459.26 1209.89 L1458.67 1209.89 L1458.09 1209.89 L1457.5 1209.89 L1456.91 1209.89 L1456.33 1209.89 L1455.74 1209.89 L1455.16 1209.89 L1454.57 1209.89 L1453.98 1209.89 L1453.4 1209.89 L1452.81 1209.89 L1452.22 1209.89 L1451.64 1209.89 L1451.05 1209.89 L1450.46 1209.89 L1449.88 1209.89 L1449.29 1209.89 L1448.7 1209.89 L1448.12 1209.89 L1447.53 1209.89 L1446.95 1209.89 L1446.36 1209.89 L1445.77 1209.89 L1445.19 1209.89 L1444.6 1209.89 L1444.01 1209.89 L1443.43 1209.89 L1442.84 1209.89 L1442.25 1209.89 L1441.67 1209.89 L1441.08 1209.89 L1440.5 1209.89 L1439.91 1209.89 L1439.32 1209.89 L1438.74 1209.89 L1438.15 1209.89 L1437.56 1209.89 L1436.98 1209.89 L1436.39 1209.89 L1435.8 1209.89 L1435.22 1209.89 L1434.63 1209.89 L1434.04 1209.89 L1433.46 1209.89 L1432.87 1209.89 L1432.29 1209.89 L1431.7 1209.89 L1431.11 1209.89 L1430.53 1209.89 L1429.94 1209.89 L1429.35 1209.89 L1428.77 1209.89 L1428.18 1209.89 L1427.59 1209.89 L1427.01 1209.89 L1426.42 1209.89 L1425.83 1209.89 L1425.25 1209.89 L1424.66 1209.89 L1424.08 1209.89 L1423.49 1209.89 L1422.9 1209.89 L1422.32 1209.89 L1421.73 1209.89 L1421.14 1209.89 L1420.56 1209.89 L1419.97 1209.89 L1419.38 1209.89 L1418.8 1209.89 L1418.21 1209.89 L1417.63 1209.89 L1417.04 1209.89 L1416.45 1209.89 L1415.87 1209.89 L1415.28 1209.89 L1414.69 1209.89 L1414.11 1209.89 L1413.52 1209.89 L1412.93 1209.89 L1412.35 1209.89 L1411.76 1209.89 L1411.17 1209.89 L1410.59 1209.89 L1410 1209.89 L1409.42 1209.89 L1408.83 1209.89 L1408.24 1209.89 L1407.66 1209.89 L1407.07 1209.89 L1406.48 1209.89 L1405.9 1209.89 L1405.31 1209.89 L1404.72 1209.89 L1404.14 1209.89 L1403.55 1209.89 L1402.96 1209.89 L1402.38 1209.89 L1401.79 1209.89 L1401.21 1209.89 L1400.62 1209.89 L1400.03 1209.89 L1399.45 1209.89 L1398.86 1209.89 L1398.27 1209.89 L1397.69 1209.89 L1397.1 1209.89 L1396.51 1209.89 L1395.93 1209.89 L1395.34 1209.89 L1394.75 1209.89 L1394.17 1209.89 L1393.58 1209.89 L1393 1209.89 L1392.41 1209.89 L1391.82 1209.89 L1391.24 1209.89 L1390.65 1209.89 L1390.06 1209.89 L1389.48 1209.89 L1388.89 1209.89 L1388.3 1209.89 L1387.72 1209.89 L1387.13 1209.89 L1386.55 1209.89 L1385.96 1209.89 L1385.37 1209.89 L1384.79 1209.89 L1384.2 1209.89 L1383.61 1209.89 L1383.03 1209.89 L1382.44 1209.89 L1381.85 1209.89 L1381.27 1209.89 L1380.68 1209.89 L1380.09 1209.89 L1379.51 1209.89 L1378.92 1209.89 L1378.34 1209.89 L1377.75 1209.89 L1377.16 1209.89 L1376.58 1209.89 L1375.99 1209.89 L1375.4 1209.89 L1374.82 1209.89 L1374.23 1209.89 L1373.64 1209.89 L1373.06 1209.89 L1372.47 1209.89 L1371.88 1209.89 L1371.3 1209.89 L1370.71 1209.89 L1370.13 1209.89 L1369.54 1209.89 L1368.95 1209.89 L1368.37 1209.89 L1367.78 1209.89 L1367.19 1209.89 L1366.61 1209.89 L1366.02 1209.89 L1365.43 1209.89 L1364.85 1209.89 L1364.26 1209.89 L1363.68 1209.89 L1363.09 1209.89 L1362.5 1209.89 L1361.92 1209.89 L1361.33 1209.89 L1360.74 1209.89 L1360.16 1209.89 L1359.57 1209.89 L1358.98 1209.89 L1358.4 1209.89 L1357.81 1209.89 L1357.22 1209.89 L1356.64 1209.89 L1356.05 1209.89 L1355.47 1209.89 L1354.88 1209.89 L1354.29 1209.89 L1353.71 1209.89 L1353.12 1209.89 L1352.53 1209.89 L1351.95 1209.89 L1351.36 1209.89 L1350.77 1209.89 L1350.19 1209.89 L1349.6 1209.89 L1349.01 1209.89 L1348.43 1209.89 L1347.84 1209.89 L1347.26 1209.89 L1346.67 1209.89 L1346.08 1209.89 L1345.5 1209.89 L1344.91 1209.89 L1344.32 1209.89 L1343.74 1209.89 L1343.15 1209.89 L1342.56 1209.89 L1341.98 1209.89 L1341.39 1209.89 L1340.8 1209.89 L1340.22 1209.89 L1339.63 1209.89 L1339.05 1209.89 L1338.46 1209.89 L1337.87 1209.89 L1337.29 1209.89 L1336.7 1209.89 L1336.11 1209.89 L1335.53 1209.89 L1334.94 1209.89 L1334.35 1209.89 L1333.77 1209.89 L1333.18 1209.89 L1332.6 1209.89 L1332.01 1209.89 L1331.42 1209.89 L1330.84 1209.89 L1330.25 1209.89 L1329.66 1209.89 L1329.08 1209.89 L1328.49 1209.89 L1327.9 1209.89 L1327.32 1209.89 L1326.73 1209.89 L1326.14 1209.89 L1325.56 1209.89 L1324.97 1209.89 L1324.39 1209.89 L1323.8 1209.89 L1323.21 1209.89 L1322.63 1209.89 L1322.04 1209.89 L1321.45 1209.89 L1320.87 1209.89 L1320.28 1209.89 L1319.69 1209.89 L1319.11 1209.89 L1318.52 1209.89 L1317.93 1209.89 L1317.35 1209.89 L1316.76 1209.89 L1316.18 1209.89 L1315.59 1209.89 L1315 1209.89 L1314.42 1209.89 L1313.83 1209.89 L1313.24 1209.89 L1312.66 1209.89 L1312.07 1209.89 L1311.48 1209.89 L1310.9 1209.89 L1310.31 1209.89 L1309.73 1209.89 L1309.14 1209.89 L1308.55 1209.89 L1307.97 1209.89 L1307.38 1209.89 L1306.79 1209.89 L1306.21 1209.89 L1305.62 1209.89 L1305.03 1209.89 L1304.45 1209.89 L1303.86 1209.89 L1303.27 1209.89 L1302.69 1209.89 L1302.1 1209.89 L1301.52 1209.89 L1300.93 1209.89 L1300.34 1209.89 L1299.76 1209.89 L1299.17 1209.89 L1298.58 1209.89 L1298 1209.89 L1297.41 1209.89 L1296.82 1209.89 L1296.24 1209.89 L1295.65 1209.89 L1295.06 1209.89 L1294.48 1209.89 L1293.89 1209.89 L1293.31 1209.89 L1292.72 1209.89 L1292.13 1209.89 L1291.55 1209.89 L1290.96 1209.89 L1290.37 1209.89 L1289.79 1209.89 L1289.2 1209.89 L1288.61 1209.89 L1288.03 1209.89 L1287.44 1209.89 L1286.86 1209.89 L1286.27 1209.89 L1285.68 1209.89 L1285.1 1209.89 L1284.51 1209.89 L1283.92 1209.89 L1283.34 1209.89 L1282.75 1209.89 L1282.16 1209.89 L1281.58 1209.89 L1280.99 1209.89 L1280.4 1209.89 L1279.82 1209.89 L1279.23 1209.89 L1278.65 1209.89 L1278.06 1209.89 L1277.47 1209.89 L1276.89 1209.89 L1276.3 1209.89 L1275.71 1209.89 L1275.13 1209.89 L1274.54 1209.89 L1273.95 1209.89 L1273.37 1209.89 L1272.78 1209.89 L1272.19 1209.89 L1271.61 1209.89 L1271.02 1209.89 L1270.44 1209.89 L1269.85 1209.89 L1269.26 1209.89 L1268.68 1209.89 L1268.09 1209.89 L1267.5 1209.89 L1266.92 1209.89 L1266.33 1209.89 L1265.74 1209.89 L1265.16 1209.89 L1264.57 1209.89 L1263.98 1209.89 L1263.4 1209.89 L1262.81 1209.89 L1262.23 1209.89 L1261.64 1209.89 L1261.05 1209.89 L1260.47 1209.89 L1259.88 1209.89 L1259.29 1209.89 L1258.71 1209.89 L1258.12 1209.89 L1257.53 1209.89 L1256.95 1209.89 L1256.36 1209.89 L1255.78 1209.89 L1255.19 1209.89 L1254.6 1209.89 L1254.02 1209.89 L1253.43 1209.89 L1252.84 1209.89 L1252.26 1209.89 L1251.67 1209.89 L1251.08 1209.89 L1250.5 1209.89 L1249.91 1209.89 L1249.32 1209.89 L1248.74 1209.89 L1248.15 1209.89 L1247.57 1209.89 L1246.98 1209.89 L1246.39 1209.89 L1245.81 1209.89 L1245.22 1209.89 L1244.63 1209.89 L1244.05 1209.89 L1243.46 1209.89 L1242.87 1209.89 L1242.29 1209.89 L1241.7 1209.89 L1241.11 1209.89 L1240.53 1209.89 L1239.94 1209.89 L1239.36 1209.89 L1238.77 1209.89 L1238.18 1209.89 L1237.6 1209.89 L1237.01 1209.89 L1236.42 1209.89 L1235.84 1209.89 L1235.25 1209.89 L1234.66 1209.89 L1234.08 1209.89 L1233.49 1209.89 L1232.91 1209.89 L1232.32 1209.89 L1231.73 1209.89 L1231.15 1209.89 L1230.56 1209.89 L1229.97 1209.89 L1229.39 1209.89 L1228.8 1209.89 L1228.21 1209.89 L1227.63 1209.89 L1227.04 1209.89 L1226.45 1209.89 L1225.87 1209.89 L1225.28 1209.89 L1224.7 1209.89 L1224.11 1209.89 L1223.52 1209.89 L1222.94 1209.89 L1222.35 1209.89 L1221.76 1209.89 L1221.18 1209.89 L1220.59 1209.89 L1220 1209.89 L1219.42 1209.89 L1218.83 1209.89 L1218.24 1209.89 L1217.66 1209.89 L1217.07 1209.89 L1216.49 1209.89 L1215.9 1209.89 L1215.31 1209.89 L1214.73 1209.89 L1214.14 1209.89 L1213.55 1209.89 L1212.97 1209.89 L1212.38 1209.89 L1211.79 1209.89 L1211.21 1209.89 L1210.62 1209.89 L1210.03 1209.89 L1209.45 1209.89 L1208.86 1209.89 L1208.28 1209.89 L1207.69 1209.89 L1207.1 1209.89 L1206.52 1209.89 L1205.93 1209.89 L1205.34 1209.89 L1204.76 1209.89 L1204.17 1209.89 L1203.58 1209.89 L1203 1209.89 L1202.41 1209.89 L1201.83 1209.89 L1201.24 1209.89 L1200.65 1209.89 L1200.07 1209.89 L1199.48 1209.89 L1198.89 1209.89 L1198.31 1209.89 L1197.72 1209.89 L1197.13 1209.89 L1196.55 1209.89 L1195.96 1209.89 L1195.37 1209.89 L1194.79 1209.89 L1194.2 1209.89 L1193.62 1209.89 L1193.03 1209.89 L1192.44 1209.89 L1191.86 1209.89 L1191.27 1209.89 L1190.68 1209.89 L1190.1 1209.89 L1189.51 1209.89 L1188.92 1209.89 L1188.34 1209.89 L1187.75 1209.89 L1187.16 1209.89 L1186.58 1209.89 L1185.99 1209.89 L1185.41 1209.89 L1184.82 1209.89 L1184.23 1209.89 L1183.65 1209.89 L1183.06 1209.89 L1182.47 1209.89 L1181.89 1209.89 L1181.3 1209.89 L1180.71 1209.89 L1180.13 1209.89 L1179.54 1209.89 L1178.96 1209.89 L1178.37 1209.89 L1177.78 1209.89 L1177.2 1209.89 L1176.61 1209.89 L1176.02 1209.89 L1175.44 1209.89 L1174.85 1209.89 L1174.26 1209.89 L1173.68 1209.89 L1173.09 1209.89 L1172.5 1209.89 L1171.92 1209.89 L1171.33 1209.89 L1170.75 1209.89 L1170.16 1209.89 L1169.57 1209.89 L1168.99 1209.89 L1168.4 1209.89 L1167.81 1209.89 L1167.23 1209.89 L1166.64 1209.89 L1166.05 1209.89 L1165.47 1209.89 L1164.88 1209.89 L1164.29 1209.89 L1163.71 1209.89 L1163.12 1209.89 L1162.54 1209.89 L1161.95 1209.89 L1161.36 1209.89 L1160.78 1209.89 L1160.19 1209.89 L1159.6 1209.89 L1159.02 1209.89 L1158.43 1209.89 L1157.84 1209.89 L1157.26 1209.89 L1156.67 1209.89 L1156.09 1209.89 L1155.5 1209.89 L1154.91 1209.89 L1154.33 1209.89 L1153.74 1209.89 L1153.15 1209.89 L1152.57 1209.89 L1151.98 1209.89 L1151.39 1209.89 L1150.81 1209.89 L1150.22 1209.89 L1149.63 1209.89 L1149.05 1209.89 L1148.46 1209.89 L1147.88 1209.89 L1147.29 1209.89 L1146.7 1209.89 L1146.12 1209.89 L1145.53 1209.89 L1144.94 1209.89 L1144.36 1209.89 L1143.77 1209.89 L1143.18 1209.89 L1142.6 1209.89 L1142.01 1209.89 L1141.42 1209.89 L1140.84 1209.89 L1140.25 1209.89 L1139.67 1209.89 L1139.08 1209.89 L1138.49 1209.89 L1137.91 1209.89 L1137.32 1209.89 L1136.73 1209.89 L1136.15 1209.89 L1135.56 1209.89 L1134.97 1209.89 L1134.39 1209.89 L1133.8 1209.89 L1133.21 1209.89 L1132.63 1209.89 L1132.04 1209.89 L1131.46 1209.89 L1130.87 1209.89 L1130.28 1209.89 L1129.7 1209.89 L1129.11 1209.89 L1128.52 1209.89 L1127.94 1209.89 L1127.35 1209.89 L1126.76 1209.89 L1126.18 1209.89 L1125.59 1209.89 L1125.01 1209.89 L1124.42 1209.89 L1123.83 1209.89 L1123.25 1209.89 L1122.66 1209.89 L1122.07 1209.89 L1121.49 1209.89 L1120.9 1209.89 L1120.31 1209.89 L1119.73 1209.89 L1119.14 1209.89 L1118.55 1209.89 L1117.97 1209.89 L1117.38 1209.89 L1116.8 1209.89 L1116.21 1209.89 L1115.62 1209.89 L1115.04 1209.89 L1114.45 1209.89 L1113.86 1209.89 L1113.28 1209.89 L1112.69 1209.89 L1112.1 1209.89 L1111.52 1209.89 L1110.93 1209.89 L1110.34 1209.89 L1109.76 1209.89 L1109.17 1209.89 L1108.59 1209.89 L1108 1209.89 L1107.41 1209.89 L1106.83 1209.89 L1106.24 1209.89 L1105.65 1209.89 L1105.07 1209.89 L1104.48 1209.89 L1103.89 1209.89 L1103.31 1209.89 L1102.72 1209.89 L1102.14 1209.89 L1101.55 1209.89 L1100.96 1209.89 L1100.38 1209.89 L1099.79 1209.89 L1099.2 1209.89 L1098.62 1209.89 L1098.03 1209.89 L1097.44 1209.89 L1096.86 1209.89 L1096.27 1209.89 L1095.68 1209.89 L1095.1 1209.89 L1094.51 1209.89 L1093.93 1209.89 L1093.34 1209.89 L1092.75 1209.89 L1092.17 1209.89 L1091.58 1209.89 L1090.99 1209.89 L1090.41 1209.89 L1089.82 1209.89 L1089.23 1209.89 L1088.65 1209.89 L1088.06 1209.89 L1087.47 1209.89 L1086.89 1209.89 L1086.3 1209.89 L1085.72 1209.89 L1085.13 1209.89 L1084.54 1209.89 L1083.96 1209.89 L1083.37 1209.89 L1082.78 1209.89 L1082.2 1209.89 L1081.61 1209.89 L1081.02 1209.89 L1080.44 1209.89 L1079.85 1209.89 L1079.26 1209.89 L1078.68 1209.89 L1078.09 1209.89 L1077.51 1209.89 L1076.92 1209.89 L1076.33 1209.89 L1075.75 1209.89 L1075.16 1209.89 L1074.57 1209.89 L1073.99 1209.89 L1073.4 1209.89 L1072.81 1209.89 L1072.23 1209.89 L1071.64 1209.89 L1071.06 1209.89 L1070.47 1209.89 L1069.88 1209.89 L1069.3 1209.89 L1068.71 1209.89 L1068.12 1209.89 L1067.54 1209.89 L1066.95 1209.89 L1066.36 1209.89 L1065.78 1209.89 L1065.19 1209.89 L1064.6 1209.89 L1064.02 1209.89 L1063.43 1209.89 L1062.85 1209.89 L1062.26 1209.89 L1061.67 1209.89 L1061.09 1209.89 L1060.5 1209.89 L1059.91 1209.89 L1059.33 1209.89 L1058.74 1209.89 L1058.15 1209.89 L1057.57 1209.89 L1056.98 1209.89 L1056.39 1209.89 L1055.81 1209.89 L1055.22 1209.89 L1054.64 1209.89 L1054.05 1209.89 L1053.46 1209.89 L1052.88 1209.89 L1052.29 1209.89 L1051.7 1209.89 L1051.12 1209.89 L1050.53 1209.89 L1049.94 1209.89 L1049.36 1209.89 L1048.77 1209.89 L1048.19 1209.89 L1047.6 1209.89 L1047.01 1209.89 L1046.43 1209.89 L1045.84 1209.89 L1045.25 1209.89 L1044.67 1209.89 L1044.08 1209.89 L1043.49 1209.89 L1042.91 1209.89 L1042.32 1209.89 L1041.73 1209.89 L1041.15 1209.89 L1040.56 1209.89 L1039.98 1209.89 L1039.39 1209.89 L1038.8 1209.89 L1038.22 1209.89 L1037.63 1209.89 L1037.04 1209.89 L1036.46 1209.89 L1035.87 1209.89 L1035.28 1209.89 L1034.7 1209.89 L1034.11 1209.89 L1033.52 1209.89 L1032.94 1209.89 L1032.35 1209.89 L1031.77 1209.89 L1031.18 1209.89 L1030.59 1209.89 L1030.01 1209.89 L1029.42 1209.89 L1028.83 1209.89 L1028.25 1209.89 L1027.66 1209.89 L1027.07 1209.89 L1026.49 1209.89 L1025.9 1209.89 L1025.32 1209.89 L1024.73 1209.89 L1024.14 1209.89 L1023.56 1209.89 L1022.97 1209.89 L1022.38 1209.89 L1021.8 1209.89 L1021.21 1209.89 L1020.62 1209.89 L1020.04 1209.89 L1019.45 1209.89 L1018.86 1209.89 L1018.28 1209.89 L1017.69 1209.89 L1017.11 1209.89 L1016.52 1209.89 L1015.93 1209.89 L1015.35 1209.89 L1014.76 1209.89 L1014.17 1209.89 L1013.59 1209.89 L1013 1209.89 L1012.41 1209.89 L1011.83 1209.89 L1011.24 1209.89 L1010.65 1209.89 L1010.07 1209.89 L1009.48 1209.89 L1008.9 1209.89 L1008.31 1209.89 L1007.72 1209.89 L1007.14 1209.89 L1006.55 1209.89 L1005.96 1209.89 L1005.38 1209.89 L1004.79 1209.89 L1004.2 1209.89 L1003.62 1209.89 L1003.03 1209.89 L1002.44 1209.89 L1001.86 1209.89 L1001.27 1209.89 L1000.69 1209.89 L1000.1 1209.89 L999.513 1209.89 L998.926 1209.89 L998.34 1209.89 L997.754 1209.89 L997.167 1209.89 L996.581 1209.89 L995.994 1209.89 L995.408 1209.89 L994.822 1209.89 L994.235 1209.89 L993.649 1209.89 L993.062 1209.89 L992.476 1209.89 L991.889 1209.89 L991.303 1209.89 L990.717 1209.89 L990.13 1209.89 L989.544 1209.89 L988.957 1209.89 L988.371 1209.89 L987.785 1209.89 L987.198 1209.89 L986.612 1209.89 L986.025 1209.89  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.31 986.612,1210.31 987.198,1210.31 987.785,1210.31 988.371,1210.31 988.957,1210.31 989.544,1210.31 990.13,1210.31 990.717,1210.31 991.303,1210.31 991.889,1210.31 992.476,1210.31 993.062,1210.31 993.649,1210.31 994.235,1210.31 994.822,1210.31 995.408,1210.31 995.994,1210.31 996.581,1210.31 997.167,1210.31 997.754,1210.31 998.34,1210.31 998.926,1210.31 999.513,1210.31 1000.1,1210.31 1000.69,1210.31 1001.27,1210.31 1001.86,1210.31 1002.44,1210.31 1003.03,1210.31 1003.62,1210.31 1004.2,1210.31 1004.79,1210.31 1005.38,1210.31 1005.96,1210.31 1006.55,1210.31 1007.14,1210.31 1007.72,1210.31 1008.31,1210.31 1008.9,1210.31 1009.48,1210.31 1010.07,1210.31 1010.65,1210.31 1011.24,1210.31 1011.83,1210.31 1012.41,1210.31 1013,1210.31 1013.59,1210.31 1014.17,1210.31 1014.76,1210.31 1015.35,1210.31 1015.93,1210.31 1016.52,1210.31 1017.11,1210.31 1017.69,1210.31 1018.28,1210.31 1018.86,1210.31 1019.45,1210.31 1020.04,1210.31 1020.62,1210.31 1021.21,1210.31 1021.8,1210.31 1022.38,1210.31 1022.97,1210.31 1023.56,1210.31 1024.14,1210.31 1024.73,1210.31 1025.32,1210.31 1025.9,1210.31 1026.49,1210.31 1027.07,1210.31 1027.66,1210.31 1028.25,1210.31 1028.83,1210.31 1029.42,1210.31 1030.01,1210.31 1030.59,1210.31 1031.18,1210.31 1031.77,1210.31 1032.35,1210.31 1032.94,1210.31 1033.52,1210.31 1034.11,1210.31 1034.7,1210.31 1035.28,1210.31 1035.87,1210.31 1036.46,1210.31 1037.04,1210.31 1037.63,1210.31 1038.22,1210.31 1038.8,1210.31 1039.39,1210.31 1039.98,1210.31 1040.56,1210.31 1041.15,1210.31 1041.73,1210.31 1042.32,1210.31 1042.91,1210.31 1043.49,1210.31 1044.08,1210.31 1044.67,1210.31 1045.25,1210.31 1045.84,1210.31 1046.43,1210.31 1047.01,1210.31 1047.6,1210.31 1048.19,1210.31 1048.77,1210.31 1049.36,1210.31 1049.94,1210.31 1050.53,1210.31 1051.12,1210.31 1051.7,1210.31 1052.29,1210.31 1052.88,1210.31 1053.46,1210.31 1054.05,1210.31 1054.64,1210.31 1055.22,1210.31 1055.81,1210.31 1056.39,1210.31 1056.98,1210.31 1057.57,1210.31 1058.15,1210.31 1058.74,1210.31 1059.33,1210.31 1059.91,1210.31 1060.5,1210.31 1061.09,1210.31 1061.67,1210.31 1062.26,1210.31 1062.85,1210.31 1063.43,1210.31 1064.02,1210.31 1064.6,1210.31 1065.19,1210.31 1065.78,1210.31 1066.36,1210.31 1066.95,1210.31 1067.54,1210.31 1068.12,1210.31 1068.71,1210.31 1069.3,1210.31 1069.88,1210.31 1070.47,1210.31 1071.06,1210.31 1071.64,1210.31 1072.23,1210.31 1072.81,1210.31 1073.4,1210.31 1073.99,1210.31 1074.57,1210.31 1075.16,1210.31 1075.75,1210.31 1076.33,1210.31 1076.92,1210.31 1077.51,1210.31 1078.09,1210.31 1078.68,1210.31 1079.26,1210.31 1079.85,1210.31 1080.44,1210.31 1081.02,1210.31 1081.61,1210.31 1082.2,1210.31 1082.78,1210.31 1083.37,1210.31 1083.96,1210.31 1084.54,1210.31 1085.13,1210.31 1085.72,1210.31 1086.3,1210.31 1086.89,1210.31 1087.47,1210.31 1088.06,1210.31 1088.65,1210.31 1089.23,1210.31 1089.82,1210.31 1090.41,1210.31 1090.99,1210.31 1091.58,1210.31 1092.17,1210.31 1092.75,1210.31 1093.34,1210.31 1093.93,1210.31 1094.51,1210.31 1095.1,1210.31 1095.68,1210.31 1096.27,1210.31 1096.86,1210.31 1097.44,1210.31 1098.03,1210.31 1098.62,1210.31 1099.2,1210.31 1099.79,1210.31 1100.38,1210.31 1100.96,1210.31 1101.55,1210.31 1102.14,1210.31 1102.72,1210.31 1103.31,1210.31 1103.89,1210.31 1104.48,1210.31 1105.07,1210.31 1105.65,1210.31 1106.24,1210.31 1106.83,1210.31 1107.41,1210.31 1108,1210.31 1108.59,1210.31 1109.17,1210.31 1109.76,1210.31 1110.34,1210.31 1110.93,1210.31 1111.52,1210.31 1112.1,1210.31 1112.69,1210.31 1113.28,1210.31 1113.86,1210.31 1114.45,1210.31 1115.04,1210.31 1115.62,1210.31 1116.21,1210.31 1116.8,1210.31 1117.38,1210.31 1117.97,1210.31 1118.55,1210.31 1119.14,1210.31 1119.73,1210.31 1120.31,1210.31 1120.9,1210.31 1121.49,1210.31 1122.07,1210.31 1122.66,1210.31 1123.25,1210.31 1123.83,1210.31 1124.42,1210.31 1125.01,1210.31 1125.59,1210.31 1126.18,1210.31 1126.76,1210.31 1127.35,1210.31 1127.94,1210.31 1128.52,1210.31 1129.11,1210.31 1129.7,1210.31 1130.28,1210.31 1130.87,1210.31 1131.46,1210.31 1132.04,1210.31 1132.63,1210.31 1133.21,1210.31 1133.8,1210.31 1134.39,1210.31 1134.97,1210.31 1135.56,1210.31 1136.15,1210.31 1136.73,1210.31 1137.32,1210.31 1137.91,1210.31 1138.49,1210.31 1139.08,1210.31 1139.67,1210.31 1140.25,1210.31 1140.84,1210.31 1141.42,1210.31 1142.01,1210.31 1142.6,1210.31 1143.18,1210.31 1143.77,1210.31 1144.36,1210.31 1144.94,1210.31 1145.53,1210.31 1146.12,1210.31 1146.7,1210.31 1147.29,1210.31 1147.88,1210.31 1148.46,1210.31 1149.05,1210.31 1149.63,1210.31 1150.22,1210.31 1150.81,1210.31 1151.39,1210.31 1151.98,1210.31 1152.57,1210.31 1153.15,1210.31 1153.74,1210.31 1154.33,1210.31 1154.91,1210.31 1155.5,1210.31 1156.09,1210.31 1156.67,1210.31 1157.26,1210.31 1157.84,1210.31 1158.43,1210.31 1159.02,1210.31 1159.6,1210.31 1160.19,1210.31 1160.78,1210.31 1161.36,1210.31 1161.95,1210.31 1162.54,1210.31 1163.12,1210.31 1163.71,1210.31 1164.29,1210.31 1164.88,1210.31 1165.47,1210.31 1166.05,1210.31 1166.64,1210.31 1167.23,1210.31 1167.81,1210.31 1168.4,1210.31 1168.99,1210.31 1169.57,1210.31 1170.16,1210.31 1170.75,1210.31 1171.33,1210.31 1171.92,1210.31 1172.5,1210.31 1173.09,1210.31 1173.68,1210.31 1174.26,1210.31 1174.85,1210.31 1175.44,1210.31 1176.02,1210.31 1176.61,1210.31 1177.2,1210.31 1177.78,1210.31 1178.37,1210.31 1178.96,1210.31 1179.54,1210.31 1180.13,1210.31 1180.71,1210.31 1181.3,1210.31 1181.89,1210.31 1182.47,1210.31 1183.06,1210.31 1183.65,1210.31 1184.23,1210.31 1184.82,1210.31 1185.41,1210.31 1185.99,1210.31 1186.58,1210.31 1187.16,1210.31 1187.75,1210.31 1188.34,1210.31 1188.92,1210.31 1189.51,1210.31 1190.1,1210.31 1190.68,1210.31 1191.27,1210.31 1191.86,1210.31 1192.44,1210.31 1193.03,1210.31 1193.62,1210.31 1194.2,1210.31 1194.79,1210.31 1195.37,1210.31 1195.96,1210.31 1196.55,1210.31 1197.13,1210.31 1197.72,1210.31 1198.31,1210.31 1198.89,1210.31 1199.48,1210.31 1200.07,1210.31 1200.65,1210.31 1201.24,1210.31 1201.83,1210.31 1202.41,1210.31 1203,1210.31 1203.58,1210.31 1204.17,1210.31 1204.76,1210.31 1205.34,1210.31 1205.93,1210.31 1206.52,1210.31 1207.1,1210.31 1207.69,1210.31 1208.28,1210.31 1208.86,1210.31 1209.45,1210.31 1210.03,1210.31 1210.62,1210.31 1211.21,1210.31 1211.79,1210.31 1212.38,1210.31 1212.97,1210.31 1213.55,1210.31 1214.14,1210.31 1214.73,1210.31 1215.31,1210.31 1215.9,1210.31 1216.49,1210.31 1217.07,1210.31 1217.66,1210.31 1218.24,1210.31 1218.83,1210.31 1219.42,1210.31 1220,1210.31 1220.59,1210.31 1221.18,1210.31 1221.76,1210.31 1222.35,1210.31 1222.94,1210.31 1223.52,1210.31 1224.11,1210.31 1224.7,1210.31 1225.28,1210.31 1225.87,1210.31 1226.45,1210.31 1227.04,1210.31 1227.63,1210.31 1228.21,1210.31 1228.8,1210.31 1229.39,1210.31 1229.97,1210.31 1230.56,1210.31 1231.15,1210.31 1231.73,1210.31 1232.32,1210.31 1232.91,1210.31 1233.49,1210.31 1234.08,1210.31 1234.66,1210.31 1235.25,1210.31 1235.84,1210.31 1236.42,1210.31 1237.01,1210.31 1237.6,1210.31 1238.18,1210.31 1238.77,1210.31 1239.36,1210.31 1239.94,1210.31 1240.53,1210.31 1241.11,1210.31 1241.7,1210.31 1242.29,1210.31 1242.87,1210.31 1243.46,1210.31 1244.05,1210.31 1244.63,1210.31 1245.22,1210.31 1245.81,1210.31 1246.39,1210.31 1246.98,1210.31 1247.57,1210.31 1248.15,1210.31 1248.74,1210.31 1249.32,1210.31 1249.91,1210.31 1250.5,1210.31 1251.08,1210.31 1251.67,1210.31 1252.26,1210.31 1252.84,1210.31 1253.43,1210.31 1254.02,1210.31 1254.6,1210.31 1255.19,1210.31 1255.78,1210.31 1256.36,1210.31 1256.95,1210.31 1257.53,1210.31 1258.12,1210.31 1258.71,1210.31 1259.29,1210.31 1259.88,1210.31 1260.47,1210.31 1261.05,1210.31 1261.64,1210.31 1262.23,1210.31 1262.81,1210.31 1263.4,1210.31 1263.98,1210.31 1264.57,1210.31 1265.16,1210.31 1265.74,1210.31 1266.33,1210.31 1266.92,1210.31 1267.5,1210.31 1268.09,1210.31 1268.68,1210.31 1269.26,1210.31 1269.85,1210.31 1270.44,1210.31 1271.02,1210.31 1271.61,1210.31 1272.19,1210.31 1272.78,1210.31 1273.37,1210.31 1273.95,1210.31 1274.54,1210.31 1275.13,1210.31 1275.71,1210.31 1276.3,1210.31 1276.89,1210.31 1277.47,1210.31 1278.06,1210.31 1278.65,1210.31 1279.23,1210.31 1279.82,1210.31 1280.4,1210.31 1280.99,1210.31 1281.58,1210.31 1282.16,1210.31 1282.75,1210.31 1283.34,1210.31 1283.92,1210.31 1284.51,1210.31 1285.1,1210.31 1285.68,1210.31 1286.27,1210.31 1286.86,1210.31 1287.44,1210.31 1288.03,1210.31 1288.61,1210.31 1289.2,1210.31 1289.79,1210.31 1290.37,1210.31 1290.96,1210.31 1291.55,1210.31 1292.13,1210.31 1292.72,1210.31 1293.31,1210.31 1293.89,1210.31 1294.48,1210.31 1295.06,1210.31 1295.65,1210.31 1296.24,1210.31 1296.82,1210.31 1297.41,1210.31 1298,1210.31 1298.58,1210.31 1299.17,1210.31 1299.76,1210.31 1300.34,1210.31 1300.93,1210.31 1301.52,1210.31 1302.1,1210.31 1302.69,1210.31 1303.27,1210.31 1303.86,1210.31 1304.45,1210.31 1305.03,1210.31 1305.62,1210.31 1306.21,1210.31 1306.79,1210.31 1307.38,1210.31 1307.97,1210.31 1308.55,1210.31 1309.14,1210.31 1309.73,1210.31 1310.31,1210.31 1310.9,1210.31 1311.48,1210.31 1312.07,1210.31 1312.66,1210.31 1313.24,1210.31 1313.83,1210.31 1314.42,1210.31 1315,1210.31 1315.59,1210.31 1316.18,1210.31 1316.76,1210.31 1317.35,1210.31 1317.93,1210.31 1318.52,1210.31 1319.11,1210.31 1319.69,1210.31 1320.28,1210.31 1320.87,1210.31 1321.45,1210.31 1322.04,1210.31 1322.63,1210.31 1323.21,1210.31 1323.8,1210.31 1324.39,1210.31 1324.97,1210.31 1325.56,1210.31 1326.14,1210.31 1326.73,1210.31 1327.32,1210.31 1327.9,1210.31 1328.49,1210.31 1329.08,1210.31 1329.66,1210.31 1330.25,1210.31 1330.84,1210.31 1331.42,1210.31 1332.01,1210.31 1332.6,1210.31 1333.18,1210.31 1333.77,1210.31 1334.35,1210.31 1334.94,1210.31 1335.53,1210.31 1336.11,1210.31 1336.7,1210.31 1337.29,1210.31 1337.87,1210.31 1338.46,1210.31 1339.05,1210.31 1339.63,1210.31 1340.22,1210.31 1340.8,1210.31 1341.39,1210.31 1341.98,1210.31 1342.56,1210.31 1343.15,1210.31 1343.74,1210.31 1344.32,1210.31 1344.91,1210.31 1345.5,1210.31 1346.08,1210.31 1346.67,1210.31 1347.26,1210.31 1347.84,1210.31 1348.43,1210.31 1349.01,1210.31 1349.6,1210.31 1350.19,1210.31 1350.77,1210.31 1351.36,1210.31 1351.95,1210.31 1352.53,1210.31 1353.12,1210.31 1353.71,1210.31 1354.29,1210.31 1354.88,1210.31 1355.47,1210.31 1356.05,1210.31 1356.64,1210.31 1357.22,1210.31 1357.81,1210.31 1358.4,1210.31 1358.98,1210.31 1359.57,1210.31 1360.16,1210.31 1360.74,1210.31 1361.33,1210.31 1361.92,1210.31 1362.5,1210.31 1363.09,1210.31 1363.68,1210.31 1364.26,1210.31 1364.85,1210.31 1365.43,1210.31 1366.02,1210.31 1366.61,1210.31 1367.19,1210.31 1367.78,1210.31 1368.37,1210.31 1368.95,1210.31 1369.54,1210.31 1370.13,1210.31 1370.71,1210.31 1371.3,1210.31 1371.88,1210.31 1372.47,1210.31 1373.06,1210.31 1373.64,1210.31 1374.23,1210.31 1374.82,1210.31 1375.4,1210.31 1375.99,1210.31 1376.58,1210.31 1377.16,1210.31 1377.75,1210.31 1378.34,1210.31 1378.92,1210.31 1379.51,1210.31 1380.09,1210.31 1380.68,1210.31 1381.27,1210.31 1381.85,1210.31 1382.44,1210.31 1383.03,1210.31 1383.61,1210.31 1384.2,1210.31 1384.79,1210.31 1385.37,1210.31 1385.96,1210.31 1386.55,1210.31 1387.13,1210.31 1387.72,1210.31 1388.3,1210.31 1388.89,1210.31 1389.48,1210.31 1390.06,1210.31 1390.65,1210.31 1391.24,1210.31 1391.82,1210.31 1392.41,1210.31 1393,1210.31 1393.58,1210.31 1394.17,1210.31 1394.75,1210.31 1395.34,1210.31 1395.93,1210.31 1396.51,1210.31 1397.1,1210.31 1397.69,1210.31 1398.27,1210.31 1398.86,1210.31 1399.45,1210.31 1400.03,1210.31 1400.62,1210.31 1401.21,1210.31 1401.79,1210.31 1402.38,1210.31 1402.96,1210.31 1403.55,1210.31 1404.14,1210.31 1404.72,1210.31 1405.31,1210.31 1405.9,1210.31 1406.48,1210.31 1407.07,1210.31 1407.66,1210.31 1408.24,1210.31 1408.83,1210.31 1409.42,1210.31 1410,1210.31 1410.59,1210.31 1411.17,1210.31 1411.76,1210.31 1412.35,1210.31 1412.93,1210.31 1413.52,1210.31 1414.11,1210.31 1414.69,1210.31 1415.28,1210.31 1415.87,1210.31 1416.45,1210.31 1417.04,1210.31 1417.63,1210.31 1418.21,1210.31 1418.8,1210.31 1419.38,1210.31 1419.97,1210.31 1420.56,1210.31 1421.14,1210.31 1421.73,1210.31 1422.32,1210.31 1422.9,1210.31 1423.49,1210.31 1424.08,1210.31 1424.66,1210.31 1425.25,1210.31 1425.83,1210.31 1426.42,1210.31 1427.01,1210.31 1427.59,1210.31 1428.18,1210.31 1428.77,1210.31 1429.35,1210.31 1429.94,1210.31 1430.53,1210.31 1431.11,1210.31 1431.7,1210.31 1432.29,1210.31 1432.87,1210.31 1433.46,1210.31 1434.04,1210.31 1434.63,1210.31 1435.22,1210.31 1435.8,1210.31 1436.39,1210.31 1436.98,1210.31 1437.56,1210.31 1438.15,1210.31 1438.74,1210.31 1439.32,1210.31 1439.91,1210.31 1440.5,1210.31 1441.08,1210.31 1441.67,1210.31 1442.25,1210.31 1442.84,1210.31 1443.43,1210.31 1444.01,1210.31 1444.6,1210.31 1445.19,1210.31 1445.77,1210.31 1446.36,1210.31 1446.95,1210.31 1447.53,1210.31 1448.12,1210.31 1448.7,1210.31 1449.29,1210.31 1449.88,1210.31 1450.46,1210.31 1451.05,1210.31 1451.64,1210.31 1452.22,1210.31 1452.81,1210.31 1453.4,1210.31 1453.98,1210.31 1454.57,1210.31 1455.16,1210.31 1455.74,1210.31 1456.33,1210.31 1456.91,1210.31 1457.5,1210.31 1458.09,1210.31 1458.67,1210.31 1459.26,1210.31 1459.85,1210.31 1460.43,1210.31 1461.02,1210.31 1461.61,1210.31 1462.19,1210.31 1462.78,1210.31 1463.37,1210.31 1463.95,1210.31 1464.54,1210.31 1465.12,1210.31 1465.71,1210.31 1466.3,1210.31 1466.88,1210.31 1467.47,1210.31 1468.06,1210.31 1468.64,1210.31 1469.23,1210.31 1469.82,1210.31 1470.4,1210.31 1470.99,1210.31 1471.57,1210.31 1472.16,1210.31 1472.75,1210.31 1473.33,1210.31 1473.92,1210.31 1474.51,1210.31 1475.09,1210.31 1475.68,1210.31 1476.27,1210.31 1476.85,1210.31 1477.44,1210.31 1478.03,1210.31 1478.61,1210.31 1479.2,1210.31 1479.78,1210.31 1480.37,1210.31 1480.96,1210.31 1481.54,1210.31 1482.13,1210.31 1482.72,1210.31 1483.3,1210.31 1483.89,1210.31 1484.48,1210.31 1485.06,1210.31 1485.65,1210.31 1486.24,1210.31 1486.82,1210.31 1487.41,1210.31 1487.99,1210.31 1488.58,1210.31 1489.17,1210.31 1489.75,1210.31 1490.34,1210.31 1490.93,1210.31 1491.51,1210.31 1492.1,1210.31 1492.69,1210.31 1493.27,1210.31 1493.86,1210.31 1494.45,1210.31 1495.03,1210.31 1495.62,1210.31 1496.2,1210.31 1496.79,1210.31 1497.38,1210.31 1497.96,1210.31 1498.55,1210.31 1499.14,1210.31 1499.72,1210.31 1500.31,1210.31 1500.9,1210.31 1501.48,1210.31 1502.07,1210.31 1502.65,1210.31 1503.24,1210.31 1503.83,1210.31 1504.41,1210.31 1505,1210.31 1505.59,1210.31 1506.17,1210.31 1506.76,1210.31 1507.35,1210.31 1507.93,1210.31 1508.52,1210.31 1509.11,1210.31 1509.69,1210.31 1510.28,1210.31 1510.86,1210.31 1511.45,1210.31 1512.04,1210.31 1512.62,1210.31 1513.21,1210.31 1513.8,1210.31 1514.38,1210.31 1514.97,1210.31 1515.56,1210.31 1516.14,1210.31 1516.73,1210.31 1517.32,1210.31 1517.9,1210.31 1518.49,1210.31 1519.07,1210.31 1519.66,1210.31 1520.25,1210.31 1520.83,1210.31 1521.42,1210.31 1522.01,1210.31 1522.59,1210.31 1523.18,1210.31 1523.77,1210.31 1524.35,1210.31 1524.94,1210.31 1525.52,1210.31 1526.11,1210.31 1526.7,1210.31 1527.28,1210.31 1527.87,1210.31 1528.46,1210.31 1529.04,1210.31 1529.63,1210.31 1530.22,1210.31 1530.8,1210.31 1531.39,1210.31 1531.98,1210.31 1532.56,1210.31 1533.15,1210.31 1533.73,1210.31 1534.32,1210.31 1534.91,1210.31 1535.49,1210.31 1536.08,1210.31 1536.67,1210.31 1537.25,1210.31 1537.84,1210.31 1538.43,1210.31 1539.01,1210.31 1539.6,1210.31 1540.19,1210.31 1540.77,1210.31 1541.36,1210.31 1541.94,1210.31 1542.53,1210.31 1543.12,1210.31 1543.7,1210.31 1544.29,1210.31 1544.88,1210.31 1545.46,1210.31 1546.05,1210.31 1546.64,1210.31 1547.22,1210.31 1547.81,1210.31 1548.4,1210.31 1548.98,1210.31 1549.57,1210.31 1550.15,1210.31 1550.74,1210.31 1551.33,1210.31 1551.91,1210.31 1552.5,1210.31 1553.09,1210.31 1553.67,1210.31 1554.26,1210.31 1554.85,1210.31 1555.43,1210.31 1556.02,1210.31 1556.6,1210.31 1557.19,1210.31 1557.78,1210.31 1558.36,1210.31 1558.95,1210.31 1559.54,1210.31 1560.12,1210.31 1560.71,1210.31 1561.3,1210.31 1561.88,1210.31 1562.47,1210.31 1563.06,1210.31 1563.64,1210.31 1564.23,1210.31 1564.81,1210.31 1565.4,1210.31 1565.99,1210.31 1566.57,1210.31 1567.16,1210.31 1567.75,1210.31 1568.33,1210.31 1568.92,1210.31 1569.51,1210.31 1570.09,1210.31 1570.68,1210.31 1571.27,1210.31 1571.85,1210.31 1572.44,1210.31 1573.02,1210.31 1573.61,1210.31 1574.2,1210.31 1574.78,1210.31 1575.37,1210.31 1575.96,1210.31 1576.54,1210.31 1577.13,1210.31 1577.72,1210.31 1578.3,1210.31 1578.89,1210.31 1579.47,1210.31 1580.06,1210.31 1580.65,1210.31 1581.23,1210.31 1581.82,1210.31 1582.41,1210.31 1582.99,1210.31 1583.58,1210.31 1584.17,1210.31 1584.75,1210.31 1585.34,1210.31 1585.93,1210.31 1586.51,1210.31 1587.1,1210.31 1587.68,1210.31 1588.27,1210.31 1588.86,1210.31 1589.44,1210.31 1590.03,1210.31 1590.62,1210.31 1591.2,1210.31 1591.79,1210.31 1592.38,1210.31 1592.96,1210.31 1593.55,1210.31 1594.14,1210.31 1594.72,1210.31 1595.31,1210.31 1595.89,1210.31 1596.48,1210.31 1597.07,1210.31 1597.65,1210.31 1598.24,1210.31 1598.83,1210.31 1599.41,1210.31 1600,1210.31 1600.59,1210.31 1601.17,1210.31 1601.76,1210.31 1602.34,1210.31 1602.93,1210.31 1603.52,1210.31 1604.1,1210.31 1604.69,1210.31 1605.28,1210.31 1605.86,1210.31 1606.45,1210.31 1607.04,1210.31 1607.62,1210.31 1608.21,1210.31 1608.8,1210.31 1609.38,1210.31 1609.97,1210.31 1610.55,1210.31 1611.14,1210.31 1611.73,1210.31 1612.31,1210.31 1612.9,1210.31 1613.49,1210.31 1614.07,1210.31 1614.66,1210.31 1615.25,1210.31 1615.83,1210.31 1616.42,1210.31 1617.01,1210.31 1617.59,1210.31 1618.18,1210.31 1618.76,1210.31 1619.35,1210.31 1619.94,1210.31 1620.52,1210.31 1621.11,1210.31 1621.7,1210.31 1622.28,1210.31 1622.87,1210.31 1623.46,1210.31 1624.04,1210.31 1624.63,1210.31 1625.22,1210.31 1625.8,1210.31 1626.39,1210.31 1626.97,1210.31 1627.56,1210.31 1628.15,1210.31 1628.73,1210.31 1629.32,1210.31 1629.91,1210.31 1630.49,1210.31 1631.08,1210.31 1631.67,1210.31 1632.25,1210.31 1632.84,1210.31 1633.42,1210.31 1634.01,1210.31 1634.6,1210.31 1635.18,1210.31 1635.77,1210.31 1636.36,1210.31 1636.94,1210.31 1637.53,1210.31 1638.12,1210.31 1638.7,1210.31 1639.29,1210.31 1639.88,1210.31 1640.46,1210.31 1641.05,1210.31 1641.63,1210.31 1642.22,1210.31 1642.81,1210.31 1643.39,1210.31 1643.98,1210.31 1644.57,1210.31 1645.15,1210.31 1645.74,1210.31 1646.33,1210.31 1646.91,1210.31 1647.5,1210.31 1648.09,1210.31 1648.67,1210.31 1649.26,1210.31 1649.84,1210.31 1650.43,1210.31 1651.02,1210.31 1651.6,1210.31 1652.19,1210.31 1652.78,1210.31 1653.36,1210.31 1653.95,1210.31 1654.54,1210.31 1655.12,1210.31 1655.71,1210.31 1656.29,1210.31 1656.88,1210.31 1657.47,1210.31 1658.05,1210.31 1658.64,1210.31 1659.23,1210.31 1659.81,1210.31 1660.4,1210.31 1660.99,1210.31 1661.57,1210.31 1662.16,1210.31 1662.75,1210.31 1663.33,1210.31 1663.92,1210.31 1664.5,1210.31 1665.09,1210.31 1665.68,1210.31 1666.26,1210.31 1666.85,1210.31 1667.44,1210.31 1668.02,1210.31 1668.61,1210.31 1669.2,1210.31 1669.78,1210.31 1670.37,1210.31 1670.96,1210.31 1671.54,1210.31 1672.13,1210.31 1672.71,1210.31 1673.3,1210.31 1673.89,1210.31 1674.47,1210.31 1675.06,1210.31 1675.65,1210.31 1676.23,1210.31 1676.82,1210.31 1677.41,1210.31 1677.99,1210.31 1678.58,1210.31 1679.17,1210.31 1679.75,1210.31 1680.34,1210.31 1680.92,1210.31 1681.51,1210.31 1682.1,1210.31 1682.68,1210.31 1683.27,1210.31 1683.86,1210.31 1684.44,1210.31 1685.03,1210.31 1685.62,1210.31 1686.2,1210.31 1686.79,1210.31 1687.37,1210.31 1687.96,1210.31 1688.55,1210.31 1689.13,1210.31 1689.72,1210.31 1690.31,1210.31 1690.89,1210.31 1691.48,1210.31 1692.07,1210.31 1692.65,1210.31 1693.24,1210.31 1693.83,1210.31 1694.41,1210.31 1695,1210.31 1695.58,1210.31 1696.17,1210.31 1696.76,1210.31 1697.34,1210.31 1697.93,1210.31 1698.52,1210.31 1699.1,1210.31 1699.69,1210.31 1700.28,1210.31 1700.86,1210.31 1701.45,1210.31 1702.04,1210.31 1702.62,1210.31 1703.21,1210.31 1703.79,1210.31 1704.38,1210.31 1704.97,1210.31 1705.55,1210.31 1706.14,1210.31 1706.73,1210.31 1707.31,1210.31 1707.9,1210.31 1708.49,1210.31 1709.07,1210.31 1709.66,1210.31 1710.24,1210.31 1710.83,1210.31 1711.42,1210.31 1712,1210.31 1712.59,1210.31 1713.18,1210.31 1713.76,1210.31 1714.35,1210.31 1714.94,1210.31 1715.52,1210.31 1716.11,1210.31 1716.7,1210.31 1717.28,1210.31 1717.87,1210.31 1718.45,1210.31 1719.04,1210.31 1719.63,1210.31 1720.21,1210.31 1720.8,1210.31 1721.39,1210.31 1721.97,1210.31 1722.56,1210.31 1723.15,1210.31 1723.73,1210.31 1724.32,1210.31 1724.91,1210.31 1725.49,1210.31 1726.08,1210.31 1726.66,1210.31 1727.25,1210.31 1727.84,1210.31 1728.42,1210.31 1729.01,1210.31 1729.6,1210.31 1730.18,1210.31 1730.77,1210.31 1731.36,1210.31 1731.94,1210.31 1732.53,1210.31 1733.11,1210.31 1733.7,1210.31 1734.29,1210.31 1734.87,1210.31 1735.46,1210.31 1736.05,1210.31 1736.63,1210.31 1737.22,1210.31 1737.81,1210.31 1738.39,1210.31 1738.98,1210.31 1739.57,1210.31 1740.15,1210.31 1740.74,1210.31 1741.32,1210.31 1741.91,1210.31 1742.5,1210.31 1743.08,1210.31 1743.67,1210.31 1744.26,1210.31 1744.84,1210.31 1745.43,1210.31 1746.02,1210.31 1746.6,1210.31 1747.19,1210.31 1747.78,1210.31 1748.36,1210.31 1748.95,1210.31 1749.53,1210.31 1750.12,1210.31 1750.71,1210.31 1751.29,1210.31 1751.88,1210.31 1752.47,1210.31 1753.05,1210.31 1753.64,1210.31 1754.23,1210.31 1754.81,1210.31 1755.4,1210.31 1755.99,1210.31 1756.57,1210.31 1757.16,1210.31 1757.74,1210.31 1758.33,1210.31 1758.92,1210.31 1759.5,1210.31 1760.09,1210.31 1760.68,1210.31 1761.26,1210.31 1761.85,1210.31 1762.44,1210.31 1763.02,1210.31 1763.61,1210.31 1764.19,1210.31 1764.78,1210.31 1765.37,1210.31 1765.95,1210.31 1766.54,1210.31 1767.13,1210.31 1767.71,1210.31 1768.3,1210.31 1768.89,1210.31 1769.47,1210.31 1770.06,1210.31 1770.65,1210.31 1771.23,1210.31 1771.82,1210.31 1772.4,1210.31 1772.99,1210.31 1773.58,1210.31 1774.16,1210.31 1774.75,1210.31 1775.34,1210.31 1775.92,1210.31 1776.51,1210.31 1777.1,1210.31 1777.68,1210.31 1778.27,1210.31 1778.86,1210.31 1779.44,1210.31 1780.03,1210.31 1780.61,1210.31 1781.2,1210.31 1781.79,1210.31 1782.37,1210.31 1782.96,1210.31 1783.55,1210.31 1784.13,1210.31 1784.72,1210.31 1785.31,1210.31 1785.89,1210.31 1786.48,1210.31 1787.06,1210.31 1787.65,1210.31 1788.24,1210.31 1788.82,1210.31 1789.41,1210.31 1790,1210.31 1790.58,1210.31 1791.17,1210.31 1791.76,1210.31 1792.34,1210.31 1792.93,1210.31 1793.52,1210.31 1794.1,1210.31 1794.69,1210.31 1795.27,1210.31 1795.86,1210.31 1796.45,1210.31 1797.03,1210.31 1797.62,1210.31 1798.21,1210.31 1798.79,1210.31 1799.38,1210.31 1799.97,1210.31 1800.55,1210.31 1801.14,1210.31 1801.73,1210.31 1802.31,1210.31 1802.9,1210.31 1803.48,1210.31 1804.07,1210.31 1804.66,1210.31 1805.24,1210.31 1805.83,1210.31 1806.42,1210.31 1807,1210.31 1807.59,1210.31 1808.18,1210.31 1808.76,1210.31 1809.35,1210.31 1809.94,1210.31 1810.52,1210.31 1811.11,1210.31 1811.69,1210.31 1812.28,1210.31 1812.87,1210.31 1813.45,1210.31 1814.04,1210.31 1814.63,1210.31 1815.21,1210.31 1815.8,1210.31 1816.39,1210.31 1816.97,1210.31 1817.56,1210.31 1818.14,1210.31 1818.73,1210.31 1819.32,1210.31 1819.9,1210.31 1820.49,1210.31 1821.08,1210.31 1821.66,1210.31 1822.25,1210.31 1822.84,1210.31 1823.42,1210.31 1824.01,1210.31 1824.6,1210.31 1825.18,1210.31 1825.77,1210.31 1826.35,1210.31 1826.94,1210.31 1827.53,1210.31 1828.11,1210.31 1828.7,1210.31 1829.29,1210.31 1829.87,1210.31 1830.46,1210.31 1831.05,1210.31 1831.63,1210.31 1832.22,1210.31 1832.81,1210.31 1833.39,1210.31 1833.98,1210.31 1834.56,1210.31 1835.15,1210.31 1835.74,1210.31 1836.32,1210.31 1836.91,1210.31 1837.5,1210.31 1838.08,1210.31 1838.67,1210.31 1839.26,1210.31 1839.84,1210.31 1840.43,1210.31 1841.01,1210.31 1841.6,1210.31 1842.19,1210.31 1842.77,1210.31 1843.36,1210.31 1843.95,1210.31 1844.53,1210.31 1845.12,1210.31 1845.71,1210.31 1846.29,1210.31 1846.88,1210.31 1847.47,1210.31 1848.05,1210.31 1848.64,1210.31 1849.22,1210.31 1849.81,1210.31 1850.4,1210.31 1850.98,1210.31 1851.57,1210.31 1852.16,1210.31 1852.74,1210.31 1853.33,1210.31 1853.92,1210.31 1854.5,1210.31 1855.09,1210.31 1855.68,1210.31 1856.26,1210.31 1856.85,1210.31 1857.43,1210.31 1858.02,1210.31 1858.61,1210.31 1859.19,1210.31 1859.78,1210.31 1860.37,1210.31 1860.95,1210.31 1861.54,1210.31 1862.13,1210.31 1862.71,1210.31 1863.3,1210.31 1863.88,1210.31 1864.47,1210.31 1865.06,1210.31 1865.64,1210.31 1866.23,1210.31 1866.82,1210.31 1867.4,1210.31 1867.99,1210.31 1868.58,1210.31 1869.16,1210.31 1869.75,1210.31 1870.34,1210.31 1870.92,1210.31 1871.51,1210.31 1872.09,1210.31 1872.68,1210.31 1873.27,1210.31 1873.85,1210.31 1874.44,1210.31 1875.03,1210.31 1875.61,1210.31 1876.2,1210.31 1876.79,1210.31 1877.37,1210.31 1877.96,1210.31 1878.55,1210.31 1879.13,1210.31 1879.72,1210.31 1880.3,1210.31 1880.89,1210.31 1881.48,1210.31 1882.06,1210.31 1882.65,1210.31 1883.24,1210.31 1883.82,1210.31 1884.41,1210.31 1885,1210.31 1885.58,1210.31 1886.17,1210.31 1886.76,1210.31 1887.34,1210.31 1887.93,1210.31 1888.51,1210.31 1889.1,1210.31 1889.69,1210.31 1890.27,1210.31 1890.86,1210.31 1891.45,1210.31 1892.03,1210.31 1892.62,1210.31 1893.21,1210.31 1893.79,1210.31 1894.38,1210.31 1894.96,1210.31 1895.55,1210.31 1896.14,1210.31 1896.72,1210.31 1897.31,1210.31 1897.9,1210.31 1898.48,1210.31 1899.07,1210.31 1899.66,1210.31 1900.24,1210.31 1900.83,1210.31 1901.42,1210.31 1902,1210.31 1902.59,1210.31 1903.17,1210.31 1903.76,1210.31 1904.35,1210.31 1904.93,1210.31 1905.52,1210.31 1906.11,1210.31 1906.69,1210.31 1907.28,1210.31 1907.87,1210.31 1908.45,1210.31 1909.04,1210.31 1909.63,1210.31 1910.21,1210.31 1910.8,1210.31 1911.38,1210.31 1911.97,1210.31 1912.56,1210.31 1913.14,1210.31 1913.73,1210.31 1914.32,1210.31 1914.9,1210.31 1915.49,1210.31 1916.08,1210.31 1916.66,1210.31 1917.25,1210.31 1917.83,1210.31 1918.42,1210.31 1919.01,1210.31 1919.59,1210.31 1920.18,1210.31 1920.77,1210.31 1921.35,1210.31 1921.94,1210.31 1922.53,1210.31 1923.11,1210.31 1923.7,1210.31 1924.29,1210.31 1924.87,1210.31 1925.46,1210.31 1926.04,1210.31 1926.63,1210.31 1927.22,1210.31 1927.8,1210.31 1928.39,1210.31 1928.98,1210.31 1929.56,1210.31 1930.15,1210.31 1930.74,1210.31 1931.32,1210.31 1931.91,1210.31 1932.5,1210.31 1933.08,1210.31 1933.67,1210.31 1934.25,1210.31 1934.84,1210.31 1935.43,1210.31 1936.01,1210.31 1936.6,1210.31 1937.19,1210.31 1937.77,1210.31 1938.36,1210.31 1938.95,1210.31 1939.53,1210.31 1940.12,1210.31 1940.71,1210.31 1941.29,1210.31 1941.88,1210.31 1942.46,1210.31 1943.05,1210.31 1943.64,1210.31 1944.22,1210.31 1944.81,1210.31 1945.4,1210.31 1945.98,1210.31 1946.57,1210.31 1947.16,1210.31 1947.74,1210.31 1948.33,1210.31 1948.91,1210.31 1949.5,1210.31 1950.09,1210.31 1950.67,1210.31 1951.26,1210.31 1951.85,1210.31 1952.43,1210.31 1953.02,1210.31 1953.61,1210.31 1954.19,1210.31 1954.78,1210.31 1955.37,1210.31 1955.95,1210.31 1956.54,1210.31 1957.12,1210.31 1957.71,1210.31 1958.3,1210.31 1958.88,1210.31 1959.47,1210.31 1960.06,1210.31 1960.64,1210.31 1961.23,1210.31 1961.82,1210.31 1962.4,1210.31 1962.99,1210.31 1963.58,1210.31 1964.16,1210.31 1964.75,1210.31 1965.33,1210.31 1965.92,1210.31 1966.51,1210.31 1967.09,1210.31 1967.68,1210.31 1968.27,1210.31 1968.85,1210.31 1969.44,1210.31 1970.03,1210.31 1970.61,1210.31 1971.2,1210.31 1971.78,1210.31 1972.37,1210.31 1972.96,1210.31 1973.54,1210.31 1974.13,1210.31 1974.72,1210.31 1975.3,1210.31 1975.89,1210.31 1976.48,1210.31 1977.06,1210.31 1977.65,1210.31 1978.24,1210.31 1978.82,1210.31 1979.41,1210.31 1979.99,1210.31 1980.58,1210.31 1981.17,1210.31 1981.75,1210.31 1982.34,1210.31 1982.93,1210.31 1983.51,1210.31 1984.1,1210.31 1984.69,1210.31 1985.27,1210.31 1985.86,1210.31 1986.45,1210.31 1987.03,1210.31 1987.62,1210.31 1988.2,1210.31 1988.79,1210.31 1989.38,1210.31 1989.96,1210.31 1990.55,1210.31 1991.14,1210.31 1991.72,1210.31 1992.31,1210.31 1992.9,1210.31 1993.48,1210.31 1994.07,1210.31 1994.65,1210.31 1995.24,1210.31 1995.83,1210.31 1996.41,1210.31 1997,1210.31 1997.59,1210.31 1998.17,1210.31 1998.76,1210.31 1999.35,1210.31 1999.93,1210.31 2000.52,1210.31 2001.11,1210.31 2001.69,1210.31 2002.28,1210.31 2002.86,1210.31 2003.45,1210.31 2004.04,1210.31 2004.62,1210.31 2005.21,1210.31 2005.8,1210.31 2006.38,1210.31 2006.97,1210.31 2007.56,1210.31 2008.14,1210.31 2008.73,1210.31 2009.32,1210.31 2009.9,1210.31 2010.49,1210.31 2011.07,1210.31 2011.66,1210.31 2012.25,1210.31 2012.83,1210.31 2013.42,1210.31 2014.01,1210.31 2014.59,1210.31 2015.18,1210.31 2015.77,1210.31 2016.35,1210.31 2016.94,1210.31 2017.53,1210.31 2018.11,1210.31 2018.7,1210.31 2019.28,1210.31 2019.87,1210.31 2020.46,1210.31 2021.04,1210.31 2021.63,1210.31 2022.22,1210.31 2022.8,1210.31 2023.39,1210.31 2023.98,1210.31 2024.56,1210.31 2025.15,1210.31 2025.73,1210.31 2026.32,1210.31 2026.91,1210.31 2027.49,1210.31 2028.08,1210.31 2028.67,1210.31 2029.25,1210.31 2029.84,1210.31 2030.43,1210.31 2031.01,1210.31 2031.6,1210.31 2032.19,1210.31 2032.77,1210.31 2033.36,1210.31 2033.94,1210.31 2034.53,1210.31 2035.12,1210.31 2035.7,1210.31 2036.29,1210.31 2036.88,1210.31 2037.46,1210.31 2038.05,1210.31 2038.64,1210.31 2039.22,1210.31 2039.81,1210.31 2040.4,1210.31 2040.98,1210.31 2041.57,1210.31 2042.15,1210.31 2042.74,1210.31 2043.33,1210.31 2043.91,1210.31 2044.5,1210.31 2045.09,1210.31 2045.67,1210.31 2046.26,1210.31 2046.85,1210.31 2047.43,1210.31 2048.02,1210.31 2048.6,1210.31 2049.19,1210.31 2049.78,1210.31 2050.36,1210.31 2050.95,1210.31 2051.54,1210.31 2052.12,1210.31 2052.71,1210.31 2053.3,1210.31 2053.88,1210.31 2054.47,1210.31 2055.06,1210.31 2055.64,1210.31 2056.23,1210.31 2056.81,1210.31 2057.4,1210.31 2057.99,1210.31 2058.57,1210.31 2059.16,1210.31 2059.75,1210.31 2060.33,1210.31 2060.92,1210.31 2061.51,1210.31 2062.09,1210.31 2062.68,1210.31 2063.27,1210.31 2063.85,1210.31 2064.44,1210.31 2065.02,1210.31 2065.61,1210.31 2066.2,1210.31 2066.78,1210.31 2067.37,1210.31 2067.96,1210.31 2068.54,1210.31 2069.13,1210.31 2069.72,1210.31 2070.3,1210.31 2070.89,1210.31 2071.48,1210.31 2072.06,1210.31 2072.65,1210.31 2073.23,1210.31 2073.82,1210.31 2074.41,1210.31 2074.99,1210.31 2075.58,1210.31 2076.17,1210.31 2076.75,1210.31 2077.34,1210.31 2077.93,1210.31 2078.51,1210.31 2079.1,1210.31 2079.68,1210.31 2080.27,1210.31 2080.86,1210.31 2081.44,1210.31 2082.03,1210.31 2082.62,1210.31 2083.2,1210.31 2083.79,1210.31 2084.38,1210.31 2084.96,1210.31 2085.55,1210.31 2086.14,1210.31 2086.72,1210.31 2087.31,1210.31 2087.89,1210.31 2088.48,1210.31 2089.07,1210.31 2089.65,1210.31 2090.24,1210.31 2090.83,1210.31 2091.41,1210.31 2092,1210.31 2092.59,1210.31 2093.17,1210.31 2093.76,1210.31 2094.35,1210.31 2094.93,1210.31 2095.52,1210.31 2096.1,1210.31 2096.69,1210.31 2097.28,1210.31 2097.86,1210.31 2098.45,1210.31 2099.04,1210.31 2099.62,1210.31 2100.21,1210.31 2100.8,1210.31 2101.38,1210.31 2101.97,1210.31 2102.55,1210.31 2103.14,1210.31 2103.73,1210.31 2104.31,1210.31 2104.9,1210.31 2105.49,1210.31 2106.07,1210.31 2106.66,1210.31 2107.25,1210.31 2107.83,1210.31 2108.42,1210.31 2109.01,1210.31 2109.59,1210.31 2110.18,1210.31 2110.76,1210.31 2111.35,1210.31 2111.94,1210.31 2112.52,1210.31 2113.11,1210.31 2113.7,1210.31 2114.28,1210.31 2114.87,1210.31 2115.46,1210.31 2116.04,1210.31 2116.63,1210.31 2117.22,1210.31 2117.8,1210.31 2118.39,1210.31 2118.97,1210.31 2119.56,1210.31 2120.15,1210.31 2120.73,1210.31 2121.32,1210.31 2121.91,1210.31 2122.49,1210.31 2123.08,1210.31 2123.67,1210.31 2124.25,1210.31 2124.84,1210.31 2125.42,1210.31 2126.01,1210.31 2126.6,1210.31 2127.18,1210.31 2127.77,1210.31 2128.36,1210.31 2128.94,1210.31 2129.53,1210.31 2130.12,1210.31 2130.7,1210.31 2131.29,1210.31 2131.88,1210.31 2132.46,1210.31 2133.05,1210.31 2133.63,1210.31 2134.22,1210.31 2134.81,1210.31 2135.39,1210.31 2135.98,1210.31 2136.57,1210.31 2137.15,1210.31 2137.74,1210.31 2138.33,1210.31 2138.91,1210.31 2139.5,1210.31 2140.09,1210.31 2140.67,1210.31 2141.26,1210.31 2141.84,1210.31 2142.43,1210.31 2143.02,1210.31 2143.6,1210.31 2144.19,1210.31 2144.78,1210.31 2145.36,1210.31 2145.95,1210.31 2146.54,1210.31 2147.12,1210.31 2147.71,1210.31 2148.3,1210.31 2148.88,1210.31 2149.47,1210.31 2150.05,1210.31 2150.64,1210.31 2151.23,1210.31 2151.81,1210.31 2152.4,1210.31 2152.99,1210.31 2153.57,1210.31 2154.16,1210.31 2154.75,1210.31 2155.33,1210.31 2155.92,1210.31 2156.5,1210.31 2157.09,1210.31 2157.68,1210.31 2158.26,1210.31 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1210.23 L986.612 1210.23 L987.198 1210.23 L987.785 1210.23 L988.371 1210.23 L988.957 1210.23 L989.544 1210.23 L990.13 1210.23 L990.717 1210.23 L991.303 1210.23 L991.889 1210.23 L992.476 1210.23 L993.062 1210.23 L993.649 1210.23 L994.235 1210.23 L994.822 1210.23 L995.408 1210.23 L995.994 1210.23 L996.581 1210.23 L997.167 1210.23 L997.754 1210.23 L998.34 1210.23 L998.926 1210.23 L999.513 1210.23 L1000.1 1210.23 L1000.69 1210.23 L1001.27 1210.23 L1001.86 1210.23 L1002.44 1210.23 L1003.03 1210.23 L1003.62 1210.23 L1004.2 1210.23 L1004.79 1210.23 L1005.38 1210.23 L1005.96 1210.23 L1006.55 1210.23 L1007.14 1210.23 L1007.72 1210.23 L1008.31 1210.23 L1008.9 1210.23 L1009.48 1210.23 L1010.07 1210.23 L1010.65 1210.23 L1011.24 1210.23 L1011.83 1210.23 L1012.41 1210.23 L1013 1210.23 L1013.59 1210.23 L1014.17 1210.23 L1014.76 1210.23 L1015.35 1210.23 L1015.93 1210.23 L1016.52 1210.23 L1017.11 1210.23 L1017.69 1210.23 L1018.28 1210.23 L1018.86 1210.23 L1019.45 1210.23 L1020.04 1210.23 L1020.62 1210.23 L1021.21 1210.23 L1021.8 1210.23 L1022.38 1210.23 L1022.97 1210.23 L1023.56 1210.23 L1024.14 1210.23 L1024.73 1210.23 L1025.32 1210.23 L1025.9 1210.23 L1026.49 1210.23 L1027.07 1210.23 L1027.66 1210.23 L1028.25 1210.23 L1028.83 1210.23 L1029.42 1210.23 L1030.01 1210.23 L1030.59 1210.23 L1031.18 1210.23 L1031.77 1210.23 L1032.35 1210.23 L1032.94 1210.23 L1033.52 1210.23 L1034.11 1210.23 L1034.7 1210.23 L1035.28 1210.23 L1035.87 1210.23 L1036.46 1210.23 L1037.04 1210.23 L1037.63 1210.23 L1038.22 1210.23 L1038.8 1210.23 L1039.39 1210.23 L1039.98 1210.23 L1040.56 1210.23 L1041.15 1210.23 L1041.73 1210.23 L1042.32 1210.23 L1042.91 1210.23 L1043.49 1210.23 L1044.08 1210.23 L1044.67 1210.23 L1045.25 1210.23 L1045.84 1210.23 L1046.43 1210.23 L1047.01 1210.23 L1047.6 1210.23 L1048.19 1210.23 L1048.77 1210.23 L1049.36 1210.23 L1049.94 1210.23 L1050.53 1210.23 L1051.12 1210.23 L1051.7 1210.23 L1052.29 1210.23 L1052.88 1210.23 L1053.46 1210.23 L1054.05 1210.23 L1054.64 1210.23 L1055.22 1210.23 L1055.81 1210.23 L1056.39 1210.23 L1056.98 1210.23 L1057.57 1210.23 L1058.15 1210.23 L1058.74 1210.23 L1059.33 1210.23 L1059.91 1210.23 L1060.5 1210.23 L1061.09 1210.23 L1061.67 1210.23 L1062.26 1210.23 L1062.85 1210.23 L1063.43 1210.23 L1064.02 1210.23 L1064.6 1210.23 L1065.19 1210.23 L1065.78 1210.23 L1066.36 1210.23 L1066.95 1210.23 L1067.54 1210.23 L1068.12 1210.23 L1068.71 1210.23 L1069.3 1210.23 L1069.88 1210.23 L1070.47 1210.23 L1071.06 1210.23 L1071.64 1210.23 L1072.23 1210.23 L1072.81 1210.23 L1073.4 1210.23 L1073.99 1210.23 L1074.57 1210.23 L1075.16 1210.23 L1075.75 1210.23 L1076.33 1210.23 L1076.92 1210.23 L1077.51 1210.23 L1078.09 1210.23 L1078.68 1210.23 L1079.26 1210.23 L1079.85 1210.23 L1080.44 1210.23 L1081.02 1210.23 L1081.61 1210.23 L1082.2 1210.23 L1082.78 1210.23 L1083.37 1210.23 L1083.96 1210.23 L1084.54 1210.23 L1085.13 1210.23 L1085.72 1210.23 L1086.3 1210.23 L1086.89 1210.23 L1087.47 1210.23 L1088.06 1210.23 L1088.65 1210.23 L1089.23 1210.23 L1089.82 1210.23 L1090.41 1210.23 L1090.99 1210.23 L1091.58 1210.23 L1092.17 1210.23 L1092.75 1210.23 L1093.34 1210.23 L1093.93 1210.23 L1094.51 1210.23 L1095.1 1210.23 L1095.68 1210.23 L1096.27 1210.23 L1096.86 1210.23 L1097.44 1210.23 L1098.03 1210.23 L1098.62 1210.23 L1099.2 1210.23 L1099.79 1210.23 L1100.38 1210.23 L1100.96 1210.23 L1101.55 1210.23 L1102.14 1210.23 L1102.72 1210.23 L1103.31 1210.23 L1103.89 1210.23 L1104.48 1210.23 L1105.07 1210.23 L1105.65 1210.23 L1106.24 1210.23 L1106.83 1210.23 L1107.41 1210.23 L1108 1210.23 L1108.59 1210.23 L1109.17 1210.23 L1109.76 1210.23 L1110.34 1210.23 L1110.93 1210.23 L1111.52 1210.23 L1112.1 1210.23 L1112.69 1210.23 L1113.28 1210.23 L1113.86 1210.23 L1114.45 1210.23 L1115.04 1210.23 L1115.62 1210.23 L1116.21 1210.23 L1116.8 1210.23 L1117.38 1210.23 L1117.97 1210.23 L1118.55 1210.23 L1119.14 1210.23 L1119.73 1210.23 L1120.31 1210.23 L1120.9 1210.23 L1121.49 1210.23 L1122.07 1210.23 L1122.66 1210.23 L1123.25 1210.23 L1123.83 1210.23 L1124.42 1210.23 L1125.01 1210.23 L1125.59 1210.23 L1126.18 1210.23 L1126.76 1210.23 L1127.35 1210.23 L1127.94 1210.23 L1128.52 1210.23 L1129.11 1210.23 L1129.7 1210.23 L1130.28 1210.23 L1130.87 1210.23 L1131.46 1210.23 L1132.04 1210.23 L1132.63 1210.23 L1133.21 1210.23 L1133.8 1210.23 L1134.39 1210.23 L1134.97 1210.23 L1135.56 1210.23 L1136.15 1210.23 L1136.73 1210.23 L1137.32 1210.23 L1137.91 1210.23 L1138.49 1210.23 L1139.08 1210.23 L1139.67 1210.23 L1140.25 1210.23 L1140.84 1210.23 L1141.42 1210.23 L1142.01 1210.23 L1142.6 1210.23 L1143.18 1210.23 L1143.77 1210.23 L1144.36 1210.23 L1144.94 1210.23 L1145.53 1210.23 L1146.12 1210.23 L1146.7 1210.23 L1147.29 1210.23 L1147.88 1210.23 L1148.46 1210.23 L1149.05 1210.23 L1149.63 1210.23 L1150.22 1210.23 L1150.81 1210.23 L1151.39 1210.23 L1151.98 1210.23 L1152.57 1210.23 L1153.15 1210.23 L1153.74 1210.23 L1154.33 1210.23 L1154.91 1210.23 L1155.5 1210.23 L1156.09 1210.23 L1156.67 1210.23 L1157.26 1210.23 L1157.84 1210.23 L1158.43 1210.23 L1159.02 1210.23 L1159.6 1210.23 L1160.19 1210.23 L1160.78 1210.23 L1161.36 1210.23 L1161.95 1210.23 L1162.54 1210.23 L1163.12 1210.23 L1163.71 1210.23 L1164.29 1210.23 L1164.88 1210.23 L1165.47 1210.23 L1166.05 1210.23 L1166.64 1210.23 L1167.23 1210.23 L1167.81 1210.23 L1168.4 1210.23 L1168.99 1210.23 L1169.57 1210.23 L1170.16 1210.23 L1170.75 1210.23 L1171.33 1210.23 L1171.92 1210.23 L1172.5 1210.23 L1173.09 1210.23 L1173.68 1210.23 L1174.26 1210.23 L1174.85 1210.23 L1175.44 1210.23 L1176.02 1210.23 L1176.61 1210.23 L1177.2 1210.23 L1177.78 1210.23 L1178.37 1210.23 L1178.96 1210.23 L1179.54 1210.23 L1180.13 1210.23 L1180.71 1210.23 L1181.3 1210.23 L1181.89 1210.23 L1182.47 1210.23 L1183.06 1210.23 L1183.65 1210.23 L1184.23 1210.23 L1184.82 1210.23 L1185.41 1210.23 L1185.99 1210.23 L1186.58 1210.23 L1187.16 1210.23 L1187.75 1210.23 L1188.34 1210.23 L1188.92 1210.23 L1189.51 1210.23 L1190.1 1210.23 L1190.68 1210.23 L1191.27 1210.23 L1191.86 1210.23 L1192.44 1210.23 L1193.03 1210.23 L1193.62 1210.23 L1194.2 1210.23 L1194.79 1210.23 L1195.37 1210.23 L1195.96 1210.23 L1196.55 1210.23 L1197.13 1210.23 L1197.72 1210.23 L1198.31 1210.23 L1198.89 1210.23 L1199.48 1210.23 L1200.07 1210.23 L1200.65 1210.23 L1201.24 1210.23 L1201.83 1210.23 L1202.41 1210.23 L1203 1210.23 L1203.58 1210.23 L1204.17 1210.23 L1204.76 1210.23 L1205.34 1210.23 L1205.93 1210.23 L1206.52 1210.23 L1207.1 1210.23 L1207.69 1210.23 L1208.28 1210.23 L1208.86 1210.23 L1209.45 1210.23 L1210.03 1210.23 L1210.62 1210.23 L1211.21 1210.23 L1211.79 1210.23 L1212.38 1210.23 L1212.97 1210.23 L1213.55 1210.23 L1214.14 1210.23 L1214.73 1210.23 L1215.31 1210.23 L1215.9 1210.23 L1216.49 1210.23 L1217.07 1210.23 L1217.66 1210.23 L1218.24 1210.23 L1218.83 1210.23 L1219.42 1210.23 L1220 1210.23 L1220.59 1210.23 L1221.18 1210.23 L1221.76 1210.23 L1222.35 1210.23 L1222.94 1210.23 L1223.52 1210.23 L1224.11 1210.23 L1224.7 1210.23 L1225.28 1210.23 L1225.87 1210.23 L1226.45 1210.23 L1227.04 1210.23 L1227.63 1210.23 L1228.21 1210.23 L1228.8 1210.23 L1229.39 1210.23 L1229.97 1210.23 L1230.56 1210.23 L1231.15 1210.23 L1231.73 1210.23 L1232.32 1210.23 L1232.91 1210.23 L1233.49 1210.23 L1234.08 1210.23 L1234.66 1210.23 L1235.25 1210.23 L1235.84 1210.23 L1236.42 1210.23 L1237.01 1210.23 L1237.6 1210.23 L1238.18 1210.23 L1238.77 1210.23 L1239.36 1210.23 L1239.94 1210.23 L1240.53 1210.23 L1241.11 1210.23 L1241.7 1210.23 L1242.29 1210.23 L1242.87 1210.23 L1243.46 1210.23 L1244.05 1210.23 L1244.63 1210.23 L1245.22 1210.23 L1245.81 1210.23 L1246.39 1210.23 L1246.98 1210.23 L1247.57 1210.23 L1248.15 1210.23 L1248.74 1210.23 L1249.32 1210.23 L1249.91 1210.23 L1250.5 1210.23 L1251.08 1210.23 L1251.67 1210.23 L1252.26 1210.23 L1252.84 1210.23 L1253.43 1210.23 L1254.02 1210.23 L1254.6 1210.23 L1255.19 1210.23 L1255.78 1210.23 L1256.36 1210.23 L1256.95 1210.23 L1257.53 1210.23 L1258.12 1210.23 L1258.71 1210.23 L1259.29 1210.23 L1259.88 1210.23 L1260.47 1210.23 L1261.05 1210.23 L1261.64 1210.23 L1262.23 1210.23 L1262.81 1210.23 L1263.4 1210.23 L1263.98 1210.23 L1264.57 1210.23 L1265.16 1210.23 L1265.74 1210.23 L1266.33 1210.23 L1266.92 1210.23 L1267.5 1210.23 L1268.09 1210.23 L1268.68 1210.23 L1269.26 1210.23 L1269.85 1210.23 L1270.44 1210.23 L1271.02 1210.23 L1271.61 1210.23 L1272.19 1210.23 L1272.78 1210.23 L1273.37 1210.23 L1273.95 1210.23 L1274.54 1210.23 L1275.13 1210.23 L1275.71 1210.23 L1276.3 1210.23 L1276.89 1210.23 L1277.47 1210.23 L1278.06 1210.23 L1278.65 1210.23 L1279.23 1210.23 L1279.82 1210.23 L1280.4 1210.23 L1280.99 1210.23 L1281.58 1210.23 L1282.16 1210.23 L1282.75 1210.23 L1283.34 1210.23 L1283.92 1210.23 L1284.51 1210.23 L1285.1 1210.23 L1285.68 1210.23 L1286.27 1210.23 L1286.86 1210.23 L1287.44 1210.23 L1288.03 1210.23 L1288.61 1210.23 L1289.2 1210.23 L1289.79 1210.23 L1290.37 1210.23 L1290.96 1210.23 L1291.55 1210.23 L1292.13 1210.23 L1292.72 1210.23 L1293.31 1210.23 L1293.89 1210.23 L1294.48 1210.23 L1295.06 1210.23 L1295.65 1210.23 L1296.24 1210.23 L1296.82 1210.23 L1297.41 1210.23 L1298 1210.23 L1298.58 1210.23 L1299.17 1210.23 L1299.76 1210.23 L1300.34 1210.23 L1300.93 1210.23 L1301.52 1210.23 L1302.1 1210.23 L1302.69 1210.23 L1303.27 1210.23 L1303.86 1210.23 L1304.45 1210.23 L1305.03 1210.23 L1305.62 1210.23 L1306.21 1210.23 L1306.79 1210.23 L1307.38 1210.23 L1307.97 1210.23 L1308.55 1210.23 L1309.14 1210.23 L1309.73 1210.23 L1310.31 1210.23 L1310.9 1210.23 L1311.48 1210.23 L1312.07 1210.23 L1312.66 1210.23 L1313.24 1210.23 L1313.83 1210.23 L1314.42 1210.23 L1315 1210.23 L1315.59 1210.23 L1316.18 1210.23 L1316.76 1210.23 L1317.35 1210.23 L1317.93 1210.23 L1318.52 1210.23 L1319.11 1210.23 L1319.69 1210.23 L1320.28 1210.23 L1320.87 1210.23 L1321.45 1210.23 L1322.04 1210.23 L1322.63 1210.23 L1323.21 1210.23 L1323.8 1210.23 L1324.39 1210.23 L1324.97 1210.23 L1325.56 1210.23 L1326.14 1210.23 L1326.73 1210.23 L1327.32 1210.23 L1327.9 1210.23 L1328.49 1210.23 L1329.08 1210.23 L1329.66 1210.23 L1330.25 1210.23 L1330.84 1210.23 L1331.42 1210.23 L1332.01 1210.23 L1332.6 1210.23 L1333.18 1210.23 L1333.77 1210.23 L1334.35 1210.23 L1334.94 1210.23 L1335.53 1210.23 L1336.11 1210.23 L1336.7 1210.23 L1337.29 1210.23 L1337.87 1210.23 L1338.46 1210.23 L1339.05 1210.23 L1339.63 1210.23 L1340.22 1210.23 L1340.8 1210.23 L1341.39 1210.23 L1341.98 1210.23 L1342.56 1210.23 L1343.15 1210.23 L1343.74 1210.23 L1344.32 1210.23 L1344.91 1210.23 L1345.5 1210.23 L1346.08 1210.23 L1346.67 1210.23 L1347.26 1210.23 L1347.84 1210.23 L1348.43 1210.23 L1349.01 1210.23 L1349.6 1210.23 L1350.19 1210.23 L1350.77 1210.23 L1351.36 1210.23 L1351.95 1210.23 L1352.53 1210.23 L1353.12 1210.23 L1353.71 1210.23 L1354.29 1210.23 L1354.88 1210.23 L1355.47 1210.23 L1356.05 1210.23 L1356.64 1210.23 L1357.22 1210.23 L1357.81 1210.23 L1358.4 1210.23 L1358.98 1210.23 L1359.57 1210.23 L1360.16 1210.23 L1360.74 1210.23 L1361.33 1210.23 L1361.92 1210.23 L1362.5 1210.23 L1363.09 1210.23 L1363.68 1210.23 L1364.26 1210.23 L1364.85 1210.23 L1365.43 1210.23 L1366.02 1210.23 L1366.61 1210.23 L1367.19 1210.23 L1367.78 1210.23 L1368.37 1210.23 L1368.95 1210.23 L1369.54 1210.23 L1370.13 1210.23 L1370.71 1210.23 L1371.3 1210.23 L1371.88 1210.23 L1372.47 1210.23 L1373.06 1210.23 L1373.64 1210.23 L1374.23 1210.23 L1374.82 1210.23 L1375.4 1210.23 L1375.99 1210.23 L1376.58 1210.23 L1377.16 1210.23 L1377.75 1210.23 L1378.34 1210.23 L1378.92 1210.23 L1379.51 1210.23 L1380.09 1210.23 L1380.68 1210.23 L1381.27 1210.23 L1381.85 1210.23 L1382.44 1210.23 L1383.03 1210.23 L1383.61 1210.23 L1384.2 1210.23 L1384.79 1210.23 L1385.37 1210.23 L1385.96 1210.23 L1386.55 1210.23 L1387.13 1210.23 L1387.72 1210.23 L1388.3 1210.23 L1388.89 1210.23 L1389.48 1210.23 L1390.06 1210.23 L1390.65 1210.23 L1391.24 1210.23 L1391.82 1210.23 L1392.41 1210.23 L1393 1210.23 L1393.58 1210.23 L1394.17 1210.23 L1394.75 1210.23 L1395.34 1210.23 L1395.93 1210.23 L1396.51 1210.23 L1397.1 1210.23 L1397.69 1210.23 L1398.27 1210.23 L1398.86 1210.23 L1399.45 1210.23 L1400.03 1210.23 L1400.62 1210.23 L1401.21 1210.23 L1401.79 1210.23 L1402.38 1210.23 L1402.96 1210.23 L1403.55 1210.23 L1404.14 1210.23 L1404.72 1210.23 L1405.31 1210.23 L1405.9 1210.23 L1406.48 1210.23 L1407.07 1210.23 L1407.66 1210.23 L1408.24 1210.23 L1408.83 1210.23 L1409.42 1210.23 L1410 1210.23 L1410.59 1210.23 L1411.17 1210.23 L1411.76 1210.23 L1412.35 1210.23 L1412.93 1210.23 L1413.52 1210.23 L1414.11 1210.23 L1414.69 1210.23 L1415.28 1210.23 L1415.87 1210.23 L1416.45 1210.23 L1417.04 1210.23 L1417.63 1210.23 L1418.21 1210.23 L1418.8 1210.23 L1419.38 1210.23 L1419.97 1210.23 L1420.56 1210.23 L1421.14 1210.23 L1421.73 1210.23 L1422.32 1210.23 L1422.9 1210.23 L1423.49 1210.23 L1424.08 1210.23 L1424.66 1210.23 L1425.25 1210.23 L1425.83 1210.23 L1426.42 1210.23 L1427.01 1210.23 L1427.59 1210.23 L1428.18 1210.23 L1428.77 1210.23 L1429.35 1210.23 L1429.94 1210.23 L1430.53 1210.23 L1431.11 1210.23 L1431.7 1210.23 L1432.29 1210.23 L1432.87 1210.23 L1433.46 1210.23 L1434.04 1210.23 L1434.63 1210.23 L1435.22 1210.23 L1435.8 1210.23 L1436.39 1210.23 L1436.98 1210.23 L1437.56 1210.23 L1438.15 1210.23 L1438.74 1210.23 L1439.32 1210.23 L1439.91 1210.23 L1440.5 1210.23 L1441.08 1210.23 L1441.67 1210.23 L1442.25 1210.23 L1442.84 1210.23 L1443.43 1210.23 L1444.01 1210.23 L1444.6 1210.23 L1445.19 1210.23 L1445.77 1210.23 L1446.36 1210.23 L1446.95 1210.23 L1447.53 1210.23 L1448.12 1210.23 L1448.7 1210.23 L1449.29 1210.23 L1449.88 1210.23 L1450.46 1210.23 L1451.05 1210.23 L1451.64 1210.23 L1452.22 1210.23 L1452.81 1210.23 L1453.4 1210.23 L1453.98 1210.23 L1454.57 1210.23 L1455.16 1210.23 L1455.74 1210.23 L1456.33 1210.23 L1456.91 1210.23 L1457.5 1210.23 L1458.09 1210.23 L1458.67 1210.23 L1459.26 1210.23 L1459.85 1210.23 L1460.43 1210.23 L1461.02 1210.23 L1461.61 1210.23 L1462.19 1210.23 L1462.78 1210.23 L1463.37 1210.23 L1463.95 1210.23 L1464.54 1210.23 L1465.12 1210.23 L1465.71 1210.23 L1466.3 1210.23 L1466.88 1210.23 L1467.47 1210.23 L1468.06 1210.23 L1468.64 1210.23 L1469.23 1210.23 L1469.82 1210.23 L1470.4 1210.23 L1470.99 1210.23 L1471.57 1210.23 L1472.16 1210.23 L1472.75 1210.23 L1473.33 1210.23 L1473.92 1210.23 L1474.51 1210.23 L1475.09 1210.23 L1475.68 1210.23 L1476.27 1210.23 L1476.85 1210.23 L1477.44 1210.23 L1478.03 1210.23 L1478.61 1210.23 L1479.2 1210.23 L1479.78 1210.23 L1480.37 1210.23 L1480.96 1210.23 L1481.54 1210.23 L1482.13 1210.23 L1482.72 1210.23 L1483.3 1210.23 L1483.89 1210.23 L1484.48 1210.23 L1485.06 1210.23 L1485.65 1210.23 L1486.24 1210.23 L1486.82 1210.23 L1487.41 1210.23 L1487.99 1210.23 L1488.58 1210.23 L1489.17 1210.23 L1489.75 1210.23 L1490.34 1210.23 L1490.93 1210.23 L1491.51 1210.23 L1492.1 1210.23 L1492.69 1210.23 L1493.27 1210.23 L1493.86 1210.23 L1494.45 1210.23 L1495.03 1210.23 L1495.62 1210.23 L1496.2 1210.23 L1496.79 1210.23 L1497.38 1210.23 L1497.96 1210.23 L1498.55 1210.23 L1499.14 1210.23 L1499.72 1210.23 L1500.31 1210.23 L1500.9 1210.23 L1501.48 1210.23 L1502.07 1210.23 L1502.65 1210.23 L1503.24 1210.23 L1503.83 1210.23 L1504.41 1210.23 L1505 1210.23 L1505.59 1210.23 L1506.17 1210.23 L1506.76 1210.23 L1507.35 1210.23 L1507.93 1210.23 L1508.52 1210.23 L1509.11 1210.23 L1509.69 1210.23 L1510.28 1210.23 L1510.86 1210.23 L1511.45 1210.23 L1512.04 1210.23 L1512.62 1210.23 L1513.21 1210.23 L1513.8 1210.23 L1514.38 1210.23 L1514.97 1210.23 L1515.56 1210.23 L1516.14 1210.23 L1516.73 1210.23 L1517.32 1210.23 L1517.9 1210.23 L1518.49 1210.23 L1519.07 1210.23 L1519.66 1210.23 L1520.25 1210.23 L1520.83 1210.23 L1521.42 1210.23 L1522.01 1210.23 L1522.59 1210.23 L1523.18 1210.23 L1523.77 1210.23 L1524.35 1210.23 L1524.94 1210.23 L1525.52 1210.23 L1526.11 1210.23 L1526.7 1210.23 L1527.28 1210.23 L1527.87 1210.23 L1528.46 1210.23 L1529.04 1210.23 L1529.63 1210.23 L1530.22 1210.23 L1530.8 1210.23 L1531.39 1210.23 L1531.98 1210.23 L1532.56 1210.23 L1533.15 1210.23 L1533.73 1210.23 L1534.32 1210.23 L1534.91 1210.23 L1535.49 1210.23 L1536.08 1210.23 L1536.67 1210.23 L1537.25 1210.23 L1537.84 1210.23 L1538.43 1210.23 L1539.01 1210.23 L1539.6 1210.23 L1540.19 1210.23 L1540.77 1210.23 L1541.36 1210.23 L1541.94 1210.23 L1542.53 1210.23 L1543.12 1210.23 L1543.7 1210.23 L1544.29 1210.23 L1544.88 1210.23 L1545.46 1210.23 L1546.05 1210.23 L1546.64 1210.23 L1547.22 1210.23 L1547.81 1210.23 L1548.4 1210.23 L1548.98 1210.23 L1549.57 1210.23 L1550.15 1210.23 L1550.74 1210.23 L1551.33 1210.23 L1551.91 1210.23 L1552.5 1210.23 L1553.09 1210.23 L1553.67 1210.23 L1554.26 1210.23 L1554.85 1210.23 L1555.43 1210.23 L1556.02 1210.23 L1556.6 1210.23 L1557.19 1210.23 L1557.78 1210.23 L1558.36 1210.23 L1558.95 1210.23 L1559.54 1210.23 L1560.12 1210.23 L1560.71 1210.23 L1561.3 1210.23 L1561.88 1210.23 L1562.47 1210.23 L1563.06 1210.23 L1563.64 1210.23 L1564.23 1210.23 L1564.81 1210.23 L1565.4 1210.23 L1565.99 1210.23 L1566.57 1210.23 L1567.16 1210.23 L1567.75 1210.23 L1568.33 1210.23 L1568.92 1210.23 L1569.51 1210.23 L1570.09 1210.23 L1570.68 1210.23 L1571.27 1210.23 L1571.85 1210.23 L1572.44 1210.23 L1573.02 1210.23 L1573.61 1210.23 L1574.2 1210.23 L1574.78 1210.23 L1575.37 1210.23 L1575.96 1210.23 L1576.54 1210.23 L1577.13 1210.23 L1577.72 1210.23 L1578.3 1210.23 L1578.89 1210.23 L1579.47 1210.23 L1580.06 1210.23 L1580.65 1210.23 L1581.23 1210.23 L1581.82 1210.23 L1582.41 1210.23 L1582.99 1210.23 L1583.58 1210.23 L1584.17 1210.23 L1584.75 1210.23 L1585.34 1210.23 L1585.93 1210.23 L1586.51 1210.23 L1587.1 1210.23 L1587.68 1210.23 L1588.27 1210.23 L1588.86 1210.23 L1589.44 1210.23 L1590.03 1210.23 L1590.62 1210.23 L1591.2 1210.23 L1591.79 1210.23 L1592.38 1210.23 L1592.96 1210.23 L1593.55 1210.23 L1594.14 1210.23 L1594.72 1210.23 L1595.31 1210.23 L1595.89 1210.23 L1596.48 1210.23 L1597.07 1210.23 L1597.65 1210.23 L1598.24 1210.23 L1598.83 1210.23 L1599.41 1210.23 L1600 1210.23 L1600.59 1210.23 L1601.17 1210.23 L1601.76 1210.23 L1602.34 1210.23 L1602.93 1210.23 L1603.52 1210.23 L1604.1 1210.23 L1604.69 1210.23 L1605.28 1210.23 L1605.86 1210.23 L1606.45 1210.23 L1607.04 1210.23 L1607.62 1210.23 L1608.21 1210.23 L1608.8 1210.23 L1609.38 1210.23 L1609.97 1210.23 L1610.55 1210.23 L1611.14 1210.23 L1611.73 1210.23 L1612.31 1210.23 L1612.9 1210.23 L1613.49 1210.23 L1614.07 1210.23 L1614.66 1210.23 L1615.25 1210.23 L1615.83 1210.23 L1616.42 1210.23 L1617.01 1210.23 L1617.59 1210.23 L1618.18 1210.23 L1618.76 1210.23 L1619.35 1210.23 L1619.94 1210.23 L1620.52 1210.23 L1621.11 1210.23 L1621.7 1210.23 L1622.28 1210.23 L1622.87 1210.23 L1623.46 1210.23 L1624.04 1210.23 L1624.63 1210.23 L1625.22 1210.23 L1625.8 1210.23 L1626.39 1210.23 L1626.97 1210.23 L1627.56 1210.23 L1628.15 1210.23 L1628.73 1210.23 L1629.32 1210.23 L1629.91 1210.23 L1630.49 1210.23 L1631.08 1210.23 L1631.67 1210.23 L1632.25 1210.23 L1632.84 1210.23 L1633.42 1210.23 L1634.01 1210.23 L1634.6 1210.23 L1635.18 1210.23 L1635.77 1210.23 L1636.36 1210.23 L1636.94 1210.23 L1637.53 1210.23 L1638.12 1210.23 L1638.7 1210.23 L1639.29 1210.23 L1639.88 1210.23 L1640.46 1210.23 L1641.05 1210.23 L1641.63 1210.23 L1642.22 1210.23 L1642.81 1210.23 L1643.39 1210.23 L1643.98 1210.23 L1644.57 1210.23 L1645.15 1210.23 L1645.74 1210.23 L1646.33 1210.23 L1646.91 1210.23 L1647.5 1210.23 L1648.09 1210.23 L1648.67 1210.23 L1649.26 1210.23 L1649.84 1210.23 L1650.43 1210.23 L1651.02 1210.23 L1651.6 1210.23 L1652.19 1210.23 L1652.78 1210.23 L1653.36 1210.23 L1653.95 1210.23 L1654.54 1210.23 L1655.12 1210.23 L1655.71 1210.23 L1656.29 1210.23 L1656.88 1210.23 L1657.47 1210.23 L1658.05 1210.23 L1658.64 1210.23 L1659.23 1210.23 L1659.81 1210.23 L1660.4 1210.23 L1660.99 1210.23 L1661.57 1210.23 L1662.16 1210.23 L1662.75 1210.23 L1663.33 1210.23 L1663.92 1210.23 L1664.5 1210.23 L1665.09 1210.23 L1665.68 1210.23 L1666.26 1210.23 L1666.85 1210.23 L1667.44 1210.23 L1668.02 1210.23 L1668.61 1210.23 L1669.2 1210.23 L1669.78 1210.23 L1670.37 1210.23 L1670.96 1210.23 L1671.54 1210.23 L1672.13 1210.23 L1672.71 1210.23 L1673.3 1210.23 L1673.89 1210.23 L1674.47 1210.23 L1675.06 1210.23 L1675.65 1210.23 L1676.23 1210.23 L1676.82 1210.23 L1677.41 1210.23 L1677.99 1210.23 L1678.58 1210.23 L1679.17 1210.23 L1679.75 1210.23 L1680.34 1210.23 L1680.92 1210.23 L1681.51 1210.23 L1682.1 1210.23 L1682.68 1210.23 L1683.27 1210.23 L1683.86 1210.23 L1684.44 1210.23 L1685.03 1210.23 L1685.62 1210.23 L1686.2 1210.23 L1686.79 1210.23 L1687.37 1210.23 L1687.96 1210.23 L1688.55 1210.23 L1689.13 1210.23 L1689.72 1210.23 L1690.31 1210.23 L1690.89 1210.23 L1691.48 1210.23 L1692.07 1210.23 L1692.65 1210.23 L1693.24 1210.23 L1693.83 1210.23 L1694.41 1210.23 L1695 1210.23 L1695.58 1210.23 L1696.17 1210.23 L1696.76 1210.23 L1697.34 1210.23 L1697.93 1210.23 L1698.52 1210.23 L1699.1 1210.23 L1699.69 1210.23 L1700.28 1210.23 L1700.86 1210.23 L1701.45 1210.23 L1702.04 1210.23 L1702.62 1210.23 L1703.21 1210.23 L1703.79 1210.23 L1704.38 1210.23 L1704.97 1210.23 L1705.55 1210.23 L1706.14 1210.23 L1706.73 1210.23 L1707.31 1210.23 L1707.9 1210.23 L1708.49 1210.23 L1709.07 1210.23 L1709.66 1210.23 L1710.24 1210.23 L1710.83 1210.23 L1711.42 1210.23 L1712 1210.23 L1712.59 1210.23 L1713.18 1210.23 L1713.76 1210.23 L1714.35 1210.23 L1714.94 1210.23 L1715.52 1210.23 L1716.11 1210.23 L1716.7 1210.23 L1717.28 1210.23 L1717.87 1210.23 L1718.45 1210.23 L1719.04 1210.23 L1719.63 1210.23 L1720.21 1210.23 L1720.8 1210.23 L1721.39 1210.23 L1721.97 1210.23 L1722.56 1210.23 L1723.15 1210.23 L1723.73 1210.23 L1724.32 1210.23 L1724.91 1210.23 L1725.49 1210.23 L1726.08 1210.23 L1726.66 1210.23 L1727.25 1210.23 L1727.84 1210.23 L1728.42 1210.23 L1729.01 1210.23 L1729.6 1210.23 L1730.18 1210.23 L1730.77 1210.23 L1731.36 1210.23 L1731.94 1210.23 L1732.53 1210.23 L1733.11 1210.23 L1733.7 1210.23 L1734.29 1210.23 L1734.87 1210.23 L1735.46 1210.23 L1736.05 1210.23 L1736.63 1210.23 L1737.22 1210.23 L1737.81 1210.23 L1738.39 1210.23 L1738.98 1210.23 L1739.57 1210.23 L1740.15 1210.23 L1740.74 1210.23 L1741.32 1210.23 L1741.91 1210.23 L1742.5 1210.23 L1743.08 1210.23 L1743.67 1210.23 L1744.26 1210.23 L1744.84 1210.23 L1745.43 1210.23 L1746.02 1210.23 L1746.6 1210.23 L1747.19 1210.23 L1747.78 1210.23 L1748.36 1210.23 L1748.95 1210.23 L1749.53 1210.23 L1750.12 1210.23 L1750.71 1210.23 L1751.29 1210.23 L1751.88 1210.23 L1752.47 1210.23 L1753.05 1210.23 L1753.64 1210.23 L1754.23 1210.23 L1754.81 1210.23 L1755.4 1210.23 L1755.99 1210.23 L1756.57 1210.23 L1757.16 1210.23 L1757.74 1210.23 L1758.33 1210.23 L1758.92 1210.23 L1759.5 1210.23 L1760.09 1210.23 L1760.68 1210.23 L1761.26 1210.23 L1761.85 1210.23 L1762.44 1210.23 L1763.02 1210.23 L1763.61 1210.23 L1764.19 1210.23 L1764.78 1210.23 L1765.37 1210.23 L1765.95 1210.23 L1766.54 1210.23 L1767.13 1210.23 L1767.71 1210.23 L1768.3 1210.23 L1768.89 1210.23 L1769.47 1210.23 L1770.06 1210.23 L1770.65 1210.23 L1771.23 1210.23 L1771.82 1210.23 L1772.4 1210.23 L1772.99 1210.23 L1773.58 1210.23 L1774.16 1210.23 L1774.75 1210.23 L1775.34 1210.23 L1775.92 1210.23 L1776.51 1210.23 L1777.1 1210.23 L1777.68 1210.23 L1778.27 1210.23 L1778.86 1210.23 L1779.44 1210.23 L1780.03 1210.23 L1780.61 1210.23 L1781.2 1210.23 L1781.79 1210.23 L1782.37 1210.23 L1782.96 1210.23 L1783.55 1210.23 L1784.13 1210.23 L1784.72 1210.23 L1785.31 1210.23 L1785.89 1210.23 L1786.48 1210.23 L1787.06 1210.23 L1787.65 1210.23 L1788.24 1210.23 L1788.82 1210.23 L1789.41 1210.23 L1790 1210.23 L1790.58 1210.23 L1791.17 1210.23 L1791.76 1210.23 L1792.34 1210.23 L1792.93 1210.23 L1793.52 1210.23 L1794.1 1210.23 L1794.69 1210.23 L1795.27 1210.23 L1795.86 1210.23 L1796.45 1210.23 L1797.03 1210.23 L1797.62 1210.23 L1798.21 1210.23 L1798.79 1210.23 L1799.38 1210.23 L1799.97 1210.23 L1800.55 1210.23 L1801.14 1210.23 L1801.73 1210.23 L1802.31 1210.23 L1802.9 1210.23 L1803.48 1210.23 L1804.07 1210.23 L1804.66 1210.23 L1805.24 1210.23 L1805.83 1210.23 L1806.42 1210.23 L1807 1210.23 L1807.59 1210.23 L1808.18 1210.23 L1808.76 1210.23 L1809.35 1210.23 L1809.94 1210.23 L1810.52 1210.23 L1811.11 1210.23 L1811.69 1210.23 L1812.28 1210.23 L1812.87 1210.23 L1813.45 1210.23 L1814.04 1210.23 L1814.63 1210.23 L1815.21 1210.23 L1815.8 1210.23 L1816.39 1210.23 L1816.97 1210.23 L1817.56 1210.23 L1818.14 1210.23 L1818.73 1210.23 L1819.32 1210.23 L1819.9 1210.23 L1820.49 1210.23 L1821.08 1210.23 L1821.66 1210.23 L1822.25 1210.23 L1822.84 1210.23 L1823.42 1210.23 L1824.01 1210.23 L1824.6 1210.23 L1825.18 1210.23 L1825.77 1210.23 L1826.35 1210.23 L1826.94 1210.23 L1827.53 1210.23 L1828.11 1210.23 L1828.7 1210.23 L1829.29 1210.23 L1829.87 1210.23 L1830.46 1210.23 L1831.05 1210.23 L1831.63 1210.23 L1832.22 1210.23 L1832.81 1210.23 L1833.39 1210.23 L1833.98 1210.23 L1834.56 1210.23 L1835.15 1210.23 L1835.74 1210.23 L1836.32 1210.23 L1836.91 1210.23 L1837.5 1210.23 L1838.08 1210.23 L1838.67 1210.23 L1839.26 1210.23 L1839.84 1210.23 L1840.43 1210.23 L1841.01 1210.23 L1841.6 1210.23 L1842.19 1210.23 L1842.77 1210.23 L1843.36 1210.23 L1843.95 1210.23 L1844.53 1210.23 L1845.12 1210.23 L1845.71 1210.23 L1846.29 1210.23 L1846.88 1210.23 L1847.47 1210.23 L1848.05 1210.23 L1848.64 1210.23 L1849.22 1210.23 L1849.81 1210.23 L1850.4 1210.23 L1850.98 1210.23 L1851.57 1210.23 L1852.16 1210.23 L1852.74 1210.23 L1853.33 1210.23 L1853.92 1210.23 L1854.5 1210.23 L1855.09 1210.23 L1855.68 1210.23 L1856.26 1210.23 L1856.85 1210.23 L1857.43 1210.23 L1858.02 1210.23 L1858.61 1210.23 L1859.19 1210.23 L1859.78 1210.23 L1860.37 1210.23 L1860.95 1210.23 L1861.54 1210.23 L1862.13 1210.23 L1862.71 1210.23 L1863.3 1210.23 L1863.88 1210.23 L1864.47 1210.23 L1865.06 1210.23 L1865.64 1210.23 L1866.23 1210.23 L1866.82 1210.23 L1867.4 1210.23 L1867.99 1210.23 L1868.58 1210.23 L1869.16 1210.23 L1869.75 1210.23 L1870.34 1210.23 L1870.92 1210.23 L1871.51 1210.23 L1872.09 1210.23 L1872.68 1210.23 L1873.27 1210.23 L1873.85 1210.23 L1874.44 1210.23 L1875.03 1210.23 L1875.61 1210.23 L1876.2 1210.23 L1876.79 1210.23 L1877.37 1210.23 L1877.96 1210.23 L1878.55 1210.23 L1879.13 1210.23 L1879.72 1210.23 L1880.3 1210.23 L1880.89 1210.23 L1881.48 1210.23 L1882.06 1210.23 L1882.65 1210.23 L1883.24 1210.23 L1883.82 1210.23 L1884.41 1210.23 L1885 1210.23 L1885.58 1210.23 L1886.17 1210.23 L1886.76 1210.23 L1887.34 1210.23 L1887.93 1210.23 L1888.51 1210.23 L1889.1 1210.23 L1889.69 1210.23 L1890.27 1210.23 L1890.86 1210.23 L1891.45 1210.23 L1892.03 1210.23 L1892.62 1210.23 L1893.21 1210.23 L1893.79 1210.23 L1894.38 1210.23 L1894.96 1210.23 L1895.55 1210.23 L1896.14 1210.23 L1896.72 1210.23 L1897.31 1210.23 L1897.9 1210.23 L1898.48 1210.23 L1899.07 1210.23 L1899.66 1210.23 L1900.24 1210.23 L1900.83 1210.23 L1901.42 1210.23 L1902 1210.23 L1902.59 1210.23 L1903.17 1210.23 L1903.76 1210.23 L1904.35 1210.23 L1904.93 1210.23 L1905.52 1210.23 L1906.11 1210.23 L1906.69 1210.23 L1907.28 1210.23 L1907.87 1210.23 L1908.45 1210.23 L1909.04 1210.23 L1909.63 1210.23 L1910.21 1210.23 L1910.8 1210.23 L1911.38 1210.23 L1911.97 1210.23 L1912.56 1210.23 L1913.14 1210.23 L1913.73 1210.23 L1914.32 1210.23 L1914.9 1210.23 L1915.49 1210.23 L1916.08 1210.23 L1916.66 1210.23 L1917.25 1210.23 L1917.83 1210.23 L1918.42 1210.23 L1919.01 1210.23 L1919.59 1210.23 L1920.18 1210.23 L1920.77 1210.23 L1921.35 1210.23 L1921.94 1210.23 L1922.53 1210.23 L1923.11 1210.23 L1923.7 1210.23 L1924.29 1210.23 L1924.87 1210.23 L1925.46 1210.23 L1926.04 1210.23 L1926.63 1210.23 L1927.22 1210.23 L1927.8 1210.23 L1928.39 1210.23 L1928.98 1210.23 L1929.56 1210.23 L1930.15 1210.23 L1930.74 1210.23 L1931.32 1210.23 L1931.91 1210.23 L1932.5 1210.23 L1933.08 1210.23 L1933.67 1210.23 L1934.25 1210.23 L1934.84 1210.23 L1935.43 1210.23 L1936.01 1210.23 L1936.6 1210.23 L1937.19 1210.23 L1937.77 1210.23 L1938.36 1210.23 L1938.95 1210.23 L1939.53 1210.23 L1940.12 1210.23 L1940.71 1210.23 L1941.29 1210.23 L1941.88 1210.23 L1942.46 1210.23 L1943.05 1210.23 L1943.64 1210.23 L1944.22 1210.23 L1944.81 1210.23 L1945.4 1210.23 L1945.98 1210.23 L1946.57 1210.23 L1947.16 1210.23 L1947.74 1210.23 L1948.33 1210.23 L1948.91 1210.23 L1949.5 1210.23 L1950.09 1210.23 L1950.67 1210.23 L1951.26 1210.23 L1951.85 1210.23 L1952.43 1210.23 L1953.02 1210.23 L1953.61 1210.23 L1954.19 1210.23 L1954.78 1210.23 L1955.37 1210.23 L1955.95 1210.23 L1956.54 1210.23 L1957.12 1210.23 L1957.71 1210.23 L1958.3 1210.23 L1958.88 1210.23 L1959.47 1210.23 L1960.06 1210.23 L1960.64 1210.23 L1961.23 1210.23 L1961.82 1210.23 L1962.4 1210.23 L1962.99 1210.23 L1963.58 1210.23 L1964.16 1210.23 L1964.75 1210.23 L1965.33 1210.23 L1965.92 1210.23 L1966.51 1210.23 L1967.09 1210.23 L1967.68 1210.23 L1968.27 1210.23 L1968.85 1210.23 L1969.44 1210.23 L1970.03 1210.23 L1970.61 1210.23 L1971.2 1210.23 L1971.78 1210.23 L1972.37 1210.23 L1972.96 1210.23 L1973.54 1210.23 L1974.13 1210.23 L1974.72 1210.23 L1975.3 1210.23 L1975.89 1210.23 L1976.48 1210.23 L1977.06 1210.23 L1977.65 1210.23 L1978.24 1210.23 L1978.82 1210.23 L1979.41 1210.23 L1979.99 1210.23 L1980.58 1210.23 L1981.17 1210.23 L1981.75 1210.23 L1982.34 1210.23 L1982.93 1210.23 L1983.51 1210.23 L1984.1 1210.23 L1984.69 1210.23 L1985.27 1210.23 L1985.86 1210.23 L1986.45 1210.23 L1987.03 1210.23 L1987.62 1210.23 L1988.2 1210.23 L1988.79 1210.23 L1989.38 1210.23 L1989.96 1210.23 L1990.55 1210.23 L1991.14 1210.23 L1991.72 1210.23 L1992.31 1210.23 L1992.9 1210.23 L1993.48 1210.23 L1994.07 1210.23 L1994.65 1210.23 L1995.24 1210.23 L1995.83 1210.23 L1996.41 1210.23 L1997 1210.23 L1997.59 1210.23 L1998.17 1210.23 L1998.76 1210.23 L1999.35 1210.23 L1999.93 1210.23 L2000.52 1210.23 L2001.11 1210.23 L2001.69 1210.23 L2002.28 1210.23 L2002.86 1210.23 L2003.45 1210.23 L2004.04 1210.23 L2004.62 1210.23 L2005.21 1210.23 L2005.8 1210.23 L2006.38 1210.23 L2006.97 1210.23 L2007.56 1210.23 L2008.14 1210.23 L2008.73 1210.23 L2009.32 1210.23 L2009.9 1210.23 L2010.49 1210.23 L2011.07 1210.23 L2011.66 1210.23 L2012.25 1210.23 L2012.83 1210.23 L2013.42 1210.23 L2014.01 1210.23 L2014.59 1210.23 L2015.18 1210.23 L2015.77 1210.23 L2016.35 1210.23 L2016.94 1210.23 L2017.53 1210.23 L2018.11 1210.23 L2018.7 1210.23 L2019.28 1210.23 L2019.87 1210.23 L2020.46 1210.23 L2021.04 1210.23 L2021.63 1210.23 L2022.22 1210.23 L2022.8 1210.23 L2023.39 1210.23 L2023.98 1210.23 L2024.56 1210.23 L2025.15 1210.23 L2025.73 1210.23 L2026.32 1210.23 L2026.91 1210.23 L2027.49 1210.23 L2028.08 1210.23 L2028.67 1210.23 L2029.25 1210.23 L2029.84 1210.23 L2030.43 1210.23 L2031.01 1210.23 L2031.6 1210.23 L2032.19 1210.23 L2032.77 1210.23 L2033.36 1210.23 L2033.94 1210.23 L2034.53 1210.23 L2035.12 1210.23 L2035.7 1210.23 L2036.29 1210.23 L2036.88 1210.23 L2037.46 1210.23 L2038.05 1210.23 L2038.64 1210.23 L2039.22 1210.23 L2039.81 1210.23 L2040.4 1210.23 L2040.98 1210.23 L2041.57 1210.23 L2042.15 1210.23 L2042.74 1210.23 L2043.33 1210.23 L2043.91 1210.23 L2044.5 1210.23 L2045.09 1210.23 L2045.67 1210.23 L2046.26 1210.23 L2046.85 1210.23 L2047.43 1210.23 L2048.02 1210.23 L2048.6 1210.23 L2049.19 1210.23 L2049.78 1210.23 L2050.36 1210.23 L2050.95 1210.23 L2051.54 1210.23 L2052.12 1210.23 L2052.71 1210.23 L2053.3 1210.23 L2053.88 1210.23 L2054.47 1210.23 L2055.06 1210.23 L2055.64 1210.23 L2056.23 1210.23 L2056.81 1210.23 L2057.4 1210.23 L2057.99 1210.23 L2058.57 1210.23 L2059.16 1210.23 L2059.75 1210.23 L2060.33 1210.23 L2060.92 1210.23 L2061.51 1210.23 L2062.09 1210.23 L2062.68 1210.23 L2063.27 1210.23 L2063.85 1210.23 L2064.44 1210.23 L2065.02 1210.23 L2065.61 1210.23 L2066.2 1210.23 L2066.78 1210.23 L2067.37 1210.23 L2067.96 1210.23 L2068.54 1210.23 L2069.13 1210.23 L2069.72 1210.23 L2070.3 1210.23 L2070.89 1210.23 L2071.48 1210.23 L2072.06 1210.23 L2072.65 1210.23 L2073.23 1210.23 L2073.82 1210.23 L2074.41 1210.23 L2074.99 1210.23 L2075.58 1210.23 L2076.17 1210.23 L2076.75 1210.23 L2077.34 1210.23 L2077.93 1210.23 L2078.51 1210.23 L2079.1 1210.23 L2079.68 1210.23 L2080.27 1210.23 L2080.86 1210.23 L2081.44 1210.23 L2082.03 1210.23 L2082.62 1210.23 L2083.2 1210.23 L2083.79 1210.23 L2084.38 1210.23 L2084.96 1210.23 L2085.55 1210.23 L2086.14 1210.23 L2086.72 1210.23 L2087.31 1210.23 L2087.89 1210.23 L2088.48 1210.23 L2089.07 1210.23 L2089.65 1210.23 L2090.24 1210.23 L2090.83 1210.23 L2091.41 1210.23 L2092 1210.23 L2092.59 1210.23 L2093.17 1210.23 L2093.76 1210.23 L2094.35 1210.23 L2094.93 1210.23 L2095.52 1210.23 L2096.1 1210.23 L2096.69 1210.23 L2097.28 1210.23 L2097.86 1210.23 L2098.45 1210.23 L2099.04 1210.23 L2099.62 1210.23 L2100.21 1210.23 L2100.8 1210.23 L2101.38 1210.23 L2101.97 1210.23 L2102.55 1210.23 L2103.14 1210.23 L2103.73 1210.23 L2104.31 1210.23 L2104.9 1210.23 L2105.49 1210.23 L2106.07 1210.23 L2106.66 1210.23 L2107.25 1210.23 L2107.83 1210.23 L2108.42 1210.23 L2109.01 1210.23 L2109.59 1210.23 L2110.18 1210.23 L2110.76 1210.23 L2111.35 1210.23 L2111.94 1210.23 L2112.52 1210.23 L2113.11 1210.23 L2113.7 1210.23 L2114.28 1210.23 L2114.87 1210.23 L2115.46 1210.23 L2116.04 1210.23 L2116.63 1210.23 L2117.22 1210.23 L2117.8 1210.23 L2118.39 1210.23 L2118.97 1210.23 L2119.56 1210.23 L2120.15 1210.23 L2120.73 1210.23 L2121.32 1210.23 L2121.91 1210.23 L2122.49 1210.23 L2123.08 1210.23 L2123.67 1210.23 L2124.25 1210.23 L2124.84 1210.23 L2125.42 1210.23 L2126.01 1210.23 L2126.6 1210.23 L2127.18 1210.23 L2127.77 1210.23 L2128.36 1210.23 L2128.94 1210.23 L2129.53 1210.23 L2130.12 1210.23 L2130.7 1210.23 L2131.29 1210.23 L2131.88 1210.23 L2132.46 1210.23 L2133.05 1210.23 L2133.63 1210.23 L2134.22 1210.23 L2134.81 1210.23 L2135.39 1210.23 L2135.98 1210.23 L2136.57 1210.23 L2137.15 1210.23 L2137.74 1210.23 L2138.33 1210.23 L2138.91 1210.23 L2139.5 1210.23 L2140.09 1210.23 L2140.67 1210.23 L2141.26 1210.23 L2141.84 1210.23 L2142.43 1210.23 L2143.02 1210.23 L2143.6 1210.23 L2144.19 1210.23 L2144.78 1210.23 L2145.36 1210.23 L2145.95 1210.23 L2146.54 1210.23 L2147.12 1210.23 L2147.71 1210.23 L2148.3 1210.23 L2148.88 1210.23 L2149.47 1210.23 L2150.05 1210.23 L2150.64 1210.23 L2151.23 1210.23 L2151.81 1210.23 L2152.4 1210.23 L2152.99 1210.23 L2153.57 1210.23 L2154.16 1210.23 L2154.75 1210.23 L2155.33 1210.23 L2155.92 1210.23 L2156.5 1210.23 L2157.09 1210.23 L2157.68 1210.23 L2158.26 1210.23 L2158.26 1210.02 L2157.68 1210.02 L2157.09 1210.02 L2156.5 1210.02 L2155.92 1210.02 L2155.33 1210.02 L2154.75 1210.02 L2154.16 1210.02 L2153.57 1210.02 L2152.99 1210.02 L2152.4 1210.02 L2151.81 1210.02 L2151.23 1210.02 L2150.64 1210.02 L2150.05 1210.02 L2149.47 1210.02 L2148.88 1210.02 L2148.3 1210.02 L2147.71 1210.02 L2147.12 1210.02 L2146.54 1210.02 L2145.95 1210.02 L2145.36 1210.02 L2144.78 1210.02 L2144.19 1210.02 L2143.6 1210.02 L2143.02 1210.02 L2142.43 1210.02 L2141.84 1210.02 L2141.26 1210.02 L2140.67 1210.02 L2140.09 1210.02 L2139.5 1210.02 L2138.91 1210.02 L2138.33 1210.02 L2137.74 1210.02 L2137.15 1210.02 L2136.57 1210.02 L2135.98 1210.02 L2135.39 1210.02 L2134.81 1210.02 L2134.22 1210.02 L2133.63 1210.02 L2133.05 1210.02 L2132.46 1210.02 L2131.88 1210.02 L2131.29 1210.02 L2130.7 1210.02 L2130.12 1210.02 L2129.53 1210.02 L2128.94 1210.02 L2128.36 1210.02 L2127.77 1210.02 L2127.18 1210.02 L2126.6 1210.02 L2126.01 1210.02 L2125.42 1210.02 L2124.84 1210.02 L2124.25 1210.02 L2123.67 1210.02 L2123.08 1210.02 L2122.49 1210.02 L2121.91 1210.02 L2121.32 1210.02 L2120.73 1210.02 L2120.15 1210.02 L2119.56 1210.02 L2118.97 1210.02 L2118.39 1210.02 L2117.8 1210.02 L2117.22 1210.02 L2116.63 1210.02 L2116.04 1210.02 L2115.46 1210.02 L2114.87 1210.02 L2114.28 1210.02 L2113.7 1210.02 L2113.11 1210.02 L2112.52 1210.02 L2111.94 1210.02 L2111.35 1210.02 L2110.76 1210.02 L2110.18 1210.02 L2109.59 1210.02 L2109.01 1210.02 L2108.42 1210.02 L2107.83 1210.02 L2107.25 1210.02 L2106.66 1210.02 L2106.07 1210.02 L2105.49 1210.02 L2104.9 1210.02 L2104.31 1210.02 L2103.73 1210.02 L2103.14 1210.02 L2102.55 1210.02 L2101.97 1210.02 L2101.38 1210.02 L2100.8 1210.02 L2100.21 1210.02 L2099.62 1210.02 L2099.04 1210.02 L2098.45 1210.02 L2097.86 1210.02 L2097.28 1210.02 L2096.69 1210.02 L2096.1 1210.02 L2095.52 1210.02 L2094.93 1210.02 L2094.35 1210.02 L2093.76 1210.02 L2093.17 1210.02 L2092.59 1210.02 L2092 1210.02 L2091.41 1210.02 L2090.83 1210.02 L2090.24 1210.02 L2089.65 1210.02 L2089.07 1210.02 L2088.48 1210.02 L2087.89 1210.02 L2087.31 1210.02 L2086.72 1210.02 L2086.14 1210.02 L2085.55 1210.02 L2084.96 1210.02 L2084.38 1210.02 L2083.79 1210.02 L2083.2 1210.02 L2082.62 1210.02 L2082.03 1210.02 L2081.44 1210.02 L2080.86 1210.02 L2080.27 1210.02 L2079.68 1210.02 L2079.1 1210.02 L2078.51 1210.02 L2077.93 1210.02 L2077.34 1210.02 L2076.75 1210.02 L2076.17 1210.02 L2075.58 1210.02 L2074.99 1210.02 L2074.41 1210.02 L2073.82 1210.02 L2073.23 1210.02 L2072.65 1210.02 L2072.06 1210.02 L2071.48 1210.02 L2070.89 1210.02 L2070.3 1210.02 L2069.72 1210.02 L2069.13 1210.02 L2068.54 1210.02 L2067.96 1210.02 L2067.37 1210.02 L2066.78 1210.02 L2066.2 1210.02 L2065.61 1210.02 L2065.02 1210.02 L2064.44 1210.02 L2063.85 1210.02 L2063.27 1210.02 L2062.68 1210.02 L2062.09 1210.02 L2061.51 1210.02 L2060.92 1210.02 L2060.33 1210.02 L2059.75 1210.02 L2059.16 1210.02 L2058.57 1210.02 L2057.99 1210.02 L2057.4 1210.02 L2056.81 1210.02 L2056.23 1210.02 L2055.64 1210.02 L2055.06 1210.02 L2054.47 1210.02 L2053.88 1210.02 L2053.3 1210.02 L2052.71 1210.02 L2052.12 1210.02 L2051.54 1210.02 L2050.95 1210.02 L2050.36 1210.02 L2049.78 1210.02 L2049.19 1210.02 L2048.6 1210.02 L2048.02 1210.02 L2047.43 1210.02 L2046.85 1210.02 L2046.26 1210.02 L2045.67 1210.02 L2045.09 1210.02 L2044.5 1210.02 L2043.91 1210.02 L2043.33 1210.02 L2042.74 1210.02 L2042.15 1210.02 L2041.57 1210.02 L2040.98 1210.02 L2040.4 1210.02 L2039.81 1210.02 L2039.22 1210.02 L2038.64 1210.02 L2038.05 1210.02 L2037.46 1210.02 L2036.88 1210.02 L2036.29 1210.02 L2035.7 1210.02 L2035.12 1210.02 L2034.53 1210.02 L2033.94 1210.02 L2033.36 1210.02 L2032.77 1210.02 L2032.19 1210.02 L2031.6 1210.02 L2031.01 1210.02 L2030.43 1210.02 L2029.84 1210.02 L2029.25 1210.02 L2028.67 1210.02 L2028.08 1210.02 L2027.49 1210.02 L2026.91 1210.02 L2026.32 1210.02 L2025.73 1210.02 L2025.15 1210.02 L2024.56 1210.02 L2023.98 1210.02 L2023.39 1210.02 L2022.8 1210.02 L2022.22 1210.02 L2021.63 1210.02 L2021.04 1210.02 L2020.46 1210.02 L2019.87 1210.02 L2019.28 1210.02 L2018.7 1210.02 L2018.11 1210.02 L2017.53 1210.02 L2016.94 1210.02 L2016.35 1210.02 L2015.77 1210.02 L2015.18 1210.02 L2014.59 1210.02 L2014.01 1210.02 L2013.42 1210.02 L2012.83 1210.02 L2012.25 1210.02 L2011.66 1210.02 L2011.07 1210.02 L2010.49 1210.02 L2009.9 1210.02 L2009.32 1210.02 L2008.73 1210.02 L2008.14 1210.02 L2007.56 1210.02 L2006.97 1210.02 L2006.38 1210.02 L2005.8 1210.02 L2005.21 1210.02 L2004.62 1210.02 L2004.04 1210.02 L2003.45 1210.02 L2002.86 1210.02 L2002.28 1210.02 L2001.69 1210.02 L2001.11 1210.02 L2000.52 1210.02 L1999.93 1210.02 L1999.35 1210.02 L1998.76 1210.02 L1998.17 1210.02 L1997.59 1210.02 L1997 1210.02 L1996.41 1210.02 L1995.83 1210.02 L1995.24 1210.02 L1994.65 1210.02 L1994.07 1210.02 L1993.48 1210.02 L1992.9 1210.02 L1992.31 1210.02 L1991.72 1210.02 L1991.14 1210.02 L1990.55 1210.02 L1989.96 1210.02 L1989.38 1210.02 L1988.79 1210.02 L1988.2 1210.02 L1987.62 1210.02 L1987.03 1210.02 L1986.45 1210.02 L1985.86 1210.02 L1985.27 1210.02 L1984.69 1210.02 L1984.1 1210.02 L1983.51 1210.02 L1982.93 1210.02 L1982.34 1210.02 L1981.75 1210.02 L1981.17 1210.02 L1980.58 1210.02 L1979.99 1210.02 L1979.41 1210.02 L1978.82 1210.02 L1978.24 1210.02 L1977.65 1210.02 L1977.06 1210.02 L1976.48 1210.02 L1975.89 1210.02 L1975.3 1210.02 L1974.72 1210.02 L1974.13 1210.02 L1973.54 1210.02 L1972.96 1210.02 L1972.37 1210.02 L1971.78 1210.02 L1971.2 1210.02 L1970.61 1210.02 L1970.03 1210.02 L1969.44 1210.02 L1968.85 1210.02 L1968.27 1210.02 L1967.68 1210.02 L1967.09 1210.02 L1966.51 1210.02 L1965.92 1210.02 L1965.33 1210.02 L1964.75 1210.02 L1964.16 1210.02 L1963.58 1210.02 L1962.99 1210.02 L1962.4 1210.02 L1961.82 1210.02 L1961.23 1210.02 L1960.64 1210.02 L1960.06 1210.02 L1959.47 1210.02 L1958.88 1210.02 L1958.3 1210.02 L1957.71 1210.02 L1957.12 1210.02 L1956.54 1210.02 L1955.95 1210.02 L1955.37 1210.02 L1954.78 1210.02 L1954.19 1210.02 L1953.61 1210.02 L1953.02 1210.02 L1952.43 1210.02 L1951.85 1210.02 L1951.26 1210.02 L1950.67 1210.02 L1950.09 1210.02 L1949.5 1210.02 L1948.91 1210.02 L1948.33 1210.02 L1947.74 1210.02 L1947.16 1210.02 L1946.57 1210.02 L1945.98 1210.02 L1945.4 1210.02 L1944.81 1210.02 L1944.22 1210.02 L1943.64 1210.02 L1943.05 1210.02 L1942.46 1210.02 L1941.88 1210.02 L1941.29 1210.02 L1940.71 1210.02 L1940.12 1210.02 L1939.53 1210.02 L1938.95 1210.02 L1938.36 1210.02 L1937.77 1210.02 L1937.19 1210.02 L1936.6 1210.02 L1936.01 1210.02 L1935.43 1210.02 L1934.84 1210.02 L1934.25 1210.02 L1933.67 1210.02 L1933.08 1210.02 L1932.5 1210.02 L1931.91 1210.02 L1931.32 1210.02 L1930.74 1210.02 L1930.15 1210.02 L1929.56 1210.02 L1928.98 1210.02 L1928.39 1210.02 L1927.8 1210.02 L1927.22 1210.02 L1926.63 1210.02 L1926.04 1210.02 L1925.46 1210.02 L1924.87 1210.02 L1924.29 1210.02 L1923.7 1210.02 L1923.11 1210.02 L1922.53 1210.02 L1921.94 1210.02 L1921.35 1210.02 L1920.77 1210.02 L1920.18 1210.02 L1919.59 1210.02 L1919.01 1210.02 L1918.42 1210.02 L1917.83 1210.02 L1917.25 1210.02 L1916.66 1210.02 L1916.08 1210.02 L1915.49 1210.02 L1914.9 1210.02 L1914.32 1210.02 L1913.73 1210.02 L1913.14 1210.02 L1912.56 1210.02 L1911.97 1210.02 L1911.38 1210.02 L1910.8 1210.02 L1910.21 1210.02 L1909.63 1210.02 L1909.04 1210.02 L1908.45 1210.02 L1907.87 1210.02 L1907.28 1210.02 L1906.69 1210.02 L1906.11 1210.02 L1905.52 1210.02 L1904.93 1210.02 L1904.35 1210.02 L1903.76 1210.02 L1903.17 1210.02 L1902.59 1210.02 L1902 1210.02 L1901.42 1210.02 L1900.83 1210.02 L1900.24 1210.02 L1899.66 1210.02 L1899.07 1210.02 L1898.48 1210.02 L1897.9 1210.02 L1897.31 1210.02 L1896.72 1210.02 L1896.14 1210.02 L1895.55 1210.02 L1894.96 1210.02 L1894.38 1210.02 L1893.79 1210.02 L1893.21 1210.02 L1892.62 1210.02 L1892.03 1210.02 L1891.45 1210.02 L1890.86 1210.02 L1890.27 1210.02 L1889.69 1210.02 L1889.1 1210.02 L1888.51 1210.02 L1887.93 1210.02 L1887.34 1210.02 L1886.76 1210.02 L1886.17 1210.02 L1885.58 1210.02 L1885 1210.02 L1884.41 1210.02 L1883.82 1210.02 L1883.24 1210.02 L1882.65 1210.02 L1882.06 1210.02 L1881.48 1210.02 L1880.89 1210.02 L1880.3 1210.02 L1879.72 1210.02 L1879.13 1210.02 L1878.55 1210.02 L1877.96 1210.02 L1877.37 1210.02 L1876.79 1210.02 L1876.2 1210.02 L1875.61 1210.02 L1875.03 1210.02 L1874.44 1210.02 L1873.85 1210.02 L1873.27 1210.02 L1872.68 1210.02 L1872.09 1210.02 L1871.51 1210.02 L1870.92 1210.02 L1870.34 1210.02 L1869.75 1210.02 L1869.16 1210.02 L1868.58 1210.02 L1867.99 1210.02 L1867.4 1210.02 L1866.82 1210.02 L1866.23 1210.02 L1865.64 1210.02 L1865.06 1210.02 L1864.47 1210.02 L1863.88 1210.02 L1863.3 1210.02 L1862.71 1210.02 L1862.13 1210.02 L1861.54 1210.02 L1860.95 1210.02 L1860.37 1210.02 L1859.78 1210.02 L1859.19 1210.02 L1858.61 1210.02 L1858.02 1210.02 L1857.43 1210.02 L1856.85 1210.02 L1856.26 1210.02 L1855.68 1210.02 L1855.09 1210.02 L1854.5 1210.02 L1853.92 1210.02 L1853.33 1210.02 L1852.74 1210.02 L1852.16 1210.02 L1851.57 1210.02 L1850.98 1210.02 L1850.4 1210.02 L1849.81 1210.02 L1849.22 1210.02 L1848.64 1210.02 L1848.05 1210.02 L1847.47 1210.02 L1846.88 1210.02 L1846.29 1210.02 L1845.71 1210.02 L1845.12 1210.02 L1844.53 1210.02 L1843.95 1210.02 L1843.36 1210.02 L1842.77 1210.02 L1842.19 1210.02 L1841.6 1210.02 L1841.01 1210.02 L1840.43 1210.02 L1839.84 1210.02 L1839.26 1210.02 L1838.67 1210.02 L1838.08 1210.02 L1837.5 1210.02 L1836.91 1210.02 L1836.32 1210.02 L1835.74 1210.02 L1835.15 1210.02 L1834.56 1210.02 L1833.98 1210.02 L1833.39 1210.02 L1832.81 1210.02 L1832.22 1210.02 L1831.63 1210.02 L1831.05 1210.02 L1830.46 1210.02 L1829.87 1210.02 L1829.29 1210.02 L1828.7 1210.02 L1828.11 1210.02 L1827.53 1210.02 L1826.94 1210.02 L1826.35 1210.02 L1825.77 1210.02 L1825.18 1210.02 L1824.6 1210.02 L1824.01 1210.02 L1823.42 1210.02 L1822.84 1210.02 L1822.25 1210.02 L1821.66 1210.02 L1821.08 1210.02 L1820.49 1210.02 L1819.9 1210.02 L1819.32 1210.02 L1818.73 1210.02 L1818.14 1210.02 L1817.56 1210.02 L1816.97 1210.02 L1816.39 1210.02 L1815.8 1210.02 L1815.21 1210.02 L1814.63 1210.02 L1814.04 1210.02 L1813.45 1210.02 L1812.87 1210.02 L1812.28 1210.02 L1811.69 1210.02 L1811.11 1210.02 L1810.52 1210.02 L1809.94 1210.02 L1809.35 1210.02 L1808.76 1210.02 L1808.18 1210.02 L1807.59 1210.02 L1807 1210.02 L1806.42 1210.02 L1805.83 1210.02 L1805.24 1210.02 L1804.66 1210.02 L1804.07 1210.02 L1803.48 1210.02 L1802.9 1210.02 L1802.31 1210.02 L1801.73 1210.02 L1801.14 1210.02 L1800.55 1210.02 L1799.97 1210.02 L1799.38 1210.02 L1798.79 1210.02 L1798.21 1210.02 L1797.62 1210.02 L1797.03 1210.02 L1796.45 1210.02 L1795.86 1210.02 L1795.27 1210.02 L1794.69 1210.02 L1794.1 1210.02 L1793.52 1210.02 L1792.93 1210.02 L1792.34 1210.02 L1791.76 1210.02 L1791.17 1210.02 L1790.58 1210.02 L1790 1210.02 L1789.41 1210.02 L1788.82 1210.02 L1788.24 1210.02 L1787.65 1210.02 L1787.06 1210.02 L1786.48 1210.02 L1785.89 1210.02 L1785.31 1210.02 L1784.72 1210.02 L1784.13 1210.02 L1783.55 1210.02 L1782.96 1210.02 L1782.37 1210.02 L1781.79 1210.02 L1781.2 1210.02 L1780.61 1210.02 L1780.03 1210.02 L1779.44 1210.02 L1778.86 1210.02 L1778.27 1210.02 L1777.68 1210.02 L1777.1 1210.02 L1776.51 1210.02 L1775.92 1210.02 L1775.34 1210.02 L1774.75 1210.02 L1774.16 1210.02 L1773.58 1210.02 L1772.99 1210.02 L1772.4 1210.02 L1771.82 1210.02 L1771.23 1210.02 L1770.65 1210.02 L1770.06 1210.02 L1769.47 1210.02 L1768.89 1210.02 L1768.3 1210.02 L1767.71 1210.02 L1767.13 1210.02 L1766.54 1210.02 L1765.95 1210.02 L1765.37 1210.02 L1764.78 1210.02 L1764.19 1210.02 L1763.61 1210.02 L1763.02 1210.02 L1762.44 1210.02 L1761.85 1210.02 L1761.26 1210.02 L1760.68 1210.02 L1760.09 1210.02 L1759.5 1210.02 L1758.92 1210.02 L1758.33 1210.02 L1757.74 1210.02 L1757.16 1210.02 L1756.57 1210.02 L1755.99 1210.02 L1755.4 1210.02 L1754.81 1210.02 L1754.23 1210.02 L1753.64 1210.02 L1753.05 1210.02 L1752.47 1210.02 L1751.88 1210.02 L1751.29 1210.02 L1750.71 1210.02 L1750.12 1210.02 L1749.53 1210.02 L1748.95 1210.02 L1748.36 1210.02 L1747.78 1210.02 L1747.19 1210.02 L1746.6 1210.02 L1746.02 1210.02 L1745.43 1210.02 L1744.84 1210.02 L1744.26 1210.02 L1743.67 1210.02 L1743.08 1210.02 L1742.5 1210.02 L1741.91 1210.02 L1741.32 1210.02 L1740.74 1210.02 L1740.15 1210.02 L1739.57 1210.02 L1738.98 1210.02 L1738.39 1210.02 L1737.81 1210.02 L1737.22 1210.02 L1736.63 1210.02 L1736.05 1210.02 L1735.46 1210.02 L1734.87 1210.02 L1734.29 1210.02 L1733.7 1210.02 L1733.11 1210.02 L1732.53 1210.02 L1731.94 1210.02 L1731.36 1210.02 L1730.77 1210.02 L1730.18 1210.02 L1729.6 1210.02 L1729.01 1210.02 L1728.42 1210.02 L1727.84 1210.02 L1727.25 1210.02 L1726.66 1210.02 L1726.08 1210.02 L1725.49 1210.02 L1724.91 1210.02 L1724.32 1210.02 L1723.73 1210.02 L1723.15 1210.02 L1722.56 1210.02 L1721.97 1210.02 L1721.39 1210.02 L1720.8 1210.02 L1720.21 1210.02 L1719.63 1210.02 L1719.04 1210.02 L1718.45 1210.02 L1717.87 1210.02 L1717.28 1210.02 L1716.7 1210.02 L1716.11 1210.02 L1715.52 1210.02 L1714.94 1210.02 L1714.35 1210.02 L1713.76 1210.02 L1713.18 1210.02 L1712.59 1210.02 L1712 1210.02 L1711.42 1210.02 L1710.83 1210.02 L1710.24 1210.02 L1709.66 1210.02 L1709.07 1210.02 L1708.49 1210.02 L1707.9 1210.02 L1707.31 1210.02 L1706.73 1210.02 L1706.14 1210.02 L1705.55 1210.02 L1704.97 1210.02 L1704.38 1210.02 L1703.79 1210.02 L1703.21 1210.02 L1702.62 1210.02 L1702.04 1210.02 L1701.45 1210.02 L1700.86 1210.02 L1700.28 1210.02 L1699.69 1210.02 L1699.1 1210.02 L1698.52 1210.02 L1697.93 1210.02 L1697.34 1210.02 L1696.76 1210.02 L1696.17 1210.02 L1695.58 1210.02 L1695 1210.02 L1694.41 1210.02 L1693.83 1210.02 L1693.24 1210.02 L1692.65 1210.02 L1692.07 1210.02 L1691.48 1210.02 L1690.89 1210.02 L1690.31 1210.02 L1689.72 1210.02 L1689.13 1210.02 L1688.55 1210.02 L1687.96 1210.02 L1687.37 1210.02 L1686.79 1210.02 L1686.2 1210.02 L1685.62 1210.02 L1685.03 1210.02 L1684.44 1210.02 L1683.86 1210.02 L1683.27 1210.02 L1682.68 1210.02 L1682.1 1210.02 L1681.51 1210.02 L1680.92 1210.02 L1680.34 1210.02 L1679.75 1210.02 L1679.17 1210.02 L1678.58 1210.02 L1677.99 1210.02 L1677.41 1210.02 L1676.82 1210.02 L1676.23 1210.02 L1675.65 1210.02 L1675.06 1210.02 L1674.47 1210.02 L1673.89 1210.02 L1673.3 1210.02 L1672.71 1210.02 L1672.13 1210.02 L1671.54 1210.02 L1670.96 1210.02 L1670.37 1210.02 L1669.78 1210.02 L1669.2 1210.02 L1668.61 1210.02 L1668.02 1210.02 L1667.44 1210.02 L1666.85 1210.02 L1666.26 1210.02 L1665.68 1210.02 L1665.09 1210.02 L1664.5 1210.02 L1663.92 1210.02 L1663.33 1210.02 L1662.75 1210.02 L1662.16 1210.02 L1661.57 1210.02 L1660.99 1210.02 L1660.4 1210.02 L1659.81 1210.02 L1659.23 1210.02 L1658.64 1210.02 L1658.05 1210.02 L1657.47 1210.02 L1656.88 1210.02 L1656.29 1210.02 L1655.71 1210.02 L1655.12 1210.02 L1654.54 1210.02 L1653.95 1210.02 L1653.36 1210.02 L1652.78 1210.02 L1652.19 1210.02 L1651.6 1210.02 L1651.02 1210.02 L1650.43 1210.02 L1649.84 1210.02 L1649.26 1210.02 L1648.67 1210.02 L1648.09 1210.02 L1647.5 1210.02 L1646.91 1210.02 L1646.33 1210.02 L1645.74 1210.02 L1645.15 1210.02 L1644.57 1210.02 L1643.98 1210.02 L1643.39 1210.02 L1642.81 1210.02 L1642.22 1210.02 L1641.63 1210.02 L1641.05 1210.02 L1640.46 1210.02 L1639.88 1210.02 L1639.29 1210.02 L1638.7 1210.02 L1638.12 1210.02 L1637.53 1210.02 L1636.94 1210.02 L1636.36 1210.02 L1635.77 1210.02 L1635.18 1210.02 L1634.6 1210.02 L1634.01 1210.02 L1633.42 1210.02 L1632.84 1210.02 L1632.25 1210.02 L1631.67 1210.02 L1631.08 1210.02 L1630.49 1210.02 L1629.91 1210.02 L1629.32 1210.02 L1628.73 1210.02 L1628.15 1210.02 L1627.56 1210.02 L1626.97 1210.02 L1626.39 1210.02 L1625.8 1210.02 L1625.22 1210.02 L1624.63 1210.02 L1624.04 1210.02 L1623.46 1210.02 L1622.87 1210.02 L1622.28 1210.02 L1621.7 1210.02 L1621.11 1210.02 L1620.52 1210.02 L1619.94 1210.02 L1619.35 1210.02 L1618.76 1210.02 L1618.18 1210.02 L1617.59 1210.02 L1617.01 1210.02 L1616.42 1210.02 L1615.83 1210.02 L1615.25 1210.02 L1614.66 1210.02 L1614.07 1210.02 L1613.49 1210.02 L1612.9 1210.02 L1612.31 1210.02 L1611.73 1210.02 L1611.14 1210.02 L1610.55 1210.02 L1609.97 1210.02 L1609.38 1210.02 L1608.8 1210.02 L1608.21 1210.02 L1607.62 1210.02 L1607.04 1210.02 L1606.45 1210.02 L1605.86 1210.02 L1605.28 1210.02 L1604.69 1210.02 L1604.1 1210.02 L1603.52 1210.02 L1602.93 1210.02 L1602.34 1210.02 L1601.76 1210.02 L1601.17 1210.02 L1600.59 1210.02 L1600 1210.02 L1599.41 1210.02 L1598.83 1210.02 L1598.24 1210.02 L1597.65 1210.02 L1597.07 1210.02 L1596.48 1210.02 L1595.89 1210.02 L1595.31 1210.02 L1594.72 1210.02 L1594.14 1210.02 L1593.55 1210.02 L1592.96 1210.02 L1592.38 1210.02 L1591.79 1210.02 L1591.2 1210.02 L1590.62 1210.02 L1590.03 1210.02 L1589.44 1210.02 L1588.86 1210.02 L1588.27 1210.02 L1587.68 1210.02 L1587.1 1210.02 L1586.51 1210.02 L1585.93 1210.02 L1585.34 1210.02 L1584.75 1210.02 L1584.17 1210.02 L1583.58 1210.02 L1582.99 1210.02 L1582.41 1210.02 L1581.82 1210.02 L1581.23 1210.02 L1580.65 1210.02 L1580.06 1210.02 L1579.47 1210.02 L1578.89 1210.02 L1578.3 1210.02 L1577.72 1210.02 L1577.13 1210.02 L1576.54 1210.02 L1575.96 1210.02 L1575.37 1210.02 L1574.78 1210.02 L1574.2 1210.02 L1573.61 1210.02 L1573.02 1210.02 L1572.44 1210.02 L1571.85 1210.02 L1571.27 1210.02 L1570.68 1210.02 L1570.09 1210.02 L1569.51 1210.02 L1568.92 1210.02 L1568.33 1210.02 L1567.75 1210.02 L1567.16 1210.02 L1566.57 1210.02 L1565.99 1210.02 L1565.4 1210.02 L1564.81 1210.02 L1564.23 1210.02 L1563.64 1210.02 L1563.06 1210.02 L1562.47 1210.02 L1561.88 1210.02 L1561.3 1210.02 L1560.71 1210.02 L1560.12 1210.02 L1559.54 1210.02 L1558.95 1210.02 L1558.36 1210.02 L1557.78 1210.02 L1557.19 1210.02 L1556.6 1210.02 L1556.02 1210.02 L1555.43 1210.02 L1554.85 1210.02 L1554.26 1210.02 L1553.67 1210.02 L1553.09 1210.02 L1552.5 1210.02 L1551.91 1210.02 L1551.33 1210.02 L1550.74 1210.02 L1550.15 1210.02 L1549.57 1210.02 L1548.98 1210.02 L1548.4 1210.02 L1547.81 1210.02 L1547.22 1210.02 L1546.64 1210.02 L1546.05 1210.02 L1545.46 1210.02 L1544.88 1210.02 L1544.29 1210.02 L1543.7 1210.02 L1543.12 1210.02 L1542.53 1210.02 L1541.94 1210.02 L1541.36 1210.02 L1540.77 1210.02 L1540.19 1210.02 L1539.6 1210.02 L1539.01 1210.02 L1538.43 1210.02 L1537.84 1210.02 L1537.25 1210.02 L1536.67 1210.02 L1536.08 1210.02 L1535.49 1210.02 L1534.91 1210.02 L1534.32 1210.02 L1533.73 1210.02 L1533.15 1210.02 L1532.56 1210.02 L1531.98 1210.02 L1531.39 1210.02 L1530.8 1210.02 L1530.22 1210.02 L1529.63 1210.02 L1529.04 1210.02 L1528.46 1210.02 L1527.87 1210.02 L1527.28 1210.02 L1526.7 1210.02 L1526.11 1210.02 L1525.52 1210.02 L1524.94 1210.02 L1524.35 1210.02 L1523.77 1210.02 L1523.18 1210.02 L1522.59 1210.02 L1522.01 1210.02 L1521.42 1210.02 L1520.83 1210.02 L1520.25 1210.02 L1519.66 1210.02 L1519.07 1210.02 L1518.49 1210.02 L1517.9 1210.02 L1517.32 1210.02 L1516.73 1210.02 L1516.14 1210.02 L1515.56 1210.02 L1514.97 1210.02 L1514.38 1210.02 L1513.8 1210.02 L1513.21 1210.02 L1512.62 1210.02 L1512.04 1210.02 L1511.45 1210.02 L1510.86 1210.02 L1510.28 1210.02 L1509.69 1210.02 L1509.11 1210.02 L1508.52 1210.02 L1507.93 1210.02 L1507.35 1210.02 L1506.76 1210.02 L1506.17 1210.02 L1505.59 1210.02 L1505 1210.02 L1504.41 1210.02 L1503.83 1210.02 L1503.24 1210.02 L1502.65 1210.02 L1502.07 1210.02 L1501.48 1210.02 L1500.9 1210.02 L1500.31 1210.02 L1499.72 1210.02 L1499.14 1210.02 L1498.55 1210.02 L1497.96 1210.02 L1497.38 1210.02 L1496.79 1210.02 L1496.2 1210.02 L1495.62 1210.02 L1495.03 1210.02 L1494.45 1210.02 L1493.86 1210.02 L1493.27 1210.02 L1492.69 1210.02 L1492.1 1210.02 L1491.51 1210.02 L1490.93 1210.02 L1490.34 1210.02 L1489.75 1210.02 L1489.17 1210.02 L1488.58 1210.02 L1487.99 1210.02 L1487.41 1210.02 L1486.82 1210.02 L1486.24 1210.02 L1485.65 1210.02 L1485.06 1210.02 L1484.48 1210.02 L1483.89 1210.02 L1483.3 1210.02 L1482.72 1210.02 L1482.13 1210.02 L1481.54 1210.02 L1480.96 1210.02 L1480.37 1210.02 L1479.78 1210.02 L1479.2 1210.02 L1478.61 1210.02 L1478.03 1210.02 L1477.44 1210.02 L1476.85 1210.02 L1476.27 1210.02 L1475.68 1210.02 L1475.09 1210.02 L1474.51 1210.02 L1473.92 1210.02 L1473.33 1210.02 L1472.75 1210.02 L1472.16 1210.02 L1471.57 1210.02 L1470.99 1210.02 L1470.4 1210.02 L1469.82 1210.02 L1469.23 1210.02 L1468.64 1210.02 L1468.06 1210.02 L1467.47 1210.02 L1466.88 1210.02 L1466.3 1210.02 L1465.71 1210.02 L1465.12 1210.02 L1464.54 1210.02 L1463.95 1210.02 L1463.37 1210.02 L1462.78 1210.02 L1462.19 1210.02 L1461.61 1210.02 L1461.02 1210.02 L1460.43 1210.02 L1459.85 1210.02 L1459.26 1210.02 L1458.67 1210.02 L1458.09 1210.02 L1457.5 1210.02 L1456.91 1210.02 L1456.33 1210.02 L1455.74 1210.02 L1455.16 1210.02 L1454.57 1210.02 L1453.98 1210.02 L1453.4 1210.02 L1452.81 1210.02 L1452.22 1210.02 L1451.64 1210.02 L1451.05 1210.02 L1450.46 1210.02 L1449.88 1210.02 L1449.29 1210.02 L1448.7 1210.02 L1448.12 1210.02 L1447.53 1210.02 L1446.95 1210.02 L1446.36 1210.02 L1445.77 1210.02 L1445.19 1210.02 L1444.6 1210.02 L1444.01 1210.02 L1443.43 1210.02 L1442.84 1210.02 L1442.25 1210.02 L1441.67 1210.02 L1441.08 1210.02 L1440.5 1210.02 L1439.91 1210.02 L1439.32 1210.02 L1438.74 1210.02 L1438.15 1210.02 L1437.56 1210.02 L1436.98 1210.02 L1436.39 1210.02 L1435.8 1210.02 L1435.22 1210.02 L1434.63 1210.02 L1434.04 1210.02 L1433.46 1210.02 L1432.87 1210.02 L1432.29 1210.02 L1431.7 1210.02 L1431.11 1210.02 L1430.53 1210.02 L1429.94 1210.02 L1429.35 1210.02 L1428.77 1210.02 L1428.18 1210.02 L1427.59 1210.02 L1427.01 1210.02 L1426.42 1210.02 L1425.83 1210.02 L1425.25 1210.02 L1424.66 1210.02 L1424.08 1210.02 L1423.49 1210.02 L1422.9 1210.02 L1422.32 1210.02 L1421.73 1210.02 L1421.14 1210.02 L1420.56 1210.02 L1419.97 1210.02 L1419.38 1210.02 L1418.8 1210.02 L1418.21 1210.02 L1417.63 1210.02 L1417.04 1210.02 L1416.45 1210.02 L1415.87 1210.02 L1415.28 1210.02 L1414.69 1210.02 L1414.11 1210.02 L1413.52 1210.02 L1412.93 1210.02 L1412.35 1210.02 L1411.76 1210.02 L1411.17 1210.02 L1410.59 1210.02 L1410 1210.02 L1409.42 1210.02 L1408.83 1210.02 L1408.24 1210.02 L1407.66 1210.02 L1407.07 1210.02 L1406.48 1210.02 L1405.9 1210.02 L1405.31 1210.02 L1404.72 1210.02 L1404.14 1210.02 L1403.55 1210.02 L1402.96 1210.02 L1402.38 1210.02 L1401.79 1210.02 L1401.21 1210.02 L1400.62 1210.02 L1400.03 1210.02 L1399.45 1210.02 L1398.86 1210.02 L1398.27 1210.02 L1397.69 1210.02 L1397.1 1210.02 L1396.51 1210.02 L1395.93 1210.02 L1395.34 1210.02 L1394.75 1210.02 L1394.17 1210.02 L1393.58 1210.02 L1393 1210.02 L1392.41 1210.02 L1391.82 1210.02 L1391.24 1210.02 L1390.65 1210.02 L1390.06 1210.02 L1389.48 1210.02 L1388.89 1210.02 L1388.3 1210.02 L1387.72 1210.02 L1387.13 1210.02 L1386.55 1210.02 L1385.96 1210.02 L1385.37 1210.02 L1384.79 1210.02 L1384.2 1210.02 L1383.61 1210.02 L1383.03 1210.02 L1382.44 1210.02 L1381.85 1210.02 L1381.27 1210.02 L1380.68 1210.02 L1380.09 1210.02 L1379.51 1210.02 L1378.92 1210.02 L1378.34 1210.02 L1377.75 1210.02 L1377.16 1210.02 L1376.58 1210.02 L1375.99 1210.02 L1375.4 1210.02 L1374.82 1210.02 L1374.23 1210.02 L1373.64 1210.02 L1373.06 1210.02 L1372.47 1210.02 L1371.88 1210.02 L1371.3 1210.02 L1370.71 1210.02 L1370.13 1210.02 L1369.54 1210.02 L1368.95 1210.02 L1368.37 1210.02 L1367.78 1210.02 L1367.19 1210.02 L1366.61 1210.02 L1366.02 1210.02 L1365.43 1210.02 L1364.85 1210.02 L1364.26 1210.02 L1363.68 1210.02 L1363.09 1210.02 L1362.5 1210.02 L1361.92 1210.02 L1361.33 1210.02 L1360.74 1210.02 L1360.16 1210.02 L1359.57 1210.02 L1358.98 1210.02 L1358.4 1210.02 L1357.81 1210.02 L1357.22 1210.02 L1356.64 1210.02 L1356.05 1210.02 L1355.47 1210.02 L1354.88 1210.02 L1354.29 1210.02 L1353.71 1210.02 L1353.12 1210.02 L1352.53 1210.02 L1351.95 1210.02 L1351.36 1210.02 L1350.77 1210.02 L1350.19 1210.02 L1349.6 1210.02 L1349.01 1210.02 L1348.43 1210.02 L1347.84 1210.02 L1347.26 1210.02 L1346.67 1210.02 L1346.08 1210.02 L1345.5 1210.02 L1344.91 1210.02 L1344.32 1210.02 L1343.74 1210.02 L1343.15 1210.02 L1342.56 1210.02 L1341.98 1210.02 L1341.39 1210.02 L1340.8 1210.02 L1340.22 1210.02 L1339.63 1210.02 L1339.05 1210.02 L1338.46 1210.02 L1337.87 1210.02 L1337.29 1210.02 L1336.7 1210.02 L1336.11 1210.02 L1335.53 1210.02 L1334.94 1210.02 L1334.35 1210.02 L1333.77 1210.02 L1333.18 1210.02 L1332.6 1210.02 L1332.01 1210.02 L1331.42 1210.02 L1330.84 1210.02 L1330.25 1210.02 L1329.66 1210.02 L1329.08 1210.02 L1328.49 1210.02 L1327.9 1210.02 L1327.32 1210.02 L1326.73 1210.02 L1326.14 1210.02 L1325.56 1210.02 L1324.97 1210.02 L1324.39 1210.02 L1323.8 1210.02 L1323.21 1210.02 L1322.63 1210.02 L1322.04 1210.02 L1321.45 1210.02 L1320.87 1210.02 L1320.28 1210.02 L1319.69 1210.02 L1319.11 1210.02 L1318.52 1210.02 L1317.93 1210.02 L1317.35 1210.02 L1316.76 1210.02 L1316.18 1210.02 L1315.59 1210.02 L1315 1210.02 L1314.42 1210.02 L1313.83 1210.02 L1313.24 1210.02 L1312.66 1210.02 L1312.07 1210.02 L1311.48 1210.02 L1310.9 1210.02 L1310.31 1210.02 L1309.73 1210.02 L1309.14 1210.02 L1308.55 1210.02 L1307.97 1210.02 L1307.38 1210.02 L1306.79 1210.02 L1306.21 1210.02 L1305.62 1210.02 L1305.03 1210.02 L1304.45 1210.02 L1303.86 1210.02 L1303.27 1210.02 L1302.69 1210.02 L1302.1 1210.02 L1301.52 1210.02 L1300.93 1210.02 L1300.34 1210.02 L1299.76 1210.02 L1299.17 1210.02 L1298.58 1210.02 L1298 1210.02 L1297.41 1210.02 L1296.82 1210.02 L1296.24 1210.02 L1295.65 1210.02 L1295.06 1210.02 L1294.48 1210.02 L1293.89 1210.02 L1293.31 1210.02 L1292.72 1210.02 L1292.13 1210.02 L1291.55 1210.02 L1290.96 1210.02 L1290.37 1210.02 L1289.79 1210.02 L1289.2 1210.02 L1288.61 1210.02 L1288.03 1210.02 L1287.44 1210.02 L1286.86 1210.02 L1286.27 1210.02 L1285.68 1210.02 L1285.1 1210.02 L1284.51 1210.02 L1283.92 1210.02 L1283.34 1210.02 L1282.75 1210.02 L1282.16 1210.02 L1281.58 1210.02 L1280.99 1210.02 L1280.4 1210.02 L1279.82 1210.02 L1279.23 1210.02 L1278.65 1210.02 L1278.06 1210.02 L1277.47 1210.02 L1276.89 1210.02 L1276.3 1210.02 L1275.71 1210.02 L1275.13 1210.02 L1274.54 1210.02 L1273.95 1210.02 L1273.37 1210.02 L1272.78 1210.02 L1272.19 1210.02 L1271.61 1210.02 L1271.02 1210.02 L1270.44 1210.02 L1269.85 1210.02 L1269.26 1210.02 L1268.68 1210.02 L1268.09 1210.02 L1267.5 1210.02 L1266.92 1210.02 L1266.33 1210.02 L1265.74 1210.02 L1265.16 1210.02 L1264.57 1210.02 L1263.98 1210.02 L1263.4 1210.02 L1262.81 1210.02 L1262.23 1210.02 L1261.64 1210.02 L1261.05 1210.02 L1260.47 1210.02 L1259.88 1210.02 L1259.29 1210.02 L1258.71 1210.02 L1258.12 1210.02 L1257.53 1210.02 L1256.95 1210.02 L1256.36 1210.02 L1255.78 1210.02 L1255.19 1210.02 L1254.6 1210.02 L1254.02 1210.02 L1253.43 1210.02 L1252.84 1210.02 L1252.26 1210.02 L1251.67 1210.02 L1251.08 1210.02 L1250.5 1210.02 L1249.91 1210.02 L1249.32 1210.02 L1248.74 1210.02 L1248.15 1210.02 L1247.57 1210.02 L1246.98 1210.02 L1246.39 1210.02 L1245.81 1210.02 L1245.22 1210.02 L1244.63 1210.02 L1244.05 1210.02 L1243.46 1210.02 L1242.87 1210.02 L1242.29 1210.02 L1241.7 1210.02 L1241.11 1210.02 L1240.53 1210.02 L1239.94 1210.02 L1239.36 1210.02 L1238.77 1210.02 L1238.18 1210.02 L1237.6 1210.02 L1237.01 1210.02 L1236.42 1210.02 L1235.84 1210.02 L1235.25 1210.02 L1234.66 1210.02 L1234.08 1210.02 L1233.49 1210.02 L1232.91 1210.02 L1232.32 1210.02 L1231.73 1210.02 L1231.15 1210.02 L1230.56 1210.02 L1229.97 1210.02 L1229.39 1210.02 L1228.8 1210.02 L1228.21 1210.02 L1227.63 1210.02 L1227.04 1210.02 L1226.45 1210.02 L1225.87 1210.02 L1225.28 1210.02 L1224.7 1210.02 L1224.11 1210.02 L1223.52 1210.02 L1222.94 1210.02 L1222.35 1210.02 L1221.76 1210.02 L1221.18 1210.02 L1220.59 1210.02 L1220 1210.02 L1219.42 1210.02 L1218.83 1210.02 L1218.24 1210.02 L1217.66 1210.02 L1217.07 1210.02 L1216.49 1210.02 L1215.9 1210.02 L1215.31 1210.02 L1214.73 1210.02 L1214.14 1210.02 L1213.55 1210.02 L1212.97 1210.02 L1212.38 1210.02 L1211.79 1210.02 L1211.21 1210.02 L1210.62 1210.02 L1210.03 1210.02 L1209.45 1210.02 L1208.86 1210.02 L1208.28 1210.02 L1207.69 1210.02 L1207.1 1210.02 L1206.52 1210.02 L1205.93 1210.02 L1205.34 1210.02 L1204.76 1210.02 L1204.17 1210.02 L1203.58 1210.02 L1203 1210.02 L1202.41 1210.02 L1201.83 1210.02 L1201.24 1210.02 L1200.65 1210.02 L1200.07 1210.02 L1199.48 1210.02 L1198.89 1210.02 L1198.31 1210.02 L1197.72 1210.02 L1197.13 1210.02 L1196.55 1210.02 L1195.96 1210.02 L1195.37 1210.02 L1194.79 1210.02 L1194.2 1210.02 L1193.62 1210.02 L1193.03 1210.02 L1192.44 1210.02 L1191.86 1210.02 L1191.27 1210.02 L1190.68 1210.02 L1190.1 1210.02 L1189.51 1210.02 L1188.92 1210.02 L1188.34 1210.02 L1187.75 1210.02 L1187.16 1210.02 L1186.58 1210.02 L1185.99 1210.02 L1185.41 1210.02 L1184.82 1210.02 L1184.23 1210.02 L1183.65 1210.02 L1183.06 1210.02 L1182.47 1210.02 L1181.89 1210.02 L1181.3 1210.02 L1180.71 1210.02 L1180.13 1210.02 L1179.54 1210.02 L1178.96 1210.02 L1178.37 1210.02 L1177.78 1210.02 L1177.2 1210.02 L1176.61 1210.02 L1176.02 1210.02 L1175.44 1210.02 L1174.85 1210.02 L1174.26 1210.02 L1173.68 1210.02 L1173.09 1210.02 L1172.5 1210.02 L1171.92 1210.02 L1171.33 1210.02 L1170.75 1210.02 L1170.16 1210.02 L1169.57 1210.02 L1168.99 1210.02 L1168.4 1210.02 L1167.81 1210.02 L1167.23 1210.02 L1166.64 1210.02 L1166.05 1210.02 L1165.47 1210.02 L1164.88 1210.02 L1164.29 1210.02 L1163.71 1210.02 L1163.12 1210.02 L1162.54 1210.02 L1161.95 1210.02 L1161.36 1210.02 L1160.78 1210.02 L1160.19 1210.02 L1159.6 1210.02 L1159.02 1210.02 L1158.43 1210.02 L1157.84 1210.02 L1157.26 1210.02 L1156.67 1210.02 L1156.09 1210.02 L1155.5 1210.02 L1154.91 1210.02 L1154.33 1210.02 L1153.74 1210.02 L1153.15 1210.02 L1152.57 1210.02 L1151.98 1210.02 L1151.39 1210.02 L1150.81 1210.02 L1150.22 1210.02 L1149.63 1210.02 L1149.05 1210.02 L1148.46 1210.02 L1147.88 1210.02 L1147.29 1210.02 L1146.7 1210.02 L1146.12 1210.02 L1145.53 1210.02 L1144.94 1210.02 L1144.36 1210.02 L1143.77 1210.02 L1143.18 1210.02 L1142.6 1210.02 L1142.01 1210.02 L1141.42 1210.02 L1140.84 1210.02 L1140.25 1210.02 L1139.67 1210.02 L1139.08 1210.02 L1138.49 1210.02 L1137.91 1210.02 L1137.32 1210.02 L1136.73 1210.02 L1136.15 1210.02 L1135.56 1210.02 L1134.97 1210.02 L1134.39 1210.02 L1133.8 1210.02 L1133.21 1210.02 L1132.63 1210.02 L1132.04 1210.02 L1131.46 1210.02 L1130.87 1210.02 L1130.28 1210.02 L1129.7 1210.02 L1129.11 1210.02 L1128.52 1210.02 L1127.94 1210.02 L1127.35 1210.02 L1126.76 1210.02 L1126.18 1210.02 L1125.59 1210.02 L1125.01 1210.02 L1124.42 1210.02 L1123.83 1210.02 L1123.25 1210.02 L1122.66 1210.02 L1122.07 1210.02 L1121.49 1210.02 L1120.9 1210.02 L1120.31 1210.02 L1119.73 1210.02 L1119.14 1210.02 L1118.55 1210.02 L1117.97 1210.02 L1117.38 1210.02 L1116.8 1210.02 L1116.21 1210.02 L1115.62 1210.02 L1115.04 1210.02 L1114.45 1210.02 L1113.86 1210.02 L1113.28 1210.02 L1112.69 1210.02 L1112.1 1210.02 L1111.52 1210.02 L1110.93 1210.02 L1110.34 1210.02 L1109.76 1210.02 L1109.17 1210.02 L1108.59 1210.02 L1108 1210.02 L1107.41 1210.02 L1106.83 1210.02 L1106.24 1210.02 L1105.65 1210.02 L1105.07 1210.02 L1104.48 1210.02 L1103.89 1210.02 L1103.31 1210.02 L1102.72 1210.02 L1102.14 1210.02 L1101.55 1210.02 L1100.96 1210.02 L1100.38 1210.02 L1099.79 1210.02 L1099.2 1210.02 L1098.62 1210.02 L1098.03 1210.02 L1097.44 1210.02 L1096.86 1210.02 L1096.27 1210.02 L1095.68 1210.02 L1095.1 1210.02 L1094.51 1210.02 L1093.93 1210.02 L1093.34 1210.02 L1092.75 1210.02 L1092.17 1210.02 L1091.58 1210.02 L1090.99 1210.02 L1090.41 1210.02 L1089.82 1210.02 L1089.23 1210.02 L1088.65 1210.02 L1088.06 1210.02 L1087.47 1210.02 L1086.89 1210.02 L1086.3 1210.02 L1085.72 1210.02 L1085.13 1210.02 L1084.54 1210.02 L1083.96 1210.02 L1083.37 1210.02 L1082.78 1210.02 L1082.2 1210.02 L1081.61 1210.02 L1081.02 1210.02 L1080.44 1210.02 L1079.85 1210.02 L1079.26 1210.02 L1078.68 1210.02 L1078.09 1210.02 L1077.51 1210.02 L1076.92 1210.02 L1076.33 1210.02 L1075.75 1210.02 L1075.16 1210.02 L1074.57 1210.02 L1073.99 1210.02 L1073.4 1210.02 L1072.81 1210.02 L1072.23 1210.02 L1071.64 1210.02 L1071.06 1210.02 L1070.47 1210.02 L1069.88 1210.02 L1069.3 1210.02 L1068.71 1210.02 L1068.12 1210.02 L1067.54 1210.02 L1066.95 1210.02 L1066.36 1210.02 L1065.78 1210.02 L1065.19 1210.02 L1064.6 1210.02 L1064.02 1210.02 L1063.43 1210.02 L1062.85 1210.02 L1062.26 1210.02 L1061.67 1210.02 L1061.09 1210.02 L1060.5 1210.02 L1059.91 1210.02 L1059.33 1210.02 L1058.74 1210.02 L1058.15 1210.02 L1057.57 1210.02 L1056.98 1210.02 L1056.39 1210.02 L1055.81 1210.02 L1055.22 1210.02 L1054.64 1210.02 L1054.05 1210.02 L1053.46 1210.02 L1052.88 1210.02 L1052.29 1210.02 L1051.7 1210.02 L1051.12 1210.02 L1050.53 1210.02 L1049.94 1210.02 L1049.36 1210.02 L1048.77 1210.02 L1048.19 1210.02 L1047.6 1210.02 L1047.01 1210.02 L1046.43 1210.02 L1045.84 1210.02 L1045.25 1210.02 L1044.67 1210.02 L1044.08 1210.02 L1043.49 1210.02 L1042.91 1210.02 L1042.32 1210.02 L1041.73 1210.02 L1041.15 1210.02 L1040.56 1210.02 L1039.98 1210.02 L1039.39 1210.02 L1038.8 1210.02 L1038.22 1210.02 L1037.63 1210.02 L1037.04 1210.02 L1036.46 1210.02 L1035.87 1210.02 L1035.28 1210.02 L1034.7 1210.02 L1034.11 1210.02 L1033.52 1210.02 L1032.94 1210.02 L1032.35 1210.02 L1031.77 1210.02 L1031.18 1210.02 L1030.59 1210.02 L1030.01 1210.02 L1029.42 1210.02 L1028.83 1210.02 L1028.25 1210.02 L1027.66 1210.02 L1027.07 1210.02 L1026.49 1210.02 L1025.9 1210.02 L1025.32 1210.02 L1024.73 1210.02 L1024.14 1210.02 L1023.56 1210.02 L1022.97 1210.02 L1022.38 1210.02 L1021.8 1210.02 L1021.21 1210.02 L1020.62 1210.02 L1020.04 1210.02 L1019.45 1210.02 L1018.86 1210.02 L1018.28 1210.02 L1017.69 1210.02 L1017.11 1210.02 L1016.52 1210.02 L1015.93 1210.02 L1015.35 1210.02 L1014.76 1210.02 L1014.17 1210.02 L1013.59 1210.02 L1013 1210.02 L1012.41 1210.02 L1011.83 1210.02 L1011.24 1210.02 L1010.65 1210.02 L1010.07 1210.02 L1009.48 1210.02 L1008.9 1210.02 L1008.31 1210.02 L1007.72 1210.02 L1007.14 1210.02 L1006.55 1210.02 L1005.96 1210.02 L1005.38 1210.02 L1004.79 1210.02 L1004.2 1210.02 L1003.62 1210.02 L1003.03 1210.02 L1002.44 1210.02 L1001.86 1210.02 L1001.27 1210.02 L1000.69 1210.02 L1000.1 1210.02 L999.513 1210.02 L998.926 1210.02 L998.34 1210.02 L997.754 1210.02 L997.167 1210.02 L996.581 1210.02 L995.994 1210.02 L995.408 1210.02 L994.822 1210.02 L994.235 1210.02 L993.649 1210.02 L993.062 1210.02 L992.476 1210.02 L991.889 1210.02 L991.303 1210.02 L990.717 1210.02 L990.13 1210.02 L989.544 1210.02 L988.957 1210.02 L988.371 1210.02 L987.785 1210.02 L987.198 1210.02 L986.612 1210.02 L986.025 1210.02  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.13 986.612,1210.13 987.198,1210.13 987.785,1210.13 988.371,1210.13 988.957,1210.13 989.544,1210.13 990.13,1210.13 990.717,1210.13 991.303,1210.13 991.889,1210.13 992.476,1210.13 993.062,1210.13 993.649,1210.13 994.235,1210.13 994.822,1210.13 995.408,1210.13 995.994,1210.13 996.581,1210.13 997.167,1210.13 997.754,1210.13 998.34,1210.13 998.926,1210.13 999.513,1210.13 1000.1,1210.13 1000.69,1210.13 1001.27,1210.13 1001.86,1210.13 1002.44,1210.13 1003.03,1210.13 1003.62,1210.13 1004.2,1210.13 1004.79,1210.13 1005.38,1210.13 1005.96,1210.13 1006.55,1210.13 1007.14,1210.13 1007.72,1210.13 1008.31,1210.13 1008.9,1210.13 1009.48,1210.13 1010.07,1210.13 1010.65,1210.13 1011.24,1210.13 1011.83,1210.13 1012.41,1210.13 1013,1210.13 1013.59,1210.13 1014.17,1210.13 1014.76,1210.13 1015.35,1210.13 1015.93,1210.13 1016.52,1210.13 1017.11,1210.13 1017.69,1210.13 1018.28,1210.13 1018.86,1210.13 1019.45,1210.13 1020.04,1210.13 1020.62,1210.13 1021.21,1210.13 1021.8,1210.13 1022.38,1210.13 1022.97,1210.13 1023.56,1210.13 1024.14,1210.13 1024.73,1210.13 1025.32,1210.13 1025.9,1210.13 1026.49,1210.13 1027.07,1210.13 1027.66,1210.13 1028.25,1210.13 1028.83,1210.13 1029.42,1210.13 1030.01,1210.13 1030.59,1210.13 1031.18,1210.13 1031.77,1210.13 1032.35,1210.13 1032.94,1210.13 1033.52,1210.13 1034.11,1210.13 1034.7,1210.13 1035.28,1210.13 1035.87,1210.13 1036.46,1210.13 1037.04,1210.13 1037.63,1210.13 1038.22,1210.13 1038.8,1210.13 1039.39,1210.13 1039.98,1210.13 1040.56,1210.13 1041.15,1210.13 1041.73,1210.13 1042.32,1210.13 1042.91,1210.13 1043.49,1210.13 1044.08,1210.13 1044.67,1210.13 1045.25,1210.13 1045.84,1210.13 1046.43,1210.13 1047.01,1210.13 1047.6,1210.13 1048.19,1210.13 1048.77,1210.13 1049.36,1210.13 1049.94,1210.13 1050.53,1210.13 1051.12,1210.13 1051.7,1210.13 1052.29,1210.13 1052.88,1210.13 1053.46,1210.13 1054.05,1210.13 1054.64,1210.13 1055.22,1210.13 1055.81,1210.13 1056.39,1210.13 1056.98,1210.13 1057.57,1210.13 1058.15,1210.13 1058.74,1210.13 1059.33,1210.13 1059.91,1210.13 1060.5,1210.13 1061.09,1210.13 1061.67,1210.13 1062.26,1210.13 1062.85,1210.13 1063.43,1210.13 1064.02,1210.13 1064.6,1210.13 1065.19,1210.13 1065.78,1210.13 1066.36,1210.13 1066.95,1210.13 1067.54,1210.13 1068.12,1210.13 1068.71,1210.13 1069.3,1210.13 1069.88,1210.13 1070.47,1210.13 1071.06,1210.13 1071.64,1210.13 1072.23,1210.13 1072.81,1210.13 1073.4,1210.13 1073.99,1210.13 1074.57,1210.13 1075.16,1210.13 1075.75,1210.13 1076.33,1210.13 1076.92,1210.13 1077.51,1210.13 1078.09,1210.13 1078.68,1210.13 1079.26,1210.13 1079.85,1210.13 1080.44,1210.13 1081.02,1210.13 1081.61,1210.13 1082.2,1210.13 1082.78,1210.13 1083.37,1210.13 1083.96,1210.13 1084.54,1210.13 1085.13,1210.13 1085.72,1210.13 1086.3,1210.13 1086.89,1210.13 1087.47,1210.13 1088.06,1210.13 1088.65,1210.13 1089.23,1210.13 1089.82,1210.13 1090.41,1210.13 1090.99,1210.13 1091.58,1210.13 1092.17,1210.13 1092.75,1210.13 1093.34,1210.13 1093.93,1210.13 1094.51,1210.13 1095.1,1210.13 1095.68,1210.13 1096.27,1210.13 1096.86,1210.13 1097.44,1210.13 1098.03,1210.13 1098.62,1210.13 1099.2,1210.13 1099.79,1210.13 1100.38,1210.13 1100.96,1210.13 1101.55,1210.13 1102.14,1210.13 1102.72,1210.13 1103.31,1210.13 1103.89,1210.13 1104.48,1210.13 1105.07,1210.13 1105.65,1210.13 1106.24,1210.13 1106.83,1210.13 1107.41,1210.13 1108,1210.13 1108.59,1210.13 1109.17,1210.13 1109.76,1210.13 1110.34,1210.13 1110.93,1210.13 1111.52,1210.13 1112.1,1210.13 1112.69,1210.13 1113.28,1210.13 1113.86,1210.13 1114.45,1210.13 1115.04,1210.13 1115.62,1210.13 1116.21,1210.13 1116.8,1210.13 1117.38,1210.13 1117.97,1210.13 1118.55,1210.13 1119.14,1210.13 1119.73,1210.13 1120.31,1210.13 1120.9,1210.13 1121.49,1210.13 1122.07,1210.13 1122.66,1210.13 1123.25,1210.13 1123.83,1210.13 1124.42,1210.13 1125.01,1210.13 1125.59,1210.13 1126.18,1210.13 1126.76,1210.13 1127.35,1210.13 1127.94,1210.13 1128.52,1210.13 1129.11,1210.13 1129.7,1210.13 1130.28,1210.13 1130.87,1210.13 1131.46,1210.13 1132.04,1210.13 1132.63,1210.13 1133.21,1210.13 1133.8,1210.13 1134.39,1210.13 1134.97,1210.13 1135.56,1210.13 1136.15,1210.13 1136.73,1210.13 1137.32,1210.13 1137.91,1210.13 1138.49,1210.13 1139.08,1210.13 1139.67,1210.13 1140.25,1210.13 1140.84,1210.13 1141.42,1210.13 1142.01,1210.13 1142.6,1210.13 1143.18,1210.13 1143.77,1210.13 1144.36,1210.13 1144.94,1210.13 1145.53,1210.13 1146.12,1210.13 1146.7,1210.13 1147.29,1210.13 1147.88,1210.13 1148.46,1210.13 1149.05,1210.13 1149.63,1210.13 1150.22,1210.13 1150.81,1210.13 1151.39,1210.13 1151.98,1210.13 1152.57,1210.13 1153.15,1210.13 1153.74,1210.13 1154.33,1210.13 1154.91,1210.13 1155.5,1210.13 1156.09,1210.13 1156.67,1210.13 1157.26,1210.13 1157.84,1210.13 1158.43,1210.13 1159.02,1210.13 1159.6,1210.13 1160.19,1210.13 1160.78,1210.13 1161.36,1210.13 1161.95,1210.13 1162.54,1210.13 1163.12,1210.13 1163.71,1210.13 1164.29,1210.13 1164.88,1210.13 1165.47,1210.13 1166.05,1210.13 1166.64,1210.13 1167.23,1210.13 1167.81,1210.13 1168.4,1210.13 1168.99,1210.13 1169.57,1210.13 1170.16,1210.13 1170.75,1210.13 1171.33,1210.13 1171.92,1210.13 1172.5,1210.13 1173.09,1210.13 1173.68,1210.13 1174.26,1210.13 1174.85,1210.13 1175.44,1210.13 1176.02,1210.13 1176.61,1210.13 1177.2,1210.13 1177.78,1210.13 1178.37,1210.13 1178.96,1210.13 1179.54,1210.13 1180.13,1210.13 1180.71,1210.13 1181.3,1210.13 1181.89,1210.13 1182.47,1210.13 1183.06,1210.13 1183.65,1210.13 1184.23,1210.13 1184.82,1210.13 1185.41,1210.13 1185.99,1210.13 1186.58,1210.13 1187.16,1210.13 1187.75,1210.13 1188.34,1210.13 1188.92,1210.13 1189.51,1210.13 1190.1,1210.13 1190.68,1210.13 1191.27,1210.13 1191.86,1210.13 1192.44,1210.13 1193.03,1210.13 1193.62,1210.13 1194.2,1210.13 1194.79,1210.13 1195.37,1210.13 1195.96,1210.13 1196.55,1210.13 1197.13,1210.13 1197.72,1210.13 1198.31,1210.13 1198.89,1210.13 1199.48,1210.13 1200.07,1210.13 1200.65,1210.13 1201.24,1210.13 1201.83,1210.13 1202.41,1210.13 1203,1210.13 1203.58,1210.13 1204.17,1210.13 1204.76,1210.13 1205.34,1210.13 1205.93,1210.13 1206.52,1210.13 1207.1,1210.13 1207.69,1210.13 1208.28,1210.13 1208.86,1210.13 1209.45,1210.13 1210.03,1210.13 1210.62,1210.13 1211.21,1210.13 1211.79,1210.13 1212.38,1210.13 1212.97,1210.13 1213.55,1210.13 1214.14,1210.13 1214.73,1210.13 1215.31,1210.13 1215.9,1210.13 1216.49,1210.13 1217.07,1210.13 1217.66,1210.13 1218.24,1210.13 1218.83,1210.13 1219.42,1210.13 1220,1210.13 1220.59,1210.13 1221.18,1210.13 1221.76,1210.13 1222.35,1210.13 1222.94,1210.13 1223.52,1210.13 1224.11,1210.13 1224.7,1210.13 1225.28,1210.13 1225.87,1210.13 1226.45,1210.13 1227.04,1210.13 1227.63,1210.13 1228.21,1210.13 1228.8,1210.13 1229.39,1210.13 1229.97,1210.13 1230.56,1210.13 1231.15,1210.13 1231.73,1210.13 1232.32,1210.13 1232.91,1210.13 1233.49,1210.13 1234.08,1210.13 1234.66,1210.13 1235.25,1210.13 1235.84,1210.13 1236.42,1210.13 1237.01,1210.13 1237.6,1210.13 1238.18,1210.13 1238.77,1210.13 1239.36,1210.13 1239.94,1210.13 1240.53,1210.13 1241.11,1210.13 1241.7,1210.13 1242.29,1210.13 1242.87,1210.13 1243.46,1210.13 1244.05,1210.13 1244.63,1210.13 1245.22,1210.13 1245.81,1210.13 1246.39,1210.13 1246.98,1210.13 1247.57,1210.13 1248.15,1210.13 1248.74,1210.13 1249.32,1210.13 1249.91,1210.13 1250.5,1210.13 1251.08,1210.13 1251.67,1210.13 1252.26,1210.13 1252.84,1210.13 1253.43,1210.13 1254.02,1210.13 1254.6,1210.13 1255.19,1210.13 1255.78,1210.13 1256.36,1210.13 1256.95,1210.13 1257.53,1210.13 1258.12,1210.13 1258.71,1210.13 1259.29,1210.13 1259.88,1210.13 1260.47,1210.13 1261.05,1210.13 1261.64,1210.13 1262.23,1210.13 1262.81,1210.13 1263.4,1210.13 1263.98,1210.13 1264.57,1210.13 1265.16,1210.13 1265.74,1210.13 1266.33,1210.13 1266.92,1210.13 1267.5,1210.13 1268.09,1210.13 1268.68,1210.13 1269.26,1210.13 1269.85,1210.13 1270.44,1210.13 1271.02,1210.13 1271.61,1210.13 1272.19,1210.13 1272.78,1210.13 1273.37,1210.13 1273.95,1210.13 1274.54,1210.13 1275.13,1210.13 1275.71,1210.13 1276.3,1210.13 1276.89,1210.13 1277.47,1210.13 1278.06,1210.13 1278.65,1210.13 1279.23,1210.13 1279.82,1210.13 1280.4,1210.13 1280.99,1210.13 1281.58,1210.13 1282.16,1210.13 1282.75,1210.13 1283.34,1210.13 1283.92,1210.13 1284.51,1210.13 1285.1,1210.13 1285.68,1210.13 1286.27,1210.13 1286.86,1210.13 1287.44,1210.13 1288.03,1210.13 1288.61,1210.13 1289.2,1210.13 1289.79,1210.13 1290.37,1210.13 1290.96,1210.13 1291.55,1210.13 1292.13,1210.13 1292.72,1210.13 1293.31,1210.13 1293.89,1210.13 1294.48,1210.13 1295.06,1210.13 1295.65,1210.13 1296.24,1210.13 1296.82,1210.13 1297.41,1210.13 1298,1210.13 1298.58,1210.13 1299.17,1210.13 1299.76,1210.13 1300.34,1210.13 1300.93,1210.13 1301.52,1210.13 1302.1,1210.13 1302.69,1210.13 1303.27,1210.13 1303.86,1210.13 1304.45,1210.13 1305.03,1210.13 1305.62,1210.13 1306.21,1210.13 1306.79,1210.13 1307.38,1210.13 1307.97,1210.13 1308.55,1210.13 1309.14,1210.13 1309.73,1210.13 1310.31,1210.13 1310.9,1210.13 1311.48,1210.13 1312.07,1210.13 1312.66,1210.13 1313.24,1210.13 1313.83,1210.13 1314.42,1210.13 1315,1210.13 1315.59,1210.13 1316.18,1210.13 1316.76,1210.13 1317.35,1210.13 1317.93,1210.13 1318.52,1210.13 1319.11,1210.13 1319.69,1210.13 1320.28,1210.13 1320.87,1210.13 1321.45,1210.13 1322.04,1210.13 1322.63,1210.13 1323.21,1210.13 1323.8,1210.13 1324.39,1210.13 1324.97,1210.13 1325.56,1210.13 1326.14,1210.13 1326.73,1210.13 1327.32,1210.13 1327.9,1210.13 1328.49,1210.13 1329.08,1210.13 1329.66,1210.13 1330.25,1210.13 1330.84,1210.13 1331.42,1210.13 1332.01,1210.13 1332.6,1210.13 1333.18,1210.13 1333.77,1210.13 1334.35,1210.13 1334.94,1210.13 1335.53,1210.13 1336.11,1210.13 1336.7,1210.13 1337.29,1210.13 1337.87,1210.13 1338.46,1210.13 1339.05,1210.13 1339.63,1210.13 1340.22,1210.13 1340.8,1210.13 1341.39,1210.13 1341.98,1210.13 1342.56,1210.13 1343.15,1210.13 1343.74,1210.13 1344.32,1210.13 1344.91,1210.13 1345.5,1210.13 1346.08,1210.13 1346.67,1210.13 1347.26,1210.13 1347.84,1210.13 1348.43,1210.13 1349.01,1210.13 1349.6,1210.13 1350.19,1210.13 1350.77,1210.13 1351.36,1210.13 1351.95,1210.13 1352.53,1210.13 1353.12,1210.13 1353.71,1210.13 1354.29,1210.13 1354.88,1210.13 1355.47,1210.13 1356.05,1210.13 1356.64,1210.13 1357.22,1210.13 1357.81,1210.13 1358.4,1210.13 1358.98,1210.13 1359.57,1210.13 1360.16,1210.13 1360.74,1210.13 1361.33,1210.13 1361.92,1210.13 1362.5,1210.13 1363.09,1210.13 1363.68,1210.13 1364.26,1210.13 1364.85,1210.13 1365.43,1210.13 1366.02,1210.13 1366.61,1210.13 1367.19,1210.13 1367.78,1210.13 1368.37,1210.13 1368.95,1210.13 1369.54,1210.13 1370.13,1210.13 1370.71,1210.13 1371.3,1210.13 1371.88,1210.13 1372.47,1210.13 1373.06,1210.13 1373.64,1210.13 1374.23,1210.13 1374.82,1210.13 1375.4,1210.13 1375.99,1210.13 1376.58,1210.13 1377.16,1210.13 1377.75,1210.13 1378.34,1210.13 1378.92,1210.13 1379.51,1210.13 1380.09,1210.13 1380.68,1210.13 1381.27,1210.13 1381.85,1210.13 1382.44,1210.13 1383.03,1210.13 1383.61,1210.13 1384.2,1210.13 1384.79,1210.13 1385.37,1210.13 1385.96,1210.13 1386.55,1210.13 1387.13,1210.13 1387.72,1210.13 1388.3,1210.13 1388.89,1210.13 1389.48,1210.13 1390.06,1210.13 1390.65,1210.13 1391.24,1210.13 1391.82,1210.13 1392.41,1210.13 1393,1210.13 1393.58,1210.13 1394.17,1210.13 1394.75,1210.13 1395.34,1210.13 1395.93,1210.13 1396.51,1210.13 1397.1,1210.13 1397.69,1210.13 1398.27,1210.13 1398.86,1210.13 1399.45,1210.13 1400.03,1210.13 1400.62,1210.13 1401.21,1210.13 1401.79,1210.13 1402.38,1210.13 1402.96,1210.13 1403.55,1210.13 1404.14,1210.13 1404.72,1210.13 1405.31,1210.13 1405.9,1210.13 1406.48,1210.13 1407.07,1210.13 1407.66,1210.13 1408.24,1210.13 1408.83,1210.13 1409.42,1210.13 1410,1210.13 1410.59,1210.13 1411.17,1210.13 1411.76,1210.13 1412.35,1210.13 1412.93,1210.13 1413.52,1210.13 1414.11,1210.13 1414.69,1210.13 1415.28,1210.13 1415.87,1210.13 1416.45,1210.13 1417.04,1210.13 1417.63,1210.13 1418.21,1210.13 1418.8,1210.13 1419.38,1210.13 1419.97,1210.13 1420.56,1210.13 1421.14,1210.13 1421.73,1210.13 1422.32,1210.13 1422.9,1210.13 1423.49,1210.13 1424.08,1210.13 1424.66,1210.13 1425.25,1210.13 1425.83,1210.13 1426.42,1210.13 1427.01,1210.13 1427.59,1210.13 1428.18,1210.13 1428.77,1210.13 1429.35,1210.13 1429.94,1210.13 1430.53,1210.13 1431.11,1210.13 1431.7,1210.13 1432.29,1210.13 1432.87,1210.13 1433.46,1210.13 1434.04,1210.13 1434.63,1210.13 1435.22,1210.13 1435.8,1210.13 1436.39,1210.13 1436.98,1210.13 1437.56,1210.13 1438.15,1210.13 1438.74,1210.13 1439.32,1210.13 1439.91,1210.13 1440.5,1210.13 1441.08,1210.13 1441.67,1210.13 1442.25,1210.13 1442.84,1210.13 1443.43,1210.13 1444.01,1210.13 1444.6,1210.13 1445.19,1210.13 1445.77,1210.13 1446.36,1210.13 1446.95,1210.13 1447.53,1210.13 1448.12,1210.13 1448.7,1210.13 1449.29,1210.13 1449.88,1210.13 1450.46,1210.13 1451.05,1210.13 1451.64,1210.13 1452.22,1210.13 1452.81,1210.13 1453.4,1210.13 1453.98,1210.13 1454.57,1210.13 1455.16,1210.13 1455.74,1210.13 1456.33,1210.13 1456.91,1210.13 1457.5,1210.13 1458.09,1210.13 1458.67,1210.13 1459.26,1210.13 1459.85,1210.13 1460.43,1210.13 1461.02,1210.13 1461.61,1210.13 1462.19,1210.13 1462.78,1210.13 1463.37,1210.13 1463.95,1210.13 1464.54,1210.13 1465.12,1210.13 1465.71,1210.13 1466.3,1210.13 1466.88,1210.13 1467.47,1210.13 1468.06,1210.13 1468.64,1210.13 1469.23,1210.13 1469.82,1210.13 1470.4,1210.13 1470.99,1210.13 1471.57,1210.13 1472.16,1210.13 1472.75,1210.13 1473.33,1210.13 1473.92,1210.13 1474.51,1210.13 1475.09,1210.13 1475.68,1210.13 1476.27,1210.13 1476.85,1210.13 1477.44,1210.13 1478.03,1210.13 1478.61,1210.13 1479.2,1210.13 1479.78,1210.13 1480.37,1210.13 1480.96,1210.13 1481.54,1210.13 1482.13,1210.13 1482.72,1210.13 1483.3,1210.13 1483.89,1210.13 1484.48,1210.13 1485.06,1210.13 1485.65,1210.13 1486.24,1210.13 1486.82,1210.13 1487.41,1210.13 1487.99,1210.13 1488.58,1210.13 1489.17,1210.13 1489.75,1210.13 1490.34,1210.13 1490.93,1210.13 1491.51,1210.13 1492.1,1210.13 1492.69,1210.13 1493.27,1210.13 1493.86,1210.13 1494.45,1210.13 1495.03,1210.13 1495.62,1210.13 1496.2,1210.13 1496.79,1210.13 1497.38,1210.13 1497.96,1210.13 1498.55,1210.13 1499.14,1210.13 1499.72,1210.13 1500.31,1210.13 1500.9,1210.13 1501.48,1210.13 1502.07,1210.13 1502.65,1210.13 1503.24,1210.13 1503.83,1210.13 1504.41,1210.13 1505,1210.13 1505.59,1210.13 1506.17,1210.13 1506.76,1210.13 1507.35,1210.13 1507.93,1210.13 1508.52,1210.13 1509.11,1210.13 1509.69,1210.13 1510.28,1210.13 1510.86,1210.13 1511.45,1210.13 1512.04,1210.13 1512.62,1210.13 1513.21,1210.13 1513.8,1210.13 1514.38,1210.13 1514.97,1210.13 1515.56,1210.13 1516.14,1210.13 1516.73,1210.13 1517.32,1210.13 1517.9,1210.13 1518.49,1210.13 1519.07,1210.13 1519.66,1210.13 1520.25,1210.13 1520.83,1210.13 1521.42,1210.13 1522.01,1210.13 1522.59,1210.13 1523.18,1210.13 1523.77,1210.13 1524.35,1210.13 1524.94,1210.13 1525.52,1210.13 1526.11,1210.13 1526.7,1210.13 1527.28,1210.13 1527.87,1210.13 1528.46,1210.13 1529.04,1210.13 1529.63,1210.13 1530.22,1210.13 1530.8,1210.13 1531.39,1210.13 1531.98,1210.13 1532.56,1210.13 1533.15,1210.13 1533.73,1210.13 1534.32,1210.13 1534.91,1210.13 1535.49,1210.13 1536.08,1210.13 1536.67,1210.13 1537.25,1210.13 1537.84,1210.13 1538.43,1210.13 1539.01,1210.13 1539.6,1210.13 1540.19,1210.13 1540.77,1210.13 1541.36,1210.13 1541.94,1210.13 1542.53,1210.13 1543.12,1210.13 1543.7,1210.13 1544.29,1210.13 1544.88,1210.13 1545.46,1210.13 1546.05,1210.13 1546.64,1210.13 1547.22,1210.13 1547.81,1210.13 1548.4,1210.13 1548.98,1210.13 1549.57,1210.13 1550.15,1210.13 1550.74,1210.13 1551.33,1210.13 1551.91,1210.13 1552.5,1210.13 1553.09,1210.13 1553.67,1210.13 1554.26,1210.13 1554.85,1210.13 1555.43,1210.13 1556.02,1210.13 1556.6,1210.13 1557.19,1210.13 1557.78,1210.13 1558.36,1210.13 1558.95,1210.13 1559.54,1210.13 1560.12,1210.13 1560.71,1210.13 1561.3,1210.13 1561.88,1210.13 1562.47,1210.13 1563.06,1210.13 1563.64,1210.13 1564.23,1210.13 1564.81,1210.13 1565.4,1210.13 1565.99,1210.13 1566.57,1210.13 1567.16,1210.13 1567.75,1210.13 1568.33,1210.13 1568.92,1210.13 1569.51,1210.13 1570.09,1210.13 1570.68,1210.13 1571.27,1210.13 1571.85,1210.13 1572.44,1210.13 1573.02,1210.13 1573.61,1210.13 1574.2,1210.13 1574.78,1210.13 1575.37,1210.13 1575.96,1210.13 1576.54,1210.13 1577.13,1210.13 1577.72,1210.13 1578.3,1210.13 1578.89,1210.13 1579.47,1210.13 1580.06,1210.13 1580.65,1210.13 1581.23,1210.13 1581.82,1210.13 1582.41,1210.13 1582.99,1210.13 1583.58,1210.13 1584.17,1210.13 1584.75,1210.13 1585.34,1210.13 1585.93,1210.13 1586.51,1210.13 1587.1,1210.13 1587.68,1210.13 1588.27,1210.13 1588.86,1210.13 1589.44,1210.13 1590.03,1210.13 1590.62,1210.13 1591.2,1210.13 1591.79,1210.13 1592.38,1210.13 1592.96,1210.13 1593.55,1210.13 1594.14,1210.13 1594.72,1210.13 1595.31,1210.13 1595.89,1210.13 1596.48,1210.13 1597.07,1210.13 1597.65,1210.13 1598.24,1210.13 1598.83,1210.13 1599.41,1210.13 1600,1210.13 1600.59,1210.13 1601.17,1210.13 1601.76,1210.13 1602.34,1210.13 1602.93,1210.13 1603.52,1210.13 1604.1,1210.13 1604.69,1210.13 1605.28,1210.13 1605.86,1210.13 1606.45,1210.13 1607.04,1210.13 1607.62,1210.13 1608.21,1210.13 1608.8,1210.13 1609.38,1210.13 1609.97,1210.13 1610.55,1210.13 1611.14,1210.13 1611.73,1210.13 1612.31,1210.13 1612.9,1210.13 1613.49,1210.13 1614.07,1210.13 1614.66,1210.13 1615.25,1210.13 1615.83,1210.13 1616.42,1210.13 1617.01,1210.13 1617.59,1210.13 1618.18,1210.13 1618.76,1210.13 1619.35,1210.13 1619.94,1210.13 1620.52,1210.13 1621.11,1210.13 1621.7,1210.13 1622.28,1210.13 1622.87,1210.13 1623.46,1210.13 1624.04,1210.13 1624.63,1210.13 1625.22,1210.13 1625.8,1210.13 1626.39,1210.13 1626.97,1210.13 1627.56,1210.13 1628.15,1210.13 1628.73,1210.13 1629.32,1210.13 1629.91,1210.13 1630.49,1210.13 1631.08,1210.13 1631.67,1210.13 1632.25,1210.13 1632.84,1210.13 1633.42,1210.13 1634.01,1210.13 1634.6,1210.13 1635.18,1210.13 1635.77,1210.13 1636.36,1210.13 1636.94,1210.13 1637.53,1210.13 1638.12,1210.13 1638.7,1210.13 1639.29,1210.13 1639.88,1210.13 1640.46,1210.13 1641.05,1210.13 1641.63,1210.13 1642.22,1210.13 1642.81,1210.13 1643.39,1210.13 1643.98,1210.13 1644.57,1210.13 1645.15,1210.13 1645.74,1210.13 1646.33,1210.13 1646.91,1210.13 1647.5,1210.13 1648.09,1210.13 1648.67,1210.13 1649.26,1210.13 1649.84,1210.13 1650.43,1210.13 1651.02,1210.13 1651.6,1210.13 1652.19,1210.13 1652.78,1210.13 1653.36,1210.13 1653.95,1210.13 1654.54,1210.13 1655.12,1210.13 1655.71,1210.13 1656.29,1210.13 1656.88,1210.13 1657.47,1210.13 1658.05,1210.13 1658.64,1210.13 1659.23,1210.13 1659.81,1210.13 1660.4,1210.13 1660.99,1210.13 1661.57,1210.13 1662.16,1210.13 1662.75,1210.13 1663.33,1210.13 1663.92,1210.13 1664.5,1210.13 1665.09,1210.13 1665.68,1210.13 1666.26,1210.13 1666.85,1210.13 1667.44,1210.13 1668.02,1210.13 1668.61,1210.13 1669.2,1210.13 1669.78,1210.13 1670.37,1210.13 1670.96,1210.13 1671.54,1210.13 1672.13,1210.13 1672.71,1210.13 1673.3,1210.13 1673.89,1210.13 1674.47,1210.13 1675.06,1210.13 1675.65,1210.13 1676.23,1210.13 1676.82,1210.13 1677.41,1210.13 1677.99,1210.13 1678.58,1210.13 1679.17,1210.13 1679.75,1210.13 1680.34,1210.13 1680.92,1210.13 1681.51,1210.13 1682.1,1210.13 1682.68,1210.13 1683.27,1210.13 1683.86,1210.13 1684.44,1210.13 1685.03,1210.13 1685.62,1210.13 1686.2,1210.13 1686.79,1210.13 1687.37,1210.13 1687.96,1210.13 1688.55,1210.13 1689.13,1210.13 1689.72,1210.13 1690.31,1210.13 1690.89,1210.13 1691.48,1210.13 1692.07,1210.13 1692.65,1210.13 1693.24,1210.13 1693.83,1210.13 1694.41,1210.13 1695,1210.13 1695.58,1210.13 1696.17,1210.13 1696.76,1210.13 1697.34,1210.13 1697.93,1210.13 1698.52,1210.13 1699.1,1210.13 1699.69,1210.13 1700.28,1210.13 1700.86,1210.13 1701.45,1210.13 1702.04,1210.13 1702.62,1210.13 1703.21,1210.13 1703.79,1210.13 1704.38,1210.13 1704.97,1210.13 1705.55,1210.13 1706.14,1210.13 1706.73,1210.13 1707.31,1210.13 1707.9,1210.13 1708.49,1210.13 1709.07,1210.13 1709.66,1210.13 1710.24,1210.13 1710.83,1210.13 1711.42,1210.13 1712,1210.13 1712.59,1210.13 1713.18,1210.13 1713.76,1210.13 1714.35,1210.13 1714.94,1210.13 1715.52,1210.13 1716.11,1210.13 1716.7,1210.13 1717.28,1210.13 1717.87,1210.13 1718.45,1210.13 1719.04,1210.13 1719.63,1210.13 1720.21,1210.13 1720.8,1210.13 1721.39,1210.13 1721.97,1210.13 1722.56,1210.13 1723.15,1210.13 1723.73,1210.13 1724.32,1210.13 1724.91,1210.13 1725.49,1210.13 1726.08,1210.13 1726.66,1210.13 1727.25,1210.13 1727.84,1210.13 1728.42,1210.13 1729.01,1210.13 1729.6,1210.13 1730.18,1210.13 1730.77,1210.13 1731.36,1210.13 1731.94,1210.13 1732.53,1210.13 1733.11,1210.13 1733.7,1210.13 1734.29,1210.13 1734.87,1210.13 1735.46,1210.13 1736.05,1210.13 1736.63,1210.13 1737.22,1210.13 1737.81,1210.13 1738.39,1210.13 1738.98,1210.13 1739.57,1210.13 1740.15,1210.13 1740.74,1210.13 1741.32,1210.13 1741.91,1210.13 1742.5,1210.13 1743.08,1210.13 1743.67,1210.13 1744.26,1210.13 1744.84,1210.13 1745.43,1210.13 1746.02,1210.13 1746.6,1210.13 1747.19,1210.13 1747.78,1210.13 1748.36,1210.13 1748.95,1210.13 1749.53,1210.13 1750.12,1210.13 1750.71,1210.13 1751.29,1210.13 1751.88,1210.13 1752.47,1210.13 1753.05,1210.13 1753.64,1210.13 1754.23,1210.13 1754.81,1210.13 1755.4,1210.13 1755.99,1210.13 1756.57,1210.13 1757.16,1210.13 1757.74,1210.13 1758.33,1210.13 1758.92,1210.13 1759.5,1210.13 1760.09,1210.13 1760.68,1210.13 1761.26,1210.13 1761.85,1210.13 1762.44,1210.13 1763.02,1210.13 1763.61,1210.13 1764.19,1210.13 1764.78,1210.13 1765.37,1210.13 1765.95,1210.13 1766.54,1210.13 1767.13,1210.13 1767.71,1210.13 1768.3,1210.13 1768.89,1210.13 1769.47,1210.13 1770.06,1210.13 1770.65,1210.13 1771.23,1210.13 1771.82,1210.13 1772.4,1210.13 1772.99,1210.13 1773.58,1210.13 1774.16,1210.13 1774.75,1210.13 1775.34,1210.13 1775.92,1210.13 1776.51,1210.13 1777.1,1210.13 1777.68,1210.13 1778.27,1210.13 1778.86,1210.13 1779.44,1210.13 1780.03,1210.13 1780.61,1210.13 1781.2,1210.13 1781.79,1210.13 1782.37,1210.13 1782.96,1210.13 1783.55,1210.13 1784.13,1210.13 1784.72,1210.13 1785.31,1210.13 1785.89,1210.13 1786.48,1210.13 1787.06,1210.13 1787.65,1210.13 1788.24,1210.13 1788.82,1210.13 1789.41,1210.13 1790,1210.13 1790.58,1210.13 1791.17,1210.13 1791.76,1210.13 1792.34,1210.13 1792.93,1210.13 1793.52,1210.13 1794.1,1210.13 1794.69,1210.13 1795.27,1210.13 1795.86,1210.13 1796.45,1210.13 1797.03,1210.13 1797.62,1210.13 1798.21,1210.13 1798.79,1210.13 1799.38,1210.13 1799.97,1210.13 1800.55,1210.13 1801.14,1210.13 1801.73,1210.13 1802.31,1210.13 1802.9,1210.13 1803.48,1210.13 1804.07,1210.13 1804.66,1210.13 1805.24,1210.13 1805.83,1210.13 1806.42,1210.13 1807,1210.13 1807.59,1210.13 1808.18,1210.13 1808.76,1210.13 1809.35,1210.13 1809.94,1210.13 1810.52,1210.13 1811.11,1210.13 1811.69,1210.13 1812.28,1210.13 1812.87,1210.13 1813.45,1210.13 1814.04,1210.13 1814.63,1210.13 1815.21,1210.13 1815.8,1210.13 1816.39,1210.13 1816.97,1210.13 1817.56,1210.13 1818.14,1210.13 1818.73,1210.13 1819.32,1210.13 1819.9,1210.13 1820.49,1210.13 1821.08,1210.13 1821.66,1210.13 1822.25,1210.13 1822.84,1210.13 1823.42,1210.13 1824.01,1210.13 1824.6,1210.13 1825.18,1210.13 1825.77,1210.13 1826.35,1210.13 1826.94,1210.13 1827.53,1210.13 1828.11,1210.13 1828.7,1210.13 1829.29,1210.13 1829.87,1210.13 1830.46,1210.13 1831.05,1210.13 1831.63,1210.13 1832.22,1210.13 1832.81,1210.13 1833.39,1210.13 1833.98,1210.13 1834.56,1210.13 1835.15,1210.13 1835.74,1210.13 1836.32,1210.13 1836.91,1210.13 1837.5,1210.13 1838.08,1210.13 1838.67,1210.13 1839.26,1210.13 1839.84,1210.13 1840.43,1210.13 1841.01,1210.13 1841.6,1210.13 1842.19,1210.13 1842.77,1210.13 1843.36,1210.13 1843.95,1210.13 1844.53,1210.13 1845.12,1210.13 1845.71,1210.13 1846.29,1210.13 1846.88,1210.13 1847.47,1210.13 1848.05,1210.13 1848.64,1210.13 1849.22,1210.13 1849.81,1210.13 1850.4,1210.13 1850.98,1210.13 1851.57,1210.13 1852.16,1210.13 1852.74,1210.13 1853.33,1210.13 1853.92,1210.13 1854.5,1210.13 1855.09,1210.13 1855.68,1210.13 1856.26,1210.13 1856.85,1210.13 1857.43,1210.13 1858.02,1210.13 1858.61,1210.13 1859.19,1210.13 1859.78,1210.13 1860.37,1210.13 1860.95,1210.13 1861.54,1210.13 1862.13,1210.13 1862.71,1210.13 1863.3,1210.13 1863.88,1210.13 1864.47,1210.13 1865.06,1210.13 1865.64,1210.13 1866.23,1210.13 1866.82,1210.13 1867.4,1210.13 1867.99,1210.13 1868.58,1210.13 1869.16,1210.13 1869.75,1210.13 1870.34,1210.13 1870.92,1210.13 1871.51,1210.13 1872.09,1210.13 1872.68,1210.13 1873.27,1210.13 1873.85,1210.13 1874.44,1210.13 1875.03,1210.13 1875.61,1210.13 1876.2,1210.13 1876.79,1210.13 1877.37,1210.13 1877.96,1210.13 1878.55,1210.13 1879.13,1210.13 1879.72,1210.13 1880.3,1210.13 1880.89,1210.13 1881.48,1210.13 1882.06,1210.13 1882.65,1210.13 1883.24,1210.13 1883.82,1210.13 1884.41,1210.13 1885,1210.13 1885.58,1210.13 1886.17,1210.13 1886.76,1210.13 1887.34,1210.13 1887.93,1210.13 1888.51,1210.13 1889.1,1210.13 1889.69,1210.13 1890.27,1210.13 1890.86,1210.13 1891.45,1210.13 1892.03,1210.13 1892.62,1210.13 1893.21,1210.13 1893.79,1210.13 1894.38,1210.13 1894.96,1210.13 1895.55,1210.13 1896.14,1210.13 1896.72,1210.13 1897.31,1210.13 1897.9,1210.13 1898.48,1210.13 1899.07,1210.13 1899.66,1210.13 1900.24,1210.13 1900.83,1210.13 1901.42,1210.13 1902,1210.13 1902.59,1210.13 1903.17,1210.13 1903.76,1210.13 1904.35,1210.13 1904.93,1210.13 1905.52,1210.13 1906.11,1210.13 1906.69,1210.13 1907.28,1210.13 1907.87,1210.13 1908.45,1210.13 1909.04,1210.13 1909.63,1210.13 1910.21,1210.13 1910.8,1210.13 1911.38,1210.13 1911.97,1210.13 1912.56,1210.13 1913.14,1210.13 1913.73,1210.13 1914.32,1210.13 1914.9,1210.13 1915.49,1210.13 1916.08,1210.13 1916.66,1210.13 1917.25,1210.13 1917.83,1210.13 1918.42,1210.13 1919.01,1210.13 1919.59,1210.13 1920.18,1210.13 1920.77,1210.13 1921.35,1210.13 1921.94,1210.13 1922.53,1210.13 1923.11,1210.13 1923.7,1210.13 1924.29,1210.13 1924.87,1210.13 1925.46,1210.13 1926.04,1210.13 1926.63,1210.13 1927.22,1210.13 1927.8,1210.13 1928.39,1210.13 1928.98,1210.13 1929.56,1210.13 1930.15,1210.13 1930.74,1210.13 1931.32,1210.13 1931.91,1210.13 1932.5,1210.13 1933.08,1210.13 1933.67,1210.13 1934.25,1210.13 1934.84,1210.13 1935.43,1210.13 1936.01,1210.13 1936.6,1210.13 1937.19,1210.13 1937.77,1210.13 1938.36,1210.13 1938.95,1210.13 1939.53,1210.13 1940.12,1210.13 1940.71,1210.13 1941.29,1210.13 1941.88,1210.13 1942.46,1210.13 1943.05,1210.13 1943.64,1210.13 1944.22,1210.13 1944.81,1210.13 1945.4,1210.13 1945.98,1210.13 1946.57,1210.13 1947.16,1210.13 1947.74,1210.13 1948.33,1210.13 1948.91,1210.13 1949.5,1210.13 1950.09,1210.13 1950.67,1210.13 1951.26,1210.13 1951.85,1210.13 1952.43,1210.13 1953.02,1210.13 1953.61,1210.13 1954.19,1210.13 1954.78,1210.13 1955.37,1210.13 1955.95,1210.13 1956.54,1210.13 1957.12,1210.13 1957.71,1210.13 1958.3,1210.13 1958.88,1210.13 1959.47,1210.13 1960.06,1210.13 1960.64,1210.13 1961.23,1210.13 1961.82,1210.13 1962.4,1210.13 1962.99,1210.13 1963.58,1210.13 1964.16,1210.13 1964.75,1210.13 1965.33,1210.13 1965.92,1210.13 1966.51,1210.13 1967.09,1210.13 1967.68,1210.13 1968.27,1210.13 1968.85,1210.13 1969.44,1210.13 1970.03,1210.13 1970.61,1210.13 1971.2,1210.13 1971.78,1210.13 1972.37,1210.13 1972.96,1210.13 1973.54,1210.13 1974.13,1210.13 1974.72,1210.13 1975.3,1210.13 1975.89,1210.13 1976.48,1210.13 1977.06,1210.13 1977.65,1210.13 1978.24,1210.13 1978.82,1210.13 1979.41,1210.13 1979.99,1210.13 1980.58,1210.13 1981.17,1210.13 1981.75,1210.13 1982.34,1210.13 1982.93,1210.13 1983.51,1210.13 1984.1,1210.13 1984.69,1210.13 1985.27,1210.13 1985.86,1210.13 1986.45,1210.13 1987.03,1210.13 1987.62,1210.13 1988.2,1210.13 1988.79,1210.13 1989.38,1210.13 1989.96,1210.13 1990.55,1210.13 1991.14,1210.13 1991.72,1210.13 1992.31,1210.13 1992.9,1210.13 1993.48,1210.13 1994.07,1210.13 1994.65,1210.13 1995.24,1210.13 1995.83,1210.13 1996.41,1210.13 1997,1210.13 1997.59,1210.13 1998.17,1210.13 1998.76,1210.13 1999.35,1210.13 1999.93,1210.13 2000.52,1210.13 2001.11,1210.13 2001.69,1210.13 2002.28,1210.13 2002.86,1210.13 2003.45,1210.13 2004.04,1210.13 2004.62,1210.13 2005.21,1210.13 2005.8,1210.13 2006.38,1210.13 2006.97,1210.13 2007.56,1210.13 2008.14,1210.13 2008.73,1210.13 2009.32,1210.13 2009.9,1210.13 2010.49,1210.13 2011.07,1210.13 2011.66,1210.13 2012.25,1210.13 2012.83,1210.13 2013.42,1210.13 2014.01,1210.13 2014.59,1210.13 2015.18,1210.13 2015.77,1210.13 2016.35,1210.13 2016.94,1210.13 2017.53,1210.13 2018.11,1210.13 2018.7,1210.13 2019.28,1210.13 2019.87,1210.13 2020.46,1210.13 2021.04,1210.13 2021.63,1210.13 2022.22,1210.13 2022.8,1210.13 2023.39,1210.13 2023.98,1210.13 2024.56,1210.13 2025.15,1210.13 2025.73,1210.13 2026.32,1210.13 2026.91,1210.13 2027.49,1210.13 2028.08,1210.13 2028.67,1210.13 2029.25,1210.13 2029.84,1210.13 2030.43,1210.13 2031.01,1210.13 2031.6,1210.13 2032.19,1210.13 2032.77,1210.13 2033.36,1210.13 2033.94,1210.13 2034.53,1210.13 2035.12,1210.13 2035.7,1210.13 2036.29,1210.13 2036.88,1210.13 2037.46,1210.13 2038.05,1210.13 2038.64,1210.13 2039.22,1210.13 2039.81,1210.13 2040.4,1210.13 2040.98,1210.13 2041.57,1210.13 2042.15,1210.13 2042.74,1210.13 2043.33,1210.13 2043.91,1210.13 2044.5,1210.13 2045.09,1210.13 2045.67,1210.13 2046.26,1210.13 2046.85,1210.13 2047.43,1210.13 2048.02,1210.13 2048.6,1210.13 2049.19,1210.13 2049.78,1210.13 2050.36,1210.13 2050.95,1210.13 2051.54,1210.13 2052.12,1210.13 2052.71,1210.13 2053.3,1210.13 2053.88,1210.13 2054.47,1210.13 2055.06,1210.13 2055.64,1210.13 2056.23,1210.13 2056.81,1210.13 2057.4,1210.13 2057.99,1210.13 2058.57,1210.13 2059.16,1210.13 2059.75,1210.13 2060.33,1210.13 2060.92,1210.13 2061.51,1210.13 2062.09,1210.13 2062.68,1210.13 2063.27,1210.13 2063.85,1210.13 2064.44,1210.13 2065.02,1210.13 2065.61,1210.13 2066.2,1210.13 2066.78,1210.13 2067.37,1210.13 2067.96,1210.13 2068.54,1210.13 2069.13,1210.13 2069.72,1210.13 2070.3,1210.13 2070.89,1210.13 2071.48,1210.13 2072.06,1210.13 2072.65,1210.13 2073.23,1210.13 2073.82,1210.13 2074.41,1210.13 2074.99,1210.13 2075.58,1210.13 2076.17,1210.13 2076.75,1210.13 2077.34,1210.13 2077.93,1210.13 2078.51,1210.13 2079.1,1210.13 2079.68,1210.13 2080.27,1210.13 2080.86,1210.13 2081.44,1210.13 2082.03,1210.13 2082.62,1210.13 2083.2,1210.13 2083.79,1210.13 2084.38,1210.13 2084.96,1210.13 2085.55,1210.13 2086.14,1210.13 2086.72,1210.13 2087.31,1210.13 2087.89,1210.13 2088.48,1210.13 2089.07,1210.13 2089.65,1210.13 2090.24,1210.13 2090.83,1210.13 2091.41,1210.13 2092,1210.13 2092.59,1210.13 2093.17,1210.13 2093.76,1210.13 2094.35,1210.13 2094.93,1210.13 2095.52,1210.13 2096.1,1210.13 2096.69,1210.13 2097.28,1210.13 2097.86,1210.13 2098.45,1210.13 2099.04,1210.13 2099.62,1210.13 2100.21,1210.13 2100.8,1210.13 2101.38,1210.13 2101.97,1210.13 2102.55,1210.13 2103.14,1210.13 2103.73,1210.13 2104.31,1210.13 2104.9,1210.13 2105.49,1210.13 2106.07,1210.13 2106.66,1210.13 2107.25,1210.13 2107.83,1210.13 2108.42,1210.13 2109.01,1210.13 2109.59,1210.13 2110.18,1210.13 2110.76,1210.13 2111.35,1210.13 2111.94,1210.13 2112.52,1210.13 2113.11,1210.13 2113.7,1210.13 2114.28,1210.13 2114.87,1210.13 2115.46,1210.13 2116.04,1210.13 2116.63,1210.13 2117.22,1210.13 2117.8,1210.13 2118.39,1210.13 2118.97,1210.13 2119.56,1210.13 2120.15,1210.13 2120.73,1210.13 2121.32,1210.13 2121.91,1210.13 2122.49,1210.13 2123.08,1210.13 2123.67,1210.13 2124.25,1210.13 2124.84,1210.13 2125.42,1210.13 2126.01,1210.13 2126.6,1210.13 2127.18,1210.13 2127.77,1210.13 2128.36,1210.13 2128.94,1210.13 2129.53,1210.13 2130.12,1210.13 2130.7,1210.13 2131.29,1210.13 2131.88,1210.13 2132.46,1210.13 2133.05,1210.13 2133.63,1210.13 2134.22,1210.13 2134.81,1210.13 2135.39,1210.13 2135.98,1210.13 2136.57,1210.13 2137.15,1210.13 2137.74,1210.13 2138.33,1210.13 2138.91,1210.13 2139.5,1210.13 2140.09,1210.13 2140.67,1210.13 2141.26,1210.13 2141.84,1210.13 2142.43,1210.13 2143.02,1210.13 2143.6,1210.13 2144.19,1210.13 2144.78,1210.13 2145.36,1210.13 2145.95,1210.13 2146.54,1210.13 2147.12,1210.13 2147.71,1210.13 2148.3,1210.13 2148.88,1210.13 2149.47,1210.13 2150.05,1210.13 2150.64,1210.13 2151.23,1210.13 2151.81,1210.13 2152.4,1210.13 2152.99,1210.13 2153.57,1210.13 2154.16,1210.13 2154.75,1210.13 2155.33,1210.13 2155.92,1210.13 2156.5,1210.13 2157.09,1210.13 2157.68,1210.13 2158.26,1210.13 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.87,1191.86 1399.85,899.083 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.92 985.439,1191.86 2158.26,1191.86 2158.26,1227.92 985.439,1227.92 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip793\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip793)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2674.62 162.673,-2531.06 163.232,-3707.4 163.792,-3575.81 164.351,-4638.96 164.91,-5586.88 165.469,-6480.01 166.029,-7312.23 166.588,-8014.4 167.147,-8688.21 167.706,-9272.08 168.266,-9821.09 168.825,-10312.9 169.384,-10726.3 169.943,-11091.2 170.503,-10721.5 171.062,-11042.7 171.621,-10716.5 172.18,-10420.2 172.74,-10678.2 173.299,-10892.3 173.858,-11056.3 174.417,-11204.2 174.977,-11316.1 175.536,-11028.5 176.095,-11111.9 176.655,-11176.2 177.214,-11232.6 177.773,-11258.8 178.332,-11248 178.892,-10703.2 179.451,-10703 180.01,-10677.7 180.569,-10645.7 181.129,-10597.9 181.688,-10142 182.247,-10068.5 182.806,-9819.47 183.366,-9747.77 183.925,-9340.78 184.484,-8951.81 185.043,-8866.68 185.603,-8774.06 186.162,-8544 186.721,-8308.38 187.28,-8190.41 187.84,-7964.22 188.399,-7735.25 188.958,-7612.39 189.517,-7485.28 190.077,-7273.75 190.636,-7064.17 191.195,-6946.65 191.754,-6740.11 192.314,-6380.16 192.873,-6188.44 193.432,-6063.22 193.991,-5938.46 194.551,-5629.38 195.11,-5453.66 195.669,-5170.53 196.228,-4900.56 196.788,-4748.29 197.347,-4657.31 197.906,-4559.21 198.465,-4363.1 199.025,-4165.94 199.584,-3978.71 200.143,-3842.41 200.702,-3622.88 201.262,-3505.25 201.821,-3339.23 202.38,-3179.03 202.939,-3060.3 203.499,-2872.93 204.058,-2798.55 204.617,-2619.31 205.176,-2519.84 205.736,-2423.53 206.295,-2322.08 206.854,-2260.56 207.413,-2200.2 207.973,-2110.78 208.532,-1988.16 209.091,-1902.39 209.65,-1818.57 210.21,-1764.08 210.769,-1680.72 211.328,-1571.02 211.887,-1462.9 212.447,-1413.83 213.006,-1357.93 213.565,-1309.48 214.124,-1205.42 214.684,-1083.57 215.243,-937.783 215.802,-874 216.361,-791.849 216.921,-657.162 217.48,-603.703 218.039,-507.789 218.598,-461.113 219.158,-417.003 219.717,-394.254 220.276,-372.033 220.835,-322.564 221.395,-253.883 221.954,-191.734 222.513,-131.119 223.072,-48.0931 223.632,-10.9892 224.191,44.2365 224.75,78.4885 225.309,92.3915 225.869,101.366 226.428,176.117 226.987,226.258 227.546,254.57 228.106,304.373 228.665,348.287 229.224,394.072 229.783,439.497 230.343,460.574 230.902,484.451 231.461,465.183 232.02,508.102 232.58,509.824 233.139,493.848 233.698,480.551 234.257,489.475 234.817,518.398 235.376,523.833 235.935,549.867 236.494,557.022 237.054,616.732 237.613,639.008 238.172,643.886 238.731,664.083 239.291,687.713 239.85,729.516 240.409,750.275 240.968,785.333 241.528,804.934 242.087,822.603 242.646,855.39 243.205,887.905 243.765,902.74 244.324,917.159 244.883,933.274 245.442,912.385 246.002,958.846 246.561,951.497 247.12,980.081 247.679,1010.1 248.239,986.241 248.798,943.546 249.357,958.416 249.916,937.289 250.476,950.403 251.035,947.465 251.594,983.663 252.153,998.459 252.713,996.988 253.272,1012.68 253.831,989.151 254.39,988.691 254.95,1021.11 255.509,1032.9 256.068,991.452 256.627,1008.92 257.187,1041.44 257.746,1019.53 258.305,1048.13 258.864,1044.01 259.424,1073.78 259.983,1064.36 260.542,1091.12 261.101,1069.73 261.661,1065.03 262.22,1076.41 262.779,1105.83 263.338,1113.57 263.898,1088.57 264.457,1096.66 265.016,1156.94 265.575,1161.88 266.135,1115.54 266.694,1107.56 267.253,1118.27 267.812,1126.34 268.372,1117.46 268.931,1091.95 269.49,1069.68 270.049,1114.35 270.609,1121.49 271.168,1158.16 271.727,1128.58 272.286,1135.99 272.846,1173.09 273.405,1156.74 273.964,1162.19 274.523,1118.48 275.083,1107.17 275.642,1100.21 276.201,1141.04 276.76,1113.44 277.32,1087.62 277.879,1078.92 278.438,1075.36 278.997,1020.87 279.557,968.355 280.116,949.06 280.675,934.264 281.234,947.601 281.794,947.37 282.353,966.223 282.912,980.045 283.471,963.094 284.031,979.437 284.59,994.671 285.149,994.836 285.708,1041.62 286.268,1039.14 286.827,1028.93 287.386,1022.79 287.945,1017.13 288.505,1024.37 289.064,1034.48 289.623,1045.68 290.182,1037.84 290.742,1001.55 291.301,982.232 291.86,1015.09 292.419,981.796 292.979,982.504 293.538,995.909 294.097,1010.11 294.656,1003.67 295.216,1015.82 295.775,1013.52 296.334,1041.92 296.893,1049.79 297.453,1025.97 298.012,1021.89 298.571,1032.64 299.13,1042.12 299.69,1019.87 300.249,1014.09 300.808,1042.35 301.368,1054.8 301.927,1045.81 302.486,1024.95 303.045,1034.33 303.605,1043.34 304.164,1066.82 304.723,1106.22 305.282,1060.9 305.842,1082.61 306.401,1103.37 306.96,1073.54 307.519,1080.96 308.079,1071.82 308.638,1043.03 309.197,1033.91 309.756,1060.05 310.316,1081.69 310.875,1071.39 311.434,1061.16 311.993,1048.83 312.553,1042.98 313.112,1067.18 313.671,1023.45 314.23,984.641 314.79,996.103 315.349,973.767 315.908,969.704 316.467,963.715 317.027,929.157 317.586,943.433 318.145,956.058 318.704,899.761 319.264,919.274 319.823,916.874 320.382,899.178 320.941,929.325 321.501,942.988 322.06,987.139 322.619,961.803 323.178,938.962 323.738,946.524 324.297,943.371 324.856,918.793 325.415,852.159 325.975,868.688 326.534,904.739 327.093,890.996 327.652,891.194 328.212,887.087 328.771,902.566 329.33,888.143 329.889,885.21 330.449,867.694 331.008,896.78 331.567,894.965 332.126,873.129 332.686,888.418 333.245,906.067 333.804,919.646 334.363,936.101 334.923,930.488 335.482,927.17 336.041,906.055 336.6,933.022 337.16,913.383 337.719,923.176 338.278,889.093 338.837,916.746 339.397,925.599 339.956,922.502 340.515,936.562 341.074,930.481 341.634,960.335 342.193,936.904 342.752,945.957 343.311,921.491 343.871,917.014 344.43,930.293 344.989,924.719 345.548,920.696 346.108,896.713 346.667,925.389 347.226,935.595 347.785,912.627 348.345,905.967 348.904,916.602 349.463,944.766 350.022,937.374 350.582,928.78 351.141,921.688 351.7,945.337 352.259,908.748 352.819,919.995 353.378,915.106 353.937,958.275 354.496,951.991 355.056,948.405 355.615,943.734 356.174,917.819 356.733,893.28 357.293,888.402 357.852,884.943 358.411,897.92 358.97,911.097 359.53,907.663 360.089,934.217 360.648,910.181 361.207,891.554 361.767,890.337 362.326,904.938 362.885,903.874 363.444,882.929 364.004,832.806 364.563,834.555 365.122,846.84 365.681,843.943 366.241,844.396 366.8,842.925 367.359,838.326 367.918,868.264 368.478,866.312 369.037,863.15 369.596,860.607 370.155,859.22 370.715,888.706 371.274,922.363 371.833,918.229 372.392,945.962 372.952,939.428 373.511,962.451 374.07,938.771 374.629,898.287 375.189,844.265 375.748,844.688 376.307,825.174 376.866,842.79 377.426,839.688 377.985,808.056 378.544,808.918 379.103,808.487 379.663,856.709 380.222,853.553 380.781,851.785 381.34,832.307 381.9,846.736 382.459,828.508 383.018,829.197 383.577,827.874 384.137,839.894 384.696,837.049 385.255,821.13 385.814,836.721 386.374,848.394 386.933,863.252 387.492,842.434 388.051,854.84 388.611,851.753 389.17,817.818 389.729,883.442 390.288,862.348 390.848,826.559 391.407,874.046 391.966,899.312 392.525,908.835 393.085,886.672 393.644,881.348 394.203,892.564 394.762,886.46 395.322,845.376 395.881,857.247 396.44,819.921 396.999,822.41 397.559,804.434 398.118,772.082 398.677,822.831 399.236,821.706 399.796,820.23 400.355,817.841 400.914,798.803 401.473,795.304 402.033,796.403 402.592,811.687 403.151,807.067 403.71,806.054 404.27,803.581 404.829,836.475 405.388,819.045 405.947,864.594 406.507,827.692 407.066,855.788 407.625,867.221 408.184,848.492 408.744,843.336 409.303,855.736 409.862,853.677 410.421,899.496 410.981,892.158 411.54,855.185 412.099,832.274 412.658,845.639 413.218,813.286 413.777,810.859 414.336,840.771 414.895,832.536 415.455,861.537 416.014,854.755 416.573,867.421 417.132,829.521 417.692,810.378 418.251,760.394 418.81,776.578 419.369,778.657 419.929,777.629 420.488,794.172 421.047,791.968 421.606,792.88 422.166,792.838 422.725,778.651 423.284,777.757 423.843,767.856 424.403,756.391 424.962,770.529 425.521,769.722 426.08,769.982 426.64,783.604 427.199,767.605 427.758,769.175 428.318,834.794 428.877,829.686 429.436,794.641 429.995,791.796 430.555,791.276 431.114,774.915 431.673,789.123 432.232,806.644 432.792,836.767 433.351,831.969 433.91,831.785 434.469,826.756 435.029,842.726 435.588,853.646 436.147,865.282 436.706,879.051 437.266,890.684 437.825,848.309 438.384,874.964 438.943,883.564 439.503,879.014 440.062,873.642 440.621,868.153 441.18,895.286 441.74,903.082 442.299,910.531 442.858,858.299 443.417,807.21 443.977,753.954 444.536,737.256 445.095,766.333 445.654,734.293 446.214,737.347 446.773,741.005 447.332,794.312 447.891,811.534 448.451,825.793 449.01,789.646 449.569,767.671 450.128,752.74 450.688,756.05 451.247,754.321 451.806,756.85 452.365,692.993 452.925,694.809 453.484,714.132 454.043,731.575 454.602,780.229 455.162,761.584 455.721,795.237 456.28,807.892 456.839,852.142 457.399,862.511 457.958,857.414 458.517,833.652 459.076,828.752 459.636,774.036 460.195,753.245 460.754,800.622 461.313,826.78 461.873,837.643 462.432,833.366 462.991,814.039 463.55,795.185 464.11,809.494 464.669,805.991 465.228,769.237 465.787,768.736 466.347,767.344 466.906,765.628 467.465,761.888 468.024,777.757 468.584,791.786 469.143,770.884 469.702,738.563 470.261,737.928 470.821,757.833 471.38,774.051 471.939,770.465 472.498,782.374 473.058,748.63 473.617,764.781 474.176,746.674 474.735,730.478 475.295,716.386 475.854,748.614 476.413,746.363 476.972,749.973 477.532,733.853 478.091,736.551 478.65,769.649 479.209,800.983 479.769,748.169 480.328,795.222 480.887,807.087 481.446,786 482.006,768.755 482.565,749.343 483.124,746.358 483.683,729.165 484.243,728.483 484.802,745.898 485.361,745.668 485.92,762.106 486.48,723.208 487.039,674.432 487.598,678.183 488.157,664.695 488.717,685.361 489.276,705.814 489.835,690.005 490.394,744.694 490.954,725.888 491.513,707.842 492.072,691.131 492.631,695.063 493.191,714.241 493.75,683.786 494.309,668.645 494.868,686.665 495.428,673.259 495.987,675.466 496.546,677.502 497.105,696.158 497.665,681.622 498.224,686.649 498.783,654.093 499.342,674.045 499.902,628.603 500.461,663.373 501.02,665.814 501.579,684.565 502.139,669.35 502.698,671.264 503.257,641.267 503.816,662.306 504.376,673.471 504.935,675.846 505.494,713.963 506.053,727.149 506.613,723.99 507.172,755.735 507.731,768.086 508.29,748.837 508.85,763.474 509.409,761.611 509.968,759.066 510.527,756.221 511.087,738.98 511.646,752.163 512.205,766.649 512.764,796.811 513.324,824.359 513.883,819.532 514.442,833.093 515.001,845.124 515.561,872.669 516.12,880.871 516.679,871.538 517.238,894.101 517.798,871.22 518.357,831.206 518.916,825.232 519.475,819.866 520.035,827.91 520.594,807.465 521.153,750.798 521.712,702.274 522.272,721.561 522.831,720.921 523.39,734.964 523.949,751.985 524.509,750.831 525.068,732.196 525.627,731.413 526.186,728.771 526.746,710.832 527.305,661.905 527.864,649.985 528.423,686.079 528.983,706.557 529.542,726.051 530.101,725.676 530.66,712.016 531.22,698.265 531.779,718.673 532.338,719.301 532.897,736.64 533.457,747.539 534.016,732.995 534.575,731.655 535.134,729.704 535.694,732.449 536.253,749.016 536.812,746.555 537.371,732.559 537.931,746.908 538.49,730.38 539.049,716.042 539.608,717.15 540.168,718.377 540.727,717.803 541.286,684.317 541.845,720.481 542.405,720.094 542.964,720.597 543.523,734.407 544.082,730.458 544.642,728.08 545.201,744.089 545.76,740.112 546.319,751.826 546.879,749.364 547.438,779.36 547.997,778.239 548.556,823.463 549.116,801.676 549.675,793.346 550.234,824.695 550.793,802.682 551.353,800.26 551.912,827.242 552.471,789.733 553.031,769.308 553.59,779.506 554.149,761.195 554.708,744.569 555.268,723.645 555.827,721.853 556.386,722.514 556.945,722.902 557.505,752.44 558.064,752.032 558.623,752.699 559.182,763.121 559.742,728.874 560.301,727.834 560.86,729.234 561.419,727.428 561.979,727.677 562.538,722.987 563.097,721.942 563.656,677.319 564.216,709.912 564.775,676.929 565.334,645.501 565.893,648.603 566.453,650.632 567.012,654.35 567.571,659.343 568.13,661.783 568.69,602.082 569.249,625.48 569.808,629.489 570.367,633.966 570.927,588.863 571.486,595.321 572.045,601.673 572.604,625.516 573.164,631.907 573.723,636.027 574.282,624.632 574.841,633.004 575.401,591.441 575.96,647.934 576.519,682.599 577.078,695.382 577.638,729.745 578.197,726.219 578.756,675.124 579.315,676.043 579.875,662.011 580.434,694.478 580.993,723.512 581.552,722.875 582.112,722.705 582.671,719.288 583.23,720.443 583.789,716.563 584.349,718.479 584.908,700.921 585.467,719.081 586.026,733.857 586.586,736.234 587.145,750.012 587.704,685.101 588.263,718.771 588.823,715.596 589.382,747.436 589.941,728.418 590.5,713.951 591.06,730.451 591.619,749.11 592.178,729.515 592.737,757.95 593.297,753.607 593.856,755.329 594.415,753.763 594.974,749.044 595.534,732.049 596.093,699.767 596.652,736.554 597.211,732.434 597.771,715.656 598.33,728.687 598.889,745.467 599.448,762.749 600.008,760.231 600.567,741.539 601.126,739.196 601.685,751.819 602.245,733.934 602.804,747.465 603.363,761.569 603.922,738.203 604.482,706.859 605.041,693.953 605.6,679.145 606.159,662.457 606.719,665.977 607.278,652.442 607.837,702.834 608.396,720.174 608.956,719.056 609.515,701.657 610.074,730.401 610.633,730.135 611.193,742.386 611.752,758.501 612.311,754.398 612.87,751.407 613.43,783.747 613.989,779.472 614.548,774.739 615.107,772.251 615.667,754.036 616.226,798.956 616.785,794.788 617.344,784.956 617.904,794.275 618.463,777.319 619.022,789.672 619.581,783.948 620.141,763.587 620.7,777.862 621.259,757.965 621.818,739.548 622.378,754.186 622.937,735.689 623.496,716.035 624.055,696.684 624.615,713.382 625.174,743.795 625.733,725.729 626.292,722.294 626.852,723.168 627.411,707.375 627.97,721.184 628.529,735.073 629.089,766.373 629.648,778.763 630.207,758.272 630.766,790.907 631.326,802.478 631.885,811.15 632.444,807.757 633.003,722.854 633.563,721.729 634.122,737.081 634.681,767.683 635.24,749.211 635.8,777.057 636.359,771.02 636.918,734.087 637.477,698.154 638.037,730.604 638.596,714.706 639.155,715.325 639.714,744.812 640.274,744.669 640.833,775.169 641.392,755.444 641.951,749.832 642.511,745.404 643.07,761.114 643.629,756.098 644.188,768.765 644.748,731.553 645.307,762.328 645.866,742.102 646.425,757.984 646.985,721.012 647.544,754.747 648.103,750.172 648.662,751.589 649.222,716.273 649.781,696.937 650.34,694.959 650.899,697.947 651.459,713.181 652.018,697.965 652.577,713.44 653.136,728.664 653.696,744.036 654.255,694.789 654.814,713.813 655.373,729.832 655.933,744.274 656.492,726.678 657.051,757.275 657.61,733.399 658.17,731.26 658.729,711.396 659.288,714.075 659.847,729.231 660.407,713.401 660.966,696.532 661.525,714.439 662.084,746.997 662.644,728.871 663.203,682.192 663.762,700.956 664.321,686.907 664.881,702.103 665.44,701.58 665.999,702.245 666.558,714.137 667.118,745.49 667.677,707.906 668.236,691.319 668.795,674.82 669.355,657.52 669.914,660.894 670.473,711.615 671.032,727.104 671.592,741.556 672.151,720.354 672.71,702.521 673.269,699.93 673.829,697.22 674.388,715.968 674.947,710.281 675.506,726.906 676.066,724.276 676.625,723.437 677.184,755.796 677.743,722.514 678.303,703.984 678.862,672.719 679.421,674.137 679.981,676.38 680.54,678.063 681.099,680.133 681.658,628.657 682.218,629.254 682.777,649.53 683.336,651.976 683.895,671.444 684.455,688.17 685.014,688.331 685.573,719.601 686.132,719.939 686.692,722.398 687.251,720.007 687.81,720.602 688.369,701.394 688.929,718.189 689.488,716.415 690.047,716.982 690.606,731.949 691.166,744.231 691.725,741.384 692.284,725.554 692.843,690.904 693.403,675.914 693.962,674.818 694.521,677.988 695.08,679.918 695.64,682.01 696.199,682.45 696.758,679.787 697.317,696.954 697.877,697.888 698.436,680.206 698.995,679.482 699.554,681.059 700.114,694.898 700.673,712.577 701.232,695.688 701.791,711.738 702.351,708.627 702.91,694.117 703.469,692.817 704.028,677.061 704.588,660.069 705.147,615.427 705.706,635.762 706.265,636.647 706.825,672.776 707.384,691.593 707.943,737.299 708.502,752.09 709.062,796.007 709.621,790.913 710.18,751.609 710.739,733.426 711.299,736.255 711.858,749.952 712.417,712.826 712.976,712.388 713.536,678.083 714.095,666.204 714.654,667.541 715.213,686.216 715.773,702.034 716.332,672.213 716.891,707.002 717.45,704.816 718.01,669.578 718.569,667.244 719.128,672.576 719.687,705.723 720.247,692.566 720.806,702.862 721.365,705.362 721.924,691.549 722.484,704.891 723.043,750.879 723.602,750.859 724.161,762.923 724.721,759.025 725.28,751.356 725.839,763.035 726.398,743.487 726.958,725.203 727.517,737.362 728.076,749.257 728.635,793.116 729.195,770.165 729.754,781.959 730.313,763.021 730.872,792.171 731.432,753.901 731.991,747.749 732.55,777.026 733.109,807.841 733.669,768.97 734.228,683.894 734.787,715.483 735.346,663.831 735.906,667.391 736.465,651.713 737.024,639.745 737.583,641.867 738.143,624.796 738.702,644.151 739.261,596.598 739.82,582.896 740.38,618.983 740.939,604.06 741.498,623.903 742.057,628.585 742.617,634.022 743.176,633.141 743.735,651.6 744.294,637.731 744.854,623.975 745.413,611.943 745.972,631.864 746.531,634.173 747.091,587.243 747.65,577.92 748.209,568.836 748.768,526.874 749.328,556.426 749.887,564.779 750.446,553.72 751.005,592.923 751.565,600.085 752.124,604.81 752.683,607.25 753.242,644.5 753.802,662.977 754.361,651.033 754.92,670.877 755.479,657.931 756.039,643.568 756.598,681.245 757.157,681.913 757.716,699.323 758.276,682.99 758.835,733.335 759.394,732.962 759.953,747.599 760.513,730.111 761.072,743.612 761.631,726.553 762.19,709.117 762.75,712.5 763.309,660.603 763.868,694.251 764.427,695.168 764.987,698.619 765.546,698.966 766.105,700.255 766.664,731.101 767.224,745.815 767.783,727.693 768.342,713.872 768.901,716.763 769.461,697.113 770.02,697.652 770.579,712.383 771.138,711.297 771.698,710.844 772.257,712.966 772.816,697.137 773.375,711.459 773.935,710.145 774.494,725.925 775.053,725.89 775.612,726.115 776.172,756.963 776.731,755.13 777.29,733.747 777.849,717.055 778.409,733.256 778.968,760.128 779.527,741.079 780.086,739.854 780.646,755.582 781.205,736.981 781.764,749.579 782.323,728.383 782.883,711.186 783.442,695.244 784.001,678.309 784.56,679.05 785.12,664.38 785.679,648.617 786.238,596.969 786.797,616.313 787.357,632.342 787.916,621.628 788.475,610.356 789.034,629.759 789.594,599.088 790.153,619.479 790.712,610.756 791.271,616.774 791.831,637.393 792.39,686.643 792.949,668.006 793.508,685.63 794.068,689.581 794.627,690.096 795.186,671.439 795.745,657.596 796.305,596.778 796.864,618.41 797.423,624.28 797.982,659.998 798.542,658.72 799.101,642.898 799.66,660.49 800.219,678.714 800.779,694.893 801.338,711.504 801.897,709.602 802.456,689.885 803.016,690.479 803.575,707.643 804.134,725.368 804.693,724.613 805.253,742.265 805.812,741.751 806.371,757.36 806.931,694.586 807.49,694.345 808.049,692.54 808.608,675.467 809.168,693.238 809.727,697.629 810.286,696.696 810.845,647.003 811.405,633.759 811.964,651.728 812.523,667.427 813.082,654.894 813.642,655.652 814.201,677.368 814.76,694.346 815.319,695.016 815.879,661.973 816.438,611.597 816.997,605.62 817.556,613.122 818.116,665.505 818.675,681.834 819.234,668.537 819.793,634.408 820.353,616.393 820.912,633.997 821.471,620.167 822.03,606.823 822.59,625.884 823.149,656.883 823.708,660.003 824.267,662.113 824.827,661.599 825.386,629.892 825.945,618.105 826.504,636.375 827.064,656.438 827.623,629.47 828.182,664.675 828.741,633.714 829.301,621.998 829.86,642.563 830.419,644.999 830.978,648.677 831.538,683.219 832.097,684.56 832.656,684.457 833.215,651.096 833.775,671.944 834.334,671.214 834.893,654.529 835.452,657.231 836.012,673.79 836.571,657.836 837.13,710.401 837.689,694.964 838.249,695.353 838.808,695.691 839.367,664.999 839.926,666.332 840.486,683.716 841.045,720.627 841.604,736.07 842.163,746.59 842.723,756.905 843.282,739.003 843.841,720.647 844.4,767.773 844.96,779.251 845.519,787.368 846.078,768.184 846.637,791.792 847.197,789.726 847.756,782.11 848.315,774.465 848.874,769.187 849.434,731.57 849.993,697.379 850.552,681.519 851.111,666.726 851.671,639.368 852.23,623.883 852.789,642.06 853.348,676.612 853.908,660.083 854.467,644.526 855.026,692.402 855.585,707.051 856.145,720.349 856.704,719.97 857.263,698.353 857.822,694.522 858.382,709.805 858.941,688.817 859.5,700.885 860.059,685.326 860.619,669.722 861.178,704.803 861.737,738.039 862.296,750.736 862.856,765.676 863.415,751.681 863.974,763.34 864.533,753 865.093,732.148 865.652,698.974 866.211,702.833 866.77,719.411 867.33,703.503 867.889,704.932 868.448,736.802 869.007,685.173 869.567,682.903 870.126,685.649 870.685,700.335 871.244,701.243 871.804,667.677 872.363,664.094 872.922,679.422 873.481,708.903 874.041,724.121 874.6,705.617 875.159,701.061 875.718,686.054 876.278,687.61 876.837,685.17 877.396,679.049 877.955,641.417 878.515,658.094 879.074,645.655 879.633,649.292 880.192,618.952 880.752,638.756 881.311,626.022 881.87,592.927 882.429,615.246 882.989,639.571 883.548,644.579 884.107,646.285 884.666,618.216 885.226,635.716 885.785,655.076 886.344,654.436 886.903,706.119 887.463,686.168 888.022,699.398 888.581,714.633 889.14,732.377 889.7,733.916 890.259,716.543 890.818,717.409 891.377,748.636 891.937,730.498 892.496,762.118 893.055,774.236 893.614,754.644 894.174,731.919 894.733,744.835 895.292,727.821 895.851,728.754 896.411,727.217 896.97,756.602 897.529,766.158 898.088,777.726 898.648,805.548 899.207,787.451 899.766,797.705 900.325,803.972 900.885,780.559 901.444,773.911 902.003,768.571 902.562,782.133 903.122,807.332 903.681,780.06 904.24,741.536 904.799,741.141 905.359,737.703 905.918,751.352 906.477,733.512 907.036,694.748 907.596,677.642 908.155,645.175 908.714,629.242 909.273,578.307 909.833,599.566 910.392,618.311 910.951,637.644 911.51,639.278 912.07,642.372 912.629,641.865 913.188,641.458 913.747,642.41 914.307,614.98 914.866,636.296 915.425,625.014 915.984,613.542 916.544,599.454 917.103,605.67 917.662,596.282 918.221,600.785 918.781,573.437 919.34,544.69 919.899,589.175 920.458,598.1 921.018,593.285 921.577,647.258 922.136,650.811 922.695,654.151 923.255,638.48 923.814,625.568 924.373,628.363 924.932,620.327 925.492,639.316 926.051,672.404 926.61,672.913 927.169,641.615 927.729,660.301 928.288,642.285 928.847,642.232 929.406,624.18 929.966,579.156 930.525,582.95 931.084,603.421 931.644,574.906 932.203,594.235 932.762,598.714 933.321,619.891 933.881,639.549 934.44,660.501 934.999,674.78 935.558,672.447 936.118,657.242 936.677,655.85 937.236,660.269 937.795,661.734 938.355,678.373 938.914,676.091 939.473,691.167 940.032,672.492 940.592,703.211 941.151,650.452 941.71,624.086 942.269,646.102 942.829,663.843 943.388,699.507 943.947,731.171 944.506,746.01 945.066,738.686 945.625,751.241 946.184,780.917 946.743,774.084 947.303,769.714 947.862,765.264 948.421,743.32 948.98,721.99 949.54,706.113 950.099,690.508 950.658,687.475 951.217,717.566 951.777,713.716 952.336,711.062 952.895,693.103 953.454,705.169 954.014,701.305 954.573,650.353 955.132,667.81 955.691,669.887 956.251,673.879 956.81,660.525 957.369,663.599 957.928,680.105 958.488,698.593 959.047,713.938 959.606,714.513 960.165,698.177 960.725,713.339 961.284,663.59 961.843,680.675 962.402,681.516 962.962,684.263 963.521,717.109 964.08,711.83 964.639,695.554 965.199,712.12 965.758,709.345 966.317,707.793 966.876,692.308 967.436,663.527 967.995,668.055 968.554,667.067 969.113,637.668 969.673,656.307 970.232,656.594 970.791,657.997 971.35,660.3 971.91,630.935 972.469,652.798 973.028,653.379 973.587,671.703 974.147,688.958 974.706,658.607 975.265,678.178 975.824,650.443 976.384,650.279 976.943,672.131 977.502,709.758 978.061,706.081 978.621,690.402 979.18,673.644 979.739,677.127 980.298,694.346 980.858,712.746 981.417,663.886 981.976,714.975 982.535,713.872 983.095,709.507 983.654,707.819 984.213,712.622 984.772,711.458 985.332,675.189 985.891,627.671 986.45,662.686 987.009,647.422 987.569,599.392 988.128,605.411 988.687,643.538 989.246,597.657 989.806,599.114 990.365,583.319 990.924,569.963 991.483,565.514 992.043,537.323 992.602,543.735 993.161,567.438 993.72,575.343 994.28,583.012 994.839,588.685 995.398,612.641 995.957,617.798 996.517,640.756 997.076,628.668 997.635,678.014 998.194,680.496 998.754,680.963 999.313,698.856 999.872,700.076 1000.43,716.287 1000.99,700.934 1001.55,698.533 1002.11,683.745 1002.67,686.572 1003.23,719.179 1003.79,683.249 1004.35,665.387 1004.91,648.873 1005.46,662.204 1006.02,664.76 1006.58,664.729 1007.14,665.81 1007.7,684.648 1008.26,684.225 1008.82,687.64 1009.38,673.107 1009.94,709.028 1010.5,727.672 1011.06,725.638 1011.62,738.941 1012.18,751.633 1012.73,749.81 1013.29,730.189 1013.85,727.152 1014.41,741.892 1014.97,723.162 1015.53,720.27 1016.09,717.931 1016.65,718.646 1017.21,715.811 1017.77,697.452 1018.33,695.497 1018.89,659.32 1019.45,678.336 1020.01,677.794 1020.56,680.474 1021.12,714.245 1021.68,711.399 1022.24,724.129 1022.8,736.244 1023.36,749.073 1023.92,761.719 1024.48,761.893 1025.04,788.652 1025.6,784.42 1026.16,778.322 1026.72,739.514 1027.28,771.967 1027.83,767.723 1028.39,777.145 1028.95,772.943 1029.51,736.692 1030.07,720.165 1030.63,755.797 1031.19,768.279 1031.75,734.435 1032.31,732.891 1032.87,744.812 1033.43,738.792 1033.99,686.624 1034.55,686.593 1035.1,689.117 1035.66,703.949 1036.22,703.141 1036.78,684.277 1037.34,683.262 1037.9,665.025 1038.46,696.736 1039.02,643.401 1039.58,661.96 1040.14,676.231 1040.7,658.003 1041.26,662.897 1041.82,648.118 1042.38,652.558 1042.93,640.013 1043.49,645.506 1044.05,645.569 1044.61,649.419 1045.17,632.574 1045.73,616.552 1046.29,635.28 1046.85,652.934 1047.41,671.707 1047.97,704.059 1048.53,719.113 1049.09,685.124 1049.65,700.738 1050.2,719.021 1050.76,715.384 1051.32,683.103 1051.88,679.469 1052.44,677.809 1053,723.642 1053.56,720.484 1054.12,702.445 1054.68,698.474 1055.24,700.354 1055.8,714.401 1056.36,729.35 1056.92,739.977 1057.48,801.016 1058.03,777.966 1058.59,774.028 1059.15,742.045 1059.71,737.165 1060.27,717.247 1060.83,714.371 1061.39,745.263 1061.95,739.581 1062.51,719.301 1063.07,698.057 1063.63,696.985 1064.19,650.213 1064.75,700.335 1065.3,701.873 1065.86,715.29 1066.42,715.495 1066.98,717.202 1067.54,749.014 1068.1,726.049 1068.66,704.2 1069.22,702.896 1069.78,700.705 1070.34,729.798 1070.9,756.455 1071.46,739.096 1072.02,750.975 1072.57,713.982 1073.13,710.948 1073.69,740.872 1074.25,720.893 1074.81,701.413 1075.37,716.437 1075.93,762.555 1076.49,756.767 1077.05,768.763 1077.61,749.167 1078.17,760.077 1078.73,777.113 1079.29,820.219 1079.85,814.631 1080.4,856.167 1080.96,811.325 1081.52,801.992 1082.08,796.378 1082.64,759.014 1083.2,742.755 1083.76,740.002 1084.32,754.516 1084.88,733.264 1085.44,730.988 1086,726.091 1086.56,677.252 1087.12,676.73 1087.67,722.285 1088.23,749.265 1088.79,748.425 1089.35,776.373 1089.91,757.597 1090.47,727.134 1091.03,691.396 1091.59,707.323 1092.15,738.737 1092.71,721.178 1093.27,688.3 1093.83,671.96 1094.39,701.708 1094.94,716.908 1095.5,716.293 1096.06,747.952 1096.62,730.746 1097.18,710.732 1097.74,696.409 1098.3,662.639 1098.86,666.066 1099.42,683.312 1099.98,717.321 1100.54,731.043 1101.1,715.338 1101.66,699.768 1102.22,714.514 1102.77,742.73 1103.33,726.438 1103.89,721.903 1104.45,751.439 1105.01,730.446 1105.57,744.05 1106.13,751.954 1106.69,686.406 1107.25,672.574 1107.81,639.227 1108.37,622.509 1108.93,576.34 1109.49,579.969 1110.04,585.193 1110.6,588.091 1111.16,606.63 1111.72,594.957 1112.28,579.406 1112.84,604.714 1113.4,624.694 1113.96,627.195 1114.52,642.953 1115.08,676.329 1115.64,677.414 1116.2,709.525 1116.76,724.155 1117.31,687.916 1117.87,706.19 1118.43,689.15 1118.99,676.875 1119.55,679.013 1120.11,695.77 1120.67,694.137 1121.23,689.861 1121.79,689.724 1122.35,704.776 1122.91,703.73 1123.47,668.192 1124.03,701.106 1124.59,701.776 1125.14,732.925 1125.7,746.467 1126.26,778.325 1126.82,756.048 1127.38,740.901 1127.94,709.427 1128.5,690.842 1129.06,690.392 1129.62,673.668 1130.18,679.955 1130.74,680.925 1131.3,684.792 1131.86,671.501 1132.41,638.216 1132.97,612.065 1133.53,630.347 1134.09,614.891 1134.65,665.099 1135.21,666.215 1135.77,669.829 1136.33,671.583 1136.89,707.511 1137.45,723.008 1138.01,702.176 1138.57,682.026 1139.13,663.398 1139.68,649.026 1140.24,683.015 1140.8,715.176 1141.36,711.704 1141.92,692.929 1142.48,646.823 1143.04,651.455 1143.6,653.958 1144.16,607.65 1144.72,611.431 1145.28,619.946 1145.84,641.937 1146.4,678.512 1146.96,678.426 1147.51,681.521 1148.07,679.242 1148.63,697.185 1149.19,696.585 1149.75,682.068 1150.31,680.778 1150.87,682.414 1151.43,665.019 1151.99,650.312 1152.55,607.486 1153.11,626.918 1153.67,597.417 1154.23,615.855 1154.78,619.653 1155.34,603.917 1155.9,606.971 1156.46,613.694 1157.02,600.838 1157.58,588.707 1158.14,593.456 1158.7,599.401 1159.26,577.152 1159.82,601.03 1160.38,591.684 1160.94,612.3 1161.5,629.049 1162.05,661.724 1162.61,682.257 1163.17,647.677 1163.73,663.608 1164.29,621.036 1164.85,674.137 1165.41,691.522 1165.97,659.593 1166.53,656.405 1167.09,659.39 1167.65,657.669 1168.21,645.263 1168.77,646.336 1169.33,650.27 1169.88,658.796 1170.44,645.389 1171,646.749 1171.56,632.421 1172.12,603.664 1172.68,625.505 1173.24,630.345 1173.8,633.7 1174.36,636.222 1174.92,688.298 1175.48,687.146 1176.04,684.889 1176.6,667.374 1177.15,682.676 1177.71,667.088 1178.27,653.622 1178.83,686.494 1179.39,685.381 1179.95,703.742 1180.51,721.023 1181.07,702.901 1181.63,701.421 1182.19,700.029 1182.75,686.606 1183.31,704.585 1183.87,688.58 1184.43,674.973 1184.98,709.397 1185.54,726.267 1186.1,693.262 1186.66,660.848 1187.22,662.314 1187.78,646.731 1188.34,677.344 1188.9,692.759 1189.46,673.567 1190.02,687.846 1190.58,688.992 1191.14,688.555 1191.7,689.657 1192.25,672.04 1192.81,704.575 1193.37,703.766 1193.93,704.53 1194.49,700.678 1195.05,667.921 1195.61,654.193 1196.17,656.173 1196.73,694.324 1197.29,710.342 1197.85,691.83 1198.41,690.48 1198.97,691.68 1199.52,691.802 1200.08,675.958 1200.64,690.399 1201.2,706.336 1201.76,723.786 1202.32,736.516 1202.88,700.806 1203.44,765.278 1204,778.423 1204.56,759.314 1205.12,787.501 1205.68,786.591 1206.24,816.311 1206.8,793.95 1207.35,802.572 1207.91,796.91 1208.47,790.837 1209.03,752.841 1209.59,734.732 1210.15,729.754 1210.71,746.317 1211.27,743.546 1211.83,725.145 1212.39,742.856 1212.95,772.122 1213.51,754.683 1214.07,749.602 1214.62,759.321 1215.18,757.332 1215.74,739.138 1216.3,720.55 1216.86,669.278 1217.42,639.021 1217.98,658.491 1218.54,657.603 1219.1,677.367 1219.66,677.365 1220.22,696.981 1220.78,664.74 1221.34,648.6 1221.89,632.806 1222.45,604.878 1223.01,556.255 1223.57,563.352 1224.13,583.216 1224.69,588.495 1225.25,578.93 1225.81,568.962 1226.37,539.759 1226.93,513.882 1227.49,505.21 1228.05,493.809 1228.61,508.063 1229.17,536.116 1229.72,559.613 1230.28,564.943 1230.84,573.898 1231.4,559.928 1231.96,599.796 1232.52,614.383 1233.08,565.378 1233.64,573.54 1234.2,614.221 1234.76,635.934 1235.32,654.214 1235.88,672.47 1236.44,656.668 1236.99,677.226 1237.55,693.723 1238.11,661.869 1238.67,662.423 1239.23,662.872 1239.79,648.096 1240.35,667.299 1240.91,652.576 1241.47,621.278 1242.03,628.583 1242.59,630.634 1243.15,611.188 1243.71,599.133 1244.26,639.031 1244.82,642.351 1245.38,633.18 1245.94,637.115 1246.5,653.968 1247.06,656.424 1247.62,641.282 1248.18,646.512 1248.74,647.024 1249.3,634.287 1249.86,617.58 1250.42,634.192 1250.98,637.612 1251.54,642.555 1252.09,656.564 1252.65,626.264 1253.21,633.589 1253.77,640.645 1254.33,656.972 1254.89,672.057 1255.45,669.993 1256.01,672.889 1256.57,706.308 1257.13,704.035 1257.69,719.624 1258.25,714.538 1258.81,714.699 1259.36,679.249 1259.92,663.439 1260.48,695.925 1261.04,696.284 1261.6,693.771 1262.16,677.06 1262.72,662.705 1263.28,682.753 1263.84,667.213 1264.4,637.095 1264.96,624.892 1265.52,629.163 1266.08,650.76 1266.63,669.322 1267.19,669.994 1267.75,670.779 1268.31,706.988 1268.87,670.921 1269.43,670.849 1269.99,702.561 1270.55,733.14 1271.11,712.909 1271.67,726.25 1272.23,739.749 1272.79,736.391 1273.35,732.262 1273.91,677.831 1274.46,659.103 1275.02,661.549 1275.58,665.043 1276.14,702.967 1276.7,716.219 1277.26,730.103 1277.82,726.043 1278.38,770.306 1278.94,764.198 1279.5,761.449 1280.06,740.812 1280.62,784.786 1281.18,765.962 1281.73,780.09 1282.29,805.815 1282.85,768.782 1283.41,730.762 1283.97,725.075 1284.53,721.451 1285.09,750.11 1285.65,747.452 1286.21,745.113 1286.77,742.189 1287.33,737.136 1287.89,765.368 1288.45,792.38 1289,804.295 1289.56,783.625 1290.12,777.961 1290.68,773.315 1291.24,751.176 1291.8,781.407 1292.36,743.286 1292.92,754.373 1293.48,785.527 1294.04,781.086 1294.6,761.159 1295.16,737.936 1295.72,732.612 1296.28,749.127 1296.83,765.568 1297.39,728.89 1297.95,740.451 1298.51,724.538 1299.07,718.989 1299.63,718.142 1300.19,763.763 1300.75,760.524 1301.31,689.586 1301.87,671.873 1302.43,686.342 1302.99,700.957 1303.55,717.9 1304.1,700.344 1304.66,700.289 1305.22,702.116 1305.78,719.777 1306.34,749.852 1306.9,763.045 1307.46,758.011 1308.02,739.1 1308.58,720.226 1309.14,699.866 1309.7,701.787 1310.26,697.501 1310.82,677.815 1311.38,679.745 1311.93,645.31 1312.49,664.469 1313.05,633.475 1313.61,621.589 1314.17,623.502 1314.73,640.185 1315.29,675.133 1315.85,706.37 1316.41,671.263 1316.97,693.231 1317.53,694.825 1318.09,677.358 1318.65,678.049 1319.2,658.768 1319.76,692.241 1320.32,692.197 1320.88,674.733 1321.44,690.707 1322,674.824 1322.56,693.105 1323.12,690.476 1323.68,673.979 1324.24,672.695 1324.8,705.189 1325.36,686.674 1325.92,668.521 1326.47,684.11 1327.03,683.876 1327.59,683.893 1328.15,700.974 1328.71,670.099 1329.27,671.972 1329.83,676.139 1330.39,693.975 1330.95,692.844 1331.51,712.386 1332.07,727.988 1332.63,707.974 1333.19,705.966 1333.75,655.949 1334.3,656.986 1334.86,674.732 1335.42,688.933 1335.98,706.596 1336.54,722.983 1337.1,703.809 1337.66,702.561 1338.22,714.822 1338.78,728.213 1339.34,743.804 1339.9,695.234 1340.46,676.184 1341.02,661.853 1341.57,661.867 1342.13,646.329 1342.69,662.942 1343.25,661.501 1343.81,663.145 1344.37,614.873 1344.93,602.157 1345.49,623.776 1346.05,607.524 1346.61,613.203 1347.17,615.645 1347.73,637.421 1348.29,640.785 1348.84,629.663 1349.4,613.932 1349.96,634.358 1350.52,641.646 1351.08,678.943 1351.64,664.913 1352.2,666.908 1352.76,651.081 1353.32,622.801 1353.88,628.137 1354.44,597.843 1355,588.136 1355.56,576.108 1356.12,615.307 1356.67,621.54 1357.23,639.575 1357.79,643.588 1358.35,631.333 1358.91,652.184 1359.47,672.522 1360.03,663.222 1360.59,648.227 1361.15,663.471 1361.71,698.041 1362.27,715.387 1362.83,728.139 1363.39,727.92 1363.94,724.785 1364.5,704.353 1365.06,720.278 1365.62,735.761 1366.18,716.532 1366.74,779.794 1367.3,774.718 1367.86,785.985 1368.42,780.225 1368.98,760.458 1369.54,754.387 1370.1,764.801 1370.66,760.896 1371.21,737.008 1371.77,735.504 1372.33,751.081 1372.89,761.949 1373.45,772.421 1374.01,782.171 1374.57,761.896 1375.13,754.283 1375.69,763.373 1376.25,805.754 1376.81,766.936 1377.37,761.396 1377.93,729.311 1378.49,725.544 1379.04,724.693 1379.6,706.432 1380.16,690.412 1380.72,689.921 1381.28,692.972 1381.84,674.528 1382.4,692.944 1382.96,691.073 1383.52,690.019 1384.08,705.701 1384.64,704.694 1385.2,655.275 1385.76,641.097 1386.31,627.231 1386.87,616.831 1387.43,621.32 1387.99,642.575 1388.55,643.676 1389.11,644.931 1389.67,629.775 1390.23,585.768 1390.79,574.81 1391.35,546.1 1391.91,601.078 1392.47,638.262 1393.03,625.228 1393.58,582.049 1394.14,605.877 1394.7,628.976 1395.26,616.339 1395.82,603.44 1396.38,607.73 1396.94,628.311 1397.5,651.06 1398.06,637.033 1398.62,625.446 1399.18,594.403 1399.74,600.963 1400.3,585.593 1400.86,590.911 1401.41,624.444 1401.97,614.751 1402.53,619.222 1403.09,641.188 1403.65,663.299 1404.21,663.483 1404.77,632.852 1405.33,600.976 1405.89,601.73 1406.45,639.712 1407.01,661.426 1407.57,632.431 1408.13,652.459 1408.68,639.129 1409.24,693.769 1409.8,678.163 1410.36,664.247 1410.92,682.401 1411.48,652.192 1412.04,672.299 1412.6,688.939 1413.16,720.759 1413.72,734.21 1414.28,716.814 1414.84,700.087 1415.4,681.755 1415.95,679.195 1416.51,696.127 1417.07,696.109 1417.63,710.017 1418.19,723.94 1418.75,702.576 1419.31,720.055 1419.87,717.187 1420.43,700.794 1420.99,717.741 1421.55,748.311 1422.11,778.822 1422.67,773.897 1423.23,781.901 1423.78,793.206 1424.34,738.085 1424.9,751.966 1425.46,761.339 1426.02,774.632 1426.58,771.951 1427.14,783.501 1427.7,763.526 1428.26,756.388 1428.82,767.357 1429.38,765.082 1429.94,745.202 1430.5,741.922 1431.05,753.428 1431.61,702.248 1432.17,699.451 1432.73,713.59 1433.29,712.946 1433.85,742.986 1434.41,721.574 1434.97,737.721 1435.53,714.491 1436.09,724.267 1436.65,723.42 1437.21,722.825 1437.77,735.011 1438.33,730.332 1438.88,725.197 1439.44,707.84 1440,707.391 1440.56,691.554 1441.12,707.376 1441.68,708.123 1442.24,703.43 1442.8,705.112 1443.36,699.629 1443.92,697.383 1444.48,683.057 1445.04,651.407 1445.6,653.041 1446.15,671.893 1446.71,671.066 1447.27,668.484 1447.83,654.581 1448.39,672.173 1448.95,658.844 1449.51,643.721 1450.07,668.04 1450.63,653.139 1451.19,639.695 1451.75,657.702 1452.31,709.098 1452.87,709.068 1453.42,688.193 1453.98,655.357 1454.54,638.448 1455.1,659.853 1455.66,662.774 1456.22,677.196 1456.78,678.143 1457.34,678.754 1457.9,662.763 1458.46,694.802 1459.02,660.131 1459.58,727.749 1460.14,738.734 1460.7,737.847 1461.25,768.589 1461.81,747.15 1462.37,708.023 1462.93,739.39 1463.49,753.773 1464.05,716.718 1464.61,716.846 1465.17,678.055 1465.73,661.22 1466.29,675.975 1466.85,678.258 1467.41,693.827 1467.97,692.057 1468.52,692.064 1469.08,687.921 1469.64,651.454 1470.2,649.183 1470.76,650.9 1471.32,652.778 1471.88,636.255 1472.44,605.367 1473,625.805 1473.56,629.239 1474.12,649.621 1474.68,616.71 1475.24,621.098 1475.79,641.048 1476.35,640.928 1476.91,628.81 1477.47,630.13 1478.03,619.484 1478.59,626.836 1479.15,628.807 1479.71,633.809 1480.27,667.455 1480.83,650.034 1481.39,653.669 1481.95,688.087 1482.51,718.763 1483.07,700.187 1483.62,702.869 1484.18,690.92 1484.74,660.472 1485.3,661.013 1485.86,678.887 1486.42,647.785 1486.98,637.144 1487.54,640.953 1488.1,644.191 1488.66,679.798 1489.22,676.803 1489.78,691.281 1490.34,689.563 1490.89,740.77 1491.45,736.78 1492.01,749.172 1492.57,744.437 1493.13,787.31 1493.69,749.201 1494.25,743.672 1494.81,772.748 1495.37,765.729 1495.93,775.414 1496.49,771.676 1497.05,816.854 1497.61,761.226 1498.16,789.68 1498.72,783.328 1499.28,777.036 1499.84,753.42 1500.4,764.555 1500.96,774.542 1501.52,799.648 1502.08,775.784 1502.64,799.602 1503.2,795.513 1503.76,805.564 1504.32,801.711 1504.88,794.87 1505.44,771.39 1505.99,765.364 1506.55,781.638 1507.11,762.174 1507.67,760.301 1508.23,755.356 1508.79,738.259 1509.35,753.318 1509.91,735.039 1510.47,763.473 1511.03,755.087 1511.59,764.851 1512.15,763.692 1512.71,775.59 1513.26,736.772 1513.82,715.41 1514.38,729.571 1514.94,727.359 1515.5,709.011 1516.06,673.596 1516.62,688.999 1517.18,704.292 1517.74,701.937 1518.3,685.656 1518.86,684.019 1519.42,698.833 1519.98,683.7 1520.53,684.107 1521.09,686.509 1521.65,667.06 1522.21,668.67 1522.77,685.323 1523.33,683.537 1523.89,699.658 1524.45,679.344 1525.01,680.255 1525.57,684.171 1526.13,664.731 1526.69,619.083 1527.25,624.057 1527.81,628.894 1528.36,619.14 1528.92,603.776 1529.48,589.498 1530.04,613.947 1530.6,616.524 1531.16,618.082 1531.72,638.463 1532.28,626.863 1532.84,628.172 1533.4,631.646 1533.96,666.67 1534.52,682.839 1535.08,662.968 1535.63,647.066 1536.19,617.881 1536.75,606.33 1537.31,575.388 1537.87,562.692 1538.43,570.293 1538.99,574.923 1539.55,563.009 1540.11,568.981 1540.67,608.269 1541.23,612.983 1541.79,616.512 1542.35,636.614 1542.9,636.601 1543.46,653.871 1544.02,637.271 1544.58,654.471 1545.14,669.441 1545.7,620.461 1546.26,639.725 1546.82,593.746 1547.38,614.974 1547.94,634.118 1548.5,635.268 1549.06,636.481 1549.62,641.947 1550.18,628.933 1550.73,647.742 1551.29,653.463 1551.85,671.854 1552.41,659.998 1552.97,662.613 1553.53,678.438 1554.09,696.75 1554.65,681.217 1555.21,664.465 1555.77,747.805 1556.33,745.509 1556.89,726.485 1557.45,739.525 1558,737.87 1558.56,721.512 1559.12,704.278 1559.68,670.445 1560.24,689.095 1560.8,690.171 1561.36,721.613 1561.92,722.059 1562.48,720.384 1563.04,715.545 1563.6,711.942 1564.16,724.695 1564.72,704.683 1565.28,719.933 1565.83,717.212 1566.39,732.168 1566.95,730.911 1567.51,729.327 1568.07,743.519 1568.63,740.341 1569.19,670.498 1569.75,689.591 1570.31,688.106 1570.87,705.302 1571.43,736.539 1571.99,735.154 1572.55,748.02 1573.1,731.767 1573.66,728.324 1574.22,690.418 1574.78,671.774 1575.34,655.6 1575.9,641.319 1576.46,626.237 1577.02,693.682 1577.58,676.67 1578.14,725.775 1578.7,706.644 1579.26,686.078 1579.82,687.613 1580.37,704.398 1580.93,674.306 1581.49,676.719 1582.05,695.663 1582.61,694.264 1583.17,677.531 1583.73,659.619 1584.29,601.463 1584.85,608.645 1585.41,595.554 1585.97,618.226 1586.53,636.902 1587.09,643.699 1587.65,645.269 1588.2,647.167 1588.76,646.301 1589.32,649.836 1589.88,668.926 1590.44,653.614 1591,639.776 1591.56,646.523 1592.12,631.324 1592.68,618.911 1593.24,622.993 1593.8,628.341 1594.36,633.025 1594.92,636.585 1595.47,682.694 1596.03,685.293 1596.59,702.497 1597.15,763.289 1597.71,773.055 1598.27,768.194 1598.83,794.596 1599.39,775.813 1599.95,784.063 1600.51,791.27 1601.07,772.284 1601.63,781.189 1602.19,777.637 1602.74,773.73 1603.3,768.794 1603.86,796.731 1604.42,773.053 1604.98,750.648 1605.54,793.387 1606.1,784.938 1606.66,799.882 1607.22,774.461 1607.78,720.468 1608.34,718.837 1608.9,753.09 1609.46,784.387 1610.02,797.322 1610.57,774.214 1611.13,771.885 1611.69,772.787 1612.25,810.764 1612.81,802.34 1613.37,811.061 1613.93,804.476 1614.49,812.376 1615.05,785.106 1615.61,712.934 1616.17,725.162 1616.73,705.621 1617.29,705.383 1617.84,737.098 1618.4,718.919 1618.96,731.004 1619.52,693.231 1620.08,705.926 1620.64,718.716 1621.2,701.354 1621.76,722.031 1622.32,720.759 1622.88,716.839 1623.44,713.912 1624,759.831 1624.56,771.957 1625.11,684.775 1625.67,664.396 1626.23,649.504 1626.79,648.119 1627.35,649.029 1627.91,665.481 1628.47,648.32 1629.03,684.969 1629.59,683.105 1630.15,668.633 1630.71,669.348 1631.27,682.403 1631.83,651.749 1632.39,654.104 1632.94,607.459 1633.5,611.34 1634.06,602.57 1634.62,622.197 1635.18,625.002 1635.74,586.028 1636.3,587.828 1636.86,564.983 1637.42,588.638 1637.98,576.276 1638.54,565.695 1639.1,573.723 1639.66,596.376 1640.21,602.237 1640.77,655.355 1641.33,674.438 1641.89,657.55 1642.45,661.733 1643.01,694.154 1643.57,659.474 1644.13,645.66 1644.69,630.39 1645.25,630.721 1645.81,713.412 1646.37,761.398 1646.93,773.701 1647.48,749.82 1648.04,744.041 1648.6,709.544 1649.16,694.851 1649.72,710.846 1650.28,706.657 1650.84,690.907 1651.4,687.755 1651.96,670.746 1652.52,691.432 1653.08,691.853 1653.64,672.331 1654.2,671.645 1654.76,670.804 1655.31,673.33 1655.87,706.552 1656.43,688.705 1656.99,674.433 1657.55,660.661 1658.11,662.791 1658.67,644.132 1659.23,613.148 1659.79,599.448 1660.35,587.938 1660.91,610.439 1661.47,596.134 1662.03,584.882 1662.58,556.388 1663.14,513.529 1663.7,522.724 1664.26,546.611 1664.82,552.144 1665.38,560.433 1665.94,565.166 1666.5,552.865 1667.06,541.4 1667.62,561.695 1668.18,602.385 1668.74,590.138 1669.3,609.187 1669.85,628.365 1670.41,634.437 1670.97,623.834 1671.53,675.158 1672.09,725.668 1672.65,742.642 1673.21,723.178 1673.77,720.082 1674.33,701.752 1674.89,716.694 1675.45,730.769 1676.01,712.733 1676.57,695.425 1677.13,680.068 1677.68,634.3 1678.24,622.147 1678.8,626.522 1679.36,658.356 1679.92,640.123 1680.48,641.3 1681.04,611.069 1681.6,663.771 1682.16,665.861 1682.72,665.208 1683.28,667.414 1683.84,621.377 1684.4,657.459 1684.95,626.262 1685.51,645.902 1686.07,664.279 1686.63,666.245 1687.19,654.93 1687.75,656.685 1688.31,676.149 1688.87,693.693 1689.43,692.445 1689.99,691.037 1690.55,693.717 1691.11,695.804 1691.67,727.834 1692.23,707.038 1692.78,709.045 1693.34,722.915 1693.9,738.863 1694.46,735.388 1695.02,764.58 1695.58,777.337 1696.14,787.732 1696.7,784.631 1697.26,765.799 1697.82,699.023 1698.38,715.074 1698.94,715.145 1699.5,698.509 1700.05,680.478 1700.61,679.606 1701.17,664.769 1701.73,687.821 1702.29,704.512 1702.85,703.222 1703.41,702.971 1703.97,703.415 1704.53,688.179 1705.09,702.452 1705.65,749.57 1706.21,764.578 1706.77,744.621 1707.32,739.612 1707.88,769.009 1708.44,745.321 1709,777.513 1709.56,769.405 1710.12,778.844 1710.68,744.229 1711.24,771.278 1711.8,801.467 1712.36,774.623 1712.92,752.282 1713.48,730.972 1714.04,744.131 1714.6,754.667 1715.15,749.481 1715.71,714.705 1716.27,728.809 1716.83,712.008 1717.39,679.661 1717.95,677.336 1718.51,648.357 1719.07,648.459 1719.63,646.092 1720.19,649.783 1720.75,651.136 1721.31,701.623 1721.87,712.46 1722.42,696.888 1722.98,715.964 1723.54,731.4 1724.1,746.748 1724.66,729.482 1725.22,694.716 1725.78,694.92 1726.34,758.589 1726.9,687.624 1727.46,701.762 1728.02,655.353 1728.58,624.759 1729.14,610.631 1729.69,583.616 1730.25,621.345 1730.81,658.184 1731.37,693.604 1731.93,689.855 1732.49,720.19 1733.05,716.364 1733.61,682.047 1734.17,716.188 1734.73,717.115 1735.29,715.938 1735.85,711.223 1736.41,709.441 1736.97,707.868 1737.52,706.701 1738.08,740.501 1738.64,707.026 1739.2,690.165 1739.76,674.843 1740.32,691.818 1740.88,707.777 1741.44,708.395 1742,708.553 1742.56,690.59 1743.12,677.752 1743.68,678.139 1744.24,662.128 1744.79,649.317 1745.35,671.118 1745.91,683.711 1746.47,667.506 1747.03,683.598 1747.59,712.501 1748.15,759.235 1748.71,723.084 1749.27,720.324 1749.83,717.253 1750.39,730.731 1750.95,697.992 1751.51,680.797 1752.06,694.275 1752.62,677.994 1753.18,742.897 1753.74,723.574 1754.3,721.349 1754.86,717.74 1755.42,722.516 1755.98,738.027 1756.54,784 1757.1,792.377 1757.66,786.413 1758.22,750.431 1758.78,732.071 1759.34,732.351 1759.89,759.403 1760.45,773.769 1761.01,752.862 1761.57,748.024 1762.13,742.823 1762.69,709.109 1763.25,709.224 1763.81,709.602 1764.37,725.635 1764.93,725.379 1765.49,740.139 1766.05,737.135 1766.61,749.516 1767.16,730.207 1767.72,727.163 1768.28,707.022 1768.84,700.998 1769.4,679.71 1769.96,661.605 1770.52,646.332 1771.08,676.887 1771.64,645.602 1772.2,632.808 1772.76,650.074 1773.32,619.62 1773.88,607.518 1774.43,611.443 1774.99,633.84 1775.55,601.499 1776.11,574.759 1776.67,595.229 1777.23,614.567 1777.79,647.81 1778.35,649.549 1778.91,616.792 1779.47,616.649 1780.03,616.707 1780.59,604.099 1781.15,642.668 1781.71,662.794 1782.26,659.835 1782.82,662.7 1783.38,663.981 1783.94,668.108 1784.5,606.188 1785.06,627.992 1785.62,635.535 1786.18,605.986 1786.74,627.178 1787.3,613.881 1787.86,616.774 1788.42,572.266 1788.98,580.687 1789.53,586.619 1790.09,559.183 1790.65,566.226 1791.21,605.093 1791.77,611.743 1792.33,617.923 1792.89,623.892 1793.45,629.2 1794.01,604.647 1794.57,626.513 1795.13,679.027 1795.69,682.442 1796.25,666.751 1796.8,669.854 1797.36,655.454 1797.92,641.713 1798.48,644.438 1799.04,617.542 1799.6,624.38 1800.16,609.935 1800.72,599.016 1801.28,636.02 1801.84,621.01 1802.4,592.759 1802.96,614.16 1803.52,636.276 1804.08,655.964 1804.63,674.053 1805.19,703.18 1805.75,684.608 1806.31,700.022 1806.87,683.932 1807.43,668.834 1807.99,667.702 1808.55,702.183 1809.11,719.422 1809.67,686.43 1810.23,689.265 1810.79,704.219 1811.35,689.253 1811.9,688.286 1812.46,670.095 1813.02,670.926 1813.58,721.292 1814.14,754.793 1814.7,784.151 1815.26,764.378 1815.82,776.64 1816.38,753.969 1816.94,759.791 1817.5,722.064 1818.06,690.554 1818.62,706.713 1819.18,707.63 1819.73,691.372 1820.29,706.177 1820.85,687.752 1821.41,685.854 1821.97,687.109 1822.53,687.903 1823.09,669.257 1823.65,669.947 1824.21,673.153 1824.77,659.478 1825.33,642.767 1825.89,676.264 1826.45,679.394 1827,697.479 1827.56,694.578 1828.12,677.162 1828.68,678.651 1829.24,664.828 1829.8,667.735 1830.36,621.598 1830.92,624.694 1831.48,661.796 1832.04,683.465 1832.6,717.756 1833.16,715.57 1833.72,759.436 1834.27,724.307 1834.83,704.639 1835.39,703.907 1835.95,702.928 1836.51,688.448 1837.07,687.35 1837.63,701.627 1838.19,698.908 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 690.816 L720.806 690.816 L721.365 690.816 L721.924 690.816 L722.484 690.816 L723.043 690.816 L723.602 690.816 L724.161 690.816 L724.721 690.816 L725.28 690.816 L725.839 690.816 L726.398 690.816 L726.958 690.816 L727.517 690.816 L728.076 690.816 L728.635 690.816 L729.195 690.816 L729.754 690.816 L730.313 690.816 L730.872 690.816 L731.432 690.816 L731.991 690.816 L732.55 690.816 L733.109 690.816 L733.669 690.816 L734.228 690.816 L734.787 690.816 L735.346 690.816 L735.906 690.816 L736.465 690.816 L737.024 690.816 L737.583 690.816 L738.143 690.816 L738.702 690.816 L739.261 690.816 L739.82 690.816 L740.38 690.816 L740.939 690.816 L741.498 690.816 L742.057 690.816 L742.617 690.816 L743.176 690.816 L743.735 690.816 L744.294 690.816 L744.854 690.816 L745.413 690.816 L745.972 690.816 L746.531 690.816 L747.091 690.816 L747.65 690.816 L748.209 690.816 L748.768 690.816 L749.328 690.816 L749.887 690.816 L750.446 690.816 L751.005 690.816 L751.565 690.816 L752.124 690.816 L752.683 690.816 L753.242 690.816 L753.802 690.816 L754.361 690.816 L754.92 690.816 L755.479 690.816 L756.039 690.816 L756.598 690.816 L757.157 690.816 L757.716 690.816 L758.276 690.816 L758.835 690.816 L759.394 690.816 L759.953 690.816 L760.513 690.816 L761.072 690.816 L761.631 690.816 L762.19 690.816 L762.75 690.816 L763.309 690.816 L763.868 690.816 L764.427 690.816 L764.987 690.816 L765.546 690.816 L766.105 690.816 L766.664 690.816 L767.224 690.816 L767.783 690.816 L768.342 690.816 L768.901 690.816 L769.461 690.816 L770.02 690.816 L770.579 690.816 L771.138 690.816 L771.698 690.816 L772.257 690.816 L772.816 690.816 L773.375 690.816 L773.935 690.816 L774.494 690.816 L775.053 690.816 L775.612 690.816 L776.172 690.816 L776.731 690.816 L777.29 690.816 L777.849 690.816 L778.409 690.816 L778.968 690.816 L779.527 690.816 L780.086 690.816 L780.646 690.816 L781.205 690.816 L781.764 690.816 L782.323 690.816 L782.883 690.816 L783.442 690.816 L784.001 690.816 L784.56 690.816 L785.12 690.816 L785.679 690.816 L786.238 690.816 L786.797 690.816 L787.357 690.816 L787.916 690.816 L788.475 690.816 L789.034 690.816 L789.594 690.816 L790.153 690.816 L790.712 690.816 L791.271 690.816 L791.831 690.816 L792.39 690.816 L792.949 690.816 L793.508 690.816 L794.068 690.816 L794.627 690.816 L795.186 690.816 L795.745 690.816 L796.305 690.816 L796.864 690.816 L797.423 690.816 L797.982 690.816 L798.542 690.816 L799.101 690.816 L799.66 690.816 L800.219 690.816 L800.779 690.816 L801.338 690.816 L801.897 690.816 L802.456 690.816 L803.016 690.816 L803.575 690.816 L804.134 690.816 L804.693 690.816 L805.253 690.816 L805.812 690.816 L806.371 690.816 L806.931 690.816 L807.49 690.816 L808.049 690.816 L808.608 690.816 L809.168 690.816 L809.727 690.816 L810.286 690.816 L810.845 690.816 L811.405 690.816 L811.964 690.816 L812.523 690.816 L813.082 690.816 L813.642 690.816 L814.201 690.816 L814.76 690.816 L815.319 690.816 L815.879 690.816 L816.438 690.816 L816.997 690.816 L817.556 690.816 L818.116 690.816 L818.675 690.816 L819.234 690.816 L819.793 690.816 L820.353 690.816 L820.912 690.816 L821.471 690.816 L822.03 690.816 L822.59 690.816 L823.149 690.816 L823.708 690.816 L824.267 690.816 L824.827 690.816 L825.386 690.816 L825.945 690.816 L826.504 690.816 L827.064 690.816 L827.623 690.816 L828.182 690.816 L828.741 690.816 L829.301 690.816 L829.86 690.816 L830.419 690.816 L830.978 690.816 L831.538 690.816 L832.097 690.816 L832.656 690.816 L833.215 690.816 L833.775 690.816 L834.334 690.816 L834.893 690.816 L835.452 690.816 L836.012 690.816 L836.571 690.816 L837.13 690.816 L837.689 690.816 L838.249 690.816 L838.808 690.816 L839.367 690.816 L839.926 690.816 L840.486 690.816 L841.045 690.816 L841.604 690.816 L842.163 690.816 L842.723 690.816 L843.282 690.816 L843.841 690.816 L844.4 690.816 L844.96 690.816 L845.519 690.816 L846.078 690.816 L846.637 690.816 L847.197 690.816 L847.756 690.816 L848.315 690.816 L848.874 690.816 L849.434 690.816 L849.993 690.816 L850.552 690.816 L851.111 690.816 L851.671 690.816 L852.23 690.816 L852.789 690.816 L853.348 690.816 L853.908 690.816 L854.467 690.816 L855.026 690.816 L855.585 690.816 L856.145 690.816 L856.704 690.816 L857.263 690.816 L857.822 690.816 L858.382 690.816 L858.941 690.816 L859.5 690.816 L860.059 690.816 L860.619 690.816 L861.178 690.816 L861.737 690.816 L862.296 690.816 L862.856 690.816 L863.415 690.816 L863.974 690.816 L864.533 690.816 L865.093 690.816 L865.652 690.816 L866.211 690.816 L866.77 690.816 L867.33 690.816 L867.889 690.816 L868.448 690.816 L869.007 690.816 L869.567 690.816 L870.126 690.816 L870.685 690.816 L871.244 690.816 L871.804 690.816 L872.363 690.816 L872.922 690.816 L873.481 690.816 L874.041 690.816 L874.6 690.816 L875.159 690.816 L875.718 690.816 L876.278 690.816 L876.837 690.816 L877.396 690.816 L877.955 690.816 L878.515 690.816 L879.074 690.816 L879.633 690.816 L880.192 690.816 L880.752 690.816 L881.311 690.816 L881.87 690.816 L882.429 690.816 L882.989 690.816 L883.548 690.816 L884.107 690.816 L884.666 690.816 L885.226 690.816 L885.785 690.816 L886.344 690.816 L886.903 690.816 L887.463 690.816 L888.022 690.816 L888.581 690.816 L889.14 690.816 L889.7 690.816 L890.259 690.816 L890.818 690.816 L891.377 690.816 L891.937 690.816 L892.496 690.816 L893.055 690.816 L893.614 690.816 L894.174 690.816 L894.733 690.816 L895.292 690.816 L895.851 690.816 L896.411 690.816 L896.97 690.816 L897.529 690.816 L898.088 690.816 L898.648 690.816 L899.207 690.816 L899.766 690.816 L900.325 690.816 L900.885 690.816 L901.444 690.816 L902.003 690.816 L902.562 690.816 L903.122 690.816 L903.681 690.816 L904.24 690.816 L904.799 690.816 L905.359 690.816 L905.918 690.816 L906.477 690.816 L907.036 690.816 L907.596 690.816 L908.155 690.816 L908.714 690.816 L909.273 690.816 L909.833 690.816 L910.392 690.816 L910.951 690.816 L911.51 690.816 L912.07 690.816 L912.629 690.816 L913.188 690.816 L913.747 690.816 L914.307 690.816 L914.866 690.816 L915.425 690.816 L915.984 690.816 L916.544 690.816 L917.103 690.816 L917.662 690.816 L918.221 690.816 L918.781 690.816 L919.34 690.816 L919.899 690.816 L920.458 690.816 L921.018 690.816 L921.577 690.816 L922.136 690.816 L922.695 690.816 L923.255 690.816 L923.814 690.816 L924.373 690.816 L924.932 690.816 L925.492 690.816 L926.051 690.816 L926.61 690.816 L927.169 690.816 L927.729 690.816 L928.288 690.816 L928.847 690.816 L929.406 690.816 L929.966 690.816 L930.525 690.816 L931.084 690.816 L931.644 690.816 L932.203 690.816 L932.762 690.816 L933.321 690.816 L933.881 690.816 L934.44 690.816 L934.999 690.816 L935.558 690.816 L936.118 690.816 L936.677 690.816 L937.236 690.816 L937.795 690.816 L938.355 690.816 L938.914 690.816 L939.473 690.816 L940.032 690.816 L940.592 690.816 L941.151 690.816 L941.71 690.816 L942.269 690.816 L942.829 690.816 L943.388 690.816 L943.947 690.816 L944.506 690.816 L945.066 690.816 L945.625 690.816 L946.184 690.816 L946.743 690.816 L947.303 690.816 L947.862 690.816 L948.421 690.816 L948.98 690.816 L949.54 690.816 L950.099 690.816 L950.658 690.816 L951.217 690.816 L951.777 690.816 L952.336 690.816 L952.895 690.816 L953.454 690.816 L954.014 690.816 L954.573 690.816 L955.132 690.816 L955.691 690.816 L956.251 690.816 L956.81 690.816 L957.369 690.816 L957.928 690.816 L958.488 690.816 L959.047 690.816 L959.606 690.816 L960.165 690.816 L960.725 690.816 L961.284 690.816 L961.843 690.816 L962.402 690.816 L962.962 690.816 L963.521 690.816 L964.08 690.816 L964.639 690.816 L965.199 690.816 L965.758 690.816 L966.317 690.816 L966.876 690.816 L967.436 690.816 L967.995 690.816 L968.554 690.816 L969.113 690.816 L969.673 690.816 L970.232 690.816 L970.791 690.816 L971.35 690.816 L971.91 690.816 L972.469 690.816 L973.028 690.816 L973.587 690.816 L974.147 690.816 L974.706 690.816 L975.265 690.816 L975.824 690.816 L976.384 690.816 L976.943 690.816 L977.502 690.816 L978.061 690.816 L978.621 690.816 L979.18 690.816 L979.739 690.816 L980.298 690.816 L980.858 690.816 L981.417 690.816 L981.976 690.816 L982.535 690.816 L983.095 690.816 L983.654 690.816 L984.213 690.816 L984.772 690.816 L985.332 690.816 L985.891 690.816 L986.45 690.816 L987.009 690.816 L987.569 690.816 L988.128 690.816 L988.687 690.816 L989.246 690.816 L989.806 690.816 L990.365 690.816 L990.924 690.816 L991.483 690.816 L992.043 690.816 L992.602 690.816 L993.161 690.816 L993.72 690.816 L994.28 690.816 L994.839 690.816 L995.398 690.816 L995.957 690.816 L996.517 690.816 L997.076 690.816 L997.635 690.816 L998.194 690.816 L998.754 690.816 L999.313 690.816 L999.872 690.816 L1000.43 690.816 L1000.99 690.816 L1001.55 690.816 L1002.11 690.816 L1002.67 690.816 L1003.23 690.816 L1003.79 690.816 L1004.35 690.816 L1004.91 690.816 L1005.46 690.816 L1006.02 690.816 L1006.58 690.816 L1007.14 690.816 L1007.7 690.816 L1008.26 690.816 L1008.82 690.816 L1009.38 690.816 L1009.94 690.816 L1010.5 690.816 L1011.06 690.816 L1011.62 690.816 L1012.18 690.816 L1012.73 690.816 L1013.29 690.816 L1013.85 690.816 L1014.41 690.816 L1014.97 690.816 L1015.53 690.816 L1016.09 690.816 L1016.65 690.816 L1017.21 690.816 L1017.77 690.816 L1018.33 690.816 L1018.89 690.816 L1019.45 690.816 L1020.01 690.816 L1020.56 690.816 L1021.12 690.816 L1021.68 690.816 L1022.24 690.816 L1022.8 690.816 L1023.36 690.816 L1023.92 690.816 L1024.48 690.816 L1025.04 690.816 L1025.6 690.816 L1026.16 690.816 L1026.72 690.816 L1027.28 690.816 L1027.83 690.816 L1028.39 690.816 L1028.95 690.816 L1029.51 690.816 L1030.07 690.816 L1030.63 690.816 L1031.19 690.816 L1031.75 690.816 L1032.31 690.816 L1032.87 690.816 L1033.43 690.816 L1033.99 690.816 L1034.55 690.816 L1035.1 690.816 L1035.66 690.816 L1036.22 690.816 L1036.78 690.816 L1037.34 690.816 L1037.9 690.816 L1038.46 690.816 L1039.02 690.816 L1039.58 690.816 L1040.14 690.816 L1040.7 690.816 L1041.26 690.816 L1041.82 690.816 L1042.38 690.816 L1042.93 690.816 L1043.49 690.816 L1044.05 690.816 L1044.61 690.816 L1045.17 690.816 L1045.73 690.816 L1046.29 690.816 L1046.85 690.816 L1047.41 690.816 L1047.97 690.816 L1048.53 690.816 L1049.09 690.816 L1049.65 690.816 L1050.2 690.816 L1050.76 690.816 L1051.32 690.816 L1051.88 690.816 L1052.44 690.816 L1053 690.816 L1053.56 690.816 L1054.12 690.816 L1054.68 690.816 L1055.24 690.816 L1055.8 690.816 L1056.36 690.816 L1056.92 690.816 L1057.48 690.816 L1058.03 690.816 L1058.59 690.816 L1059.15 690.816 L1059.71 690.816 L1060.27 690.816 L1060.83 690.816 L1061.39 690.816 L1061.95 690.816 L1062.51 690.816 L1063.07 690.816 L1063.63 690.816 L1064.19 690.816 L1064.75 690.816 L1065.3 690.816 L1065.86 690.816 L1066.42 690.816 L1066.98 690.816 L1067.54 690.816 L1068.1 690.816 L1068.66 690.816 L1069.22 690.816 L1069.78 690.816 L1070.34 690.816 L1070.9 690.816 L1071.46 690.816 L1072.02 690.816 L1072.57 690.816 L1073.13 690.816 L1073.69 690.816 L1074.25 690.816 L1074.81 690.816 L1075.37 690.816 L1075.93 690.816 L1076.49 690.816 L1077.05 690.816 L1077.61 690.816 L1078.17 690.816 L1078.73 690.816 L1079.29 690.816 L1079.85 690.816 L1080.4 690.816 L1080.96 690.816 L1081.52 690.816 L1082.08 690.816 L1082.64 690.816 L1083.2 690.816 L1083.76 690.816 L1084.32 690.816 L1084.88 690.816 L1085.44 690.816 L1086 690.816 L1086.56 690.816 L1087.12 690.816 L1087.67 690.816 L1088.23 690.816 L1088.79 690.816 L1089.35 690.816 L1089.91 690.816 L1090.47 690.816 L1091.03 690.816 L1091.59 690.816 L1092.15 690.816 L1092.71 690.816 L1093.27 690.816 L1093.83 690.816 L1094.39 690.816 L1094.94 690.816 L1095.5 690.816 L1096.06 690.816 L1096.62 690.816 L1097.18 690.816 L1097.74 690.816 L1098.3 690.816 L1098.86 690.816 L1099.42 690.816 L1099.98 690.816 L1100.54 690.816 L1101.1 690.816 L1101.66 690.816 L1102.22 690.816 L1102.77 690.816 L1103.33 690.816 L1103.89 690.816 L1104.45 690.816 L1105.01 690.816 L1105.57 690.816 L1106.13 690.816 L1106.69 690.816 L1107.25 690.816 L1107.81 690.816 L1108.37 690.816 L1108.93 690.816 L1109.49 690.816 L1110.04 690.816 L1110.6 690.816 L1111.16 690.816 L1111.72 690.816 L1112.28 690.816 L1112.84 690.816 L1113.4 690.816 L1113.96 690.816 L1114.52 690.816 L1115.08 690.816 L1115.64 690.816 L1116.2 690.816 L1116.76 690.816 L1117.31 690.816 L1117.87 690.816 L1118.43 690.816 L1118.99 690.816 L1119.55 690.816 L1120.11 690.816 L1120.67 690.816 L1121.23 690.816 L1121.79 690.816 L1122.35 690.816 L1122.91 690.816 L1123.47 690.816 L1124.03 690.816 L1124.59 690.816 L1125.14 690.816 L1125.7 690.816 L1126.26 690.816 L1126.82 690.816 L1127.38 690.816 L1127.94 690.816 L1128.5 690.816 L1129.06 690.816 L1129.62 690.816 L1130.18 690.816 L1130.74 690.816 L1131.3 690.816 L1131.86 690.816 L1132.41 690.816 L1132.97 690.816 L1133.53 690.816 L1134.09 690.816 L1134.65 690.816 L1135.21 690.816 L1135.77 690.816 L1136.33 690.816 L1136.89 690.816 L1137.45 690.816 L1138.01 690.816 L1138.57 690.816 L1139.13 690.816 L1139.68 690.816 L1140.24 690.816 L1140.8 690.816 L1141.36 690.816 L1141.92 690.816 L1142.48 690.816 L1143.04 690.816 L1143.6 690.816 L1144.16 690.816 L1144.72 690.816 L1145.28 690.816 L1145.84 690.816 L1146.4 690.816 L1146.96 690.816 L1147.51 690.816 L1148.07 690.816 L1148.63 690.816 L1149.19 690.816 L1149.75 690.816 L1150.31 690.816 L1150.87 690.816 L1151.43 690.816 L1151.99 690.816 L1152.55 690.816 L1153.11 690.816 L1153.67 690.816 L1154.23 690.816 L1154.78 690.816 L1155.34 690.816 L1155.9 690.816 L1156.46 690.816 L1157.02 690.816 L1157.58 690.816 L1158.14 690.816 L1158.7 690.816 L1159.26 690.816 L1159.82 690.816 L1160.38 690.816 L1160.94 690.816 L1161.5 690.816 L1162.05 690.816 L1162.61 690.816 L1163.17 690.816 L1163.73 690.816 L1164.29 690.816 L1164.85 690.816 L1165.41 690.816 L1165.97 690.816 L1166.53 690.816 L1167.09 690.816 L1167.65 690.816 L1168.21 690.816 L1168.77 690.816 L1169.33 690.816 L1169.88 690.816 L1170.44 690.816 L1171 690.816 L1171.56 690.816 L1172.12 690.816 L1172.68 690.816 L1173.24 690.816 L1173.8 690.816 L1174.36 690.816 L1174.92 690.816 L1175.48 690.816 L1176.04 690.816 L1176.6 690.816 L1177.15 690.816 L1177.71 690.816 L1178.27 690.816 L1178.83 690.816 L1179.39 690.816 L1179.95 690.816 L1180.51 690.816 L1181.07 690.816 L1181.63 690.816 L1182.19 690.816 L1182.75 690.816 L1183.31 690.816 L1183.87 690.816 L1184.43 690.816 L1184.98 690.816 L1185.54 690.816 L1186.1 690.816 L1186.66 690.816 L1187.22 690.816 L1187.78 690.816 L1188.34 690.816 L1188.9 690.816 L1189.46 690.816 L1190.02 690.816 L1190.58 690.816 L1191.14 690.816 L1191.7 690.816 L1192.25 690.816 L1192.81 690.816 L1193.37 690.816 L1193.93 690.816 L1194.49 690.816 L1195.05 690.816 L1195.61 690.816 L1196.17 690.816 L1196.73 690.816 L1197.29 690.816 L1197.85 690.816 L1198.41 690.816 L1198.97 690.816 L1199.52 690.816 L1200.08 690.816 L1200.64 690.816 L1201.2 690.816 L1201.76 690.816 L1202.32 690.816 L1202.88 690.816 L1203.44 690.816 L1204 690.816 L1204.56 690.816 L1205.12 690.816 L1205.68 690.816 L1206.24 690.816 L1206.8 690.816 L1207.35 690.816 L1207.91 690.816 L1208.47 690.816 L1209.03 690.816 L1209.59 690.816 L1210.15 690.816 L1210.71 690.816 L1211.27 690.816 L1211.83 690.816 L1212.39 690.816 L1212.95 690.816 L1213.51 690.816 L1214.07 690.816 L1214.62 690.816 L1215.18 690.816 L1215.74 690.816 L1216.3 690.816 L1216.86 690.816 L1217.42 690.816 L1217.98 690.816 L1218.54 690.816 L1219.1 690.816 L1219.66 690.816 L1220.22 690.816 L1220.78 690.816 L1221.34 690.816 L1221.89 690.816 L1222.45 690.816 L1223.01 690.816 L1223.57 690.816 L1224.13 690.816 L1224.69 690.816 L1225.25 690.816 L1225.81 690.816 L1226.37 690.816 L1226.93 690.816 L1227.49 690.816 L1228.05 690.816 L1228.61 690.816 L1229.17 690.816 L1229.72 690.816 L1230.28 690.816 L1230.84 690.816 L1231.4 690.816 L1231.96 690.816 L1232.52 690.816 L1233.08 690.816 L1233.64 690.816 L1234.2 690.816 L1234.76 690.816 L1235.32 690.816 L1235.88 690.816 L1236.44 690.816 L1236.99 690.816 L1237.55 690.816 L1238.11 690.816 L1238.67 690.816 L1239.23 690.816 L1239.79 690.816 L1240.35 690.816 L1240.91 690.816 L1241.47 690.816 L1242.03 690.816 L1242.59 690.816 L1243.15 690.816 L1243.71 690.816 L1244.26 690.816 L1244.82 690.816 L1245.38 690.816 L1245.94 690.816 L1246.5 690.816 L1247.06 690.816 L1247.62 690.816 L1248.18 690.816 L1248.74 690.816 L1249.3 690.816 L1249.86 690.816 L1250.42 690.816 L1250.98 690.816 L1251.54 690.816 L1252.09 690.816 L1252.65 690.816 L1253.21 690.816 L1253.77 690.816 L1254.33 690.816 L1254.89 690.816 L1255.45 690.816 L1256.01 690.816 L1256.57 690.816 L1257.13 690.816 L1257.69 690.816 L1258.25 690.816 L1258.81 690.816 L1259.36 690.816 L1259.92 690.816 L1260.48 690.816 L1261.04 690.816 L1261.6 690.816 L1262.16 690.816 L1262.72 690.816 L1263.28 690.816 L1263.84 690.816 L1264.4 690.816 L1264.96 690.816 L1265.52 690.816 L1266.08 690.816 L1266.63 690.816 L1267.19 690.816 L1267.75 690.816 L1268.31 690.816 L1268.87 690.816 L1269.43 690.816 L1269.99 690.816 L1270.55 690.816 L1271.11 690.816 L1271.67 690.816 L1272.23 690.816 L1272.79 690.816 L1273.35 690.816 L1273.91 690.816 L1274.46 690.816 L1275.02 690.816 L1275.58 690.816 L1276.14 690.816 L1276.7 690.816 L1277.26 690.816 L1277.82 690.816 L1278.38 690.816 L1278.94 690.816 L1279.5 690.816 L1280.06 690.816 L1280.62 690.816 L1281.18 690.816 L1281.73 690.816 L1282.29 690.816 L1282.85 690.816 L1283.41 690.816 L1283.97 690.816 L1284.53 690.816 L1285.09 690.816 L1285.65 690.816 L1286.21 690.816 L1286.77 690.816 L1287.33 690.816 L1287.89 690.816 L1288.45 690.816 L1289 690.816 L1289.56 690.816 L1290.12 690.816 L1290.68 690.816 L1291.24 690.816 L1291.8 690.816 L1292.36 690.816 L1292.92 690.816 L1293.48 690.816 L1294.04 690.816 L1294.6 690.816 L1295.16 690.816 L1295.72 690.816 L1296.28 690.816 L1296.83 690.816 L1297.39 690.816 L1297.95 690.816 L1298.51 690.816 L1299.07 690.816 L1299.63 690.816 L1300.19 690.816 L1300.75 690.816 L1301.31 690.816 L1301.87 690.816 L1302.43 690.816 L1302.99 690.816 L1303.55 690.816 L1304.1 690.816 L1304.66 690.816 L1305.22 690.816 L1305.78 690.816 L1306.34 690.816 L1306.9 690.816 L1307.46 690.816 L1308.02 690.816 L1308.58 690.816 L1309.14 690.816 L1309.7 690.816 L1310.26 690.816 L1310.82 690.816 L1311.38 690.816 L1311.93 690.816 L1312.49 690.816 L1313.05 690.816 L1313.61 690.816 L1314.17 690.816 L1314.73 690.816 L1315.29 690.816 L1315.85 690.816 L1316.41 690.816 L1316.97 690.816 L1317.53 690.816 L1318.09 690.816 L1318.65 690.816 L1319.2 690.816 L1319.76 690.816 L1320.32 690.816 L1320.88 690.816 L1321.44 690.816 L1322 690.816 L1322.56 690.816 L1323.12 690.816 L1323.68 690.816 L1324.24 690.816 L1324.8 690.816 L1325.36 690.816 L1325.92 690.816 L1326.47 690.816 L1327.03 690.816 L1327.59 690.816 L1328.15 690.816 L1328.71 690.816 L1329.27 690.816 L1329.83 690.816 L1330.39 690.816 L1330.95 690.816 L1331.51 690.816 L1332.07 690.816 L1332.63 690.816 L1333.19 690.816 L1333.75 690.816 L1334.3 690.816 L1334.86 690.816 L1335.42 690.816 L1335.98 690.816 L1336.54 690.816 L1337.1 690.816 L1337.66 690.816 L1338.22 690.816 L1338.78 690.816 L1339.34 690.816 L1339.9 690.816 L1340.46 690.816 L1341.02 690.816 L1341.57 690.816 L1342.13 690.816 L1342.69 690.816 L1343.25 690.816 L1343.81 690.816 L1344.37 690.816 L1344.93 690.816 L1345.49 690.816 L1346.05 690.816 L1346.61 690.816 L1347.17 690.816 L1347.73 690.816 L1348.29 690.816 L1348.84 690.816 L1349.4 690.816 L1349.96 690.816 L1350.52 690.816 L1351.08 690.816 L1351.64 690.816 L1352.2 690.816 L1352.76 690.816 L1353.32 690.816 L1353.88 690.816 L1354.44 690.816 L1355 690.816 L1355.56 690.816 L1356.12 690.816 L1356.67 690.816 L1357.23 690.816 L1357.79 690.816 L1358.35 690.816 L1358.91 690.816 L1359.47 690.816 L1360.03 690.816 L1360.59 690.816 L1361.15 690.816 L1361.71 690.816 L1362.27 690.816 L1362.83 690.816 L1363.39 690.816 L1363.94 690.816 L1364.5 690.816 L1365.06 690.816 L1365.62 690.816 L1366.18 690.816 L1366.74 690.816 L1367.3 690.816 L1367.86 690.816 L1368.42 690.816 L1368.98 690.816 L1369.54 690.816 L1370.1 690.816 L1370.66 690.816 L1371.21 690.816 L1371.77 690.816 L1372.33 690.816 L1372.89 690.816 L1373.45 690.816 L1374.01 690.816 L1374.57 690.816 L1375.13 690.816 L1375.69 690.816 L1376.25 690.816 L1376.81 690.816 L1377.37 690.816 L1377.93 690.816 L1378.49 690.816 L1379.04 690.816 L1379.6 690.816 L1380.16 690.816 L1380.72 690.816 L1381.28 690.816 L1381.84 690.816 L1382.4 690.816 L1382.96 690.816 L1383.52 690.816 L1384.08 690.816 L1384.64 690.816 L1385.2 690.816 L1385.76 690.816 L1386.31 690.816 L1386.87 690.816 L1387.43 690.816 L1387.99 690.816 L1388.55 690.816 L1389.11 690.816 L1389.67 690.816 L1390.23 690.816 L1390.79 690.816 L1391.35 690.816 L1391.91 690.816 L1392.47 690.816 L1393.03 690.816 L1393.58 690.816 L1394.14 690.816 L1394.7 690.816 L1395.26 690.816 L1395.82 690.816 L1396.38 690.816 L1396.94 690.816 L1397.5 690.816 L1398.06 690.816 L1398.62 690.816 L1399.18 690.816 L1399.74 690.816 L1400.3 690.816 L1400.86 690.816 L1401.41 690.816 L1401.97 690.816 L1402.53 690.816 L1403.09 690.816 L1403.65 690.816 L1404.21 690.816 L1404.77 690.816 L1405.33 690.816 L1405.89 690.816 L1406.45 690.816 L1407.01 690.816 L1407.57 690.816 L1408.13 690.816 L1408.68 690.816 L1409.24 690.816 L1409.8 690.816 L1410.36 690.816 L1410.92 690.816 L1411.48 690.816 L1412.04 690.816 L1412.6 690.816 L1413.16 690.816 L1413.72 690.816 L1414.28 690.816 L1414.84 690.816 L1415.4 690.816 L1415.95 690.816 L1416.51 690.816 L1417.07 690.816 L1417.63 690.816 L1418.19 690.816 L1418.75 690.816 L1419.31 690.816 L1419.87 690.816 L1420.43 690.816 L1420.99 690.816 L1421.55 690.816 L1422.11 690.816 L1422.67 690.816 L1423.23 690.816 L1423.78 690.816 L1424.34 690.816 L1424.9 690.816 L1425.46 690.816 L1426.02 690.816 L1426.58 690.816 L1427.14 690.816 L1427.7 690.816 L1428.26 690.816 L1428.82 690.816 L1429.38 690.816 L1429.94 690.816 L1430.5 690.816 L1431.05 690.816 L1431.61 690.816 L1432.17 690.816 L1432.73 690.816 L1433.29 690.816 L1433.85 690.816 L1434.41 690.816 L1434.97 690.816 L1435.53 690.816 L1436.09 690.816 L1436.65 690.816 L1437.21 690.816 L1437.77 690.816 L1438.33 690.816 L1438.88 690.816 L1439.44 690.816 L1440 690.816 L1440.56 690.816 L1441.12 690.816 L1441.68 690.816 L1442.24 690.816 L1442.8 690.816 L1443.36 690.816 L1443.92 690.816 L1444.48 690.816 L1445.04 690.816 L1445.6 690.816 L1446.15 690.816 L1446.71 690.816 L1447.27 690.816 L1447.83 690.816 L1448.39 690.816 L1448.95 690.816 L1449.51 690.816 L1450.07 690.816 L1450.63 690.816 L1451.19 690.816 L1451.75 690.816 L1452.31 690.816 L1452.87 690.816 L1453.42 690.816 L1453.98 690.816 L1454.54 690.816 L1455.1 690.816 L1455.66 690.816 L1456.22 690.816 L1456.78 690.816 L1457.34 690.816 L1457.9 690.816 L1458.46 690.816 L1459.02 690.816 L1459.58 690.816 L1460.14 690.816 L1460.7 690.816 L1461.25 690.816 L1461.81 690.816 L1462.37 690.816 L1462.93 690.816 L1463.49 690.816 L1464.05 690.816 L1464.61 690.816 L1465.17 690.816 L1465.73 690.816 L1466.29 690.816 L1466.85 690.816 L1467.41 690.816 L1467.97 690.816 L1468.52 690.816 L1469.08 690.816 L1469.64 690.816 L1470.2 690.816 L1470.76 690.816 L1471.32 690.816 L1471.88 690.816 L1472.44 690.816 L1473 690.816 L1473.56 690.816 L1474.12 690.816 L1474.68 690.816 L1475.24 690.816 L1475.79 690.816 L1476.35 690.816 L1476.91 690.816 L1477.47 690.816 L1478.03 690.816 L1478.59 690.816 L1479.15 690.816 L1479.71 690.816 L1480.27 690.816 L1480.83 690.816 L1481.39 690.816 L1481.95 690.816 L1482.51 690.816 L1483.07 690.816 L1483.62 690.816 L1484.18 690.816 L1484.74 690.816 L1485.3 690.816 L1485.86 690.816 L1486.42 690.816 L1486.98 690.816 L1487.54 690.816 L1488.1 690.816 L1488.66 690.816 L1489.22 690.816 L1489.78 690.816 L1490.34 690.816 L1490.89 690.816 L1491.45 690.816 L1492.01 690.816 L1492.57 690.816 L1493.13 690.816 L1493.69 690.816 L1494.25 690.816 L1494.81 690.816 L1495.37 690.816 L1495.93 690.816 L1496.49 690.816 L1497.05 690.816 L1497.61 690.816 L1498.16 690.816 L1498.72 690.816 L1499.28 690.816 L1499.84 690.816 L1500.4 690.816 L1500.96 690.816 L1501.52 690.816 L1502.08 690.816 L1502.64 690.816 L1503.2 690.816 L1503.76 690.816 L1504.32 690.816 L1504.88 690.816 L1505.44 690.816 L1505.99 690.816 L1506.55 690.816 L1507.11 690.816 L1507.67 690.816 L1508.23 690.816 L1508.79 690.816 L1509.35 690.816 L1509.91 690.816 L1510.47 690.816 L1511.03 690.816 L1511.59 690.816 L1512.15 690.816 L1512.71 690.816 L1513.26 690.816 L1513.82 690.816 L1514.38 690.816 L1514.94 690.816 L1515.5 690.816 L1516.06 690.816 L1516.62 690.816 L1517.18 690.816 L1517.74 690.816 L1518.3 690.816 L1518.86 690.816 L1519.42 690.816 L1519.98 690.816 L1520.53 690.816 L1521.09 690.816 L1521.65 690.816 L1522.21 690.816 L1522.77 690.816 L1523.33 690.816 L1523.89 690.816 L1524.45 690.816 L1525.01 690.816 L1525.57 690.816 L1526.13 690.816 L1526.69 690.816 L1527.25 690.816 L1527.81 690.816 L1528.36 690.816 L1528.92 690.816 L1529.48 690.816 L1530.04 690.816 L1530.6 690.816 L1531.16 690.816 L1531.72 690.816 L1532.28 690.816 L1532.84 690.816 L1533.4 690.816 L1533.96 690.816 L1534.52 690.816 L1535.08 690.816 L1535.63 690.816 L1536.19 690.816 L1536.75 690.816 L1537.31 690.816 L1537.87 690.816 L1538.43 690.816 L1538.99 690.816 L1539.55 690.816 L1540.11 690.816 L1540.67 690.816 L1541.23 690.816 L1541.79 690.816 L1542.35 690.816 L1542.9 690.816 L1543.46 690.816 L1544.02 690.816 L1544.58 690.816 L1545.14 690.816 L1545.7 690.816 L1546.26 690.816 L1546.82 690.816 L1547.38 690.816 L1547.94 690.816 L1548.5 690.816 L1549.06 690.816 L1549.62 690.816 L1550.18 690.816 L1550.73 690.816 L1551.29 690.816 L1551.85 690.816 L1552.41 690.816 L1552.97 690.816 L1553.53 690.816 L1554.09 690.816 L1554.65 690.816 L1555.21 690.816 L1555.77 690.816 L1556.33 690.816 L1556.89 690.816 L1557.45 690.816 L1558 690.816 L1558.56 690.816 L1559.12 690.816 L1559.68 690.816 L1560.24 690.816 L1560.8 690.816 L1561.36 690.816 L1561.92 690.816 L1562.48 690.816 L1563.04 690.816 L1563.6 690.816 L1564.16 690.816 L1564.72 690.816 L1565.28 690.816 L1565.83 690.816 L1566.39 690.816 L1566.95 690.816 L1567.51 690.816 L1568.07 690.816 L1568.63 690.816 L1569.19 690.816 L1569.75 690.816 L1570.31 690.816 L1570.87 690.816 L1571.43 690.816 L1571.99 690.816 L1572.55 690.816 L1573.1 690.816 L1573.66 690.816 L1574.22 690.816 L1574.78 690.816 L1575.34 690.816 L1575.9 690.816 L1576.46 690.816 L1577.02 690.816 L1577.58 690.816 L1578.14 690.816 L1578.7 690.816 L1579.26 690.816 L1579.82 690.816 L1580.37 690.816 L1580.93 690.816 L1581.49 690.816 L1582.05 690.816 L1582.61 690.816 L1583.17 690.816 L1583.73 690.816 L1584.29 690.816 L1584.85 690.816 L1585.41 690.816 L1585.97 690.816 L1586.53 690.816 L1587.09 690.816 L1587.65 690.816 L1588.2 690.816 L1588.76 690.816 L1589.32 690.816 L1589.88 690.816 L1590.44 690.816 L1591 690.816 L1591.56 690.816 L1592.12 690.816 L1592.68 690.816 L1593.24 690.816 L1593.8 690.816 L1594.36 690.816 L1594.92 690.816 L1595.47 690.816 L1596.03 690.816 L1596.59 690.816 L1597.15 690.816 L1597.71 690.816 L1598.27 690.816 L1598.83 690.816 L1599.39 690.816 L1599.95 690.816 L1600.51 690.816 L1601.07 690.816 L1601.63 690.816 L1602.19 690.816 L1602.74 690.816 L1603.3 690.816 L1603.86 690.816 L1604.42 690.816 L1604.98 690.816 L1605.54 690.816 L1606.1 690.816 L1606.66 690.816 L1607.22 690.816 L1607.78 690.816 L1608.34 690.816 L1608.9 690.816 L1609.46 690.816 L1610.02 690.816 L1610.57 690.816 L1611.13 690.816 L1611.69 690.816 L1612.25 690.816 L1612.81 690.816 L1613.37 690.816 L1613.93 690.816 L1614.49 690.816 L1615.05 690.816 L1615.61 690.816 L1616.17 690.816 L1616.73 690.816 L1617.29 690.816 L1617.84 690.816 L1618.4 690.816 L1618.96 690.816 L1619.52 690.816 L1620.08 690.816 L1620.64 690.816 L1621.2 690.816 L1621.76 690.816 L1622.32 690.816 L1622.88 690.816 L1623.44 690.816 L1624 690.816 L1624.56 690.816 L1625.11 690.816 L1625.67 690.816 L1626.23 690.816 L1626.79 690.816 L1627.35 690.816 L1627.91 690.816 L1628.47 690.816 L1629.03 690.816 L1629.59 690.816 L1630.15 690.816 L1630.71 690.816 L1631.27 690.816 L1631.83 690.816 L1632.39 690.816 L1632.94 690.816 L1633.5 690.816 L1634.06 690.816 L1634.62 690.816 L1635.18 690.816 L1635.74 690.816 L1636.3 690.816 L1636.86 690.816 L1637.42 690.816 L1637.98 690.816 L1638.54 690.816 L1639.1 690.816 L1639.66 690.816 L1640.21 690.816 L1640.77 690.816 L1641.33 690.816 L1641.89 690.816 L1642.45 690.816 L1643.01 690.816 L1643.57 690.816 L1644.13 690.816 L1644.69 690.816 L1645.25 690.816 L1645.81 690.816 L1646.37 690.816 L1646.93 690.816 L1647.48 690.816 L1648.04 690.816 L1648.6 690.816 L1649.16 690.816 L1649.72 690.816 L1650.28 690.816 L1650.84 690.816 L1651.4 690.816 L1651.96 690.816 L1652.52 690.816 L1653.08 690.816 L1653.64 690.816 L1654.2 690.816 L1654.76 690.816 L1655.31 690.816 L1655.87 690.816 L1656.43 690.816 L1656.99 690.816 L1657.55 690.816 L1658.11 690.816 L1658.67 690.816 L1659.23 690.816 L1659.79 690.816 L1660.35 690.816 L1660.91 690.816 L1661.47 690.816 L1662.03 690.816 L1662.58 690.816 L1663.14 690.816 L1663.7 690.816 L1664.26 690.816 L1664.82 690.816 L1665.38 690.816 L1665.94 690.816 L1666.5 690.816 L1667.06 690.816 L1667.62 690.816 L1668.18 690.816 L1668.74 690.816 L1669.3 690.816 L1669.85 690.816 L1670.41 690.816 L1670.97 690.816 L1671.53 690.816 L1672.09 690.816 L1672.65 690.816 L1673.21 690.816 L1673.77 690.816 L1674.33 690.816 L1674.89 690.816 L1675.45 690.816 L1676.01 690.816 L1676.57 690.816 L1677.13 690.816 L1677.68 690.816 L1678.24 690.816 L1678.8 690.816 L1679.36 690.816 L1679.92 690.816 L1680.48 690.816 L1681.04 690.816 L1681.6 690.816 L1682.16 690.816 L1682.72 690.816 L1683.28 690.816 L1683.84 690.816 L1684.4 690.816 L1684.95 690.816 L1685.51 690.816 L1686.07 690.816 L1686.63 690.816 L1687.19 690.816 L1687.75 690.816 L1688.31 690.816 L1688.87 690.816 L1689.43 690.816 L1689.99 690.816 L1690.55 690.816 L1691.11 690.816 L1691.67 690.816 L1692.23 690.816 L1692.78 690.816 L1693.34 690.816 L1693.9 690.816 L1694.46 690.816 L1695.02 690.816 L1695.58 690.816 L1696.14 690.816 L1696.7 690.816 L1697.26 690.816 L1697.82 690.816 L1698.38 690.816 L1698.94 690.816 L1699.5 690.816 L1700.05 690.816 L1700.61 690.816 L1701.17 690.816 L1701.73 690.816 L1702.29 690.816 L1702.85 690.816 L1703.41 690.816 L1703.97 690.816 L1704.53 690.816 L1705.09 690.816 L1705.65 690.816 L1706.21 690.816 L1706.77 690.816 L1707.32 690.816 L1707.88 690.816 L1708.44 690.816 L1709 690.816 L1709.56 690.816 L1710.12 690.816 L1710.68 690.816 L1711.24 690.816 L1711.8 690.816 L1712.36 690.816 L1712.92 690.816 L1713.48 690.816 L1714.04 690.816 L1714.6 690.816 L1715.15 690.816 L1715.71 690.816 L1716.27 690.816 L1716.83 690.816 L1717.39 690.816 L1717.95 690.816 L1718.51 690.816 L1719.07 690.816 L1719.63 690.816 L1720.19 690.816 L1720.75 690.816 L1721.31 690.816 L1721.87 690.816 L1722.42 690.816 L1722.98 690.816 L1723.54 690.816 L1724.1 690.816 L1724.66 690.816 L1725.22 690.816 L1725.78 690.816 L1726.34 690.816 L1726.9 690.816 L1727.46 690.816 L1728.02 690.816 L1728.58 690.816 L1729.14 690.816 L1729.69 690.816 L1730.25 690.816 L1730.81 690.816 L1731.37 690.816 L1731.93 690.816 L1732.49 690.816 L1733.05 690.816 L1733.61 690.816 L1734.17 690.816 L1734.73 690.816 L1735.29 690.816 L1735.85 690.816 L1736.41 690.816 L1736.97 690.816 L1737.52 690.816 L1738.08 690.816 L1738.64 690.816 L1739.2 690.816 L1739.76 690.816 L1740.32 690.816 L1740.88 690.816 L1741.44 690.816 L1742 690.816 L1742.56 690.816 L1743.12 690.816 L1743.68 690.816 L1744.24 690.816 L1744.79 690.816 L1745.35 690.816 L1745.91 690.816 L1746.47 690.816 L1747.03 690.816 L1747.59 690.816 L1748.15 690.816 L1748.71 690.816 L1749.27 690.816 L1749.83 690.816 L1750.39 690.816 L1750.95 690.816 L1751.51 690.816 L1752.06 690.816 L1752.62 690.816 L1753.18 690.816 L1753.74 690.816 L1754.3 690.816 L1754.86 690.816 L1755.42 690.816 L1755.98 690.816 L1756.54 690.816 L1757.1 690.816 L1757.66 690.816 L1758.22 690.816 L1758.78 690.816 L1759.34 690.816 L1759.89 690.816 L1760.45 690.816 L1761.01 690.816 L1761.57 690.816 L1762.13 690.816 L1762.69 690.816 L1763.25 690.816 L1763.81 690.816 L1764.37 690.816 L1764.93 690.816 L1765.49 690.816 L1766.05 690.816 L1766.61 690.816 L1767.16 690.816 L1767.72 690.816 L1768.28 690.816 L1768.84 690.816 L1769.4 690.816 L1769.96 690.816 L1770.52 690.816 L1771.08 690.816 L1771.64 690.816 L1772.2 690.816 L1772.76 690.816 L1773.32 690.816 L1773.88 690.816 L1774.43 690.816 L1774.99 690.816 L1775.55 690.816 L1776.11 690.816 L1776.67 690.816 L1777.23 690.816 L1777.79 690.816 L1778.35 690.816 L1778.91 690.816 L1779.47 690.816 L1780.03 690.816 L1780.59 690.816 L1781.15 690.816 L1781.71 690.816 L1782.26 690.816 L1782.82 690.816 L1783.38 690.816 L1783.94 690.816 L1784.5 690.816 L1785.06 690.816 L1785.62 690.816 L1786.18 690.816 L1786.74 690.816 L1787.3 690.816 L1787.86 690.816 L1788.42 690.816 L1788.98 690.816 L1789.53 690.816 L1790.09 690.816 L1790.65 690.816 L1791.21 690.816 L1791.77 690.816 L1792.33 690.816 L1792.89 690.816 L1793.45 690.816 L1794.01 690.816 L1794.57 690.816 L1795.13 690.816 L1795.69 690.816 L1796.25 690.816 L1796.8 690.816 L1797.36 690.816 L1797.92 690.816 L1798.48 690.816 L1799.04 690.816 L1799.6 690.816 L1800.16 690.816 L1800.72 690.816 L1801.28 690.816 L1801.84 690.816 L1802.4 690.816 L1802.96 690.816 L1803.52 690.816 L1804.08 690.816 L1804.63 690.816 L1805.19 690.816 L1805.75 690.816 L1806.31 690.816 L1806.87 690.816 L1807.43 690.816 L1807.99 690.816 L1808.55 690.816 L1809.11 690.816 L1809.67 690.816 L1810.23 690.816 L1810.79 690.816 L1811.35 690.816 L1811.9 690.816 L1812.46 690.816 L1813.02 690.816 L1813.58 690.816 L1814.14 690.816 L1814.7 690.816 L1815.26 690.816 L1815.82 690.816 L1816.38 690.816 L1816.94 690.816 L1817.5 690.816 L1818.06 690.816 L1818.62 690.816 L1819.18 690.816 L1819.73 690.816 L1820.29 690.816 L1820.85 690.816 L1821.41 690.816 L1821.97 690.816 L1822.53 690.816 L1823.09 690.816 L1823.65 690.816 L1824.21 690.816 L1824.77 690.816 L1825.33 690.816 L1825.89 690.816 L1826.45 690.816 L1827 690.816 L1827.56 690.816 L1828.12 690.816 L1828.68 690.816 L1829.24 690.816 L1829.8 690.816 L1830.36 690.816 L1830.92 690.816 L1831.48 690.816 L1832.04 690.816 L1832.6 690.816 L1833.16 690.816 L1833.72 690.816 L1834.27 690.816 L1834.83 690.816 L1835.39 690.816 L1835.95 690.816 L1836.51 690.816 L1837.07 690.816 L1837.63 690.816 L1838.19 690.816 L1838.19 680.644 L1837.63 680.644 L1837.07 680.644 L1836.51 680.644 L1835.95 680.644 L1835.39 680.644 L1834.83 680.644 L1834.27 680.644 L1833.72 680.644 L1833.16 680.644 L1832.6 680.644 L1832.04 680.644 L1831.48 680.644 L1830.92 680.644 L1830.36 680.644 L1829.8 680.644 L1829.24 680.644 L1828.68 680.644 L1828.12 680.644 L1827.56 680.644 L1827 680.644 L1826.45 680.644 L1825.89 680.644 L1825.33 680.644 L1824.77 680.644 L1824.21 680.644 L1823.65 680.644 L1823.09 680.644 L1822.53 680.644 L1821.97 680.644 L1821.41 680.644 L1820.85 680.644 L1820.29 680.644 L1819.73 680.644 L1819.18 680.644 L1818.62 680.644 L1818.06 680.644 L1817.5 680.644 L1816.94 680.644 L1816.38 680.644 L1815.82 680.644 L1815.26 680.644 L1814.7 680.644 L1814.14 680.644 L1813.58 680.644 L1813.02 680.644 L1812.46 680.644 L1811.9 680.644 L1811.35 680.644 L1810.79 680.644 L1810.23 680.644 L1809.67 680.644 L1809.11 680.644 L1808.55 680.644 L1807.99 680.644 L1807.43 680.644 L1806.87 680.644 L1806.31 680.644 L1805.75 680.644 L1805.19 680.644 L1804.63 680.644 L1804.08 680.644 L1803.52 680.644 L1802.96 680.644 L1802.4 680.644 L1801.84 680.644 L1801.28 680.644 L1800.72 680.644 L1800.16 680.644 L1799.6 680.644 L1799.04 680.644 L1798.48 680.644 L1797.92 680.644 L1797.36 680.644 L1796.8 680.644 L1796.25 680.644 L1795.69 680.644 L1795.13 680.644 L1794.57 680.644 L1794.01 680.644 L1793.45 680.644 L1792.89 680.644 L1792.33 680.644 L1791.77 680.644 L1791.21 680.644 L1790.65 680.644 L1790.09 680.644 L1789.53 680.644 L1788.98 680.644 L1788.42 680.644 L1787.86 680.644 L1787.3 680.644 L1786.74 680.644 L1786.18 680.644 L1785.62 680.644 L1785.06 680.644 L1784.5 680.644 L1783.94 680.644 L1783.38 680.644 L1782.82 680.644 L1782.26 680.644 L1781.71 680.644 L1781.15 680.644 L1780.59 680.644 L1780.03 680.644 L1779.47 680.644 L1778.91 680.644 L1778.35 680.644 L1777.79 680.644 L1777.23 680.644 L1776.67 680.644 L1776.11 680.644 L1775.55 680.644 L1774.99 680.644 L1774.43 680.644 L1773.88 680.644 L1773.32 680.644 L1772.76 680.644 L1772.2 680.644 L1771.64 680.644 L1771.08 680.644 L1770.52 680.644 L1769.96 680.644 L1769.4 680.644 L1768.84 680.644 L1768.28 680.644 L1767.72 680.644 L1767.16 680.644 L1766.61 680.644 L1766.05 680.644 L1765.49 680.644 L1764.93 680.644 L1764.37 680.644 L1763.81 680.644 L1763.25 680.644 L1762.69 680.644 L1762.13 680.644 L1761.57 680.644 L1761.01 680.644 L1760.45 680.644 L1759.89 680.644 L1759.34 680.644 L1758.78 680.644 L1758.22 680.644 L1757.66 680.644 L1757.1 680.644 L1756.54 680.644 L1755.98 680.644 L1755.42 680.644 L1754.86 680.644 L1754.3 680.644 L1753.74 680.644 L1753.18 680.644 L1752.62 680.644 L1752.06 680.644 L1751.51 680.644 L1750.95 680.644 L1750.39 680.644 L1749.83 680.644 L1749.27 680.644 L1748.71 680.644 L1748.15 680.644 L1747.59 680.644 L1747.03 680.644 L1746.47 680.644 L1745.91 680.644 L1745.35 680.644 L1744.79 680.644 L1744.24 680.644 L1743.68 680.644 L1743.12 680.644 L1742.56 680.644 L1742 680.644 L1741.44 680.644 L1740.88 680.644 L1740.32 680.644 L1739.76 680.644 L1739.2 680.644 L1738.64 680.644 L1738.08 680.644 L1737.52 680.644 L1736.97 680.644 L1736.41 680.644 L1735.85 680.644 L1735.29 680.644 L1734.73 680.644 L1734.17 680.644 L1733.61 680.644 L1733.05 680.644 L1732.49 680.644 L1731.93 680.644 L1731.37 680.644 L1730.81 680.644 L1730.25 680.644 L1729.69 680.644 L1729.14 680.644 L1728.58 680.644 L1728.02 680.644 L1727.46 680.644 L1726.9 680.644 L1726.34 680.644 L1725.78 680.644 L1725.22 680.644 L1724.66 680.644 L1724.1 680.644 L1723.54 680.644 L1722.98 680.644 L1722.42 680.644 L1721.87 680.644 L1721.31 680.644 L1720.75 680.644 L1720.19 680.644 L1719.63 680.644 L1719.07 680.644 L1718.51 680.644 L1717.95 680.644 L1717.39 680.644 L1716.83 680.644 L1716.27 680.644 L1715.71 680.644 L1715.15 680.644 L1714.6 680.644 L1714.04 680.644 L1713.48 680.644 L1712.92 680.644 L1712.36 680.644 L1711.8 680.644 L1711.24 680.644 L1710.68 680.644 L1710.12 680.644 L1709.56 680.644 L1709 680.644 L1708.44 680.644 L1707.88 680.644 L1707.32 680.644 L1706.77 680.644 L1706.21 680.644 L1705.65 680.644 L1705.09 680.644 L1704.53 680.644 L1703.97 680.644 L1703.41 680.644 L1702.85 680.644 L1702.29 680.644 L1701.73 680.644 L1701.17 680.644 L1700.61 680.644 L1700.05 680.644 L1699.5 680.644 L1698.94 680.644 L1698.38 680.644 L1697.82 680.644 L1697.26 680.644 L1696.7 680.644 L1696.14 680.644 L1695.58 680.644 L1695.02 680.644 L1694.46 680.644 L1693.9 680.644 L1693.34 680.644 L1692.78 680.644 L1692.23 680.644 L1691.67 680.644 L1691.11 680.644 L1690.55 680.644 L1689.99 680.644 L1689.43 680.644 L1688.87 680.644 L1688.31 680.644 L1687.75 680.644 L1687.19 680.644 L1686.63 680.644 L1686.07 680.644 L1685.51 680.644 L1684.95 680.644 L1684.4 680.644 L1683.84 680.644 L1683.28 680.644 L1682.72 680.644 L1682.16 680.644 L1681.6 680.644 L1681.04 680.644 L1680.48 680.644 L1679.92 680.644 L1679.36 680.644 L1678.8 680.644 L1678.24 680.644 L1677.68 680.644 L1677.13 680.644 L1676.57 680.644 L1676.01 680.644 L1675.45 680.644 L1674.89 680.644 L1674.33 680.644 L1673.77 680.644 L1673.21 680.644 L1672.65 680.644 L1672.09 680.644 L1671.53 680.644 L1670.97 680.644 L1670.41 680.644 L1669.85 680.644 L1669.3 680.644 L1668.74 680.644 L1668.18 680.644 L1667.62 680.644 L1667.06 680.644 L1666.5 680.644 L1665.94 680.644 L1665.38 680.644 L1664.82 680.644 L1664.26 680.644 L1663.7 680.644 L1663.14 680.644 L1662.58 680.644 L1662.03 680.644 L1661.47 680.644 L1660.91 680.644 L1660.35 680.644 L1659.79 680.644 L1659.23 680.644 L1658.67 680.644 L1658.11 680.644 L1657.55 680.644 L1656.99 680.644 L1656.43 680.644 L1655.87 680.644 L1655.31 680.644 L1654.76 680.644 L1654.2 680.644 L1653.64 680.644 L1653.08 680.644 L1652.52 680.644 L1651.96 680.644 L1651.4 680.644 L1650.84 680.644 L1650.28 680.644 L1649.72 680.644 L1649.16 680.644 L1648.6 680.644 L1648.04 680.644 L1647.48 680.644 L1646.93 680.644 L1646.37 680.644 L1645.81 680.644 L1645.25 680.644 L1644.69 680.644 L1644.13 680.644 L1643.57 680.644 L1643.01 680.644 L1642.45 680.644 L1641.89 680.644 L1641.33 680.644 L1640.77 680.644 L1640.21 680.644 L1639.66 680.644 L1639.1 680.644 L1638.54 680.644 L1637.98 680.644 L1637.42 680.644 L1636.86 680.644 L1636.3 680.644 L1635.74 680.644 L1635.18 680.644 L1634.62 680.644 L1634.06 680.644 L1633.5 680.644 L1632.94 680.644 L1632.39 680.644 L1631.83 680.644 L1631.27 680.644 L1630.71 680.644 L1630.15 680.644 L1629.59 680.644 L1629.03 680.644 L1628.47 680.644 L1627.91 680.644 L1627.35 680.644 L1626.79 680.644 L1626.23 680.644 L1625.67 680.644 L1625.11 680.644 L1624.56 680.644 L1624 680.644 L1623.44 680.644 L1622.88 680.644 L1622.32 680.644 L1621.76 680.644 L1621.2 680.644 L1620.64 680.644 L1620.08 680.644 L1619.52 680.644 L1618.96 680.644 L1618.4 680.644 L1617.84 680.644 L1617.29 680.644 L1616.73 680.644 L1616.17 680.644 L1615.61 680.644 L1615.05 680.644 L1614.49 680.644 L1613.93 680.644 L1613.37 680.644 L1612.81 680.644 L1612.25 680.644 L1611.69 680.644 L1611.13 680.644 L1610.57 680.644 L1610.02 680.644 L1609.46 680.644 L1608.9 680.644 L1608.34 680.644 L1607.78 680.644 L1607.22 680.644 L1606.66 680.644 L1606.1 680.644 L1605.54 680.644 L1604.98 680.644 L1604.42 680.644 L1603.86 680.644 L1603.3 680.644 L1602.74 680.644 L1602.19 680.644 L1601.63 680.644 L1601.07 680.644 L1600.51 680.644 L1599.95 680.644 L1599.39 680.644 L1598.83 680.644 L1598.27 680.644 L1597.71 680.644 L1597.15 680.644 L1596.59 680.644 L1596.03 680.644 L1595.47 680.644 L1594.92 680.644 L1594.36 680.644 L1593.8 680.644 L1593.24 680.644 L1592.68 680.644 L1592.12 680.644 L1591.56 680.644 L1591 680.644 L1590.44 680.644 L1589.88 680.644 L1589.32 680.644 L1588.76 680.644 L1588.2 680.644 L1587.65 680.644 L1587.09 680.644 L1586.53 680.644 L1585.97 680.644 L1585.41 680.644 L1584.85 680.644 L1584.29 680.644 L1583.73 680.644 L1583.17 680.644 L1582.61 680.644 L1582.05 680.644 L1581.49 680.644 L1580.93 680.644 L1580.37 680.644 L1579.82 680.644 L1579.26 680.644 L1578.7 680.644 L1578.14 680.644 L1577.58 680.644 L1577.02 680.644 L1576.46 680.644 L1575.9 680.644 L1575.34 680.644 L1574.78 680.644 L1574.22 680.644 L1573.66 680.644 L1573.1 680.644 L1572.55 680.644 L1571.99 680.644 L1571.43 680.644 L1570.87 680.644 L1570.31 680.644 L1569.75 680.644 L1569.19 680.644 L1568.63 680.644 L1568.07 680.644 L1567.51 680.644 L1566.95 680.644 L1566.39 680.644 L1565.83 680.644 L1565.28 680.644 L1564.72 680.644 L1564.16 680.644 L1563.6 680.644 L1563.04 680.644 L1562.48 680.644 L1561.92 680.644 L1561.36 680.644 L1560.8 680.644 L1560.24 680.644 L1559.68 680.644 L1559.12 680.644 L1558.56 680.644 L1558 680.644 L1557.45 680.644 L1556.89 680.644 L1556.33 680.644 L1555.77 680.644 L1555.21 680.644 L1554.65 680.644 L1554.09 680.644 L1553.53 680.644 L1552.97 680.644 L1552.41 680.644 L1551.85 680.644 L1551.29 680.644 L1550.73 680.644 L1550.18 680.644 L1549.62 680.644 L1549.06 680.644 L1548.5 680.644 L1547.94 680.644 L1547.38 680.644 L1546.82 680.644 L1546.26 680.644 L1545.7 680.644 L1545.14 680.644 L1544.58 680.644 L1544.02 680.644 L1543.46 680.644 L1542.9 680.644 L1542.35 680.644 L1541.79 680.644 L1541.23 680.644 L1540.67 680.644 L1540.11 680.644 L1539.55 680.644 L1538.99 680.644 L1538.43 680.644 L1537.87 680.644 L1537.31 680.644 L1536.75 680.644 L1536.19 680.644 L1535.63 680.644 L1535.08 680.644 L1534.52 680.644 L1533.96 680.644 L1533.4 680.644 L1532.84 680.644 L1532.28 680.644 L1531.72 680.644 L1531.16 680.644 L1530.6 680.644 L1530.04 680.644 L1529.48 680.644 L1528.92 680.644 L1528.36 680.644 L1527.81 680.644 L1527.25 680.644 L1526.69 680.644 L1526.13 680.644 L1525.57 680.644 L1525.01 680.644 L1524.45 680.644 L1523.89 680.644 L1523.33 680.644 L1522.77 680.644 L1522.21 680.644 L1521.65 680.644 L1521.09 680.644 L1520.53 680.644 L1519.98 680.644 L1519.42 680.644 L1518.86 680.644 L1518.3 680.644 L1517.74 680.644 L1517.18 680.644 L1516.62 680.644 L1516.06 680.644 L1515.5 680.644 L1514.94 680.644 L1514.38 680.644 L1513.82 680.644 L1513.26 680.644 L1512.71 680.644 L1512.15 680.644 L1511.59 680.644 L1511.03 680.644 L1510.47 680.644 L1509.91 680.644 L1509.35 680.644 L1508.79 680.644 L1508.23 680.644 L1507.67 680.644 L1507.11 680.644 L1506.55 680.644 L1505.99 680.644 L1505.44 680.644 L1504.88 680.644 L1504.32 680.644 L1503.76 680.644 L1503.2 680.644 L1502.64 680.644 L1502.08 680.644 L1501.52 680.644 L1500.96 680.644 L1500.4 680.644 L1499.84 680.644 L1499.28 680.644 L1498.72 680.644 L1498.16 680.644 L1497.61 680.644 L1497.05 680.644 L1496.49 680.644 L1495.93 680.644 L1495.37 680.644 L1494.81 680.644 L1494.25 680.644 L1493.69 680.644 L1493.13 680.644 L1492.57 680.644 L1492.01 680.644 L1491.45 680.644 L1490.89 680.644 L1490.34 680.644 L1489.78 680.644 L1489.22 680.644 L1488.66 680.644 L1488.1 680.644 L1487.54 680.644 L1486.98 680.644 L1486.42 680.644 L1485.86 680.644 L1485.3 680.644 L1484.74 680.644 L1484.18 680.644 L1483.62 680.644 L1483.07 680.644 L1482.51 680.644 L1481.95 680.644 L1481.39 680.644 L1480.83 680.644 L1480.27 680.644 L1479.71 680.644 L1479.15 680.644 L1478.59 680.644 L1478.03 680.644 L1477.47 680.644 L1476.91 680.644 L1476.35 680.644 L1475.79 680.644 L1475.24 680.644 L1474.68 680.644 L1474.12 680.644 L1473.56 680.644 L1473 680.644 L1472.44 680.644 L1471.88 680.644 L1471.32 680.644 L1470.76 680.644 L1470.2 680.644 L1469.64 680.644 L1469.08 680.644 L1468.52 680.644 L1467.97 680.644 L1467.41 680.644 L1466.85 680.644 L1466.29 680.644 L1465.73 680.644 L1465.17 680.644 L1464.61 680.644 L1464.05 680.644 L1463.49 680.644 L1462.93 680.644 L1462.37 680.644 L1461.81 680.644 L1461.25 680.644 L1460.7 680.644 L1460.14 680.644 L1459.58 680.644 L1459.02 680.644 L1458.46 680.644 L1457.9 680.644 L1457.34 680.644 L1456.78 680.644 L1456.22 680.644 L1455.66 680.644 L1455.1 680.644 L1454.54 680.644 L1453.98 680.644 L1453.42 680.644 L1452.87 680.644 L1452.31 680.644 L1451.75 680.644 L1451.19 680.644 L1450.63 680.644 L1450.07 680.644 L1449.51 680.644 L1448.95 680.644 L1448.39 680.644 L1447.83 680.644 L1447.27 680.644 L1446.71 680.644 L1446.15 680.644 L1445.6 680.644 L1445.04 680.644 L1444.48 680.644 L1443.92 680.644 L1443.36 680.644 L1442.8 680.644 L1442.24 680.644 L1441.68 680.644 L1441.12 680.644 L1440.56 680.644 L1440 680.644 L1439.44 680.644 L1438.88 680.644 L1438.33 680.644 L1437.77 680.644 L1437.21 680.644 L1436.65 680.644 L1436.09 680.644 L1435.53 680.644 L1434.97 680.644 L1434.41 680.644 L1433.85 680.644 L1433.29 680.644 L1432.73 680.644 L1432.17 680.644 L1431.61 680.644 L1431.05 680.644 L1430.5 680.644 L1429.94 680.644 L1429.38 680.644 L1428.82 680.644 L1428.26 680.644 L1427.7 680.644 L1427.14 680.644 L1426.58 680.644 L1426.02 680.644 L1425.46 680.644 L1424.9 680.644 L1424.34 680.644 L1423.78 680.644 L1423.23 680.644 L1422.67 680.644 L1422.11 680.644 L1421.55 680.644 L1420.99 680.644 L1420.43 680.644 L1419.87 680.644 L1419.31 680.644 L1418.75 680.644 L1418.19 680.644 L1417.63 680.644 L1417.07 680.644 L1416.51 680.644 L1415.95 680.644 L1415.4 680.644 L1414.84 680.644 L1414.28 680.644 L1413.72 680.644 L1413.16 680.644 L1412.6 680.644 L1412.04 680.644 L1411.48 680.644 L1410.92 680.644 L1410.36 680.644 L1409.8 680.644 L1409.24 680.644 L1408.68 680.644 L1408.13 680.644 L1407.57 680.644 L1407.01 680.644 L1406.45 680.644 L1405.89 680.644 L1405.33 680.644 L1404.77 680.644 L1404.21 680.644 L1403.65 680.644 L1403.09 680.644 L1402.53 680.644 L1401.97 680.644 L1401.41 680.644 L1400.86 680.644 L1400.3 680.644 L1399.74 680.644 L1399.18 680.644 L1398.62 680.644 L1398.06 680.644 L1397.5 680.644 L1396.94 680.644 L1396.38 680.644 L1395.82 680.644 L1395.26 680.644 L1394.7 680.644 L1394.14 680.644 L1393.58 680.644 L1393.03 680.644 L1392.47 680.644 L1391.91 680.644 L1391.35 680.644 L1390.79 680.644 L1390.23 680.644 L1389.67 680.644 L1389.11 680.644 L1388.55 680.644 L1387.99 680.644 L1387.43 680.644 L1386.87 680.644 L1386.31 680.644 L1385.76 680.644 L1385.2 680.644 L1384.64 680.644 L1384.08 680.644 L1383.52 680.644 L1382.96 680.644 L1382.4 680.644 L1381.84 680.644 L1381.28 680.644 L1380.72 680.644 L1380.16 680.644 L1379.6 680.644 L1379.04 680.644 L1378.49 680.644 L1377.93 680.644 L1377.37 680.644 L1376.81 680.644 L1376.25 680.644 L1375.69 680.644 L1375.13 680.644 L1374.57 680.644 L1374.01 680.644 L1373.45 680.644 L1372.89 680.644 L1372.33 680.644 L1371.77 680.644 L1371.21 680.644 L1370.66 680.644 L1370.1 680.644 L1369.54 680.644 L1368.98 680.644 L1368.42 680.644 L1367.86 680.644 L1367.3 680.644 L1366.74 680.644 L1366.18 680.644 L1365.62 680.644 L1365.06 680.644 L1364.5 680.644 L1363.94 680.644 L1363.39 680.644 L1362.83 680.644 L1362.27 680.644 L1361.71 680.644 L1361.15 680.644 L1360.59 680.644 L1360.03 680.644 L1359.47 680.644 L1358.91 680.644 L1358.35 680.644 L1357.79 680.644 L1357.23 680.644 L1356.67 680.644 L1356.12 680.644 L1355.56 680.644 L1355 680.644 L1354.44 680.644 L1353.88 680.644 L1353.32 680.644 L1352.76 680.644 L1352.2 680.644 L1351.64 680.644 L1351.08 680.644 L1350.52 680.644 L1349.96 680.644 L1349.4 680.644 L1348.84 680.644 L1348.29 680.644 L1347.73 680.644 L1347.17 680.644 L1346.61 680.644 L1346.05 680.644 L1345.49 680.644 L1344.93 680.644 L1344.37 680.644 L1343.81 680.644 L1343.25 680.644 L1342.69 680.644 L1342.13 680.644 L1341.57 680.644 L1341.02 680.644 L1340.46 680.644 L1339.9 680.644 L1339.34 680.644 L1338.78 680.644 L1338.22 680.644 L1337.66 680.644 L1337.1 680.644 L1336.54 680.644 L1335.98 680.644 L1335.42 680.644 L1334.86 680.644 L1334.3 680.644 L1333.75 680.644 L1333.19 680.644 L1332.63 680.644 L1332.07 680.644 L1331.51 680.644 L1330.95 680.644 L1330.39 680.644 L1329.83 680.644 L1329.27 680.644 L1328.71 680.644 L1328.15 680.644 L1327.59 680.644 L1327.03 680.644 L1326.47 680.644 L1325.92 680.644 L1325.36 680.644 L1324.8 680.644 L1324.24 680.644 L1323.68 680.644 L1323.12 680.644 L1322.56 680.644 L1322 680.644 L1321.44 680.644 L1320.88 680.644 L1320.32 680.644 L1319.76 680.644 L1319.2 680.644 L1318.65 680.644 L1318.09 680.644 L1317.53 680.644 L1316.97 680.644 L1316.41 680.644 L1315.85 680.644 L1315.29 680.644 L1314.73 680.644 L1314.17 680.644 L1313.61 680.644 L1313.05 680.644 L1312.49 680.644 L1311.93 680.644 L1311.38 680.644 L1310.82 680.644 L1310.26 680.644 L1309.7 680.644 L1309.14 680.644 L1308.58 680.644 L1308.02 680.644 L1307.46 680.644 L1306.9 680.644 L1306.34 680.644 L1305.78 680.644 L1305.22 680.644 L1304.66 680.644 L1304.1 680.644 L1303.55 680.644 L1302.99 680.644 L1302.43 680.644 L1301.87 680.644 L1301.31 680.644 L1300.75 680.644 L1300.19 680.644 L1299.63 680.644 L1299.07 680.644 L1298.51 680.644 L1297.95 680.644 L1297.39 680.644 L1296.83 680.644 L1296.28 680.644 L1295.72 680.644 L1295.16 680.644 L1294.6 680.644 L1294.04 680.644 L1293.48 680.644 L1292.92 680.644 L1292.36 680.644 L1291.8 680.644 L1291.24 680.644 L1290.68 680.644 L1290.12 680.644 L1289.56 680.644 L1289 680.644 L1288.45 680.644 L1287.89 680.644 L1287.33 680.644 L1286.77 680.644 L1286.21 680.644 L1285.65 680.644 L1285.09 680.644 L1284.53 680.644 L1283.97 680.644 L1283.41 680.644 L1282.85 680.644 L1282.29 680.644 L1281.73 680.644 L1281.18 680.644 L1280.62 680.644 L1280.06 680.644 L1279.5 680.644 L1278.94 680.644 L1278.38 680.644 L1277.82 680.644 L1277.26 680.644 L1276.7 680.644 L1276.14 680.644 L1275.58 680.644 L1275.02 680.644 L1274.46 680.644 L1273.91 680.644 L1273.35 680.644 L1272.79 680.644 L1272.23 680.644 L1271.67 680.644 L1271.11 680.644 L1270.55 680.644 L1269.99 680.644 L1269.43 680.644 L1268.87 680.644 L1268.31 680.644 L1267.75 680.644 L1267.19 680.644 L1266.63 680.644 L1266.08 680.644 L1265.52 680.644 L1264.96 680.644 L1264.4 680.644 L1263.84 680.644 L1263.28 680.644 L1262.72 680.644 L1262.16 680.644 L1261.6 680.644 L1261.04 680.644 L1260.48 680.644 L1259.92 680.644 L1259.36 680.644 L1258.81 680.644 L1258.25 680.644 L1257.69 680.644 L1257.13 680.644 L1256.57 680.644 L1256.01 680.644 L1255.45 680.644 L1254.89 680.644 L1254.33 680.644 L1253.77 680.644 L1253.21 680.644 L1252.65 680.644 L1252.09 680.644 L1251.54 680.644 L1250.98 680.644 L1250.42 680.644 L1249.86 680.644 L1249.3 680.644 L1248.74 680.644 L1248.18 680.644 L1247.62 680.644 L1247.06 680.644 L1246.5 680.644 L1245.94 680.644 L1245.38 680.644 L1244.82 680.644 L1244.26 680.644 L1243.71 680.644 L1243.15 680.644 L1242.59 680.644 L1242.03 680.644 L1241.47 680.644 L1240.91 680.644 L1240.35 680.644 L1239.79 680.644 L1239.23 680.644 L1238.67 680.644 L1238.11 680.644 L1237.55 680.644 L1236.99 680.644 L1236.44 680.644 L1235.88 680.644 L1235.32 680.644 L1234.76 680.644 L1234.2 680.644 L1233.64 680.644 L1233.08 680.644 L1232.52 680.644 L1231.96 680.644 L1231.4 680.644 L1230.84 680.644 L1230.28 680.644 L1229.72 680.644 L1229.17 680.644 L1228.61 680.644 L1228.05 680.644 L1227.49 680.644 L1226.93 680.644 L1226.37 680.644 L1225.81 680.644 L1225.25 680.644 L1224.69 680.644 L1224.13 680.644 L1223.57 680.644 L1223.01 680.644 L1222.45 680.644 L1221.89 680.644 L1221.34 680.644 L1220.78 680.644 L1220.22 680.644 L1219.66 680.644 L1219.1 680.644 L1218.54 680.644 L1217.98 680.644 L1217.42 680.644 L1216.86 680.644 L1216.3 680.644 L1215.74 680.644 L1215.18 680.644 L1214.62 680.644 L1214.07 680.644 L1213.51 680.644 L1212.95 680.644 L1212.39 680.644 L1211.83 680.644 L1211.27 680.644 L1210.71 680.644 L1210.15 680.644 L1209.59 680.644 L1209.03 680.644 L1208.47 680.644 L1207.91 680.644 L1207.35 680.644 L1206.8 680.644 L1206.24 680.644 L1205.68 680.644 L1205.12 680.644 L1204.56 680.644 L1204 680.644 L1203.44 680.644 L1202.88 680.644 L1202.32 680.644 L1201.76 680.644 L1201.2 680.644 L1200.64 680.644 L1200.08 680.644 L1199.52 680.644 L1198.97 680.644 L1198.41 680.644 L1197.85 680.644 L1197.29 680.644 L1196.73 680.644 L1196.17 680.644 L1195.61 680.644 L1195.05 680.644 L1194.49 680.644 L1193.93 680.644 L1193.37 680.644 L1192.81 680.644 L1192.25 680.644 L1191.7 680.644 L1191.14 680.644 L1190.58 680.644 L1190.02 680.644 L1189.46 680.644 L1188.9 680.644 L1188.34 680.644 L1187.78 680.644 L1187.22 680.644 L1186.66 680.644 L1186.1 680.644 L1185.54 680.644 L1184.98 680.644 L1184.43 680.644 L1183.87 680.644 L1183.31 680.644 L1182.75 680.644 L1182.19 680.644 L1181.63 680.644 L1181.07 680.644 L1180.51 680.644 L1179.95 680.644 L1179.39 680.644 L1178.83 680.644 L1178.27 680.644 L1177.71 680.644 L1177.15 680.644 L1176.6 680.644 L1176.04 680.644 L1175.48 680.644 L1174.92 680.644 L1174.36 680.644 L1173.8 680.644 L1173.24 680.644 L1172.68 680.644 L1172.12 680.644 L1171.56 680.644 L1171 680.644 L1170.44 680.644 L1169.88 680.644 L1169.33 680.644 L1168.77 680.644 L1168.21 680.644 L1167.65 680.644 L1167.09 680.644 L1166.53 680.644 L1165.97 680.644 L1165.41 680.644 L1164.85 680.644 L1164.29 680.644 L1163.73 680.644 L1163.17 680.644 L1162.61 680.644 L1162.05 680.644 L1161.5 680.644 L1160.94 680.644 L1160.38 680.644 L1159.82 680.644 L1159.26 680.644 L1158.7 680.644 L1158.14 680.644 L1157.58 680.644 L1157.02 680.644 L1156.46 680.644 L1155.9 680.644 L1155.34 680.644 L1154.78 680.644 L1154.23 680.644 L1153.67 680.644 L1153.11 680.644 L1152.55 680.644 L1151.99 680.644 L1151.43 680.644 L1150.87 680.644 L1150.31 680.644 L1149.75 680.644 L1149.19 680.644 L1148.63 680.644 L1148.07 680.644 L1147.51 680.644 L1146.96 680.644 L1146.4 680.644 L1145.84 680.644 L1145.28 680.644 L1144.72 680.644 L1144.16 680.644 L1143.6 680.644 L1143.04 680.644 L1142.48 680.644 L1141.92 680.644 L1141.36 680.644 L1140.8 680.644 L1140.24 680.644 L1139.68 680.644 L1139.13 680.644 L1138.57 680.644 L1138.01 680.644 L1137.45 680.644 L1136.89 680.644 L1136.33 680.644 L1135.77 680.644 L1135.21 680.644 L1134.65 680.644 L1134.09 680.644 L1133.53 680.644 L1132.97 680.644 L1132.41 680.644 L1131.86 680.644 L1131.3 680.644 L1130.74 680.644 L1130.18 680.644 L1129.62 680.644 L1129.06 680.644 L1128.5 680.644 L1127.94 680.644 L1127.38 680.644 L1126.82 680.644 L1126.26 680.644 L1125.7 680.644 L1125.14 680.644 L1124.59 680.644 L1124.03 680.644 L1123.47 680.644 L1122.91 680.644 L1122.35 680.644 L1121.79 680.644 L1121.23 680.644 L1120.67 680.644 L1120.11 680.644 L1119.55 680.644 L1118.99 680.644 L1118.43 680.644 L1117.87 680.644 L1117.31 680.644 L1116.76 680.644 L1116.2 680.644 L1115.64 680.644 L1115.08 680.644 L1114.52 680.644 L1113.96 680.644 L1113.4 680.644 L1112.84 680.644 L1112.28 680.644 L1111.72 680.644 L1111.16 680.644 L1110.6 680.644 L1110.04 680.644 L1109.49 680.644 L1108.93 680.644 L1108.37 680.644 L1107.81 680.644 L1107.25 680.644 L1106.69 680.644 L1106.13 680.644 L1105.57 680.644 L1105.01 680.644 L1104.45 680.644 L1103.89 680.644 L1103.33 680.644 L1102.77 680.644 L1102.22 680.644 L1101.66 680.644 L1101.1 680.644 L1100.54 680.644 L1099.98 680.644 L1099.42 680.644 L1098.86 680.644 L1098.3 680.644 L1097.74 680.644 L1097.18 680.644 L1096.62 680.644 L1096.06 680.644 L1095.5 680.644 L1094.94 680.644 L1094.39 680.644 L1093.83 680.644 L1093.27 680.644 L1092.71 680.644 L1092.15 680.644 L1091.59 680.644 L1091.03 680.644 L1090.47 680.644 L1089.91 680.644 L1089.35 680.644 L1088.79 680.644 L1088.23 680.644 L1087.67 680.644 L1087.12 680.644 L1086.56 680.644 L1086 680.644 L1085.44 680.644 L1084.88 680.644 L1084.32 680.644 L1083.76 680.644 L1083.2 680.644 L1082.64 680.644 L1082.08 680.644 L1081.52 680.644 L1080.96 680.644 L1080.4 680.644 L1079.85 680.644 L1079.29 680.644 L1078.73 680.644 L1078.17 680.644 L1077.61 680.644 L1077.05 680.644 L1076.49 680.644 L1075.93 680.644 L1075.37 680.644 L1074.81 680.644 L1074.25 680.644 L1073.69 680.644 L1073.13 680.644 L1072.57 680.644 L1072.02 680.644 L1071.46 680.644 L1070.9 680.644 L1070.34 680.644 L1069.78 680.644 L1069.22 680.644 L1068.66 680.644 L1068.1 680.644 L1067.54 680.644 L1066.98 680.644 L1066.42 680.644 L1065.86 680.644 L1065.3 680.644 L1064.75 680.644 L1064.19 680.644 L1063.63 680.644 L1063.07 680.644 L1062.51 680.644 L1061.95 680.644 L1061.39 680.644 L1060.83 680.644 L1060.27 680.644 L1059.71 680.644 L1059.15 680.644 L1058.59 680.644 L1058.03 680.644 L1057.48 680.644 L1056.92 680.644 L1056.36 680.644 L1055.8 680.644 L1055.24 680.644 L1054.68 680.644 L1054.12 680.644 L1053.56 680.644 L1053 680.644 L1052.44 680.644 L1051.88 680.644 L1051.32 680.644 L1050.76 680.644 L1050.2 680.644 L1049.65 680.644 L1049.09 680.644 L1048.53 680.644 L1047.97 680.644 L1047.41 680.644 L1046.85 680.644 L1046.29 680.644 L1045.73 680.644 L1045.17 680.644 L1044.61 680.644 L1044.05 680.644 L1043.49 680.644 L1042.93 680.644 L1042.38 680.644 L1041.82 680.644 L1041.26 680.644 L1040.7 680.644 L1040.14 680.644 L1039.58 680.644 L1039.02 680.644 L1038.46 680.644 L1037.9 680.644 L1037.34 680.644 L1036.78 680.644 L1036.22 680.644 L1035.66 680.644 L1035.1 680.644 L1034.55 680.644 L1033.99 680.644 L1033.43 680.644 L1032.87 680.644 L1032.31 680.644 L1031.75 680.644 L1031.19 680.644 L1030.63 680.644 L1030.07 680.644 L1029.51 680.644 L1028.95 680.644 L1028.39 680.644 L1027.83 680.644 L1027.28 680.644 L1026.72 680.644 L1026.16 680.644 L1025.6 680.644 L1025.04 680.644 L1024.48 680.644 L1023.92 680.644 L1023.36 680.644 L1022.8 680.644 L1022.24 680.644 L1021.68 680.644 L1021.12 680.644 L1020.56 680.644 L1020.01 680.644 L1019.45 680.644 L1018.89 680.644 L1018.33 680.644 L1017.77 680.644 L1017.21 680.644 L1016.65 680.644 L1016.09 680.644 L1015.53 680.644 L1014.97 680.644 L1014.41 680.644 L1013.85 680.644 L1013.29 680.644 L1012.73 680.644 L1012.18 680.644 L1011.62 680.644 L1011.06 680.644 L1010.5 680.644 L1009.94 680.644 L1009.38 680.644 L1008.82 680.644 L1008.26 680.644 L1007.7 680.644 L1007.14 680.644 L1006.58 680.644 L1006.02 680.644 L1005.46 680.644 L1004.91 680.644 L1004.35 680.644 L1003.79 680.644 L1003.23 680.644 L1002.67 680.644 L1002.11 680.644 L1001.55 680.644 L1000.99 680.644 L1000.43 680.644 L999.872 680.644 L999.313 680.644 L998.754 680.644 L998.194 680.644 L997.635 680.644 L997.076 680.644 L996.517 680.644 L995.957 680.644 L995.398 680.644 L994.839 680.644 L994.28 680.644 L993.72 680.644 L993.161 680.644 L992.602 680.644 L992.043 680.644 L991.483 680.644 L990.924 680.644 L990.365 680.644 L989.806 680.644 L989.246 680.644 L988.687 680.644 L988.128 680.644 L987.569 680.644 L987.009 680.644 L986.45 680.644 L985.891 680.644 L985.332 680.644 L984.772 680.644 L984.213 680.644 L983.654 680.644 L983.095 680.644 L982.535 680.644 L981.976 680.644 L981.417 680.644 L980.858 680.644 L980.298 680.644 L979.739 680.644 L979.18 680.644 L978.621 680.644 L978.061 680.644 L977.502 680.644 L976.943 680.644 L976.384 680.644 L975.824 680.644 L975.265 680.644 L974.706 680.644 L974.147 680.644 L973.587 680.644 L973.028 680.644 L972.469 680.644 L971.91 680.644 L971.35 680.644 L970.791 680.644 L970.232 680.644 L969.673 680.644 L969.113 680.644 L968.554 680.644 L967.995 680.644 L967.436 680.644 L966.876 680.644 L966.317 680.644 L965.758 680.644 L965.199 680.644 L964.639 680.644 L964.08 680.644 L963.521 680.644 L962.962 680.644 L962.402 680.644 L961.843 680.644 L961.284 680.644 L960.725 680.644 L960.165 680.644 L959.606 680.644 L959.047 680.644 L958.488 680.644 L957.928 680.644 L957.369 680.644 L956.81 680.644 L956.251 680.644 L955.691 680.644 L955.132 680.644 L954.573 680.644 L954.014 680.644 L953.454 680.644 L952.895 680.644 L952.336 680.644 L951.777 680.644 L951.217 680.644 L950.658 680.644 L950.099 680.644 L949.54 680.644 L948.98 680.644 L948.421 680.644 L947.862 680.644 L947.303 680.644 L946.743 680.644 L946.184 680.644 L945.625 680.644 L945.066 680.644 L944.506 680.644 L943.947 680.644 L943.388 680.644 L942.829 680.644 L942.269 680.644 L941.71 680.644 L941.151 680.644 L940.592 680.644 L940.032 680.644 L939.473 680.644 L938.914 680.644 L938.355 680.644 L937.795 680.644 L937.236 680.644 L936.677 680.644 L936.118 680.644 L935.558 680.644 L934.999 680.644 L934.44 680.644 L933.881 680.644 L933.321 680.644 L932.762 680.644 L932.203 680.644 L931.644 680.644 L931.084 680.644 L930.525 680.644 L929.966 680.644 L929.406 680.644 L928.847 680.644 L928.288 680.644 L927.729 680.644 L927.169 680.644 L926.61 680.644 L926.051 680.644 L925.492 680.644 L924.932 680.644 L924.373 680.644 L923.814 680.644 L923.255 680.644 L922.695 680.644 L922.136 680.644 L921.577 680.644 L921.018 680.644 L920.458 680.644 L919.899 680.644 L919.34 680.644 L918.781 680.644 L918.221 680.644 L917.662 680.644 L917.103 680.644 L916.544 680.644 L915.984 680.644 L915.425 680.644 L914.866 680.644 L914.307 680.644 L913.747 680.644 L913.188 680.644 L912.629 680.644 L912.07 680.644 L911.51 680.644 L910.951 680.644 L910.392 680.644 L909.833 680.644 L909.273 680.644 L908.714 680.644 L908.155 680.644 L907.596 680.644 L907.036 680.644 L906.477 680.644 L905.918 680.644 L905.359 680.644 L904.799 680.644 L904.24 680.644 L903.681 680.644 L903.122 680.644 L902.562 680.644 L902.003 680.644 L901.444 680.644 L900.885 680.644 L900.325 680.644 L899.766 680.644 L899.207 680.644 L898.648 680.644 L898.088 680.644 L897.529 680.644 L896.97 680.644 L896.411 680.644 L895.851 680.644 L895.292 680.644 L894.733 680.644 L894.174 680.644 L893.614 680.644 L893.055 680.644 L892.496 680.644 L891.937 680.644 L891.377 680.644 L890.818 680.644 L890.259 680.644 L889.7 680.644 L889.14 680.644 L888.581 680.644 L888.022 680.644 L887.463 680.644 L886.903 680.644 L886.344 680.644 L885.785 680.644 L885.226 680.644 L884.666 680.644 L884.107 680.644 L883.548 680.644 L882.989 680.644 L882.429 680.644 L881.87 680.644 L881.311 680.644 L880.752 680.644 L880.192 680.644 L879.633 680.644 L879.074 680.644 L878.515 680.644 L877.955 680.644 L877.396 680.644 L876.837 680.644 L876.278 680.644 L875.718 680.644 L875.159 680.644 L874.6 680.644 L874.041 680.644 L873.481 680.644 L872.922 680.644 L872.363 680.644 L871.804 680.644 L871.244 680.644 L870.685 680.644 L870.126 680.644 L869.567 680.644 L869.007 680.644 L868.448 680.644 L867.889 680.644 L867.33 680.644 L866.77 680.644 L866.211 680.644 L865.652 680.644 L865.093 680.644 L864.533 680.644 L863.974 680.644 L863.415 680.644 L862.856 680.644 L862.296 680.644 L861.737 680.644 L861.178 680.644 L860.619 680.644 L860.059 680.644 L859.5 680.644 L858.941 680.644 L858.382 680.644 L857.822 680.644 L857.263 680.644 L856.704 680.644 L856.145 680.644 L855.585 680.644 L855.026 680.644 L854.467 680.644 L853.908 680.644 L853.348 680.644 L852.789 680.644 L852.23 680.644 L851.671 680.644 L851.111 680.644 L850.552 680.644 L849.993 680.644 L849.434 680.644 L848.874 680.644 L848.315 680.644 L847.756 680.644 L847.197 680.644 L846.637 680.644 L846.078 680.644 L845.519 680.644 L844.96 680.644 L844.4 680.644 L843.841 680.644 L843.282 680.644 L842.723 680.644 L842.163 680.644 L841.604 680.644 L841.045 680.644 L840.486 680.644 L839.926 680.644 L839.367 680.644 L838.808 680.644 L838.249 680.644 L837.689 680.644 L837.13 680.644 L836.571 680.644 L836.012 680.644 L835.452 680.644 L834.893 680.644 L834.334 680.644 L833.775 680.644 L833.215 680.644 L832.656 680.644 L832.097 680.644 L831.538 680.644 L830.978 680.644 L830.419 680.644 L829.86 680.644 L829.301 680.644 L828.741 680.644 L828.182 680.644 L827.623 680.644 L827.064 680.644 L826.504 680.644 L825.945 680.644 L825.386 680.644 L824.827 680.644 L824.267 680.644 L823.708 680.644 L823.149 680.644 L822.59 680.644 L822.03 680.644 L821.471 680.644 L820.912 680.644 L820.353 680.644 L819.793 680.644 L819.234 680.644 L818.675 680.644 L818.116 680.644 L817.556 680.644 L816.997 680.644 L816.438 680.644 L815.879 680.644 L815.319 680.644 L814.76 680.644 L814.201 680.644 L813.642 680.644 L813.082 680.644 L812.523 680.644 L811.964 680.644 L811.405 680.644 L810.845 680.644 L810.286 680.644 L809.727 680.644 L809.168 680.644 L808.608 680.644 L808.049 680.644 L807.49 680.644 L806.931 680.644 L806.371 680.644 L805.812 680.644 L805.253 680.644 L804.693 680.644 L804.134 680.644 L803.575 680.644 L803.016 680.644 L802.456 680.644 L801.897 680.644 L801.338 680.644 L800.779 680.644 L800.219 680.644 L799.66 680.644 L799.101 680.644 L798.542 680.644 L797.982 680.644 L797.423 680.644 L796.864 680.644 L796.305 680.644 L795.745 680.644 L795.186 680.644 L794.627 680.644 L794.068 680.644 L793.508 680.644 L792.949 680.644 L792.39 680.644 L791.831 680.644 L791.271 680.644 L790.712 680.644 L790.153 680.644 L789.594 680.644 L789.034 680.644 L788.475 680.644 L787.916 680.644 L787.357 680.644 L786.797 680.644 L786.238 680.644 L785.679 680.644 L785.12 680.644 L784.56 680.644 L784.001 680.644 L783.442 680.644 L782.883 680.644 L782.323 680.644 L781.764 680.644 L781.205 680.644 L780.646 680.644 L780.086 680.644 L779.527 680.644 L778.968 680.644 L778.409 680.644 L777.849 680.644 L777.29 680.644 L776.731 680.644 L776.172 680.644 L775.612 680.644 L775.053 680.644 L774.494 680.644 L773.935 680.644 L773.375 680.644 L772.816 680.644 L772.257 680.644 L771.698 680.644 L771.138 680.644 L770.579 680.644 L770.02 680.644 L769.461 680.644 L768.901 680.644 L768.342 680.644 L767.783 680.644 L767.224 680.644 L766.664 680.644 L766.105 680.644 L765.546 680.644 L764.987 680.644 L764.427 680.644 L763.868 680.644 L763.309 680.644 L762.75 680.644 L762.19 680.644 L761.631 680.644 L761.072 680.644 L760.513 680.644 L759.953 680.644 L759.394 680.644 L758.835 680.644 L758.276 680.644 L757.716 680.644 L757.157 680.644 L756.598 680.644 L756.039 680.644 L755.479 680.644 L754.92 680.644 L754.361 680.644 L753.802 680.644 L753.242 680.644 L752.683 680.644 L752.124 680.644 L751.565 680.644 L751.005 680.644 L750.446 680.644 L749.887 680.644 L749.328 680.644 L748.768 680.644 L748.209 680.644 L747.65 680.644 L747.091 680.644 L746.531 680.644 L745.972 680.644 L745.413 680.644 L744.854 680.644 L744.294 680.644 L743.735 680.644 L743.176 680.644 L742.617 680.644 L742.057 680.644 L741.498 680.644 L740.939 680.644 L740.38 680.644 L739.82 680.644 L739.261 680.644 L738.702 680.644 L738.143 680.644 L737.583 680.644 L737.024 680.644 L736.465 680.644 L735.906 680.644 L735.346 680.644 L734.787 680.644 L734.228 680.644 L733.669 680.644 L733.109 680.644 L732.55 680.644 L731.991 680.644 L731.432 680.644 L730.872 680.644 L730.313 680.644 L729.754 680.644 L729.195 680.644 L728.635 680.644 L728.076 680.644 L727.517 680.644 L726.958 680.644 L726.398 680.644 L725.839 680.644 L725.28 680.644 L724.721 680.644 L724.161 680.644 L723.602 680.644 L723.043 680.644 L722.484 680.644 L721.924 680.644 L721.365 680.644 L720.806 680.644 L720.247 680.644  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.73 720.806,685.73 721.365,685.73 721.924,685.73 722.484,685.73 723.043,685.73 723.602,685.73 724.161,685.73 724.721,685.73 725.28,685.73 725.839,685.73 726.398,685.73 726.958,685.73 727.517,685.73 728.076,685.73 728.635,685.73 729.195,685.73 729.754,685.73 730.313,685.73 730.872,685.73 731.432,685.73 731.991,685.73 732.55,685.73 733.109,685.73 733.669,685.73 734.228,685.73 734.787,685.73 735.346,685.73 735.906,685.73 736.465,685.73 737.024,685.73 737.583,685.73 738.143,685.73 738.702,685.73 739.261,685.73 739.82,685.73 740.38,685.73 740.939,685.73 741.498,685.73 742.057,685.73 742.617,685.73 743.176,685.73 743.735,685.73 744.294,685.73 744.854,685.73 745.413,685.73 745.972,685.73 746.531,685.73 747.091,685.73 747.65,685.73 748.209,685.73 748.768,685.73 749.328,685.73 749.887,685.73 750.446,685.73 751.005,685.73 751.565,685.73 752.124,685.73 752.683,685.73 753.242,685.73 753.802,685.73 754.361,685.73 754.92,685.73 755.479,685.73 756.039,685.73 756.598,685.73 757.157,685.73 757.716,685.73 758.276,685.73 758.835,685.73 759.394,685.73 759.953,685.73 760.513,685.73 761.072,685.73 761.631,685.73 762.19,685.73 762.75,685.73 763.309,685.73 763.868,685.73 764.427,685.73 764.987,685.73 765.546,685.73 766.105,685.73 766.664,685.73 767.224,685.73 767.783,685.73 768.342,685.73 768.901,685.73 769.461,685.73 770.02,685.73 770.579,685.73 771.138,685.73 771.698,685.73 772.257,685.73 772.816,685.73 773.375,685.73 773.935,685.73 774.494,685.73 775.053,685.73 775.612,685.73 776.172,685.73 776.731,685.73 777.29,685.73 777.849,685.73 778.409,685.73 778.968,685.73 779.527,685.73 780.086,685.73 780.646,685.73 781.205,685.73 781.764,685.73 782.323,685.73 782.883,685.73 783.442,685.73 784.001,685.73 784.56,685.73 785.12,685.73 785.679,685.73 786.238,685.73 786.797,685.73 787.357,685.73 787.916,685.73 788.475,685.73 789.034,685.73 789.594,685.73 790.153,685.73 790.712,685.73 791.271,685.73 791.831,685.73 792.39,685.73 792.949,685.73 793.508,685.73 794.068,685.73 794.627,685.73 795.186,685.73 795.745,685.73 796.305,685.73 796.864,685.73 797.423,685.73 797.982,685.73 798.542,685.73 799.101,685.73 799.66,685.73 800.219,685.73 800.779,685.73 801.338,685.73 801.897,685.73 802.456,685.73 803.016,685.73 803.575,685.73 804.134,685.73 804.693,685.73 805.253,685.73 805.812,685.73 806.371,685.73 806.931,685.73 807.49,685.73 808.049,685.73 808.608,685.73 809.168,685.73 809.727,685.73 810.286,685.73 810.845,685.73 811.405,685.73 811.964,685.73 812.523,685.73 813.082,685.73 813.642,685.73 814.201,685.73 814.76,685.73 815.319,685.73 815.879,685.73 816.438,685.73 816.997,685.73 817.556,685.73 818.116,685.73 818.675,685.73 819.234,685.73 819.793,685.73 820.353,685.73 820.912,685.73 821.471,685.73 822.03,685.73 822.59,685.73 823.149,685.73 823.708,685.73 824.267,685.73 824.827,685.73 825.386,685.73 825.945,685.73 826.504,685.73 827.064,685.73 827.623,685.73 828.182,685.73 828.741,685.73 829.301,685.73 829.86,685.73 830.419,685.73 830.978,685.73 831.538,685.73 832.097,685.73 832.656,685.73 833.215,685.73 833.775,685.73 834.334,685.73 834.893,685.73 835.452,685.73 836.012,685.73 836.571,685.73 837.13,685.73 837.689,685.73 838.249,685.73 838.808,685.73 839.367,685.73 839.926,685.73 840.486,685.73 841.045,685.73 841.604,685.73 842.163,685.73 842.723,685.73 843.282,685.73 843.841,685.73 844.4,685.73 844.96,685.73 845.519,685.73 846.078,685.73 846.637,685.73 847.197,685.73 847.756,685.73 848.315,685.73 848.874,685.73 849.434,685.73 849.993,685.73 850.552,685.73 851.111,685.73 851.671,685.73 852.23,685.73 852.789,685.73 853.348,685.73 853.908,685.73 854.467,685.73 855.026,685.73 855.585,685.73 856.145,685.73 856.704,685.73 857.263,685.73 857.822,685.73 858.382,685.73 858.941,685.73 859.5,685.73 860.059,685.73 860.619,685.73 861.178,685.73 861.737,685.73 862.296,685.73 862.856,685.73 863.415,685.73 863.974,685.73 864.533,685.73 865.093,685.73 865.652,685.73 866.211,685.73 866.77,685.73 867.33,685.73 867.889,685.73 868.448,685.73 869.007,685.73 869.567,685.73 870.126,685.73 870.685,685.73 871.244,685.73 871.804,685.73 872.363,685.73 872.922,685.73 873.481,685.73 874.041,685.73 874.6,685.73 875.159,685.73 875.718,685.73 876.278,685.73 876.837,685.73 877.396,685.73 877.955,685.73 878.515,685.73 879.074,685.73 879.633,685.73 880.192,685.73 880.752,685.73 881.311,685.73 881.87,685.73 882.429,685.73 882.989,685.73 883.548,685.73 884.107,685.73 884.666,685.73 885.226,685.73 885.785,685.73 886.344,685.73 886.903,685.73 887.463,685.73 888.022,685.73 888.581,685.73 889.14,685.73 889.7,685.73 890.259,685.73 890.818,685.73 891.377,685.73 891.937,685.73 892.496,685.73 893.055,685.73 893.614,685.73 894.174,685.73 894.733,685.73 895.292,685.73 895.851,685.73 896.411,685.73 896.97,685.73 897.529,685.73 898.088,685.73 898.648,685.73 899.207,685.73 899.766,685.73 900.325,685.73 900.885,685.73 901.444,685.73 902.003,685.73 902.562,685.73 903.122,685.73 903.681,685.73 904.24,685.73 904.799,685.73 905.359,685.73 905.918,685.73 906.477,685.73 907.036,685.73 907.596,685.73 908.155,685.73 908.714,685.73 909.273,685.73 909.833,685.73 910.392,685.73 910.951,685.73 911.51,685.73 912.07,685.73 912.629,685.73 913.188,685.73 913.747,685.73 914.307,685.73 914.866,685.73 915.425,685.73 915.984,685.73 916.544,685.73 917.103,685.73 917.662,685.73 918.221,685.73 918.781,685.73 919.34,685.73 919.899,685.73 920.458,685.73 921.018,685.73 921.577,685.73 922.136,685.73 922.695,685.73 923.255,685.73 923.814,685.73 924.373,685.73 924.932,685.73 925.492,685.73 926.051,685.73 926.61,685.73 927.169,685.73 927.729,685.73 928.288,685.73 928.847,685.73 929.406,685.73 929.966,685.73 930.525,685.73 931.084,685.73 931.644,685.73 932.203,685.73 932.762,685.73 933.321,685.73 933.881,685.73 934.44,685.73 934.999,685.73 935.558,685.73 936.118,685.73 936.677,685.73 937.236,685.73 937.795,685.73 938.355,685.73 938.914,685.73 939.473,685.73 940.032,685.73 940.592,685.73 941.151,685.73 941.71,685.73 942.269,685.73 942.829,685.73 943.388,685.73 943.947,685.73 944.506,685.73 945.066,685.73 945.625,685.73 946.184,685.73 946.743,685.73 947.303,685.73 947.862,685.73 948.421,685.73 948.98,685.73 949.54,685.73 950.099,685.73 950.658,685.73 951.217,685.73 951.777,685.73 952.336,685.73 952.895,685.73 953.454,685.73 954.014,685.73 954.573,685.73 955.132,685.73 955.691,685.73 956.251,685.73 956.81,685.73 957.369,685.73 957.928,685.73 958.488,685.73 959.047,685.73 959.606,685.73 960.165,685.73 960.725,685.73 961.284,685.73 961.843,685.73 962.402,685.73 962.962,685.73 963.521,685.73 964.08,685.73 964.639,685.73 965.199,685.73 965.758,685.73 966.317,685.73 966.876,685.73 967.436,685.73 967.995,685.73 968.554,685.73 969.113,685.73 969.673,685.73 970.232,685.73 970.791,685.73 971.35,685.73 971.91,685.73 972.469,685.73 973.028,685.73 973.587,685.73 974.147,685.73 974.706,685.73 975.265,685.73 975.824,685.73 976.384,685.73 976.943,685.73 977.502,685.73 978.061,685.73 978.621,685.73 979.18,685.73 979.739,685.73 980.298,685.73 980.858,685.73 981.417,685.73 981.976,685.73 982.535,685.73 983.095,685.73 983.654,685.73 984.213,685.73 984.772,685.73 985.332,685.73 985.891,685.73 986.45,685.73 987.009,685.73 987.569,685.73 988.128,685.73 988.687,685.73 989.246,685.73 989.806,685.73 990.365,685.73 990.924,685.73 991.483,685.73 992.043,685.73 992.602,685.73 993.161,685.73 993.72,685.73 994.28,685.73 994.839,685.73 995.398,685.73 995.957,685.73 996.517,685.73 997.076,685.73 997.635,685.73 998.194,685.73 998.754,685.73 999.313,685.73 999.872,685.73 1000.43,685.73 1000.99,685.73 1001.55,685.73 1002.11,685.73 1002.67,685.73 1003.23,685.73 1003.79,685.73 1004.35,685.73 1004.91,685.73 1005.46,685.73 1006.02,685.73 1006.58,685.73 1007.14,685.73 1007.7,685.73 1008.26,685.73 1008.82,685.73 1009.38,685.73 1009.94,685.73 1010.5,685.73 1011.06,685.73 1011.62,685.73 1012.18,685.73 1012.73,685.73 1013.29,685.73 1013.85,685.73 1014.41,685.73 1014.97,685.73 1015.53,685.73 1016.09,685.73 1016.65,685.73 1017.21,685.73 1017.77,685.73 1018.33,685.73 1018.89,685.73 1019.45,685.73 1020.01,685.73 1020.56,685.73 1021.12,685.73 1021.68,685.73 1022.24,685.73 1022.8,685.73 1023.36,685.73 1023.92,685.73 1024.48,685.73 1025.04,685.73 1025.6,685.73 1026.16,685.73 1026.72,685.73 1027.28,685.73 1027.83,685.73 1028.39,685.73 1028.95,685.73 1029.51,685.73 1030.07,685.73 1030.63,685.73 1031.19,685.73 1031.75,685.73 1032.31,685.73 1032.87,685.73 1033.43,685.73 1033.99,685.73 1034.55,685.73 1035.1,685.73 1035.66,685.73 1036.22,685.73 1036.78,685.73 1037.34,685.73 1037.9,685.73 1038.46,685.73 1039.02,685.73 1039.58,685.73 1040.14,685.73 1040.7,685.73 1041.26,685.73 1041.82,685.73 1042.38,685.73 1042.93,685.73 1043.49,685.73 1044.05,685.73 1044.61,685.73 1045.17,685.73 1045.73,685.73 1046.29,685.73 1046.85,685.73 1047.41,685.73 1047.97,685.73 1048.53,685.73 1049.09,685.73 1049.65,685.73 1050.2,685.73 1050.76,685.73 1051.32,685.73 1051.88,685.73 1052.44,685.73 1053,685.73 1053.56,685.73 1054.12,685.73 1054.68,685.73 1055.24,685.73 1055.8,685.73 1056.36,685.73 1056.92,685.73 1057.48,685.73 1058.03,685.73 1058.59,685.73 1059.15,685.73 1059.71,685.73 1060.27,685.73 1060.83,685.73 1061.39,685.73 1061.95,685.73 1062.51,685.73 1063.07,685.73 1063.63,685.73 1064.19,685.73 1064.75,685.73 1065.3,685.73 1065.86,685.73 1066.42,685.73 1066.98,685.73 1067.54,685.73 1068.1,685.73 1068.66,685.73 1069.22,685.73 1069.78,685.73 1070.34,685.73 1070.9,685.73 1071.46,685.73 1072.02,685.73 1072.57,685.73 1073.13,685.73 1073.69,685.73 1074.25,685.73 1074.81,685.73 1075.37,685.73 1075.93,685.73 1076.49,685.73 1077.05,685.73 1077.61,685.73 1078.17,685.73 1078.73,685.73 1079.29,685.73 1079.85,685.73 1080.4,685.73 1080.96,685.73 1081.52,685.73 1082.08,685.73 1082.64,685.73 1083.2,685.73 1083.76,685.73 1084.32,685.73 1084.88,685.73 1085.44,685.73 1086,685.73 1086.56,685.73 1087.12,685.73 1087.67,685.73 1088.23,685.73 1088.79,685.73 1089.35,685.73 1089.91,685.73 1090.47,685.73 1091.03,685.73 1091.59,685.73 1092.15,685.73 1092.71,685.73 1093.27,685.73 1093.83,685.73 1094.39,685.73 1094.94,685.73 1095.5,685.73 1096.06,685.73 1096.62,685.73 1097.18,685.73 1097.74,685.73 1098.3,685.73 1098.86,685.73 1099.42,685.73 1099.98,685.73 1100.54,685.73 1101.1,685.73 1101.66,685.73 1102.22,685.73 1102.77,685.73 1103.33,685.73 1103.89,685.73 1104.45,685.73 1105.01,685.73 1105.57,685.73 1106.13,685.73 1106.69,685.73 1107.25,685.73 1107.81,685.73 1108.37,685.73 1108.93,685.73 1109.49,685.73 1110.04,685.73 1110.6,685.73 1111.16,685.73 1111.72,685.73 1112.28,685.73 1112.84,685.73 1113.4,685.73 1113.96,685.73 1114.52,685.73 1115.08,685.73 1115.64,685.73 1116.2,685.73 1116.76,685.73 1117.31,685.73 1117.87,685.73 1118.43,685.73 1118.99,685.73 1119.55,685.73 1120.11,685.73 1120.67,685.73 1121.23,685.73 1121.79,685.73 1122.35,685.73 1122.91,685.73 1123.47,685.73 1124.03,685.73 1124.59,685.73 1125.14,685.73 1125.7,685.73 1126.26,685.73 1126.82,685.73 1127.38,685.73 1127.94,685.73 1128.5,685.73 1129.06,685.73 1129.62,685.73 1130.18,685.73 1130.74,685.73 1131.3,685.73 1131.86,685.73 1132.41,685.73 1132.97,685.73 1133.53,685.73 1134.09,685.73 1134.65,685.73 1135.21,685.73 1135.77,685.73 1136.33,685.73 1136.89,685.73 1137.45,685.73 1138.01,685.73 1138.57,685.73 1139.13,685.73 1139.68,685.73 1140.24,685.73 1140.8,685.73 1141.36,685.73 1141.92,685.73 1142.48,685.73 1143.04,685.73 1143.6,685.73 1144.16,685.73 1144.72,685.73 1145.28,685.73 1145.84,685.73 1146.4,685.73 1146.96,685.73 1147.51,685.73 1148.07,685.73 1148.63,685.73 1149.19,685.73 1149.75,685.73 1150.31,685.73 1150.87,685.73 1151.43,685.73 1151.99,685.73 1152.55,685.73 1153.11,685.73 1153.67,685.73 1154.23,685.73 1154.78,685.73 1155.34,685.73 1155.9,685.73 1156.46,685.73 1157.02,685.73 1157.58,685.73 1158.14,685.73 1158.7,685.73 1159.26,685.73 1159.82,685.73 1160.38,685.73 1160.94,685.73 1161.5,685.73 1162.05,685.73 1162.61,685.73 1163.17,685.73 1163.73,685.73 1164.29,685.73 1164.85,685.73 1165.41,685.73 1165.97,685.73 1166.53,685.73 1167.09,685.73 1167.65,685.73 1168.21,685.73 1168.77,685.73 1169.33,685.73 1169.88,685.73 1170.44,685.73 1171,685.73 1171.56,685.73 1172.12,685.73 1172.68,685.73 1173.24,685.73 1173.8,685.73 1174.36,685.73 1174.92,685.73 1175.48,685.73 1176.04,685.73 1176.6,685.73 1177.15,685.73 1177.71,685.73 1178.27,685.73 1178.83,685.73 1179.39,685.73 1179.95,685.73 1180.51,685.73 1181.07,685.73 1181.63,685.73 1182.19,685.73 1182.75,685.73 1183.31,685.73 1183.87,685.73 1184.43,685.73 1184.98,685.73 1185.54,685.73 1186.1,685.73 1186.66,685.73 1187.22,685.73 1187.78,685.73 1188.34,685.73 1188.9,685.73 1189.46,685.73 1190.02,685.73 1190.58,685.73 1191.14,685.73 1191.7,685.73 1192.25,685.73 1192.81,685.73 1193.37,685.73 1193.93,685.73 1194.49,685.73 1195.05,685.73 1195.61,685.73 1196.17,685.73 1196.73,685.73 1197.29,685.73 1197.85,685.73 1198.41,685.73 1198.97,685.73 1199.52,685.73 1200.08,685.73 1200.64,685.73 1201.2,685.73 1201.76,685.73 1202.32,685.73 1202.88,685.73 1203.44,685.73 1204,685.73 1204.56,685.73 1205.12,685.73 1205.68,685.73 1206.24,685.73 1206.8,685.73 1207.35,685.73 1207.91,685.73 1208.47,685.73 1209.03,685.73 1209.59,685.73 1210.15,685.73 1210.71,685.73 1211.27,685.73 1211.83,685.73 1212.39,685.73 1212.95,685.73 1213.51,685.73 1214.07,685.73 1214.62,685.73 1215.18,685.73 1215.74,685.73 1216.3,685.73 1216.86,685.73 1217.42,685.73 1217.98,685.73 1218.54,685.73 1219.1,685.73 1219.66,685.73 1220.22,685.73 1220.78,685.73 1221.34,685.73 1221.89,685.73 1222.45,685.73 1223.01,685.73 1223.57,685.73 1224.13,685.73 1224.69,685.73 1225.25,685.73 1225.81,685.73 1226.37,685.73 1226.93,685.73 1227.49,685.73 1228.05,685.73 1228.61,685.73 1229.17,685.73 1229.72,685.73 1230.28,685.73 1230.84,685.73 1231.4,685.73 1231.96,685.73 1232.52,685.73 1233.08,685.73 1233.64,685.73 1234.2,685.73 1234.76,685.73 1235.32,685.73 1235.88,685.73 1236.44,685.73 1236.99,685.73 1237.55,685.73 1238.11,685.73 1238.67,685.73 1239.23,685.73 1239.79,685.73 1240.35,685.73 1240.91,685.73 1241.47,685.73 1242.03,685.73 1242.59,685.73 1243.15,685.73 1243.71,685.73 1244.26,685.73 1244.82,685.73 1245.38,685.73 1245.94,685.73 1246.5,685.73 1247.06,685.73 1247.62,685.73 1248.18,685.73 1248.74,685.73 1249.3,685.73 1249.86,685.73 1250.42,685.73 1250.98,685.73 1251.54,685.73 1252.09,685.73 1252.65,685.73 1253.21,685.73 1253.77,685.73 1254.33,685.73 1254.89,685.73 1255.45,685.73 1256.01,685.73 1256.57,685.73 1257.13,685.73 1257.69,685.73 1258.25,685.73 1258.81,685.73 1259.36,685.73 1259.92,685.73 1260.48,685.73 1261.04,685.73 1261.6,685.73 1262.16,685.73 1262.72,685.73 1263.28,685.73 1263.84,685.73 1264.4,685.73 1264.96,685.73 1265.52,685.73 1266.08,685.73 1266.63,685.73 1267.19,685.73 1267.75,685.73 1268.31,685.73 1268.87,685.73 1269.43,685.73 1269.99,685.73 1270.55,685.73 1271.11,685.73 1271.67,685.73 1272.23,685.73 1272.79,685.73 1273.35,685.73 1273.91,685.73 1274.46,685.73 1275.02,685.73 1275.58,685.73 1276.14,685.73 1276.7,685.73 1277.26,685.73 1277.82,685.73 1278.38,685.73 1278.94,685.73 1279.5,685.73 1280.06,685.73 1280.62,685.73 1281.18,685.73 1281.73,685.73 1282.29,685.73 1282.85,685.73 1283.41,685.73 1283.97,685.73 1284.53,685.73 1285.09,685.73 1285.65,685.73 1286.21,685.73 1286.77,685.73 1287.33,685.73 1287.89,685.73 1288.45,685.73 1289,685.73 1289.56,685.73 1290.12,685.73 1290.68,685.73 1291.24,685.73 1291.8,685.73 1292.36,685.73 1292.92,685.73 1293.48,685.73 1294.04,685.73 1294.6,685.73 1295.16,685.73 1295.72,685.73 1296.28,685.73 1296.83,685.73 1297.39,685.73 1297.95,685.73 1298.51,685.73 1299.07,685.73 1299.63,685.73 1300.19,685.73 1300.75,685.73 1301.31,685.73 1301.87,685.73 1302.43,685.73 1302.99,685.73 1303.55,685.73 1304.1,685.73 1304.66,685.73 1305.22,685.73 1305.78,685.73 1306.34,685.73 1306.9,685.73 1307.46,685.73 1308.02,685.73 1308.58,685.73 1309.14,685.73 1309.7,685.73 1310.26,685.73 1310.82,685.73 1311.38,685.73 1311.93,685.73 1312.49,685.73 1313.05,685.73 1313.61,685.73 1314.17,685.73 1314.73,685.73 1315.29,685.73 1315.85,685.73 1316.41,685.73 1316.97,685.73 1317.53,685.73 1318.09,685.73 1318.65,685.73 1319.2,685.73 1319.76,685.73 1320.32,685.73 1320.88,685.73 1321.44,685.73 1322,685.73 1322.56,685.73 1323.12,685.73 1323.68,685.73 1324.24,685.73 1324.8,685.73 1325.36,685.73 1325.92,685.73 1326.47,685.73 1327.03,685.73 1327.59,685.73 1328.15,685.73 1328.71,685.73 1329.27,685.73 1329.83,685.73 1330.39,685.73 1330.95,685.73 1331.51,685.73 1332.07,685.73 1332.63,685.73 1333.19,685.73 1333.75,685.73 1334.3,685.73 1334.86,685.73 1335.42,685.73 1335.98,685.73 1336.54,685.73 1337.1,685.73 1337.66,685.73 1338.22,685.73 1338.78,685.73 1339.34,685.73 1339.9,685.73 1340.46,685.73 1341.02,685.73 1341.57,685.73 1342.13,685.73 1342.69,685.73 1343.25,685.73 1343.81,685.73 1344.37,685.73 1344.93,685.73 1345.49,685.73 1346.05,685.73 1346.61,685.73 1347.17,685.73 1347.73,685.73 1348.29,685.73 1348.84,685.73 1349.4,685.73 1349.96,685.73 1350.52,685.73 1351.08,685.73 1351.64,685.73 1352.2,685.73 1352.76,685.73 1353.32,685.73 1353.88,685.73 1354.44,685.73 1355,685.73 1355.56,685.73 1356.12,685.73 1356.67,685.73 1357.23,685.73 1357.79,685.73 1358.35,685.73 1358.91,685.73 1359.47,685.73 1360.03,685.73 1360.59,685.73 1361.15,685.73 1361.71,685.73 1362.27,685.73 1362.83,685.73 1363.39,685.73 1363.94,685.73 1364.5,685.73 1365.06,685.73 1365.62,685.73 1366.18,685.73 1366.74,685.73 1367.3,685.73 1367.86,685.73 1368.42,685.73 1368.98,685.73 1369.54,685.73 1370.1,685.73 1370.66,685.73 1371.21,685.73 1371.77,685.73 1372.33,685.73 1372.89,685.73 1373.45,685.73 1374.01,685.73 1374.57,685.73 1375.13,685.73 1375.69,685.73 1376.25,685.73 1376.81,685.73 1377.37,685.73 1377.93,685.73 1378.49,685.73 1379.04,685.73 1379.6,685.73 1380.16,685.73 1380.72,685.73 1381.28,685.73 1381.84,685.73 1382.4,685.73 1382.96,685.73 1383.52,685.73 1384.08,685.73 1384.64,685.73 1385.2,685.73 1385.76,685.73 1386.31,685.73 1386.87,685.73 1387.43,685.73 1387.99,685.73 1388.55,685.73 1389.11,685.73 1389.67,685.73 1390.23,685.73 1390.79,685.73 1391.35,685.73 1391.91,685.73 1392.47,685.73 1393.03,685.73 1393.58,685.73 1394.14,685.73 1394.7,685.73 1395.26,685.73 1395.82,685.73 1396.38,685.73 1396.94,685.73 1397.5,685.73 1398.06,685.73 1398.62,685.73 1399.18,685.73 1399.74,685.73 1400.3,685.73 1400.86,685.73 1401.41,685.73 1401.97,685.73 1402.53,685.73 1403.09,685.73 1403.65,685.73 1404.21,685.73 1404.77,685.73 1405.33,685.73 1405.89,685.73 1406.45,685.73 1407.01,685.73 1407.57,685.73 1408.13,685.73 1408.68,685.73 1409.24,685.73 1409.8,685.73 1410.36,685.73 1410.92,685.73 1411.48,685.73 1412.04,685.73 1412.6,685.73 1413.16,685.73 1413.72,685.73 1414.28,685.73 1414.84,685.73 1415.4,685.73 1415.95,685.73 1416.51,685.73 1417.07,685.73 1417.63,685.73 1418.19,685.73 1418.75,685.73 1419.31,685.73 1419.87,685.73 1420.43,685.73 1420.99,685.73 1421.55,685.73 1422.11,685.73 1422.67,685.73 1423.23,685.73 1423.78,685.73 1424.34,685.73 1424.9,685.73 1425.46,685.73 1426.02,685.73 1426.58,685.73 1427.14,685.73 1427.7,685.73 1428.26,685.73 1428.82,685.73 1429.38,685.73 1429.94,685.73 1430.5,685.73 1431.05,685.73 1431.61,685.73 1432.17,685.73 1432.73,685.73 1433.29,685.73 1433.85,685.73 1434.41,685.73 1434.97,685.73 1435.53,685.73 1436.09,685.73 1436.65,685.73 1437.21,685.73 1437.77,685.73 1438.33,685.73 1438.88,685.73 1439.44,685.73 1440,685.73 1440.56,685.73 1441.12,685.73 1441.68,685.73 1442.24,685.73 1442.8,685.73 1443.36,685.73 1443.92,685.73 1444.48,685.73 1445.04,685.73 1445.6,685.73 1446.15,685.73 1446.71,685.73 1447.27,685.73 1447.83,685.73 1448.39,685.73 1448.95,685.73 1449.51,685.73 1450.07,685.73 1450.63,685.73 1451.19,685.73 1451.75,685.73 1452.31,685.73 1452.87,685.73 1453.42,685.73 1453.98,685.73 1454.54,685.73 1455.1,685.73 1455.66,685.73 1456.22,685.73 1456.78,685.73 1457.34,685.73 1457.9,685.73 1458.46,685.73 1459.02,685.73 1459.58,685.73 1460.14,685.73 1460.7,685.73 1461.25,685.73 1461.81,685.73 1462.37,685.73 1462.93,685.73 1463.49,685.73 1464.05,685.73 1464.61,685.73 1465.17,685.73 1465.73,685.73 1466.29,685.73 1466.85,685.73 1467.41,685.73 1467.97,685.73 1468.52,685.73 1469.08,685.73 1469.64,685.73 1470.2,685.73 1470.76,685.73 1471.32,685.73 1471.88,685.73 1472.44,685.73 1473,685.73 1473.56,685.73 1474.12,685.73 1474.68,685.73 1475.24,685.73 1475.79,685.73 1476.35,685.73 1476.91,685.73 1477.47,685.73 1478.03,685.73 1478.59,685.73 1479.15,685.73 1479.71,685.73 1480.27,685.73 1480.83,685.73 1481.39,685.73 1481.95,685.73 1482.51,685.73 1483.07,685.73 1483.62,685.73 1484.18,685.73 1484.74,685.73 1485.3,685.73 1485.86,685.73 1486.42,685.73 1486.98,685.73 1487.54,685.73 1488.1,685.73 1488.66,685.73 1489.22,685.73 1489.78,685.73 1490.34,685.73 1490.89,685.73 1491.45,685.73 1492.01,685.73 1492.57,685.73 1493.13,685.73 1493.69,685.73 1494.25,685.73 1494.81,685.73 1495.37,685.73 1495.93,685.73 1496.49,685.73 1497.05,685.73 1497.61,685.73 1498.16,685.73 1498.72,685.73 1499.28,685.73 1499.84,685.73 1500.4,685.73 1500.96,685.73 1501.52,685.73 1502.08,685.73 1502.64,685.73 1503.2,685.73 1503.76,685.73 1504.32,685.73 1504.88,685.73 1505.44,685.73 1505.99,685.73 1506.55,685.73 1507.11,685.73 1507.67,685.73 1508.23,685.73 1508.79,685.73 1509.35,685.73 1509.91,685.73 1510.47,685.73 1511.03,685.73 1511.59,685.73 1512.15,685.73 1512.71,685.73 1513.26,685.73 1513.82,685.73 1514.38,685.73 1514.94,685.73 1515.5,685.73 1516.06,685.73 1516.62,685.73 1517.18,685.73 1517.74,685.73 1518.3,685.73 1518.86,685.73 1519.42,685.73 1519.98,685.73 1520.53,685.73 1521.09,685.73 1521.65,685.73 1522.21,685.73 1522.77,685.73 1523.33,685.73 1523.89,685.73 1524.45,685.73 1525.01,685.73 1525.57,685.73 1526.13,685.73 1526.69,685.73 1527.25,685.73 1527.81,685.73 1528.36,685.73 1528.92,685.73 1529.48,685.73 1530.04,685.73 1530.6,685.73 1531.16,685.73 1531.72,685.73 1532.28,685.73 1532.84,685.73 1533.4,685.73 1533.96,685.73 1534.52,685.73 1535.08,685.73 1535.63,685.73 1536.19,685.73 1536.75,685.73 1537.31,685.73 1537.87,685.73 1538.43,685.73 1538.99,685.73 1539.55,685.73 1540.11,685.73 1540.67,685.73 1541.23,685.73 1541.79,685.73 1542.35,685.73 1542.9,685.73 1543.46,685.73 1544.02,685.73 1544.58,685.73 1545.14,685.73 1545.7,685.73 1546.26,685.73 1546.82,685.73 1547.38,685.73 1547.94,685.73 1548.5,685.73 1549.06,685.73 1549.62,685.73 1550.18,685.73 1550.73,685.73 1551.29,685.73 1551.85,685.73 1552.41,685.73 1552.97,685.73 1553.53,685.73 1554.09,685.73 1554.65,685.73 1555.21,685.73 1555.77,685.73 1556.33,685.73 1556.89,685.73 1557.45,685.73 1558,685.73 1558.56,685.73 1559.12,685.73 1559.68,685.73 1560.24,685.73 1560.8,685.73 1561.36,685.73 1561.92,685.73 1562.48,685.73 1563.04,685.73 1563.6,685.73 1564.16,685.73 1564.72,685.73 1565.28,685.73 1565.83,685.73 1566.39,685.73 1566.95,685.73 1567.51,685.73 1568.07,685.73 1568.63,685.73 1569.19,685.73 1569.75,685.73 1570.31,685.73 1570.87,685.73 1571.43,685.73 1571.99,685.73 1572.55,685.73 1573.1,685.73 1573.66,685.73 1574.22,685.73 1574.78,685.73 1575.34,685.73 1575.9,685.73 1576.46,685.73 1577.02,685.73 1577.58,685.73 1578.14,685.73 1578.7,685.73 1579.26,685.73 1579.82,685.73 1580.37,685.73 1580.93,685.73 1581.49,685.73 1582.05,685.73 1582.61,685.73 1583.17,685.73 1583.73,685.73 1584.29,685.73 1584.85,685.73 1585.41,685.73 1585.97,685.73 1586.53,685.73 1587.09,685.73 1587.65,685.73 1588.2,685.73 1588.76,685.73 1589.32,685.73 1589.88,685.73 1590.44,685.73 1591,685.73 1591.56,685.73 1592.12,685.73 1592.68,685.73 1593.24,685.73 1593.8,685.73 1594.36,685.73 1594.92,685.73 1595.47,685.73 1596.03,685.73 1596.59,685.73 1597.15,685.73 1597.71,685.73 1598.27,685.73 1598.83,685.73 1599.39,685.73 1599.95,685.73 1600.51,685.73 1601.07,685.73 1601.63,685.73 1602.19,685.73 1602.74,685.73 1603.3,685.73 1603.86,685.73 1604.42,685.73 1604.98,685.73 1605.54,685.73 1606.1,685.73 1606.66,685.73 1607.22,685.73 1607.78,685.73 1608.34,685.73 1608.9,685.73 1609.46,685.73 1610.02,685.73 1610.57,685.73 1611.13,685.73 1611.69,685.73 1612.25,685.73 1612.81,685.73 1613.37,685.73 1613.93,685.73 1614.49,685.73 1615.05,685.73 1615.61,685.73 1616.17,685.73 1616.73,685.73 1617.29,685.73 1617.84,685.73 1618.4,685.73 1618.96,685.73 1619.52,685.73 1620.08,685.73 1620.64,685.73 1621.2,685.73 1621.76,685.73 1622.32,685.73 1622.88,685.73 1623.44,685.73 1624,685.73 1624.56,685.73 1625.11,685.73 1625.67,685.73 1626.23,685.73 1626.79,685.73 1627.35,685.73 1627.91,685.73 1628.47,685.73 1629.03,685.73 1629.59,685.73 1630.15,685.73 1630.71,685.73 1631.27,685.73 1631.83,685.73 1632.39,685.73 1632.94,685.73 1633.5,685.73 1634.06,685.73 1634.62,685.73 1635.18,685.73 1635.74,685.73 1636.3,685.73 1636.86,685.73 1637.42,685.73 1637.98,685.73 1638.54,685.73 1639.1,685.73 1639.66,685.73 1640.21,685.73 1640.77,685.73 1641.33,685.73 1641.89,685.73 1642.45,685.73 1643.01,685.73 1643.57,685.73 1644.13,685.73 1644.69,685.73 1645.25,685.73 1645.81,685.73 1646.37,685.73 1646.93,685.73 1647.48,685.73 1648.04,685.73 1648.6,685.73 1649.16,685.73 1649.72,685.73 1650.28,685.73 1650.84,685.73 1651.4,685.73 1651.96,685.73 1652.52,685.73 1653.08,685.73 1653.64,685.73 1654.2,685.73 1654.76,685.73 1655.31,685.73 1655.87,685.73 1656.43,685.73 1656.99,685.73 1657.55,685.73 1658.11,685.73 1658.67,685.73 1659.23,685.73 1659.79,685.73 1660.35,685.73 1660.91,685.73 1661.47,685.73 1662.03,685.73 1662.58,685.73 1663.14,685.73 1663.7,685.73 1664.26,685.73 1664.82,685.73 1665.38,685.73 1665.94,685.73 1666.5,685.73 1667.06,685.73 1667.62,685.73 1668.18,685.73 1668.74,685.73 1669.3,685.73 1669.85,685.73 1670.41,685.73 1670.97,685.73 1671.53,685.73 1672.09,685.73 1672.65,685.73 1673.21,685.73 1673.77,685.73 1674.33,685.73 1674.89,685.73 1675.45,685.73 1676.01,685.73 1676.57,685.73 1677.13,685.73 1677.68,685.73 1678.24,685.73 1678.8,685.73 1679.36,685.73 1679.92,685.73 1680.48,685.73 1681.04,685.73 1681.6,685.73 1682.16,685.73 1682.72,685.73 1683.28,685.73 1683.84,685.73 1684.4,685.73 1684.95,685.73 1685.51,685.73 1686.07,685.73 1686.63,685.73 1687.19,685.73 1687.75,685.73 1688.31,685.73 1688.87,685.73 1689.43,685.73 1689.99,685.73 1690.55,685.73 1691.11,685.73 1691.67,685.73 1692.23,685.73 1692.78,685.73 1693.34,685.73 1693.9,685.73 1694.46,685.73 1695.02,685.73 1695.58,685.73 1696.14,685.73 1696.7,685.73 1697.26,685.73 1697.82,685.73 1698.38,685.73 1698.94,685.73 1699.5,685.73 1700.05,685.73 1700.61,685.73 1701.17,685.73 1701.73,685.73 1702.29,685.73 1702.85,685.73 1703.41,685.73 1703.97,685.73 1704.53,685.73 1705.09,685.73 1705.65,685.73 1706.21,685.73 1706.77,685.73 1707.32,685.73 1707.88,685.73 1708.44,685.73 1709,685.73 1709.56,685.73 1710.12,685.73 1710.68,685.73 1711.24,685.73 1711.8,685.73 1712.36,685.73 1712.92,685.73 1713.48,685.73 1714.04,685.73 1714.6,685.73 1715.15,685.73 1715.71,685.73 1716.27,685.73 1716.83,685.73 1717.39,685.73 1717.95,685.73 1718.51,685.73 1719.07,685.73 1719.63,685.73 1720.19,685.73 1720.75,685.73 1721.31,685.73 1721.87,685.73 1722.42,685.73 1722.98,685.73 1723.54,685.73 1724.1,685.73 1724.66,685.73 1725.22,685.73 1725.78,685.73 1726.34,685.73 1726.9,685.73 1727.46,685.73 1728.02,685.73 1728.58,685.73 1729.14,685.73 1729.69,685.73 1730.25,685.73 1730.81,685.73 1731.37,685.73 1731.93,685.73 1732.49,685.73 1733.05,685.73 1733.61,685.73 1734.17,685.73 1734.73,685.73 1735.29,685.73 1735.85,685.73 1736.41,685.73 1736.97,685.73 1737.52,685.73 1738.08,685.73 1738.64,685.73 1739.2,685.73 1739.76,685.73 1740.32,685.73 1740.88,685.73 1741.44,685.73 1742,685.73 1742.56,685.73 1743.12,685.73 1743.68,685.73 1744.24,685.73 1744.79,685.73 1745.35,685.73 1745.91,685.73 1746.47,685.73 1747.03,685.73 1747.59,685.73 1748.15,685.73 1748.71,685.73 1749.27,685.73 1749.83,685.73 1750.39,685.73 1750.95,685.73 1751.51,685.73 1752.06,685.73 1752.62,685.73 1753.18,685.73 1753.74,685.73 1754.3,685.73 1754.86,685.73 1755.42,685.73 1755.98,685.73 1756.54,685.73 1757.1,685.73 1757.66,685.73 1758.22,685.73 1758.78,685.73 1759.34,685.73 1759.89,685.73 1760.45,685.73 1761.01,685.73 1761.57,685.73 1762.13,685.73 1762.69,685.73 1763.25,685.73 1763.81,685.73 1764.37,685.73 1764.93,685.73 1765.49,685.73 1766.05,685.73 1766.61,685.73 1767.16,685.73 1767.72,685.73 1768.28,685.73 1768.84,685.73 1769.4,685.73 1769.96,685.73 1770.52,685.73 1771.08,685.73 1771.64,685.73 1772.2,685.73 1772.76,685.73 1773.32,685.73 1773.88,685.73 1774.43,685.73 1774.99,685.73 1775.55,685.73 1776.11,685.73 1776.67,685.73 1777.23,685.73 1777.79,685.73 1778.35,685.73 1778.91,685.73 1779.47,685.73 1780.03,685.73 1780.59,685.73 1781.15,685.73 1781.71,685.73 1782.26,685.73 1782.82,685.73 1783.38,685.73 1783.94,685.73 1784.5,685.73 1785.06,685.73 1785.62,685.73 1786.18,685.73 1786.74,685.73 1787.3,685.73 1787.86,685.73 1788.42,685.73 1788.98,685.73 1789.53,685.73 1790.09,685.73 1790.65,685.73 1791.21,685.73 1791.77,685.73 1792.33,685.73 1792.89,685.73 1793.45,685.73 1794.01,685.73 1794.57,685.73 1795.13,685.73 1795.69,685.73 1796.25,685.73 1796.8,685.73 1797.36,685.73 1797.92,685.73 1798.48,685.73 1799.04,685.73 1799.6,685.73 1800.16,685.73 1800.72,685.73 1801.28,685.73 1801.84,685.73 1802.4,685.73 1802.96,685.73 1803.52,685.73 1804.08,685.73 1804.63,685.73 1805.19,685.73 1805.75,685.73 1806.31,685.73 1806.87,685.73 1807.43,685.73 1807.99,685.73 1808.55,685.73 1809.11,685.73 1809.67,685.73 1810.23,685.73 1810.79,685.73 1811.35,685.73 1811.9,685.73 1812.46,685.73 1813.02,685.73 1813.58,685.73 1814.14,685.73 1814.7,685.73 1815.26,685.73 1815.82,685.73 1816.38,685.73 1816.94,685.73 1817.5,685.73 1818.06,685.73 1818.62,685.73 1819.18,685.73 1819.73,685.73 1820.29,685.73 1820.85,685.73 1821.41,685.73 1821.97,685.73 1822.53,685.73 1823.09,685.73 1823.65,685.73 1824.21,685.73 1824.77,685.73 1825.33,685.73 1825.89,685.73 1826.45,685.73 1827,685.73 1827.56,685.73 1828.12,685.73 1828.68,685.73 1829.24,685.73 1829.8,685.73 1830.36,685.73 1830.92,685.73 1831.48,685.73 1832.04,685.73 1832.6,685.73 1833.16,685.73 1833.72,685.73 1834.27,685.73 1834.83,685.73 1835.39,685.73 1835.95,685.73 1836.51,685.73 1837.07,685.73 1837.63,685.73 1838.19,685.73 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 684.705 L720.806 684.705 L721.365 684.705 L721.924 684.705 L722.484 684.705 L723.043 684.705 L723.602 684.705 L724.161 684.705 L724.721 684.705 L725.28 684.705 L725.839 684.705 L726.398 684.705 L726.958 684.705 L727.517 684.705 L728.076 684.705 L728.635 684.705 L729.195 684.705 L729.754 684.705 L730.313 684.705 L730.872 684.705 L731.432 684.705 L731.991 684.705 L732.55 684.705 L733.109 684.705 L733.669 684.705 L734.228 684.705 L734.787 684.705 L735.346 684.705 L735.906 684.705 L736.465 684.705 L737.024 684.705 L737.583 684.705 L738.143 684.705 L738.702 684.705 L739.261 684.705 L739.82 684.705 L740.38 684.705 L740.939 684.705 L741.498 684.705 L742.057 684.705 L742.617 684.705 L743.176 684.705 L743.735 684.705 L744.294 684.705 L744.854 684.705 L745.413 684.705 L745.972 684.705 L746.531 684.705 L747.091 684.705 L747.65 684.705 L748.209 684.705 L748.768 684.705 L749.328 684.705 L749.887 684.705 L750.446 684.705 L751.005 684.705 L751.565 684.705 L752.124 684.705 L752.683 684.705 L753.242 684.705 L753.802 684.705 L754.361 684.705 L754.92 684.705 L755.479 684.705 L756.039 684.705 L756.598 684.705 L757.157 684.705 L757.716 684.705 L758.276 684.705 L758.835 684.705 L759.394 684.705 L759.953 684.705 L760.513 684.705 L761.072 684.705 L761.631 684.705 L762.19 684.705 L762.75 684.705 L763.309 684.705 L763.868 684.705 L764.427 684.705 L764.987 684.705 L765.546 684.705 L766.105 684.705 L766.664 684.705 L767.224 684.705 L767.783 684.705 L768.342 684.705 L768.901 684.705 L769.461 684.705 L770.02 684.705 L770.579 684.705 L771.138 684.705 L771.698 684.705 L772.257 684.705 L772.816 684.705 L773.375 684.705 L773.935 684.705 L774.494 684.705 L775.053 684.705 L775.612 684.705 L776.172 684.705 L776.731 684.705 L777.29 684.705 L777.849 684.705 L778.409 684.705 L778.968 684.705 L779.527 684.705 L780.086 684.705 L780.646 684.705 L781.205 684.705 L781.764 684.705 L782.323 684.705 L782.883 684.705 L783.442 684.705 L784.001 684.705 L784.56 684.705 L785.12 684.705 L785.679 684.705 L786.238 684.705 L786.797 684.705 L787.357 684.705 L787.916 684.705 L788.475 684.705 L789.034 684.705 L789.594 684.705 L790.153 684.705 L790.712 684.705 L791.271 684.705 L791.831 684.705 L792.39 684.705 L792.949 684.705 L793.508 684.705 L794.068 684.705 L794.627 684.705 L795.186 684.705 L795.745 684.705 L796.305 684.705 L796.864 684.705 L797.423 684.705 L797.982 684.705 L798.542 684.705 L799.101 684.705 L799.66 684.705 L800.219 684.705 L800.779 684.705 L801.338 684.705 L801.897 684.705 L802.456 684.705 L803.016 684.705 L803.575 684.705 L804.134 684.705 L804.693 684.705 L805.253 684.705 L805.812 684.705 L806.371 684.705 L806.931 684.705 L807.49 684.705 L808.049 684.705 L808.608 684.705 L809.168 684.705 L809.727 684.705 L810.286 684.705 L810.845 684.705 L811.405 684.705 L811.964 684.705 L812.523 684.705 L813.082 684.705 L813.642 684.705 L814.201 684.705 L814.76 684.705 L815.319 684.705 L815.879 684.705 L816.438 684.705 L816.997 684.705 L817.556 684.705 L818.116 684.705 L818.675 684.705 L819.234 684.705 L819.793 684.705 L820.353 684.705 L820.912 684.705 L821.471 684.705 L822.03 684.705 L822.59 684.705 L823.149 684.705 L823.708 684.705 L824.267 684.705 L824.827 684.705 L825.386 684.705 L825.945 684.705 L826.504 684.705 L827.064 684.705 L827.623 684.705 L828.182 684.705 L828.741 684.705 L829.301 684.705 L829.86 684.705 L830.419 684.705 L830.978 684.705 L831.538 684.705 L832.097 684.705 L832.656 684.705 L833.215 684.705 L833.775 684.705 L834.334 684.705 L834.893 684.705 L835.452 684.705 L836.012 684.705 L836.571 684.705 L837.13 684.705 L837.689 684.705 L838.249 684.705 L838.808 684.705 L839.367 684.705 L839.926 684.705 L840.486 684.705 L841.045 684.705 L841.604 684.705 L842.163 684.705 L842.723 684.705 L843.282 684.705 L843.841 684.705 L844.4 684.705 L844.96 684.705 L845.519 684.705 L846.078 684.705 L846.637 684.705 L847.197 684.705 L847.756 684.705 L848.315 684.705 L848.874 684.705 L849.434 684.705 L849.993 684.705 L850.552 684.705 L851.111 684.705 L851.671 684.705 L852.23 684.705 L852.789 684.705 L853.348 684.705 L853.908 684.705 L854.467 684.705 L855.026 684.705 L855.585 684.705 L856.145 684.705 L856.704 684.705 L857.263 684.705 L857.822 684.705 L858.382 684.705 L858.941 684.705 L859.5 684.705 L860.059 684.705 L860.619 684.705 L861.178 684.705 L861.737 684.705 L862.296 684.705 L862.856 684.705 L863.415 684.705 L863.974 684.705 L864.533 684.705 L865.093 684.705 L865.652 684.705 L866.211 684.705 L866.77 684.705 L867.33 684.705 L867.889 684.705 L868.448 684.705 L869.007 684.705 L869.567 684.705 L870.126 684.705 L870.685 684.705 L871.244 684.705 L871.804 684.705 L872.363 684.705 L872.922 684.705 L873.481 684.705 L874.041 684.705 L874.6 684.705 L875.159 684.705 L875.718 684.705 L876.278 684.705 L876.837 684.705 L877.396 684.705 L877.955 684.705 L878.515 684.705 L879.074 684.705 L879.633 684.705 L880.192 684.705 L880.752 684.705 L881.311 684.705 L881.87 684.705 L882.429 684.705 L882.989 684.705 L883.548 684.705 L884.107 684.705 L884.666 684.705 L885.226 684.705 L885.785 684.705 L886.344 684.705 L886.903 684.705 L887.463 684.705 L888.022 684.705 L888.581 684.705 L889.14 684.705 L889.7 684.705 L890.259 684.705 L890.818 684.705 L891.377 684.705 L891.937 684.705 L892.496 684.705 L893.055 684.705 L893.614 684.705 L894.174 684.705 L894.733 684.705 L895.292 684.705 L895.851 684.705 L896.411 684.705 L896.97 684.705 L897.529 684.705 L898.088 684.705 L898.648 684.705 L899.207 684.705 L899.766 684.705 L900.325 684.705 L900.885 684.705 L901.444 684.705 L902.003 684.705 L902.562 684.705 L903.122 684.705 L903.681 684.705 L904.24 684.705 L904.799 684.705 L905.359 684.705 L905.918 684.705 L906.477 684.705 L907.036 684.705 L907.596 684.705 L908.155 684.705 L908.714 684.705 L909.273 684.705 L909.833 684.705 L910.392 684.705 L910.951 684.705 L911.51 684.705 L912.07 684.705 L912.629 684.705 L913.188 684.705 L913.747 684.705 L914.307 684.705 L914.866 684.705 L915.425 684.705 L915.984 684.705 L916.544 684.705 L917.103 684.705 L917.662 684.705 L918.221 684.705 L918.781 684.705 L919.34 684.705 L919.899 684.705 L920.458 684.705 L921.018 684.705 L921.577 684.705 L922.136 684.705 L922.695 684.705 L923.255 684.705 L923.814 684.705 L924.373 684.705 L924.932 684.705 L925.492 684.705 L926.051 684.705 L926.61 684.705 L927.169 684.705 L927.729 684.705 L928.288 684.705 L928.847 684.705 L929.406 684.705 L929.966 684.705 L930.525 684.705 L931.084 684.705 L931.644 684.705 L932.203 684.705 L932.762 684.705 L933.321 684.705 L933.881 684.705 L934.44 684.705 L934.999 684.705 L935.558 684.705 L936.118 684.705 L936.677 684.705 L937.236 684.705 L937.795 684.705 L938.355 684.705 L938.914 684.705 L939.473 684.705 L940.032 684.705 L940.592 684.705 L941.151 684.705 L941.71 684.705 L942.269 684.705 L942.829 684.705 L943.388 684.705 L943.947 684.705 L944.506 684.705 L945.066 684.705 L945.625 684.705 L946.184 684.705 L946.743 684.705 L947.303 684.705 L947.862 684.705 L948.421 684.705 L948.98 684.705 L949.54 684.705 L950.099 684.705 L950.658 684.705 L951.217 684.705 L951.777 684.705 L952.336 684.705 L952.895 684.705 L953.454 684.705 L954.014 684.705 L954.573 684.705 L955.132 684.705 L955.691 684.705 L956.251 684.705 L956.81 684.705 L957.369 684.705 L957.928 684.705 L958.488 684.705 L959.047 684.705 L959.606 684.705 L960.165 684.705 L960.725 684.705 L961.284 684.705 L961.843 684.705 L962.402 684.705 L962.962 684.705 L963.521 684.705 L964.08 684.705 L964.639 684.705 L965.199 684.705 L965.758 684.705 L966.317 684.705 L966.876 684.705 L967.436 684.705 L967.995 684.705 L968.554 684.705 L969.113 684.705 L969.673 684.705 L970.232 684.705 L970.791 684.705 L971.35 684.705 L971.91 684.705 L972.469 684.705 L973.028 684.705 L973.587 684.705 L974.147 684.705 L974.706 684.705 L975.265 684.705 L975.824 684.705 L976.384 684.705 L976.943 684.705 L977.502 684.705 L978.061 684.705 L978.621 684.705 L979.18 684.705 L979.739 684.705 L980.298 684.705 L980.858 684.705 L981.417 684.705 L981.976 684.705 L982.535 684.705 L983.095 684.705 L983.654 684.705 L984.213 684.705 L984.772 684.705 L985.332 684.705 L985.891 684.705 L986.45 684.705 L987.009 684.705 L987.569 684.705 L988.128 684.705 L988.687 684.705 L989.246 684.705 L989.806 684.705 L990.365 684.705 L990.924 684.705 L991.483 684.705 L992.043 684.705 L992.602 684.705 L993.161 684.705 L993.72 684.705 L994.28 684.705 L994.839 684.705 L995.398 684.705 L995.957 684.705 L996.517 684.705 L997.076 684.705 L997.635 684.705 L998.194 684.705 L998.754 684.705 L999.313 684.705 L999.872 684.705 L1000.43 684.705 L1000.99 684.705 L1001.55 684.705 L1002.11 684.705 L1002.67 684.705 L1003.23 684.705 L1003.79 684.705 L1004.35 684.705 L1004.91 684.705 L1005.46 684.705 L1006.02 684.705 L1006.58 684.705 L1007.14 684.705 L1007.7 684.705 L1008.26 684.705 L1008.82 684.705 L1009.38 684.705 L1009.94 684.705 L1010.5 684.705 L1011.06 684.705 L1011.62 684.705 L1012.18 684.705 L1012.73 684.705 L1013.29 684.705 L1013.85 684.705 L1014.41 684.705 L1014.97 684.705 L1015.53 684.705 L1016.09 684.705 L1016.65 684.705 L1017.21 684.705 L1017.77 684.705 L1018.33 684.705 L1018.89 684.705 L1019.45 684.705 L1020.01 684.705 L1020.56 684.705 L1021.12 684.705 L1021.68 684.705 L1022.24 684.705 L1022.8 684.705 L1023.36 684.705 L1023.92 684.705 L1024.48 684.705 L1025.04 684.705 L1025.6 684.705 L1026.16 684.705 L1026.72 684.705 L1027.28 684.705 L1027.83 684.705 L1028.39 684.705 L1028.95 684.705 L1029.51 684.705 L1030.07 684.705 L1030.63 684.705 L1031.19 684.705 L1031.75 684.705 L1032.31 684.705 L1032.87 684.705 L1033.43 684.705 L1033.99 684.705 L1034.55 684.705 L1035.1 684.705 L1035.66 684.705 L1036.22 684.705 L1036.78 684.705 L1037.34 684.705 L1037.9 684.705 L1038.46 684.705 L1039.02 684.705 L1039.58 684.705 L1040.14 684.705 L1040.7 684.705 L1041.26 684.705 L1041.82 684.705 L1042.38 684.705 L1042.93 684.705 L1043.49 684.705 L1044.05 684.705 L1044.61 684.705 L1045.17 684.705 L1045.73 684.705 L1046.29 684.705 L1046.85 684.705 L1047.41 684.705 L1047.97 684.705 L1048.53 684.705 L1049.09 684.705 L1049.65 684.705 L1050.2 684.705 L1050.76 684.705 L1051.32 684.705 L1051.88 684.705 L1052.44 684.705 L1053 684.705 L1053.56 684.705 L1054.12 684.705 L1054.68 684.705 L1055.24 684.705 L1055.8 684.705 L1056.36 684.705 L1056.92 684.705 L1057.48 684.705 L1058.03 684.705 L1058.59 684.705 L1059.15 684.705 L1059.71 684.705 L1060.27 684.705 L1060.83 684.705 L1061.39 684.705 L1061.95 684.705 L1062.51 684.705 L1063.07 684.705 L1063.63 684.705 L1064.19 684.705 L1064.75 684.705 L1065.3 684.705 L1065.86 684.705 L1066.42 684.705 L1066.98 684.705 L1067.54 684.705 L1068.1 684.705 L1068.66 684.705 L1069.22 684.705 L1069.78 684.705 L1070.34 684.705 L1070.9 684.705 L1071.46 684.705 L1072.02 684.705 L1072.57 684.705 L1073.13 684.705 L1073.69 684.705 L1074.25 684.705 L1074.81 684.705 L1075.37 684.705 L1075.93 684.705 L1076.49 684.705 L1077.05 684.705 L1077.61 684.705 L1078.17 684.705 L1078.73 684.705 L1079.29 684.705 L1079.85 684.705 L1080.4 684.705 L1080.96 684.705 L1081.52 684.705 L1082.08 684.705 L1082.64 684.705 L1083.2 684.705 L1083.76 684.705 L1084.32 684.705 L1084.88 684.705 L1085.44 684.705 L1086 684.705 L1086.56 684.705 L1087.12 684.705 L1087.67 684.705 L1088.23 684.705 L1088.79 684.705 L1089.35 684.705 L1089.91 684.705 L1090.47 684.705 L1091.03 684.705 L1091.59 684.705 L1092.15 684.705 L1092.71 684.705 L1093.27 684.705 L1093.83 684.705 L1094.39 684.705 L1094.94 684.705 L1095.5 684.705 L1096.06 684.705 L1096.62 684.705 L1097.18 684.705 L1097.74 684.705 L1098.3 684.705 L1098.86 684.705 L1099.42 684.705 L1099.98 684.705 L1100.54 684.705 L1101.1 684.705 L1101.66 684.705 L1102.22 684.705 L1102.77 684.705 L1103.33 684.705 L1103.89 684.705 L1104.45 684.705 L1105.01 684.705 L1105.57 684.705 L1106.13 684.705 L1106.69 684.705 L1107.25 684.705 L1107.81 684.705 L1108.37 684.705 L1108.93 684.705 L1109.49 684.705 L1110.04 684.705 L1110.6 684.705 L1111.16 684.705 L1111.72 684.705 L1112.28 684.705 L1112.84 684.705 L1113.4 684.705 L1113.96 684.705 L1114.52 684.705 L1115.08 684.705 L1115.64 684.705 L1116.2 684.705 L1116.76 684.705 L1117.31 684.705 L1117.87 684.705 L1118.43 684.705 L1118.99 684.705 L1119.55 684.705 L1120.11 684.705 L1120.67 684.705 L1121.23 684.705 L1121.79 684.705 L1122.35 684.705 L1122.91 684.705 L1123.47 684.705 L1124.03 684.705 L1124.59 684.705 L1125.14 684.705 L1125.7 684.705 L1126.26 684.705 L1126.82 684.705 L1127.38 684.705 L1127.94 684.705 L1128.5 684.705 L1129.06 684.705 L1129.62 684.705 L1130.18 684.705 L1130.74 684.705 L1131.3 684.705 L1131.86 684.705 L1132.41 684.705 L1132.97 684.705 L1133.53 684.705 L1134.09 684.705 L1134.65 684.705 L1135.21 684.705 L1135.77 684.705 L1136.33 684.705 L1136.89 684.705 L1137.45 684.705 L1138.01 684.705 L1138.57 684.705 L1139.13 684.705 L1139.68 684.705 L1140.24 684.705 L1140.8 684.705 L1141.36 684.705 L1141.92 684.705 L1142.48 684.705 L1143.04 684.705 L1143.6 684.705 L1144.16 684.705 L1144.72 684.705 L1145.28 684.705 L1145.84 684.705 L1146.4 684.705 L1146.96 684.705 L1147.51 684.705 L1148.07 684.705 L1148.63 684.705 L1149.19 684.705 L1149.75 684.705 L1150.31 684.705 L1150.87 684.705 L1151.43 684.705 L1151.99 684.705 L1152.55 684.705 L1153.11 684.705 L1153.67 684.705 L1154.23 684.705 L1154.78 684.705 L1155.34 684.705 L1155.9 684.705 L1156.46 684.705 L1157.02 684.705 L1157.58 684.705 L1158.14 684.705 L1158.7 684.705 L1159.26 684.705 L1159.82 684.705 L1160.38 684.705 L1160.94 684.705 L1161.5 684.705 L1162.05 684.705 L1162.61 684.705 L1163.17 684.705 L1163.73 684.705 L1164.29 684.705 L1164.85 684.705 L1165.41 684.705 L1165.97 684.705 L1166.53 684.705 L1167.09 684.705 L1167.65 684.705 L1168.21 684.705 L1168.77 684.705 L1169.33 684.705 L1169.88 684.705 L1170.44 684.705 L1171 684.705 L1171.56 684.705 L1172.12 684.705 L1172.68 684.705 L1173.24 684.705 L1173.8 684.705 L1174.36 684.705 L1174.92 684.705 L1175.48 684.705 L1176.04 684.705 L1176.6 684.705 L1177.15 684.705 L1177.71 684.705 L1178.27 684.705 L1178.83 684.705 L1179.39 684.705 L1179.95 684.705 L1180.51 684.705 L1181.07 684.705 L1181.63 684.705 L1182.19 684.705 L1182.75 684.705 L1183.31 684.705 L1183.87 684.705 L1184.43 684.705 L1184.98 684.705 L1185.54 684.705 L1186.1 684.705 L1186.66 684.705 L1187.22 684.705 L1187.78 684.705 L1188.34 684.705 L1188.9 684.705 L1189.46 684.705 L1190.02 684.705 L1190.58 684.705 L1191.14 684.705 L1191.7 684.705 L1192.25 684.705 L1192.81 684.705 L1193.37 684.705 L1193.93 684.705 L1194.49 684.705 L1195.05 684.705 L1195.61 684.705 L1196.17 684.705 L1196.73 684.705 L1197.29 684.705 L1197.85 684.705 L1198.41 684.705 L1198.97 684.705 L1199.52 684.705 L1200.08 684.705 L1200.64 684.705 L1201.2 684.705 L1201.76 684.705 L1202.32 684.705 L1202.88 684.705 L1203.44 684.705 L1204 684.705 L1204.56 684.705 L1205.12 684.705 L1205.68 684.705 L1206.24 684.705 L1206.8 684.705 L1207.35 684.705 L1207.91 684.705 L1208.47 684.705 L1209.03 684.705 L1209.59 684.705 L1210.15 684.705 L1210.71 684.705 L1211.27 684.705 L1211.83 684.705 L1212.39 684.705 L1212.95 684.705 L1213.51 684.705 L1214.07 684.705 L1214.62 684.705 L1215.18 684.705 L1215.74 684.705 L1216.3 684.705 L1216.86 684.705 L1217.42 684.705 L1217.98 684.705 L1218.54 684.705 L1219.1 684.705 L1219.66 684.705 L1220.22 684.705 L1220.78 684.705 L1221.34 684.705 L1221.89 684.705 L1222.45 684.705 L1223.01 684.705 L1223.57 684.705 L1224.13 684.705 L1224.69 684.705 L1225.25 684.705 L1225.81 684.705 L1226.37 684.705 L1226.93 684.705 L1227.49 684.705 L1228.05 684.705 L1228.61 684.705 L1229.17 684.705 L1229.72 684.705 L1230.28 684.705 L1230.84 684.705 L1231.4 684.705 L1231.96 684.705 L1232.52 684.705 L1233.08 684.705 L1233.64 684.705 L1234.2 684.705 L1234.76 684.705 L1235.32 684.705 L1235.88 684.705 L1236.44 684.705 L1236.99 684.705 L1237.55 684.705 L1238.11 684.705 L1238.67 684.705 L1239.23 684.705 L1239.79 684.705 L1240.35 684.705 L1240.91 684.705 L1241.47 684.705 L1242.03 684.705 L1242.59 684.705 L1243.15 684.705 L1243.71 684.705 L1244.26 684.705 L1244.82 684.705 L1245.38 684.705 L1245.94 684.705 L1246.5 684.705 L1247.06 684.705 L1247.62 684.705 L1248.18 684.705 L1248.74 684.705 L1249.3 684.705 L1249.86 684.705 L1250.42 684.705 L1250.98 684.705 L1251.54 684.705 L1252.09 684.705 L1252.65 684.705 L1253.21 684.705 L1253.77 684.705 L1254.33 684.705 L1254.89 684.705 L1255.45 684.705 L1256.01 684.705 L1256.57 684.705 L1257.13 684.705 L1257.69 684.705 L1258.25 684.705 L1258.81 684.705 L1259.36 684.705 L1259.92 684.705 L1260.48 684.705 L1261.04 684.705 L1261.6 684.705 L1262.16 684.705 L1262.72 684.705 L1263.28 684.705 L1263.84 684.705 L1264.4 684.705 L1264.96 684.705 L1265.52 684.705 L1266.08 684.705 L1266.63 684.705 L1267.19 684.705 L1267.75 684.705 L1268.31 684.705 L1268.87 684.705 L1269.43 684.705 L1269.99 684.705 L1270.55 684.705 L1271.11 684.705 L1271.67 684.705 L1272.23 684.705 L1272.79 684.705 L1273.35 684.705 L1273.91 684.705 L1274.46 684.705 L1275.02 684.705 L1275.58 684.705 L1276.14 684.705 L1276.7 684.705 L1277.26 684.705 L1277.82 684.705 L1278.38 684.705 L1278.94 684.705 L1279.5 684.705 L1280.06 684.705 L1280.62 684.705 L1281.18 684.705 L1281.73 684.705 L1282.29 684.705 L1282.85 684.705 L1283.41 684.705 L1283.97 684.705 L1284.53 684.705 L1285.09 684.705 L1285.65 684.705 L1286.21 684.705 L1286.77 684.705 L1287.33 684.705 L1287.89 684.705 L1288.45 684.705 L1289 684.705 L1289.56 684.705 L1290.12 684.705 L1290.68 684.705 L1291.24 684.705 L1291.8 684.705 L1292.36 684.705 L1292.92 684.705 L1293.48 684.705 L1294.04 684.705 L1294.6 684.705 L1295.16 684.705 L1295.72 684.705 L1296.28 684.705 L1296.83 684.705 L1297.39 684.705 L1297.95 684.705 L1298.51 684.705 L1299.07 684.705 L1299.63 684.705 L1300.19 684.705 L1300.75 684.705 L1301.31 684.705 L1301.87 684.705 L1302.43 684.705 L1302.99 684.705 L1303.55 684.705 L1304.1 684.705 L1304.66 684.705 L1305.22 684.705 L1305.78 684.705 L1306.34 684.705 L1306.9 684.705 L1307.46 684.705 L1308.02 684.705 L1308.58 684.705 L1309.14 684.705 L1309.7 684.705 L1310.26 684.705 L1310.82 684.705 L1311.38 684.705 L1311.93 684.705 L1312.49 684.705 L1313.05 684.705 L1313.61 684.705 L1314.17 684.705 L1314.73 684.705 L1315.29 684.705 L1315.85 684.705 L1316.41 684.705 L1316.97 684.705 L1317.53 684.705 L1318.09 684.705 L1318.65 684.705 L1319.2 684.705 L1319.76 684.705 L1320.32 684.705 L1320.88 684.705 L1321.44 684.705 L1322 684.705 L1322.56 684.705 L1323.12 684.705 L1323.68 684.705 L1324.24 684.705 L1324.8 684.705 L1325.36 684.705 L1325.92 684.705 L1326.47 684.705 L1327.03 684.705 L1327.59 684.705 L1328.15 684.705 L1328.71 684.705 L1329.27 684.705 L1329.83 684.705 L1330.39 684.705 L1330.95 684.705 L1331.51 684.705 L1332.07 684.705 L1332.63 684.705 L1333.19 684.705 L1333.75 684.705 L1334.3 684.705 L1334.86 684.705 L1335.42 684.705 L1335.98 684.705 L1336.54 684.705 L1337.1 684.705 L1337.66 684.705 L1338.22 684.705 L1338.78 684.705 L1339.34 684.705 L1339.9 684.705 L1340.46 684.705 L1341.02 684.705 L1341.57 684.705 L1342.13 684.705 L1342.69 684.705 L1343.25 684.705 L1343.81 684.705 L1344.37 684.705 L1344.93 684.705 L1345.49 684.705 L1346.05 684.705 L1346.61 684.705 L1347.17 684.705 L1347.73 684.705 L1348.29 684.705 L1348.84 684.705 L1349.4 684.705 L1349.96 684.705 L1350.52 684.705 L1351.08 684.705 L1351.64 684.705 L1352.2 684.705 L1352.76 684.705 L1353.32 684.705 L1353.88 684.705 L1354.44 684.705 L1355 684.705 L1355.56 684.705 L1356.12 684.705 L1356.67 684.705 L1357.23 684.705 L1357.79 684.705 L1358.35 684.705 L1358.91 684.705 L1359.47 684.705 L1360.03 684.705 L1360.59 684.705 L1361.15 684.705 L1361.71 684.705 L1362.27 684.705 L1362.83 684.705 L1363.39 684.705 L1363.94 684.705 L1364.5 684.705 L1365.06 684.705 L1365.62 684.705 L1366.18 684.705 L1366.74 684.705 L1367.3 684.705 L1367.86 684.705 L1368.42 684.705 L1368.98 684.705 L1369.54 684.705 L1370.1 684.705 L1370.66 684.705 L1371.21 684.705 L1371.77 684.705 L1372.33 684.705 L1372.89 684.705 L1373.45 684.705 L1374.01 684.705 L1374.57 684.705 L1375.13 684.705 L1375.69 684.705 L1376.25 684.705 L1376.81 684.705 L1377.37 684.705 L1377.93 684.705 L1378.49 684.705 L1379.04 684.705 L1379.6 684.705 L1380.16 684.705 L1380.72 684.705 L1381.28 684.705 L1381.84 684.705 L1382.4 684.705 L1382.96 684.705 L1383.52 684.705 L1384.08 684.705 L1384.64 684.705 L1385.2 684.705 L1385.76 684.705 L1386.31 684.705 L1386.87 684.705 L1387.43 684.705 L1387.99 684.705 L1388.55 684.705 L1389.11 684.705 L1389.67 684.705 L1390.23 684.705 L1390.79 684.705 L1391.35 684.705 L1391.91 684.705 L1392.47 684.705 L1393.03 684.705 L1393.58 684.705 L1394.14 684.705 L1394.7 684.705 L1395.26 684.705 L1395.82 684.705 L1396.38 684.705 L1396.94 684.705 L1397.5 684.705 L1398.06 684.705 L1398.62 684.705 L1399.18 684.705 L1399.74 684.705 L1400.3 684.705 L1400.86 684.705 L1401.41 684.705 L1401.97 684.705 L1402.53 684.705 L1403.09 684.705 L1403.65 684.705 L1404.21 684.705 L1404.77 684.705 L1405.33 684.705 L1405.89 684.705 L1406.45 684.705 L1407.01 684.705 L1407.57 684.705 L1408.13 684.705 L1408.68 684.705 L1409.24 684.705 L1409.8 684.705 L1410.36 684.705 L1410.92 684.705 L1411.48 684.705 L1412.04 684.705 L1412.6 684.705 L1413.16 684.705 L1413.72 684.705 L1414.28 684.705 L1414.84 684.705 L1415.4 684.705 L1415.95 684.705 L1416.51 684.705 L1417.07 684.705 L1417.63 684.705 L1418.19 684.705 L1418.75 684.705 L1419.31 684.705 L1419.87 684.705 L1420.43 684.705 L1420.99 684.705 L1421.55 684.705 L1422.11 684.705 L1422.67 684.705 L1423.23 684.705 L1423.78 684.705 L1424.34 684.705 L1424.9 684.705 L1425.46 684.705 L1426.02 684.705 L1426.58 684.705 L1427.14 684.705 L1427.7 684.705 L1428.26 684.705 L1428.82 684.705 L1429.38 684.705 L1429.94 684.705 L1430.5 684.705 L1431.05 684.705 L1431.61 684.705 L1432.17 684.705 L1432.73 684.705 L1433.29 684.705 L1433.85 684.705 L1434.41 684.705 L1434.97 684.705 L1435.53 684.705 L1436.09 684.705 L1436.65 684.705 L1437.21 684.705 L1437.77 684.705 L1438.33 684.705 L1438.88 684.705 L1439.44 684.705 L1440 684.705 L1440.56 684.705 L1441.12 684.705 L1441.68 684.705 L1442.24 684.705 L1442.8 684.705 L1443.36 684.705 L1443.92 684.705 L1444.48 684.705 L1445.04 684.705 L1445.6 684.705 L1446.15 684.705 L1446.71 684.705 L1447.27 684.705 L1447.83 684.705 L1448.39 684.705 L1448.95 684.705 L1449.51 684.705 L1450.07 684.705 L1450.63 684.705 L1451.19 684.705 L1451.75 684.705 L1452.31 684.705 L1452.87 684.705 L1453.42 684.705 L1453.98 684.705 L1454.54 684.705 L1455.1 684.705 L1455.66 684.705 L1456.22 684.705 L1456.78 684.705 L1457.34 684.705 L1457.9 684.705 L1458.46 684.705 L1459.02 684.705 L1459.58 684.705 L1460.14 684.705 L1460.7 684.705 L1461.25 684.705 L1461.81 684.705 L1462.37 684.705 L1462.93 684.705 L1463.49 684.705 L1464.05 684.705 L1464.61 684.705 L1465.17 684.705 L1465.73 684.705 L1466.29 684.705 L1466.85 684.705 L1467.41 684.705 L1467.97 684.705 L1468.52 684.705 L1469.08 684.705 L1469.64 684.705 L1470.2 684.705 L1470.76 684.705 L1471.32 684.705 L1471.88 684.705 L1472.44 684.705 L1473 684.705 L1473.56 684.705 L1474.12 684.705 L1474.68 684.705 L1475.24 684.705 L1475.79 684.705 L1476.35 684.705 L1476.91 684.705 L1477.47 684.705 L1478.03 684.705 L1478.59 684.705 L1479.15 684.705 L1479.71 684.705 L1480.27 684.705 L1480.83 684.705 L1481.39 684.705 L1481.95 684.705 L1482.51 684.705 L1483.07 684.705 L1483.62 684.705 L1484.18 684.705 L1484.74 684.705 L1485.3 684.705 L1485.86 684.705 L1486.42 684.705 L1486.98 684.705 L1487.54 684.705 L1488.1 684.705 L1488.66 684.705 L1489.22 684.705 L1489.78 684.705 L1490.34 684.705 L1490.89 684.705 L1491.45 684.705 L1492.01 684.705 L1492.57 684.705 L1493.13 684.705 L1493.69 684.705 L1494.25 684.705 L1494.81 684.705 L1495.37 684.705 L1495.93 684.705 L1496.49 684.705 L1497.05 684.705 L1497.61 684.705 L1498.16 684.705 L1498.72 684.705 L1499.28 684.705 L1499.84 684.705 L1500.4 684.705 L1500.96 684.705 L1501.52 684.705 L1502.08 684.705 L1502.64 684.705 L1503.2 684.705 L1503.76 684.705 L1504.32 684.705 L1504.88 684.705 L1505.44 684.705 L1505.99 684.705 L1506.55 684.705 L1507.11 684.705 L1507.67 684.705 L1508.23 684.705 L1508.79 684.705 L1509.35 684.705 L1509.91 684.705 L1510.47 684.705 L1511.03 684.705 L1511.59 684.705 L1512.15 684.705 L1512.71 684.705 L1513.26 684.705 L1513.82 684.705 L1514.38 684.705 L1514.94 684.705 L1515.5 684.705 L1516.06 684.705 L1516.62 684.705 L1517.18 684.705 L1517.74 684.705 L1518.3 684.705 L1518.86 684.705 L1519.42 684.705 L1519.98 684.705 L1520.53 684.705 L1521.09 684.705 L1521.65 684.705 L1522.21 684.705 L1522.77 684.705 L1523.33 684.705 L1523.89 684.705 L1524.45 684.705 L1525.01 684.705 L1525.57 684.705 L1526.13 684.705 L1526.69 684.705 L1527.25 684.705 L1527.81 684.705 L1528.36 684.705 L1528.92 684.705 L1529.48 684.705 L1530.04 684.705 L1530.6 684.705 L1531.16 684.705 L1531.72 684.705 L1532.28 684.705 L1532.84 684.705 L1533.4 684.705 L1533.96 684.705 L1534.52 684.705 L1535.08 684.705 L1535.63 684.705 L1536.19 684.705 L1536.75 684.705 L1537.31 684.705 L1537.87 684.705 L1538.43 684.705 L1538.99 684.705 L1539.55 684.705 L1540.11 684.705 L1540.67 684.705 L1541.23 684.705 L1541.79 684.705 L1542.35 684.705 L1542.9 684.705 L1543.46 684.705 L1544.02 684.705 L1544.58 684.705 L1545.14 684.705 L1545.7 684.705 L1546.26 684.705 L1546.82 684.705 L1547.38 684.705 L1547.94 684.705 L1548.5 684.705 L1549.06 684.705 L1549.62 684.705 L1550.18 684.705 L1550.73 684.705 L1551.29 684.705 L1551.85 684.705 L1552.41 684.705 L1552.97 684.705 L1553.53 684.705 L1554.09 684.705 L1554.65 684.705 L1555.21 684.705 L1555.77 684.705 L1556.33 684.705 L1556.89 684.705 L1557.45 684.705 L1558 684.705 L1558.56 684.705 L1559.12 684.705 L1559.68 684.705 L1560.24 684.705 L1560.8 684.705 L1561.36 684.705 L1561.92 684.705 L1562.48 684.705 L1563.04 684.705 L1563.6 684.705 L1564.16 684.705 L1564.72 684.705 L1565.28 684.705 L1565.83 684.705 L1566.39 684.705 L1566.95 684.705 L1567.51 684.705 L1568.07 684.705 L1568.63 684.705 L1569.19 684.705 L1569.75 684.705 L1570.31 684.705 L1570.87 684.705 L1571.43 684.705 L1571.99 684.705 L1572.55 684.705 L1573.1 684.705 L1573.66 684.705 L1574.22 684.705 L1574.78 684.705 L1575.34 684.705 L1575.9 684.705 L1576.46 684.705 L1577.02 684.705 L1577.58 684.705 L1578.14 684.705 L1578.7 684.705 L1579.26 684.705 L1579.82 684.705 L1580.37 684.705 L1580.93 684.705 L1581.49 684.705 L1582.05 684.705 L1582.61 684.705 L1583.17 684.705 L1583.73 684.705 L1584.29 684.705 L1584.85 684.705 L1585.41 684.705 L1585.97 684.705 L1586.53 684.705 L1587.09 684.705 L1587.65 684.705 L1588.2 684.705 L1588.76 684.705 L1589.32 684.705 L1589.88 684.705 L1590.44 684.705 L1591 684.705 L1591.56 684.705 L1592.12 684.705 L1592.68 684.705 L1593.24 684.705 L1593.8 684.705 L1594.36 684.705 L1594.92 684.705 L1595.47 684.705 L1596.03 684.705 L1596.59 684.705 L1597.15 684.705 L1597.71 684.705 L1598.27 684.705 L1598.83 684.705 L1599.39 684.705 L1599.95 684.705 L1600.51 684.705 L1601.07 684.705 L1601.63 684.705 L1602.19 684.705 L1602.74 684.705 L1603.3 684.705 L1603.86 684.705 L1604.42 684.705 L1604.98 684.705 L1605.54 684.705 L1606.1 684.705 L1606.66 684.705 L1607.22 684.705 L1607.78 684.705 L1608.34 684.705 L1608.9 684.705 L1609.46 684.705 L1610.02 684.705 L1610.57 684.705 L1611.13 684.705 L1611.69 684.705 L1612.25 684.705 L1612.81 684.705 L1613.37 684.705 L1613.93 684.705 L1614.49 684.705 L1615.05 684.705 L1615.61 684.705 L1616.17 684.705 L1616.73 684.705 L1617.29 684.705 L1617.84 684.705 L1618.4 684.705 L1618.96 684.705 L1619.52 684.705 L1620.08 684.705 L1620.64 684.705 L1621.2 684.705 L1621.76 684.705 L1622.32 684.705 L1622.88 684.705 L1623.44 684.705 L1624 684.705 L1624.56 684.705 L1625.11 684.705 L1625.67 684.705 L1626.23 684.705 L1626.79 684.705 L1627.35 684.705 L1627.91 684.705 L1628.47 684.705 L1629.03 684.705 L1629.59 684.705 L1630.15 684.705 L1630.71 684.705 L1631.27 684.705 L1631.83 684.705 L1632.39 684.705 L1632.94 684.705 L1633.5 684.705 L1634.06 684.705 L1634.62 684.705 L1635.18 684.705 L1635.74 684.705 L1636.3 684.705 L1636.86 684.705 L1637.42 684.705 L1637.98 684.705 L1638.54 684.705 L1639.1 684.705 L1639.66 684.705 L1640.21 684.705 L1640.77 684.705 L1641.33 684.705 L1641.89 684.705 L1642.45 684.705 L1643.01 684.705 L1643.57 684.705 L1644.13 684.705 L1644.69 684.705 L1645.25 684.705 L1645.81 684.705 L1646.37 684.705 L1646.93 684.705 L1647.48 684.705 L1648.04 684.705 L1648.6 684.705 L1649.16 684.705 L1649.72 684.705 L1650.28 684.705 L1650.84 684.705 L1651.4 684.705 L1651.96 684.705 L1652.52 684.705 L1653.08 684.705 L1653.64 684.705 L1654.2 684.705 L1654.76 684.705 L1655.31 684.705 L1655.87 684.705 L1656.43 684.705 L1656.99 684.705 L1657.55 684.705 L1658.11 684.705 L1658.67 684.705 L1659.23 684.705 L1659.79 684.705 L1660.35 684.705 L1660.91 684.705 L1661.47 684.705 L1662.03 684.705 L1662.58 684.705 L1663.14 684.705 L1663.7 684.705 L1664.26 684.705 L1664.82 684.705 L1665.38 684.705 L1665.94 684.705 L1666.5 684.705 L1667.06 684.705 L1667.62 684.705 L1668.18 684.705 L1668.74 684.705 L1669.3 684.705 L1669.85 684.705 L1670.41 684.705 L1670.97 684.705 L1671.53 684.705 L1672.09 684.705 L1672.65 684.705 L1673.21 684.705 L1673.77 684.705 L1674.33 684.705 L1674.89 684.705 L1675.45 684.705 L1676.01 684.705 L1676.57 684.705 L1677.13 684.705 L1677.68 684.705 L1678.24 684.705 L1678.8 684.705 L1679.36 684.705 L1679.92 684.705 L1680.48 684.705 L1681.04 684.705 L1681.6 684.705 L1682.16 684.705 L1682.72 684.705 L1683.28 684.705 L1683.84 684.705 L1684.4 684.705 L1684.95 684.705 L1685.51 684.705 L1686.07 684.705 L1686.63 684.705 L1687.19 684.705 L1687.75 684.705 L1688.31 684.705 L1688.87 684.705 L1689.43 684.705 L1689.99 684.705 L1690.55 684.705 L1691.11 684.705 L1691.67 684.705 L1692.23 684.705 L1692.78 684.705 L1693.34 684.705 L1693.9 684.705 L1694.46 684.705 L1695.02 684.705 L1695.58 684.705 L1696.14 684.705 L1696.7 684.705 L1697.26 684.705 L1697.82 684.705 L1698.38 684.705 L1698.94 684.705 L1699.5 684.705 L1700.05 684.705 L1700.61 684.705 L1701.17 684.705 L1701.73 684.705 L1702.29 684.705 L1702.85 684.705 L1703.41 684.705 L1703.97 684.705 L1704.53 684.705 L1705.09 684.705 L1705.65 684.705 L1706.21 684.705 L1706.77 684.705 L1707.32 684.705 L1707.88 684.705 L1708.44 684.705 L1709 684.705 L1709.56 684.705 L1710.12 684.705 L1710.68 684.705 L1711.24 684.705 L1711.8 684.705 L1712.36 684.705 L1712.92 684.705 L1713.48 684.705 L1714.04 684.705 L1714.6 684.705 L1715.15 684.705 L1715.71 684.705 L1716.27 684.705 L1716.83 684.705 L1717.39 684.705 L1717.95 684.705 L1718.51 684.705 L1719.07 684.705 L1719.63 684.705 L1720.19 684.705 L1720.75 684.705 L1721.31 684.705 L1721.87 684.705 L1722.42 684.705 L1722.98 684.705 L1723.54 684.705 L1724.1 684.705 L1724.66 684.705 L1725.22 684.705 L1725.78 684.705 L1726.34 684.705 L1726.9 684.705 L1727.46 684.705 L1728.02 684.705 L1728.58 684.705 L1729.14 684.705 L1729.69 684.705 L1730.25 684.705 L1730.81 684.705 L1731.37 684.705 L1731.93 684.705 L1732.49 684.705 L1733.05 684.705 L1733.61 684.705 L1734.17 684.705 L1734.73 684.705 L1735.29 684.705 L1735.85 684.705 L1736.41 684.705 L1736.97 684.705 L1737.52 684.705 L1738.08 684.705 L1738.64 684.705 L1739.2 684.705 L1739.76 684.705 L1740.32 684.705 L1740.88 684.705 L1741.44 684.705 L1742 684.705 L1742.56 684.705 L1743.12 684.705 L1743.68 684.705 L1744.24 684.705 L1744.79 684.705 L1745.35 684.705 L1745.91 684.705 L1746.47 684.705 L1747.03 684.705 L1747.59 684.705 L1748.15 684.705 L1748.71 684.705 L1749.27 684.705 L1749.83 684.705 L1750.39 684.705 L1750.95 684.705 L1751.51 684.705 L1752.06 684.705 L1752.62 684.705 L1753.18 684.705 L1753.74 684.705 L1754.3 684.705 L1754.86 684.705 L1755.42 684.705 L1755.98 684.705 L1756.54 684.705 L1757.1 684.705 L1757.66 684.705 L1758.22 684.705 L1758.78 684.705 L1759.34 684.705 L1759.89 684.705 L1760.45 684.705 L1761.01 684.705 L1761.57 684.705 L1762.13 684.705 L1762.69 684.705 L1763.25 684.705 L1763.81 684.705 L1764.37 684.705 L1764.93 684.705 L1765.49 684.705 L1766.05 684.705 L1766.61 684.705 L1767.16 684.705 L1767.72 684.705 L1768.28 684.705 L1768.84 684.705 L1769.4 684.705 L1769.96 684.705 L1770.52 684.705 L1771.08 684.705 L1771.64 684.705 L1772.2 684.705 L1772.76 684.705 L1773.32 684.705 L1773.88 684.705 L1774.43 684.705 L1774.99 684.705 L1775.55 684.705 L1776.11 684.705 L1776.67 684.705 L1777.23 684.705 L1777.79 684.705 L1778.35 684.705 L1778.91 684.705 L1779.47 684.705 L1780.03 684.705 L1780.59 684.705 L1781.15 684.705 L1781.71 684.705 L1782.26 684.705 L1782.82 684.705 L1783.38 684.705 L1783.94 684.705 L1784.5 684.705 L1785.06 684.705 L1785.62 684.705 L1786.18 684.705 L1786.74 684.705 L1787.3 684.705 L1787.86 684.705 L1788.42 684.705 L1788.98 684.705 L1789.53 684.705 L1790.09 684.705 L1790.65 684.705 L1791.21 684.705 L1791.77 684.705 L1792.33 684.705 L1792.89 684.705 L1793.45 684.705 L1794.01 684.705 L1794.57 684.705 L1795.13 684.705 L1795.69 684.705 L1796.25 684.705 L1796.8 684.705 L1797.36 684.705 L1797.92 684.705 L1798.48 684.705 L1799.04 684.705 L1799.6 684.705 L1800.16 684.705 L1800.72 684.705 L1801.28 684.705 L1801.84 684.705 L1802.4 684.705 L1802.96 684.705 L1803.52 684.705 L1804.08 684.705 L1804.63 684.705 L1805.19 684.705 L1805.75 684.705 L1806.31 684.705 L1806.87 684.705 L1807.43 684.705 L1807.99 684.705 L1808.55 684.705 L1809.11 684.705 L1809.67 684.705 L1810.23 684.705 L1810.79 684.705 L1811.35 684.705 L1811.9 684.705 L1812.46 684.705 L1813.02 684.705 L1813.58 684.705 L1814.14 684.705 L1814.7 684.705 L1815.26 684.705 L1815.82 684.705 L1816.38 684.705 L1816.94 684.705 L1817.5 684.705 L1818.06 684.705 L1818.62 684.705 L1819.18 684.705 L1819.73 684.705 L1820.29 684.705 L1820.85 684.705 L1821.41 684.705 L1821.97 684.705 L1822.53 684.705 L1823.09 684.705 L1823.65 684.705 L1824.21 684.705 L1824.77 684.705 L1825.33 684.705 L1825.89 684.705 L1826.45 684.705 L1827 684.705 L1827.56 684.705 L1828.12 684.705 L1828.68 684.705 L1829.24 684.705 L1829.8 684.705 L1830.36 684.705 L1830.92 684.705 L1831.48 684.705 L1832.04 684.705 L1832.6 684.705 L1833.16 684.705 L1833.72 684.705 L1834.27 684.705 L1834.83 684.705 L1835.39 684.705 L1835.95 684.705 L1836.51 684.705 L1837.07 684.705 L1837.63 684.705 L1838.19 684.705 L1838.19 682.242 L1837.63 682.242 L1837.07 682.242 L1836.51 682.242 L1835.95 682.242 L1835.39 682.242 L1834.83 682.242 L1834.27 682.242 L1833.72 682.242 L1833.16 682.242 L1832.6 682.242 L1832.04 682.242 L1831.48 682.242 L1830.92 682.242 L1830.36 682.242 L1829.8 682.242 L1829.24 682.242 L1828.68 682.242 L1828.12 682.242 L1827.56 682.242 L1827 682.242 L1826.45 682.242 L1825.89 682.242 L1825.33 682.242 L1824.77 682.242 L1824.21 682.242 L1823.65 682.242 L1823.09 682.242 L1822.53 682.242 L1821.97 682.242 L1821.41 682.242 L1820.85 682.242 L1820.29 682.242 L1819.73 682.242 L1819.18 682.242 L1818.62 682.242 L1818.06 682.242 L1817.5 682.242 L1816.94 682.242 L1816.38 682.242 L1815.82 682.242 L1815.26 682.242 L1814.7 682.242 L1814.14 682.242 L1813.58 682.242 L1813.02 682.242 L1812.46 682.242 L1811.9 682.242 L1811.35 682.242 L1810.79 682.242 L1810.23 682.242 L1809.67 682.242 L1809.11 682.242 L1808.55 682.242 L1807.99 682.242 L1807.43 682.242 L1806.87 682.242 L1806.31 682.242 L1805.75 682.242 L1805.19 682.242 L1804.63 682.242 L1804.08 682.242 L1803.52 682.242 L1802.96 682.242 L1802.4 682.242 L1801.84 682.242 L1801.28 682.242 L1800.72 682.242 L1800.16 682.242 L1799.6 682.242 L1799.04 682.242 L1798.48 682.242 L1797.92 682.242 L1797.36 682.242 L1796.8 682.242 L1796.25 682.242 L1795.69 682.242 L1795.13 682.242 L1794.57 682.242 L1794.01 682.242 L1793.45 682.242 L1792.89 682.242 L1792.33 682.242 L1791.77 682.242 L1791.21 682.242 L1790.65 682.242 L1790.09 682.242 L1789.53 682.242 L1788.98 682.242 L1788.42 682.242 L1787.86 682.242 L1787.3 682.242 L1786.74 682.242 L1786.18 682.242 L1785.62 682.242 L1785.06 682.242 L1784.5 682.242 L1783.94 682.242 L1783.38 682.242 L1782.82 682.242 L1782.26 682.242 L1781.71 682.242 L1781.15 682.242 L1780.59 682.242 L1780.03 682.242 L1779.47 682.242 L1778.91 682.242 L1778.35 682.242 L1777.79 682.242 L1777.23 682.242 L1776.67 682.242 L1776.11 682.242 L1775.55 682.242 L1774.99 682.242 L1774.43 682.242 L1773.88 682.242 L1773.32 682.242 L1772.76 682.242 L1772.2 682.242 L1771.64 682.242 L1771.08 682.242 L1770.52 682.242 L1769.96 682.242 L1769.4 682.242 L1768.84 682.242 L1768.28 682.242 L1767.72 682.242 L1767.16 682.242 L1766.61 682.242 L1766.05 682.242 L1765.49 682.242 L1764.93 682.242 L1764.37 682.242 L1763.81 682.242 L1763.25 682.242 L1762.69 682.242 L1762.13 682.242 L1761.57 682.242 L1761.01 682.242 L1760.45 682.242 L1759.89 682.242 L1759.34 682.242 L1758.78 682.242 L1758.22 682.242 L1757.66 682.242 L1757.1 682.242 L1756.54 682.242 L1755.98 682.242 L1755.42 682.242 L1754.86 682.242 L1754.3 682.242 L1753.74 682.242 L1753.18 682.242 L1752.62 682.242 L1752.06 682.242 L1751.51 682.242 L1750.95 682.242 L1750.39 682.242 L1749.83 682.242 L1749.27 682.242 L1748.71 682.242 L1748.15 682.242 L1747.59 682.242 L1747.03 682.242 L1746.47 682.242 L1745.91 682.242 L1745.35 682.242 L1744.79 682.242 L1744.24 682.242 L1743.68 682.242 L1743.12 682.242 L1742.56 682.242 L1742 682.242 L1741.44 682.242 L1740.88 682.242 L1740.32 682.242 L1739.76 682.242 L1739.2 682.242 L1738.64 682.242 L1738.08 682.242 L1737.52 682.242 L1736.97 682.242 L1736.41 682.242 L1735.85 682.242 L1735.29 682.242 L1734.73 682.242 L1734.17 682.242 L1733.61 682.242 L1733.05 682.242 L1732.49 682.242 L1731.93 682.242 L1731.37 682.242 L1730.81 682.242 L1730.25 682.242 L1729.69 682.242 L1729.14 682.242 L1728.58 682.242 L1728.02 682.242 L1727.46 682.242 L1726.9 682.242 L1726.34 682.242 L1725.78 682.242 L1725.22 682.242 L1724.66 682.242 L1724.1 682.242 L1723.54 682.242 L1722.98 682.242 L1722.42 682.242 L1721.87 682.242 L1721.31 682.242 L1720.75 682.242 L1720.19 682.242 L1719.63 682.242 L1719.07 682.242 L1718.51 682.242 L1717.95 682.242 L1717.39 682.242 L1716.83 682.242 L1716.27 682.242 L1715.71 682.242 L1715.15 682.242 L1714.6 682.242 L1714.04 682.242 L1713.48 682.242 L1712.92 682.242 L1712.36 682.242 L1711.8 682.242 L1711.24 682.242 L1710.68 682.242 L1710.12 682.242 L1709.56 682.242 L1709 682.242 L1708.44 682.242 L1707.88 682.242 L1707.32 682.242 L1706.77 682.242 L1706.21 682.242 L1705.65 682.242 L1705.09 682.242 L1704.53 682.242 L1703.97 682.242 L1703.41 682.242 L1702.85 682.242 L1702.29 682.242 L1701.73 682.242 L1701.17 682.242 L1700.61 682.242 L1700.05 682.242 L1699.5 682.242 L1698.94 682.242 L1698.38 682.242 L1697.82 682.242 L1697.26 682.242 L1696.7 682.242 L1696.14 682.242 L1695.58 682.242 L1695.02 682.242 L1694.46 682.242 L1693.9 682.242 L1693.34 682.242 L1692.78 682.242 L1692.23 682.242 L1691.67 682.242 L1691.11 682.242 L1690.55 682.242 L1689.99 682.242 L1689.43 682.242 L1688.87 682.242 L1688.31 682.242 L1687.75 682.242 L1687.19 682.242 L1686.63 682.242 L1686.07 682.242 L1685.51 682.242 L1684.95 682.242 L1684.4 682.242 L1683.84 682.242 L1683.28 682.242 L1682.72 682.242 L1682.16 682.242 L1681.6 682.242 L1681.04 682.242 L1680.48 682.242 L1679.92 682.242 L1679.36 682.242 L1678.8 682.242 L1678.24 682.242 L1677.68 682.242 L1677.13 682.242 L1676.57 682.242 L1676.01 682.242 L1675.45 682.242 L1674.89 682.242 L1674.33 682.242 L1673.77 682.242 L1673.21 682.242 L1672.65 682.242 L1672.09 682.242 L1671.53 682.242 L1670.97 682.242 L1670.41 682.242 L1669.85 682.242 L1669.3 682.242 L1668.74 682.242 L1668.18 682.242 L1667.62 682.242 L1667.06 682.242 L1666.5 682.242 L1665.94 682.242 L1665.38 682.242 L1664.82 682.242 L1664.26 682.242 L1663.7 682.242 L1663.14 682.242 L1662.58 682.242 L1662.03 682.242 L1661.47 682.242 L1660.91 682.242 L1660.35 682.242 L1659.79 682.242 L1659.23 682.242 L1658.67 682.242 L1658.11 682.242 L1657.55 682.242 L1656.99 682.242 L1656.43 682.242 L1655.87 682.242 L1655.31 682.242 L1654.76 682.242 L1654.2 682.242 L1653.64 682.242 L1653.08 682.242 L1652.52 682.242 L1651.96 682.242 L1651.4 682.242 L1650.84 682.242 L1650.28 682.242 L1649.72 682.242 L1649.16 682.242 L1648.6 682.242 L1648.04 682.242 L1647.48 682.242 L1646.93 682.242 L1646.37 682.242 L1645.81 682.242 L1645.25 682.242 L1644.69 682.242 L1644.13 682.242 L1643.57 682.242 L1643.01 682.242 L1642.45 682.242 L1641.89 682.242 L1641.33 682.242 L1640.77 682.242 L1640.21 682.242 L1639.66 682.242 L1639.1 682.242 L1638.54 682.242 L1637.98 682.242 L1637.42 682.242 L1636.86 682.242 L1636.3 682.242 L1635.74 682.242 L1635.18 682.242 L1634.62 682.242 L1634.06 682.242 L1633.5 682.242 L1632.94 682.242 L1632.39 682.242 L1631.83 682.242 L1631.27 682.242 L1630.71 682.242 L1630.15 682.242 L1629.59 682.242 L1629.03 682.242 L1628.47 682.242 L1627.91 682.242 L1627.35 682.242 L1626.79 682.242 L1626.23 682.242 L1625.67 682.242 L1625.11 682.242 L1624.56 682.242 L1624 682.242 L1623.44 682.242 L1622.88 682.242 L1622.32 682.242 L1621.76 682.242 L1621.2 682.242 L1620.64 682.242 L1620.08 682.242 L1619.52 682.242 L1618.96 682.242 L1618.4 682.242 L1617.84 682.242 L1617.29 682.242 L1616.73 682.242 L1616.17 682.242 L1615.61 682.242 L1615.05 682.242 L1614.49 682.242 L1613.93 682.242 L1613.37 682.242 L1612.81 682.242 L1612.25 682.242 L1611.69 682.242 L1611.13 682.242 L1610.57 682.242 L1610.02 682.242 L1609.46 682.242 L1608.9 682.242 L1608.34 682.242 L1607.78 682.242 L1607.22 682.242 L1606.66 682.242 L1606.1 682.242 L1605.54 682.242 L1604.98 682.242 L1604.42 682.242 L1603.86 682.242 L1603.3 682.242 L1602.74 682.242 L1602.19 682.242 L1601.63 682.242 L1601.07 682.242 L1600.51 682.242 L1599.95 682.242 L1599.39 682.242 L1598.83 682.242 L1598.27 682.242 L1597.71 682.242 L1597.15 682.242 L1596.59 682.242 L1596.03 682.242 L1595.47 682.242 L1594.92 682.242 L1594.36 682.242 L1593.8 682.242 L1593.24 682.242 L1592.68 682.242 L1592.12 682.242 L1591.56 682.242 L1591 682.242 L1590.44 682.242 L1589.88 682.242 L1589.32 682.242 L1588.76 682.242 L1588.2 682.242 L1587.65 682.242 L1587.09 682.242 L1586.53 682.242 L1585.97 682.242 L1585.41 682.242 L1584.85 682.242 L1584.29 682.242 L1583.73 682.242 L1583.17 682.242 L1582.61 682.242 L1582.05 682.242 L1581.49 682.242 L1580.93 682.242 L1580.37 682.242 L1579.82 682.242 L1579.26 682.242 L1578.7 682.242 L1578.14 682.242 L1577.58 682.242 L1577.02 682.242 L1576.46 682.242 L1575.9 682.242 L1575.34 682.242 L1574.78 682.242 L1574.22 682.242 L1573.66 682.242 L1573.1 682.242 L1572.55 682.242 L1571.99 682.242 L1571.43 682.242 L1570.87 682.242 L1570.31 682.242 L1569.75 682.242 L1569.19 682.242 L1568.63 682.242 L1568.07 682.242 L1567.51 682.242 L1566.95 682.242 L1566.39 682.242 L1565.83 682.242 L1565.28 682.242 L1564.72 682.242 L1564.16 682.242 L1563.6 682.242 L1563.04 682.242 L1562.48 682.242 L1561.92 682.242 L1561.36 682.242 L1560.8 682.242 L1560.24 682.242 L1559.68 682.242 L1559.12 682.242 L1558.56 682.242 L1558 682.242 L1557.45 682.242 L1556.89 682.242 L1556.33 682.242 L1555.77 682.242 L1555.21 682.242 L1554.65 682.242 L1554.09 682.242 L1553.53 682.242 L1552.97 682.242 L1552.41 682.242 L1551.85 682.242 L1551.29 682.242 L1550.73 682.242 L1550.18 682.242 L1549.62 682.242 L1549.06 682.242 L1548.5 682.242 L1547.94 682.242 L1547.38 682.242 L1546.82 682.242 L1546.26 682.242 L1545.7 682.242 L1545.14 682.242 L1544.58 682.242 L1544.02 682.242 L1543.46 682.242 L1542.9 682.242 L1542.35 682.242 L1541.79 682.242 L1541.23 682.242 L1540.67 682.242 L1540.11 682.242 L1539.55 682.242 L1538.99 682.242 L1538.43 682.242 L1537.87 682.242 L1537.31 682.242 L1536.75 682.242 L1536.19 682.242 L1535.63 682.242 L1535.08 682.242 L1534.52 682.242 L1533.96 682.242 L1533.4 682.242 L1532.84 682.242 L1532.28 682.242 L1531.72 682.242 L1531.16 682.242 L1530.6 682.242 L1530.04 682.242 L1529.48 682.242 L1528.92 682.242 L1528.36 682.242 L1527.81 682.242 L1527.25 682.242 L1526.69 682.242 L1526.13 682.242 L1525.57 682.242 L1525.01 682.242 L1524.45 682.242 L1523.89 682.242 L1523.33 682.242 L1522.77 682.242 L1522.21 682.242 L1521.65 682.242 L1521.09 682.242 L1520.53 682.242 L1519.98 682.242 L1519.42 682.242 L1518.86 682.242 L1518.3 682.242 L1517.74 682.242 L1517.18 682.242 L1516.62 682.242 L1516.06 682.242 L1515.5 682.242 L1514.94 682.242 L1514.38 682.242 L1513.82 682.242 L1513.26 682.242 L1512.71 682.242 L1512.15 682.242 L1511.59 682.242 L1511.03 682.242 L1510.47 682.242 L1509.91 682.242 L1509.35 682.242 L1508.79 682.242 L1508.23 682.242 L1507.67 682.242 L1507.11 682.242 L1506.55 682.242 L1505.99 682.242 L1505.44 682.242 L1504.88 682.242 L1504.32 682.242 L1503.76 682.242 L1503.2 682.242 L1502.64 682.242 L1502.08 682.242 L1501.52 682.242 L1500.96 682.242 L1500.4 682.242 L1499.84 682.242 L1499.28 682.242 L1498.72 682.242 L1498.16 682.242 L1497.61 682.242 L1497.05 682.242 L1496.49 682.242 L1495.93 682.242 L1495.37 682.242 L1494.81 682.242 L1494.25 682.242 L1493.69 682.242 L1493.13 682.242 L1492.57 682.242 L1492.01 682.242 L1491.45 682.242 L1490.89 682.242 L1490.34 682.242 L1489.78 682.242 L1489.22 682.242 L1488.66 682.242 L1488.1 682.242 L1487.54 682.242 L1486.98 682.242 L1486.42 682.242 L1485.86 682.242 L1485.3 682.242 L1484.74 682.242 L1484.18 682.242 L1483.62 682.242 L1483.07 682.242 L1482.51 682.242 L1481.95 682.242 L1481.39 682.242 L1480.83 682.242 L1480.27 682.242 L1479.71 682.242 L1479.15 682.242 L1478.59 682.242 L1478.03 682.242 L1477.47 682.242 L1476.91 682.242 L1476.35 682.242 L1475.79 682.242 L1475.24 682.242 L1474.68 682.242 L1474.12 682.242 L1473.56 682.242 L1473 682.242 L1472.44 682.242 L1471.88 682.242 L1471.32 682.242 L1470.76 682.242 L1470.2 682.242 L1469.64 682.242 L1469.08 682.242 L1468.52 682.242 L1467.97 682.242 L1467.41 682.242 L1466.85 682.242 L1466.29 682.242 L1465.73 682.242 L1465.17 682.242 L1464.61 682.242 L1464.05 682.242 L1463.49 682.242 L1462.93 682.242 L1462.37 682.242 L1461.81 682.242 L1461.25 682.242 L1460.7 682.242 L1460.14 682.242 L1459.58 682.242 L1459.02 682.242 L1458.46 682.242 L1457.9 682.242 L1457.34 682.242 L1456.78 682.242 L1456.22 682.242 L1455.66 682.242 L1455.1 682.242 L1454.54 682.242 L1453.98 682.242 L1453.42 682.242 L1452.87 682.242 L1452.31 682.242 L1451.75 682.242 L1451.19 682.242 L1450.63 682.242 L1450.07 682.242 L1449.51 682.242 L1448.95 682.242 L1448.39 682.242 L1447.83 682.242 L1447.27 682.242 L1446.71 682.242 L1446.15 682.242 L1445.6 682.242 L1445.04 682.242 L1444.48 682.242 L1443.92 682.242 L1443.36 682.242 L1442.8 682.242 L1442.24 682.242 L1441.68 682.242 L1441.12 682.242 L1440.56 682.242 L1440 682.242 L1439.44 682.242 L1438.88 682.242 L1438.33 682.242 L1437.77 682.242 L1437.21 682.242 L1436.65 682.242 L1436.09 682.242 L1435.53 682.242 L1434.97 682.242 L1434.41 682.242 L1433.85 682.242 L1433.29 682.242 L1432.73 682.242 L1432.17 682.242 L1431.61 682.242 L1431.05 682.242 L1430.5 682.242 L1429.94 682.242 L1429.38 682.242 L1428.82 682.242 L1428.26 682.242 L1427.7 682.242 L1427.14 682.242 L1426.58 682.242 L1426.02 682.242 L1425.46 682.242 L1424.9 682.242 L1424.34 682.242 L1423.78 682.242 L1423.23 682.242 L1422.67 682.242 L1422.11 682.242 L1421.55 682.242 L1420.99 682.242 L1420.43 682.242 L1419.87 682.242 L1419.31 682.242 L1418.75 682.242 L1418.19 682.242 L1417.63 682.242 L1417.07 682.242 L1416.51 682.242 L1415.95 682.242 L1415.4 682.242 L1414.84 682.242 L1414.28 682.242 L1413.72 682.242 L1413.16 682.242 L1412.6 682.242 L1412.04 682.242 L1411.48 682.242 L1410.92 682.242 L1410.36 682.242 L1409.8 682.242 L1409.24 682.242 L1408.68 682.242 L1408.13 682.242 L1407.57 682.242 L1407.01 682.242 L1406.45 682.242 L1405.89 682.242 L1405.33 682.242 L1404.77 682.242 L1404.21 682.242 L1403.65 682.242 L1403.09 682.242 L1402.53 682.242 L1401.97 682.242 L1401.41 682.242 L1400.86 682.242 L1400.3 682.242 L1399.74 682.242 L1399.18 682.242 L1398.62 682.242 L1398.06 682.242 L1397.5 682.242 L1396.94 682.242 L1396.38 682.242 L1395.82 682.242 L1395.26 682.242 L1394.7 682.242 L1394.14 682.242 L1393.58 682.242 L1393.03 682.242 L1392.47 682.242 L1391.91 682.242 L1391.35 682.242 L1390.79 682.242 L1390.23 682.242 L1389.67 682.242 L1389.11 682.242 L1388.55 682.242 L1387.99 682.242 L1387.43 682.242 L1386.87 682.242 L1386.31 682.242 L1385.76 682.242 L1385.2 682.242 L1384.64 682.242 L1384.08 682.242 L1383.52 682.242 L1382.96 682.242 L1382.4 682.242 L1381.84 682.242 L1381.28 682.242 L1380.72 682.242 L1380.16 682.242 L1379.6 682.242 L1379.04 682.242 L1378.49 682.242 L1377.93 682.242 L1377.37 682.242 L1376.81 682.242 L1376.25 682.242 L1375.69 682.242 L1375.13 682.242 L1374.57 682.242 L1374.01 682.242 L1373.45 682.242 L1372.89 682.242 L1372.33 682.242 L1371.77 682.242 L1371.21 682.242 L1370.66 682.242 L1370.1 682.242 L1369.54 682.242 L1368.98 682.242 L1368.42 682.242 L1367.86 682.242 L1367.3 682.242 L1366.74 682.242 L1366.18 682.242 L1365.62 682.242 L1365.06 682.242 L1364.5 682.242 L1363.94 682.242 L1363.39 682.242 L1362.83 682.242 L1362.27 682.242 L1361.71 682.242 L1361.15 682.242 L1360.59 682.242 L1360.03 682.242 L1359.47 682.242 L1358.91 682.242 L1358.35 682.242 L1357.79 682.242 L1357.23 682.242 L1356.67 682.242 L1356.12 682.242 L1355.56 682.242 L1355 682.242 L1354.44 682.242 L1353.88 682.242 L1353.32 682.242 L1352.76 682.242 L1352.2 682.242 L1351.64 682.242 L1351.08 682.242 L1350.52 682.242 L1349.96 682.242 L1349.4 682.242 L1348.84 682.242 L1348.29 682.242 L1347.73 682.242 L1347.17 682.242 L1346.61 682.242 L1346.05 682.242 L1345.49 682.242 L1344.93 682.242 L1344.37 682.242 L1343.81 682.242 L1343.25 682.242 L1342.69 682.242 L1342.13 682.242 L1341.57 682.242 L1341.02 682.242 L1340.46 682.242 L1339.9 682.242 L1339.34 682.242 L1338.78 682.242 L1338.22 682.242 L1337.66 682.242 L1337.1 682.242 L1336.54 682.242 L1335.98 682.242 L1335.42 682.242 L1334.86 682.242 L1334.3 682.242 L1333.75 682.242 L1333.19 682.242 L1332.63 682.242 L1332.07 682.242 L1331.51 682.242 L1330.95 682.242 L1330.39 682.242 L1329.83 682.242 L1329.27 682.242 L1328.71 682.242 L1328.15 682.242 L1327.59 682.242 L1327.03 682.242 L1326.47 682.242 L1325.92 682.242 L1325.36 682.242 L1324.8 682.242 L1324.24 682.242 L1323.68 682.242 L1323.12 682.242 L1322.56 682.242 L1322 682.242 L1321.44 682.242 L1320.88 682.242 L1320.32 682.242 L1319.76 682.242 L1319.2 682.242 L1318.65 682.242 L1318.09 682.242 L1317.53 682.242 L1316.97 682.242 L1316.41 682.242 L1315.85 682.242 L1315.29 682.242 L1314.73 682.242 L1314.17 682.242 L1313.61 682.242 L1313.05 682.242 L1312.49 682.242 L1311.93 682.242 L1311.38 682.242 L1310.82 682.242 L1310.26 682.242 L1309.7 682.242 L1309.14 682.242 L1308.58 682.242 L1308.02 682.242 L1307.46 682.242 L1306.9 682.242 L1306.34 682.242 L1305.78 682.242 L1305.22 682.242 L1304.66 682.242 L1304.1 682.242 L1303.55 682.242 L1302.99 682.242 L1302.43 682.242 L1301.87 682.242 L1301.31 682.242 L1300.75 682.242 L1300.19 682.242 L1299.63 682.242 L1299.07 682.242 L1298.51 682.242 L1297.95 682.242 L1297.39 682.242 L1296.83 682.242 L1296.28 682.242 L1295.72 682.242 L1295.16 682.242 L1294.6 682.242 L1294.04 682.242 L1293.48 682.242 L1292.92 682.242 L1292.36 682.242 L1291.8 682.242 L1291.24 682.242 L1290.68 682.242 L1290.12 682.242 L1289.56 682.242 L1289 682.242 L1288.45 682.242 L1287.89 682.242 L1287.33 682.242 L1286.77 682.242 L1286.21 682.242 L1285.65 682.242 L1285.09 682.242 L1284.53 682.242 L1283.97 682.242 L1283.41 682.242 L1282.85 682.242 L1282.29 682.242 L1281.73 682.242 L1281.18 682.242 L1280.62 682.242 L1280.06 682.242 L1279.5 682.242 L1278.94 682.242 L1278.38 682.242 L1277.82 682.242 L1277.26 682.242 L1276.7 682.242 L1276.14 682.242 L1275.58 682.242 L1275.02 682.242 L1274.46 682.242 L1273.91 682.242 L1273.35 682.242 L1272.79 682.242 L1272.23 682.242 L1271.67 682.242 L1271.11 682.242 L1270.55 682.242 L1269.99 682.242 L1269.43 682.242 L1268.87 682.242 L1268.31 682.242 L1267.75 682.242 L1267.19 682.242 L1266.63 682.242 L1266.08 682.242 L1265.52 682.242 L1264.96 682.242 L1264.4 682.242 L1263.84 682.242 L1263.28 682.242 L1262.72 682.242 L1262.16 682.242 L1261.6 682.242 L1261.04 682.242 L1260.48 682.242 L1259.92 682.242 L1259.36 682.242 L1258.81 682.242 L1258.25 682.242 L1257.69 682.242 L1257.13 682.242 L1256.57 682.242 L1256.01 682.242 L1255.45 682.242 L1254.89 682.242 L1254.33 682.242 L1253.77 682.242 L1253.21 682.242 L1252.65 682.242 L1252.09 682.242 L1251.54 682.242 L1250.98 682.242 L1250.42 682.242 L1249.86 682.242 L1249.3 682.242 L1248.74 682.242 L1248.18 682.242 L1247.62 682.242 L1247.06 682.242 L1246.5 682.242 L1245.94 682.242 L1245.38 682.242 L1244.82 682.242 L1244.26 682.242 L1243.71 682.242 L1243.15 682.242 L1242.59 682.242 L1242.03 682.242 L1241.47 682.242 L1240.91 682.242 L1240.35 682.242 L1239.79 682.242 L1239.23 682.242 L1238.67 682.242 L1238.11 682.242 L1237.55 682.242 L1236.99 682.242 L1236.44 682.242 L1235.88 682.242 L1235.32 682.242 L1234.76 682.242 L1234.2 682.242 L1233.64 682.242 L1233.08 682.242 L1232.52 682.242 L1231.96 682.242 L1231.4 682.242 L1230.84 682.242 L1230.28 682.242 L1229.72 682.242 L1229.17 682.242 L1228.61 682.242 L1228.05 682.242 L1227.49 682.242 L1226.93 682.242 L1226.37 682.242 L1225.81 682.242 L1225.25 682.242 L1224.69 682.242 L1224.13 682.242 L1223.57 682.242 L1223.01 682.242 L1222.45 682.242 L1221.89 682.242 L1221.34 682.242 L1220.78 682.242 L1220.22 682.242 L1219.66 682.242 L1219.1 682.242 L1218.54 682.242 L1217.98 682.242 L1217.42 682.242 L1216.86 682.242 L1216.3 682.242 L1215.74 682.242 L1215.18 682.242 L1214.62 682.242 L1214.07 682.242 L1213.51 682.242 L1212.95 682.242 L1212.39 682.242 L1211.83 682.242 L1211.27 682.242 L1210.71 682.242 L1210.15 682.242 L1209.59 682.242 L1209.03 682.242 L1208.47 682.242 L1207.91 682.242 L1207.35 682.242 L1206.8 682.242 L1206.24 682.242 L1205.68 682.242 L1205.12 682.242 L1204.56 682.242 L1204 682.242 L1203.44 682.242 L1202.88 682.242 L1202.32 682.242 L1201.76 682.242 L1201.2 682.242 L1200.64 682.242 L1200.08 682.242 L1199.52 682.242 L1198.97 682.242 L1198.41 682.242 L1197.85 682.242 L1197.29 682.242 L1196.73 682.242 L1196.17 682.242 L1195.61 682.242 L1195.05 682.242 L1194.49 682.242 L1193.93 682.242 L1193.37 682.242 L1192.81 682.242 L1192.25 682.242 L1191.7 682.242 L1191.14 682.242 L1190.58 682.242 L1190.02 682.242 L1189.46 682.242 L1188.9 682.242 L1188.34 682.242 L1187.78 682.242 L1187.22 682.242 L1186.66 682.242 L1186.1 682.242 L1185.54 682.242 L1184.98 682.242 L1184.43 682.242 L1183.87 682.242 L1183.31 682.242 L1182.75 682.242 L1182.19 682.242 L1181.63 682.242 L1181.07 682.242 L1180.51 682.242 L1179.95 682.242 L1179.39 682.242 L1178.83 682.242 L1178.27 682.242 L1177.71 682.242 L1177.15 682.242 L1176.6 682.242 L1176.04 682.242 L1175.48 682.242 L1174.92 682.242 L1174.36 682.242 L1173.8 682.242 L1173.24 682.242 L1172.68 682.242 L1172.12 682.242 L1171.56 682.242 L1171 682.242 L1170.44 682.242 L1169.88 682.242 L1169.33 682.242 L1168.77 682.242 L1168.21 682.242 L1167.65 682.242 L1167.09 682.242 L1166.53 682.242 L1165.97 682.242 L1165.41 682.242 L1164.85 682.242 L1164.29 682.242 L1163.73 682.242 L1163.17 682.242 L1162.61 682.242 L1162.05 682.242 L1161.5 682.242 L1160.94 682.242 L1160.38 682.242 L1159.82 682.242 L1159.26 682.242 L1158.7 682.242 L1158.14 682.242 L1157.58 682.242 L1157.02 682.242 L1156.46 682.242 L1155.9 682.242 L1155.34 682.242 L1154.78 682.242 L1154.23 682.242 L1153.67 682.242 L1153.11 682.242 L1152.55 682.242 L1151.99 682.242 L1151.43 682.242 L1150.87 682.242 L1150.31 682.242 L1149.75 682.242 L1149.19 682.242 L1148.63 682.242 L1148.07 682.242 L1147.51 682.242 L1146.96 682.242 L1146.4 682.242 L1145.84 682.242 L1145.28 682.242 L1144.72 682.242 L1144.16 682.242 L1143.6 682.242 L1143.04 682.242 L1142.48 682.242 L1141.92 682.242 L1141.36 682.242 L1140.8 682.242 L1140.24 682.242 L1139.68 682.242 L1139.13 682.242 L1138.57 682.242 L1138.01 682.242 L1137.45 682.242 L1136.89 682.242 L1136.33 682.242 L1135.77 682.242 L1135.21 682.242 L1134.65 682.242 L1134.09 682.242 L1133.53 682.242 L1132.97 682.242 L1132.41 682.242 L1131.86 682.242 L1131.3 682.242 L1130.74 682.242 L1130.18 682.242 L1129.62 682.242 L1129.06 682.242 L1128.5 682.242 L1127.94 682.242 L1127.38 682.242 L1126.82 682.242 L1126.26 682.242 L1125.7 682.242 L1125.14 682.242 L1124.59 682.242 L1124.03 682.242 L1123.47 682.242 L1122.91 682.242 L1122.35 682.242 L1121.79 682.242 L1121.23 682.242 L1120.67 682.242 L1120.11 682.242 L1119.55 682.242 L1118.99 682.242 L1118.43 682.242 L1117.87 682.242 L1117.31 682.242 L1116.76 682.242 L1116.2 682.242 L1115.64 682.242 L1115.08 682.242 L1114.52 682.242 L1113.96 682.242 L1113.4 682.242 L1112.84 682.242 L1112.28 682.242 L1111.72 682.242 L1111.16 682.242 L1110.6 682.242 L1110.04 682.242 L1109.49 682.242 L1108.93 682.242 L1108.37 682.242 L1107.81 682.242 L1107.25 682.242 L1106.69 682.242 L1106.13 682.242 L1105.57 682.242 L1105.01 682.242 L1104.45 682.242 L1103.89 682.242 L1103.33 682.242 L1102.77 682.242 L1102.22 682.242 L1101.66 682.242 L1101.1 682.242 L1100.54 682.242 L1099.98 682.242 L1099.42 682.242 L1098.86 682.242 L1098.3 682.242 L1097.74 682.242 L1097.18 682.242 L1096.62 682.242 L1096.06 682.242 L1095.5 682.242 L1094.94 682.242 L1094.39 682.242 L1093.83 682.242 L1093.27 682.242 L1092.71 682.242 L1092.15 682.242 L1091.59 682.242 L1091.03 682.242 L1090.47 682.242 L1089.91 682.242 L1089.35 682.242 L1088.79 682.242 L1088.23 682.242 L1087.67 682.242 L1087.12 682.242 L1086.56 682.242 L1086 682.242 L1085.44 682.242 L1084.88 682.242 L1084.32 682.242 L1083.76 682.242 L1083.2 682.242 L1082.64 682.242 L1082.08 682.242 L1081.52 682.242 L1080.96 682.242 L1080.4 682.242 L1079.85 682.242 L1079.29 682.242 L1078.73 682.242 L1078.17 682.242 L1077.61 682.242 L1077.05 682.242 L1076.49 682.242 L1075.93 682.242 L1075.37 682.242 L1074.81 682.242 L1074.25 682.242 L1073.69 682.242 L1073.13 682.242 L1072.57 682.242 L1072.02 682.242 L1071.46 682.242 L1070.9 682.242 L1070.34 682.242 L1069.78 682.242 L1069.22 682.242 L1068.66 682.242 L1068.1 682.242 L1067.54 682.242 L1066.98 682.242 L1066.42 682.242 L1065.86 682.242 L1065.3 682.242 L1064.75 682.242 L1064.19 682.242 L1063.63 682.242 L1063.07 682.242 L1062.51 682.242 L1061.95 682.242 L1061.39 682.242 L1060.83 682.242 L1060.27 682.242 L1059.71 682.242 L1059.15 682.242 L1058.59 682.242 L1058.03 682.242 L1057.48 682.242 L1056.92 682.242 L1056.36 682.242 L1055.8 682.242 L1055.24 682.242 L1054.68 682.242 L1054.12 682.242 L1053.56 682.242 L1053 682.242 L1052.44 682.242 L1051.88 682.242 L1051.32 682.242 L1050.76 682.242 L1050.2 682.242 L1049.65 682.242 L1049.09 682.242 L1048.53 682.242 L1047.97 682.242 L1047.41 682.242 L1046.85 682.242 L1046.29 682.242 L1045.73 682.242 L1045.17 682.242 L1044.61 682.242 L1044.05 682.242 L1043.49 682.242 L1042.93 682.242 L1042.38 682.242 L1041.82 682.242 L1041.26 682.242 L1040.7 682.242 L1040.14 682.242 L1039.58 682.242 L1039.02 682.242 L1038.46 682.242 L1037.9 682.242 L1037.34 682.242 L1036.78 682.242 L1036.22 682.242 L1035.66 682.242 L1035.1 682.242 L1034.55 682.242 L1033.99 682.242 L1033.43 682.242 L1032.87 682.242 L1032.31 682.242 L1031.75 682.242 L1031.19 682.242 L1030.63 682.242 L1030.07 682.242 L1029.51 682.242 L1028.95 682.242 L1028.39 682.242 L1027.83 682.242 L1027.28 682.242 L1026.72 682.242 L1026.16 682.242 L1025.6 682.242 L1025.04 682.242 L1024.48 682.242 L1023.92 682.242 L1023.36 682.242 L1022.8 682.242 L1022.24 682.242 L1021.68 682.242 L1021.12 682.242 L1020.56 682.242 L1020.01 682.242 L1019.45 682.242 L1018.89 682.242 L1018.33 682.242 L1017.77 682.242 L1017.21 682.242 L1016.65 682.242 L1016.09 682.242 L1015.53 682.242 L1014.97 682.242 L1014.41 682.242 L1013.85 682.242 L1013.29 682.242 L1012.73 682.242 L1012.18 682.242 L1011.62 682.242 L1011.06 682.242 L1010.5 682.242 L1009.94 682.242 L1009.38 682.242 L1008.82 682.242 L1008.26 682.242 L1007.7 682.242 L1007.14 682.242 L1006.58 682.242 L1006.02 682.242 L1005.46 682.242 L1004.91 682.242 L1004.35 682.242 L1003.79 682.242 L1003.23 682.242 L1002.67 682.242 L1002.11 682.242 L1001.55 682.242 L1000.99 682.242 L1000.43 682.242 L999.872 682.242 L999.313 682.242 L998.754 682.242 L998.194 682.242 L997.635 682.242 L997.076 682.242 L996.517 682.242 L995.957 682.242 L995.398 682.242 L994.839 682.242 L994.28 682.242 L993.72 682.242 L993.161 682.242 L992.602 682.242 L992.043 682.242 L991.483 682.242 L990.924 682.242 L990.365 682.242 L989.806 682.242 L989.246 682.242 L988.687 682.242 L988.128 682.242 L987.569 682.242 L987.009 682.242 L986.45 682.242 L985.891 682.242 L985.332 682.242 L984.772 682.242 L984.213 682.242 L983.654 682.242 L983.095 682.242 L982.535 682.242 L981.976 682.242 L981.417 682.242 L980.858 682.242 L980.298 682.242 L979.739 682.242 L979.18 682.242 L978.621 682.242 L978.061 682.242 L977.502 682.242 L976.943 682.242 L976.384 682.242 L975.824 682.242 L975.265 682.242 L974.706 682.242 L974.147 682.242 L973.587 682.242 L973.028 682.242 L972.469 682.242 L971.91 682.242 L971.35 682.242 L970.791 682.242 L970.232 682.242 L969.673 682.242 L969.113 682.242 L968.554 682.242 L967.995 682.242 L967.436 682.242 L966.876 682.242 L966.317 682.242 L965.758 682.242 L965.199 682.242 L964.639 682.242 L964.08 682.242 L963.521 682.242 L962.962 682.242 L962.402 682.242 L961.843 682.242 L961.284 682.242 L960.725 682.242 L960.165 682.242 L959.606 682.242 L959.047 682.242 L958.488 682.242 L957.928 682.242 L957.369 682.242 L956.81 682.242 L956.251 682.242 L955.691 682.242 L955.132 682.242 L954.573 682.242 L954.014 682.242 L953.454 682.242 L952.895 682.242 L952.336 682.242 L951.777 682.242 L951.217 682.242 L950.658 682.242 L950.099 682.242 L949.54 682.242 L948.98 682.242 L948.421 682.242 L947.862 682.242 L947.303 682.242 L946.743 682.242 L946.184 682.242 L945.625 682.242 L945.066 682.242 L944.506 682.242 L943.947 682.242 L943.388 682.242 L942.829 682.242 L942.269 682.242 L941.71 682.242 L941.151 682.242 L940.592 682.242 L940.032 682.242 L939.473 682.242 L938.914 682.242 L938.355 682.242 L937.795 682.242 L937.236 682.242 L936.677 682.242 L936.118 682.242 L935.558 682.242 L934.999 682.242 L934.44 682.242 L933.881 682.242 L933.321 682.242 L932.762 682.242 L932.203 682.242 L931.644 682.242 L931.084 682.242 L930.525 682.242 L929.966 682.242 L929.406 682.242 L928.847 682.242 L928.288 682.242 L927.729 682.242 L927.169 682.242 L926.61 682.242 L926.051 682.242 L925.492 682.242 L924.932 682.242 L924.373 682.242 L923.814 682.242 L923.255 682.242 L922.695 682.242 L922.136 682.242 L921.577 682.242 L921.018 682.242 L920.458 682.242 L919.899 682.242 L919.34 682.242 L918.781 682.242 L918.221 682.242 L917.662 682.242 L917.103 682.242 L916.544 682.242 L915.984 682.242 L915.425 682.242 L914.866 682.242 L914.307 682.242 L913.747 682.242 L913.188 682.242 L912.629 682.242 L912.07 682.242 L911.51 682.242 L910.951 682.242 L910.392 682.242 L909.833 682.242 L909.273 682.242 L908.714 682.242 L908.155 682.242 L907.596 682.242 L907.036 682.242 L906.477 682.242 L905.918 682.242 L905.359 682.242 L904.799 682.242 L904.24 682.242 L903.681 682.242 L903.122 682.242 L902.562 682.242 L902.003 682.242 L901.444 682.242 L900.885 682.242 L900.325 682.242 L899.766 682.242 L899.207 682.242 L898.648 682.242 L898.088 682.242 L897.529 682.242 L896.97 682.242 L896.411 682.242 L895.851 682.242 L895.292 682.242 L894.733 682.242 L894.174 682.242 L893.614 682.242 L893.055 682.242 L892.496 682.242 L891.937 682.242 L891.377 682.242 L890.818 682.242 L890.259 682.242 L889.7 682.242 L889.14 682.242 L888.581 682.242 L888.022 682.242 L887.463 682.242 L886.903 682.242 L886.344 682.242 L885.785 682.242 L885.226 682.242 L884.666 682.242 L884.107 682.242 L883.548 682.242 L882.989 682.242 L882.429 682.242 L881.87 682.242 L881.311 682.242 L880.752 682.242 L880.192 682.242 L879.633 682.242 L879.074 682.242 L878.515 682.242 L877.955 682.242 L877.396 682.242 L876.837 682.242 L876.278 682.242 L875.718 682.242 L875.159 682.242 L874.6 682.242 L874.041 682.242 L873.481 682.242 L872.922 682.242 L872.363 682.242 L871.804 682.242 L871.244 682.242 L870.685 682.242 L870.126 682.242 L869.567 682.242 L869.007 682.242 L868.448 682.242 L867.889 682.242 L867.33 682.242 L866.77 682.242 L866.211 682.242 L865.652 682.242 L865.093 682.242 L864.533 682.242 L863.974 682.242 L863.415 682.242 L862.856 682.242 L862.296 682.242 L861.737 682.242 L861.178 682.242 L860.619 682.242 L860.059 682.242 L859.5 682.242 L858.941 682.242 L858.382 682.242 L857.822 682.242 L857.263 682.242 L856.704 682.242 L856.145 682.242 L855.585 682.242 L855.026 682.242 L854.467 682.242 L853.908 682.242 L853.348 682.242 L852.789 682.242 L852.23 682.242 L851.671 682.242 L851.111 682.242 L850.552 682.242 L849.993 682.242 L849.434 682.242 L848.874 682.242 L848.315 682.242 L847.756 682.242 L847.197 682.242 L846.637 682.242 L846.078 682.242 L845.519 682.242 L844.96 682.242 L844.4 682.242 L843.841 682.242 L843.282 682.242 L842.723 682.242 L842.163 682.242 L841.604 682.242 L841.045 682.242 L840.486 682.242 L839.926 682.242 L839.367 682.242 L838.808 682.242 L838.249 682.242 L837.689 682.242 L837.13 682.242 L836.571 682.242 L836.012 682.242 L835.452 682.242 L834.893 682.242 L834.334 682.242 L833.775 682.242 L833.215 682.242 L832.656 682.242 L832.097 682.242 L831.538 682.242 L830.978 682.242 L830.419 682.242 L829.86 682.242 L829.301 682.242 L828.741 682.242 L828.182 682.242 L827.623 682.242 L827.064 682.242 L826.504 682.242 L825.945 682.242 L825.386 682.242 L824.827 682.242 L824.267 682.242 L823.708 682.242 L823.149 682.242 L822.59 682.242 L822.03 682.242 L821.471 682.242 L820.912 682.242 L820.353 682.242 L819.793 682.242 L819.234 682.242 L818.675 682.242 L818.116 682.242 L817.556 682.242 L816.997 682.242 L816.438 682.242 L815.879 682.242 L815.319 682.242 L814.76 682.242 L814.201 682.242 L813.642 682.242 L813.082 682.242 L812.523 682.242 L811.964 682.242 L811.405 682.242 L810.845 682.242 L810.286 682.242 L809.727 682.242 L809.168 682.242 L808.608 682.242 L808.049 682.242 L807.49 682.242 L806.931 682.242 L806.371 682.242 L805.812 682.242 L805.253 682.242 L804.693 682.242 L804.134 682.242 L803.575 682.242 L803.016 682.242 L802.456 682.242 L801.897 682.242 L801.338 682.242 L800.779 682.242 L800.219 682.242 L799.66 682.242 L799.101 682.242 L798.542 682.242 L797.982 682.242 L797.423 682.242 L796.864 682.242 L796.305 682.242 L795.745 682.242 L795.186 682.242 L794.627 682.242 L794.068 682.242 L793.508 682.242 L792.949 682.242 L792.39 682.242 L791.831 682.242 L791.271 682.242 L790.712 682.242 L790.153 682.242 L789.594 682.242 L789.034 682.242 L788.475 682.242 L787.916 682.242 L787.357 682.242 L786.797 682.242 L786.238 682.242 L785.679 682.242 L785.12 682.242 L784.56 682.242 L784.001 682.242 L783.442 682.242 L782.883 682.242 L782.323 682.242 L781.764 682.242 L781.205 682.242 L780.646 682.242 L780.086 682.242 L779.527 682.242 L778.968 682.242 L778.409 682.242 L777.849 682.242 L777.29 682.242 L776.731 682.242 L776.172 682.242 L775.612 682.242 L775.053 682.242 L774.494 682.242 L773.935 682.242 L773.375 682.242 L772.816 682.242 L772.257 682.242 L771.698 682.242 L771.138 682.242 L770.579 682.242 L770.02 682.242 L769.461 682.242 L768.901 682.242 L768.342 682.242 L767.783 682.242 L767.224 682.242 L766.664 682.242 L766.105 682.242 L765.546 682.242 L764.987 682.242 L764.427 682.242 L763.868 682.242 L763.309 682.242 L762.75 682.242 L762.19 682.242 L761.631 682.242 L761.072 682.242 L760.513 682.242 L759.953 682.242 L759.394 682.242 L758.835 682.242 L758.276 682.242 L757.716 682.242 L757.157 682.242 L756.598 682.242 L756.039 682.242 L755.479 682.242 L754.92 682.242 L754.361 682.242 L753.802 682.242 L753.242 682.242 L752.683 682.242 L752.124 682.242 L751.565 682.242 L751.005 682.242 L750.446 682.242 L749.887 682.242 L749.328 682.242 L748.768 682.242 L748.209 682.242 L747.65 682.242 L747.091 682.242 L746.531 682.242 L745.972 682.242 L745.413 682.242 L744.854 682.242 L744.294 682.242 L743.735 682.242 L743.176 682.242 L742.617 682.242 L742.057 682.242 L741.498 682.242 L740.939 682.242 L740.38 682.242 L739.82 682.242 L739.261 682.242 L738.702 682.242 L738.143 682.242 L737.583 682.242 L737.024 682.242 L736.465 682.242 L735.906 682.242 L735.346 682.242 L734.787 682.242 L734.228 682.242 L733.669 682.242 L733.109 682.242 L732.55 682.242 L731.991 682.242 L731.432 682.242 L730.872 682.242 L730.313 682.242 L729.754 682.242 L729.195 682.242 L728.635 682.242 L728.076 682.242 L727.517 682.242 L726.958 682.242 L726.398 682.242 L725.839 682.242 L725.28 682.242 L724.721 682.242 L724.161 682.242 L723.602 682.242 L723.043 682.242 L722.484 682.242 L721.924 682.242 L721.365 682.242 L720.806 682.242 L720.247 682.242  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.512 720.806,683.512 721.365,683.512 721.924,683.512 722.484,683.512 723.043,683.512 723.602,683.512 724.161,683.512 724.721,683.512 725.28,683.512 725.839,683.512 726.398,683.512 726.958,683.512 727.517,683.512 728.076,683.512 728.635,683.512 729.195,683.512 729.754,683.512 730.313,683.512 730.872,683.512 731.432,683.512 731.991,683.512 732.55,683.512 733.109,683.512 733.669,683.512 734.228,683.512 734.787,683.512 735.346,683.512 735.906,683.512 736.465,683.512 737.024,683.512 737.583,683.512 738.143,683.512 738.702,683.512 739.261,683.512 739.82,683.512 740.38,683.512 740.939,683.512 741.498,683.512 742.057,683.512 742.617,683.512 743.176,683.512 743.735,683.512 744.294,683.512 744.854,683.512 745.413,683.512 745.972,683.512 746.531,683.512 747.091,683.512 747.65,683.512 748.209,683.512 748.768,683.512 749.328,683.512 749.887,683.512 750.446,683.512 751.005,683.512 751.565,683.512 752.124,683.512 752.683,683.512 753.242,683.512 753.802,683.512 754.361,683.512 754.92,683.512 755.479,683.512 756.039,683.512 756.598,683.512 757.157,683.512 757.716,683.512 758.276,683.512 758.835,683.512 759.394,683.512 759.953,683.512 760.513,683.512 761.072,683.512 761.631,683.512 762.19,683.512 762.75,683.512 763.309,683.512 763.868,683.512 764.427,683.512 764.987,683.512 765.546,683.512 766.105,683.512 766.664,683.512 767.224,683.512 767.783,683.512 768.342,683.512 768.901,683.512 769.461,683.512 770.02,683.512 770.579,683.512 771.138,683.512 771.698,683.512 772.257,683.512 772.816,683.512 773.375,683.512 773.935,683.512 774.494,683.512 775.053,683.512 775.612,683.512 776.172,683.512 776.731,683.512 777.29,683.512 777.849,683.512 778.409,683.512 778.968,683.512 779.527,683.512 780.086,683.512 780.646,683.512 781.205,683.512 781.764,683.512 782.323,683.512 782.883,683.512 783.442,683.512 784.001,683.512 784.56,683.512 785.12,683.512 785.679,683.512 786.238,683.512 786.797,683.512 787.357,683.512 787.916,683.512 788.475,683.512 789.034,683.512 789.594,683.512 790.153,683.512 790.712,683.512 791.271,683.512 791.831,683.512 792.39,683.512 792.949,683.512 793.508,683.512 794.068,683.512 794.627,683.512 795.186,683.512 795.745,683.512 796.305,683.512 796.864,683.512 797.423,683.512 797.982,683.512 798.542,683.512 799.101,683.512 799.66,683.512 800.219,683.512 800.779,683.512 801.338,683.512 801.897,683.512 802.456,683.512 803.016,683.512 803.575,683.512 804.134,683.512 804.693,683.512 805.253,683.512 805.812,683.512 806.371,683.512 806.931,683.512 807.49,683.512 808.049,683.512 808.608,683.512 809.168,683.512 809.727,683.512 810.286,683.512 810.845,683.512 811.405,683.512 811.964,683.512 812.523,683.512 813.082,683.512 813.642,683.512 814.201,683.512 814.76,683.512 815.319,683.512 815.879,683.512 816.438,683.512 816.997,683.512 817.556,683.512 818.116,683.512 818.675,683.512 819.234,683.512 819.793,683.512 820.353,683.512 820.912,683.512 821.471,683.512 822.03,683.512 822.59,683.512 823.149,683.512 823.708,683.512 824.267,683.512 824.827,683.512 825.386,683.512 825.945,683.512 826.504,683.512 827.064,683.512 827.623,683.512 828.182,683.512 828.741,683.512 829.301,683.512 829.86,683.512 830.419,683.512 830.978,683.512 831.538,683.512 832.097,683.512 832.656,683.512 833.215,683.512 833.775,683.512 834.334,683.512 834.893,683.512 835.452,683.512 836.012,683.512 836.571,683.512 837.13,683.512 837.689,683.512 838.249,683.512 838.808,683.512 839.367,683.512 839.926,683.512 840.486,683.512 841.045,683.512 841.604,683.512 842.163,683.512 842.723,683.512 843.282,683.512 843.841,683.512 844.4,683.512 844.96,683.512 845.519,683.512 846.078,683.512 846.637,683.512 847.197,683.512 847.756,683.512 848.315,683.512 848.874,683.512 849.434,683.512 849.993,683.512 850.552,683.512 851.111,683.512 851.671,683.512 852.23,683.512 852.789,683.512 853.348,683.512 853.908,683.512 854.467,683.512 855.026,683.512 855.585,683.512 856.145,683.512 856.704,683.512 857.263,683.512 857.822,683.512 858.382,683.512 858.941,683.512 859.5,683.512 860.059,683.512 860.619,683.512 861.178,683.512 861.737,683.512 862.296,683.512 862.856,683.512 863.415,683.512 863.974,683.512 864.533,683.512 865.093,683.512 865.652,683.512 866.211,683.512 866.77,683.512 867.33,683.512 867.889,683.512 868.448,683.512 869.007,683.512 869.567,683.512 870.126,683.512 870.685,683.512 871.244,683.512 871.804,683.512 872.363,683.512 872.922,683.512 873.481,683.512 874.041,683.512 874.6,683.512 875.159,683.512 875.718,683.512 876.278,683.512 876.837,683.512 877.396,683.512 877.955,683.512 878.515,683.512 879.074,683.512 879.633,683.512 880.192,683.512 880.752,683.512 881.311,683.512 881.87,683.512 882.429,683.512 882.989,683.512 883.548,683.512 884.107,683.512 884.666,683.512 885.226,683.512 885.785,683.512 886.344,683.512 886.903,683.512 887.463,683.512 888.022,683.512 888.581,683.512 889.14,683.512 889.7,683.512 890.259,683.512 890.818,683.512 891.377,683.512 891.937,683.512 892.496,683.512 893.055,683.512 893.614,683.512 894.174,683.512 894.733,683.512 895.292,683.512 895.851,683.512 896.411,683.512 896.97,683.512 897.529,683.512 898.088,683.512 898.648,683.512 899.207,683.512 899.766,683.512 900.325,683.512 900.885,683.512 901.444,683.512 902.003,683.512 902.562,683.512 903.122,683.512 903.681,683.512 904.24,683.512 904.799,683.512 905.359,683.512 905.918,683.512 906.477,683.512 907.036,683.512 907.596,683.512 908.155,683.512 908.714,683.512 909.273,683.512 909.833,683.512 910.392,683.512 910.951,683.512 911.51,683.512 912.07,683.512 912.629,683.512 913.188,683.512 913.747,683.512 914.307,683.512 914.866,683.512 915.425,683.512 915.984,683.512 916.544,683.512 917.103,683.512 917.662,683.512 918.221,683.512 918.781,683.512 919.34,683.512 919.899,683.512 920.458,683.512 921.018,683.512 921.577,683.512 922.136,683.512 922.695,683.512 923.255,683.512 923.814,683.512 924.373,683.512 924.932,683.512 925.492,683.512 926.051,683.512 926.61,683.512 927.169,683.512 927.729,683.512 928.288,683.512 928.847,683.512 929.406,683.512 929.966,683.512 930.525,683.512 931.084,683.512 931.644,683.512 932.203,683.512 932.762,683.512 933.321,683.512 933.881,683.512 934.44,683.512 934.999,683.512 935.558,683.512 936.118,683.512 936.677,683.512 937.236,683.512 937.795,683.512 938.355,683.512 938.914,683.512 939.473,683.512 940.032,683.512 940.592,683.512 941.151,683.512 941.71,683.512 942.269,683.512 942.829,683.512 943.388,683.512 943.947,683.512 944.506,683.512 945.066,683.512 945.625,683.512 946.184,683.512 946.743,683.512 947.303,683.512 947.862,683.512 948.421,683.512 948.98,683.512 949.54,683.512 950.099,683.512 950.658,683.512 951.217,683.512 951.777,683.512 952.336,683.512 952.895,683.512 953.454,683.512 954.014,683.512 954.573,683.512 955.132,683.512 955.691,683.512 956.251,683.512 956.81,683.512 957.369,683.512 957.928,683.512 958.488,683.512 959.047,683.512 959.606,683.512 960.165,683.512 960.725,683.512 961.284,683.512 961.843,683.512 962.402,683.512 962.962,683.512 963.521,683.512 964.08,683.512 964.639,683.512 965.199,683.512 965.758,683.512 966.317,683.512 966.876,683.512 967.436,683.512 967.995,683.512 968.554,683.512 969.113,683.512 969.673,683.512 970.232,683.512 970.791,683.512 971.35,683.512 971.91,683.512 972.469,683.512 973.028,683.512 973.587,683.512 974.147,683.512 974.706,683.512 975.265,683.512 975.824,683.512 976.384,683.512 976.943,683.512 977.502,683.512 978.061,683.512 978.621,683.512 979.18,683.512 979.739,683.512 980.298,683.512 980.858,683.512 981.417,683.512 981.976,683.512 982.535,683.512 983.095,683.512 983.654,683.512 984.213,683.512 984.772,683.512 985.332,683.512 985.891,683.512 986.45,683.512 987.009,683.512 987.569,683.512 988.128,683.512 988.687,683.512 989.246,683.512 989.806,683.512 990.365,683.512 990.924,683.512 991.483,683.512 992.043,683.512 992.602,683.512 993.161,683.512 993.72,683.512 994.28,683.512 994.839,683.512 995.398,683.512 995.957,683.512 996.517,683.512 997.076,683.512 997.635,683.512 998.194,683.512 998.754,683.512 999.313,683.512 999.872,683.512 1000.43,683.512 1000.99,683.512 1001.55,683.512 1002.11,683.512 1002.67,683.512 1003.23,683.512 1003.79,683.512 1004.35,683.512 1004.91,683.512 1005.46,683.512 1006.02,683.512 1006.58,683.512 1007.14,683.512 1007.7,683.512 1008.26,683.512 1008.82,683.512 1009.38,683.512 1009.94,683.512 1010.5,683.512 1011.06,683.512 1011.62,683.512 1012.18,683.512 1012.73,683.512 1013.29,683.512 1013.85,683.512 1014.41,683.512 1014.97,683.512 1015.53,683.512 1016.09,683.512 1016.65,683.512 1017.21,683.512 1017.77,683.512 1018.33,683.512 1018.89,683.512 1019.45,683.512 1020.01,683.512 1020.56,683.512 1021.12,683.512 1021.68,683.512 1022.24,683.512 1022.8,683.512 1023.36,683.512 1023.92,683.512 1024.48,683.512 1025.04,683.512 1025.6,683.512 1026.16,683.512 1026.72,683.512 1027.28,683.512 1027.83,683.512 1028.39,683.512 1028.95,683.512 1029.51,683.512 1030.07,683.512 1030.63,683.512 1031.19,683.512 1031.75,683.512 1032.31,683.512 1032.87,683.512 1033.43,683.512 1033.99,683.512 1034.55,683.512 1035.1,683.512 1035.66,683.512 1036.22,683.512 1036.78,683.512 1037.34,683.512 1037.9,683.512 1038.46,683.512 1039.02,683.512 1039.58,683.512 1040.14,683.512 1040.7,683.512 1041.26,683.512 1041.82,683.512 1042.38,683.512 1042.93,683.512 1043.49,683.512 1044.05,683.512 1044.61,683.512 1045.17,683.512 1045.73,683.512 1046.29,683.512 1046.85,683.512 1047.41,683.512 1047.97,683.512 1048.53,683.512 1049.09,683.512 1049.65,683.512 1050.2,683.512 1050.76,683.512 1051.32,683.512 1051.88,683.512 1052.44,683.512 1053,683.512 1053.56,683.512 1054.12,683.512 1054.68,683.512 1055.24,683.512 1055.8,683.512 1056.36,683.512 1056.92,683.512 1057.48,683.512 1058.03,683.512 1058.59,683.512 1059.15,683.512 1059.71,683.512 1060.27,683.512 1060.83,683.512 1061.39,683.512 1061.95,683.512 1062.51,683.512 1063.07,683.512 1063.63,683.512 1064.19,683.512 1064.75,683.512 1065.3,683.512 1065.86,683.512 1066.42,683.512 1066.98,683.512 1067.54,683.512 1068.1,683.512 1068.66,683.512 1069.22,683.512 1069.78,683.512 1070.34,683.512 1070.9,683.512 1071.46,683.512 1072.02,683.512 1072.57,683.512 1073.13,683.512 1073.69,683.512 1074.25,683.512 1074.81,683.512 1075.37,683.512 1075.93,683.512 1076.49,683.512 1077.05,683.512 1077.61,683.512 1078.17,683.512 1078.73,683.512 1079.29,683.512 1079.85,683.512 1080.4,683.512 1080.96,683.512 1081.52,683.512 1082.08,683.512 1082.64,683.512 1083.2,683.512 1083.76,683.512 1084.32,683.512 1084.88,683.512 1085.44,683.512 1086,683.512 1086.56,683.512 1087.12,683.512 1087.67,683.512 1088.23,683.512 1088.79,683.512 1089.35,683.512 1089.91,683.512 1090.47,683.512 1091.03,683.512 1091.59,683.512 1092.15,683.512 1092.71,683.512 1093.27,683.512 1093.83,683.512 1094.39,683.512 1094.94,683.512 1095.5,683.512 1096.06,683.512 1096.62,683.512 1097.18,683.512 1097.74,683.512 1098.3,683.512 1098.86,683.512 1099.42,683.512 1099.98,683.512 1100.54,683.512 1101.1,683.512 1101.66,683.512 1102.22,683.512 1102.77,683.512 1103.33,683.512 1103.89,683.512 1104.45,683.512 1105.01,683.512 1105.57,683.512 1106.13,683.512 1106.69,683.512 1107.25,683.512 1107.81,683.512 1108.37,683.512 1108.93,683.512 1109.49,683.512 1110.04,683.512 1110.6,683.512 1111.16,683.512 1111.72,683.512 1112.28,683.512 1112.84,683.512 1113.4,683.512 1113.96,683.512 1114.52,683.512 1115.08,683.512 1115.64,683.512 1116.2,683.512 1116.76,683.512 1117.31,683.512 1117.87,683.512 1118.43,683.512 1118.99,683.512 1119.55,683.512 1120.11,683.512 1120.67,683.512 1121.23,683.512 1121.79,683.512 1122.35,683.512 1122.91,683.512 1123.47,683.512 1124.03,683.512 1124.59,683.512 1125.14,683.512 1125.7,683.512 1126.26,683.512 1126.82,683.512 1127.38,683.512 1127.94,683.512 1128.5,683.512 1129.06,683.512 1129.62,683.512 1130.18,683.512 1130.74,683.512 1131.3,683.512 1131.86,683.512 1132.41,683.512 1132.97,683.512 1133.53,683.512 1134.09,683.512 1134.65,683.512 1135.21,683.512 1135.77,683.512 1136.33,683.512 1136.89,683.512 1137.45,683.512 1138.01,683.512 1138.57,683.512 1139.13,683.512 1139.68,683.512 1140.24,683.512 1140.8,683.512 1141.36,683.512 1141.92,683.512 1142.48,683.512 1143.04,683.512 1143.6,683.512 1144.16,683.512 1144.72,683.512 1145.28,683.512 1145.84,683.512 1146.4,683.512 1146.96,683.512 1147.51,683.512 1148.07,683.512 1148.63,683.512 1149.19,683.512 1149.75,683.512 1150.31,683.512 1150.87,683.512 1151.43,683.512 1151.99,683.512 1152.55,683.512 1153.11,683.512 1153.67,683.512 1154.23,683.512 1154.78,683.512 1155.34,683.512 1155.9,683.512 1156.46,683.512 1157.02,683.512 1157.58,683.512 1158.14,683.512 1158.7,683.512 1159.26,683.512 1159.82,683.512 1160.38,683.512 1160.94,683.512 1161.5,683.512 1162.05,683.512 1162.61,683.512 1163.17,683.512 1163.73,683.512 1164.29,683.512 1164.85,683.512 1165.41,683.512 1165.97,683.512 1166.53,683.512 1167.09,683.512 1167.65,683.512 1168.21,683.512 1168.77,683.512 1169.33,683.512 1169.88,683.512 1170.44,683.512 1171,683.512 1171.56,683.512 1172.12,683.512 1172.68,683.512 1173.24,683.512 1173.8,683.512 1174.36,683.512 1174.92,683.512 1175.48,683.512 1176.04,683.512 1176.6,683.512 1177.15,683.512 1177.71,683.512 1178.27,683.512 1178.83,683.512 1179.39,683.512 1179.95,683.512 1180.51,683.512 1181.07,683.512 1181.63,683.512 1182.19,683.512 1182.75,683.512 1183.31,683.512 1183.87,683.512 1184.43,683.512 1184.98,683.512 1185.54,683.512 1186.1,683.512 1186.66,683.512 1187.22,683.512 1187.78,683.512 1188.34,683.512 1188.9,683.512 1189.46,683.512 1190.02,683.512 1190.58,683.512 1191.14,683.512 1191.7,683.512 1192.25,683.512 1192.81,683.512 1193.37,683.512 1193.93,683.512 1194.49,683.512 1195.05,683.512 1195.61,683.512 1196.17,683.512 1196.73,683.512 1197.29,683.512 1197.85,683.512 1198.41,683.512 1198.97,683.512 1199.52,683.512 1200.08,683.512 1200.64,683.512 1201.2,683.512 1201.76,683.512 1202.32,683.512 1202.88,683.512 1203.44,683.512 1204,683.512 1204.56,683.512 1205.12,683.512 1205.68,683.512 1206.24,683.512 1206.8,683.512 1207.35,683.512 1207.91,683.512 1208.47,683.512 1209.03,683.512 1209.59,683.512 1210.15,683.512 1210.71,683.512 1211.27,683.512 1211.83,683.512 1212.39,683.512 1212.95,683.512 1213.51,683.512 1214.07,683.512 1214.62,683.512 1215.18,683.512 1215.74,683.512 1216.3,683.512 1216.86,683.512 1217.42,683.512 1217.98,683.512 1218.54,683.512 1219.1,683.512 1219.66,683.512 1220.22,683.512 1220.78,683.512 1221.34,683.512 1221.89,683.512 1222.45,683.512 1223.01,683.512 1223.57,683.512 1224.13,683.512 1224.69,683.512 1225.25,683.512 1225.81,683.512 1226.37,683.512 1226.93,683.512 1227.49,683.512 1228.05,683.512 1228.61,683.512 1229.17,683.512 1229.72,683.512 1230.28,683.512 1230.84,683.512 1231.4,683.512 1231.96,683.512 1232.52,683.512 1233.08,683.512 1233.64,683.512 1234.2,683.512 1234.76,683.512 1235.32,683.512 1235.88,683.512 1236.44,683.512 1236.99,683.512 1237.55,683.512 1238.11,683.512 1238.67,683.512 1239.23,683.512 1239.79,683.512 1240.35,683.512 1240.91,683.512 1241.47,683.512 1242.03,683.512 1242.59,683.512 1243.15,683.512 1243.71,683.512 1244.26,683.512 1244.82,683.512 1245.38,683.512 1245.94,683.512 1246.5,683.512 1247.06,683.512 1247.62,683.512 1248.18,683.512 1248.74,683.512 1249.3,683.512 1249.86,683.512 1250.42,683.512 1250.98,683.512 1251.54,683.512 1252.09,683.512 1252.65,683.512 1253.21,683.512 1253.77,683.512 1254.33,683.512 1254.89,683.512 1255.45,683.512 1256.01,683.512 1256.57,683.512 1257.13,683.512 1257.69,683.512 1258.25,683.512 1258.81,683.512 1259.36,683.512 1259.92,683.512 1260.48,683.512 1261.04,683.512 1261.6,683.512 1262.16,683.512 1262.72,683.512 1263.28,683.512 1263.84,683.512 1264.4,683.512 1264.96,683.512 1265.52,683.512 1266.08,683.512 1266.63,683.512 1267.19,683.512 1267.75,683.512 1268.31,683.512 1268.87,683.512 1269.43,683.512 1269.99,683.512 1270.55,683.512 1271.11,683.512 1271.67,683.512 1272.23,683.512 1272.79,683.512 1273.35,683.512 1273.91,683.512 1274.46,683.512 1275.02,683.512 1275.58,683.512 1276.14,683.512 1276.7,683.512 1277.26,683.512 1277.82,683.512 1278.38,683.512 1278.94,683.512 1279.5,683.512 1280.06,683.512 1280.62,683.512 1281.18,683.512 1281.73,683.512 1282.29,683.512 1282.85,683.512 1283.41,683.512 1283.97,683.512 1284.53,683.512 1285.09,683.512 1285.65,683.512 1286.21,683.512 1286.77,683.512 1287.33,683.512 1287.89,683.512 1288.45,683.512 1289,683.512 1289.56,683.512 1290.12,683.512 1290.68,683.512 1291.24,683.512 1291.8,683.512 1292.36,683.512 1292.92,683.512 1293.48,683.512 1294.04,683.512 1294.6,683.512 1295.16,683.512 1295.72,683.512 1296.28,683.512 1296.83,683.512 1297.39,683.512 1297.95,683.512 1298.51,683.512 1299.07,683.512 1299.63,683.512 1300.19,683.512 1300.75,683.512 1301.31,683.512 1301.87,683.512 1302.43,683.512 1302.99,683.512 1303.55,683.512 1304.1,683.512 1304.66,683.512 1305.22,683.512 1305.78,683.512 1306.34,683.512 1306.9,683.512 1307.46,683.512 1308.02,683.512 1308.58,683.512 1309.14,683.512 1309.7,683.512 1310.26,683.512 1310.82,683.512 1311.38,683.512 1311.93,683.512 1312.49,683.512 1313.05,683.512 1313.61,683.512 1314.17,683.512 1314.73,683.512 1315.29,683.512 1315.85,683.512 1316.41,683.512 1316.97,683.512 1317.53,683.512 1318.09,683.512 1318.65,683.512 1319.2,683.512 1319.76,683.512 1320.32,683.512 1320.88,683.512 1321.44,683.512 1322,683.512 1322.56,683.512 1323.12,683.512 1323.68,683.512 1324.24,683.512 1324.8,683.512 1325.36,683.512 1325.92,683.512 1326.47,683.512 1327.03,683.512 1327.59,683.512 1328.15,683.512 1328.71,683.512 1329.27,683.512 1329.83,683.512 1330.39,683.512 1330.95,683.512 1331.51,683.512 1332.07,683.512 1332.63,683.512 1333.19,683.512 1333.75,683.512 1334.3,683.512 1334.86,683.512 1335.42,683.512 1335.98,683.512 1336.54,683.512 1337.1,683.512 1337.66,683.512 1338.22,683.512 1338.78,683.512 1339.34,683.512 1339.9,683.512 1340.46,683.512 1341.02,683.512 1341.57,683.512 1342.13,683.512 1342.69,683.512 1343.25,683.512 1343.81,683.512 1344.37,683.512 1344.93,683.512 1345.49,683.512 1346.05,683.512 1346.61,683.512 1347.17,683.512 1347.73,683.512 1348.29,683.512 1348.84,683.512 1349.4,683.512 1349.96,683.512 1350.52,683.512 1351.08,683.512 1351.64,683.512 1352.2,683.512 1352.76,683.512 1353.32,683.512 1353.88,683.512 1354.44,683.512 1355,683.512 1355.56,683.512 1356.12,683.512 1356.67,683.512 1357.23,683.512 1357.79,683.512 1358.35,683.512 1358.91,683.512 1359.47,683.512 1360.03,683.512 1360.59,683.512 1361.15,683.512 1361.71,683.512 1362.27,683.512 1362.83,683.512 1363.39,683.512 1363.94,683.512 1364.5,683.512 1365.06,683.512 1365.62,683.512 1366.18,683.512 1366.74,683.512 1367.3,683.512 1367.86,683.512 1368.42,683.512 1368.98,683.512 1369.54,683.512 1370.1,683.512 1370.66,683.512 1371.21,683.512 1371.77,683.512 1372.33,683.512 1372.89,683.512 1373.45,683.512 1374.01,683.512 1374.57,683.512 1375.13,683.512 1375.69,683.512 1376.25,683.512 1376.81,683.512 1377.37,683.512 1377.93,683.512 1378.49,683.512 1379.04,683.512 1379.6,683.512 1380.16,683.512 1380.72,683.512 1381.28,683.512 1381.84,683.512 1382.4,683.512 1382.96,683.512 1383.52,683.512 1384.08,683.512 1384.64,683.512 1385.2,683.512 1385.76,683.512 1386.31,683.512 1386.87,683.512 1387.43,683.512 1387.99,683.512 1388.55,683.512 1389.11,683.512 1389.67,683.512 1390.23,683.512 1390.79,683.512 1391.35,683.512 1391.91,683.512 1392.47,683.512 1393.03,683.512 1393.58,683.512 1394.14,683.512 1394.7,683.512 1395.26,683.512 1395.82,683.512 1396.38,683.512 1396.94,683.512 1397.5,683.512 1398.06,683.512 1398.62,683.512 1399.18,683.512 1399.74,683.512 1400.3,683.512 1400.86,683.512 1401.41,683.512 1401.97,683.512 1402.53,683.512 1403.09,683.512 1403.65,683.512 1404.21,683.512 1404.77,683.512 1405.33,683.512 1405.89,683.512 1406.45,683.512 1407.01,683.512 1407.57,683.512 1408.13,683.512 1408.68,683.512 1409.24,683.512 1409.8,683.512 1410.36,683.512 1410.92,683.512 1411.48,683.512 1412.04,683.512 1412.6,683.512 1413.16,683.512 1413.72,683.512 1414.28,683.512 1414.84,683.512 1415.4,683.512 1415.95,683.512 1416.51,683.512 1417.07,683.512 1417.63,683.512 1418.19,683.512 1418.75,683.512 1419.31,683.512 1419.87,683.512 1420.43,683.512 1420.99,683.512 1421.55,683.512 1422.11,683.512 1422.67,683.512 1423.23,683.512 1423.78,683.512 1424.34,683.512 1424.9,683.512 1425.46,683.512 1426.02,683.512 1426.58,683.512 1427.14,683.512 1427.7,683.512 1428.26,683.512 1428.82,683.512 1429.38,683.512 1429.94,683.512 1430.5,683.512 1431.05,683.512 1431.61,683.512 1432.17,683.512 1432.73,683.512 1433.29,683.512 1433.85,683.512 1434.41,683.512 1434.97,683.512 1435.53,683.512 1436.09,683.512 1436.65,683.512 1437.21,683.512 1437.77,683.512 1438.33,683.512 1438.88,683.512 1439.44,683.512 1440,683.512 1440.56,683.512 1441.12,683.512 1441.68,683.512 1442.24,683.512 1442.8,683.512 1443.36,683.512 1443.92,683.512 1444.48,683.512 1445.04,683.512 1445.6,683.512 1446.15,683.512 1446.71,683.512 1447.27,683.512 1447.83,683.512 1448.39,683.512 1448.95,683.512 1449.51,683.512 1450.07,683.512 1450.63,683.512 1451.19,683.512 1451.75,683.512 1452.31,683.512 1452.87,683.512 1453.42,683.512 1453.98,683.512 1454.54,683.512 1455.1,683.512 1455.66,683.512 1456.22,683.512 1456.78,683.512 1457.34,683.512 1457.9,683.512 1458.46,683.512 1459.02,683.512 1459.58,683.512 1460.14,683.512 1460.7,683.512 1461.25,683.512 1461.81,683.512 1462.37,683.512 1462.93,683.512 1463.49,683.512 1464.05,683.512 1464.61,683.512 1465.17,683.512 1465.73,683.512 1466.29,683.512 1466.85,683.512 1467.41,683.512 1467.97,683.512 1468.52,683.512 1469.08,683.512 1469.64,683.512 1470.2,683.512 1470.76,683.512 1471.32,683.512 1471.88,683.512 1472.44,683.512 1473,683.512 1473.56,683.512 1474.12,683.512 1474.68,683.512 1475.24,683.512 1475.79,683.512 1476.35,683.512 1476.91,683.512 1477.47,683.512 1478.03,683.512 1478.59,683.512 1479.15,683.512 1479.71,683.512 1480.27,683.512 1480.83,683.512 1481.39,683.512 1481.95,683.512 1482.51,683.512 1483.07,683.512 1483.62,683.512 1484.18,683.512 1484.74,683.512 1485.3,683.512 1485.86,683.512 1486.42,683.512 1486.98,683.512 1487.54,683.512 1488.1,683.512 1488.66,683.512 1489.22,683.512 1489.78,683.512 1490.34,683.512 1490.89,683.512 1491.45,683.512 1492.01,683.512 1492.57,683.512 1493.13,683.512 1493.69,683.512 1494.25,683.512 1494.81,683.512 1495.37,683.512 1495.93,683.512 1496.49,683.512 1497.05,683.512 1497.61,683.512 1498.16,683.512 1498.72,683.512 1499.28,683.512 1499.84,683.512 1500.4,683.512 1500.96,683.512 1501.52,683.512 1502.08,683.512 1502.64,683.512 1503.2,683.512 1503.76,683.512 1504.32,683.512 1504.88,683.512 1505.44,683.512 1505.99,683.512 1506.55,683.512 1507.11,683.512 1507.67,683.512 1508.23,683.512 1508.79,683.512 1509.35,683.512 1509.91,683.512 1510.47,683.512 1511.03,683.512 1511.59,683.512 1512.15,683.512 1512.71,683.512 1513.26,683.512 1513.82,683.512 1514.38,683.512 1514.94,683.512 1515.5,683.512 1516.06,683.512 1516.62,683.512 1517.18,683.512 1517.74,683.512 1518.3,683.512 1518.86,683.512 1519.42,683.512 1519.98,683.512 1520.53,683.512 1521.09,683.512 1521.65,683.512 1522.21,683.512 1522.77,683.512 1523.33,683.512 1523.89,683.512 1524.45,683.512 1525.01,683.512 1525.57,683.512 1526.13,683.512 1526.69,683.512 1527.25,683.512 1527.81,683.512 1528.36,683.512 1528.92,683.512 1529.48,683.512 1530.04,683.512 1530.6,683.512 1531.16,683.512 1531.72,683.512 1532.28,683.512 1532.84,683.512 1533.4,683.512 1533.96,683.512 1534.52,683.512 1535.08,683.512 1535.63,683.512 1536.19,683.512 1536.75,683.512 1537.31,683.512 1537.87,683.512 1538.43,683.512 1538.99,683.512 1539.55,683.512 1540.11,683.512 1540.67,683.512 1541.23,683.512 1541.79,683.512 1542.35,683.512 1542.9,683.512 1543.46,683.512 1544.02,683.512 1544.58,683.512 1545.14,683.512 1545.7,683.512 1546.26,683.512 1546.82,683.512 1547.38,683.512 1547.94,683.512 1548.5,683.512 1549.06,683.512 1549.62,683.512 1550.18,683.512 1550.73,683.512 1551.29,683.512 1551.85,683.512 1552.41,683.512 1552.97,683.512 1553.53,683.512 1554.09,683.512 1554.65,683.512 1555.21,683.512 1555.77,683.512 1556.33,683.512 1556.89,683.512 1557.45,683.512 1558,683.512 1558.56,683.512 1559.12,683.512 1559.68,683.512 1560.24,683.512 1560.8,683.512 1561.36,683.512 1561.92,683.512 1562.48,683.512 1563.04,683.512 1563.6,683.512 1564.16,683.512 1564.72,683.512 1565.28,683.512 1565.83,683.512 1566.39,683.512 1566.95,683.512 1567.51,683.512 1568.07,683.512 1568.63,683.512 1569.19,683.512 1569.75,683.512 1570.31,683.512 1570.87,683.512 1571.43,683.512 1571.99,683.512 1572.55,683.512 1573.1,683.512 1573.66,683.512 1574.22,683.512 1574.78,683.512 1575.34,683.512 1575.9,683.512 1576.46,683.512 1577.02,683.512 1577.58,683.512 1578.14,683.512 1578.7,683.512 1579.26,683.512 1579.82,683.512 1580.37,683.512 1580.93,683.512 1581.49,683.512 1582.05,683.512 1582.61,683.512 1583.17,683.512 1583.73,683.512 1584.29,683.512 1584.85,683.512 1585.41,683.512 1585.97,683.512 1586.53,683.512 1587.09,683.512 1587.65,683.512 1588.2,683.512 1588.76,683.512 1589.32,683.512 1589.88,683.512 1590.44,683.512 1591,683.512 1591.56,683.512 1592.12,683.512 1592.68,683.512 1593.24,683.512 1593.8,683.512 1594.36,683.512 1594.92,683.512 1595.47,683.512 1596.03,683.512 1596.59,683.512 1597.15,683.512 1597.71,683.512 1598.27,683.512 1598.83,683.512 1599.39,683.512 1599.95,683.512 1600.51,683.512 1601.07,683.512 1601.63,683.512 1602.19,683.512 1602.74,683.512 1603.3,683.512 1603.86,683.512 1604.42,683.512 1604.98,683.512 1605.54,683.512 1606.1,683.512 1606.66,683.512 1607.22,683.512 1607.78,683.512 1608.34,683.512 1608.9,683.512 1609.46,683.512 1610.02,683.512 1610.57,683.512 1611.13,683.512 1611.69,683.512 1612.25,683.512 1612.81,683.512 1613.37,683.512 1613.93,683.512 1614.49,683.512 1615.05,683.512 1615.61,683.512 1616.17,683.512 1616.73,683.512 1617.29,683.512 1617.84,683.512 1618.4,683.512 1618.96,683.512 1619.52,683.512 1620.08,683.512 1620.64,683.512 1621.2,683.512 1621.76,683.512 1622.32,683.512 1622.88,683.512 1623.44,683.512 1624,683.512 1624.56,683.512 1625.11,683.512 1625.67,683.512 1626.23,683.512 1626.79,683.512 1627.35,683.512 1627.91,683.512 1628.47,683.512 1629.03,683.512 1629.59,683.512 1630.15,683.512 1630.71,683.512 1631.27,683.512 1631.83,683.512 1632.39,683.512 1632.94,683.512 1633.5,683.512 1634.06,683.512 1634.62,683.512 1635.18,683.512 1635.74,683.512 1636.3,683.512 1636.86,683.512 1637.42,683.512 1637.98,683.512 1638.54,683.512 1639.1,683.512 1639.66,683.512 1640.21,683.512 1640.77,683.512 1641.33,683.512 1641.89,683.512 1642.45,683.512 1643.01,683.512 1643.57,683.512 1644.13,683.512 1644.69,683.512 1645.25,683.512 1645.81,683.512 1646.37,683.512 1646.93,683.512 1647.48,683.512 1648.04,683.512 1648.6,683.512 1649.16,683.512 1649.72,683.512 1650.28,683.512 1650.84,683.512 1651.4,683.512 1651.96,683.512 1652.52,683.512 1653.08,683.512 1653.64,683.512 1654.2,683.512 1654.76,683.512 1655.31,683.512 1655.87,683.512 1656.43,683.512 1656.99,683.512 1657.55,683.512 1658.11,683.512 1658.67,683.512 1659.23,683.512 1659.79,683.512 1660.35,683.512 1660.91,683.512 1661.47,683.512 1662.03,683.512 1662.58,683.512 1663.14,683.512 1663.7,683.512 1664.26,683.512 1664.82,683.512 1665.38,683.512 1665.94,683.512 1666.5,683.512 1667.06,683.512 1667.62,683.512 1668.18,683.512 1668.74,683.512 1669.3,683.512 1669.85,683.512 1670.41,683.512 1670.97,683.512 1671.53,683.512 1672.09,683.512 1672.65,683.512 1673.21,683.512 1673.77,683.512 1674.33,683.512 1674.89,683.512 1675.45,683.512 1676.01,683.512 1676.57,683.512 1677.13,683.512 1677.68,683.512 1678.24,683.512 1678.8,683.512 1679.36,683.512 1679.92,683.512 1680.48,683.512 1681.04,683.512 1681.6,683.512 1682.16,683.512 1682.72,683.512 1683.28,683.512 1683.84,683.512 1684.4,683.512 1684.95,683.512 1685.51,683.512 1686.07,683.512 1686.63,683.512 1687.19,683.512 1687.75,683.512 1688.31,683.512 1688.87,683.512 1689.43,683.512 1689.99,683.512 1690.55,683.512 1691.11,683.512 1691.67,683.512 1692.23,683.512 1692.78,683.512 1693.34,683.512 1693.9,683.512 1694.46,683.512 1695.02,683.512 1695.58,683.512 1696.14,683.512 1696.7,683.512 1697.26,683.512 1697.82,683.512 1698.38,683.512 1698.94,683.512 1699.5,683.512 1700.05,683.512 1700.61,683.512 1701.17,683.512 1701.73,683.512 1702.29,683.512 1702.85,683.512 1703.41,683.512 1703.97,683.512 1704.53,683.512 1705.09,683.512 1705.65,683.512 1706.21,683.512 1706.77,683.512 1707.32,683.512 1707.88,683.512 1708.44,683.512 1709,683.512 1709.56,683.512 1710.12,683.512 1710.68,683.512 1711.24,683.512 1711.8,683.512 1712.36,683.512 1712.92,683.512 1713.48,683.512 1714.04,683.512 1714.6,683.512 1715.15,683.512 1715.71,683.512 1716.27,683.512 1716.83,683.512 1717.39,683.512 1717.95,683.512 1718.51,683.512 1719.07,683.512 1719.63,683.512 1720.19,683.512 1720.75,683.512 1721.31,683.512 1721.87,683.512 1722.42,683.512 1722.98,683.512 1723.54,683.512 1724.1,683.512 1724.66,683.512 1725.22,683.512 1725.78,683.512 1726.34,683.512 1726.9,683.512 1727.46,683.512 1728.02,683.512 1728.58,683.512 1729.14,683.512 1729.69,683.512 1730.25,683.512 1730.81,683.512 1731.37,683.512 1731.93,683.512 1732.49,683.512 1733.05,683.512 1733.61,683.512 1734.17,683.512 1734.73,683.512 1735.29,683.512 1735.85,683.512 1736.41,683.512 1736.97,683.512 1737.52,683.512 1738.08,683.512 1738.64,683.512 1739.2,683.512 1739.76,683.512 1740.32,683.512 1740.88,683.512 1741.44,683.512 1742,683.512 1742.56,683.512 1743.12,683.512 1743.68,683.512 1744.24,683.512 1744.79,683.512 1745.35,683.512 1745.91,683.512 1746.47,683.512 1747.03,683.512 1747.59,683.512 1748.15,683.512 1748.71,683.512 1749.27,683.512 1749.83,683.512 1750.39,683.512 1750.95,683.512 1751.51,683.512 1752.06,683.512 1752.62,683.512 1753.18,683.512 1753.74,683.512 1754.3,683.512 1754.86,683.512 1755.42,683.512 1755.98,683.512 1756.54,683.512 1757.1,683.512 1757.66,683.512 1758.22,683.512 1758.78,683.512 1759.34,683.512 1759.89,683.512 1760.45,683.512 1761.01,683.512 1761.57,683.512 1762.13,683.512 1762.69,683.512 1763.25,683.512 1763.81,683.512 1764.37,683.512 1764.93,683.512 1765.49,683.512 1766.05,683.512 1766.61,683.512 1767.16,683.512 1767.72,683.512 1768.28,683.512 1768.84,683.512 1769.4,683.512 1769.96,683.512 1770.52,683.512 1771.08,683.512 1771.64,683.512 1772.2,683.512 1772.76,683.512 1773.32,683.512 1773.88,683.512 1774.43,683.512 1774.99,683.512 1775.55,683.512 1776.11,683.512 1776.67,683.512 1777.23,683.512 1777.79,683.512 1778.35,683.512 1778.91,683.512 1779.47,683.512 1780.03,683.512 1780.59,683.512 1781.15,683.512 1781.71,683.512 1782.26,683.512 1782.82,683.512 1783.38,683.512 1783.94,683.512 1784.5,683.512 1785.06,683.512 1785.62,683.512 1786.18,683.512 1786.74,683.512 1787.3,683.512 1787.86,683.512 1788.42,683.512 1788.98,683.512 1789.53,683.512 1790.09,683.512 1790.65,683.512 1791.21,683.512 1791.77,683.512 1792.33,683.512 1792.89,683.512 1793.45,683.512 1794.01,683.512 1794.57,683.512 1795.13,683.512 1795.69,683.512 1796.25,683.512 1796.8,683.512 1797.36,683.512 1797.92,683.512 1798.48,683.512 1799.04,683.512 1799.6,683.512 1800.16,683.512 1800.72,683.512 1801.28,683.512 1801.84,683.512 1802.4,683.512 1802.96,683.512 1803.52,683.512 1804.08,683.512 1804.63,683.512 1805.19,683.512 1805.75,683.512 1806.31,683.512 1806.87,683.512 1807.43,683.512 1807.99,683.512 1808.55,683.512 1809.11,683.512 1809.67,683.512 1810.23,683.512 1810.79,683.512 1811.35,683.512 1811.9,683.512 1812.46,683.512 1813.02,683.512 1813.58,683.512 1814.14,683.512 1814.7,683.512 1815.26,683.512 1815.82,683.512 1816.38,683.512 1816.94,683.512 1817.5,683.512 1818.06,683.512 1818.62,683.512 1819.18,683.512 1819.73,683.512 1820.29,683.512 1820.85,683.512 1821.41,683.512 1821.97,683.512 1822.53,683.512 1823.09,683.512 1823.65,683.512 1824.21,683.512 1824.77,683.512 1825.33,683.512 1825.89,683.512 1826.45,683.512 1827,683.512 1827.56,683.512 1828.12,683.512 1828.68,683.512 1829.24,683.512 1829.8,683.512 1830.36,683.512 1830.92,683.512 1831.48,683.512 1832.04,683.512 1832.6,683.512 1833.16,683.512 1833.72,683.512 1834.27,683.512 1834.83,683.512 1835.39,683.512 1835.95,683.512 1836.51,683.512 1837.07,683.512 1837.63,683.512 1838.19,683.512 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025885467202407 ± 0.025604464227164333\nProjected Energy: -4.014719044884229 ± (0.006004370935384529, 0.006396536278363563)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.483589</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.7443e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7774e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.498e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.282e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.336e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.236e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133743\n -0.7590191922770835\n  0.13584182219622143\n  0.15789998694607377\n  0.8767114411781289\n  1.5305929970973366\n  1.5835732611867392\n  3.072870330325868\n  3.12567265395184\n  4.8621072215621695\n  6.260694850380598\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
