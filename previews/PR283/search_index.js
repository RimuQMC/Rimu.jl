var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2130197346307877 ± 0.0013813420726711606\n   G2(1) = 0.9170104222865973 ± 0.0007592296657680123\n   G2(2) = 0.9816690181898419 ± 0.0006759120062234783\n   G2(3) = 0.989621384416334 ± 0.0009842057419303383\n   G2(4) = 0.9816690181898419 ± 0.0006759120062234783\n   G2(5) = 0.9170104222865973 ± 0.0007592296657680123\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.081110624253968 ± 0.12906510268715557\n   Replica 2: -3.999697691818701 ± 0.13211316610969398\n   Replica 3: -3.973173771825347 ± 0.16125831538314905\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.05 2211.02,1003.05 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.257 2211.02,745.257 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.466 2211.02,487.466 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.674 2211.02,229.674 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.05 423.181,1003.05 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.257 423.181,745.257 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.466 423.181,487.466 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.674 423.181,229.674 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M290.043 1016.39 L306.363 1016.39 L306.363 1020.33 L284.418 1020.33 L284.418 1016.39 Q287.08 1013.64 291.664 1009.01 Q296.27 1004.36 297.451 1003.01 Q299.696 1000.49 300.576 998.755 Q301.478 996.996 301.478 995.306 Q301.478 992.551 299.534 990.815 Q297.613 989.079 294.511 989.079 Q292.312 989.079 289.858 989.843 Q287.427 990.607 284.65 992.158 L284.65 987.435 Q287.474 986.301 289.927 985.722 Q292.381 985.144 294.418 985.144 Q299.789 985.144 302.983 987.829 Q306.177 990.514 306.177 995.005 Q306.177 997.134 305.367 999.056 Q304.58 1000.95 302.474 1003.55 Q301.895 1004.22 298.793 1007.44 Q295.691 1010.63 290.043 1016.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 985.769 L334.58 985.769 L334.58 989.704 L320.506 989.704 L320.506 998.176 Q321.524 997.829 322.543 997.667 Q323.562 997.482 324.58 997.482 Q330.367 997.482 333.747 1000.65 Q337.126 1003.82 337.126 1009.24 Q337.126 1014.82 333.654 1017.92 Q330.182 1021 323.862 1021 Q321.687 1021 319.418 1020.63 Q317.173 1020.26 314.765 1019.52 L314.765 1014.82 Q316.849 1015.95 319.071 1016.51 Q321.293 1017.06 323.77 1017.06 Q327.774 1017.06 330.112 1014.96 Q332.45 1012.85 332.45 1009.24 Q332.45 1005.63 330.112 1003.52 Q327.774 1001.42 323.77 1001.42 Q321.895 1001.42 320.02 1001.83 Q318.168 1002.25 316.224 1003.13 L316.224 985.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 988.847 Q352.728 988.847 350.899 992.412 Q349.094 995.954 349.094 1003.08 Q349.094 1010.19 350.899 1013.75 Q352.728 1017.3 356.339 1017.3 Q359.973 1017.3 361.779 1013.75 Q363.608 1010.19 363.608 1003.08 Q363.608 995.954 361.779 992.412 Q359.973 988.847 356.339 988.847 M356.339 985.144 Q362.149 985.144 365.205 989.75 Q368.284 994.333 368.284 1003.08 Q368.284 1011.81 365.205 1016.42 Q362.149 1021 356.339 1021 Q350.529 1021 347.45 1016.42 Q344.395 1011.81 344.395 1003.08 Q344.395 994.333 347.45 989.75 Q350.529 985.144 356.339 985.144 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M286.062 727.977 L304.418 727.977 L304.418 731.912 L290.344 731.912 L290.344 740.385 Q291.363 740.037 292.381 739.875 Q293.4 739.69 294.418 739.69 Q300.205 739.69 303.585 742.861 Q306.964 746.033 306.964 751.449 Q306.964 757.028 303.492 760.13 Q300.02 763.209 293.701 763.209 Q291.525 763.209 289.256 762.838 Q287.011 762.468 284.603 761.727 L284.603 757.028 Q286.687 758.162 288.909 758.718 Q291.131 759.273 293.608 759.273 Q297.613 759.273 299.951 757.167 Q302.288 755.06 302.288 751.449 Q302.288 747.838 299.951 745.732 Q297.613 743.625 293.608 743.625 Q291.733 743.625 289.858 744.042 Q288.006 744.459 286.062 745.338 L286.062 727.977 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 731.056 Q322.566 731.056 320.737 734.621 Q318.932 738.162 318.932 745.292 Q318.932 752.398 320.737 755.963 Q322.566 759.505 326.177 759.505 Q329.811 759.505 331.617 755.963 Q333.446 752.398 333.446 745.292 Q333.446 738.162 331.617 734.621 Q329.811 731.056 326.177 731.056 M326.177 727.352 Q331.987 727.352 335.043 731.959 Q338.122 736.542 338.122 745.292 Q338.122 754.019 335.043 758.625 Q331.987 763.209 326.177 763.209 Q320.367 763.209 317.288 758.625 Q314.233 754.019 314.233 745.292 Q314.233 736.542 317.288 731.959 Q320.367 727.352 326.177 727.352 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 731.056 Q352.728 731.056 350.899 734.621 Q349.094 738.162 349.094 745.292 Q349.094 752.398 350.899 755.963 Q352.728 759.505 356.339 759.505 Q359.973 759.505 361.779 755.963 Q363.608 752.398 363.608 745.292 Q363.608 738.162 361.779 734.621 Q359.973 731.056 356.339 731.056 M356.339 727.352 Q362.149 727.352 365.205 731.959 Q368.284 736.542 368.284 745.292 Q368.284 754.019 365.205 758.625 Q362.149 763.209 356.339 763.209 Q350.529 763.209 347.45 758.625 Q344.395 754.019 344.395 745.292 Q344.395 736.542 347.45 731.959 Q350.529 727.352 356.339 727.352 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M284.835 470.186 L307.057 470.186 L307.057 472.176 L294.511 504.746 L289.627 504.746 L301.432 474.121 L284.835 474.121 L284.835 470.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M316.224 470.186 L334.58 470.186 L334.58 474.121 L320.506 474.121 L320.506 482.593 Q321.524 482.246 322.543 482.084 Q323.562 481.899 324.58 481.899 Q330.367 481.899 333.747 485.07 Q337.126 488.241 337.126 493.658 Q337.126 499.236 333.654 502.338 Q330.182 505.417 323.862 505.417 Q321.687 505.417 319.418 505.047 Q317.173 504.676 314.765 503.936 L314.765 499.236 Q316.849 500.371 319.071 500.926 Q321.293 501.482 323.77 501.482 Q327.774 501.482 330.112 499.375 Q332.45 497.269 332.45 493.658 Q332.45 490.047 330.112 487.94 Q327.774 485.834 323.77 485.834 Q321.895 485.834 320.02 486.25 Q318.168 486.667 316.224 487.547 L316.224 470.186 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 473.264 Q352.728 473.264 350.899 476.829 Q349.094 480.371 349.094 487.5 Q349.094 494.607 350.899 498.172 Q352.728 501.713 356.339 501.713 Q359.973 501.713 361.779 498.172 Q363.608 494.607 363.608 487.5 Q363.608 480.371 361.779 476.829 Q359.973 473.264 356.339 473.264 M356.339 469.561 Q362.149 469.561 365.205 474.167 Q368.284 478.75 368.284 487.5 Q368.284 496.227 365.205 500.834 Q362.149 505.417 356.339 505.417 Q350.529 505.417 347.45 500.834 Q344.395 496.227 344.395 487.5 Q344.395 478.75 347.45 474.167 Q350.529 469.561 356.339 469.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M256.664 243.019 L264.303 243.019 L264.303 216.653 L255.992 218.32 L255.992 214.061 L264.256 212.394 L268.932 212.394 L268.932 243.019 L276.571 243.019 L276.571 246.954 L256.664 246.954 L256.664 243.019 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M296.015 215.473 Q292.404 215.473 290.576 219.038 Q288.77 222.579 288.77 229.709 Q288.77 236.815 290.576 240.38 Q292.404 243.922 296.015 243.922 Q299.65 243.922 301.455 240.38 Q303.284 236.815 303.284 229.709 Q303.284 222.579 301.455 219.038 Q299.65 215.473 296.015 215.473 M296.015 211.769 Q301.826 211.769 304.881 216.376 Q307.96 220.959 307.96 229.709 Q307.96 238.436 304.881 243.042 Q301.826 247.626 296.015 247.626 Q290.205 247.626 287.127 243.042 Q284.071 238.436 284.071 229.709 Q284.071 220.959 287.127 216.376 Q290.205 211.769 296.015 211.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M326.177 215.473 Q322.566 215.473 320.737 219.038 Q318.932 222.579 318.932 229.709 Q318.932 236.815 320.737 240.38 Q322.566 243.922 326.177 243.922 Q329.811 243.922 331.617 240.38 Q333.446 236.815 333.446 229.709 Q333.446 222.579 331.617 219.038 Q329.811 215.473 326.177 215.473 M326.177 211.769 Q331.987 211.769 335.043 216.376 Q338.122 220.959 338.122 229.709 Q338.122 238.436 335.043 243.042 Q331.987 247.626 326.177 247.626 Q320.367 247.626 317.288 243.042 Q314.233 238.436 314.233 229.709 Q314.233 220.959 317.288 216.376 Q320.367 211.769 326.177 211.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M356.339 215.473 Q352.728 215.473 350.899 219.038 Q349.094 222.579 349.094 229.709 Q349.094 236.815 350.899 240.38 Q352.728 243.922 356.339 243.922 Q359.973 243.922 361.779 240.38 Q363.608 236.815 363.608 229.709 Q363.608 222.579 361.779 219.038 Q359.973 215.473 356.339 215.473 M356.339 211.769 Q362.149 211.769 365.205 216.376 Q368.284 220.959 368.284 229.709 Q368.284 238.436 365.205 243.042 Q362.149 247.626 356.339 247.626 Q350.529 247.626 347.45 243.042 Q344.395 238.436 344.395 229.709 Q344.395 220.959 347.45 216.376 Q350.529 211.769 356.339 211.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.674 4017.76,229.674 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.34 457.123,1249.18 457.691,1248.94 458.259,1248.66 458.828,1247.27 459.396,1246.88 459.964,1245.35 460.533,1244.82 461.101,1244.2 461.669,1243.53 462.238,1241.73 462.806,1240.91 463.375,1239.99 463.943,1238.96 464.511,1237.84 465.08,1236.62 465.648,1235.27 466.216,1232.79 466.785,1231.24 467.353,1229.56 467.921,1227.73 468.49,1225.77 469.058,1223.65 469.626,1220.37 470.195,1217.99 470.763,1215.43 471.331,1212.75 471.9,1209.86 472.468,1205.73 473.036,1202.46 473.605,1196.96 474.173,1193.28 474.741,1189.33 475.31,1183.19 475.878,1177.86 476.446,1172.34 477.015,1167.55 477.583,1160.57 478.152,1154.34 478.72,1148.97 479.288,1141.3 479.857,1135.55 480.425,1129.62 480.993,1121.21 481.562,1112.76 482.13,1106.29 482.698,1098.56 483.267,1091.71 483.835,1082.58 484.403,1074.4 484.972,1065.01 485.54,1056.42 486.108,1047.86 486.677,1038.98 487.245,1029.9 487.813,1020.8 488.382,1010.35 488.95,1001.03 489.518,992.444 490.087,981.68 490.655,971.931 491.224,962.201 491.792,951.321 492.36,939.321 492.929,928.231 493.497,918.256 494.065,909.175 494.634,900.078 495.202,889.873 495.77,879.601 496.339,870.354 496.907,859.053 497.475,848.645 498.044,837.343 498.612,825.97 499.18,814.737 499.749,802.553 500.317,792.676 500.885,782.725 501.454,768.829 502.022,759.29 502.59,748.592 503.159,739.151 503.727,728.507 504.295,721.301 504.864,711.799 505.432,703.327 506.001,692.777 506.569,681.299 507.137,671.101 507.706,661.093 508.274,654.293 508.842,645.379 509.411,637.488 509.979,629.794 510.547,620.924 511.116,613.205 511.684,604.66 512.252,597.17 512.821,586.669 513.389,578.614 513.957,567.53 514.526,558.948 515.094,550.186 515.662,541.827 516.231,535.428 516.799,526.012 517.367,518.866 517.936,511.646 518.504,502.798 519.072,496.057 519.641,489.529 520.209,482.07 520.778,475.018 521.346,469.108 521.914,464.14 522.483,457.184 523.051,452.75 523.619,446.247 524.188,440.835 524.756,435.458 525.324,431.388 525.893,424.174 526.461,421.471 527.029,416.421 527.598,411.697 528.166,405.888 528.734,402.21 529.303,399.814 529.871,395.261 530.439,391.775 531.008,388.66 531.576,385.289 532.144,384.119 532.713,377.647 533.281,373.536 533.85,366.529 534.418,362.054 534.986,358.672 535.555,354.274 536.123,351.991 536.691,349.737 537.26,347.535 537.828,344.288 538.396,340.213 538.965,336.899 539.533,332.889 540.101,331.152 540.67,329.675 541.238,327.027 541.806,325.208 542.375,323.493 542.943,321.928 543.511,321.168 544.08,318.362 544.648,315.804 545.216,312.204 545.785,309.663 546.353,309.247 546.921,307.953 547.49,306.555 548.058,305.22 548.627,302.997 549.195,302.754 549.763,299.641 550.332,297.464 550.9,294.344 551.468,293.351 552.037,292.458 552.605,291.458 553.173,288.466 553.742,287.677 554.31,286.984 554.878,284.132 555.447,283.417 556.015,282.724 556.583,280.166 557.152,279.81 557.72,277.2 558.288,276.461 558.857,275.838 559.425,276.417 559.993,274.99 560.562,273.311 561.13,271.585 561.698,269.22 562.267,269.026 562.835,267.433 563.404,263.395 563.972,263.217 564.54,262.096 565.109,260.976 565.677,260.032 566.245,260.129 566.814,259.081 567.382,259.507 567.95,260.938 568.519,259.823 569.087,257.804 569.655,257.99 570.224,256.759 570.792,255.739 571.36,255.832 571.929,254.765 572.497,253.903 573.065,254.114 573.634,253.425 574.202,252.532 574.77,254.905 575.339,252.958 575.907,253.13 576.476,252.295 577.044,252.51 577.612,252.527 578.181,251.424 578.749,250.599 579.317,249.957 579.886,251.147 580.454,253.288 581.022,253.362 581.591,253.117 582.159,253.005 582.727,252.74 583.296,252.503 583.864,250.202 584.432,248.971 585.001,246.981 585.569,246.208 586.137,247.326 586.706,247.491 587.274,247.513 587.842,247.754 588.411,246.926 588.979,247.099 589.547,247.214 590.116,246.344 590.684,245.507 591.253,244.03 591.821,246.457 592.389,246.494 592.958,246.757 593.526,248.861 594.094,247.802 594.663,246.765 595.231,246.822 595.799,245.946 596.368,245.906 596.936,244.758 597.504,243.987 598.073,245.167 598.641,244.282 599.209,243.399 599.778,241.379 600.346,238.63 600.914,237.182 601.483,237.911 602.051,238.44 602.619,240.018 603.188,240.395 603.756,239.685 604.325,239.99 604.893,240.315 605.461,242.631 606.03,241.601 606.598,239.741 607.166,242.319 607.735,242.435 608.303,242.674 608.871,242.704 609.44,241.915 610.008,239.92 610.576,238.081 611.145,238.492 611.713,239.039 612.281,239.365 612.85,237.551 613.418,237.852 613.986,237.14 614.555,236.67 615.123,236.19 615.691,236.455 616.26,233.704 616.828,234.777 617.396,235.002 617.965,235.507 618.533,236.715 619.102,237.116 619.67,236.3 620.238,237.653 620.807,238.226 621.375,236.675 621.943,237.987 622.512,238.391 623.08,239.652 623.648,240.584 624.217,240.729 624.785,241.671 625.353,243.727 625.922,244.317 626.49,245.313 627.058,246.11 627.627,246.746 628.195,244.113 628.763,244.598 629.332,244.228 629.9,244.959 630.468,243.432 631.037,244.11 631.605,245.055 632.173,243.506 632.742,243.111 633.31,240.831 633.879,239.604 634.447,240.737 635.015,242.702 635.584,243.288 636.152,243.897 636.72,245.366 637.289,243.748 637.857,244.335 638.425,242.938 638.994,242.462 639.562,242.089 640.13,242.578 640.699,242.057 641.267,240.587 641.835,239.303 642.404,239.099 642.972,238.809 643.54,237.695 644.109,236.619 644.677,238.514 645.245,238.438 645.814,238.578 646.382,235.284 646.951,233.297 647.519,231.53 648.087,231.918 648.656,230.047 649.224,230.386 649.792,230.747 650.361,232.107 650.929,231.282 651.497,231.467 652.066,230.662 652.634,230.065 653.202,230.682 653.771,231.088 654.339,230.478 654.907,232.037 655.476,232.24 656.044,231.469 656.612,230.696 657.181,235.062 657.749,235.006 658.317,231.235 658.886,234.655 659.454,234.642 660.022,232.659 660.591,232.911 661.159,234.111 661.728,234.179 662.296,234.122 662.864,235.019 663.433,235.551 664.001,235.438 664.569,233.216 665.138,233.321 665.706,230.45 666.274,227.848 666.843,229.213 667.411,231.968 667.979,233.328 668.548,234.424 669.116,234.352 669.684,233.482 670.253,233.693 670.821,234.838 671.389,235.714 671.958,235.661 672.526,239.578 673.094,239.123 673.663,240.017 674.231,239.621 674.799,237.337 675.368,236.876 675.936,235.703 676.505,235.57 677.073,234.602 677.641,235.603 678.21,236.485 678.778,235.102 679.346,233.858 679.915,230.857 680.483,231.19 681.051,231.619 681.62,228.5 682.188,228.893 682.756,228.204 683.325,226.518 683.893,230.161 684.461,230.658 685.03,230.925 685.598,232.302 686.166,233.575 686.735,232.63 687.303,231.688 687.871,231.671 688.44,230.767 689.008,227.812 689.577,230.513 690.145,228.603 690.713,227.119 691.282,227.601 691.85,227.019 692.418,227.401 692.987,227.021 693.555,227.538 694.123,227.685 694.692,228.233 695.26,228.813 695.828,229.249 696.397,229.698 696.965,229.141 697.533,228.726 698.102,228.232 698.67,228.706 699.238,229.048 699.807,229.627 700.375,232.158 700.943,232.757 701.512,232.144 702.08,231.132 702.648,230.274 703.217,231.648 703.785,232.037 704.354,233.249 704.922,232.405 705.49,234.618 706.059,234.808 706.627,234.735 707.195,235.698 707.764,234.544 708.332,234.525 708.9,236.667 709.469,234.512 710.037,235.462 710.605,233.141 711.174,233.052 711.742,232.802 712.31,231.899 712.879,231.101 713.447,230.348 714.015,230.962 714.584,230.248 715.152,230.279 715.72,229.392 716.289,232.899 716.857,234.308 717.425,234.364 717.994,233.517 718.562,232.511 719.131,232.531 719.699,234.672 720.267,234.588 720.836,234.37 721.404,233.082 721.972,232.992 722.541,231.857 723.109,235.03 723.677,232.628 724.246,232.768 724.814,233.977 725.382,232.826 725.951,230.743 726.519,233.218 727.087,233.992 727.656,232.82 728.224,236.087 728.792,236.923 729.361,235.645 729.929,234.208 730.497,234.058 731.066,229.689 731.634,230.099 732.203,231.193 732.771,231.194 733.339,231.209 733.908,232.263 734.476,232.416 735.044,231.599 735.613,231.746 736.181,231.575 736.749,231.619 737.318,232.54 737.886,232.733 738.454,231.841 739.023,233.982 739.591,234.63 740.159,236.537 740.728,237.516 741.296,237.013 741.864,236.726 742.433,237.353 743.001,235.877 743.569,236.492 744.138,234.309 744.706,235.141 745.274,232.652 745.843,232.814 746.411,232.525 746.98,232.428 747.548,233.386 748.116,232.202 748.685,231.997 749.253,233.086 749.821,234.162 750.39,232.987 750.958,232.849 751.526,232.782 752.095,233.644 752.663,234.427 753.231,234.059 753.8,232.88 754.368,228.602 754.936,228.741 755.505,227.768 756.073,227.117 756.641,229.527 757.21,229.586 757.778,230.679 758.346,231.841 758.915,230.917 759.483,229.731 760.052,230.888 760.62,230.785 761.188,230.738 761.757,230.646 762.325,229.009 762.893,230.297 763.462,229.529 764.03,229.477 764.598,233.753 765.167,231.461 765.735,230.183 766.303,232.34 766.872,231.179 767.44,232.274 768.008,233.3 768.577,233.152 769.145,232.991 769.713,233.881 770.282,233.428 770.85,233.094 771.418,232.764 771.987,233.596 772.555,232.33 773.123,232.16 773.692,233.134 774.26,232.045 774.829,230.819 775.397,230.883 775.965,229.898 776.534,227.948 777.102,228.213 777.67,230.521 778.239,230.371 778.807,229.425 779.375,230.499 779.944,232.683 780.512,231.651 781.08,229.546 781.649,228.488 782.217,228.596 782.785,227.513 783.354,224.622 783.922,226.143 784.49,226.609 785.059,226.785 785.627,228.3 786.195,227.514 786.764,226.698 787.332,226.958 787.9,225.329 788.469,227.617 789.037,227.726 789.606,227.052 790.174,226.336 790.742,225.68 791.311,229.096 791.879,230.237 792.447,230.549 793.016,229.714 793.584,227.816 794.152,226.921 794.721,224.031 795.289,224.663 795.857,225.272 796.426,225.914 796.994,227.684 797.562,228.086 798.131,225.396 798.699,228.165 799.267,228.556 799.836,228.829 800.404,229.097 800.972,228.377 801.541,228.638 802.109,228.883 802.678,229.024 803.246,230.232 803.814,232.434 804.383,232.432 804.951,231.621 805.519,230.846 806.088,236.143 806.656,232.788 807.224,232.625 807.793,232.462 808.361,235.479 808.929,234.253 809.498,235.073 810.066,235.815 810.634,235.486 811.203,236.051 811.771,235.675 812.339,235.568 812.908,235.514 813.476,236.427 814.044,238.125 814.613,237.809 815.181,237.376 815.749,234.838 816.318,233.473 816.886,232.25 817.455,235.153 818.023,233.738 818.591,233.371 819.16,231.13 819.728,233.047 820.296,231.782 820.865,233.761 821.433,231.588 822.001,232.494 822.57,231.914 823.138,230.839 823.706,231.825 824.275,233.465 824.843,234.475 825.411,232.09 825.98,232.854 826.548,231.556 827.116,231.527 827.685,231.525 828.253,231.394 828.821,227.006 829.39,226.258 829.958,226.642 830.526,227 831.095,229.583 831.663,228.454 832.232,227.581 832.8,225.657 833.368,227.024 833.937,228.413 834.505,230.739 835.073,229.592 835.642,229.792 836.21,230.832 836.778,228.866 837.347,230.057 837.915,230.017 838.483,228.101 839.052,229.245 839.62,230.34 840.188,231.378 840.757,232.597 841.325,233.542 841.893,234.358 842.462,236.188 843.03,236.617 843.598,236.096 844.167,235.601 844.735,235.889 845.304,236.613 845.872,233.142 846.44,232.999 847.009,232.887 847.577,233.569 848.145,232.249 848.714,231.903 849.282,230.601 849.85,230.836 850.419,231.639 850.987,232.466 851.555,231.194 852.124,232.1 852.692,232.111 853.26,231.032 853.829,231.822 854.397,232.784 854.965,232.476 855.534,229.33 856.102,228.105 856.67,226.106 857.239,226.285 857.807,226.468 858.375,225.695 858.944,225.028 859.512,223.238 860.081,223.54 860.649,223.001 861.217,223.377 861.786,226.024 862.354,225.458 862.922,224.883 863.491,225.403 864.059,223.877 864.627,224.161 865.196,225.814 865.764,226.299 866.332,226.906 866.901,226.108 867.469,226.697 868.037,227.044 868.606,227.433 869.174,227.612 869.742,228.832 870.311,228.767 870.879,228.955 871.447,230.933 872.016,229.851 872.584,232.066 873.152,230.968 873.721,229.955 874.289,229.933 874.858,230.179 875.426,229.222 875.994,228.325 876.563,228.46 877.131,224.559 877.699,222.923 878.268,223.504 878.836,224.26 879.404,225.619 879.973,224.87 880.541,225.536 881.109,226.131 881.678,227.569 882.246,230.343 882.814,229.373 883.383,228.688 883.951,230.025 884.519,231.344 885.088,229.293 885.656,229.565 886.224,230.793 886.793,230.781 887.361,231.841 887.93,232.869 888.498,234.957 889.066,234.752 889.635,234.618 890.203,233.427 890.771,233.453 891.34,231.259 891.908,230.237 892.476,230.292 893.045,232.294 893.613,231.281 894.181,229.289 894.75,227.371 895.318,228.872 895.886,228.978 896.455,228.93 897.023,231.061 897.591,231.193 898.16,233.257 898.728,233.173 899.296,233.006 899.865,232.627 900.433,231.507 901.001,232.312 901.57,233.424 902.138,233.217 902.707,234.224 903.275,233.055 903.843,232.909 904.412,232.716 904.98,233.434 905.548,235.606 906.117,234.344 906.685,233.007 907.253,229.934 907.822,229.925 908.39,231.089 908.958,230.009 909.527,231.093 910.095,232.237 910.663,233.173 911.232,234.124 911.8,234.542 912.368,234.36 912.937,233.98 913.505,236.837 914.073,237.454 914.642,239.148 915.21,239.482 915.779,240.804 916.347,238.956 916.915,235.166 917.484,235.794 918.052,234.449 918.62,235.201 919.189,236.893 919.757,237.438 920.325,236.639 920.894,234.099 921.462,232.679 922.03,231.438 922.599,228.036 923.167,228.237 923.735,228.071 924.304,226.104 924.872,225.338 925.44,225.595 926.009,226.783 926.577,226.103 927.145,228.206 927.714,228.236 928.282,229.352 928.85,228.321 929.419,229.448 929.987,230.307 930.556,231.375 931.124,232.15 931.692,230.689 932.261,229.463 932.829,230.384 933.397,229.324 933.966,228.496 934.534,228.566 935.102,229.311 935.671,230.228 936.239,230.145 936.807,230.073 937.376,231.111 937.944,231.016 938.512,232.937 939.081,230.623 939.649,230.525 940.217,228.485 940.786,228.601 941.354,229.416 941.922,228.364 942.491,231.658 943.059,230.493 943.627,230.467 944.196,229.478 944.764,228.486 945.333,228.546 945.901,227.47 946.469,227.568 947.038,227.647 947.606,225.689 948.174,225.021 948.743,225.297 949.311,225.585 949.879,226.872 950.448,227.897 951.016,230.016 951.584,228.956 952.153,229.169 952.721,231.091 953.289,231.042 953.858,229.999 954.426,230.853 954.994,230.72 955.563,230.502 956.131,229.589 956.699,229.645 957.268,227.555 957.836,227.573 958.405,225.731 958.973,225.796 959.541,226.065 960.11,224.222 960.678,225.808 961.246,228.15 961.815,227.345 962.383,228.656 962.951,230.801 963.52,230.956 964.088,230.932 964.656,228.7 965.225,226.891 965.793,226.036 966.361,228.385 966.93,229.653 967.498,230.939 968.066,230.97 968.635,229.688 969.203,228.975 969.771,228.954 970.34,230.151 970.908,230.37 971.476,233.15 972.045,231.927 972.613,231.661 973.182,231.558 973.75,231.191 974.318,229.179 974.887,228.015 975.455,230.247 976.023,231.251 976.592,231.04 977.16,231.009 977.728,233.012 978.297,233.633 978.865,232.369 979.433,232.203 980.002,232.968 980.57,231.688 981.138,233.614 981.707,234.361 982.275,234.092 982.843,233.996 983.412,232.786 983.98,231.497 984.548,230.474 985.117,229.408 985.685,228.337 986.253,230.315 986.822,230.171 987.39,230.149 987.959,229.962 988.527,229.035 989.095,227.926 989.664,228.09 990.232,228.124 990.8,229.398 991.369,229.493 991.937,229.697 992.505,232.725 993.074,232.425 993.642,228.112 994.21,228.288 994.779,229.27 995.347,229.197 995.915,229.411 996.484,226.519 997.052,227.872 997.62,227.09 998.189,228.268 998.757,228.409 999.325,228.433 999.894,228.556 1000.46,228.722 1001.03,227.519 1001.6,227.688 1002.17,227.805 1002.74,227.975 1003.3,230.41 1003.87,230.538 1004.44,230.503 1005.01,230.353 1005.58,232.352 1006.15,232.026 1006.71,231.782 1007.28,231.46 1007.85,230.568 1008.42,229.354 1008.99,229.441 1009.56,227.429 1010.12,229.369 1010.69,229.138 1011.26,228.241 1011.83,229.488 1012.4,228.541 1012.97,227.581 1013.53,228.786 1014.1,231.068 1014.67,232.112 1015.24,232.907 1015.81,233.781 1016.38,233.5 1016.94,232.214 1017.51,233.984 1018.08,231.407 1018.65,230.895 1019.22,229.489 1019.79,230.549 1020.35,231.445 1020.92,230.183 1021.49,232.098 1022.06,231.737 1022.63,233.826 1023.2,234.251 1023.76,232.87 1024.33,234.499 1024.9,235.122 1025.47,234.555 1026.04,234.378 1026.61,233.863 1027.17,232.444 1027.74,232.172 1028.31,229.915 1028.88,229.899 1029.45,230.828 1030.02,229.772 1030.58,228.553 1031.15,228.649 1031.72,227.759 1032.29,227.81 1032.86,226.882 1033.43,225.737 1033.99,227.201 1034.56,225.159 1035.13,224.222 1035.7,221.339 1036.27,222.157 1036.84,223.571 1037.4,222.922 1037.97,223.417 1038.54,221.704 1039.11,222.109 1039.68,223.716 1040.25,224.084 1040.81,224.505 1041.38,224.92 1041.95,225.408 1042.52,226.598 1043.09,227.865 1043.66,227.977 1044.22,230.158 1044.79,230.112 1045.36,231.206 1045.93,230.04 1046.5,230.161 1047.07,228.209 1047.63,227.216 1048.2,229.524 1048.77,230.451 1049.34,231.566 1049.91,231.699 1050.48,231.782 1051.05,233.826 1051.61,233.64 1052.18,232.209 1052.75,233.116 1053.32,233.05 1053.89,234.863 1054.46,232.61 1055.02,231.618 1055.59,232.401 1056.16,230.109 1056.73,231.194 1057.3,232.235 1057.87,234.186 1058.43,232.73 1059,232.319 1059.57,233.103 1060.14,233.018 1060.71,232.024 1061.28,228.646 1061.84,229.984 1062.41,228.915 1062.98,227.123 1063.55,228.432 1064.12,226.427 1064.69,227.725 1065.25,226.962 1065.82,225.215 1066.39,223.471 1066.96,225.967 1067.53,227.376 1068.1,228.557 1068.66,228.593 1069.23,228.766 1069.8,227.655 1070.37,226.874 1070.94,226.124 1071.51,228.559 1072.07,228.645 1072.64,230.66 1073.21,229.691 1073.78,232.967 1074.35,230.807 1074.92,230.731 1075.48,230.766 1076.05,230.8 1076.62,232.736 1077.19,233.596 1077.76,232.647 1078.33,232.458 1078.89,232.211 1079.46,231.052 1080.03,231.931 1080.6,231.861 1081.17,229.919 1081.74,229.912 1082.3,228.764 1082.87,228.797 1083.44,227.939 1084.01,227.03 1084.58,227.319 1085.15,228.713 1085.71,226.657 1086.28,226.816 1086.85,224.86 1087.42,226.352 1087.99,227.724 1088.56,228.999 1089.12,230.07 1089.69,228.937 1090.26,229.187 1090.83,231.408 1091.4,230.166 1091.97,230.234 1092.53,230.167 1093.1,233.107 1093.67,232.883 1094.24,231.921 1094.81,233.601 1095.38,233.56 1095.94,235.359 1096.51,236.047 1097.08,234.544 1097.65,233.265 1098.22,232.833 1098.79,231.463 1099.35,231.198 1099.92,229.952 1100.49,229.01 1101.06,228.253 1101.63,226.447 1102.2,226.763 1102.76,225.76 1103.33,225.988 1103.9,225.151 1104.47,225.538 1105.04,227.052 1105.61,231.368 1106.17,230.215 1106.74,231.197 1107.31,231.218 1107.88,230.038 1108.45,231.182 1109.02,230.062 1109.58,229.95 1110.15,230.192 1110.72,229.256 1111.29,231.539 1111.86,229.263 1112.43,228.324 1112.99,227.511 1113.56,227.734 1114.13,229.861 1114.7,229.773 1115.27,230.854 1115.84,230.767 1116.4,229.683 1116.97,229.564 1117.54,229.728 1118.11,227.813 1118.68,226.884 1119.25,227.146 1119.81,228.482 1120.38,228.682 1120.95,228.843 1121.52,230.094 1122.09,230.147 1122.66,229.317 1123.23,229.305 1123.79,229.325 1124.36,229.388 1124.93,229.344 1125.5,228.396 1126.07,229.509 1126.64,228.451 1127.2,228.526 1127.77,228.595 1128.34,229.774 1128.91,228.896 1129.48,230.927 1130.05,230.815 1130.61,230.733 1131.18,230.579 1131.75,233.883 1132.32,233.65 1132.89,230.428 1133.46,231.691 1134.02,231.559 1134.59,230.48 1135.16,230.378 1135.73,231.19 1136.3,225.89 1136.87,226.075 1137.43,224.528 1138,225.161 1138.57,224.37 1139.14,225.708 1139.71,224.975 1140.28,224.298 1140.84,224.74 1141.41,226.168 1141.98,227.417 1142.55,228.63 1143.12,229.518 1143.69,227.516 1144.25,226.957 1144.82,227.492 1145.39,226.647 1145.96,225.948 1146.53,227.264 1147.1,224.847 1147.66,227.437 1148.23,229.659 1148.8,229.71 1149.37,229.803 1149.94,232.093 1150.51,231.161 1151.07,229.195 1151.64,226.267 1152.21,226.511 1152.78,227.758 1153.35,226.759 1153.92,228.33 1154.48,228.561 1155.05,228.866 1155.62,227.036 1156.19,226.211 1156.76,227.558 1157.33,228.952 1157.89,230.172 1158.46,229.611 1159.03,228.881 1159.6,229.411 1160.17,231.581 1160.74,229.418 1161.3,226.38 1161.87,227.635 1162.44,229.911 1163.01,234.97 1163.58,234.639 1164.15,234.367 1164.71,236.275 1165.28,238.017 1165.85,235.526 1166.42,238.224 1166.99,237.653 1167.56,238.058 1168.12,235.36 1168.69,233.029 1169.26,233.151 1169.83,232.951 1170.4,231.573 1170.97,233.4 1171.53,234.366 1172.1,234.193 1172.67,233.922 1173.24,233.677 1173.81,232.328 1174.38,231.911 1174.94,232.713 1175.51,234.546 1176.08,234.064 1176.65,234.682 1177.22,232.109 1177.79,233.885 1178.35,235.615 1178.92,236.32 1179.49,235.823 1180.06,234.186 1180.63,231.723 1181.2,231.464 1181.76,231.378 1182.33,229.16 1182.9,229.383 1183.47,232.304 1184.04,229.055 1184.61,230.186 1185.17,230.059 1185.74,229.071 1186.31,230.257 1186.88,229.992 1187.45,230.867 1188.02,231.696 1188.58,232.425 1189.15,230.112 1189.72,231.216 1190.29,230.807 1190.86,229.754 1191.43,228.803 1192,228.771 1192.56,227.78 1193.13,229.987 1193.7,229.93 1194.27,228.923 1194.84,227.091 1195.41,228.109 1195.97,229.075 1196.54,226.962 1197.11,227.23 1197.68,228.356 1198.25,228.411 1198.82,228.545 1199.38,228.506 1199.95,228.386 1200.52,230.523 1201.09,229.304 1201.66,231.1 1202.23,229.98 1202.79,229.837 1203.36,230.986 1203.93,232.203 1204.5,229.89 1205.07,230.827 1205.64,230.665 1206.2,230.607 1206.77,230.472 1207.34,230.287 1207.91,229.549 1208.48,230.486 1209.05,230.338 1209.61,228.969 1210.18,230.036 1210.75,231.992 1211.32,232.883 1211.89,230.554 1212.46,229.201 1213.02,227.13 1213.59,225.099 1214.16,224.386 1214.73,226.98 1215.3,229.168 1215.87,231.093 1216.43,231.966 1217,233.015 1217.57,232.843 1218.14,230.324 1218.71,229.048 1219.28,228.045 1219.84,229.179 1220.41,229.352 1220.98,227.373 1221.55,228.724 1222.12,228.938 1222.69,229.982 1223.25,228.855 1223.82,226.897 1224.39,225.079 1224.96,221.149 1225.53,220.647 1226.1,221.213 1226.66,220.854 1227.23,222.619 1227.8,223.244 1228.37,223.647 1228.94,222.805 1229.51,222.158 1230.07,222.73 1230.64,224.308 1231.21,222.646 1231.78,223.203 1232.35,224.803 1232.92,224.157 1233.48,223.804 1234.05,226.728 1234.62,225.98 1235.19,225.578 1235.76,223.873 1236.33,223.583 1236.89,225.268 1237.46,226.856 1238.03,228.207 1238.6,228.605 1239.17,227.731 1239.74,229.046 1240.3,228.463 1240.87,230.652 1241.44,229.686 1242.01,227.785 1242.58,230.051 1243.15,230.314 1243.71,231.58 1244.28,230.656 1244.85,229.676 1245.42,229.738 1245.99,229.099 1246.56,230.487 1247.12,230.488 1247.69,230.603 1248.26,231.628 1248.83,230.562 1249.4,232.589 1249.97,232.179 1250.53,230.932 1251.1,230.945 1251.67,231.072 1252.24,236.396 1252.81,234.985 1253.38,235.765 1253.94,232.363 1254.51,233.292 1255.08,235.241 1255.65,238.303 1256.22,240.813 1256.79,242.237 1257.35,241.307 1257.92,241.668 1258.49,239.702 1259.06,238.193 1259.63,237.537 1260.2,235.859 1260.76,234.324 1261.33,233.049 1261.9,232.811 1262.47,232.362 1263.04,232.13 1263.61,233.936 1264.18,234.461 1264.74,235.283 1265.31,233.882 1265.88,233.654 1266.45,233.298 1267.02,232.027 1267.59,231.937 1268.15,231.742 1268.72,232.326 1269.29,231.817 1269.86,230.712 1270.43,231.684 1271,230.413 1271.56,231.298 1272.13,229.183 1272.7,228.866 1273.27,229.877 1273.84,227.604 1274.41,225.603 1274.97,224.841 1275.54,226.179 1276.11,225.136 1276.68,225.182 1277.25,224.498 1277.82,226.769 1278.38,229.145 1278.95,231.197 1279.52,231.015 1280.09,230.64 1280.66,230.523 1281.23,231.424 1281.79,232.103 1282.36,232.939 1282.93,231.521 1283.5,229.066 1284.07,228.973 1284.64,229.065 1285.2,230.912 1285.77,230.456 1286.34,232.52 1286.91,235.188 1287.48,235.733 1288.05,236.131 1288.61,235.58 1289.18,234.904 1289.75,235.188 1290.32,237.89 1290.89,236.091 1291.46,235.141 1292.02,233.661 1292.59,235.2 1293.16,234.628 1293.73,234.136 1294.3,232.525 1294.87,229.167 1295.43,229.872 1296,227.757 1296.57,229.837 1297.14,229.689 1297.71,229.326 1298.28,229.928 1298.84,231.976 1299.41,232.736 1299.98,230.457 1300.55,231.315 1301.12,232.002 1301.69,230.342 1302.25,227.775 1302.82,227.676 1303.39,227.611 1303.96,227.533 1304.53,227.443 1305.1,225.479 1305.66,224.624 1306.23,223.872 1306.8,223.932 1307.37,224.195 1307.94,222.488 1308.51,225.07 1309.07,225.112 1309.64,225.451 1310.21,226.571 1310.78,226.753 1311.35,224.683 1311.92,226.075 1312.48,227.224 1313.05,227.484 1313.62,226.322 1314.19,225.509 1314.76,226.889 1315.33,229.109 1315.89,227.978 1316.46,226.863 1317.03,225.184 1317.6,227.493 1318.17,228.614 1318.74,226.794 1319.3,227.026 1319.87,227.055 1320.44,227.114 1321.01,227.052 1321.58,227.212 1322.15,227.293 1322.71,228.559 1323.28,226.614 1323.85,224.722 1324.42,225.175 1324.99,225.576 1325.56,226.935 1326.12,228.115 1326.69,228.085 1327.26,228.271 1327.83,229.591 1328.4,228.535 1328.97,227.662 1329.53,226.735 1330.1,225.799 1330.67,226.006 1331.24,224.97 1331.81,224.505 1332.38,228.871 1332.94,227.687 1333.51,228.817 1334.08,228.848 1334.65,228.031 1335.22,227.091 1335.79,227.211 1336.36,229.757 1336.92,231.146 1337.49,231.009 1338.06,230.767 1338.63,228.655 1339.2,229.857 1339.77,228.859 1340.33,226.901 1340.9,227.961 1341.47,231.021 1342.04,229.934 1342.61,228.824 1343.18,229.037 1343.74,227.114 1344.31,227.633 1344.88,227.817 1345.45,230.172 1346.02,231.31 1346.59,228.224 1347.15,228.461 1347.72,230.642 1348.29,231.822 1348.86,230.885 1349.43,231.886 1350,230.703 1350.56,231.62 1351.13,229.525 1351.7,228.435 1352.27,229.453 1352.84,229.687 1353.41,229.791 1353.97,226.74 1354.54,228.215 1355.11,228.141 1355.68,228.227 1356.25,228.258 1356.82,226.412 1357.38,228.026 1357.95,227.224 1358.52,225.221 1359.09,223.512 1359.66,221.998 1360.23,222.444 1360.79,222.891 1361.36,224.283 1361.93,223.978 1362.5,223.264 1363.07,223.981 1363.64,225.793 1364.2,226.349 1364.77,227.66 1365.34,229.129 1365.91,229.518 1366.48,230.717 1367.05,230.621 1367.61,229.524 1368.18,227.631 1368.75,228.069 1369.32,226.208 1369.89,224.257 1370.46,226.851 1371.02,227.178 1371.59,227.506 1372.16,227.854 1372.73,228.291 1373.3,230.58 1373.87,229.691 1374.43,231.814 1375,231.866 1375.57,234.031 1376.14,235.971 1376.71,234.651 1377.28,233.217 1377.84,234.071 1378.41,233.968 1378.98,235.741 1379.55,235.705 1380.12,236.572 1380.69,239.211 1381.25,237.298 1381.82,236.916 1382.39,234.42 1382.96,233.252 1383.53,233.946 1384.1,234.635 1384.66,235.36 1385.23,234.894 1385.8,234.43 1386.37,236.055 1386.94,236.751 1387.51,233.166 1388.07,233.158 1388.64,232.026 1389.21,229.417 1389.78,229.703 1390.35,232.971 1390.92,231.706 1391.48,231.443 1392.05,233.088 1392.62,230.555 1393.19,230.279 1393.76,229.105 1394.33,227.496 1394.89,226.48 1395.46,226.788 1396.03,231.004 1396.6,232.059 1397.17,231.66 1397.74,231.318 1398.3,232.148 1398.87,232.114 1399.44,230.996 1400.01,233.02 1400.58,231.839 1401.15,232.738 1401.71,231.461 1402.28,230.339 1402.85,230.204 1403.42,229.994 1403.99,230.033 1404.56,228.945 1405.13,229.105 1405.69,229.152 1406.26,229.137 1406.83,229.987 1407.4,229.954 1407.97,230.885 1408.54,230.771 1409.1,230.465 1409.67,230.383 1410.24,230.303 1410.81,230.278 1411.38,231.197 1411.95,233.333 1412.51,233.013 1413.08,231.701 1413.65,231.313 1414.22,231.313 1414.79,230.167 1415.36,229.877 1415.92,229.928 1416.49,229.881 1417.06,228.891 1417.63,228.082 1418.2,227.3 1418.77,226.433 1419.33,226.615 1419.9,230.017 1420.47,229.896 1421.04,230.825 1421.61,230.867 1422.18,230.768 1422.74,232.513 1423.31,232.163 1423.88,233.066 1424.45,231.784 1425.02,231.501 1425.59,229.242 1426.15,227.202 1426.72,229.345 1427.29,229.224 1427.86,228.446 1428.43,228.482 1429,224.463 1429.56,221.699 1430.13,223.358 1430.7,225.876 1431.27,228.147 1431.84,225.368 1432.41,222.601 1432.97,224.137 1433.54,223.563 1434.11,224.815 1434.68,225.267 1435.25,226.478 1435.82,226.639 1436.38,227.054 1436.95,226.228 1437.52,226.349 1438.09,226.611 1438.66,227.121 1439.23,229.157 1439.79,229.405 1440.36,231.461 1440.93,232.416 1441.5,233.405 1442.07,232.32 1442.64,230.963 1443.2,230.042 1443.77,231.965 1444.34,231.938 1444.91,229.871 1445.48,228.861 1446.05,227.805 1446.61,228.197 1447.18,230.448 1447.75,229.517 1448.32,229.48 1448.89,227.44 1449.46,227.629 1450.02,227.872 1450.59,230.215 1451.16,230.152 1451.73,230.186 1452.3,231.303 1452.87,231.014 1453.43,232.085 1454,231.82 1454.57,229.798 1455.14,229.991 1455.71,231.117 1456.28,230.09 1456.84,230.102 1457.41,231.309 1457.98,231.407 1458.55,231.397 1459.12,232.601 1459.69,233.345 1460.25,230.983 1460.82,228.942 1461.39,229.045 1461.96,229.07 1462.53,226.94 1463.1,228.299 1463.66,229.47 1464.23,229.494 1464.8,229.497 1465.37,228.583 1465.94,227.587 1466.51,229.947 1467.07,227.781 1467.64,226.983 1468.21,229.3 1468.78,228.211 1469.35,228.358 1469.92,226.353 1470.48,227.752 1471.05,225.865 1471.62,225.188 1472.19,223.443 1472.76,224.098 1473.33,223.419 1473.89,228.139 1474.46,229.316 1475.03,230.497 1475.6,229.553 1476.17,226.497 1476.74,224.894 1477.31,224.486 1477.87,226.915 1478.44,229.402 1479.01,229.466 1479.58,231.517 1480.15,232.442 1480.72,232.484 1481.28,232.371 1481.85,232.365 1482.42,231.294 1482.99,229.255 1483.56,231.411 1484.13,230.245 1484.69,230.081 1485.26,228.923 1485.83,227.053 1486.4,225.242 1486.97,223.467 1487.54,224.026 1488.1,224.736 1488.67,226.15 1489.24,227.504 1489.81,226.485 1490.38,229.832 1490.95,228.815 1491.51,229.031 1492.08,230.062 1492.65,230.103 1493.22,230.344 1493.79,230.523 1494.36,232.798 1494.92,232.69 1495.49,233.551 1496.06,232.575 1496.63,231.502 1497.2,231.509 1497.77,231.385 1498.33,232.541 1498.9,234.447 1499.47,235.094 1500.04,233.838 1500.61,234.421 1501.18,235.055 1501.74,233.826 1502.31,232.792 1502.88,232.804 1503.45,233.662 1504.02,235.249 1504.59,234.657 1505.15,235.271 1505.72,235.717 1506.29,236.282 1506.86,236.652 1507.43,235.88 1508,234.301 1508.56,235.167 1509.13,233.91 1509.7,237.549 1510.27,235.886 1510.84,234.506 1511.41,233.837 1511.97,233.538 1512.54,232.083 1513.11,231.969 1513.68,231.663 1514.25,232.386 1514.82,232.991 1515.38,233.794 1515.95,231.266 1516.52,230.162 1517.09,229.876 1517.66,226.921 1518.23,226.079 1518.79,224.173 1519.36,225.426 1519.93,225.618 1520.5,225.756 1521.07,227.008 1521.64,226.317 1522.2,226.38 1522.77,224.418 1523.34,224.783 1523.91,222.86 1524.48,226.363 1525.05,228.426 1525.61,227.538 1526.18,227.693 1526.75,226.89 1527.32,225.011 1527.89,226.464 1528.46,225.744 1529.02,226.219 1529.59,226.204 1530.16,225.433 1530.73,225.691 1531.3,223.854 1531.87,224.188 1532.43,221.37 1533,219.972 1533.57,222.617 1534.14,225.203 1534.71,224.448 1535.28,223.839 1535.84,223.423 1536.41,223.749 1536.98,224.206 1537.55,225.732 1538.12,225.332 1538.69,228.766 1539.25,229.886 1539.82,230.812 1540.39,231.587 1540.96,231.647 1541.53,233.93 1542.1,233.439 1542.66,235.379 1543.23,234.921 1543.8,235.751 1544.37,236.325 1544.94,234.851 1545.51,235.692 1546.08,235.497 1546.64,233.035 1547.21,231.457 1547.78,230.259 1548.35,231.291 1548.92,233.161 1549.49,231.884 1550.05,230.62 1550.62,230.614 1551.19,233.48 1551.76,234.202 1552.33,232.771 1552.9,235.502 1553.46,234.039 1554.03,233.875 1554.6,230.568 1555.17,232.389 1555.74,229.051 1556.31,232.054 1556.87,231.01 1557.44,229.847 1558.01,232.942 1558.58,231.609 1559.15,231.537 1559.72,230.284 1560.28,231.47 1560.85,231.191 1561.42,232.038 1561.99,233.051 1562.56,234.976 1563.13,235.633 1563.69,238.134 1564.26,233.209 1564.83,233.185 1565.4,232.914 1565.97,234.75 1566.54,231.226 1567.1,229.925 1567.67,227.921 1568.24,229.858 1568.81,228.972 1569.38,229.047 1569.95,227.884 1570.51,227.983 1571.08,228.015 1571.65,228.088 1572.22,228.104 1572.79,229.223 1573.36,229.06 1573.92,228.189 1574.49,228.258 1575.06,228.328 1575.63,224.218 1576.2,224.554 1576.77,225.797 1577.33,225.869 1577.9,224.865 1578.47,226.338 1579.04,228.628 1579.61,226.67 1580.18,228.97 1580.74,227.226 1581.31,226.462 1581.88,227.708 1582.45,226.839 1583.02,227.084 1583.59,227.341 1584.15,228.626 1584.72,232.002 1585.29,232.051 1585.86,232.96 1586.43,231.536 1587,232.477 1587.56,230.033 1588.13,230.018 1588.7,229.029 1589.27,230.146 1589.84,229.91 1590.41,231.83 1590.97,234.644 1591.54,233.927 1592.11,234.767 1592.68,233.477 1593.25,233.131 1593.82,232.831 1594.38,232.616 1594.95,234.481 1595.52,233.859 1596.09,232.387 1596.66,231.14 1597.23,230.895 1597.79,233.505 1598.36,231.964 1598.93,231.618 1599.5,231.293 1600.07,231.268 1600.64,232.241 1601.2,232.046 1601.77,231.811 1602.34,231.428 1602.91,230.29 1603.48,230.121 1604.05,229.87 1604.61,231.958 1605.18,232.47 1605.75,231.213 1606.32,231.014 1606.89,229.647 1607.46,227.477 1608.02,226.518 1608.59,226.508 1609.16,226.893 1609.73,226.982 1610.3,227.285 1610.87,225.24 1611.43,225.479 1612,222.657 1612.57,222.148 1613.14,222.701 1613.71,222.282 1614.28,222.742 1614.84,223.156 1615.41,222.711 1615.98,223.27 1616.55,223.732 1617.12,226.332 1617.69,229.638 1618.26,229.873 1618.82,230.901 1619.39,232.169 1619.96,232.997 1620.53,233.725 1621.1,231.572 1621.67,234.583 1622.23,234.261 1622.8,233.748 1623.37,233.29 1623.94,233.193 1624.51,230.685 1625.08,230.482 1625.64,231.432 1626.21,233.392 1626.78,232.97 1627.35,232.663 1627.92,232.369 1628.49,232.03 1629.05,231.888 1629.62,231.812 1630.19,233.718 1630.76,232.306 1631.33,233.114 1631.9,230.678 1632.46,230.481 1633.03,230.118 1633.6,230.298 1634.17,228.227 1634.74,226.46 1635.31,225.602 1635.87,225.619 1636.44,225.799 1637.01,225.982 1637.58,226.12 1638.15,225.254 1638.72,224.462 1639.28,224.877 1639.85,225.425 1640.42,226.917 1640.99,228.041 1641.56,229.432 1642.13,229.41 1642.69,230.568 1643.26,229.492 1643.83,230.515 1644.4,230.273 1644.97,233.327 1645.54,232.964 1646.1,231.695 1646.67,231.343 1647.24,231.105 1647.81,229.756 1648.38,231.983 1648.95,231.806 1649.51,232.807 1650.08,232.654 1650.65,231.433 1651.22,230.264 1651.79,227.059 1652.36,227.448 1652.92,226.754 1653.49,225.81 1654.06,223.97 1654.63,223.266 1655.2,220.666 1655.77,221.298 1656.33,221.857 1656.9,222.518 1657.47,222.884 1658.04,225.252 1658.61,224.604 1659.18,227.951 1659.74,230.193 1660.31,229.322 1660.88,230.135 1661.45,227.132 1662.02,226.352 1662.59,225.617 1663.15,225.955 1663.72,228.303 1664.29,227.38 1664.86,227.583 1665.43,227.783 1666,227.05 1666.56,228.331 1667.13,229.487 1667.7,229.66 1668.27,229.494 1668.84,230.672 1669.41,229.52 1669.97,230.546 1670.54,228.506 1671.11,229.771 1671.68,230.654 1672.25,229.513 1672.82,229.639 1673.38,230.545 1673.95,231.56 1674.52,233.656 1675.09,233.36 1675.66,233.107 1676.23,234.882 1676.79,235.46 1677.36,234.204 1677.93,232.733 1678.5,230.577 1679.07,229.49 1679.64,228.306 1680.2,227.616 1680.77,229.653 1681.34,228.902 1681.91,227.956 1682.48,228.178 1683.05,228.362 1683.61,229.345 1684.18,229.378 1684.75,231.347 1685.32,231.083 1685.89,230.883 1686.46,228.978 1687.02,229.936 1687.59,230.784 1688.16,230.864 1688.73,230.52 1689.3,230.516 1689.87,230.779 1690.44,230.712 1691,229.467 1691.57,230.738 1692.14,229.408 1692.71,229.567 1693.28,229.704 1693.85,229.503 1694.41,228.742 1694.98,230.894 1695.55,231.935 1696.12,231.83 1696.69,230.763 1697.26,229.739 1697.82,230.954 1698.39,231.016 1698.96,232.598 1699.53,229.423 1700.1,231.399 1700.67,232.069 1701.23,233.904 1701.8,232.388 1702.37,232.072 1702.94,231.851 1703.51,229.552 1704.08,230.65 1704.64,230.83 1705.21,231.008 1705.78,231.915 1706.35,231.325 1706.92,232.161 1707.49,231.985 1708.05,230.679 1708.62,229.509 1709.19,228.431 1709.76,229.598 1710.33,227.58 1710.9,226.871 1711.46,227.017 1712.03,227.421 1712.6,229.481 1713.17,230.443 1713.74,230.415 1714.31,230.413 1714.87,231.307 1715.44,230.152 1716.01,231.293 1716.58,232.014 1717.15,230.71 1717.72,229.616 1718.28,229.562 1718.85,228.487 1719.42,229.708 1719.99,229.545 1720.56,228.464 1721.13,225.478 1721.69,227.078 1722.26,224.173 1722.83,223.679 1723.4,223.264 1723.97,223.742 1724.54,223.149 1725.1,223.396 1725.67,226.857 1726.24,227.196 1726.81,228.395 1727.38,228.672 1727.95,230.106 1728.51,227.113 1729.08,226.258 1729.65,226.582 1730.22,225.809 1730.79,226.259 1731.36,226.716 1731.92,229.188 1732.49,228.43 1733.06,228.833 1733.63,226.969 1734.2,226.13 1734.77,228.579 1735.33,230.721 1735.9,233.737 1736.47,230.309 1737.04,232.255 1737.61,233.102 1738.18,233.968 1738.74,236.682 1739.31,237.267 1739.88,237.741 1740.45,237.211 1741.02,237.819 1741.59,237.082 1742.15,236.531 1742.72,234.149 1743.29,233.767 1743.86,231.588 1744.43,232.623 1745,233.402 1745.56,232.199 1746.13,230.71 1746.7,233.56 1747.27,233.31 1747.84,234.138 1748.41,235.747 1748.97,233.159 1749.54,232.691 1750.11,231.444 1750.68,233.378 1751.25,231.989 1751.82,231.885 1752.38,230.608 1752.95,229.61 1753.52,227.361 1754.09,228.229 1754.66,227.258 1755.23,228.341 1755.79,228.122 1756.36,230.134 1756.93,230.13 1757.5,230.906 1758.07,231.921 1758.64,232.743 1759.21,233.425 1759.77,234.186 1760.34,234.716 1760.91,234.517 1761.48,234.392 1762.05,233.936 1762.62,232.537 1763.18,231.219 1763.75,228.944 1764.32,229.942 1764.89,229.541 1765.46,230.505 1766.03,231.603 1766.59,233.282 1767.16,231.857 1767.73,233.642 1768.3,234.178 1768.87,231.617 1769.44,231.344 1770,230.026 1770.57,230.854 1771.14,230.638 1771.71,230.549 1772.28,229.584 1772.85,228.55 1773.41,229.718 1773.98,228.54 1774.55,230.471 1775.12,230.076 1775.69,228.861 1776.26,230.035 1776.82,231.011 1777.39,230.833 1777.96,229.623 1778.53,229.257 1779.1,229.333 1779.67,229.273 1780.23,228.269 1780.8,228.289 1781.37,228.031 1781.94,225.994 1782.51,225.106 1783.08,226.358 1783.64,223.378 1784.21,222.779 1784.78,222.177 1785.35,223.878 1785.92,222.086 1786.49,223.712 1787.05,223.995 1787.62,222.38 1788.19,225.911 1788.76,228.173 1789.33,228.11 1789.9,228.081 1790.46,228.932 1791.03,228.915 1791.6,227.935 1792.17,227.855 1792.74,229.018 1793.31,228.139 1793.87,227.063 1794.44,228.222 1795.01,227.107 1795.58,228.433 1796.15,230.955 1796.72,229.563 1797.28,228.374 1797.85,227.372 1798.42,226.53 1798.99,226.633 1799.56,225.81 1800.13,226.216 1800.69,225.385 1801.26,224.869 1801.83,227.331 1802.4,226.299 1802.97,228.712 1803.54,231.074 1804.1,230.948 1804.67,229.926 1805.24,229.977 1805.81,229.687 1806.38,226.527 1806.95,226.879 1807.51,228.059 1808.08,226.925 1808.65,226.226 1809.22,226.59 1809.79,224.893 1810.36,227.299 1810.92,226.788 1811.49,231.034 1812.06,231.976 1812.63,232.823 1813.2,232.695 1813.77,231.429 1814.33,229.306 1814.9,229.414 1815.47,229.426 1816.04,230.475 1816.61,230.465 1817.18,230.442 1817.74,229.314 1818.31,228.33 1818.88,230.611 1819.45,228.428 1820.02,228.404 1820.59,229.403 1821.15,231.527 1821.72,232.393 1822.29,232.158 1822.86,234.032 1823.43,232.529 1824,231.235 1824.56,231.049 1825.13,230.997 1825.7,227.673 1826.27,227.774 1826.84,228.774 1827.41,229.742 1827.97,229.723 1828.54,229.914 1829.11,230.896 1829.68,229.938 1830.25,230.946 1830.82,234.734 1831.39,233.32 1831.95,232.884 1832.52,231.795 1833.09,231.72 1833.66,231.512 1834.23,234.182 1834.8,231.618 1835.36,233.408 1835.93,231.205 1836.5,228.047 1837.07,229.996 1837.64,230.01 1838.21,229.811 1838.77,230.613 1839.34,230.413 1839.91,230.139 1840.48,228.9 1841.05,227.92 1841.62,227.934 1842.18,228.03 1842.75,230.079 1843.32,231.96 1843.89,230.73 1844.46,228.714 1845.03,229.896 1845.59,228.916 1846.16,227.851 1846.73,225.887 1847.3,225.227 1847.87,224.259 1848.44,225.487 1849,224.645 1849.57,224.931 1850.14,226.209 1850.71,226.64 1851.28,226.772 1851.85,227.005 1852.41,226.172 1852.98,228.345 1853.55,228.363 1854.12,227.391 1854.69,229.627 1855.26,228.723 1855.82,229.975 1856.39,228.968 1856.96,230.232 1857.53,230.389 1858.1,229.39 1858.67,229.542 1859.23,230.666 1859.8,230.565 1860.37,229.545 1860.94,230.495 1861.51,229.377 1862.08,228.245 1862.64,230.535 1863.21,229.317 1863.78,230.387 1864.35,231.352 1864.92,232.267 1865.49,231.072 1866.05,231.144 1866.62,232.173 1867.19,232.904 1867.76,233.767 1868.33,231.651 1868.9,232.715 1869.46,230.572 1870.03,230.533 1870.6,229.613 1871.17,229.69 1871.74,229.795 1872.31,231.723 1872.87,229.422 1873.44,231.443 1874.01,231.346 1874.58,229.162 1875.15,230.266 1875.72,231.318 1876.28,230.182 1876.85,231.044 1877.42,231.923 1877.99,229.704 1878.56,229.608 1879.13,230.534 1879.69,230.377 1880.26,227.445 1880.83,228.618 1881.4,228.971 1881.97,228.868 1882.54,230.012 1883.1,229.886 1883.67,227.844 1884.24,225.931 1884.81,224.021 1885.38,222.31 1885.95,221.962 1886.51,224.701 1887.08,225.016 1887.65,226.483 1888.22,225.773 1888.79,226.38 1889.36,227.817 1889.92,227.867 1890.49,227.884 1891.06,228.243 1891.63,229.326 1892.2,228.23 1892.77,227.297 1893.33,225.584 1893.9,225.704 1894.47,224.013 1895.04,225.24 1895.61,226.709 1896.18,226.016 1896.74,226.38 1897.31,225.763 1897.88,228.142 1898.45,229.598 1899.02,228.615 1899.59,228.779 1900.16,230.164 1900.72,231.261 1901.29,231.28 1901.86,231.029 1902.43,231.844 1903,229.692 1903.57,228.77 1904.13,229.797 1904.7,229.942 1905.27,230.068 1905.84,230.248 1906.41,232.39 1906.98,231.227 1907.54,232.168 1908.11,232.897 1908.68,233.902 1909.25,232.54 1909.82,234.398 1910.39,234.15 1910.95,232.027 1911.52,231.15 1912.09,232.033 1912.66,229.768 1913.23,226.568 1913.8,227.057 1914.36,228.221 1914.93,228.401 1915.5,227.763 1916.07,228.955 1916.64,229.941 1917.21,229.093 1917.77,228.194 1918.34,227.336 1918.91,229.655 1919.48,230.808 1920.05,227.74 1920.62,227.852 1921.18,228.163 1921.75,228.292 1922.32,227.556 1922.89,227.597 1923.46,229.668 1924.03,226.577 1924.59,225.971 1925.16,222.3 1925.73,222.982 1926.3,223.608 1926.87,224.245 1927.44,225.724 1928,225.14 1928.57,223.671 1929.14,225.294 1929.71,227.341 1930.28,227.764 1930.85,227.02 1931.41,225.275 1931.98,226.919 1932.55,228.21 1933.12,227.513 1933.69,226.798 1934.26,228.361 1934.82,228.596 1935.39,228.818 1935.96,228.98 1936.53,230.301 1937.1,230.179 1937.67,231.193 1938.23,232.196 1938.8,232.259 1939.37,233.556 1939.94,234.358 1940.51,232.191 1941.08,231.377 1941.64,237.587 1942.21,238.268 1942.78,236.784 1943.35,236.342 1943.92,234.882 1944.49,233.806 1945.05,235.637 1945.62,235.187 1946.19,234.866 1946.76,234.679 1947.33,231.438 1947.9,232.632 1948.46,233.788 1949.03,234.656 1949.6,234.33 1950.17,233.089 1950.74,232.936 1951.31,234.747 1951.87,234.438 1952.44,232.005 1953.01,232.807 1953.58,232.727 1954.15,231.553 1954.72,228.384 1955.28,227.521 1955.85,226.55 1956.42,226.74 1956.99,225.877 1957.56,229.184 1958.13,228.319 1958.69,229.34 1959.26,230.351 1959.83,230.333 1960.4,230.25 1960.97,230.242 1961.54,233.494 1962.1,232.195 1962.67,233.082 1963.24,232.685 1963.81,233.453 1964.38,232.096 1964.95,232.852 1965.51,229.679 1966.08,232.51 1966.65,231.17 1967.22,231.199 1967.79,231.061 1968.36,231.92 1968.92,230.879 1969.49,228.624 1970.06,229.883 1970.63,228.881 1971.2,229.91 1971.77,228.855 1972.34,233.129 1972.9,233.962 1973.47,234.937 1974.04,234.456 1974.61,236.097 1975.18,236.736 1975.75,236.204 1976.31,234.443 1976.88,231.03 1977.45,230.773 1978.02,232.528 1978.59,233.07 1979.16,233.814 1979.72,233.798 1980.29,230.336 1980.86,231.032 1981.43,231.809 1982,232.674 1982.57,233.652 1983.13,230.307 1983.7,230.32 1984.27,230.392 1984.84,231.066 1985.41,230.833 1985.98,229.756 1986.54,232.676 1987.11,230.425 1987.68,229.509 1988.25,230.264 1988.82,229.127 1989.39,228.863 1989.95,227.659 1990.52,228.92 1991.09,229.996 1991.66,228.677 1992.23,229.563 1992.8,228.631 1993.36,227.63 1993.93,228.674 1994.5,226.709 1995.07,225.637 1995.64,225.665 1996.21,224.794 1996.77,227.174 1997.34,226.438 1997.91,226.498 1998.48,225.852 1999.05,226.099 1999.62,228.263 2000.18,228.422 2000.75,227.521 2001.32,228.629 2001.89,229.726 2002.46,229.41 2003.03,230.588 2003.59,229.657 2004.16,229.558 2004.73,232.434 2005.3,233.344 2005.87,231.135 2006.44,230.965 2007,229.927 2007.57,230.906 2008.14,231.826 2008.71,230.511 2009.28,231.415 2009.85,230 2010.41,227.82 2010.98,227.012 2011.55,225.087 2012.12,226.468 2012.69,226.521 2013.26,222.731 2013.82,220.946 2014.39,221.297 2014.96,219.895 2015.53,221.984 2016.1,222.768 2016.67,224.253 2017.23,225.682 2017.8,226.09 2018.37,226.267 2018.94,224.481 2019.51,225.806 2020.08,226.331 2020.64,227.717 2021.21,226.745 2021.78,227.072 2022.35,224.35 2022.92,226.966 2023.49,228.465 2024.05,228.65 2024.62,229.819 2025.19,230.884 2025.76,228.92 2026.33,229.149 2026.9,229.17 2027.46,229.224 2028.03,228.302 2028.6,230.699 2029.17,230.717 2029.74,231.688 2030.31,230.511 2030.87,230.322 2031.44,229.241 2032.01,230.534 2032.58,229.509 2033.15,229.557 2033.72,232.771 2034.28,233.83 2034.85,234.412 2035.42,233.075 2035.99,232.937 2036.56,233.022 2037.13,233.918 2037.69,233.715 2038.26,230.289 2038.83,230.572 2039.4,231.586 2039.97,231.487 2040.54,231.372 2041.11,229.318 2041.67,228.366 2042.24,229.194 2042.81,229.269 2043.38,228.305 2043.95,227.391 2044.52,226.495 2045.08,226.671 2045.65,226.7 2046.22,228.051 2046.79,230.07 2047.36,227.909 2047.93,227.871 2048.49,229.228 2049.06,228.12 2049.63,229.256 2050.2,229.422 2050.77,229.459 2051.34,230.664 2051.9,230.612 2052.47,230.519 2053.04,231.427 2053.61,232.714 2054.18,233.658 2054.75,234.346 2055.31,234.085 2055.88,235.833 2056.45,237.267 2057.02,236.874 2057.59,237.422 2058.16,238.815 2058.72,237.958 2059.29,237.387 2059.86,237.023 2060.43,234.394 2061,232.994 2061.57,233.828 2062.13,233.456 2062.7,234.227 2063.27,232.715 2063.84,234.647 2064.41,233.443 2064.98,233.119 2065.54,234.016 2066.11,233.811 2066.68,231.259 2067.25,230.989 2067.82,229.762 2068.39,227.554 2068.95,229.754 2069.52,229.537 2070.09,229.414 2070.66,231.253 2071.23,229.944 2071.8,227.826 2072.36,228.011 2072.93,229.169 2073.5,229.028 2074.07,227.878 2074.64,226.834 2075.21,227.001 2075.77,226.131 2076.34,225.365 2076.91,223.348 2077.48,225.936 2078.05,224.9 2078.62,225.327 2079.18,224.585 2079.75,224.888 2080.32,226.169 2080.89,226.455 2081.46,226.882 2082.03,228.313 2082.59,230.369 2083.16,231.452 2083.73,231.261 2084.3,232.321 2084.87,229.089 2085.44,229.323 2086,228.266 2086.57,230.524 2087.14,232.336 2087.71,232.015 2088.28,231.942 2088.85,231.654 2089.41,233.61 2089.98,232.331 2090.55,231.323 2091.12,232.092 2091.69,233.809 2092.26,231.33 2092.82,232.203 2093.39,231.113 2093.96,232.921 2094.53,233.523 2095.1,233.099 2095.67,231.793 2096.23,231.39 2096.8,228.193 2097.37,230.444 2097.94,230.404 2098.51,231.282 2099.08,232.152 2099.64,231.757 2100.21,229.262 2100.78,228.278 2101.35,230.469 2101.92,230.132 2102.49,230.152 2103.05,229.115 2103.62,230.999 2104.19,231.877 2104.76,231.577 2105.33,231.323 2105.9,230.021 2106.46,229.097 2107.03,228.013 2107.6,227.846 2108.17,227.731 2108.74,225.541 2109.31,224.754 2109.87,225.027 2110.44,223.339 2111.01,225.772 2111.58,224.106 2112.15,224.323 2112.72,222.606 2113.29,224.073 2113.85,224.37 2114.42,225.684 2114.99,225.894 2115.56,226.002 2116.13,227.156 2116.7,227.363 2117.26,228.502 2117.83,228.573 2118.4,229.848 2118.97,230.826 2119.54,232.974 2120.11,232.71 2120.67,232.525 2121.24,232.101 2121.81,232.201 2122.38,232.946 2122.95,232.72 2123.52,232.662 2124.08,231.229 2124.65,231.936 2125.22,231.764 2125.79,233.535 2126.36,232.084 2126.93,231.606 2127.49,229.542 2128.06,229.362 2128.63,229.387 2129.2,230.335 2129.77,230.345 2130.34,232.076 2130.9,231.675 2131.47,230.426 2132.04,229.549 2132.61,230.418 2133.18,228.043 2133.75,227.832 2134.31,226.945 2134.88,226.248 2135.45,227.438 2136.02,227.577 2136.59,230.026 2137.16,229.875 2137.72,231.809 2138.29,230.635 2138.86,230.604 2139.43,230.584 2140,230.356 2140.57,232.316 2141.13,232.081 2141.7,229.791 2142.27,231.828 2142.84,231.557 2143.41,231.467 2143.98,229.133 2144.54,229.16 2145.11,229.129 2145.68,228.929 2146.25,228.952 2146.82,226.647 2147.39,226.904 2147.95,229.141 2148.52,230.224 2149.09,227.94 2149.66,229.835 2150.23,228.614 2150.8,227.624 2151.36,227.618 2151.93,227.924 2152.5,227.88 2153.07,228.932 2153.64,228.969 2154.21,229.095 2154.77,227.131 2155.34,227.097 2155.91,227.301 2156.48,227.401 2157.05,225.654 2157.62,227.003 2158.18,226.168 2158.75,226.39 2159.32,226.496 2159.89,228.871 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.019\n  with uncertainty of ± 0.001207373220932193\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01675 ± (0.00365141, 0.0034639) (MC)\n  95% confidence interval: [-4.02374, -4.00975]) (MC)\n  linear error propagation: -4.01646 ± 0.00363142\n  |δ_y| = |0.00262891| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016753419579774, val_l = 0.006990932019850682, val_u = 0.006998575911796756)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip810\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip811\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip812\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.79 2211.02,1147.79 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,985.73 2211.02,985.73 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,823.665 2211.02,823.665 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,661.6 2211.02,661.6 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,499.535 2211.02,499.535 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,337.47 2211.02,337.47 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.79 365.751,1147.79 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,985.73 365.751,985.73 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,823.665 365.751,823.665 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,661.6 365.751,661.6 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,499.535 365.751,499.535 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,337.47 365.751,337.47 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M298.909 1133.59 Q295.298 1133.59 293.469 1137.16 Q291.664 1140.7 291.664 1147.83 Q291.664 1154.94 293.469 1158.5 Q295.298 1162.04 298.909 1162.04 Q302.543 1162.04 304.349 1158.5 Q306.177 1154.94 306.177 1147.83 Q306.177 1140.7 304.349 1137.16 Q302.543 1133.59 298.909 1133.59 M298.909 1129.89 Q304.719 1129.89 307.775 1134.5 Q310.853 1139.08 310.853 1147.83 Q310.853 1156.56 307.775 1161.16 Q304.719 1165.75 298.909 1165.75 Q293.099 1165.75 290.02 1161.16 Q286.964 1156.56 286.964 1147.83 Q286.964 1139.08 290.02 1134.5 Q293.099 1129.89 298.909 1129.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M259.557 999.075 L267.196 999.075 L267.196 972.709 L258.886 974.376 L258.886 970.116 L267.15 968.45 L271.826 968.45 L271.826 999.075 L279.465 999.075 L279.465 1003.01 L259.557 1003.01 L259.557 999.075 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 971.529 Q295.298 971.529 293.469 975.093 Q291.664 978.635 291.664 985.765 Q291.664 992.871 293.469 996.436 Q295.298 999.977 298.909 999.977 Q302.543 999.977 304.349 996.436 Q306.177 992.871 306.177 985.765 Q306.177 978.635 304.349 975.093 Q302.543 971.529 298.909 971.529 M298.909 967.825 Q304.719 967.825 307.775 972.431 Q310.853 977.015 310.853 985.765 Q310.853 994.491 307.775 999.098 Q304.719 1003.68 298.909 1003.68 Q293.099 1003.68 290.02 999.098 Q286.964 994.491 286.964 985.765 Q286.964 977.015 290.02 972.431 Q293.099 967.825 298.909 967.825 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M262.775 837.01 L279.094 837.01 L279.094 840.945 L257.15 840.945 L257.15 837.01 Q259.812 834.255 264.395 829.625 Q269.002 824.973 270.182 823.63 Q272.428 821.107 273.307 819.371 Q274.21 817.612 274.21 815.922 Q274.21 813.167 272.266 811.431 Q270.344 809.695 267.242 809.695 Q265.043 809.695 262.59 810.459 Q260.159 811.223 257.381 812.774 L257.381 808.052 Q260.205 806.917 262.659 806.339 Q265.113 805.76 267.15 805.76 Q272.52 805.76 275.715 808.445 Q278.909 811.13 278.909 815.621 Q278.909 817.751 278.099 819.672 Q277.312 821.57 275.205 824.163 Q274.627 824.834 271.525 828.051 Q268.423 831.246 262.775 837.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 809.464 Q295.298 809.464 293.469 813.028 Q291.664 816.57 291.664 823.7 Q291.664 830.806 293.469 834.371 Q295.298 837.912 298.909 837.912 Q302.543 837.912 304.349 834.371 Q306.177 830.806 306.177 823.7 Q306.177 816.57 304.349 813.028 Q302.543 809.464 298.909 809.464 M298.909 805.76 Q304.719 805.76 307.775 810.366 Q310.853 814.95 310.853 823.7 Q310.853 832.426 307.775 837.033 Q304.719 841.616 298.909 841.616 Q293.099 841.616 290.02 837.033 Q286.964 832.426 286.964 823.7 Q286.964 814.95 290.02 810.366 Q293.099 805.76 298.909 805.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M272.914 660.246 Q276.27 660.963 278.145 663.232 Q280.043 665.5 280.043 668.834 Q280.043 673.949 276.525 676.75 Q273.006 679.551 266.525 679.551 Q264.349 679.551 262.034 679.111 Q259.742 678.695 257.289 677.838 L257.289 673.324 Q259.233 674.459 261.548 675.037 Q263.863 675.616 266.386 675.616 Q270.784 675.616 273.076 673.88 Q275.39 672.144 275.39 668.834 Q275.39 665.778 273.238 664.065 Q271.108 662.329 267.289 662.329 L263.261 662.329 L263.261 658.487 L267.474 658.487 Q270.923 658.487 272.752 657.121 Q274.58 655.732 274.58 653.139 Q274.58 650.477 272.682 649.065 Q270.807 647.63 267.289 647.63 Q265.367 647.63 263.168 648.047 Q260.969 648.463 258.33 649.343 L258.33 645.176 Q260.992 644.436 263.307 644.065 Q265.645 643.695 267.705 643.695 Q273.029 643.695 276.131 646.125 Q279.233 648.533 279.233 652.653 Q279.233 655.524 277.59 657.514 Q275.946 659.482 272.914 660.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 647.399 Q295.298 647.399 293.469 650.963 Q291.664 654.505 291.664 661.635 Q291.664 668.741 293.469 672.306 Q295.298 675.848 298.909 675.848 Q302.543 675.848 304.349 672.306 Q306.177 668.741 306.177 661.635 Q306.177 654.505 304.349 650.963 Q302.543 647.399 298.909 647.399 M298.909 643.695 Q304.719 643.695 307.775 648.301 Q310.853 652.885 310.853 661.635 Q310.853 670.361 307.775 674.968 Q304.719 679.551 298.909 679.551 Q293.099 679.551 290.02 674.968 Q286.964 670.361 286.964 661.635 Q286.964 652.885 290.02 648.301 Q293.099 643.695 298.909 643.695 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M271.594 486.329 L259.789 504.778 L271.594 504.778 L271.594 486.329 M270.367 482.255 L276.247 482.255 L276.247 504.778 L281.177 504.778 L281.177 508.667 L276.247 508.667 L276.247 516.815 L271.594 516.815 L271.594 508.667 L255.992 508.667 L255.992 504.153 L270.367 482.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 485.334 Q295.298 485.334 293.469 488.898 Q291.664 492.44 291.664 499.57 Q291.664 506.676 293.469 510.241 Q295.298 513.783 298.909 513.783 Q302.543 513.783 304.349 510.241 Q306.177 506.676 306.177 499.57 Q306.177 492.44 304.349 488.898 Q302.543 485.334 298.909 485.334 M298.909 481.63 Q304.719 481.63 307.775 486.236 Q310.853 490.82 310.853 499.57 Q310.853 508.297 307.775 512.903 Q304.719 517.486 298.909 517.486 Q293.099 517.486 290.02 512.903 Q286.964 508.297 286.964 499.57 Q286.964 490.82 290.02 486.236 Q293.099 481.63 298.909 481.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M258.793 320.19 L277.15 320.19 L277.15 324.125 L263.076 324.125 L263.076 332.597 Q264.094 332.25 265.113 332.088 Q266.131 331.903 267.15 331.903 Q272.937 331.903 276.316 335.074 Q279.696 338.246 279.696 343.662 Q279.696 349.241 276.224 352.343 Q272.752 355.421 266.432 355.421 Q264.256 355.421 261.988 355.051 Q259.742 354.681 257.335 353.94 L257.335 349.241 Q259.418 350.375 261.641 350.931 Q263.863 351.486 266.34 351.486 Q270.344 351.486 272.682 349.38 Q275.02 347.273 275.02 343.662 Q275.02 340.051 272.682 337.945 Q270.344 335.838 266.34 335.838 Q264.465 335.838 262.59 336.255 Q260.738 336.671 258.793 337.551 L258.793 320.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M298.909 323.269 Q295.298 323.269 293.469 326.834 Q291.664 330.375 291.664 337.505 Q291.664 344.611 293.469 348.176 Q295.298 351.718 298.909 351.718 Q302.543 351.718 304.349 348.176 Q306.177 344.611 306.177 337.505 Q306.177 330.375 304.349 326.834 Q302.543 323.269 298.909 323.269 M298.909 319.565 Q304.719 319.565 307.775 324.172 Q310.853 328.755 310.853 337.505 Q310.853 346.232 307.775 350.838 Q304.719 355.421 298.909 355.421 Q293.099 355.421 290.02 350.838 Q286.964 346.232 286.964 337.505 Q286.964 328.755 290.02 324.172 Q293.099 319.565 298.909 319.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.38 400.199,1043.84 400.786,936.841 401.372,838.664 401.958,748.408 402.545,664.186 403.131,691.789 403.718,616.628 404.304,642.58 404.891,578.811 405.477,520.468 406.063,466.186 406.65,490.538 407.236,442.924 407.823,400.098 408.409,363.164 408.995,328.924 409.582,298.602 410.168,273.365 410.755,299.585 411.341,277.455 411.927,258.401 412.514,242.909 413.1,229.972 413.687,219.895 414.273,245.216 414.86,236.943 415.446,231.112 416.032,226.047 416.619,223.805 417.205,248.904 417.792,249.064 418.378,293.703 418.964,295.61 419.551,300.029 420.137,339.786 420.724,360.532 421.31,380.419 421.896,386.398 422.483,419.584 423.069,438.883 423.656,445.055 424.242,475.092 424.829,481.438 425.415,487.906 426.001,516.617 426.588,542.451 427.174,548.668 427.761,564.004 428.347,570.73 428.933,593.345 429.52,607.232 430.106,627.836 430.693,641.523 431.279,653.835 431.865,666.932 432.452,680.152 433.038,692.449 433.625,710.986 434.211,722.656 434.798,729.881 435.384,746.981 435.97,758.493 436.557,769.309 437.143,784.497 437.73,803.595 438.316,818.219 438.902,827.959 439.489,833.981 440.075,839.864 440.662,849.52 441.248,859.129 441.835,865.023 442.421,877.572 443.007,886.951 443.594,898.948 444.18,910.918 444.767,922.257 445.353,936.162 445.939,943.334 446.526,950.673 447.112,968.632 447.699,974.837 448.285,984.06 448.871,990.069 449.458,999.112 450.044,999.747 450.631,1006.04 451.217,1009.95 451.804,1018.79 452.39,1029.79 452.976,1037.91 453.563,1045.68 454.149,1046.54 454.736,1052.07 455.322,1055.53 455.908,1058.71 456.495,1064.43 457.081,1067.92 457.668,1073.19 458.254,1076.48 458.84,1085.81 459.427,1090.5 460.013,1101.1 460.6,1107.08 461.186,1113.51 461.773,1119.32 462.359,1121.69 462.945,1129.62 463.532,1133.64 464.118,1137.91 464.705,1145.15 465.291,1148.88 465.877,1152.37 466.464,1157.57 467.05,1162.21 467.637,1165.08 468.223,1166.5 468.809,1171.3 469.396,1172.12 469.982,1176.39 470.569,1179.04 471.155,1181.74 471.742,1182.47 472.328,1188.28 472.914,1187.13 473.501,1189.72 474.087,1191.92 474.674,1195.9 475.26,1196.72 475.846,1195.65 476.433,1197.95 477.019,1198.73 477.606,1199.03 478.192,1199.79 478.778,1197.31 479.365,1202.83 479.951,1204.95 480.538,1211.46 481.124,1214.37 481.711,1215.77 482.297,1218.74 482.883,1218.73 483.47,1218.73 484.056,1218.71 484.643,1220.25 485.229,1223.07 485.815,1224.88 486.402,1227.76 486.988,1227.5 487.575,1226.91 488.161,1228.02 488.748,1228.02 489.334,1227.92 489.92,1227.66 490.507,1226.29 491.093,1227.83 491.68,1229.08 492.266,1231.85 492.852,1233.22 493.439,1231.71 494.025,1231.42 494.612,1231.31 495.198,1231.15 495.784,1232.25 496.371,1230.68 496.957,1233.06 497.544,1234.23 498.13,1236.74 498.717,1236.42 499.303,1235.99 499.889,1235.72 500.476,1238.2 501.062,1237.75 501.649,1237.19 502.235,1239.57 502.821,1239.13 503.408,1238.68 503.994,1240.77 504.581,1239.94 505.167,1242.16 505.753,1241.93 506.34,1241.57 506.926,1239.6 507.513,1240.31 508.099,1241.4 508.686,1242.59 509.272,1244.67 509.858,1243.91 510.445,1245.03 511.031,1249.42 511.618,1248.8 512.204,1249.43 512.79,1250.08 513.377,1250.53 513.963,1249.63 514.55,1250.23 515.136,1248.92 515.722,1246.27 516.309,1246.94 516.895,1248.84 517.482,1247.88 518.068,1248.78 518.655,1249.43 519.241,1248.64 519.827,1249.38 520.414,1249.87 521,1248.98 521.587,1249.26 522.173,1249.83 522.759,1246.13 523.346,1248.05 523.932,1247.23 524.519,1247.73 525.105,1246.87 525.691,1246.27 526.278,1247.13 526.864,1247.66 527.451,1247.97 528.037,1245.9 528.624,1242.54 529.21,1241.85 529.796,1241.56 530.383,1241.12 530.969,1240.87 531.556,1240.59 532.142,1243.03 532.728,1244.12 533.315,1246.22 533.901,1246.79 534.488,1244.92 535.074,1244.25 535.661,1243.77 536.247,1243.01 536.833,1243.63 537.42,1242.96 538.006,1242.37 538.593,1243.06 539.179,1243.73 539.765,1245.25 540.352,1241.73 540.938,1241.25 541.525,1240.48 542.111,1237.3 542.697,1238.2 543.284,1239.09 543.87,1238.59 544.457,1239.29 545.043,1238.93 545.63,1240.02 546.216,1240.64 546.802,1238.74 547.389,1239.5 547.975,1240.28 548.562,1242.55 549.148,1245.82 549.734,1247.46 550.321,1246.33 550.907,1245.44 551.494,1243.17 552.08,1242.43 552.666,1243.07 553.253,1242.43 553.839,1241.74 554.426,1238.47 555.012,1239.48 555.599,1241.59 556.185,1237.99 556.771,1237.52 557.358,1236.89 557.944,1236.52 558.531,1237.22 559.117,1239.49 559.703,1241.61 560.29,1240.87 560.876,1239.94 561.463,1239.28 562.049,1241.38 562.635,1240.79 563.222,1241.51 563.808,1241.93 564.395,1242.37 564.981,1241.86 565.568,1245.24 566.154,1243.75 566.74,1243.34 567.327,1242.55 567.913,1240.84 568.5,1240.15 569.086,1241.01 569.672,1239.1 570.259,1238.16 570.845,1239.95 571.432,1238.07 572.018,1237.34 572.605,1235.49 573.191,1234.03 573.777,1233.57 574.364,1232.06 574.95,1229.09 575.537,1227.97 576.123,1226.3 576.709,1224.87 577.296,1223.62 577.882,1226.62 578.469,1225.62 579.055,1225.72 579.641,1224.4 580.228,1226 580.814,1224.77 581.401,1223.18 581.987,1224.8 582.574,1224.97 583.16,1227.59 583.746,1228.89 584.333,1227.17 584.919,1224.34 585.506,1223.25 586.092,1222.12 586.678,1219.85 587.265,1221.55 587.851,1220.43 588.438,1221.88 589.024,1222.16 589.61,1222.32 590.197,1221.37 590.783,1221.72 591.37,1223.32 591.956,1224.7 592.543,1224.72 593.129,1224.86 593.715,1226.07 594.302,1227.26 594.888,1224.63 595.475,1224.51 596.061,1224.11 596.647,1228.14 597.234,1230.56 597.82,1232.74 598.407,1232.19 598.993,1234.54 599.579,1234.09 600.166,1233.61 600.752,1231.84 601.339,1232.84 601.925,1232.56 602.512,1233.55 603.098,1234.29 603.684,1233.49 604.271,1232.94 604.857,1233.69 605.444,1231.66 606.03,1231.34 606.616,1232.27 607.203,1233.22 607.789,1227.58 608.376,1227.51 608.962,1232.23 609.548,1227.79 610.135,1227.68 610.721,1230.11 611.308,1229.71 611.894,1228.08 612.481,1227.88 613.067,1227.84 613.653,1226.58 614.24,1225.75 614.826,1225.75 615.413,1228.47 615.999,1228.25 616.585,1231.84 617.172,1235.16 617.758,1233.46 618.345,1229.93 618.931,1228.13 619.518,1226.62 620.104,1226.6 620.69,1227.6 621.277,1227.23 621.863,1225.65 622.45,1224.39 623.036,1224.31 623.622,1219.1 624.209,1219.44 624.795,1218.04 625.382,1218.29 625.968,1220.99 626.554,1221.4 627.141,1222.73 627.727,1222.75 628.314,1223.85 628.9,1222.43 629.487,1221.14 630.073,1222.76 630.659,1224.22 631.246,1227.98 631.832,1227.52 632.419,1226.93 633.005,1230.88 633.591,1230.41 634.178,1231.31 634.764,1233.5 635.351,1228.92 635.937,1228.27 636.523,1227.9 637.11,1226.1 637.696,1224.4 638.283,1225.51 638.869,1226.65 639.456,1226.62 640.042,1227.73 640.628,1231.49 641.215,1228.08 641.801,1230.51 642.388,1232.43 642.974,1231.88 643.56,1232.68 644.147,1232.25 644.733,1232.8 645.32,1232.2 645.906,1232.07 646.492,1231.42 647.079,1230.71 647.665,1230.17 648.252,1229.61 648.838,1230.32 649.425,1230.87 650.011,1231.52 650.597,1230.95 651.184,1230.54 651.77,1229.81 652.357,1226.56 652.943,1225.73 653.529,1226.44 654.116,1227.68 654.702,1228.74 655.289,1226.96 655.875,1226.42 656.462,1224.8 657.048,1225.79 657.634,1222.87 658.221,1222.5 658.807,1222.47 659.394,1221.1 659.98,1222.44 660.566,1222.34 661.153,1219.45 661.739,1222.06 662.326,1220.71 662.912,1223.55 663.498,1223.58 664.085,1223.82 664.671,1224.9 665.258,1225.87 665.844,1226.8 666.431,1225.99 667.017,1226.88 667.603,1226.82 668.19,1227.95 668.776,1223.45 669.363,1221.56 669.949,1221.37 670.535,1222.34 671.122,1223.54 671.708,1223.44 672.295,1220.61 672.881,1220.59 673.467,1220.75 674.054,1222.29 674.64,1222.32 675.227,1223.7 675.813,1219.56 676.4,1222.52 676.986,1222.26 677.572,1220.63 678.159,1222 678.745,1224.6 679.332,1221.39 679.918,1220.3 680.504,1221.7 681.091,1217.41 681.677,1216.17 682.264,1217.64 682.85,1219.34 683.436,1219.42 684.023,1224.93 684.609,1224.4 685.196,1222.98 685.782,1222.94 686.369,1222.89 686.955,1221.49 687.541,1221.23 688.128,1222.21 688.714,1221.97 689.301,1222.14 689.887,1222.04 690.473,1220.81 691.06,1220.49 691.646,1221.55 692.233,1218.75 692.819,1217.8 693.405,1215.22 693.992,1213.78 694.578,1214.23 695.165,1214.42 695.751,1213.43 696.338,1215.14 696.924,1214.19 697.51,1216.84 698.097,1215.65 698.683,1218.71 699.27,1218.43 699.856,1218.72 700.442,1218.78 701.029,1217.47 701.615,1218.9 702.202,1219.1 702.788,1217.64 703.375,1216.17 703.961,1217.57 704.547,1217.67 705.134,1217.67 705.72,1216.49 706.307,1215.38 706.893,1215.73 707.479,1217.14 708.066,1222.55 708.652,1222.4 709.239,1223.67 709.825,1224.55 710.411,1221.53 710.998,1221.46 711.584,1220.05 712.171,1218.54 712.757,1219.67 713.344,1221.16 713.93,1219.67 714.516,1219.77 715.103,1219.81 715.689,1219.9 716.276,1221.97 716.862,1220.34 717.448,1221.31 718.035,1221.38 718.621,1215.89 719.208,1218.73 719.794,1220.33 720.38,1217.55 720.967,1218.97 721.553,1217.53 722.14,1216.14 722.726,1216.24 723.313,1216.36 723.899,1215.13 724.485,1215.61 725.072,1215.94 725.658,1216.28 726.245,1215.13 726.831,1216.66 727.417,1216.82 728.004,1215.5 728.59,1216.81 729.177,1218.33 729.763,1218.22 730.349,1219.45 730.936,1221.95 731.522,1221.65 732.109,1218.73 732.695,1218.9 733.282,1220.09 733.868,1218.72 734.454,1215.9 735.041,1217.15 735.627,1219.8 736.214,1221.16 736.8,1221.05 737.386,1222.46 737.973,1226.21 738.559,1224.4 739.146,1223.89 739.732,1223.74 740.318,1221.87 740.905,1222.92 741.491,1224.01 742.078,1223.76 742.664,1225.91 743.251,1223.09 743.837,1223 744.423,1223.91 745.01,1224.89 745.596,1225.82 746.183,1221.55 746.769,1220.1 747.355,1219.68 747.942,1220.73 748.528,1223.16 749.115,1224.36 749.701,1228.12 750.288,1227.45 750.874,1226.8 751.46,1226.09 752.047,1223.92 752.633,1223.46 753.22,1226.93 753.806,1223.5 754.392,1223.04 754.979,1222.72 755.565,1222.4 756.152,1223.33 756.738,1223.03 757.324,1222.74 757.911,1222.58 758.497,1221.05 759.084,1218.21 759.67,1218.14 760.257,1219.11 760.843,1220.06 761.429,1213.21 762.016,1217.37 762.602,1217.5 763.189,1217.64 763.775,1213.68 764.361,1215.12 764.948,1213.94 765.534,1212.85 766.121,1213.12 766.707,1212.24 767.293,1212.57 767.88,1212.55 768.466,1212.48 769.053,1211.15 769.639,1208.79 770.226,1208.98 770.812,1209.34 771.398,1212.42 771.985,1214.04 772.571,1215.52 773.158,1211.72 773.744,1213.4 774.33,1213.77 774.917,1216.56 775.503,1214.06 776.09,1215.6 776.676,1213 777.262,1215.7 777.849,1214.48 778.435,1215.16 779.022,1216.48 779.608,1215.19 780.195,1213.02 780.781,1211.63 781.367,1214.58 781.954,1213.53 782.54,1215.12 783.127,1215.11 783.713,1215.07 784.299,1215.19 784.886,1220.77 785.472,1221.79 786.059,1221.39 786.645,1221.01 787.232,1217.77 787.818,1219.22 788.404,1220.36 788.991,1222.88 789.577,1221.23 790.164,1219.52 790.75,1216.57 791.336,1218.01 791.923,1217.76 792.509,1216.42 793.096,1218.91 793.682,1217.41 794.268,1217.45 794.855,1219.9 795.441,1218.47 796.028,1217.08 796.614,1215.73 797.201,1214.12 797.787,1212.83 798.373,1211.68 798.96,1209.2 799.546,1208.48 800.133,1208.98 800.719,1209.46 801.305,1208.94 801.892,1207.84 802.478,1212.14 803.065,1212.24 803.651,1212.3 804.237,1211.34 804.824,1212.94 805.41,1213.32 805.997,1214.94 806.583,1214.61 807.17,1213.55 807.756,1212.44 808.342,1214 808.929,1212.8 809.515,1212.73 810.102,1214.05 810.688,1213 811.274,1211.71 811.861,1212.03 812.447,1216 813.034,1217.58 813.62,1220.17 814.206,1220.03 814.793,1219.89 815.379,1220.95 815.966,1221.91 816.552,1224.31 817.139,1224.08 817.725,1224.92 818.311,1224.61 818.898,1221.39 819.484,1222.21 820.071,1223.05 820.657,1222.5 821.243,1224.56 821.83,1224.34 822.416,1222.37 823.003,1221.84 823.589,1221.15 824.175,1222.24 824.762,1221.58 825.348,1221.21 825.935,1220.78 826.521,1220.6 827.108,1219.09 827.694,1219.2 828.28,1218.98 828.867,1216.46 829.453,1217.82 830.04,1214.97 830.626,1216.32 831.212,1217.59 831.799,1217.61 832.385,1217.29 832.972,1218.5 833.558,1219.66 834.145,1219.52 834.731,1224.54 835.317,1226.76 835.904,1226.18 836.49,1225.38 837.077,1223.78 837.663,1224.83 838.249,1224.1 838.836,1223.45 839.422,1221.7 840.009,1218.2 840.595,1219.42 841.181,1220.31 841.768,1218.62 842.354,1216.92 842.941,1219.51 843.527,1219.17 844.114,1217.6 844.7,1217.58 845.286,1216.19 845.873,1214.82 846.459,1212.05 847.046,1212.18 847.632,1212.22 848.218,1213.63 848.805,1213.5 849.391,1216.23 849.978,1217.5 850.564,1217.42 851.15,1214.83 851.737,1216.07 852.323,1218.58 852.91,1221.05 853.496,1219.18 854.083,1219.07 854.669,1219.15 855.255,1216.43 855.842,1216.23 856.428,1213.54 857.015,1213.55 857.601,1213.68 858.187,1214.08 858.774,1215.45 859.36,1214.37 859.947,1212.87 860.533,1213.04 861.119,1211.66 861.706,1213.05 862.292,1213.15 862.879,1213.32 863.465,1212.32 864.052,1209.42 864.638,1210.9 865.224,1212.51 865.811,1216.37 866.397,1216.37 866.984,1214.87 867.57,1216.22 868.156,1214.83 868.743,1213.32 869.329,1212.05 869.916,1210.74 870.502,1210.09 871.089,1210.2 871.675,1210.57 872.261,1206.78 872.848,1205.8 873.434,1203.41 874.021,1202.74 874.607,1200.78 875.193,1202.89 875.78,1207.55 876.366,1206.6 876.953,1208.18 877.539,1207.1 878.125,1204.77 878.712,1203.89 879.298,1204.72 879.885,1207.82 880.471,1209.54 881.058,1211.06 881.644,1215.38 882.23,1215.16 882.817,1215.41 883.403,1217.97 883.99,1219.03 884.576,1218.81 885.162,1217.4 885.749,1218.34 886.335,1215.74 886.922,1215.74 887.508,1214.34 888.094,1215.67 888.681,1214.26 889.267,1213.17 889.854,1211.78 890.44,1210.74 891.027,1212.56 891.613,1214.1 892.199,1212.93 892.786,1214.27 893.372,1215.34 893.959,1215.28 894.545,1214.35 895.131,1213.18 895.718,1213.28 896.304,1213.36 896.891,1212.02 897.477,1212.1 898.063,1209.6 898.65,1212.49 899.236,1212.59 899.823,1215.19 900.409,1215.07 900.996,1214.05 901.582,1215.4 902.168,1211.21 902.755,1212.66 903.341,1212.67 903.928,1213.92 904.514,1215.2 905.1,1215.15 905.687,1216.55 906.273,1216.48 906.86,1216.44 907.446,1218.99 908.032,1219.94 908.619,1219.71 909.205,1219.45 909.792,1217.91 910.378,1216.67 910.965,1214 911.551,1215.35 912.137,1215.09 912.724,1212.64 913.31,1212.67 913.897,1213.97 914.483,1212.87 915.069,1213.01 915.656,1213.26 916.242,1214.41 916.829,1214.34 917.415,1217.02 918.002,1217.05 918.588,1219.46 919.174,1219.47 919.761,1219.23 920.347,1221.67 920.934,1219.78 921.52,1216.89 922.106,1217.95 922.693,1216.33 923.279,1213.61 923.866,1213.38 924.452,1213.38 925.038,1216.21 925.625,1218.55 926.211,1219.71 926.798,1216.8 927.384,1215.21 927.971,1213.56 928.557,1213.49 929.143,1215.1 929.73,1216.01 930.316,1216.06 930.903,1214.54 931.489,1214.25 932.075,1210.66 932.662,1212.14 933.248,1212.43 933.835,1212.51 934.421,1212.93 935.007,1215.48 935.594,1216.98 936.18,1214.16 936.767,1212.86 937.353,1213.09 937.94,1213.09 938.526,1210.49 939.112,1209.6 939.699,1211.13 940.285,1211.27 940.872,1210.23 941.458,1211.79 942.044,1209.26 942.631,1208.2 943.217,1208.43 943.804,1208.44 944.39,1209.89 944.976,1211.47 945.563,1212.74 946.149,1214.08 946.736,1215.46 947.322,1212.96 947.909,1213.13 948.495,1213.14 949.081,1213.37 949.668,1214.55 950.254,1215.99 950.841,1215.82 951.427,1215.82 952.013,1214.23 952.6,1214.11 953.186,1213.86 953.773,1209.97 954.359,1210.28 954.945,1215.74 955.532,1215.56 956.118,1214.33 956.705,1214.43 957.291,1214.17 957.878,1217.88 958.464,1216.23 959.05,1217.28 959.637,1215.83 960.223,1215.69 960.81,1215.69 961.396,1215.56 961.982,1215.38 962.569,1216.94 963.155,1216.78 963.742,1216.68 964.328,1216.51 964.915,1213.43 965.501,1213.25 966.087,1213.27 966.674,1213.44 967.26,1210.86 967.847,1211.21 968.433,1211.46 969.019,1211.82 969.606,1212.93 970.192,1214.46 970.779,1214.36 971.365,1216.94 971.951,1214.51 972.538,1214.81 973.124,1215.98 973.711,1214.42 974.297,1215.63 974.884,1216.89 975.47,1215.4 976.056,1212.5 976.643,1211.12 977.229,1210.04 977.816,1208.83 978.402,1209.09 978.988,1210.65 979.575,1208.31 980.161,1211.51 980.748,1212.12 981.334,1213.9 981.92,1212.54 982.507,1211.37 983.093,1212.95 983.68,1210.47 984.266,1210.88 984.853,1208.14 985.439,1207.49 986.025,1209.15 986.612,1206.97 987.198,1206.05 987.785,1206.64 988.371,1206.74 988.957,1207.29 989.544,1209.01 990.13,1209.29 990.717,1212.12 991.303,1212.14 991.889,1210.94 992.476,1212.27 993.062,1213.83 993.649,1213.73 994.235,1214.9 994.822,1214.88 995.408,1216.12 995.994,1217.65 996.581,1215.88 997.167,1218.55 997.754,1219.86 998.34,1223.67 998.926,1222.83 999.513,1221.22 1000.1,1222.2 1000.69,1221.74 1001.27,1224.08 1001.86,1223.76 1002.44,1221.9 1003.03,1221.59 1003.62,1221.19 1004.2,1220.79 1004.79,1220.28 1005.38,1218.87 1005.96,1217.33 1006.55,1217.23 1007.14,1214.48 1007.72,1214.52 1008.31,1213.11 1008.9,1214.57 1009.48,1214.4 1010.07,1216.89 1010.65,1218.2 1011.24,1215.3 1011.83,1214.12 1012.41,1212.67 1013,1212.45 1013.59,1212.29 1014.17,1209.61 1014.76,1209.74 1015.35,1211.49 1015.93,1210.26 1016.52,1210.25 1017.11,1207.83 1017.69,1210.6 1018.28,1211.81 1018.86,1210.75 1019.45,1213.62 1020.04,1212.22 1020.62,1210.84 1021.21,1208.27 1021.8,1210.03 1022.38,1210.48 1022.97,1209.41 1023.56,1209.43 1024.14,1210.62 1024.73,1214.9 1025.32,1213.21 1025.9,1214.57 1026.49,1216.89 1027.07,1215.27 1027.66,1217.87 1028.25,1216.29 1028.83,1217.32 1029.42,1219.62 1030.01,1221.96 1030.59,1218.93 1031.18,1217.22 1031.77,1215.76 1032.35,1215.74 1032.94,1215.55 1033.52,1217 1034.11,1218.05 1034.7,1219.08 1035.28,1216.05 1035.87,1215.97 1036.46,1213.41 1037.04,1214.63 1037.63,1210.42 1038.22,1213.11 1038.8,1213.18 1039.39,1213.11 1039.98,1213.04 1040.56,1210.52 1041.15,1209.34 1041.73,1210.46 1042.32,1210.63 1042.91,1210.88 1043.49,1212.3 1044.08,1211.14 1044.67,1211.17 1045.25,1213.61 1045.84,1213.61 1046.43,1215.08 1047.01,1215.06 1047.6,1216.18 1048.19,1217.39 1048.77,1217.08 1049.36,1215.36 1049.94,1218.01 1050.53,1217.89 1051.12,1220.46 1051.7,1218.67 1052.29,1217 1052.88,1215.41 1053.46,1214.06 1054.05,1215.5 1054.64,1215.2 1055.22,1212.36 1055.81,1213.91 1056.39,1213.81 1056.98,1213.89 1057.57,1210.09 1058.15,1210.3 1058.74,1211.45 1059.33,1209.24 1059.91,1209.19 1060.5,1206.77 1061.09,1205.74 1061.67,1207.52 1062.26,1209.04 1062.85,1209.51 1063.43,1211.19 1064.02,1211.49 1064.6,1213.05 1065.19,1214.25 1065.78,1215.24 1066.36,1217.58 1066.95,1217.26 1067.54,1218.61 1068.12,1218.42 1068.71,1219.58 1069.3,1219.2 1069.88,1217.37 1070.47,1211.9 1071.06,1213.34 1071.64,1212.07 1072.23,1212 1072.81,1213.48 1073.4,1212 1073.99,1213.4 1074.57,1213.53 1075.16,1213.22 1075.75,1214.4 1076.33,1211.48 1076.92,1214.36 1077.51,1215.57 1078.09,1216.65 1078.68,1216.42 1079.26,1213.74 1079.85,1213.85 1080.44,1212.46 1081.02,1212.54 1081.61,1213.9 1082.2,1214.06 1082.78,1213.85 1083.37,1216.3 1083.96,1217.54 1084.54,1217.27 1085.13,1215.62 1085.72,1215.4 1086.3,1215.22 1086.89,1213.63 1087.47,1213.55 1088.06,1214.61 1088.65,1214.63 1089.23,1214.62 1089.82,1214.54 1090.41,1214.61 1090.99,1215.83 1091.58,1214.43 1092.17,1215.8 1092.75,1215.73 1093.34,1215.67 1093.93,1214.19 1094.51,1215.31 1095.1,1212.72 1095.68,1212.84 1096.27,1212.91 1096.86,1213.08 1097.44,1208.81 1098.03,1209.01 1098.62,1213.05 1099.2,1211.41 1099.79,1211.53 1100.38,1212.86 1100.96,1212.98 1101.55,1211.92 1102.14,1218.67 1102.72,1218.53 1103.31,1220.59 1103.89,1219.91 1104.48,1221.04 1105.07,1219.46 1105.65,1220.5 1106.24,1221.48 1106.83,1221.05 1107.41,1219.35 1108,1217.84 1108.59,1216.34 1109.17,1215.23 1109.76,1217.8 1110.34,1218.57 1110.93,1217.95 1111.52,1219.09 1112.1,1220.06 1112.69,1218.47 1113.28,1221.62 1113.86,1218.43 1114.45,1215.64 1115.04,1215.57 1115.62,1215.45 1116.21,1212.51 1116.8,1213.65 1117.38,1216.13 1117.97,1219.89 1118.55,1219.66 1119.14,1218.15 1119.73,1219.47 1120.31,1217.54 1120.9,1217.28 1121.49,1216.91 1122.07,1219.28 1122.66,1220.4 1123.25,1218.76 1123.83,1217.03 1124.42,1215.48 1125.01,1216.19 1125.59,1217.13 1126.18,1216.47 1126.76,1213.69 1127.35,1216.42 1127.94,1220.31 1128.52,1218.79 1129.11,1215.93 1129.7,1209.41 1130.28,1209.71 1130.87,1209.93 1131.46,1207.35 1132.04,1204.94 1132.63,1207.94 1133.21,1204.31 1133.8,1204.83 1134.39,1204.11 1134.97,1207.38 1135.56,1210.24 1136.15,1210 1136.73,1210.17 1137.32,1211.86 1137.91,1209.46 1138.49,1208.12 1139.08,1208.23 1139.67,1208.46 1140.25,1208.67 1140.84,1210.31 1141.42,1210.77 1142.01,1209.69 1142.6,1207.25 1143.18,1207.75 1143.77,1206.84 1144.36,1210.03 1144.94,1207.68 1145.53,1205.35 1146.12,1204.29 1146.7,1204.76 1147.29,1206.71 1147.88,1209.77 1148.46,1210.05 1149.05,1210.12 1149.63,1212.92 1150.22,1212.65 1150.81,1208.9 1151.39,1213.01 1151.98,1211.57 1152.57,1211.72 1153.15,1212.98 1153.74,1211.48 1154.33,1211.8 1154.91,1210.67 1155.5,1209.58 1156.09,1208.59 1156.67,1211.49 1157.26,1210.06 1157.84,1210.55 1158.43,1211.87 1159.02,1213.09 1159.6,1213.15 1160.19,1214.44 1160.78,1211.66 1161.36,1211.73 1161.95,1213.01 1162.54,1215.37 1163.12,1214.14 1163.71,1212.94 1164.29,1215.66 1164.88,1215.38 1165.47,1214 1166.05,1213.97 1166.64,1213.83 1167.23,1213.91 1167.81,1214.09 1168.4,1211.38 1168.99,1212.92 1169.57,1210.63 1170.16,1212.03 1170.75,1212.21 1171.33,1210.73 1171.92,1209.13 1172.5,1212.04 1173.09,1210.83 1173.68,1211.01 1174.26,1211.06 1174.85,1211.21 1175.44,1211.42 1176.02,1212.36 1176.61,1211.16 1177.2,1211.33 1177.78,1213.07 1178.37,1211.71 1178.96,1209.19 1179.54,1207.99 1180.13,1210.9 1180.71,1212.62 1181.3,1215.28 1181.89,1217.94 1182.47,1218.96 1183.06,1215.78 1183.65,1213.05 1184.23,1210.59 1184.82,1209.43 1185.41,1208.03 1185.99,1208.16 1186.58,1211.32 1187.16,1212.94 1187.75,1214.24 1188.34,1212.83 1188.92,1212.62 1189.51,1215.16 1190.1,1213.49 1190.68,1213.24 1191.27,1211.92 1191.86,1213.36 1192.44,1215.89 1193.03,1218.28 1193.62,1223.4 1194.2,1224.25 1194.79,1223.76 1195.37,1224.43 1195.96,1222.4 1196.55,1221.78 1197.13,1221.43 1197.72,1222.66 1198.31,1223.65 1198.89,1223.11 1199.48,1221.27 1200.07,1223.53 1200.65,1222.99 1201.24,1221.12 1201.83,1222.06 1202.41,1222.65 1203,1219.06 1203.58,1220.09 1204.17,1220.7 1204.76,1222.98 1205.34,1223.49 1205.93,1221.5 1206.52,1219.58 1207.1,1217.92 1207.69,1217.45 1208.28,1218.59 1208.86,1216.96 1209.45,1217.72 1210.03,1214.94 1210.62,1216.16 1211.21,1218.59 1211.79,1215.74 1212.38,1215.39 1212.97,1213.75 1213.55,1214.89 1214.14,1216.12 1214.73,1216.04 1215.31,1216.86 1215.9,1215.09 1216.49,1215.07 1217.07,1214.9 1217.66,1213.56 1218.24,1214.88 1218.83,1212.26 1219.42,1212.71 1220,1214.25 1220.59,1214.2 1221.18,1214.01 1221.76,1207.12 1222.35,1208.77 1222.94,1207.63 1223.52,1211.86 1224.11,1210.59 1224.7,1207.99 1225.28,1203.9 1225.87,1200.43 1226.45,1198.3 1227.04,1199.19 1227.63,1198.42 1228.21,1200.67 1228.8,1202.37 1229.39,1203 1229.97,1204.97 1230.56,1206.79 1231.15,1208.32 1231.73,1208.54 1232.32,1209.04 1232.91,1209.27 1233.49,1206.88 1234.08,1206.1 1234.66,1204.92 1235.25,1206.58 1235.84,1206.77 1236.42,1207.13 1237.01,1208.67 1237.6,1208.73 1238.18,1208.92 1238.77,1208.12 1239.36,1208.71 1239.94,1210.07 1240.53,1208.8 1241.11,1210.38 1241.7,1209.22 1242.29,1211.9 1242.87,1212.32 1243.46,1211.04 1244.05,1213.95 1244.63,1216.56 1245.22,1217.63 1245.81,1216.05 1246.39,1217.47 1246.98,1217.52 1247.57,1218.51 1248.15,1215.74 1248.74,1212.77 1249.32,1210.15 1249.91,1210.34 1250.5,1210.79 1251.08,1210.92 1251.67,1209.74 1252.26,1208.82 1252.84,1207.68 1253.43,1209.43 1254.02,1212.53 1254.6,1212.66 1255.19,1212.56 1255.78,1210.21 1256.36,1210.76 1256.95,1208.09 1257.53,1204.59 1258.12,1203.74 1258.71,1203.08 1259.29,1203.62 1259.88,1204.35 1260.47,1203.85 1261.05,1200.22 1261.64,1202.34 1262.23,1203.4 1262.81,1205.17 1263.4,1203.09 1263.98,1203.69 1264.57,1204.2 1265.16,1206.16 1265.74,1210.4 1266.33,1209.5 1266.92,1212.21 1267.5,1209.59 1268.09,1209.78 1268.68,1210.24 1269.26,1209.48 1269.85,1206.84 1270.44,1205.81 1271.02,1208.66 1271.61,1207.54 1272.19,1206.61 1272.78,1208.69 1273.37,1211.96 1273.95,1212.14 1274.54,1212.27 1275.13,1212.42 1275.71,1212.59 1276.3,1215.16 1276.89,1216.35 1277.47,1217.44 1278.06,1217.51 1278.65,1217.32 1279.23,1219.63 1279.82,1216.52 1280.4,1216.58 1280.99,1216.26 1281.58,1214.94 1282.16,1214.78 1282.75,1217.5 1283.34,1215.85 1283.92,1214.47 1284.51,1214.2 1285.1,1215.74 1285.68,1216.86 1286.27,1215.2 1286.86,1212.43 1287.44,1213.89 1288.03,1215.36 1288.61,1217.58 1289.2,1214.74 1289.79,1213.36 1290.37,1215.71 1290.96,1215.49 1291.55,1215.52 1292.13,1215.51 1292.72,1215.65 1293.31,1215.51 1293.89,1215.47 1294.48,1213.91 1295.06,1216.43 1295.65,1218.92 1296.24,1218.47 1296.82,1218.07 1297.41,1216.43 1298,1214.99 1298.58,1215.07 1299.17,1214.87 1299.76,1213.22 1300.34,1214.57 1300.93,1215.72 1301.52,1216.96 1302.1,1218.22 1302.69,1218.06 1303.27,1219.47 1303.86,1220.19 1304.45,1214.73 1305.03,1216.27 1305.62,1214.87 1306.21,1214.85 1306.79,1215.92 1307.38,1217.16 1307.97,1217.08 1308.55,1213.88 1309.14,1212.09 1309.73,1212.23 1310.31,1212.51 1310.9,1215.19 1311.48,1213.67 1312.07,1214.95 1312.66,1217.48 1313.24,1216.19 1313.83,1212.31 1314.42,1213.67 1315,1215.09 1315.59,1214.83 1316.18,1217.31 1316.76,1216.71 1317.35,1216.53 1317.93,1213.56 1318.52,1212.08 1319.11,1216 1319.69,1215.73 1320.28,1212.97 1320.87,1211.43 1321.45,1212.58 1322.04,1211.26 1322.63,1212.72 1323.21,1211.52 1323.8,1214.16 1324.39,1215.56 1324.97,1214.29 1325.56,1213.99 1326.14,1213.86 1326.73,1217.76 1327.32,1215.95 1327.9,1216.08 1328.49,1216.01 1329.08,1216.01 1329.66,1218.4 1330.25,1216.42 1330.84,1217.49 1331.42,1220.11 1332.01,1222.4 1332.6,1224.49 1333.18,1224.11 1333.77,1223.72 1334.35,1222.12 1334.94,1222.64 1335.53,1223.7 1336.11,1222.94 1336.7,1220.77 1337.29,1220.16 1337.87,1218.57 1338.46,1216.73 1339.05,1216.25 1339.63,1214.71 1340.22,1214.81 1340.8,1216.2 1341.39,1218.62 1341.98,1218.11 1342.56,1220.54 1343.15,1223.11 1343.74,1219.94 1344.32,1219.59 1344.91,1219.23 1345.5,1218.84 1346.08,1218.33 1346.67,1215.43 1347.26,1216.55 1347.84,1213.82 1348.43,1213.7 1349.01,1210.86 1349.6,1208.25 1350.19,1209.79 1350.77,1211.51 1351.36,1210.32 1351.95,1210.34 1352.53,1207.95 1353.12,1207.85 1353.71,1206.57 1354.29,1202.99 1354.88,1205.22 1355.47,1205.52 1356.05,1208.56 1356.64,1209.94 1357.22,1208.96 1357.81,1207.96 1358.4,1206.91 1358.98,1207.36 1359.57,1207.83 1360.16,1205.61 1360.74,1204.55 1361.33,1209 1361.92,1208.92 1362.5,1210.29 1363.09,1213.58 1363.68,1213.22 1364.26,1209.02 1364.85,1210.56 1365.43,1210.85 1366.02,1208.69 1366.61,1211.86 1367.19,1212.19 1367.78,1213.68 1368.37,1215.76 1368.95,1217.11 1369.54,1216.8 1370.13,1211.47 1370.71,1210.08 1371.3,1210.53 1371.88,1210.92 1372.47,1209.81 1373.06,1209.79 1373.64,1211.17 1374.23,1208.53 1374.82,1209.97 1375.4,1208.76 1375.99,1210.32 1376.58,1211.72 1377.16,1211.87 1377.75,1212.13 1378.34,1212.07 1378.92,1213.46 1379.51,1213.27 1380.09,1213.23 1380.68,1213.26 1381.27,1212.18 1381.85,1212.22 1382.44,1211.01 1383.03,1211.13 1383.61,1211.5 1384.2,1211.58 1384.79,1211.67 1385.37,1211.68 1385.96,1210.49 1386.55,1207.7 1387.13,1208.02 1387.72,1209.63 1388.3,1210.07 1388.89,1210.03 1389.48,1211.46 1390.06,1211.82 1390.65,1211.75 1391.24,1211.8 1391.82,1213.07 1392.41,1214.12 1393,1215.17 1393.58,1216.33 1394.17,1216.18 1394.75,1211.9 1395.34,1212.05 1395.93,1210.85 1396.51,1210.77 1397.1,1210.87 1397.69,1208.6 1398.27,1208.97 1398.86,1207.75 1399.45,1209.31 1400.03,1209.62 1400.62,1212.48 1401.21,1215.1 1401.79,1212.42 1402.38,1212.58 1402.96,1213.59 1403.55,1213.57 1404.14,1218.74 1404.72,1222.39 1405.31,1220.48 1405.9,1217.43 1406.48,1214.62 1407.07,1218.21 1407.66,1221.85 1408.24,1220.07 1408.83,1220.94 1409.42,1219.49 1410,1219.04 1410.59,1217.6 1411.17,1217.47 1411.76,1217.02 1412.35,1218.14 1412.93,1218.07 1413.52,1217.82 1414.11,1217.25 1414.69,1214.7 1415.28,1214.4 1415.87,1211.77 1416.45,1210.5 1417.04,1209.15 1417.63,1210.46 1418.21,1212.13 1418.8,1213.28 1419.38,1210.8 1419.97,1210.78 1420.56,1213.38 1421.14,1214.67 1421.73,1216.04 1422.32,1215.59 1422.9,1212.74 1423.49,1213.91 1424.08,1213.96 1424.66,1216.58 1425.25,1216.4 1425.83,1216.14 1426.42,1213.18 1427.01,1213.25 1427.59,1213.19 1428.18,1211.74 1428.77,1212.07 1429.35,1210.66 1429.94,1210.94 1430.53,1213.48 1431.11,1213.23 1431.7,1211.78 1432.29,1213.06 1432.87,1213.04 1433.46,1211.48 1434.04,1211.31 1434.63,1211.28 1435.22,1209.69 1435.8,1208.66 1436.39,1211.6 1436.98,1214.19 1437.56,1214.07 1438.15,1214.06 1438.74,1216.8 1439.32,1215.13 1439.91,1213.66 1440.5,1213.64 1441.08,1213.64 1441.67,1214.81 1442.25,1216.12 1442.84,1213.15 1443.43,1215.91 1444.01,1216.98 1444.6,1214.08 1445.19,1215.49 1445.77,1215.34 1446.36,1217.94 1446.95,1216.23 1447.53,1218.69 1448.12,1219.65 1448.7,1221.99 1449.29,1221.31 1449.88,1222.32 1450.46,1216.44 1451.05,1214.97 1451.64,1213.47 1452.22,1214.66 1452.81,1218.57 1453.4,1220.7 1453.98,1221.34 1454.57,1218.37 1455.16,1215.25 1455.74,1215.18 1456.33,1212.55 1456.91,1211.31 1457.5,1211.19 1458.09,1211.27 1458.67,1211.21 1459.26,1212.51 1459.85,1215.09 1460.43,1212.33 1461.02,1213.79 1461.61,1213.98 1462.19,1215.46 1462.78,1217.87 1463.37,1220.25 1463.95,1222.63 1464.54,1222.07 1465.12,1221.31 1465.71,1219.62 1466.3,1217.98 1466.88,1219.34 1467.47,1215.13 1468.06,1216.43 1468.64,1216.18 1469.23,1214.87 1469.82,1214.81 1470.4,1214.49 1470.99,1214.24 1471.57,1211.3 1472.16,1211.36 1472.75,1210.17 1473.33,1211.33 1473.92,1212.64 1474.51,1212.58 1475.09,1212.7 1475.68,1211.17 1476.27,1208.64 1476.85,1207.69 1477.44,1209.17 1478.03,1208.31 1478.61,1207.38 1479.2,1208.82 1479.78,1210.05 1480.37,1209.96 1480.96,1208.77 1481.54,1206.63 1482.13,1207.25 1482.72,1206.33 1483.3,1205.62 1483.89,1204.74 1484.48,1204.09 1485.06,1204.91 1485.65,1206.79 1486.24,1205.56 1486.82,1207.04 1487.41,1202.24 1487.99,1204.19 1488.58,1205.81 1489.17,1206.55 1489.75,1206.83 1490.34,1208.6 1490.93,1208.69 1491.51,1209.03 1492.1,1208.05 1492.69,1207.2 1493.27,1206.08 1493.86,1209.23 1494.45,1210.61 1495.03,1210.96 1495.62,1214.74 1496.2,1215.89 1496.79,1218.41 1497.38,1216.95 1497.96,1216.81 1498.55,1216.74 1499.14,1215.24 1499.72,1216.19 1500.31,1216.19 1500.9,1218.78 1501.48,1218.44 1502.07,1221.02 1502.65,1216.72 1503.24,1214.16 1503.83,1215.33 1504.41,1215.19 1505,1216.26 1505.59,1218.73 1506.17,1216.99 1506.76,1218 1507.35,1217.49 1507.93,1217.59 1508.52,1218.67 1509.11,1218.44 1509.69,1220.89 1510.28,1220.61 1510.86,1224.34 1511.45,1226.32 1512.04,1223.2 1512.62,1220.08 1513.21,1221.15 1513.8,1222.06 1514.38,1222.74 1514.97,1222.48 1515.56,1222.04 1516.14,1220.23 1516.73,1220.84 1517.32,1216.56 1517.9,1215.15 1518.49,1213.95 1519.07,1212.93 1519.66,1212.8 1520.25,1209.82 1520.83,1210.34 1521.42,1207.75 1522.01,1208.19 1522.59,1206.99 1523.18,1206.1 1523.77,1207.83 1524.35,1206.62 1524.94,1206.72 1525.52,1209.74 1526.11,1211.68 1526.7,1213.18 1527.28,1211.84 1527.87,1209.39 1528.46,1210.95 1529.04,1212.52 1529.63,1212.5 1530.22,1208.79 1530.8,1207.77 1531.39,1209.49 1531.98,1205.9 1532.56,1207.64 1533.15,1207.74 1533.73,1211.88 1534.32,1209.52 1534.91,1213.74 1535.49,1209.9 1536.08,1211.18 1536.67,1212.64 1537.25,1208.66 1537.84,1210.29 1538.43,1210.34 1539.01,1211.9 1539.6,1210.36 1540.19,1210.67 1540.77,1209.55 1541.36,1208.18 1541.94,1205.62 1542.53,1204.64 1543.12,1201.26 1543.7,1207.4 1544.29,1207.34 1544.88,1207.6 1545.46,1205.15 1546.05,1209.56 1546.64,1211.19 1547.22,1213.75 1547.81,1211.32 1548.4,1212.45 1548.98,1212.37 1549.57,1213.87 1550.15,1213.79 1550.74,1213.79 1551.33,1213.74 1551.91,1213.76 1552.5,1212.37 1553.09,1212.59 1553.67,1213.72 1554.26,1213.67 1554.85,1213.61 1555.43,1218.9 1556.02,1218.61 1556.6,1217.15 1557.19,1217.16 1557.78,1218.53 1558.36,1216.77 1558.95,1213.93 1559.54,1216.46 1560.12,1213.59 1560.71,1215.84 1561.3,1216.88 1561.88,1215.37 1562.47,1216.53 1563.06,1216.28 1563.64,1216.02 1564.23,1214.43 1564.81,1210.13 1565.4,1210.01 1565.99,1208.78 1566.57,1210.53 1567.16,1209.27 1567.75,1212.34 1568.33,1212.35 1568.92,1213.61 1569.51,1212.19 1570.09,1212.48 1570.68,1210.01 1571.27,1206.34 1571.85,1207.13 1572.44,1205.94 1573.02,1207.48 1573.61,1207.83 1574.2,1208.13 1574.78,1208.32 1575.37,1205.85 1575.96,1206.53 1576.54,1208.32 1577.13,1209.85 1577.72,1210.13 1578.3,1206.74 1578.89,1208.63 1579.47,1209.02 1580.06,1209.38 1580.65,1209.38 1581.23,1208.09 1581.82,1208.27 1582.41,1208.51 1582.99,1208.95 1583.58,1210.37 1584.17,1210.57 1584.75,1210.88 1585.34,1208.19 1585.93,1207.48 1586.51,1209.02 1587.1,1209.24 1587.68,1210.96 1588.27,1213.74 1588.86,1215.02 1589.44,1215.12 1590.03,1214.7 1590.62,1214.66 1591.2,1214.34 1591.79,1217.01 1592.38,1216.82 1592.96,1220.52 1593.55,1221.35 1594.14,1220.83 1594.72,1221.54 1595.31,1221.14 1595.89,1220.79 1596.48,1221.52 1597.07,1220.98 1597.65,1220.55 1598.24,1217.38 1598.83,1213.23 1599.41,1212.93 1600,1211.61 1600.59,1209.95 1601.17,1208.82 1601.76,1207.8 1602.34,1210.47 1602.93,1206.54 1603.52,1206.83 1604.1,1207.38 1604.69,1207.87 1605.28,1207.9 1605.86,1211.03 1606.45,1211.27 1607.04,1210.03 1607.62,1207.47 1608.21,1207.91 1608.8,1208.23 1609.38,1208.53 1609.97,1208.9 1610.55,1209.02 1611.14,1209.06 1611.73,1206.56 1612.31,1208.27 1612.9,1207.17 1613.49,1210.21 1614.07,1210.44 1614.66,1210.88 1615.25,1210.64 1615.83,1213.28 1616.42,1215.58 1617.01,1216.76 1617.59,1216.84 1618.18,1216.71 1618.76,1216.57 1619.35,1216.49 1619.94,1217.68 1620.52,1218.8 1621.11,1218.41 1621.7,1217.83 1622.28,1216.03 1622.87,1214.66 1623.46,1212.92 1624.04,1212.95 1624.63,1211.47 1625.22,1212.83 1625.8,1211.52 1626.39,1211.81 1626.97,1207.87 1627.56,1208.25 1628.15,1209.79 1628.73,1210.2 1629.32,1210.46 1629.91,1212.15 1630.49,1209.29 1631.08,1209.46 1631.67,1208.12 1632.25,1208.24 1632.84,1209.73 1633.42,1211.19 1634.01,1215.28 1634.6,1214.85 1635.18,1215.79 1635.77,1217.07 1636.36,1219.52 1636.94,1220.56 1637.53,1224.03 1638.12,1223.45 1638.7,1222.95 1639.29,1222.31 1639.88,1222.02 1640.46,1219.17 1641.05,1220.11 1641.63,1215.96 1642.22,1213.13 1642.81,1214.23 1643.39,1213.2 1643.98,1217.03 1644.57,1218.09 1645.15,1219.12 1645.74,1218.79 1646.33,1215.88 1646.91,1217.09 1647.5,1216.89 1648.09,1216.69 1648.67,1217.67 1649.26,1216.1 1649.84,1214.65 1650.43,1214.43 1651.02,1214.65 1651.6,1213.14 1652.19,1214.59 1652.78,1213.28 1653.36,1215.87 1653.95,1214.28 1654.54,1213.15 1655.12,1214.59 1655.71,1214.43 1656.29,1213.27 1656.88,1211.94 1657.47,1209.2 1658.05,1209.48 1658.64,1209.71 1659.23,1207.34 1659.81,1206.46 1660.4,1207.94 1660.99,1209.71 1661.57,1212.41 1662.16,1213.78 1662.75,1215.3 1663.33,1216.22 1663.92,1213.66 1664.5,1214.62 1665.09,1215.86 1665.68,1215.61 1666.26,1215.42 1666.85,1214.19 1667.44,1214.15 1668.02,1211.64 1668.61,1211.93 1669.2,1212.15 1669.78,1214.57 1670.37,1213.36 1670.96,1212.26 1671.54,1212.13 1672.13,1212.54 1672.71,1212.53 1673.3,1212.17 1673.89,1212.23 1674.47,1213.8 1675.06,1212.17 1675.65,1213.85 1676.23,1213.65 1676.82,1213.48 1677.41,1213.74 1677.99,1214.72 1678.58,1211.98 1679.17,1210.61 1679.75,1210.69 1680.34,1212.01 1680.92,1213.29 1681.51,1211.73 1682.1,1211.62 1682.68,1209.55 1683.27,1213.56 1683.86,1211.03 1684.44,1210.12 1685.03,1207.7 1685.62,1209.55 1686.2,1209.88 1686.79,1210.11 1687.37,1213 1687.96,1211.6 1688.55,1211.34 1689.13,1211.09 1689.72,1209.89 1690.31,1210.59 1690.89,1209.47 1691.48,1209.64 1692.07,1211.26 1692.65,1212.73 1693.24,1214.12 1693.83,1212.65 1694.41,1215.24 1695,1216.2 1695.58,1216.08 1696.17,1215.63 1696.76,1213.05 1697.34,1211.82 1697.93,1211.84 1698.52,1211.82 1699.1,1210.66 1699.69,1212.1 1700.28,1210.62 1700.86,1209.65 1701.45,1211.27 1702.04,1212.65 1702.62,1212.72 1703.21,1214.1 1703.79,1212.56 1704.38,1212.77 1704.97,1214.16 1705.55,1218.01 1706.14,1216.07 1706.73,1219.85 1707.31,1220.62 1707.9,1221.29 1708.49,1220.85 1709.07,1221.75 1709.66,1221.6 1710.24,1217.34 1710.83,1216.98 1711.42,1215.5 1712,1215.18 1712.59,1213.37 1713.18,1217.19 1713.76,1218.35 1714.35,1218.02 1714.94,1219.08 1715.52,1218.61 1716.11,1218.11 1716.7,1215.02 1717.28,1216 1717.87,1215.52 1718.45,1217.92 1719.04,1219.06 1719.63,1216.02 1720.21,1213.3 1720.8,1209.4 1721.39,1213.7 1721.97,1211.18 1722.56,1210.03 1723.15,1208.83 1723.73,1205.22 1724.32,1204.29 1724.91,1203.48 1725.49,1203.97 1726.08,1202.99 1726.66,1203.74 1727.25,1204.26 1727.84,1207.16 1728.42,1207.54 1729.01,1210.24 1729.6,1208.86 1730.18,1207.78 1730.77,1209.24 1731.36,1211.09 1731.94,1207.4 1732.53,1207.62 1733.11,1206.46 1733.7,1204.28 1734.29,1207.46 1734.87,1207.97 1735.46,1209.5 1736.05,1206.97 1736.63,1208.66 1737.22,1208.74 1737.81,1210.32 1738.39,1211.58 1738.98,1214.46 1739.57,1213.41 1740.15,1214.69 1740.74,1213.36 1741.32,1213.67 1741.91,1211.13 1742.5,1211.13 1743.08,1210.12 1743.67,1208.78 1744.26,1207.67 1744.84,1206.72 1745.43,1205.64 1746.02,1204.85 1746.6,1204.98 1747.19,1205.01 1747.78,1205.48 1748.36,1207.18 1748.95,1208.8 1749.53,1211.68 1750.12,1210.42 1750.71,1210.92 1751.29,1209.69 1751.88,1208.26 1752.47,1206.05 1753.05,1207.79 1753.64,1205.44 1754.23,1204.65 1754.81,1207.83 1755.4,1208.14 1755.99,1209.79 1756.57,1208.71 1757.16,1208.96 1757.74,1209.05 1758.33,1210.27 1758.92,1211.6 1759.5,1210.13 1760.09,1211.64 1760.68,1209.19 1761.26,1209.67 1761.85,1211.22 1762.44,1209.74 1763.02,1208.48 1763.61,1208.67 1764.19,1210.19 1764.78,1210.66 1765.37,1210.58 1765.95,1210.66 1766.54,1211.96 1767.13,1211.97 1767.71,1212.33 1768.3,1214.98 1768.89,1216.21 1769.47,1214.72 1770.06,1218.61 1770.65,1219.53 1771.23,1220.47 1771.82,1218.49 1772.4,1220.92 1772.99,1219.04 1773.58,1218.83 1774.16,1221.03 1774.75,1216.71 1775.34,1213.91 1775.92,1214.03 1776.51,1214.1 1777.1,1213.05 1777.68,1213.09 1778.27,1214.37 1778.86,1214.51 1779.44,1213.07 1780.03,1214.21 1780.61,1215.63 1781.2,1214.21 1781.79,1215.67 1782.37,1214.04 1782.96,1210.84 1783.55,1212.59 1784.13,1214.12 1784.72,1215.43 1785.31,1216.57 1785.89,1216.51 1786.48,1217.64 1787.06,1217.22 1787.65,1218.37 1788.24,1219.14 1788.82,1216.11 1789.41,1217.49 1790,1214.49 1790.58,1211.48 1791.17,1211.61 1791.76,1212.89 1792.34,1212.81 1792.93,1213.18 1793.52,1217.23 1794.1,1216.85 1794.69,1215.41 1795.27,1216.91 1795.86,1217.87 1796.45,1217.49 1797.03,1219.74 1797.62,1216.78 1798.21,1217.49 1798.79,1212.12 1799.38,1210.88 1799.97,1209.73 1800.55,1209.82 1801.14,1211.37 1801.73,1214.05 1802.31,1213.92 1802.9,1213.91 1803.48,1212.57 1804.07,1212.57 1804.66,1212.57 1805.24,1214 1805.83,1215.27 1806.42,1212.38 1807,1215.16 1807.59,1215.22 1808.18,1213.97 1808.76,1211.25 1809.35,1210.09 1809.94,1210.33 1810.52,1207.85 1811.11,1209.68 1811.69,1211.27 1812.28,1211.47 1812.87,1211.5 1813.45,1215.73 1814.04,1215.65 1814.63,1214.42 1815.21,1213.2 1815.8,1213.22 1816.39,1212.97 1816.97,1211.71 1817.56,1212.91 1818.14,1211.61 1818.73,1206.7 1819.32,1208.4 1819.9,1208.86 1820.49,1210.18 1821.08,1210.23 1821.66,1210.44 1822.25,1206.96 1822.84,1210.15 1823.42,1207.8 1824.01,1210.53 1824.6,1214.55 1825.18,1212.09 1825.77,1212.06 1826.35,1212.31 1826.94,1211.28 1827.53,1211.51 1828.11,1211.84 1828.7,1213.42 1829.29,1214.69 1829.87,1214.72 1830.46,1214.64 1831.05,1212.06 1831.63,1209.63 1832.22,1211.15 1832.81,1213.71 1833.39,1212.22 1833.98,1213.47 1834.56,1214.85 1835.15,1217.41 1835.74,1218.35 1836.32,1219.7 1836.91,1218.27 1837.5,1219.45 1838.08,1219.21 1838.67,1217.69 1839.26,1217.23 1839.84,1217.14 1840.43,1216.91 1841.01,1218.04 1841.6,1215.35 1842.19,1215.36 1842.77,1216.64 1843.36,1213.83 1843.95,1214.99 1844.53,1213.41 1845.12,1214.69 1845.71,1213.09 1846.29,1212.88 1846.88,1214.14 1847.47,1213.95 1848.05,1212.51 1848.64,1212.62 1849.22,1213.9 1849.81,1212.69 1850.4,1214.1 1850.98,1215.56 1851.57,1212.66 1852.16,1214.2 1852.74,1212.84 1853.33,1211.58 1853.92,1210.36 1854.5,1211.83 1855.09,1211.7 1855.68,1210.35 1856.26,1209.34 1856.85,1208.15 1857.43,1210.77 1858.02,1209.35 1858.61,1212.03 1859.19,1212.06 1859.78,1213.21 1860.37,1213.12 1860.95,1212.98 1861.54,1210.5 1862.13,1213.41 1862.71,1210.82 1863.3,1210.9 1863.88,1213.66 1864.47,1212.26 1865.06,1210.89 1865.64,1212.31 1866.23,1211.19 1866.82,1210.03 1867.4,1212.82 1867.99,1212.94 1868.58,1211.75 1869.16,1211.93 1869.75,1215.67 1870.34,1214.23 1870.92,1213.8 1871.51,1213.95 1872.09,1212.5 1872.68,1212.66 1873.27,1215.27 1873.85,1217.76 1874.44,1220.29 1875.03,1222.62 1875.61,1223.24 1876.2,1219.95 1876.79,1219.67 1877.37,1217.91 1877.96,1218.9 1878.55,1218.22 1879.13,1216.46 1879.72,1216.45 1880.3,1216.47 1880.89,1216.06 1881.48,1214.71 1882.06,1216.12 1882.65,1217.35 1883.24,1219.6 1883.82,1219.55 1884.41,1221.81 1885,1220.38 1885.58,1218.62 1886.17,1219.58 1886.76,1219.2 1887.34,1220.07 1887.93,1217.13 1888.51,1215.3 1889.1,1216.56 1889.69,1216.38 1890.27,1214.63 1890.86,1213.21 1891.45,1213.14 1892.03,1213.42 1892.62,1212.34 1893.21,1215.05 1893.79,1216.23 1894.38,1214.94 1894.96,1214.75 1895.55,1214.58 1896.14,1214.34 1896.72,1211.57 1897.31,1213 1897.9,1211.75 1898.48,1210.75 1899.07,1209.38 1899.66,1211.02 1900.24,1208.56 1900.83,1208.76 1901.42,1211.38 1902,1212.45 1902.59,1211.27 1903.17,1214.12 1903.76,1218.22 1904.35,1217.67 1904.93,1216.25 1905.52,1216.05 1906.11,1216.9 1906.69,1215.42 1907.28,1214.18 1907.87,1215.26 1908.45,1216.43 1909.04,1217.56 1909.63,1214.65 1910.21,1213.17 1910.8,1217.07 1911.38,1216.98 1911.97,1216.63 1912.56,1216.5 1913.14,1217.48 1913.73,1217.48 1914.32,1214.88 1914.9,1218.83 1915.49,1219.69 1916.08,1224.46 1916.66,1223.78 1917.25,1223.15 1917.83,1222.49 1918.42,1220.74 1919.01,1221.58 1919.59,1223.57 1920.18,1221.65 1920.77,1219.14 1921.35,1218.66 1921.94,1219.66 1922.53,1221.96 1923.11,1219.97 1923.7,1218.38 1924.29,1219.31 1924.87,1220.28 1925.46,1218.35 1926.04,1218.09 1926.63,1217.83 1927.22,1217.64 1927.8,1215.96 1928.39,1216.11 1928.98,1214.79 1929.56,1213.46 1930.15,1213.32 1930.74,1211.59 1931.32,1210.46 1931.91,1213.13 1932.5,1214.11 1933.08,1206.06 1933.67,1204.98 1934.25,1206.68 1934.84,1207.08 1935.43,1208.79 1936.01,1210.05 1936.6,1207.58 1937.19,1208.01 1937.77,1208.29 1938.36,1208.4 1938.95,1212.44 1939.53,1210.86 1940.12,1209.3 1940.71,1208.08 1941.29,1208.37 1941.88,1209.85 1942.46,1209.96 1943.05,1207.55 1943.64,1207.82 1944.22,1210.83 1944.81,1209.74 1945.4,1209.76 1945.98,1211.2 1946.57,1215.22 1947.16,1216.35 1947.74,1217.65 1948.33,1217.48 1948.91,1218.66 1949.5,1214.52 1950.09,1215.65 1950.67,1214.37 1951.26,1213.08 1951.85,1213.09 1952.43,1213.18 1953.02,1213.17 1953.61,1208.98 1954.19,1210.55 1954.78,1209.35 1955.37,1209.78 1955.95,1208.71 1956.54,1210.36 1957.12,1209.33 1957.71,1213.32 1958.3,1209.69 1958.88,1211.34 1959.47,1211.26 1960.06,1211.4 1960.64,1210.26 1961.23,1211.54 1961.82,1214.41 1962.4,1212.82 1962.99,1214.1 1963.58,1212.8 1964.16,1214.15 1964.75,1208.68 1965.33,1207.52 1965.92,1206.16 1966.51,1206.64 1967.09,1204.41 1967.68,1203.42 1968.27,1203.93 1968.85,1206.03 1969.44,1210.3 1970.03,1210.6 1970.61,1208.32 1971.2,1207.55 1971.78,1206.5 1972.37,1206.42 1972.96,1210.77 1973.54,1209.86 1974.13,1208.82 1974.72,1207.66 1975.3,1206.32 1975.89,1210.52 1976.48,1210.49 1977.06,1210.38 1977.65,1209.5 1978.24,1209.76 1978.82,1211.12 1979.41,1207.36 1979.99,1210.18 1980.58,1211.34 1981.17,1210.37 1981.75,1211.82 1982.34,1212.17 1982.93,1213.73 1983.51,1212.17 1984.1,1210.81 1984.69,1212.49 1985.27,1211.38 1985.86,1212.58 1986.45,1213.88 1987.03,1212.6 1987.62,1215.14 1988.2,1216.58 1988.79,1216.65 1989.38,1217.86 1989.96,1214.94 1990.55,1215.95 1991.14,1215.95 1991.72,1216.86 1992.31,1216.64 1992.9,1213.96 1993.48,1213.79 1994.07,1214.97 1994.65,1213.61 1995.24,1212.23 1995.83,1212.63 1996.41,1211.13 1997,1212.3 1997.59,1212.43 1998.17,1208.74 1998.76,1207.5 1999.35,1210.24 1999.93,1210.43 2000.52,1211.73 2001.11,1210.46 2001.69,1209.25 2002.28,1210.89 2002.86,1209.7 2003.45,1211.48 2004.04,1214.26 2004.62,1215.34 2005.21,1217.87 2005.8,1216.22 2006.38,1216.23 2006.97,1221.15 2007.56,1223.59 2008.14,1223.37 2008.73,1225.36 2009.32,1222.95 2009.9,1222.14 2010.49,1220.42 2011.07,1218.73 2011.66,1218.31 2012.25,1218.18 2012.83,1220.54 2013.42,1218.98 2014.01,1218.41 2014.59,1216.72 2015.18,1218.01 2015.77,1217.67 2016.35,1221.21 2016.94,1218 2017.53,1216.15 2018.11,1215.94 2018.7,1214.47 2019.28,1213.1 2019.87,1215.59 2020.46,1215.31 2021.04,1215.3 2021.63,1215.24 2022.22,1216.44 2022.8,1213.4 2023.39,1213.35 2023.98,1212.08 2024.56,1213.54 2025.15,1213.76 2025.73,1215.13 2026.32,1213.48 2026.91,1214.77 2027.49,1214.72 2028.08,1210.59 2028.67,1209.15 2029.25,1208.3 2029.84,1209.9 2030.43,1209.99 2031.01,1209.8 2031.6,1208.56 2032.19,1208.72 2032.77,1213.02 2033.36,1212.64 2033.94,1211.31 2034.53,1211.39 2035.12,1211.49 2035.7,1214.09 2036.29,1215.32 2036.88,1214.29 2037.46,1214.2 2038.05,1215.45 2038.64,1216.65 2039.22,1217.86 2039.81,1217.71 2040.4,1217.75 2040.98,1216.1 2041.57,1213.55 2042.15,1216.31 2042.74,1216.4 2043.33,1214.71 2043.91,1216.14 2044.5,1214.72 2045.09,1214.52 2045.67,1214.48 2046.26,1212.94 2046.85,1212.98 2047.43,1213.08 2048.02,1211.89 2048.6,1210.19 2049.19,1208.9 2049.78,1207.91 2050.36,1208.13 2050.95,1205.77 2051.54,1203.76 2052.12,1204.08 2052.71,1203.19 2053.3,1201.19 2053.88,1202.07 2054.47,1202.6 2055.06,1202.87 2055.64,1206.08 2056.23,1207.76 2056.81,1206.61 2057.4,1206.98 2057.99,1205.89 2058.57,1207.72 2059.16,1205.16 2059.75,1206.58 2060.33,1206.91 2060.92,1205.66 2061.51,1205.82 2062.09,1209 2062.68,1209.3 2063.27,1210.85 2063.85,1213.67 2064.44,1210.91 2065.02,1211.18 2065.61,1211.34 2066.2,1208.99 2066.78,1210.63 2067.37,1213.34 2067.96,1213.15 2068.54,1211.71 2069.13,1211.9 2069.72,1213.39 2070.3,1214.77 2070.89,1214.63 2071.48,1215.81 2072.06,1216.87 2072.65,1219.56 2073.23,1216.41 2073.82,1217.83 2074.41,1217.4 2074.99,1218.46 2075.58,1218.2 2076.17,1216.69 2076.75,1216.41 2077.34,1215.94 2077.93,1214.18 2078.51,1211.58 2079.1,1210.17 2079.68,1210.37 2080.27,1208.97 2080.86,1213.05 2081.44,1212.77 2082.03,1214.13 2082.62,1211.27 2083.2,1208.92 2083.79,1209.27 2084.38,1209.3 2084.96,1209.61 2085.55,1207.05 2086.14,1208.6 2086.72,1209.82 2087.31,1208.79 2087.89,1206.52 2088.48,1209.61 2089.07,1208.45 2089.65,1209.78 2090.24,1207.42 2090.83,1206.57 2091.41,1207.01 2092,1208.61 2092.59,1209.07 2093.17,1213.13 2093.76,1210.28 2094.35,1210.31 2094.93,1209.17 2095.52,1208.01 2096.1,1208.45 2096.69,1211.6 2097.28,1212.88 2097.86,1210.1 2098.45,1210.51 2099.04,1210.48 2099.62,1211.79 2100.21,1209.39 2100.8,1208.23 2101.38,1208.56 2101.97,1208.84 2102.55,1210.47 2103.14,1211.64 2103.73,1213.05 2104.31,1213.3 2104.9,1213.5 2105.49,1216.35 2106.07,1217.45 2106.66,1217.23 2107.25,1219.5 2107.83,1216.55 2108.42,1218.78 2109.01,1218.64 2109.59,1220.96 2110.18,1219.27 2110.76,1219.03 2111.35,1217.49 2111.94,1217.32 2112.52,1217.28 2113.11,1215.89 2113.7,1215.69 2114.28,1214.29 2114.87,1214.23 2115.46,1212.62 2116.04,1211.36 2116.63,1208.57 2117.22,1208.83 2117.8,1208.99 2118.39,1209.47 2118.97,1209.28 2119.56,1208.25 2120.15,1208.46 2120.73,1208.46 2121.32,1210.23 2121.91,1209.28 2122.49,1209.44 2123.08,1207.11 2123.67,1208.88 2124.25,1209.44 2124.84,1212.04 2125.42,1212.27 2126.01,1212.25 2126.6,1211.04 2127.18,1211.01 2127.77,1208.77 2128.36,1209.22 2128.94,1210.78 2129.53,1211.88 2130.12,1210.77 2130.7,1213.8 2131.29,1214.11 2131.88,1215.29 2132.46,1216.25 2133.05,1214.81 2133.63,1214.69 2134.22,1211.61 2134.81,1211.79 2135.39,1209.3 2135.98,1210.76 2136.57,1210.77 2137.15,1210.78 2137.74,1211.04 2138.33,1208.51 2138.91,1208.75 2139.5,1211.62 2140.09,1209.01 2140.67,1209.3 2141.26,1209.37 2141.84,1212.32 2142.43,1212.3 2143.02,1212.35 2143.6,1212.62 2144.19,1212.61 2144.78,1215.58 2145.36,1215.33 2145.95,1212.53 2146.54,1211.16 2147.12,1214.07 2147.71,1211.69 2148.3,1213.25 2148.88,1214.54 2149.47,1214.6 2150.05,1214.26 2150.64,1214.36 2151.23,1213.06 2151.81,1213.03 2152.4,1212.88 2152.99,1215.42 2153.57,1215.52 2154.16,1215.33 2154.75,1215.26 2155.33,1217.55 2155.92,1215.92 2156.5,1217.06 2157.09,1216.86 2157.68,1216.81 2158.26,1213.85 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1213.49 L986.612 1213.49 L987.198 1213.49 L987.785 1213.49 L988.371 1213.49 L988.957 1213.49 L989.544 1213.49 L990.13 1213.49 L990.717 1213.49 L991.303 1213.49 L991.889 1213.49 L992.476 1213.49 L993.062 1213.49 L993.649 1213.49 L994.235 1213.49 L994.822 1213.49 L995.408 1213.49 L995.994 1213.49 L996.581 1213.49 L997.167 1213.49 L997.754 1213.49 L998.34 1213.49 L998.926 1213.49 L999.513 1213.49 L1000.1 1213.49 L1000.69 1213.49 L1001.27 1213.49 L1001.86 1213.49 L1002.44 1213.49 L1003.03 1213.49 L1003.62 1213.49 L1004.2 1213.49 L1004.79 1213.49 L1005.38 1213.49 L1005.96 1213.49 L1006.55 1213.49 L1007.14 1213.49 L1007.72 1213.49 L1008.31 1213.49 L1008.9 1213.49 L1009.48 1213.49 L1010.07 1213.49 L1010.65 1213.49 L1011.24 1213.49 L1011.83 1213.49 L1012.41 1213.49 L1013 1213.49 L1013.59 1213.49 L1014.17 1213.49 L1014.76 1213.49 L1015.35 1213.49 L1015.93 1213.49 L1016.52 1213.49 L1017.11 1213.49 L1017.69 1213.49 L1018.28 1213.49 L1018.86 1213.49 L1019.45 1213.49 L1020.04 1213.49 L1020.62 1213.49 L1021.21 1213.49 L1021.8 1213.49 L1022.38 1213.49 L1022.97 1213.49 L1023.56 1213.49 L1024.14 1213.49 L1024.73 1213.49 L1025.32 1213.49 L1025.9 1213.49 L1026.49 1213.49 L1027.07 1213.49 L1027.66 1213.49 L1028.25 1213.49 L1028.83 1213.49 L1029.42 1213.49 L1030.01 1213.49 L1030.59 1213.49 L1031.18 1213.49 L1031.77 1213.49 L1032.35 1213.49 L1032.94 1213.49 L1033.52 1213.49 L1034.11 1213.49 L1034.7 1213.49 L1035.28 1213.49 L1035.87 1213.49 L1036.46 1213.49 L1037.04 1213.49 L1037.63 1213.49 L1038.22 1213.49 L1038.8 1213.49 L1039.39 1213.49 L1039.98 1213.49 L1040.56 1213.49 L1041.15 1213.49 L1041.73 1213.49 L1042.32 1213.49 L1042.91 1213.49 L1043.49 1213.49 L1044.08 1213.49 L1044.67 1213.49 L1045.25 1213.49 L1045.84 1213.49 L1046.43 1213.49 L1047.01 1213.49 L1047.6 1213.49 L1048.19 1213.49 L1048.77 1213.49 L1049.36 1213.49 L1049.94 1213.49 L1050.53 1213.49 L1051.12 1213.49 L1051.7 1213.49 L1052.29 1213.49 L1052.88 1213.49 L1053.46 1213.49 L1054.05 1213.49 L1054.64 1213.49 L1055.22 1213.49 L1055.81 1213.49 L1056.39 1213.49 L1056.98 1213.49 L1057.57 1213.49 L1058.15 1213.49 L1058.74 1213.49 L1059.33 1213.49 L1059.91 1213.49 L1060.5 1213.49 L1061.09 1213.49 L1061.67 1213.49 L1062.26 1213.49 L1062.85 1213.49 L1063.43 1213.49 L1064.02 1213.49 L1064.6 1213.49 L1065.19 1213.49 L1065.78 1213.49 L1066.36 1213.49 L1066.95 1213.49 L1067.54 1213.49 L1068.12 1213.49 L1068.71 1213.49 L1069.3 1213.49 L1069.88 1213.49 L1070.47 1213.49 L1071.06 1213.49 L1071.64 1213.49 L1072.23 1213.49 L1072.81 1213.49 L1073.4 1213.49 L1073.99 1213.49 L1074.57 1213.49 L1075.16 1213.49 L1075.75 1213.49 L1076.33 1213.49 L1076.92 1213.49 L1077.51 1213.49 L1078.09 1213.49 L1078.68 1213.49 L1079.26 1213.49 L1079.85 1213.49 L1080.44 1213.49 L1081.02 1213.49 L1081.61 1213.49 L1082.2 1213.49 L1082.78 1213.49 L1083.37 1213.49 L1083.96 1213.49 L1084.54 1213.49 L1085.13 1213.49 L1085.72 1213.49 L1086.3 1213.49 L1086.89 1213.49 L1087.47 1213.49 L1088.06 1213.49 L1088.65 1213.49 L1089.23 1213.49 L1089.82 1213.49 L1090.41 1213.49 L1090.99 1213.49 L1091.58 1213.49 L1092.17 1213.49 L1092.75 1213.49 L1093.34 1213.49 L1093.93 1213.49 L1094.51 1213.49 L1095.1 1213.49 L1095.68 1213.49 L1096.27 1213.49 L1096.86 1213.49 L1097.44 1213.49 L1098.03 1213.49 L1098.62 1213.49 L1099.2 1213.49 L1099.79 1213.49 L1100.38 1213.49 L1100.96 1213.49 L1101.55 1213.49 L1102.14 1213.49 L1102.72 1213.49 L1103.31 1213.49 L1103.89 1213.49 L1104.48 1213.49 L1105.07 1213.49 L1105.65 1213.49 L1106.24 1213.49 L1106.83 1213.49 L1107.41 1213.49 L1108 1213.49 L1108.59 1213.49 L1109.17 1213.49 L1109.76 1213.49 L1110.34 1213.49 L1110.93 1213.49 L1111.52 1213.49 L1112.1 1213.49 L1112.69 1213.49 L1113.28 1213.49 L1113.86 1213.49 L1114.45 1213.49 L1115.04 1213.49 L1115.62 1213.49 L1116.21 1213.49 L1116.8 1213.49 L1117.38 1213.49 L1117.97 1213.49 L1118.55 1213.49 L1119.14 1213.49 L1119.73 1213.49 L1120.31 1213.49 L1120.9 1213.49 L1121.49 1213.49 L1122.07 1213.49 L1122.66 1213.49 L1123.25 1213.49 L1123.83 1213.49 L1124.42 1213.49 L1125.01 1213.49 L1125.59 1213.49 L1126.18 1213.49 L1126.76 1213.49 L1127.35 1213.49 L1127.94 1213.49 L1128.52 1213.49 L1129.11 1213.49 L1129.7 1213.49 L1130.28 1213.49 L1130.87 1213.49 L1131.46 1213.49 L1132.04 1213.49 L1132.63 1213.49 L1133.21 1213.49 L1133.8 1213.49 L1134.39 1213.49 L1134.97 1213.49 L1135.56 1213.49 L1136.15 1213.49 L1136.73 1213.49 L1137.32 1213.49 L1137.91 1213.49 L1138.49 1213.49 L1139.08 1213.49 L1139.67 1213.49 L1140.25 1213.49 L1140.84 1213.49 L1141.42 1213.49 L1142.01 1213.49 L1142.6 1213.49 L1143.18 1213.49 L1143.77 1213.49 L1144.36 1213.49 L1144.94 1213.49 L1145.53 1213.49 L1146.12 1213.49 L1146.7 1213.49 L1147.29 1213.49 L1147.88 1213.49 L1148.46 1213.49 L1149.05 1213.49 L1149.63 1213.49 L1150.22 1213.49 L1150.81 1213.49 L1151.39 1213.49 L1151.98 1213.49 L1152.57 1213.49 L1153.15 1213.49 L1153.74 1213.49 L1154.33 1213.49 L1154.91 1213.49 L1155.5 1213.49 L1156.09 1213.49 L1156.67 1213.49 L1157.26 1213.49 L1157.84 1213.49 L1158.43 1213.49 L1159.02 1213.49 L1159.6 1213.49 L1160.19 1213.49 L1160.78 1213.49 L1161.36 1213.49 L1161.95 1213.49 L1162.54 1213.49 L1163.12 1213.49 L1163.71 1213.49 L1164.29 1213.49 L1164.88 1213.49 L1165.47 1213.49 L1166.05 1213.49 L1166.64 1213.49 L1167.23 1213.49 L1167.81 1213.49 L1168.4 1213.49 L1168.99 1213.49 L1169.57 1213.49 L1170.16 1213.49 L1170.75 1213.49 L1171.33 1213.49 L1171.92 1213.49 L1172.5 1213.49 L1173.09 1213.49 L1173.68 1213.49 L1174.26 1213.49 L1174.85 1213.49 L1175.44 1213.49 L1176.02 1213.49 L1176.61 1213.49 L1177.2 1213.49 L1177.78 1213.49 L1178.37 1213.49 L1178.96 1213.49 L1179.54 1213.49 L1180.13 1213.49 L1180.71 1213.49 L1181.3 1213.49 L1181.89 1213.49 L1182.47 1213.49 L1183.06 1213.49 L1183.65 1213.49 L1184.23 1213.49 L1184.82 1213.49 L1185.41 1213.49 L1185.99 1213.49 L1186.58 1213.49 L1187.16 1213.49 L1187.75 1213.49 L1188.34 1213.49 L1188.92 1213.49 L1189.51 1213.49 L1190.1 1213.49 L1190.68 1213.49 L1191.27 1213.49 L1191.86 1213.49 L1192.44 1213.49 L1193.03 1213.49 L1193.62 1213.49 L1194.2 1213.49 L1194.79 1213.49 L1195.37 1213.49 L1195.96 1213.49 L1196.55 1213.49 L1197.13 1213.49 L1197.72 1213.49 L1198.31 1213.49 L1198.89 1213.49 L1199.48 1213.49 L1200.07 1213.49 L1200.65 1213.49 L1201.24 1213.49 L1201.83 1213.49 L1202.41 1213.49 L1203 1213.49 L1203.58 1213.49 L1204.17 1213.49 L1204.76 1213.49 L1205.34 1213.49 L1205.93 1213.49 L1206.52 1213.49 L1207.1 1213.49 L1207.69 1213.49 L1208.28 1213.49 L1208.86 1213.49 L1209.45 1213.49 L1210.03 1213.49 L1210.62 1213.49 L1211.21 1213.49 L1211.79 1213.49 L1212.38 1213.49 L1212.97 1213.49 L1213.55 1213.49 L1214.14 1213.49 L1214.73 1213.49 L1215.31 1213.49 L1215.9 1213.49 L1216.49 1213.49 L1217.07 1213.49 L1217.66 1213.49 L1218.24 1213.49 L1218.83 1213.49 L1219.42 1213.49 L1220 1213.49 L1220.59 1213.49 L1221.18 1213.49 L1221.76 1213.49 L1222.35 1213.49 L1222.94 1213.49 L1223.52 1213.49 L1224.11 1213.49 L1224.7 1213.49 L1225.28 1213.49 L1225.87 1213.49 L1226.45 1213.49 L1227.04 1213.49 L1227.63 1213.49 L1228.21 1213.49 L1228.8 1213.49 L1229.39 1213.49 L1229.97 1213.49 L1230.56 1213.49 L1231.15 1213.49 L1231.73 1213.49 L1232.32 1213.49 L1232.91 1213.49 L1233.49 1213.49 L1234.08 1213.49 L1234.66 1213.49 L1235.25 1213.49 L1235.84 1213.49 L1236.42 1213.49 L1237.01 1213.49 L1237.6 1213.49 L1238.18 1213.49 L1238.77 1213.49 L1239.36 1213.49 L1239.94 1213.49 L1240.53 1213.49 L1241.11 1213.49 L1241.7 1213.49 L1242.29 1213.49 L1242.87 1213.49 L1243.46 1213.49 L1244.05 1213.49 L1244.63 1213.49 L1245.22 1213.49 L1245.81 1213.49 L1246.39 1213.49 L1246.98 1213.49 L1247.57 1213.49 L1248.15 1213.49 L1248.74 1213.49 L1249.32 1213.49 L1249.91 1213.49 L1250.5 1213.49 L1251.08 1213.49 L1251.67 1213.49 L1252.26 1213.49 L1252.84 1213.49 L1253.43 1213.49 L1254.02 1213.49 L1254.6 1213.49 L1255.19 1213.49 L1255.78 1213.49 L1256.36 1213.49 L1256.95 1213.49 L1257.53 1213.49 L1258.12 1213.49 L1258.71 1213.49 L1259.29 1213.49 L1259.88 1213.49 L1260.47 1213.49 L1261.05 1213.49 L1261.64 1213.49 L1262.23 1213.49 L1262.81 1213.49 L1263.4 1213.49 L1263.98 1213.49 L1264.57 1213.49 L1265.16 1213.49 L1265.74 1213.49 L1266.33 1213.49 L1266.92 1213.49 L1267.5 1213.49 L1268.09 1213.49 L1268.68 1213.49 L1269.26 1213.49 L1269.85 1213.49 L1270.44 1213.49 L1271.02 1213.49 L1271.61 1213.49 L1272.19 1213.49 L1272.78 1213.49 L1273.37 1213.49 L1273.95 1213.49 L1274.54 1213.49 L1275.13 1213.49 L1275.71 1213.49 L1276.3 1213.49 L1276.89 1213.49 L1277.47 1213.49 L1278.06 1213.49 L1278.65 1213.49 L1279.23 1213.49 L1279.82 1213.49 L1280.4 1213.49 L1280.99 1213.49 L1281.58 1213.49 L1282.16 1213.49 L1282.75 1213.49 L1283.34 1213.49 L1283.92 1213.49 L1284.51 1213.49 L1285.1 1213.49 L1285.68 1213.49 L1286.27 1213.49 L1286.86 1213.49 L1287.44 1213.49 L1288.03 1213.49 L1288.61 1213.49 L1289.2 1213.49 L1289.79 1213.49 L1290.37 1213.49 L1290.96 1213.49 L1291.55 1213.49 L1292.13 1213.49 L1292.72 1213.49 L1293.31 1213.49 L1293.89 1213.49 L1294.48 1213.49 L1295.06 1213.49 L1295.65 1213.49 L1296.24 1213.49 L1296.82 1213.49 L1297.41 1213.49 L1298 1213.49 L1298.58 1213.49 L1299.17 1213.49 L1299.76 1213.49 L1300.34 1213.49 L1300.93 1213.49 L1301.52 1213.49 L1302.1 1213.49 L1302.69 1213.49 L1303.27 1213.49 L1303.86 1213.49 L1304.45 1213.49 L1305.03 1213.49 L1305.62 1213.49 L1306.21 1213.49 L1306.79 1213.49 L1307.38 1213.49 L1307.97 1213.49 L1308.55 1213.49 L1309.14 1213.49 L1309.73 1213.49 L1310.31 1213.49 L1310.9 1213.49 L1311.48 1213.49 L1312.07 1213.49 L1312.66 1213.49 L1313.24 1213.49 L1313.83 1213.49 L1314.42 1213.49 L1315 1213.49 L1315.59 1213.49 L1316.18 1213.49 L1316.76 1213.49 L1317.35 1213.49 L1317.93 1213.49 L1318.52 1213.49 L1319.11 1213.49 L1319.69 1213.49 L1320.28 1213.49 L1320.87 1213.49 L1321.45 1213.49 L1322.04 1213.49 L1322.63 1213.49 L1323.21 1213.49 L1323.8 1213.49 L1324.39 1213.49 L1324.97 1213.49 L1325.56 1213.49 L1326.14 1213.49 L1326.73 1213.49 L1327.32 1213.49 L1327.9 1213.49 L1328.49 1213.49 L1329.08 1213.49 L1329.66 1213.49 L1330.25 1213.49 L1330.84 1213.49 L1331.42 1213.49 L1332.01 1213.49 L1332.6 1213.49 L1333.18 1213.49 L1333.77 1213.49 L1334.35 1213.49 L1334.94 1213.49 L1335.53 1213.49 L1336.11 1213.49 L1336.7 1213.49 L1337.29 1213.49 L1337.87 1213.49 L1338.46 1213.49 L1339.05 1213.49 L1339.63 1213.49 L1340.22 1213.49 L1340.8 1213.49 L1341.39 1213.49 L1341.98 1213.49 L1342.56 1213.49 L1343.15 1213.49 L1343.74 1213.49 L1344.32 1213.49 L1344.91 1213.49 L1345.5 1213.49 L1346.08 1213.49 L1346.67 1213.49 L1347.26 1213.49 L1347.84 1213.49 L1348.43 1213.49 L1349.01 1213.49 L1349.6 1213.49 L1350.19 1213.49 L1350.77 1213.49 L1351.36 1213.49 L1351.95 1213.49 L1352.53 1213.49 L1353.12 1213.49 L1353.71 1213.49 L1354.29 1213.49 L1354.88 1213.49 L1355.47 1213.49 L1356.05 1213.49 L1356.64 1213.49 L1357.22 1213.49 L1357.81 1213.49 L1358.4 1213.49 L1358.98 1213.49 L1359.57 1213.49 L1360.16 1213.49 L1360.74 1213.49 L1361.33 1213.49 L1361.92 1213.49 L1362.5 1213.49 L1363.09 1213.49 L1363.68 1213.49 L1364.26 1213.49 L1364.85 1213.49 L1365.43 1213.49 L1366.02 1213.49 L1366.61 1213.49 L1367.19 1213.49 L1367.78 1213.49 L1368.37 1213.49 L1368.95 1213.49 L1369.54 1213.49 L1370.13 1213.49 L1370.71 1213.49 L1371.3 1213.49 L1371.88 1213.49 L1372.47 1213.49 L1373.06 1213.49 L1373.64 1213.49 L1374.23 1213.49 L1374.82 1213.49 L1375.4 1213.49 L1375.99 1213.49 L1376.58 1213.49 L1377.16 1213.49 L1377.75 1213.49 L1378.34 1213.49 L1378.92 1213.49 L1379.51 1213.49 L1380.09 1213.49 L1380.68 1213.49 L1381.27 1213.49 L1381.85 1213.49 L1382.44 1213.49 L1383.03 1213.49 L1383.61 1213.49 L1384.2 1213.49 L1384.79 1213.49 L1385.37 1213.49 L1385.96 1213.49 L1386.55 1213.49 L1387.13 1213.49 L1387.72 1213.49 L1388.3 1213.49 L1388.89 1213.49 L1389.48 1213.49 L1390.06 1213.49 L1390.65 1213.49 L1391.24 1213.49 L1391.82 1213.49 L1392.41 1213.49 L1393 1213.49 L1393.58 1213.49 L1394.17 1213.49 L1394.75 1213.49 L1395.34 1213.49 L1395.93 1213.49 L1396.51 1213.49 L1397.1 1213.49 L1397.69 1213.49 L1398.27 1213.49 L1398.86 1213.49 L1399.45 1213.49 L1400.03 1213.49 L1400.62 1213.49 L1401.21 1213.49 L1401.79 1213.49 L1402.38 1213.49 L1402.96 1213.49 L1403.55 1213.49 L1404.14 1213.49 L1404.72 1213.49 L1405.31 1213.49 L1405.9 1213.49 L1406.48 1213.49 L1407.07 1213.49 L1407.66 1213.49 L1408.24 1213.49 L1408.83 1213.49 L1409.42 1213.49 L1410 1213.49 L1410.59 1213.49 L1411.17 1213.49 L1411.76 1213.49 L1412.35 1213.49 L1412.93 1213.49 L1413.52 1213.49 L1414.11 1213.49 L1414.69 1213.49 L1415.28 1213.49 L1415.87 1213.49 L1416.45 1213.49 L1417.04 1213.49 L1417.63 1213.49 L1418.21 1213.49 L1418.8 1213.49 L1419.38 1213.49 L1419.97 1213.49 L1420.56 1213.49 L1421.14 1213.49 L1421.73 1213.49 L1422.32 1213.49 L1422.9 1213.49 L1423.49 1213.49 L1424.08 1213.49 L1424.66 1213.49 L1425.25 1213.49 L1425.83 1213.49 L1426.42 1213.49 L1427.01 1213.49 L1427.59 1213.49 L1428.18 1213.49 L1428.77 1213.49 L1429.35 1213.49 L1429.94 1213.49 L1430.53 1213.49 L1431.11 1213.49 L1431.7 1213.49 L1432.29 1213.49 L1432.87 1213.49 L1433.46 1213.49 L1434.04 1213.49 L1434.63 1213.49 L1435.22 1213.49 L1435.8 1213.49 L1436.39 1213.49 L1436.98 1213.49 L1437.56 1213.49 L1438.15 1213.49 L1438.74 1213.49 L1439.32 1213.49 L1439.91 1213.49 L1440.5 1213.49 L1441.08 1213.49 L1441.67 1213.49 L1442.25 1213.49 L1442.84 1213.49 L1443.43 1213.49 L1444.01 1213.49 L1444.6 1213.49 L1445.19 1213.49 L1445.77 1213.49 L1446.36 1213.49 L1446.95 1213.49 L1447.53 1213.49 L1448.12 1213.49 L1448.7 1213.49 L1449.29 1213.49 L1449.88 1213.49 L1450.46 1213.49 L1451.05 1213.49 L1451.64 1213.49 L1452.22 1213.49 L1452.81 1213.49 L1453.4 1213.49 L1453.98 1213.49 L1454.57 1213.49 L1455.16 1213.49 L1455.74 1213.49 L1456.33 1213.49 L1456.91 1213.49 L1457.5 1213.49 L1458.09 1213.49 L1458.67 1213.49 L1459.26 1213.49 L1459.85 1213.49 L1460.43 1213.49 L1461.02 1213.49 L1461.61 1213.49 L1462.19 1213.49 L1462.78 1213.49 L1463.37 1213.49 L1463.95 1213.49 L1464.54 1213.49 L1465.12 1213.49 L1465.71 1213.49 L1466.3 1213.49 L1466.88 1213.49 L1467.47 1213.49 L1468.06 1213.49 L1468.64 1213.49 L1469.23 1213.49 L1469.82 1213.49 L1470.4 1213.49 L1470.99 1213.49 L1471.57 1213.49 L1472.16 1213.49 L1472.75 1213.49 L1473.33 1213.49 L1473.92 1213.49 L1474.51 1213.49 L1475.09 1213.49 L1475.68 1213.49 L1476.27 1213.49 L1476.85 1213.49 L1477.44 1213.49 L1478.03 1213.49 L1478.61 1213.49 L1479.2 1213.49 L1479.78 1213.49 L1480.37 1213.49 L1480.96 1213.49 L1481.54 1213.49 L1482.13 1213.49 L1482.72 1213.49 L1483.3 1213.49 L1483.89 1213.49 L1484.48 1213.49 L1485.06 1213.49 L1485.65 1213.49 L1486.24 1213.49 L1486.82 1213.49 L1487.41 1213.49 L1487.99 1213.49 L1488.58 1213.49 L1489.17 1213.49 L1489.75 1213.49 L1490.34 1213.49 L1490.93 1213.49 L1491.51 1213.49 L1492.1 1213.49 L1492.69 1213.49 L1493.27 1213.49 L1493.86 1213.49 L1494.45 1213.49 L1495.03 1213.49 L1495.62 1213.49 L1496.2 1213.49 L1496.79 1213.49 L1497.38 1213.49 L1497.96 1213.49 L1498.55 1213.49 L1499.14 1213.49 L1499.72 1213.49 L1500.31 1213.49 L1500.9 1213.49 L1501.48 1213.49 L1502.07 1213.49 L1502.65 1213.49 L1503.24 1213.49 L1503.83 1213.49 L1504.41 1213.49 L1505 1213.49 L1505.59 1213.49 L1506.17 1213.49 L1506.76 1213.49 L1507.35 1213.49 L1507.93 1213.49 L1508.52 1213.49 L1509.11 1213.49 L1509.69 1213.49 L1510.28 1213.49 L1510.86 1213.49 L1511.45 1213.49 L1512.04 1213.49 L1512.62 1213.49 L1513.21 1213.49 L1513.8 1213.49 L1514.38 1213.49 L1514.97 1213.49 L1515.56 1213.49 L1516.14 1213.49 L1516.73 1213.49 L1517.32 1213.49 L1517.9 1213.49 L1518.49 1213.49 L1519.07 1213.49 L1519.66 1213.49 L1520.25 1213.49 L1520.83 1213.49 L1521.42 1213.49 L1522.01 1213.49 L1522.59 1213.49 L1523.18 1213.49 L1523.77 1213.49 L1524.35 1213.49 L1524.94 1213.49 L1525.52 1213.49 L1526.11 1213.49 L1526.7 1213.49 L1527.28 1213.49 L1527.87 1213.49 L1528.46 1213.49 L1529.04 1213.49 L1529.63 1213.49 L1530.22 1213.49 L1530.8 1213.49 L1531.39 1213.49 L1531.98 1213.49 L1532.56 1213.49 L1533.15 1213.49 L1533.73 1213.49 L1534.32 1213.49 L1534.91 1213.49 L1535.49 1213.49 L1536.08 1213.49 L1536.67 1213.49 L1537.25 1213.49 L1537.84 1213.49 L1538.43 1213.49 L1539.01 1213.49 L1539.6 1213.49 L1540.19 1213.49 L1540.77 1213.49 L1541.36 1213.49 L1541.94 1213.49 L1542.53 1213.49 L1543.12 1213.49 L1543.7 1213.49 L1544.29 1213.49 L1544.88 1213.49 L1545.46 1213.49 L1546.05 1213.49 L1546.64 1213.49 L1547.22 1213.49 L1547.81 1213.49 L1548.4 1213.49 L1548.98 1213.49 L1549.57 1213.49 L1550.15 1213.49 L1550.74 1213.49 L1551.33 1213.49 L1551.91 1213.49 L1552.5 1213.49 L1553.09 1213.49 L1553.67 1213.49 L1554.26 1213.49 L1554.85 1213.49 L1555.43 1213.49 L1556.02 1213.49 L1556.6 1213.49 L1557.19 1213.49 L1557.78 1213.49 L1558.36 1213.49 L1558.95 1213.49 L1559.54 1213.49 L1560.12 1213.49 L1560.71 1213.49 L1561.3 1213.49 L1561.88 1213.49 L1562.47 1213.49 L1563.06 1213.49 L1563.64 1213.49 L1564.23 1213.49 L1564.81 1213.49 L1565.4 1213.49 L1565.99 1213.49 L1566.57 1213.49 L1567.16 1213.49 L1567.75 1213.49 L1568.33 1213.49 L1568.92 1213.49 L1569.51 1213.49 L1570.09 1213.49 L1570.68 1213.49 L1571.27 1213.49 L1571.85 1213.49 L1572.44 1213.49 L1573.02 1213.49 L1573.61 1213.49 L1574.2 1213.49 L1574.78 1213.49 L1575.37 1213.49 L1575.96 1213.49 L1576.54 1213.49 L1577.13 1213.49 L1577.72 1213.49 L1578.3 1213.49 L1578.89 1213.49 L1579.47 1213.49 L1580.06 1213.49 L1580.65 1213.49 L1581.23 1213.49 L1581.82 1213.49 L1582.41 1213.49 L1582.99 1213.49 L1583.58 1213.49 L1584.17 1213.49 L1584.75 1213.49 L1585.34 1213.49 L1585.93 1213.49 L1586.51 1213.49 L1587.1 1213.49 L1587.68 1213.49 L1588.27 1213.49 L1588.86 1213.49 L1589.44 1213.49 L1590.03 1213.49 L1590.62 1213.49 L1591.2 1213.49 L1591.79 1213.49 L1592.38 1213.49 L1592.96 1213.49 L1593.55 1213.49 L1594.14 1213.49 L1594.72 1213.49 L1595.31 1213.49 L1595.89 1213.49 L1596.48 1213.49 L1597.07 1213.49 L1597.65 1213.49 L1598.24 1213.49 L1598.83 1213.49 L1599.41 1213.49 L1600 1213.49 L1600.59 1213.49 L1601.17 1213.49 L1601.76 1213.49 L1602.34 1213.49 L1602.93 1213.49 L1603.52 1213.49 L1604.1 1213.49 L1604.69 1213.49 L1605.28 1213.49 L1605.86 1213.49 L1606.45 1213.49 L1607.04 1213.49 L1607.62 1213.49 L1608.21 1213.49 L1608.8 1213.49 L1609.38 1213.49 L1609.97 1213.49 L1610.55 1213.49 L1611.14 1213.49 L1611.73 1213.49 L1612.31 1213.49 L1612.9 1213.49 L1613.49 1213.49 L1614.07 1213.49 L1614.66 1213.49 L1615.25 1213.49 L1615.83 1213.49 L1616.42 1213.49 L1617.01 1213.49 L1617.59 1213.49 L1618.18 1213.49 L1618.76 1213.49 L1619.35 1213.49 L1619.94 1213.49 L1620.52 1213.49 L1621.11 1213.49 L1621.7 1213.49 L1622.28 1213.49 L1622.87 1213.49 L1623.46 1213.49 L1624.04 1213.49 L1624.63 1213.49 L1625.22 1213.49 L1625.8 1213.49 L1626.39 1213.49 L1626.97 1213.49 L1627.56 1213.49 L1628.15 1213.49 L1628.73 1213.49 L1629.32 1213.49 L1629.91 1213.49 L1630.49 1213.49 L1631.08 1213.49 L1631.67 1213.49 L1632.25 1213.49 L1632.84 1213.49 L1633.42 1213.49 L1634.01 1213.49 L1634.6 1213.49 L1635.18 1213.49 L1635.77 1213.49 L1636.36 1213.49 L1636.94 1213.49 L1637.53 1213.49 L1638.12 1213.49 L1638.7 1213.49 L1639.29 1213.49 L1639.88 1213.49 L1640.46 1213.49 L1641.05 1213.49 L1641.63 1213.49 L1642.22 1213.49 L1642.81 1213.49 L1643.39 1213.49 L1643.98 1213.49 L1644.57 1213.49 L1645.15 1213.49 L1645.74 1213.49 L1646.33 1213.49 L1646.91 1213.49 L1647.5 1213.49 L1648.09 1213.49 L1648.67 1213.49 L1649.26 1213.49 L1649.84 1213.49 L1650.43 1213.49 L1651.02 1213.49 L1651.6 1213.49 L1652.19 1213.49 L1652.78 1213.49 L1653.36 1213.49 L1653.95 1213.49 L1654.54 1213.49 L1655.12 1213.49 L1655.71 1213.49 L1656.29 1213.49 L1656.88 1213.49 L1657.47 1213.49 L1658.05 1213.49 L1658.64 1213.49 L1659.23 1213.49 L1659.81 1213.49 L1660.4 1213.49 L1660.99 1213.49 L1661.57 1213.49 L1662.16 1213.49 L1662.75 1213.49 L1663.33 1213.49 L1663.92 1213.49 L1664.5 1213.49 L1665.09 1213.49 L1665.68 1213.49 L1666.26 1213.49 L1666.85 1213.49 L1667.44 1213.49 L1668.02 1213.49 L1668.61 1213.49 L1669.2 1213.49 L1669.78 1213.49 L1670.37 1213.49 L1670.96 1213.49 L1671.54 1213.49 L1672.13 1213.49 L1672.71 1213.49 L1673.3 1213.49 L1673.89 1213.49 L1674.47 1213.49 L1675.06 1213.49 L1675.65 1213.49 L1676.23 1213.49 L1676.82 1213.49 L1677.41 1213.49 L1677.99 1213.49 L1678.58 1213.49 L1679.17 1213.49 L1679.75 1213.49 L1680.34 1213.49 L1680.92 1213.49 L1681.51 1213.49 L1682.1 1213.49 L1682.68 1213.49 L1683.27 1213.49 L1683.86 1213.49 L1684.44 1213.49 L1685.03 1213.49 L1685.62 1213.49 L1686.2 1213.49 L1686.79 1213.49 L1687.37 1213.49 L1687.96 1213.49 L1688.55 1213.49 L1689.13 1213.49 L1689.72 1213.49 L1690.31 1213.49 L1690.89 1213.49 L1691.48 1213.49 L1692.07 1213.49 L1692.65 1213.49 L1693.24 1213.49 L1693.83 1213.49 L1694.41 1213.49 L1695 1213.49 L1695.58 1213.49 L1696.17 1213.49 L1696.76 1213.49 L1697.34 1213.49 L1697.93 1213.49 L1698.52 1213.49 L1699.1 1213.49 L1699.69 1213.49 L1700.28 1213.49 L1700.86 1213.49 L1701.45 1213.49 L1702.04 1213.49 L1702.62 1213.49 L1703.21 1213.49 L1703.79 1213.49 L1704.38 1213.49 L1704.97 1213.49 L1705.55 1213.49 L1706.14 1213.49 L1706.73 1213.49 L1707.31 1213.49 L1707.9 1213.49 L1708.49 1213.49 L1709.07 1213.49 L1709.66 1213.49 L1710.24 1213.49 L1710.83 1213.49 L1711.42 1213.49 L1712 1213.49 L1712.59 1213.49 L1713.18 1213.49 L1713.76 1213.49 L1714.35 1213.49 L1714.94 1213.49 L1715.52 1213.49 L1716.11 1213.49 L1716.7 1213.49 L1717.28 1213.49 L1717.87 1213.49 L1718.45 1213.49 L1719.04 1213.49 L1719.63 1213.49 L1720.21 1213.49 L1720.8 1213.49 L1721.39 1213.49 L1721.97 1213.49 L1722.56 1213.49 L1723.15 1213.49 L1723.73 1213.49 L1724.32 1213.49 L1724.91 1213.49 L1725.49 1213.49 L1726.08 1213.49 L1726.66 1213.49 L1727.25 1213.49 L1727.84 1213.49 L1728.42 1213.49 L1729.01 1213.49 L1729.6 1213.49 L1730.18 1213.49 L1730.77 1213.49 L1731.36 1213.49 L1731.94 1213.49 L1732.53 1213.49 L1733.11 1213.49 L1733.7 1213.49 L1734.29 1213.49 L1734.87 1213.49 L1735.46 1213.49 L1736.05 1213.49 L1736.63 1213.49 L1737.22 1213.49 L1737.81 1213.49 L1738.39 1213.49 L1738.98 1213.49 L1739.57 1213.49 L1740.15 1213.49 L1740.74 1213.49 L1741.32 1213.49 L1741.91 1213.49 L1742.5 1213.49 L1743.08 1213.49 L1743.67 1213.49 L1744.26 1213.49 L1744.84 1213.49 L1745.43 1213.49 L1746.02 1213.49 L1746.6 1213.49 L1747.19 1213.49 L1747.78 1213.49 L1748.36 1213.49 L1748.95 1213.49 L1749.53 1213.49 L1750.12 1213.49 L1750.71 1213.49 L1751.29 1213.49 L1751.88 1213.49 L1752.47 1213.49 L1753.05 1213.49 L1753.64 1213.49 L1754.23 1213.49 L1754.81 1213.49 L1755.4 1213.49 L1755.99 1213.49 L1756.57 1213.49 L1757.16 1213.49 L1757.74 1213.49 L1758.33 1213.49 L1758.92 1213.49 L1759.5 1213.49 L1760.09 1213.49 L1760.68 1213.49 L1761.26 1213.49 L1761.85 1213.49 L1762.44 1213.49 L1763.02 1213.49 L1763.61 1213.49 L1764.19 1213.49 L1764.78 1213.49 L1765.37 1213.49 L1765.95 1213.49 L1766.54 1213.49 L1767.13 1213.49 L1767.71 1213.49 L1768.3 1213.49 L1768.89 1213.49 L1769.47 1213.49 L1770.06 1213.49 L1770.65 1213.49 L1771.23 1213.49 L1771.82 1213.49 L1772.4 1213.49 L1772.99 1213.49 L1773.58 1213.49 L1774.16 1213.49 L1774.75 1213.49 L1775.34 1213.49 L1775.92 1213.49 L1776.51 1213.49 L1777.1 1213.49 L1777.68 1213.49 L1778.27 1213.49 L1778.86 1213.49 L1779.44 1213.49 L1780.03 1213.49 L1780.61 1213.49 L1781.2 1213.49 L1781.79 1213.49 L1782.37 1213.49 L1782.96 1213.49 L1783.55 1213.49 L1784.13 1213.49 L1784.72 1213.49 L1785.31 1213.49 L1785.89 1213.49 L1786.48 1213.49 L1787.06 1213.49 L1787.65 1213.49 L1788.24 1213.49 L1788.82 1213.49 L1789.41 1213.49 L1790 1213.49 L1790.58 1213.49 L1791.17 1213.49 L1791.76 1213.49 L1792.34 1213.49 L1792.93 1213.49 L1793.52 1213.49 L1794.1 1213.49 L1794.69 1213.49 L1795.27 1213.49 L1795.86 1213.49 L1796.45 1213.49 L1797.03 1213.49 L1797.62 1213.49 L1798.21 1213.49 L1798.79 1213.49 L1799.38 1213.49 L1799.97 1213.49 L1800.55 1213.49 L1801.14 1213.49 L1801.73 1213.49 L1802.31 1213.49 L1802.9 1213.49 L1803.48 1213.49 L1804.07 1213.49 L1804.66 1213.49 L1805.24 1213.49 L1805.83 1213.49 L1806.42 1213.49 L1807 1213.49 L1807.59 1213.49 L1808.18 1213.49 L1808.76 1213.49 L1809.35 1213.49 L1809.94 1213.49 L1810.52 1213.49 L1811.11 1213.49 L1811.69 1213.49 L1812.28 1213.49 L1812.87 1213.49 L1813.45 1213.49 L1814.04 1213.49 L1814.63 1213.49 L1815.21 1213.49 L1815.8 1213.49 L1816.39 1213.49 L1816.97 1213.49 L1817.56 1213.49 L1818.14 1213.49 L1818.73 1213.49 L1819.32 1213.49 L1819.9 1213.49 L1820.49 1213.49 L1821.08 1213.49 L1821.66 1213.49 L1822.25 1213.49 L1822.84 1213.49 L1823.42 1213.49 L1824.01 1213.49 L1824.6 1213.49 L1825.18 1213.49 L1825.77 1213.49 L1826.35 1213.49 L1826.94 1213.49 L1827.53 1213.49 L1828.11 1213.49 L1828.7 1213.49 L1829.29 1213.49 L1829.87 1213.49 L1830.46 1213.49 L1831.05 1213.49 L1831.63 1213.49 L1832.22 1213.49 L1832.81 1213.49 L1833.39 1213.49 L1833.98 1213.49 L1834.56 1213.49 L1835.15 1213.49 L1835.74 1213.49 L1836.32 1213.49 L1836.91 1213.49 L1837.5 1213.49 L1838.08 1213.49 L1838.67 1213.49 L1839.26 1213.49 L1839.84 1213.49 L1840.43 1213.49 L1841.01 1213.49 L1841.6 1213.49 L1842.19 1213.49 L1842.77 1213.49 L1843.36 1213.49 L1843.95 1213.49 L1844.53 1213.49 L1845.12 1213.49 L1845.71 1213.49 L1846.29 1213.49 L1846.88 1213.49 L1847.47 1213.49 L1848.05 1213.49 L1848.64 1213.49 L1849.22 1213.49 L1849.81 1213.49 L1850.4 1213.49 L1850.98 1213.49 L1851.57 1213.49 L1852.16 1213.49 L1852.74 1213.49 L1853.33 1213.49 L1853.92 1213.49 L1854.5 1213.49 L1855.09 1213.49 L1855.68 1213.49 L1856.26 1213.49 L1856.85 1213.49 L1857.43 1213.49 L1858.02 1213.49 L1858.61 1213.49 L1859.19 1213.49 L1859.78 1213.49 L1860.37 1213.49 L1860.95 1213.49 L1861.54 1213.49 L1862.13 1213.49 L1862.71 1213.49 L1863.3 1213.49 L1863.88 1213.49 L1864.47 1213.49 L1865.06 1213.49 L1865.64 1213.49 L1866.23 1213.49 L1866.82 1213.49 L1867.4 1213.49 L1867.99 1213.49 L1868.58 1213.49 L1869.16 1213.49 L1869.75 1213.49 L1870.34 1213.49 L1870.92 1213.49 L1871.51 1213.49 L1872.09 1213.49 L1872.68 1213.49 L1873.27 1213.49 L1873.85 1213.49 L1874.44 1213.49 L1875.03 1213.49 L1875.61 1213.49 L1876.2 1213.49 L1876.79 1213.49 L1877.37 1213.49 L1877.96 1213.49 L1878.55 1213.49 L1879.13 1213.49 L1879.72 1213.49 L1880.3 1213.49 L1880.89 1213.49 L1881.48 1213.49 L1882.06 1213.49 L1882.65 1213.49 L1883.24 1213.49 L1883.82 1213.49 L1884.41 1213.49 L1885 1213.49 L1885.58 1213.49 L1886.17 1213.49 L1886.76 1213.49 L1887.34 1213.49 L1887.93 1213.49 L1888.51 1213.49 L1889.1 1213.49 L1889.69 1213.49 L1890.27 1213.49 L1890.86 1213.49 L1891.45 1213.49 L1892.03 1213.49 L1892.62 1213.49 L1893.21 1213.49 L1893.79 1213.49 L1894.38 1213.49 L1894.96 1213.49 L1895.55 1213.49 L1896.14 1213.49 L1896.72 1213.49 L1897.31 1213.49 L1897.9 1213.49 L1898.48 1213.49 L1899.07 1213.49 L1899.66 1213.49 L1900.24 1213.49 L1900.83 1213.49 L1901.42 1213.49 L1902 1213.49 L1902.59 1213.49 L1903.17 1213.49 L1903.76 1213.49 L1904.35 1213.49 L1904.93 1213.49 L1905.52 1213.49 L1906.11 1213.49 L1906.69 1213.49 L1907.28 1213.49 L1907.87 1213.49 L1908.45 1213.49 L1909.04 1213.49 L1909.63 1213.49 L1910.21 1213.49 L1910.8 1213.49 L1911.38 1213.49 L1911.97 1213.49 L1912.56 1213.49 L1913.14 1213.49 L1913.73 1213.49 L1914.32 1213.49 L1914.9 1213.49 L1915.49 1213.49 L1916.08 1213.49 L1916.66 1213.49 L1917.25 1213.49 L1917.83 1213.49 L1918.42 1213.49 L1919.01 1213.49 L1919.59 1213.49 L1920.18 1213.49 L1920.77 1213.49 L1921.35 1213.49 L1921.94 1213.49 L1922.53 1213.49 L1923.11 1213.49 L1923.7 1213.49 L1924.29 1213.49 L1924.87 1213.49 L1925.46 1213.49 L1926.04 1213.49 L1926.63 1213.49 L1927.22 1213.49 L1927.8 1213.49 L1928.39 1213.49 L1928.98 1213.49 L1929.56 1213.49 L1930.15 1213.49 L1930.74 1213.49 L1931.32 1213.49 L1931.91 1213.49 L1932.5 1213.49 L1933.08 1213.49 L1933.67 1213.49 L1934.25 1213.49 L1934.84 1213.49 L1935.43 1213.49 L1936.01 1213.49 L1936.6 1213.49 L1937.19 1213.49 L1937.77 1213.49 L1938.36 1213.49 L1938.95 1213.49 L1939.53 1213.49 L1940.12 1213.49 L1940.71 1213.49 L1941.29 1213.49 L1941.88 1213.49 L1942.46 1213.49 L1943.05 1213.49 L1943.64 1213.49 L1944.22 1213.49 L1944.81 1213.49 L1945.4 1213.49 L1945.98 1213.49 L1946.57 1213.49 L1947.16 1213.49 L1947.74 1213.49 L1948.33 1213.49 L1948.91 1213.49 L1949.5 1213.49 L1950.09 1213.49 L1950.67 1213.49 L1951.26 1213.49 L1951.85 1213.49 L1952.43 1213.49 L1953.02 1213.49 L1953.61 1213.49 L1954.19 1213.49 L1954.78 1213.49 L1955.37 1213.49 L1955.95 1213.49 L1956.54 1213.49 L1957.12 1213.49 L1957.71 1213.49 L1958.3 1213.49 L1958.88 1213.49 L1959.47 1213.49 L1960.06 1213.49 L1960.64 1213.49 L1961.23 1213.49 L1961.82 1213.49 L1962.4 1213.49 L1962.99 1213.49 L1963.58 1213.49 L1964.16 1213.49 L1964.75 1213.49 L1965.33 1213.49 L1965.92 1213.49 L1966.51 1213.49 L1967.09 1213.49 L1967.68 1213.49 L1968.27 1213.49 L1968.85 1213.49 L1969.44 1213.49 L1970.03 1213.49 L1970.61 1213.49 L1971.2 1213.49 L1971.78 1213.49 L1972.37 1213.49 L1972.96 1213.49 L1973.54 1213.49 L1974.13 1213.49 L1974.72 1213.49 L1975.3 1213.49 L1975.89 1213.49 L1976.48 1213.49 L1977.06 1213.49 L1977.65 1213.49 L1978.24 1213.49 L1978.82 1213.49 L1979.41 1213.49 L1979.99 1213.49 L1980.58 1213.49 L1981.17 1213.49 L1981.75 1213.49 L1982.34 1213.49 L1982.93 1213.49 L1983.51 1213.49 L1984.1 1213.49 L1984.69 1213.49 L1985.27 1213.49 L1985.86 1213.49 L1986.45 1213.49 L1987.03 1213.49 L1987.62 1213.49 L1988.2 1213.49 L1988.79 1213.49 L1989.38 1213.49 L1989.96 1213.49 L1990.55 1213.49 L1991.14 1213.49 L1991.72 1213.49 L1992.31 1213.49 L1992.9 1213.49 L1993.48 1213.49 L1994.07 1213.49 L1994.65 1213.49 L1995.24 1213.49 L1995.83 1213.49 L1996.41 1213.49 L1997 1213.49 L1997.59 1213.49 L1998.17 1213.49 L1998.76 1213.49 L1999.35 1213.49 L1999.93 1213.49 L2000.52 1213.49 L2001.11 1213.49 L2001.69 1213.49 L2002.28 1213.49 L2002.86 1213.49 L2003.45 1213.49 L2004.04 1213.49 L2004.62 1213.49 L2005.21 1213.49 L2005.8 1213.49 L2006.38 1213.49 L2006.97 1213.49 L2007.56 1213.49 L2008.14 1213.49 L2008.73 1213.49 L2009.32 1213.49 L2009.9 1213.49 L2010.49 1213.49 L2011.07 1213.49 L2011.66 1213.49 L2012.25 1213.49 L2012.83 1213.49 L2013.42 1213.49 L2014.01 1213.49 L2014.59 1213.49 L2015.18 1213.49 L2015.77 1213.49 L2016.35 1213.49 L2016.94 1213.49 L2017.53 1213.49 L2018.11 1213.49 L2018.7 1213.49 L2019.28 1213.49 L2019.87 1213.49 L2020.46 1213.49 L2021.04 1213.49 L2021.63 1213.49 L2022.22 1213.49 L2022.8 1213.49 L2023.39 1213.49 L2023.98 1213.49 L2024.56 1213.49 L2025.15 1213.49 L2025.73 1213.49 L2026.32 1213.49 L2026.91 1213.49 L2027.49 1213.49 L2028.08 1213.49 L2028.67 1213.49 L2029.25 1213.49 L2029.84 1213.49 L2030.43 1213.49 L2031.01 1213.49 L2031.6 1213.49 L2032.19 1213.49 L2032.77 1213.49 L2033.36 1213.49 L2033.94 1213.49 L2034.53 1213.49 L2035.12 1213.49 L2035.7 1213.49 L2036.29 1213.49 L2036.88 1213.49 L2037.46 1213.49 L2038.05 1213.49 L2038.64 1213.49 L2039.22 1213.49 L2039.81 1213.49 L2040.4 1213.49 L2040.98 1213.49 L2041.57 1213.49 L2042.15 1213.49 L2042.74 1213.49 L2043.33 1213.49 L2043.91 1213.49 L2044.5 1213.49 L2045.09 1213.49 L2045.67 1213.49 L2046.26 1213.49 L2046.85 1213.49 L2047.43 1213.49 L2048.02 1213.49 L2048.6 1213.49 L2049.19 1213.49 L2049.78 1213.49 L2050.36 1213.49 L2050.95 1213.49 L2051.54 1213.49 L2052.12 1213.49 L2052.71 1213.49 L2053.3 1213.49 L2053.88 1213.49 L2054.47 1213.49 L2055.06 1213.49 L2055.64 1213.49 L2056.23 1213.49 L2056.81 1213.49 L2057.4 1213.49 L2057.99 1213.49 L2058.57 1213.49 L2059.16 1213.49 L2059.75 1213.49 L2060.33 1213.49 L2060.92 1213.49 L2061.51 1213.49 L2062.09 1213.49 L2062.68 1213.49 L2063.27 1213.49 L2063.85 1213.49 L2064.44 1213.49 L2065.02 1213.49 L2065.61 1213.49 L2066.2 1213.49 L2066.78 1213.49 L2067.37 1213.49 L2067.96 1213.49 L2068.54 1213.49 L2069.13 1213.49 L2069.72 1213.49 L2070.3 1213.49 L2070.89 1213.49 L2071.48 1213.49 L2072.06 1213.49 L2072.65 1213.49 L2073.23 1213.49 L2073.82 1213.49 L2074.41 1213.49 L2074.99 1213.49 L2075.58 1213.49 L2076.17 1213.49 L2076.75 1213.49 L2077.34 1213.49 L2077.93 1213.49 L2078.51 1213.49 L2079.1 1213.49 L2079.68 1213.49 L2080.27 1213.49 L2080.86 1213.49 L2081.44 1213.49 L2082.03 1213.49 L2082.62 1213.49 L2083.2 1213.49 L2083.79 1213.49 L2084.38 1213.49 L2084.96 1213.49 L2085.55 1213.49 L2086.14 1213.49 L2086.72 1213.49 L2087.31 1213.49 L2087.89 1213.49 L2088.48 1213.49 L2089.07 1213.49 L2089.65 1213.49 L2090.24 1213.49 L2090.83 1213.49 L2091.41 1213.49 L2092 1213.49 L2092.59 1213.49 L2093.17 1213.49 L2093.76 1213.49 L2094.35 1213.49 L2094.93 1213.49 L2095.52 1213.49 L2096.1 1213.49 L2096.69 1213.49 L2097.28 1213.49 L2097.86 1213.49 L2098.45 1213.49 L2099.04 1213.49 L2099.62 1213.49 L2100.21 1213.49 L2100.8 1213.49 L2101.38 1213.49 L2101.97 1213.49 L2102.55 1213.49 L2103.14 1213.49 L2103.73 1213.49 L2104.31 1213.49 L2104.9 1213.49 L2105.49 1213.49 L2106.07 1213.49 L2106.66 1213.49 L2107.25 1213.49 L2107.83 1213.49 L2108.42 1213.49 L2109.01 1213.49 L2109.59 1213.49 L2110.18 1213.49 L2110.76 1213.49 L2111.35 1213.49 L2111.94 1213.49 L2112.52 1213.49 L2113.11 1213.49 L2113.7 1213.49 L2114.28 1213.49 L2114.87 1213.49 L2115.46 1213.49 L2116.04 1213.49 L2116.63 1213.49 L2117.22 1213.49 L2117.8 1213.49 L2118.39 1213.49 L2118.97 1213.49 L2119.56 1213.49 L2120.15 1213.49 L2120.73 1213.49 L2121.32 1213.49 L2121.91 1213.49 L2122.49 1213.49 L2123.08 1213.49 L2123.67 1213.49 L2124.25 1213.49 L2124.84 1213.49 L2125.42 1213.49 L2126.01 1213.49 L2126.6 1213.49 L2127.18 1213.49 L2127.77 1213.49 L2128.36 1213.49 L2128.94 1213.49 L2129.53 1213.49 L2130.12 1213.49 L2130.7 1213.49 L2131.29 1213.49 L2131.88 1213.49 L2132.46 1213.49 L2133.05 1213.49 L2133.63 1213.49 L2134.22 1213.49 L2134.81 1213.49 L2135.39 1213.49 L2135.98 1213.49 L2136.57 1213.49 L2137.15 1213.49 L2137.74 1213.49 L2138.33 1213.49 L2138.91 1213.49 L2139.5 1213.49 L2140.09 1213.49 L2140.67 1213.49 L2141.26 1213.49 L2141.84 1213.49 L2142.43 1213.49 L2143.02 1213.49 L2143.6 1213.49 L2144.19 1213.49 L2144.78 1213.49 L2145.36 1213.49 L2145.95 1213.49 L2146.54 1213.49 L2147.12 1213.49 L2147.71 1213.49 L2148.3 1213.49 L2148.88 1213.49 L2149.47 1213.49 L2150.05 1213.49 L2150.64 1213.49 L2151.23 1213.49 L2151.81 1213.49 L2152.4 1213.49 L2152.99 1213.49 L2153.57 1213.49 L2154.16 1213.49 L2154.75 1213.49 L2155.33 1213.49 L2155.92 1213.49 L2156.5 1213.49 L2157.09 1213.49 L2157.68 1213.49 L2158.26 1213.49 L2158.26 1212.87 L2157.68 1212.87 L2157.09 1212.87 L2156.5 1212.87 L2155.92 1212.87 L2155.33 1212.87 L2154.75 1212.87 L2154.16 1212.87 L2153.57 1212.87 L2152.99 1212.87 L2152.4 1212.87 L2151.81 1212.87 L2151.23 1212.87 L2150.64 1212.87 L2150.05 1212.87 L2149.47 1212.87 L2148.88 1212.87 L2148.3 1212.87 L2147.71 1212.87 L2147.12 1212.87 L2146.54 1212.87 L2145.95 1212.87 L2145.36 1212.87 L2144.78 1212.87 L2144.19 1212.87 L2143.6 1212.87 L2143.02 1212.87 L2142.43 1212.87 L2141.84 1212.87 L2141.26 1212.87 L2140.67 1212.87 L2140.09 1212.87 L2139.5 1212.87 L2138.91 1212.87 L2138.33 1212.87 L2137.74 1212.87 L2137.15 1212.87 L2136.57 1212.87 L2135.98 1212.87 L2135.39 1212.87 L2134.81 1212.87 L2134.22 1212.87 L2133.63 1212.87 L2133.05 1212.87 L2132.46 1212.87 L2131.88 1212.87 L2131.29 1212.87 L2130.7 1212.87 L2130.12 1212.87 L2129.53 1212.87 L2128.94 1212.87 L2128.36 1212.87 L2127.77 1212.87 L2127.18 1212.87 L2126.6 1212.87 L2126.01 1212.87 L2125.42 1212.87 L2124.84 1212.87 L2124.25 1212.87 L2123.67 1212.87 L2123.08 1212.87 L2122.49 1212.87 L2121.91 1212.87 L2121.32 1212.87 L2120.73 1212.87 L2120.15 1212.87 L2119.56 1212.87 L2118.97 1212.87 L2118.39 1212.87 L2117.8 1212.87 L2117.22 1212.87 L2116.63 1212.87 L2116.04 1212.87 L2115.46 1212.87 L2114.87 1212.87 L2114.28 1212.87 L2113.7 1212.87 L2113.11 1212.87 L2112.52 1212.87 L2111.94 1212.87 L2111.35 1212.87 L2110.76 1212.87 L2110.18 1212.87 L2109.59 1212.87 L2109.01 1212.87 L2108.42 1212.87 L2107.83 1212.87 L2107.25 1212.87 L2106.66 1212.87 L2106.07 1212.87 L2105.49 1212.87 L2104.9 1212.87 L2104.31 1212.87 L2103.73 1212.87 L2103.14 1212.87 L2102.55 1212.87 L2101.97 1212.87 L2101.38 1212.87 L2100.8 1212.87 L2100.21 1212.87 L2099.62 1212.87 L2099.04 1212.87 L2098.45 1212.87 L2097.86 1212.87 L2097.28 1212.87 L2096.69 1212.87 L2096.1 1212.87 L2095.52 1212.87 L2094.93 1212.87 L2094.35 1212.87 L2093.76 1212.87 L2093.17 1212.87 L2092.59 1212.87 L2092 1212.87 L2091.41 1212.87 L2090.83 1212.87 L2090.24 1212.87 L2089.65 1212.87 L2089.07 1212.87 L2088.48 1212.87 L2087.89 1212.87 L2087.31 1212.87 L2086.72 1212.87 L2086.14 1212.87 L2085.55 1212.87 L2084.96 1212.87 L2084.38 1212.87 L2083.79 1212.87 L2083.2 1212.87 L2082.62 1212.87 L2082.03 1212.87 L2081.44 1212.87 L2080.86 1212.87 L2080.27 1212.87 L2079.68 1212.87 L2079.1 1212.87 L2078.51 1212.87 L2077.93 1212.87 L2077.34 1212.87 L2076.75 1212.87 L2076.17 1212.87 L2075.58 1212.87 L2074.99 1212.87 L2074.41 1212.87 L2073.82 1212.87 L2073.23 1212.87 L2072.65 1212.87 L2072.06 1212.87 L2071.48 1212.87 L2070.89 1212.87 L2070.3 1212.87 L2069.72 1212.87 L2069.13 1212.87 L2068.54 1212.87 L2067.96 1212.87 L2067.37 1212.87 L2066.78 1212.87 L2066.2 1212.87 L2065.61 1212.87 L2065.02 1212.87 L2064.44 1212.87 L2063.85 1212.87 L2063.27 1212.87 L2062.68 1212.87 L2062.09 1212.87 L2061.51 1212.87 L2060.92 1212.87 L2060.33 1212.87 L2059.75 1212.87 L2059.16 1212.87 L2058.57 1212.87 L2057.99 1212.87 L2057.4 1212.87 L2056.81 1212.87 L2056.23 1212.87 L2055.64 1212.87 L2055.06 1212.87 L2054.47 1212.87 L2053.88 1212.87 L2053.3 1212.87 L2052.71 1212.87 L2052.12 1212.87 L2051.54 1212.87 L2050.95 1212.87 L2050.36 1212.87 L2049.78 1212.87 L2049.19 1212.87 L2048.6 1212.87 L2048.02 1212.87 L2047.43 1212.87 L2046.85 1212.87 L2046.26 1212.87 L2045.67 1212.87 L2045.09 1212.87 L2044.5 1212.87 L2043.91 1212.87 L2043.33 1212.87 L2042.74 1212.87 L2042.15 1212.87 L2041.57 1212.87 L2040.98 1212.87 L2040.4 1212.87 L2039.81 1212.87 L2039.22 1212.87 L2038.64 1212.87 L2038.05 1212.87 L2037.46 1212.87 L2036.88 1212.87 L2036.29 1212.87 L2035.7 1212.87 L2035.12 1212.87 L2034.53 1212.87 L2033.94 1212.87 L2033.36 1212.87 L2032.77 1212.87 L2032.19 1212.87 L2031.6 1212.87 L2031.01 1212.87 L2030.43 1212.87 L2029.84 1212.87 L2029.25 1212.87 L2028.67 1212.87 L2028.08 1212.87 L2027.49 1212.87 L2026.91 1212.87 L2026.32 1212.87 L2025.73 1212.87 L2025.15 1212.87 L2024.56 1212.87 L2023.98 1212.87 L2023.39 1212.87 L2022.8 1212.87 L2022.22 1212.87 L2021.63 1212.87 L2021.04 1212.87 L2020.46 1212.87 L2019.87 1212.87 L2019.28 1212.87 L2018.7 1212.87 L2018.11 1212.87 L2017.53 1212.87 L2016.94 1212.87 L2016.35 1212.87 L2015.77 1212.87 L2015.18 1212.87 L2014.59 1212.87 L2014.01 1212.87 L2013.42 1212.87 L2012.83 1212.87 L2012.25 1212.87 L2011.66 1212.87 L2011.07 1212.87 L2010.49 1212.87 L2009.9 1212.87 L2009.32 1212.87 L2008.73 1212.87 L2008.14 1212.87 L2007.56 1212.87 L2006.97 1212.87 L2006.38 1212.87 L2005.8 1212.87 L2005.21 1212.87 L2004.62 1212.87 L2004.04 1212.87 L2003.45 1212.87 L2002.86 1212.87 L2002.28 1212.87 L2001.69 1212.87 L2001.11 1212.87 L2000.52 1212.87 L1999.93 1212.87 L1999.35 1212.87 L1998.76 1212.87 L1998.17 1212.87 L1997.59 1212.87 L1997 1212.87 L1996.41 1212.87 L1995.83 1212.87 L1995.24 1212.87 L1994.65 1212.87 L1994.07 1212.87 L1993.48 1212.87 L1992.9 1212.87 L1992.31 1212.87 L1991.72 1212.87 L1991.14 1212.87 L1990.55 1212.87 L1989.96 1212.87 L1989.38 1212.87 L1988.79 1212.87 L1988.2 1212.87 L1987.62 1212.87 L1987.03 1212.87 L1986.45 1212.87 L1985.86 1212.87 L1985.27 1212.87 L1984.69 1212.87 L1984.1 1212.87 L1983.51 1212.87 L1982.93 1212.87 L1982.34 1212.87 L1981.75 1212.87 L1981.17 1212.87 L1980.58 1212.87 L1979.99 1212.87 L1979.41 1212.87 L1978.82 1212.87 L1978.24 1212.87 L1977.65 1212.87 L1977.06 1212.87 L1976.48 1212.87 L1975.89 1212.87 L1975.3 1212.87 L1974.72 1212.87 L1974.13 1212.87 L1973.54 1212.87 L1972.96 1212.87 L1972.37 1212.87 L1971.78 1212.87 L1971.2 1212.87 L1970.61 1212.87 L1970.03 1212.87 L1969.44 1212.87 L1968.85 1212.87 L1968.27 1212.87 L1967.68 1212.87 L1967.09 1212.87 L1966.51 1212.87 L1965.92 1212.87 L1965.33 1212.87 L1964.75 1212.87 L1964.16 1212.87 L1963.58 1212.87 L1962.99 1212.87 L1962.4 1212.87 L1961.82 1212.87 L1961.23 1212.87 L1960.64 1212.87 L1960.06 1212.87 L1959.47 1212.87 L1958.88 1212.87 L1958.3 1212.87 L1957.71 1212.87 L1957.12 1212.87 L1956.54 1212.87 L1955.95 1212.87 L1955.37 1212.87 L1954.78 1212.87 L1954.19 1212.87 L1953.61 1212.87 L1953.02 1212.87 L1952.43 1212.87 L1951.85 1212.87 L1951.26 1212.87 L1950.67 1212.87 L1950.09 1212.87 L1949.5 1212.87 L1948.91 1212.87 L1948.33 1212.87 L1947.74 1212.87 L1947.16 1212.87 L1946.57 1212.87 L1945.98 1212.87 L1945.4 1212.87 L1944.81 1212.87 L1944.22 1212.87 L1943.64 1212.87 L1943.05 1212.87 L1942.46 1212.87 L1941.88 1212.87 L1941.29 1212.87 L1940.71 1212.87 L1940.12 1212.87 L1939.53 1212.87 L1938.95 1212.87 L1938.36 1212.87 L1937.77 1212.87 L1937.19 1212.87 L1936.6 1212.87 L1936.01 1212.87 L1935.43 1212.87 L1934.84 1212.87 L1934.25 1212.87 L1933.67 1212.87 L1933.08 1212.87 L1932.5 1212.87 L1931.91 1212.87 L1931.32 1212.87 L1930.74 1212.87 L1930.15 1212.87 L1929.56 1212.87 L1928.98 1212.87 L1928.39 1212.87 L1927.8 1212.87 L1927.22 1212.87 L1926.63 1212.87 L1926.04 1212.87 L1925.46 1212.87 L1924.87 1212.87 L1924.29 1212.87 L1923.7 1212.87 L1923.11 1212.87 L1922.53 1212.87 L1921.94 1212.87 L1921.35 1212.87 L1920.77 1212.87 L1920.18 1212.87 L1919.59 1212.87 L1919.01 1212.87 L1918.42 1212.87 L1917.83 1212.87 L1917.25 1212.87 L1916.66 1212.87 L1916.08 1212.87 L1915.49 1212.87 L1914.9 1212.87 L1914.32 1212.87 L1913.73 1212.87 L1913.14 1212.87 L1912.56 1212.87 L1911.97 1212.87 L1911.38 1212.87 L1910.8 1212.87 L1910.21 1212.87 L1909.63 1212.87 L1909.04 1212.87 L1908.45 1212.87 L1907.87 1212.87 L1907.28 1212.87 L1906.69 1212.87 L1906.11 1212.87 L1905.52 1212.87 L1904.93 1212.87 L1904.35 1212.87 L1903.76 1212.87 L1903.17 1212.87 L1902.59 1212.87 L1902 1212.87 L1901.42 1212.87 L1900.83 1212.87 L1900.24 1212.87 L1899.66 1212.87 L1899.07 1212.87 L1898.48 1212.87 L1897.9 1212.87 L1897.31 1212.87 L1896.72 1212.87 L1896.14 1212.87 L1895.55 1212.87 L1894.96 1212.87 L1894.38 1212.87 L1893.79 1212.87 L1893.21 1212.87 L1892.62 1212.87 L1892.03 1212.87 L1891.45 1212.87 L1890.86 1212.87 L1890.27 1212.87 L1889.69 1212.87 L1889.1 1212.87 L1888.51 1212.87 L1887.93 1212.87 L1887.34 1212.87 L1886.76 1212.87 L1886.17 1212.87 L1885.58 1212.87 L1885 1212.87 L1884.41 1212.87 L1883.82 1212.87 L1883.24 1212.87 L1882.65 1212.87 L1882.06 1212.87 L1881.48 1212.87 L1880.89 1212.87 L1880.3 1212.87 L1879.72 1212.87 L1879.13 1212.87 L1878.55 1212.87 L1877.96 1212.87 L1877.37 1212.87 L1876.79 1212.87 L1876.2 1212.87 L1875.61 1212.87 L1875.03 1212.87 L1874.44 1212.87 L1873.85 1212.87 L1873.27 1212.87 L1872.68 1212.87 L1872.09 1212.87 L1871.51 1212.87 L1870.92 1212.87 L1870.34 1212.87 L1869.75 1212.87 L1869.16 1212.87 L1868.58 1212.87 L1867.99 1212.87 L1867.4 1212.87 L1866.82 1212.87 L1866.23 1212.87 L1865.64 1212.87 L1865.06 1212.87 L1864.47 1212.87 L1863.88 1212.87 L1863.3 1212.87 L1862.71 1212.87 L1862.13 1212.87 L1861.54 1212.87 L1860.95 1212.87 L1860.37 1212.87 L1859.78 1212.87 L1859.19 1212.87 L1858.61 1212.87 L1858.02 1212.87 L1857.43 1212.87 L1856.85 1212.87 L1856.26 1212.87 L1855.68 1212.87 L1855.09 1212.87 L1854.5 1212.87 L1853.92 1212.87 L1853.33 1212.87 L1852.74 1212.87 L1852.16 1212.87 L1851.57 1212.87 L1850.98 1212.87 L1850.4 1212.87 L1849.81 1212.87 L1849.22 1212.87 L1848.64 1212.87 L1848.05 1212.87 L1847.47 1212.87 L1846.88 1212.87 L1846.29 1212.87 L1845.71 1212.87 L1845.12 1212.87 L1844.53 1212.87 L1843.95 1212.87 L1843.36 1212.87 L1842.77 1212.87 L1842.19 1212.87 L1841.6 1212.87 L1841.01 1212.87 L1840.43 1212.87 L1839.84 1212.87 L1839.26 1212.87 L1838.67 1212.87 L1838.08 1212.87 L1837.5 1212.87 L1836.91 1212.87 L1836.32 1212.87 L1835.74 1212.87 L1835.15 1212.87 L1834.56 1212.87 L1833.98 1212.87 L1833.39 1212.87 L1832.81 1212.87 L1832.22 1212.87 L1831.63 1212.87 L1831.05 1212.87 L1830.46 1212.87 L1829.87 1212.87 L1829.29 1212.87 L1828.7 1212.87 L1828.11 1212.87 L1827.53 1212.87 L1826.94 1212.87 L1826.35 1212.87 L1825.77 1212.87 L1825.18 1212.87 L1824.6 1212.87 L1824.01 1212.87 L1823.42 1212.87 L1822.84 1212.87 L1822.25 1212.87 L1821.66 1212.87 L1821.08 1212.87 L1820.49 1212.87 L1819.9 1212.87 L1819.32 1212.87 L1818.73 1212.87 L1818.14 1212.87 L1817.56 1212.87 L1816.97 1212.87 L1816.39 1212.87 L1815.8 1212.87 L1815.21 1212.87 L1814.63 1212.87 L1814.04 1212.87 L1813.45 1212.87 L1812.87 1212.87 L1812.28 1212.87 L1811.69 1212.87 L1811.11 1212.87 L1810.52 1212.87 L1809.94 1212.87 L1809.35 1212.87 L1808.76 1212.87 L1808.18 1212.87 L1807.59 1212.87 L1807 1212.87 L1806.42 1212.87 L1805.83 1212.87 L1805.24 1212.87 L1804.66 1212.87 L1804.07 1212.87 L1803.48 1212.87 L1802.9 1212.87 L1802.31 1212.87 L1801.73 1212.87 L1801.14 1212.87 L1800.55 1212.87 L1799.97 1212.87 L1799.38 1212.87 L1798.79 1212.87 L1798.21 1212.87 L1797.62 1212.87 L1797.03 1212.87 L1796.45 1212.87 L1795.86 1212.87 L1795.27 1212.87 L1794.69 1212.87 L1794.1 1212.87 L1793.52 1212.87 L1792.93 1212.87 L1792.34 1212.87 L1791.76 1212.87 L1791.17 1212.87 L1790.58 1212.87 L1790 1212.87 L1789.41 1212.87 L1788.82 1212.87 L1788.24 1212.87 L1787.65 1212.87 L1787.06 1212.87 L1786.48 1212.87 L1785.89 1212.87 L1785.31 1212.87 L1784.72 1212.87 L1784.13 1212.87 L1783.55 1212.87 L1782.96 1212.87 L1782.37 1212.87 L1781.79 1212.87 L1781.2 1212.87 L1780.61 1212.87 L1780.03 1212.87 L1779.44 1212.87 L1778.86 1212.87 L1778.27 1212.87 L1777.68 1212.87 L1777.1 1212.87 L1776.51 1212.87 L1775.92 1212.87 L1775.34 1212.87 L1774.75 1212.87 L1774.16 1212.87 L1773.58 1212.87 L1772.99 1212.87 L1772.4 1212.87 L1771.82 1212.87 L1771.23 1212.87 L1770.65 1212.87 L1770.06 1212.87 L1769.47 1212.87 L1768.89 1212.87 L1768.3 1212.87 L1767.71 1212.87 L1767.13 1212.87 L1766.54 1212.87 L1765.95 1212.87 L1765.37 1212.87 L1764.78 1212.87 L1764.19 1212.87 L1763.61 1212.87 L1763.02 1212.87 L1762.44 1212.87 L1761.85 1212.87 L1761.26 1212.87 L1760.68 1212.87 L1760.09 1212.87 L1759.5 1212.87 L1758.92 1212.87 L1758.33 1212.87 L1757.74 1212.87 L1757.16 1212.87 L1756.57 1212.87 L1755.99 1212.87 L1755.4 1212.87 L1754.81 1212.87 L1754.23 1212.87 L1753.64 1212.87 L1753.05 1212.87 L1752.47 1212.87 L1751.88 1212.87 L1751.29 1212.87 L1750.71 1212.87 L1750.12 1212.87 L1749.53 1212.87 L1748.95 1212.87 L1748.36 1212.87 L1747.78 1212.87 L1747.19 1212.87 L1746.6 1212.87 L1746.02 1212.87 L1745.43 1212.87 L1744.84 1212.87 L1744.26 1212.87 L1743.67 1212.87 L1743.08 1212.87 L1742.5 1212.87 L1741.91 1212.87 L1741.32 1212.87 L1740.74 1212.87 L1740.15 1212.87 L1739.57 1212.87 L1738.98 1212.87 L1738.39 1212.87 L1737.81 1212.87 L1737.22 1212.87 L1736.63 1212.87 L1736.05 1212.87 L1735.46 1212.87 L1734.87 1212.87 L1734.29 1212.87 L1733.7 1212.87 L1733.11 1212.87 L1732.53 1212.87 L1731.94 1212.87 L1731.36 1212.87 L1730.77 1212.87 L1730.18 1212.87 L1729.6 1212.87 L1729.01 1212.87 L1728.42 1212.87 L1727.84 1212.87 L1727.25 1212.87 L1726.66 1212.87 L1726.08 1212.87 L1725.49 1212.87 L1724.91 1212.87 L1724.32 1212.87 L1723.73 1212.87 L1723.15 1212.87 L1722.56 1212.87 L1721.97 1212.87 L1721.39 1212.87 L1720.8 1212.87 L1720.21 1212.87 L1719.63 1212.87 L1719.04 1212.87 L1718.45 1212.87 L1717.87 1212.87 L1717.28 1212.87 L1716.7 1212.87 L1716.11 1212.87 L1715.52 1212.87 L1714.94 1212.87 L1714.35 1212.87 L1713.76 1212.87 L1713.18 1212.87 L1712.59 1212.87 L1712 1212.87 L1711.42 1212.87 L1710.83 1212.87 L1710.24 1212.87 L1709.66 1212.87 L1709.07 1212.87 L1708.49 1212.87 L1707.9 1212.87 L1707.31 1212.87 L1706.73 1212.87 L1706.14 1212.87 L1705.55 1212.87 L1704.97 1212.87 L1704.38 1212.87 L1703.79 1212.87 L1703.21 1212.87 L1702.62 1212.87 L1702.04 1212.87 L1701.45 1212.87 L1700.86 1212.87 L1700.28 1212.87 L1699.69 1212.87 L1699.1 1212.87 L1698.52 1212.87 L1697.93 1212.87 L1697.34 1212.87 L1696.76 1212.87 L1696.17 1212.87 L1695.58 1212.87 L1695 1212.87 L1694.41 1212.87 L1693.83 1212.87 L1693.24 1212.87 L1692.65 1212.87 L1692.07 1212.87 L1691.48 1212.87 L1690.89 1212.87 L1690.31 1212.87 L1689.72 1212.87 L1689.13 1212.87 L1688.55 1212.87 L1687.96 1212.87 L1687.37 1212.87 L1686.79 1212.87 L1686.2 1212.87 L1685.62 1212.87 L1685.03 1212.87 L1684.44 1212.87 L1683.86 1212.87 L1683.27 1212.87 L1682.68 1212.87 L1682.1 1212.87 L1681.51 1212.87 L1680.92 1212.87 L1680.34 1212.87 L1679.75 1212.87 L1679.17 1212.87 L1678.58 1212.87 L1677.99 1212.87 L1677.41 1212.87 L1676.82 1212.87 L1676.23 1212.87 L1675.65 1212.87 L1675.06 1212.87 L1674.47 1212.87 L1673.89 1212.87 L1673.3 1212.87 L1672.71 1212.87 L1672.13 1212.87 L1671.54 1212.87 L1670.96 1212.87 L1670.37 1212.87 L1669.78 1212.87 L1669.2 1212.87 L1668.61 1212.87 L1668.02 1212.87 L1667.44 1212.87 L1666.85 1212.87 L1666.26 1212.87 L1665.68 1212.87 L1665.09 1212.87 L1664.5 1212.87 L1663.92 1212.87 L1663.33 1212.87 L1662.75 1212.87 L1662.16 1212.87 L1661.57 1212.87 L1660.99 1212.87 L1660.4 1212.87 L1659.81 1212.87 L1659.23 1212.87 L1658.64 1212.87 L1658.05 1212.87 L1657.47 1212.87 L1656.88 1212.87 L1656.29 1212.87 L1655.71 1212.87 L1655.12 1212.87 L1654.54 1212.87 L1653.95 1212.87 L1653.36 1212.87 L1652.78 1212.87 L1652.19 1212.87 L1651.6 1212.87 L1651.02 1212.87 L1650.43 1212.87 L1649.84 1212.87 L1649.26 1212.87 L1648.67 1212.87 L1648.09 1212.87 L1647.5 1212.87 L1646.91 1212.87 L1646.33 1212.87 L1645.74 1212.87 L1645.15 1212.87 L1644.57 1212.87 L1643.98 1212.87 L1643.39 1212.87 L1642.81 1212.87 L1642.22 1212.87 L1641.63 1212.87 L1641.05 1212.87 L1640.46 1212.87 L1639.88 1212.87 L1639.29 1212.87 L1638.7 1212.87 L1638.12 1212.87 L1637.53 1212.87 L1636.94 1212.87 L1636.36 1212.87 L1635.77 1212.87 L1635.18 1212.87 L1634.6 1212.87 L1634.01 1212.87 L1633.42 1212.87 L1632.84 1212.87 L1632.25 1212.87 L1631.67 1212.87 L1631.08 1212.87 L1630.49 1212.87 L1629.91 1212.87 L1629.32 1212.87 L1628.73 1212.87 L1628.15 1212.87 L1627.56 1212.87 L1626.97 1212.87 L1626.39 1212.87 L1625.8 1212.87 L1625.22 1212.87 L1624.63 1212.87 L1624.04 1212.87 L1623.46 1212.87 L1622.87 1212.87 L1622.28 1212.87 L1621.7 1212.87 L1621.11 1212.87 L1620.52 1212.87 L1619.94 1212.87 L1619.35 1212.87 L1618.76 1212.87 L1618.18 1212.87 L1617.59 1212.87 L1617.01 1212.87 L1616.42 1212.87 L1615.83 1212.87 L1615.25 1212.87 L1614.66 1212.87 L1614.07 1212.87 L1613.49 1212.87 L1612.9 1212.87 L1612.31 1212.87 L1611.73 1212.87 L1611.14 1212.87 L1610.55 1212.87 L1609.97 1212.87 L1609.38 1212.87 L1608.8 1212.87 L1608.21 1212.87 L1607.62 1212.87 L1607.04 1212.87 L1606.45 1212.87 L1605.86 1212.87 L1605.28 1212.87 L1604.69 1212.87 L1604.1 1212.87 L1603.52 1212.87 L1602.93 1212.87 L1602.34 1212.87 L1601.76 1212.87 L1601.17 1212.87 L1600.59 1212.87 L1600 1212.87 L1599.41 1212.87 L1598.83 1212.87 L1598.24 1212.87 L1597.65 1212.87 L1597.07 1212.87 L1596.48 1212.87 L1595.89 1212.87 L1595.31 1212.87 L1594.72 1212.87 L1594.14 1212.87 L1593.55 1212.87 L1592.96 1212.87 L1592.38 1212.87 L1591.79 1212.87 L1591.2 1212.87 L1590.62 1212.87 L1590.03 1212.87 L1589.44 1212.87 L1588.86 1212.87 L1588.27 1212.87 L1587.68 1212.87 L1587.1 1212.87 L1586.51 1212.87 L1585.93 1212.87 L1585.34 1212.87 L1584.75 1212.87 L1584.17 1212.87 L1583.58 1212.87 L1582.99 1212.87 L1582.41 1212.87 L1581.82 1212.87 L1581.23 1212.87 L1580.65 1212.87 L1580.06 1212.87 L1579.47 1212.87 L1578.89 1212.87 L1578.3 1212.87 L1577.72 1212.87 L1577.13 1212.87 L1576.54 1212.87 L1575.96 1212.87 L1575.37 1212.87 L1574.78 1212.87 L1574.2 1212.87 L1573.61 1212.87 L1573.02 1212.87 L1572.44 1212.87 L1571.85 1212.87 L1571.27 1212.87 L1570.68 1212.87 L1570.09 1212.87 L1569.51 1212.87 L1568.92 1212.87 L1568.33 1212.87 L1567.75 1212.87 L1567.16 1212.87 L1566.57 1212.87 L1565.99 1212.87 L1565.4 1212.87 L1564.81 1212.87 L1564.23 1212.87 L1563.64 1212.87 L1563.06 1212.87 L1562.47 1212.87 L1561.88 1212.87 L1561.3 1212.87 L1560.71 1212.87 L1560.12 1212.87 L1559.54 1212.87 L1558.95 1212.87 L1558.36 1212.87 L1557.78 1212.87 L1557.19 1212.87 L1556.6 1212.87 L1556.02 1212.87 L1555.43 1212.87 L1554.85 1212.87 L1554.26 1212.87 L1553.67 1212.87 L1553.09 1212.87 L1552.5 1212.87 L1551.91 1212.87 L1551.33 1212.87 L1550.74 1212.87 L1550.15 1212.87 L1549.57 1212.87 L1548.98 1212.87 L1548.4 1212.87 L1547.81 1212.87 L1547.22 1212.87 L1546.64 1212.87 L1546.05 1212.87 L1545.46 1212.87 L1544.88 1212.87 L1544.29 1212.87 L1543.7 1212.87 L1543.12 1212.87 L1542.53 1212.87 L1541.94 1212.87 L1541.36 1212.87 L1540.77 1212.87 L1540.19 1212.87 L1539.6 1212.87 L1539.01 1212.87 L1538.43 1212.87 L1537.84 1212.87 L1537.25 1212.87 L1536.67 1212.87 L1536.08 1212.87 L1535.49 1212.87 L1534.91 1212.87 L1534.32 1212.87 L1533.73 1212.87 L1533.15 1212.87 L1532.56 1212.87 L1531.98 1212.87 L1531.39 1212.87 L1530.8 1212.87 L1530.22 1212.87 L1529.63 1212.87 L1529.04 1212.87 L1528.46 1212.87 L1527.87 1212.87 L1527.28 1212.87 L1526.7 1212.87 L1526.11 1212.87 L1525.52 1212.87 L1524.94 1212.87 L1524.35 1212.87 L1523.77 1212.87 L1523.18 1212.87 L1522.59 1212.87 L1522.01 1212.87 L1521.42 1212.87 L1520.83 1212.87 L1520.25 1212.87 L1519.66 1212.87 L1519.07 1212.87 L1518.49 1212.87 L1517.9 1212.87 L1517.32 1212.87 L1516.73 1212.87 L1516.14 1212.87 L1515.56 1212.87 L1514.97 1212.87 L1514.38 1212.87 L1513.8 1212.87 L1513.21 1212.87 L1512.62 1212.87 L1512.04 1212.87 L1511.45 1212.87 L1510.86 1212.87 L1510.28 1212.87 L1509.69 1212.87 L1509.11 1212.87 L1508.52 1212.87 L1507.93 1212.87 L1507.35 1212.87 L1506.76 1212.87 L1506.17 1212.87 L1505.59 1212.87 L1505 1212.87 L1504.41 1212.87 L1503.83 1212.87 L1503.24 1212.87 L1502.65 1212.87 L1502.07 1212.87 L1501.48 1212.87 L1500.9 1212.87 L1500.31 1212.87 L1499.72 1212.87 L1499.14 1212.87 L1498.55 1212.87 L1497.96 1212.87 L1497.38 1212.87 L1496.79 1212.87 L1496.2 1212.87 L1495.62 1212.87 L1495.03 1212.87 L1494.45 1212.87 L1493.86 1212.87 L1493.27 1212.87 L1492.69 1212.87 L1492.1 1212.87 L1491.51 1212.87 L1490.93 1212.87 L1490.34 1212.87 L1489.75 1212.87 L1489.17 1212.87 L1488.58 1212.87 L1487.99 1212.87 L1487.41 1212.87 L1486.82 1212.87 L1486.24 1212.87 L1485.65 1212.87 L1485.06 1212.87 L1484.48 1212.87 L1483.89 1212.87 L1483.3 1212.87 L1482.72 1212.87 L1482.13 1212.87 L1481.54 1212.87 L1480.96 1212.87 L1480.37 1212.87 L1479.78 1212.87 L1479.2 1212.87 L1478.61 1212.87 L1478.03 1212.87 L1477.44 1212.87 L1476.85 1212.87 L1476.27 1212.87 L1475.68 1212.87 L1475.09 1212.87 L1474.51 1212.87 L1473.92 1212.87 L1473.33 1212.87 L1472.75 1212.87 L1472.16 1212.87 L1471.57 1212.87 L1470.99 1212.87 L1470.4 1212.87 L1469.82 1212.87 L1469.23 1212.87 L1468.64 1212.87 L1468.06 1212.87 L1467.47 1212.87 L1466.88 1212.87 L1466.3 1212.87 L1465.71 1212.87 L1465.12 1212.87 L1464.54 1212.87 L1463.95 1212.87 L1463.37 1212.87 L1462.78 1212.87 L1462.19 1212.87 L1461.61 1212.87 L1461.02 1212.87 L1460.43 1212.87 L1459.85 1212.87 L1459.26 1212.87 L1458.67 1212.87 L1458.09 1212.87 L1457.5 1212.87 L1456.91 1212.87 L1456.33 1212.87 L1455.74 1212.87 L1455.16 1212.87 L1454.57 1212.87 L1453.98 1212.87 L1453.4 1212.87 L1452.81 1212.87 L1452.22 1212.87 L1451.64 1212.87 L1451.05 1212.87 L1450.46 1212.87 L1449.88 1212.87 L1449.29 1212.87 L1448.7 1212.87 L1448.12 1212.87 L1447.53 1212.87 L1446.95 1212.87 L1446.36 1212.87 L1445.77 1212.87 L1445.19 1212.87 L1444.6 1212.87 L1444.01 1212.87 L1443.43 1212.87 L1442.84 1212.87 L1442.25 1212.87 L1441.67 1212.87 L1441.08 1212.87 L1440.5 1212.87 L1439.91 1212.87 L1439.32 1212.87 L1438.74 1212.87 L1438.15 1212.87 L1437.56 1212.87 L1436.98 1212.87 L1436.39 1212.87 L1435.8 1212.87 L1435.22 1212.87 L1434.63 1212.87 L1434.04 1212.87 L1433.46 1212.87 L1432.87 1212.87 L1432.29 1212.87 L1431.7 1212.87 L1431.11 1212.87 L1430.53 1212.87 L1429.94 1212.87 L1429.35 1212.87 L1428.77 1212.87 L1428.18 1212.87 L1427.59 1212.87 L1427.01 1212.87 L1426.42 1212.87 L1425.83 1212.87 L1425.25 1212.87 L1424.66 1212.87 L1424.08 1212.87 L1423.49 1212.87 L1422.9 1212.87 L1422.32 1212.87 L1421.73 1212.87 L1421.14 1212.87 L1420.56 1212.87 L1419.97 1212.87 L1419.38 1212.87 L1418.8 1212.87 L1418.21 1212.87 L1417.63 1212.87 L1417.04 1212.87 L1416.45 1212.87 L1415.87 1212.87 L1415.28 1212.87 L1414.69 1212.87 L1414.11 1212.87 L1413.52 1212.87 L1412.93 1212.87 L1412.35 1212.87 L1411.76 1212.87 L1411.17 1212.87 L1410.59 1212.87 L1410 1212.87 L1409.42 1212.87 L1408.83 1212.87 L1408.24 1212.87 L1407.66 1212.87 L1407.07 1212.87 L1406.48 1212.87 L1405.9 1212.87 L1405.31 1212.87 L1404.72 1212.87 L1404.14 1212.87 L1403.55 1212.87 L1402.96 1212.87 L1402.38 1212.87 L1401.79 1212.87 L1401.21 1212.87 L1400.62 1212.87 L1400.03 1212.87 L1399.45 1212.87 L1398.86 1212.87 L1398.27 1212.87 L1397.69 1212.87 L1397.1 1212.87 L1396.51 1212.87 L1395.93 1212.87 L1395.34 1212.87 L1394.75 1212.87 L1394.17 1212.87 L1393.58 1212.87 L1393 1212.87 L1392.41 1212.87 L1391.82 1212.87 L1391.24 1212.87 L1390.65 1212.87 L1390.06 1212.87 L1389.48 1212.87 L1388.89 1212.87 L1388.3 1212.87 L1387.72 1212.87 L1387.13 1212.87 L1386.55 1212.87 L1385.96 1212.87 L1385.37 1212.87 L1384.79 1212.87 L1384.2 1212.87 L1383.61 1212.87 L1383.03 1212.87 L1382.44 1212.87 L1381.85 1212.87 L1381.27 1212.87 L1380.68 1212.87 L1380.09 1212.87 L1379.51 1212.87 L1378.92 1212.87 L1378.34 1212.87 L1377.75 1212.87 L1377.16 1212.87 L1376.58 1212.87 L1375.99 1212.87 L1375.4 1212.87 L1374.82 1212.87 L1374.23 1212.87 L1373.64 1212.87 L1373.06 1212.87 L1372.47 1212.87 L1371.88 1212.87 L1371.3 1212.87 L1370.71 1212.87 L1370.13 1212.87 L1369.54 1212.87 L1368.95 1212.87 L1368.37 1212.87 L1367.78 1212.87 L1367.19 1212.87 L1366.61 1212.87 L1366.02 1212.87 L1365.43 1212.87 L1364.85 1212.87 L1364.26 1212.87 L1363.68 1212.87 L1363.09 1212.87 L1362.5 1212.87 L1361.92 1212.87 L1361.33 1212.87 L1360.74 1212.87 L1360.16 1212.87 L1359.57 1212.87 L1358.98 1212.87 L1358.4 1212.87 L1357.81 1212.87 L1357.22 1212.87 L1356.64 1212.87 L1356.05 1212.87 L1355.47 1212.87 L1354.88 1212.87 L1354.29 1212.87 L1353.71 1212.87 L1353.12 1212.87 L1352.53 1212.87 L1351.95 1212.87 L1351.36 1212.87 L1350.77 1212.87 L1350.19 1212.87 L1349.6 1212.87 L1349.01 1212.87 L1348.43 1212.87 L1347.84 1212.87 L1347.26 1212.87 L1346.67 1212.87 L1346.08 1212.87 L1345.5 1212.87 L1344.91 1212.87 L1344.32 1212.87 L1343.74 1212.87 L1343.15 1212.87 L1342.56 1212.87 L1341.98 1212.87 L1341.39 1212.87 L1340.8 1212.87 L1340.22 1212.87 L1339.63 1212.87 L1339.05 1212.87 L1338.46 1212.87 L1337.87 1212.87 L1337.29 1212.87 L1336.7 1212.87 L1336.11 1212.87 L1335.53 1212.87 L1334.94 1212.87 L1334.35 1212.87 L1333.77 1212.87 L1333.18 1212.87 L1332.6 1212.87 L1332.01 1212.87 L1331.42 1212.87 L1330.84 1212.87 L1330.25 1212.87 L1329.66 1212.87 L1329.08 1212.87 L1328.49 1212.87 L1327.9 1212.87 L1327.32 1212.87 L1326.73 1212.87 L1326.14 1212.87 L1325.56 1212.87 L1324.97 1212.87 L1324.39 1212.87 L1323.8 1212.87 L1323.21 1212.87 L1322.63 1212.87 L1322.04 1212.87 L1321.45 1212.87 L1320.87 1212.87 L1320.28 1212.87 L1319.69 1212.87 L1319.11 1212.87 L1318.52 1212.87 L1317.93 1212.87 L1317.35 1212.87 L1316.76 1212.87 L1316.18 1212.87 L1315.59 1212.87 L1315 1212.87 L1314.42 1212.87 L1313.83 1212.87 L1313.24 1212.87 L1312.66 1212.87 L1312.07 1212.87 L1311.48 1212.87 L1310.9 1212.87 L1310.31 1212.87 L1309.73 1212.87 L1309.14 1212.87 L1308.55 1212.87 L1307.97 1212.87 L1307.38 1212.87 L1306.79 1212.87 L1306.21 1212.87 L1305.62 1212.87 L1305.03 1212.87 L1304.45 1212.87 L1303.86 1212.87 L1303.27 1212.87 L1302.69 1212.87 L1302.1 1212.87 L1301.52 1212.87 L1300.93 1212.87 L1300.34 1212.87 L1299.76 1212.87 L1299.17 1212.87 L1298.58 1212.87 L1298 1212.87 L1297.41 1212.87 L1296.82 1212.87 L1296.24 1212.87 L1295.65 1212.87 L1295.06 1212.87 L1294.48 1212.87 L1293.89 1212.87 L1293.31 1212.87 L1292.72 1212.87 L1292.13 1212.87 L1291.55 1212.87 L1290.96 1212.87 L1290.37 1212.87 L1289.79 1212.87 L1289.2 1212.87 L1288.61 1212.87 L1288.03 1212.87 L1287.44 1212.87 L1286.86 1212.87 L1286.27 1212.87 L1285.68 1212.87 L1285.1 1212.87 L1284.51 1212.87 L1283.92 1212.87 L1283.34 1212.87 L1282.75 1212.87 L1282.16 1212.87 L1281.58 1212.87 L1280.99 1212.87 L1280.4 1212.87 L1279.82 1212.87 L1279.23 1212.87 L1278.65 1212.87 L1278.06 1212.87 L1277.47 1212.87 L1276.89 1212.87 L1276.3 1212.87 L1275.71 1212.87 L1275.13 1212.87 L1274.54 1212.87 L1273.95 1212.87 L1273.37 1212.87 L1272.78 1212.87 L1272.19 1212.87 L1271.61 1212.87 L1271.02 1212.87 L1270.44 1212.87 L1269.85 1212.87 L1269.26 1212.87 L1268.68 1212.87 L1268.09 1212.87 L1267.5 1212.87 L1266.92 1212.87 L1266.33 1212.87 L1265.74 1212.87 L1265.16 1212.87 L1264.57 1212.87 L1263.98 1212.87 L1263.4 1212.87 L1262.81 1212.87 L1262.23 1212.87 L1261.64 1212.87 L1261.05 1212.87 L1260.47 1212.87 L1259.88 1212.87 L1259.29 1212.87 L1258.71 1212.87 L1258.12 1212.87 L1257.53 1212.87 L1256.95 1212.87 L1256.36 1212.87 L1255.78 1212.87 L1255.19 1212.87 L1254.6 1212.87 L1254.02 1212.87 L1253.43 1212.87 L1252.84 1212.87 L1252.26 1212.87 L1251.67 1212.87 L1251.08 1212.87 L1250.5 1212.87 L1249.91 1212.87 L1249.32 1212.87 L1248.74 1212.87 L1248.15 1212.87 L1247.57 1212.87 L1246.98 1212.87 L1246.39 1212.87 L1245.81 1212.87 L1245.22 1212.87 L1244.63 1212.87 L1244.05 1212.87 L1243.46 1212.87 L1242.87 1212.87 L1242.29 1212.87 L1241.7 1212.87 L1241.11 1212.87 L1240.53 1212.87 L1239.94 1212.87 L1239.36 1212.87 L1238.77 1212.87 L1238.18 1212.87 L1237.6 1212.87 L1237.01 1212.87 L1236.42 1212.87 L1235.84 1212.87 L1235.25 1212.87 L1234.66 1212.87 L1234.08 1212.87 L1233.49 1212.87 L1232.91 1212.87 L1232.32 1212.87 L1231.73 1212.87 L1231.15 1212.87 L1230.56 1212.87 L1229.97 1212.87 L1229.39 1212.87 L1228.8 1212.87 L1228.21 1212.87 L1227.63 1212.87 L1227.04 1212.87 L1226.45 1212.87 L1225.87 1212.87 L1225.28 1212.87 L1224.7 1212.87 L1224.11 1212.87 L1223.52 1212.87 L1222.94 1212.87 L1222.35 1212.87 L1221.76 1212.87 L1221.18 1212.87 L1220.59 1212.87 L1220 1212.87 L1219.42 1212.87 L1218.83 1212.87 L1218.24 1212.87 L1217.66 1212.87 L1217.07 1212.87 L1216.49 1212.87 L1215.9 1212.87 L1215.31 1212.87 L1214.73 1212.87 L1214.14 1212.87 L1213.55 1212.87 L1212.97 1212.87 L1212.38 1212.87 L1211.79 1212.87 L1211.21 1212.87 L1210.62 1212.87 L1210.03 1212.87 L1209.45 1212.87 L1208.86 1212.87 L1208.28 1212.87 L1207.69 1212.87 L1207.1 1212.87 L1206.52 1212.87 L1205.93 1212.87 L1205.34 1212.87 L1204.76 1212.87 L1204.17 1212.87 L1203.58 1212.87 L1203 1212.87 L1202.41 1212.87 L1201.83 1212.87 L1201.24 1212.87 L1200.65 1212.87 L1200.07 1212.87 L1199.48 1212.87 L1198.89 1212.87 L1198.31 1212.87 L1197.72 1212.87 L1197.13 1212.87 L1196.55 1212.87 L1195.96 1212.87 L1195.37 1212.87 L1194.79 1212.87 L1194.2 1212.87 L1193.62 1212.87 L1193.03 1212.87 L1192.44 1212.87 L1191.86 1212.87 L1191.27 1212.87 L1190.68 1212.87 L1190.1 1212.87 L1189.51 1212.87 L1188.92 1212.87 L1188.34 1212.87 L1187.75 1212.87 L1187.16 1212.87 L1186.58 1212.87 L1185.99 1212.87 L1185.41 1212.87 L1184.82 1212.87 L1184.23 1212.87 L1183.65 1212.87 L1183.06 1212.87 L1182.47 1212.87 L1181.89 1212.87 L1181.3 1212.87 L1180.71 1212.87 L1180.13 1212.87 L1179.54 1212.87 L1178.96 1212.87 L1178.37 1212.87 L1177.78 1212.87 L1177.2 1212.87 L1176.61 1212.87 L1176.02 1212.87 L1175.44 1212.87 L1174.85 1212.87 L1174.26 1212.87 L1173.68 1212.87 L1173.09 1212.87 L1172.5 1212.87 L1171.92 1212.87 L1171.33 1212.87 L1170.75 1212.87 L1170.16 1212.87 L1169.57 1212.87 L1168.99 1212.87 L1168.4 1212.87 L1167.81 1212.87 L1167.23 1212.87 L1166.64 1212.87 L1166.05 1212.87 L1165.47 1212.87 L1164.88 1212.87 L1164.29 1212.87 L1163.71 1212.87 L1163.12 1212.87 L1162.54 1212.87 L1161.95 1212.87 L1161.36 1212.87 L1160.78 1212.87 L1160.19 1212.87 L1159.6 1212.87 L1159.02 1212.87 L1158.43 1212.87 L1157.84 1212.87 L1157.26 1212.87 L1156.67 1212.87 L1156.09 1212.87 L1155.5 1212.87 L1154.91 1212.87 L1154.33 1212.87 L1153.74 1212.87 L1153.15 1212.87 L1152.57 1212.87 L1151.98 1212.87 L1151.39 1212.87 L1150.81 1212.87 L1150.22 1212.87 L1149.63 1212.87 L1149.05 1212.87 L1148.46 1212.87 L1147.88 1212.87 L1147.29 1212.87 L1146.7 1212.87 L1146.12 1212.87 L1145.53 1212.87 L1144.94 1212.87 L1144.36 1212.87 L1143.77 1212.87 L1143.18 1212.87 L1142.6 1212.87 L1142.01 1212.87 L1141.42 1212.87 L1140.84 1212.87 L1140.25 1212.87 L1139.67 1212.87 L1139.08 1212.87 L1138.49 1212.87 L1137.91 1212.87 L1137.32 1212.87 L1136.73 1212.87 L1136.15 1212.87 L1135.56 1212.87 L1134.97 1212.87 L1134.39 1212.87 L1133.8 1212.87 L1133.21 1212.87 L1132.63 1212.87 L1132.04 1212.87 L1131.46 1212.87 L1130.87 1212.87 L1130.28 1212.87 L1129.7 1212.87 L1129.11 1212.87 L1128.52 1212.87 L1127.94 1212.87 L1127.35 1212.87 L1126.76 1212.87 L1126.18 1212.87 L1125.59 1212.87 L1125.01 1212.87 L1124.42 1212.87 L1123.83 1212.87 L1123.25 1212.87 L1122.66 1212.87 L1122.07 1212.87 L1121.49 1212.87 L1120.9 1212.87 L1120.31 1212.87 L1119.73 1212.87 L1119.14 1212.87 L1118.55 1212.87 L1117.97 1212.87 L1117.38 1212.87 L1116.8 1212.87 L1116.21 1212.87 L1115.62 1212.87 L1115.04 1212.87 L1114.45 1212.87 L1113.86 1212.87 L1113.28 1212.87 L1112.69 1212.87 L1112.1 1212.87 L1111.52 1212.87 L1110.93 1212.87 L1110.34 1212.87 L1109.76 1212.87 L1109.17 1212.87 L1108.59 1212.87 L1108 1212.87 L1107.41 1212.87 L1106.83 1212.87 L1106.24 1212.87 L1105.65 1212.87 L1105.07 1212.87 L1104.48 1212.87 L1103.89 1212.87 L1103.31 1212.87 L1102.72 1212.87 L1102.14 1212.87 L1101.55 1212.87 L1100.96 1212.87 L1100.38 1212.87 L1099.79 1212.87 L1099.2 1212.87 L1098.62 1212.87 L1098.03 1212.87 L1097.44 1212.87 L1096.86 1212.87 L1096.27 1212.87 L1095.68 1212.87 L1095.1 1212.87 L1094.51 1212.87 L1093.93 1212.87 L1093.34 1212.87 L1092.75 1212.87 L1092.17 1212.87 L1091.58 1212.87 L1090.99 1212.87 L1090.41 1212.87 L1089.82 1212.87 L1089.23 1212.87 L1088.65 1212.87 L1088.06 1212.87 L1087.47 1212.87 L1086.89 1212.87 L1086.3 1212.87 L1085.72 1212.87 L1085.13 1212.87 L1084.54 1212.87 L1083.96 1212.87 L1083.37 1212.87 L1082.78 1212.87 L1082.2 1212.87 L1081.61 1212.87 L1081.02 1212.87 L1080.44 1212.87 L1079.85 1212.87 L1079.26 1212.87 L1078.68 1212.87 L1078.09 1212.87 L1077.51 1212.87 L1076.92 1212.87 L1076.33 1212.87 L1075.75 1212.87 L1075.16 1212.87 L1074.57 1212.87 L1073.99 1212.87 L1073.4 1212.87 L1072.81 1212.87 L1072.23 1212.87 L1071.64 1212.87 L1071.06 1212.87 L1070.47 1212.87 L1069.88 1212.87 L1069.3 1212.87 L1068.71 1212.87 L1068.12 1212.87 L1067.54 1212.87 L1066.95 1212.87 L1066.36 1212.87 L1065.78 1212.87 L1065.19 1212.87 L1064.6 1212.87 L1064.02 1212.87 L1063.43 1212.87 L1062.85 1212.87 L1062.26 1212.87 L1061.67 1212.87 L1061.09 1212.87 L1060.5 1212.87 L1059.91 1212.87 L1059.33 1212.87 L1058.74 1212.87 L1058.15 1212.87 L1057.57 1212.87 L1056.98 1212.87 L1056.39 1212.87 L1055.81 1212.87 L1055.22 1212.87 L1054.64 1212.87 L1054.05 1212.87 L1053.46 1212.87 L1052.88 1212.87 L1052.29 1212.87 L1051.7 1212.87 L1051.12 1212.87 L1050.53 1212.87 L1049.94 1212.87 L1049.36 1212.87 L1048.77 1212.87 L1048.19 1212.87 L1047.6 1212.87 L1047.01 1212.87 L1046.43 1212.87 L1045.84 1212.87 L1045.25 1212.87 L1044.67 1212.87 L1044.08 1212.87 L1043.49 1212.87 L1042.91 1212.87 L1042.32 1212.87 L1041.73 1212.87 L1041.15 1212.87 L1040.56 1212.87 L1039.98 1212.87 L1039.39 1212.87 L1038.8 1212.87 L1038.22 1212.87 L1037.63 1212.87 L1037.04 1212.87 L1036.46 1212.87 L1035.87 1212.87 L1035.28 1212.87 L1034.7 1212.87 L1034.11 1212.87 L1033.52 1212.87 L1032.94 1212.87 L1032.35 1212.87 L1031.77 1212.87 L1031.18 1212.87 L1030.59 1212.87 L1030.01 1212.87 L1029.42 1212.87 L1028.83 1212.87 L1028.25 1212.87 L1027.66 1212.87 L1027.07 1212.87 L1026.49 1212.87 L1025.9 1212.87 L1025.32 1212.87 L1024.73 1212.87 L1024.14 1212.87 L1023.56 1212.87 L1022.97 1212.87 L1022.38 1212.87 L1021.8 1212.87 L1021.21 1212.87 L1020.62 1212.87 L1020.04 1212.87 L1019.45 1212.87 L1018.86 1212.87 L1018.28 1212.87 L1017.69 1212.87 L1017.11 1212.87 L1016.52 1212.87 L1015.93 1212.87 L1015.35 1212.87 L1014.76 1212.87 L1014.17 1212.87 L1013.59 1212.87 L1013 1212.87 L1012.41 1212.87 L1011.83 1212.87 L1011.24 1212.87 L1010.65 1212.87 L1010.07 1212.87 L1009.48 1212.87 L1008.9 1212.87 L1008.31 1212.87 L1007.72 1212.87 L1007.14 1212.87 L1006.55 1212.87 L1005.96 1212.87 L1005.38 1212.87 L1004.79 1212.87 L1004.2 1212.87 L1003.62 1212.87 L1003.03 1212.87 L1002.44 1212.87 L1001.86 1212.87 L1001.27 1212.87 L1000.69 1212.87 L1000.1 1212.87 L999.513 1212.87 L998.926 1212.87 L998.34 1212.87 L997.754 1212.87 L997.167 1212.87 L996.581 1212.87 L995.994 1212.87 L995.408 1212.87 L994.822 1212.87 L994.235 1212.87 L993.649 1212.87 L993.062 1212.87 L992.476 1212.87 L991.889 1212.87 L991.303 1212.87 L990.717 1212.87 L990.13 1212.87 L989.544 1212.87 L988.957 1212.87 L988.371 1212.87 L987.785 1212.87 L987.198 1212.87 L986.612 1212.87 L986.025 1212.87  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.18 986.612,1213.18 987.198,1213.18 987.785,1213.18 988.371,1213.18 988.957,1213.18 989.544,1213.18 990.13,1213.18 990.717,1213.18 991.303,1213.18 991.889,1213.18 992.476,1213.18 993.062,1213.18 993.649,1213.18 994.235,1213.18 994.822,1213.18 995.408,1213.18 995.994,1213.18 996.581,1213.18 997.167,1213.18 997.754,1213.18 998.34,1213.18 998.926,1213.18 999.513,1213.18 1000.1,1213.18 1000.69,1213.18 1001.27,1213.18 1001.86,1213.18 1002.44,1213.18 1003.03,1213.18 1003.62,1213.18 1004.2,1213.18 1004.79,1213.18 1005.38,1213.18 1005.96,1213.18 1006.55,1213.18 1007.14,1213.18 1007.72,1213.18 1008.31,1213.18 1008.9,1213.18 1009.48,1213.18 1010.07,1213.18 1010.65,1213.18 1011.24,1213.18 1011.83,1213.18 1012.41,1213.18 1013,1213.18 1013.59,1213.18 1014.17,1213.18 1014.76,1213.18 1015.35,1213.18 1015.93,1213.18 1016.52,1213.18 1017.11,1213.18 1017.69,1213.18 1018.28,1213.18 1018.86,1213.18 1019.45,1213.18 1020.04,1213.18 1020.62,1213.18 1021.21,1213.18 1021.8,1213.18 1022.38,1213.18 1022.97,1213.18 1023.56,1213.18 1024.14,1213.18 1024.73,1213.18 1025.32,1213.18 1025.9,1213.18 1026.49,1213.18 1027.07,1213.18 1027.66,1213.18 1028.25,1213.18 1028.83,1213.18 1029.42,1213.18 1030.01,1213.18 1030.59,1213.18 1031.18,1213.18 1031.77,1213.18 1032.35,1213.18 1032.94,1213.18 1033.52,1213.18 1034.11,1213.18 1034.7,1213.18 1035.28,1213.18 1035.87,1213.18 1036.46,1213.18 1037.04,1213.18 1037.63,1213.18 1038.22,1213.18 1038.8,1213.18 1039.39,1213.18 1039.98,1213.18 1040.56,1213.18 1041.15,1213.18 1041.73,1213.18 1042.32,1213.18 1042.91,1213.18 1043.49,1213.18 1044.08,1213.18 1044.67,1213.18 1045.25,1213.18 1045.84,1213.18 1046.43,1213.18 1047.01,1213.18 1047.6,1213.18 1048.19,1213.18 1048.77,1213.18 1049.36,1213.18 1049.94,1213.18 1050.53,1213.18 1051.12,1213.18 1051.7,1213.18 1052.29,1213.18 1052.88,1213.18 1053.46,1213.18 1054.05,1213.18 1054.64,1213.18 1055.22,1213.18 1055.81,1213.18 1056.39,1213.18 1056.98,1213.18 1057.57,1213.18 1058.15,1213.18 1058.74,1213.18 1059.33,1213.18 1059.91,1213.18 1060.5,1213.18 1061.09,1213.18 1061.67,1213.18 1062.26,1213.18 1062.85,1213.18 1063.43,1213.18 1064.02,1213.18 1064.6,1213.18 1065.19,1213.18 1065.78,1213.18 1066.36,1213.18 1066.95,1213.18 1067.54,1213.18 1068.12,1213.18 1068.71,1213.18 1069.3,1213.18 1069.88,1213.18 1070.47,1213.18 1071.06,1213.18 1071.64,1213.18 1072.23,1213.18 1072.81,1213.18 1073.4,1213.18 1073.99,1213.18 1074.57,1213.18 1075.16,1213.18 1075.75,1213.18 1076.33,1213.18 1076.92,1213.18 1077.51,1213.18 1078.09,1213.18 1078.68,1213.18 1079.26,1213.18 1079.85,1213.18 1080.44,1213.18 1081.02,1213.18 1081.61,1213.18 1082.2,1213.18 1082.78,1213.18 1083.37,1213.18 1083.96,1213.18 1084.54,1213.18 1085.13,1213.18 1085.72,1213.18 1086.3,1213.18 1086.89,1213.18 1087.47,1213.18 1088.06,1213.18 1088.65,1213.18 1089.23,1213.18 1089.82,1213.18 1090.41,1213.18 1090.99,1213.18 1091.58,1213.18 1092.17,1213.18 1092.75,1213.18 1093.34,1213.18 1093.93,1213.18 1094.51,1213.18 1095.1,1213.18 1095.68,1213.18 1096.27,1213.18 1096.86,1213.18 1097.44,1213.18 1098.03,1213.18 1098.62,1213.18 1099.2,1213.18 1099.79,1213.18 1100.38,1213.18 1100.96,1213.18 1101.55,1213.18 1102.14,1213.18 1102.72,1213.18 1103.31,1213.18 1103.89,1213.18 1104.48,1213.18 1105.07,1213.18 1105.65,1213.18 1106.24,1213.18 1106.83,1213.18 1107.41,1213.18 1108,1213.18 1108.59,1213.18 1109.17,1213.18 1109.76,1213.18 1110.34,1213.18 1110.93,1213.18 1111.52,1213.18 1112.1,1213.18 1112.69,1213.18 1113.28,1213.18 1113.86,1213.18 1114.45,1213.18 1115.04,1213.18 1115.62,1213.18 1116.21,1213.18 1116.8,1213.18 1117.38,1213.18 1117.97,1213.18 1118.55,1213.18 1119.14,1213.18 1119.73,1213.18 1120.31,1213.18 1120.9,1213.18 1121.49,1213.18 1122.07,1213.18 1122.66,1213.18 1123.25,1213.18 1123.83,1213.18 1124.42,1213.18 1125.01,1213.18 1125.59,1213.18 1126.18,1213.18 1126.76,1213.18 1127.35,1213.18 1127.94,1213.18 1128.52,1213.18 1129.11,1213.18 1129.7,1213.18 1130.28,1213.18 1130.87,1213.18 1131.46,1213.18 1132.04,1213.18 1132.63,1213.18 1133.21,1213.18 1133.8,1213.18 1134.39,1213.18 1134.97,1213.18 1135.56,1213.18 1136.15,1213.18 1136.73,1213.18 1137.32,1213.18 1137.91,1213.18 1138.49,1213.18 1139.08,1213.18 1139.67,1213.18 1140.25,1213.18 1140.84,1213.18 1141.42,1213.18 1142.01,1213.18 1142.6,1213.18 1143.18,1213.18 1143.77,1213.18 1144.36,1213.18 1144.94,1213.18 1145.53,1213.18 1146.12,1213.18 1146.7,1213.18 1147.29,1213.18 1147.88,1213.18 1148.46,1213.18 1149.05,1213.18 1149.63,1213.18 1150.22,1213.18 1150.81,1213.18 1151.39,1213.18 1151.98,1213.18 1152.57,1213.18 1153.15,1213.18 1153.74,1213.18 1154.33,1213.18 1154.91,1213.18 1155.5,1213.18 1156.09,1213.18 1156.67,1213.18 1157.26,1213.18 1157.84,1213.18 1158.43,1213.18 1159.02,1213.18 1159.6,1213.18 1160.19,1213.18 1160.78,1213.18 1161.36,1213.18 1161.95,1213.18 1162.54,1213.18 1163.12,1213.18 1163.71,1213.18 1164.29,1213.18 1164.88,1213.18 1165.47,1213.18 1166.05,1213.18 1166.64,1213.18 1167.23,1213.18 1167.81,1213.18 1168.4,1213.18 1168.99,1213.18 1169.57,1213.18 1170.16,1213.18 1170.75,1213.18 1171.33,1213.18 1171.92,1213.18 1172.5,1213.18 1173.09,1213.18 1173.68,1213.18 1174.26,1213.18 1174.85,1213.18 1175.44,1213.18 1176.02,1213.18 1176.61,1213.18 1177.2,1213.18 1177.78,1213.18 1178.37,1213.18 1178.96,1213.18 1179.54,1213.18 1180.13,1213.18 1180.71,1213.18 1181.3,1213.18 1181.89,1213.18 1182.47,1213.18 1183.06,1213.18 1183.65,1213.18 1184.23,1213.18 1184.82,1213.18 1185.41,1213.18 1185.99,1213.18 1186.58,1213.18 1187.16,1213.18 1187.75,1213.18 1188.34,1213.18 1188.92,1213.18 1189.51,1213.18 1190.1,1213.18 1190.68,1213.18 1191.27,1213.18 1191.86,1213.18 1192.44,1213.18 1193.03,1213.18 1193.62,1213.18 1194.2,1213.18 1194.79,1213.18 1195.37,1213.18 1195.96,1213.18 1196.55,1213.18 1197.13,1213.18 1197.72,1213.18 1198.31,1213.18 1198.89,1213.18 1199.48,1213.18 1200.07,1213.18 1200.65,1213.18 1201.24,1213.18 1201.83,1213.18 1202.41,1213.18 1203,1213.18 1203.58,1213.18 1204.17,1213.18 1204.76,1213.18 1205.34,1213.18 1205.93,1213.18 1206.52,1213.18 1207.1,1213.18 1207.69,1213.18 1208.28,1213.18 1208.86,1213.18 1209.45,1213.18 1210.03,1213.18 1210.62,1213.18 1211.21,1213.18 1211.79,1213.18 1212.38,1213.18 1212.97,1213.18 1213.55,1213.18 1214.14,1213.18 1214.73,1213.18 1215.31,1213.18 1215.9,1213.18 1216.49,1213.18 1217.07,1213.18 1217.66,1213.18 1218.24,1213.18 1218.83,1213.18 1219.42,1213.18 1220,1213.18 1220.59,1213.18 1221.18,1213.18 1221.76,1213.18 1222.35,1213.18 1222.94,1213.18 1223.52,1213.18 1224.11,1213.18 1224.7,1213.18 1225.28,1213.18 1225.87,1213.18 1226.45,1213.18 1227.04,1213.18 1227.63,1213.18 1228.21,1213.18 1228.8,1213.18 1229.39,1213.18 1229.97,1213.18 1230.56,1213.18 1231.15,1213.18 1231.73,1213.18 1232.32,1213.18 1232.91,1213.18 1233.49,1213.18 1234.08,1213.18 1234.66,1213.18 1235.25,1213.18 1235.84,1213.18 1236.42,1213.18 1237.01,1213.18 1237.6,1213.18 1238.18,1213.18 1238.77,1213.18 1239.36,1213.18 1239.94,1213.18 1240.53,1213.18 1241.11,1213.18 1241.7,1213.18 1242.29,1213.18 1242.87,1213.18 1243.46,1213.18 1244.05,1213.18 1244.63,1213.18 1245.22,1213.18 1245.81,1213.18 1246.39,1213.18 1246.98,1213.18 1247.57,1213.18 1248.15,1213.18 1248.74,1213.18 1249.32,1213.18 1249.91,1213.18 1250.5,1213.18 1251.08,1213.18 1251.67,1213.18 1252.26,1213.18 1252.84,1213.18 1253.43,1213.18 1254.02,1213.18 1254.6,1213.18 1255.19,1213.18 1255.78,1213.18 1256.36,1213.18 1256.95,1213.18 1257.53,1213.18 1258.12,1213.18 1258.71,1213.18 1259.29,1213.18 1259.88,1213.18 1260.47,1213.18 1261.05,1213.18 1261.64,1213.18 1262.23,1213.18 1262.81,1213.18 1263.4,1213.18 1263.98,1213.18 1264.57,1213.18 1265.16,1213.18 1265.74,1213.18 1266.33,1213.18 1266.92,1213.18 1267.5,1213.18 1268.09,1213.18 1268.68,1213.18 1269.26,1213.18 1269.85,1213.18 1270.44,1213.18 1271.02,1213.18 1271.61,1213.18 1272.19,1213.18 1272.78,1213.18 1273.37,1213.18 1273.95,1213.18 1274.54,1213.18 1275.13,1213.18 1275.71,1213.18 1276.3,1213.18 1276.89,1213.18 1277.47,1213.18 1278.06,1213.18 1278.65,1213.18 1279.23,1213.18 1279.82,1213.18 1280.4,1213.18 1280.99,1213.18 1281.58,1213.18 1282.16,1213.18 1282.75,1213.18 1283.34,1213.18 1283.92,1213.18 1284.51,1213.18 1285.1,1213.18 1285.68,1213.18 1286.27,1213.18 1286.86,1213.18 1287.44,1213.18 1288.03,1213.18 1288.61,1213.18 1289.2,1213.18 1289.79,1213.18 1290.37,1213.18 1290.96,1213.18 1291.55,1213.18 1292.13,1213.18 1292.72,1213.18 1293.31,1213.18 1293.89,1213.18 1294.48,1213.18 1295.06,1213.18 1295.65,1213.18 1296.24,1213.18 1296.82,1213.18 1297.41,1213.18 1298,1213.18 1298.58,1213.18 1299.17,1213.18 1299.76,1213.18 1300.34,1213.18 1300.93,1213.18 1301.52,1213.18 1302.1,1213.18 1302.69,1213.18 1303.27,1213.18 1303.86,1213.18 1304.45,1213.18 1305.03,1213.18 1305.62,1213.18 1306.21,1213.18 1306.79,1213.18 1307.38,1213.18 1307.97,1213.18 1308.55,1213.18 1309.14,1213.18 1309.73,1213.18 1310.31,1213.18 1310.9,1213.18 1311.48,1213.18 1312.07,1213.18 1312.66,1213.18 1313.24,1213.18 1313.83,1213.18 1314.42,1213.18 1315,1213.18 1315.59,1213.18 1316.18,1213.18 1316.76,1213.18 1317.35,1213.18 1317.93,1213.18 1318.52,1213.18 1319.11,1213.18 1319.69,1213.18 1320.28,1213.18 1320.87,1213.18 1321.45,1213.18 1322.04,1213.18 1322.63,1213.18 1323.21,1213.18 1323.8,1213.18 1324.39,1213.18 1324.97,1213.18 1325.56,1213.18 1326.14,1213.18 1326.73,1213.18 1327.32,1213.18 1327.9,1213.18 1328.49,1213.18 1329.08,1213.18 1329.66,1213.18 1330.25,1213.18 1330.84,1213.18 1331.42,1213.18 1332.01,1213.18 1332.6,1213.18 1333.18,1213.18 1333.77,1213.18 1334.35,1213.18 1334.94,1213.18 1335.53,1213.18 1336.11,1213.18 1336.7,1213.18 1337.29,1213.18 1337.87,1213.18 1338.46,1213.18 1339.05,1213.18 1339.63,1213.18 1340.22,1213.18 1340.8,1213.18 1341.39,1213.18 1341.98,1213.18 1342.56,1213.18 1343.15,1213.18 1343.74,1213.18 1344.32,1213.18 1344.91,1213.18 1345.5,1213.18 1346.08,1213.18 1346.67,1213.18 1347.26,1213.18 1347.84,1213.18 1348.43,1213.18 1349.01,1213.18 1349.6,1213.18 1350.19,1213.18 1350.77,1213.18 1351.36,1213.18 1351.95,1213.18 1352.53,1213.18 1353.12,1213.18 1353.71,1213.18 1354.29,1213.18 1354.88,1213.18 1355.47,1213.18 1356.05,1213.18 1356.64,1213.18 1357.22,1213.18 1357.81,1213.18 1358.4,1213.18 1358.98,1213.18 1359.57,1213.18 1360.16,1213.18 1360.74,1213.18 1361.33,1213.18 1361.92,1213.18 1362.5,1213.18 1363.09,1213.18 1363.68,1213.18 1364.26,1213.18 1364.85,1213.18 1365.43,1213.18 1366.02,1213.18 1366.61,1213.18 1367.19,1213.18 1367.78,1213.18 1368.37,1213.18 1368.95,1213.18 1369.54,1213.18 1370.13,1213.18 1370.71,1213.18 1371.3,1213.18 1371.88,1213.18 1372.47,1213.18 1373.06,1213.18 1373.64,1213.18 1374.23,1213.18 1374.82,1213.18 1375.4,1213.18 1375.99,1213.18 1376.58,1213.18 1377.16,1213.18 1377.75,1213.18 1378.34,1213.18 1378.92,1213.18 1379.51,1213.18 1380.09,1213.18 1380.68,1213.18 1381.27,1213.18 1381.85,1213.18 1382.44,1213.18 1383.03,1213.18 1383.61,1213.18 1384.2,1213.18 1384.79,1213.18 1385.37,1213.18 1385.96,1213.18 1386.55,1213.18 1387.13,1213.18 1387.72,1213.18 1388.3,1213.18 1388.89,1213.18 1389.48,1213.18 1390.06,1213.18 1390.65,1213.18 1391.24,1213.18 1391.82,1213.18 1392.41,1213.18 1393,1213.18 1393.58,1213.18 1394.17,1213.18 1394.75,1213.18 1395.34,1213.18 1395.93,1213.18 1396.51,1213.18 1397.1,1213.18 1397.69,1213.18 1398.27,1213.18 1398.86,1213.18 1399.45,1213.18 1400.03,1213.18 1400.62,1213.18 1401.21,1213.18 1401.79,1213.18 1402.38,1213.18 1402.96,1213.18 1403.55,1213.18 1404.14,1213.18 1404.72,1213.18 1405.31,1213.18 1405.9,1213.18 1406.48,1213.18 1407.07,1213.18 1407.66,1213.18 1408.24,1213.18 1408.83,1213.18 1409.42,1213.18 1410,1213.18 1410.59,1213.18 1411.17,1213.18 1411.76,1213.18 1412.35,1213.18 1412.93,1213.18 1413.52,1213.18 1414.11,1213.18 1414.69,1213.18 1415.28,1213.18 1415.87,1213.18 1416.45,1213.18 1417.04,1213.18 1417.63,1213.18 1418.21,1213.18 1418.8,1213.18 1419.38,1213.18 1419.97,1213.18 1420.56,1213.18 1421.14,1213.18 1421.73,1213.18 1422.32,1213.18 1422.9,1213.18 1423.49,1213.18 1424.08,1213.18 1424.66,1213.18 1425.25,1213.18 1425.83,1213.18 1426.42,1213.18 1427.01,1213.18 1427.59,1213.18 1428.18,1213.18 1428.77,1213.18 1429.35,1213.18 1429.94,1213.18 1430.53,1213.18 1431.11,1213.18 1431.7,1213.18 1432.29,1213.18 1432.87,1213.18 1433.46,1213.18 1434.04,1213.18 1434.63,1213.18 1435.22,1213.18 1435.8,1213.18 1436.39,1213.18 1436.98,1213.18 1437.56,1213.18 1438.15,1213.18 1438.74,1213.18 1439.32,1213.18 1439.91,1213.18 1440.5,1213.18 1441.08,1213.18 1441.67,1213.18 1442.25,1213.18 1442.84,1213.18 1443.43,1213.18 1444.01,1213.18 1444.6,1213.18 1445.19,1213.18 1445.77,1213.18 1446.36,1213.18 1446.95,1213.18 1447.53,1213.18 1448.12,1213.18 1448.7,1213.18 1449.29,1213.18 1449.88,1213.18 1450.46,1213.18 1451.05,1213.18 1451.64,1213.18 1452.22,1213.18 1452.81,1213.18 1453.4,1213.18 1453.98,1213.18 1454.57,1213.18 1455.16,1213.18 1455.74,1213.18 1456.33,1213.18 1456.91,1213.18 1457.5,1213.18 1458.09,1213.18 1458.67,1213.18 1459.26,1213.18 1459.85,1213.18 1460.43,1213.18 1461.02,1213.18 1461.61,1213.18 1462.19,1213.18 1462.78,1213.18 1463.37,1213.18 1463.95,1213.18 1464.54,1213.18 1465.12,1213.18 1465.71,1213.18 1466.3,1213.18 1466.88,1213.18 1467.47,1213.18 1468.06,1213.18 1468.64,1213.18 1469.23,1213.18 1469.82,1213.18 1470.4,1213.18 1470.99,1213.18 1471.57,1213.18 1472.16,1213.18 1472.75,1213.18 1473.33,1213.18 1473.92,1213.18 1474.51,1213.18 1475.09,1213.18 1475.68,1213.18 1476.27,1213.18 1476.85,1213.18 1477.44,1213.18 1478.03,1213.18 1478.61,1213.18 1479.2,1213.18 1479.78,1213.18 1480.37,1213.18 1480.96,1213.18 1481.54,1213.18 1482.13,1213.18 1482.72,1213.18 1483.3,1213.18 1483.89,1213.18 1484.48,1213.18 1485.06,1213.18 1485.65,1213.18 1486.24,1213.18 1486.82,1213.18 1487.41,1213.18 1487.99,1213.18 1488.58,1213.18 1489.17,1213.18 1489.75,1213.18 1490.34,1213.18 1490.93,1213.18 1491.51,1213.18 1492.1,1213.18 1492.69,1213.18 1493.27,1213.18 1493.86,1213.18 1494.45,1213.18 1495.03,1213.18 1495.62,1213.18 1496.2,1213.18 1496.79,1213.18 1497.38,1213.18 1497.96,1213.18 1498.55,1213.18 1499.14,1213.18 1499.72,1213.18 1500.31,1213.18 1500.9,1213.18 1501.48,1213.18 1502.07,1213.18 1502.65,1213.18 1503.24,1213.18 1503.83,1213.18 1504.41,1213.18 1505,1213.18 1505.59,1213.18 1506.17,1213.18 1506.76,1213.18 1507.35,1213.18 1507.93,1213.18 1508.52,1213.18 1509.11,1213.18 1509.69,1213.18 1510.28,1213.18 1510.86,1213.18 1511.45,1213.18 1512.04,1213.18 1512.62,1213.18 1513.21,1213.18 1513.8,1213.18 1514.38,1213.18 1514.97,1213.18 1515.56,1213.18 1516.14,1213.18 1516.73,1213.18 1517.32,1213.18 1517.9,1213.18 1518.49,1213.18 1519.07,1213.18 1519.66,1213.18 1520.25,1213.18 1520.83,1213.18 1521.42,1213.18 1522.01,1213.18 1522.59,1213.18 1523.18,1213.18 1523.77,1213.18 1524.35,1213.18 1524.94,1213.18 1525.52,1213.18 1526.11,1213.18 1526.7,1213.18 1527.28,1213.18 1527.87,1213.18 1528.46,1213.18 1529.04,1213.18 1529.63,1213.18 1530.22,1213.18 1530.8,1213.18 1531.39,1213.18 1531.98,1213.18 1532.56,1213.18 1533.15,1213.18 1533.73,1213.18 1534.32,1213.18 1534.91,1213.18 1535.49,1213.18 1536.08,1213.18 1536.67,1213.18 1537.25,1213.18 1537.84,1213.18 1538.43,1213.18 1539.01,1213.18 1539.6,1213.18 1540.19,1213.18 1540.77,1213.18 1541.36,1213.18 1541.94,1213.18 1542.53,1213.18 1543.12,1213.18 1543.7,1213.18 1544.29,1213.18 1544.88,1213.18 1545.46,1213.18 1546.05,1213.18 1546.64,1213.18 1547.22,1213.18 1547.81,1213.18 1548.4,1213.18 1548.98,1213.18 1549.57,1213.18 1550.15,1213.18 1550.74,1213.18 1551.33,1213.18 1551.91,1213.18 1552.5,1213.18 1553.09,1213.18 1553.67,1213.18 1554.26,1213.18 1554.85,1213.18 1555.43,1213.18 1556.02,1213.18 1556.6,1213.18 1557.19,1213.18 1557.78,1213.18 1558.36,1213.18 1558.95,1213.18 1559.54,1213.18 1560.12,1213.18 1560.71,1213.18 1561.3,1213.18 1561.88,1213.18 1562.47,1213.18 1563.06,1213.18 1563.64,1213.18 1564.23,1213.18 1564.81,1213.18 1565.4,1213.18 1565.99,1213.18 1566.57,1213.18 1567.16,1213.18 1567.75,1213.18 1568.33,1213.18 1568.92,1213.18 1569.51,1213.18 1570.09,1213.18 1570.68,1213.18 1571.27,1213.18 1571.85,1213.18 1572.44,1213.18 1573.02,1213.18 1573.61,1213.18 1574.2,1213.18 1574.78,1213.18 1575.37,1213.18 1575.96,1213.18 1576.54,1213.18 1577.13,1213.18 1577.72,1213.18 1578.3,1213.18 1578.89,1213.18 1579.47,1213.18 1580.06,1213.18 1580.65,1213.18 1581.23,1213.18 1581.82,1213.18 1582.41,1213.18 1582.99,1213.18 1583.58,1213.18 1584.17,1213.18 1584.75,1213.18 1585.34,1213.18 1585.93,1213.18 1586.51,1213.18 1587.1,1213.18 1587.68,1213.18 1588.27,1213.18 1588.86,1213.18 1589.44,1213.18 1590.03,1213.18 1590.62,1213.18 1591.2,1213.18 1591.79,1213.18 1592.38,1213.18 1592.96,1213.18 1593.55,1213.18 1594.14,1213.18 1594.72,1213.18 1595.31,1213.18 1595.89,1213.18 1596.48,1213.18 1597.07,1213.18 1597.65,1213.18 1598.24,1213.18 1598.83,1213.18 1599.41,1213.18 1600,1213.18 1600.59,1213.18 1601.17,1213.18 1601.76,1213.18 1602.34,1213.18 1602.93,1213.18 1603.52,1213.18 1604.1,1213.18 1604.69,1213.18 1605.28,1213.18 1605.86,1213.18 1606.45,1213.18 1607.04,1213.18 1607.62,1213.18 1608.21,1213.18 1608.8,1213.18 1609.38,1213.18 1609.97,1213.18 1610.55,1213.18 1611.14,1213.18 1611.73,1213.18 1612.31,1213.18 1612.9,1213.18 1613.49,1213.18 1614.07,1213.18 1614.66,1213.18 1615.25,1213.18 1615.83,1213.18 1616.42,1213.18 1617.01,1213.18 1617.59,1213.18 1618.18,1213.18 1618.76,1213.18 1619.35,1213.18 1619.94,1213.18 1620.52,1213.18 1621.11,1213.18 1621.7,1213.18 1622.28,1213.18 1622.87,1213.18 1623.46,1213.18 1624.04,1213.18 1624.63,1213.18 1625.22,1213.18 1625.8,1213.18 1626.39,1213.18 1626.97,1213.18 1627.56,1213.18 1628.15,1213.18 1628.73,1213.18 1629.32,1213.18 1629.91,1213.18 1630.49,1213.18 1631.08,1213.18 1631.67,1213.18 1632.25,1213.18 1632.84,1213.18 1633.42,1213.18 1634.01,1213.18 1634.6,1213.18 1635.18,1213.18 1635.77,1213.18 1636.36,1213.18 1636.94,1213.18 1637.53,1213.18 1638.12,1213.18 1638.7,1213.18 1639.29,1213.18 1639.88,1213.18 1640.46,1213.18 1641.05,1213.18 1641.63,1213.18 1642.22,1213.18 1642.81,1213.18 1643.39,1213.18 1643.98,1213.18 1644.57,1213.18 1645.15,1213.18 1645.74,1213.18 1646.33,1213.18 1646.91,1213.18 1647.5,1213.18 1648.09,1213.18 1648.67,1213.18 1649.26,1213.18 1649.84,1213.18 1650.43,1213.18 1651.02,1213.18 1651.6,1213.18 1652.19,1213.18 1652.78,1213.18 1653.36,1213.18 1653.95,1213.18 1654.54,1213.18 1655.12,1213.18 1655.71,1213.18 1656.29,1213.18 1656.88,1213.18 1657.47,1213.18 1658.05,1213.18 1658.64,1213.18 1659.23,1213.18 1659.81,1213.18 1660.4,1213.18 1660.99,1213.18 1661.57,1213.18 1662.16,1213.18 1662.75,1213.18 1663.33,1213.18 1663.92,1213.18 1664.5,1213.18 1665.09,1213.18 1665.68,1213.18 1666.26,1213.18 1666.85,1213.18 1667.44,1213.18 1668.02,1213.18 1668.61,1213.18 1669.2,1213.18 1669.78,1213.18 1670.37,1213.18 1670.96,1213.18 1671.54,1213.18 1672.13,1213.18 1672.71,1213.18 1673.3,1213.18 1673.89,1213.18 1674.47,1213.18 1675.06,1213.18 1675.65,1213.18 1676.23,1213.18 1676.82,1213.18 1677.41,1213.18 1677.99,1213.18 1678.58,1213.18 1679.17,1213.18 1679.75,1213.18 1680.34,1213.18 1680.92,1213.18 1681.51,1213.18 1682.1,1213.18 1682.68,1213.18 1683.27,1213.18 1683.86,1213.18 1684.44,1213.18 1685.03,1213.18 1685.62,1213.18 1686.2,1213.18 1686.79,1213.18 1687.37,1213.18 1687.96,1213.18 1688.55,1213.18 1689.13,1213.18 1689.72,1213.18 1690.31,1213.18 1690.89,1213.18 1691.48,1213.18 1692.07,1213.18 1692.65,1213.18 1693.24,1213.18 1693.83,1213.18 1694.41,1213.18 1695,1213.18 1695.58,1213.18 1696.17,1213.18 1696.76,1213.18 1697.34,1213.18 1697.93,1213.18 1698.52,1213.18 1699.1,1213.18 1699.69,1213.18 1700.28,1213.18 1700.86,1213.18 1701.45,1213.18 1702.04,1213.18 1702.62,1213.18 1703.21,1213.18 1703.79,1213.18 1704.38,1213.18 1704.97,1213.18 1705.55,1213.18 1706.14,1213.18 1706.73,1213.18 1707.31,1213.18 1707.9,1213.18 1708.49,1213.18 1709.07,1213.18 1709.66,1213.18 1710.24,1213.18 1710.83,1213.18 1711.42,1213.18 1712,1213.18 1712.59,1213.18 1713.18,1213.18 1713.76,1213.18 1714.35,1213.18 1714.94,1213.18 1715.52,1213.18 1716.11,1213.18 1716.7,1213.18 1717.28,1213.18 1717.87,1213.18 1718.45,1213.18 1719.04,1213.18 1719.63,1213.18 1720.21,1213.18 1720.8,1213.18 1721.39,1213.18 1721.97,1213.18 1722.56,1213.18 1723.15,1213.18 1723.73,1213.18 1724.32,1213.18 1724.91,1213.18 1725.49,1213.18 1726.08,1213.18 1726.66,1213.18 1727.25,1213.18 1727.84,1213.18 1728.42,1213.18 1729.01,1213.18 1729.6,1213.18 1730.18,1213.18 1730.77,1213.18 1731.36,1213.18 1731.94,1213.18 1732.53,1213.18 1733.11,1213.18 1733.7,1213.18 1734.29,1213.18 1734.87,1213.18 1735.46,1213.18 1736.05,1213.18 1736.63,1213.18 1737.22,1213.18 1737.81,1213.18 1738.39,1213.18 1738.98,1213.18 1739.57,1213.18 1740.15,1213.18 1740.74,1213.18 1741.32,1213.18 1741.91,1213.18 1742.5,1213.18 1743.08,1213.18 1743.67,1213.18 1744.26,1213.18 1744.84,1213.18 1745.43,1213.18 1746.02,1213.18 1746.6,1213.18 1747.19,1213.18 1747.78,1213.18 1748.36,1213.18 1748.95,1213.18 1749.53,1213.18 1750.12,1213.18 1750.71,1213.18 1751.29,1213.18 1751.88,1213.18 1752.47,1213.18 1753.05,1213.18 1753.64,1213.18 1754.23,1213.18 1754.81,1213.18 1755.4,1213.18 1755.99,1213.18 1756.57,1213.18 1757.16,1213.18 1757.74,1213.18 1758.33,1213.18 1758.92,1213.18 1759.5,1213.18 1760.09,1213.18 1760.68,1213.18 1761.26,1213.18 1761.85,1213.18 1762.44,1213.18 1763.02,1213.18 1763.61,1213.18 1764.19,1213.18 1764.78,1213.18 1765.37,1213.18 1765.95,1213.18 1766.54,1213.18 1767.13,1213.18 1767.71,1213.18 1768.3,1213.18 1768.89,1213.18 1769.47,1213.18 1770.06,1213.18 1770.65,1213.18 1771.23,1213.18 1771.82,1213.18 1772.4,1213.18 1772.99,1213.18 1773.58,1213.18 1774.16,1213.18 1774.75,1213.18 1775.34,1213.18 1775.92,1213.18 1776.51,1213.18 1777.1,1213.18 1777.68,1213.18 1778.27,1213.18 1778.86,1213.18 1779.44,1213.18 1780.03,1213.18 1780.61,1213.18 1781.2,1213.18 1781.79,1213.18 1782.37,1213.18 1782.96,1213.18 1783.55,1213.18 1784.13,1213.18 1784.72,1213.18 1785.31,1213.18 1785.89,1213.18 1786.48,1213.18 1787.06,1213.18 1787.65,1213.18 1788.24,1213.18 1788.82,1213.18 1789.41,1213.18 1790,1213.18 1790.58,1213.18 1791.17,1213.18 1791.76,1213.18 1792.34,1213.18 1792.93,1213.18 1793.52,1213.18 1794.1,1213.18 1794.69,1213.18 1795.27,1213.18 1795.86,1213.18 1796.45,1213.18 1797.03,1213.18 1797.62,1213.18 1798.21,1213.18 1798.79,1213.18 1799.38,1213.18 1799.97,1213.18 1800.55,1213.18 1801.14,1213.18 1801.73,1213.18 1802.31,1213.18 1802.9,1213.18 1803.48,1213.18 1804.07,1213.18 1804.66,1213.18 1805.24,1213.18 1805.83,1213.18 1806.42,1213.18 1807,1213.18 1807.59,1213.18 1808.18,1213.18 1808.76,1213.18 1809.35,1213.18 1809.94,1213.18 1810.52,1213.18 1811.11,1213.18 1811.69,1213.18 1812.28,1213.18 1812.87,1213.18 1813.45,1213.18 1814.04,1213.18 1814.63,1213.18 1815.21,1213.18 1815.8,1213.18 1816.39,1213.18 1816.97,1213.18 1817.56,1213.18 1818.14,1213.18 1818.73,1213.18 1819.32,1213.18 1819.9,1213.18 1820.49,1213.18 1821.08,1213.18 1821.66,1213.18 1822.25,1213.18 1822.84,1213.18 1823.42,1213.18 1824.01,1213.18 1824.6,1213.18 1825.18,1213.18 1825.77,1213.18 1826.35,1213.18 1826.94,1213.18 1827.53,1213.18 1828.11,1213.18 1828.7,1213.18 1829.29,1213.18 1829.87,1213.18 1830.46,1213.18 1831.05,1213.18 1831.63,1213.18 1832.22,1213.18 1832.81,1213.18 1833.39,1213.18 1833.98,1213.18 1834.56,1213.18 1835.15,1213.18 1835.74,1213.18 1836.32,1213.18 1836.91,1213.18 1837.5,1213.18 1838.08,1213.18 1838.67,1213.18 1839.26,1213.18 1839.84,1213.18 1840.43,1213.18 1841.01,1213.18 1841.6,1213.18 1842.19,1213.18 1842.77,1213.18 1843.36,1213.18 1843.95,1213.18 1844.53,1213.18 1845.12,1213.18 1845.71,1213.18 1846.29,1213.18 1846.88,1213.18 1847.47,1213.18 1848.05,1213.18 1848.64,1213.18 1849.22,1213.18 1849.81,1213.18 1850.4,1213.18 1850.98,1213.18 1851.57,1213.18 1852.16,1213.18 1852.74,1213.18 1853.33,1213.18 1853.92,1213.18 1854.5,1213.18 1855.09,1213.18 1855.68,1213.18 1856.26,1213.18 1856.85,1213.18 1857.43,1213.18 1858.02,1213.18 1858.61,1213.18 1859.19,1213.18 1859.78,1213.18 1860.37,1213.18 1860.95,1213.18 1861.54,1213.18 1862.13,1213.18 1862.71,1213.18 1863.3,1213.18 1863.88,1213.18 1864.47,1213.18 1865.06,1213.18 1865.64,1213.18 1866.23,1213.18 1866.82,1213.18 1867.4,1213.18 1867.99,1213.18 1868.58,1213.18 1869.16,1213.18 1869.75,1213.18 1870.34,1213.18 1870.92,1213.18 1871.51,1213.18 1872.09,1213.18 1872.68,1213.18 1873.27,1213.18 1873.85,1213.18 1874.44,1213.18 1875.03,1213.18 1875.61,1213.18 1876.2,1213.18 1876.79,1213.18 1877.37,1213.18 1877.96,1213.18 1878.55,1213.18 1879.13,1213.18 1879.72,1213.18 1880.3,1213.18 1880.89,1213.18 1881.48,1213.18 1882.06,1213.18 1882.65,1213.18 1883.24,1213.18 1883.82,1213.18 1884.41,1213.18 1885,1213.18 1885.58,1213.18 1886.17,1213.18 1886.76,1213.18 1887.34,1213.18 1887.93,1213.18 1888.51,1213.18 1889.1,1213.18 1889.69,1213.18 1890.27,1213.18 1890.86,1213.18 1891.45,1213.18 1892.03,1213.18 1892.62,1213.18 1893.21,1213.18 1893.79,1213.18 1894.38,1213.18 1894.96,1213.18 1895.55,1213.18 1896.14,1213.18 1896.72,1213.18 1897.31,1213.18 1897.9,1213.18 1898.48,1213.18 1899.07,1213.18 1899.66,1213.18 1900.24,1213.18 1900.83,1213.18 1901.42,1213.18 1902,1213.18 1902.59,1213.18 1903.17,1213.18 1903.76,1213.18 1904.35,1213.18 1904.93,1213.18 1905.52,1213.18 1906.11,1213.18 1906.69,1213.18 1907.28,1213.18 1907.87,1213.18 1908.45,1213.18 1909.04,1213.18 1909.63,1213.18 1910.21,1213.18 1910.8,1213.18 1911.38,1213.18 1911.97,1213.18 1912.56,1213.18 1913.14,1213.18 1913.73,1213.18 1914.32,1213.18 1914.9,1213.18 1915.49,1213.18 1916.08,1213.18 1916.66,1213.18 1917.25,1213.18 1917.83,1213.18 1918.42,1213.18 1919.01,1213.18 1919.59,1213.18 1920.18,1213.18 1920.77,1213.18 1921.35,1213.18 1921.94,1213.18 1922.53,1213.18 1923.11,1213.18 1923.7,1213.18 1924.29,1213.18 1924.87,1213.18 1925.46,1213.18 1926.04,1213.18 1926.63,1213.18 1927.22,1213.18 1927.8,1213.18 1928.39,1213.18 1928.98,1213.18 1929.56,1213.18 1930.15,1213.18 1930.74,1213.18 1931.32,1213.18 1931.91,1213.18 1932.5,1213.18 1933.08,1213.18 1933.67,1213.18 1934.25,1213.18 1934.84,1213.18 1935.43,1213.18 1936.01,1213.18 1936.6,1213.18 1937.19,1213.18 1937.77,1213.18 1938.36,1213.18 1938.95,1213.18 1939.53,1213.18 1940.12,1213.18 1940.71,1213.18 1941.29,1213.18 1941.88,1213.18 1942.46,1213.18 1943.05,1213.18 1943.64,1213.18 1944.22,1213.18 1944.81,1213.18 1945.4,1213.18 1945.98,1213.18 1946.57,1213.18 1947.16,1213.18 1947.74,1213.18 1948.33,1213.18 1948.91,1213.18 1949.5,1213.18 1950.09,1213.18 1950.67,1213.18 1951.26,1213.18 1951.85,1213.18 1952.43,1213.18 1953.02,1213.18 1953.61,1213.18 1954.19,1213.18 1954.78,1213.18 1955.37,1213.18 1955.95,1213.18 1956.54,1213.18 1957.12,1213.18 1957.71,1213.18 1958.3,1213.18 1958.88,1213.18 1959.47,1213.18 1960.06,1213.18 1960.64,1213.18 1961.23,1213.18 1961.82,1213.18 1962.4,1213.18 1962.99,1213.18 1963.58,1213.18 1964.16,1213.18 1964.75,1213.18 1965.33,1213.18 1965.92,1213.18 1966.51,1213.18 1967.09,1213.18 1967.68,1213.18 1968.27,1213.18 1968.85,1213.18 1969.44,1213.18 1970.03,1213.18 1970.61,1213.18 1971.2,1213.18 1971.78,1213.18 1972.37,1213.18 1972.96,1213.18 1973.54,1213.18 1974.13,1213.18 1974.72,1213.18 1975.3,1213.18 1975.89,1213.18 1976.48,1213.18 1977.06,1213.18 1977.65,1213.18 1978.24,1213.18 1978.82,1213.18 1979.41,1213.18 1979.99,1213.18 1980.58,1213.18 1981.17,1213.18 1981.75,1213.18 1982.34,1213.18 1982.93,1213.18 1983.51,1213.18 1984.1,1213.18 1984.69,1213.18 1985.27,1213.18 1985.86,1213.18 1986.45,1213.18 1987.03,1213.18 1987.62,1213.18 1988.2,1213.18 1988.79,1213.18 1989.38,1213.18 1989.96,1213.18 1990.55,1213.18 1991.14,1213.18 1991.72,1213.18 1992.31,1213.18 1992.9,1213.18 1993.48,1213.18 1994.07,1213.18 1994.65,1213.18 1995.24,1213.18 1995.83,1213.18 1996.41,1213.18 1997,1213.18 1997.59,1213.18 1998.17,1213.18 1998.76,1213.18 1999.35,1213.18 1999.93,1213.18 2000.52,1213.18 2001.11,1213.18 2001.69,1213.18 2002.28,1213.18 2002.86,1213.18 2003.45,1213.18 2004.04,1213.18 2004.62,1213.18 2005.21,1213.18 2005.8,1213.18 2006.38,1213.18 2006.97,1213.18 2007.56,1213.18 2008.14,1213.18 2008.73,1213.18 2009.32,1213.18 2009.9,1213.18 2010.49,1213.18 2011.07,1213.18 2011.66,1213.18 2012.25,1213.18 2012.83,1213.18 2013.42,1213.18 2014.01,1213.18 2014.59,1213.18 2015.18,1213.18 2015.77,1213.18 2016.35,1213.18 2016.94,1213.18 2017.53,1213.18 2018.11,1213.18 2018.7,1213.18 2019.28,1213.18 2019.87,1213.18 2020.46,1213.18 2021.04,1213.18 2021.63,1213.18 2022.22,1213.18 2022.8,1213.18 2023.39,1213.18 2023.98,1213.18 2024.56,1213.18 2025.15,1213.18 2025.73,1213.18 2026.32,1213.18 2026.91,1213.18 2027.49,1213.18 2028.08,1213.18 2028.67,1213.18 2029.25,1213.18 2029.84,1213.18 2030.43,1213.18 2031.01,1213.18 2031.6,1213.18 2032.19,1213.18 2032.77,1213.18 2033.36,1213.18 2033.94,1213.18 2034.53,1213.18 2035.12,1213.18 2035.7,1213.18 2036.29,1213.18 2036.88,1213.18 2037.46,1213.18 2038.05,1213.18 2038.64,1213.18 2039.22,1213.18 2039.81,1213.18 2040.4,1213.18 2040.98,1213.18 2041.57,1213.18 2042.15,1213.18 2042.74,1213.18 2043.33,1213.18 2043.91,1213.18 2044.5,1213.18 2045.09,1213.18 2045.67,1213.18 2046.26,1213.18 2046.85,1213.18 2047.43,1213.18 2048.02,1213.18 2048.6,1213.18 2049.19,1213.18 2049.78,1213.18 2050.36,1213.18 2050.95,1213.18 2051.54,1213.18 2052.12,1213.18 2052.71,1213.18 2053.3,1213.18 2053.88,1213.18 2054.47,1213.18 2055.06,1213.18 2055.64,1213.18 2056.23,1213.18 2056.81,1213.18 2057.4,1213.18 2057.99,1213.18 2058.57,1213.18 2059.16,1213.18 2059.75,1213.18 2060.33,1213.18 2060.92,1213.18 2061.51,1213.18 2062.09,1213.18 2062.68,1213.18 2063.27,1213.18 2063.85,1213.18 2064.44,1213.18 2065.02,1213.18 2065.61,1213.18 2066.2,1213.18 2066.78,1213.18 2067.37,1213.18 2067.96,1213.18 2068.54,1213.18 2069.13,1213.18 2069.72,1213.18 2070.3,1213.18 2070.89,1213.18 2071.48,1213.18 2072.06,1213.18 2072.65,1213.18 2073.23,1213.18 2073.82,1213.18 2074.41,1213.18 2074.99,1213.18 2075.58,1213.18 2076.17,1213.18 2076.75,1213.18 2077.34,1213.18 2077.93,1213.18 2078.51,1213.18 2079.1,1213.18 2079.68,1213.18 2080.27,1213.18 2080.86,1213.18 2081.44,1213.18 2082.03,1213.18 2082.62,1213.18 2083.2,1213.18 2083.79,1213.18 2084.38,1213.18 2084.96,1213.18 2085.55,1213.18 2086.14,1213.18 2086.72,1213.18 2087.31,1213.18 2087.89,1213.18 2088.48,1213.18 2089.07,1213.18 2089.65,1213.18 2090.24,1213.18 2090.83,1213.18 2091.41,1213.18 2092,1213.18 2092.59,1213.18 2093.17,1213.18 2093.76,1213.18 2094.35,1213.18 2094.93,1213.18 2095.52,1213.18 2096.1,1213.18 2096.69,1213.18 2097.28,1213.18 2097.86,1213.18 2098.45,1213.18 2099.04,1213.18 2099.62,1213.18 2100.21,1213.18 2100.8,1213.18 2101.38,1213.18 2101.97,1213.18 2102.55,1213.18 2103.14,1213.18 2103.73,1213.18 2104.31,1213.18 2104.9,1213.18 2105.49,1213.18 2106.07,1213.18 2106.66,1213.18 2107.25,1213.18 2107.83,1213.18 2108.42,1213.18 2109.01,1213.18 2109.59,1213.18 2110.18,1213.18 2110.76,1213.18 2111.35,1213.18 2111.94,1213.18 2112.52,1213.18 2113.11,1213.18 2113.7,1213.18 2114.28,1213.18 2114.87,1213.18 2115.46,1213.18 2116.04,1213.18 2116.63,1213.18 2117.22,1213.18 2117.8,1213.18 2118.39,1213.18 2118.97,1213.18 2119.56,1213.18 2120.15,1213.18 2120.73,1213.18 2121.32,1213.18 2121.91,1213.18 2122.49,1213.18 2123.08,1213.18 2123.67,1213.18 2124.25,1213.18 2124.84,1213.18 2125.42,1213.18 2126.01,1213.18 2126.6,1213.18 2127.18,1213.18 2127.77,1213.18 2128.36,1213.18 2128.94,1213.18 2129.53,1213.18 2130.12,1213.18 2130.7,1213.18 2131.29,1213.18 2131.88,1213.18 2132.46,1213.18 2133.05,1213.18 2133.63,1213.18 2134.22,1213.18 2134.81,1213.18 2135.39,1213.18 2135.98,1213.18 2136.57,1213.18 2137.15,1213.18 2137.74,1213.18 2138.33,1213.18 2138.91,1213.18 2139.5,1213.18 2140.09,1213.18 2140.67,1213.18 2141.26,1213.18 2141.84,1213.18 2142.43,1213.18 2143.02,1213.18 2143.6,1213.18 2144.19,1213.18 2144.78,1213.18 2145.36,1213.18 2145.95,1213.18 2146.54,1213.18 2147.12,1213.18 2147.71,1213.18 2148.3,1213.18 2148.88,1213.18 2149.47,1213.18 2150.05,1213.18 2150.64,1213.18 2151.23,1213.18 2151.81,1213.18 2152.4,1213.18 2152.99,1213.18 2153.57,1213.18 2154.16,1213.18 2154.75,1213.18 2155.33,1213.18 2155.92,1213.18 2156.5,1213.18 2157.09,1213.18 2157.68,1213.18 2158.26,1213.18 \"/>\n<path clip-path=\"url(#clip812)\" d=\"M986.025 1213.01 L986.612 1213.01 L987.198 1213.01 L987.785 1213.01 L988.371 1213.01 L988.957 1213.01 L989.544 1213.01 L990.13 1213.01 L990.717 1213.01 L991.303 1213.01 L991.889 1213.01 L992.476 1213.01 L993.062 1213.01 L993.649 1213.01 L994.235 1213.01 L994.822 1213.01 L995.408 1213.01 L995.994 1213.01 L996.581 1213.01 L997.167 1213.01 L997.754 1213.01 L998.34 1213.01 L998.926 1213.01 L999.513 1213.01 L1000.1 1213.01 L1000.69 1213.01 L1001.27 1213.01 L1001.86 1213.01 L1002.44 1213.01 L1003.03 1213.01 L1003.62 1213.01 L1004.2 1213.01 L1004.79 1213.01 L1005.38 1213.01 L1005.96 1213.01 L1006.55 1213.01 L1007.14 1213.01 L1007.72 1213.01 L1008.31 1213.01 L1008.9 1213.01 L1009.48 1213.01 L1010.07 1213.01 L1010.65 1213.01 L1011.24 1213.01 L1011.83 1213.01 L1012.41 1213.01 L1013 1213.01 L1013.59 1213.01 L1014.17 1213.01 L1014.76 1213.01 L1015.35 1213.01 L1015.93 1213.01 L1016.52 1213.01 L1017.11 1213.01 L1017.69 1213.01 L1018.28 1213.01 L1018.86 1213.01 L1019.45 1213.01 L1020.04 1213.01 L1020.62 1213.01 L1021.21 1213.01 L1021.8 1213.01 L1022.38 1213.01 L1022.97 1213.01 L1023.56 1213.01 L1024.14 1213.01 L1024.73 1213.01 L1025.32 1213.01 L1025.9 1213.01 L1026.49 1213.01 L1027.07 1213.01 L1027.66 1213.01 L1028.25 1213.01 L1028.83 1213.01 L1029.42 1213.01 L1030.01 1213.01 L1030.59 1213.01 L1031.18 1213.01 L1031.77 1213.01 L1032.35 1213.01 L1032.94 1213.01 L1033.52 1213.01 L1034.11 1213.01 L1034.7 1213.01 L1035.28 1213.01 L1035.87 1213.01 L1036.46 1213.01 L1037.04 1213.01 L1037.63 1213.01 L1038.22 1213.01 L1038.8 1213.01 L1039.39 1213.01 L1039.98 1213.01 L1040.56 1213.01 L1041.15 1213.01 L1041.73 1213.01 L1042.32 1213.01 L1042.91 1213.01 L1043.49 1213.01 L1044.08 1213.01 L1044.67 1213.01 L1045.25 1213.01 L1045.84 1213.01 L1046.43 1213.01 L1047.01 1213.01 L1047.6 1213.01 L1048.19 1213.01 L1048.77 1213.01 L1049.36 1213.01 L1049.94 1213.01 L1050.53 1213.01 L1051.12 1213.01 L1051.7 1213.01 L1052.29 1213.01 L1052.88 1213.01 L1053.46 1213.01 L1054.05 1213.01 L1054.64 1213.01 L1055.22 1213.01 L1055.81 1213.01 L1056.39 1213.01 L1056.98 1213.01 L1057.57 1213.01 L1058.15 1213.01 L1058.74 1213.01 L1059.33 1213.01 L1059.91 1213.01 L1060.5 1213.01 L1061.09 1213.01 L1061.67 1213.01 L1062.26 1213.01 L1062.85 1213.01 L1063.43 1213.01 L1064.02 1213.01 L1064.6 1213.01 L1065.19 1213.01 L1065.78 1213.01 L1066.36 1213.01 L1066.95 1213.01 L1067.54 1213.01 L1068.12 1213.01 L1068.71 1213.01 L1069.3 1213.01 L1069.88 1213.01 L1070.47 1213.01 L1071.06 1213.01 L1071.64 1213.01 L1072.23 1213.01 L1072.81 1213.01 L1073.4 1213.01 L1073.99 1213.01 L1074.57 1213.01 L1075.16 1213.01 L1075.75 1213.01 L1076.33 1213.01 L1076.92 1213.01 L1077.51 1213.01 L1078.09 1213.01 L1078.68 1213.01 L1079.26 1213.01 L1079.85 1213.01 L1080.44 1213.01 L1081.02 1213.01 L1081.61 1213.01 L1082.2 1213.01 L1082.78 1213.01 L1083.37 1213.01 L1083.96 1213.01 L1084.54 1213.01 L1085.13 1213.01 L1085.72 1213.01 L1086.3 1213.01 L1086.89 1213.01 L1087.47 1213.01 L1088.06 1213.01 L1088.65 1213.01 L1089.23 1213.01 L1089.82 1213.01 L1090.41 1213.01 L1090.99 1213.01 L1091.58 1213.01 L1092.17 1213.01 L1092.75 1213.01 L1093.34 1213.01 L1093.93 1213.01 L1094.51 1213.01 L1095.1 1213.01 L1095.68 1213.01 L1096.27 1213.01 L1096.86 1213.01 L1097.44 1213.01 L1098.03 1213.01 L1098.62 1213.01 L1099.2 1213.01 L1099.79 1213.01 L1100.38 1213.01 L1100.96 1213.01 L1101.55 1213.01 L1102.14 1213.01 L1102.72 1213.01 L1103.31 1213.01 L1103.89 1213.01 L1104.48 1213.01 L1105.07 1213.01 L1105.65 1213.01 L1106.24 1213.01 L1106.83 1213.01 L1107.41 1213.01 L1108 1213.01 L1108.59 1213.01 L1109.17 1213.01 L1109.76 1213.01 L1110.34 1213.01 L1110.93 1213.01 L1111.52 1213.01 L1112.1 1213.01 L1112.69 1213.01 L1113.28 1213.01 L1113.86 1213.01 L1114.45 1213.01 L1115.04 1213.01 L1115.62 1213.01 L1116.21 1213.01 L1116.8 1213.01 L1117.38 1213.01 L1117.97 1213.01 L1118.55 1213.01 L1119.14 1213.01 L1119.73 1213.01 L1120.31 1213.01 L1120.9 1213.01 L1121.49 1213.01 L1122.07 1213.01 L1122.66 1213.01 L1123.25 1213.01 L1123.83 1213.01 L1124.42 1213.01 L1125.01 1213.01 L1125.59 1213.01 L1126.18 1213.01 L1126.76 1213.01 L1127.35 1213.01 L1127.94 1213.01 L1128.52 1213.01 L1129.11 1213.01 L1129.7 1213.01 L1130.28 1213.01 L1130.87 1213.01 L1131.46 1213.01 L1132.04 1213.01 L1132.63 1213.01 L1133.21 1213.01 L1133.8 1213.01 L1134.39 1213.01 L1134.97 1213.01 L1135.56 1213.01 L1136.15 1213.01 L1136.73 1213.01 L1137.32 1213.01 L1137.91 1213.01 L1138.49 1213.01 L1139.08 1213.01 L1139.67 1213.01 L1140.25 1213.01 L1140.84 1213.01 L1141.42 1213.01 L1142.01 1213.01 L1142.6 1213.01 L1143.18 1213.01 L1143.77 1213.01 L1144.36 1213.01 L1144.94 1213.01 L1145.53 1213.01 L1146.12 1213.01 L1146.7 1213.01 L1147.29 1213.01 L1147.88 1213.01 L1148.46 1213.01 L1149.05 1213.01 L1149.63 1213.01 L1150.22 1213.01 L1150.81 1213.01 L1151.39 1213.01 L1151.98 1213.01 L1152.57 1213.01 L1153.15 1213.01 L1153.74 1213.01 L1154.33 1213.01 L1154.91 1213.01 L1155.5 1213.01 L1156.09 1213.01 L1156.67 1213.01 L1157.26 1213.01 L1157.84 1213.01 L1158.43 1213.01 L1159.02 1213.01 L1159.6 1213.01 L1160.19 1213.01 L1160.78 1213.01 L1161.36 1213.01 L1161.95 1213.01 L1162.54 1213.01 L1163.12 1213.01 L1163.71 1213.01 L1164.29 1213.01 L1164.88 1213.01 L1165.47 1213.01 L1166.05 1213.01 L1166.64 1213.01 L1167.23 1213.01 L1167.81 1213.01 L1168.4 1213.01 L1168.99 1213.01 L1169.57 1213.01 L1170.16 1213.01 L1170.75 1213.01 L1171.33 1213.01 L1171.92 1213.01 L1172.5 1213.01 L1173.09 1213.01 L1173.68 1213.01 L1174.26 1213.01 L1174.85 1213.01 L1175.44 1213.01 L1176.02 1213.01 L1176.61 1213.01 L1177.2 1213.01 L1177.78 1213.01 L1178.37 1213.01 L1178.96 1213.01 L1179.54 1213.01 L1180.13 1213.01 L1180.71 1213.01 L1181.3 1213.01 L1181.89 1213.01 L1182.47 1213.01 L1183.06 1213.01 L1183.65 1213.01 L1184.23 1213.01 L1184.82 1213.01 L1185.41 1213.01 L1185.99 1213.01 L1186.58 1213.01 L1187.16 1213.01 L1187.75 1213.01 L1188.34 1213.01 L1188.92 1213.01 L1189.51 1213.01 L1190.1 1213.01 L1190.68 1213.01 L1191.27 1213.01 L1191.86 1213.01 L1192.44 1213.01 L1193.03 1213.01 L1193.62 1213.01 L1194.2 1213.01 L1194.79 1213.01 L1195.37 1213.01 L1195.96 1213.01 L1196.55 1213.01 L1197.13 1213.01 L1197.72 1213.01 L1198.31 1213.01 L1198.89 1213.01 L1199.48 1213.01 L1200.07 1213.01 L1200.65 1213.01 L1201.24 1213.01 L1201.83 1213.01 L1202.41 1213.01 L1203 1213.01 L1203.58 1213.01 L1204.17 1213.01 L1204.76 1213.01 L1205.34 1213.01 L1205.93 1213.01 L1206.52 1213.01 L1207.1 1213.01 L1207.69 1213.01 L1208.28 1213.01 L1208.86 1213.01 L1209.45 1213.01 L1210.03 1213.01 L1210.62 1213.01 L1211.21 1213.01 L1211.79 1213.01 L1212.38 1213.01 L1212.97 1213.01 L1213.55 1213.01 L1214.14 1213.01 L1214.73 1213.01 L1215.31 1213.01 L1215.9 1213.01 L1216.49 1213.01 L1217.07 1213.01 L1217.66 1213.01 L1218.24 1213.01 L1218.83 1213.01 L1219.42 1213.01 L1220 1213.01 L1220.59 1213.01 L1221.18 1213.01 L1221.76 1213.01 L1222.35 1213.01 L1222.94 1213.01 L1223.52 1213.01 L1224.11 1213.01 L1224.7 1213.01 L1225.28 1213.01 L1225.87 1213.01 L1226.45 1213.01 L1227.04 1213.01 L1227.63 1213.01 L1228.21 1213.01 L1228.8 1213.01 L1229.39 1213.01 L1229.97 1213.01 L1230.56 1213.01 L1231.15 1213.01 L1231.73 1213.01 L1232.32 1213.01 L1232.91 1213.01 L1233.49 1213.01 L1234.08 1213.01 L1234.66 1213.01 L1235.25 1213.01 L1235.84 1213.01 L1236.42 1213.01 L1237.01 1213.01 L1237.6 1213.01 L1238.18 1213.01 L1238.77 1213.01 L1239.36 1213.01 L1239.94 1213.01 L1240.53 1213.01 L1241.11 1213.01 L1241.7 1213.01 L1242.29 1213.01 L1242.87 1213.01 L1243.46 1213.01 L1244.05 1213.01 L1244.63 1213.01 L1245.22 1213.01 L1245.81 1213.01 L1246.39 1213.01 L1246.98 1213.01 L1247.57 1213.01 L1248.15 1213.01 L1248.74 1213.01 L1249.32 1213.01 L1249.91 1213.01 L1250.5 1213.01 L1251.08 1213.01 L1251.67 1213.01 L1252.26 1213.01 L1252.84 1213.01 L1253.43 1213.01 L1254.02 1213.01 L1254.6 1213.01 L1255.19 1213.01 L1255.78 1213.01 L1256.36 1213.01 L1256.95 1213.01 L1257.53 1213.01 L1258.12 1213.01 L1258.71 1213.01 L1259.29 1213.01 L1259.88 1213.01 L1260.47 1213.01 L1261.05 1213.01 L1261.64 1213.01 L1262.23 1213.01 L1262.81 1213.01 L1263.4 1213.01 L1263.98 1213.01 L1264.57 1213.01 L1265.16 1213.01 L1265.74 1213.01 L1266.33 1213.01 L1266.92 1213.01 L1267.5 1213.01 L1268.09 1213.01 L1268.68 1213.01 L1269.26 1213.01 L1269.85 1213.01 L1270.44 1213.01 L1271.02 1213.01 L1271.61 1213.01 L1272.19 1213.01 L1272.78 1213.01 L1273.37 1213.01 L1273.95 1213.01 L1274.54 1213.01 L1275.13 1213.01 L1275.71 1213.01 L1276.3 1213.01 L1276.89 1213.01 L1277.47 1213.01 L1278.06 1213.01 L1278.65 1213.01 L1279.23 1213.01 L1279.82 1213.01 L1280.4 1213.01 L1280.99 1213.01 L1281.58 1213.01 L1282.16 1213.01 L1282.75 1213.01 L1283.34 1213.01 L1283.92 1213.01 L1284.51 1213.01 L1285.1 1213.01 L1285.68 1213.01 L1286.27 1213.01 L1286.86 1213.01 L1287.44 1213.01 L1288.03 1213.01 L1288.61 1213.01 L1289.2 1213.01 L1289.79 1213.01 L1290.37 1213.01 L1290.96 1213.01 L1291.55 1213.01 L1292.13 1213.01 L1292.72 1213.01 L1293.31 1213.01 L1293.89 1213.01 L1294.48 1213.01 L1295.06 1213.01 L1295.65 1213.01 L1296.24 1213.01 L1296.82 1213.01 L1297.41 1213.01 L1298 1213.01 L1298.58 1213.01 L1299.17 1213.01 L1299.76 1213.01 L1300.34 1213.01 L1300.93 1213.01 L1301.52 1213.01 L1302.1 1213.01 L1302.69 1213.01 L1303.27 1213.01 L1303.86 1213.01 L1304.45 1213.01 L1305.03 1213.01 L1305.62 1213.01 L1306.21 1213.01 L1306.79 1213.01 L1307.38 1213.01 L1307.97 1213.01 L1308.55 1213.01 L1309.14 1213.01 L1309.73 1213.01 L1310.31 1213.01 L1310.9 1213.01 L1311.48 1213.01 L1312.07 1213.01 L1312.66 1213.01 L1313.24 1213.01 L1313.83 1213.01 L1314.42 1213.01 L1315 1213.01 L1315.59 1213.01 L1316.18 1213.01 L1316.76 1213.01 L1317.35 1213.01 L1317.93 1213.01 L1318.52 1213.01 L1319.11 1213.01 L1319.69 1213.01 L1320.28 1213.01 L1320.87 1213.01 L1321.45 1213.01 L1322.04 1213.01 L1322.63 1213.01 L1323.21 1213.01 L1323.8 1213.01 L1324.39 1213.01 L1324.97 1213.01 L1325.56 1213.01 L1326.14 1213.01 L1326.73 1213.01 L1327.32 1213.01 L1327.9 1213.01 L1328.49 1213.01 L1329.08 1213.01 L1329.66 1213.01 L1330.25 1213.01 L1330.84 1213.01 L1331.42 1213.01 L1332.01 1213.01 L1332.6 1213.01 L1333.18 1213.01 L1333.77 1213.01 L1334.35 1213.01 L1334.94 1213.01 L1335.53 1213.01 L1336.11 1213.01 L1336.7 1213.01 L1337.29 1213.01 L1337.87 1213.01 L1338.46 1213.01 L1339.05 1213.01 L1339.63 1213.01 L1340.22 1213.01 L1340.8 1213.01 L1341.39 1213.01 L1341.98 1213.01 L1342.56 1213.01 L1343.15 1213.01 L1343.74 1213.01 L1344.32 1213.01 L1344.91 1213.01 L1345.5 1213.01 L1346.08 1213.01 L1346.67 1213.01 L1347.26 1213.01 L1347.84 1213.01 L1348.43 1213.01 L1349.01 1213.01 L1349.6 1213.01 L1350.19 1213.01 L1350.77 1213.01 L1351.36 1213.01 L1351.95 1213.01 L1352.53 1213.01 L1353.12 1213.01 L1353.71 1213.01 L1354.29 1213.01 L1354.88 1213.01 L1355.47 1213.01 L1356.05 1213.01 L1356.64 1213.01 L1357.22 1213.01 L1357.81 1213.01 L1358.4 1213.01 L1358.98 1213.01 L1359.57 1213.01 L1360.16 1213.01 L1360.74 1213.01 L1361.33 1213.01 L1361.92 1213.01 L1362.5 1213.01 L1363.09 1213.01 L1363.68 1213.01 L1364.26 1213.01 L1364.85 1213.01 L1365.43 1213.01 L1366.02 1213.01 L1366.61 1213.01 L1367.19 1213.01 L1367.78 1213.01 L1368.37 1213.01 L1368.95 1213.01 L1369.54 1213.01 L1370.13 1213.01 L1370.71 1213.01 L1371.3 1213.01 L1371.88 1213.01 L1372.47 1213.01 L1373.06 1213.01 L1373.64 1213.01 L1374.23 1213.01 L1374.82 1213.01 L1375.4 1213.01 L1375.99 1213.01 L1376.58 1213.01 L1377.16 1213.01 L1377.75 1213.01 L1378.34 1213.01 L1378.92 1213.01 L1379.51 1213.01 L1380.09 1213.01 L1380.68 1213.01 L1381.27 1213.01 L1381.85 1213.01 L1382.44 1213.01 L1383.03 1213.01 L1383.61 1213.01 L1384.2 1213.01 L1384.79 1213.01 L1385.37 1213.01 L1385.96 1213.01 L1386.55 1213.01 L1387.13 1213.01 L1387.72 1213.01 L1388.3 1213.01 L1388.89 1213.01 L1389.48 1213.01 L1390.06 1213.01 L1390.65 1213.01 L1391.24 1213.01 L1391.82 1213.01 L1392.41 1213.01 L1393 1213.01 L1393.58 1213.01 L1394.17 1213.01 L1394.75 1213.01 L1395.34 1213.01 L1395.93 1213.01 L1396.51 1213.01 L1397.1 1213.01 L1397.69 1213.01 L1398.27 1213.01 L1398.86 1213.01 L1399.45 1213.01 L1400.03 1213.01 L1400.62 1213.01 L1401.21 1213.01 L1401.79 1213.01 L1402.38 1213.01 L1402.96 1213.01 L1403.55 1213.01 L1404.14 1213.01 L1404.72 1213.01 L1405.31 1213.01 L1405.9 1213.01 L1406.48 1213.01 L1407.07 1213.01 L1407.66 1213.01 L1408.24 1213.01 L1408.83 1213.01 L1409.42 1213.01 L1410 1213.01 L1410.59 1213.01 L1411.17 1213.01 L1411.76 1213.01 L1412.35 1213.01 L1412.93 1213.01 L1413.52 1213.01 L1414.11 1213.01 L1414.69 1213.01 L1415.28 1213.01 L1415.87 1213.01 L1416.45 1213.01 L1417.04 1213.01 L1417.63 1213.01 L1418.21 1213.01 L1418.8 1213.01 L1419.38 1213.01 L1419.97 1213.01 L1420.56 1213.01 L1421.14 1213.01 L1421.73 1213.01 L1422.32 1213.01 L1422.9 1213.01 L1423.49 1213.01 L1424.08 1213.01 L1424.66 1213.01 L1425.25 1213.01 L1425.83 1213.01 L1426.42 1213.01 L1427.01 1213.01 L1427.59 1213.01 L1428.18 1213.01 L1428.77 1213.01 L1429.35 1213.01 L1429.94 1213.01 L1430.53 1213.01 L1431.11 1213.01 L1431.7 1213.01 L1432.29 1213.01 L1432.87 1213.01 L1433.46 1213.01 L1434.04 1213.01 L1434.63 1213.01 L1435.22 1213.01 L1435.8 1213.01 L1436.39 1213.01 L1436.98 1213.01 L1437.56 1213.01 L1438.15 1213.01 L1438.74 1213.01 L1439.32 1213.01 L1439.91 1213.01 L1440.5 1213.01 L1441.08 1213.01 L1441.67 1213.01 L1442.25 1213.01 L1442.84 1213.01 L1443.43 1213.01 L1444.01 1213.01 L1444.6 1213.01 L1445.19 1213.01 L1445.77 1213.01 L1446.36 1213.01 L1446.95 1213.01 L1447.53 1213.01 L1448.12 1213.01 L1448.7 1213.01 L1449.29 1213.01 L1449.88 1213.01 L1450.46 1213.01 L1451.05 1213.01 L1451.64 1213.01 L1452.22 1213.01 L1452.81 1213.01 L1453.4 1213.01 L1453.98 1213.01 L1454.57 1213.01 L1455.16 1213.01 L1455.74 1213.01 L1456.33 1213.01 L1456.91 1213.01 L1457.5 1213.01 L1458.09 1213.01 L1458.67 1213.01 L1459.26 1213.01 L1459.85 1213.01 L1460.43 1213.01 L1461.02 1213.01 L1461.61 1213.01 L1462.19 1213.01 L1462.78 1213.01 L1463.37 1213.01 L1463.95 1213.01 L1464.54 1213.01 L1465.12 1213.01 L1465.71 1213.01 L1466.3 1213.01 L1466.88 1213.01 L1467.47 1213.01 L1468.06 1213.01 L1468.64 1213.01 L1469.23 1213.01 L1469.82 1213.01 L1470.4 1213.01 L1470.99 1213.01 L1471.57 1213.01 L1472.16 1213.01 L1472.75 1213.01 L1473.33 1213.01 L1473.92 1213.01 L1474.51 1213.01 L1475.09 1213.01 L1475.68 1213.01 L1476.27 1213.01 L1476.85 1213.01 L1477.44 1213.01 L1478.03 1213.01 L1478.61 1213.01 L1479.2 1213.01 L1479.78 1213.01 L1480.37 1213.01 L1480.96 1213.01 L1481.54 1213.01 L1482.13 1213.01 L1482.72 1213.01 L1483.3 1213.01 L1483.89 1213.01 L1484.48 1213.01 L1485.06 1213.01 L1485.65 1213.01 L1486.24 1213.01 L1486.82 1213.01 L1487.41 1213.01 L1487.99 1213.01 L1488.58 1213.01 L1489.17 1213.01 L1489.75 1213.01 L1490.34 1213.01 L1490.93 1213.01 L1491.51 1213.01 L1492.1 1213.01 L1492.69 1213.01 L1493.27 1213.01 L1493.86 1213.01 L1494.45 1213.01 L1495.03 1213.01 L1495.62 1213.01 L1496.2 1213.01 L1496.79 1213.01 L1497.38 1213.01 L1497.96 1213.01 L1498.55 1213.01 L1499.14 1213.01 L1499.72 1213.01 L1500.31 1213.01 L1500.9 1213.01 L1501.48 1213.01 L1502.07 1213.01 L1502.65 1213.01 L1503.24 1213.01 L1503.83 1213.01 L1504.41 1213.01 L1505 1213.01 L1505.59 1213.01 L1506.17 1213.01 L1506.76 1213.01 L1507.35 1213.01 L1507.93 1213.01 L1508.52 1213.01 L1509.11 1213.01 L1509.69 1213.01 L1510.28 1213.01 L1510.86 1213.01 L1511.45 1213.01 L1512.04 1213.01 L1512.62 1213.01 L1513.21 1213.01 L1513.8 1213.01 L1514.38 1213.01 L1514.97 1213.01 L1515.56 1213.01 L1516.14 1213.01 L1516.73 1213.01 L1517.32 1213.01 L1517.9 1213.01 L1518.49 1213.01 L1519.07 1213.01 L1519.66 1213.01 L1520.25 1213.01 L1520.83 1213.01 L1521.42 1213.01 L1522.01 1213.01 L1522.59 1213.01 L1523.18 1213.01 L1523.77 1213.01 L1524.35 1213.01 L1524.94 1213.01 L1525.52 1213.01 L1526.11 1213.01 L1526.7 1213.01 L1527.28 1213.01 L1527.87 1213.01 L1528.46 1213.01 L1529.04 1213.01 L1529.63 1213.01 L1530.22 1213.01 L1530.8 1213.01 L1531.39 1213.01 L1531.98 1213.01 L1532.56 1213.01 L1533.15 1213.01 L1533.73 1213.01 L1534.32 1213.01 L1534.91 1213.01 L1535.49 1213.01 L1536.08 1213.01 L1536.67 1213.01 L1537.25 1213.01 L1537.84 1213.01 L1538.43 1213.01 L1539.01 1213.01 L1539.6 1213.01 L1540.19 1213.01 L1540.77 1213.01 L1541.36 1213.01 L1541.94 1213.01 L1542.53 1213.01 L1543.12 1213.01 L1543.7 1213.01 L1544.29 1213.01 L1544.88 1213.01 L1545.46 1213.01 L1546.05 1213.01 L1546.64 1213.01 L1547.22 1213.01 L1547.81 1213.01 L1548.4 1213.01 L1548.98 1213.01 L1549.57 1213.01 L1550.15 1213.01 L1550.74 1213.01 L1551.33 1213.01 L1551.91 1213.01 L1552.5 1213.01 L1553.09 1213.01 L1553.67 1213.01 L1554.26 1213.01 L1554.85 1213.01 L1555.43 1213.01 L1556.02 1213.01 L1556.6 1213.01 L1557.19 1213.01 L1557.78 1213.01 L1558.36 1213.01 L1558.95 1213.01 L1559.54 1213.01 L1560.12 1213.01 L1560.71 1213.01 L1561.3 1213.01 L1561.88 1213.01 L1562.47 1213.01 L1563.06 1213.01 L1563.64 1213.01 L1564.23 1213.01 L1564.81 1213.01 L1565.4 1213.01 L1565.99 1213.01 L1566.57 1213.01 L1567.16 1213.01 L1567.75 1213.01 L1568.33 1213.01 L1568.92 1213.01 L1569.51 1213.01 L1570.09 1213.01 L1570.68 1213.01 L1571.27 1213.01 L1571.85 1213.01 L1572.44 1213.01 L1573.02 1213.01 L1573.61 1213.01 L1574.2 1213.01 L1574.78 1213.01 L1575.37 1213.01 L1575.96 1213.01 L1576.54 1213.01 L1577.13 1213.01 L1577.72 1213.01 L1578.3 1213.01 L1578.89 1213.01 L1579.47 1213.01 L1580.06 1213.01 L1580.65 1213.01 L1581.23 1213.01 L1581.82 1213.01 L1582.41 1213.01 L1582.99 1213.01 L1583.58 1213.01 L1584.17 1213.01 L1584.75 1213.01 L1585.34 1213.01 L1585.93 1213.01 L1586.51 1213.01 L1587.1 1213.01 L1587.68 1213.01 L1588.27 1213.01 L1588.86 1213.01 L1589.44 1213.01 L1590.03 1213.01 L1590.62 1213.01 L1591.2 1213.01 L1591.79 1213.01 L1592.38 1213.01 L1592.96 1213.01 L1593.55 1213.01 L1594.14 1213.01 L1594.72 1213.01 L1595.31 1213.01 L1595.89 1213.01 L1596.48 1213.01 L1597.07 1213.01 L1597.65 1213.01 L1598.24 1213.01 L1598.83 1213.01 L1599.41 1213.01 L1600 1213.01 L1600.59 1213.01 L1601.17 1213.01 L1601.76 1213.01 L1602.34 1213.01 L1602.93 1213.01 L1603.52 1213.01 L1604.1 1213.01 L1604.69 1213.01 L1605.28 1213.01 L1605.86 1213.01 L1606.45 1213.01 L1607.04 1213.01 L1607.62 1213.01 L1608.21 1213.01 L1608.8 1213.01 L1609.38 1213.01 L1609.97 1213.01 L1610.55 1213.01 L1611.14 1213.01 L1611.73 1213.01 L1612.31 1213.01 L1612.9 1213.01 L1613.49 1213.01 L1614.07 1213.01 L1614.66 1213.01 L1615.25 1213.01 L1615.83 1213.01 L1616.42 1213.01 L1617.01 1213.01 L1617.59 1213.01 L1618.18 1213.01 L1618.76 1213.01 L1619.35 1213.01 L1619.94 1213.01 L1620.52 1213.01 L1621.11 1213.01 L1621.7 1213.01 L1622.28 1213.01 L1622.87 1213.01 L1623.46 1213.01 L1624.04 1213.01 L1624.63 1213.01 L1625.22 1213.01 L1625.8 1213.01 L1626.39 1213.01 L1626.97 1213.01 L1627.56 1213.01 L1628.15 1213.01 L1628.73 1213.01 L1629.32 1213.01 L1629.91 1213.01 L1630.49 1213.01 L1631.08 1213.01 L1631.67 1213.01 L1632.25 1213.01 L1632.84 1213.01 L1633.42 1213.01 L1634.01 1213.01 L1634.6 1213.01 L1635.18 1213.01 L1635.77 1213.01 L1636.36 1213.01 L1636.94 1213.01 L1637.53 1213.01 L1638.12 1213.01 L1638.7 1213.01 L1639.29 1213.01 L1639.88 1213.01 L1640.46 1213.01 L1641.05 1213.01 L1641.63 1213.01 L1642.22 1213.01 L1642.81 1213.01 L1643.39 1213.01 L1643.98 1213.01 L1644.57 1213.01 L1645.15 1213.01 L1645.74 1213.01 L1646.33 1213.01 L1646.91 1213.01 L1647.5 1213.01 L1648.09 1213.01 L1648.67 1213.01 L1649.26 1213.01 L1649.84 1213.01 L1650.43 1213.01 L1651.02 1213.01 L1651.6 1213.01 L1652.19 1213.01 L1652.78 1213.01 L1653.36 1213.01 L1653.95 1213.01 L1654.54 1213.01 L1655.12 1213.01 L1655.71 1213.01 L1656.29 1213.01 L1656.88 1213.01 L1657.47 1213.01 L1658.05 1213.01 L1658.64 1213.01 L1659.23 1213.01 L1659.81 1213.01 L1660.4 1213.01 L1660.99 1213.01 L1661.57 1213.01 L1662.16 1213.01 L1662.75 1213.01 L1663.33 1213.01 L1663.92 1213.01 L1664.5 1213.01 L1665.09 1213.01 L1665.68 1213.01 L1666.26 1213.01 L1666.85 1213.01 L1667.44 1213.01 L1668.02 1213.01 L1668.61 1213.01 L1669.2 1213.01 L1669.78 1213.01 L1670.37 1213.01 L1670.96 1213.01 L1671.54 1213.01 L1672.13 1213.01 L1672.71 1213.01 L1673.3 1213.01 L1673.89 1213.01 L1674.47 1213.01 L1675.06 1213.01 L1675.65 1213.01 L1676.23 1213.01 L1676.82 1213.01 L1677.41 1213.01 L1677.99 1213.01 L1678.58 1213.01 L1679.17 1213.01 L1679.75 1213.01 L1680.34 1213.01 L1680.92 1213.01 L1681.51 1213.01 L1682.1 1213.01 L1682.68 1213.01 L1683.27 1213.01 L1683.86 1213.01 L1684.44 1213.01 L1685.03 1213.01 L1685.62 1213.01 L1686.2 1213.01 L1686.79 1213.01 L1687.37 1213.01 L1687.96 1213.01 L1688.55 1213.01 L1689.13 1213.01 L1689.72 1213.01 L1690.31 1213.01 L1690.89 1213.01 L1691.48 1213.01 L1692.07 1213.01 L1692.65 1213.01 L1693.24 1213.01 L1693.83 1213.01 L1694.41 1213.01 L1695 1213.01 L1695.58 1213.01 L1696.17 1213.01 L1696.76 1213.01 L1697.34 1213.01 L1697.93 1213.01 L1698.52 1213.01 L1699.1 1213.01 L1699.69 1213.01 L1700.28 1213.01 L1700.86 1213.01 L1701.45 1213.01 L1702.04 1213.01 L1702.62 1213.01 L1703.21 1213.01 L1703.79 1213.01 L1704.38 1213.01 L1704.97 1213.01 L1705.55 1213.01 L1706.14 1213.01 L1706.73 1213.01 L1707.31 1213.01 L1707.9 1213.01 L1708.49 1213.01 L1709.07 1213.01 L1709.66 1213.01 L1710.24 1213.01 L1710.83 1213.01 L1711.42 1213.01 L1712 1213.01 L1712.59 1213.01 L1713.18 1213.01 L1713.76 1213.01 L1714.35 1213.01 L1714.94 1213.01 L1715.52 1213.01 L1716.11 1213.01 L1716.7 1213.01 L1717.28 1213.01 L1717.87 1213.01 L1718.45 1213.01 L1719.04 1213.01 L1719.63 1213.01 L1720.21 1213.01 L1720.8 1213.01 L1721.39 1213.01 L1721.97 1213.01 L1722.56 1213.01 L1723.15 1213.01 L1723.73 1213.01 L1724.32 1213.01 L1724.91 1213.01 L1725.49 1213.01 L1726.08 1213.01 L1726.66 1213.01 L1727.25 1213.01 L1727.84 1213.01 L1728.42 1213.01 L1729.01 1213.01 L1729.6 1213.01 L1730.18 1213.01 L1730.77 1213.01 L1731.36 1213.01 L1731.94 1213.01 L1732.53 1213.01 L1733.11 1213.01 L1733.7 1213.01 L1734.29 1213.01 L1734.87 1213.01 L1735.46 1213.01 L1736.05 1213.01 L1736.63 1213.01 L1737.22 1213.01 L1737.81 1213.01 L1738.39 1213.01 L1738.98 1213.01 L1739.57 1213.01 L1740.15 1213.01 L1740.74 1213.01 L1741.32 1213.01 L1741.91 1213.01 L1742.5 1213.01 L1743.08 1213.01 L1743.67 1213.01 L1744.26 1213.01 L1744.84 1213.01 L1745.43 1213.01 L1746.02 1213.01 L1746.6 1213.01 L1747.19 1213.01 L1747.78 1213.01 L1748.36 1213.01 L1748.95 1213.01 L1749.53 1213.01 L1750.12 1213.01 L1750.71 1213.01 L1751.29 1213.01 L1751.88 1213.01 L1752.47 1213.01 L1753.05 1213.01 L1753.64 1213.01 L1754.23 1213.01 L1754.81 1213.01 L1755.4 1213.01 L1755.99 1213.01 L1756.57 1213.01 L1757.16 1213.01 L1757.74 1213.01 L1758.33 1213.01 L1758.92 1213.01 L1759.5 1213.01 L1760.09 1213.01 L1760.68 1213.01 L1761.26 1213.01 L1761.85 1213.01 L1762.44 1213.01 L1763.02 1213.01 L1763.61 1213.01 L1764.19 1213.01 L1764.78 1213.01 L1765.37 1213.01 L1765.95 1213.01 L1766.54 1213.01 L1767.13 1213.01 L1767.71 1213.01 L1768.3 1213.01 L1768.89 1213.01 L1769.47 1213.01 L1770.06 1213.01 L1770.65 1213.01 L1771.23 1213.01 L1771.82 1213.01 L1772.4 1213.01 L1772.99 1213.01 L1773.58 1213.01 L1774.16 1213.01 L1774.75 1213.01 L1775.34 1213.01 L1775.92 1213.01 L1776.51 1213.01 L1777.1 1213.01 L1777.68 1213.01 L1778.27 1213.01 L1778.86 1213.01 L1779.44 1213.01 L1780.03 1213.01 L1780.61 1213.01 L1781.2 1213.01 L1781.79 1213.01 L1782.37 1213.01 L1782.96 1213.01 L1783.55 1213.01 L1784.13 1213.01 L1784.72 1213.01 L1785.31 1213.01 L1785.89 1213.01 L1786.48 1213.01 L1787.06 1213.01 L1787.65 1213.01 L1788.24 1213.01 L1788.82 1213.01 L1789.41 1213.01 L1790 1213.01 L1790.58 1213.01 L1791.17 1213.01 L1791.76 1213.01 L1792.34 1213.01 L1792.93 1213.01 L1793.52 1213.01 L1794.1 1213.01 L1794.69 1213.01 L1795.27 1213.01 L1795.86 1213.01 L1796.45 1213.01 L1797.03 1213.01 L1797.62 1213.01 L1798.21 1213.01 L1798.79 1213.01 L1799.38 1213.01 L1799.97 1213.01 L1800.55 1213.01 L1801.14 1213.01 L1801.73 1213.01 L1802.31 1213.01 L1802.9 1213.01 L1803.48 1213.01 L1804.07 1213.01 L1804.66 1213.01 L1805.24 1213.01 L1805.83 1213.01 L1806.42 1213.01 L1807 1213.01 L1807.59 1213.01 L1808.18 1213.01 L1808.76 1213.01 L1809.35 1213.01 L1809.94 1213.01 L1810.52 1213.01 L1811.11 1213.01 L1811.69 1213.01 L1812.28 1213.01 L1812.87 1213.01 L1813.45 1213.01 L1814.04 1213.01 L1814.63 1213.01 L1815.21 1213.01 L1815.8 1213.01 L1816.39 1213.01 L1816.97 1213.01 L1817.56 1213.01 L1818.14 1213.01 L1818.73 1213.01 L1819.32 1213.01 L1819.9 1213.01 L1820.49 1213.01 L1821.08 1213.01 L1821.66 1213.01 L1822.25 1213.01 L1822.84 1213.01 L1823.42 1213.01 L1824.01 1213.01 L1824.6 1213.01 L1825.18 1213.01 L1825.77 1213.01 L1826.35 1213.01 L1826.94 1213.01 L1827.53 1213.01 L1828.11 1213.01 L1828.7 1213.01 L1829.29 1213.01 L1829.87 1213.01 L1830.46 1213.01 L1831.05 1213.01 L1831.63 1213.01 L1832.22 1213.01 L1832.81 1213.01 L1833.39 1213.01 L1833.98 1213.01 L1834.56 1213.01 L1835.15 1213.01 L1835.74 1213.01 L1836.32 1213.01 L1836.91 1213.01 L1837.5 1213.01 L1838.08 1213.01 L1838.67 1213.01 L1839.26 1213.01 L1839.84 1213.01 L1840.43 1213.01 L1841.01 1213.01 L1841.6 1213.01 L1842.19 1213.01 L1842.77 1213.01 L1843.36 1213.01 L1843.95 1213.01 L1844.53 1213.01 L1845.12 1213.01 L1845.71 1213.01 L1846.29 1213.01 L1846.88 1213.01 L1847.47 1213.01 L1848.05 1213.01 L1848.64 1213.01 L1849.22 1213.01 L1849.81 1213.01 L1850.4 1213.01 L1850.98 1213.01 L1851.57 1213.01 L1852.16 1213.01 L1852.74 1213.01 L1853.33 1213.01 L1853.92 1213.01 L1854.5 1213.01 L1855.09 1213.01 L1855.68 1213.01 L1856.26 1213.01 L1856.85 1213.01 L1857.43 1213.01 L1858.02 1213.01 L1858.61 1213.01 L1859.19 1213.01 L1859.78 1213.01 L1860.37 1213.01 L1860.95 1213.01 L1861.54 1213.01 L1862.13 1213.01 L1862.71 1213.01 L1863.3 1213.01 L1863.88 1213.01 L1864.47 1213.01 L1865.06 1213.01 L1865.64 1213.01 L1866.23 1213.01 L1866.82 1213.01 L1867.4 1213.01 L1867.99 1213.01 L1868.58 1213.01 L1869.16 1213.01 L1869.75 1213.01 L1870.34 1213.01 L1870.92 1213.01 L1871.51 1213.01 L1872.09 1213.01 L1872.68 1213.01 L1873.27 1213.01 L1873.85 1213.01 L1874.44 1213.01 L1875.03 1213.01 L1875.61 1213.01 L1876.2 1213.01 L1876.79 1213.01 L1877.37 1213.01 L1877.96 1213.01 L1878.55 1213.01 L1879.13 1213.01 L1879.72 1213.01 L1880.3 1213.01 L1880.89 1213.01 L1881.48 1213.01 L1882.06 1213.01 L1882.65 1213.01 L1883.24 1213.01 L1883.82 1213.01 L1884.41 1213.01 L1885 1213.01 L1885.58 1213.01 L1886.17 1213.01 L1886.76 1213.01 L1887.34 1213.01 L1887.93 1213.01 L1888.51 1213.01 L1889.1 1213.01 L1889.69 1213.01 L1890.27 1213.01 L1890.86 1213.01 L1891.45 1213.01 L1892.03 1213.01 L1892.62 1213.01 L1893.21 1213.01 L1893.79 1213.01 L1894.38 1213.01 L1894.96 1213.01 L1895.55 1213.01 L1896.14 1213.01 L1896.72 1213.01 L1897.31 1213.01 L1897.9 1213.01 L1898.48 1213.01 L1899.07 1213.01 L1899.66 1213.01 L1900.24 1213.01 L1900.83 1213.01 L1901.42 1213.01 L1902 1213.01 L1902.59 1213.01 L1903.17 1213.01 L1903.76 1213.01 L1904.35 1213.01 L1904.93 1213.01 L1905.52 1213.01 L1906.11 1213.01 L1906.69 1213.01 L1907.28 1213.01 L1907.87 1213.01 L1908.45 1213.01 L1909.04 1213.01 L1909.63 1213.01 L1910.21 1213.01 L1910.8 1213.01 L1911.38 1213.01 L1911.97 1213.01 L1912.56 1213.01 L1913.14 1213.01 L1913.73 1213.01 L1914.32 1213.01 L1914.9 1213.01 L1915.49 1213.01 L1916.08 1213.01 L1916.66 1213.01 L1917.25 1213.01 L1917.83 1213.01 L1918.42 1213.01 L1919.01 1213.01 L1919.59 1213.01 L1920.18 1213.01 L1920.77 1213.01 L1921.35 1213.01 L1921.94 1213.01 L1922.53 1213.01 L1923.11 1213.01 L1923.7 1213.01 L1924.29 1213.01 L1924.87 1213.01 L1925.46 1213.01 L1926.04 1213.01 L1926.63 1213.01 L1927.22 1213.01 L1927.8 1213.01 L1928.39 1213.01 L1928.98 1213.01 L1929.56 1213.01 L1930.15 1213.01 L1930.74 1213.01 L1931.32 1213.01 L1931.91 1213.01 L1932.5 1213.01 L1933.08 1213.01 L1933.67 1213.01 L1934.25 1213.01 L1934.84 1213.01 L1935.43 1213.01 L1936.01 1213.01 L1936.6 1213.01 L1937.19 1213.01 L1937.77 1213.01 L1938.36 1213.01 L1938.95 1213.01 L1939.53 1213.01 L1940.12 1213.01 L1940.71 1213.01 L1941.29 1213.01 L1941.88 1213.01 L1942.46 1213.01 L1943.05 1213.01 L1943.64 1213.01 L1944.22 1213.01 L1944.81 1213.01 L1945.4 1213.01 L1945.98 1213.01 L1946.57 1213.01 L1947.16 1213.01 L1947.74 1213.01 L1948.33 1213.01 L1948.91 1213.01 L1949.5 1213.01 L1950.09 1213.01 L1950.67 1213.01 L1951.26 1213.01 L1951.85 1213.01 L1952.43 1213.01 L1953.02 1213.01 L1953.61 1213.01 L1954.19 1213.01 L1954.78 1213.01 L1955.37 1213.01 L1955.95 1213.01 L1956.54 1213.01 L1957.12 1213.01 L1957.71 1213.01 L1958.3 1213.01 L1958.88 1213.01 L1959.47 1213.01 L1960.06 1213.01 L1960.64 1213.01 L1961.23 1213.01 L1961.82 1213.01 L1962.4 1213.01 L1962.99 1213.01 L1963.58 1213.01 L1964.16 1213.01 L1964.75 1213.01 L1965.33 1213.01 L1965.92 1213.01 L1966.51 1213.01 L1967.09 1213.01 L1967.68 1213.01 L1968.27 1213.01 L1968.85 1213.01 L1969.44 1213.01 L1970.03 1213.01 L1970.61 1213.01 L1971.2 1213.01 L1971.78 1213.01 L1972.37 1213.01 L1972.96 1213.01 L1973.54 1213.01 L1974.13 1213.01 L1974.72 1213.01 L1975.3 1213.01 L1975.89 1213.01 L1976.48 1213.01 L1977.06 1213.01 L1977.65 1213.01 L1978.24 1213.01 L1978.82 1213.01 L1979.41 1213.01 L1979.99 1213.01 L1980.58 1213.01 L1981.17 1213.01 L1981.75 1213.01 L1982.34 1213.01 L1982.93 1213.01 L1983.51 1213.01 L1984.1 1213.01 L1984.69 1213.01 L1985.27 1213.01 L1985.86 1213.01 L1986.45 1213.01 L1987.03 1213.01 L1987.62 1213.01 L1988.2 1213.01 L1988.79 1213.01 L1989.38 1213.01 L1989.96 1213.01 L1990.55 1213.01 L1991.14 1213.01 L1991.72 1213.01 L1992.31 1213.01 L1992.9 1213.01 L1993.48 1213.01 L1994.07 1213.01 L1994.65 1213.01 L1995.24 1213.01 L1995.83 1213.01 L1996.41 1213.01 L1997 1213.01 L1997.59 1213.01 L1998.17 1213.01 L1998.76 1213.01 L1999.35 1213.01 L1999.93 1213.01 L2000.52 1213.01 L2001.11 1213.01 L2001.69 1213.01 L2002.28 1213.01 L2002.86 1213.01 L2003.45 1213.01 L2004.04 1213.01 L2004.62 1213.01 L2005.21 1213.01 L2005.8 1213.01 L2006.38 1213.01 L2006.97 1213.01 L2007.56 1213.01 L2008.14 1213.01 L2008.73 1213.01 L2009.32 1213.01 L2009.9 1213.01 L2010.49 1213.01 L2011.07 1213.01 L2011.66 1213.01 L2012.25 1213.01 L2012.83 1213.01 L2013.42 1213.01 L2014.01 1213.01 L2014.59 1213.01 L2015.18 1213.01 L2015.77 1213.01 L2016.35 1213.01 L2016.94 1213.01 L2017.53 1213.01 L2018.11 1213.01 L2018.7 1213.01 L2019.28 1213.01 L2019.87 1213.01 L2020.46 1213.01 L2021.04 1213.01 L2021.63 1213.01 L2022.22 1213.01 L2022.8 1213.01 L2023.39 1213.01 L2023.98 1213.01 L2024.56 1213.01 L2025.15 1213.01 L2025.73 1213.01 L2026.32 1213.01 L2026.91 1213.01 L2027.49 1213.01 L2028.08 1213.01 L2028.67 1213.01 L2029.25 1213.01 L2029.84 1213.01 L2030.43 1213.01 L2031.01 1213.01 L2031.6 1213.01 L2032.19 1213.01 L2032.77 1213.01 L2033.36 1213.01 L2033.94 1213.01 L2034.53 1213.01 L2035.12 1213.01 L2035.7 1213.01 L2036.29 1213.01 L2036.88 1213.01 L2037.46 1213.01 L2038.05 1213.01 L2038.64 1213.01 L2039.22 1213.01 L2039.81 1213.01 L2040.4 1213.01 L2040.98 1213.01 L2041.57 1213.01 L2042.15 1213.01 L2042.74 1213.01 L2043.33 1213.01 L2043.91 1213.01 L2044.5 1213.01 L2045.09 1213.01 L2045.67 1213.01 L2046.26 1213.01 L2046.85 1213.01 L2047.43 1213.01 L2048.02 1213.01 L2048.6 1213.01 L2049.19 1213.01 L2049.78 1213.01 L2050.36 1213.01 L2050.95 1213.01 L2051.54 1213.01 L2052.12 1213.01 L2052.71 1213.01 L2053.3 1213.01 L2053.88 1213.01 L2054.47 1213.01 L2055.06 1213.01 L2055.64 1213.01 L2056.23 1213.01 L2056.81 1213.01 L2057.4 1213.01 L2057.99 1213.01 L2058.57 1213.01 L2059.16 1213.01 L2059.75 1213.01 L2060.33 1213.01 L2060.92 1213.01 L2061.51 1213.01 L2062.09 1213.01 L2062.68 1213.01 L2063.27 1213.01 L2063.85 1213.01 L2064.44 1213.01 L2065.02 1213.01 L2065.61 1213.01 L2066.2 1213.01 L2066.78 1213.01 L2067.37 1213.01 L2067.96 1213.01 L2068.54 1213.01 L2069.13 1213.01 L2069.72 1213.01 L2070.3 1213.01 L2070.89 1213.01 L2071.48 1213.01 L2072.06 1213.01 L2072.65 1213.01 L2073.23 1213.01 L2073.82 1213.01 L2074.41 1213.01 L2074.99 1213.01 L2075.58 1213.01 L2076.17 1213.01 L2076.75 1213.01 L2077.34 1213.01 L2077.93 1213.01 L2078.51 1213.01 L2079.1 1213.01 L2079.68 1213.01 L2080.27 1213.01 L2080.86 1213.01 L2081.44 1213.01 L2082.03 1213.01 L2082.62 1213.01 L2083.2 1213.01 L2083.79 1213.01 L2084.38 1213.01 L2084.96 1213.01 L2085.55 1213.01 L2086.14 1213.01 L2086.72 1213.01 L2087.31 1213.01 L2087.89 1213.01 L2088.48 1213.01 L2089.07 1213.01 L2089.65 1213.01 L2090.24 1213.01 L2090.83 1213.01 L2091.41 1213.01 L2092 1213.01 L2092.59 1213.01 L2093.17 1213.01 L2093.76 1213.01 L2094.35 1213.01 L2094.93 1213.01 L2095.52 1213.01 L2096.1 1213.01 L2096.69 1213.01 L2097.28 1213.01 L2097.86 1213.01 L2098.45 1213.01 L2099.04 1213.01 L2099.62 1213.01 L2100.21 1213.01 L2100.8 1213.01 L2101.38 1213.01 L2101.97 1213.01 L2102.55 1213.01 L2103.14 1213.01 L2103.73 1213.01 L2104.31 1213.01 L2104.9 1213.01 L2105.49 1213.01 L2106.07 1213.01 L2106.66 1213.01 L2107.25 1213.01 L2107.83 1213.01 L2108.42 1213.01 L2109.01 1213.01 L2109.59 1213.01 L2110.18 1213.01 L2110.76 1213.01 L2111.35 1213.01 L2111.94 1213.01 L2112.52 1213.01 L2113.11 1213.01 L2113.7 1213.01 L2114.28 1213.01 L2114.87 1213.01 L2115.46 1213.01 L2116.04 1213.01 L2116.63 1213.01 L2117.22 1213.01 L2117.8 1213.01 L2118.39 1213.01 L2118.97 1213.01 L2119.56 1213.01 L2120.15 1213.01 L2120.73 1213.01 L2121.32 1213.01 L2121.91 1213.01 L2122.49 1213.01 L2123.08 1213.01 L2123.67 1213.01 L2124.25 1213.01 L2124.84 1213.01 L2125.42 1213.01 L2126.01 1213.01 L2126.6 1213.01 L2127.18 1213.01 L2127.77 1213.01 L2128.36 1213.01 L2128.94 1213.01 L2129.53 1213.01 L2130.12 1213.01 L2130.7 1213.01 L2131.29 1213.01 L2131.88 1213.01 L2132.46 1213.01 L2133.05 1213.01 L2133.63 1213.01 L2134.22 1213.01 L2134.81 1213.01 L2135.39 1213.01 L2135.98 1213.01 L2136.57 1213.01 L2137.15 1213.01 L2137.74 1213.01 L2138.33 1213.01 L2138.91 1213.01 L2139.5 1213.01 L2140.09 1213.01 L2140.67 1213.01 L2141.26 1213.01 L2141.84 1213.01 L2142.43 1213.01 L2143.02 1213.01 L2143.6 1213.01 L2144.19 1213.01 L2144.78 1213.01 L2145.36 1213.01 L2145.95 1213.01 L2146.54 1213.01 L2147.12 1213.01 L2147.71 1213.01 L2148.3 1213.01 L2148.88 1213.01 L2149.47 1213.01 L2150.05 1213.01 L2150.64 1213.01 L2151.23 1213.01 L2151.81 1213.01 L2152.4 1213.01 L2152.99 1213.01 L2153.57 1213.01 L2154.16 1213.01 L2154.75 1213.01 L2155.33 1213.01 L2155.92 1213.01 L2156.5 1213.01 L2157.09 1213.01 L2157.68 1213.01 L2158.26 1213.01 L2158.26 1212.78 L2157.68 1212.78 L2157.09 1212.78 L2156.5 1212.78 L2155.92 1212.78 L2155.33 1212.78 L2154.75 1212.78 L2154.16 1212.78 L2153.57 1212.78 L2152.99 1212.78 L2152.4 1212.78 L2151.81 1212.78 L2151.23 1212.78 L2150.64 1212.78 L2150.05 1212.78 L2149.47 1212.78 L2148.88 1212.78 L2148.3 1212.78 L2147.71 1212.78 L2147.12 1212.78 L2146.54 1212.78 L2145.95 1212.78 L2145.36 1212.78 L2144.78 1212.78 L2144.19 1212.78 L2143.6 1212.78 L2143.02 1212.78 L2142.43 1212.78 L2141.84 1212.78 L2141.26 1212.78 L2140.67 1212.78 L2140.09 1212.78 L2139.5 1212.78 L2138.91 1212.78 L2138.33 1212.78 L2137.74 1212.78 L2137.15 1212.78 L2136.57 1212.78 L2135.98 1212.78 L2135.39 1212.78 L2134.81 1212.78 L2134.22 1212.78 L2133.63 1212.78 L2133.05 1212.78 L2132.46 1212.78 L2131.88 1212.78 L2131.29 1212.78 L2130.7 1212.78 L2130.12 1212.78 L2129.53 1212.78 L2128.94 1212.78 L2128.36 1212.78 L2127.77 1212.78 L2127.18 1212.78 L2126.6 1212.78 L2126.01 1212.78 L2125.42 1212.78 L2124.84 1212.78 L2124.25 1212.78 L2123.67 1212.78 L2123.08 1212.78 L2122.49 1212.78 L2121.91 1212.78 L2121.32 1212.78 L2120.73 1212.78 L2120.15 1212.78 L2119.56 1212.78 L2118.97 1212.78 L2118.39 1212.78 L2117.8 1212.78 L2117.22 1212.78 L2116.63 1212.78 L2116.04 1212.78 L2115.46 1212.78 L2114.87 1212.78 L2114.28 1212.78 L2113.7 1212.78 L2113.11 1212.78 L2112.52 1212.78 L2111.94 1212.78 L2111.35 1212.78 L2110.76 1212.78 L2110.18 1212.78 L2109.59 1212.78 L2109.01 1212.78 L2108.42 1212.78 L2107.83 1212.78 L2107.25 1212.78 L2106.66 1212.78 L2106.07 1212.78 L2105.49 1212.78 L2104.9 1212.78 L2104.31 1212.78 L2103.73 1212.78 L2103.14 1212.78 L2102.55 1212.78 L2101.97 1212.78 L2101.38 1212.78 L2100.8 1212.78 L2100.21 1212.78 L2099.62 1212.78 L2099.04 1212.78 L2098.45 1212.78 L2097.86 1212.78 L2097.28 1212.78 L2096.69 1212.78 L2096.1 1212.78 L2095.52 1212.78 L2094.93 1212.78 L2094.35 1212.78 L2093.76 1212.78 L2093.17 1212.78 L2092.59 1212.78 L2092 1212.78 L2091.41 1212.78 L2090.83 1212.78 L2090.24 1212.78 L2089.65 1212.78 L2089.07 1212.78 L2088.48 1212.78 L2087.89 1212.78 L2087.31 1212.78 L2086.72 1212.78 L2086.14 1212.78 L2085.55 1212.78 L2084.96 1212.78 L2084.38 1212.78 L2083.79 1212.78 L2083.2 1212.78 L2082.62 1212.78 L2082.03 1212.78 L2081.44 1212.78 L2080.86 1212.78 L2080.27 1212.78 L2079.68 1212.78 L2079.1 1212.78 L2078.51 1212.78 L2077.93 1212.78 L2077.34 1212.78 L2076.75 1212.78 L2076.17 1212.78 L2075.58 1212.78 L2074.99 1212.78 L2074.41 1212.78 L2073.82 1212.78 L2073.23 1212.78 L2072.65 1212.78 L2072.06 1212.78 L2071.48 1212.78 L2070.89 1212.78 L2070.3 1212.78 L2069.72 1212.78 L2069.13 1212.78 L2068.54 1212.78 L2067.96 1212.78 L2067.37 1212.78 L2066.78 1212.78 L2066.2 1212.78 L2065.61 1212.78 L2065.02 1212.78 L2064.44 1212.78 L2063.85 1212.78 L2063.27 1212.78 L2062.68 1212.78 L2062.09 1212.78 L2061.51 1212.78 L2060.92 1212.78 L2060.33 1212.78 L2059.75 1212.78 L2059.16 1212.78 L2058.57 1212.78 L2057.99 1212.78 L2057.4 1212.78 L2056.81 1212.78 L2056.23 1212.78 L2055.64 1212.78 L2055.06 1212.78 L2054.47 1212.78 L2053.88 1212.78 L2053.3 1212.78 L2052.71 1212.78 L2052.12 1212.78 L2051.54 1212.78 L2050.95 1212.78 L2050.36 1212.78 L2049.78 1212.78 L2049.19 1212.78 L2048.6 1212.78 L2048.02 1212.78 L2047.43 1212.78 L2046.85 1212.78 L2046.26 1212.78 L2045.67 1212.78 L2045.09 1212.78 L2044.5 1212.78 L2043.91 1212.78 L2043.33 1212.78 L2042.74 1212.78 L2042.15 1212.78 L2041.57 1212.78 L2040.98 1212.78 L2040.4 1212.78 L2039.81 1212.78 L2039.22 1212.78 L2038.64 1212.78 L2038.05 1212.78 L2037.46 1212.78 L2036.88 1212.78 L2036.29 1212.78 L2035.7 1212.78 L2035.12 1212.78 L2034.53 1212.78 L2033.94 1212.78 L2033.36 1212.78 L2032.77 1212.78 L2032.19 1212.78 L2031.6 1212.78 L2031.01 1212.78 L2030.43 1212.78 L2029.84 1212.78 L2029.25 1212.78 L2028.67 1212.78 L2028.08 1212.78 L2027.49 1212.78 L2026.91 1212.78 L2026.32 1212.78 L2025.73 1212.78 L2025.15 1212.78 L2024.56 1212.78 L2023.98 1212.78 L2023.39 1212.78 L2022.8 1212.78 L2022.22 1212.78 L2021.63 1212.78 L2021.04 1212.78 L2020.46 1212.78 L2019.87 1212.78 L2019.28 1212.78 L2018.7 1212.78 L2018.11 1212.78 L2017.53 1212.78 L2016.94 1212.78 L2016.35 1212.78 L2015.77 1212.78 L2015.18 1212.78 L2014.59 1212.78 L2014.01 1212.78 L2013.42 1212.78 L2012.83 1212.78 L2012.25 1212.78 L2011.66 1212.78 L2011.07 1212.78 L2010.49 1212.78 L2009.9 1212.78 L2009.32 1212.78 L2008.73 1212.78 L2008.14 1212.78 L2007.56 1212.78 L2006.97 1212.78 L2006.38 1212.78 L2005.8 1212.78 L2005.21 1212.78 L2004.62 1212.78 L2004.04 1212.78 L2003.45 1212.78 L2002.86 1212.78 L2002.28 1212.78 L2001.69 1212.78 L2001.11 1212.78 L2000.52 1212.78 L1999.93 1212.78 L1999.35 1212.78 L1998.76 1212.78 L1998.17 1212.78 L1997.59 1212.78 L1997 1212.78 L1996.41 1212.78 L1995.83 1212.78 L1995.24 1212.78 L1994.65 1212.78 L1994.07 1212.78 L1993.48 1212.78 L1992.9 1212.78 L1992.31 1212.78 L1991.72 1212.78 L1991.14 1212.78 L1990.55 1212.78 L1989.96 1212.78 L1989.38 1212.78 L1988.79 1212.78 L1988.2 1212.78 L1987.62 1212.78 L1987.03 1212.78 L1986.45 1212.78 L1985.86 1212.78 L1985.27 1212.78 L1984.69 1212.78 L1984.1 1212.78 L1983.51 1212.78 L1982.93 1212.78 L1982.34 1212.78 L1981.75 1212.78 L1981.17 1212.78 L1980.58 1212.78 L1979.99 1212.78 L1979.41 1212.78 L1978.82 1212.78 L1978.24 1212.78 L1977.65 1212.78 L1977.06 1212.78 L1976.48 1212.78 L1975.89 1212.78 L1975.3 1212.78 L1974.72 1212.78 L1974.13 1212.78 L1973.54 1212.78 L1972.96 1212.78 L1972.37 1212.78 L1971.78 1212.78 L1971.2 1212.78 L1970.61 1212.78 L1970.03 1212.78 L1969.44 1212.78 L1968.85 1212.78 L1968.27 1212.78 L1967.68 1212.78 L1967.09 1212.78 L1966.51 1212.78 L1965.92 1212.78 L1965.33 1212.78 L1964.75 1212.78 L1964.16 1212.78 L1963.58 1212.78 L1962.99 1212.78 L1962.4 1212.78 L1961.82 1212.78 L1961.23 1212.78 L1960.64 1212.78 L1960.06 1212.78 L1959.47 1212.78 L1958.88 1212.78 L1958.3 1212.78 L1957.71 1212.78 L1957.12 1212.78 L1956.54 1212.78 L1955.95 1212.78 L1955.37 1212.78 L1954.78 1212.78 L1954.19 1212.78 L1953.61 1212.78 L1953.02 1212.78 L1952.43 1212.78 L1951.85 1212.78 L1951.26 1212.78 L1950.67 1212.78 L1950.09 1212.78 L1949.5 1212.78 L1948.91 1212.78 L1948.33 1212.78 L1947.74 1212.78 L1947.16 1212.78 L1946.57 1212.78 L1945.98 1212.78 L1945.4 1212.78 L1944.81 1212.78 L1944.22 1212.78 L1943.64 1212.78 L1943.05 1212.78 L1942.46 1212.78 L1941.88 1212.78 L1941.29 1212.78 L1940.71 1212.78 L1940.12 1212.78 L1939.53 1212.78 L1938.95 1212.78 L1938.36 1212.78 L1937.77 1212.78 L1937.19 1212.78 L1936.6 1212.78 L1936.01 1212.78 L1935.43 1212.78 L1934.84 1212.78 L1934.25 1212.78 L1933.67 1212.78 L1933.08 1212.78 L1932.5 1212.78 L1931.91 1212.78 L1931.32 1212.78 L1930.74 1212.78 L1930.15 1212.78 L1929.56 1212.78 L1928.98 1212.78 L1928.39 1212.78 L1927.8 1212.78 L1927.22 1212.78 L1926.63 1212.78 L1926.04 1212.78 L1925.46 1212.78 L1924.87 1212.78 L1924.29 1212.78 L1923.7 1212.78 L1923.11 1212.78 L1922.53 1212.78 L1921.94 1212.78 L1921.35 1212.78 L1920.77 1212.78 L1920.18 1212.78 L1919.59 1212.78 L1919.01 1212.78 L1918.42 1212.78 L1917.83 1212.78 L1917.25 1212.78 L1916.66 1212.78 L1916.08 1212.78 L1915.49 1212.78 L1914.9 1212.78 L1914.32 1212.78 L1913.73 1212.78 L1913.14 1212.78 L1912.56 1212.78 L1911.97 1212.78 L1911.38 1212.78 L1910.8 1212.78 L1910.21 1212.78 L1909.63 1212.78 L1909.04 1212.78 L1908.45 1212.78 L1907.87 1212.78 L1907.28 1212.78 L1906.69 1212.78 L1906.11 1212.78 L1905.52 1212.78 L1904.93 1212.78 L1904.35 1212.78 L1903.76 1212.78 L1903.17 1212.78 L1902.59 1212.78 L1902 1212.78 L1901.42 1212.78 L1900.83 1212.78 L1900.24 1212.78 L1899.66 1212.78 L1899.07 1212.78 L1898.48 1212.78 L1897.9 1212.78 L1897.31 1212.78 L1896.72 1212.78 L1896.14 1212.78 L1895.55 1212.78 L1894.96 1212.78 L1894.38 1212.78 L1893.79 1212.78 L1893.21 1212.78 L1892.62 1212.78 L1892.03 1212.78 L1891.45 1212.78 L1890.86 1212.78 L1890.27 1212.78 L1889.69 1212.78 L1889.1 1212.78 L1888.51 1212.78 L1887.93 1212.78 L1887.34 1212.78 L1886.76 1212.78 L1886.17 1212.78 L1885.58 1212.78 L1885 1212.78 L1884.41 1212.78 L1883.82 1212.78 L1883.24 1212.78 L1882.65 1212.78 L1882.06 1212.78 L1881.48 1212.78 L1880.89 1212.78 L1880.3 1212.78 L1879.72 1212.78 L1879.13 1212.78 L1878.55 1212.78 L1877.96 1212.78 L1877.37 1212.78 L1876.79 1212.78 L1876.2 1212.78 L1875.61 1212.78 L1875.03 1212.78 L1874.44 1212.78 L1873.85 1212.78 L1873.27 1212.78 L1872.68 1212.78 L1872.09 1212.78 L1871.51 1212.78 L1870.92 1212.78 L1870.34 1212.78 L1869.75 1212.78 L1869.16 1212.78 L1868.58 1212.78 L1867.99 1212.78 L1867.4 1212.78 L1866.82 1212.78 L1866.23 1212.78 L1865.64 1212.78 L1865.06 1212.78 L1864.47 1212.78 L1863.88 1212.78 L1863.3 1212.78 L1862.71 1212.78 L1862.13 1212.78 L1861.54 1212.78 L1860.95 1212.78 L1860.37 1212.78 L1859.78 1212.78 L1859.19 1212.78 L1858.61 1212.78 L1858.02 1212.78 L1857.43 1212.78 L1856.85 1212.78 L1856.26 1212.78 L1855.68 1212.78 L1855.09 1212.78 L1854.5 1212.78 L1853.92 1212.78 L1853.33 1212.78 L1852.74 1212.78 L1852.16 1212.78 L1851.57 1212.78 L1850.98 1212.78 L1850.4 1212.78 L1849.81 1212.78 L1849.22 1212.78 L1848.64 1212.78 L1848.05 1212.78 L1847.47 1212.78 L1846.88 1212.78 L1846.29 1212.78 L1845.71 1212.78 L1845.12 1212.78 L1844.53 1212.78 L1843.95 1212.78 L1843.36 1212.78 L1842.77 1212.78 L1842.19 1212.78 L1841.6 1212.78 L1841.01 1212.78 L1840.43 1212.78 L1839.84 1212.78 L1839.26 1212.78 L1838.67 1212.78 L1838.08 1212.78 L1837.5 1212.78 L1836.91 1212.78 L1836.32 1212.78 L1835.74 1212.78 L1835.15 1212.78 L1834.56 1212.78 L1833.98 1212.78 L1833.39 1212.78 L1832.81 1212.78 L1832.22 1212.78 L1831.63 1212.78 L1831.05 1212.78 L1830.46 1212.78 L1829.87 1212.78 L1829.29 1212.78 L1828.7 1212.78 L1828.11 1212.78 L1827.53 1212.78 L1826.94 1212.78 L1826.35 1212.78 L1825.77 1212.78 L1825.18 1212.78 L1824.6 1212.78 L1824.01 1212.78 L1823.42 1212.78 L1822.84 1212.78 L1822.25 1212.78 L1821.66 1212.78 L1821.08 1212.78 L1820.49 1212.78 L1819.9 1212.78 L1819.32 1212.78 L1818.73 1212.78 L1818.14 1212.78 L1817.56 1212.78 L1816.97 1212.78 L1816.39 1212.78 L1815.8 1212.78 L1815.21 1212.78 L1814.63 1212.78 L1814.04 1212.78 L1813.45 1212.78 L1812.87 1212.78 L1812.28 1212.78 L1811.69 1212.78 L1811.11 1212.78 L1810.52 1212.78 L1809.94 1212.78 L1809.35 1212.78 L1808.76 1212.78 L1808.18 1212.78 L1807.59 1212.78 L1807 1212.78 L1806.42 1212.78 L1805.83 1212.78 L1805.24 1212.78 L1804.66 1212.78 L1804.07 1212.78 L1803.48 1212.78 L1802.9 1212.78 L1802.31 1212.78 L1801.73 1212.78 L1801.14 1212.78 L1800.55 1212.78 L1799.97 1212.78 L1799.38 1212.78 L1798.79 1212.78 L1798.21 1212.78 L1797.62 1212.78 L1797.03 1212.78 L1796.45 1212.78 L1795.86 1212.78 L1795.27 1212.78 L1794.69 1212.78 L1794.1 1212.78 L1793.52 1212.78 L1792.93 1212.78 L1792.34 1212.78 L1791.76 1212.78 L1791.17 1212.78 L1790.58 1212.78 L1790 1212.78 L1789.41 1212.78 L1788.82 1212.78 L1788.24 1212.78 L1787.65 1212.78 L1787.06 1212.78 L1786.48 1212.78 L1785.89 1212.78 L1785.31 1212.78 L1784.72 1212.78 L1784.13 1212.78 L1783.55 1212.78 L1782.96 1212.78 L1782.37 1212.78 L1781.79 1212.78 L1781.2 1212.78 L1780.61 1212.78 L1780.03 1212.78 L1779.44 1212.78 L1778.86 1212.78 L1778.27 1212.78 L1777.68 1212.78 L1777.1 1212.78 L1776.51 1212.78 L1775.92 1212.78 L1775.34 1212.78 L1774.75 1212.78 L1774.16 1212.78 L1773.58 1212.78 L1772.99 1212.78 L1772.4 1212.78 L1771.82 1212.78 L1771.23 1212.78 L1770.65 1212.78 L1770.06 1212.78 L1769.47 1212.78 L1768.89 1212.78 L1768.3 1212.78 L1767.71 1212.78 L1767.13 1212.78 L1766.54 1212.78 L1765.95 1212.78 L1765.37 1212.78 L1764.78 1212.78 L1764.19 1212.78 L1763.61 1212.78 L1763.02 1212.78 L1762.44 1212.78 L1761.85 1212.78 L1761.26 1212.78 L1760.68 1212.78 L1760.09 1212.78 L1759.5 1212.78 L1758.92 1212.78 L1758.33 1212.78 L1757.74 1212.78 L1757.16 1212.78 L1756.57 1212.78 L1755.99 1212.78 L1755.4 1212.78 L1754.81 1212.78 L1754.23 1212.78 L1753.64 1212.78 L1753.05 1212.78 L1752.47 1212.78 L1751.88 1212.78 L1751.29 1212.78 L1750.71 1212.78 L1750.12 1212.78 L1749.53 1212.78 L1748.95 1212.78 L1748.36 1212.78 L1747.78 1212.78 L1747.19 1212.78 L1746.6 1212.78 L1746.02 1212.78 L1745.43 1212.78 L1744.84 1212.78 L1744.26 1212.78 L1743.67 1212.78 L1743.08 1212.78 L1742.5 1212.78 L1741.91 1212.78 L1741.32 1212.78 L1740.74 1212.78 L1740.15 1212.78 L1739.57 1212.78 L1738.98 1212.78 L1738.39 1212.78 L1737.81 1212.78 L1737.22 1212.78 L1736.63 1212.78 L1736.05 1212.78 L1735.46 1212.78 L1734.87 1212.78 L1734.29 1212.78 L1733.7 1212.78 L1733.11 1212.78 L1732.53 1212.78 L1731.94 1212.78 L1731.36 1212.78 L1730.77 1212.78 L1730.18 1212.78 L1729.6 1212.78 L1729.01 1212.78 L1728.42 1212.78 L1727.84 1212.78 L1727.25 1212.78 L1726.66 1212.78 L1726.08 1212.78 L1725.49 1212.78 L1724.91 1212.78 L1724.32 1212.78 L1723.73 1212.78 L1723.15 1212.78 L1722.56 1212.78 L1721.97 1212.78 L1721.39 1212.78 L1720.8 1212.78 L1720.21 1212.78 L1719.63 1212.78 L1719.04 1212.78 L1718.45 1212.78 L1717.87 1212.78 L1717.28 1212.78 L1716.7 1212.78 L1716.11 1212.78 L1715.52 1212.78 L1714.94 1212.78 L1714.35 1212.78 L1713.76 1212.78 L1713.18 1212.78 L1712.59 1212.78 L1712 1212.78 L1711.42 1212.78 L1710.83 1212.78 L1710.24 1212.78 L1709.66 1212.78 L1709.07 1212.78 L1708.49 1212.78 L1707.9 1212.78 L1707.31 1212.78 L1706.73 1212.78 L1706.14 1212.78 L1705.55 1212.78 L1704.97 1212.78 L1704.38 1212.78 L1703.79 1212.78 L1703.21 1212.78 L1702.62 1212.78 L1702.04 1212.78 L1701.45 1212.78 L1700.86 1212.78 L1700.28 1212.78 L1699.69 1212.78 L1699.1 1212.78 L1698.52 1212.78 L1697.93 1212.78 L1697.34 1212.78 L1696.76 1212.78 L1696.17 1212.78 L1695.58 1212.78 L1695 1212.78 L1694.41 1212.78 L1693.83 1212.78 L1693.24 1212.78 L1692.65 1212.78 L1692.07 1212.78 L1691.48 1212.78 L1690.89 1212.78 L1690.31 1212.78 L1689.72 1212.78 L1689.13 1212.78 L1688.55 1212.78 L1687.96 1212.78 L1687.37 1212.78 L1686.79 1212.78 L1686.2 1212.78 L1685.62 1212.78 L1685.03 1212.78 L1684.44 1212.78 L1683.86 1212.78 L1683.27 1212.78 L1682.68 1212.78 L1682.1 1212.78 L1681.51 1212.78 L1680.92 1212.78 L1680.34 1212.78 L1679.75 1212.78 L1679.17 1212.78 L1678.58 1212.78 L1677.99 1212.78 L1677.41 1212.78 L1676.82 1212.78 L1676.23 1212.78 L1675.65 1212.78 L1675.06 1212.78 L1674.47 1212.78 L1673.89 1212.78 L1673.3 1212.78 L1672.71 1212.78 L1672.13 1212.78 L1671.54 1212.78 L1670.96 1212.78 L1670.37 1212.78 L1669.78 1212.78 L1669.2 1212.78 L1668.61 1212.78 L1668.02 1212.78 L1667.44 1212.78 L1666.85 1212.78 L1666.26 1212.78 L1665.68 1212.78 L1665.09 1212.78 L1664.5 1212.78 L1663.92 1212.78 L1663.33 1212.78 L1662.75 1212.78 L1662.16 1212.78 L1661.57 1212.78 L1660.99 1212.78 L1660.4 1212.78 L1659.81 1212.78 L1659.23 1212.78 L1658.64 1212.78 L1658.05 1212.78 L1657.47 1212.78 L1656.88 1212.78 L1656.29 1212.78 L1655.71 1212.78 L1655.12 1212.78 L1654.54 1212.78 L1653.95 1212.78 L1653.36 1212.78 L1652.78 1212.78 L1652.19 1212.78 L1651.6 1212.78 L1651.02 1212.78 L1650.43 1212.78 L1649.84 1212.78 L1649.26 1212.78 L1648.67 1212.78 L1648.09 1212.78 L1647.5 1212.78 L1646.91 1212.78 L1646.33 1212.78 L1645.74 1212.78 L1645.15 1212.78 L1644.57 1212.78 L1643.98 1212.78 L1643.39 1212.78 L1642.81 1212.78 L1642.22 1212.78 L1641.63 1212.78 L1641.05 1212.78 L1640.46 1212.78 L1639.88 1212.78 L1639.29 1212.78 L1638.7 1212.78 L1638.12 1212.78 L1637.53 1212.78 L1636.94 1212.78 L1636.36 1212.78 L1635.77 1212.78 L1635.18 1212.78 L1634.6 1212.78 L1634.01 1212.78 L1633.42 1212.78 L1632.84 1212.78 L1632.25 1212.78 L1631.67 1212.78 L1631.08 1212.78 L1630.49 1212.78 L1629.91 1212.78 L1629.32 1212.78 L1628.73 1212.78 L1628.15 1212.78 L1627.56 1212.78 L1626.97 1212.78 L1626.39 1212.78 L1625.8 1212.78 L1625.22 1212.78 L1624.63 1212.78 L1624.04 1212.78 L1623.46 1212.78 L1622.87 1212.78 L1622.28 1212.78 L1621.7 1212.78 L1621.11 1212.78 L1620.52 1212.78 L1619.94 1212.78 L1619.35 1212.78 L1618.76 1212.78 L1618.18 1212.78 L1617.59 1212.78 L1617.01 1212.78 L1616.42 1212.78 L1615.83 1212.78 L1615.25 1212.78 L1614.66 1212.78 L1614.07 1212.78 L1613.49 1212.78 L1612.9 1212.78 L1612.31 1212.78 L1611.73 1212.78 L1611.14 1212.78 L1610.55 1212.78 L1609.97 1212.78 L1609.38 1212.78 L1608.8 1212.78 L1608.21 1212.78 L1607.62 1212.78 L1607.04 1212.78 L1606.45 1212.78 L1605.86 1212.78 L1605.28 1212.78 L1604.69 1212.78 L1604.1 1212.78 L1603.52 1212.78 L1602.93 1212.78 L1602.34 1212.78 L1601.76 1212.78 L1601.17 1212.78 L1600.59 1212.78 L1600 1212.78 L1599.41 1212.78 L1598.83 1212.78 L1598.24 1212.78 L1597.65 1212.78 L1597.07 1212.78 L1596.48 1212.78 L1595.89 1212.78 L1595.31 1212.78 L1594.72 1212.78 L1594.14 1212.78 L1593.55 1212.78 L1592.96 1212.78 L1592.38 1212.78 L1591.79 1212.78 L1591.2 1212.78 L1590.62 1212.78 L1590.03 1212.78 L1589.44 1212.78 L1588.86 1212.78 L1588.27 1212.78 L1587.68 1212.78 L1587.1 1212.78 L1586.51 1212.78 L1585.93 1212.78 L1585.34 1212.78 L1584.75 1212.78 L1584.17 1212.78 L1583.58 1212.78 L1582.99 1212.78 L1582.41 1212.78 L1581.82 1212.78 L1581.23 1212.78 L1580.65 1212.78 L1580.06 1212.78 L1579.47 1212.78 L1578.89 1212.78 L1578.3 1212.78 L1577.72 1212.78 L1577.13 1212.78 L1576.54 1212.78 L1575.96 1212.78 L1575.37 1212.78 L1574.78 1212.78 L1574.2 1212.78 L1573.61 1212.78 L1573.02 1212.78 L1572.44 1212.78 L1571.85 1212.78 L1571.27 1212.78 L1570.68 1212.78 L1570.09 1212.78 L1569.51 1212.78 L1568.92 1212.78 L1568.33 1212.78 L1567.75 1212.78 L1567.16 1212.78 L1566.57 1212.78 L1565.99 1212.78 L1565.4 1212.78 L1564.81 1212.78 L1564.23 1212.78 L1563.64 1212.78 L1563.06 1212.78 L1562.47 1212.78 L1561.88 1212.78 L1561.3 1212.78 L1560.71 1212.78 L1560.12 1212.78 L1559.54 1212.78 L1558.95 1212.78 L1558.36 1212.78 L1557.78 1212.78 L1557.19 1212.78 L1556.6 1212.78 L1556.02 1212.78 L1555.43 1212.78 L1554.85 1212.78 L1554.26 1212.78 L1553.67 1212.78 L1553.09 1212.78 L1552.5 1212.78 L1551.91 1212.78 L1551.33 1212.78 L1550.74 1212.78 L1550.15 1212.78 L1549.57 1212.78 L1548.98 1212.78 L1548.4 1212.78 L1547.81 1212.78 L1547.22 1212.78 L1546.64 1212.78 L1546.05 1212.78 L1545.46 1212.78 L1544.88 1212.78 L1544.29 1212.78 L1543.7 1212.78 L1543.12 1212.78 L1542.53 1212.78 L1541.94 1212.78 L1541.36 1212.78 L1540.77 1212.78 L1540.19 1212.78 L1539.6 1212.78 L1539.01 1212.78 L1538.43 1212.78 L1537.84 1212.78 L1537.25 1212.78 L1536.67 1212.78 L1536.08 1212.78 L1535.49 1212.78 L1534.91 1212.78 L1534.32 1212.78 L1533.73 1212.78 L1533.15 1212.78 L1532.56 1212.78 L1531.98 1212.78 L1531.39 1212.78 L1530.8 1212.78 L1530.22 1212.78 L1529.63 1212.78 L1529.04 1212.78 L1528.46 1212.78 L1527.87 1212.78 L1527.28 1212.78 L1526.7 1212.78 L1526.11 1212.78 L1525.52 1212.78 L1524.94 1212.78 L1524.35 1212.78 L1523.77 1212.78 L1523.18 1212.78 L1522.59 1212.78 L1522.01 1212.78 L1521.42 1212.78 L1520.83 1212.78 L1520.25 1212.78 L1519.66 1212.78 L1519.07 1212.78 L1518.49 1212.78 L1517.9 1212.78 L1517.32 1212.78 L1516.73 1212.78 L1516.14 1212.78 L1515.56 1212.78 L1514.97 1212.78 L1514.38 1212.78 L1513.8 1212.78 L1513.21 1212.78 L1512.62 1212.78 L1512.04 1212.78 L1511.45 1212.78 L1510.86 1212.78 L1510.28 1212.78 L1509.69 1212.78 L1509.11 1212.78 L1508.52 1212.78 L1507.93 1212.78 L1507.35 1212.78 L1506.76 1212.78 L1506.17 1212.78 L1505.59 1212.78 L1505 1212.78 L1504.41 1212.78 L1503.83 1212.78 L1503.24 1212.78 L1502.65 1212.78 L1502.07 1212.78 L1501.48 1212.78 L1500.9 1212.78 L1500.31 1212.78 L1499.72 1212.78 L1499.14 1212.78 L1498.55 1212.78 L1497.96 1212.78 L1497.38 1212.78 L1496.79 1212.78 L1496.2 1212.78 L1495.62 1212.78 L1495.03 1212.78 L1494.45 1212.78 L1493.86 1212.78 L1493.27 1212.78 L1492.69 1212.78 L1492.1 1212.78 L1491.51 1212.78 L1490.93 1212.78 L1490.34 1212.78 L1489.75 1212.78 L1489.17 1212.78 L1488.58 1212.78 L1487.99 1212.78 L1487.41 1212.78 L1486.82 1212.78 L1486.24 1212.78 L1485.65 1212.78 L1485.06 1212.78 L1484.48 1212.78 L1483.89 1212.78 L1483.3 1212.78 L1482.72 1212.78 L1482.13 1212.78 L1481.54 1212.78 L1480.96 1212.78 L1480.37 1212.78 L1479.78 1212.78 L1479.2 1212.78 L1478.61 1212.78 L1478.03 1212.78 L1477.44 1212.78 L1476.85 1212.78 L1476.27 1212.78 L1475.68 1212.78 L1475.09 1212.78 L1474.51 1212.78 L1473.92 1212.78 L1473.33 1212.78 L1472.75 1212.78 L1472.16 1212.78 L1471.57 1212.78 L1470.99 1212.78 L1470.4 1212.78 L1469.82 1212.78 L1469.23 1212.78 L1468.64 1212.78 L1468.06 1212.78 L1467.47 1212.78 L1466.88 1212.78 L1466.3 1212.78 L1465.71 1212.78 L1465.12 1212.78 L1464.54 1212.78 L1463.95 1212.78 L1463.37 1212.78 L1462.78 1212.78 L1462.19 1212.78 L1461.61 1212.78 L1461.02 1212.78 L1460.43 1212.78 L1459.85 1212.78 L1459.26 1212.78 L1458.67 1212.78 L1458.09 1212.78 L1457.5 1212.78 L1456.91 1212.78 L1456.33 1212.78 L1455.74 1212.78 L1455.16 1212.78 L1454.57 1212.78 L1453.98 1212.78 L1453.4 1212.78 L1452.81 1212.78 L1452.22 1212.78 L1451.64 1212.78 L1451.05 1212.78 L1450.46 1212.78 L1449.88 1212.78 L1449.29 1212.78 L1448.7 1212.78 L1448.12 1212.78 L1447.53 1212.78 L1446.95 1212.78 L1446.36 1212.78 L1445.77 1212.78 L1445.19 1212.78 L1444.6 1212.78 L1444.01 1212.78 L1443.43 1212.78 L1442.84 1212.78 L1442.25 1212.78 L1441.67 1212.78 L1441.08 1212.78 L1440.5 1212.78 L1439.91 1212.78 L1439.32 1212.78 L1438.74 1212.78 L1438.15 1212.78 L1437.56 1212.78 L1436.98 1212.78 L1436.39 1212.78 L1435.8 1212.78 L1435.22 1212.78 L1434.63 1212.78 L1434.04 1212.78 L1433.46 1212.78 L1432.87 1212.78 L1432.29 1212.78 L1431.7 1212.78 L1431.11 1212.78 L1430.53 1212.78 L1429.94 1212.78 L1429.35 1212.78 L1428.77 1212.78 L1428.18 1212.78 L1427.59 1212.78 L1427.01 1212.78 L1426.42 1212.78 L1425.83 1212.78 L1425.25 1212.78 L1424.66 1212.78 L1424.08 1212.78 L1423.49 1212.78 L1422.9 1212.78 L1422.32 1212.78 L1421.73 1212.78 L1421.14 1212.78 L1420.56 1212.78 L1419.97 1212.78 L1419.38 1212.78 L1418.8 1212.78 L1418.21 1212.78 L1417.63 1212.78 L1417.04 1212.78 L1416.45 1212.78 L1415.87 1212.78 L1415.28 1212.78 L1414.69 1212.78 L1414.11 1212.78 L1413.52 1212.78 L1412.93 1212.78 L1412.35 1212.78 L1411.76 1212.78 L1411.17 1212.78 L1410.59 1212.78 L1410 1212.78 L1409.42 1212.78 L1408.83 1212.78 L1408.24 1212.78 L1407.66 1212.78 L1407.07 1212.78 L1406.48 1212.78 L1405.9 1212.78 L1405.31 1212.78 L1404.72 1212.78 L1404.14 1212.78 L1403.55 1212.78 L1402.96 1212.78 L1402.38 1212.78 L1401.79 1212.78 L1401.21 1212.78 L1400.62 1212.78 L1400.03 1212.78 L1399.45 1212.78 L1398.86 1212.78 L1398.27 1212.78 L1397.69 1212.78 L1397.1 1212.78 L1396.51 1212.78 L1395.93 1212.78 L1395.34 1212.78 L1394.75 1212.78 L1394.17 1212.78 L1393.58 1212.78 L1393 1212.78 L1392.41 1212.78 L1391.82 1212.78 L1391.24 1212.78 L1390.65 1212.78 L1390.06 1212.78 L1389.48 1212.78 L1388.89 1212.78 L1388.3 1212.78 L1387.72 1212.78 L1387.13 1212.78 L1386.55 1212.78 L1385.96 1212.78 L1385.37 1212.78 L1384.79 1212.78 L1384.2 1212.78 L1383.61 1212.78 L1383.03 1212.78 L1382.44 1212.78 L1381.85 1212.78 L1381.27 1212.78 L1380.68 1212.78 L1380.09 1212.78 L1379.51 1212.78 L1378.92 1212.78 L1378.34 1212.78 L1377.75 1212.78 L1377.16 1212.78 L1376.58 1212.78 L1375.99 1212.78 L1375.4 1212.78 L1374.82 1212.78 L1374.23 1212.78 L1373.64 1212.78 L1373.06 1212.78 L1372.47 1212.78 L1371.88 1212.78 L1371.3 1212.78 L1370.71 1212.78 L1370.13 1212.78 L1369.54 1212.78 L1368.95 1212.78 L1368.37 1212.78 L1367.78 1212.78 L1367.19 1212.78 L1366.61 1212.78 L1366.02 1212.78 L1365.43 1212.78 L1364.85 1212.78 L1364.26 1212.78 L1363.68 1212.78 L1363.09 1212.78 L1362.5 1212.78 L1361.92 1212.78 L1361.33 1212.78 L1360.74 1212.78 L1360.16 1212.78 L1359.57 1212.78 L1358.98 1212.78 L1358.4 1212.78 L1357.81 1212.78 L1357.22 1212.78 L1356.64 1212.78 L1356.05 1212.78 L1355.47 1212.78 L1354.88 1212.78 L1354.29 1212.78 L1353.71 1212.78 L1353.12 1212.78 L1352.53 1212.78 L1351.95 1212.78 L1351.36 1212.78 L1350.77 1212.78 L1350.19 1212.78 L1349.6 1212.78 L1349.01 1212.78 L1348.43 1212.78 L1347.84 1212.78 L1347.26 1212.78 L1346.67 1212.78 L1346.08 1212.78 L1345.5 1212.78 L1344.91 1212.78 L1344.32 1212.78 L1343.74 1212.78 L1343.15 1212.78 L1342.56 1212.78 L1341.98 1212.78 L1341.39 1212.78 L1340.8 1212.78 L1340.22 1212.78 L1339.63 1212.78 L1339.05 1212.78 L1338.46 1212.78 L1337.87 1212.78 L1337.29 1212.78 L1336.7 1212.78 L1336.11 1212.78 L1335.53 1212.78 L1334.94 1212.78 L1334.35 1212.78 L1333.77 1212.78 L1333.18 1212.78 L1332.6 1212.78 L1332.01 1212.78 L1331.42 1212.78 L1330.84 1212.78 L1330.25 1212.78 L1329.66 1212.78 L1329.08 1212.78 L1328.49 1212.78 L1327.9 1212.78 L1327.32 1212.78 L1326.73 1212.78 L1326.14 1212.78 L1325.56 1212.78 L1324.97 1212.78 L1324.39 1212.78 L1323.8 1212.78 L1323.21 1212.78 L1322.63 1212.78 L1322.04 1212.78 L1321.45 1212.78 L1320.87 1212.78 L1320.28 1212.78 L1319.69 1212.78 L1319.11 1212.78 L1318.52 1212.78 L1317.93 1212.78 L1317.35 1212.78 L1316.76 1212.78 L1316.18 1212.78 L1315.59 1212.78 L1315 1212.78 L1314.42 1212.78 L1313.83 1212.78 L1313.24 1212.78 L1312.66 1212.78 L1312.07 1212.78 L1311.48 1212.78 L1310.9 1212.78 L1310.31 1212.78 L1309.73 1212.78 L1309.14 1212.78 L1308.55 1212.78 L1307.97 1212.78 L1307.38 1212.78 L1306.79 1212.78 L1306.21 1212.78 L1305.62 1212.78 L1305.03 1212.78 L1304.45 1212.78 L1303.86 1212.78 L1303.27 1212.78 L1302.69 1212.78 L1302.1 1212.78 L1301.52 1212.78 L1300.93 1212.78 L1300.34 1212.78 L1299.76 1212.78 L1299.17 1212.78 L1298.58 1212.78 L1298 1212.78 L1297.41 1212.78 L1296.82 1212.78 L1296.24 1212.78 L1295.65 1212.78 L1295.06 1212.78 L1294.48 1212.78 L1293.89 1212.78 L1293.31 1212.78 L1292.72 1212.78 L1292.13 1212.78 L1291.55 1212.78 L1290.96 1212.78 L1290.37 1212.78 L1289.79 1212.78 L1289.2 1212.78 L1288.61 1212.78 L1288.03 1212.78 L1287.44 1212.78 L1286.86 1212.78 L1286.27 1212.78 L1285.68 1212.78 L1285.1 1212.78 L1284.51 1212.78 L1283.92 1212.78 L1283.34 1212.78 L1282.75 1212.78 L1282.16 1212.78 L1281.58 1212.78 L1280.99 1212.78 L1280.4 1212.78 L1279.82 1212.78 L1279.23 1212.78 L1278.65 1212.78 L1278.06 1212.78 L1277.47 1212.78 L1276.89 1212.78 L1276.3 1212.78 L1275.71 1212.78 L1275.13 1212.78 L1274.54 1212.78 L1273.95 1212.78 L1273.37 1212.78 L1272.78 1212.78 L1272.19 1212.78 L1271.61 1212.78 L1271.02 1212.78 L1270.44 1212.78 L1269.85 1212.78 L1269.26 1212.78 L1268.68 1212.78 L1268.09 1212.78 L1267.5 1212.78 L1266.92 1212.78 L1266.33 1212.78 L1265.74 1212.78 L1265.16 1212.78 L1264.57 1212.78 L1263.98 1212.78 L1263.4 1212.78 L1262.81 1212.78 L1262.23 1212.78 L1261.64 1212.78 L1261.05 1212.78 L1260.47 1212.78 L1259.88 1212.78 L1259.29 1212.78 L1258.71 1212.78 L1258.12 1212.78 L1257.53 1212.78 L1256.95 1212.78 L1256.36 1212.78 L1255.78 1212.78 L1255.19 1212.78 L1254.6 1212.78 L1254.02 1212.78 L1253.43 1212.78 L1252.84 1212.78 L1252.26 1212.78 L1251.67 1212.78 L1251.08 1212.78 L1250.5 1212.78 L1249.91 1212.78 L1249.32 1212.78 L1248.74 1212.78 L1248.15 1212.78 L1247.57 1212.78 L1246.98 1212.78 L1246.39 1212.78 L1245.81 1212.78 L1245.22 1212.78 L1244.63 1212.78 L1244.05 1212.78 L1243.46 1212.78 L1242.87 1212.78 L1242.29 1212.78 L1241.7 1212.78 L1241.11 1212.78 L1240.53 1212.78 L1239.94 1212.78 L1239.36 1212.78 L1238.77 1212.78 L1238.18 1212.78 L1237.6 1212.78 L1237.01 1212.78 L1236.42 1212.78 L1235.84 1212.78 L1235.25 1212.78 L1234.66 1212.78 L1234.08 1212.78 L1233.49 1212.78 L1232.91 1212.78 L1232.32 1212.78 L1231.73 1212.78 L1231.15 1212.78 L1230.56 1212.78 L1229.97 1212.78 L1229.39 1212.78 L1228.8 1212.78 L1228.21 1212.78 L1227.63 1212.78 L1227.04 1212.78 L1226.45 1212.78 L1225.87 1212.78 L1225.28 1212.78 L1224.7 1212.78 L1224.11 1212.78 L1223.52 1212.78 L1222.94 1212.78 L1222.35 1212.78 L1221.76 1212.78 L1221.18 1212.78 L1220.59 1212.78 L1220 1212.78 L1219.42 1212.78 L1218.83 1212.78 L1218.24 1212.78 L1217.66 1212.78 L1217.07 1212.78 L1216.49 1212.78 L1215.9 1212.78 L1215.31 1212.78 L1214.73 1212.78 L1214.14 1212.78 L1213.55 1212.78 L1212.97 1212.78 L1212.38 1212.78 L1211.79 1212.78 L1211.21 1212.78 L1210.62 1212.78 L1210.03 1212.78 L1209.45 1212.78 L1208.86 1212.78 L1208.28 1212.78 L1207.69 1212.78 L1207.1 1212.78 L1206.52 1212.78 L1205.93 1212.78 L1205.34 1212.78 L1204.76 1212.78 L1204.17 1212.78 L1203.58 1212.78 L1203 1212.78 L1202.41 1212.78 L1201.83 1212.78 L1201.24 1212.78 L1200.65 1212.78 L1200.07 1212.78 L1199.48 1212.78 L1198.89 1212.78 L1198.31 1212.78 L1197.72 1212.78 L1197.13 1212.78 L1196.55 1212.78 L1195.96 1212.78 L1195.37 1212.78 L1194.79 1212.78 L1194.2 1212.78 L1193.62 1212.78 L1193.03 1212.78 L1192.44 1212.78 L1191.86 1212.78 L1191.27 1212.78 L1190.68 1212.78 L1190.1 1212.78 L1189.51 1212.78 L1188.92 1212.78 L1188.34 1212.78 L1187.75 1212.78 L1187.16 1212.78 L1186.58 1212.78 L1185.99 1212.78 L1185.41 1212.78 L1184.82 1212.78 L1184.23 1212.78 L1183.65 1212.78 L1183.06 1212.78 L1182.47 1212.78 L1181.89 1212.78 L1181.3 1212.78 L1180.71 1212.78 L1180.13 1212.78 L1179.54 1212.78 L1178.96 1212.78 L1178.37 1212.78 L1177.78 1212.78 L1177.2 1212.78 L1176.61 1212.78 L1176.02 1212.78 L1175.44 1212.78 L1174.85 1212.78 L1174.26 1212.78 L1173.68 1212.78 L1173.09 1212.78 L1172.5 1212.78 L1171.92 1212.78 L1171.33 1212.78 L1170.75 1212.78 L1170.16 1212.78 L1169.57 1212.78 L1168.99 1212.78 L1168.4 1212.78 L1167.81 1212.78 L1167.23 1212.78 L1166.64 1212.78 L1166.05 1212.78 L1165.47 1212.78 L1164.88 1212.78 L1164.29 1212.78 L1163.71 1212.78 L1163.12 1212.78 L1162.54 1212.78 L1161.95 1212.78 L1161.36 1212.78 L1160.78 1212.78 L1160.19 1212.78 L1159.6 1212.78 L1159.02 1212.78 L1158.43 1212.78 L1157.84 1212.78 L1157.26 1212.78 L1156.67 1212.78 L1156.09 1212.78 L1155.5 1212.78 L1154.91 1212.78 L1154.33 1212.78 L1153.74 1212.78 L1153.15 1212.78 L1152.57 1212.78 L1151.98 1212.78 L1151.39 1212.78 L1150.81 1212.78 L1150.22 1212.78 L1149.63 1212.78 L1149.05 1212.78 L1148.46 1212.78 L1147.88 1212.78 L1147.29 1212.78 L1146.7 1212.78 L1146.12 1212.78 L1145.53 1212.78 L1144.94 1212.78 L1144.36 1212.78 L1143.77 1212.78 L1143.18 1212.78 L1142.6 1212.78 L1142.01 1212.78 L1141.42 1212.78 L1140.84 1212.78 L1140.25 1212.78 L1139.67 1212.78 L1139.08 1212.78 L1138.49 1212.78 L1137.91 1212.78 L1137.32 1212.78 L1136.73 1212.78 L1136.15 1212.78 L1135.56 1212.78 L1134.97 1212.78 L1134.39 1212.78 L1133.8 1212.78 L1133.21 1212.78 L1132.63 1212.78 L1132.04 1212.78 L1131.46 1212.78 L1130.87 1212.78 L1130.28 1212.78 L1129.7 1212.78 L1129.11 1212.78 L1128.52 1212.78 L1127.94 1212.78 L1127.35 1212.78 L1126.76 1212.78 L1126.18 1212.78 L1125.59 1212.78 L1125.01 1212.78 L1124.42 1212.78 L1123.83 1212.78 L1123.25 1212.78 L1122.66 1212.78 L1122.07 1212.78 L1121.49 1212.78 L1120.9 1212.78 L1120.31 1212.78 L1119.73 1212.78 L1119.14 1212.78 L1118.55 1212.78 L1117.97 1212.78 L1117.38 1212.78 L1116.8 1212.78 L1116.21 1212.78 L1115.62 1212.78 L1115.04 1212.78 L1114.45 1212.78 L1113.86 1212.78 L1113.28 1212.78 L1112.69 1212.78 L1112.1 1212.78 L1111.52 1212.78 L1110.93 1212.78 L1110.34 1212.78 L1109.76 1212.78 L1109.17 1212.78 L1108.59 1212.78 L1108 1212.78 L1107.41 1212.78 L1106.83 1212.78 L1106.24 1212.78 L1105.65 1212.78 L1105.07 1212.78 L1104.48 1212.78 L1103.89 1212.78 L1103.31 1212.78 L1102.72 1212.78 L1102.14 1212.78 L1101.55 1212.78 L1100.96 1212.78 L1100.38 1212.78 L1099.79 1212.78 L1099.2 1212.78 L1098.62 1212.78 L1098.03 1212.78 L1097.44 1212.78 L1096.86 1212.78 L1096.27 1212.78 L1095.68 1212.78 L1095.1 1212.78 L1094.51 1212.78 L1093.93 1212.78 L1093.34 1212.78 L1092.75 1212.78 L1092.17 1212.78 L1091.58 1212.78 L1090.99 1212.78 L1090.41 1212.78 L1089.82 1212.78 L1089.23 1212.78 L1088.65 1212.78 L1088.06 1212.78 L1087.47 1212.78 L1086.89 1212.78 L1086.3 1212.78 L1085.72 1212.78 L1085.13 1212.78 L1084.54 1212.78 L1083.96 1212.78 L1083.37 1212.78 L1082.78 1212.78 L1082.2 1212.78 L1081.61 1212.78 L1081.02 1212.78 L1080.44 1212.78 L1079.85 1212.78 L1079.26 1212.78 L1078.68 1212.78 L1078.09 1212.78 L1077.51 1212.78 L1076.92 1212.78 L1076.33 1212.78 L1075.75 1212.78 L1075.16 1212.78 L1074.57 1212.78 L1073.99 1212.78 L1073.4 1212.78 L1072.81 1212.78 L1072.23 1212.78 L1071.64 1212.78 L1071.06 1212.78 L1070.47 1212.78 L1069.88 1212.78 L1069.3 1212.78 L1068.71 1212.78 L1068.12 1212.78 L1067.54 1212.78 L1066.95 1212.78 L1066.36 1212.78 L1065.78 1212.78 L1065.19 1212.78 L1064.6 1212.78 L1064.02 1212.78 L1063.43 1212.78 L1062.85 1212.78 L1062.26 1212.78 L1061.67 1212.78 L1061.09 1212.78 L1060.5 1212.78 L1059.91 1212.78 L1059.33 1212.78 L1058.74 1212.78 L1058.15 1212.78 L1057.57 1212.78 L1056.98 1212.78 L1056.39 1212.78 L1055.81 1212.78 L1055.22 1212.78 L1054.64 1212.78 L1054.05 1212.78 L1053.46 1212.78 L1052.88 1212.78 L1052.29 1212.78 L1051.7 1212.78 L1051.12 1212.78 L1050.53 1212.78 L1049.94 1212.78 L1049.36 1212.78 L1048.77 1212.78 L1048.19 1212.78 L1047.6 1212.78 L1047.01 1212.78 L1046.43 1212.78 L1045.84 1212.78 L1045.25 1212.78 L1044.67 1212.78 L1044.08 1212.78 L1043.49 1212.78 L1042.91 1212.78 L1042.32 1212.78 L1041.73 1212.78 L1041.15 1212.78 L1040.56 1212.78 L1039.98 1212.78 L1039.39 1212.78 L1038.8 1212.78 L1038.22 1212.78 L1037.63 1212.78 L1037.04 1212.78 L1036.46 1212.78 L1035.87 1212.78 L1035.28 1212.78 L1034.7 1212.78 L1034.11 1212.78 L1033.52 1212.78 L1032.94 1212.78 L1032.35 1212.78 L1031.77 1212.78 L1031.18 1212.78 L1030.59 1212.78 L1030.01 1212.78 L1029.42 1212.78 L1028.83 1212.78 L1028.25 1212.78 L1027.66 1212.78 L1027.07 1212.78 L1026.49 1212.78 L1025.9 1212.78 L1025.32 1212.78 L1024.73 1212.78 L1024.14 1212.78 L1023.56 1212.78 L1022.97 1212.78 L1022.38 1212.78 L1021.8 1212.78 L1021.21 1212.78 L1020.62 1212.78 L1020.04 1212.78 L1019.45 1212.78 L1018.86 1212.78 L1018.28 1212.78 L1017.69 1212.78 L1017.11 1212.78 L1016.52 1212.78 L1015.93 1212.78 L1015.35 1212.78 L1014.76 1212.78 L1014.17 1212.78 L1013.59 1212.78 L1013 1212.78 L1012.41 1212.78 L1011.83 1212.78 L1011.24 1212.78 L1010.65 1212.78 L1010.07 1212.78 L1009.48 1212.78 L1008.9 1212.78 L1008.31 1212.78 L1007.72 1212.78 L1007.14 1212.78 L1006.55 1212.78 L1005.96 1212.78 L1005.38 1212.78 L1004.79 1212.78 L1004.2 1212.78 L1003.62 1212.78 L1003.03 1212.78 L1002.44 1212.78 L1001.86 1212.78 L1001.27 1212.78 L1000.69 1212.78 L1000.1 1212.78 L999.513 1212.78 L998.926 1212.78 L998.34 1212.78 L997.754 1212.78 L997.167 1212.78 L996.581 1212.78 L995.994 1212.78 L995.408 1212.78 L994.822 1212.78 L994.235 1212.78 L993.649 1212.78 L993.062 1212.78 L992.476 1212.78 L991.889 1212.78 L991.303 1212.78 L990.717 1212.78 L990.13 1212.78 L989.544 1212.78 L988.957 1212.78 L988.371 1212.78 L987.785 1212.78 L987.198 1212.78 L986.612 1212.78 L986.025 1212.78  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.89 986.612,1212.89 987.198,1212.89 987.785,1212.89 988.371,1212.89 988.957,1212.89 989.544,1212.89 990.13,1212.89 990.717,1212.89 991.303,1212.89 991.889,1212.89 992.476,1212.89 993.062,1212.89 993.649,1212.89 994.235,1212.89 994.822,1212.89 995.408,1212.89 995.994,1212.89 996.581,1212.89 997.167,1212.89 997.754,1212.89 998.34,1212.89 998.926,1212.89 999.513,1212.89 1000.1,1212.89 1000.69,1212.89 1001.27,1212.89 1001.86,1212.89 1002.44,1212.89 1003.03,1212.89 1003.62,1212.89 1004.2,1212.89 1004.79,1212.89 1005.38,1212.89 1005.96,1212.89 1006.55,1212.89 1007.14,1212.89 1007.72,1212.89 1008.31,1212.89 1008.9,1212.89 1009.48,1212.89 1010.07,1212.89 1010.65,1212.89 1011.24,1212.89 1011.83,1212.89 1012.41,1212.89 1013,1212.89 1013.59,1212.89 1014.17,1212.89 1014.76,1212.89 1015.35,1212.89 1015.93,1212.89 1016.52,1212.89 1017.11,1212.89 1017.69,1212.89 1018.28,1212.89 1018.86,1212.89 1019.45,1212.89 1020.04,1212.89 1020.62,1212.89 1021.21,1212.89 1021.8,1212.89 1022.38,1212.89 1022.97,1212.89 1023.56,1212.89 1024.14,1212.89 1024.73,1212.89 1025.32,1212.89 1025.9,1212.89 1026.49,1212.89 1027.07,1212.89 1027.66,1212.89 1028.25,1212.89 1028.83,1212.89 1029.42,1212.89 1030.01,1212.89 1030.59,1212.89 1031.18,1212.89 1031.77,1212.89 1032.35,1212.89 1032.94,1212.89 1033.52,1212.89 1034.11,1212.89 1034.7,1212.89 1035.28,1212.89 1035.87,1212.89 1036.46,1212.89 1037.04,1212.89 1037.63,1212.89 1038.22,1212.89 1038.8,1212.89 1039.39,1212.89 1039.98,1212.89 1040.56,1212.89 1041.15,1212.89 1041.73,1212.89 1042.32,1212.89 1042.91,1212.89 1043.49,1212.89 1044.08,1212.89 1044.67,1212.89 1045.25,1212.89 1045.84,1212.89 1046.43,1212.89 1047.01,1212.89 1047.6,1212.89 1048.19,1212.89 1048.77,1212.89 1049.36,1212.89 1049.94,1212.89 1050.53,1212.89 1051.12,1212.89 1051.7,1212.89 1052.29,1212.89 1052.88,1212.89 1053.46,1212.89 1054.05,1212.89 1054.64,1212.89 1055.22,1212.89 1055.81,1212.89 1056.39,1212.89 1056.98,1212.89 1057.57,1212.89 1058.15,1212.89 1058.74,1212.89 1059.33,1212.89 1059.91,1212.89 1060.5,1212.89 1061.09,1212.89 1061.67,1212.89 1062.26,1212.89 1062.85,1212.89 1063.43,1212.89 1064.02,1212.89 1064.6,1212.89 1065.19,1212.89 1065.78,1212.89 1066.36,1212.89 1066.95,1212.89 1067.54,1212.89 1068.12,1212.89 1068.71,1212.89 1069.3,1212.89 1069.88,1212.89 1070.47,1212.89 1071.06,1212.89 1071.64,1212.89 1072.23,1212.89 1072.81,1212.89 1073.4,1212.89 1073.99,1212.89 1074.57,1212.89 1075.16,1212.89 1075.75,1212.89 1076.33,1212.89 1076.92,1212.89 1077.51,1212.89 1078.09,1212.89 1078.68,1212.89 1079.26,1212.89 1079.85,1212.89 1080.44,1212.89 1081.02,1212.89 1081.61,1212.89 1082.2,1212.89 1082.78,1212.89 1083.37,1212.89 1083.96,1212.89 1084.54,1212.89 1085.13,1212.89 1085.72,1212.89 1086.3,1212.89 1086.89,1212.89 1087.47,1212.89 1088.06,1212.89 1088.65,1212.89 1089.23,1212.89 1089.82,1212.89 1090.41,1212.89 1090.99,1212.89 1091.58,1212.89 1092.17,1212.89 1092.75,1212.89 1093.34,1212.89 1093.93,1212.89 1094.51,1212.89 1095.1,1212.89 1095.68,1212.89 1096.27,1212.89 1096.86,1212.89 1097.44,1212.89 1098.03,1212.89 1098.62,1212.89 1099.2,1212.89 1099.79,1212.89 1100.38,1212.89 1100.96,1212.89 1101.55,1212.89 1102.14,1212.89 1102.72,1212.89 1103.31,1212.89 1103.89,1212.89 1104.48,1212.89 1105.07,1212.89 1105.65,1212.89 1106.24,1212.89 1106.83,1212.89 1107.41,1212.89 1108,1212.89 1108.59,1212.89 1109.17,1212.89 1109.76,1212.89 1110.34,1212.89 1110.93,1212.89 1111.52,1212.89 1112.1,1212.89 1112.69,1212.89 1113.28,1212.89 1113.86,1212.89 1114.45,1212.89 1115.04,1212.89 1115.62,1212.89 1116.21,1212.89 1116.8,1212.89 1117.38,1212.89 1117.97,1212.89 1118.55,1212.89 1119.14,1212.89 1119.73,1212.89 1120.31,1212.89 1120.9,1212.89 1121.49,1212.89 1122.07,1212.89 1122.66,1212.89 1123.25,1212.89 1123.83,1212.89 1124.42,1212.89 1125.01,1212.89 1125.59,1212.89 1126.18,1212.89 1126.76,1212.89 1127.35,1212.89 1127.94,1212.89 1128.52,1212.89 1129.11,1212.89 1129.7,1212.89 1130.28,1212.89 1130.87,1212.89 1131.46,1212.89 1132.04,1212.89 1132.63,1212.89 1133.21,1212.89 1133.8,1212.89 1134.39,1212.89 1134.97,1212.89 1135.56,1212.89 1136.15,1212.89 1136.73,1212.89 1137.32,1212.89 1137.91,1212.89 1138.49,1212.89 1139.08,1212.89 1139.67,1212.89 1140.25,1212.89 1140.84,1212.89 1141.42,1212.89 1142.01,1212.89 1142.6,1212.89 1143.18,1212.89 1143.77,1212.89 1144.36,1212.89 1144.94,1212.89 1145.53,1212.89 1146.12,1212.89 1146.7,1212.89 1147.29,1212.89 1147.88,1212.89 1148.46,1212.89 1149.05,1212.89 1149.63,1212.89 1150.22,1212.89 1150.81,1212.89 1151.39,1212.89 1151.98,1212.89 1152.57,1212.89 1153.15,1212.89 1153.74,1212.89 1154.33,1212.89 1154.91,1212.89 1155.5,1212.89 1156.09,1212.89 1156.67,1212.89 1157.26,1212.89 1157.84,1212.89 1158.43,1212.89 1159.02,1212.89 1159.6,1212.89 1160.19,1212.89 1160.78,1212.89 1161.36,1212.89 1161.95,1212.89 1162.54,1212.89 1163.12,1212.89 1163.71,1212.89 1164.29,1212.89 1164.88,1212.89 1165.47,1212.89 1166.05,1212.89 1166.64,1212.89 1167.23,1212.89 1167.81,1212.89 1168.4,1212.89 1168.99,1212.89 1169.57,1212.89 1170.16,1212.89 1170.75,1212.89 1171.33,1212.89 1171.92,1212.89 1172.5,1212.89 1173.09,1212.89 1173.68,1212.89 1174.26,1212.89 1174.85,1212.89 1175.44,1212.89 1176.02,1212.89 1176.61,1212.89 1177.2,1212.89 1177.78,1212.89 1178.37,1212.89 1178.96,1212.89 1179.54,1212.89 1180.13,1212.89 1180.71,1212.89 1181.3,1212.89 1181.89,1212.89 1182.47,1212.89 1183.06,1212.89 1183.65,1212.89 1184.23,1212.89 1184.82,1212.89 1185.41,1212.89 1185.99,1212.89 1186.58,1212.89 1187.16,1212.89 1187.75,1212.89 1188.34,1212.89 1188.92,1212.89 1189.51,1212.89 1190.1,1212.89 1190.68,1212.89 1191.27,1212.89 1191.86,1212.89 1192.44,1212.89 1193.03,1212.89 1193.62,1212.89 1194.2,1212.89 1194.79,1212.89 1195.37,1212.89 1195.96,1212.89 1196.55,1212.89 1197.13,1212.89 1197.72,1212.89 1198.31,1212.89 1198.89,1212.89 1199.48,1212.89 1200.07,1212.89 1200.65,1212.89 1201.24,1212.89 1201.83,1212.89 1202.41,1212.89 1203,1212.89 1203.58,1212.89 1204.17,1212.89 1204.76,1212.89 1205.34,1212.89 1205.93,1212.89 1206.52,1212.89 1207.1,1212.89 1207.69,1212.89 1208.28,1212.89 1208.86,1212.89 1209.45,1212.89 1210.03,1212.89 1210.62,1212.89 1211.21,1212.89 1211.79,1212.89 1212.38,1212.89 1212.97,1212.89 1213.55,1212.89 1214.14,1212.89 1214.73,1212.89 1215.31,1212.89 1215.9,1212.89 1216.49,1212.89 1217.07,1212.89 1217.66,1212.89 1218.24,1212.89 1218.83,1212.89 1219.42,1212.89 1220,1212.89 1220.59,1212.89 1221.18,1212.89 1221.76,1212.89 1222.35,1212.89 1222.94,1212.89 1223.52,1212.89 1224.11,1212.89 1224.7,1212.89 1225.28,1212.89 1225.87,1212.89 1226.45,1212.89 1227.04,1212.89 1227.63,1212.89 1228.21,1212.89 1228.8,1212.89 1229.39,1212.89 1229.97,1212.89 1230.56,1212.89 1231.15,1212.89 1231.73,1212.89 1232.32,1212.89 1232.91,1212.89 1233.49,1212.89 1234.08,1212.89 1234.66,1212.89 1235.25,1212.89 1235.84,1212.89 1236.42,1212.89 1237.01,1212.89 1237.6,1212.89 1238.18,1212.89 1238.77,1212.89 1239.36,1212.89 1239.94,1212.89 1240.53,1212.89 1241.11,1212.89 1241.7,1212.89 1242.29,1212.89 1242.87,1212.89 1243.46,1212.89 1244.05,1212.89 1244.63,1212.89 1245.22,1212.89 1245.81,1212.89 1246.39,1212.89 1246.98,1212.89 1247.57,1212.89 1248.15,1212.89 1248.74,1212.89 1249.32,1212.89 1249.91,1212.89 1250.5,1212.89 1251.08,1212.89 1251.67,1212.89 1252.26,1212.89 1252.84,1212.89 1253.43,1212.89 1254.02,1212.89 1254.6,1212.89 1255.19,1212.89 1255.78,1212.89 1256.36,1212.89 1256.95,1212.89 1257.53,1212.89 1258.12,1212.89 1258.71,1212.89 1259.29,1212.89 1259.88,1212.89 1260.47,1212.89 1261.05,1212.89 1261.64,1212.89 1262.23,1212.89 1262.81,1212.89 1263.4,1212.89 1263.98,1212.89 1264.57,1212.89 1265.16,1212.89 1265.74,1212.89 1266.33,1212.89 1266.92,1212.89 1267.5,1212.89 1268.09,1212.89 1268.68,1212.89 1269.26,1212.89 1269.85,1212.89 1270.44,1212.89 1271.02,1212.89 1271.61,1212.89 1272.19,1212.89 1272.78,1212.89 1273.37,1212.89 1273.95,1212.89 1274.54,1212.89 1275.13,1212.89 1275.71,1212.89 1276.3,1212.89 1276.89,1212.89 1277.47,1212.89 1278.06,1212.89 1278.65,1212.89 1279.23,1212.89 1279.82,1212.89 1280.4,1212.89 1280.99,1212.89 1281.58,1212.89 1282.16,1212.89 1282.75,1212.89 1283.34,1212.89 1283.92,1212.89 1284.51,1212.89 1285.1,1212.89 1285.68,1212.89 1286.27,1212.89 1286.86,1212.89 1287.44,1212.89 1288.03,1212.89 1288.61,1212.89 1289.2,1212.89 1289.79,1212.89 1290.37,1212.89 1290.96,1212.89 1291.55,1212.89 1292.13,1212.89 1292.72,1212.89 1293.31,1212.89 1293.89,1212.89 1294.48,1212.89 1295.06,1212.89 1295.65,1212.89 1296.24,1212.89 1296.82,1212.89 1297.41,1212.89 1298,1212.89 1298.58,1212.89 1299.17,1212.89 1299.76,1212.89 1300.34,1212.89 1300.93,1212.89 1301.52,1212.89 1302.1,1212.89 1302.69,1212.89 1303.27,1212.89 1303.86,1212.89 1304.45,1212.89 1305.03,1212.89 1305.62,1212.89 1306.21,1212.89 1306.79,1212.89 1307.38,1212.89 1307.97,1212.89 1308.55,1212.89 1309.14,1212.89 1309.73,1212.89 1310.31,1212.89 1310.9,1212.89 1311.48,1212.89 1312.07,1212.89 1312.66,1212.89 1313.24,1212.89 1313.83,1212.89 1314.42,1212.89 1315,1212.89 1315.59,1212.89 1316.18,1212.89 1316.76,1212.89 1317.35,1212.89 1317.93,1212.89 1318.52,1212.89 1319.11,1212.89 1319.69,1212.89 1320.28,1212.89 1320.87,1212.89 1321.45,1212.89 1322.04,1212.89 1322.63,1212.89 1323.21,1212.89 1323.8,1212.89 1324.39,1212.89 1324.97,1212.89 1325.56,1212.89 1326.14,1212.89 1326.73,1212.89 1327.32,1212.89 1327.9,1212.89 1328.49,1212.89 1329.08,1212.89 1329.66,1212.89 1330.25,1212.89 1330.84,1212.89 1331.42,1212.89 1332.01,1212.89 1332.6,1212.89 1333.18,1212.89 1333.77,1212.89 1334.35,1212.89 1334.94,1212.89 1335.53,1212.89 1336.11,1212.89 1336.7,1212.89 1337.29,1212.89 1337.87,1212.89 1338.46,1212.89 1339.05,1212.89 1339.63,1212.89 1340.22,1212.89 1340.8,1212.89 1341.39,1212.89 1341.98,1212.89 1342.56,1212.89 1343.15,1212.89 1343.74,1212.89 1344.32,1212.89 1344.91,1212.89 1345.5,1212.89 1346.08,1212.89 1346.67,1212.89 1347.26,1212.89 1347.84,1212.89 1348.43,1212.89 1349.01,1212.89 1349.6,1212.89 1350.19,1212.89 1350.77,1212.89 1351.36,1212.89 1351.95,1212.89 1352.53,1212.89 1353.12,1212.89 1353.71,1212.89 1354.29,1212.89 1354.88,1212.89 1355.47,1212.89 1356.05,1212.89 1356.64,1212.89 1357.22,1212.89 1357.81,1212.89 1358.4,1212.89 1358.98,1212.89 1359.57,1212.89 1360.16,1212.89 1360.74,1212.89 1361.33,1212.89 1361.92,1212.89 1362.5,1212.89 1363.09,1212.89 1363.68,1212.89 1364.26,1212.89 1364.85,1212.89 1365.43,1212.89 1366.02,1212.89 1366.61,1212.89 1367.19,1212.89 1367.78,1212.89 1368.37,1212.89 1368.95,1212.89 1369.54,1212.89 1370.13,1212.89 1370.71,1212.89 1371.3,1212.89 1371.88,1212.89 1372.47,1212.89 1373.06,1212.89 1373.64,1212.89 1374.23,1212.89 1374.82,1212.89 1375.4,1212.89 1375.99,1212.89 1376.58,1212.89 1377.16,1212.89 1377.75,1212.89 1378.34,1212.89 1378.92,1212.89 1379.51,1212.89 1380.09,1212.89 1380.68,1212.89 1381.27,1212.89 1381.85,1212.89 1382.44,1212.89 1383.03,1212.89 1383.61,1212.89 1384.2,1212.89 1384.79,1212.89 1385.37,1212.89 1385.96,1212.89 1386.55,1212.89 1387.13,1212.89 1387.72,1212.89 1388.3,1212.89 1388.89,1212.89 1389.48,1212.89 1390.06,1212.89 1390.65,1212.89 1391.24,1212.89 1391.82,1212.89 1392.41,1212.89 1393,1212.89 1393.58,1212.89 1394.17,1212.89 1394.75,1212.89 1395.34,1212.89 1395.93,1212.89 1396.51,1212.89 1397.1,1212.89 1397.69,1212.89 1398.27,1212.89 1398.86,1212.89 1399.45,1212.89 1400.03,1212.89 1400.62,1212.89 1401.21,1212.89 1401.79,1212.89 1402.38,1212.89 1402.96,1212.89 1403.55,1212.89 1404.14,1212.89 1404.72,1212.89 1405.31,1212.89 1405.9,1212.89 1406.48,1212.89 1407.07,1212.89 1407.66,1212.89 1408.24,1212.89 1408.83,1212.89 1409.42,1212.89 1410,1212.89 1410.59,1212.89 1411.17,1212.89 1411.76,1212.89 1412.35,1212.89 1412.93,1212.89 1413.52,1212.89 1414.11,1212.89 1414.69,1212.89 1415.28,1212.89 1415.87,1212.89 1416.45,1212.89 1417.04,1212.89 1417.63,1212.89 1418.21,1212.89 1418.8,1212.89 1419.38,1212.89 1419.97,1212.89 1420.56,1212.89 1421.14,1212.89 1421.73,1212.89 1422.32,1212.89 1422.9,1212.89 1423.49,1212.89 1424.08,1212.89 1424.66,1212.89 1425.25,1212.89 1425.83,1212.89 1426.42,1212.89 1427.01,1212.89 1427.59,1212.89 1428.18,1212.89 1428.77,1212.89 1429.35,1212.89 1429.94,1212.89 1430.53,1212.89 1431.11,1212.89 1431.7,1212.89 1432.29,1212.89 1432.87,1212.89 1433.46,1212.89 1434.04,1212.89 1434.63,1212.89 1435.22,1212.89 1435.8,1212.89 1436.39,1212.89 1436.98,1212.89 1437.56,1212.89 1438.15,1212.89 1438.74,1212.89 1439.32,1212.89 1439.91,1212.89 1440.5,1212.89 1441.08,1212.89 1441.67,1212.89 1442.25,1212.89 1442.84,1212.89 1443.43,1212.89 1444.01,1212.89 1444.6,1212.89 1445.19,1212.89 1445.77,1212.89 1446.36,1212.89 1446.95,1212.89 1447.53,1212.89 1448.12,1212.89 1448.7,1212.89 1449.29,1212.89 1449.88,1212.89 1450.46,1212.89 1451.05,1212.89 1451.64,1212.89 1452.22,1212.89 1452.81,1212.89 1453.4,1212.89 1453.98,1212.89 1454.57,1212.89 1455.16,1212.89 1455.74,1212.89 1456.33,1212.89 1456.91,1212.89 1457.5,1212.89 1458.09,1212.89 1458.67,1212.89 1459.26,1212.89 1459.85,1212.89 1460.43,1212.89 1461.02,1212.89 1461.61,1212.89 1462.19,1212.89 1462.78,1212.89 1463.37,1212.89 1463.95,1212.89 1464.54,1212.89 1465.12,1212.89 1465.71,1212.89 1466.3,1212.89 1466.88,1212.89 1467.47,1212.89 1468.06,1212.89 1468.64,1212.89 1469.23,1212.89 1469.82,1212.89 1470.4,1212.89 1470.99,1212.89 1471.57,1212.89 1472.16,1212.89 1472.75,1212.89 1473.33,1212.89 1473.92,1212.89 1474.51,1212.89 1475.09,1212.89 1475.68,1212.89 1476.27,1212.89 1476.85,1212.89 1477.44,1212.89 1478.03,1212.89 1478.61,1212.89 1479.2,1212.89 1479.78,1212.89 1480.37,1212.89 1480.96,1212.89 1481.54,1212.89 1482.13,1212.89 1482.72,1212.89 1483.3,1212.89 1483.89,1212.89 1484.48,1212.89 1485.06,1212.89 1485.65,1212.89 1486.24,1212.89 1486.82,1212.89 1487.41,1212.89 1487.99,1212.89 1488.58,1212.89 1489.17,1212.89 1489.75,1212.89 1490.34,1212.89 1490.93,1212.89 1491.51,1212.89 1492.1,1212.89 1492.69,1212.89 1493.27,1212.89 1493.86,1212.89 1494.45,1212.89 1495.03,1212.89 1495.62,1212.89 1496.2,1212.89 1496.79,1212.89 1497.38,1212.89 1497.96,1212.89 1498.55,1212.89 1499.14,1212.89 1499.72,1212.89 1500.31,1212.89 1500.9,1212.89 1501.48,1212.89 1502.07,1212.89 1502.65,1212.89 1503.24,1212.89 1503.83,1212.89 1504.41,1212.89 1505,1212.89 1505.59,1212.89 1506.17,1212.89 1506.76,1212.89 1507.35,1212.89 1507.93,1212.89 1508.52,1212.89 1509.11,1212.89 1509.69,1212.89 1510.28,1212.89 1510.86,1212.89 1511.45,1212.89 1512.04,1212.89 1512.62,1212.89 1513.21,1212.89 1513.8,1212.89 1514.38,1212.89 1514.97,1212.89 1515.56,1212.89 1516.14,1212.89 1516.73,1212.89 1517.32,1212.89 1517.9,1212.89 1518.49,1212.89 1519.07,1212.89 1519.66,1212.89 1520.25,1212.89 1520.83,1212.89 1521.42,1212.89 1522.01,1212.89 1522.59,1212.89 1523.18,1212.89 1523.77,1212.89 1524.35,1212.89 1524.94,1212.89 1525.52,1212.89 1526.11,1212.89 1526.7,1212.89 1527.28,1212.89 1527.87,1212.89 1528.46,1212.89 1529.04,1212.89 1529.63,1212.89 1530.22,1212.89 1530.8,1212.89 1531.39,1212.89 1531.98,1212.89 1532.56,1212.89 1533.15,1212.89 1533.73,1212.89 1534.32,1212.89 1534.91,1212.89 1535.49,1212.89 1536.08,1212.89 1536.67,1212.89 1537.25,1212.89 1537.84,1212.89 1538.43,1212.89 1539.01,1212.89 1539.6,1212.89 1540.19,1212.89 1540.77,1212.89 1541.36,1212.89 1541.94,1212.89 1542.53,1212.89 1543.12,1212.89 1543.7,1212.89 1544.29,1212.89 1544.88,1212.89 1545.46,1212.89 1546.05,1212.89 1546.64,1212.89 1547.22,1212.89 1547.81,1212.89 1548.4,1212.89 1548.98,1212.89 1549.57,1212.89 1550.15,1212.89 1550.74,1212.89 1551.33,1212.89 1551.91,1212.89 1552.5,1212.89 1553.09,1212.89 1553.67,1212.89 1554.26,1212.89 1554.85,1212.89 1555.43,1212.89 1556.02,1212.89 1556.6,1212.89 1557.19,1212.89 1557.78,1212.89 1558.36,1212.89 1558.95,1212.89 1559.54,1212.89 1560.12,1212.89 1560.71,1212.89 1561.3,1212.89 1561.88,1212.89 1562.47,1212.89 1563.06,1212.89 1563.64,1212.89 1564.23,1212.89 1564.81,1212.89 1565.4,1212.89 1565.99,1212.89 1566.57,1212.89 1567.16,1212.89 1567.75,1212.89 1568.33,1212.89 1568.92,1212.89 1569.51,1212.89 1570.09,1212.89 1570.68,1212.89 1571.27,1212.89 1571.85,1212.89 1572.44,1212.89 1573.02,1212.89 1573.61,1212.89 1574.2,1212.89 1574.78,1212.89 1575.37,1212.89 1575.96,1212.89 1576.54,1212.89 1577.13,1212.89 1577.72,1212.89 1578.3,1212.89 1578.89,1212.89 1579.47,1212.89 1580.06,1212.89 1580.65,1212.89 1581.23,1212.89 1581.82,1212.89 1582.41,1212.89 1582.99,1212.89 1583.58,1212.89 1584.17,1212.89 1584.75,1212.89 1585.34,1212.89 1585.93,1212.89 1586.51,1212.89 1587.1,1212.89 1587.68,1212.89 1588.27,1212.89 1588.86,1212.89 1589.44,1212.89 1590.03,1212.89 1590.62,1212.89 1591.2,1212.89 1591.79,1212.89 1592.38,1212.89 1592.96,1212.89 1593.55,1212.89 1594.14,1212.89 1594.72,1212.89 1595.31,1212.89 1595.89,1212.89 1596.48,1212.89 1597.07,1212.89 1597.65,1212.89 1598.24,1212.89 1598.83,1212.89 1599.41,1212.89 1600,1212.89 1600.59,1212.89 1601.17,1212.89 1601.76,1212.89 1602.34,1212.89 1602.93,1212.89 1603.52,1212.89 1604.1,1212.89 1604.69,1212.89 1605.28,1212.89 1605.86,1212.89 1606.45,1212.89 1607.04,1212.89 1607.62,1212.89 1608.21,1212.89 1608.8,1212.89 1609.38,1212.89 1609.97,1212.89 1610.55,1212.89 1611.14,1212.89 1611.73,1212.89 1612.31,1212.89 1612.9,1212.89 1613.49,1212.89 1614.07,1212.89 1614.66,1212.89 1615.25,1212.89 1615.83,1212.89 1616.42,1212.89 1617.01,1212.89 1617.59,1212.89 1618.18,1212.89 1618.76,1212.89 1619.35,1212.89 1619.94,1212.89 1620.52,1212.89 1621.11,1212.89 1621.7,1212.89 1622.28,1212.89 1622.87,1212.89 1623.46,1212.89 1624.04,1212.89 1624.63,1212.89 1625.22,1212.89 1625.8,1212.89 1626.39,1212.89 1626.97,1212.89 1627.56,1212.89 1628.15,1212.89 1628.73,1212.89 1629.32,1212.89 1629.91,1212.89 1630.49,1212.89 1631.08,1212.89 1631.67,1212.89 1632.25,1212.89 1632.84,1212.89 1633.42,1212.89 1634.01,1212.89 1634.6,1212.89 1635.18,1212.89 1635.77,1212.89 1636.36,1212.89 1636.94,1212.89 1637.53,1212.89 1638.12,1212.89 1638.7,1212.89 1639.29,1212.89 1639.88,1212.89 1640.46,1212.89 1641.05,1212.89 1641.63,1212.89 1642.22,1212.89 1642.81,1212.89 1643.39,1212.89 1643.98,1212.89 1644.57,1212.89 1645.15,1212.89 1645.74,1212.89 1646.33,1212.89 1646.91,1212.89 1647.5,1212.89 1648.09,1212.89 1648.67,1212.89 1649.26,1212.89 1649.84,1212.89 1650.43,1212.89 1651.02,1212.89 1651.6,1212.89 1652.19,1212.89 1652.78,1212.89 1653.36,1212.89 1653.95,1212.89 1654.54,1212.89 1655.12,1212.89 1655.71,1212.89 1656.29,1212.89 1656.88,1212.89 1657.47,1212.89 1658.05,1212.89 1658.64,1212.89 1659.23,1212.89 1659.81,1212.89 1660.4,1212.89 1660.99,1212.89 1661.57,1212.89 1662.16,1212.89 1662.75,1212.89 1663.33,1212.89 1663.92,1212.89 1664.5,1212.89 1665.09,1212.89 1665.68,1212.89 1666.26,1212.89 1666.85,1212.89 1667.44,1212.89 1668.02,1212.89 1668.61,1212.89 1669.2,1212.89 1669.78,1212.89 1670.37,1212.89 1670.96,1212.89 1671.54,1212.89 1672.13,1212.89 1672.71,1212.89 1673.3,1212.89 1673.89,1212.89 1674.47,1212.89 1675.06,1212.89 1675.65,1212.89 1676.23,1212.89 1676.82,1212.89 1677.41,1212.89 1677.99,1212.89 1678.58,1212.89 1679.17,1212.89 1679.75,1212.89 1680.34,1212.89 1680.92,1212.89 1681.51,1212.89 1682.1,1212.89 1682.68,1212.89 1683.27,1212.89 1683.86,1212.89 1684.44,1212.89 1685.03,1212.89 1685.62,1212.89 1686.2,1212.89 1686.79,1212.89 1687.37,1212.89 1687.96,1212.89 1688.55,1212.89 1689.13,1212.89 1689.72,1212.89 1690.31,1212.89 1690.89,1212.89 1691.48,1212.89 1692.07,1212.89 1692.65,1212.89 1693.24,1212.89 1693.83,1212.89 1694.41,1212.89 1695,1212.89 1695.58,1212.89 1696.17,1212.89 1696.76,1212.89 1697.34,1212.89 1697.93,1212.89 1698.52,1212.89 1699.1,1212.89 1699.69,1212.89 1700.28,1212.89 1700.86,1212.89 1701.45,1212.89 1702.04,1212.89 1702.62,1212.89 1703.21,1212.89 1703.79,1212.89 1704.38,1212.89 1704.97,1212.89 1705.55,1212.89 1706.14,1212.89 1706.73,1212.89 1707.31,1212.89 1707.9,1212.89 1708.49,1212.89 1709.07,1212.89 1709.66,1212.89 1710.24,1212.89 1710.83,1212.89 1711.42,1212.89 1712,1212.89 1712.59,1212.89 1713.18,1212.89 1713.76,1212.89 1714.35,1212.89 1714.94,1212.89 1715.52,1212.89 1716.11,1212.89 1716.7,1212.89 1717.28,1212.89 1717.87,1212.89 1718.45,1212.89 1719.04,1212.89 1719.63,1212.89 1720.21,1212.89 1720.8,1212.89 1721.39,1212.89 1721.97,1212.89 1722.56,1212.89 1723.15,1212.89 1723.73,1212.89 1724.32,1212.89 1724.91,1212.89 1725.49,1212.89 1726.08,1212.89 1726.66,1212.89 1727.25,1212.89 1727.84,1212.89 1728.42,1212.89 1729.01,1212.89 1729.6,1212.89 1730.18,1212.89 1730.77,1212.89 1731.36,1212.89 1731.94,1212.89 1732.53,1212.89 1733.11,1212.89 1733.7,1212.89 1734.29,1212.89 1734.87,1212.89 1735.46,1212.89 1736.05,1212.89 1736.63,1212.89 1737.22,1212.89 1737.81,1212.89 1738.39,1212.89 1738.98,1212.89 1739.57,1212.89 1740.15,1212.89 1740.74,1212.89 1741.32,1212.89 1741.91,1212.89 1742.5,1212.89 1743.08,1212.89 1743.67,1212.89 1744.26,1212.89 1744.84,1212.89 1745.43,1212.89 1746.02,1212.89 1746.6,1212.89 1747.19,1212.89 1747.78,1212.89 1748.36,1212.89 1748.95,1212.89 1749.53,1212.89 1750.12,1212.89 1750.71,1212.89 1751.29,1212.89 1751.88,1212.89 1752.47,1212.89 1753.05,1212.89 1753.64,1212.89 1754.23,1212.89 1754.81,1212.89 1755.4,1212.89 1755.99,1212.89 1756.57,1212.89 1757.16,1212.89 1757.74,1212.89 1758.33,1212.89 1758.92,1212.89 1759.5,1212.89 1760.09,1212.89 1760.68,1212.89 1761.26,1212.89 1761.85,1212.89 1762.44,1212.89 1763.02,1212.89 1763.61,1212.89 1764.19,1212.89 1764.78,1212.89 1765.37,1212.89 1765.95,1212.89 1766.54,1212.89 1767.13,1212.89 1767.71,1212.89 1768.3,1212.89 1768.89,1212.89 1769.47,1212.89 1770.06,1212.89 1770.65,1212.89 1771.23,1212.89 1771.82,1212.89 1772.4,1212.89 1772.99,1212.89 1773.58,1212.89 1774.16,1212.89 1774.75,1212.89 1775.34,1212.89 1775.92,1212.89 1776.51,1212.89 1777.1,1212.89 1777.68,1212.89 1778.27,1212.89 1778.86,1212.89 1779.44,1212.89 1780.03,1212.89 1780.61,1212.89 1781.2,1212.89 1781.79,1212.89 1782.37,1212.89 1782.96,1212.89 1783.55,1212.89 1784.13,1212.89 1784.72,1212.89 1785.31,1212.89 1785.89,1212.89 1786.48,1212.89 1787.06,1212.89 1787.65,1212.89 1788.24,1212.89 1788.82,1212.89 1789.41,1212.89 1790,1212.89 1790.58,1212.89 1791.17,1212.89 1791.76,1212.89 1792.34,1212.89 1792.93,1212.89 1793.52,1212.89 1794.1,1212.89 1794.69,1212.89 1795.27,1212.89 1795.86,1212.89 1796.45,1212.89 1797.03,1212.89 1797.62,1212.89 1798.21,1212.89 1798.79,1212.89 1799.38,1212.89 1799.97,1212.89 1800.55,1212.89 1801.14,1212.89 1801.73,1212.89 1802.31,1212.89 1802.9,1212.89 1803.48,1212.89 1804.07,1212.89 1804.66,1212.89 1805.24,1212.89 1805.83,1212.89 1806.42,1212.89 1807,1212.89 1807.59,1212.89 1808.18,1212.89 1808.76,1212.89 1809.35,1212.89 1809.94,1212.89 1810.52,1212.89 1811.11,1212.89 1811.69,1212.89 1812.28,1212.89 1812.87,1212.89 1813.45,1212.89 1814.04,1212.89 1814.63,1212.89 1815.21,1212.89 1815.8,1212.89 1816.39,1212.89 1816.97,1212.89 1817.56,1212.89 1818.14,1212.89 1818.73,1212.89 1819.32,1212.89 1819.9,1212.89 1820.49,1212.89 1821.08,1212.89 1821.66,1212.89 1822.25,1212.89 1822.84,1212.89 1823.42,1212.89 1824.01,1212.89 1824.6,1212.89 1825.18,1212.89 1825.77,1212.89 1826.35,1212.89 1826.94,1212.89 1827.53,1212.89 1828.11,1212.89 1828.7,1212.89 1829.29,1212.89 1829.87,1212.89 1830.46,1212.89 1831.05,1212.89 1831.63,1212.89 1832.22,1212.89 1832.81,1212.89 1833.39,1212.89 1833.98,1212.89 1834.56,1212.89 1835.15,1212.89 1835.74,1212.89 1836.32,1212.89 1836.91,1212.89 1837.5,1212.89 1838.08,1212.89 1838.67,1212.89 1839.26,1212.89 1839.84,1212.89 1840.43,1212.89 1841.01,1212.89 1841.6,1212.89 1842.19,1212.89 1842.77,1212.89 1843.36,1212.89 1843.95,1212.89 1844.53,1212.89 1845.12,1212.89 1845.71,1212.89 1846.29,1212.89 1846.88,1212.89 1847.47,1212.89 1848.05,1212.89 1848.64,1212.89 1849.22,1212.89 1849.81,1212.89 1850.4,1212.89 1850.98,1212.89 1851.57,1212.89 1852.16,1212.89 1852.74,1212.89 1853.33,1212.89 1853.92,1212.89 1854.5,1212.89 1855.09,1212.89 1855.68,1212.89 1856.26,1212.89 1856.85,1212.89 1857.43,1212.89 1858.02,1212.89 1858.61,1212.89 1859.19,1212.89 1859.78,1212.89 1860.37,1212.89 1860.95,1212.89 1861.54,1212.89 1862.13,1212.89 1862.71,1212.89 1863.3,1212.89 1863.88,1212.89 1864.47,1212.89 1865.06,1212.89 1865.64,1212.89 1866.23,1212.89 1866.82,1212.89 1867.4,1212.89 1867.99,1212.89 1868.58,1212.89 1869.16,1212.89 1869.75,1212.89 1870.34,1212.89 1870.92,1212.89 1871.51,1212.89 1872.09,1212.89 1872.68,1212.89 1873.27,1212.89 1873.85,1212.89 1874.44,1212.89 1875.03,1212.89 1875.61,1212.89 1876.2,1212.89 1876.79,1212.89 1877.37,1212.89 1877.96,1212.89 1878.55,1212.89 1879.13,1212.89 1879.72,1212.89 1880.3,1212.89 1880.89,1212.89 1881.48,1212.89 1882.06,1212.89 1882.65,1212.89 1883.24,1212.89 1883.82,1212.89 1884.41,1212.89 1885,1212.89 1885.58,1212.89 1886.17,1212.89 1886.76,1212.89 1887.34,1212.89 1887.93,1212.89 1888.51,1212.89 1889.1,1212.89 1889.69,1212.89 1890.27,1212.89 1890.86,1212.89 1891.45,1212.89 1892.03,1212.89 1892.62,1212.89 1893.21,1212.89 1893.79,1212.89 1894.38,1212.89 1894.96,1212.89 1895.55,1212.89 1896.14,1212.89 1896.72,1212.89 1897.31,1212.89 1897.9,1212.89 1898.48,1212.89 1899.07,1212.89 1899.66,1212.89 1900.24,1212.89 1900.83,1212.89 1901.42,1212.89 1902,1212.89 1902.59,1212.89 1903.17,1212.89 1903.76,1212.89 1904.35,1212.89 1904.93,1212.89 1905.52,1212.89 1906.11,1212.89 1906.69,1212.89 1907.28,1212.89 1907.87,1212.89 1908.45,1212.89 1909.04,1212.89 1909.63,1212.89 1910.21,1212.89 1910.8,1212.89 1911.38,1212.89 1911.97,1212.89 1912.56,1212.89 1913.14,1212.89 1913.73,1212.89 1914.32,1212.89 1914.9,1212.89 1915.49,1212.89 1916.08,1212.89 1916.66,1212.89 1917.25,1212.89 1917.83,1212.89 1918.42,1212.89 1919.01,1212.89 1919.59,1212.89 1920.18,1212.89 1920.77,1212.89 1921.35,1212.89 1921.94,1212.89 1922.53,1212.89 1923.11,1212.89 1923.7,1212.89 1924.29,1212.89 1924.87,1212.89 1925.46,1212.89 1926.04,1212.89 1926.63,1212.89 1927.22,1212.89 1927.8,1212.89 1928.39,1212.89 1928.98,1212.89 1929.56,1212.89 1930.15,1212.89 1930.74,1212.89 1931.32,1212.89 1931.91,1212.89 1932.5,1212.89 1933.08,1212.89 1933.67,1212.89 1934.25,1212.89 1934.84,1212.89 1935.43,1212.89 1936.01,1212.89 1936.6,1212.89 1937.19,1212.89 1937.77,1212.89 1938.36,1212.89 1938.95,1212.89 1939.53,1212.89 1940.12,1212.89 1940.71,1212.89 1941.29,1212.89 1941.88,1212.89 1942.46,1212.89 1943.05,1212.89 1943.64,1212.89 1944.22,1212.89 1944.81,1212.89 1945.4,1212.89 1945.98,1212.89 1946.57,1212.89 1947.16,1212.89 1947.74,1212.89 1948.33,1212.89 1948.91,1212.89 1949.5,1212.89 1950.09,1212.89 1950.67,1212.89 1951.26,1212.89 1951.85,1212.89 1952.43,1212.89 1953.02,1212.89 1953.61,1212.89 1954.19,1212.89 1954.78,1212.89 1955.37,1212.89 1955.95,1212.89 1956.54,1212.89 1957.12,1212.89 1957.71,1212.89 1958.3,1212.89 1958.88,1212.89 1959.47,1212.89 1960.06,1212.89 1960.64,1212.89 1961.23,1212.89 1961.82,1212.89 1962.4,1212.89 1962.99,1212.89 1963.58,1212.89 1964.16,1212.89 1964.75,1212.89 1965.33,1212.89 1965.92,1212.89 1966.51,1212.89 1967.09,1212.89 1967.68,1212.89 1968.27,1212.89 1968.85,1212.89 1969.44,1212.89 1970.03,1212.89 1970.61,1212.89 1971.2,1212.89 1971.78,1212.89 1972.37,1212.89 1972.96,1212.89 1973.54,1212.89 1974.13,1212.89 1974.72,1212.89 1975.3,1212.89 1975.89,1212.89 1976.48,1212.89 1977.06,1212.89 1977.65,1212.89 1978.24,1212.89 1978.82,1212.89 1979.41,1212.89 1979.99,1212.89 1980.58,1212.89 1981.17,1212.89 1981.75,1212.89 1982.34,1212.89 1982.93,1212.89 1983.51,1212.89 1984.1,1212.89 1984.69,1212.89 1985.27,1212.89 1985.86,1212.89 1986.45,1212.89 1987.03,1212.89 1987.62,1212.89 1988.2,1212.89 1988.79,1212.89 1989.38,1212.89 1989.96,1212.89 1990.55,1212.89 1991.14,1212.89 1991.72,1212.89 1992.31,1212.89 1992.9,1212.89 1993.48,1212.89 1994.07,1212.89 1994.65,1212.89 1995.24,1212.89 1995.83,1212.89 1996.41,1212.89 1997,1212.89 1997.59,1212.89 1998.17,1212.89 1998.76,1212.89 1999.35,1212.89 1999.93,1212.89 2000.52,1212.89 2001.11,1212.89 2001.69,1212.89 2002.28,1212.89 2002.86,1212.89 2003.45,1212.89 2004.04,1212.89 2004.62,1212.89 2005.21,1212.89 2005.8,1212.89 2006.38,1212.89 2006.97,1212.89 2007.56,1212.89 2008.14,1212.89 2008.73,1212.89 2009.32,1212.89 2009.9,1212.89 2010.49,1212.89 2011.07,1212.89 2011.66,1212.89 2012.25,1212.89 2012.83,1212.89 2013.42,1212.89 2014.01,1212.89 2014.59,1212.89 2015.18,1212.89 2015.77,1212.89 2016.35,1212.89 2016.94,1212.89 2017.53,1212.89 2018.11,1212.89 2018.7,1212.89 2019.28,1212.89 2019.87,1212.89 2020.46,1212.89 2021.04,1212.89 2021.63,1212.89 2022.22,1212.89 2022.8,1212.89 2023.39,1212.89 2023.98,1212.89 2024.56,1212.89 2025.15,1212.89 2025.73,1212.89 2026.32,1212.89 2026.91,1212.89 2027.49,1212.89 2028.08,1212.89 2028.67,1212.89 2029.25,1212.89 2029.84,1212.89 2030.43,1212.89 2031.01,1212.89 2031.6,1212.89 2032.19,1212.89 2032.77,1212.89 2033.36,1212.89 2033.94,1212.89 2034.53,1212.89 2035.12,1212.89 2035.7,1212.89 2036.29,1212.89 2036.88,1212.89 2037.46,1212.89 2038.05,1212.89 2038.64,1212.89 2039.22,1212.89 2039.81,1212.89 2040.4,1212.89 2040.98,1212.89 2041.57,1212.89 2042.15,1212.89 2042.74,1212.89 2043.33,1212.89 2043.91,1212.89 2044.5,1212.89 2045.09,1212.89 2045.67,1212.89 2046.26,1212.89 2046.85,1212.89 2047.43,1212.89 2048.02,1212.89 2048.6,1212.89 2049.19,1212.89 2049.78,1212.89 2050.36,1212.89 2050.95,1212.89 2051.54,1212.89 2052.12,1212.89 2052.71,1212.89 2053.3,1212.89 2053.88,1212.89 2054.47,1212.89 2055.06,1212.89 2055.64,1212.89 2056.23,1212.89 2056.81,1212.89 2057.4,1212.89 2057.99,1212.89 2058.57,1212.89 2059.16,1212.89 2059.75,1212.89 2060.33,1212.89 2060.92,1212.89 2061.51,1212.89 2062.09,1212.89 2062.68,1212.89 2063.27,1212.89 2063.85,1212.89 2064.44,1212.89 2065.02,1212.89 2065.61,1212.89 2066.2,1212.89 2066.78,1212.89 2067.37,1212.89 2067.96,1212.89 2068.54,1212.89 2069.13,1212.89 2069.72,1212.89 2070.3,1212.89 2070.89,1212.89 2071.48,1212.89 2072.06,1212.89 2072.65,1212.89 2073.23,1212.89 2073.82,1212.89 2074.41,1212.89 2074.99,1212.89 2075.58,1212.89 2076.17,1212.89 2076.75,1212.89 2077.34,1212.89 2077.93,1212.89 2078.51,1212.89 2079.1,1212.89 2079.68,1212.89 2080.27,1212.89 2080.86,1212.89 2081.44,1212.89 2082.03,1212.89 2082.62,1212.89 2083.2,1212.89 2083.79,1212.89 2084.38,1212.89 2084.96,1212.89 2085.55,1212.89 2086.14,1212.89 2086.72,1212.89 2087.31,1212.89 2087.89,1212.89 2088.48,1212.89 2089.07,1212.89 2089.65,1212.89 2090.24,1212.89 2090.83,1212.89 2091.41,1212.89 2092,1212.89 2092.59,1212.89 2093.17,1212.89 2093.76,1212.89 2094.35,1212.89 2094.93,1212.89 2095.52,1212.89 2096.1,1212.89 2096.69,1212.89 2097.28,1212.89 2097.86,1212.89 2098.45,1212.89 2099.04,1212.89 2099.62,1212.89 2100.21,1212.89 2100.8,1212.89 2101.38,1212.89 2101.97,1212.89 2102.55,1212.89 2103.14,1212.89 2103.73,1212.89 2104.31,1212.89 2104.9,1212.89 2105.49,1212.89 2106.07,1212.89 2106.66,1212.89 2107.25,1212.89 2107.83,1212.89 2108.42,1212.89 2109.01,1212.89 2109.59,1212.89 2110.18,1212.89 2110.76,1212.89 2111.35,1212.89 2111.94,1212.89 2112.52,1212.89 2113.11,1212.89 2113.7,1212.89 2114.28,1212.89 2114.87,1212.89 2115.46,1212.89 2116.04,1212.89 2116.63,1212.89 2117.22,1212.89 2117.8,1212.89 2118.39,1212.89 2118.97,1212.89 2119.56,1212.89 2120.15,1212.89 2120.73,1212.89 2121.32,1212.89 2121.91,1212.89 2122.49,1212.89 2123.08,1212.89 2123.67,1212.89 2124.25,1212.89 2124.84,1212.89 2125.42,1212.89 2126.01,1212.89 2126.6,1212.89 2127.18,1212.89 2127.77,1212.89 2128.36,1212.89 2128.94,1212.89 2129.53,1212.89 2130.12,1212.89 2130.7,1212.89 2131.29,1212.89 2131.88,1212.89 2132.46,1212.89 2133.05,1212.89 2133.63,1212.89 2134.22,1212.89 2134.81,1212.89 2135.39,1212.89 2135.98,1212.89 2136.57,1212.89 2137.15,1212.89 2137.74,1212.89 2138.33,1212.89 2138.91,1212.89 2139.5,1212.89 2140.09,1212.89 2140.67,1212.89 2141.26,1212.89 2141.84,1212.89 2142.43,1212.89 2143.02,1212.89 2143.6,1212.89 2144.19,1212.89 2144.78,1212.89 2145.36,1212.89 2145.95,1212.89 2146.54,1212.89 2147.12,1212.89 2147.71,1212.89 2148.3,1212.89 2148.88,1212.89 2149.47,1212.89 2150.05,1212.89 2150.64,1212.89 2151.23,1212.89 2151.81,1212.89 2152.4,1212.89 2152.99,1212.89 2153.57,1212.89 2154.16,1212.89 2154.75,1212.89 2155.33,1212.89 2155.92,1212.89 2156.5,1212.89 2157.09,1212.89 2157.68,1212.89 2158.26,1212.89 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.04,1194.79 1399.23,899.083 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.45 985.439,1194.79 2158.26,1194.79 2158.26,1230.45 985.439,1230.45 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip813\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip813)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2699.44 162.673,-3902.72 163.232,-5008.93 163.792,-6041.17 164.351,-5702.86 164.91,-6624.05 165.469,-6305.98 166.029,-7087.55 166.588,-7802.62 167.147,-8467.91 167.706,-8169.45 168.266,-8753.02 168.825,-9277.91 169.384,-9730.58 169.943,-10150.2 170.503,-10521.9 171.062,-10831.2 171.621,-10509.8 172.18,-10781 172.74,-11014.6 173.299,-11204.5 173.858,-11363 174.417,-11486.5 174.977,-11176.2 175.536,-11277.6 176.095,-11349 176.655,-11411.1 177.214,-11438.6 177.773,-11131 178.332,-11129 178.892,-10581.9 179.451,-10558.5 180.01,-10504.4 180.569,-10017.1 181.129,-9762.84 181.688,-9519.1 182.247,-9445.82 182.806,-9039.09 183.366,-8802.55 183.925,-8726.91 184.484,-8358.76 185.043,-8280.99 185.603,-8201.71 186.162,-7849.82 186.721,-7533.19 187.28,-7457 187.84,-7269.03 188.399,-7186.59 188.958,-6909.42 189.517,-6739.21 190.077,-6486.69 190.636,-6318.94 191.195,-6168.04 191.754,-6007.52 192.314,-5845.49 192.873,-5694.78 193.432,-5467.58 193.991,-5324.56 194.551,-5236 195.11,-5026.41 195.669,-4885.32 196.228,-4752.76 196.788,-4566.61 197.347,-4332.54 197.906,-4153.3 198.465,-4033.93 199.025,-3960.13 199.584,-3888.02 200.143,-3769.67 200.702,-3651.91 201.262,-3579.66 201.821,-3425.86 202.38,-3310.91 202.939,-3163.87 203.499,-3017.16 204.058,-2878.19 204.617,-2707.77 205.176,-2619.87 205.736,-2529.91 206.295,-2309.8 206.854,-2233.75 207.413,-2120.71 207.973,-2047.07 208.532,-1936.23 209.091,-1928.45 209.65,-1851.32 210.21,-1803.44 210.769,-1695.02 211.328,-1560.27 211.887,-1460.66 212.447,-1365.51 213.006,-1354.99 213.565,-1287.19 214.124,-1244.71 214.684,-1205.83 215.243,-1135.66 215.802,-1092.95 216.361,-1028.32 216.921,-987.993 217.48,-873.6 218.039,-816.141 218.598,-686.208 219.158,-612.959 219.717,-534.144 220.276,-462.912 220.835,-433.894 221.395,-336.637 221.954,-287.439 222.513,-235.091 223.072,-146.311 223.632,-100.622 224.191,-57.8369 224.75,5.89547 225.309,62.7838 225.869,97.8754 226.428,115.28 226.987,174.205 227.546,184.153 228.106,236.592 228.665,269.007 229.224,302.108 229.783,311.105 230.343,382.27 230.902,368.134 231.461,399.951 232.02,426.861 232.58,475.656 233.139,485.671 233.698,472.651 234.257,500.818 234.817,510.323 235.376,513.968 235.935,523.283 236.494,492.925 237.054,560.569 237.613,586.614 238.172,666.35 238.731,702.007 239.291,719.215 239.85,755.559 240.409,755.405 240.968,755.415 241.528,755.21 242.087,774.155 242.646,808.601 243.205,830.816 243.765,866.115 244.324,862.906 244.883,855.711 245.442,869.324 246.002,869.336 246.561,868.118 247.12,864.855 247.679,848.168 248.239,866.981 248.798,882.332 249.357,916.231 249.916,933.07 250.476,914.502 251.035,911.002 251.594,909.675 252.153,907.704 252.713,921.187 253.272,901.867 253.831,931.068 254.39,945.407 254.95,976.209 255.509,972.263 256.068,966.971 256.627,963.725 257.187,994.038 257.746,988.54 258.305,981.676 258.864,1010.9 259.424,1005.51 259.983,999.987 260.542,1025.54 261.101,1015.47 261.661,1042.69 262.22,1039.86 262.779,1035.36 263.338,1011.27 263.898,1020.01 264.457,1033.31 265.016,1047.88 265.575,1073.38 266.135,1064.13 266.694,1077.77 267.253,1131.67 267.812,1123.99 268.372,1131.69 268.931,1139.7 269.49,1145.2 270.049,1134.13 270.609,1141.56 271.168,1125.49 271.727,1092.97 272.286,1101.25 272.846,1124.47 273.405,1112.68 273.964,1123.71 274.523,1131.72 275.083,1122.08 275.642,1131.12 276.201,1137.17 276.76,1126.2 277.32,1129.67 277.879,1136.63 278.438,1091.31 278.997,1114.78 279.557,1104.75 280.116,1110.87 280.675,1100.36 281.234,1092.97 281.794,1103.58 282.353,1110.04 282.912,1113.82 283.471,1088.41 284.031,1047.33 284.59,1038.77 285.149,1035.32 285.708,1029.83 286.268,1026.81 286.827,1023.42 287.386,1053.26 287.945,1066.6 288.505,1092.43 289.064,1099.41 289.623,1076.4 290.182,1068.28 290.742,1062.39 291.301,1052.99 291.86,1060.6 292.419,1052.48 292.979,1045.23 293.538,1053.67 294.097,1061.86 294.656,1080.51 295.216,1037.32 295.775,1031.52 296.334,1022.08 296.893,983.103 297.453,994.094 298.012,1005.04 298.571,998.819 299.13,1007.48 299.69,1003.06 300.249,1016.34 300.808,1023.96 301.368,1000.7 301.927,1010 302.486,1019.54 303.045,1047.43 303.605,1087.45 304.164,1107.62 304.723,1093.74 305.282,1082.82 305.842,1055.07 306.401,1045.88 306.96,1053.83 307.519,1045.89 308.079,1037.53 308.638,997.407 309.197,1009.79 309.756,1035.64 310.316,991.547 310.875,985.78 311.434,978.012 311.993,973.5 312.553,982.024 313.112,1009.93 313.671,1035.92 314.23,1026.8 314.79,1015.4 315.349,1007.34 315.908,1033.09 316.467,1025.88 317.027,1034.63 317.586,1039.77 318.145,1045.18 318.704,1038.99 319.264,1080.36 319.823,1062.18 320.382,1057.03 320.941,1047.41 321.501,1026.51 322.06,1017.98 322.619,1028.58 323.178,1005.12 323.738,993.57 324.297,1015.49 324.856,992.556 325.415,983.575 325.975,960.874 326.534,942.985 327.093,937.304 327.652,918.899 328.212,882.459 328.771,868.685 329.33,848.255 329.889,830.675 330.449,815.401 331.008,852.131 331.567,839.918 332.126,841.185 332.686,825.005 333.245,844.606 333.804,829.533 334.363,809.968 334.923,829.894 335.482,831.896 336.041,863.996 336.6,880.03 337.16,858.964 337.719,824.28 338.278,810.911 338.837,796.983 339.397,769.132 339.956,790.068 340.515,776.349 341.074,794.051 341.634,797.519 342.193,799.48 342.752,787.849 343.311,792.145 343.871,811.677 344.43,828.672 344.989,828.938 345.548,830.609 346.108,845.435 346.667,859.991 347.226,827.833 347.785,826.295 348.345,821.376 348.904,870.762 349.463,900.4 350.022,927.125 350.582,920.437 351.141,949.19 351.7,943.755 352.259,937.86 352.819,916.116 353.378,928.35 353.937,924.942 354.496,937.059 355.056,946.139 355.615,936.316 356.174,929.613 356.733,938.79 357.293,913.985 357.852,910.071 358.411,921.413 358.97,933.024 359.53,863.873 360.089,863.099 360.648,920.927 361.207,866.506 361.767,865.182 362.326,894.933 362.885,890.039 363.444,870.104 364.004,867.661 364.563,867.174 365.122,851.632 365.681,841.563 366.241,841.534 366.8,874.85 367.359,872.094 367.918,916.196 368.478,956.831 369.037,935.957 369.596,892.765 370.155,870.621 370.715,852.192 371.274,851.862 371.833,864.141 372.392,859.647 372.952,840.325 373.511,824.879 374.07,823.86 374.629,759.953 375.189,764.106 375.748,746.999 376.307,750.078 376.866,783.21 377.426,788.136 377.985,804.463 378.544,804.699 379.103,818.168 379.663,800.837 380.222,785.054 380.781,804.81 381.34,822.779 381.9,868.791 382.459,863.186 383.018,855.958 383.577,904.408 384.137,898.586 384.696,909.656 385.255,936.538 385.814,880.33 386.374,872.366 386.933,867.856 387.492,845.78 388.051,824.909 388.611,838.609 389.17,852.528 389.729,852.182 390.288,865.792 390.848,911.879 391.407,870.018 391.966,899.786 392.525,923.405 393.085,916.622 393.644,926.398 394.203,921.221 394.762,927.876 395.322,920.581 395.881,918.94 396.44,910.945 396.999,902.289 397.559,895.703 398.118,888.786 398.677,897.519 399.236,904.213 399.796,912.262 400.355,905.264 400.914,900.18 401.473,891.281 402.033,851.46 402.592,841.254 403.151,849.967 403.71,865.146 404.27,878.189 404.829,856.389 405.388,849.655 405.947,829.813 406.507,842.024 407.066,806.253 407.625,801.724 408.184,801.305 408.744,784.508 409.303,800.888 409.862,799.689 410.421,764.318 410.981,796.233 411.54,779.717 412.099,814.579 412.658,814.92 413.218,817.819 413.777,831.088 414.336,842.967 414.895,854.373 415.455,844.493 416.014,855.338 416.573,854.675 417.132,868.437 417.692,813.311 418.251,790.09 418.81,787.776 419.369,799.697 419.929,814.372 420.488,813.179 421.047,778.509 421.606,778.293 422.166,780.215 422.725,799.088 423.284,799.455 423.843,816.326 424.403,765.596 424.962,801.855 425.521,798.731 426.08,778.699 426.64,795.529 427.199,827.368 427.758,788.052 428.318,774.736 428.877,791.897 429.436,739.329 429.995,724.125 430.555,742.105 431.114,762.958 431.673,763.921 432.232,831.395 432.792,824.941 433.351,807.59 433.91,807.116 434.469,806.415 435.029,789.333 435.588,786.122 436.147,798.156 436.706,795.236 437.266,797.297 437.825,796.017 438.384,780.9 438.943,776.978 439.503,790.084 440.062,755.666 440.621,744.096 441.18,712.428 441.74,694.796 442.299,700.346 442.858,702.609 443.417,690.512 443.977,711.494 444.536,699.837 445.095,732.246 445.654,717.664 446.214,755.258 446.773,751.788 447.332,755.366 447.891,756.028 448.451,740.069 449.01,757.593 449.569,760.032 450.128,742.156 450.688,724.13 451.247,741.27 451.806,742.426 452.365,742.507 452.925,727.954 453.484,714.361 454.043,718.707 454.602,735.954 455.162,802.273 455.721,800.426 456.28,815.989 456.839,826.785 457.399,789.736 457.958,788.864 458.517,771.703 459.076,753.093 459.636,766.979 460.195,785.249 460.754,767.029 461.313,768.273 461.873,768.673 462.432,769.786 462.991,795.231 463.55,775.185 464.11,787.073 464.669,787.936 465.228,720.656 465.787,755.519 466.347,775.084 466.906,740.964 467.465,758.428 468.024,740.729 468.584,723.75 469.143,724.954 469.702,726.422 470.261,711.367 470.821,717.206 471.38,721.312 471.939,725.467 472.498,711.391 473.058,730.143 473.617,731.999 474.176,715.875 474.735,731.976 475.295,750.543 475.854,749.183 476.413,764.312 476.972,794.875 477.532,791.235 478.091,755.421 478.65,757.527 479.209,772.187 479.769,755.368 480.328,720.72 480.887,736.054 481.446,768.571 482.006,785.23 482.565,783.898 483.124,801.227 483.683,847.17 484.243,824.917 484.802,818.699 485.361,816.879 485.92,794.002 486.48,806.76 487.039,820.218 487.598,817.065 488.157,843.419 488.717,808.897 489.276,807.822 489.835,818.999 490.394,831.024 490.954,842.329 491.513,789.987 492.072,772.221 492.631,767.141 493.191,780.001 493.75,809.804 494.309,824.413 494.868,870.501 495.428,862.353 495.987,854.366 496.546,845.667 497.105,819.076 497.665,813.379 498.224,856.027 498.783,813.941 499.342,808.278 499.902,804.334 500.461,800.388 501.02,811.869 501.579,808.162 502.139,804.648 502.698,802.665 503.257,783.884 503.816,749.041 504.376,748.219 504.935,760.143 505.494,771.742 506.053,687.812 506.613,738.805 507.172,740.406 507.731,742.065 508.29,693.584 508.85,711.165 509.409,696.791 509.968,683.396 510.527,686.704 511.087,675.975 511.646,679.935 512.205,679.783 512.764,678.814 513.324,662.56 513.883,633.584 514.442,635.988 515.001,640.324 515.561,678.083 516.12,698.038 516.679,716.152 517.238,669.548 517.798,690.195 518.357,694.732 518.916,728.906 519.475,698.255 520.035,717.151 520.594,685.29 521.153,718.298 521.712,703.428 522.272,711.692 522.831,727.938 523.39,712.04 523.949,685.531 524.509,668.418 525.068,704.561 525.627,691.775 526.186,711.235 526.746,711.118 527.305,710.581 527.864,712.076 528.423,780.476 528.983,793.03 529.542,788.062 530.101,783.376 530.66,743.661 531.22,761.423 531.779,775.502 532.338,806.3 532.897,786.11 533.457,765.136 534.016,728.965 534.575,746.67 535.134,743.562 535.694,727.161 536.253,757.721 536.812,739.24 537.371,739.755 537.931,769.753 538.49,752.266 539.049,735.194 539.608,718.642 540.168,698.919 540.727,683.107 541.286,669.045 541.845,638.673 542.405,629.873 542.964,635.971 543.523,641.802 544.082,635.423 544.642,622.046 545.201,674.736 545.76,675.915 546.319,676.666 546.879,664.915 547.438,684.529 547.997,689.18 548.556,708.986 549.116,705.002 549.675,692 550.234,678.379 550.793,697.551 551.353,682.812 551.912,681.892 552.471,698.119 553.031,685.266 553.59,669.452 554.149,673.334 554.708,721.992 555.268,741.328 555.827,773.155 556.386,771.449 556.945,769.624 557.505,782.726 558.064,794.384 558.623,823.795 559.182,821.056 559.742,831.367 560.301,827.535 560.86,788.063 561.419,798.061 561.979,808.351 562.538,801.68 563.097,826.875 563.656,824.205 564.216,800.044 564.775,793.63 565.334,785.16 565.893,798.517 566.453,790.384 567.012,785.857 567.571,780.572 568.13,778.446 568.69,759.935 569.249,761.22 569.808,758.538 570.367,727.673 570.927,744.294 571.486,709.381 572.045,725.942 572.604,741.468 573.164,741.733 573.723,737.779 574.282,752.672 574.841,766.889 575.401,765.191 575.96,826.694 576.519,853.829 577.078,846.827 577.638,836.91 578.197,817.308 578.756,830.28 579.315,821.331 579.875,813.299 580.434,791.835 580.993,748.925 581.552,763.964 582.112,774.816 582.671,754.109 583.23,733.251 583.789,764.993 584.349,760.835 584.908,741.563 585.467,741.394 586.026,724.375 586.586,707.507 587.145,673.559 587.704,675.171 588.263,675.72 588.823,692.983 589.382,691.417 589.941,724.825 590.5,740.422 591.06,739.38 591.619,707.679 592.178,722.816 592.737,753.652 593.297,783.88 593.856,761.034 594.415,759.611 594.974,760.585 595.534,727.299 596.093,724.795 596.652,691.808 597.211,692.034 597.771,693.579 598.33,698.529 598.889,715.262 599.448,702.01 600.008,683.672 600.567,685.78 601.126,668.786 601.685,685.828 602.245,687.096 602.804,689.135 603.363,676.873 603.922,641.418 604.482,659.516 605.041,679.173 605.6,726.53 606.159,726.596 606.719,708.207 607.278,724.753 607.837,707.605 608.396,689.148 608.956,673.606 609.515,657.519 610.074,649.54 610.633,650.916 611.193,655.46 611.752,608.967 612.311,596.981 612.87,567.725 613.43,559.492 613.989,535.463 614.548,561.351 615.107,618.478 615.667,606.857 616.226,626.221 616.785,612.871 617.344,584.401 617.904,573.534 618.463,583.788 619.022,621.769 619.581,642.818 620.141,661.435 620.7,714.374 621.259,711.715 621.818,714.77 622.378,746.095 622.937,759.191 623.496,756.5 624.055,739.141 624.615,750.699 625.174,718.818 625.733,718.798 626.292,701.71 626.852,718.003 627.411,700.724 627.97,687.286 628.529,670.286 629.089,657.557 629.648,679.793 630.207,698.759 630.766,684.336 631.326,700.791 631.885,713.908 632.444,713.164 633.003,701.798 633.563,687.497 634.122,688.631 634.681,689.621 635.24,673.172 635.8,674.223 636.359,643.539 636.918,678.984 637.477,680.237 638.037,712.026 638.596,710.573 639.155,698.105 639.714,714.711 640.274,663.321 640.833,681.051 641.392,681.2 641.951,696.504 642.511,712.15 643.07,711.578 643.629,728.8 644.188,727.948 644.748,727.351 645.307,758.675 645.866,770.354 646.425,767.46 646.985,764.294 647.544,745.4 648.103,730.184 648.662,697.44 649.222,713.991 649.781,710.875 650.34,680.811 650.899,681.133 651.459,697.122 652.018,683.587 652.577,685.314 653.136,688.435 653.696,702.524 654.255,701.679 654.814,734.505 655.373,734.875 655.933,764.379 656.492,764.588 657.051,761.561 657.61,791.522 658.17,768.369 658.729,732.854 659.288,745.95 659.847,726.088 660.407,692.689 660.966,689.891 661.525,689.88 662.084,724.58 662.644,753.269 663.203,767.519 663.762,731.797 664.321,712.279 664.881,692.057 665.44,691.185 665.999,710.95 666.558,722.154 667.118,722.69 667.677,704.104 668.236,700.518 668.795,656.515 669.355,674.72 669.914,678.209 670.473,679.226 671.032,684.416 671.592,715.583 672.151,734.016 672.71,699.473 673.269,683.484 673.829,686.322 674.388,686.397 674.947,654.431 675.506,643.607 676.066,662.304 676.625,664.086 677.184,651.257 677.743,670.41 678.303,639.429 678.862,626.42 679.421,629.225 679.981,629.369 680.54,647.12 681.099,666.47 681.658,682.016 682.218,698.52 682.777,715.419 683.336,684.76 683.895,686.831 684.455,687.012 685.014,689.809 685.573,704.292 686.132,721.898 686.692,719.86 687.251,719.825 687.81,700.285 688.369,698.876 688.929,695.729 689.488,648.057 690.047,651.852 690.606,718.821 691.166,716.553 691.725,701.546 692.284,702.822 692.843,699.611 693.403,745.078 693.962,724.828 694.521,737.645 695.08,719.96 695.64,718.175 696.199,718.188 696.758,716.648 697.317,714.384 697.877,733.559 698.436,731.567 698.995,730.35 699.554,728.247 700.114,690.517 700.673,688.272 701.232,688.558 701.791,690.664 702.351,658.983 702.91,663.299 703.469,666.408 704.028,670.833 704.588,684.33 705.147,703.128 705.706,701.861 706.265,733.526 706.825,703.758 707.384,707.479 707.943,721.741 708.502,702.594 709.062,717.52 709.621,732.941 710.18,714.673 710.739,679.068 711.299,662.189 711.858,648.909 712.417,634.135 712.976,637.296 713.536,656.382 714.095,627.698 714.654,666.992 715.213,674.509 715.773,696.242 716.332,679.638 716.891,665.259 717.45,684.583 718.01,654.274 718.569,659.216 719.128,625.643 719.687,617.655 720.247,638.03 720.806,611.331 721.365,599.997 721.924,607.279 722.484,608.557 723.043,615.249 723.602,636.329 724.161,639.762 724.721,674.506 725.28,674.693 725.839,660.009 726.398,676.261 726.958,695.38 727.517,694.215 728.076,708.512 728.635,708.289 729.195,723.421 729.754,742.219 730.313,720.494 730.872,753.242 731.432,769.288 731.991,815.983 732.55,805.773 733.109,786.001 733.669,798.012 734.228,792.358 734.787,821.029 735.346,817.153 735.906,794.376 736.465,790.465 737.024,785.589 737.583,780.696 738.143,774.515 738.702,757.196 739.261,738.265 739.82,737.069 740.38,703.334 740.939,703.904 741.498,686.553 742.057,704.425 742.617,702.418 743.176,732.939 743.735,748.956 744.294,713.481 744.854,698.964 745.413,681.171 745.972,678.494 746.531,676.554 747.091,643.678 747.65,645.329 748.209,666.681 748.768,651.601 749.328,651.579 749.887,621.914 750.446,655.873 751.005,670.592 751.565,657.66 752.124,692.889 752.683,675.685 753.242,658.821 753.802,627.264 754.361,648.84 754.92,654.372 755.479,641.199 756.039,641.476 756.598,656.119 757.157,708.523 757.716,687.817 758.276,704.525 758.835,732.877 759.394,713.119 759.953,744.958 760.513,725.595 761.072,738.167 761.631,766.362 762.19,795.009 762.75,757.867 763.309,736.927 763.868,719.099 764.427,718.876 764.987,716.497 765.546,734.212 766.105,747.088 766.664,759.701 767.224,722.598 767.783,721.603 768.342,690.243 768.901,705.176 769.461,653.596 770.02,686.601 770.579,687.452 771.138,686.567 771.698,685.705 772.257,654.862 772.816,640.357 773.375,654.102 773.935,656.171 774.494,659.203 775.053,676.676 775.612,662.409 776.172,662.806 776.731,692.693 777.29,692.728 777.849,710.7 778.409,710.461 778.968,724.201 779.527,738.994 780.086,735.272 780.646,714.119 781.205,746.669 781.764,745.117 782.323,776.63 782.883,754.749 783.442,734.257 784.001,714.835 784.56,698.222 785.12,715.895 785.679,712.193 786.238,677.414 786.797,696.422 787.357,695.211 787.916,696.089 788.475,649.63 789.034,652.103 789.594,666.275 790.153,639.094 790.712,638.537 791.271,608.922 791.831,596.293 792.39,618.068 792.949,636.757 793.508,642.463 794.068,663.07 794.627,666.684 795.186,685.82 795.745,700.543 796.305,712.631 796.864,741.388 797.423,737.439 797.982,754.047 798.542,751.672 799.101,765.912 799.66,761.251 800.219,738.808 800.779,671.804 801.338,689.422 801.897,673.805 802.456,672.994 803.016,691.086 803.575,672.982 804.134,690.128 804.693,691.781 805.253,687.884 805.812,702.435 806.371,666.655 806.931,701.884 807.49,716.752 808.049,729.927 808.608,727.105 809.168,694.287 809.727,695.62 810.286,678.59 810.845,679.589 811.405,696.307 811.964,698.171 812.523,695.625 813.082,725.683 813.642,740.825 814.201,737.581 814.76,717.395 815.319,714.619 815.879,712.394 816.438,692.995 816.997,692.035 817.556,704.93 818.116,705.227 818.675,705.033 819.234,704.145 819.793,704.93 820.353,719.916 820.912,702.822 821.471,719.506 822.03,718.701 822.59,717.972 823.149,699.779 823.708,713.548 824.267,681.851 824.827,683.234 825.386,684.162 825.945,686.269 826.504,633.926 827.064,636.298 827.623,685.84 828.182,665.714 828.741,667.173 829.301,683.572 829.86,684.933 830.419,671.944 830.978,754.695 831.538,752.954 832.097,778.281 832.656,769.961 833.215,783.716 833.775,764.415 834.334,777.101 834.893,789.138 835.452,783.876 836.012,763.039 836.571,744.543 837.13,726.202 837.689,712.575 838.249,744.062 838.808,753.49 839.367,745.939 839.926,759.86 840.486,771.735 841.045,752.253 841.604,790.862 842.163,751.771 842.723,717.565 843.282,716.776 843.841,715.299 844.4,679.226 844.96,693.161 845.519,723.618 846.078,769.696 846.637,766.923 847.197,748.342 847.756,764.594 848.315,740.858 848.874,737.639 849.434,733.201 849.993,762.153 850.552,775.9 851.111,755.846 851.671,734.629 852.23,715.664 852.789,724.331 853.348,735.821 853.908,727.75 854.467,693.693 855.026,727.127 855.585,774.878 856.145,756.212 856.704,721.095 857.263,641.293 857.822,644.882 858.382,647.64 858.941,616.038 859.5,586.425 860.059,623.265 860.619,578.749 861.178,585.142 861.737,576.266 862.296,616.366 862.856,651.407 863.415,648.447 863.974,650.533 864.533,671.235 865.093,641.857 865.652,625.451 866.211,626.747 866.77,629.623 867.33,632.18 867.889,652.217 868.448,657.956 869.007,644.635 869.567,614.77 870.126,620.879 870.685,609.762 871.244,648.811 871.804,620.046 872.363,591.421 872.922,578.429 873.481,584.238 874.041,608.204 874.6,645.653 875.159,649.105 875.718,649.9 876.278,684.251 876.837,680.906 877.396,635.037 877.955,685.339 878.515,667.763 879.074,669.592 879.633,685.012 880.192,666.547 880.752,670.535 881.311,656.673 881.87,643.26 882.429,631.144 882.989,666.716 883.548,649.204 884.107,655.167 884.666,671.38 885.226,686.304 885.785,687.075 886.344,702.91 886.903,668.826 887.463,669.619 888.022,685.369 888.581,714.344 889.14,699.184 889.7,684.486 890.259,717.842 890.818,714.466 891.377,697.547 891.937,697.101 892.496,695.389 893.055,696.339 893.614,698.585 894.174,665.395 894.733,684.309 895.292,656.166 895.851,673.358 896.411,675.502 896.97,657.384 897.529,637.816 898.088,673.44 898.648,658.626 899.207,660.827 899.766,661.439 900.325,663.269 900.885,665.932 901.444,677.343 902.003,662.657 902.562,664.736 903.122,686.045 903.681,669.485 904.24,638.598 904.799,623.838 905.359,659.528 905.918,680.524 906.477,713.182 907.036,745.774 907.596,758.337 908.155,719.354 908.714,685.839 909.273,655.721 909.833,641.543 910.392,624.297 910.951,625.974 911.51,664.673 912.07,684.53 912.629,700.461 913.188,683.167 913.747,680.602 914.307,711.763 914.866,691.266 915.425,688.199 915.984,672.021 916.544,689.633 917.103,720.609 917.662,749.936 918.221,812.743 918.781,823.17 919.34,817.125 919.899,825.325 920.458,800.49 921.018,792.907 921.577,788.579 922.136,803.589 922.695,815.797 923.255,809.171 923.814,786.647 924.373,814.261 924.932,807.734 925.492,784.702 926.051,796.309 926.61,803.523 927.169,759.564 927.729,772.192 928.288,779.612 928.847,807.55 929.406,813.859 929.966,789.384 930.525,765.872 931.084,745.544 931.644,739.749 932.203,753.788 932.762,733.743 933.321,743.091 933.881,709.063 934.44,723.958 934.999,753.803 935.558,718.793 936.118,714.536 936.677,694.425 937.236,708.375 937.795,723.484 938.355,722.511 938.914,732.532 939.473,710.896 940.032,710.631 940.592,708.557 941.151,692.151 941.71,708.317 942.269,676.127 942.829,681.687 943.388,700.555 943.947,699.962 944.506,697.573 945.066,613.129 945.625,633.354 946.184,619.388 946.743,671.209 947.303,655.731 947.862,623.843 948.421,573.661 948.98,531.156 949.54,505.059 950.099,515.951 950.658,506.599 951.217,534.117 951.777,554.95 952.336,562.704 952.895,586.823 953.454,609.172 954.014,627.86 954.573,630.576 955.132,636.68 955.691,639.501 956.251,610.271 956.81,600.665 957.369,586.203 957.928,606.586 958.488,608.89 959.047,613.278 959.606,632.196 960.165,632.879 960.725,635.253 961.284,625.417 961.843,632.626 962.402,649.358 962.962,633.737 963.521,653.115 964.08,638.964 964.639,671.722 965.199,676.857 965.758,661.226 966.317,696.849 966.876,728.857 967.436,742.025 967.995,722.562 968.554,739.971 969.113,740.653 969.673,752.725 970.232,718.767 970.791,682.375 971.35,650.276 971.91,652.658 972.469,658.157 973.028,659.696 973.587,645.247 974.147,634.021 974.706,620.094 975.265,641.423 975.824,679.468 976.384,681.118 976.943,679.894 977.502,651.035 978.061,657.824 978.621,625.088 979.18,582.106 979.739,571.779 980.298,563.621 980.858,570.334 981.417,579.184 981.976,573.082 982.535,528.624 983.095,554.564 983.654,567.593 984.213,589.278 984.772,563.741 985.332,571.072 985.891,577.321 986.45,601.356 987.009,653.315 987.569,642.383 988.128,675.54 988.687,643.47 989.246,645.741 989.806,651.442 990.365,642.096 990.924,609.783 991.483,597.093 992.043,632.031 992.602,618.286 993.161,606.965 993.72,632.374 994.28,672.506 994.839,674.64 995.398,676.266 995.957,678.137 996.517,680.209 997.076,711.658 997.635,726.328 998.194,739.642 998.754,740.495 999.313,738.142 999.872,766.503 1000.43,728.356 1000.99,729.107 1001.55,725.202 1002.11,708.959 1002.67,707.07 1003.23,740.379 1003.79,720.118 1004.35,703.215 1004.91,699.896 1005.46,718.792 1006.02,732.551 1006.58,712.214 1007.14,678.232 1007.7,696.167 1008.26,714.171 1008.82,741.334 1009.38,706.536 1009.94,689.622 1010.5,718.508 1011.06,715.745 1011.62,716.116 1012.18,715.987 1012.73,717.756 1013.29,716.045 1013.85,715.536 1014.41,696.412 1014.97,727.257 1015.53,757.822 1016.09,752.258 1016.65,747.369 1017.21,727.329 1017.77,709.672 1018.33,710.622 1018.89,708.199 1019.45,687.883 1020.01,704.503 1020.56,718.564 1021.12,733.715 1021.68,749.275 1022.24,747.228 1022.8,764.577 1023.36,773.304 1023.92,706.461 1024.48,725.299 1025.04,708.17 1025.6,707.948 1026.16,721.024 1026.72,736.27 1027.28,735.185 1027.83,695.969 1028.39,674.103 1028.95,675.805 1029.51,679.207 1030.07,712.063 1030.63,693.485 1031.19,709.114 1031.75,740.084 1032.31,724.323 1032.87,676.76 1033.43,693.442 1033.99,710.804 1034.55,707.724 1035.1,738.099 1035.66,730.744 1036.22,728.485 1036.78,692.059 1037.34,674.013 1037.9,722.006 1038.46,718.731 1039.02,684.837 1039.58,665.966 1040.14,680.049 1040.7,663.913 1041.26,681.852 1041.82,667.103 1042.38,699.464 1042.93,716.626 1043.49,701.019 1044.05,697.408 1044.61,695.776 1045.17,743.628 1045.73,721.405 1046.29,723.014 1046.85,722.132 1047.41,722.092 1047.97,751.473 1048.53,727.179 1049.09,740.256 1049.65,772.398 1050.2,800.484 1050.76,826.022 1051.32,821.42 1051.88,816.66 1052.44,796.991 1053,803.414 1053.56,816.326 1054.12,807.092 1054.68,780.483 1055.24,772.97 1055.8,753.453 1056.36,731.006 1056.92,725.053 1057.48,706.254 1058.03,707.443 1058.59,724.401 1059.15,754.17 1059.71,747.924 1060.27,777.608 1060.83,809.199 1061.39,770.251 1061.95,765.991 1062.51,761.619 1063.07,756.829 1063.63,750.536 1064.19,714.982 1064.75,728.686 1065.3,695.273 1065.86,693.801 1066.42,658.99 1066.98,626.986 1067.54,645.897 1068.1,666.996 1068.66,652.425 1069.22,652.691 1069.78,623.359 1070.34,622.061 1070.9,606.47 1071.46,562.535 1072.02,589.896 1072.57,593.586 1073.13,630.815 1073.69,647.774 1074.25,635.731 1074.81,623.523 1075.37,610.536 1075.93,616.14 1076.49,621.855 1077.05,594.713 1077.61,581.721 1078.17,636.173 1078.73,635.229 1079.29,651.986 1079.85,692.319 1080.4,687.902 1080.96,636.445 1081.52,655.357 1082.08,658.883 1082.64,632.403 1083.2,671.251 1083.76,675.326 1084.32,693.591 1084.88,719.023 1085.44,735.615 1086,731.777 1086.56,666.445 1087.12,649.419 1087.67,654.972 1088.23,659.747 1088.79,646.159 1089.35,645.94 1089.91,662.788 1090.47,630.495 1091.03,648.082 1091.59,633.247 1092.15,652.412 1092.71,669.517 1093.27,671.444 1093.83,674.583 1094.39,673.873 1094.94,690.861 1095.5,688.561 1096.06,688.01 1096.62,688.395 1097.18,675.206 1097.74,675.628 1098.3,660.891 1098.86,662.311 1099.42,666.791 1099.98,667.84 1100.54,668.876 1101.1,669.087 1101.66,654.435 1102.22,620.303 1102.77,624.217 1103.33,643.875 1103.89,649.35 1104.45,648.846 1105.01,666.374 1105.57,670.779 1106.13,669.921 1106.69,670.582 1107.25,686.065 1107.81,699.011 1108.37,711.774 1108.93,726.095 1109.49,724.242 1110.04,671.779 1110.6,673.571 1111.16,658.887 1111.72,657.875 1112.28,659.072 1112.84,631.256 1113.4,635.882 1113.96,620.891 1114.52,640.042 1115.08,643.843 1115.64,678.823 1116.2,710.969 1116.76,678.09 1117.31,680.1 1117.87,692.461 1118.43,692.266 1118.99,755.609 1119.55,800.379 1120.11,776.93 1120.67,739.494 1121.23,705.059 1121.79,749.077 1122.35,793.666 1122.91,771.835 1123.47,782.509 1124.03,764.806 1124.59,759.229 1125.14,741.618 1125.7,740.077 1126.26,734.508 1126.82,748.268 1127.38,747.428 1127.94,744.343 1128.5,737.299 1129.06,706.123 1129.62,702.393 1130.18,670.127 1130.74,654.542 1131.3,638.101 1131.86,654.05 1132.41,674.607 1132.97,688.689 1133.53,658.309 1134.09,658.031 1134.65,689.864 1135.21,705.671 1135.77,722.507 1136.33,716.92 1136.89,682.012 1137.45,696.418 1138.01,697.036 1138.57,729.123 1139.13,726.855 1139.68,723.67 1140.24,687.413 1140.8,688.243 1141.36,687.559 1141.92,669.821 1142.48,673.876 1143.04,656.597 1143.6,660.034 1144.16,691.175 1144.72,688.106 1145.28,670.293 1145.84,686.014 1146.4,685.691 1146.96,666.577 1147.51,664.524 1148.07,664.148 1148.63,644.65 1149.19,632.012 1149.75,668.098 1150.31,699.781 1150.87,698.385 1151.43,698.187 1151.99,731.81 1152.55,711.33 1153.11,693.356 1153.67,693.039 1154.23,693.048 1154.78,707.456 1155.34,723.424 1155.9,687.014 1156.46,720.948 1157.02,734.048 1157.58,698.511 1158.14,715.725 1158.7,713.869 1159.26,745.723 1159.82,724.803 1160.38,754.978 1160.94,766.753 1161.5,795.411 1162.05,787.084 1162.61,799.424 1163.17,727.422 1163.73,709.416 1164.29,690.956 1164.85,705.543 1165.41,753.541 1165.97,779.624 1166.53,787.482 1167.09,751.043 1167.65,712.855 1168.21,711.933 1168.77,679.735 1169.33,664.582 1169.88,663.072 1170.44,663.994 1171,663.243 1171.56,679.282 1172.12,710.86 1172.68,677.081 1173.24,694.89 1173.8,697.287 1174.36,715.363 1174.92,744.943 1175.48,774.112 1176.04,803.237 1176.6,796.406 1177.15,787.035 1177.71,766.417 1178.27,746.277 1178.83,762.935 1179.39,711.37 1179.95,727.307 1180.51,724.182 1181.07,708.176 1181.63,707.411 1182.19,703.493 1182.75,700.47 1183.31,664.378 1183.87,665.123 1184.43,650.607 1184.98,664.797 1185.54,680.804 1186.1,680.138 1186.66,681.522 1187.22,662.779 1187.78,631.832 1188.34,620.14 1188.9,638.285 1189.46,627.799 1190.02,616.316 1190.58,634.064 1191.14,649.1 1191.7,647.938 1192.25,633.439 1192.81,607.153 1193.37,614.786 1193.93,603.544 1194.49,594.762 1195.05,583.963 1195.61,576.064 1196.17,586.123 1196.73,609.151 1197.29,594.038 1197.85,612.193 1198.41,553.355 1198.97,577.224 1199.52,597.121 1200.08,606.186 1200.64,609.618 1201.2,631.368 1201.76,632.427 1202.32,636.528 1202.88,624.525 1203.44,614.148 1204,600.465 1204.56,639.031 1205.12,655.917 1205.68,660.262 1206.24,706.585 1206.8,720.636 1207.35,751.563 1207.91,733.654 1208.47,731.951 1209.03,731.035 1209.59,712.632 1210.15,724.275 1210.71,724.331 1211.27,756.047 1211.83,751.965 1212.39,783.518 1212.95,730.82 1213.51,699.489 1214.07,713.81 1214.62,712.024 1215.18,725.23 1215.74,755.522 1216.3,734.196 1216.86,746.467 1217.42,740.24 1217.98,741.536 1218.54,754.682 1219.1,751.941 1219.66,781.91 1220.22,778.467 1220.78,824.165 1221.34,848.499 1221.89,810.226 1222.45,771.975 1223.01,785.161 1223.57,796.291 1224.13,804.589 1224.69,801.415 1225.25,796.094 1225.81,773.897 1226.37,781.367 1226.93,728.858 1227.49,711.549 1228.05,696.914 1228.61,684.363 1229.17,682.83 1229.72,646.229 1230.28,652.652 1230.84,620.865 1231.4,626.334 1231.96,611.597 1232.52,600.638 1233.08,621.893 1233.64,606.993 1234.2,608.225 1234.76,645.295 1235.32,669.11 1235.88,687.425 1236.44,671.008 1236.99,641.038 1237.55,660.084 1238.11,679.3 1238.67,679.099 1239.23,633.662 1239.79,621.097 1240.35,642.274 1240.91,598.199 1241.47,619.511 1242.03,620.751 1242.59,671.568 1243.15,642.621 1243.71,694.3 1244.26,647.255 1244.82,662.957 1245.38,680.836 1245.94,632.048 1246.5,652.053 1247.06,652.591 1247.62,671.738 1248.18,652.887 1248.74,656.726 1249.3,642.915 1249.86,626.209 1250.42,594.787 1250.98,582.768 1251.54,541.339 1252.09,616.588 1252.65,615.871 1253.21,619.059 1253.77,589.081 1254.33,643.091 1254.89,663.077 1255.45,694.473 1256.01,664.597 1256.57,678.451 1257.13,677.499 1257.69,695.955 1258.25,694.95 1258.81,694.963 1259.36,694.333 1259.92,694.566 1260.48,677.482 1261.04,680.174 1261.6,694.044 1262.16,693.427 1262.72,692.753 1263.28,757.561 1263.84,753.977 1264.4,736.113 1264.96,736.174 1265.52,753.061 1266.08,731.472 1266.63,696.581 1267.19,727.622 1267.75,692.461 1268.31,720.04 1268.87,732.773 1269.43,714.231 1269.99,728.458 1270.55,725.484 1271.11,722.255 1271.67,702.81 1272.23,650.04 1272.79,648.549 1273.35,633.482 1273.91,654.916 1274.46,639.51 1275.02,677.121 1275.58,677.249 1276.14,692.69 1276.7,675.335 1277.26,678.889 1277.82,648.61 1278.38,603.553 1278.94,613.345 1279.5,598.765 1280.06,617.562 1280.62,621.846 1281.18,625.509 1281.73,627.917 1282.29,597.586 1282.85,605.912 1283.41,627.845 1283.97,646.642 1284.53,650.049 1285.09,608.549 1285.65,631.663 1286.21,636.405 1286.77,640.922 1287.33,640.816 1287.89,625.002 1288.45,627.279 1289,630.253 1289.56,635.619 1290.12,652.984 1290.68,655.453 1291.24,659.257 1291.8,626.339 1292.36,617.569 1292.92,636.507 1293.48,639.171 1294.04,660.251 1294.6,694.331 1295.16,710.042 1295.72,711.175 1296.28,706.106 1296.83,705.58 1297.39,701.65 1297.95,734.432 1298.51,732.049 1299.07,777.461 1299.63,787.551 1300.19,781.233 1300.75,789.918 1301.31,785.003 1301.87,780.677 1302.43,789.626 1302.99,783.034 1303.55,777.783 1304.1,738.928 1304.66,688.074 1305.22,684.394 1305.78,668.161 1306.34,647.807 1306.9,633.984 1307.46,621.483 1308.02,654.174 1308.58,606.099 1309.14,609.674 1309.7,616.355 1310.26,622.311 1310.82,622.734 1311.38,661.145 1311.93,664.038 1312.49,648.831 1313.05,617.406 1313.61,622.909 1314.17,626.726 1314.73,630.447 1315.29,634.949 1315.85,636.471 1316.41,636.973 1316.97,606.263 1317.53,627.289 1318.09,613.734 1318.65,651.053 1319.2,653.837 1319.76,659.299 1320.32,656.334 1320.88,688.676 1321.44,716.833 1322,731.261 1322.56,732.249 1323.12,730.675 1323.68,729.008 1324.24,727.985 1324.8,742.625 1325.36,756.38 1325.92,751.501 1326.47,744.396 1327.03,722.329 1327.59,705.551 1328.15,684.2 1328.71,684.624 1329.27,666.495 1329.83,683.134 1330.39,667.109 1330.95,670.652 1331.51,622.367 1332.07,626.968 1332.63,645.953 1333.19,650.874 1333.75,654.102 1334.3,674.877 1334.86,639.807 1335.42,641.88 1335.98,625.453 1336.54,626.899 1337.1,645.214 1337.66,663.064 1338.22,713.208 1338.78,707.923 1339.34,719.488 1339.9,735.172 1340.46,765.154 1341.02,777.904 1341.57,820.434 1342.13,813.347 1342.69,807.213 1343.25,799.296 1343.81,795.779 1344.37,760.849 1344.93,772.335 1345.49,721.466 1346.05,686.77 1346.61,700.305 1347.17,687.639 1347.73,734.648 1348.29,747.661 1348.84,760.195 1349.4,756.147 1349.96,720.474 1350.52,735.384 1351.08,732.893 1351.64,730.407 1352.2,742.484 1352.76,723.192 1353.32,705.45 1353.88,702.787 1354.44,705.406 1355,686.93 1355.56,704.745 1356.12,688.664 1356.67,720.457 1357.23,700.934 1357.79,687.018 1358.35,704.667 1358.91,702.729 1359.47,688.499 1360.03,672.246 1360.59,638.621 1361.15,642.069 1361.71,644.919 1362.27,615.837 1362.83,605.105 1363.39,623.161 1363.94,644.963 1364.5,677.965 1365.06,694.787 1365.62,713.439 1366.18,724.696 1366.74,693.343 1367.3,705.145 1367.86,720.232 1368.42,717.272 1368.98,714.847 1369.54,699.817 1370.1,699.39 1370.66,668.521 1371.21,672.16 1371.77,674.878 1372.33,704.443 1372.89,689.614 1373.45,676.184 1374.01,674.584 1374.57,679.635 1375.13,679.432 1375.69,675.035 1376.25,675.746 1376.81,695.003 1377.37,675.081 1377.93,695.677 1378.49,693.261 1379.04,691.129 1379.6,694.285 1380.16,706.291 1380.72,672.749 1381.28,655.981 1381.84,656.934 1382.4,673.079 1382.96,688.849 1383.52,669.711 1384.08,668.348 1384.64,643.002 1385.2,692.076 1385.76,661.07 1386.31,649.988 1386.87,620.321 1387.43,642.916 1387.99,647.053 1388.55,649.797 1389.11,685.295 1389.67,668.075 1390.23,664.941 1390.79,661.774 1391.35,647.093 1391.91,655.685 1392.47,642.014 1393.03,644.021 1393.58,663.874 1394.14,681.953 1394.7,698.936 1395.26,680.99 1395.82,712.693 1396.38,724.458 1396.94,723.039 1397.5,717.519 1398.06,685.865 1398.62,670.799 1399.18,671.006 1399.74,670.809 1400.3,656.52 1400.86,674.185 1401.41,656.085 1401.97,644.233 1402.53,664.043 1403.09,680.931 1403.65,681.798 1404.21,698.706 1404.77,679.89 1405.33,682.445 1405.89,699.467 1406.45,746.657 1407.01,722.878 1407.57,769.157 1408.13,778.573 1408.68,786.898 1409.24,781.396 1409.8,792.489 1410.36,790.639 1410.92,738.408 1411.48,733.96 1412.04,715.9 1412.6,711.945 1413.16,689.723 1413.72,736.589 1414.28,750.773 1414.84,746.755 1415.4,759.81 1415.95,753.945 1416.51,747.847 1417.07,709.965 1417.63,722.021 1418.19,716.07 1418.75,745.578 1419.31,759.553 1419.87,722.242 1420.43,688.915 1420.99,641.06 1421.55,693.821 1422.11,662.982 1422.67,648.829 1423.23,634.112 1423.78,589.891 1424.34,578.46 1424.9,568.605 1425.46,574.504 1426.02,562.547 1426.58,571.703 1427.14,578.129 1427.7,613.657 1428.26,618.305 1428.82,651.393 1429.38,634.492 1429.94,621.302 1430.5,639.107 1431.05,661.779 1431.61,616.555 1432.17,619.299 1432.73,605.104 1433.29,578.315 1433.85,617.307 1434.41,623.6 1434.97,642.322 1435.53,611.3 1436.09,632.042 1436.65,632.972 1437.21,652.392 1437.77,667.806 1438.33,703.135 1438.88,690.227 1439.44,705.896 1440,689.654 1440.56,693.502 1441.12,662.372 1441.68,662.286 1442.24,649.945 1442.8,633.576 1443.36,619.941 1443.92,608.233 1444.48,595.069 1445.04,585.297 1445.6,586.888 1446.15,587.362 1446.71,593.108 1447.27,613.852 1447.83,633.727 1448.39,669.032 1448.95,653.568 1449.51,659.792 1450.07,644.679 1450.63,627.138 1451.19,600.079 1451.75,621.434 1452.31,592.608 1452.87,582.923 1453.42,621.917 1453.98,625.616 1454.54,645.837 1455.1,632.705 1455.66,635.735 1456.22,636.852 1456.78,651.743 1457.34,668.028 1457.9,650.018 1458.46,668.509 1459.02,638.509 1459.58,644.482 1460.14,663.455 1460.7,645.244 1461.25,629.79 1461.81,632.178 1462.37,650.855 1462.93,656.61 1463.49,655.553 1464.05,656.597 1464.61,672.493 1465.17,672.613 1465.73,677.084 1466.29,709.521 1466.85,724.56 1467.41,706.36 1467.97,754.001 1468.52,765.293 1469.08,776.805 1469.64,752.542 1470.2,782.315 1470.76,759.249 1471.32,756.664 1471.88,783.629 1472.44,730.663 1473,696.36 1473.56,697.807 1474.12,698.75 1474.68,685.872 1475.24,686.372 1475.79,701.988 1476.35,703.783 1476.91,686.081 1477.47,700.083 1478.03,717.448 1478.59,700.068 1479.15,717.995 1479.71,697.98 1480.27,658.729 1480.83,680.23 1481.39,698.93 1481.95,715.06 1482.51,728.962 1483.07,728.317 1483.62,742.142 1484.18,736.981 1484.74,751.054 1485.3,760.448 1485.86,723.365 1486.42,740.255 1486.98,703.457 1487.54,666.613 1488.1,668.167 1488.66,683.843 1489.22,682.961 1489.78,687.429 1490.34,737.025 1490.89,732.473 1491.45,714.827 1492.01,733.104 1492.57,744.906 1493.13,740.269 1493.69,767.792 1494.25,731.566 1494.81,740.313 1495.37,674.51 1495.93,659.268 1496.49,645.201 1497.05,646.252 1497.61,665.26 1498.16,698.111 1498.72,696.533 1499.28,696.424 1499.84,679.997 1500.4,679.915 1500.96,680.027 1501.52,697.531 1502.08,713.092 1502.64,677.658 1503.2,711.689 1503.76,712.446 1504.32,697.136 1504.88,663.821 1505.44,649.6 1505.99,652.468 1506.55,622.148 1507.11,644.501 1507.67,664.01 1508.23,666.461 1508.79,666.847 1509.35,718.677 1509.91,717.701 1510.47,702.587 1511.03,687.659 1511.59,687.938 1512.15,684.927 1512.71,669.407 1513.26,684.088 1513.82,668.153 1514.38,608.037 1514.94,628.8 1515.5,634.538 1516.06,650.711 1516.62,651.244 1517.18,653.882 1517.74,611.223 1518.3,650.265 1518.86,621.45 1519.42,655.011 1519.98,704.174 1520.53,674.065 1521.09,673.734 1521.65,676.761 1522.21,664.103 1522.77,666.974 1523.33,671.052 1523.89,690.373 1524.45,706.006 1525.01,706.328 1525.57,705.348 1526.13,673.677 1526.69,643.934 1527.25,662.599 1527.81,693.965 1528.36,675.689 1528.92,691.015 1529.48,707.967 1530.04,739.323 1530.6,750.81 1531.16,767.324 1531.72,749.775 1532.28,764.252 1532.84,761.314 1533.4,742.769 1533.96,737.08 1534.52,735.947 1535.08,733.178 1535.63,747.068 1536.19,714.066 1536.75,714.184 1537.31,729.838 1537.87,695.438 1538.43,709.654 1538.99,690.284 1539.55,706.006 1540.11,686.366 1540.67,683.716 1541.23,699.211 1541.79,696.906 1542.35,679.263 1542.9,680.546 1543.46,696.315 1544.02,681.418 1544.58,698.737 1545.14,716.61 1545.7,681.066 1546.26,699.95 1546.82,683.235 1547.38,667.833 1547.94,652.912 1548.5,670.924 1549.06,669.357 1549.62,652.702 1550.18,640.405 1550.73,625.792 1551.29,657.893 1551.85,640.525 1552.41,673.331 1552.97,673.668 1553.53,687.869 1554.09,686.681 1554.65,685.02 1555.21,654.639 1555.77,690.214 1556.33,658.495 1556.89,659.476 1557.45,693.308 1558,676.117 1558.56,659.378 1559.12,676.747 1559.68,663.027 1560.24,648.776 1560.8,682.986 1561.36,684.486 1561.92,669.946 1562.48,672.154 1563.04,717.99 1563.6,700.268 1564.16,695.052 1564.72,696.887 1565.28,679.156 1565.83,681.034 1566.39,713.035 1566.95,743.59 1567.51,774.625 1568.07,803.091 1568.63,810.788 1569.19,770.357 1569.75,766.971 1570.31,745.427 1570.87,757.534 1571.43,749.216 1571.99,727.703 1572.55,727.494 1573.1,727.782 1573.66,722.704 1574.22,706.137 1574.78,723.455 1575.34,738.53 1575.9,766.112 1576.46,765.479 1577.02,793.158 1577.58,775.71 1578.14,754.063 1578.7,765.835 1579.26,761.265 1579.82,771.931 1580.37,735.846 1580.93,713.449 1581.49,728.919 1582.05,726.662 1582.61,705.169 1583.17,687.757 1583.73,686.981 1584.29,690.43 1584.85,677.188 1585.41,710.378 1585.97,724.849 1586.53,708.998 1587.09,706.68 1587.65,704.62 1588.2,701.663 1588.76,667.769 1589.32,685.251 1589.88,669.944 1590.44,657.678 1591,640.83 1591.56,661.008 1592.12,630.812 1592.68,633.267 1593.24,665.365 1593.8,678.454 1594.36,664.091 1594.92,699.016 1595.47,749.203 1596.03,742.505 1596.59,725.045 1597.15,722.662 1597.71,733.067 1598.27,714.945 1598.83,699.673 1599.39,712.912 1599.95,727.218 1600.51,741.133 1601.07,705.436 1601.63,687.315 1602.19,735.166 1602.74,734.015 1603.3,729.682 1603.86,728.122 1604.42,740.107 1604.98,740.12 1605.54,708.238 1606.1,756.745 1606.66,767.195 1607.22,825.728 1607.78,817.339 1608.34,809.62 1608.9,801.536 1609.46,780.049 1610.02,790.408 1610.57,814.786 1611.13,791.249 1611.69,760.514 1612.25,754.598 1612.81,766.856 1613.37,795.011 1613.93,770.609 1614.49,751.202 1615.05,762.602 1615.61,774.47 1616.17,750.836 1616.73,747.561 1617.29,744.397 1617.84,742.116 1618.4,721.571 1618.96,723.302 1619.52,707.181 1620.08,690.926 1620.64,689.156 1621.2,667.895 1621.76,654.046 1622.32,686.773 1622.88,698.826 1623.44,600.227 1624,586.991 1624.56,607.831 1625.11,612.629 1625.67,633.65 1626.23,649.037 1626.79,618.838 1627.35,624.103 1627.91,627.465 1628.47,628.817 1629.03,678.383 1629.59,659.026 1630.15,639.887 1630.71,624.919 1631.27,628.525 1631.83,646.661 1632.39,648.03 1632.94,618.44 1633.5,621.743 1634.06,658.647 1634.62,645.287 1635.18,645.583 1635.74,663.148 1636.3,712.385 1636.86,726.321 1637.42,742.217 1637.98,740.204 1638.54,754.62 1639.1,703.924 1639.66,717.658 1640.21,702.041 1640.77,686.249 1641.33,686.315 1641.89,687.417 1642.45,687.37 1643.01,635.972 1643.57,655.269 1644.13,640.505 1644.69,645.712 1645.25,632.684 1645.81,652.908 1646.37,640.235 1646.93,689.21 1647.48,644.649 1648.04,664.882 1648.6,663.961 1649.16,665.67 1649.72,651.711 1650.28,667.404 1650.84,702.491 1651.4,683.021 1651.96,698.716 1652.52,682.781 1653.08,699.294 1653.64,632.268 1654.2,618.066 1654.76,601.351 1655.31,607.324 1655.87,579.91 1656.43,567.802 1656.99,574.038 1657.55,599.85 1658.11,652.196 1658.67,655.809 1659.23,627.83 1659.79,618.405 1660.35,605.627 1660.91,604.595 1661.47,657.87 1662.03,646.72 1662.58,634.064 1663.14,619.767 1663.7,603.42 1664.26,654.898 1664.82,654.488 1665.38,653.154 1665.94,642.335 1666.5,645.564 1667.06,662.145 1667.62,616.154 1668.18,650.678 1668.74,664.85 1669.3,653.034 1669.85,670.727 1670.41,675.039 1670.97,694.189 1671.53,675.02 1672.09,658.337 1672.65,678.961 1673.21,665.354 1673.77,680.029 1674.33,696.053 1674.89,680.297 1675.45,711.443 1676.01,729.14 1676.57,729.949 1677.13,744.805 1677.68,709.039 1678.24,721.336 1678.8,721.397 1679.36,732.495 1679.92,729.805 1680.48,696.966 1681.04,694.908 1681.6,709.428 1682.16,692.711 1682.72,675.793 1683.28,680.751 1683.84,662.3 1684.4,676.656 1684.95,678.228 1685.51,632.992 1686.07,617.794 1686.63,651.469 1687.19,653.698 1687.75,669.623 1688.31,654.156 1688.87,639.282 1689.43,659.317 1689.99,644.836 1690.55,666.561 1691.11,700.704 1691.67,713.944 1692.23,744.923 1692.78,724.703 1693.34,724.857 1693.9,785.107 1694.46,815.082 1695.02,812.293 1695.58,836.707 1696.14,807.153 1696.7,797.277 1697.26,776.197 1697.82,755.498 1698.38,750.335 1698.94,748.671 1699.5,777.67 1700.05,758.529 1700.61,751.499 1701.17,730.806 1701.73,746.645 1702.29,742.416 1702.85,785.851 1703.41,746.517 1703.97,723.834 1704.53,721.304 1705.09,703.249 1705.65,686.46 1706.21,716.956 1706.77,713.601 1707.32,713.436 1707.88,712.738 1708.44,727.357 1709,690.109 1709.56,689.503 1710.12,673.9 1710.68,691.803 1711.24,694.515 1711.8,711.309 1712.36,691.12 1712.92,706.975 1713.48,706.261 1714.04,655.707 1714.6,638.052 1715.15,627.587 1715.71,647.215 1716.27,648.347 1716.83,645.991 1717.39,630.824 1717.95,632.725 1718.51,685.447 1719.07,680.802 1719.63,664.571 1720.19,665.528 1720.75,666.784 1721.31,698.571 1721.87,713.627 1722.42,701.028 1722.98,700.003 1723.54,715.271 1724.1,730.027 1724.66,744.774 1725.22,743.004 1725.78,743.462 1726.34,723.193 1726.9,691.975 1727.46,725.807 1728.02,726.934 1728.58,706.194 1729.14,723.732 1729.69,706.359 1730.25,703.879 1730.81,703.375 1731.37,684.506 1731.93,685.012 1732.49,686.183 1733.05,671.633 1733.61,650.824 1734.17,634.998 1734.73,622.897 1735.29,625.583 1735.85,596.605 1736.41,572.004 1736.97,575.874 1737.52,564.981 1738.08,540.496 1738.64,551.263 1739.2,557.739 1739.76,561.11 1740.32,600.41 1740.88,621.036 1741.44,606.864 1742,611.452 1742.56,598.109 1743.12,620.564 1743.68,589.138 1744.24,606.609 1744.79,610.556 1745.35,595.337 1745.91,597.223 1746.47,636.171 1747.03,639.945 1747.59,658.827 1748.15,693.471 1748.71,659.578 1749.27,662.978 1749.83,664.945 1750.39,636.094 1750.95,656.21 1751.51,689.396 1752.06,687.05 1752.62,669.384 1753.18,671.75 1753.74,690.004 1754.3,706.942 1754.86,705.193 1755.42,719.646 1755.98,732.73 1756.54,765.605 1757.1,727.065 1757.66,744.439 1758.22,739.21 1758.78,752.166 1759.34,748.996 1759.89,730.406 1760.45,727 1761.01,721.3 1761.57,699.709 1762.13,667.832 1762.69,650.569 1763.25,653.033 1763.81,635.849 1764.37,685.876 1764.93,682.376 1765.49,699.083 1766.05,664.034 1766.61,635.25 1767.16,639.483 1767.72,639.91 1768.28,643.745 1768.84,612.312 1769.4,631.256 1769.96,646.318 1770.52,633.698 1771.08,605.872 1771.64,643.668 1772.2,629.416 1772.76,645.804 1773.32,616.873 1773.88,606.38 1774.43,611.867 1774.99,631.398 1775.55,637.097 1776.11,686.814 1776.67,651.906 1777.23,652.298 1777.79,638.25 1778.35,624.066 1778.91,629.523 1779.47,668.13 1780.03,683.706 1780.59,649.707 1781.15,654.766 1781.71,654.303 1782.26,670.459 1782.82,641.001 1783.38,626.765 1783.94,630.823 1784.5,634.225 1785.06,654.21 1785.62,668.626 1786.18,685.826 1786.74,688.96 1787.3,691.313 1787.86,726.247 1788.42,739.834 1788.98,737.07 1789.53,764.884 1790.09,728.777 1790.65,756.046 1791.21,754.362 1791.77,782.846 1792.33,762.094 1792.89,759.177 1793.45,740.242 1794.01,738.18 1794.57,737.652 1795.13,720.692 1795.69,718.226 1796.25,701.059 1796.8,700.31 1797.36,680.615 1797.92,665.179 1798.48,630.985 1799.04,634.134 1799.6,636.118 1800.16,641.911 1800.72,639.583 1801.28,627.062 1801.84,629.625 1802.4,629.601 1802.96,651.253 1803.52,639.638 1804.08,641.644 1804.63,613.086 1805.19,634.77 1805.75,641.555 1806.31,673.431 1806.87,676.297 1807.43,676.008 1807.99,661.193 1808.55,660.826 1809.11,633.364 1809.67,638.94 1810.23,657.988 1810.79,671.544 1811.35,657.919 1811.9,695.004 1812.46,698.816 1813.02,713.293 1813.58,725.067 1814.14,707.462 1814.7,705.962 1815.26,668.157 1815.82,670.424 1816.38,639.918 1816.94,657.74 1817.5,657.933 1818.06,657.969 1818.62,661.265 1819.18,630.205 1819.73,633.094 1820.29,668.384 1820.85,636.301 1821.41,639.907 1821.97,640.737 1822.53,676.898 1823.09,676.634 1823.65,677.279 1824.21,680.587 1824.77,680.462 1825.33,716.843 1825.89,713.747 1826.45,679.503 1827,662.639 1827.56,698.354 1828.12,669.124 1828.68,688.261 1829.24,704.111 1829.8,704.837 1830.36,700.678 1830.92,701.906 1831.48,685.935 1832.04,685.594 1832.6,683.824 1833.16,714.836 1833.72,716.148 1834.27,713.738 1834.83,712.906 1835.39,740.979 1835.95,721.086 1836.51,734.989 1837.07,732.584 1837.63,731.936 1838.19,695.66 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 691.214 L720.806 691.214 L721.365 691.214 L721.924 691.214 L722.484 691.214 L723.043 691.214 L723.602 691.214 L724.161 691.214 L724.721 691.214 L725.28 691.214 L725.839 691.214 L726.398 691.214 L726.958 691.214 L727.517 691.214 L728.076 691.214 L728.635 691.214 L729.195 691.214 L729.754 691.214 L730.313 691.214 L730.872 691.214 L731.432 691.214 L731.991 691.214 L732.55 691.214 L733.109 691.214 L733.669 691.214 L734.228 691.214 L734.787 691.214 L735.346 691.214 L735.906 691.214 L736.465 691.214 L737.024 691.214 L737.583 691.214 L738.143 691.214 L738.702 691.214 L739.261 691.214 L739.82 691.214 L740.38 691.214 L740.939 691.214 L741.498 691.214 L742.057 691.214 L742.617 691.214 L743.176 691.214 L743.735 691.214 L744.294 691.214 L744.854 691.214 L745.413 691.214 L745.972 691.214 L746.531 691.214 L747.091 691.214 L747.65 691.214 L748.209 691.214 L748.768 691.214 L749.328 691.214 L749.887 691.214 L750.446 691.214 L751.005 691.214 L751.565 691.214 L752.124 691.214 L752.683 691.214 L753.242 691.214 L753.802 691.214 L754.361 691.214 L754.92 691.214 L755.479 691.214 L756.039 691.214 L756.598 691.214 L757.157 691.214 L757.716 691.214 L758.276 691.214 L758.835 691.214 L759.394 691.214 L759.953 691.214 L760.513 691.214 L761.072 691.214 L761.631 691.214 L762.19 691.214 L762.75 691.214 L763.309 691.214 L763.868 691.214 L764.427 691.214 L764.987 691.214 L765.546 691.214 L766.105 691.214 L766.664 691.214 L767.224 691.214 L767.783 691.214 L768.342 691.214 L768.901 691.214 L769.461 691.214 L770.02 691.214 L770.579 691.214 L771.138 691.214 L771.698 691.214 L772.257 691.214 L772.816 691.214 L773.375 691.214 L773.935 691.214 L774.494 691.214 L775.053 691.214 L775.612 691.214 L776.172 691.214 L776.731 691.214 L777.29 691.214 L777.849 691.214 L778.409 691.214 L778.968 691.214 L779.527 691.214 L780.086 691.214 L780.646 691.214 L781.205 691.214 L781.764 691.214 L782.323 691.214 L782.883 691.214 L783.442 691.214 L784.001 691.214 L784.56 691.214 L785.12 691.214 L785.679 691.214 L786.238 691.214 L786.797 691.214 L787.357 691.214 L787.916 691.214 L788.475 691.214 L789.034 691.214 L789.594 691.214 L790.153 691.214 L790.712 691.214 L791.271 691.214 L791.831 691.214 L792.39 691.214 L792.949 691.214 L793.508 691.214 L794.068 691.214 L794.627 691.214 L795.186 691.214 L795.745 691.214 L796.305 691.214 L796.864 691.214 L797.423 691.214 L797.982 691.214 L798.542 691.214 L799.101 691.214 L799.66 691.214 L800.219 691.214 L800.779 691.214 L801.338 691.214 L801.897 691.214 L802.456 691.214 L803.016 691.214 L803.575 691.214 L804.134 691.214 L804.693 691.214 L805.253 691.214 L805.812 691.214 L806.371 691.214 L806.931 691.214 L807.49 691.214 L808.049 691.214 L808.608 691.214 L809.168 691.214 L809.727 691.214 L810.286 691.214 L810.845 691.214 L811.405 691.214 L811.964 691.214 L812.523 691.214 L813.082 691.214 L813.642 691.214 L814.201 691.214 L814.76 691.214 L815.319 691.214 L815.879 691.214 L816.438 691.214 L816.997 691.214 L817.556 691.214 L818.116 691.214 L818.675 691.214 L819.234 691.214 L819.793 691.214 L820.353 691.214 L820.912 691.214 L821.471 691.214 L822.03 691.214 L822.59 691.214 L823.149 691.214 L823.708 691.214 L824.267 691.214 L824.827 691.214 L825.386 691.214 L825.945 691.214 L826.504 691.214 L827.064 691.214 L827.623 691.214 L828.182 691.214 L828.741 691.214 L829.301 691.214 L829.86 691.214 L830.419 691.214 L830.978 691.214 L831.538 691.214 L832.097 691.214 L832.656 691.214 L833.215 691.214 L833.775 691.214 L834.334 691.214 L834.893 691.214 L835.452 691.214 L836.012 691.214 L836.571 691.214 L837.13 691.214 L837.689 691.214 L838.249 691.214 L838.808 691.214 L839.367 691.214 L839.926 691.214 L840.486 691.214 L841.045 691.214 L841.604 691.214 L842.163 691.214 L842.723 691.214 L843.282 691.214 L843.841 691.214 L844.4 691.214 L844.96 691.214 L845.519 691.214 L846.078 691.214 L846.637 691.214 L847.197 691.214 L847.756 691.214 L848.315 691.214 L848.874 691.214 L849.434 691.214 L849.993 691.214 L850.552 691.214 L851.111 691.214 L851.671 691.214 L852.23 691.214 L852.789 691.214 L853.348 691.214 L853.908 691.214 L854.467 691.214 L855.026 691.214 L855.585 691.214 L856.145 691.214 L856.704 691.214 L857.263 691.214 L857.822 691.214 L858.382 691.214 L858.941 691.214 L859.5 691.214 L860.059 691.214 L860.619 691.214 L861.178 691.214 L861.737 691.214 L862.296 691.214 L862.856 691.214 L863.415 691.214 L863.974 691.214 L864.533 691.214 L865.093 691.214 L865.652 691.214 L866.211 691.214 L866.77 691.214 L867.33 691.214 L867.889 691.214 L868.448 691.214 L869.007 691.214 L869.567 691.214 L870.126 691.214 L870.685 691.214 L871.244 691.214 L871.804 691.214 L872.363 691.214 L872.922 691.214 L873.481 691.214 L874.041 691.214 L874.6 691.214 L875.159 691.214 L875.718 691.214 L876.278 691.214 L876.837 691.214 L877.396 691.214 L877.955 691.214 L878.515 691.214 L879.074 691.214 L879.633 691.214 L880.192 691.214 L880.752 691.214 L881.311 691.214 L881.87 691.214 L882.429 691.214 L882.989 691.214 L883.548 691.214 L884.107 691.214 L884.666 691.214 L885.226 691.214 L885.785 691.214 L886.344 691.214 L886.903 691.214 L887.463 691.214 L888.022 691.214 L888.581 691.214 L889.14 691.214 L889.7 691.214 L890.259 691.214 L890.818 691.214 L891.377 691.214 L891.937 691.214 L892.496 691.214 L893.055 691.214 L893.614 691.214 L894.174 691.214 L894.733 691.214 L895.292 691.214 L895.851 691.214 L896.411 691.214 L896.97 691.214 L897.529 691.214 L898.088 691.214 L898.648 691.214 L899.207 691.214 L899.766 691.214 L900.325 691.214 L900.885 691.214 L901.444 691.214 L902.003 691.214 L902.562 691.214 L903.122 691.214 L903.681 691.214 L904.24 691.214 L904.799 691.214 L905.359 691.214 L905.918 691.214 L906.477 691.214 L907.036 691.214 L907.596 691.214 L908.155 691.214 L908.714 691.214 L909.273 691.214 L909.833 691.214 L910.392 691.214 L910.951 691.214 L911.51 691.214 L912.07 691.214 L912.629 691.214 L913.188 691.214 L913.747 691.214 L914.307 691.214 L914.866 691.214 L915.425 691.214 L915.984 691.214 L916.544 691.214 L917.103 691.214 L917.662 691.214 L918.221 691.214 L918.781 691.214 L919.34 691.214 L919.899 691.214 L920.458 691.214 L921.018 691.214 L921.577 691.214 L922.136 691.214 L922.695 691.214 L923.255 691.214 L923.814 691.214 L924.373 691.214 L924.932 691.214 L925.492 691.214 L926.051 691.214 L926.61 691.214 L927.169 691.214 L927.729 691.214 L928.288 691.214 L928.847 691.214 L929.406 691.214 L929.966 691.214 L930.525 691.214 L931.084 691.214 L931.644 691.214 L932.203 691.214 L932.762 691.214 L933.321 691.214 L933.881 691.214 L934.44 691.214 L934.999 691.214 L935.558 691.214 L936.118 691.214 L936.677 691.214 L937.236 691.214 L937.795 691.214 L938.355 691.214 L938.914 691.214 L939.473 691.214 L940.032 691.214 L940.592 691.214 L941.151 691.214 L941.71 691.214 L942.269 691.214 L942.829 691.214 L943.388 691.214 L943.947 691.214 L944.506 691.214 L945.066 691.214 L945.625 691.214 L946.184 691.214 L946.743 691.214 L947.303 691.214 L947.862 691.214 L948.421 691.214 L948.98 691.214 L949.54 691.214 L950.099 691.214 L950.658 691.214 L951.217 691.214 L951.777 691.214 L952.336 691.214 L952.895 691.214 L953.454 691.214 L954.014 691.214 L954.573 691.214 L955.132 691.214 L955.691 691.214 L956.251 691.214 L956.81 691.214 L957.369 691.214 L957.928 691.214 L958.488 691.214 L959.047 691.214 L959.606 691.214 L960.165 691.214 L960.725 691.214 L961.284 691.214 L961.843 691.214 L962.402 691.214 L962.962 691.214 L963.521 691.214 L964.08 691.214 L964.639 691.214 L965.199 691.214 L965.758 691.214 L966.317 691.214 L966.876 691.214 L967.436 691.214 L967.995 691.214 L968.554 691.214 L969.113 691.214 L969.673 691.214 L970.232 691.214 L970.791 691.214 L971.35 691.214 L971.91 691.214 L972.469 691.214 L973.028 691.214 L973.587 691.214 L974.147 691.214 L974.706 691.214 L975.265 691.214 L975.824 691.214 L976.384 691.214 L976.943 691.214 L977.502 691.214 L978.061 691.214 L978.621 691.214 L979.18 691.214 L979.739 691.214 L980.298 691.214 L980.858 691.214 L981.417 691.214 L981.976 691.214 L982.535 691.214 L983.095 691.214 L983.654 691.214 L984.213 691.214 L984.772 691.214 L985.332 691.214 L985.891 691.214 L986.45 691.214 L987.009 691.214 L987.569 691.214 L988.128 691.214 L988.687 691.214 L989.246 691.214 L989.806 691.214 L990.365 691.214 L990.924 691.214 L991.483 691.214 L992.043 691.214 L992.602 691.214 L993.161 691.214 L993.72 691.214 L994.28 691.214 L994.839 691.214 L995.398 691.214 L995.957 691.214 L996.517 691.214 L997.076 691.214 L997.635 691.214 L998.194 691.214 L998.754 691.214 L999.313 691.214 L999.872 691.214 L1000.43 691.214 L1000.99 691.214 L1001.55 691.214 L1002.11 691.214 L1002.67 691.214 L1003.23 691.214 L1003.79 691.214 L1004.35 691.214 L1004.91 691.214 L1005.46 691.214 L1006.02 691.214 L1006.58 691.214 L1007.14 691.214 L1007.7 691.214 L1008.26 691.214 L1008.82 691.214 L1009.38 691.214 L1009.94 691.214 L1010.5 691.214 L1011.06 691.214 L1011.62 691.214 L1012.18 691.214 L1012.73 691.214 L1013.29 691.214 L1013.85 691.214 L1014.41 691.214 L1014.97 691.214 L1015.53 691.214 L1016.09 691.214 L1016.65 691.214 L1017.21 691.214 L1017.77 691.214 L1018.33 691.214 L1018.89 691.214 L1019.45 691.214 L1020.01 691.214 L1020.56 691.214 L1021.12 691.214 L1021.68 691.214 L1022.24 691.214 L1022.8 691.214 L1023.36 691.214 L1023.92 691.214 L1024.48 691.214 L1025.04 691.214 L1025.6 691.214 L1026.16 691.214 L1026.72 691.214 L1027.28 691.214 L1027.83 691.214 L1028.39 691.214 L1028.95 691.214 L1029.51 691.214 L1030.07 691.214 L1030.63 691.214 L1031.19 691.214 L1031.75 691.214 L1032.31 691.214 L1032.87 691.214 L1033.43 691.214 L1033.99 691.214 L1034.55 691.214 L1035.1 691.214 L1035.66 691.214 L1036.22 691.214 L1036.78 691.214 L1037.34 691.214 L1037.9 691.214 L1038.46 691.214 L1039.02 691.214 L1039.58 691.214 L1040.14 691.214 L1040.7 691.214 L1041.26 691.214 L1041.82 691.214 L1042.38 691.214 L1042.93 691.214 L1043.49 691.214 L1044.05 691.214 L1044.61 691.214 L1045.17 691.214 L1045.73 691.214 L1046.29 691.214 L1046.85 691.214 L1047.41 691.214 L1047.97 691.214 L1048.53 691.214 L1049.09 691.214 L1049.65 691.214 L1050.2 691.214 L1050.76 691.214 L1051.32 691.214 L1051.88 691.214 L1052.44 691.214 L1053 691.214 L1053.56 691.214 L1054.12 691.214 L1054.68 691.214 L1055.24 691.214 L1055.8 691.214 L1056.36 691.214 L1056.92 691.214 L1057.48 691.214 L1058.03 691.214 L1058.59 691.214 L1059.15 691.214 L1059.71 691.214 L1060.27 691.214 L1060.83 691.214 L1061.39 691.214 L1061.95 691.214 L1062.51 691.214 L1063.07 691.214 L1063.63 691.214 L1064.19 691.214 L1064.75 691.214 L1065.3 691.214 L1065.86 691.214 L1066.42 691.214 L1066.98 691.214 L1067.54 691.214 L1068.1 691.214 L1068.66 691.214 L1069.22 691.214 L1069.78 691.214 L1070.34 691.214 L1070.9 691.214 L1071.46 691.214 L1072.02 691.214 L1072.57 691.214 L1073.13 691.214 L1073.69 691.214 L1074.25 691.214 L1074.81 691.214 L1075.37 691.214 L1075.93 691.214 L1076.49 691.214 L1077.05 691.214 L1077.61 691.214 L1078.17 691.214 L1078.73 691.214 L1079.29 691.214 L1079.85 691.214 L1080.4 691.214 L1080.96 691.214 L1081.52 691.214 L1082.08 691.214 L1082.64 691.214 L1083.2 691.214 L1083.76 691.214 L1084.32 691.214 L1084.88 691.214 L1085.44 691.214 L1086 691.214 L1086.56 691.214 L1087.12 691.214 L1087.67 691.214 L1088.23 691.214 L1088.79 691.214 L1089.35 691.214 L1089.91 691.214 L1090.47 691.214 L1091.03 691.214 L1091.59 691.214 L1092.15 691.214 L1092.71 691.214 L1093.27 691.214 L1093.83 691.214 L1094.39 691.214 L1094.94 691.214 L1095.5 691.214 L1096.06 691.214 L1096.62 691.214 L1097.18 691.214 L1097.74 691.214 L1098.3 691.214 L1098.86 691.214 L1099.42 691.214 L1099.98 691.214 L1100.54 691.214 L1101.1 691.214 L1101.66 691.214 L1102.22 691.214 L1102.77 691.214 L1103.33 691.214 L1103.89 691.214 L1104.45 691.214 L1105.01 691.214 L1105.57 691.214 L1106.13 691.214 L1106.69 691.214 L1107.25 691.214 L1107.81 691.214 L1108.37 691.214 L1108.93 691.214 L1109.49 691.214 L1110.04 691.214 L1110.6 691.214 L1111.16 691.214 L1111.72 691.214 L1112.28 691.214 L1112.84 691.214 L1113.4 691.214 L1113.96 691.214 L1114.52 691.214 L1115.08 691.214 L1115.64 691.214 L1116.2 691.214 L1116.76 691.214 L1117.31 691.214 L1117.87 691.214 L1118.43 691.214 L1118.99 691.214 L1119.55 691.214 L1120.11 691.214 L1120.67 691.214 L1121.23 691.214 L1121.79 691.214 L1122.35 691.214 L1122.91 691.214 L1123.47 691.214 L1124.03 691.214 L1124.59 691.214 L1125.14 691.214 L1125.7 691.214 L1126.26 691.214 L1126.82 691.214 L1127.38 691.214 L1127.94 691.214 L1128.5 691.214 L1129.06 691.214 L1129.62 691.214 L1130.18 691.214 L1130.74 691.214 L1131.3 691.214 L1131.86 691.214 L1132.41 691.214 L1132.97 691.214 L1133.53 691.214 L1134.09 691.214 L1134.65 691.214 L1135.21 691.214 L1135.77 691.214 L1136.33 691.214 L1136.89 691.214 L1137.45 691.214 L1138.01 691.214 L1138.57 691.214 L1139.13 691.214 L1139.68 691.214 L1140.24 691.214 L1140.8 691.214 L1141.36 691.214 L1141.92 691.214 L1142.48 691.214 L1143.04 691.214 L1143.6 691.214 L1144.16 691.214 L1144.72 691.214 L1145.28 691.214 L1145.84 691.214 L1146.4 691.214 L1146.96 691.214 L1147.51 691.214 L1148.07 691.214 L1148.63 691.214 L1149.19 691.214 L1149.75 691.214 L1150.31 691.214 L1150.87 691.214 L1151.43 691.214 L1151.99 691.214 L1152.55 691.214 L1153.11 691.214 L1153.67 691.214 L1154.23 691.214 L1154.78 691.214 L1155.34 691.214 L1155.9 691.214 L1156.46 691.214 L1157.02 691.214 L1157.58 691.214 L1158.14 691.214 L1158.7 691.214 L1159.26 691.214 L1159.82 691.214 L1160.38 691.214 L1160.94 691.214 L1161.5 691.214 L1162.05 691.214 L1162.61 691.214 L1163.17 691.214 L1163.73 691.214 L1164.29 691.214 L1164.85 691.214 L1165.41 691.214 L1165.97 691.214 L1166.53 691.214 L1167.09 691.214 L1167.65 691.214 L1168.21 691.214 L1168.77 691.214 L1169.33 691.214 L1169.88 691.214 L1170.44 691.214 L1171 691.214 L1171.56 691.214 L1172.12 691.214 L1172.68 691.214 L1173.24 691.214 L1173.8 691.214 L1174.36 691.214 L1174.92 691.214 L1175.48 691.214 L1176.04 691.214 L1176.6 691.214 L1177.15 691.214 L1177.71 691.214 L1178.27 691.214 L1178.83 691.214 L1179.39 691.214 L1179.95 691.214 L1180.51 691.214 L1181.07 691.214 L1181.63 691.214 L1182.19 691.214 L1182.75 691.214 L1183.31 691.214 L1183.87 691.214 L1184.43 691.214 L1184.98 691.214 L1185.54 691.214 L1186.1 691.214 L1186.66 691.214 L1187.22 691.214 L1187.78 691.214 L1188.34 691.214 L1188.9 691.214 L1189.46 691.214 L1190.02 691.214 L1190.58 691.214 L1191.14 691.214 L1191.7 691.214 L1192.25 691.214 L1192.81 691.214 L1193.37 691.214 L1193.93 691.214 L1194.49 691.214 L1195.05 691.214 L1195.61 691.214 L1196.17 691.214 L1196.73 691.214 L1197.29 691.214 L1197.85 691.214 L1198.41 691.214 L1198.97 691.214 L1199.52 691.214 L1200.08 691.214 L1200.64 691.214 L1201.2 691.214 L1201.76 691.214 L1202.32 691.214 L1202.88 691.214 L1203.44 691.214 L1204 691.214 L1204.56 691.214 L1205.12 691.214 L1205.68 691.214 L1206.24 691.214 L1206.8 691.214 L1207.35 691.214 L1207.91 691.214 L1208.47 691.214 L1209.03 691.214 L1209.59 691.214 L1210.15 691.214 L1210.71 691.214 L1211.27 691.214 L1211.83 691.214 L1212.39 691.214 L1212.95 691.214 L1213.51 691.214 L1214.07 691.214 L1214.62 691.214 L1215.18 691.214 L1215.74 691.214 L1216.3 691.214 L1216.86 691.214 L1217.42 691.214 L1217.98 691.214 L1218.54 691.214 L1219.1 691.214 L1219.66 691.214 L1220.22 691.214 L1220.78 691.214 L1221.34 691.214 L1221.89 691.214 L1222.45 691.214 L1223.01 691.214 L1223.57 691.214 L1224.13 691.214 L1224.69 691.214 L1225.25 691.214 L1225.81 691.214 L1226.37 691.214 L1226.93 691.214 L1227.49 691.214 L1228.05 691.214 L1228.61 691.214 L1229.17 691.214 L1229.72 691.214 L1230.28 691.214 L1230.84 691.214 L1231.4 691.214 L1231.96 691.214 L1232.52 691.214 L1233.08 691.214 L1233.64 691.214 L1234.2 691.214 L1234.76 691.214 L1235.32 691.214 L1235.88 691.214 L1236.44 691.214 L1236.99 691.214 L1237.55 691.214 L1238.11 691.214 L1238.67 691.214 L1239.23 691.214 L1239.79 691.214 L1240.35 691.214 L1240.91 691.214 L1241.47 691.214 L1242.03 691.214 L1242.59 691.214 L1243.15 691.214 L1243.71 691.214 L1244.26 691.214 L1244.82 691.214 L1245.38 691.214 L1245.94 691.214 L1246.5 691.214 L1247.06 691.214 L1247.62 691.214 L1248.18 691.214 L1248.74 691.214 L1249.3 691.214 L1249.86 691.214 L1250.42 691.214 L1250.98 691.214 L1251.54 691.214 L1252.09 691.214 L1252.65 691.214 L1253.21 691.214 L1253.77 691.214 L1254.33 691.214 L1254.89 691.214 L1255.45 691.214 L1256.01 691.214 L1256.57 691.214 L1257.13 691.214 L1257.69 691.214 L1258.25 691.214 L1258.81 691.214 L1259.36 691.214 L1259.92 691.214 L1260.48 691.214 L1261.04 691.214 L1261.6 691.214 L1262.16 691.214 L1262.72 691.214 L1263.28 691.214 L1263.84 691.214 L1264.4 691.214 L1264.96 691.214 L1265.52 691.214 L1266.08 691.214 L1266.63 691.214 L1267.19 691.214 L1267.75 691.214 L1268.31 691.214 L1268.87 691.214 L1269.43 691.214 L1269.99 691.214 L1270.55 691.214 L1271.11 691.214 L1271.67 691.214 L1272.23 691.214 L1272.79 691.214 L1273.35 691.214 L1273.91 691.214 L1274.46 691.214 L1275.02 691.214 L1275.58 691.214 L1276.14 691.214 L1276.7 691.214 L1277.26 691.214 L1277.82 691.214 L1278.38 691.214 L1278.94 691.214 L1279.5 691.214 L1280.06 691.214 L1280.62 691.214 L1281.18 691.214 L1281.73 691.214 L1282.29 691.214 L1282.85 691.214 L1283.41 691.214 L1283.97 691.214 L1284.53 691.214 L1285.09 691.214 L1285.65 691.214 L1286.21 691.214 L1286.77 691.214 L1287.33 691.214 L1287.89 691.214 L1288.45 691.214 L1289 691.214 L1289.56 691.214 L1290.12 691.214 L1290.68 691.214 L1291.24 691.214 L1291.8 691.214 L1292.36 691.214 L1292.92 691.214 L1293.48 691.214 L1294.04 691.214 L1294.6 691.214 L1295.16 691.214 L1295.72 691.214 L1296.28 691.214 L1296.83 691.214 L1297.39 691.214 L1297.95 691.214 L1298.51 691.214 L1299.07 691.214 L1299.63 691.214 L1300.19 691.214 L1300.75 691.214 L1301.31 691.214 L1301.87 691.214 L1302.43 691.214 L1302.99 691.214 L1303.55 691.214 L1304.1 691.214 L1304.66 691.214 L1305.22 691.214 L1305.78 691.214 L1306.34 691.214 L1306.9 691.214 L1307.46 691.214 L1308.02 691.214 L1308.58 691.214 L1309.14 691.214 L1309.7 691.214 L1310.26 691.214 L1310.82 691.214 L1311.38 691.214 L1311.93 691.214 L1312.49 691.214 L1313.05 691.214 L1313.61 691.214 L1314.17 691.214 L1314.73 691.214 L1315.29 691.214 L1315.85 691.214 L1316.41 691.214 L1316.97 691.214 L1317.53 691.214 L1318.09 691.214 L1318.65 691.214 L1319.2 691.214 L1319.76 691.214 L1320.32 691.214 L1320.88 691.214 L1321.44 691.214 L1322 691.214 L1322.56 691.214 L1323.12 691.214 L1323.68 691.214 L1324.24 691.214 L1324.8 691.214 L1325.36 691.214 L1325.92 691.214 L1326.47 691.214 L1327.03 691.214 L1327.59 691.214 L1328.15 691.214 L1328.71 691.214 L1329.27 691.214 L1329.83 691.214 L1330.39 691.214 L1330.95 691.214 L1331.51 691.214 L1332.07 691.214 L1332.63 691.214 L1333.19 691.214 L1333.75 691.214 L1334.3 691.214 L1334.86 691.214 L1335.42 691.214 L1335.98 691.214 L1336.54 691.214 L1337.1 691.214 L1337.66 691.214 L1338.22 691.214 L1338.78 691.214 L1339.34 691.214 L1339.9 691.214 L1340.46 691.214 L1341.02 691.214 L1341.57 691.214 L1342.13 691.214 L1342.69 691.214 L1343.25 691.214 L1343.81 691.214 L1344.37 691.214 L1344.93 691.214 L1345.49 691.214 L1346.05 691.214 L1346.61 691.214 L1347.17 691.214 L1347.73 691.214 L1348.29 691.214 L1348.84 691.214 L1349.4 691.214 L1349.96 691.214 L1350.52 691.214 L1351.08 691.214 L1351.64 691.214 L1352.2 691.214 L1352.76 691.214 L1353.32 691.214 L1353.88 691.214 L1354.44 691.214 L1355 691.214 L1355.56 691.214 L1356.12 691.214 L1356.67 691.214 L1357.23 691.214 L1357.79 691.214 L1358.35 691.214 L1358.91 691.214 L1359.47 691.214 L1360.03 691.214 L1360.59 691.214 L1361.15 691.214 L1361.71 691.214 L1362.27 691.214 L1362.83 691.214 L1363.39 691.214 L1363.94 691.214 L1364.5 691.214 L1365.06 691.214 L1365.62 691.214 L1366.18 691.214 L1366.74 691.214 L1367.3 691.214 L1367.86 691.214 L1368.42 691.214 L1368.98 691.214 L1369.54 691.214 L1370.1 691.214 L1370.66 691.214 L1371.21 691.214 L1371.77 691.214 L1372.33 691.214 L1372.89 691.214 L1373.45 691.214 L1374.01 691.214 L1374.57 691.214 L1375.13 691.214 L1375.69 691.214 L1376.25 691.214 L1376.81 691.214 L1377.37 691.214 L1377.93 691.214 L1378.49 691.214 L1379.04 691.214 L1379.6 691.214 L1380.16 691.214 L1380.72 691.214 L1381.28 691.214 L1381.84 691.214 L1382.4 691.214 L1382.96 691.214 L1383.52 691.214 L1384.08 691.214 L1384.64 691.214 L1385.2 691.214 L1385.76 691.214 L1386.31 691.214 L1386.87 691.214 L1387.43 691.214 L1387.99 691.214 L1388.55 691.214 L1389.11 691.214 L1389.67 691.214 L1390.23 691.214 L1390.79 691.214 L1391.35 691.214 L1391.91 691.214 L1392.47 691.214 L1393.03 691.214 L1393.58 691.214 L1394.14 691.214 L1394.7 691.214 L1395.26 691.214 L1395.82 691.214 L1396.38 691.214 L1396.94 691.214 L1397.5 691.214 L1398.06 691.214 L1398.62 691.214 L1399.18 691.214 L1399.74 691.214 L1400.3 691.214 L1400.86 691.214 L1401.41 691.214 L1401.97 691.214 L1402.53 691.214 L1403.09 691.214 L1403.65 691.214 L1404.21 691.214 L1404.77 691.214 L1405.33 691.214 L1405.89 691.214 L1406.45 691.214 L1407.01 691.214 L1407.57 691.214 L1408.13 691.214 L1408.68 691.214 L1409.24 691.214 L1409.8 691.214 L1410.36 691.214 L1410.92 691.214 L1411.48 691.214 L1412.04 691.214 L1412.6 691.214 L1413.16 691.214 L1413.72 691.214 L1414.28 691.214 L1414.84 691.214 L1415.4 691.214 L1415.95 691.214 L1416.51 691.214 L1417.07 691.214 L1417.63 691.214 L1418.19 691.214 L1418.75 691.214 L1419.31 691.214 L1419.87 691.214 L1420.43 691.214 L1420.99 691.214 L1421.55 691.214 L1422.11 691.214 L1422.67 691.214 L1423.23 691.214 L1423.78 691.214 L1424.34 691.214 L1424.9 691.214 L1425.46 691.214 L1426.02 691.214 L1426.58 691.214 L1427.14 691.214 L1427.7 691.214 L1428.26 691.214 L1428.82 691.214 L1429.38 691.214 L1429.94 691.214 L1430.5 691.214 L1431.05 691.214 L1431.61 691.214 L1432.17 691.214 L1432.73 691.214 L1433.29 691.214 L1433.85 691.214 L1434.41 691.214 L1434.97 691.214 L1435.53 691.214 L1436.09 691.214 L1436.65 691.214 L1437.21 691.214 L1437.77 691.214 L1438.33 691.214 L1438.88 691.214 L1439.44 691.214 L1440 691.214 L1440.56 691.214 L1441.12 691.214 L1441.68 691.214 L1442.24 691.214 L1442.8 691.214 L1443.36 691.214 L1443.92 691.214 L1444.48 691.214 L1445.04 691.214 L1445.6 691.214 L1446.15 691.214 L1446.71 691.214 L1447.27 691.214 L1447.83 691.214 L1448.39 691.214 L1448.95 691.214 L1449.51 691.214 L1450.07 691.214 L1450.63 691.214 L1451.19 691.214 L1451.75 691.214 L1452.31 691.214 L1452.87 691.214 L1453.42 691.214 L1453.98 691.214 L1454.54 691.214 L1455.1 691.214 L1455.66 691.214 L1456.22 691.214 L1456.78 691.214 L1457.34 691.214 L1457.9 691.214 L1458.46 691.214 L1459.02 691.214 L1459.58 691.214 L1460.14 691.214 L1460.7 691.214 L1461.25 691.214 L1461.81 691.214 L1462.37 691.214 L1462.93 691.214 L1463.49 691.214 L1464.05 691.214 L1464.61 691.214 L1465.17 691.214 L1465.73 691.214 L1466.29 691.214 L1466.85 691.214 L1467.41 691.214 L1467.97 691.214 L1468.52 691.214 L1469.08 691.214 L1469.64 691.214 L1470.2 691.214 L1470.76 691.214 L1471.32 691.214 L1471.88 691.214 L1472.44 691.214 L1473 691.214 L1473.56 691.214 L1474.12 691.214 L1474.68 691.214 L1475.24 691.214 L1475.79 691.214 L1476.35 691.214 L1476.91 691.214 L1477.47 691.214 L1478.03 691.214 L1478.59 691.214 L1479.15 691.214 L1479.71 691.214 L1480.27 691.214 L1480.83 691.214 L1481.39 691.214 L1481.95 691.214 L1482.51 691.214 L1483.07 691.214 L1483.62 691.214 L1484.18 691.214 L1484.74 691.214 L1485.3 691.214 L1485.86 691.214 L1486.42 691.214 L1486.98 691.214 L1487.54 691.214 L1488.1 691.214 L1488.66 691.214 L1489.22 691.214 L1489.78 691.214 L1490.34 691.214 L1490.89 691.214 L1491.45 691.214 L1492.01 691.214 L1492.57 691.214 L1493.13 691.214 L1493.69 691.214 L1494.25 691.214 L1494.81 691.214 L1495.37 691.214 L1495.93 691.214 L1496.49 691.214 L1497.05 691.214 L1497.61 691.214 L1498.16 691.214 L1498.72 691.214 L1499.28 691.214 L1499.84 691.214 L1500.4 691.214 L1500.96 691.214 L1501.52 691.214 L1502.08 691.214 L1502.64 691.214 L1503.2 691.214 L1503.76 691.214 L1504.32 691.214 L1504.88 691.214 L1505.44 691.214 L1505.99 691.214 L1506.55 691.214 L1507.11 691.214 L1507.67 691.214 L1508.23 691.214 L1508.79 691.214 L1509.35 691.214 L1509.91 691.214 L1510.47 691.214 L1511.03 691.214 L1511.59 691.214 L1512.15 691.214 L1512.71 691.214 L1513.26 691.214 L1513.82 691.214 L1514.38 691.214 L1514.94 691.214 L1515.5 691.214 L1516.06 691.214 L1516.62 691.214 L1517.18 691.214 L1517.74 691.214 L1518.3 691.214 L1518.86 691.214 L1519.42 691.214 L1519.98 691.214 L1520.53 691.214 L1521.09 691.214 L1521.65 691.214 L1522.21 691.214 L1522.77 691.214 L1523.33 691.214 L1523.89 691.214 L1524.45 691.214 L1525.01 691.214 L1525.57 691.214 L1526.13 691.214 L1526.69 691.214 L1527.25 691.214 L1527.81 691.214 L1528.36 691.214 L1528.92 691.214 L1529.48 691.214 L1530.04 691.214 L1530.6 691.214 L1531.16 691.214 L1531.72 691.214 L1532.28 691.214 L1532.84 691.214 L1533.4 691.214 L1533.96 691.214 L1534.52 691.214 L1535.08 691.214 L1535.63 691.214 L1536.19 691.214 L1536.75 691.214 L1537.31 691.214 L1537.87 691.214 L1538.43 691.214 L1538.99 691.214 L1539.55 691.214 L1540.11 691.214 L1540.67 691.214 L1541.23 691.214 L1541.79 691.214 L1542.35 691.214 L1542.9 691.214 L1543.46 691.214 L1544.02 691.214 L1544.58 691.214 L1545.14 691.214 L1545.7 691.214 L1546.26 691.214 L1546.82 691.214 L1547.38 691.214 L1547.94 691.214 L1548.5 691.214 L1549.06 691.214 L1549.62 691.214 L1550.18 691.214 L1550.73 691.214 L1551.29 691.214 L1551.85 691.214 L1552.41 691.214 L1552.97 691.214 L1553.53 691.214 L1554.09 691.214 L1554.65 691.214 L1555.21 691.214 L1555.77 691.214 L1556.33 691.214 L1556.89 691.214 L1557.45 691.214 L1558 691.214 L1558.56 691.214 L1559.12 691.214 L1559.68 691.214 L1560.24 691.214 L1560.8 691.214 L1561.36 691.214 L1561.92 691.214 L1562.48 691.214 L1563.04 691.214 L1563.6 691.214 L1564.16 691.214 L1564.72 691.214 L1565.28 691.214 L1565.83 691.214 L1566.39 691.214 L1566.95 691.214 L1567.51 691.214 L1568.07 691.214 L1568.63 691.214 L1569.19 691.214 L1569.75 691.214 L1570.31 691.214 L1570.87 691.214 L1571.43 691.214 L1571.99 691.214 L1572.55 691.214 L1573.1 691.214 L1573.66 691.214 L1574.22 691.214 L1574.78 691.214 L1575.34 691.214 L1575.9 691.214 L1576.46 691.214 L1577.02 691.214 L1577.58 691.214 L1578.14 691.214 L1578.7 691.214 L1579.26 691.214 L1579.82 691.214 L1580.37 691.214 L1580.93 691.214 L1581.49 691.214 L1582.05 691.214 L1582.61 691.214 L1583.17 691.214 L1583.73 691.214 L1584.29 691.214 L1584.85 691.214 L1585.41 691.214 L1585.97 691.214 L1586.53 691.214 L1587.09 691.214 L1587.65 691.214 L1588.2 691.214 L1588.76 691.214 L1589.32 691.214 L1589.88 691.214 L1590.44 691.214 L1591 691.214 L1591.56 691.214 L1592.12 691.214 L1592.68 691.214 L1593.24 691.214 L1593.8 691.214 L1594.36 691.214 L1594.92 691.214 L1595.47 691.214 L1596.03 691.214 L1596.59 691.214 L1597.15 691.214 L1597.71 691.214 L1598.27 691.214 L1598.83 691.214 L1599.39 691.214 L1599.95 691.214 L1600.51 691.214 L1601.07 691.214 L1601.63 691.214 L1602.19 691.214 L1602.74 691.214 L1603.3 691.214 L1603.86 691.214 L1604.42 691.214 L1604.98 691.214 L1605.54 691.214 L1606.1 691.214 L1606.66 691.214 L1607.22 691.214 L1607.78 691.214 L1608.34 691.214 L1608.9 691.214 L1609.46 691.214 L1610.02 691.214 L1610.57 691.214 L1611.13 691.214 L1611.69 691.214 L1612.25 691.214 L1612.81 691.214 L1613.37 691.214 L1613.93 691.214 L1614.49 691.214 L1615.05 691.214 L1615.61 691.214 L1616.17 691.214 L1616.73 691.214 L1617.29 691.214 L1617.84 691.214 L1618.4 691.214 L1618.96 691.214 L1619.52 691.214 L1620.08 691.214 L1620.64 691.214 L1621.2 691.214 L1621.76 691.214 L1622.32 691.214 L1622.88 691.214 L1623.44 691.214 L1624 691.214 L1624.56 691.214 L1625.11 691.214 L1625.67 691.214 L1626.23 691.214 L1626.79 691.214 L1627.35 691.214 L1627.91 691.214 L1628.47 691.214 L1629.03 691.214 L1629.59 691.214 L1630.15 691.214 L1630.71 691.214 L1631.27 691.214 L1631.83 691.214 L1632.39 691.214 L1632.94 691.214 L1633.5 691.214 L1634.06 691.214 L1634.62 691.214 L1635.18 691.214 L1635.74 691.214 L1636.3 691.214 L1636.86 691.214 L1637.42 691.214 L1637.98 691.214 L1638.54 691.214 L1639.1 691.214 L1639.66 691.214 L1640.21 691.214 L1640.77 691.214 L1641.33 691.214 L1641.89 691.214 L1642.45 691.214 L1643.01 691.214 L1643.57 691.214 L1644.13 691.214 L1644.69 691.214 L1645.25 691.214 L1645.81 691.214 L1646.37 691.214 L1646.93 691.214 L1647.48 691.214 L1648.04 691.214 L1648.6 691.214 L1649.16 691.214 L1649.72 691.214 L1650.28 691.214 L1650.84 691.214 L1651.4 691.214 L1651.96 691.214 L1652.52 691.214 L1653.08 691.214 L1653.64 691.214 L1654.2 691.214 L1654.76 691.214 L1655.31 691.214 L1655.87 691.214 L1656.43 691.214 L1656.99 691.214 L1657.55 691.214 L1658.11 691.214 L1658.67 691.214 L1659.23 691.214 L1659.79 691.214 L1660.35 691.214 L1660.91 691.214 L1661.47 691.214 L1662.03 691.214 L1662.58 691.214 L1663.14 691.214 L1663.7 691.214 L1664.26 691.214 L1664.82 691.214 L1665.38 691.214 L1665.94 691.214 L1666.5 691.214 L1667.06 691.214 L1667.62 691.214 L1668.18 691.214 L1668.74 691.214 L1669.3 691.214 L1669.85 691.214 L1670.41 691.214 L1670.97 691.214 L1671.53 691.214 L1672.09 691.214 L1672.65 691.214 L1673.21 691.214 L1673.77 691.214 L1674.33 691.214 L1674.89 691.214 L1675.45 691.214 L1676.01 691.214 L1676.57 691.214 L1677.13 691.214 L1677.68 691.214 L1678.24 691.214 L1678.8 691.214 L1679.36 691.214 L1679.92 691.214 L1680.48 691.214 L1681.04 691.214 L1681.6 691.214 L1682.16 691.214 L1682.72 691.214 L1683.28 691.214 L1683.84 691.214 L1684.4 691.214 L1684.95 691.214 L1685.51 691.214 L1686.07 691.214 L1686.63 691.214 L1687.19 691.214 L1687.75 691.214 L1688.31 691.214 L1688.87 691.214 L1689.43 691.214 L1689.99 691.214 L1690.55 691.214 L1691.11 691.214 L1691.67 691.214 L1692.23 691.214 L1692.78 691.214 L1693.34 691.214 L1693.9 691.214 L1694.46 691.214 L1695.02 691.214 L1695.58 691.214 L1696.14 691.214 L1696.7 691.214 L1697.26 691.214 L1697.82 691.214 L1698.38 691.214 L1698.94 691.214 L1699.5 691.214 L1700.05 691.214 L1700.61 691.214 L1701.17 691.214 L1701.73 691.214 L1702.29 691.214 L1702.85 691.214 L1703.41 691.214 L1703.97 691.214 L1704.53 691.214 L1705.09 691.214 L1705.65 691.214 L1706.21 691.214 L1706.77 691.214 L1707.32 691.214 L1707.88 691.214 L1708.44 691.214 L1709 691.214 L1709.56 691.214 L1710.12 691.214 L1710.68 691.214 L1711.24 691.214 L1711.8 691.214 L1712.36 691.214 L1712.92 691.214 L1713.48 691.214 L1714.04 691.214 L1714.6 691.214 L1715.15 691.214 L1715.71 691.214 L1716.27 691.214 L1716.83 691.214 L1717.39 691.214 L1717.95 691.214 L1718.51 691.214 L1719.07 691.214 L1719.63 691.214 L1720.19 691.214 L1720.75 691.214 L1721.31 691.214 L1721.87 691.214 L1722.42 691.214 L1722.98 691.214 L1723.54 691.214 L1724.1 691.214 L1724.66 691.214 L1725.22 691.214 L1725.78 691.214 L1726.34 691.214 L1726.9 691.214 L1727.46 691.214 L1728.02 691.214 L1728.58 691.214 L1729.14 691.214 L1729.69 691.214 L1730.25 691.214 L1730.81 691.214 L1731.37 691.214 L1731.93 691.214 L1732.49 691.214 L1733.05 691.214 L1733.61 691.214 L1734.17 691.214 L1734.73 691.214 L1735.29 691.214 L1735.85 691.214 L1736.41 691.214 L1736.97 691.214 L1737.52 691.214 L1738.08 691.214 L1738.64 691.214 L1739.2 691.214 L1739.76 691.214 L1740.32 691.214 L1740.88 691.214 L1741.44 691.214 L1742 691.214 L1742.56 691.214 L1743.12 691.214 L1743.68 691.214 L1744.24 691.214 L1744.79 691.214 L1745.35 691.214 L1745.91 691.214 L1746.47 691.214 L1747.03 691.214 L1747.59 691.214 L1748.15 691.214 L1748.71 691.214 L1749.27 691.214 L1749.83 691.214 L1750.39 691.214 L1750.95 691.214 L1751.51 691.214 L1752.06 691.214 L1752.62 691.214 L1753.18 691.214 L1753.74 691.214 L1754.3 691.214 L1754.86 691.214 L1755.42 691.214 L1755.98 691.214 L1756.54 691.214 L1757.1 691.214 L1757.66 691.214 L1758.22 691.214 L1758.78 691.214 L1759.34 691.214 L1759.89 691.214 L1760.45 691.214 L1761.01 691.214 L1761.57 691.214 L1762.13 691.214 L1762.69 691.214 L1763.25 691.214 L1763.81 691.214 L1764.37 691.214 L1764.93 691.214 L1765.49 691.214 L1766.05 691.214 L1766.61 691.214 L1767.16 691.214 L1767.72 691.214 L1768.28 691.214 L1768.84 691.214 L1769.4 691.214 L1769.96 691.214 L1770.52 691.214 L1771.08 691.214 L1771.64 691.214 L1772.2 691.214 L1772.76 691.214 L1773.32 691.214 L1773.88 691.214 L1774.43 691.214 L1774.99 691.214 L1775.55 691.214 L1776.11 691.214 L1776.67 691.214 L1777.23 691.214 L1777.79 691.214 L1778.35 691.214 L1778.91 691.214 L1779.47 691.214 L1780.03 691.214 L1780.59 691.214 L1781.15 691.214 L1781.71 691.214 L1782.26 691.214 L1782.82 691.214 L1783.38 691.214 L1783.94 691.214 L1784.5 691.214 L1785.06 691.214 L1785.62 691.214 L1786.18 691.214 L1786.74 691.214 L1787.3 691.214 L1787.86 691.214 L1788.42 691.214 L1788.98 691.214 L1789.53 691.214 L1790.09 691.214 L1790.65 691.214 L1791.21 691.214 L1791.77 691.214 L1792.33 691.214 L1792.89 691.214 L1793.45 691.214 L1794.01 691.214 L1794.57 691.214 L1795.13 691.214 L1795.69 691.214 L1796.25 691.214 L1796.8 691.214 L1797.36 691.214 L1797.92 691.214 L1798.48 691.214 L1799.04 691.214 L1799.6 691.214 L1800.16 691.214 L1800.72 691.214 L1801.28 691.214 L1801.84 691.214 L1802.4 691.214 L1802.96 691.214 L1803.52 691.214 L1804.08 691.214 L1804.63 691.214 L1805.19 691.214 L1805.75 691.214 L1806.31 691.214 L1806.87 691.214 L1807.43 691.214 L1807.99 691.214 L1808.55 691.214 L1809.11 691.214 L1809.67 691.214 L1810.23 691.214 L1810.79 691.214 L1811.35 691.214 L1811.9 691.214 L1812.46 691.214 L1813.02 691.214 L1813.58 691.214 L1814.14 691.214 L1814.7 691.214 L1815.26 691.214 L1815.82 691.214 L1816.38 691.214 L1816.94 691.214 L1817.5 691.214 L1818.06 691.214 L1818.62 691.214 L1819.18 691.214 L1819.73 691.214 L1820.29 691.214 L1820.85 691.214 L1821.41 691.214 L1821.97 691.214 L1822.53 691.214 L1823.09 691.214 L1823.65 691.214 L1824.21 691.214 L1824.77 691.214 L1825.33 691.214 L1825.89 691.214 L1826.45 691.214 L1827 691.214 L1827.56 691.214 L1828.12 691.214 L1828.68 691.214 L1829.24 691.214 L1829.8 691.214 L1830.36 691.214 L1830.92 691.214 L1831.48 691.214 L1832.04 691.214 L1832.6 691.214 L1833.16 691.214 L1833.72 691.214 L1834.27 691.214 L1834.83 691.214 L1835.39 691.214 L1835.95 691.214 L1836.51 691.214 L1837.07 691.214 L1837.63 691.214 L1838.19 691.214 L1838.19 683.661 L1837.63 683.661 L1837.07 683.661 L1836.51 683.661 L1835.95 683.661 L1835.39 683.661 L1834.83 683.661 L1834.27 683.661 L1833.72 683.661 L1833.16 683.661 L1832.6 683.661 L1832.04 683.661 L1831.48 683.661 L1830.92 683.661 L1830.36 683.661 L1829.8 683.661 L1829.24 683.661 L1828.68 683.661 L1828.12 683.661 L1827.56 683.661 L1827 683.661 L1826.45 683.661 L1825.89 683.661 L1825.33 683.661 L1824.77 683.661 L1824.21 683.661 L1823.65 683.661 L1823.09 683.661 L1822.53 683.661 L1821.97 683.661 L1821.41 683.661 L1820.85 683.661 L1820.29 683.661 L1819.73 683.661 L1819.18 683.661 L1818.62 683.661 L1818.06 683.661 L1817.5 683.661 L1816.94 683.661 L1816.38 683.661 L1815.82 683.661 L1815.26 683.661 L1814.7 683.661 L1814.14 683.661 L1813.58 683.661 L1813.02 683.661 L1812.46 683.661 L1811.9 683.661 L1811.35 683.661 L1810.79 683.661 L1810.23 683.661 L1809.67 683.661 L1809.11 683.661 L1808.55 683.661 L1807.99 683.661 L1807.43 683.661 L1806.87 683.661 L1806.31 683.661 L1805.75 683.661 L1805.19 683.661 L1804.63 683.661 L1804.08 683.661 L1803.52 683.661 L1802.96 683.661 L1802.4 683.661 L1801.84 683.661 L1801.28 683.661 L1800.72 683.661 L1800.16 683.661 L1799.6 683.661 L1799.04 683.661 L1798.48 683.661 L1797.92 683.661 L1797.36 683.661 L1796.8 683.661 L1796.25 683.661 L1795.69 683.661 L1795.13 683.661 L1794.57 683.661 L1794.01 683.661 L1793.45 683.661 L1792.89 683.661 L1792.33 683.661 L1791.77 683.661 L1791.21 683.661 L1790.65 683.661 L1790.09 683.661 L1789.53 683.661 L1788.98 683.661 L1788.42 683.661 L1787.86 683.661 L1787.3 683.661 L1786.74 683.661 L1786.18 683.661 L1785.62 683.661 L1785.06 683.661 L1784.5 683.661 L1783.94 683.661 L1783.38 683.661 L1782.82 683.661 L1782.26 683.661 L1781.71 683.661 L1781.15 683.661 L1780.59 683.661 L1780.03 683.661 L1779.47 683.661 L1778.91 683.661 L1778.35 683.661 L1777.79 683.661 L1777.23 683.661 L1776.67 683.661 L1776.11 683.661 L1775.55 683.661 L1774.99 683.661 L1774.43 683.661 L1773.88 683.661 L1773.32 683.661 L1772.76 683.661 L1772.2 683.661 L1771.64 683.661 L1771.08 683.661 L1770.52 683.661 L1769.96 683.661 L1769.4 683.661 L1768.84 683.661 L1768.28 683.661 L1767.72 683.661 L1767.16 683.661 L1766.61 683.661 L1766.05 683.661 L1765.49 683.661 L1764.93 683.661 L1764.37 683.661 L1763.81 683.661 L1763.25 683.661 L1762.69 683.661 L1762.13 683.661 L1761.57 683.661 L1761.01 683.661 L1760.45 683.661 L1759.89 683.661 L1759.34 683.661 L1758.78 683.661 L1758.22 683.661 L1757.66 683.661 L1757.1 683.661 L1756.54 683.661 L1755.98 683.661 L1755.42 683.661 L1754.86 683.661 L1754.3 683.661 L1753.74 683.661 L1753.18 683.661 L1752.62 683.661 L1752.06 683.661 L1751.51 683.661 L1750.95 683.661 L1750.39 683.661 L1749.83 683.661 L1749.27 683.661 L1748.71 683.661 L1748.15 683.661 L1747.59 683.661 L1747.03 683.661 L1746.47 683.661 L1745.91 683.661 L1745.35 683.661 L1744.79 683.661 L1744.24 683.661 L1743.68 683.661 L1743.12 683.661 L1742.56 683.661 L1742 683.661 L1741.44 683.661 L1740.88 683.661 L1740.32 683.661 L1739.76 683.661 L1739.2 683.661 L1738.64 683.661 L1738.08 683.661 L1737.52 683.661 L1736.97 683.661 L1736.41 683.661 L1735.85 683.661 L1735.29 683.661 L1734.73 683.661 L1734.17 683.661 L1733.61 683.661 L1733.05 683.661 L1732.49 683.661 L1731.93 683.661 L1731.37 683.661 L1730.81 683.661 L1730.25 683.661 L1729.69 683.661 L1729.14 683.661 L1728.58 683.661 L1728.02 683.661 L1727.46 683.661 L1726.9 683.661 L1726.34 683.661 L1725.78 683.661 L1725.22 683.661 L1724.66 683.661 L1724.1 683.661 L1723.54 683.661 L1722.98 683.661 L1722.42 683.661 L1721.87 683.661 L1721.31 683.661 L1720.75 683.661 L1720.19 683.661 L1719.63 683.661 L1719.07 683.661 L1718.51 683.661 L1717.95 683.661 L1717.39 683.661 L1716.83 683.661 L1716.27 683.661 L1715.71 683.661 L1715.15 683.661 L1714.6 683.661 L1714.04 683.661 L1713.48 683.661 L1712.92 683.661 L1712.36 683.661 L1711.8 683.661 L1711.24 683.661 L1710.68 683.661 L1710.12 683.661 L1709.56 683.661 L1709 683.661 L1708.44 683.661 L1707.88 683.661 L1707.32 683.661 L1706.77 683.661 L1706.21 683.661 L1705.65 683.661 L1705.09 683.661 L1704.53 683.661 L1703.97 683.661 L1703.41 683.661 L1702.85 683.661 L1702.29 683.661 L1701.73 683.661 L1701.17 683.661 L1700.61 683.661 L1700.05 683.661 L1699.5 683.661 L1698.94 683.661 L1698.38 683.661 L1697.82 683.661 L1697.26 683.661 L1696.7 683.661 L1696.14 683.661 L1695.58 683.661 L1695.02 683.661 L1694.46 683.661 L1693.9 683.661 L1693.34 683.661 L1692.78 683.661 L1692.23 683.661 L1691.67 683.661 L1691.11 683.661 L1690.55 683.661 L1689.99 683.661 L1689.43 683.661 L1688.87 683.661 L1688.31 683.661 L1687.75 683.661 L1687.19 683.661 L1686.63 683.661 L1686.07 683.661 L1685.51 683.661 L1684.95 683.661 L1684.4 683.661 L1683.84 683.661 L1683.28 683.661 L1682.72 683.661 L1682.16 683.661 L1681.6 683.661 L1681.04 683.661 L1680.48 683.661 L1679.92 683.661 L1679.36 683.661 L1678.8 683.661 L1678.24 683.661 L1677.68 683.661 L1677.13 683.661 L1676.57 683.661 L1676.01 683.661 L1675.45 683.661 L1674.89 683.661 L1674.33 683.661 L1673.77 683.661 L1673.21 683.661 L1672.65 683.661 L1672.09 683.661 L1671.53 683.661 L1670.97 683.661 L1670.41 683.661 L1669.85 683.661 L1669.3 683.661 L1668.74 683.661 L1668.18 683.661 L1667.62 683.661 L1667.06 683.661 L1666.5 683.661 L1665.94 683.661 L1665.38 683.661 L1664.82 683.661 L1664.26 683.661 L1663.7 683.661 L1663.14 683.661 L1662.58 683.661 L1662.03 683.661 L1661.47 683.661 L1660.91 683.661 L1660.35 683.661 L1659.79 683.661 L1659.23 683.661 L1658.67 683.661 L1658.11 683.661 L1657.55 683.661 L1656.99 683.661 L1656.43 683.661 L1655.87 683.661 L1655.31 683.661 L1654.76 683.661 L1654.2 683.661 L1653.64 683.661 L1653.08 683.661 L1652.52 683.661 L1651.96 683.661 L1651.4 683.661 L1650.84 683.661 L1650.28 683.661 L1649.72 683.661 L1649.16 683.661 L1648.6 683.661 L1648.04 683.661 L1647.48 683.661 L1646.93 683.661 L1646.37 683.661 L1645.81 683.661 L1645.25 683.661 L1644.69 683.661 L1644.13 683.661 L1643.57 683.661 L1643.01 683.661 L1642.45 683.661 L1641.89 683.661 L1641.33 683.661 L1640.77 683.661 L1640.21 683.661 L1639.66 683.661 L1639.1 683.661 L1638.54 683.661 L1637.98 683.661 L1637.42 683.661 L1636.86 683.661 L1636.3 683.661 L1635.74 683.661 L1635.18 683.661 L1634.62 683.661 L1634.06 683.661 L1633.5 683.661 L1632.94 683.661 L1632.39 683.661 L1631.83 683.661 L1631.27 683.661 L1630.71 683.661 L1630.15 683.661 L1629.59 683.661 L1629.03 683.661 L1628.47 683.661 L1627.91 683.661 L1627.35 683.661 L1626.79 683.661 L1626.23 683.661 L1625.67 683.661 L1625.11 683.661 L1624.56 683.661 L1624 683.661 L1623.44 683.661 L1622.88 683.661 L1622.32 683.661 L1621.76 683.661 L1621.2 683.661 L1620.64 683.661 L1620.08 683.661 L1619.52 683.661 L1618.96 683.661 L1618.4 683.661 L1617.84 683.661 L1617.29 683.661 L1616.73 683.661 L1616.17 683.661 L1615.61 683.661 L1615.05 683.661 L1614.49 683.661 L1613.93 683.661 L1613.37 683.661 L1612.81 683.661 L1612.25 683.661 L1611.69 683.661 L1611.13 683.661 L1610.57 683.661 L1610.02 683.661 L1609.46 683.661 L1608.9 683.661 L1608.34 683.661 L1607.78 683.661 L1607.22 683.661 L1606.66 683.661 L1606.1 683.661 L1605.54 683.661 L1604.98 683.661 L1604.42 683.661 L1603.86 683.661 L1603.3 683.661 L1602.74 683.661 L1602.19 683.661 L1601.63 683.661 L1601.07 683.661 L1600.51 683.661 L1599.95 683.661 L1599.39 683.661 L1598.83 683.661 L1598.27 683.661 L1597.71 683.661 L1597.15 683.661 L1596.59 683.661 L1596.03 683.661 L1595.47 683.661 L1594.92 683.661 L1594.36 683.661 L1593.8 683.661 L1593.24 683.661 L1592.68 683.661 L1592.12 683.661 L1591.56 683.661 L1591 683.661 L1590.44 683.661 L1589.88 683.661 L1589.32 683.661 L1588.76 683.661 L1588.2 683.661 L1587.65 683.661 L1587.09 683.661 L1586.53 683.661 L1585.97 683.661 L1585.41 683.661 L1584.85 683.661 L1584.29 683.661 L1583.73 683.661 L1583.17 683.661 L1582.61 683.661 L1582.05 683.661 L1581.49 683.661 L1580.93 683.661 L1580.37 683.661 L1579.82 683.661 L1579.26 683.661 L1578.7 683.661 L1578.14 683.661 L1577.58 683.661 L1577.02 683.661 L1576.46 683.661 L1575.9 683.661 L1575.34 683.661 L1574.78 683.661 L1574.22 683.661 L1573.66 683.661 L1573.1 683.661 L1572.55 683.661 L1571.99 683.661 L1571.43 683.661 L1570.87 683.661 L1570.31 683.661 L1569.75 683.661 L1569.19 683.661 L1568.63 683.661 L1568.07 683.661 L1567.51 683.661 L1566.95 683.661 L1566.39 683.661 L1565.83 683.661 L1565.28 683.661 L1564.72 683.661 L1564.16 683.661 L1563.6 683.661 L1563.04 683.661 L1562.48 683.661 L1561.92 683.661 L1561.36 683.661 L1560.8 683.661 L1560.24 683.661 L1559.68 683.661 L1559.12 683.661 L1558.56 683.661 L1558 683.661 L1557.45 683.661 L1556.89 683.661 L1556.33 683.661 L1555.77 683.661 L1555.21 683.661 L1554.65 683.661 L1554.09 683.661 L1553.53 683.661 L1552.97 683.661 L1552.41 683.661 L1551.85 683.661 L1551.29 683.661 L1550.73 683.661 L1550.18 683.661 L1549.62 683.661 L1549.06 683.661 L1548.5 683.661 L1547.94 683.661 L1547.38 683.661 L1546.82 683.661 L1546.26 683.661 L1545.7 683.661 L1545.14 683.661 L1544.58 683.661 L1544.02 683.661 L1543.46 683.661 L1542.9 683.661 L1542.35 683.661 L1541.79 683.661 L1541.23 683.661 L1540.67 683.661 L1540.11 683.661 L1539.55 683.661 L1538.99 683.661 L1538.43 683.661 L1537.87 683.661 L1537.31 683.661 L1536.75 683.661 L1536.19 683.661 L1535.63 683.661 L1535.08 683.661 L1534.52 683.661 L1533.96 683.661 L1533.4 683.661 L1532.84 683.661 L1532.28 683.661 L1531.72 683.661 L1531.16 683.661 L1530.6 683.661 L1530.04 683.661 L1529.48 683.661 L1528.92 683.661 L1528.36 683.661 L1527.81 683.661 L1527.25 683.661 L1526.69 683.661 L1526.13 683.661 L1525.57 683.661 L1525.01 683.661 L1524.45 683.661 L1523.89 683.661 L1523.33 683.661 L1522.77 683.661 L1522.21 683.661 L1521.65 683.661 L1521.09 683.661 L1520.53 683.661 L1519.98 683.661 L1519.42 683.661 L1518.86 683.661 L1518.3 683.661 L1517.74 683.661 L1517.18 683.661 L1516.62 683.661 L1516.06 683.661 L1515.5 683.661 L1514.94 683.661 L1514.38 683.661 L1513.82 683.661 L1513.26 683.661 L1512.71 683.661 L1512.15 683.661 L1511.59 683.661 L1511.03 683.661 L1510.47 683.661 L1509.91 683.661 L1509.35 683.661 L1508.79 683.661 L1508.23 683.661 L1507.67 683.661 L1507.11 683.661 L1506.55 683.661 L1505.99 683.661 L1505.44 683.661 L1504.88 683.661 L1504.32 683.661 L1503.76 683.661 L1503.2 683.661 L1502.64 683.661 L1502.08 683.661 L1501.52 683.661 L1500.96 683.661 L1500.4 683.661 L1499.84 683.661 L1499.28 683.661 L1498.72 683.661 L1498.16 683.661 L1497.61 683.661 L1497.05 683.661 L1496.49 683.661 L1495.93 683.661 L1495.37 683.661 L1494.81 683.661 L1494.25 683.661 L1493.69 683.661 L1493.13 683.661 L1492.57 683.661 L1492.01 683.661 L1491.45 683.661 L1490.89 683.661 L1490.34 683.661 L1489.78 683.661 L1489.22 683.661 L1488.66 683.661 L1488.1 683.661 L1487.54 683.661 L1486.98 683.661 L1486.42 683.661 L1485.86 683.661 L1485.3 683.661 L1484.74 683.661 L1484.18 683.661 L1483.62 683.661 L1483.07 683.661 L1482.51 683.661 L1481.95 683.661 L1481.39 683.661 L1480.83 683.661 L1480.27 683.661 L1479.71 683.661 L1479.15 683.661 L1478.59 683.661 L1478.03 683.661 L1477.47 683.661 L1476.91 683.661 L1476.35 683.661 L1475.79 683.661 L1475.24 683.661 L1474.68 683.661 L1474.12 683.661 L1473.56 683.661 L1473 683.661 L1472.44 683.661 L1471.88 683.661 L1471.32 683.661 L1470.76 683.661 L1470.2 683.661 L1469.64 683.661 L1469.08 683.661 L1468.52 683.661 L1467.97 683.661 L1467.41 683.661 L1466.85 683.661 L1466.29 683.661 L1465.73 683.661 L1465.17 683.661 L1464.61 683.661 L1464.05 683.661 L1463.49 683.661 L1462.93 683.661 L1462.37 683.661 L1461.81 683.661 L1461.25 683.661 L1460.7 683.661 L1460.14 683.661 L1459.58 683.661 L1459.02 683.661 L1458.46 683.661 L1457.9 683.661 L1457.34 683.661 L1456.78 683.661 L1456.22 683.661 L1455.66 683.661 L1455.1 683.661 L1454.54 683.661 L1453.98 683.661 L1453.42 683.661 L1452.87 683.661 L1452.31 683.661 L1451.75 683.661 L1451.19 683.661 L1450.63 683.661 L1450.07 683.661 L1449.51 683.661 L1448.95 683.661 L1448.39 683.661 L1447.83 683.661 L1447.27 683.661 L1446.71 683.661 L1446.15 683.661 L1445.6 683.661 L1445.04 683.661 L1444.48 683.661 L1443.92 683.661 L1443.36 683.661 L1442.8 683.661 L1442.24 683.661 L1441.68 683.661 L1441.12 683.661 L1440.56 683.661 L1440 683.661 L1439.44 683.661 L1438.88 683.661 L1438.33 683.661 L1437.77 683.661 L1437.21 683.661 L1436.65 683.661 L1436.09 683.661 L1435.53 683.661 L1434.97 683.661 L1434.41 683.661 L1433.85 683.661 L1433.29 683.661 L1432.73 683.661 L1432.17 683.661 L1431.61 683.661 L1431.05 683.661 L1430.5 683.661 L1429.94 683.661 L1429.38 683.661 L1428.82 683.661 L1428.26 683.661 L1427.7 683.661 L1427.14 683.661 L1426.58 683.661 L1426.02 683.661 L1425.46 683.661 L1424.9 683.661 L1424.34 683.661 L1423.78 683.661 L1423.23 683.661 L1422.67 683.661 L1422.11 683.661 L1421.55 683.661 L1420.99 683.661 L1420.43 683.661 L1419.87 683.661 L1419.31 683.661 L1418.75 683.661 L1418.19 683.661 L1417.63 683.661 L1417.07 683.661 L1416.51 683.661 L1415.95 683.661 L1415.4 683.661 L1414.84 683.661 L1414.28 683.661 L1413.72 683.661 L1413.16 683.661 L1412.6 683.661 L1412.04 683.661 L1411.48 683.661 L1410.92 683.661 L1410.36 683.661 L1409.8 683.661 L1409.24 683.661 L1408.68 683.661 L1408.13 683.661 L1407.57 683.661 L1407.01 683.661 L1406.45 683.661 L1405.89 683.661 L1405.33 683.661 L1404.77 683.661 L1404.21 683.661 L1403.65 683.661 L1403.09 683.661 L1402.53 683.661 L1401.97 683.661 L1401.41 683.661 L1400.86 683.661 L1400.3 683.661 L1399.74 683.661 L1399.18 683.661 L1398.62 683.661 L1398.06 683.661 L1397.5 683.661 L1396.94 683.661 L1396.38 683.661 L1395.82 683.661 L1395.26 683.661 L1394.7 683.661 L1394.14 683.661 L1393.58 683.661 L1393.03 683.661 L1392.47 683.661 L1391.91 683.661 L1391.35 683.661 L1390.79 683.661 L1390.23 683.661 L1389.67 683.661 L1389.11 683.661 L1388.55 683.661 L1387.99 683.661 L1387.43 683.661 L1386.87 683.661 L1386.31 683.661 L1385.76 683.661 L1385.2 683.661 L1384.64 683.661 L1384.08 683.661 L1383.52 683.661 L1382.96 683.661 L1382.4 683.661 L1381.84 683.661 L1381.28 683.661 L1380.72 683.661 L1380.16 683.661 L1379.6 683.661 L1379.04 683.661 L1378.49 683.661 L1377.93 683.661 L1377.37 683.661 L1376.81 683.661 L1376.25 683.661 L1375.69 683.661 L1375.13 683.661 L1374.57 683.661 L1374.01 683.661 L1373.45 683.661 L1372.89 683.661 L1372.33 683.661 L1371.77 683.661 L1371.21 683.661 L1370.66 683.661 L1370.1 683.661 L1369.54 683.661 L1368.98 683.661 L1368.42 683.661 L1367.86 683.661 L1367.3 683.661 L1366.74 683.661 L1366.18 683.661 L1365.62 683.661 L1365.06 683.661 L1364.5 683.661 L1363.94 683.661 L1363.39 683.661 L1362.83 683.661 L1362.27 683.661 L1361.71 683.661 L1361.15 683.661 L1360.59 683.661 L1360.03 683.661 L1359.47 683.661 L1358.91 683.661 L1358.35 683.661 L1357.79 683.661 L1357.23 683.661 L1356.67 683.661 L1356.12 683.661 L1355.56 683.661 L1355 683.661 L1354.44 683.661 L1353.88 683.661 L1353.32 683.661 L1352.76 683.661 L1352.2 683.661 L1351.64 683.661 L1351.08 683.661 L1350.52 683.661 L1349.96 683.661 L1349.4 683.661 L1348.84 683.661 L1348.29 683.661 L1347.73 683.661 L1347.17 683.661 L1346.61 683.661 L1346.05 683.661 L1345.49 683.661 L1344.93 683.661 L1344.37 683.661 L1343.81 683.661 L1343.25 683.661 L1342.69 683.661 L1342.13 683.661 L1341.57 683.661 L1341.02 683.661 L1340.46 683.661 L1339.9 683.661 L1339.34 683.661 L1338.78 683.661 L1338.22 683.661 L1337.66 683.661 L1337.1 683.661 L1336.54 683.661 L1335.98 683.661 L1335.42 683.661 L1334.86 683.661 L1334.3 683.661 L1333.75 683.661 L1333.19 683.661 L1332.63 683.661 L1332.07 683.661 L1331.51 683.661 L1330.95 683.661 L1330.39 683.661 L1329.83 683.661 L1329.27 683.661 L1328.71 683.661 L1328.15 683.661 L1327.59 683.661 L1327.03 683.661 L1326.47 683.661 L1325.92 683.661 L1325.36 683.661 L1324.8 683.661 L1324.24 683.661 L1323.68 683.661 L1323.12 683.661 L1322.56 683.661 L1322 683.661 L1321.44 683.661 L1320.88 683.661 L1320.32 683.661 L1319.76 683.661 L1319.2 683.661 L1318.65 683.661 L1318.09 683.661 L1317.53 683.661 L1316.97 683.661 L1316.41 683.661 L1315.85 683.661 L1315.29 683.661 L1314.73 683.661 L1314.17 683.661 L1313.61 683.661 L1313.05 683.661 L1312.49 683.661 L1311.93 683.661 L1311.38 683.661 L1310.82 683.661 L1310.26 683.661 L1309.7 683.661 L1309.14 683.661 L1308.58 683.661 L1308.02 683.661 L1307.46 683.661 L1306.9 683.661 L1306.34 683.661 L1305.78 683.661 L1305.22 683.661 L1304.66 683.661 L1304.1 683.661 L1303.55 683.661 L1302.99 683.661 L1302.43 683.661 L1301.87 683.661 L1301.31 683.661 L1300.75 683.661 L1300.19 683.661 L1299.63 683.661 L1299.07 683.661 L1298.51 683.661 L1297.95 683.661 L1297.39 683.661 L1296.83 683.661 L1296.28 683.661 L1295.72 683.661 L1295.16 683.661 L1294.6 683.661 L1294.04 683.661 L1293.48 683.661 L1292.92 683.661 L1292.36 683.661 L1291.8 683.661 L1291.24 683.661 L1290.68 683.661 L1290.12 683.661 L1289.56 683.661 L1289 683.661 L1288.45 683.661 L1287.89 683.661 L1287.33 683.661 L1286.77 683.661 L1286.21 683.661 L1285.65 683.661 L1285.09 683.661 L1284.53 683.661 L1283.97 683.661 L1283.41 683.661 L1282.85 683.661 L1282.29 683.661 L1281.73 683.661 L1281.18 683.661 L1280.62 683.661 L1280.06 683.661 L1279.5 683.661 L1278.94 683.661 L1278.38 683.661 L1277.82 683.661 L1277.26 683.661 L1276.7 683.661 L1276.14 683.661 L1275.58 683.661 L1275.02 683.661 L1274.46 683.661 L1273.91 683.661 L1273.35 683.661 L1272.79 683.661 L1272.23 683.661 L1271.67 683.661 L1271.11 683.661 L1270.55 683.661 L1269.99 683.661 L1269.43 683.661 L1268.87 683.661 L1268.31 683.661 L1267.75 683.661 L1267.19 683.661 L1266.63 683.661 L1266.08 683.661 L1265.52 683.661 L1264.96 683.661 L1264.4 683.661 L1263.84 683.661 L1263.28 683.661 L1262.72 683.661 L1262.16 683.661 L1261.6 683.661 L1261.04 683.661 L1260.48 683.661 L1259.92 683.661 L1259.36 683.661 L1258.81 683.661 L1258.25 683.661 L1257.69 683.661 L1257.13 683.661 L1256.57 683.661 L1256.01 683.661 L1255.45 683.661 L1254.89 683.661 L1254.33 683.661 L1253.77 683.661 L1253.21 683.661 L1252.65 683.661 L1252.09 683.661 L1251.54 683.661 L1250.98 683.661 L1250.42 683.661 L1249.86 683.661 L1249.3 683.661 L1248.74 683.661 L1248.18 683.661 L1247.62 683.661 L1247.06 683.661 L1246.5 683.661 L1245.94 683.661 L1245.38 683.661 L1244.82 683.661 L1244.26 683.661 L1243.71 683.661 L1243.15 683.661 L1242.59 683.661 L1242.03 683.661 L1241.47 683.661 L1240.91 683.661 L1240.35 683.661 L1239.79 683.661 L1239.23 683.661 L1238.67 683.661 L1238.11 683.661 L1237.55 683.661 L1236.99 683.661 L1236.44 683.661 L1235.88 683.661 L1235.32 683.661 L1234.76 683.661 L1234.2 683.661 L1233.64 683.661 L1233.08 683.661 L1232.52 683.661 L1231.96 683.661 L1231.4 683.661 L1230.84 683.661 L1230.28 683.661 L1229.72 683.661 L1229.17 683.661 L1228.61 683.661 L1228.05 683.661 L1227.49 683.661 L1226.93 683.661 L1226.37 683.661 L1225.81 683.661 L1225.25 683.661 L1224.69 683.661 L1224.13 683.661 L1223.57 683.661 L1223.01 683.661 L1222.45 683.661 L1221.89 683.661 L1221.34 683.661 L1220.78 683.661 L1220.22 683.661 L1219.66 683.661 L1219.1 683.661 L1218.54 683.661 L1217.98 683.661 L1217.42 683.661 L1216.86 683.661 L1216.3 683.661 L1215.74 683.661 L1215.18 683.661 L1214.62 683.661 L1214.07 683.661 L1213.51 683.661 L1212.95 683.661 L1212.39 683.661 L1211.83 683.661 L1211.27 683.661 L1210.71 683.661 L1210.15 683.661 L1209.59 683.661 L1209.03 683.661 L1208.47 683.661 L1207.91 683.661 L1207.35 683.661 L1206.8 683.661 L1206.24 683.661 L1205.68 683.661 L1205.12 683.661 L1204.56 683.661 L1204 683.661 L1203.44 683.661 L1202.88 683.661 L1202.32 683.661 L1201.76 683.661 L1201.2 683.661 L1200.64 683.661 L1200.08 683.661 L1199.52 683.661 L1198.97 683.661 L1198.41 683.661 L1197.85 683.661 L1197.29 683.661 L1196.73 683.661 L1196.17 683.661 L1195.61 683.661 L1195.05 683.661 L1194.49 683.661 L1193.93 683.661 L1193.37 683.661 L1192.81 683.661 L1192.25 683.661 L1191.7 683.661 L1191.14 683.661 L1190.58 683.661 L1190.02 683.661 L1189.46 683.661 L1188.9 683.661 L1188.34 683.661 L1187.78 683.661 L1187.22 683.661 L1186.66 683.661 L1186.1 683.661 L1185.54 683.661 L1184.98 683.661 L1184.43 683.661 L1183.87 683.661 L1183.31 683.661 L1182.75 683.661 L1182.19 683.661 L1181.63 683.661 L1181.07 683.661 L1180.51 683.661 L1179.95 683.661 L1179.39 683.661 L1178.83 683.661 L1178.27 683.661 L1177.71 683.661 L1177.15 683.661 L1176.6 683.661 L1176.04 683.661 L1175.48 683.661 L1174.92 683.661 L1174.36 683.661 L1173.8 683.661 L1173.24 683.661 L1172.68 683.661 L1172.12 683.661 L1171.56 683.661 L1171 683.661 L1170.44 683.661 L1169.88 683.661 L1169.33 683.661 L1168.77 683.661 L1168.21 683.661 L1167.65 683.661 L1167.09 683.661 L1166.53 683.661 L1165.97 683.661 L1165.41 683.661 L1164.85 683.661 L1164.29 683.661 L1163.73 683.661 L1163.17 683.661 L1162.61 683.661 L1162.05 683.661 L1161.5 683.661 L1160.94 683.661 L1160.38 683.661 L1159.82 683.661 L1159.26 683.661 L1158.7 683.661 L1158.14 683.661 L1157.58 683.661 L1157.02 683.661 L1156.46 683.661 L1155.9 683.661 L1155.34 683.661 L1154.78 683.661 L1154.23 683.661 L1153.67 683.661 L1153.11 683.661 L1152.55 683.661 L1151.99 683.661 L1151.43 683.661 L1150.87 683.661 L1150.31 683.661 L1149.75 683.661 L1149.19 683.661 L1148.63 683.661 L1148.07 683.661 L1147.51 683.661 L1146.96 683.661 L1146.4 683.661 L1145.84 683.661 L1145.28 683.661 L1144.72 683.661 L1144.16 683.661 L1143.6 683.661 L1143.04 683.661 L1142.48 683.661 L1141.92 683.661 L1141.36 683.661 L1140.8 683.661 L1140.24 683.661 L1139.68 683.661 L1139.13 683.661 L1138.57 683.661 L1138.01 683.661 L1137.45 683.661 L1136.89 683.661 L1136.33 683.661 L1135.77 683.661 L1135.21 683.661 L1134.65 683.661 L1134.09 683.661 L1133.53 683.661 L1132.97 683.661 L1132.41 683.661 L1131.86 683.661 L1131.3 683.661 L1130.74 683.661 L1130.18 683.661 L1129.62 683.661 L1129.06 683.661 L1128.5 683.661 L1127.94 683.661 L1127.38 683.661 L1126.82 683.661 L1126.26 683.661 L1125.7 683.661 L1125.14 683.661 L1124.59 683.661 L1124.03 683.661 L1123.47 683.661 L1122.91 683.661 L1122.35 683.661 L1121.79 683.661 L1121.23 683.661 L1120.67 683.661 L1120.11 683.661 L1119.55 683.661 L1118.99 683.661 L1118.43 683.661 L1117.87 683.661 L1117.31 683.661 L1116.76 683.661 L1116.2 683.661 L1115.64 683.661 L1115.08 683.661 L1114.52 683.661 L1113.96 683.661 L1113.4 683.661 L1112.84 683.661 L1112.28 683.661 L1111.72 683.661 L1111.16 683.661 L1110.6 683.661 L1110.04 683.661 L1109.49 683.661 L1108.93 683.661 L1108.37 683.661 L1107.81 683.661 L1107.25 683.661 L1106.69 683.661 L1106.13 683.661 L1105.57 683.661 L1105.01 683.661 L1104.45 683.661 L1103.89 683.661 L1103.33 683.661 L1102.77 683.661 L1102.22 683.661 L1101.66 683.661 L1101.1 683.661 L1100.54 683.661 L1099.98 683.661 L1099.42 683.661 L1098.86 683.661 L1098.3 683.661 L1097.74 683.661 L1097.18 683.661 L1096.62 683.661 L1096.06 683.661 L1095.5 683.661 L1094.94 683.661 L1094.39 683.661 L1093.83 683.661 L1093.27 683.661 L1092.71 683.661 L1092.15 683.661 L1091.59 683.661 L1091.03 683.661 L1090.47 683.661 L1089.91 683.661 L1089.35 683.661 L1088.79 683.661 L1088.23 683.661 L1087.67 683.661 L1087.12 683.661 L1086.56 683.661 L1086 683.661 L1085.44 683.661 L1084.88 683.661 L1084.32 683.661 L1083.76 683.661 L1083.2 683.661 L1082.64 683.661 L1082.08 683.661 L1081.52 683.661 L1080.96 683.661 L1080.4 683.661 L1079.85 683.661 L1079.29 683.661 L1078.73 683.661 L1078.17 683.661 L1077.61 683.661 L1077.05 683.661 L1076.49 683.661 L1075.93 683.661 L1075.37 683.661 L1074.81 683.661 L1074.25 683.661 L1073.69 683.661 L1073.13 683.661 L1072.57 683.661 L1072.02 683.661 L1071.46 683.661 L1070.9 683.661 L1070.34 683.661 L1069.78 683.661 L1069.22 683.661 L1068.66 683.661 L1068.1 683.661 L1067.54 683.661 L1066.98 683.661 L1066.42 683.661 L1065.86 683.661 L1065.3 683.661 L1064.75 683.661 L1064.19 683.661 L1063.63 683.661 L1063.07 683.661 L1062.51 683.661 L1061.95 683.661 L1061.39 683.661 L1060.83 683.661 L1060.27 683.661 L1059.71 683.661 L1059.15 683.661 L1058.59 683.661 L1058.03 683.661 L1057.48 683.661 L1056.92 683.661 L1056.36 683.661 L1055.8 683.661 L1055.24 683.661 L1054.68 683.661 L1054.12 683.661 L1053.56 683.661 L1053 683.661 L1052.44 683.661 L1051.88 683.661 L1051.32 683.661 L1050.76 683.661 L1050.2 683.661 L1049.65 683.661 L1049.09 683.661 L1048.53 683.661 L1047.97 683.661 L1047.41 683.661 L1046.85 683.661 L1046.29 683.661 L1045.73 683.661 L1045.17 683.661 L1044.61 683.661 L1044.05 683.661 L1043.49 683.661 L1042.93 683.661 L1042.38 683.661 L1041.82 683.661 L1041.26 683.661 L1040.7 683.661 L1040.14 683.661 L1039.58 683.661 L1039.02 683.661 L1038.46 683.661 L1037.9 683.661 L1037.34 683.661 L1036.78 683.661 L1036.22 683.661 L1035.66 683.661 L1035.1 683.661 L1034.55 683.661 L1033.99 683.661 L1033.43 683.661 L1032.87 683.661 L1032.31 683.661 L1031.75 683.661 L1031.19 683.661 L1030.63 683.661 L1030.07 683.661 L1029.51 683.661 L1028.95 683.661 L1028.39 683.661 L1027.83 683.661 L1027.28 683.661 L1026.72 683.661 L1026.16 683.661 L1025.6 683.661 L1025.04 683.661 L1024.48 683.661 L1023.92 683.661 L1023.36 683.661 L1022.8 683.661 L1022.24 683.661 L1021.68 683.661 L1021.12 683.661 L1020.56 683.661 L1020.01 683.661 L1019.45 683.661 L1018.89 683.661 L1018.33 683.661 L1017.77 683.661 L1017.21 683.661 L1016.65 683.661 L1016.09 683.661 L1015.53 683.661 L1014.97 683.661 L1014.41 683.661 L1013.85 683.661 L1013.29 683.661 L1012.73 683.661 L1012.18 683.661 L1011.62 683.661 L1011.06 683.661 L1010.5 683.661 L1009.94 683.661 L1009.38 683.661 L1008.82 683.661 L1008.26 683.661 L1007.7 683.661 L1007.14 683.661 L1006.58 683.661 L1006.02 683.661 L1005.46 683.661 L1004.91 683.661 L1004.35 683.661 L1003.79 683.661 L1003.23 683.661 L1002.67 683.661 L1002.11 683.661 L1001.55 683.661 L1000.99 683.661 L1000.43 683.661 L999.872 683.661 L999.313 683.661 L998.754 683.661 L998.194 683.661 L997.635 683.661 L997.076 683.661 L996.517 683.661 L995.957 683.661 L995.398 683.661 L994.839 683.661 L994.28 683.661 L993.72 683.661 L993.161 683.661 L992.602 683.661 L992.043 683.661 L991.483 683.661 L990.924 683.661 L990.365 683.661 L989.806 683.661 L989.246 683.661 L988.687 683.661 L988.128 683.661 L987.569 683.661 L987.009 683.661 L986.45 683.661 L985.891 683.661 L985.332 683.661 L984.772 683.661 L984.213 683.661 L983.654 683.661 L983.095 683.661 L982.535 683.661 L981.976 683.661 L981.417 683.661 L980.858 683.661 L980.298 683.661 L979.739 683.661 L979.18 683.661 L978.621 683.661 L978.061 683.661 L977.502 683.661 L976.943 683.661 L976.384 683.661 L975.824 683.661 L975.265 683.661 L974.706 683.661 L974.147 683.661 L973.587 683.661 L973.028 683.661 L972.469 683.661 L971.91 683.661 L971.35 683.661 L970.791 683.661 L970.232 683.661 L969.673 683.661 L969.113 683.661 L968.554 683.661 L967.995 683.661 L967.436 683.661 L966.876 683.661 L966.317 683.661 L965.758 683.661 L965.199 683.661 L964.639 683.661 L964.08 683.661 L963.521 683.661 L962.962 683.661 L962.402 683.661 L961.843 683.661 L961.284 683.661 L960.725 683.661 L960.165 683.661 L959.606 683.661 L959.047 683.661 L958.488 683.661 L957.928 683.661 L957.369 683.661 L956.81 683.661 L956.251 683.661 L955.691 683.661 L955.132 683.661 L954.573 683.661 L954.014 683.661 L953.454 683.661 L952.895 683.661 L952.336 683.661 L951.777 683.661 L951.217 683.661 L950.658 683.661 L950.099 683.661 L949.54 683.661 L948.98 683.661 L948.421 683.661 L947.862 683.661 L947.303 683.661 L946.743 683.661 L946.184 683.661 L945.625 683.661 L945.066 683.661 L944.506 683.661 L943.947 683.661 L943.388 683.661 L942.829 683.661 L942.269 683.661 L941.71 683.661 L941.151 683.661 L940.592 683.661 L940.032 683.661 L939.473 683.661 L938.914 683.661 L938.355 683.661 L937.795 683.661 L937.236 683.661 L936.677 683.661 L936.118 683.661 L935.558 683.661 L934.999 683.661 L934.44 683.661 L933.881 683.661 L933.321 683.661 L932.762 683.661 L932.203 683.661 L931.644 683.661 L931.084 683.661 L930.525 683.661 L929.966 683.661 L929.406 683.661 L928.847 683.661 L928.288 683.661 L927.729 683.661 L927.169 683.661 L926.61 683.661 L926.051 683.661 L925.492 683.661 L924.932 683.661 L924.373 683.661 L923.814 683.661 L923.255 683.661 L922.695 683.661 L922.136 683.661 L921.577 683.661 L921.018 683.661 L920.458 683.661 L919.899 683.661 L919.34 683.661 L918.781 683.661 L918.221 683.661 L917.662 683.661 L917.103 683.661 L916.544 683.661 L915.984 683.661 L915.425 683.661 L914.866 683.661 L914.307 683.661 L913.747 683.661 L913.188 683.661 L912.629 683.661 L912.07 683.661 L911.51 683.661 L910.951 683.661 L910.392 683.661 L909.833 683.661 L909.273 683.661 L908.714 683.661 L908.155 683.661 L907.596 683.661 L907.036 683.661 L906.477 683.661 L905.918 683.661 L905.359 683.661 L904.799 683.661 L904.24 683.661 L903.681 683.661 L903.122 683.661 L902.562 683.661 L902.003 683.661 L901.444 683.661 L900.885 683.661 L900.325 683.661 L899.766 683.661 L899.207 683.661 L898.648 683.661 L898.088 683.661 L897.529 683.661 L896.97 683.661 L896.411 683.661 L895.851 683.661 L895.292 683.661 L894.733 683.661 L894.174 683.661 L893.614 683.661 L893.055 683.661 L892.496 683.661 L891.937 683.661 L891.377 683.661 L890.818 683.661 L890.259 683.661 L889.7 683.661 L889.14 683.661 L888.581 683.661 L888.022 683.661 L887.463 683.661 L886.903 683.661 L886.344 683.661 L885.785 683.661 L885.226 683.661 L884.666 683.661 L884.107 683.661 L883.548 683.661 L882.989 683.661 L882.429 683.661 L881.87 683.661 L881.311 683.661 L880.752 683.661 L880.192 683.661 L879.633 683.661 L879.074 683.661 L878.515 683.661 L877.955 683.661 L877.396 683.661 L876.837 683.661 L876.278 683.661 L875.718 683.661 L875.159 683.661 L874.6 683.661 L874.041 683.661 L873.481 683.661 L872.922 683.661 L872.363 683.661 L871.804 683.661 L871.244 683.661 L870.685 683.661 L870.126 683.661 L869.567 683.661 L869.007 683.661 L868.448 683.661 L867.889 683.661 L867.33 683.661 L866.77 683.661 L866.211 683.661 L865.652 683.661 L865.093 683.661 L864.533 683.661 L863.974 683.661 L863.415 683.661 L862.856 683.661 L862.296 683.661 L861.737 683.661 L861.178 683.661 L860.619 683.661 L860.059 683.661 L859.5 683.661 L858.941 683.661 L858.382 683.661 L857.822 683.661 L857.263 683.661 L856.704 683.661 L856.145 683.661 L855.585 683.661 L855.026 683.661 L854.467 683.661 L853.908 683.661 L853.348 683.661 L852.789 683.661 L852.23 683.661 L851.671 683.661 L851.111 683.661 L850.552 683.661 L849.993 683.661 L849.434 683.661 L848.874 683.661 L848.315 683.661 L847.756 683.661 L847.197 683.661 L846.637 683.661 L846.078 683.661 L845.519 683.661 L844.96 683.661 L844.4 683.661 L843.841 683.661 L843.282 683.661 L842.723 683.661 L842.163 683.661 L841.604 683.661 L841.045 683.661 L840.486 683.661 L839.926 683.661 L839.367 683.661 L838.808 683.661 L838.249 683.661 L837.689 683.661 L837.13 683.661 L836.571 683.661 L836.012 683.661 L835.452 683.661 L834.893 683.661 L834.334 683.661 L833.775 683.661 L833.215 683.661 L832.656 683.661 L832.097 683.661 L831.538 683.661 L830.978 683.661 L830.419 683.661 L829.86 683.661 L829.301 683.661 L828.741 683.661 L828.182 683.661 L827.623 683.661 L827.064 683.661 L826.504 683.661 L825.945 683.661 L825.386 683.661 L824.827 683.661 L824.267 683.661 L823.708 683.661 L823.149 683.661 L822.59 683.661 L822.03 683.661 L821.471 683.661 L820.912 683.661 L820.353 683.661 L819.793 683.661 L819.234 683.661 L818.675 683.661 L818.116 683.661 L817.556 683.661 L816.997 683.661 L816.438 683.661 L815.879 683.661 L815.319 683.661 L814.76 683.661 L814.201 683.661 L813.642 683.661 L813.082 683.661 L812.523 683.661 L811.964 683.661 L811.405 683.661 L810.845 683.661 L810.286 683.661 L809.727 683.661 L809.168 683.661 L808.608 683.661 L808.049 683.661 L807.49 683.661 L806.931 683.661 L806.371 683.661 L805.812 683.661 L805.253 683.661 L804.693 683.661 L804.134 683.661 L803.575 683.661 L803.016 683.661 L802.456 683.661 L801.897 683.661 L801.338 683.661 L800.779 683.661 L800.219 683.661 L799.66 683.661 L799.101 683.661 L798.542 683.661 L797.982 683.661 L797.423 683.661 L796.864 683.661 L796.305 683.661 L795.745 683.661 L795.186 683.661 L794.627 683.661 L794.068 683.661 L793.508 683.661 L792.949 683.661 L792.39 683.661 L791.831 683.661 L791.271 683.661 L790.712 683.661 L790.153 683.661 L789.594 683.661 L789.034 683.661 L788.475 683.661 L787.916 683.661 L787.357 683.661 L786.797 683.661 L786.238 683.661 L785.679 683.661 L785.12 683.661 L784.56 683.661 L784.001 683.661 L783.442 683.661 L782.883 683.661 L782.323 683.661 L781.764 683.661 L781.205 683.661 L780.646 683.661 L780.086 683.661 L779.527 683.661 L778.968 683.661 L778.409 683.661 L777.849 683.661 L777.29 683.661 L776.731 683.661 L776.172 683.661 L775.612 683.661 L775.053 683.661 L774.494 683.661 L773.935 683.661 L773.375 683.661 L772.816 683.661 L772.257 683.661 L771.698 683.661 L771.138 683.661 L770.579 683.661 L770.02 683.661 L769.461 683.661 L768.901 683.661 L768.342 683.661 L767.783 683.661 L767.224 683.661 L766.664 683.661 L766.105 683.661 L765.546 683.661 L764.987 683.661 L764.427 683.661 L763.868 683.661 L763.309 683.661 L762.75 683.661 L762.19 683.661 L761.631 683.661 L761.072 683.661 L760.513 683.661 L759.953 683.661 L759.394 683.661 L758.835 683.661 L758.276 683.661 L757.716 683.661 L757.157 683.661 L756.598 683.661 L756.039 683.661 L755.479 683.661 L754.92 683.661 L754.361 683.661 L753.802 683.661 L753.242 683.661 L752.683 683.661 L752.124 683.661 L751.565 683.661 L751.005 683.661 L750.446 683.661 L749.887 683.661 L749.328 683.661 L748.768 683.661 L748.209 683.661 L747.65 683.661 L747.091 683.661 L746.531 683.661 L745.972 683.661 L745.413 683.661 L744.854 683.661 L744.294 683.661 L743.735 683.661 L743.176 683.661 L742.617 683.661 L742.057 683.661 L741.498 683.661 L740.939 683.661 L740.38 683.661 L739.82 683.661 L739.261 683.661 L738.702 683.661 L738.143 683.661 L737.583 683.661 L737.024 683.661 L736.465 683.661 L735.906 683.661 L735.346 683.661 L734.787 683.661 L734.228 683.661 L733.669 683.661 L733.109 683.661 L732.55 683.661 L731.991 683.661 L731.432 683.661 L730.872 683.661 L730.313 683.661 L729.754 683.661 L729.195 683.661 L728.635 683.661 L728.076 683.661 L727.517 683.661 L726.958 683.661 L726.398 683.661 L725.839 683.661 L725.28 683.661 L724.721 683.661 L724.161 683.661 L723.602 683.661 L723.043 683.661 L722.484 683.661 L721.924 683.661 L721.365 683.661 L720.806 683.661 L720.247 683.661  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.437 720.806,687.437 721.365,687.437 721.924,687.437 722.484,687.437 723.043,687.437 723.602,687.437 724.161,687.437 724.721,687.437 725.28,687.437 725.839,687.437 726.398,687.437 726.958,687.437 727.517,687.437 728.076,687.437 728.635,687.437 729.195,687.437 729.754,687.437 730.313,687.437 730.872,687.437 731.432,687.437 731.991,687.437 732.55,687.437 733.109,687.437 733.669,687.437 734.228,687.437 734.787,687.437 735.346,687.437 735.906,687.437 736.465,687.437 737.024,687.437 737.583,687.437 738.143,687.437 738.702,687.437 739.261,687.437 739.82,687.437 740.38,687.437 740.939,687.437 741.498,687.437 742.057,687.437 742.617,687.437 743.176,687.437 743.735,687.437 744.294,687.437 744.854,687.437 745.413,687.437 745.972,687.437 746.531,687.437 747.091,687.437 747.65,687.437 748.209,687.437 748.768,687.437 749.328,687.437 749.887,687.437 750.446,687.437 751.005,687.437 751.565,687.437 752.124,687.437 752.683,687.437 753.242,687.437 753.802,687.437 754.361,687.437 754.92,687.437 755.479,687.437 756.039,687.437 756.598,687.437 757.157,687.437 757.716,687.437 758.276,687.437 758.835,687.437 759.394,687.437 759.953,687.437 760.513,687.437 761.072,687.437 761.631,687.437 762.19,687.437 762.75,687.437 763.309,687.437 763.868,687.437 764.427,687.437 764.987,687.437 765.546,687.437 766.105,687.437 766.664,687.437 767.224,687.437 767.783,687.437 768.342,687.437 768.901,687.437 769.461,687.437 770.02,687.437 770.579,687.437 771.138,687.437 771.698,687.437 772.257,687.437 772.816,687.437 773.375,687.437 773.935,687.437 774.494,687.437 775.053,687.437 775.612,687.437 776.172,687.437 776.731,687.437 777.29,687.437 777.849,687.437 778.409,687.437 778.968,687.437 779.527,687.437 780.086,687.437 780.646,687.437 781.205,687.437 781.764,687.437 782.323,687.437 782.883,687.437 783.442,687.437 784.001,687.437 784.56,687.437 785.12,687.437 785.679,687.437 786.238,687.437 786.797,687.437 787.357,687.437 787.916,687.437 788.475,687.437 789.034,687.437 789.594,687.437 790.153,687.437 790.712,687.437 791.271,687.437 791.831,687.437 792.39,687.437 792.949,687.437 793.508,687.437 794.068,687.437 794.627,687.437 795.186,687.437 795.745,687.437 796.305,687.437 796.864,687.437 797.423,687.437 797.982,687.437 798.542,687.437 799.101,687.437 799.66,687.437 800.219,687.437 800.779,687.437 801.338,687.437 801.897,687.437 802.456,687.437 803.016,687.437 803.575,687.437 804.134,687.437 804.693,687.437 805.253,687.437 805.812,687.437 806.371,687.437 806.931,687.437 807.49,687.437 808.049,687.437 808.608,687.437 809.168,687.437 809.727,687.437 810.286,687.437 810.845,687.437 811.405,687.437 811.964,687.437 812.523,687.437 813.082,687.437 813.642,687.437 814.201,687.437 814.76,687.437 815.319,687.437 815.879,687.437 816.438,687.437 816.997,687.437 817.556,687.437 818.116,687.437 818.675,687.437 819.234,687.437 819.793,687.437 820.353,687.437 820.912,687.437 821.471,687.437 822.03,687.437 822.59,687.437 823.149,687.437 823.708,687.437 824.267,687.437 824.827,687.437 825.386,687.437 825.945,687.437 826.504,687.437 827.064,687.437 827.623,687.437 828.182,687.437 828.741,687.437 829.301,687.437 829.86,687.437 830.419,687.437 830.978,687.437 831.538,687.437 832.097,687.437 832.656,687.437 833.215,687.437 833.775,687.437 834.334,687.437 834.893,687.437 835.452,687.437 836.012,687.437 836.571,687.437 837.13,687.437 837.689,687.437 838.249,687.437 838.808,687.437 839.367,687.437 839.926,687.437 840.486,687.437 841.045,687.437 841.604,687.437 842.163,687.437 842.723,687.437 843.282,687.437 843.841,687.437 844.4,687.437 844.96,687.437 845.519,687.437 846.078,687.437 846.637,687.437 847.197,687.437 847.756,687.437 848.315,687.437 848.874,687.437 849.434,687.437 849.993,687.437 850.552,687.437 851.111,687.437 851.671,687.437 852.23,687.437 852.789,687.437 853.348,687.437 853.908,687.437 854.467,687.437 855.026,687.437 855.585,687.437 856.145,687.437 856.704,687.437 857.263,687.437 857.822,687.437 858.382,687.437 858.941,687.437 859.5,687.437 860.059,687.437 860.619,687.437 861.178,687.437 861.737,687.437 862.296,687.437 862.856,687.437 863.415,687.437 863.974,687.437 864.533,687.437 865.093,687.437 865.652,687.437 866.211,687.437 866.77,687.437 867.33,687.437 867.889,687.437 868.448,687.437 869.007,687.437 869.567,687.437 870.126,687.437 870.685,687.437 871.244,687.437 871.804,687.437 872.363,687.437 872.922,687.437 873.481,687.437 874.041,687.437 874.6,687.437 875.159,687.437 875.718,687.437 876.278,687.437 876.837,687.437 877.396,687.437 877.955,687.437 878.515,687.437 879.074,687.437 879.633,687.437 880.192,687.437 880.752,687.437 881.311,687.437 881.87,687.437 882.429,687.437 882.989,687.437 883.548,687.437 884.107,687.437 884.666,687.437 885.226,687.437 885.785,687.437 886.344,687.437 886.903,687.437 887.463,687.437 888.022,687.437 888.581,687.437 889.14,687.437 889.7,687.437 890.259,687.437 890.818,687.437 891.377,687.437 891.937,687.437 892.496,687.437 893.055,687.437 893.614,687.437 894.174,687.437 894.733,687.437 895.292,687.437 895.851,687.437 896.411,687.437 896.97,687.437 897.529,687.437 898.088,687.437 898.648,687.437 899.207,687.437 899.766,687.437 900.325,687.437 900.885,687.437 901.444,687.437 902.003,687.437 902.562,687.437 903.122,687.437 903.681,687.437 904.24,687.437 904.799,687.437 905.359,687.437 905.918,687.437 906.477,687.437 907.036,687.437 907.596,687.437 908.155,687.437 908.714,687.437 909.273,687.437 909.833,687.437 910.392,687.437 910.951,687.437 911.51,687.437 912.07,687.437 912.629,687.437 913.188,687.437 913.747,687.437 914.307,687.437 914.866,687.437 915.425,687.437 915.984,687.437 916.544,687.437 917.103,687.437 917.662,687.437 918.221,687.437 918.781,687.437 919.34,687.437 919.899,687.437 920.458,687.437 921.018,687.437 921.577,687.437 922.136,687.437 922.695,687.437 923.255,687.437 923.814,687.437 924.373,687.437 924.932,687.437 925.492,687.437 926.051,687.437 926.61,687.437 927.169,687.437 927.729,687.437 928.288,687.437 928.847,687.437 929.406,687.437 929.966,687.437 930.525,687.437 931.084,687.437 931.644,687.437 932.203,687.437 932.762,687.437 933.321,687.437 933.881,687.437 934.44,687.437 934.999,687.437 935.558,687.437 936.118,687.437 936.677,687.437 937.236,687.437 937.795,687.437 938.355,687.437 938.914,687.437 939.473,687.437 940.032,687.437 940.592,687.437 941.151,687.437 941.71,687.437 942.269,687.437 942.829,687.437 943.388,687.437 943.947,687.437 944.506,687.437 945.066,687.437 945.625,687.437 946.184,687.437 946.743,687.437 947.303,687.437 947.862,687.437 948.421,687.437 948.98,687.437 949.54,687.437 950.099,687.437 950.658,687.437 951.217,687.437 951.777,687.437 952.336,687.437 952.895,687.437 953.454,687.437 954.014,687.437 954.573,687.437 955.132,687.437 955.691,687.437 956.251,687.437 956.81,687.437 957.369,687.437 957.928,687.437 958.488,687.437 959.047,687.437 959.606,687.437 960.165,687.437 960.725,687.437 961.284,687.437 961.843,687.437 962.402,687.437 962.962,687.437 963.521,687.437 964.08,687.437 964.639,687.437 965.199,687.437 965.758,687.437 966.317,687.437 966.876,687.437 967.436,687.437 967.995,687.437 968.554,687.437 969.113,687.437 969.673,687.437 970.232,687.437 970.791,687.437 971.35,687.437 971.91,687.437 972.469,687.437 973.028,687.437 973.587,687.437 974.147,687.437 974.706,687.437 975.265,687.437 975.824,687.437 976.384,687.437 976.943,687.437 977.502,687.437 978.061,687.437 978.621,687.437 979.18,687.437 979.739,687.437 980.298,687.437 980.858,687.437 981.417,687.437 981.976,687.437 982.535,687.437 983.095,687.437 983.654,687.437 984.213,687.437 984.772,687.437 985.332,687.437 985.891,687.437 986.45,687.437 987.009,687.437 987.569,687.437 988.128,687.437 988.687,687.437 989.246,687.437 989.806,687.437 990.365,687.437 990.924,687.437 991.483,687.437 992.043,687.437 992.602,687.437 993.161,687.437 993.72,687.437 994.28,687.437 994.839,687.437 995.398,687.437 995.957,687.437 996.517,687.437 997.076,687.437 997.635,687.437 998.194,687.437 998.754,687.437 999.313,687.437 999.872,687.437 1000.43,687.437 1000.99,687.437 1001.55,687.437 1002.11,687.437 1002.67,687.437 1003.23,687.437 1003.79,687.437 1004.35,687.437 1004.91,687.437 1005.46,687.437 1006.02,687.437 1006.58,687.437 1007.14,687.437 1007.7,687.437 1008.26,687.437 1008.82,687.437 1009.38,687.437 1009.94,687.437 1010.5,687.437 1011.06,687.437 1011.62,687.437 1012.18,687.437 1012.73,687.437 1013.29,687.437 1013.85,687.437 1014.41,687.437 1014.97,687.437 1015.53,687.437 1016.09,687.437 1016.65,687.437 1017.21,687.437 1017.77,687.437 1018.33,687.437 1018.89,687.437 1019.45,687.437 1020.01,687.437 1020.56,687.437 1021.12,687.437 1021.68,687.437 1022.24,687.437 1022.8,687.437 1023.36,687.437 1023.92,687.437 1024.48,687.437 1025.04,687.437 1025.6,687.437 1026.16,687.437 1026.72,687.437 1027.28,687.437 1027.83,687.437 1028.39,687.437 1028.95,687.437 1029.51,687.437 1030.07,687.437 1030.63,687.437 1031.19,687.437 1031.75,687.437 1032.31,687.437 1032.87,687.437 1033.43,687.437 1033.99,687.437 1034.55,687.437 1035.1,687.437 1035.66,687.437 1036.22,687.437 1036.78,687.437 1037.34,687.437 1037.9,687.437 1038.46,687.437 1039.02,687.437 1039.58,687.437 1040.14,687.437 1040.7,687.437 1041.26,687.437 1041.82,687.437 1042.38,687.437 1042.93,687.437 1043.49,687.437 1044.05,687.437 1044.61,687.437 1045.17,687.437 1045.73,687.437 1046.29,687.437 1046.85,687.437 1047.41,687.437 1047.97,687.437 1048.53,687.437 1049.09,687.437 1049.65,687.437 1050.2,687.437 1050.76,687.437 1051.32,687.437 1051.88,687.437 1052.44,687.437 1053,687.437 1053.56,687.437 1054.12,687.437 1054.68,687.437 1055.24,687.437 1055.8,687.437 1056.36,687.437 1056.92,687.437 1057.48,687.437 1058.03,687.437 1058.59,687.437 1059.15,687.437 1059.71,687.437 1060.27,687.437 1060.83,687.437 1061.39,687.437 1061.95,687.437 1062.51,687.437 1063.07,687.437 1063.63,687.437 1064.19,687.437 1064.75,687.437 1065.3,687.437 1065.86,687.437 1066.42,687.437 1066.98,687.437 1067.54,687.437 1068.1,687.437 1068.66,687.437 1069.22,687.437 1069.78,687.437 1070.34,687.437 1070.9,687.437 1071.46,687.437 1072.02,687.437 1072.57,687.437 1073.13,687.437 1073.69,687.437 1074.25,687.437 1074.81,687.437 1075.37,687.437 1075.93,687.437 1076.49,687.437 1077.05,687.437 1077.61,687.437 1078.17,687.437 1078.73,687.437 1079.29,687.437 1079.85,687.437 1080.4,687.437 1080.96,687.437 1081.52,687.437 1082.08,687.437 1082.64,687.437 1083.2,687.437 1083.76,687.437 1084.32,687.437 1084.88,687.437 1085.44,687.437 1086,687.437 1086.56,687.437 1087.12,687.437 1087.67,687.437 1088.23,687.437 1088.79,687.437 1089.35,687.437 1089.91,687.437 1090.47,687.437 1091.03,687.437 1091.59,687.437 1092.15,687.437 1092.71,687.437 1093.27,687.437 1093.83,687.437 1094.39,687.437 1094.94,687.437 1095.5,687.437 1096.06,687.437 1096.62,687.437 1097.18,687.437 1097.74,687.437 1098.3,687.437 1098.86,687.437 1099.42,687.437 1099.98,687.437 1100.54,687.437 1101.1,687.437 1101.66,687.437 1102.22,687.437 1102.77,687.437 1103.33,687.437 1103.89,687.437 1104.45,687.437 1105.01,687.437 1105.57,687.437 1106.13,687.437 1106.69,687.437 1107.25,687.437 1107.81,687.437 1108.37,687.437 1108.93,687.437 1109.49,687.437 1110.04,687.437 1110.6,687.437 1111.16,687.437 1111.72,687.437 1112.28,687.437 1112.84,687.437 1113.4,687.437 1113.96,687.437 1114.52,687.437 1115.08,687.437 1115.64,687.437 1116.2,687.437 1116.76,687.437 1117.31,687.437 1117.87,687.437 1118.43,687.437 1118.99,687.437 1119.55,687.437 1120.11,687.437 1120.67,687.437 1121.23,687.437 1121.79,687.437 1122.35,687.437 1122.91,687.437 1123.47,687.437 1124.03,687.437 1124.59,687.437 1125.14,687.437 1125.7,687.437 1126.26,687.437 1126.82,687.437 1127.38,687.437 1127.94,687.437 1128.5,687.437 1129.06,687.437 1129.62,687.437 1130.18,687.437 1130.74,687.437 1131.3,687.437 1131.86,687.437 1132.41,687.437 1132.97,687.437 1133.53,687.437 1134.09,687.437 1134.65,687.437 1135.21,687.437 1135.77,687.437 1136.33,687.437 1136.89,687.437 1137.45,687.437 1138.01,687.437 1138.57,687.437 1139.13,687.437 1139.68,687.437 1140.24,687.437 1140.8,687.437 1141.36,687.437 1141.92,687.437 1142.48,687.437 1143.04,687.437 1143.6,687.437 1144.16,687.437 1144.72,687.437 1145.28,687.437 1145.84,687.437 1146.4,687.437 1146.96,687.437 1147.51,687.437 1148.07,687.437 1148.63,687.437 1149.19,687.437 1149.75,687.437 1150.31,687.437 1150.87,687.437 1151.43,687.437 1151.99,687.437 1152.55,687.437 1153.11,687.437 1153.67,687.437 1154.23,687.437 1154.78,687.437 1155.34,687.437 1155.9,687.437 1156.46,687.437 1157.02,687.437 1157.58,687.437 1158.14,687.437 1158.7,687.437 1159.26,687.437 1159.82,687.437 1160.38,687.437 1160.94,687.437 1161.5,687.437 1162.05,687.437 1162.61,687.437 1163.17,687.437 1163.73,687.437 1164.29,687.437 1164.85,687.437 1165.41,687.437 1165.97,687.437 1166.53,687.437 1167.09,687.437 1167.65,687.437 1168.21,687.437 1168.77,687.437 1169.33,687.437 1169.88,687.437 1170.44,687.437 1171,687.437 1171.56,687.437 1172.12,687.437 1172.68,687.437 1173.24,687.437 1173.8,687.437 1174.36,687.437 1174.92,687.437 1175.48,687.437 1176.04,687.437 1176.6,687.437 1177.15,687.437 1177.71,687.437 1178.27,687.437 1178.83,687.437 1179.39,687.437 1179.95,687.437 1180.51,687.437 1181.07,687.437 1181.63,687.437 1182.19,687.437 1182.75,687.437 1183.31,687.437 1183.87,687.437 1184.43,687.437 1184.98,687.437 1185.54,687.437 1186.1,687.437 1186.66,687.437 1187.22,687.437 1187.78,687.437 1188.34,687.437 1188.9,687.437 1189.46,687.437 1190.02,687.437 1190.58,687.437 1191.14,687.437 1191.7,687.437 1192.25,687.437 1192.81,687.437 1193.37,687.437 1193.93,687.437 1194.49,687.437 1195.05,687.437 1195.61,687.437 1196.17,687.437 1196.73,687.437 1197.29,687.437 1197.85,687.437 1198.41,687.437 1198.97,687.437 1199.52,687.437 1200.08,687.437 1200.64,687.437 1201.2,687.437 1201.76,687.437 1202.32,687.437 1202.88,687.437 1203.44,687.437 1204,687.437 1204.56,687.437 1205.12,687.437 1205.68,687.437 1206.24,687.437 1206.8,687.437 1207.35,687.437 1207.91,687.437 1208.47,687.437 1209.03,687.437 1209.59,687.437 1210.15,687.437 1210.71,687.437 1211.27,687.437 1211.83,687.437 1212.39,687.437 1212.95,687.437 1213.51,687.437 1214.07,687.437 1214.62,687.437 1215.18,687.437 1215.74,687.437 1216.3,687.437 1216.86,687.437 1217.42,687.437 1217.98,687.437 1218.54,687.437 1219.1,687.437 1219.66,687.437 1220.22,687.437 1220.78,687.437 1221.34,687.437 1221.89,687.437 1222.45,687.437 1223.01,687.437 1223.57,687.437 1224.13,687.437 1224.69,687.437 1225.25,687.437 1225.81,687.437 1226.37,687.437 1226.93,687.437 1227.49,687.437 1228.05,687.437 1228.61,687.437 1229.17,687.437 1229.72,687.437 1230.28,687.437 1230.84,687.437 1231.4,687.437 1231.96,687.437 1232.52,687.437 1233.08,687.437 1233.64,687.437 1234.2,687.437 1234.76,687.437 1235.32,687.437 1235.88,687.437 1236.44,687.437 1236.99,687.437 1237.55,687.437 1238.11,687.437 1238.67,687.437 1239.23,687.437 1239.79,687.437 1240.35,687.437 1240.91,687.437 1241.47,687.437 1242.03,687.437 1242.59,687.437 1243.15,687.437 1243.71,687.437 1244.26,687.437 1244.82,687.437 1245.38,687.437 1245.94,687.437 1246.5,687.437 1247.06,687.437 1247.62,687.437 1248.18,687.437 1248.74,687.437 1249.3,687.437 1249.86,687.437 1250.42,687.437 1250.98,687.437 1251.54,687.437 1252.09,687.437 1252.65,687.437 1253.21,687.437 1253.77,687.437 1254.33,687.437 1254.89,687.437 1255.45,687.437 1256.01,687.437 1256.57,687.437 1257.13,687.437 1257.69,687.437 1258.25,687.437 1258.81,687.437 1259.36,687.437 1259.92,687.437 1260.48,687.437 1261.04,687.437 1261.6,687.437 1262.16,687.437 1262.72,687.437 1263.28,687.437 1263.84,687.437 1264.4,687.437 1264.96,687.437 1265.52,687.437 1266.08,687.437 1266.63,687.437 1267.19,687.437 1267.75,687.437 1268.31,687.437 1268.87,687.437 1269.43,687.437 1269.99,687.437 1270.55,687.437 1271.11,687.437 1271.67,687.437 1272.23,687.437 1272.79,687.437 1273.35,687.437 1273.91,687.437 1274.46,687.437 1275.02,687.437 1275.58,687.437 1276.14,687.437 1276.7,687.437 1277.26,687.437 1277.82,687.437 1278.38,687.437 1278.94,687.437 1279.5,687.437 1280.06,687.437 1280.62,687.437 1281.18,687.437 1281.73,687.437 1282.29,687.437 1282.85,687.437 1283.41,687.437 1283.97,687.437 1284.53,687.437 1285.09,687.437 1285.65,687.437 1286.21,687.437 1286.77,687.437 1287.33,687.437 1287.89,687.437 1288.45,687.437 1289,687.437 1289.56,687.437 1290.12,687.437 1290.68,687.437 1291.24,687.437 1291.8,687.437 1292.36,687.437 1292.92,687.437 1293.48,687.437 1294.04,687.437 1294.6,687.437 1295.16,687.437 1295.72,687.437 1296.28,687.437 1296.83,687.437 1297.39,687.437 1297.95,687.437 1298.51,687.437 1299.07,687.437 1299.63,687.437 1300.19,687.437 1300.75,687.437 1301.31,687.437 1301.87,687.437 1302.43,687.437 1302.99,687.437 1303.55,687.437 1304.1,687.437 1304.66,687.437 1305.22,687.437 1305.78,687.437 1306.34,687.437 1306.9,687.437 1307.46,687.437 1308.02,687.437 1308.58,687.437 1309.14,687.437 1309.7,687.437 1310.26,687.437 1310.82,687.437 1311.38,687.437 1311.93,687.437 1312.49,687.437 1313.05,687.437 1313.61,687.437 1314.17,687.437 1314.73,687.437 1315.29,687.437 1315.85,687.437 1316.41,687.437 1316.97,687.437 1317.53,687.437 1318.09,687.437 1318.65,687.437 1319.2,687.437 1319.76,687.437 1320.32,687.437 1320.88,687.437 1321.44,687.437 1322,687.437 1322.56,687.437 1323.12,687.437 1323.68,687.437 1324.24,687.437 1324.8,687.437 1325.36,687.437 1325.92,687.437 1326.47,687.437 1327.03,687.437 1327.59,687.437 1328.15,687.437 1328.71,687.437 1329.27,687.437 1329.83,687.437 1330.39,687.437 1330.95,687.437 1331.51,687.437 1332.07,687.437 1332.63,687.437 1333.19,687.437 1333.75,687.437 1334.3,687.437 1334.86,687.437 1335.42,687.437 1335.98,687.437 1336.54,687.437 1337.1,687.437 1337.66,687.437 1338.22,687.437 1338.78,687.437 1339.34,687.437 1339.9,687.437 1340.46,687.437 1341.02,687.437 1341.57,687.437 1342.13,687.437 1342.69,687.437 1343.25,687.437 1343.81,687.437 1344.37,687.437 1344.93,687.437 1345.49,687.437 1346.05,687.437 1346.61,687.437 1347.17,687.437 1347.73,687.437 1348.29,687.437 1348.84,687.437 1349.4,687.437 1349.96,687.437 1350.52,687.437 1351.08,687.437 1351.64,687.437 1352.2,687.437 1352.76,687.437 1353.32,687.437 1353.88,687.437 1354.44,687.437 1355,687.437 1355.56,687.437 1356.12,687.437 1356.67,687.437 1357.23,687.437 1357.79,687.437 1358.35,687.437 1358.91,687.437 1359.47,687.437 1360.03,687.437 1360.59,687.437 1361.15,687.437 1361.71,687.437 1362.27,687.437 1362.83,687.437 1363.39,687.437 1363.94,687.437 1364.5,687.437 1365.06,687.437 1365.62,687.437 1366.18,687.437 1366.74,687.437 1367.3,687.437 1367.86,687.437 1368.42,687.437 1368.98,687.437 1369.54,687.437 1370.1,687.437 1370.66,687.437 1371.21,687.437 1371.77,687.437 1372.33,687.437 1372.89,687.437 1373.45,687.437 1374.01,687.437 1374.57,687.437 1375.13,687.437 1375.69,687.437 1376.25,687.437 1376.81,687.437 1377.37,687.437 1377.93,687.437 1378.49,687.437 1379.04,687.437 1379.6,687.437 1380.16,687.437 1380.72,687.437 1381.28,687.437 1381.84,687.437 1382.4,687.437 1382.96,687.437 1383.52,687.437 1384.08,687.437 1384.64,687.437 1385.2,687.437 1385.76,687.437 1386.31,687.437 1386.87,687.437 1387.43,687.437 1387.99,687.437 1388.55,687.437 1389.11,687.437 1389.67,687.437 1390.23,687.437 1390.79,687.437 1391.35,687.437 1391.91,687.437 1392.47,687.437 1393.03,687.437 1393.58,687.437 1394.14,687.437 1394.7,687.437 1395.26,687.437 1395.82,687.437 1396.38,687.437 1396.94,687.437 1397.5,687.437 1398.06,687.437 1398.62,687.437 1399.18,687.437 1399.74,687.437 1400.3,687.437 1400.86,687.437 1401.41,687.437 1401.97,687.437 1402.53,687.437 1403.09,687.437 1403.65,687.437 1404.21,687.437 1404.77,687.437 1405.33,687.437 1405.89,687.437 1406.45,687.437 1407.01,687.437 1407.57,687.437 1408.13,687.437 1408.68,687.437 1409.24,687.437 1409.8,687.437 1410.36,687.437 1410.92,687.437 1411.48,687.437 1412.04,687.437 1412.6,687.437 1413.16,687.437 1413.72,687.437 1414.28,687.437 1414.84,687.437 1415.4,687.437 1415.95,687.437 1416.51,687.437 1417.07,687.437 1417.63,687.437 1418.19,687.437 1418.75,687.437 1419.31,687.437 1419.87,687.437 1420.43,687.437 1420.99,687.437 1421.55,687.437 1422.11,687.437 1422.67,687.437 1423.23,687.437 1423.78,687.437 1424.34,687.437 1424.9,687.437 1425.46,687.437 1426.02,687.437 1426.58,687.437 1427.14,687.437 1427.7,687.437 1428.26,687.437 1428.82,687.437 1429.38,687.437 1429.94,687.437 1430.5,687.437 1431.05,687.437 1431.61,687.437 1432.17,687.437 1432.73,687.437 1433.29,687.437 1433.85,687.437 1434.41,687.437 1434.97,687.437 1435.53,687.437 1436.09,687.437 1436.65,687.437 1437.21,687.437 1437.77,687.437 1438.33,687.437 1438.88,687.437 1439.44,687.437 1440,687.437 1440.56,687.437 1441.12,687.437 1441.68,687.437 1442.24,687.437 1442.8,687.437 1443.36,687.437 1443.92,687.437 1444.48,687.437 1445.04,687.437 1445.6,687.437 1446.15,687.437 1446.71,687.437 1447.27,687.437 1447.83,687.437 1448.39,687.437 1448.95,687.437 1449.51,687.437 1450.07,687.437 1450.63,687.437 1451.19,687.437 1451.75,687.437 1452.31,687.437 1452.87,687.437 1453.42,687.437 1453.98,687.437 1454.54,687.437 1455.1,687.437 1455.66,687.437 1456.22,687.437 1456.78,687.437 1457.34,687.437 1457.9,687.437 1458.46,687.437 1459.02,687.437 1459.58,687.437 1460.14,687.437 1460.7,687.437 1461.25,687.437 1461.81,687.437 1462.37,687.437 1462.93,687.437 1463.49,687.437 1464.05,687.437 1464.61,687.437 1465.17,687.437 1465.73,687.437 1466.29,687.437 1466.85,687.437 1467.41,687.437 1467.97,687.437 1468.52,687.437 1469.08,687.437 1469.64,687.437 1470.2,687.437 1470.76,687.437 1471.32,687.437 1471.88,687.437 1472.44,687.437 1473,687.437 1473.56,687.437 1474.12,687.437 1474.68,687.437 1475.24,687.437 1475.79,687.437 1476.35,687.437 1476.91,687.437 1477.47,687.437 1478.03,687.437 1478.59,687.437 1479.15,687.437 1479.71,687.437 1480.27,687.437 1480.83,687.437 1481.39,687.437 1481.95,687.437 1482.51,687.437 1483.07,687.437 1483.62,687.437 1484.18,687.437 1484.74,687.437 1485.3,687.437 1485.86,687.437 1486.42,687.437 1486.98,687.437 1487.54,687.437 1488.1,687.437 1488.66,687.437 1489.22,687.437 1489.78,687.437 1490.34,687.437 1490.89,687.437 1491.45,687.437 1492.01,687.437 1492.57,687.437 1493.13,687.437 1493.69,687.437 1494.25,687.437 1494.81,687.437 1495.37,687.437 1495.93,687.437 1496.49,687.437 1497.05,687.437 1497.61,687.437 1498.16,687.437 1498.72,687.437 1499.28,687.437 1499.84,687.437 1500.4,687.437 1500.96,687.437 1501.52,687.437 1502.08,687.437 1502.64,687.437 1503.2,687.437 1503.76,687.437 1504.32,687.437 1504.88,687.437 1505.44,687.437 1505.99,687.437 1506.55,687.437 1507.11,687.437 1507.67,687.437 1508.23,687.437 1508.79,687.437 1509.35,687.437 1509.91,687.437 1510.47,687.437 1511.03,687.437 1511.59,687.437 1512.15,687.437 1512.71,687.437 1513.26,687.437 1513.82,687.437 1514.38,687.437 1514.94,687.437 1515.5,687.437 1516.06,687.437 1516.62,687.437 1517.18,687.437 1517.74,687.437 1518.3,687.437 1518.86,687.437 1519.42,687.437 1519.98,687.437 1520.53,687.437 1521.09,687.437 1521.65,687.437 1522.21,687.437 1522.77,687.437 1523.33,687.437 1523.89,687.437 1524.45,687.437 1525.01,687.437 1525.57,687.437 1526.13,687.437 1526.69,687.437 1527.25,687.437 1527.81,687.437 1528.36,687.437 1528.92,687.437 1529.48,687.437 1530.04,687.437 1530.6,687.437 1531.16,687.437 1531.72,687.437 1532.28,687.437 1532.84,687.437 1533.4,687.437 1533.96,687.437 1534.52,687.437 1535.08,687.437 1535.63,687.437 1536.19,687.437 1536.75,687.437 1537.31,687.437 1537.87,687.437 1538.43,687.437 1538.99,687.437 1539.55,687.437 1540.11,687.437 1540.67,687.437 1541.23,687.437 1541.79,687.437 1542.35,687.437 1542.9,687.437 1543.46,687.437 1544.02,687.437 1544.58,687.437 1545.14,687.437 1545.7,687.437 1546.26,687.437 1546.82,687.437 1547.38,687.437 1547.94,687.437 1548.5,687.437 1549.06,687.437 1549.62,687.437 1550.18,687.437 1550.73,687.437 1551.29,687.437 1551.85,687.437 1552.41,687.437 1552.97,687.437 1553.53,687.437 1554.09,687.437 1554.65,687.437 1555.21,687.437 1555.77,687.437 1556.33,687.437 1556.89,687.437 1557.45,687.437 1558,687.437 1558.56,687.437 1559.12,687.437 1559.68,687.437 1560.24,687.437 1560.8,687.437 1561.36,687.437 1561.92,687.437 1562.48,687.437 1563.04,687.437 1563.6,687.437 1564.16,687.437 1564.72,687.437 1565.28,687.437 1565.83,687.437 1566.39,687.437 1566.95,687.437 1567.51,687.437 1568.07,687.437 1568.63,687.437 1569.19,687.437 1569.75,687.437 1570.31,687.437 1570.87,687.437 1571.43,687.437 1571.99,687.437 1572.55,687.437 1573.1,687.437 1573.66,687.437 1574.22,687.437 1574.78,687.437 1575.34,687.437 1575.9,687.437 1576.46,687.437 1577.02,687.437 1577.58,687.437 1578.14,687.437 1578.7,687.437 1579.26,687.437 1579.82,687.437 1580.37,687.437 1580.93,687.437 1581.49,687.437 1582.05,687.437 1582.61,687.437 1583.17,687.437 1583.73,687.437 1584.29,687.437 1584.85,687.437 1585.41,687.437 1585.97,687.437 1586.53,687.437 1587.09,687.437 1587.65,687.437 1588.2,687.437 1588.76,687.437 1589.32,687.437 1589.88,687.437 1590.44,687.437 1591,687.437 1591.56,687.437 1592.12,687.437 1592.68,687.437 1593.24,687.437 1593.8,687.437 1594.36,687.437 1594.92,687.437 1595.47,687.437 1596.03,687.437 1596.59,687.437 1597.15,687.437 1597.71,687.437 1598.27,687.437 1598.83,687.437 1599.39,687.437 1599.95,687.437 1600.51,687.437 1601.07,687.437 1601.63,687.437 1602.19,687.437 1602.74,687.437 1603.3,687.437 1603.86,687.437 1604.42,687.437 1604.98,687.437 1605.54,687.437 1606.1,687.437 1606.66,687.437 1607.22,687.437 1607.78,687.437 1608.34,687.437 1608.9,687.437 1609.46,687.437 1610.02,687.437 1610.57,687.437 1611.13,687.437 1611.69,687.437 1612.25,687.437 1612.81,687.437 1613.37,687.437 1613.93,687.437 1614.49,687.437 1615.05,687.437 1615.61,687.437 1616.17,687.437 1616.73,687.437 1617.29,687.437 1617.84,687.437 1618.4,687.437 1618.96,687.437 1619.52,687.437 1620.08,687.437 1620.64,687.437 1621.2,687.437 1621.76,687.437 1622.32,687.437 1622.88,687.437 1623.44,687.437 1624,687.437 1624.56,687.437 1625.11,687.437 1625.67,687.437 1626.23,687.437 1626.79,687.437 1627.35,687.437 1627.91,687.437 1628.47,687.437 1629.03,687.437 1629.59,687.437 1630.15,687.437 1630.71,687.437 1631.27,687.437 1631.83,687.437 1632.39,687.437 1632.94,687.437 1633.5,687.437 1634.06,687.437 1634.62,687.437 1635.18,687.437 1635.74,687.437 1636.3,687.437 1636.86,687.437 1637.42,687.437 1637.98,687.437 1638.54,687.437 1639.1,687.437 1639.66,687.437 1640.21,687.437 1640.77,687.437 1641.33,687.437 1641.89,687.437 1642.45,687.437 1643.01,687.437 1643.57,687.437 1644.13,687.437 1644.69,687.437 1645.25,687.437 1645.81,687.437 1646.37,687.437 1646.93,687.437 1647.48,687.437 1648.04,687.437 1648.6,687.437 1649.16,687.437 1649.72,687.437 1650.28,687.437 1650.84,687.437 1651.4,687.437 1651.96,687.437 1652.52,687.437 1653.08,687.437 1653.64,687.437 1654.2,687.437 1654.76,687.437 1655.31,687.437 1655.87,687.437 1656.43,687.437 1656.99,687.437 1657.55,687.437 1658.11,687.437 1658.67,687.437 1659.23,687.437 1659.79,687.437 1660.35,687.437 1660.91,687.437 1661.47,687.437 1662.03,687.437 1662.58,687.437 1663.14,687.437 1663.7,687.437 1664.26,687.437 1664.82,687.437 1665.38,687.437 1665.94,687.437 1666.5,687.437 1667.06,687.437 1667.62,687.437 1668.18,687.437 1668.74,687.437 1669.3,687.437 1669.85,687.437 1670.41,687.437 1670.97,687.437 1671.53,687.437 1672.09,687.437 1672.65,687.437 1673.21,687.437 1673.77,687.437 1674.33,687.437 1674.89,687.437 1675.45,687.437 1676.01,687.437 1676.57,687.437 1677.13,687.437 1677.68,687.437 1678.24,687.437 1678.8,687.437 1679.36,687.437 1679.92,687.437 1680.48,687.437 1681.04,687.437 1681.6,687.437 1682.16,687.437 1682.72,687.437 1683.28,687.437 1683.84,687.437 1684.4,687.437 1684.95,687.437 1685.51,687.437 1686.07,687.437 1686.63,687.437 1687.19,687.437 1687.75,687.437 1688.31,687.437 1688.87,687.437 1689.43,687.437 1689.99,687.437 1690.55,687.437 1691.11,687.437 1691.67,687.437 1692.23,687.437 1692.78,687.437 1693.34,687.437 1693.9,687.437 1694.46,687.437 1695.02,687.437 1695.58,687.437 1696.14,687.437 1696.7,687.437 1697.26,687.437 1697.82,687.437 1698.38,687.437 1698.94,687.437 1699.5,687.437 1700.05,687.437 1700.61,687.437 1701.17,687.437 1701.73,687.437 1702.29,687.437 1702.85,687.437 1703.41,687.437 1703.97,687.437 1704.53,687.437 1705.09,687.437 1705.65,687.437 1706.21,687.437 1706.77,687.437 1707.32,687.437 1707.88,687.437 1708.44,687.437 1709,687.437 1709.56,687.437 1710.12,687.437 1710.68,687.437 1711.24,687.437 1711.8,687.437 1712.36,687.437 1712.92,687.437 1713.48,687.437 1714.04,687.437 1714.6,687.437 1715.15,687.437 1715.71,687.437 1716.27,687.437 1716.83,687.437 1717.39,687.437 1717.95,687.437 1718.51,687.437 1719.07,687.437 1719.63,687.437 1720.19,687.437 1720.75,687.437 1721.31,687.437 1721.87,687.437 1722.42,687.437 1722.98,687.437 1723.54,687.437 1724.1,687.437 1724.66,687.437 1725.22,687.437 1725.78,687.437 1726.34,687.437 1726.9,687.437 1727.46,687.437 1728.02,687.437 1728.58,687.437 1729.14,687.437 1729.69,687.437 1730.25,687.437 1730.81,687.437 1731.37,687.437 1731.93,687.437 1732.49,687.437 1733.05,687.437 1733.61,687.437 1734.17,687.437 1734.73,687.437 1735.29,687.437 1735.85,687.437 1736.41,687.437 1736.97,687.437 1737.52,687.437 1738.08,687.437 1738.64,687.437 1739.2,687.437 1739.76,687.437 1740.32,687.437 1740.88,687.437 1741.44,687.437 1742,687.437 1742.56,687.437 1743.12,687.437 1743.68,687.437 1744.24,687.437 1744.79,687.437 1745.35,687.437 1745.91,687.437 1746.47,687.437 1747.03,687.437 1747.59,687.437 1748.15,687.437 1748.71,687.437 1749.27,687.437 1749.83,687.437 1750.39,687.437 1750.95,687.437 1751.51,687.437 1752.06,687.437 1752.62,687.437 1753.18,687.437 1753.74,687.437 1754.3,687.437 1754.86,687.437 1755.42,687.437 1755.98,687.437 1756.54,687.437 1757.1,687.437 1757.66,687.437 1758.22,687.437 1758.78,687.437 1759.34,687.437 1759.89,687.437 1760.45,687.437 1761.01,687.437 1761.57,687.437 1762.13,687.437 1762.69,687.437 1763.25,687.437 1763.81,687.437 1764.37,687.437 1764.93,687.437 1765.49,687.437 1766.05,687.437 1766.61,687.437 1767.16,687.437 1767.72,687.437 1768.28,687.437 1768.84,687.437 1769.4,687.437 1769.96,687.437 1770.52,687.437 1771.08,687.437 1771.64,687.437 1772.2,687.437 1772.76,687.437 1773.32,687.437 1773.88,687.437 1774.43,687.437 1774.99,687.437 1775.55,687.437 1776.11,687.437 1776.67,687.437 1777.23,687.437 1777.79,687.437 1778.35,687.437 1778.91,687.437 1779.47,687.437 1780.03,687.437 1780.59,687.437 1781.15,687.437 1781.71,687.437 1782.26,687.437 1782.82,687.437 1783.38,687.437 1783.94,687.437 1784.5,687.437 1785.06,687.437 1785.62,687.437 1786.18,687.437 1786.74,687.437 1787.3,687.437 1787.86,687.437 1788.42,687.437 1788.98,687.437 1789.53,687.437 1790.09,687.437 1790.65,687.437 1791.21,687.437 1791.77,687.437 1792.33,687.437 1792.89,687.437 1793.45,687.437 1794.01,687.437 1794.57,687.437 1795.13,687.437 1795.69,687.437 1796.25,687.437 1796.8,687.437 1797.36,687.437 1797.92,687.437 1798.48,687.437 1799.04,687.437 1799.6,687.437 1800.16,687.437 1800.72,687.437 1801.28,687.437 1801.84,687.437 1802.4,687.437 1802.96,687.437 1803.52,687.437 1804.08,687.437 1804.63,687.437 1805.19,687.437 1805.75,687.437 1806.31,687.437 1806.87,687.437 1807.43,687.437 1807.99,687.437 1808.55,687.437 1809.11,687.437 1809.67,687.437 1810.23,687.437 1810.79,687.437 1811.35,687.437 1811.9,687.437 1812.46,687.437 1813.02,687.437 1813.58,687.437 1814.14,687.437 1814.7,687.437 1815.26,687.437 1815.82,687.437 1816.38,687.437 1816.94,687.437 1817.5,687.437 1818.06,687.437 1818.62,687.437 1819.18,687.437 1819.73,687.437 1820.29,687.437 1820.85,687.437 1821.41,687.437 1821.97,687.437 1822.53,687.437 1823.09,687.437 1823.65,687.437 1824.21,687.437 1824.77,687.437 1825.33,687.437 1825.89,687.437 1826.45,687.437 1827,687.437 1827.56,687.437 1828.12,687.437 1828.68,687.437 1829.24,687.437 1829.8,687.437 1830.36,687.437 1830.92,687.437 1831.48,687.437 1832.04,687.437 1832.6,687.437 1833.16,687.437 1833.72,687.437 1834.27,687.437 1834.83,687.437 1835.39,687.437 1835.95,687.437 1836.51,687.437 1837.07,687.437 1837.63,687.437 1838.19,687.437 \"/>\n<path clip-path=\"url(#clip813)\" d=\"M720.247 685.305 L720.806 685.305 L721.365 685.305 L721.924 685.305 L722.484 685.305 L723.043 685.305 L723.602 685.305 L724.161 685.305 L724.721 685.305 L725.28 685.305 L725.839 685.305 L726.398 685.305 L726.958 685.305 L727.517 685.305 L728.076 685.305 L728.635 685.305 L729.195 685.305 L729.754 685.305 L730.313 685.305 L730.872 685.305 L731.432 685.305 L731.991 685.305 L732.55 685.305 L733.109 685.305 L733.669 685.305 L734.228 685.305 L734.787 685.305 L735.346 685.305 L735.906 685.305 L736.465 685.305 L737.024 685.305 L737.583 685.305 L738.143 685.305 L738.702 685.305 L739.261 685.305 L739.82 685.305 L740.38 685.305 L740.939 685.305 L741.498 685.305 L742.057 685.305 L742.617 685.305 L743.176 685.305 L743.735 685.305 L744.294 685.305 L744.854 685.305 L745.413 685.305 L745.972 685.305 L746.531 685.305 L747.091 685.305 L747.65 685.305 L748.209 685.305 L748.768 685.305 L749.328 685.305 L749.887 685.305 L750.446 685.305 L751.005 685.305 L751.565 685.305 L752.124 685.305 L752.683 685.305 L753.242 685.305 L753.802 685.305 L754.361 685.305 L754.92 685.305 L755.479 685.305 L756.039 685.305 L756.598 685.305 L757.157 685.305 L757.716 685.305 L758.276 685.305 L758.835 685.305 L759.394 685.305 L759.953 685.305 L760.513 685.305 L761.072 685.305 L761.631 685.305 L762.19 685.305 L762.75 685.305 L763.309 685.305 L763.868 685.305 L764.427 685.305 L764.987 685.305 L765.546 685.305 L766.105 685.305 L766.664 685.305 L767.224 685.305 L767.783 685.305 L768.342 685.305 L768.901 685.305 L769.461 685.305 L770.02 685.305 L770.579 685.305 L771.138 685.305 L771.698 685.305 L772.257 685.305 L772.816 685.305 L773.375 685.305 L773.935 685.305 L774.494 685.305 L775.053 685.305 L775.612 685.305 L776.172 685.305 L776.731 685.305 L777.29 685.305 L777.849 685.305 L778.409 685.305 L778.968 685.305 L779.527 685.305 L780.086 685.305 L780.646 685.305 L781.205 685.305 L781.764 685.305 L782.323 685.305 L782.883 685.305 L783.442 685.305 L784.001 685.305 L784.56 685.305 L785.12 685.305 L785.679 685.305 L786.238 685.305 L786.797 685.305 L787.357 685.305 L787.916 685.305 L788.475 685.305 L789.034 685.305 L789.594 685.305 L790.153 685.305 L790.712 685.305 L791.271 685.305 L791.831 685.305 L792.39 685.305 L792.949 685.305 L793.508 685.305 L794.068 685.305 L794.627 685.305 L795.186 685.305 L795.745 685.305 L796.305 685.305 L796.864 685.305 L797.423 685.305 L797.982 685.305 L798.542 685.305 L799.101 685.305 L799.66 685.305 L800.219 685.305 L800.779 685.305 L801.338 685.305 L801.897 685.305 L802.456 685.305 L803.016 685.305 L803.575 685.305 L804.134 685.305 L804.693 685.305 L805.253 685.305 L805.812 685.305 L806.371 685.305 L806.931 685.305 L807.49 685.305 L808.049 685.305 L808.608 685.305 L809.168 685.305 L809.727 685.305 L810.286 685.305 L810.845 685.305 L811.405 685.305 L811.964 685.305 L812.523 685.305 L813.082 685.305 L813.642 685.305 L814.201 685.305 L814.76 685.305 L815.319 685.305 L815.879 685.305 L816.438 685.305 L816.997 685.305 L817.556 685.305 L818.116 685.305 L818.675 685.305 L819.234 685.305 L819.793 685.305 L820.353 685.305 L820.912 685.305 L821.471 685.305 L822.03 685.305 L822.59 685.305 L823.149 685.305 L823.708 685.305 L824.267 685.305 L824.827 685.305 L825.386 685.305 L825.945 685.305 L826.504 685.305 L827.064 685.305 L827.623 685.305 L828.182 685.305 L828.741 685.305 L829.301 685.305 L829.86 685.305 L830.419 685.305 L830.978 685.305 L831.538 685.305 L832.097 685.305 L832.656 685.305 L833.215 685.305 L833.775 685.305 L834.334 685.305 L834.893 685.305 L835.452 685.305 L836.012 685.305 L836.571 685.305 L837.13 685.305 L837.689 685.305 L838.249 685.305 L838.808 685.305 L839.367 685.305 L839.926 685.305 L840.486 685.305 L841.045 685.305 L841.604 685.305 L842.163 685.305 L842.723 685.305 L843.282 685.305 L843.841 685.305 L844.4 685.305 L844.96 685.305 L845.519 685.305 L846.078 685.305 L846.637 685.305 L847.197 685.305 L847.756 685.305 L848.315 685.305 L848.874 685.305 L849.434 685.305 L849.993 685.305 L850.552 685.305 L851.111 685.305 L851.671 685.305 L852.23 685.305 L852.789 685.305 L853.348 685.305 L853.908 685.305 L854.467 685.305 L855.026 685.305 L855.585 685.305 L856.145 685.305 L856.704 685.305 L857.263 685.305 L857.822 685.305 L858.382 685.305 L858.941 685.305 L859.5 685.305 L860.059 685.305 L860.619 685.305 L861.178 685.305 L861.737 685.305 L862.296 685.305 L862.856 685.305 L863.415 685.305 L863.974 685.305 L864.533 685.305 L865.093 685.305 L865.652 685.305 L866.211 685.305 L866.77 685.305 L867.33 685.305 L867.889 685.305 L868.448 685.305 L869.007 685.305 L869.567 685.305 L870.126 685.305 L870.685 685.305 L871.244 685.305 L871.804 685.305 L872.363 685.305 L872.922 685.305 L873.481 685.305 L874.041 685.305 L874.6 685.305 L875.159 685.305 L875.718 685.305 L876.278 685.305 L876.837 685.305 L877.396 685.305 L877.955 685.305 L878.515 685.305 L879.074 685.305 L879.633 685.305 L880.192 685.305 L880.752 685.305 L881.311 685.305 L881.87 685.305 L882.429 685.305 L882.989 685.305 L883.548 685.305 L884.107 685.305 L884.666 685.305 L885.226 685.305 L885.785 685.305 L886.344 685.305 L886.903 685.305 L887.463 685.305 L888.022 685.305 L888.581 685.305 L889.14 685.305 L889.7 685.305 L890.259 685.305 L890.818 685.305 L891.377 685.305 L891.937 685.305 L892.496 685.305 L893.055 685.305 L893.614 685.305 L894.174 685.305 L894.733 685.305 L895.292 685.305 L895.851 685.305 L896.411 685.305 L896.97 685.305 L897.529 685.305 L898.088 685.305 L898.648 685.305 L899.207 685.305 L899.766 685.305 L900.325 685.305 L900.885 685.305 L901.444 685.305 L902.003 685.305 L902.562 685.305 L903.122 685.305 L903.681 685.305 L904.24 685.305 L904.799 685.305 L905.359 685.305 L905.918 685.305 L906.477 685.305 L907.036 685.305 L907.596 685.305 L908.155 685.305 L908.714 685.305 L909.273 685.305 L909.833 685.305 L910.392 685.305 L910.951 685.305 L911.51 685.305 L912.07 685.305 L912.629 685.305 L913.188 685.305 L913.747 685.305 L914.307 685.305 L914.866 685.305 L915.425 685.305 L915.984 685.305 L916.544 685.305 L917.103 685.305 L917.662 685.305 L918.221 685.305 L918.781 685.305 L919.34 685.305 L919.899 685.305 L920.458 685.305 L921.018 685.305 L921.577 685.305 L922.136 685.305 L922.695 685.305 L923.255 685.305 L923.814 685.305 L924.373 685.305 L924.932 685.305 L925.492 685.305 L926.051 685.305 L926.61 685.305 L927.169 685.305 L927.729 685.305 L928.288 685.305 L928.847 685.305 L929.406 685.305 L929.966 685.305 L930.525 685.305 L931.084 685.305 L931.644 685.305 L932.203 685.305 L932.762 685.305 L933.321 685.305 L933.881 685.305 L934.44 685.305 L934.999 685.305 L935.558 685.305 L936.118 685.305 L936.677 685.305 L937.236 685.305 L937.795 685.305 L938.355 685.305 L938.914 685.305 L939.473 685.305 L940.032 685.305 L940.592 685.305 L941.151 685.305 L941.71 685.305 L942.269 685.305 L942.829 685.305 L943.388 685.305 L943.947 685.305 L944.506 685.305 L945.066 685.305 L945.625 685.305 L946.184 685.305 L946.743 685.305 L947.303 685.305 L947.862 685.305 L948.421 685.305 L948.98 685.305 L949.54 685.305 L950.099 685.305 L950.658 685.305 L951.217 685.305 L951.777 685.305 L952.336 685.305 L952.895 685.305 L953.454 685.305 L954.014 685.305 L954.573 685.305 L955.132 685.305 L955.691 685.305 L956.251 685.305 L956.81 685.305 L957.369 685.305 L957.928 685.305 L958.488 685.305 L959.047 685.305 L959.606 685.305 L960.165 685.305 L960.725 685.305 L961.284 685.305 L961.843 685.305 L962.402 685.305 L962.962 685.305 L963.521 685.305 L964.08 685.305 L964.639 685.305 L965.199 685.305 L965.758 685.305 L966.317 685.305 L966.876 685.305 L967.436 685.305 L967.995 685.305 L968.554 685.305 L969.113 685.305 L969.673 685.305 L970.232 685.305 L970.791 685.305 L971.35 685.305 L971.91 685.305 L972.469 685.305 L973.028 685.305 L973.587 685.305 L974.147 685.305 L974.706 685.305 L975.265 685.305 L975.824 685.305 L976.384 685.305 L976.943 685.305 L977.502 685.305 L978.061 685.305 L978.621 685.305 L979.18 685.305 L979.739 685.305 L980.298 685.305 L980.858 685.305 L981.417 685.305 L981.976 685.305 L982.535 685.305 L983.095 685.305 L983.654 685.305 L984.213 685.305 L984.772 685.305 L985.332 685.305 L985.891 685.305 L986.45 685.305 L987.009 685.305 L987.569 685.305 L988.128 685.305 L988.687 685.305 L989.246 685.305 L989.806 685.305 L990.365 685.305 L990.924 685.305 L991.483 685.305 L992.043 685.305 L992.602 685.305 L993.161 685.305 L993.72 685.305 L994.28 685.305 L994.839 685.305 L995.398 685.305 L995.957 685.305 L996.517 685.305 L997.076 685.305 L997.635 685.305 L998.194 685.305 L998.754 685.305 L999.313 685.305 L999.872 685.305 L1000.43 685.305 L1000.99 685.305 L1001.55 685.305 L1002.11 685.305 L1002.67 685.305 L1003.23 685.305 L1003.79 685.305 L1004.35 685.305 L1004.91 685.305 L1005.46 685.305 L1006.02 685.305 L1006.58 685.305 L1007.14 685.305 L1007.7 685.305 L1008.26 685.305 L1008.82 685.305 L1009.38 685.305 L1009.94 685.305 L1010.5 685.305 L1011.06 685.305 L1011.62 685.305 L1012.18 685.305 L1012.73 685.305 L1013.29 685.305 L1013.85 685.305 L1014.41 685.305 L1014.97 685.305 L1015.53 685.305 L1016.09 685.305 L1016.65 685.305 L1017.21 685.305 L1017.77 685.305 L1018.33 685.305 L1018.89 685.305 L1019.45 685.305 L1020.01 685.305 L1020.56 685.305 L1021.12 685.305 L1021.68 685.305 L1022.24 685.305 L1022.8 685.305 L1023.36 685.305 L1023.92 685.305 L1024.48 685.305 L1025.04 685.305 L1025.6 685.305 L1026.16 685.305 L1026.72 685.305 L1027.28 685.305 L1027.83 685.305 L1028.39 685.305 L1028.95 685.305 L1029.51 685.305 L1030.07 685.305 L1030.63 685.305 L1031.19 685.305 L1031.75 685.305 L1032.31 685.305 L1032.87 685.305 L1033.43 685.305 L1033.99 685.305 L1034.55 685.305 L1035.1 685.305 L1035.66 685.305 L1036.22 685.305 L1036.78 685.305 L1037.34 685.305 L1037.9 685.305 L1038.46 685.305 L1039.02 685.305 L1039.58 685.305 L1040.14 685.305 L1040.7 685.305 L1041.26 685.305 L1041.82 685.305 L1042.38 685.305 L1042.93 685.305 L1043.49 685.305 L1044.05 685.305 L1044.61 685.305 L1045.17 685.305 L1045.73 685.305 L1046.29 685.305 L1046.85 685.305 L1047.41 685.305 L1047.97 685.305 L1048.53 685.305 L1049.09 685.305 L1049.65 685.305 L1050.2 685.305 L1050.76 685.305 L1051.32 685.305 L1051.88 685.305 L1052.44 685.305 L1053 685.305 L1053.56 685.305 L1054.12 685.305 L1054.68 685.305 L1055.24 685.305 L1055.8 685.305 L1056.36 685.305 L1056.92 685.305 L1057.48 685.305 L1058.03 685.305 L1058.59 685.305 L1059.15 685.305 L1059.71 685.305 L1060.27 685.305 L1060.83 685.305 L1061.39 685.305 L1061.95 685.305 L1062.51 685.305 L1063.07 685.305 L1063.63 685.305 L1064.19 685.305 L1064.75 685.305 L1065.3 685.305 L1065.86 685.305 L1066.42 685.305 L1066.98 685.305 L1067.54 685.305 L1068.1 685.305 L1068.66 685.305 L1069.22 685.305 L1069.78 685.305 L1070.34 685.305 L1070.9 685.305 L1071.46 685.305 L1072.02 685.305 L1072.57 685.305 L1073.13 685.305 L1073.69 685.305 L1074.25 685.305 L1074.81 685.305 L1075.37 685.305 L1075.93 685.305 L1076.49 685.305 L1077.05 685.305 L1077.61 685.305 L1078.17 685.305 L1078.73 685.305 L1079.29 685.305 L1079.85 685.305 L1080.4 685.305 L1080.96 685.305 L1081.52 685.305 L1082.08 685.305 L1082.64 685.305 L1083.2 685.305 L1083.76 685.305 L1084.32 685.305 L1084.88 685.305 L1085.44 685.305 L1086 685.305 L1086.56 685.305 L1087.12 685.305 L1087.67 685.305 L1088.23 685.305 L1088.79 685.305 L1089.35 685.305 L1089.91 685.305 L1090.47 685.305 L1091.03 685.305 L1091.59 685.305 L1092.15 685.305 L1092.71 685.305 L1093.27 685.305 L1093.83 685.305 L1094.39 685.305 L1094.94 685.305 L1095.5 685.305 L1096.06 685.305 L1096.62 685.305 L1097.18 685.305 L1097.74 685.305 L1098.3 685.305 L1098.86 685.305 L1099.42 685.305 L1099.98 685.305 L1100.54 685.305 L1101.1 685.305 L1101.66 685.305 L1102.22 685.305 L1102.77 685.305 L1103.33 685.305 L1103.89 685.305 L1104.45 685.305 L1105.01 685.305 L1105.57 685.305 L1106.13 685.305 L1106.69 685.305 L1107.25 685.305 L1107.81 685.305 L1108.37 685.305 L1108.93 685.305 L1109.49 685.305 L1110.04 685.305 L1110.6 685.305 L1111.16 685.305 L1111.72 685.305 L1112.28 685.305 L1112.84 685.305 L1113.4 685.305 L1113.96 685.305 L1114.52 685.305 L1115.08 685.305 L1115.64 685.305 L1116.2 685.305 L1116.76 685.305 L1117.31 685.305 L1117.87 685.305 L1118.43 685.305 L1118.99 685.305 L1119.55 685.305 L1120.11 685.305 L1120.67 685.305 L1121.23 685.305 L1121.79 685.305 L1122.35 685.305 L1122.91 685.305 L1123.47 685.305 L1124.03 685.305 L1124.59 685.305 L1125.14 685.305 L1125.7 685.305 L1126.26 685.305 L1126.82 685.305 L1127.38 685.305 L1127.94 685.305 L1128.5 685.305 L1129.06 685.305 L1129.62 685.305 L1130.18 685.305 L1130.74 685.305 L1131.3 685.305 L1131.86 685.305 L1132.41 685.305 L1132.97 685.305 L1133.53 685.305 L1134.09 685.305 L1134.65 685.305 L1135.21 685.305 L1135.77 685.305 L1136.33 685.305 L1136.89 685.305 L1137.45 685.305 L1138.01 685.305 L1138.57 685.305 L1139.13 685.305 L1139.68 685.305 L1140.24 685.305 L1140.8 685.305 L1141.36 685.305 L1141.92 685.305 L1142.48 685.305 L1143.04 685.305 L1143.6 685.305 L1144.16 685.305 L1144.72 685.305 L1145.28 685.305 L1145.84 685.305 L1146.4 685.305 L1146.96 685.305 L1147.51 685.305 L1148.07 685.305 L1148.63 685.305 L1149.19 685.305 L1149.75 685.305 L1150.31 685.305 L1150.87 685.305 L1151.43 685.305 L1151.99 685.305 L1152.55 685.305 L1153.11 685.305 L1153.67 685.305 L1154.23 685.305 L1154.78 685.305 L1155.34 685.305 L1155.9 685.305 L1156.46 685.305 L1157.02 685.305 L1157.58 685.305 L1158.14 685.305 L1158.7 685.305 L1159.26 685.305 L1159.82 685.305 L1160.38 685.305 L1160.94 685.305 L1161.5 685.305 L1162.05 685.305 L1162.61 685.305 L1163.17 685.305 L1163.73 685.305 L1164.29 685.305 L1164.85 685.305 L1165.41 685.305 L1165.97 685.305 L1166.53 685.305 L1167.09 685.305 L1167.65 685.305 L1168.21 685.305 L1168.77 685.305 L1169.33 685.305 L1169.88 685.305 L1170.44 685.305 L1171 685.305 L1171.56 685.305 L1172.12 685.305 L1172.68 685.305 L1173.24 685.305 L1173.8 685.305 L1174.36 685.305 L1174.92 685.305 L1175.48 685.305 L1176.04 685.305 L1176.6 685.305 L1177.15 685.305 L1177.71 685.305 L1178.27 685.305 L1178.83 685.305 L1179.39 685.305 L1179.95 685.305 L1180.51 685.305 L1181.07 685.305 L1181.63 685.305 L1182.19 685.305 L1182.75 685.305 L1183.31 685.305 L1183.87 685.305 L1184.43 685.305 L1184.98 685.305 L1185.54 685.305 L1186.1 685.305 L1186.66 685.305 L1187.22 685.305 L1187.78 685.305 L1188.34 685.305 L1188.9 685.305 L1189.46 685.305 L1190.02 685.305 L1190.58 685.305 L1191.14 685.305 L1191.7 685.305 L1192.25 685.305 L1192.81 685.305 L1193.37 685.305 L1193.93 685.305 L1194.49 685.305 L1195.05 685.305 L1195.61 685.305 L1196.17 685.305 L1196.73 685.305 L1197.29 685.305 L1197.85 685.305 L1198.41 685.305 L1198.97 685.305 L1199.52 685.305 L1200.08 685.305 L1200.64 685.305 L1201.2 685.305 L1201.76 685.305 L1202.32 685.305 L1202.88 685.305 L1203.44 685.305 L1204 685.305 L1204.56 685.305 L1205.12 685.305 L1205.68 685.305 L1206.24 685.305 L1206.8 685.305 L1207.35 685.305 L1207.91 685.305 L1208.47 685.305 L1209.03 685.305 L1209.59 685.305 L1210.15 685.305 L1210.71 685.305 L1211.27 685.305 L1211.83 685.305 L1212.39 685.305 L1212.95 685.305 L1213.51 685.305 L1214.07 685.305 L1214.62 685.305 L1215.18 685.305 L1215.74 685.305 L1216.3 685.305 L1216.86 685.305 L1217.42 685.305 L1217.98 685.305 L1218.54 685.305 L1219.1 685.305 L1219.66 685.305 L1220.22 685.305 L1220.78 685.305 L1221.34 685.305 L1221.89 685.305 L1222.45 685.305 L1223.01 685.305 L1223.57 685.305 L1224.13 685.305 L1224.69 685.305 L1225.25 685.305 L1225.81 685.305 L1226.37 685.305 L1226.93 685.305 L1227.49 685.305 L1228.05 685.305 L1228.61 685.305 L1229.17 685.305 L1229.72 685.305 L1230.28 685.305 L1230.84 685.305 L1231.4 685.305 L1231.96 685.305 L1232.52 685.305 L1233.08 685.305 L1233.64 685.305 L1234.2 685.305 L1234.76 685.305 L1235.32 685.305 L1235.88 685.305 L1236.44 685.305 L1236.99 685.305 L1237.55 685.305 L1238.11 685.305 L1238.67 685.305 L1239.23 685.305 L1239.79 685.305 L1240.35 685.305 L1240.91 685.305 L1241.47 685.305 L1242.03 685.305 L1242.59 685.305 L1243.15 685.305 L1243.71 685.305 L1244.26 685.305 L1244.82 685.305 L1245.38 685.305 L1245.94 685.305 L1246.5 685.305 L1247.06 685.305 L1247.62 685.305 L1248.18 685.305 L1248.74 685.305 L1249.3 685.305 L1249.86 685.305 L1250.42 685.305 L1250.98 685.305 L1251.54 685.305 L1252.09 685.305 L1252.65 685.305 L1253.21 685.305 L1253.77 685.305 L1254.33 685.305 L1254.89 685.305 L1255.45 685.305 L1256.01 685.305 L1256.57 685.305 L1257.13 685.305 L1257.69 685.305 L1258.25 685.305 L1258.81 685.305 L1259.36 685.305 L1259.92 685.305 L1260.48 685.305 L1261.04 685.305 L1261.6 685.305 L1262.16 685.305 L1262.72 685.305 L1263.28 685.305 L1263.84 685.305 L1264.4 685.305 L1264.96 685.305 L1265.52 685.305 L1266.08 685.305 L1266.63 685.305 L1267.19 685.305 L1267.75 685.305 L1268.31 685.305 L1268.87 685.305 L1269.43 685.305 L1269.99 685.305 L1270.55 685.305 L1271.11 685.305 L1271.67 685.305 L1272.23 685.305 L1272.79 685.305 L1273.35 685.305 L1273.91 685.305 L1274.46 685.305 L1275.02 685.305 L1275.58 685.305 L1276.14 685.305 L1276.7 685.305 L1277.26 685.305 L1277.82 685.305 L1278.38 685.305 L1278.94 685.305 L1279.5 685.305 L1280.06 685.305 L1280.62 685.305 L1281.18 685.305 L1281.73 685.305 L1282.29 685.305 L1282.85 685.305 L1283.41 685.305 L1283.97 685.305 L1284.53 685.305 L1285.09 685.305 L1285.65 685.305 L1286.21 685.305 L1286.77 685.305 L1287.33 685.305 L1287.89 685.305 L1288.45 685.305 L1289 685.305 L1289.56 685.305 L1290.12 685.305 L1290.68 685.305 L1291.24 685.305 L1291.8 685.305 L1292.36 685.305 L1292.92 685.305 L1293.48 685.305 L1294.04 685.305 L1294.6 685.305 L1295.16 685.305 L1295.72 685.305 L1296.28 685.305 L1296.83 685.305 L1297.39 685.305 L1297.95 685.305 L1298.51 685.305 L1299.07 685.305 L1299.63 685.305 L1300.19 685.305 L1300.75 685.305 L1301.31 685.305 L1301.87 685.305 L1302.43 685.305 L1302.99 685.305 L1303.55 685.305 L1304.1 685.305 L1304.66 685.305 L1305.22 685.305 L1305.78 685.305 L1306.34 685.305 L1306.9 685.305 L1307.46 685.305 L1308.02 685.305 L1308.58 685.305 L1309.14 685.305 L1309.7 685.305 L1310.26 685.305 L1310.82 685.305 L1311.38 685.305 L1311.93 685.305 L1312.49 685.305 L1313.05 685.305 L1313.61 685.305 L1314.17 685.305 L1314.73 685.305 L1315.29 685.305 L1315.85 685.305 L1316.41 685.305 L1316.97 685.305 L1317.53 685.305 L1318.09 685.305 L1318.65 685.305 L1319.2 685.305 L1319.76 685.305 L1320.32 685.305 L1320.88 685.305 L1321.44 685.305 L1322 685.305 L1322.56 685.305 L1323.12 685.305 L1323.68 685.305 L1324.24 685.305 L1324.8 685.305 L1325.36 685.305 L1325.92 685.305 L1326.47 685.305 L1327.03 685.305 L1327.59 685.305 L1328.15 685.305 L1328.71 685.305 L1329.27 685.305 L1329.83 685.305 L1330.39 685.305 L1330.95 685.305 L1331.51 685.305 L1332.07 685.305 L1332.63 685.305 L1333.19 685.305 L1333.75 685.305 L1334.3 685.305 L1334.86 685.305 L1335.42 685.305 L1335.98 685.305 L1336.54 685.305 L1337.1 685.305 L1337.66 685.305 L1338.22 685.305 L1338.78 685.305 L1339.34 685.305 L1339.9 685.305 L1340.46 685.305 L1341.02 685.305 L1341.57 685.305 L1342.13 685.305 L1342.69 685.305 L1343.25 685.305 L1343.81 685.305 L1344.37 685.305 L1344.93 685.305 L1345.49 685.305 L1346.05 685.305 L1346.61 685.305 L1347.17 685.305 L1347.73 685.305 L1348.29 685.305 L1348.84 685.305 L1349.4 685.305 L1349.96 685.305 L1350.52 685.305 L1351.08 685.305 L1351.64 685.305 L1352.2 685.305 L1352.76 685.305 L1353.32 685.305 L1353.88 685.305 L1354.44 685.305 L1355 685.305 L1355.56 685.305 L1356.12 685.305 L1356.67 685.305 L1357.23 685.305 L1357.79 685.305 L1358.35 685.305 L1358.91 685.305 L1359.47 685.305 L1360.03 685.305 L1360.59 685.305 L1361.15 685.305 L1361.71 685.305 L1362.27 685.305 L1362.83 685.305 L1363.39 685.305 L1363.94 685.305 L1364.5 685.305 L1365.06 685.305 L1365.62 685.305 L1366.18 685.305 L1366.74 685.305 L1367.3 685.305 L1367.86 685.305 L1368.42 685.305 L1368.98 685.305 L1369.54 685.305 L1370.1 685.305 L1370.66 685.305 L1371.21 685.305 L1371.77 685.305 L1372.33 685.305 L1372.89 685.305 L1373.45 685.305 L1374.01 685.305 L1374.57 685.305 L1375.13 685.305 L1375.69 685.305 L1376.25 685.305 L1376.81 685.305 L1377.37 685.305 L1377.93 685.305 L1378.49 685.305 L1379.04 685.305 L1379.6 685.305 L1380.16 685.305 L1380.72 685.305 L1381.28 685.305 L1381.84 685.305 L1382.4 685.305 L1382.96 685.305 L1383.52 685.305 L1384.08 685.305 L1384.64 685.305 L1385.2 685.305 L1385.76 685.305 L1386.31 685.305 L1386.87 685.305 L1387.43 685.305 L1387.99 685.305 L1388.55 685.305 L1389.11 685.305 L1389.67 685.305 L1390.23 685.305 L1390.79 685.305 L1391.35 685.305 L1391.91 685.305 L1392.47 685.305 L1393.03 685.305 L1393.58 685.305 L1394.14 685.305 L1394.7 685.305 L1395.26 685.305 L1395.82 685.305 L1396.38 685.305 L1396.94 685.305 L1397.5 685.305 L1398.06 685.305 L1398.62 685.305 L1399.18 685.305 L1399.74 685.305 L1400.3 685.305 L1400.86 685.305 L1401.41 685.305 L1401.97 685.305 L1402.53 685.305 L1403.09 685.305 L1403.65 685.305 L1404.21 685.305 L1404.77 685.305 L1405.33 685.305 L1405.89 685.305 L1406.45 685.305 L1407.01 685.305 L1407.57 685.305 L1408.13 685.305 L1408.68 685.305 L1409.24 685.305 L1409.8 685.305 L1410.36 685.305 L1410.92 685.305 L1411.48 685.305 L1412.04 685.305 L1412.6 685.305 L1413.16 685.305 L1413.72 685.305 L1414.28 685.305 L1414.84 685.305 L1415.4 685.305 L1415.95 685.305 L1416.51 685.305 L1417.07 685.305 L1417.63 685.305 L1418.19 685.305 L1418.75 685.305 L1419.31 685.305 L1419.87 685.305 L1420.43 685.305 L1420.99 685.305 L1421.55 685.305 L1422.11 685.305 L1422.67 685.305 L1423.23 685.305 L1423.78 685.305 L1424.34 685.305 L1424.9 685.305 L1425.46 685.305 L1426.02 685.305 L1426.58 685.305 L1427.14 685.305 L1427.7 685.305 L1428.26 685.305 L1428.82 685.305 L1429.38 685.305 L1429.94 685.305 L1430.5 685.305 L1431.05 685.305 L1431.61 685.305 L1432.17 685.305 L1432.73 685.305 L1433.29 685.305 L1433.85 685.305 L1434.41 685.305 L1434.97 685.305 L1435.53 685.305 L1436.09 685.305 L1436.65 685.305 L1437.21 685.305 L1437.77 685.305 L1438.33 685.305 L1438.88 685.305 L1439.44 685.305 L1440 685.305 L1440.56 685.305 L1441.12 685.305 L1441.68 685.305 L1442.24 685.305 L1442.8 685.305 L1443.36 685.305 L1443.92 685.305 L1444.48 685.305 L1445.04 685.305 L1445.6 685.305 L1446.15 685.305 L1446.71 685.305 L1447.27 685.305 L1447.83 685.305 L1448.39 685.305 L1448.95 685.305 L1449.51 685.305 L1450.07 685.305 L1450.63 685.305 L1451.19 685.305 L1451.75 685.305 L1452.31 685.305 L1452.87 685.305 L1453.42 685.305 L1453.98 685.305 L1454.54 685.305 L1455.1 685.305 L1455.66 685.305 L1456.22 685.305 L1456.78 685.305 L1457.34 685.305 L1457.9 685.305 L1458.46 685.305 L1459.02 685.305 L1459.58 685.305 L1460.14 685.305 L1460.7 685.305 L1461.25 685.305 L1461.81 685.305 L1462.37 685.305 L1462.93 685.305 L1463.49 685.305 L1464.05 685.305 L1464.61 685.305 L1465.17 685.305 L1465.73 685.305 L1466.29 685.305 L1466.85 685.305 L1467.41 685.305 L1467.97 685.305 L1468.52 685.305 L1469.08 685.305 L1469.64 685.305 L1470.2 685.305 L1470.76 685.305 L1471.32 685.305 L1471.88 685.305 L1472.44 685.305 L1473 685.305 L1473.56 685.305 L1474.12 685.305 L1474.68 685.305 L1475.24 685.305 L1475.79 685.305 L1476.35 685.305 L1476.91 685.305 L1477.47 685.305 L1478.03 685.305 L1478.59 685.305 L1479.15 685.305 L1479.71 685.305 L1480.27 685.305 L1480.83 685.305 L1481.39 685.305 L1481.95 685.305 L1482.51 685.305 L1483.07 685.305 L1483.62 685.305 L1484.18 685.305 L1484.74 685.305 L1485.3 685.305 L1485.86 685.305 L1486.42 685.305 L1486.98 685.305 L1487.54 685.305 L1488.1 685.305 L1488.66 685.305 L1489.22 685.305 L1489.78 685.305 L1490.34 685.305 L1490.89 685.305 L1491.45 685.305 L1492.01 685.305 L1492.57 685.305 L1493.13 685.305 L1493.69 685.305 L1494.25 685.305 L1494.81 685.305 L1495.37 685.305 L1495.93 685.305 L1496.49 685.305 L1497.05 685.305 L1497.61 685.305 L1498.16 685.305 L1498.72 685.305 L1499.28 685.305 L1499.84 685.305 L1500.4 685.305 L1500.96 685.305 L1501.52 685.305 L1502.08 685.305 L1502.64 685.305 L1503.2 685.305 L1503.76 685.305 L1504.32 685.305 L1504.88 685.305 L1505.44 685.305 L1505.99 685.305 L1506.55 685.305 L1507.11 685.305 L1507.67 685.305 L1508.23 685.305 L1508.79 685.305 L1509.35 685.305 L1509.91 685.305 L1510.47 685.305 L1511.03 685.305 L1511.59 685.305 L1512.15 685.305 L1512.71 685.305 L1513.26 685.305 L1513.82 685.305 L1514.38 685.305 L1514.94 685.305 L1515.5 685.305 L1516.06 685.305 L1516.62 685.305 L1517.18 685.305 L1517.74 685.305 L1518.3 685.305 L1518.86 685.305 L1519.42 685.305 L1519.98 685.305 L1520.53 685.305 L1521.09 685.305 L1521.65 685.305 L1522.21 685.305 L1522.77 685.305 L1523.33 685.305 L1523.89 685.305 L1524.45 685.305 L1525.01 685.305 L1525.57 685.305 L1526.13 685.305 L1526.69 685.305 L1527.25 685.305 L1527.81 685.305 L1528.36 685.305 L1528.92 685.305 L1529.48 685.305 L1530.04 685.305 L1530.6 685.305 L1531.16 685.305 L1531.72 685.305 L1532.28 685.305 L1532.84 685.305 L1533.4 685.305 L1533.96 685.305 L1534.52 685.305 L1535.08 685.305 L1535.63 685.305 L1536.19 685.305 L1536.75 685.305 L1537.31 685.305 L1537.87 685.305 L1538.43 685.305 L1538.99 685.305 L1539.55 685.305 L1540.11 685.305 L1540.67 685.305 L1541.23 685.305 L1541.79 685.305 L1542.35 685.305 L1542.9 685.305 L1543.46 685.305 L1544.02 685.305 L1544.58 685.305 L1545.14 685.305 L1545.7 685.305 L1546.26 685.305 L1546.82 685.305 L1547.38 685.305 L1547.94 685.305 L1548.5 685.305 L1549.06 685.305 L1549.62 685.305 L1550.18 685.305 L1550.73 685.305 L1551.29 685.305 L1551.85 685.305 L1552.41 685.305 L1552.97 685.305 L1553.53 685.305 L1554.09 685.305 L1554.65 685.305 L1555.21 685.305 L1555.77 685.305 L1556.33 685.305 L1556.89 685.305 L1557.45 685.305 L1558 685.305 L1558.56 685.305 L1559.12 685.305 L1559.68 685.305 L1560.24 685.305 L1560.8 685.305 L1561.36 685.305 L1561.92 685.305 L1562.48 685.305 L1563.04 685.305 L1563.6 685.305 L1564.16 685.305 L1564.72 685.305 L1565.28 685.305 L1565.83 685.305 L1566.39 685.305 L1566.95 685.305 L1567.51 685.305 L1568.07 685.305 L1568.63 685.305 L1569.19 685.305 L1569.75 685.305 L1570.31 685.305 L1570.87 685.305 L1571.43 685.305 L1571.99 685.305 L1572.55 685.305 L1573.1 685.305 L1573.66 685.305 L1574.22 685.305 L1574.78 685.305 L1575.34 685.305 L1575.9 685.305 L1576.46 685.305 L1577.02 685.305 L1577.58 685.305 L1578.14 685.305 L1578.7 685.305 L1579.26 685.305 L1579.82 685.305 L1580.37 685.305 L1580.93 685.305 L1581.49 685.305 L1582.05 685.305 L1582.61 685.305 L1583.17 685.305 L1583.73 685.305 L1584.29 685.305 L1584.85 685.305 L1585.41 685.305 L1585.97 685.305 L1586.53 685.305 L1587.09 685.305 L1587.65 685.305 L1588.2 685.305 L1588.76 685.305 L1589.32 685.305 L1589.88 685.305 L1590.44 685.305 L1591 685.305 L1591.56 685.305 L1592.12 685.305 L1592.68 685.305 L1593.24 685.305 L1593.8 685.305 L1594.36 685.305 L1594.92 685.305 L1595.47 685.305 L1596.03 685.305 L1596.59 685.305 L1597.15 685.305 L1597.71 685.305 L1598.27 685.305 L1598.83 685.305 L1599.39 685.305 L1599.95 685.305 L1600.51 685.305 L1601.07 685.305 L1601.63 685.305 L1602.19 685.305 L1602.74 685.305 L1603.3 685.305 L1603.86 685.305 L1604.42 685.305 L1604.98 685.305 L1605.54 685.305 L1606.1 685.305 L1606.66 685.305 L1607.22 685.305 L1607.78 685.305 L1608.34 685.305 L1608.9 685.305 L1609.46 685.305 L1610.02 685.305 L1610.57 685.305 L1611.13 685.305 L1611.69 685.305 L1612.25 685.305 L1612.81 685.305 L1613.37 685.305 L1613.93 685.305 L1614.49 685.305 L1615.05 685.305 L1615.61 685.305 L1616.17 685.305 L1616.73 685.305 L1617.29 685.305 L1617.84 685.305 L1618.4 685.305 L1618.96 685.305 L1619.52 685.305 L1620.08 685.305 L1620.64 685.305 L1621.2 685.305 L1621.76 685.305 L1622.32 685.305 L1622.88 685.305 L1623.44 685.305 L1624 685.305 L1624.56 685.305 L1625.11 685.305 L1625.67 685.305 L1626.23 685.305 L1626.79 685.305 L1627.35 685.305 L1627.91 685.305 L1628.47 685.305 L1629.03 685.305 L1629.59 685.305 L1630.15 685.305 L1630.71 685.305 L1631.27 685.305 L1631.83 685.305 L1632.39 685.305 L1632.94 685.305 L1633.5 685.305 L1634.06 685.305 L1634.62 685.305 L1635.18 685.305 L1635.74 685.305 L1636.3 685.305 L1636.86 685.305 L1637.42 685.305 L1637.98 685.305 L1638.54 685.305 L1639.1 685.305 L1639.66 685.305 L1640.21 685.305 L1640.77 685.305 L1641.33 685.305 L1641.89 685.305 L1642.45 685.305 L1643.01 685.305 L1643.57 685.305 L1644.13 685.305 L1644.69 685.305 L1645.25 685.305 L1645.81 685.305 L1646.37 685.305 L1646.93 685.305 L1647.48 685.305 L1648.04 685.305 L1648.6 685.305 L1649.16 685.305 L1649.72 685.305 L1650.28 685.305 L1650.84 685.305 L1651.4 685.305 L1651.96 685.305 L1652.52 685.305 L1653.08 685.305 L1653.64 685.305 L1654.2 685.305 L1654.76 685.305 L1655.31 685.305 L1655.87 685.305 L1656.43 685.305 L1656.99 685.305 L1657.55 685.305 L1658.11 685.305 L1658.67 685.305 L1659.23 685.305 L1659.79 685.305 L1660.35 685.305 L1660.91 685.305 L1661.47 685.305 L1662.03 685.305 L1662.58 685.305 L1663.14 685.305 L1663.7 685.305 L1664.26 685.305 L1664.82 685.305 L1665.38 685.305 L1665.94 685.305 L1666.5 685.305 L1667.06 685.305 L1667.62 685.305 L1668.18 685.305 L1668.74 685.305 L1669.3 685.305 L1669.85 685.305 L1670.41 685.305 L1670.97 685.305 L1671.53 685.305 L1672.09 685.305 L1672.65 685.305 L1673.21 685.305 L1673.77 685.305 L1674.33 685.305 L1674.89 685.305 L1675.45 685.305 L1676.01 685.305 L1676.57 685.305 L1677.13 685.305 L1677.68 685.305 L1678.24 685.305 L1678.8 685.305 L1679.36 685.305 L1679.92 685.305 L1680.48 685.305 L1681.04 685.305 L1681.6 685.305 L1682.16 685.305 L1682.72 685.305 L1683.28 685.305 L1683.84 685.305 L1684.4 685.305 L1684.95 685.305 L1685.51 685.305 L1686.07 685.305 L1686.63 685.305 L1687.19 685.305 L1687.75 685.305 L1688.31 685.305 L1688.87 685.305 L1689.43 685.305 L1689.99 685.305 L1690.55 685.305 L1691.11 685.305 L1691.67 685.305 L1692.23 685.305 L1692.78 685.305 L1693.34 685.305 L1693.9 685.305 L1694.46 685.305 L1695.02 685.305 L1695.58 685.305 L1696.14 685.305 L1696.7 685.305 L1697.26 685.305 L1697.82 685.305 L1698.38 685.305 L1698.94 685.305 L1699.5 685.305 L1700.05 685.305 L1700.61 685.305 L1701.17 685.305 L1701.73 685.305 L1702.29 685.305 L1702.85 685.305 L1703.41 685.305 L1703.97 685.305 L1704.53 685.305 L1705.09 685.305 L1705.65 685.305 L1706.21 685.305 L1706.77 685.305 L1707.32 685.305 L1707.88 685.305 L1708.44 685.305 L1709 685.305 L1709.56 685.305 L1710.12 685.305 L1710.68 685.305 L1711.24 685.305 L1711.8 685.305 L1712.36 685.305 L1712.92 685.305 L1713.48 685.305 L1714.04 685.305 L1714.6 685.305 L1715.15 685.305 L1715.71 685.305 L1716.27 685.305 L1716.83 685.305 L1717.39 685.305 L1717.95 685.305 L1718.51 685.305 L1719.07 685.305 L1719.63 685.305 L1720.19 685.305 L1720.75 685.305 L1721.31 685.305 L1721.87 685.305 L1722.42 685.305 L1722.98 685.305 L1723.54 685.305 L1724.1 685.305 L1724.66 685.305 L1725.22 685.305 L1725.78 685.305 L1726.34 685.305 L1726.9 685.305 L1727.46 685.305 L1728.02 685.305 L1728.58 685.305 L1729.14 685.305 L1729.69 685.305 L1730.25 685.305 L1730.81 685.305 L1731.37 685.305 L1731.93 685.305 L1732.49 685.305 L1733.05 685.305 L1733.61 685.305 L1734.17 685.305 L1734.73 685.305 L1735.29 685.305 L1735.85 685.305 L1736.41 685.305 L1736.97 685.305 L1737.52 685.305 L1738.08 685.305 L1738.64 685.305 L1739.2 685.305 L1739.76 685.305 L1740.32 685.305 L1740.88 685.305 L1741.44 685.305 L1742 685.305 L1742.56 685.305 L1743.12 685.305 L1743.68 685.305 L1744.24 685.305 L1744.79 685.305 L1745.35 685.305 L1745.91 685.305 L1746.47 685.305 L1747.03 685.305 L1747.59 685.305 L1748.15 685.305 L1748.71 685.305 L1749.27 685.305 L1749.83 685.305 L1750.39 685.305 L1750.95 685.305 L1751.51 685.305 L1752.06 685.305 L1752.62 685.305 L1753.18 685.305 L1753.74 685.305 L1754.3 685.305 L1754.86 685.305 L1755.42 685.305 L1755.98 685.305 L1756.54 685.305 L1757.1 685.305 L1757.66 685.305 L1758.22 685.305 L1758.78 685.305 L1759.34 685.305 L1759.89 685.305 L1760.45 685.305 L1761.01 685.305 L1761.57 685.305 L1762.13 685.305 L1762.69 685.305 L1763.25 685.305 L1763.81 685.305 L1764.37 685.305 L1764.93 685.305 L1765.49 685.305 L1766.05 685.305 L1766.61 685.305 L1767.16 685.305 L1767.72 685.305 L1768.28 685.305 L1768.84 685.305 L1769.4 685.305 L1769.96 685.305 L1770.52 685.305 L1771.08 685.305 L1771.64 685.305 L1772.2 685.305 L1772.76 685.305 L1773.32 685.305 L1773.88 685.305 L1774.43 685.305 L1774.99 685.305 L1775.55 685.305 L1776.11 685.305 L1776.67 685.305 L1777.23 685.305 L1777.79 685.305 L1778.35 685.305 L1778.91 685.305 L1779.47 685.305 L1780.03 685.305 L1780.59 685.305 L1781.15 685.305 L1781.71 685.305 L1782.26 685.305 L1782.82 685.305 L1783.38 685.305 L1783.94 685.305 L1784.5 685.305 L1785.06 685.305 L1785.62 685.305 L1786.18 685.305 L1786.74 685.305 L1787.3 685.305 L1787.86 685.305 L1788.42 685.305 L1788.98 685.305 L1789.53 685.305 L1790.09 685.305 L1790.65 685.305 L1791.21 685.305 L1791.77 685.305 L1792.33 685.305 L1792.89 685.305 L1793.45 685.305 L1794.01 685.305 L1794.57 685.305 L1795.13 685.305 L1795.69 685.305 L1796.25 685.305 L1796.8 685.305 L1797.36 685.305 L1797.92 685.305 L1798.48 685.305 L1799.04 685.305 L1799.6 685.305 L1800.16 685.305 L1800.72 685.305 L1801.28 685.305 L1801.84 685.305 L1802.4 685.305 L1802.96 685.305 L1803.52 685.305 L1804.08 685.305 L1804.63 685.305 L1805.19 685.305 L1805.75 685.305 L1806.31 685.305 L1806.87 685.305 L1807.43 685.305 L1807.99 685.305 L1808.55 685.305 L1809.11 685.305 L1809.67 685.305 L1810.23 685.305 L1810.79 685.305 L1811.35 685.305 L1811.9 685.305 L1812.46 685.305 L1813.02 685.305 L1813.58 685.305 L1814.14 685.305 L1814.7 685.305 L1815.26 685.305 L1815.82 685.305 L1816.38 685.305 L1816.94 685.305 L1817.5 685.305 L1818.06 685.305 L1818.62 685.305 L1819.18 685.305 L1819.73 685.305 L1820.29 685.305 L1820.85 685.305 L1821.41 685.305 L1821.97 685.305 L1822.53 685.305 L1823.09 685.305 L1823.65 685.305 L1824.21 685.305 L1824.77 685.305 L1825.33 685.305 L1825.89 685.305 L1826.45 685.305 L1827 685.305 L1827.56 685.305 L1828.12 685.305 L1828.68 685.305 L1829.24 685.305 L1829.8 685.305 L1830.36 685.305 L1830.92 685.305 L1831.48 685.305 L1832.04 685.305 L1832.6 685.305 L1833.16 685.305 L1833.72 685.305 L1834.27 685.305 L1834.83 685.305 L1835.39 685.305 L1835.95 685.305 L1836.51 685.305 L1837.07 685.305 L1837.63 685.305 L1838.19 685.305 L1838.19 682.526 L1837.63 682.526 L1837.07 682.526 L1836.51 682.526 L1835.95 682.526 L1835.39 682.526 L1834.83 682.526 L1834.27 682.526 L1833.72 682.526 L1833.16 682.526 L1832.6 682.526 L1832.04 682.526 L1831.48 682.526 L1830.92 682.526 L1830.36 682.526 L1829.8 682.526 L1829.24 682.526 L1828.68 682.526 L1828.12 682.526 L1827.56 682.526 L1827 682.526 L1826.45 682.526 L1825.89 682.526 L1825.33 682.526 L1824.77 682.526 L1824.21 682.526 L1823.65 682.526 L1823.09 682.526 L1822.53 682.526 L1821.97 682.526 L1821.41 682.526 L1820.85 682.526 L1820.29 682.526 L1819.73 682.526 L1819.18 682.526 L1818.62 682.526 L1818.06 682.526 L1817.5 682.526 L1816.94 682.526 L1816.38 682.526 L1815.82 682.526 L1815.26 682.526 L1814.7 682.526 L1814.14 682.526 L1813.58 682.526 L1813.02 682.526 L1812.46 682.526 L1811.9 682.526 L1811.35 682.526 L1810.79 682.526 L1810.23 682.526 L1809.67 682.526 L1809.11 682.526 L1808.55 682.526 L1807.99 682.526 L1807.43 682.526 L1806.87 682.526 L1806.31 682.526 L1805.75 682.526 L1805.19 682.526 L1804.63 682.526 L1804.08 682.526 L1803.52 682.526 L1802.96 682.526 L1802.4 682.526 L1801.84 682.526 L1801.28 682.526 L1800.72 682.526 L1800.16 682.526 L1799.6 682.526 L1799.04 682.526 L1798.48 682.526 L1797.92 682.526 L1797.36 682.526 L1796.8 682.526 L1796.25 682.526 L1795.69 682.526 L1795.13 682.526 L1794.57 682.526 L1794.01 682.526 L1793.45 682.526 L1792.89 682.526 L1792.33 682.526 L1791.77 682.526 L1791.21 682.526 L1790.65 682.526 L1790.09 682.526 L1789.53 682.526 L1788.98 682.526 L1788.42 682.526 L1787.86 682.526 L1787.3 682.526 L1786.74 682.526 L1786.18 682.526 L1785.62 682.526 L1785.06 682.526 L1784.5 682.526 L1783.94 682.526 L1783.38 682.526 L1782.82 682.526 L1782.26 682.526 L1781.71 682.526 L1781.15 682.526 L1780.59 682.526 L1780.03 682.526 L1779.47 682.526 L1778.91 682.526 L1778.35 682.526 L1777.79 682.526 L1777.23 682.526 L1776.67 682.526 L1776.11 682.526 L1775.55 682.526 L1774.99 682.526 L1774.43 682.526 L1773.88 682.526 L1773.32 682.526 L1772.76 682.526 L1772.2 682.526 L1771.64 682.526 L1771.08 682.526 L1770.52 682.526 L1769.96 682.526 L1769.4 682.526 L1768.84 682.526 L1768.28 682.526 L1767.72 682.526 L1767.16 682.526 L1766.61 682.526 L1766.05 682.526 L1765.49 682.526 L1764.93 682.526 L1764.37 682.526 L1763.81 682.526 L1763.25 682.526 L1762.69 682.526 L1762.13 682.526 L1761.57 682.526 L1761.01 682.526 L1760.45 682.526 L1759.89 682.526 L1759.34 682.526 L1758.78 682.526 L1758.22 682.526 L1757.66 682.526 L1757.1 682.526 L1756.54 682.526 L1755.98 682.526 L1755.42 682.526 L1754.86 682.526 L1754.3 682.526 L1753.74 682.526 L1753.18 682.526 L1752.62 682.526 L1752.06 682.526 L1751.51 682.526 L1750.95 682.526 L1750.39 682.526 L1749.83 682.526 L1749.27 682.526 L1748.71 682.526 L1748.15 682.526 L1747.59 682.526 L1747.03 682.526 L1746.47 682.526 L1745.91 682.526 L1745.35 682.526 L1744.79 682.526 L1744.24 682.526 L1743.68 682.526 L1743.12 682.526 L1742.56 682.526 L1742 682.526 L1741.44 682.526 L1740.88 682.526 L1740.32 682.526 L1739.76 682.526 L1739.2 682.526 L1738.64 682.526 L1738.08 682.526 L1737.52 682.526 L1736.97 682.526 L1736.41 682.526 L1735.85 682.526 L1735.29 682.526 L1734.73 682.526 L1734.17 682.526 L1733.61 682.526 L1733.05 682.526 L1732.49 682.526 L1731.93 682.526 L1731.37 682.526 L1730.81 682.526 L1730.25 682.526 L1729.69 682.526 L1729.14 682.526 L1728.58 682.526 L1728.02 682.526 L1727.46 682.526 L1726.9 682.526 L1726.34 682.526 L1725.78 682.526 L1725.22 682.526 L1724.66 682.526 L1724.1 682.526 L1723.54 682.526 L1722.98 682.526 L1722.42 682.526 L1721.87 682.526 L1721.31 682.526 L1720.75 682.526 L1720.19 682.526 L1719.63 682.526 L1719.07 682.526 L1718.51 682.526 L1717.95 682.526 L1717.39 682.526 L1716.83 682.526 L1716.27 682.526 L1715.71 682.526 L1715.15 682.526 L1714.6 682.526 L1714.04 682.526 L1713.48 682.526 L1712.92 682.526 L1712.36 682.526 L1711.8 682.526 L1711.24 682.526 L1710.68 682.526 L1710.12 682.526 L1709.56 682.526 L1709 682.526 L1708.44 682.526 L1707.88 682.526 L1707.32 682.526 L1706.77 682.526 L1706.21 682.526 L1705.65 682.526 L1705.09 682.526 L1704.53 682.526 L1703.97 682.526 L1703.41 682.526 L1702.85 682.526 L1702.29 682.526 L1701.73 682.526 L1701.17 682.526 L1700.61 682.526 L1700.05 682.526 L1699.5 682.526 L1698.94 682.526 L1698.38 682.526 L1697.82 682.526 L1697.26 682.526 L1696.7 682.526 L1696.14 682.526 L1695.58 682.526 L1695.02 682.526 L1694.46 682.526 L1693.9 682.526 L1693.34 682.526 L1692.78 682.526 L1692.23 682.526 L1691.67 682.526 L1691.11 682.526 L1690.55 682.526 L1689.99 682.526 L1689.43 682.526 L1688.87 682.526 L1688.31 682.526 L1687.75 682.526 L1687.19 682.526 L1686.63 682.526 L1686.07 682.526 L1685.51 682.526 L1684.95 682.526 L1684.4 682.526 L1683.84 682.526 L1683.28 682.526 L1682.72 682.526 L1682.16 682.526 L1681.6 682.526 L1681.04 682.526 L1680.48 682.526 L1679.92 682.526 L1679.36 682.526 L1678.8 682.526 L1678.24 682.526 L1677.68 682.526 L1677.13 682.526 L1676.57 682.526 L1676.01 682.526 L1675.45 682.526 L1674.89 682.526 L1674.33 682.526 L1673.77 682.526 L1673.21 682.526 L1672.65 682.526 L1672.09 682.526 L1671.53 682.526 L1670.97 682.526 L1670.41 682.526 L1669.85 682.526 L1669.3 682.526 L1668.74 682.526 L1668.18 682.526 L1667.62 682.526 L1667.06 682.526 L1666.5 682.526 L1665.94 682.526 L1665.38 682.526 L1664.82 682.526 L1664.26 682.526 L1663.7 682.526 L1663.14 682.526 L1662.58 682.526 L1662.03 682.526 L1661.47 682.526 L1660.91 682.526 L1660.35 682.526 L1659.79 682.526 L1659.23 682.526 L1658.67 682.526 L1658.11 682.526 L1657.55 682.526 L1656.99 682.526 L1656.43 682.526 L1655.87 682.526 L1655.31 682.526 L1654.76 682.526 L1654.2 682.526 L1653.64 682.526 L1653.08 682.526 L1652.52 682.526 L1651.96 682.526 L1651.4 682.526 L1650.84 682.526 L1650.28 682.526 L1649.72 682.526 L1649.16 682.526 L1648.6 682.526 L1648.04 682.526 L1647.48 682.526 L1646.93 682.526 L1646.37 682.526 L1645.81 682.526 L1645.25 682.526 L1644.69 682.526 L1644.13 682.526 L1643.57 682.526 L1643.01 682.526 L1642.45 682.526 L1641.89 682.526 L1641.33 682.526 L1640.77 682.526 L1640.21 682.526 L1639.66 682.526 L1639.1 682.526 L1638.54 682.526 L1637.98 682.526 L1637.42 682.526 L1636.86 682.526 L1636.3 682.526 L1635.74 682.526 L1635.18 682.526 L1634.62 682.526 L1634.06 682.526 L1633.5 682.526 L1632.94 682.526 L1632.39 682.526 L1631.83 682.526 L1631.27 682.526 L1630.71 682.526 L1630.15 682.526 L1629.59 682.526 L1629.03 682.526 L1628.47 682.526 L1627.91 682.526 L1627.35 682.526 L1626.79 682.526 L1626.23 682.526 L1625.67 682.526 L1625.11 682.526 L1624.56 682.526 L1624 682.526 L1623.44 682.526 L1622.88 682.526 L1622.32 682.526 L1621.76 682.526 L1621.2 682.526 L1620.64 682.526 L1620.08 682.526 L1619.52 682.526 L1618.96 682.526 L1618.4 682.526 L1617.84 682.526 L1617.29 682.526 L1616.73 682.526 L1616.17 682.526 L1615.61 682.526 L1615.05 682.526 L1614.49 682.526 L1613.93 682.526 L1613.37 682.526 L1612.81 682.526 L1612.25 682.526 L1611.69 682.526 L1611.13 682.526 L1610.57 682.526 L1610.02 682.526 L1609.46 682.526 L1608.9 682.526 L1608.34 682.526 L1607.78 682.526 L1607.22 682.526 L1606.66 682.526 L1606.1 682.526 L1605.54 682.526 L1604.98 682.526 L1604.42 682.526 L1603.86 682.526 L1603.3 682.526 L1602.74 682.526 L1602.19 682.526 L1601.63 682.526 L1601.07 682.526 L1600.51 682.526 L1599.95 682.526 L1599.39 682.526 L1598.83 682.526 L1598.27 682.526 L1597.71 682.526 L1597.15 682.526 L1596.59 682.526 L1596.03 682.526 L1595.47 682.526 L1594.92 682.526 L1594.36 682.526 L1593.8 682.526 L1593.24 682.526 L1592.68 682.526 L1592.12 682.526 L1591.56 682.526 L1591 682.526 L1590.44 682.526 L1589.88 682.526 L1589.32 682.526 L1588.76 682.526 L1588.2 682.526 L1587.65 682.526 L1587.09 682.526 L1586.53 682.526 L1585.97 682.526 L1585.41 682.526 L1584.85 682.526 L1584.29 682.526 L1583.73 682.526 L1583.17 682.526 L1582.61 682.526 L1582.05 682.526 L1581.49 682.526 L1580.93 682.526 L1580.37 682.526 L1579.82 682.526 L1579.26 682.526 L1578.7 682.526 L1578.14 682.526 L1577.58 682.526 L1577.02 682.526 L1576.46 682.526 L1575.9 682.526 L1575.34 682.526 L1574.78 682.526 L1574.22 682.526 L1573.66 682.526 L1573.1 682.526 L1572.55 682.526 L1571.99 682.526 L1571.43 682.526 L1570.87 682.526 L1570.31 682.526 L1569.75 682.526 L1569.19 682.526 L1568.63 682.526 L1568.07 682.526 L1567.51 682.526 L1566.95 682.526 L1566.39 682.526 L1565.83 682.526 L1565.28 682.526 L1564.72 682.526 L1564.16 682.526 L1563.6 682.526 L1563.04 682.526 L1562.48 682.526 L1561.92 682.526 L1561.36 682.526 L1560.8 682.526 L1560.24 682.526 L1559.68 682.526 L1559.12 682.526 L1558.56 682.526 L1558 682.526 L1557.45 682.526 L1556.89 682.526 L1556.33 682.526 L1555.77 682.526 L1555.21 682.526 L1554.65 682.526 L1554.09 682.526 L1553.53 682.526 L1552.97 682.526 L1552.41 682.526 L1551.85 682.526 L1551.29 682.526 L1550.73 682.526 L1550.18 682.526 L1549.62 682.526 L1549.06 682.526 L1548.5 682.526 L1547.94 682.526 L1547.38 682.526 L1546.82 682.526 L1546.26 682.526 L1545.7 682.526 L1545.14 682.526 L1544.58 682.526 L1544.02 682.526 L1543.46 682.526 L1542.9 682.526 L1542.35 682.526 L1541.79 682.526 L1541.23 682.526 L1540.67 682.526 L1540.11 682.526 L1539.55 682.526 L1538.99 682.526 L1538.43 682.526 L1537.87 682.526 L1537.31 682.526 L1536.75 682.526 L1536.19 682.526 L1535.63 682.526 L1535.08 682.526 L1534.52 682.526 L1533.96 682.526 L1533.4 682.526 L1532.84 682.526 L1532.28 682.526 L1531.72 682.526 L1531.16 682.526 L1530.6 682.526 L1530.04 682.526 L1529.48 682.526 L1528.92 682.526 L1528.36 682.526 L1527.81 682.526 L1527.25 682.526 L1526.69 682.526 L1526.13 682.526 L1525.57 682.526 L1525.01 682.526 L1524.45 682.526 L1523.89 682.526 L1523.33 682.526 L1522.77 682.526 L1522.21 682.526 L1521.65 682.526 L1521.09 682.526 L1520.53 682.526 L1519.98 682.526 L1519.42 682.526 L1518.86 682.526 L1518.3 682.526 L1517.74 682.526 L1517.18 682.526 L1516.62 682.526 L1516.06 682.526 L1515.5 682.526 L1514.94 682.526 L1514.38 682.526 L1513.82 682.526 L1513.26 682.526 L1512.71 682.526 L1512.15 682.526 L1511.59 682.526 L1511.03 682.526 L1510.47 682.526 L1509.91 682.526 L1509.35 682.526 L1508.79 682.526 L1508.23 682.526 L1507.67 682.526 L1507.11 682.526 L1506.55 682.526 L1505.99 682.526 L1505.44 682.526 L1504.88 682.526 L1504.32 682.526 L1503.76 682.526 L1503.2 682.526 L1502.64 682.526 L1502.08 682.526 L1501.52 682.526 L1500.96 682.526 L1500.4 682.526 L1499.84 682.526 L1499.28 682.526 L1498.72 682.526 L1498.16 682.526 L1497.61 682.526 L1497.05 682.526 L1496.49 682.526 L1495.93 682.526 L1495.37 682.526 L1494.81 682.526 L1494.25 682.526 L1493.69 682.526 L1493.13 682.526 L1492.57 682.526 L1492.01 682.526 L1491.45 682.526 L1490.89 682.526 L1490.34 682.526 L1489.78 682.526 L1489.22 682.526 L1488.66 682.526 L1488.1 682.526 L1487.54 682.526 L1486.98 682.526 L1486.42 682.526 L1485.86 682.526 L1485.3 682.526 L1484.74 682.526 L1484.18 682.526 L1483.62 682.526 L1483.07 682.526 L1482.51 682.526 L1481.95 682.526 L1481.39 682.526 L1480.83 682.526 L1480.27 682.526 L1479.71 682.526 L1479.15 682.526 L1478.59 682.526 L1478.03 682.526 L1477.47 682.526 L1476.91 682.526 L1476.35 682.526 L1475.79 682.526 L1475.24 682.526 L1474.68 682.526 L1474.12 682.526 L1473.56 682.526 L1473 682.526 L1472.44 682.526 L1471.88 682.526 L1471.32 682.526 L1470.76 682.526 L1470.2 682.526 L1469.64 682.526 L1469.08 682.526 L1468.52 682.526 L1467.97 682.526 L1467.41 682.526 L1466.85 682.526 L1466.29 682.526 L1465.73 682.526 L1465.17 682.526 L1464.61 682.526 L1464.05 682.526 L1463.49 682.526 L1462.93 682.526 L1462.37 682.526 L1461.81 682.526 L1461.25 682.526 L1460.7 682.526 L1460.14 682.526 L1459.58 682.526 L1459.02 682.526 L1458.46 682.526 L1457.9 682.526 L1457.34 682.526 L1456.78 682.526 L1456.22 682.526 L1455.66 682.526 L1455.1 682.526 L1454.54 682.526 L1453.98 682.526 L1453.42 682.526 L1452.87 682.526 L1452.31 682.526 L1451.75 682.526 L1451.19 682.526 L1450.63 682.526 L1450.07 682.526 L1449.51 682.526 L1448.95 682.526 L1448.39 682.526 L1447.83 682.526 L1447.27 682.526 L1446.71 682.526 L1446.15 682.526 L1445.6 682.526 L1445.04 682.526 L1444.48 682.526 L1443.92 682.526 L1443.36 682.526 L1442.8 682.526 L1442.24 682.526 L1441.68 682.526 L1441.12 682.526 L1440.56 682.526 L1440 682.526 L1439.44 682.526 L1438.88 682.526 L1438.33 682.526 L1437.77 682.526 L1437.21 682.526 L1436.65 682.526 L1436.09 682.526 L1435.53 682.526 L1434.97 682.526 L1434.41 682.526 L1433.85 682.526 L1433.29 682.526 L1432.73 682.526 L1432.17 682.526 L1431.61 682.526 L1431.05 682.526 L1430.5 682.526 L1429.94 682.526 L1429.38 682.526 L1428.82 682.526 L1428.26 682.526 L1427.7 682.526 L1427.14 682.526 L1426.58 682.526 L1426.02 682.526 L1425.46 682.526 L1424.9 682.526 L1424.34 682.526 L1423.78 682.526 L1423.23 682.526 L1422.67 682.526 L1422.11 682.526 L1421.55 682.526 L1420.99 682.526 L1420.43 682.526 L1419.87 682.526 L1419.31 682.526 L1418.75 682.526 L1418.19 682.526 L1417.63 682.526 L1417.07 682.526 L1416.51 682.526 L1415.95 682.526 L1415.4 682.526 L1414.84 682.526 L1414.28 682.526 L1413.72 682.526 L1413.16 682.526 L1412.6 682.526 L1412.04 682.526 L1411.48 682.526 L1410.92 682.526 L1410.36 682.526 L1409.8 682.526 L1409.24 682.526 L1408.68 682.526 L1408.13 682.526 L1407.57 682.526 L1407.01 682.526 L1406.45 682.526 L1405.89 682.526 L1405.33 682.526 L1404.77 682.526 L1404.21 682.526 L1403.65 682.526 L1403.09 682.526 L1402.53 682.526 L1401.97 682.526 L1401.41 682.526 L1400.86 682.526 L1400.3 682.526 L1399.74 682.526 L1399.18 682.526 L1398.62 682.526 L1398.06 682.526 L1397.5 682.526 L1396.94 682.526 L1396.38 682.526 L1395.82 682.526 L1395.26 682.526 L1394.7 682.526 L1394.14 682.526 L1393.58 682.526 L1393.03 682.526 L1392.47 682.526 L1391.91 682.526 L1391.35 682.526 L1390.79 682.526 L1390.23 682.526 L1389.67 682.526 L1389.11 682.526 L1388.55 682.526 L1387.99 682.526 L1387.43 682.526 L1386.87 682.526 L1386.31 682.526 L1385.76 682.526 L1385.2 682.526 L1384.64 682.526 L1384.08 682.526 L1383.52 682.526 L1382.96 682.526 L1382.4 682.526 L1381.84 682.526 L1381.28 682.526 L1380.72 682.526 L1380.16 682.526 L1379.6 682.526 L1379.04 682.526 L1378.49 682.526 L1377.93 682.526 L1377.37 682.526 L1376.81 682.526 L1376.25 682.526 L1375.69 682.526 L1375.13 682.526 L1374.57 682.526 L1374.01 682.526 L1373.45 682.526 L1372.89 682.526 L1372.33 682.526 L1371.77 682.526 L1371.21 682.526 L1370.66 682.526 L1370.1 682.526 L1369.54 682.526 L1368.98 682.526 L1368.42 682.526 L1367.86 682.526 L1367.3 682.526 L1366.74 682.526 L1366.18 682.526 L1365.62 682.526 L1365.06 682.526 L1364.5 682.526 L1363.94 682.526 L1363.39 682.526 L1362.83 682.526 L1362.27 682.526 L1361.71 682.526 L1361.15 682.526 L1360.59 682.526 L1360.03 682.526 L1359.47 682.526 L1358.91 682.526 L1358.35 682.526 L1357.79 682.526 L1357.23 682.526 L1356.67 682.526 L1356.12 682.526 L1355.56 682.526 L1355 682.526 L1354.44 682.526 L1353.88 682.526 L1353.32 682.526 L1352.76 682.526 L1352.2 682.526 L1351.64 682.526 L1351.08 682.526 L1350.52 682.526 L1349.96 682.526 L1349.4 682.526 L1348.84 682.526 L1348.29 682.526 L1347.73 682.526 L1347.17 682.526 L1346.61 682.526 L1346.05 682.526 L1345.49 682.526 L1344.93 682.526 L1344.37 682.526 L1343.81 682.526 L1343.25 682.526 L1342.69 682.526 L1342.13 682.526 L1341.57 682.526 L1341.02 682.526 L1340.46 682.526 L1339.9 682.526 L1339.34 682.526 L1338.78 682.526 L1338.22 682.526 L1337.66 682.526 L1337.1 682.526 L1336.54 682.526 L1335.98 682.526 L1335.42 682.526 L1334.86 682.526 L1334.3 682.526 L1333.75 682.526 L1333.19 682.526 L1332.63 682.526 L1332.07 682.526 L1331.51 682.526 L1330.95 682.526 L1330.39 682.526 L1329.83 682.526 L1329.27 682.526 L1328.71 682.526 L1328.15 682.526 L1327.59 682.526 L1327.03 682.526 L1326.47 682.526 L1325.92 682.526 L1325.36 682.526 L1324.8 682.526 L1324.24 682.526 L1323.68 682.526 L1323.12 682.526 L1322.56 682.526 L1322 682.526 L1321.44 682.526 L1320.88 682.526 L1320.32 682.526 L1319.76 682.526 L1319.2 682.526 L1318.65 682.526 L1318.09 682.526 L1317.53 682.526 L1316.97 682.526 L1316.41 682.526 L1315.85 682.526 L1315.29 682.526 L1314.73 682.526 L1314.17 682.526 L1313.61 682.526 L1313.05 682.526 L1312.49 682.526 L1311.93 682.526 L1311.38 682.526 L1310.82 682.526 L1310.26 682.526 L1309.7 682.526 L1309.14 682.526 L1308.58 682.526 L1308.02 682.526 L1307.46 682.526 L1306.9 682.526 L1306.34 682.526 L1305.78 682.526 L1305.22 682.526 L1304.66 682.526 L1304.1 682.526 L1303.55 682.526 L1302.99 682.526 L1302.43 682.526 L1301.87 682.526 L1301.31 682.526 L1300.75 682.526 L1300.19 682.526 L1299.63 682.526 L1299.07 682.526 L1298.51 682.526 L1297.95 682.526 L1297.39 682.526 L1296.83 682.526 L1296.28 682.526 L1295.72 682.526 L1295.16 682.526 L1294.6 682.526 L1294.04 682.526 L1293.48 682.526 L1292.92 682.526 L1292.36 682.526 L1291.8 682.526 L1291.24 682.526 L1290.68 682.526 L1290.12 682.526 L1289.56 682.526 L1289 682.526 L1288.45 682.526 L1287.89 682.526 L1287.33 682.526 L1286.77 682.526 L1286.21 682.526 L1285.65 682.526 L1285.09 682.526 L1284.53 682.526 L1283.97 682.526 L1283.41 682.526 L1282.85 682.526 L1282.29 682.526 L1281.73 682.526 L1281.18 682.526 L1280.62 682.526 L1280.06 682.526 L1279.5 682.526 L1278.94 682.526 L1278.38 682.526 L1277.82 682.526 L1277.26 682.526 L1276.7 682.526 L1276.14 682.526 L1275.58 682.526 L1275.02 682.526 L1274.46 682.526 L1273.91 682.526 L1273.35 682.526 L1272.79 682.526 L1272.23 682.526 L1271.67 682.526 L1271.11 682.526 L1270.55 682.526 L1269.99 682.526 L1269.43 682.526 L1268.87 682.526 L1268.31 682.526 L1267.75 682.526 L1267.19 682.526 L1266.63 682.526 L1266.08 682.526 L1265.52 682.526 L1264.96 682.526 L1264.4 682.526 L1263.84 682.526 L1263.28 682.526 L1262.72 682.526 L1262.16 682.526 L1261.6 682.526 L1261.04 682.526 L1260.48 682.526 L1259.92 682.526 L1259.36 682.526 L1258.81 682.526 L1258.25 682.526 L1257.69 682.526 L1257.13 682.526 L1256.57 682.526 L1256.01 682.526 L1255.45 682.526 L1254.89 682.526 L1254.33 682.526 L1253.77 682.526 L1253.21 682.526 L1252.65 682.526 L1252.09 682.526 L1251.54 682.526 L1250.98 682.526 L1250.42 682.526 L1249.86 682.526 L1249.3 682.526 L1248.74 682.526 L1248.18 682.526 L1247.62 682.526 L1247.06 682.526 L1246.5 682.526 L1245.94 682.526 L1245.38 682.526 L1244.82 682.526 L1244.26 682.526 L1243.71 682.526 L1243.15 682.526 L1242.59 682.526 L1242.03 682.526 L1241.47 682.526 L1240.91 682.526 L1240.35 682.526 L1239.79 682.526 L1239.23 682.526 L1238.67 682.526 L1238.11 682.526 L1237.55 682.526 L1236.99 682.526 L1236.44 682.526 L1235.88 682.526 L1235.32 682.526 L1234.76 682.526 L1234.2 682.526 L1233.64 682.526 L1233.08 682.526 L1232.52 682.526 L1231.96 682.526 L1231.4 682.526 L1230.84 682.526 L1230.28 682.526 L1229.72 682.526 L1229.17 682.526 L1228.61 682.526 L1228.05 682.526 L1227.49 682.526 L1226.93 682.526 L1226.37 682.526 L1225.81 682.526 L1225.25 682.526 L1224.69 682.526 L1224.13 682.526 L1223.57 682.526 L1223.01 682.526 L1222.45 682.526 L1221.89 682.526 L1221.34 682.526 L1220.78 682.526 L1220.22 682.526 L1219.66 682.526 L1219.1 682.526 L1218.54 682.526 L1217.98 682.526 L1217.42 682.526 L1216.86 682.526 L1216.3 682.526 L1215.74 682.526 L1215.18 682.526 L1214.62 682.526 L1214.07 682.526 L1213.51 682.526 L1212.95 682.526 L1212.39 682.526 L1211.83 682.526 L1211.27 682.526 L1210.71 682.526 L1210.15 682.526 L1209.59 682.526 L1209.03 682.526 L1208.47 682.526 L1207.91 682.526 L1207.35 682.526 L1206.8 682.526 L1206.24 682.526 L1205.68 682.526 L1205.12 682.526 L1204.56 682.526 L1204 682.526 L1203.44 682.526 L1202.88 682.526 L1202.32 682.526 L1201.76 682.526 L1201.2 682.526 L1200.64 682.526 L1200.08 682.526 L1199.52 682.526 L1198.97 682.526 L1198.41 682.526 L1197.85 682.526 L1197.29 682.526 L1196.73 682.526 L1196.17 682.526 L1195.61 682.526 L1195.05 682.526 L1194.49 682.526 L1193.93 682.526 L1193.37 682.526 L1192.81 682.526 L1192.25 682.526 L1191.7 682.526 L1191.14 682.526 L1190.58 682.526 L1190.02 682.526 L1189.46 682.526 L1188.9 682.526 L1188.34 682.526 L1187.78 682.526 L1187.22 682.526 L1186.66 682.526 L1186.1 682.526 L1185.54 682.526 L1184.98 682.526 L1184.43 682.526 L1183.87 682.526 L1183.31 682.526 L1182.75 682.526 L1182.19 682.526 L1181.63 682.526 L1181.07 682.526 L1180.51 682.526 L1179.95 682.526 L1179.39 682.526 L1178.83 682.526 L1178.27 682.526 L1177.71 682.526 L1177.15 682.526 L1176.6 682.526 L1176.04 682.526 L1175.48 682.526 L1174.92 682.526 L1174.36 682.526 L1173.8 682.526 L1173.24 682.526 L1172.68 682.526 L1172.12 682.526 L1171.56 682.526 L1171 682.526 L1170.44 682.526 L1169.88 682.526 L1169.33 682.526 L1168.77 682.526 L1168.21 682.526 L1167.65 682.526 L1167.09 682.526 L1166.53 682.526 L1165.97 682.526 L1165.41 682.526 L1164.85 682.526 L1164.29 682.526 L1163.73 682.526 L1163.17 682.526 L1162.61 682.526 L1162.05 682.526 L1161.5 682.526 L1160.94 682.526 L1160.38 682.526 L1159.82 682.526 L1159.26 682.526 L1158.7 682.526 L1158.14 682.526 L1157.58 682.526 L1157.02 682.526 L1156.46 682.526 L1155.9 682.526 L1155.34 682.526 L1154.78 682.526 L1154.23 682.526 L1153.67 682.526 L1153.11 682.526 L1152.55 682.526 L1151.99 682.526 L1151.43 682.526 L1150.87 682.526 L1150.31 682.526 L1149.75 682.526 L1149.19 682.526 L1148.63 682.526 L1148.07 682.526 L1147.51 682.526 L1146.96 682.526 L1146.4 682.526 L1145.84 682.526 L1145.28 682.526 L1144.72 682.526 L1144.16 682.526 L1143.6 682.526 L1143.04 682.526 L1142.48 682.526 L1141.92 682.526 L1141.36 682.526 L1140.8 682.526 L1140.24 682.526 L1139.68 682.526 L1139.13 682.526 L1138.57 682.526 L1138.01 682.526 L1137.45 682.526 L1136.89 682.526 L1136.33 682.526 L1135.77 682.526 L1135.21 682.526 L1134.65 682.526 L1134.09 682.526 L1133.53 682.526 L1132.97 682.526 L1132.41 682.526 L1131.86 682.526 L1131.3 682.526 L1130.74 682.526 L1130.18 682.526 L1129.62 682.526 L1129.06 682.526 L1128.5 682.526 L1127.94 682.526 L1127.38 682.526 L1126.82 682.526 L1126.26 682.526 L1125.7 682.526 L1125.14 682.526 L1124.59 682.526 L1124.03 682.526 L1123.47 682.526 L1122.91 682.526 L1122.35 682.526 L1121.79 682.526 L1121.23 682.526 L1120.67 682.526 L1120.11 682.526 L1119.55 682.526 L1118.99 682.526 L1118.43 682.526 L1117.87 682.526 L1117.31 682.526 L1116.76 682.526 L1116.2 682.526 L1115.64 682.526 L1115.08 682.526 L1114.52 682.526 L1113.96 682.526 L1113.4 682.526 L1112.84 682.526 L1112.28 682.526 L1111.72 682.526 L1111.16 682.526 L1110.6 682.526 L1110.04 682.526 L1109.49 682.526 L1108.93 682.526 L1108.37 682.526 L1107.81 682.526 L1107.25 682.526 L1106.69 682.526 L1106.13 682.526 L1105.57 682.526 L1105.01 682.526 L1104.45 682.526 L1103.89 682.526 L1103.33 682.526 L1102.77 682.526 L1102.22 682.526 L1101.66 682.526 L1101.1 682.526 L1100.54 682.526 L1099.98 682.526 L1099.42 682.526 L1098.86 682.526 L1098.3 682.526 L1097.74 682.526 L1097.18 682.526 L1096.62 682.526 L1096.06 682.526 L1095.5 682.526 L1094.94 682.526 L1094.39 682.526 L1093.83 682.526 L1093.27 682.526 L1092.71 682.526 L1092.15 682.526 L1091.59 682.526 L1091.03 682.526 L1090.47 682.526 L1089.91 682.526 L1089.35 682.526 L1088.79 682.526 L1088.23 682.526 L1087.67 682.526 L1087.12 682.526 L1086.56 682.526 L1086 682.526 L1085.44 682.526 L1084.88 682.526 L1084.32 682.526 L1083.76 682.526 L1083.2 682.526 L1082.64 682.526 L1082.08 682.526 L1081.52 682.526 L1080.96 682.526 L1080.4 682.526 L1079.85 682.526 L1079.29 682.526 L1078.73 682.526 L1078.17 682.526 L1077.61 682.526 L1077.05 682.526 L1076.49 682.526 L1075.93 682.526 L1075.37 682.526 L1074.81 682.526 L1074.25 682.526 L1073.69 682.526 L1073.13 682.526 L1072.57 682.526 L1072.02 682.526 L1071.46 682.526 L1070.9 682.526 L1070.34 682.526 L1069.78 682.526 L1069.22 682.526 L1068.66 682.526 L1068.1 682.526 L1067.54 682.526 L1066.98 682.526 L1066.42 682.526 L1065.86 682.526 L1065.3 682.526 L1064.75 682.526 L1064.19 682.526 L1063.63 682.526 L1063.07 682.526 L1062.51 682.526 L1061.95 682.526 L1061.39 682.526 L1060.83 682.526 L1060.27 682.526 L1059.71 682.526 L1059.15 682.526 L1058.59 682.526 L1058.03 682.526 L1057.48 682.526 L1056.92 682.526 L1056.36 682.526 L1055.8 682.526 L1055.24 682.526 L1054.68 682.526 L1054.12 682.526 L1053.56 682.526 L1053 682.526 L1052.44 682.526 L1051.88 682.526 L1051.32 682.526 L1050.76 682.526 L1050.2 682.526 L1049.65 682.526 L1049.09 682.526 L1048.53 682.526 L1047.97 682.526 L1047.41 682.526 L1046.85 682.526 L1046.29 682.526 L1045.73 682.526 L1045.17 682.526 L1044.61 682.526 L1044.05 682.526 L1043.49 682.526 L1042.93 682.526 L1042.38 682.526 L1041.82 682.526 L1041.26 682.526 L1040.7 682.526 L1040.14 682.526 L1039.58 682.526 L1039.02 682.526 L1038.46 682.526 L1037.9 682.526 L1037.34 682.526 L1036.78 682.526 L1036.22 682.526 L1035.66 682.526 L1035.1 682.526 L1034.55 682.526 L1033.99 682.526 L1033.43 682.526 L1032.87 682.526 L1032.31 682.526 L1031.75 682.526 L1031.19 682.526 L1030.63 682.526 L1030.07 682.526 L1029.51 682.526 L1028.95 682.526 L1028.39 682.526 L1027.83 682.526 L1027.28 682.526 L1026.72 682.526 L1026.16 682.526 L1025.6 682.526 L1025.04 682.526 L1024.48 682.526 L1023.92 682.526 L1023.36 682.526 L1022.8 682.526 L1022.24 682.526 L1021.68 682.526 L1021.12 682.526 L1020.56 682.526 L1020.01 682.526 L1019.45 682.526 L1018.89 682.526 L1018.33 682.526 L1017.77 682.526 L1017.21 682.526 L1016.65 682.526 L1016.09 682.526 L1015.53 682.526 L1014.97 682.526 L1014.41 682.526 L1013.85 682.526 L1013.29 682.526 L1012.73 682.526 L1012.18 682.526 L1011.62 682.526 L1011.06 682.526 L1010.5 682.526 L1009.94 682.526 L1009.38 682.526 L1008.82 682.526 L1008.26 682.526 L1007.7 682.526 L1007.14 682.526 L1006.58 682.526 L1006.02 682.526 L1005.46 682.526 L1004.91 682.526 L1004.35 682.526 L1003.79 682.526 L1003.23 682.526 L1002.67 682.526 L1002.11 682.526 L1001.55 682.526 L1000.99 682.526 L1000.43 682.526 L999.872 682.526 L999.313 682.526 L998.754 682.526 L998.194 682.526 L997.635 682.526 L997.076 682.526 L996.517 682.526 L995.957 682.526 L995.398 682.526 L994.839 682.526 L994.28 682.526 L993.72 682.526 L993.161 682.526 L992.602 682.526 L992.043 682.526 L991.483 682.526 L990.924 682.526 L990.365 682.526 L989.806 682.526 L989.246 682.526 L988.687 682.526 L988.128 682.526 L987.569 682.526 L987.009 682.526 L986.45 682.526 L985.891 682.526 L985.332 682.526 L984.772 682.526 L984.213 682.526 L983.654 682.526 L983.095 682.526 L982.535 682.526 L981.976 682.526 L981.417 682.526 L980.858 682.526 L980.298 682.526 L979.739 682.526 L979.18 682.526 L978.621 682.526 L978.061 682.526 L977.502 682.526 L976.943 682.526 L976.384 682.526 L975.824 682.526 L975.265 682.526 L974.706 682.526 L974.147 682.526 L973.587 682.526 L973.028 682.526 L972.469 682.526 L971.91 682.526 L971.35 682.526 L970.791 682.526 L970.232 682.526 L969.673 682.526 L969.113 682.526 L968.554 682.526 L967.995 682.526 L967.436 682.526 L966.876 682.526 L966.317 682.526 L965.758 682.526 L965.199 682.526 L964.639 682.526 L964.08 682.526 L963.521 682.526 L962.962 682.526 L962.402 682.526 L961.843 682.526 L961.284 682.526 L960.725 682.526 L960.165 682.526 L959.606 682.526 L959.047 682.526 L958.488 682.526 L957.928 682.526 L957.369 682.526 L956.81 682.526 L956.251 682.526 L955.691 682.526 L955.132 682.526 L954.573 682.526 L954.014 682.526 L953.454 682.526 L952.895 682.526 L952.336 682.526 L951.777 682.526 L951.217 682.526 L950.658 682.526 L950.099 682.526 L949.54 682.526 L948.98 682.526 L948.421 682.526 L947.862 682.526 L947.303 682.526 L946.743 682.526 L946.184 682.526 L945.625 682.526 L945.066 682.526 L944.506 682.526 L943.947 682.526 L943.388 682.526 L942.829 682.526 L942.269 682.526 L941.71 682.526 L941.151 682.526 L940.592 682.526 L940.032 682.526 L939.473 682.526 L938.914 682.526 L938.355 682.526 L937.795 682.526 L937.236 682.526 L936.677 682.526 L936.118 682.526 L935.558 682.526 L934.999 682.526 L934.44 682.526 L933.881 682.526 L933.321 682.526 L932.762 682.526 L932.203 682.526 L931.644 682.526 L931.084 682.526 L930.525 682.526 L929.966 682.526 L929.406 682.526 L928.847 682.526 L928.288 682.526 L927.729 682.526 L927.169 682.526 L926.61 682.526 L926.051 682.526 L925.492 682.526 L924.932 682.526 L924.373 682.526 L923.814 682.526 L923.255 682.526 L922.695 682.526 L922.136 682.526 L921.577 682.526 L921.018 682.526 L920.458 682.526 L919.899 682.526 L919.34 682.526 L918.781 682.526 L918.221 682.526 L917.662 682.526 L917.103 682.526 L916.544 682.526 L915.984 682.526 L915.425 682.526 L914.866 682.526 L914.307 682.526 L913.747 682.526 L913.188 682.526 L912.629 682.526 L912.07 682.526 L911.51 682.526 L910.951 682.526 L910.392 682.526 L909.833 682.526 L909.273 682.526 L908.714 682.526 L908.155 682.526 L907.596 682.526 L907.036 682.526 L906.477 682.526 L905.918 682.526 L905.359 682.526 L904.799 682.526 L904.24 682.526 L903.681 682.526 L903.122 682.526 L902.562 682.526 L902.003 682.526 L901.444 682.526 L900.885 682.526 L900.325 682.526 L899.766 682.526 L899.207 682.526 L898.648 682.526 L898.088 682.526 L897.529 682.526 L896.97 682.526 L896.411 682.526 L895.851 682.526 L895.292 682.526 L894.733 682.526 L894.174 682.526 L893.614 682.526 L893.055 682.526 L892.496 682.526 L891.937 682.526 L891.377 682.526 L890.818 682.526 L890.259 682.526 L889.7 682.526 L889.14 682.526 L888.581 682.526 L888.022 682.526 L887.463 682.526 L886.903 682.526 L886.344 682.526 L885.785 682.526 L885.226 682.526 L884.666 682.526 L884.107 682.526 L883.548 682.526 L882.989 682.526 L882.429 682.526 L881.87 682.526 L881.311 682.526 L880.752 682.526 L880.192 682.526 L879.633 682.526 L879.074 682.526 L878.515 682.526 L877.955 682.526 L877.396 682.526 L876.837 682.526 L876.278 682.526 L875.718 682.526 L875.159 682.526 L874.6 682.526 L874.041 682.526 L873.481 682.526 L872.922 682.526 L872.363 682.526 L871.804 682.526 L871.244 682.526 L870.685 682.526 L870.126 682.526 L869.567 682.526 L869.007 682.526 L868.448 682.526 L867.889 682.526 L867.33 682.526 L866.77 682.526 L866.211 682.526 L865.652 682.526 L865.093 682.526 L864.533 682.526 L863.974 682.526 L863.415 682.526 L862.856 682.526 L862.296 682.526 L861.737 682.526 L861.178 682.526 L860.619 682.526 L860.059 682.526 L859.5 682.526 L858.941 682.526 L858.382 682.526 L857.822 682.526 L857.263 682.526 L856.704 682.526 L856.145 682.526 L855.585 682.526 L855.026 682.526 L854.467 682.526 L853.908 682.526 L853.348 682.526 L852.789 682.526 L852.23 682.526 L851.671 682.526 L851.111 682.526 L850.552 682.526 L849.993 682.526 L849.434 682.526 L848.874 682.526 L848.315 682.526 L847.756 682.526 L847.197 682.526 L846.637 682.526 L846.078 682.526 L845.519 682.526 L844.96 682.526 L844.4 682.526 L843.841 682.526 L843.282 682.526 L842.723 682.526 L842.163 682.526 L841.604 682.526 L841.045 682.526 L840.486 682.526 L839.926 682.526 L839.367 682.526 L838.808 682.526 L838.249 682.526 L837.689 682.526 L837.13 682.526 L836.571 682.526 L836.012 682.526 L835.452 682.526 L834.893 682.526 L834.334 682.526 L833.775 682.526 L833.215 682.526 L832.656 682.526 L832.097 682.526 L831.538 682.526 L830.978 682.526 L830.419 682.526 L829.86 682.526 L829.301 682.526 L828.741 682.526 L828.182 682.526 L827.623 682.526 L827.064 682.526 L826.504 682.526 L825.945 682.526 L825.386 682.526 L824.827 682.526 L824.267 682.526 L823.708 682.526 L823.149 682.526 L822.59 682.526 L822.03 682.526 L821.471 682.526 L820.912 682.526 L820.353 682.526 L819.793 682.526 L819.234 682.526 L818.675 682.526 L818.116 682.526 L817.556 682.526 L816.997 682.526 L816.438 682.526 L815.879 682.526 L815.319 682.526 L814.76 682.526 L814.201 682.526 L813.642 682.526 L813.082 682.526 L812.523 682.526 L811.964 682.526 L811.405 682.526 L810.845 682.526 L810.286 682.526 L809.727 682.526 L809.168 682.526 L808.608 682.526 L808.049 682.526 L807.49 682.526 L806.931 682.526 L806.371 682.526 L805.812 682.526 L805.253 682.526 L804.693 682.526 L804.134 682.526 L803.575 682.526 L803.016 682.526 L802.456 682.526 L801.897 682.526 L801.338 682.526 L800.779 682.526 L800.219 682.526 L799.66 682.526 L799.101 682.526 L798.542 682.526 L797.982 682.526 L797.423 682.526 L796.864 682.526 L796.305 682.526 L795.745 682.526 L795.186 682.526 L794.627 682.526 L794.068 682.526 L793.508 682.526 L792.949 682.526 L792.39 682.526 L791.831 682.526 L791.271 682.526 L790.712 682.526 L790.153 682.526 L789.594 682.526 L789.034 682.526 L788.475 682.526 L787.916 682.526 L787.357 682.526 L786.797 682.526 L786.238 682.526 L785.679 682.526 L785.12 682.526 L784.56 682.526 L784.001 682.526 L783.442 682.526 L782.883 682.526 L782.323 682.526 L781.764 682.526 L781.205 682.526 L780.646 682.526 L780.086 682.526 L779.527 682.526 L778.968 682.526 L778.409 682.526 L777.849 682.526 L777.29 682.526 L776.731 682.526 L776.172 682.526 L775.612 682.526 L775.053 682.526 L774.494 682.526 L773.935 682.526 L773.375 682.526 L772.816 682.526 L772.257 682.526 L771.698 682.526 L771.138 682.526 L770.579 682.526 L770.02 682.526 L769.461 682.526 L768.901 682.526 L768.342 682.526 L767.783 682.526 L767.224 682.526 L766.664 682.526 L766.105 682.526 L765.546 682.526 L764.987 682.526 L764.427 682.526 L763.868 682.526 L763.309 682.526 L762.75 682.526 L762.19 682.526 L761.631 682.526 L761.072 682.526 L760.513 682.526 L759.953 682.526 L759.394 682.526 L758.835 682.526 L758.276 682.526 L757.716 682.526 L757.157 682.526 L756.598 682.526 L756.039 682.526 L755.479 682.526 L754.92 682.526 L754.361 682.526 L753.802 682.526 L753.242 682.526 L752.683 682.526 L752.124 682.526 L751.565 682.526 L751.005 682.526 L750.446 682.526 L749.887 682.526 L749.328 682.526 L748.768 682.526 L748.209 682.526 L747.65 682.526 L747.091 682.526 L746.531 682.526 L745.972 682.526 L745.413 682.526 L744.854 682.526 L744.294 682.526 L743.735 682.526 L743.176 682.526 L742.617 682.526 L742.057 682.526 L741.498 682.526 L740.939 682.526 L740.38 682.526 L739.82 682.526 L739.261 682.526 L738.702 682.526 L738.143 682.526 L737.583 682.526 L737.024 682.526 L736.465 682.526 L735.906 682.526 L735.346 682.526 L734.787 682.526 L734.228 682.526 L733.669 682.526 L733.109 682.526 L732.55 682.526 L731.991 682.526 L731.432 682.526 L730.872 682.526 L730.313 682.526 L729.754 682.526 L729.195 682.526 L728.635 682.526 L728.076 682.526 L727.517 682.526 L726.958 682.526 L726.398 682.526 L725.839 682.526 L725.28 682.526 L724.721 682.526 L724.161 682.526 L723.602 682.526 L723.043 682.526 L722.484 682.526 L721.924 682.526 L721.365 682.526 L720.806 682.526 L720.247 682.526  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip813)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.916 720.806,683.916 721.365,683.916 721.924,683.916 722.484,683.916 723.043,683.916 723.602,683.916 724.161,683.916 724.721,683.916 725.28,683.916 725.839,683.916 726.398,683.916 726.958,683.916 727.517,683.916 728.076,683.916 728.635,683.916 729.195,683.916 729.754,683.916 730.313,683.916 730.872,683.916 731.432,683.916 731.991,683.916 732.55,683.916 733.109,683.916 733.669,683.916 734.228,683.916 734.787,683.916 735.346,683.916 735.906,683.916 736.465,683.916 737.024,683.916 737.583,683.916 738.143,683.916 738.702,683.916 739.261,683.916 739.82,683.916 740.38,683.916 740.939,683.916 741.498,683.916 742.057,683.916 742.617,683.916 743.176,683.916 743.735,683.916 744.294,683.916 744.854,683.916 745.413,683.916 745.972,683.916 746.531,683.916 747.091,683.916 747.65,683.916 748.209,683.916 748.768,683.916 749.328,683.916 749.887,683.916 750.446,683.916 751.005,683.916 751.565,683.916 752.124,683.916 752.683,683.916 753.242,683.916 753.802,683.916 754.361,683.916 754.92,683.916 755.479,683.916 756.039,683.916 756.598,683.916 757.157,683.916 757.716,683.916 758.276,683.916 758.835,683.916 759.394,683.916 759.953,683.916 760.513,683.916 761.072,683.916 761.631,683.916 762.19,683.916 762.75,683.916 763.309,683.916 763.868,683.916 764.427,683.916 764.987,683.916 765.546,683.916 766.105,683.916 766.664,683.916 767.224,683.916 767.783,683.916 768.342,683.916 768.901,683.916 769.461,683.916 770.02,683.916 770.579,683.916 771.138,683.916 771.698,683.916 772.257,683.916 772.816,683.916 773.375,683.916 773.935,683.916 774.494,683.916 775.053,683.916 775.612,683.916 776.172,683.916 776.731,683.916 777.29,683.916 777.849,683.916 778.409,683.916 778.968,683.916 779.527,683.916 780.086,683.916 780.646,683.916 781.205,683.916 781.764,683.916 782.323,683.916 782.883,683.916 783.442,683.916 784.001,683.916 784.56,683.916 785.12,683.916 785.679,683.916 786.238,683.916 786.797,683.916 787.357,683.916 787.916,683.916 788.475,683.916 789.034,683.916 789.594,683.916 790.153,683.916 790.712,683.916 791.271,683.916 791.831,683.916 792.39,683.916 792.949,683.916 793.508,683.916 794.068,683.916 794.627,683.916 795.186,683.916 795.745,683.916 796.305,683.916 796.864,683.916 797.423,683.916 797.982,683.916 798.542,683.916 799.101,683.916 799.66,683.916 800.219,683.916 800.779,683.916 801.338,683.916 801.897,683.916 802.456,683.916 803.016,683.916 803.575,683.916 804.134,683.916 804.693,683.916 805.253,683.916 805.812,683.916 806.371,683.916 806.931,683.916 807.49,683.916 808.049,683.916 808.608,683.916 809.168,683.916 809.727,683.916 810.286,683.916 810.845,683.916 811.405,683.916 811.964,683.916 812.523,683.916 813.082,683.916 813.642,683.916 814.201,683.916 814.76,683.916 815.319,683.916 815.879,683.916 816.438,683.916 816.997,683.916 817.556,683.916 818.116,683.916 818.675,683.916 819.234,683.916 819.793,683.916 820.353,683.916 820.912,683.916 821.471,683.916 822.03,683.916 822.59,683.916 823.149,683.916 823.708,683.916 824.267,683.916 824.827,683.916 825.386,683.916 825.945,683.916 826.504,683.916 827.064,683.916 827.623,683.916 828.182,683.916 828.741,683.916 829.301,683.916 829.86,683.916 830.419,683.916 830.978,683.916 831.538,683.916 832.097,683.916 832.656,683.916 833.215,683.916 833.775,683.916 834.334,683.916 834.893,683.916 835.452,683.916 836.012,683.916 836.571,683.916 837.13,683.916 837.689,683.916 838.249,683.916 838.808,683.916 839.367,683.916 839.926,683.916 840.486,683.916 841.045,683.916 841.604,683.916 842.163,683.916 842.723,683.916 843.282,683.916 843.841,683.916 844.4,683.916 844.96,683.916 845.519,683.916 846.078,683.916 846.637,683.916 847.197,683.916 847.756,683.916 848.315,683.916 848.874,683.916 849.434,683.916 849.993,683.916 850.552,683.916 851.111,683.916 851.671,683.916 852.23,683.916 852.789,683.916 853.348,683.916 853.908,683.916 854.467,683.916 855.026,683.916 855.585,683.916 856.145,683.916 856.704,683.916 857.263,683.916 857.822,683.916 858.382,683.916 858.941,683.916 859.5,683.916 860.059,683.916 860.619,683.916 861.178,683.916 861.737,683.916 862.296,683.916 862.856,683.916 863.415,683.916 863.974,683.916 864.533,683.916 865.093,683.916 865.652,683.916 866.211,683.916 866.77,683.916 867.33,683.916 867.889,683.916 868.448,683.916 869.007,683.916 869.567,683.916 870.126,683.916 870.685,683.916 871.244,683.916 871.804,683.916 872.363,683.916 872.922,683.916 873.481,683.916 874.041,683.916 874.6,683.916 875.159,683.916 875.718,683.916 876.278,683.916 876.837,683.916 877.396,683.916 877.955,683.916 878.515,683.916 879.074,683.916 879.633,683.916 880.192,683.916 880.752,683.916 881.311,683.916 881.87,683.916 882.429,683.916 882.989,683.916 883.548,683.916 884.107,683.916 884.666,683.916 885.226,683.916 885.785,683.916 886.344,683.916 886.903,683.916 887.463,683.916 888.022,683.916 888.581,683.916 889.14,683.916 889.7,683.916 890.259,683.916 890.818,683.916 891.377,683.916 891.937,683.916 892.496,683.916 893.055,683.916 893.614,683.916 894.174,683.916 894.733,683.916 895.292,683.916 895.851,683.916 896.411,683.916 896.97,683.916 897.529,683.916 898.088,683.916 898.648,683.916 899.207,683.916 899.766,683.916 900.325,683.916 900.885,683.916 901.444,683.916 902.003,683.916 902.562,683.916 903.122,683.916 903.681,683.916 904.24,683.916 904.799,683.916 905.359,683.916 905.918,683.916 906.477,683.916 907.036,683.916 907.596,683.916 908.155,683.916 908.714,683.916 909.273,683.916 909.833,683.916 910.392,683.916 910.951,683.916 911.51,683.916 912.07,683.916 912.629,683.916 913.188,683.916 913.747,683.916 914.307,683.916 914.866,683.916 915.425,683.916 915.984,683.916 916.544,683.916 917.103,683.916 917.662,683.916 918.221,683.916 918.781,683.916 919.34,683.916 919.899,683.916 920.458,683.916 921.018,683.916 921.577,683.916 922.136,683.916 922.695,683.916 923.255,683.916 923.814,683.916 924.373,683.916 924.932,683.916 925.492,683.916 926.051,683.916 926.61,683.916 927.169,683.916 927.729,683.916 928.288,683.916 928.847,683.916 929.406,683.916 929.966,683.916 930.525,683.916 931.084,683.916 931.644,683.916 932.203,683.916 932.762,683.916 933.321,683.916 933.881,683.916 934.44,683.916 934.999,683.916 935.558,683.916 936.118,683.916 936.677,683.916 937.236,683.916 937.795,683.916 938.355,683.916 938.914,683.916 939.473,683.916 940.032,683.916 940.592,683.916 941.151,683.916 941.71,683.916 942.269,683.916 942.829,683.916 943.388,683.916 943.947,683.916 944.506,683.916 945.066,683.916 945.625,683.916 946.184,683.916 946.743,683.916 947.303,683.916 947.862,683.916 948.421,683.916 948.98,683.916 949.54,683.916 950.099,683.916 950.658,683.916 951.217,683.916 951.777,683.916 952.336,683.916 952.895,683.916 953.454,683.916 954.014,683.916 954.573,683.916 955.132,683.916 955.691,683.916 956.251,683.916 956.81,683.916 957.369,683.916 957.928,683.916 958.488,683.916 959.047,683.916 959.606,683.916 960.165,683.916 960.725,683.916 961.284,683.916 961.843,683.916 962.402,683.916 962.962,683.916 963.521,683.916 964.08,683.916 964.639,683.916 965.199,683.916 965.758,683.916 966.317,683.916 966.876,683.916 967.436,683.916 967.995,683.916 968.554,683.916 969.113,683.916 969.673,683.916 970.232,683.916 970.791,683.916 971.35,683.916 971.91,683.916 972.469,683.916 973.028,683.916 973.587,683.916 974.147,683.916 974.706,683.916 975.265,683.916 975.824,683.916 976.384,683.916 976.943,683.916 977.502,683.916 978.061,683.916 978.621,683.916 979.18,683.916 979.739,683.916 980.298,683.916 980.858,683.916 981.417,683.916 981.976,683.916 982.535,683.916 983.095,683.916 983.654,683.916 984.213,683.916 984.772,683.916 985.332,683.916 985.891,683.916 986.45,683.916 987.009,683.916 987.569,683.916 988.128,683.916 988.687,683.916 989.246,683.916 989.806,683.916 990.365,683.916 990.924,683.916 991.483,683.916 992.043,683.916 992.602,683.916 993.161,683.916 993.72,683.916 994.28,683.916 994.839,683.916 995.398,683.916 995.957,683.916 996.517,683.916 997.076,683.916 997.635,683.916 998.194,683.916 998.754,683.916 999.313,683.916 999.872,683.916 1000.43,683.916 1000.99,683.916 1001.55,683.916 1002.11,683.916 1002.67,683.916 1003.23,683.916 1003.79,683.916 1004.35,683.916 1004.91,683.916 1005.46,683.916 1006.02,683.916 1006.58,683.916 1007.14,683.916 1007.7,683.916 1008.26,683.916 1008.82,683.916 1009.38,683.916 1009.94,683.916 1010.5,683.916 1011.06,683.916 1011.62,683.916 1012.18,683.916 1012.73,683.916 1013.29,683.916 1013.85,683.916 1014.41,683.916 1014.97,683.916 1015.53,683.916 1016.09,683.916 1016.65,683.916 1017.21,683.916 1017.77,683.916 1018.33,683.916 1018.89,683.916 1019.45,683.916 1020.01,683.916 1020.56,683.916 1021.12,683.916 1021.68,683.916 1022.24,683.916 1022.8,683.916 1023.36,683.916 1023.92,683.916 1024.48,683.916 1025.04,683.916 1025.6,683.916 1026.16,683.916 1026.72,683.916 1027.28,683.916 1027.83,683.916 1028.39,683.916 1028.95,683.916 1029.51,683.916 1030.07,683.916 1030.63,683.916 1031.19,683.916 1031.75,683.916 1032.31,683.916 1032.87,683.916 1033.43,683.916 1033.99,683.916 1034.55,683.916 1035.1,683.916 1035.66,683.916 1036.22,683.916 1036.78,683.916 1037.34,683.916 1037.9,683.916 1038.46,683.916 1039.02,683.916 1039.58,683.916 1040.14,683.916 1040.7,683.916 1041.26,683.916 1041.82,683.916 1042.38,683.916 1042.93,683.916 1043.49,683.916 1044.05,683.916 1044.61,683.916 1045.17,683.916 1045.73,683.916 1046.29,683.916 1046.85,683.916 1047.41,683.916 1047.97,683.916 1048.53,683.916 1049.09,683.916 1049.65,683.916 1050.2,683.916 1050.76,683.916 1051.32,683.916 1051.88,683.916 1052.44,683.916 1053,683.916 1053.56,683.916 1054.12,683.916 1054.68,683.916 1055.24,683.916 1055.8,683.916 1056.36,683.916 1056.92,683.916 1057.48,683.916 1058.03,683.916 1058.59,683.916 1059.15,683.916 1059.71,683.916 1060.27,683.916 1060.83,683.916 1061.39,683.916 1061.95,683.916 1062.51,683.916 1063.07,683.916 1063.63,683.916 1064.19,683.916 1064.75,683.916 1065.3,683.916 1065.86,683.916 1066.42,683.916 1066.98,683.916 1067.54,683.916 1068.1,683.916 1068.66,683.916 1069.22,683.916 1069.78,683.916 1070.34,683.916 1070.9,683.916 1071.46,683.916 1072.02,683.916 1072.57,683.916 1073.13,683.916 1073.69,683.916 1074.25,683.916 1074.81,683.916 1075.37,683.916 1075.93,683.916 1076.49,683.916 1077.05,683.916 1077.61,683.916 1078.17,683.916 1078.73,683.916 1079.29,683.916 1079.85,683.916 1080.4,683.916 1080.96,683.916 1081.52,683.916 1082.08,683.916 1082.64,683.916 1083.2,683.916 1083.76,683.916 1084.32,683.916 1084.88,683.916 1085.44,683.916 1086,683.916 1086.56,683.916 1087.12,683.916 1087.67,683.916 1088.23,683.916 1088.79,683.916 1089.35,683.916 1089.91,683.916 1090.47,683.916 1091.03,683.916 1091.59,683.916 1092.15,683.916 1092.71,683.916 1093.27,683.916 1093.83,683.916 1094.39,683.916 1094.94,683.916 1095.5,683.916 1096.06,683.916 1096.62,683.916 1097.18,683.916 1097.74,683.916 1098.3,683.916 1098.86,683.916 1099.42,683.916 1099.98,683.916 1100.54,683.916 1101.1,683.916 1101.66,683.916 1102.22,683.916 1102.77,683.916 1103.33,683.916 1103.89,683.916 1104.45,683.916 1105.01,683.916 1105.57,683.916 1106.13,683.916 1106.69,683.916 1107.25,683.916 1107.81,683.916 1108.37,683.916 1108.93,683.916 1109.49,683.916 1110.04,683.916 1110.6,683.916 1111.16,683.916 1111.72,683.916 1112.28,683.916 1112.84,683.916 1113.4,683.916 1113.96,683.916 1114.52,683.916 1115.08,683.916 1115.64,683.916 1116.2,683.916 1116.76,683.916 1117.31,683.916 1117.87,683.916 1118.43,683.916 1118.99,683.916 1119.55,683.916 1120.11,683.916 1120.67,683.916 1121.23,683.916 1121.79,683.916 1122.35,683.916 1122.91,683.916 1123.47,683.916 1124.03,683.916 1124.59,683.916 1125.14,683.916 1125.7,683.916 1126.26,683.916 1126.82,683.916 1127.38,683.916 1127.94,683.916 1128.5,683.916 1129.06,683.916 1129.62,683.916 1130.18,683.916 1130.74,683.916 1131.3,683.916 1131.86,683.916 1132.41,683.916 1132.97,683.916 1133.53,683.916 1134.09,683.916 1134.65,683.916 1135.21,683.916 1135.77,683.916 1136.33,683.916 1136.89,683.916 1137.45,683.916 1138.01,683.916 1138.57,683.916 1139.13,683.916 1139.68,683.916 1140.24,683.916 1140.8,683.916 1141.36,683.916 1141.92,683.916 1142.48,683.916 1143.04,683.916 1143.6,683.916 1144.16,683.916 1144.72,683.916 1145.28,683.916 1145.84,683.916 1146.4,683.916 1146.96,683.916 1147.51,683.916 1148.07,683.916 1148.63,683.916 1149.19,683.916 1149.75,683.916 1150.31,683.916 1150.87,683.916 1151.43,683.916 1151.99,683.916 1152.55,683.916 1153.11,683.916 1153.67,683.916 1154.23,683.916 1154.78,683.916 1155.34,683.916 1155.9,683.916 1156.46,683.916 1157.02,683.916 1157.58,683.916 1158.14,683.916 1158.7,683.916 1159.26,683.916 1159.82,683.916 1160.38,683.916 1160.94,683.916 1161.5,683.916 1162.05,683.916 1162.61,683.916 1163.17,683.916 1163.73,683.916 1164.29,683.916 1164.85,683.916 1165.41,683.916 1165.97,683.916 1166.53,683.916 1167.09,683.916 1167.65,683.916 1168.21,683.916 1168.77,683.916 1169.33,683.916 1169.88,683.916 1170.44,683.916 1171,683.916 1171.56,683.916 1172.12,683.916 1172.68,683.916 1173.24,683.916 1173.8,683.916 1174.36,683.916 1174.92,683.916 1175.48,683.916 1176.04,683.916 1176.6,683.916 1177.15,683.916 1177.71,683.916 1178.27,683.916 1178.83,683.916 1179.39,683.916 1179.95,683.916 1180.51,683.916 1181.07,683.916 1181.63,683.916 1182.19,683.916 1182.75,683.916 1183.31,683.916 1183.87,683.916 1184.43,683.916 1184.98,683.916 1185.54,683.916 1186.1,683.916 1186.66,683.916 1187.22,683.916 1187.78,683.916 1188.34,683.916 1188.9,683.916 1189.46,683.916 1190.02,683.916 1190.58,683.916 1191.14,683.916 1191.7,683.916 1192.25,683.916 1192.81,683.916 1193.37,683.916 1193.93,683.916 1194.49,683.916 1195.05,683.916 1195.61,683.916 1196.17,683.916 1196.73,683.916 1197.29,683.916 1197.85,683.916 1198.41,683.916 1198.97,683.916 1199.52,683.916 1200.08,683.916 1200.64,683.916 1201.2,683.916 1201.76,683.916 1202.32,683.916 1202.88,683.916 1203.44,683.916 1204,683.916 1204.56,683.916 1205.12,683.916 1205.68,683.916 1206.24,683.916 1206.8,683.916 1207.35,683.916 1207.91,683.916 1208.47,683.916 1209.03,683.916 1209.59,683.916 1210.15,683.916 1210.71,683.916 1211.27,683.916 1211.83,683.916 1212.39,683.916 1212.95,683.916 1213.51,683.916 1214.07,683.916 1214.62,683.916 1215.18,683.916 1215.74,683.916 1216.3,683.916 1216.86,683.916 1217.42,683.916 1217.98,683.916 1218.54,683.916 1219.1,683.916 1219.66,683.916 1220.22,683.916 1220.78,683.916 1221.34,683.916 1221.89,683.916 1222.45,683.916 1223.01,683.916 1223.57,683.916 1224.13,683.916 1224.69,683.916 1225.25,683.916 1225.81,683.916 1226.37,683.916 1226.93,683.916 1227.49,683.916 1228.05,683.916 1228.61,683.916 1229.17,683.916 1229.72,683.916 1230.28,683.916 1230.84,683.916 1231.4,683.916 1231.96,683.916 1232.52,683.916 1233.08,683.916 1233.64,683.916 1234.2,683.916 1234.76,683.916 1235.32,683.916 1235.88,683.916 1236.44,683.916 1236.99,683.916 1237.55,683.916 1238.11,683.916 1238.67,683.916 1239.23,683.916 1239.79,683.916 1240.35,683.916 1240.91,683.916 1241.47,683.916 1242.03,683.916 1242.59,683.916 1243.15,683.916 1243.71,683.916 1244.26,683.916 1244.82,683.916 1245.38,683.916 1245.94,683.916 1246.5,683.916 1247.06,683.916 1247.62,683.916 1248.18,683.916 1248.74,683.916 1249.3,683.916 1249.86,683.916 1250.42,683.916 1250.98,683.916 1251.54,683.916 1252.09,683.916 1252.65,683.916 1253.21,683.916 1253.77,683.916 1254.33,683.916 1254.89,683.916 1255.45,683.916 1256.01,683.916 1256.57,683.916 1257.13,683.916 1257.69,683.916 1258.25,683.916 1258.81,683.916 1259.36,683.916 1259.92,683.916 1260.48,683.916 1261.04,683.916 1261.6,683.916 1262.16,683.916 1262.72,683.916 1263.28,683.916 1263.84,683.916 1264.4,683.916 1264.96,683.916 1265.52,683.916 1266.08,683.916 1266.63,683.916 1267.19,683.916 1267.75,683.916 1268.31,683.916 1268.87,683.916 1269.43,683.916 1269.99,683.916 1270.55,683.916 1271.11,683.916 1271.67,683.916 1272.23,683.916 1272.79,683.916 1273.35,683.916 1273.91,683.916 1274.46,683.916 1275.02,683.916 1275.58,683.916 1276.14,683.916 1276.7,683.916 1277.26,683.916 1277.82,683.916 1278.38,683.916 1278.94,683.916 1279.5,683.916 1280.06,683.916 1280.62,683.916 1281.18,683.916 1281.73,683.916 1282.29,683.916 1282.85,683.916 1283.41,683.916 1283.97,683.916 1284.53,683.916 1285.09,683.916 1285.65,683.916 1286.21,683.916 1286.77,683.916 1287.33,683.916 1287.89,683.916 1288.45,683.916 1289,683.916 1289.56,683.916 1290.12,683.916 1290.68,683.916 1291.24,683.916 1291.8,683.916 1292.36,683.916 1292.92,683.916 1293.48,683.916 1294.04,683.916 1294.6,683.916 1295.16,683.916 1295.72,683.916 1296.28,683.916 1296.83,683.916 1297.39,683.916 1297.95,683.916 1298.51,683.916 1299.07,683.916 1299.63,683.916 1300.19,683.916 1300.75,683.916 1301.31,683.916 1301.87,683.916 1302.43,683.916 1302.99,683.916 1303.55,683.916 1304.1,683.916 1304.66,683.916 1305.22,683.916 1305.78,683.916 1306.34,683.916 1306.9,683.916 1307.46,683.916 1308.02,683.916 1308.58,683.916 1309.14,683.916 1309.7,683.916 1310.26,683.916 1310.82,683.916 1311.38,683.916 1311.93,683.916 1312.49,683.916 1313.05,683.916 1313.61,683.916 1314.17,683.916 1314.73,683.916 1315.29,683.916 1315.85,683.916 1316.41,683.916 1316.97,683.916 1317.53,683.916 1318.09,683.916 1318.65,683.916 1319.2,683.916 1319.76,683.916 1320.32,683.916 1320.88,683.916 1321.44,683.916 1322,683.916 1322.56,683.916 1323.12,683.916 1323.68,683.916 1324.24,683.916 1324.8,683.916 1325.36,683.916 1325.92,683.916 1326.47,683.916 1327.03,683.916 1327.59,683.916 1328.15,683.916 1328.71,683.916 1329.27,683.916 1329.83,683.916 1330.39,683.916 1330.95,683.916 1331.51,683.916 1332.07,683.916 1332.63,683.916 1333.19,683.916 1333.75,683.916 1334.3,683.916 1334.86,683.916 1335.42,683.916 1335.98,683.916 1336.54,683.916 1337.1,683.916 1337.66,683.916 1338.22,683.916 1338.78,683.916 1339.34,683.916 1339.9,683.916 1340.46,683.916 1341.02,683.916 1341.57,683.916 1342.13,683.916 1342.69,683.916 1343.25,683.916 1343.81,683.916 1344.37,683.916 1344.93,683.916 1345.49,683.916 1346.05,683.916 1346.61,683.916 1347.17,683.916 1347.73,683.916 1348.29,683.916 1348.84,683.916 1349.4,683.916 1349.96,683.916 1350.52,683.916 1351.08,683.916 1351.64,683.916 1352.2,683.916 1352.76,683.916 1353.32,683.916 1353.88,683.916 1354.44,683.916 1355,683.916 1355.56,683.916 1356.12,683.916 1356.67,683.916 1357.23,683.916 1357.79,683.916 1358.35,683.916 1358.91,683.916 1359.47,683.916 1360.03,683.916 1360.59,683.916 1361.15,683.916 1361.71,683.916 1362.27,683.916 1362.83,683.916 1363.39,683.916 1363.94,683.916 1364.5,683.916 1365.06,683.916 1365.62,683.916 1366.18,683.916 1366.74,683.916 1367.3,683.916 1367.86,683.916 1368.42,683.916 1368.98,683.916 1369.54,683.916 1370.1,683.916 1370.66,683.916 1371.21,683.916 1371.77,683.916 1372.33,683.916 1372.89,683.916 1373.45,683.916 1374.01,683.916 1374.57,683.916 1375.13,683.916 1375.69,683.916 1376.25,683.916 1376.81,683.916 1377.37,683.916 1377.93,683.916 1378.49,683.916 1379.04,683.916 1379.6,683.916 1380.16,683.916 1380.72,683.916 1381.28,683.916 1381.84,683.916 1382.4,683.916 1382.96,683.916 1383.52,683.916 1384.08,683.916 1384.64,683.916 1385.2,683.916 1385.76,683.916 1386.31,683.916 1386.87,683.916 1387.43,683.916 1387.99,683.916 1388.55,683.916 1389.11,683.916 1389.67,683.916 1390.23,683.916 1390.79,683.916 1391.35,683.916 1391.91,683.916 1392.47,683.916 1393.03,683.916 1393.58,683.916 1394.14,683.916 1394.7,683.916 1395.26,683.916 1395.82,683.916 1396.38,683.916 1396.94,683.916 1397.5,683.916 1398.06,683.916 1398.62,683.916 1399.18,683.916 1399.74,683.916 1400.3,683.916 1400.86,683.916 1401.41,683.916 1401.97,683.916 1402.53,683.916 1403.09,683.916 1403.65,683.916 1404.21,683.916 1404.77,683.916 1405.33,683.916 1405.89,683.916 1406.45,683.916 1407.01,683.916 1407.57,683.916 1408.13,683.916 1408.68,683.916 1409.24,683.916 1409.8,683.916 1410.36,683.916 1410.92,683.916 1411.48,683.916 1412.04,683.916 1412.6,683.916 1413.16,683.916 1413.72,683.916 1414.28,683.916 1414.84,683.916 1415.4,683.916 1415.95,683.916 1416.51,683.916 1417.07,683.916 1417.63,683.916 1418.19,683.916 1418.75,683.916 1419.31,683.916 1419.87,683.916 1420.43,683.916 1420.99,683.916 1421.55,683.916 1422.11,683.916 1422.67,683.916 1423.23,683.916 1423.78,683.916 1424.34,683.916 1424.9,683.916 1425.46,683.916 1426.02,683.916 1426.58,683.916 1427.14,683.916 1427.7,683.916 1428.26,683.916 1428.82,683.916 1429.38,683.916 1429.94,683.916 1430.5,683.916 1431.05,683.916 1431.61,683.916 1432.17,683.916 1432.73,683.916 1433.29,683.916 1433.85,683.916 1434.41,683.916 1434.97,683.916 1435.53,683.916 1436.09,683.916 1436.65,683.916 1437.21,683.916 1437.77,683.916 1438.33,683.916 1438.88,683.916 1439.44,683.916 1440,683.916 1440.56,683.916 1441.12,683.916 1441.68,683.916 1442.24,683.916 1442.8,683.916 1443.36,683.916 1443.92,683.916 1444.48,683.916 1445.04,683.916 1445.6,683.916 1446.15,683.916 1446.71,683.916 1447.27,683.916 1447.83,683.916 1448.39,683.916 1448.95,683.916 1449.51,683.916 1450.07,683.916 1450.63,683.916 1451.19,683.916 1451.75,683.916 1452.31,683.916 1452.87,683.916 1453.42,683.916 1453.98,683.916 1454.54,683.916 1455.1,683.916 1455.66,683.916 1456.22,683.916 1456.78,683.916 1457.34,683.916 1457.9,683.916 1458.46,683.916 1459.02,683.916 1459.58,683.916 1460.14,683.916 1460.7,683.916 1461.25,683.916 1461.81,683.916 1462.37,683.916 1462.93,683.916 1463.49,683.916 1464.05,683.916 1464.61,683.916 1465.17,683.916 1465.73,683.916 1466.29,683.916 1466.85,683.916 1467.41,683.916 1467.97,683.916 1468.52,683.916 1469.08,683.916 1469.64,683.916 1470.2,683.916 1470.76,683.916 1471.32,683.916 1471.88,683.916 1472.44,683.916 1473,683.916 1473.56,683.916 1474.12,683.916 1474.68,683.916 1475.24,683.916 1475.79,683.916 1476.35,683.916 1476.91,683.916 1477.47,683.916 1478.03,683.916 1478.59,683.916 1479.15,683.916 1479.71,683.916 1480.27,683.916 1480.83,683.916 1481.39,683.916 1481.95,683.916 1482.51,683.916 1483.07,683.916 1483.62,683.916 1484.18,683.916 1484.74,683.916 1485.3,683.916 1485.86,683.916 1486.42,683.916 1486.98,683.916 1487.54,683.916 1488.1,683.916 1488.66,683.916 1489.22,683.916 1489.78,683.916 1490.34,683.916 1490.89,683.916 1491.45,683.916 1492.01,683.916 1492.57,683.916 1493.13,683.916 1493.69,683.916 1494.25,683.916 1494.81,683.916 1495.37,683.916 1495.93,683.916 1496.49,683.916 1497.05,683.916 1497.61,683.916 1498.16,683.916 1498.72,683.916 1499.28,683.916 1499.84,683.916 1500.4,683.916 1500.96,683.916 1501.52,683.916 1502.08,683.916 1502.64,683.916 1503.2,683.916 1503.76,683.916 1504.32,683.916 1504.88,683.916 1505.44,683.916 1505.99,683.916 1506.55,683.916 1507.11,683.916 1507.67,683.916 1508.23,683.916 1508.79,683.916 1509.35,683.916 1509.91,683.916 1510.47,683.916 1511.03,683.916 1511.59,683.916 1512.15,683.916 1512.71,683.916 1513.26,683.916 1513.82,683.916 1514.38,683.916 1514.94,683.916 1515.5,683.916 1516.06,683.916 1516.62,683.916 1517.18,683.916 1517.74,683.916 1518.3,683.916 1518.86,683.916 1519.42,683.916 1519.98,683.916 1520.53,683.916 1521.09,683.916 1521.65,683.916 1522.21,683.916 1522.77,683.916 1523.33,683.916 1523.89,683.916 1524.45,683.916 1525.01,683.916 1525.57,683.916 1526.13,683.916 1526.69,683.916 1527.25,683.916 1527.81,683.916 1528.36,683.916 1528.92,683.916 1529.48,683.916 1530.04,683.916 1530.6,683.916 1531.16,683.916 1531.72,683.916 1532.28,683.916 1532.84,683.916 1533.4,683.916 1533.96,683.916 1534.52,683.916 1535.08,683.916 1535.63,683.916 1536.19,683.916 1536.75,683.916 1537.31,683.916 1537.87,683.916 1538.43,683.916 1538.99,683.916 1539.55,683.916 1540.11,683.916 1540.67,683.916 1541.23,683.916 1541.79,683.916 1542.35,683.916 1542.9,683.916 1543.46,683.916 1544.02,683.916 1544.58,683.916 1545.14,683.916 1545.7,683.916 1546.26,683.916 1546.82,683.916 1547.38,683.916 1547.94,683.916 1548.5,683.916 1549.06,683.916 1549.62,683.916 1550.18,683.916 1550.73,683.916 1551.29,683.916 1551.85,683.916 1552.41,683.916 1552.97,683.916 1553.53,683.916 1554.09,683.916 1554.65,683.916 1555.21,683.916 1555.77,683.916 1556.33,683.916 1556.89,683.916 1557.45,683.916 1558,683.916 1558.56,683.916 1559.12,683.916 1559.68,683.916 1560.24,683.916 1560.8,683.916 1561.36,683.916 1561.92,683.916 1562.48,683.916 1563.04,683.916 1563.6,683.916 1564.16,683.916 1564.72,683.916 1565.28,683.916 1565.83,683.916 1566.39,683.916 1566.95,683.916 1567.51,683.916 1568.07,683.916 1568.63,683.916 1569.19,683.916 1569.75,683.916 1570.31,683.916 1570.87,683.916 1571.43,683.916 1571.99,683.916 1572.55,683.916 1573.1,683.916 1573.66,683.916 1574.22,683.916 1574.78,683.916 1575.34,683.916 1575.9,683.916 1576.46,683.916 1577.02,683.916 1577.58,683.916 1578.14,683.916 1578.7,683.916 1579.26,683.916 1579.82,683.916 1580.37,683.916 1580.93,683.916 1581.49,683.916 1582.05,683.916 1582.61,683.916 1583.17,683.916 1583.73,683.916 1584.29,683.916 1584.85,683.916 1585.41,683.916 1585.97,683.916 1586.53,683.916 1587.09,683.916 1587.65,683.916 1588.2,683.916 1588.76,683.916 1589.32,683.916 1589.88,683.916 1590.44,683.916 1591,683.916 1591.56,683.916 1592.12,683.916 1592.68,683.916 1593.24,683.916 1593.8,683.916 1594.36,683.916 1594.92,683.916 1595.47,683.916 1596.03,683.916 1596.59,683.916 1597.15,683.916 1597.71,683.916 1598.27,683.916 1598.83,683.916 1599.39,683.916 1599.95,683.916 1600.51,683.916 1601.07,683.916 1601.63,683.916 1602.19,683.916 1602.74,683.916 1603.3,683.916 1603.86,683.916 1604.42,683.916 1604.98,683.916 1605.54,683.916 1606.1,683.916 1606.66,683.916 1607.22,683.916 1607.78,683.916 1608.34,683.916 1608.9,683.916 1609.46,683.916 1610.02,683.916 1610.57,683.916 1611.13,683.916 1611.69,683.916 1612.25,683.916 1612.81,683.916 1613.37,683.916 1613.93,683.916 1614.49,683.916 1615.05,683.916 1615.61,683.916 1616.17,683.916 1616.73,683.916 1617.29,683.916 1617.84,683.916 1618.4,683.916 1618.96,683.916 1619.52,683.916 1620.08,683.916 1620.64,683.916 1621.2,683.916 1621.76,683.916 1622.32,683.916 1622.88,683.916 1623.44,683.916 1624,683.916 1624.56,683.916 1625.11,683.916 1625.67,683.916 1626.23,683.916 1626.79,683.916 1627.35,683.916 1627.91,683.916 1628.47,683.916 1629.03,683.916 1629.59,683.916 1630.15,683.916 1630.71,683.916 1631.27,683.916 1631.83,683.916 1632.39,683.916 1632.94,683.916 1633.5,683.916 1634.06,683.916 1634.62,683.916 1635.18,683.916 1635.74,683.916 1636.3,683.916 1636.86,683.916 1637.42,683.916 1637.98,683.916 1638.54,683.916 1639.1,683.916 1639.66,683.916 1640.21,683.916 1640.77,683.916 1641.33,683.916 1641.89,683.916 1642.45,683.916 1643.01,683.916 1643.57,683.916 1644.13,683.916 1644.69,683.916 1645.25,683.916 1645.81,683.916 1646.37,683.916 1646.93,683.916 1647.48,683.916 1648.04,683.916 1648.6,683.916 1649.16,683.916 1649.72,683.916 1650.28,683.916 1650.84,683.916 1651.4,683.916 1651.96,683.916 1652.52,683.916 1653.08,683.916 1653.64,683.916 1654.2,683.916 1654.76,683.916 1655.31,683.916 1655.87,683.916 1656.43,683.916 1656.99,683.916 1657.55,683.916 1658.11,683.916 1658.67,683.916 1659.23,683.916 1659.79,683.916 1660.35,683.916 1660.91,683.916 1661.47,683.916 1662.03,683.916 1662.58,683.916 1663.14,683.916 1663.7,683.916 1664.26,683.916 1664.82,683.916 1665.38,683.916 1665.94,683.916 1666.5,683.916 1667.06,683.916 1667.62,683.916 1668.18,683.916 1668.74,683.916 1669.3,683.916 1669.85,683.916 1670.41,683.916 1670.97,683.916 1671.53,683.916 1672.09,683.916 1672.65,683.916 1673.21,683.916 1673.77,683.916 1674.33,683.916 1674.89,683.916 1675.45,683.916 1676.01,683.916 1676.57,683.916 1677.13,683.916 1677.68,683.916 1678.24,683.916 1678.8,683.916 1679.36,683.916 1679.92,683.916 1680.48,683.916 1681.04,683.916 1681.6,683.916 1682.16,683.916 1682.72,683.916 1683.28,683.916 1683.84,683.916 1684.4,683.916 1684.95,683.916 1685.51,683.916 1686.07,683.916 1686.63,683.916 1687.19,683.916 1687.75,683.916 1688.31,683.916 1688.87,683.916 1689.43,683.916 1689.99,683.916 1690.55,683.916 1691.11,683.916 1691.67,683.916 1692.23,683.916 1692.78,683.916 1693.34,683.916 1693.9,683.916 1694.46,683.916 1695.02,683.916 1695.58,683.916 1696.14,683.916 1696.7,683.916 1697.26,683.916 1697.82,683.916 1698.38,683.916 1698.94,683.916 1699.5,683.916 1700.05,683.916 1700.61,683.916 1701.17,683.916 1701.73,683.916 1702.29,683.916 1702.85,683.916 1703.41,683.916 1703.97,683.916 1704.53,683.916 1705.09,683.916 1705.65,683.916 1706.21,683.916 1706.77,683.916 1707.32,683.916 1707.88,683.916 1708.44,683.916 1709,683.916 1709.56,683.916 1710.12,683.916 1710.68,683.916 1711.24,683.916 1711.8,683.916 1712.36,683.916 1712.92,683.916 1713.48,683.916 1714.04,683.916 1714.6,683.916 1715.15,683.916 1715.71,683.916 1716.27,683.916 1716.83,683.916 1717.39,683.916 1717.95,683.916 1718.51,683.916 1719.07,683.916 1719.63,683.916 1720.19,683.916 1720.75,683.916 1721.31,683.916 1721.87,683.916 1722.42,683.916 1722.98,683.916 1723.54,683.916 1724.1,683.916 1724.66,683.916 1725.22,683.916 1725.78,683.916 1726.34,683.916 1726.9,683.916 1727.46,683.916 1728.02,683.916 1728.58,683.916 1729.14,683.916 1729.69,683.916 1730.25,683.916 1730.81,683.916 1731.37,683.916 1731.93,683.916 1732.49,683.916 1733.05,683.916 1733.61,683.916 1734.17,683.916 1734.73,683.916 1735.29,683.916 1735.85,683.916 1736.41,683.916 1736.97,683.916 1737.52,683.916 1738.08,683.916 1738.64,683.916 1739.2,683.916 1739.76,683.916 1740.32,683.916 1740.88,683.916 1741.44,683.916 1742,683.916 1742.56,683.916 1743.12,683.916 1743.68,683.916 1744.24,683.916 1744.79,683.916 1745.35,683.916 1745.91,683.916 1746.47,683.916 1747.03,683.916 1747.59,683.916 1748.15,683.916 1748.71,683.916 1749.27,683.916 1749.83,683.916 1750.39,683.916 1750.95,683.916 1751.51,683.916 1752.06,683.916 1752.62,683.916 1753.18,683.916 1753.74,683.916 1754.3,683.916 1754.86,683.916 1755.42,683.916 1755.98,683.916 1756.54,683.916 1757.1,683.916 1757.66,683.916 1758.22,683.916 1758.78,683.916 1759.34,683.916 1759.89,683.916 1760.45,683.916 1761.01,683.916 1761.57,683.916 1762.13,683.916 1762.69,683.916 1763.25,683.916 1763.81,683.916 1764.37,683.916 1764.93,683.916 1765.49,683.916 1766.05,683.916 1766.61,683.916 1767.16,683.916 1767.72,683.916 1768.28,683.916 1768.84,683.916 1769.4,683.916 1769.96,683.916 1770.52,683.916 1771.08,683.916 1771.64,683.916 1772.2,683.916 1772.76,683.916 1773.32,683.916 1773.88,683.916 1774.43,683.916 1774.99,683.916 1775.55,683.916 1776.11,683.916 1776.67,683.916 1777.23,683.916 1777.79,683.916 1778.35,683.916 1778.91,683.916 1779.47,683.916 1780.03,683.916 1780.59,683.916 1781.15,683.916 1781.71,683.916 1782.26,683.916 1782.82,683.916 1783.38,683.916 1783.94,683.916 1784.5,683.916 1785.06,683.916 1785.62,683.916 1786.18,683.916 1786.74,683.916 1787.3,683.916 1787.86,683.916 1788.42,683.916 1788.98,683.916 1789.53,683.916 1790.09,683.916 1790.65,683.916 1791.21,683.916 1791.77,683.916 1792.33,683.916 1792.89,683.916 1793.45,683.916 1794.01,683.916 1794.57,683.916 1795.13,683.916 1795.69,683.916 1796.25,683.916 1796.8,683.916 1797.36,683.916 1797.92,683.916 1798.48,683.916 1799.04,683.916 1799.6,683.916 1800.16,683.916 1800.72,683.916 1801.28,683.916 1801.84,683.916 1802.4,683.916 1802.96,683.916 1803.52,683.916 1804.08,683.916 1804.63,683.916 1805.19,683.916 1805.75,683.916 1806.31,683.916 1806.87,683.916 1807.43,683.916 1807.99,683.916 1808.55,683.916 1809.11,683.916 1809.67,683.916 1810.23,683.916 1810.79,683.916 1811.35,683.916 1811.9,683.916 1812.46,683.916 1813.02,683.916 1813.58,683.916 1814.14,683.916 1814.7,683.916 1815.26,683.916 1815.82,683.916 1816.38,683.916 1816.94,683.916 1817.5,683.916 1818.06,683.916 1818.62,683.916 1819.18,683.916 1819.73,683.916 1820.29,683.916 1820.85,683.916 1821.41,683.916 1821.97,683.916 1822.53,683.916 1823.09,683.916 1823.65,683.916 1824.21,683.916 1824.77,683.916 1825.33,683.916 1825.89,683.916 1826.45,683.916 1827,683.916 1827.56,683.916 1828.12,683.916 1828.68,683.916 1829.24,683.916 1829.8,683.916 1830.36,683.916 1830.92,683.916 1831.48,683.916 1832.04,683.916 1832.6,683.916 1833.16,683.916 1833.72,683.916 1834.27,683.916 1834.83,683.916 1835.39,683.916 1835.95,683.916 1836.51,683.916 1837.07,683.916 1837.63,683.916 1838.19,683.916 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034480528326035 ± 0.01901373249698218\nProjected Energy: -4.016753419579774 ± (0.006990932019850682, 0.006998575911796756)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.513342</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5669e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.9546e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.197e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.523e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.685e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.996e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.36312429161336\n -0.7590191922770853\n  0.13584182219621788\n  0.15789998694608798\n  0.8767114411781325\n  1.530592997097333\n  1.583573261186733\n  3.072870330325867\n  3.125672653951839\n  4.86210722156217\n  6.260694850380593\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t,k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
