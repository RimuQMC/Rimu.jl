var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2143874609632092 ± 0.0014718353812549427\n   G2(1) = 0.9165284095529284 ± 0.0007564611011719007\n   G2(2) = 0.9819657223633667 ± 0.0005670676856510083\n   G2(3) = 0.9886242752042007 ± 0.0007912064561103127\n   G2(4) = 0.9819657223633667 ± 0.0005670676856510083\n   G2(5) = 0.9165284095529284 ± 0.0007564611011719007\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.034779835493699 ± 0.14252298826208715\n   Replica 2: -4.0375886591599786 ± 0.13738875174702386\n   Replica 3: -4.087415971716406 ± 0.13217718255471583\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.05 2211.02,1003.05 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.26 2211.02,745.26 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.47 2211.02,487.47 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.68 2211.02,229.68 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.05 423.181,1003.05 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.26 423.181,745.26 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.47 423.181,487.47 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.68 423.181,229.68 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M290.043 1016.4 L306.363 1016.4 L306.363 1020.33 L284.418 1020.33 L284.418 1016.4 Q287.08 1013.64 291.664 1009.01 Q296.27 1004.36 297.451 1003.02 Q299.696 1000.49 300.576 998.756 Q301.478 996.997 301.478 995.307 Q301.478 992.553 299.534 990.816 Q297.613 989.08 294.511 989.08 Q292.312 989.08 289.858 989.844 Q287.427 990.608 284.65 992.159 L284.65 987.437 Q287.474 986.303 289.927 985.724 Q292.381 985.145 294.418 985.145 Q299.789 985.145 302.983 987.83 Q306.177 990.516 306.177 995.006 Q306.177 997.136 305.367 999.057 Q304.58 1000.96 302.474 1003.55 Q301.895 1004.22 298.793 1007.44 Q295.691 1010.63 290.043 1016.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M316.224 985.77 L334.58 985.77 L334.58 989.705 L320.506 989.705 L320.506 998.178 Q321.524 997.83 322.543 997.668 Q323.562 997.483 324.58 997.483 Q330.367 997.483 333.747 1000.65 Q337.126 1003.83 337.126 1009.24 Q337.126 1014.82 333.654 1017.92 Q330.182 1021 323.862 1021 Q321.687 1021 319.418 1020.63 Q317.173 1020.26 314.765 1019.52 L314.765 1014.82 Q316.849 1015.96 319.071 1016.51 Q321.293 1017.07 323.77 1017.07 Q327.774 1017.07 330.112 1014.96 Q332.45 1012.85 332.45 1009.24 Q332.45 1005.63 330.112 1003.52 Q327.774 1001.42 323.77 1001.42 Q321.895 1001.42 320.02 1001.83 Q318.168 1002.25 316.224 1003.13 L316.224 985.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M356.339 988.849 Q352.728 988.849 350.899 992.414 Q349.094 995.955 349.094 1003.08 Q349.094 1010.19 350.899 1013.76 Q352.728 1017.3 356.339 1017.3 Q359.973 1017.3 361.779 1013.76 Q363.608 1010.19 363.608 1003.08 Q363.608 995.955 361.779 992.414 Q359.973 988.849 356.339 988.849 M356.339 985.145 Q362.149 985.145 365.205 989.752 Q368.284 994.335 368.284 1003.08 Q368.284 1011.81 365.205 1016.42 Q362.149 1021 356.339 1021 Q350.529 1021 347.45 1016.42 Q344.395 1011.81 344.395 1003.08 Q344.395 994.335 347.45 989.752 Q350.529 985.145 356.339 985.145 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M286.062 727.98 L304.418 727.98 L304.418 731.915 L290.344 731.915 L290.344 740.388 Q291.363 740.04 292.381 739.878 Q293.4 739.693 294.418 739.693 Q300.205 739.693 303.585 742.864 Q306.964 746.036 306.964 751.452 Q306.964 757.031 303.492 760.133 Q300.02 763.212 293.701 763.212 Q291.525 763.212 289.256 762.841 Q287.011 762.471 284.603 761.73 L284.603 757.031 Q286.687 758.165 288.909 758.721 Q291.131 759.276 293.608 759.276 Q297.613 759.276 299.951 757.17 Q302.288 755.063 302.288 751.452 Q302.288 747.841 299.951 745.735 Q297.613 743.628 293.608 743.628 Q291.733 743.628 289.858 744.045 Q288.006 744.462 286.062 745.341 L286.062 727.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M326.177 731.059 Q322.566 731.059 320.737 734.624 Q318.932 738.165 318.932 745.295 Q318.932 752.401 320.737 755.966 Q322.566 759.508 326.177 759.508 Q329.811 759.508 331.617 755.966 Q333.446 752.401 333.446 745.295 Q333.446 738.165 331.617 734.624 Q329.811 731.059 326.177 731.059 M326.177 727.355 Q331.987 727.355 335.043 731.962 Q338.122 736.545 338.122 745.295 Q338.122 754.022 335.043 758.628 Q331.987 763.212 326.177 763.212 Q320.367 763.212 317.288 758.628 Q314.233 754.022 314.233 745.295 Q314.233 736.545 317.288 731.962 Q320.367 727.355 326.177 727.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M356.339 731.059 Q352.728 731.059 350.899 734.624 Q349.094 738.165 349.094 745.295 Q349.094 752.401 350.899 755.966 Q352.728 759.508 356.339 759.508 Q359.973 759.508 361.779 755.966 Q363.608 752.401 363.608 745.295 Q363.608 738.165 361.779 734.624 Q359.973 731.059 356.339 731.059 M356.339 727.355 Q362.149 727.355 365.205 731.962 Q368.284 736.545 368.284 745.295 Q368.284 754.022 365.205 758.628 Q362.149 763.212 356.339 763.212 Q350.529 763.212 347.45 758.628 Q344.395 754.022 344.395 745.295 Q344.395 736.545 347.45 731.962 Q350.529 727.355 356.339 727.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M284.835 470.19 L307.057 470.19 L307.057 472.181 L294.511 504.75 L289.627 504.75 L301.432 474.125 L284.835 474.125 L284.835 470.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M316.224 470.19 L334.58 470.19 L334.58 474.125 L320.506 474.125 L320.506 482.598 Q321.524 482.25 322.543 482.088 Q323.562 481.903 324.58 481.903 Q330.367 481.903 333.747 485.074 Q337.126 488.246 337.126 493.662 Q337.126 499.241 333.654 502.343 Q330.182 505.422 323.862 505.422 Q321.687 505.422 319.418 505.051 Q317.173 504.681 314.765 503.94 L314.765 499.241 Q316.849 500.375 319.071 500.931 Q321.293 501.486 323.77 501.486 Q327.774 501.486 330.112 499.38 Q332.45 497.273 332.45 493.662 Q332.45 490.051 330.112 487.945 Q327.774 485.838 323.77 485.838 Q321.895 485.838 320.02 486.255 Q318.168 486.672 316.224 487.551 L316.224 470.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M356.339 473.269 Q352.728 473.269 350.899 476.834 Q349.094 480.375 349.094 487.505 Q349.094 494.611 350.899 498.176 Q352.728 501.718 356.339 501.718 Q359.973 501.718 361.779 498.176 Q363.608 494.611 363.608 487.505 Q363.608 480.375 361.779 476.834 Q359.973 473.269 356.339 473.269 M356.339 469.565 Q362.149 469.565 365.205 474.172 Q368.284 478.755 368.284 487.505 Q368.284 496.232 365.205 500.838 Q362.149 505.422 356.339 505.422 Q350.529 505.422 347.45 500.838 Q344.395 496.232 344.395 487.505 Q344.395 478.755 347.45 474.172 Q350.529 469.565 356.339 469.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M256.664 243.025 L264.303 243.025 L264.303 216.66 L255.992 218.326 L255.992 214.067 L264.256 212.4 L268.932 212.4 L268.932 243.025 L276.571 243.025 L276.571 246.96 L256.664 246.96 L256.664 243.025 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M296.015 215.479 Q292.404 215.479 290.576 219.044 Q288.77 222.585 288.77 229.715 Q288.77 236.821 290.576 240.386 Q292.404 243.928 296.015 243.928 Q299.65 243.928 301.455 240.386 Q303.284 236.821 303.284 229.715 Q303.284 222.585 301.455 219.044 Q299.65 215.479 296.015 215.479 M296.015 211.775 Q301.826 211.775 304.881 216.382 Q307.96 220.965 307.96 229.715 Q307.96 238.442 304.881 243.048 Q301.826 247.632 296.015 247.632 Q290.205 247.632 287.127 243.048 Q284.071 238.442 284.071 229.715 Q284.071 220.965 287.127 216.382 Q290.205 211.775 296.015 211.775 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M326.177 215.479 Q322.566 215.479 320.737 219.044 Q318.932 222.585 318.932 229.715 Q318.932 236.821 320.737 240.386 Q322.566 243.928 326.177 243.928 Q329.811 243.928 331.617 240.386 Q333.446 236.821 333.446 229.715 Q333.446 222.585 331.617 219.044 Q329.811 215.479 326.177 215.479 M326.177 211.775 Q331.987 211.775 335.043 216.382 Q338.122 220.965 338.122 229.715 Q338.122 238.442 335.043 243.048 Q331.987 247.632 326.177 247.632 Q320.367 247.632 317.288 243.048 Q314.233 238.442 314.233 229.715 Q314.233 220.965 317.288 216.382 Q320.367 211.775 326.177 211.775 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M356.339 215.479 Q352.728 215.479 350.899 219.044 Q349.094 222.585 349.094 229.715 Q349.094 236.821 350.899 240.386 Q352.728 243.928 356.339 243.928 Q359.973 243.928 361.779 240.386 Q363.608 236.821 363.608 229.715 Q363.608 222.585 361.779 219.044 Q359.973 215.479 356.339 215.479 M356.339 211.775 Q362.149 211.775 365.205 216.382 Q368.284 220.965 368.284 229.715 Q368.284 238.442 365.205 243.048 Q362.149 247.632 356.339 247.632 Q350.529 247.632 347.45 243.048 Q344.395 238.442 344.395 229.715 Q344.395 220.965 347.45 216.382 Q350.529 211.775 356.339 211.775 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.68 4017.76,229.68 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1246.4 461.101,1245.73 461.669,1244.99 462.238,1244.17 462.806,1242.23 463.375,1241.25 463.943,1240.15 464.511,1238.96 465.08,1237.65 465.648,1236.23 466.216,1234.73 466.785,1232.06 467.353,1230.28 467.921,1228.38 468.49,1226.33 469.058,1224.11 469.626,1221.78 470.195,1219.28 470.763,1216.6 471.331,1212.74 471.9,1207.64 472.468,1203.31 473.036,1199.76 473.605,1195.01 474.173,1189.08 474.741,1184.87 475.31,1180.51 475.878,1174.92 476.446,1170.17 477.015,1165.2 477.583,1156.88 478.152,1151.4 478.72,1145.64 479.288,1139.77 479.857,1132.55 480.425,1126.07 480.993,1119.33 481.562,1111.34 482.13,1103.19 482.698,1094.93 483.267,1087.56 483.835,1077.82 484.403,1069.04 484.972,1060.14 485.54,1052.01 486.108,1042.7 486.677,1033.38 487.245,1024.85 487.813,1015.2 488.382,1006.41 488.95,995.524 489.518,986.453 490.087,975.262 490.655,965.092 491.224,954.715 491.792,944.371 492.36,933.89 492.929,923.384 493.497,912.763 494.065,902.29 494.634,889.595 495.202,878.944 495.77,868.323 496.339,858.645 496.907,847.973 497.475,838.394 498.044,825.817 498.612,815.266 499.18,804.807 499.749,794.262 500.317,784.803 500.885,773.363 501.454,763.968 502.022,753.627 502.59,744.285 503.159,732.923 503.727,722.759 504.295,712.663 504.864,700.359 505.432,689.505 506.001,680.886 506.569,671.208 507.137,662.842 507.706,653.427 508.274,643.13 508.842,634.022 509.411,624.928 509.979,616.141 510.547,607.399 511.116,599.765 511.684,590.12 512.252,582.644 512.821,573.353 513.389,564.087 513.957,556.051 514.526,549.362 515.094,542.541 515.662,535.955 516.231,526.349 516.799,518.925 517.367,512.59 517.936,505.301 518.504,497.425 519.072,490.788 519.641,484.038 520.209,478.405 520.778,468.954 521.346,462.903 521.914,458.115 522.483,453.34 523.051,448.727 523.619,443.188 524.188,438.701 524.756,433.359 525.324,427.937 525.893,422.879 526.461,417.86 527.029,411.956 527.598,404.255 528.166,397.746 528.734,391.734 529.303,384.669 529.871,379.839 530.439,376.174 531.008,370.648 531.576,367.491 532.144,362.502 532.713,360.553 533.281,357.764 533.85,354.968 534.418,351.194 534.986,347.666 535.555,344.128 536.123,343.738 536.691,339.131 537.26,334.59 537.828,333.252 538.396,331.253 538.965,326.872 539.533,326.626 540.101,324.434 540.67,323.407 541.238,322.285 541.806,316.874 542.375,317.117 542.943,315.008 543.511,312.945 544.08,312.03 544.648,313.275 545.216,312.431 545.785,308.215 546.353,308.289 546.921,306.202 547.49,301.923 548.058,300.148 548.627,296.412 549.195,295.998 549.763,294.644 550.332,292.929 550.9,292.541 551.468,292.243 552.037,290.677 552.605,290.103 553.173,289.268 553.742,286.601 554.31,285.178 554.878,285.996 555.447,285.431 556.015,284.977 556.583,282.313 557.152,282.849 557.72,280.354 558.288,279.041 558.857,276.708 559.425,277.567 559.993,276.204 560.562,275.973 561.13,276.657 561.698,276.353 562.267,275.028 562.835,273.671 563.404,273.662 563.972,272.101 564.54,271.757 565.109,272.563 565.677,271.258 566.245,269.876 566.814,271.593 567.382,272.214 567.95,270.516 568.519,269.816 569.087,269.327 569.655,265.589 570.224,264.134 570.792,263.079 571.36,257.849 571.929,261.24 572.497,260.046 573.065,259.83 573.634,259.698 574.202,258.561 574.77,259.259 575.339,258.899 575.907,257.722 576.476,255.682 577.044,255.816 577.612,254.597 578.181,254.441 578.749,257.686 579.317,254.496 579.886,253.455 580.454,251.32 581.022,251.612 581.591,252.771 582.159,248.488 582.727,248.766 583.296,247.138 583.864,246.432 584.432,245.924 585.001,247.651 585.569,247.833 586.137,246.925 586.706,246.097 587.274,248.627 587.842,249.723 588.411,250.96 588.979,252.859 589.547,250.623 590.116,248.635 590.684,248.677 591.253,248.836 591.821,247.822 592.389,245.777 592.958,247.162 593.526,245.216 594.094,245.623 594.663,246.968 595.231,245.283 595.799,245.474 596.368,245.442 596.936,246.547 597.504,249.72 598.073,248.566 598.641,249.74 599.209,251.689 599.778,252.311 600.346,251.158 600.914,252.121 601.483,250.589 602.051,250.217 602.619,250.915 603.188,249.267 603.756,246.902 604.325,246.769 604.893,245.615 605.461,244.462 606.03,245.599 606.598,246.421 607.166,247.265 607.735,245.918 608.303,245.711 608.871,244.536 609.44,244.321 610.008,245.216 610.576,245.131 611.145,242.891 611.713,242.031 612.281,241.918 612.85,243.134 613.418,243.008 613.986,241.982 614.555,242.955 615.123,242.891 615.691,243.739 616.26,242.584 616.828,241.712 617.396,241.544 617.965,241.254 618.533,241.216 619.102,240.21 619.67,240.101 620.238,240.033 620.807,237.013 621.375,235.087 621.943,235.412 622.512,234.636 623.08,237.054 623.648,237.317 624.217,236.58 624.785,234.93 625.353,233.263 625.922,232.628 626.49,233.098 627.058,231.589 627.627,233.132 628.195,232.688 628.763,234.069 629.332,234.4 629.9,235.827 630.468,236.057 631.037,237.109 631.605,238.45 632.173,238.461 632.742,235.647 633.31,237.113 633.879,238.254 634.447,237.235 635.015,237.326 635.584,237.565 636.152,238.478 636.72,239.574 637.289,239.579 637.857,240.601 638.425,240.61 638.994,241.648 639.562,240.519 640.13,240.34 640.699,240.066 641.267,238.849 641.835,238.989 642.404,239.784 642.972,238.371 643.54,237.171 644.109,236.179 644.677,236.193 645.245,236.295 645.814,236.359 646.382,237.174 646.951,238.286 647.519,237.187 648.087,237.485 648.656,238.501 649.224,238.386 649.792,239.477 650.361,238.344 650.929,236.972 651.497,236.11 652.066,235.035 652.634,235.141 653.202,234.254 653.771,233.648 654.339,230.716 654.907,231.137 655.476,234.576 656.044,234.718 656.612,231.682 657.181,232.063 657.749,231.406 658.317,231.745 658.886,229.807 659.454,229.341 660.022,230.734 660.591,231.09 661.159,231.401 661.728,233.99 662.296,235.142 662.864,234.275 663.433,234.407 664.001,233.51 664.569,233.642 665.138,234.737 665.706,235.179 666.274,234.27 666.843,235.353 667.411,233.367 667.979,233.409 668.548,234.628 669.116,235.625 669.684,235.694 670.253,233.636 670.821,232.388 671.389,232.657 671.958,231.89 672.526,231.086 673.094,230.69 673.663,231.073 674.231,229.114 674.799,230.412 675.368,230.769 675.936,233.107 676.505,232.147 677.073,231.484 677.641,230.942 678.21,232.548 678.778,231.738 679.346,233.357 679.915,232.814 680.483,233.31 681.051,232.677 681.62,231.92 682.188,231.141 682.756,232.283 683.325,229.468 683.893,229.974 684.461,230.439 685.03,229.825 685.598,230.398 686.166,230.853 686.735,231.143 687.303,231.637 687.871,229.966 688.44,230.521 689.008,230.964 689.577,232.311 690.145,231.497 690.713,230.862 691.282,232.035 691.85,234.674 692.418,235.889 692.987,238.005 693.555,237.903 694.123,237.616 694.692,238.609 695.26,238.456 695.828,238.428 696.397,238.09 696.965,236.837 697.533,235.624 698.102,233.719 698.67,234.755 699.238,234.85 699.807,235.721 700.375,234.782 700.943,233.597 701.512,232.612 702.08,231.666 702.648,231.796 703.217,231.965 703.785,232.399 704.354,233.478 704.922,235.401 705.49,235.56 706.059,235.183 706.627,235.061 707.195,235.927 707.764,232.637 708.332,233.701 708.9,232.59 709.469,232.825 710.037,232.837 710.605,233.961 711.174,234.889 711.742,236.843 712.31,236.666 712.879,234.37 713.447,234.274 714.015,236.192 714.584,235.849 715.152,234.542 715.72,235.531 716.289,233.31 716.857,234.418 717.425,234.342 717.994,235.227 718.562,236.206 719.131,234.89 719.699,232.672 720.267,233.718 720.836,234.818 721.404,234.779 721.972,235.626 722.541,232.339 723.109,229.417 723.677,230.803 724.246,231.092 724.814,231.266 725.382,230.406 725.951,231.631 726.519,233.707 727.087,234.405 727.656,233.371 728.224,232.324 728.792,232.319 729.361,232.23 729.929,231.225 730.497,229.211 731.066,231.451 731.634,230.335 732.203,233.647 732.771,233.333 733.339,232.289 733.908,232.072 734.476,232.181 735.044,231.198 735.613,230.494 736.181,227.528 736.749,228.987 737.318,229.473 737.886,228.632 738.454,228.842 739.023,228.114 739.591,227.33 740.159,225.767 740.728,226.446 741.296,227.873 741.864,228.176 742.433,229.453 743.001,229.428 743.569,227.471 744.138,228.877 744.706,230.091 745.274,230.152 745.843,232.577 746.411,231.849 746.98,232.011 747.548,230.882 748.116,231.223 748.685,231.46 749.253,234.623 749.821,232.363 750.39,233.233 750.958,233.155 751.526,233.183 752.095,233.488 752.663,232.56 753.231,231.52 753.8,231.545 754.368,231.615 754.936,232.862 755.505,231.773 756.073,229.737 756.641,228.787 757.21,228.247 757.778,229.611 758.346,227.554 758.915,227.904 759.483,226.246 760.052,226.758 760.62,227.117 761.188,228.78 761.757,230.046 762.325,233.336 762.893,235.463 763.462,235.347 764.03,235.29 764.598,233.991 765.167,232.826 765.735,231.711 766.303,232.088 766.872,230.127 767.44,229.36 768.008,226.661 768.577,228.101 769.145,231.596 769.713,231.635 770.282,232.566 770.85,235.61 771.418,235.281 771.987,235.185 772.555,232.696 773.123,232.73 773.692,234.725 774.26,234.566 774.829,235.544 775.397,233.18 775.965,230.972 776.534,233.048 777.102,231.015 777.67,228.949 778.239,229.857 778.807,229.879 779.375,229.806 779.944,230.861 780.512,229.877 781.08,230.059 781.649,229.13 782.217,226.439 782.785,225.911 783.354,225.373 783.922,226.002 784.49,226.647 785.059,227.066 785.627,227.59 786.195,229.026 786.764,227.38 787.332,228.746 787.9,228.018 788.469,227.261 789.037,229.646 789.606,229.935 790.174,228.181 790.742,228.29 791.311,230.622 791.879,228.597 792.447,229.855 793.016,229.163 793.584,229.45 794.152,228.815 794.721,231.072 795.289,229.183 795.857,228.213 796.426,228.533 796.994,227.717 797.562,229.1 798.131,229.447 798.699,229.753 799.267,228.92 799.836,229.144 800.404,227.495 800.972,226.935 801.541,227.297 802.109,228.706 802.678,228.059 803.246,228.324 803.814,229.721 804.383,228.062 804.951,228.62 805.519,228.909 806.088,230.33 806.656,231.294 807.224,231.623 807.793,230.485 808.361,233.907 808.929,233.929 809.498,235.096 810.066,233.793 810.634,234.721 811.203,237.681 811.771,239.414 812.339,237.949 812.908,237.62 813.476,239.345 814.044,237.793 814.613,235.415 815.181,235.181 815.749,235.084 816.318,235.896 816.886,232.392 817.455,229.232 818.023,228.507 818.591,229.58 819.16,231.797 819.728,233.754 820.296,233.268 820.865,234.035 821.433,231.831 822.001,231.91 822.57,229.776 823.138,230.112 823.706,229.251 824.275,229.463 824.843,230.517 825.411,231.808 825.98,231.832 826.548,231.998 827.116,234.066 827.685,235.822 828.253,233.196 828.821,235.261 829.39,234.088 829.958,232.862 830.526,234.654 831.095,234.318 831.663,230.896 832.232,229.628 832.8,230.877 833.368,228.765 833.937,229.128 834.505,229.444 835.073,229.265 835.642,228.338 836.21,230.66 836.778,229.602 837.347,229.919 837.915,232.912 838.483,232.791 839.052,232.72 839.62,232.648 840.188,232.35 840.757,231.348 841.325,230.26 841.893,230.51 842.462,227.496 843.03,228.883 843.598,228.252 844.167,227.807 844.735,228.193 845.304,229.328 845.872,229.57 846.44,232.858 847.009,231.727 847.577,231.528 848.145,230.285 848.714,231.442 849.282,231.427 849.85,228.131 850.419,228.444 850.987,228.616 851.555,230.927 852.124,230.839 852.692,232.892 853.26,235.738 853.829,237.632 854.397,235.949 854.965,236.469 855.534,235.945 856.102,235.562 856.67,234.144 857.239,232.883 857.807,231.55 858.375,235.405 858.944,237.087 859.512,234.54 860.081,236.424 860.649,236.144 861.217,234.705 861.786,234.251 862.354,233.93 862.922,232.741 863.491,232.524 864.059,232.187 864.627,234.081 865.196,233.691 865.764,235.371 866.332,233.033 866.901,231.809 867.469,231.607 868.037,229.489 868.606,230.717 869.174,231.641 869.742,232.482 870.311,233.338 870.879,233.348 871.447,234.925 872.016,234.62 872.584,232.422 873.152,231.136 873.721,230.892 874.289,230.7 874.858,229.709 875.426,230.627 875.994,230.575 876.563,230.445 877.131,232.465 877.699,232.048 878.268,229.736 878.836,228.485 879.404,227.324 879.973,226.054 880.541,226.232 881.109,225.302 881.678,225.693 882.246,229.139 882.814,231.054 883.383,230.863 883.951,229.71 884.519,228.836 885.088,222.871 885.656,223.28 886.224,223.505 886.793,222.928 887.361,221.447 887.93,219.895 888.498,220.579 889.066,222.315 889.635,221.976 890.203,224.769 890.771,224.136 891.34,223.472 891.908,222.841 892.476,223.363 893.045,222.752 893.613,222.371 894.181,223.034 894.75,223.308 895.318,224.004 895.886,224.697 896.455,227.188 897.023,226.648 897.591,227.102 898.16,227.601 898.728,227.046 899.296,228.484 899.865,229.69 900.433,229.813 901.001,231.082 901.57,232.115 902.138,232.01 902.707,232.279 903.275,232.27 903.843,229.094 904.412,228.308 904.98,228.528 905.548,226.78 906.117,223.048 906.685,223.743 907.253,225.083 907.822,224.561 908.39,225.113 908.958,227.699 909.527,227.169 910.095,227.54 910.663,229.852 911.232,230.048 911.8,230.26 912.368,230.45 912.937,232.821 913.505,232.994 914.073,231.93 914.642,230.961 915.21,230.91 915.779,232.101 916.347,229.029 916.915,229.34 917.484,228.361 918.052,229.639 918.62,228.592 919.189,228.923 919.757,231.382 920.325,232.52 920.894,233.302 921.462,234.316 922.03,234.128 922.599,233.892 923.167,230.33 923.735,230.416 924.304,230.666 924.872,231.901 925.44,231.797 926.009,230.706 926.577,232.693 927.145,235.804 927.714,235.424 928.282,235.05 928.85,236.048 929.419,236.92 929.987,235.361 930.556,235.085 931.124,234.692 931.692,234.522 932.261,231.035 932.829,231.041 933.397,230.225 933.966,231.126 934.534,231.086 935.102,231.148 935.671,232.29 936.239,233.261 936.807,232.059 937.376,234.087 937.944,237.188 938.512,237.696 939.081,236.139 939.649,234.75 940.217,234.493 940.786,234.082 941.354,232.654 941.922,233.636 942.491,233.291 943.059,233.174 943.627,233.066 944.196,232.823 944.764,233.538 945.333,234.296 945.901,234.006 946.469,232.715 947.038,235.451 947.606,236.004 948.174,236.887 948.743,236.325 949.311,234.664 949.879,234.092 950.448,233.639 951.016,234.22 951.584,230.817 952.153,230.635 952.721,232.577 953.289,233.226 953.858,229.914 954.426,228.755 954.994,226.714 955.563,226.762 956.131,228.891 956.699,229.929 957.268,229.624 957.836,228.5 958.405,227.357 958.973,229.388 959.541,227.625 960.11,228.745 960.678,229.767 961.246,231.832 961.815,229.412 962.383,230.196 962.951,229.221 963.52,228.317 964.088,229.452 964.656,227.315 965.225,226.707 965.793,229.115 966.361,227.054 966.93,228.219 967.498,227.262 968.066,224.314 968.635,223.633 969.203,224.054 969.771,223.408 970.34,222.846 970.908,223.413 971.476,222.858 972.045,223.352 972.613,223.896 973.182,226.494 973.75,225.637 974.318,225.987 974.887,229.488 975.455,229.471 976.023,231.428 976.592,230.378 977.16,231.367 977.728,232.326 978.297,232.13 978.865,233.153 979.433,232.073 980.002,231.985 980.57,232.993 981.138,233.681 981.707,233.492 982.275,235.418 982.843,232.886 983.412,231.672 983.98,232.447 984.548,233.094 985.117,232.674 985.685,231.283 986.253,230.043 986.822,231.21 987.39,229.105 987.959,230.264 988.527,231.345 989.095,230.363 989.664,230.372 990.232,230.164 990.8,229.939 991.369,231.016 991.937,229.782 992.505,230.638 993.074,233.625 993.642,234.485 994.21,235.005 994.779,234.55 995.347,234.039 995.915,230.494 996.484,230.283 997.052,231.049 997.62,231.993 998.189,232.856 998.757,231.524 999.325,231.313 999.894,231.275 1000.46,229.978 1001.03,228.694 1001.6,229.856 1002.17,228.664 1002.74,228.619 1003.3,226.652 1003.87,226.871 1004.44,227.011 1005.01,227.314 1005.58,226.084 1006.15,226.229 1006.71,226.553 1007.28,230.857 1007.85,231.629 1008.42,232.438 1008.99,232.314 1009.56,232.225 1010.12,231.995 1010.69,231.96 1011.26,232.885 1011.83,232.513 1012.4,231.104 1012.97,231.012 1013.53,231.769 1014.1,233.641 1014.67,230.187 1015.24,228.909 1015.81,230.027 1016.38,228.691 1016.94,229.572 1017.51,228.621 1018.08,228.725 1018.65,226.557 1019.22,228.712 1019.79,229.765 1020.35,229.697 1020.92,231.872 1021.49,230.709 1022.06,229.761 1022.63,228.808 1023.2,225.76 1023.76,224.856 1024.33,226.105 1024.9,227.304 1025.47,226.429 1026.04,225.456 1026.61,225.804 1027.17,226.081 1027.74,224.406 1028.31,225.613 1028.88,224.908 1029.45,223.352 1030.02,223.779 1030.58,224.25 1031.15,223.619 1031.72,225.006 1032.29,226.306 1032.86,224.474 1033.43,223.889 1033.99,223.18 1034.56,222.627 1035.13,223.11 1035.7,224.683 1036.27,227.272 1036.84,225.536 1037.4,225.992 1037.97,226.456 1038.54,228.876 1039.11,227.025 1039.68,226.295 1040.25,228.734 1040.81,229 1041.38,229.081 1041.95,230.197 1042.52,230.279 1043.09,230.663 1043.66,232.59 1044.22,233.696 1044.79,233.603 1045.36,233.452 1045.93,234.255 1046.5,237.007 1047.07,235.636 1047.63,235.231 1048.2,232.978 1048.77,233.947 1049.34,234.666 1049.91,234.297 1050.48,235.034 1051.05,233.662 1051.61,233.482 1052.18,233.074 1052.75,234.113 1053.32,233.771 1053.89,232.569 1054.46,231.54 1055.02,230.602 1055.59,231.714 1056.16,229.672 1056.73,229.698 1057.3,229.789 1057.87,231.681 1058.43,232.541 1059,233.215 1059.57,231.897 1060.14,230.795 1060.71,230.662 1061.28,233.647 1061.84,233.364 1062.41,232.097 1062.98,231.844 1063.55,232.828 1064.12,233.545 1064.69,234.295 1065.25,233.991 1065.82,232.74 1066.39,232.42 1066.96,231.183 1067.53,230.987 1068.1,230.811 1068.66,232.817 1069.23,232.379 1069.8,231.158 1070.37,232.176 1070.94,231.06 1071.51,230.903 1072.07,231.784 1072.64,231.751 1073.21,230.51 1073.78,229.58 1074.35,230.547 1074.92,229.51 1075.48,228.48 1076.05,227.596 1076.62,228.811 1077.19,227.913 1077.76,228.821 1078.33,228.751 1078.89,230.92 1079.46,229.552 1080.03,226.364 1080.6,226.576 1081.17,225.507 1081.74,224.654 1082.3,226.88 1082.87,229.016 1083.44,228.131 1084.01,228.252 1084.58,228.419 1085.15,227.33 1085.71,228.519 1086.28,226.633 1086.85,225.896 1087.42,225.103 1087.99,224.408 1088.56,225.918 1089.12,224.114 1089.69,225.502 1090.26,224.654 1090.83,223.997 1091.4,223.633 1091.97,223.043 1092.53,220.604 1093.1,222.425 1093.67,221.151 1094.24,221.961 1094.81,224.508 1095.38,226.978 1095.94,229.453 1096.51,230.708 1097.08,231.93 1097.65,230.873 1098.22,231.786 1098.79,234.857 1099.35,237.569 1099.92,235.182 1100.49,234.821 1101.06,234.947 1101.63,234.606 1102.2,234.562 1102.76,234.102 1103.33,234.688 1103.9,233.42 1104.47,234.151 1105.04,233.843 1105.61,231.852 1106.17,230.801 1106.74,231.893 1107.31,232.756 1107.88,233.546 1108.45,232.237 1109.02,234.271 1109.58,235.125 1110.15,234.82 1110.72,233.34 1111.29,233.134 1111.86,232.837 1112.43,230.493 1112.99,228.169 1113.56,230.206 1114.13,229.974 1114.7,229.949 1115.27,228.886 1115.84,229.618 1116.4,230.507 1116.97,232.675 1117.54,233.26 1118.11,231.939 1118.68,231.511 1119.25,232.176 1119.81,231.978 1120.38,229.863 1120.95,226.716 1121.52,225.719 1122.09,225.956 1122.66,226.094 1123.23,226.246 1123.79,225.604 1124.36,226.878 1124.93,227.068 1125.5,227.044 1126.07,228.145 1126.64,228.367 1127.2,231.156 1127.77,231.902 1128.34,231.833 1128.91,230.665 1129.48,231.699 1130.05,232.581 1130.61,232.444 1131.18,232.268 1131.75,232.927 1132.32,232.611 1132.89,232.328 1133.46,233.06 1134.02,233.774 1134.59,233.576 1135.16,233.256 1135.73,234.957 1136.3,234.446 1136.87,234.037 1137.43,233.68 1138,234.303 1138.57,233.022 1139.14,233.615 1139.71,234.164 1140.28,231.663 1140.84,232.509 1141.41,230.216 1141.98,230.991 1142.55,230.864 1143.12,229.653 1143.69,230.691 1144.25,231.297 1144.82,230.144 1145.39,228.015 1145.96,227.991 1146.53,228.042 1147.1,228.016 1147.66,227.894 1148.23,223.988 1148.8,225.304 1149.37,224.434 1149.94,223.709 1150.51,222.02 1151.07,222.492 1151.64,222.893 1152.21,224.436 1152.78,227.735 1153.35,227.958 1153.92,230.022 1154.48,230.133 1155.05,230.921 1155.62,229.719 1156.19,229.65 1156.76,229.579 1157.33,228.331 1157.89,230.488 1158.46,230.438 1159.03,229.502 1159.6,228.399 1160.17,228.545 1160.74,229.39 1161.3,229.31 1161.87,229.206 1162.44,231.245 1163.01,232.067 1163.58,230.889 1164.15,229.678 1164.71,230.587 1165.28,231.675 1165.85,231.57 1166.42,231.431 1166.99,231.075 1167.56,231.017 1168.12,231.11 1168.69,230.681 1169.26,228.659 1169.83,228.689 1170.4,228.889 1170.97,228.719 1171.53,227.767 1172.1,227.718 1172.67,228.009 1173.24,225.247 1173.81,227.529 1174.38,227.529 1174.94,226.414 1175.51,228.483 1176.08,227.268 1176.65,228.393 1177.22,229.43 1177.79,230.552 1178.35,230.29 1178.92,231.072 1179.49,232.053 1180.06,228.883 1180.63,228.152 1181.2,227.023 1181.76,227.334 1182.33,227.371 1182.9,226.591 1183.47,228.986 1184.04,228.092 1184.61,228.21 1185.17,228.367 1185.74,230.502 1186.31,229.498 1186.88,228.711 1187.45,231.11 1188.02,230.902 1188.58,232.901 1189.15,233.568 1189.72,233.36 1190.29,231.056 1190.86,231.058 1191.43,233.178 1192,231.821 1192.56,230.485 1193.13,230.416 1193.7,229.492 1194.27,232.606 1194.84,232.142 1195.41,233.11 1195.97,232.927 1196.54,227.534 1197.11,227.603 1197.68,226.637 1198.25,228.805 1198.82,229.797 1199.38,227.655 1199.95,228.944 1200.52,227.737 1201.09,226.702 1201.66,229.119 1202.23,228.182 1202.79,229.275 1203.36,227.312 1203.93,227.335 1204.5,227.518 1205.07,227.614 1205.64,227.914 1206.2,228.137 1206.77,229.338 1207.34,227.258 1207.91,227.544 1208.48,228.665 1209.05,228.708 1209.61,233.084 1210.18,233.86 1210.75,234.45 1211.32,232.843 1211.89,233.816 1212.46,234.6 1213.02,233.284 1213.59,231.988 1214.16,230.88 1214.73,229.951 1215.3,229.943 1215.87,229.822 1216.43,228.838 1217,226.787 1217.57,224.785 1218.14,226.368 1218.71,225.44 1219.28,225.551 1219.84,227.814 1220.41,227.113 1220.98,228.44 1221.55,228.451 1222.12,227.563 1222.69,227.805 1223.25,232.067 1223.82,232.068 1224.39,231.944 1224.96,231.77 1225.53,229.603 1226.1,229.662 1226.66,230.547 1227.23,228.324 1227.8,228.544 1228.37,230.728 1228.94,230.47 1229.51,229.361 1230.07,229.339 1230.64,227.214 1231.21,228.501 1231.78,227.473 1232.35,227.749 1232.92,230.986 1233.48,232.811 1234.05,231.639 1234.62,231.249 1235.19,230.115 1235.76,229.045 1236.33,232.064 1236.89,232.033 1237.46,231.837 1238.03,231.628 1238.6,231.485 1239.17,231.483 1239.74,232.413 1240.3,230.237 1240.87,231.286 1241.44,229.008 1242.01,228.04 1242.58,227.299 1243.15,227.378 1243.71,227.504 1244.28,227.725 1244.85,229.949 1245.42,231.109 1245.99,231.356 1246.56,231.263 1247.12,232.263 1247.69,231.947 1248.26,231.927 1248.83,231.768 1249.4,232.676 1249.97,230.533 1250.53,228.262 1251.1,227.53 1251.67,227.742 1252.24,227.855 1252.81,228.754 1253.38,228.648 1253.94,229.569 1254.51,228.451 1255.08,230.662 1255.65,229.47 1256.22,228.274 1256.79,229.441 1257.35,229.276 1257.92,231.484 1258.49,231.607 1259.06,228.262 1259.63,228.404 1260.2,227.394 1260.76,227.503 1261.33,226.804 1261.9,225.78 1262.47,224.977 1263.04,225.501 1263.61,224.815 1264.18,225.177 1264.74,226.401 1265.31,225.553 1265.88,227.99 1266.45,226.982 1267.02,227.516 1267.59,227.609 1268.15,226.547 1268.72,226.973 1269.29,228.255 1269.86,230.619 1270.43,229.747 1271,229.658 1271.56,229.646 1272.13,225.381 1272.7,224.754 1273.27,224.126 1273.84,224.752 1274.41,225.2 1274.97,225.547 1275.54,226.03 1276.11,228.606 1276.68,228.888 1277.25,227.988 1277.82,228.2 1278.38,230.398 1278.95,230.342 1279.52,231.282 1280.09,231.191 1280.66,232.405 1281.23,233.4 1281.79,233.176 1282.36,233.13 1282.93,231.746 1283.5,229.673 1284.07,226.659 1284.64,227.059 1285.2,226.24 1285.77,226.547 1286.34,227.645 1286.91,226.699 1287.48,226.242 1288.05,227.596 1288.61,229.318 1289.18,229.437 1289.75,233.691 1290.32,235.524 1290.89,233.005 1291.46,233.642 1292.02,232.365 1292.59,232.395 1293.16,232.373 1293.73,232.298 1294.3,232.301 1294.87,232.922 1295.43,232.779 1296,233.681 1296.57,231.44 1297.14,232.456 1297.71,232.386 1298.28,234.452 1298.84,233.106 1299.41,232.802 1299.98,233.558 1300.55,231.351 1301.12,231.345 1301.69,231.165 1302.25,230.906 1302.82,231.817 1303.39,230.633 1303.96,232.518 1304.53,231.14 1305.1,228.968 1305.66,229.351 1306.23,230.251 1306.8,229.22 1307.37,229.429 1307.94,231.494 1308.51,230.239 1309.07,229.091 1309.64,229.127 1310.21,227.158 1310.78,227.542 1311.35,227.692 1311.92,225.65 1312.48,226.081 1313.05,225.171 1313.62,224.4 1314.19,224.998 1314.76,225.195 1315.33,226.695 1315.89,226.919 1316.46,225.32 1317.03,225.749 1317.6,225.998 1318.17,224.941 1318.74,225.067 1319.3,224.561 1319.87,224.825 1320.44,226.363 1321.01,227.737 1321.58,228.815 1322.15,229.061 1322.71,228.195 1323.28,228.357 1323.85,228.476 1324.42,231.843 1324.99,233.686 1325.56,234.461 1326.12,234.053 1326.69,234.702 1327.26,236.496 1327.83,234.898 1328.4,234.718 1328.97,234.456 1329.53,233.272 1330.1,234.146 1330.67,233.904 1331.24,232.433 1331.81,234.522 1332.38,234.141 1332.94,232.894 1333.51,231.832 1334.08,232.706 1334.65,232.397 1335.22,233.17 1335.79,231.012 1336.36,230.946 1336.92,232.896 1337.49,232.75 1338.06,231.275 1338.63,231.279 1339.2,232.389 1339.77,233.312 1340.33,232.834 1340.9,232.816 1341.47,231.326 1342.04,230.108 1342.61,228.014 1343.18,227.167 1343.74,228.309 1344.31,227.434 1344.88,227.642 1345.45,229.699 1346.02,230.827 1346.59,229.572 1347.15,232.788 1347.72,233.71 1348.29,231.63 1348.86,230.27 1349.43,230.35 1350,231.266 1350.56,231.331 1351.13,231.089 1351.7,229.894 1352.27,229.895 1352.84,230.924 1353.41,229.918 1353.97,228.892 1354.54,227.827 1355.11,225.644 1355.68,227.79 1356.25,228.868 1356.82,231.026 1357.38,230.8 1357.95,230.654 1358.52,230.396 1359.09,228.318 1359.66,230.532 1360.23,229.472 1360.79,229.34 1361.36,229.474 1361.93,228.341 1362.5,228.402 1363.07,228.628 1363.64,226.682 1364.2,226.661 1364.77,227.743 1365.34,227.908 1365.91,227.977 1366.48,228.108 1367.05,228.194 1367.61,229.242 1368.18,230.395 1368.75,232.591 1369.32,231.123 1369.89,230.977 1370.46,231.002 1371.02,230.977 1371.59,229.891 1372.16,230.957 1372.73,230.905 1373.3,228.943 1373.87,231.382 1374.43,228.969 1375,228.701 1375.57,229.855 1376.14,229.964 1376.71,228.998 1377.28,227.954 1377.84,228.141 1378.41,229.263 1378.98,229.44 1379.55,228.266 1380.12,227.298 1380.69,228.458 1381.25,227.653 1381.82,227.684 1382.39,227.775 1382.96,226.668 1383.53,227.859 1384.1,226.94 1384.66,228.257 1385.23,231.448 1385.8,233.206 1386.37,233.877 1386.94,232.447 1387.51,235.333 1388.07,234.712 1388.64,234.232 1389.21,233.659 1389.78,233.52 1390.35,233.023 1390.92,229.323 1391.48,229.262 1392.05,230.223 1392.62,231.036 1393.19,229.94 1393.76,229.826 1394.33,231.843 1394.89,230.472 1395.46,232.014 1396.03,230.738 1396.6,231.38 1397.17,229.203 1397.74,228.194 1398.3,229.319 1398.87,227.109 1399.44,229.256 1400.01,230.215 1400.58,229.183 1401.15,228.298 1401.71,228.26 1402.28,227.125 1402.85,228.21 1403.42,227.12 1403.99,228.108 1404.56,226.07 1405.13,226.551 1405.69,226.689 1406.26,225.068 1406.83,227.294 1407.4,226.335 1407.97,223.582 1408.54,225.148 1409.1,227.393 1409.67,228.592 1410.24,227.778 1410.81,227.667 1411.38,228.997 1411.95,229.91 1412.51,231.981 1413.08,229.861 1413.65,230.938 1414.22,231.864 1414.79,233.192 1415.36,234.967 1415.92,232.502 1416.49,230.328 1417.06,231.406 1417.63,231.211 1418.2,229.091 1418.77,229.128 1419.33,229.982 1419.9,226.85 1420.47,226.799 1421.04,228.02 1421.61,228.12 1422.18,227.314 1422.74,228.55 1423.31,228.828 1423.88,227.954 1424.45,227.264 1425.02,227.79 1425.59,228.126 1426.15,227.407 1426.72,224.601 1427.29,225.832 1427.86,225.096 1428.43,223.32 1429,224.724 1429.56,223.141 1430.13,225.634 1430.7,227.024 1431.27,227.35 1431.84,229.536 1432.41,228.641 1432.97,230.828 1433.54,231.994 1434.11,230.83 1434.68,230.662 1435.25,231.618 1435.82,232.776 1436.38,233.774 1436.95,232.457 1437.52,233.298 1438.09,231.056 1438.66,229.982 1439.23,230.071 1439.79,228.995 1440.36,230.261 1440.93,229.293 1441.5,229.335 1442.07,227.31 1442.64,227.426 1443.2,227.48 1443.77,227.921 1444.34,228.22 1444.91,226.266 1445.48,228.844 1446.05,228.853 1446.61,227.782 1447.18,230.031 1447.75,231.266 1448.32,232.141 1448.89,234.057 1449.46,233.609 1450.02,232.297 1450.59,230.133 1451.16,229.295 1451.73,230.359 1452.3,230.228 1452.87,231.159 1453.43,230.019 1454,228.096 1454.57,229.348 1455.14,229.2 1455.71,227.232 1456.28,227.305 1456.84,228.546 1457.41,229.008 1457.98,230.355 1458.55,230.191 1459.12,230.21 1459.69,232.312 1460.25,232.122 1460.82,229.112 1461.39,230.236 1461.96,232.243 1462.53,231.906 1463.1,230.475 1463.66,233.376 1464.23,232.163 1464.8,230.9 1465.37,229.934 1465.94,230.693 1466.51,229.452 1467.07,229.503 1467.64,229.518 1468.21,230.462 1468.78,229.195 1469.35,230.28 1469.92,228.009 1470.48,228.219 1471.05,228.344 1471.62,226.37 1472.19,228.613 1472.76,227.713 1473.33,225.867 1473.89,229.171 1474.46,229.256 1475.03,229.273 1475.6,230.326 1476.17,231.359 1476.74,232.335 1477.31,231.227 1477.87,233.157 1478.44,233.923 1479.01,233.752 1479.58,234.485 1480.15,237.245 1480.72,236.685 1481.28,237.167 1481.85,232.546 1482.42,233.286 1482.99,231.753 1483.56,231.636 1484.13,231.357 1484.69,227.955 1485.26,225.924 1485.83,227.329 1486.4,229.593 1486.97,230.353 1487.54,232.466 1488.1,232.306 1488.67,232.208 1489.24,234.049 1489.81,235.832 1490.38,234.452 1490.95,234.096 1491.51,232.663 1492.08,232.321 1492.65,231.964 1493.22,229.484 1493.79,230.29 1494.36,232.428 1494.92,232.297 1495.49,231.951 1496.06,230.706 1496.63,230.526 1497.2,230.165 1497.77,229.051 1498.33,228.797 1498.9,226.728 1499.47,225.905 1500.04,225.204 1500.61,225.281 1501.18,226.62 1501.74,225.629 1502.31,224.732 1502.88,227.181 1503.45,229.372 1504.02,227.171 1504.59,228.354 1505.15,229.702 1505.72,226.612 1506.29,228.896 1506.86,228.954 1507.43,230.118 1508,230.424 1508.56,229.405 1509.13,229.162 1509.7,230.024 1510.27,228.829 1510.84,228.863 1511.41,228.885 1511.97,228.879 1512.54,228.99 1513.11,228.842 1513.68,225.852 1514.25,227.163 1514.82,229.339 1515.38,228.321 1515.95,229.306 1516.52,227.098 1517.09,227.347 1517.66,226.255 1518.23,225.211 1518.79,225.472 1519.36,225.898 1519.93,227.326 1520.5,229.828 1521.07,229.648 1521.64,229.669 1522.2,230.518 1522.77,230.49 1523.34,229.389 1523.91,230.371 1524.48,225.385 1525.05,225.698 1525.61,226.115 1526.18,225.323 1526.75,224.833 1527.32,225.37 1527.89,225.734 1528.46,227.159 1529.02,228.442 1529.59,227.691 1530.16,227.859 1530.73,229.012 1531.3,229.159 1531.87,231.159 1532.43,232.204 1533,230.138 1533.57,230.374 1534.14,228.551 1534.71,228.719 1535.28,230.1 1535.84,231.392 1536.41,231.391 1536.98,230.456 1537.55,233.614 1538.12,235.614 1538.69,235.302 1539.25,232.945 1539.82,230.746 1540.39,230.81 1540.96,230.947 1541.53,231.831 1542.1,232.917 1542.66,232.854 1543.23,230.577 1543.8,231.48 1544.37,230.564 1544.94,230.663 1545.51,230.444 1546.08,228.505 1546.64,227.352 1547.21,229.662 1547.78,231.752 1548.35,232.451 1548.92,232.459 1549.49,231.233 1550.05,230.114 1550.62,228.093 1551.19,230.405 1551.76,230.382 1552.33,233.309 1552.9,231.056 1553.46,228.994 1554.03,230.177 1554.6,228.327 1555.17,226.263 1555.74,227.482 1556.31,225.598 1556.87,224.883 1557.44,227.166 1558.01,227.466 1558.58,228.619 1559.15,229.735 1559.72,229.827 1560.28,230.981 1560.85,229.695 1561.42,229.807 1561.99,227.812 1562.56,229.02 1563.13,228.083 1563.69,230.107 1564.26,229.162 1564.83,228.105 1565.4,228.14 1565.97,229.416 1566.54,229.628 1567.1,229.632 1567.67,227.666 1568.24,227.873 1568.81,229.213 1569.38,228.936 1569.95,230.065 1570.51,230.162 1571.08,230.124 1571.65,230.889 1572.22,229.825 1572.79,229.787 1573.36,228.813 1573.92,229.174 1574.49,229.018 1575.06,229.992 1575.63,230.004 1576.2,231.963 1576.77,232.857 1577.33,234.462 1577.9,233.987 1578.47,233.706 1579.04,232.634 1579.61,235.538 1580.18,235.135 1580.74,234.996 1581.31,232.75 1581.88,232.451 1582.45,231.171 1583.02,228.008 1583.59,230.153 1584.15,230.087 1584.72,229.071 1585.29,229.122 1585.86,229.059 1586.43,229.913 1587,229.791 1587.56,227.723 1588.13,228.181 1588.7,227.308 1589.27,226.398 1589.84,228.571 1590.41,230.667 1590.97,228.546 1591.54,227.555 1592.11,227.623 1592.68,228.786 1593.25,228.722 1593.82,227.755 1594.38,229.76 1594.95,228.648 1595.52,228.792 1596.09,228.922 1596.66,227.929 1597.23,229.155 1597.79,229.233 1598.36,228.207 1598.93,225.444 1599.5,225.56 1600.07,225.932 1600.64,225.144 1601.2,224.474 1601.77,223.92 1602.34,225.536 1602.91,224.942 1603.48,225.237 1604.05,226.714 1604.61,227.176 1605.18,225.332 1605.75,225.818 1606.32,225.983 1606.89,228.298 1607.46,227.384 1608.02,226.677 1608.59,226.871 1609.16,226.234 1609.73,228.663 1610.3,230.903 1610.87,229.787 1611.43,229.797 1612,229.675 1612.57,230.003 1613.14,231.987 1613.71,232.773 1614.28,229.631 1614.84,233.032 1615.41,233.868 1615.98,236.548 1616.55,235.252 1617.12,234.695 1617.69,235.26 1618.26,234.729 1618.82,236.487 1619.39,235.031 1619.96,235.792 1620.53,236.348 1621.1,237.216 1621.67,236.776 1622.23,236.504 1622.8,238.2 1623.37,237.396 1623.94,233.468 1624.51,232.255 1625.08,231.89 1625.64,233.69 1626.21,231.188 1626.78,231.94 1627.35,231.724 1627.92,231.4 1628.49,231.406 1629.05,230.34 1629.62,229.32 1630.19,231.416 1630.76,231.299 1631.33,232.267 1631.9,231.982 1632.46,230.854 1633.03,231.849 1633.6,232.548 1634.17,229.121 1634.74,230.191 1635.31,230.161 1635.87,229.896 1636.44,229.88 1637.01,229.891 1637.58,229.635 1638.15,229.478 1638.72,228.184 1639.28,229.008 1639.85,227.03 1640.42,231.413 1640.99,230.24 1641.56,230.236 1642.13,230.192 1642.69,227.044 1643.26,227.111 1643.83,229.273 1644.4,228.232 1644.97,228.128 1645.54,228.303 1646.1,227.418 1646.67,226.597 1647.24,226.623 1647.81,229.047 1648.38,231.071 1648.95,228.957 1649.51,229.162 1650.08,229.067 1650.65,229.13 1651.22,228.115 1651.79,230.09 1652.36,230.104 1652.92,229.046 1653.49,231.845 1654.06,230.255 1654.63,229.277 1655.2,229.261 1655.77,228.189 1656.33,229.319 1656.9,229.247 1657.47,227.408 1658.04,226.388 1658.61,224.362 1659.18,221.752 1659.74,224.44 1660.31,225.676 1660.88,228.014 1661.45,230.239 1662.02,230.076 1662.59,231.834 1663.15,232.802 1663.72,234.414 1664.29,231.046 1664.86,231.924 1665.43,230.572 1666,232.531 1666.56,232.33 1667.13,231.97 1667.7,231.88 1668.27,231.812 1668.84,230.751 1669.41,227.603 1669.97,227.775 1670.54,226.867 1671.11,225.864 1671.68,227.312 1672.25,226.684 1672.82,225.013 1673.38,225.503 1673.95,225.806 1674.52,226.122 1675.09,226.307 1675.66,226.583 1676.23,227.924 1676.79,228.077 1677.36,226.915 1677.93,227.049 1678.5,229.305 1679.07,229.356 1679.64,231.568 1680.2,231.597 1680.77,231.305 1681.34,229.166 1681.91,226.17 1682.48,226.641 1683.05,227.891 1683.61,230.096 1684.18,229.073 1684.75,227.166 1685.32,226.31 1685.89,226.414 1686.46,228.661 1687.02,229.928 1687.59,231.033 1688.16,229.814 1688.73,229.653 1689.3,229.952 1689.87,228.956 1690.44,229.06 1691,231.162 1691.57,227.912 1692.14,228.083 1692.71,225.363 1693.28,226.792 1693.85,227.956 1694.41,229.269 1694.98,231.359 1695.55,231.475 1696.12,233.46 1696.69,230.14 1697.26,231.212 1697.82,231.96 1698.39,231.827 1698.96,232.734 1699.53,229.489 1700.1,227.493 1700.67,227.765 1701.23,227.958 1701.8,225.912 1702.37,228.159 1702.94,228.332 1703.51,229.446 1704.08,227.329 1704.64,228.696 1705.21,226.684 1705.78,226.87 1706.35,229.272 1706.92,229.288 1707.49,229.314 1708.05,230.721 1708.62,231.915 1709.19,232.017 1709.76,232.817 1710.33,232.547 1710.9,237.427 1711.46,238.027 1712.03,236.237 1712.6,235.843 1713.17,236.683 1713.74,233.04 1714.31,234.895 1714.87,235.465 1715.44,233.825 1716.01,232.645 1716.58,232.436 1717.15,233.229 1717.72,228.717 1718.28,228.574 1718.85,227.627 1719.42,228.866 1719.99,226.842 1720.56,227.081 1721.13,228.213 1721.69,229.403 1722.26,230.655 1722.83,229.285 1723.4,227.068 1723.97,227.346 1724.54,227.621 1725.1,229.783 1725.67,229.613 1726.24,227.408 1726.81,226.603 1727.38,224.881 1727.95,227.358 1728.51,228.671 1729.08,227.825 1729.65,227.724 1730.22,228.59 1730.79,228.818 1731.36,230.104 1731.92,228.849 1732.49,229.725 1733.06,230.729 1733.63,231.59 1734.2,233.405 1734.77,231.233 1735.33,232.21 1735.9,232.142 1736.47,234.016 1737.04,233.807 1737.61,230.614 1738.18,231.436 1738.74,231.321 1739.31,231.288 1739.88,230.191 1740.45,230.23 1741.02,230.225 1741.59,227.133 1742.15,229.13 1742.72,231.126 1743.29,230.917 1743.86,228.729 1744.43,229.948 1745,229.788 1745.56,230.742 1746.13,230.761 1746.7,233.752 1747.27,233.409 1747.84,233.066 1748.41,234.068 1748.97,234.691 1749.54,235.5 1750.11,234.705 1750.68,233.354 1751.25,234.079 1751.82,234.594 1752.38,234.857 1752.95,234.291 1753.52,233.754 1754.09,233.155 1754.66,232.868 1755.23,234.559 1755.79,230.806 1756.36,231.488 1756.93,230.391 1757.5,229.03 1758.07,229.82 1758.64,230.661 1759.21,231.715 1759.77,230.362 1760.34,231.209 1760.91,231.034 1761.48,230.999 1762.05,231.132 1762.62,232.115 1763.18,232.847 1763.75,230.324 1764.32,232.12 1764.89,233.608 1765.46,233.126 1766.03,234.603 1766.59,231.994 1767.16,230.685 1767.73,231.244 1768.3,230.687 1768.87,229.52 1769.44,228.311 1770,228.299 1770.57,227.188 1771.14,230.559 1771.71,229.21 1772.28,229.168 1772.85,229.092 1773.41,227.962 1773.98,226.808 1774.55,226.912 1775.12,226.033 1775.69,227.321 1776.26,227.42 1776.82,226.416 1777.39,225.802 1777.96,225.892 1778.53,224.073 1779.1,226.411 1779.67,225.36 1780.23,225.486 1780.8,224.593 1781.37,224.674 1781.94,225.158 1782.51,223.254 1783.08,220.689 1783.64,223.323 1784.21,224.564 1784.78,226.918 1785.35,226.149 1785.92,227.158 1786.49,227.376 1787.05,230.771 1787.62,231.585 1788.19,231.499 1788.76,231.423 1789.33,229.114 1789.9,229.12 1790.46,228.91 1791.03,227.873 1791.6,226.751 1792.17,227.118 1792.74,229.229 1793.31,228.172 1793.87,226.112 1794.44,225.253 1795.01,225.279 1795.58,224.597 1796.15,226.167 1796.72,226.586 1797.28,223.727 1797.85,227.271 1798.42,228.339 1798.99,225.367 1799.56,227.63 1800.13,226.711 1800.69,227.078 1801.26,229.474 1801.83,230.512 1802.4,230.713 1802.97,230.59 1803.54,229.704 1804.1,231.941 1804.67,233.897 1805.24,235.617 1805.81,232.095 1806.38,232.089 1806.95,229.883 1807.51,229.935 1808.08,229.927 1808.65,229.907 1809.22,230.076 1809.79,227.801 1810.36,226.931 1810.92,228.295 1811.49,226.182 1812.06,226.502 1812.63,227.797 1813.2,227.83 1813.77,229.062 1814.33,228.246 1814.9,229.445 1815.47,229.759 1816.04,229.756 1816.61,229.801 1817.18,230.821 1817.74,230.894 1818.31,230.752 1818.88,230.638 1819.45,230.582 1820.02,231.562 1820.59,234.594 1821.15,233.403 1821.72,232.234 1822.29,231.995 1822.86,231.967 1823.43,231.806 1824,230.787 1824.56,229.548 1825.13,233.59 1825.7,231.642 1826.27,233.51 1826.84,233.316 1827.41,232.013 1827.97,230.758 1828.54,231.659 1829.11,232.379 1829.68,231.373 1830.25,229.274 1830.82,228.185 1831.39,227.137 1831.95,228.4 1832.52,229.533 1833.09,228.433 1833.66,227.379 1834.23,225.379 1834.8,225.658 1835.36,224.989 1835.93,226.453 1836.5,227.773 1837.07,226.803 1837.64,228.022 1838.21,225.959 1838.77,227.332 1839.34,227.483 1839.91,223.285 1840.48,222.981 1841.05,224.678 1841.62,225.944 1842.18,226.067 1842.75,226.286 1843.32,228.543 1843.89,229.771 1844.46,228.817 1845.03,228.747 1845.59,230.693 1846.16,229.749 1846.73,227.748 1847.3,228.01 1847.87,229.43 1848.44,229.704 1849,228.729 1849.57,226.624 1850.14,226.673 1850.71,228.941 1851.28,227.944 1851.85,229.195 1852.41,230.292 1852.98,232.556 1853.55,233.573 1854.12,233.46 1854.69,232.45 1855.26,232.18 1855.82,231.879 1856.39,232.799 1856.96,232.829 1857.53,232.869 1858.1,233.915 1858.67,233.665 1859.23,232.33 1859.8,234.238 1860.37,232.936 1860.94,233.803 1861.51,232.562 1862.08,233.447 1862.64,231.976 1863.21,231.617 1863.78,231.117 1864.35,229.935 1864.92,231.008 1865.49,230.992 1866.05,230.877 1866.62,231.974 1867.19,231.79 1867.76,230.751 1868.33,229.564 1868.9,230.715 1869.46,231.671 1870.03,231.625 1870.6,230.517 1871.17,230.402 1871.74,229.476 1872.31,229.495 1872.87,231.563 1873.44,230.416 1874.01,231.296 1874.58,233.442 1875.15,235.121 1875.72,234.782 1876.28,235.364 1876.85,235.003 1877.42,233.355 1877.99,231.98 1878.56,229.779 1879.13,230.672 1879.69,228.463 1880.26,226.472 1880.83,226.763 1881.4,226.984 1881.97,228.081 1882.54,228.068 1883.1,226.89 1883.67,227.224 1884.24,227.142 1884.81,227.33 1885.38,228.597 1885.95,228.735 1886.51,228.96 1887.08,228.958 1887.65,228.023 1888.22,228.112 1888.79,230.202 1889.36,229.868 1889.92,228.653 1890.49,228.629 1891.06,230.75 1891.63,227.769 1892.2,227.637 1892.77,227.727 1893.33,227.921 1893.9,226.812 1894.47,226.92 1895.04,227.04 1895.61,226.009 1896.18,226.476 1896.74,227.694 1897.31,228.934 1897.88,228.819 1898.45,232.957 1899.02,234.754 1899.59,232.346 1900.16,234.991 1900.72,235.559 1901.29,234.237 1901.86,234.088 1902.43,232.687 1903,233.654 1903.57,232.26 1904.13,229.07 1904.7,226.986 1905.27,224.96 1905.84,225.401 1906.41,226.755 1906.98,226.772 1907.54,226.881 1908.11,226.037 1908.68,225.151 1909.25,225.53 1909.82,226.982 1910.39,227.247 1910.95,227.429 1911.52,224.377 1912.09,222.695 1912.66,226.372 1913.23,227.756 1913.8,228.015 1914.36,228.012 1914.93,226.104 1915.5,225.508 1916.07,226.934 1916.64,226.26 1917.21,226.744 1917.77,226.185 1918.34,226.366 1918.91,228.565 1919.48,229.662 1920.05,230.736 1920.62,230.723 1921.18,227.697 1921.75,227.771 1922.32,226.917 1922.89,228.133 1923.46,227.217 1924.03,227.685 1924.59,226.91 1925.16,229.193 1925.73,229.332 1926.3,231.406 1926.87,231.093 1927.44,233.085 1928,231.944 1928.57,232.958 1929.14,232.758 1929.71,230.462 1930.28,230.351 1930.85,228.532 1931.41,229.746 1931.98,228.85 1932.55,229.172 1933.12,229.145 1933.69,229.258 1934.26,229.359 1934.82,230.371 1935.39,230.279 1935.96,228.187 1936.53,228.405 1937.1,226.63 1937.67,228.054 1938.23,227.166 1938.8,226.557 1939.37,228.064 1939.94,228.155 1940.51,232.516 1941.08,231.357 1941.64,230.283 1942.21,229.395 1942.78,230.416 1943.35,229.616 1943.92,229.658 1944.49,229.846 1945.05,229.842 1945.62,229.853 1946.19,231.715 1946.76,231.612 1947.33,232.604 1947.9,232.353 1948.46,230.466 1949.03,228.504 1949.6,228.627 1950.17,226.915 1950.74,228.297 1951.31,226.442 1951.87,226.872 1952.44,227.079 1953.01,227.328 1953.58,226.53 1954.15,227.799 1954.72,228.884 1955.28,228.89 1955.85,224.91 1956.42,228.412 1956.99,228.502 1957.56,227.692 1958.13,229.895 1958.69,228.979 1959.26,227.225 1959.83,227.554 1960.4,227.605 1960.97,228.903 1961.54,229.969 1962.1,230.05 1962.67,231.147 1963.24,230.108 1963.81,230.053 1964.38,230.167 1964.95,229.27 1965.51,230.45 1966.08,230.252 1966.65,229.247 1967.22,230.35 1967.79,227.279 1968.36,230.614 1968.92,229.733 1969.49,230.802 1970.06,230.824 1970.63,229.581 1971.2,227.567 1971.77,225.736 1972.34,224.929 1972.9,225.37 1973.47,227.793 1974.04,227.091 1974.61,227.311 1975.18,228.633 1975.75,230.768 1976.31,229.682 1976.88,232.59 1977.45,232.477 1978.02,232.494 1978.59,233.29 1979.16,234.117 1979.72,236.205 1980.29,236.743 1980.86,238.515 1981.43,237.894 1982,236.478 1982.57,235.247 1983.13,233.949 1983.7,232.513 1984.27,231.159 1984.84,232.275 1985.41,232.115 1985.98,233.1 1986.54,231.934 1987.11,230.395 1987.68,230.387 1988.25,230.201 1988.82,230.966 1989.39,232.966 1989.95,231.821 1990.52,232.879 1991.09,230.653 1991.66,230.419 1992.23,231.216 1992.8,228.966 1993.36,229.121 1993.93,228.25 1994.5,229.403 1995.07,228.207 1995.64,228.44 1996.21,228.413 1996.77,227.544 1997.34,227.446 1997.91,228.439 1998.48,227.232 1999.05,227.605 1999.62,228.945 2000.18,227.915 2000.75,231.145 2001.32,231.898 2001.89,232.747 2002.46,234.502 2003.03,233.222 2003.59,232.998 2004.16,232.963 2004.73,232.818 2005.3,233.285 2005.87,234.936 2006.44,234.506 2007,234.13 2007.57,232.65 2008.14,231.44 2008.71,231.36 2009.28,233.332 2009.85,231.817 2010.41,232.448 2010.98,229.232 2011.55,229.333 2012.12,229.27 2012.69,230.292 2013.26,230.04 2013.82,229.818 2014.39,229.76 2014.96,230.801 2015.53,230.887 2016.1,229.737 2016.67,227.535 2017.23,228.409 2017.8,227.563 2018.37,226.538 2018.94,225.636 2019.51,226.77 2020.08,227.951 2020.64,229.152 2021.21,229.026 2021.78,228.043 2022.35,226.196 2022.92,226.346 2023.49,225.511 2024.05,227.866 2024.62,230.153 2025.19,230.354 2025.76,230.415 2026.33,230.397 2026.9,232.171 2027.46,232.024 2028.03,230.966 2028.6,230.674 2029.17,230.744 2029.74,231.9 2030.31,231.707 2030.87,231.847 2031.44,232.663 2032.01,231.381 2032.58,230.386 2033.15,229.073 2033.72,231.266 2034.28,232.133 2034.85,233.059 2035.42,232.595 2035.99,231.613 2036.56,233.533 2037.13,232.955 2037.69,232.73 2038.26,232.444 2038.83,232.346 2039.4,232.097 2039.97,230.573 2040.54,231.414 2041.11,230.174 2041.67,231.997 2042.24,231.712 2042.81,231.385 2043.38,232.433 2043.95,232.141 2044.52,230.907 2045.08,231.656 2045.65,229.115 2046.22,230.021 2046.79,231.001 2047.36,229.725 2047.93,230.729 2048.49,231.545 2049.06,229.995 2049.63,229.975 2050.2,228.669 2050.77,228.646 2051.34,228.757 2051.9,228.657 2052.47,229.433 2053.04,228.375 2053.61,227.511 2054.18,227.677 2054.75,227.791 2055.31,226.065 2055.88,226.135 2056.45,224.189 2057.02,224.533 2057.59,225.836 2058.16,225.899 2058.72,224.146 2059.29,226.705 2059.86,226.811 2060.43,223.782 2061,223.302 2061.57,226.884 2062.13,229.379 2062.7,229.328 2063.27,230.457 2063.84,230.252 2064.41,232.21 2064.98,230.801 2065.54,230.624 2066.11,230.657 2066.68,231.579 2067.25,229.479 2067.82,230.575 2068.39,229.431 2068.95,228.381 2069.52,227.455 2070.09,224.466 2070.66,225.735 2071.23,231.357 2071.8,231.224 2072.36,230.099 2072.93,228.171 2073.5,227.442 2074.07,225.67 2074.64,223.949 2075.21,224.349 2075.77,223.772 2076.34,225.458 2076.91,225.727 2077.48,225.902 2078.05,227.053 2078.62,228.311 2079.18,228.23 2079.75,227.439 2080.32,226.697 2080.89,228.072 2081.46,229.255 2082.03,229.457 2082.59,228.167 2083.16,227.414 2083.73,226.316 2084.3,230.557 2084.87,231.643 2085.44,230.363 2086,232.503 2086.57,230.255 2087.14,229.139 2087.71,229.566 2088.28,229.675 2088.85,230.675 2089.41,232.53 2089.98,233.341 2090.55,233.228 2091.12,232.722 2091.69,233.533 2092.26,234.378 2092.82,231.983 2093.39,230.799 2093.96,230.931 2094.53,230.02 2095.1,229.779 2095.67,227.781 2096.23,226.133 2096.8,229.606 2097.37,229.533 2097.94,227.544 2098.51,226.622 2099.08,226.962 2099.64,227.236 2100.21,227.566 2100.78,227.863 2101.35,227.12 2101.92,226.281 2102.49,226.511 2103.05,227.584 2103.62,226.663 2104.19,228.991 2104.76,228.977 2105.33,227.998 2105.9,228.411 2106.46,227.507 2107.03,228.758 2107.6,229.057 2108.17,228.29 2108.74,228.498 2109.31,228.567 2109.87,229.573 2110.44,227.663 2111.01,232.076 2111.58,233.073 2112.15,232.081 2112.72,235.133 2113.29,232.881 2113.85,231.861 2114.42,232.71 2114.99,231.662 2115.56,232.563 2116.13,232.379 2116.7,233.422 2117.26,233.203 2117.83,231.845 2118.4,229.621 2118.97,229.618 2119.54,229.592 2120.11,228.569 2120.67,228.554 2121.24,228.826 2121.81,229.09 2122.38,227.193 2122.95,226.346 2123.52,226.768 2124.08,226.862 2124.65,227.313 2125.22,227.664 2125.79,228.79 2126.36,229.788 2126.93,229.779 2127.49,229.657 2128.06,228.821 2128.63,229.004 2129.2,227.067 2129.77,227.415 2130.34,227.478 2130.9,228.683 2131.47,228.688 2132.04,228.005 2132.61,227.103 2133.18,226.168 2133.75,224.248 2134.31,225.898 2134.88,226.094 2135.45,225.427 2136.02,227.789 2136.59,231.178 2137.16,232.256 2137.72,234.079 2138.29,232.839 2138.86,232.441 2139.43,232.349 2140,233.204 2140.57,234.316 2141.13,232.877 2141.7,229.623 2142.27,226.514 2142.84,230.919 2143.41,230.817 2143.98,231.889 2144.54,230.7 2145.11,231.722 2145.68,230.606 2146.25,229.293 2146.82,231.253 2147.39,232.208 2147.95,230.859 2148.52,229.911 2149.09,229.15 2149.66,231.316 2150.23,231.435 2150.8,232.387 2151.36,231.975 2151.93,235.736 2152.5,235.303 2153.07,233.839 2153.64,234.612 2154.21,234.261 2154.77,234.039 2155.34,234.884 2155.91,236.657 2156.48,233.994 2157.05,233.767 2157.62,233.436 2158.18,233.026 2158.75,233.595 2159.32,231.081 2159.89,233.949 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.016\n  with uncertainty of ± 0.0010097082824110828\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01251 ± (0.00236472, 0.00243426) (MC)\n  95% confidence interval: [-4.01702, -4.00779]) (MC)\n  linear error propagation: -4.01292 ± 0.00238116\n  |δ_y| = |0.00173491| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01251260308077, val_l = 0.004510606780820936, val_u = 0.004725240500033756)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip250\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip251\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip252\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.1 2211.02,1152.1 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1000.9 2211.02,1000.9 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,849.702 2211.02,849.702 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,698.505 2211.02,698.505 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,547.307 2211.02,547.307 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,396.11 2211.02,396.11 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,244.912 2211.02,244.912 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.1 365.751,1152.1 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1000.9 365.751,1000.9 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,849.702 365.751,849.702 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,698.505 365.751,698.505 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,547.307 365.751,547.307 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,396.11 365.751,396.11 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,244.912 365.751,244.912 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M298.909 1137.9 Q295.298 1137.9 293.469 1141.46 Q291.664 1145 291.664 1152.13 Q291.664 1159.24 293.469 1162.8 Q295.298 1166.35 298.909 1166.35 Q302.543 1166.35 304.349 1162.8 Q306.177 1159.24 306.177 1152.13 Q306.177 1145 304.349 1141.46 Q302.543 1137.9 298.909 1137.9 M298.909 1134.19 Q304.719 1134.19 307.775 1138.8 Q310.853 1143.38 310.853 1152.13 Q310.853 1160.86 307.775 1165.47 Q304.719 1170.05 298.909 1170.05 Q293.099 1170.05 290.02 1165.47 Q286.964 1160.86 286.964 1152.13 Q286.964 1143.38 290.02 1138.8 Q293.099 1134.19 298.909 1134.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M259.557 1014.24 L267.196 1014.24 L267.196 987.879 L258.886 989.546 L258.886 985.287 L267.15 983.62 L271.826 983.62 L271.826 1014.24 L279.465 1014.24 L279.465 1018.18 L259.557 1018.18 L259.557 1014.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 986.699 Q295.298 986.699 293.469 990.264 Q291.664 993.805 291.664 1000.93 Q291.664 1008.04 293.469 1011.61 Q295.298 1015.15 298.909 1015.15 Q302.543 1015.15 304.349 1011.61 Q306.177 1008.04 306.177 1000.93 Q306.177 993.805 304.349 990.264 Q302.543 986.699 298.909 986.699 M298.909 982.995 Q304.719 982.995 307.775 987.602 Q310.853 992.185 310.853 1000.93 Q310.853 1009.66 307.775 1014.27 Q304.719 1018.85 298.909 1018.85 Q293.099 1018.85 290.02 1014.27 Q286.964 1009.66 286.964 1000.93 Q286.964 992.185 290.02 987.602 Q293.099 982.995 298.909 982.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M262.775 863.047 L279.094 863.047 L279.094 866.982 L257.15 866.982 L257.15 863.047 Q259.812 860.293 264.395 855.663 Q269.002 851.01 270.182 849.668 Q272.428 847.145 273.307 845.408 Q274.21 843.649 274.21 841.959 Q274.21 839.205 272.266 837.469 Q270.344 835.733 267.242 835.733 Q265.043 835.733 262.59 836.496 Q260.159 837.26 257.381 838.811 L257.381 834.089 Q260.205 832.955 262.659 832.376 Q265.113 831.797 267.15 831.797 Q272.52 831.797 275.715 834.483 Q278.909 837.168 278.909 841.658 Q278.909 843.788 278.099 845.709 Q277.312 847.608 275.205 850.2 Q274.627 850.871 271.525 854.089 Q268.423 857.283 262.775 863.047 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 835.501 Q295.298 835.501 293.469 839.066 Q291.664 842.608 291.664 849.737 Q291.664 856.844 293.469 860.408 Q295.298 863.95 298.909 863.95 Q302.543 863.95 304.349 860.408 Q306.177 856.844 306.177 849.737 Q306.177 842.608 304.349 839.066 Q302.543 835.501 298.909 835.501 M298.909 831.797 Q304.719 831.797 307.775 836.404 Q310.853 840.987 310.853 849.737 Q310.853 858.464 307.775 863.07 Q304.719 867.654 298.909 867.654 Q293.099 867.654 290.02 863.07 Q286.964 858.464 286.964 849.737 Q286.964 840.987 290.02 836.404 Q293.099 831.797 298.909 831.797 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M272.914 697.151 Q276.27 697.868 278.145 700.137 Q280.043 702.405 280.043 705.739 Q280.043 710.854 276.525 713.655 Q273.006 716.456 266.525 716.456 Q264.349 716.456 262.034 716.016 Q259.742 715.6 257.289 714.743 L257.289 710.229 Q259.233 711.364 261.548 711.942 Q263.863 712.521 266.386 712.521 Q270.784 712.521 273.076 710.785 Q275.39 709.049 275.39 705.739 Q275.39 702.683 273.238 700.97 Q271.108 699.234 267.289 699.234 L263.261 699.234 L263.261 695.391 L267.474 695.391 Q270.923 695.391 272.752 694.026 Q274.58 692.637 274.58 690.044 Q274.58 687.382 272.682 685.97 Q270.807 684.535 267.289 684.535 Q265.367 684.535 263.168 684.952 Q260.969 685.368 258.33 686.248 L258.33 682.081 Q260.992 681.341 263.307 680.97 Q265.645 680.6 267.705 680.6 Q273.029 680.6 276.131 683.03 Q279.233 685.438 279.233 689.558 Q279.233 692.428 277.59 694.419 Q275.946 696.387 272.914 697.151 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 684.304 Q295.298 684.304 293.469 687.868 Q291.664 691.41 291.664 698.54 Q291.664 705.646 293.469 709.211 Q295.298 712.752 298.909 712.752 Q302.543 712.752 304.349 709.211 Q306.177 705.646 306.177 698.54 Q306.177 691.41 304.349 687.868 Q302.543 684.304 298.909 684.304 M298.909 680.6 Q304.719 680.6 307.775 685.206 Q310.853 689.79 310.853 698.54 Q310.853 707.266 307.775 711.873 Q304.719 716.456 298.909 716.456 Q293.099 716.456 290.02 711.873 Q286.964 707.266 286.964 698.54 Q286.964 689.79 290.02 685.206 Q293.099 680.6 298.909 680.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M271.594 534.101 L259.789 552.55 L271.594 552.55 L271.594 534.101 M270.367 530.027 L276.247 530.027 L276.247 552.55 L281.177 552.55 L281.177 556.439 L276.247 556.439 L276.247 564.587 L271.594 564.587 L271.594 556.439 L255.992 556.439 L255.992 551.925 L270.367 530.027 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 533.106 Q295.298 533.106 293.469 536.671 Q291.664 540.212 291.664 547.342 Q291.664 554.448 293.469 558.013 Q295.298 561.555 298.909 561.555 Q302.543 561.555 304.349 558.013 Q306.177 554.448 306.177 547.342 Q306.177 540.212 304.349 536.671 Q302.543 533.106 298.909 533.106 M298.909 529.402 Q304.719 529.402 307.775 534.009 Q310.853 538.592 310.853 547.342 Q310.853 556.069 307.775 560.675 Q304.719 565.259 298.909 565.259 Q293.099 565.259 290.02 560.675 Q286.964 556.069 286.964 547.342 Q286.964 538.592 290.02 534.009 Q293.099 529.402 298.909 529.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M258.793 378.83 L277.15 378.83 L277.15 382.765 L263.076 382.765 L263.076 391.237 Q264.094 390.89 265.113 390.728 Q266.131 390.543 267.15 390.543 Q272.937 390.543 276.316 393.714 Q279.696 396.885 279.696 402.302 Q279.696 407.88 276.224 410.982 Q272.752 414.061 266.432 414.061 Q264.256 414.061 261.988 413.691 Q259.742 413.32 257.335 412.579 L257.335 407.88 Q259.418 409.015 261.641 409.57 Q263.863 410.126 266.34 410.126 Q270.344 410.126 272.682 408.019 Q275.02 405.913 275.02 402.302 Q275.02 398.691 272.682 396.584 Q270.344 394.478 266.34 394.478 Q264.465 394.478 262.59 394.894 Q260.738 395.311 258.793 396.191 L258.793 378.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 381.908 Q295.298 381.908 293.469 385.473 Q291.664 389.015 291.664 396.144 Q291.664 403.251 293.469 406.816 Q295.298 410.357 298.909 410.357 Q302.543 410.357 304.349 406.816 Q306.177 403.251 306.177 396.144 Q306.177 389.015 304.349 385.473 Q302.543 381.908 298.909 381.908 M298.909 378.205 Q304.719 378.205 307.775 382.811 Q310.853 387.394 310.853 396.144 Q310.853 404.871 307.775 409.478 Q304.719 414.061 298.909 414.061 Q293.099 414.061 290.02 409.478 Q286.964 404.871 286.964 396.144 Q286.964 387.394 290.02 382.811 Q293.099 378.205 298.909 378.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M269.326 243.049 Q266.178 243.049 264.326 245.201 Q262.497 247.354 262.497 251.104 Q262.497 254.831 264.326 257.007 Q266.178 259.16 269.326 259.16 Q272.474 259.16 274.303 257.007 Q276.154 254.831 276.154 251.104 Q276.154 247.354 274.303 245.201 Q272.474 243.049 269.326 243.049 M278.608 228.396 L278.608 232.655 Q276.849 231.822 275.043 231.382 Q273.261 230.942 271.502 230.942 Q266.872 230.942 264.418 234.067 Q261.988 237.192 261.641 243.512 Q263.006 241.498 265.066 240.433 Q267.127 239.345 269.603 239.345 Q274.812 239.345 277.821 242.516 Q280.853 245.664 280.853 251.104 Q280.853 256.428 277.705 259.646 Q274.557 262.863 269.326 262.863 Q263.33 262.863 260.159 258.28 Q256.988 253.674 256.988 244.947 Q256.988 236.752 260.877 231.891 Q264.766 227.007 271.316 227.007 Q273.076 227.007 274.858 227.354 Q276.664 227.701 278.608 228.396 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M298.909 230.711 Q295.298 230.711 293.469 234.275 Q291.664 237.817 291.664 244.947 Q291.664 252.053 293.469 255.618 Q295.298 259.16 298.909 259.16 Q302.543 259.16 304.349 255.618 Q306.177 252.053 306.177 244.947 Q306.177 237.817 304.349 234.275 Q302.543 230.711 298.909 230.711 M298.909 227.007 Q304.719 227.007 307.775 231.613 Q310.853 236.197 310.853 244.947 Q310.853 253.674 307.775 258.28 Q304.719 262.863 298.909 262.863 Q293.099 262.863 290.02 258.28 Q286.964 253.674 286.964 244.947 Q286.964 236.197 290.02 231.613 Q293.099 227.007 298.909 227.007 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip252)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1040.69 400.199,938.342 400.786,844.433 401.372,758.398 401.958,679.71 402.545,607.887 403.131,542.478 403.718,483.066 404.304,429.262 404.891,472.089 405.477,424.155 406.063,381.033 406.65,342.413 407.236,378.345 407.823,344.807 408.409,316.272 408.995,291.014 409.582,269.301 410.168,250.656 410.755,233.671 411.341,264.439 411.927,252.163 412.514,241.307 413.1,233.316 413.687,227.896 414.273,223.282 414.86,220.49 415.446,219.895 416.032,247.065 416.619,297.3 417.205,322.116 417.792,326.187 418.378,350.073 418.964,390.061 419.551,395.783 420.137,401.578 420.724,422.87 421.31,429.089 421.896,436.21 422.483,481.528 423.069,489.441 423.656,498.467 424.242,506.78 424.829,526.401 425.415,536.738 426.001,547.781 426.588,567.428 427.174,586.207 427.761,603.822 428.347,613.232 428.933,637.571 429.52,653.541 430.106,668.832 430.693,678.235 431.279,693.381 431.865,707.429 432.452,716.286 433.038,730.069 433.625,738.72 434.211,756.575 434.798,765.21 435.384,782.503 435.97,794.615 436.557,806.948 437.143,818.57 437.73,830.195 438.316,841.427 438.902,852.638 439.489,862.942 440.075,880.312 440.662,890.5 441.248,900.314 441.835,906.998 442.421,916.534 443.007,922.689 443.594,937.296 444.18,945.984 444.767,954.312 445.353,962.779 445.939,968.357 446.526,978.957 447.112,984.384 447.699,992.134 448.285,997.488 448.871,1007.61 449.458,1014.94 450.044,1022.14 450.631,1034.24 451.217,1043.16 451.804,1047.35 452.39,1053.84 452.976,1057.7 453.563,1063.8 454.149,1071.73 454.736,1077.4 455.322,1083.13 455.908,1088.36 456.495,1093.62 457.081,1096.91 457.668,1104.03 458.254,1107.3 458.84,1113.95 459.427,1120.66 460.013,1125.33 460.6,1127.78 461.186,1130.57 461.773,1133.08 462.359,1140.8 462.945,1145 463.532,1147.53 464.118,1151.73 464.705,1157 465.291,1160.41 465.877,1164.11 466.464,1166.17 467.05,1174.31 467.637,1177.31 468.223,1178.49 468.809,1179.75 469.396,1180.86 469.982,1183.47 470.569,1184.61 471.155,1187.12 471.742,1189.86 472.328,1192.16 472.914,1194.51 473.501,1198.25 474.087,1204.68 474.674,1209.54 475.26,1213.8 475.846,1219.65 476.433,1222.49 477.019,1223.81 477.606,1227.78 478.192,1228.59 478.778,1231.99 479.365,1231.33 479.951,1231.87 480.538,1232.47 481.124,1234.47 481.711,1236.21 482.297,1238.04 482.883,1235.72 483.47,1239.06 484.056,1242.41 484.643,1241.6 485.229,1241.69 485.815,1244.99 486.402,1242.92 486.988,1243.42 487.575,1242.44 488.161,1241.61 488.748,1246.43 489.334,1243.97 489.92,1244.58 490.507,1245.18 491.093,1244.33 491.68,1240.7 492.266,1239.75 492.852,1243.2 493.439,1241.19 494.025,1241.97 494.612,1245.63 495.198,1246.15 495.784,1249.23 496.371,1248.14 496.957,1248.26 497.544,1248.87 498.13,1247.84 498.717,1246.69 499.303,1247.17 499.889,1246.43 500.476,1246.03 501.062,1247.97 501.649,1248.4 502.235,1246.02 502.821,1245.38 503.408,1244.61 503.994,1246.64 504.581,1244.7 505.167,1246.56 505.753,1246.99 506.34,1248.73 506.926,1246.53 507.513,1247.09 508.099,1246.26 508.686,1244.29 509.272,1243.54 509.858,1244.08 510.445,1244.69 511.031,1243.65 511.618,1244.54 512.204,1243.95 512.79,1241.94 513.377,1242.54 513.963,1243.27 514.55,1240.17 515.136,1238.39 515.722,1239.49 516.309,1239.38 516.895,1239.03 517.482,1242.72 518.068,1243.67 518.655,1244.15 519.241,1249.8 519.827,1244.96 520.414,1245.68 521,1245.22 521.587,1244.66 522.173,1245.35 522.759,1243.8 523.346,1243.54 523.932,1244.3 524.519,1246.13 525.105,1245.35 525.691,1246.23 526.278,1245.83 526.864,1241.25 527.451,1244.51 528.037,1245.19 528.624,1247.24 529.21,1246.37 529.796,1244.43 530.383,1249.11 530.969,1248.33 531.556,1249.86 532.142,1250.31 532.728,1250.53 533.315,1248.04 533.901,1247.4 534.488,1248.07 535.074,1248.67 535.661,1245.2 536.247,1243.42 536.833,1241.43 537.42,1238.61 538.006,1240.79 538.593,1242.72 539.179,1242.22 539.765,1241.58 540.352,1242.36 540.938,1244.42 541.525,1242.35 542.111,1244.3 542.697,1243.44 543.284,1241.43 543.87,1243.07 544.457,1242.47 545.043,1242.13 545.63,1240.42 546.216,1236.15 546.802,1237.09 547.389,1235.21 547.975,1232.35 548.562,1231.07 549.148,1231.94 549.734,1230.25 550.321,1231.6 550.907,1231.55 551.494,1230.21 552.08,1231.72 552.666,1234.14 553.253,1233.89 553.839,1234.89 554.426,1235.92 555.012,1234.19 555.599,1232.81 556.185,1231.39 556.771,1232.61 557.358,1232.48 557.944,1233.53 558.531,1233.44 559.117,1232 559.703,1231.74 560.29,1234.09 560.876,1234.82 561.463,1234.67 562.049,1232.9 562.635,1232.74 563.222,1233.67 563.808,1232.2 564.395,1231.96 564.981,1230.62 565.568,1231.69 566.154,1232.44 566.74,1232.36 567.327,1232.43 567.913,1232.21 568.5,1233.15 569.086,1233.03 569.672,1232.87 570.259,1236.27 570.845,1238.42 571.432,1237.9 572.018,1238.7 572.605,1235.67 573.191,1235.18 573.777,1235.89 574.364,1237.71 574.95,1239.59 575.537,1240.27 576.123,1239.64 576.709,1241.37 577.296,1239.47 577.882,1239.92 578.469,1238.19 579.055,1237.69 579.641,1235.86 580.228,1235.44 580.814,1234.03 581.401,1232.23 581.987,1232.01 582.574,1235.2 583.16,1233.29 583.746,1231.74 584.333,1232.77 584.919,1232.48 585.506,1232.01 586.092,1230.73 586.678,1229.2 587.265,1228.96 587.851,1227.49 588.438,1227.22 589.024,1225.7 589.61,1226.79 590.197,1226.75 590.783,1226.83 591.37,1228.05 591.956,1227.67 592.543,1226.49 593.129,1227.96 593.715,1229.2 594.302,1230.22 594.888,1230.05 595.475,1229.77 596.061,1229.54 596.647,1228.4 597.234,1226.88 597.82,1228.01 598.407,1227.47 598.993,1226.06 599.579,1225.99 600.166,1224.47 600.752,1225.61 601.339,1227.06 601.925,1227.92 602.512,1229.07 603.098,1228.81 603.684,1229.75 604.271,1230.37 604.857,1233.79 605.444,1233.27 606.03,1229.1 606.616,1228.82 607.203,1232.34 607.789,1231.84 608.376,1232.57 608.962,1232.13 609.548,1234.4 610.135,1234.95 610.721,1233.29 611.308,1232.84 611.894,1232.44 612.481,1229.29 613.067,1227.8 613.653,1228.72 614.24,1228.45 614.826,1229.42 615.413,1229.17 615.999,1227.76 616.585,1227.11 617.172,1228.07 617.758,1226.66 618.345,1228.92 618.931,1228.78 619.518,1227.23 620.104,1225.91 620.69,1225.69 621.277,1228.02 621.863,1229.43 622.45,1229.04 623.036,1229.89 623.622,1230.8 624.209,1231.24 624.795,1230.76 625.382,1233.07 625.968,1231.53 626.554,1231.09 627.141,1228.26 627.727,1229.33 628.314,1230.07 628.9,1230.67 629.487,1228.72 630.073,1229.62 630.659,1227.63 631.246,1228.2 631.832,1227.53 632.419,1228.2 633.005,1229.04 633.591,1229.92 634.178,1228.52 634.764,1231.83 635.351,1231.23 635.937,1230.67 636.523,1231.38 637.11,1230.69 637.696,1230.13 638.283,1229.76 638.869,1229.13 639.456,1231.09 640.042,1230.41 640.628,1229.86 641.215,1228.22 641.801,1229.13 642.388,1229.85 642.974,1228.42 643.56,1225.19 644.147,1223.61 644.733,1220.92 645.32,1220.85 645.906,1221 646.492,1219.61 647.079,1219.59 647.665,1219.41 648.252,1219.62 648.838,1220.93 649.425,1222.22 650.011,1224.37 650.597,1223.03 651.184,1222.8 651.77,1221.63 652.357,1222.62 652.943,1223.92 653.529,1225.01 654.116,1226.08 654.702,1225.87 655.289,1225.62 655.875,1225.05 656.462,1223.69 657.048,1221.29 657.634,1220.96 658.221,1221.28 658.807,1221.29 659.394,1220.13 659.98,1223.93 660.566,1222.59 661.153,1223.82 661.739,1223.48 662.326,1223.39 662.912,1221.96 663.498,1220.75 664.085,1218.27 664.671,1218.32 665.258,1220.91 665.844,1220.92 666.431,1218.51 667.017,1218.76 667.603,1220.19 668.19,1218.89 668.776,1221.42 669.363,1220 669.949,1219.98 670.535,1218.81 671.122,1217.5 671.708,1218.93 672.295,1221.47 672.881,1220.15 673.467,1218.73 674.054,1218.66 674.64,1217.52 675.227,1221.33 675.813,1224.76 676.4,1223.11 676.986,1222.74 677.572,1222.5 678.159,1223.49 678.745,1222.01 679.332,1219.47 679.918,1218.54 680.504,1219.67 681.091,1220.84 681.677,1220.78 682.264,1220.82 682.85,1221.97 683.436,1224.34 684.023,1221.67 684.609,1222.97 685.196,1218.98 685.782,1219.27 686.369,1220.43 686.955,1220.63 687.541,1220.44 688.128,1221.56 688.714,1222.37 689.301,1225.9 689.887,1224.21 690.473,1223.64 691.06,1224.65 691.646,1224.43 692.233,1225.32 692.819,1226.29 693.405,1228.21 693.992,1227.49 694.578,1225.86 695.165,1225.54 695.751,1224.05 696.338,1224.09 696.924,1226.43 697.51,1224.8 698.097,1223.37 698.683,1223.29 699.27,1220.37 699.856,1221.17 700.442,1220.93 701.029,1222.23 701.615,1221.79 702.202,1221.47 702.788,1217.63 703.375,1220.23 703.961,1219.12 704.547,1219.13 705.134,1219.02 705.72,1218.57 706.307,1219.59 706.893,1220.77 707.479,1220.7 708.066,1220.57 708.652,1219.03 709.239,1220.26 709.825,1222.65 710.411,1223.79 710.998,1224.45 711.584,1222.86 712.171,1225.32 712.757,1224.95 713.344,1226.97 713.93,1226.44 714.516,1226.08 715.103,1224.15 715.689,1222.66 716.276,1218.71 716.862,1216.06 717.448,1216.07 718.035,1216 718.621,1217.43 719.208,1218.73 719.794,1219.99 720.38,1219.49 720.967,1221.79 721.553,1222.69 722.14,1225.93 722.726,1224.28 723.313,1220.13 723.899,1220.04 724.485,1218.88 725.072,1215.15 725.658,1215.41 726.245,1215.39 726.831,1218.25 727.417,1218.14 728.004,1215.67 728.59,1215.75 729.177,1214.45 729.763,1217.16 730.349,1219.72 730.936,1217.2 731.522,1219.56 732.109,1222.01 732.695,1220.94 733.282,1220.9 733.868,1220.99 734.454,1219.72 735.041,1220.87 735.627,1220.65 736.214,1221.75 736.8,1224.98 737.386,1225.68 737.973,1226.41 738.559,1225.77 739.146,1225.08 739.732,1224.65 740.318,1224.09 740.905,1222.42 741.491,1224.4 742.078,1222.83 742.664,1223.72 743.251,1224.66 743.837,1221.87 744.423,1221.52 745.01,1223.61 745.596,1223.52 746.183,1220.76 746.769,1223.16 747.355,1221.68 747.942,1222.51 748.528,1222.18 749.115,1222.94 749.701,1220.26 750.288,1222.49 750.874,1223.66 751.46,1223.31 752.047,1224.31 752.633,1222.71 753.22,1222.3 753.806,1221.94 754.392,1222.94 754.979,1222.69 755.565,1224.67 756.152,1225.39 756.738,1225.02 757.324,1223.4 757.911,1224.19 758.497,1223.91 759.084,1222.27 759.67,1224.26 760.257,1223.63 760.843,1223.31 761.429,1221.63 762.016,1220.46 762.602,1220.02 763.189,1221.34 763.775,1217.22 764.361,1217.09 764.948,1215.59 765.534,1217.03 766.121,1215.82 766.707,1212.13 767.293,1209.85 767.88,1211.39 768.466,1211.6 769.053,1209.33 769.639,1210.97 770.226,1213.65 770.812,1213.79 771.398,1213.78 771.985,1212.68 772.571,1216.74 773.158,1220.46 773.744,1221.34 774.33,1220.08 774.917,1217.43 775.503,1215.03 776.09,1215.52 776.676,1214.51 777.262,1217.06 777.849,1216.91 778.435,1219.42 779.022,1219.01 779.608,1220.03 780.195,1219.79 780.781,1218.53 781.367,1216.96 781.954,1216.89 782.54,1216.64 783.127,1214.1 783.713,1211.88 784.299,1214.9 784.886,1212.33 785.472,1213.61 786.059,1214.98 786.645,1212.75 787.232,1213.04 787.818,1217.04 788.404,1218.53 788.991,1217.03 789.577,1219.53 790.164,1219.12 790.75,1218.75 791.336,1218.97 791.923,1220.09 792.509,1217.35 793.096,1218.59 793.682,1218.21 794.268,1214.62 794.855,1214.69 795.441,1214.7 796.028,1214.72 796.614,1215 797.201,1216.14 797.787,1217.4 798.373,1217.09 798.96,1220.68 799.546,1219.07 800.133,1219.84 800.719,1220.41 801.305,1219.99 801.892,1218.67 802.478,1218.39 803.065,1214.45 803.651,1215.73 804.237,1215.92 804.824,1217.37 805.41,1215.97 805.997,1215.95 806.583,1219.85 807.17,1219.51 807.756,1219.33 808.342,1216.59 808.929,1216.67 809.515,1214.18 810.102,1210.68 810.688,1208.26 811.274,1210.1 811.861,1209.33 812.447,1209.8 813.034,1210.11 813.62,1211.68 814.206,1213.09 814.793,1214.61 815.379,1209.94 815.966,1207.78 816.552,1210.67 817.139,1208.29 817.725,1208.47 818.311,1210.05 818.898,1210.47 819.484,1210.75 820.071,1212.08 820.657,1212.27 821.243,1212.61 821.83,1210.27 822.416,1210.64 823.003,1208.52 823.589,1211.2 824.175,1212.59 824.762,1212.78 825.348,1215.27 825.935,1213.81 826.521,1212.68 827.108,1211.62 827.694,1210.53 828.28,1210.43 828.867,1208.45 829.453,1208.69 830.04,1211.22 830.626,1212.69 831.212,1212.95 831.799,1213.15 832.385,1214.32 832.972,1213.22 833.558,1213.26 834.145,1213.39 834.731,1210.95 835.317,1211.39 835.904,1214.1 836.49,1215.6 837.077,1217.01 837.663,1218.58 838.249,1218.45 838.836,1219.64 839.422,1219.28 840.009,1215.26 840.595,1212.98 841.181,1213.18 841.768,1214.53 842.354,1215.57 842.941,1222.7 843.527,1222.38 844.114,1222.26 844.7,1223.09 845.286,1225.01 845.873,1227.04 846.459,1226.46 847.046,1224.61 847.632,1225.18 848.218,1222.04 848.805,1222.91 849.391,1223.83 849.978,1224.73 850.564,1224.26 851.15,1225.14 851.737,1225.75 852.323,1225.14 852.91,1224.97 853.496,1224.29 854.083,1223.6 854.669,1220.74 855.255,1221.45 855.842,1220.97 856.428,1220.44 857.015,1221.15 857.601,1219.5 858.187,1218.08 858.774,1217.93 859.36,1216.41 859.947,1215.14 860.533,1215.21 861.119,1214.83 861.706,1214.78 862.292,1218.52 862.879,1219.48 863.465,1219.25 864.052,1221.36 864.638,1225.87 865.224,1225.2 865.811,1223.75 866.397,1224.47 866.984,1223.94 867.57,1220.96 868.156,1221.64 868.743,1221.26 869.329,1218.54 869.916,1218.3 870.502,1218.04 871.089,1217.8 871.675,1214.94 872.261,1214.66 872.848,1215.86 873.434,1216.97 874.021,1217 874.607,1215.54 875.193,1219.16 875.78,1218.8 876.366,1219.98 876.953,1218.49 877.539,1219.74 878.125,1219.37 878.712,1216.44 879.298,1215.04 879.885,1214.03 880.471,1212.73 881.058,1212.85 881.644,1213.03 882.23,1217.2 882.817,1217.08 883.403,1216.76 883.99,1215.26 884.576,1215.33 885.162,1216.59 885.749,1214.19 886.335,1210.38 886.922,1210.69 887.508,1211 888.094,1209.68 888.681,1208.48 889.267,1210.18 889.854,1210.38 890.44,1210.73 891.027,1210.81 891.613,1214.88 892.199,1214.84 892.786,1215.79 893.372,1214.7 893.959,1214.71 894.545,1214.6 895.131,1213.2 895.718,1211.97 896.304,1213.33 896.891,1210.84 897.477,1207.01 898.063,1206.22 898.65,1207.91 899.236,1209.42 899.823,1209.61 900.409,1210 900.996,1211.61 901.582,1210.36 902.168,1210.68 902.755,1210.73 903.341,1210.78 903.928,1210.99 904.514,1210.06 905.1,1209.06 905.687,1209.3 906.273,1210.75 906.86,1207.39 907.446,1206.59 908.032,1205.38 908.619,1205.88 909.205,1207.73 909.792,1208.3 910.378,1208.74 910.965,1207.95 911.551,1211.92 912.137,1212.11 912.724,1209.76 913.31,1208.92 913.897,1212.8 914.483,1214.18 915.069,1216.64 915.656,1216.65 916.242,1214.18 916.829,1212.96 917.415,1213.32 918.002,1214.66 918.588,1216.05 919.174,1213.68 919.761,1215.8 920.347,1214.51 920.934,1213.31 921.52,1210.83 922.106,1213.68 922.693,1212.75 923.279,1213.9 923.866,1214.99 924.452,1213.67 925.038,1216.23 925.625,1217.01 926.211,1214.2 926.798,1216.68 927.384,1215.35 927.971,1216.52 928.557,1220.09 929.143,1221.03 929.73,1220.67 930.316,1221.57 930.903,1222.39 931.489,1221.87 932.075,1222.68 932.662,1222.25 933.248,1221.75 933.835,1218.79 934.421,1219.89 935.007,1219.57 935.594,1215.47 936.18,1215.5 936.767,1213.16 937.353,1214.37 937.94,1213.17 938.526,1211.98 939.112,1212.16 939.699,1210.87 940.285,1212.09 940.872,1212.13 941.458,1210.87 942.044,1209.97 942.631,1210.1 943.217,1207.7 943.804,1210.6 944.39,1211.98 944.976,1211.01 945.563,1210.17 946.149,1210.59 946.736,1212.19 947.322,1213.63 947.909,1212.23 948.495,1214.71 949.081,1213.34 949.668,1212.03 950.254,1213.17 950.841,1213.14 951.427,1213.37 952.013,1213.63 952.6,1212.34 953.186,1213.78 953.773,1212.76 954.359,1209.15 954.945,1208.03 955.532,1207.29 956.118,1207.71 956.705,1208.21 957.291,1212.36 957.878,1212.59 958.464,1211.66 959.05,1210.5 959.637,1209.41 960.223,1210.93 960.81,1211.14 961.396,1211.15 961.982,1212.66 962.569,1214.19 963.155,1212.82 963.742,1214.25 964.328,1214.32 964.915,1216.7 965.501,1216.51 966.087,1216.41 966.674,1216.11 967.26,1217.63 967.847,1217.54 968.433,1217.23 969.019,1212.16 969.606,1211.21 970.192,1210.2 970.779,1210.28 971.365,1210.32 971.951,1210.54 972.538,1210.53 973.124,1209.36 973.711,1209.74 974.297,1211.36 974.884,1211.44 975.47,1210.5 976.056,1208.2 976.643,1212.25 977.229,1213.77 977.816,1212.45 978.402,1214.04 978.988,1213.01 979.575,1214.15 980.161,1214.05 980.748,1216.66 981.334,1214.16 981.92,1212.92 982.507,1213 983.093,1210.39 983.68,1211.74 984.266,1212.85 984.853,1213.99 985.439,1217.64 986.025,1218.81 986.612,1217.44 987.198,1216.09 987.785,1217.19 988.371,1218.43 988.957,1218.11 989.544,1217.87 990.13,1219.95 990.717,1218.64 991.303,1219.57 991.889,1221.54 992.476,1221.18 993.062,1220.75 993.649,1221.63 994.235,1220.12 994.822,1218.68 995.408,1220.94 995.994,1221.76 996.581,1222.74 997.167,1223.55 997.754,1223.14 998.34,1221.42 998.926,1218.45 999.513,1220.58 1000.1,1220.13 1000.69,1219.67 1001.27,1216.85 1001.86,1219.08 1002.44,1220.02 1003.03,1217.18 1003.62,1216.89 1004.2,1216.81 1004.79,1215.49 1005.38,1215.38 1005.96,1214.9 1006.55,1212.57 1007.14,1211.17 1007.72,1211.19 1008.31,1211.28 1008.9,1210.23 1009.48,1206.81 1010.07,1208.28 1010.65,1208.63 1011.24,1211.21 1011.83,1209.97 1012.41,1209 1013,1209.33 1013.59,1208.33 1014.17,1209.86 1014.76,1209.98 1015.35,1210.38 1015.93,1209.05 1016.52,1209.36 1017.11,1210.71 1017.69,1211.87 1018.28,1212.95 1018.86,1211.6 1019.45,1214 1020.04,1213.97 1020.62,1213.86 1021.21,1211.59 1021.8,1210.51 1022.38,1209.63 1022.97,1211.13 1023.56,1212.4 1024.14,1212.53 1024.73,1208.93 1025.32,1209.18 1025.9,1210.61 1026.49,1210.86 1027.07,1209.63 1027.66,1208.69 1028.25,1207.7 1028.83,1207.96 1029.42,1209.36 1030.01,1209.67 1030.59,1211.09 1031.18,1211.29 1031.77,1211.47 1032.35,1209.04 1032.94,1209.49 1033.52,1210.89 1034.11,1209.63 1034.7,1210.91 1035.28,1211.07 1035.87,1209.98 1036.46,1209.97 1037.04,1211.41 1037.63,1212.51 1038.22,1211.35 1038.8,1212.57 1039.39,1213.81 1039.98,1214.89 1040.56,1213.49 1041.15,1214.58 1041.73,1213.54 1042.32,1213.64 1042.91,1211.07 1043.49,1212.68 1044.08,1216.49 1044.67,1216.31 1045.25,1217.66 1045.84,1218.77 1046.43,1216.24 1047.01,1213.75 1047.6,1214.83 1048.19,1214.72 1048.77,1214.55 1049.36,1215.88 1049.94,1214.52 1050.53,1216.8 1051.12,1217.75 1051.7,1218.78 1052.29,1219.71 1052.88,1218.04 1053.46,1220.28 1054.05,1218.75 1054.64,1219.86 1055.22,1220.76 1055.81,1221.33 1056.39,1222.17 1056.98,1225.22 1057.57,1223.27 1058.15,1224.95 1058.74,1224.19 1059.33,1221.34 1059.91,1218.52 1060.5,1215.63 1061.09,1214.13 1061.67,1212.64 1062.26,1213.85 1062.85,1212.73 1063.43,1209 1064.02,1205.61 1064.6,1208.3 1065.19,1208.6 1065.78,1208.33 1066.36,1208.62 1066.95,1208.55 1067.54,1208.99 1068.12,1208.18 1068.71,1209.59 1069.3,1208.62 1069.88,1208.89 1070.47,1211.18 1071.06,1212.39 1071.64,1211.05 1072.23,1209.97 1072.81,1208.95 1073.4,1210.43 1073.99,1207.92 1074.57,1206.79 1075.16,1207.03 1075.75,1208.68 1076.33,1208.85 1076.92,1209.12 1077.51,1211.86 1078.09,1214.62 1078.68,1212.22 1079.26,1212.48 1079.85,1212.51 1080.44,1213.77 1081.02,1212.91 1081.61,1211.85 1082.2,1209.23 1082.78,1208.46 1083.37,1209.96 1083.96,1210.42 1084.54,1209.58 1085.13,1209.76 1085.72,1212.24 1086.3,1216 1086.89,1217.25 1087.47,1217.06 1088.06,1216.99 1088.65,1216.89 1089.23,1217.74 1089.82,1216.31 1090.41,1216.15 1090.99,1216.24 1091.58,1214.99 1092.17,1214.76 1092.75,1211.45 1093.34,1210.52 1093.93,1210.55 1094.51,1211.9 1095.1,1210.64 1095.68,1209.54 1096.27,1209.63 1096.86,1209.78 1097.44,1208.93 1098.03,1209.23 1098.62,1209.5 1099.2,1208.56 1099.79,1207.62 1100.38,1207.76 1100.96,1208.06 1101.55,1205.93 1102.14,1206.42 1102.72,1206.8 1103.31,1207.12 1103.89,1206.28 1104.48,1207.71 1105.07,1206.92 1105.65,1206.17 1106.24,1209.07 1106.83,1208 1107.41,1210.69 1108,1209.75 1108.59,1209.87 1109.17,1211.29 1109.76,1210.05 1110.34,1209.3 1110.93,1210.64 1111.52,1213.18 1112.1,1213.24 1112.69,1213.22 1113.28,1213.29 1113.86,1213.48 1114.45,1218.17 1115.04,1216.74 1115.62,1217.88 1116.21,1218.87 1116.8,1221.01 1117.38,1220.63 1117.97,1220.32 1118.55,1218.64 1119.14,1214.83 1119.73,1214.61 1120.31,1212.19 1120.9,1212.05 1121.49,1211.09 1122.07,1212.5 1122.66,1212.58 1123.25,1212.67 1123.83,1214.16 1124.42,1211.61 1125.01,1211.66 1125.59,1212.76 1126.18,1214.08 1126.76,1213.94 1127.35,1212.95 1127.94,1213.06 1128.52,1213.19 1129.11,1210.76 1129.7,1209.74 1130.28,1211.09 1130.87,1212.51 1131.46,1211.43 1132.04,1210.1 1132.63,1210.18 1133.21,1210.3 1133.8,1210.69 1134.39,1210.72 1134.97,1210.58 1135.56,1211.06 1136.15,1213.46 1136.73,1213.45 1137.32,1213.23 1137.91,1213.45 1138.49,1214.61 1139.08,1214.71 1139.67,1214.41 1140.25,1217.75 1140.84,1215.13 1141.42,1215.18 1142.01,1216.56 1142.6,1214.17 1143.18,1215.65 1143.77,1214.36 1144.36,1213.15 1144.94,1211.81 1145.53,1212.11 1146.12,1211.16 1146.7,1209.95 1147.29,1213.69 1147.88,1214.58 1148.46,1215.96 1149.05,1215.65 1149.63,1215.66 1150.22,1216.65 1150.81,1213.86 1151.39,1214.95 1151.98,1214.84 1152.57,1214.69 1153.15,1212.17 1153.74,1213.35 1154.33,1214.29 1154.91,1211.45 1155.5,1211.66 1156.09,1209.24 1156.67,1208.36 1157.26,1208.52 1157.84,1211.19 1158.43,1211.16 1159.02,1208.59 1159.6,1210.13 1160.19,1211.68 1160.78,1211.75 1161.36,1212.83 1161.95,1209.11 1162.54,1209.6 1163.12,1208.38 1163.71,1208.52 1164.29,1214.89 1164.88,1214.86 1165.47,1216.06 1166.05,1213.55 1166.64,1212.38 1167.23,1214.94 1167.81,1213.45 1168.4,1214.91 1168.99,1216.19 1169.57,1213.37 1170.16,1214.5 1170.75,1213.23 1171.33,1215.59 1171.92,1215.61 1172.5,1215.45 1173.09,1215.39 1173.68,1215.08 1174.26,1214.85 1174.85,1213.45 1175.44,1215.95 1176.02,1215.66 1176.61,1214.37 1177.2,1214.34 1177.78,1209.12 1178.37,1208.11 1178.96,1207.31 1179.54,1209.12 1180.13,1207.88 1180.71,1206.84 1181.3,1208.31 1181.89,1209.78 1182.47,1211.05 1183.06,1212.13 1183.65,1212.14 1184.23,1212.28 1184.82,1213.45 1185.41,1215.92 1185.99,1218.37 1186.58,1216.6 1187.16,1217.79 1187.75,1217.75 1188.34,1215.15 1188.92,1216.03 1189.51,1214.51 1190.1,1214.52 1190.68,1215.61 1191.27,1215.37 1191.86,1210.32 1192.44,1210.26 1193.03,1210.35 1193.62,1210.51 1194.2,1213.05 1194.79,1212.98 1195.37,1211.93 1195.96,1214.56 1196.55,1214.33 1197.13,1211.75 1197.72,1212.03 1198.31,1213.34 1198.89,1213.37 1199.48,1215.92 1200.07,1214.44 1200.65,1215.7 1201.24,1215.42 1201.83,1211.59 1202.41,1209.37 1203,1210.71 1203.58,1211.13 1204.17,1212.45 1204.76,1213.72 1205.34,1210.12 1205.93,1210.1 1206.52,1210.28 1207.1,1210.48 1207.69,1210.6 1208.28,1210.56 1208.86,1209.41 1209.45,1211.95 1210.03,1210.68 1210.62,1213.37 1211.21,1214.54 1211.79,1215.47 1212.38,1215.43 1212.97,1215.33 1213.55,1215.12 1214.14,1212.5 1214.73,1211.11 1215.31,1210.78 1215.9,1210.85 1216.49,1209.62 1217.07,1209.93 1217.66,1209.91 1218.24,1210.04 1218.83,1208.9 1219.42,1211.4 1220,1214.1 1220.59,1215.01 1221.18,1214.8 1221.76,1214.72 1222.35,1213.68 1222.94,1213.83 1223.52,1212.75 1224.11,1214.09 1224.7,1211.48 1225.28,1212.88 1225.87,1214.32 1226.45,1212.95 1227.04,1213.16 1227.63,1210.52 1228.21,1210.33 1228.8,1214.29 1229.39,1214.16 1229.97,1215.39 1230.56,1215.31 1231.15,1216.2 1231.73,1217.49 1232.32,1218.54 1232.91,1218.02 1233.49,1218.94 1234.08,1218.62 1234.66,1217.27 1235.25,1218.35 1235.84,1215.54 1236.42,1216.79 1237.01,1216.21 1237.6,1216.15 1238.18,1217.47 1238.77,1217.03 1239.36,1215.57 1239.94,1212.77 1240.53,1213.79 1241.11,1213.9 1241.7,1213.91 1242.29,1219.01 1242.87,1219.85 1243.46,1220.72 1244.05,1220.1 1244.63,1219.68 1245.22,1219.37 1245.81,1218.9 1246.39,1215.91 1246.98,1215.59 1247.57,1216.69 1248.15,1216.48 1248.74,1213.88 1249.32,1213.93 1249.91,1212.79 1250.5,1212.86 1251.08,1211.37 1251.67,1210.11 1252.26,1210.29 1252.84,1210.27 1253.43,1211.84 1254.02,1214.28 1254.6,1217.88 1255.19,1217.47 1255.78,1218.51 1256.36,1218.23 1256.95,1216.99 1257.53,1218.17 1258.12,1218.78 1258.71,1217.25 1259.29,1215.24 1259.88,1215.1 1260.47,1210.01 1261.05,1207.71 1261.64,1210.6 1262.23,1209.76 1262.81,1211.2 1263.4,1211.1 1263.98,1211.06 1264.57,1211.09 1265.16,1211.02 1265.74,1210.22 1266.33,1210.31 1266.92,1209.16 1267.5,1211.75 1268.09,1210.49 1268.68,1210.51 1269.26,1207.97 1269.85,1209.47 1270.44,1209.76 1271.02,1208.77 1271.61,1211.33 1272.19,1211.3 1272.78,1211.48 1273.37,1211.75 1273.95,1210.63 1274.54,1212 1275.13,1209.72 1275.71,1211.3 1276.3,1213.87 1276.89,1213.43 1277.47,1212.36 1278.06,1213.58 1278.65,1213.34 1279.23,1210.87 1279.82,1212.33 1280.4,1213.69 1280.99,1213.66 1281.58,1216.03 1282.16,1215.63 1282.75,1215.5 1283.34,1217.98 1283.92,1217.56 1284.51,1218.73 1285.1,1219.76 1285.68,1219.17 1286.27,1219.04 1286.86,1217.36 1287.44,1217.16 1288.03,1219.13 1288.61,1218.72 1289.2,1218.52 1289.79,1219.87 1290.37,1219.83 1290.96,1220.54 1291.55,1220.34 1292.13,1218.62 1292.72,1217.06 1293.31,1215.82 1293.89,1215.55 1294.48,1216.59 1295.06,1216.44 1295.65,1216.32 1296.24,1212.32 1296.82,1210.06 1297.41,1209.03 1298,1209.41 1298.58,1208.53 1299.17,1206.25 1299.76,1208.02 1300.34,1208.11 1300.93,1208.31 1301.52,1209.62 1302.1,1208.48 1302.69,1208.67 1303.27,1210.33 1303.86,1207.76 1304.45,1208.11 1305.03,1209.5 1305.62,1210.7 1306.21,1209.6 1306.79,1209.9 1307.38,1208.9 1307.97,1211.41 1308.55,1211.46 1309.14,1209.09 1309.73,1209.19 1310.31,1210.89 1310.9,1210.84 1311.48,1209.48 1312.07,1208.31 1312.66,1208.79 1313.24,1208.74 1313.83,1210.45 1314.42,1211.87 1315,1214.37 1315.59,1215.42 1316.18,1214.11 1316.76,1215.19 1317.35,1215 1317.93,1212.58 1318.52,1211.23 1319.11,1212.71 1319.69,1208.86 1320.28,1207.68 1320.87,1210.08 1321.45,1211.66 1322.04,1211.55 1322.63,1210.44 1323.21,1210.32 1323.8,1210.58 1324.39,1211.97 1324.97,1211.97 1325.56,1210.73 1326.14,1211.91 1326.73,1213.13 1327.32,1214.42 1327.9,1217.07 1328.49,1214.6 1329.08,1213.36 1329.66,1210.79 1330.25,1211.03 1330.84,1211.18 1331.42,1211.47 1332.01,1213.94 1332.6,1211.32 1333.18,1212.57 1333.77,1212.73 1334.35,1212.58 1334.94,1213.94 1335.53,1213.9 1336.11,1213.66 1336.7,1216 1337.29,1216.1 1337.87,1214.88 1338.46,1214.73 1339.05,1214.69 1339.63,1214.57 1340.22,1214.5 1340.8,1213.29 1341.39,1211.92 1341.98,1209.27 1342.56,1210.96 1343.15,1211.1 1343.74,1211.04 1344.32,1211.04 1344.91,1212.31 1345.5,1211.03 1346.08,1211.06 1346.67,1213.38 1347.26,1210.48 1347.84,1213.33 1348.43,1213.66 1349.01,1212.31 1349.6,1212.17 1350.19,1213.32 1350.77,1214.58 1351.36,1214.4 1351.95,1213.1 1352.53,1212.89 1353.12,1214.3 1353.71,1215.49 1354.29,1214.16 1354.88,1215.15 1355.47,1215.16 1356.05,1215.1 1356.64,1216.47 1357.22,1215.12 1357.81,1216.26 1358.4,1214.75 1358.98,1210.96 1359.57,1208.81 1360.16,1207.92 1360.74,1209.54 1361.33,1206.01 1361.92,1206.62 1362.5,1207.08 1363.09,1207.66 1363.68,1207.74 1364.26,1208.24 1364.85,1212.6 1365.43,1212.68 1366.02,1211.54 1366.61,1210.55 1367.19,1211.83 1367.78,1211.96 1368.37,1209.55 1368.95,1211.14 1369.54,1209.27 1370.13,1210.74 1370.71,1209.95 1371.3,1212.52 1371.88,1213.73 1372.47,1212.43 1373.06,1215.07 1373.64,1212.57 1374.23,1211.43 1374.82,1212.65 1375.4,1213.72 1375.99,1213.8 1376.58,1215.19 1377.16,1213.95 1377.75,1215.29 1378.34,1214.17 1378.92,1216.64 1379.51,1216.15 1380.09,1216.06 1380.68,1218.06 1381.27,1215.51 1381.85,1216.72 1382.44,1220.07 1383.03,1218.35 1383.61,1215.78 1384.2,1214.4 1384.79,1215.4 1385.37,1215.58 1385.96,1214.03 1386.55,1212.96 1387.13,1210.47 1387.72,1212.96 1388.3,1211.66 1388.89,1210.52 1389.48,1208.88 1390.06,1206.66 1390.65,1209.5 1391.24,1212.04 1391.82,1210.73 1392.41,1210.93 1393,1213.43 1393.58,1213.4 1394.17,1212.39 1394.75,1216.12 1395.34,1216.25 1395.93,1214.86 1396.51,1214.78 1397.1,1215.78 1397.69,1214.36 1398.27,1214.05 1398.86,1215.12 1399.45,1215.98 1400.03,1215.41 1400.62,1215.05 1401.21,1215.95 1401.79,1219.35 1402.38,1218 1402.96,1218.97 1403.55,1221.19 1404.14,1219.67 1404.72,1221.67 1405.31,1218.85 1405.9,1217.29 1406.48,1216.96 1407.07,1214.4 1407.66,1215.48 1408.24,1212.89 1408.83,1211.46 1409.42,1212.8 1410,1212.98 1410.59,1211.81 1411.17,1210.37 1411.76,1209.1 1412.35,1210.59 1412.93,1209.51 1413.52,1212.12 1414.11,1213.37 1414.69,1213.26 1415.28,1214.53 1415.87,1213.04 1416.45,1214.18 1417.04,1214.14 1417.63,1216.57 1418.21,1216.48 1418.8,1216.47 1419.38,1216 1419.97,1215.68 1420.56,1218.05 1421.14,1215.05 1421.73,1215.06 1422.32,1216.36 1422.9,1213.71 1423.49,1212.23 1424.08,1211.14 1424.66,1208.78 1425.25,1209.22 1425.83,1210.7 1426.42,1213.23 1427.01,1214.22 1427.59,1212.96 1428.18,1213.1 1428.77,1211.97 1429.35,1213.3 1429.94,1215.59 1430.53,1214.13 1431.11,1214.32 1431.7,1216.68 1432.29,1216.65 1432.87,1215.23 1433.46,1214.7 1434.04,1213.1 1434.63,1213.28 1435.22,1213.25 1435.8,1210.72 1436.39,1210.89 1436.98,1214.43 1437.56,1213.1 1438.15,1210.68 1438.74,1211.03 1439.32,1212.69 1439.91,1209.19 1440.5,1210.56 1441.08,1212.02 1441.67,1213.14 1442.25,1212.23 1442.84,1213.69 1443.43,1213.63 1444.01,1213.62 1444.6,1212.5 1445.19,1213.99 1445.77,1212.71 1446.36,1215.41 1446.95,1215.2 1447.53,1215.08 1448.12,1217.47 1448.7,1214.87 1449.29,1215.97 1449.88,1218.22 1450.46,1214.36 1451.05,1214.27 1451.64,1214.26 1452.22,1213.01 1452.81,1211.76 1453.4,1210.55 1453.98,1211.82 1454.57,1209.46 1455.16,1208.46 1455.74,1208.57 1456.33,1207.59 1456.91,1204.16 1457.5,1204.65 1458.09,1203.91 1458.67,1209.29 1459.26,1208.33 1459.85,1210.09 1460.43,1210.18 1461.02,1210.47 1461.61,1214.5 1462.19,1216.96 1462.78,1215.37 1463.37,1212.72 1463.95,1211.82 1464.54,1209.27 1465.12,1209.39 1465.71,1209.45 1466.3,1207.18 1466.88,1204.93 1467.47,1206.45 1468.06,1206.76 1468.64,1208.38 1469.23,1208.72 1469.82,1209.09 1470.4,1212 1470.99,1211.04 1471.57,1208.47 1472.16,1208.56 1472.75,1208.91 1473.33,1210.35 1473.92,1210.54 1474.51,1210.96 1475.09,1212.28 1475.68,1212.6 1476.27,1215.09 1476.85,1216.14 1477.44,1217.06 1478.03,1217.08 1478.61,1215.58 1479.2,1216.84 1479.78,1218 1480.37,1215.2 1480.96,1212.64 1481.54,1215.27 1482.13,1213.92 1482.72,1212.34 1483.3,1216.03 1483.89,1213.37 1484.48,1213.32 1485.06,1211.95 1485.65,1211.57 1486.24,1212.77 1486.82,1213.07 1487.41,1212.05 1487.99,1213.47 1488.58,1213.45 1489.17,1213.44 1489.75,1213.47 1490.34,1213.36 1490.93,1213.55 1491.51,1217.14 1492.1,1215.66 1492.69,1213.12 1493.27,1214.35 1493.86,1213.2 1494.45,1215.85 1495.03,1215.61 1495.62,1216.97 1496.2,1218.3 1496.79,1218.09 1497.38,1217.68 1497.96,1216.06 1498.55,1213.13 1499.14,1213.34 1499.72,1213.32 1500.31,1212.3 1500.9,1212.31 1501.48,1213.61 1502.07,1212.45 1502.65,1218.38 1503.24,1218.11 1503.83,1217.71 1504.41,1218.73 1505,1219.42 1505.59,1218.89 1506.17,1218.56 1506.76,1216.95 1507.35,1215.48 1507.93,1216.41 1508.52,1216.25 1509.11,1214.92 1509.69,1214.76 1510.28,1212.38 1510.86,1211.09 1511.45,1213.5 1512.04,1213.21 1512.62,1215.38 1513.21,1215.2 1513.8,1213.57 1514.38,1212.01 1514.97,1211.98 1515.56,1213.06 1516.14,1209.25 1516.73,1206.75 1517.32,1206.99 1517.9,1209.69 1518.49,1212.25 1519.07,1212.15 1519.66,1211.96 1520.25,1210.87 1520.83,1209.51 1521.42,1209.51 1522.01,1212.17 1522.59,1211.07 1523.18,1212.12 1523.77,1211.98 1524.35,1212.22 1524.94,1214.52 1525.52,1215.93 1526.11,1213.22 1526.7,1210.72 1527.28,1209.83 1527.87,1209.76 1528.46,1211.16 1529.04,1212.47 1529.63,1214.87 1530.22,1212.14 1530.8,1212.15 1531.39,1208.63 1531.98,1211.25 1532.56,1213.68 1533.15,1212.28 1533.73,1214.48 1534.32,1216.98 1534.91,1215.6 1535.49,1217.9 1536.08,1218.85 1536.67,1216.24 1537.25,1215.94 1537.84,1214.62 1538.43,1213.31 1539.01,1213.19 1539.6,1211.81 1540.19,1213.32 1540.77,1213.19 1541.36,1215.57 1541.94,1214.17 1542.53,1215.3 1543.12,1212.92 1543.7,1214.04 1544.29,1215.32 1544.88,1215.31 1545.46,1213.82 1546.05,1213.57 1546.64,1213.57 1547.22,1215.92 1547.81,1215.72 1548.4,1214.16 1548.98,1214.51 1549.57,1213.17 1550.15,1213.05 1550.74,1213.08 1551.33,1212.15 1551.91,1213.4 1552.5,1213.44 1553.09,1214.6 1553.67,1214.19 1554.26,1214.39 1554.85,1213.24 1555.43,1213.22 1556.02,1210.86 1556.6,1209.74 1557.19,1207.74 1557.78,1208.2 1558.36,1208.43 1558.95,1209.62 1559.54,1206.06 1560.12,1206.41 1560.71,1206.45 1561.3,1209.02 1561.88,1209.31 1562.47,1210.78 1563.06,1214.53 1563.64,1212 1564.23,1212.07 1564.81,1213.28 1565.4,1213.23 1565.99,1213.32 1566.57,1212.31 1567.16,1212.45 1567.75,1214.92 1568.33,1214.42 1568.92,1215.5 1569.51,1216.64 1570.09,1214.12 1570.68,1211.64 1571.27,1214.16 1571.85,1215.37 1572.44,1215.33 1573.02,1213.99 1573.61,1214.09 1574.2,1215.27 1574.78,1212.92 1575.37,1214.24 1575.96,1214.1 1576.54,1213.96 1577.13,1215.17 1577.72,1213.74 1578.3,1213.66 1578.89,1214.9 1579.47,1218.23 1580.06,1218.19 1580.65,1217.84 1581.23,1218.87 1581.82,1219.78 1582.41,1220.56 1582.99,1218.77 1583.58,1219.57 1584.17,1219.33 1584.75,1217.67 1585.34,1217.19 1585.93,1219.45 1586.51,1218.97 1587.1,1218.87 1587.68,1216.19 1588.27,1217.31 1588.86,1218.21 1589.44,1218.05 1590.03,1218.88 1590.62,1216.06 1591.2,1213.4 1591.79,1214.71 1592.38,1214.69 1592.96,1214.84 1593.55,1214.44 1594.14,1212.06 1594.72,1211.06 1595.31,1214.75 1595.89,1210.68 1596.48,1209.6 1597.07,1206.28 1597.65,1207.67 1598.24,1208.21 1598.83,1207.42 1599.41,1207.92 1600,1205.69 1600.59,1207.28 1601.17,1206.24 1601.76,1205.42 1602.34,1204.22 1602.93,1204.58 1603.52,1204.74 1604.1,1202.53 1604.69,1203.3 1605.28,1207.84 1605.86,1209.21 1606.45,1209.59 1607.04,1207.38 1607.62,1210.28 1608.21,1209.35 1608.8,1209.55 1609.38,1209.89 1609.97,1209.85 1610.55,1211.08 1611.14,1212.29 1611.73,1209.79 1612.31,1209.88 1612.9,1208.69 1613.49,1208.97 1614.07,1210.27 1614.66,1209.05 1615.25,1208.16 1615.83,1212.19 1616.42,1210.93 1617.01,1210.95 1617.59,1211.26 1618.18,1211.27 1618.76,1211.25 1619.35,1211.55 1619.94,1211.74 1620.52,1213.3 1621.11,1212.35 1621.7,1214.72 1622.28,1209.54 1622.87,1210.91 1623.46,1210.9 1624.04,1210.94 1624.63,1214.69 1625.22,1214.67 1625.8,1212.15 1626.39,1213.4 1626.97,1213.56 1627.56,1213.39 1628.15,1214.48 1628.73,1215.51 1629.32,1215.55 1629.91,1212.73 1630.49,1210.32 1631.08,1212.82 1631.67,1212.59 1632.25,1212.72 1632.84,1212.65 1633.42,1213.88 1634.01,1211.56 1634.6,1211.53 1635.18,1212.79 1635.77,1209.45 1636.36,1211.3 1636.94,1212.46 1637.53,1212.49 1638.12,1213.78 1638.7,1212.46 1639.29,1212.56 1639.88,1214.77 1640.46,1216.04 1641.05,1218.53 1641.63,1221.75 1642.22,1218.74 1642.81,1217.4 1643.39,1214.7 1643.98,1212.08 1644.57,1212.26 1645.15,1210.14 1645.74,1208.93 1646.33,1206.92 1646.91,1210.85 1647.5,1209.77 1648.09,1211.34 1648.67,1208.97 1649.26,1209.14 1649.84,1209.51 1650.43,1209.56 1651.02,1209.59 1651.6,1210.82 1652.19,1214.56 1652.78,1214.4 1653.36,1215.53 1653.95,1216.79 1654.54,1215.15 1655.12,1215.96 1655.71,1218.02 1656.29,1217.54 1656.88,1217.28 1657.47,1216.99 1658.05,1216.86 1658.64,1216.61 1659.23,1215.08 1659.81,1214.94 1660.4,1216.36 1660.99,1216.27 1661.57,1213.63 1662.16,1213.58 1662.75,1210.94 1663.33,1210.86 1663.92,1211.17 1664.5,1213.69 1665.09,1217.28 1665.68,1216.8 1666.26,1215.38 1666.85,1212.78 1667.44,1214 1668.02,1216.29 1668.61,1217.37 1669.2,1217.33 1669.78,1214.72 1670.37,1213.23 1670.96,1211.9 1671.54,1213.33 1672.13,1213.52 1672.71,1213.16 1673.3,1214.34 1673.89,1214.24 1674.47,1211.74 1675.06,1215.59 1675.65,1215.42 1676.23,1218.71 1676.82,1217.1 1677.41,1215.78 1677.99,1214.25 1678.58,1211.76 1679.17,1211.58 1679.75,1209.16 1680.34,1213.05 1680.92,1211.76 1681.51,1210.82 1682.1,1210.93 1682.68,1209.79 1683.27,1213.61 1683.86,1216 1684.44,1215.72 1685.03,1215.54 1685.62,1218.02 1686.2,1215.43 1686.79,1215.26 1687.37,1213.96 1687.96,1216.49 1688.55,1214.91 1689.13,1217.34 1689.72,1217.19 1690.31,1214.38 1690.89,1214.37 1691.48,1214.35 1692.07,1212.68 1692.65,1211.22 1693.24,1211.05 1693.83,1210.03 1694.41,1210.28 1695,1204.35 1695.58,1203.44 1696.17,1205.4 1696.76,1205.72 1697.34,1204.56 1697.93,1208.78 1698.52,1206.47 1699.1,1205.66 1699.69,1207.5 1700.28,1208.82 1700.86,1209 1701.45,1207.98 1702.04,1213.31 1702.62,1213.5 1703.21,1214.66 1703.79,1213.22 1704.38,1215.66 1704.97,1215.44 1705.55,1214.15 1706.14,1212.76 1706.73,1211.27 1707.31,1212.89 1707.9,1215.55 1708.49,1215.27 1709.07,1215 1709.66,1212.47 1710.24,1212.67 1710.83,1215.3 1711.42,1216.32 1712,1218.44 1712.59,1215.6 1713.18,1214.09 1713.76,1215.12 1714.35,1215.29 1714.94,1214.3 1715.52,1214.05 1716.11,1212.53 1716.7,1214.02 1717.28,1212.99 1717.87,1211.79 1718.45,1210.74 1719.04,1208.51 1719.63,1211.03 1720.21,1209.82 1720.8,1209.84 1721.39,1207.54 1721.97,1207.69 1722.56,1211.42 1723.15,1210.41 1723.73,1210.51 1724.32,1210.51 1724.91,1211.79 1725.49,1211.73 1726.08,1211.72 1726.66,1215.4 1727.25,1213.08 1727.84,1210.7 1728.42,1210.92 1729.01,1213.51 1729.6,1212.07 1730.18,1212.26 1730.77,1211.11 1731.36,1211.06 1731.94,1207.45 1732.53,1207.77 1733.11,1208.09 1733.7,1206.81 1734.29,1205.96 1734.87,1204.87 1735.46,1205.68 1736.05,1207.19 1736.63,1206.23 1737.22,1205.51 1737.81,1205.08 1738.39,1205.64 1738.98,1206.17 1739.57,1206.8 1740.15,1207.06 1740.74,1204.95 1741.32,1209.34 1741.91,1208.5 1742.5,1209.77 1743.08,1211.38 1743.67,1210.45 1744.26,1209.44 1744.84,1208.16 1745.43,1209.73 1746.02,1208.7 1746.6,1208.87 1747.19,1208.88 1747.78,1208.69 1748.36,1207.48 1748.95,1206.55 1749.53,1209.5 1750.12,1207.33 1750.71,1205.49 1751.29,1205.97 1751.88,1204.12 1752.47,1207.13 1753.05,1208.65 1753.64,1207.95 1754.23,1208.59 1754.81,1209.96 1755.4,1211.41 1755.99,1211.45 1756.57,1212.81 1757.16,1208.84 1757.74,1210.44 1758.33,1210.5 1758.92,1210.6 1759.5,1211.96 1760.09,1213.38 1760.68,1213.33 1761.26,1214.44 1761.85,1212.99 1762.44,1212.92 1763.02,1214.18 1763.61,1214.98 1764.19,1214.97 1764.78,1217.22 1765.37,1214.57 1765.95,1215.9 1766.54,1215.85 1767.13,1217.01 1767.71,1217.03 1768.3,1216.57 1768.89,1218.95 1769.47,1222.14 1770.06,1219.22 1770.65,1217.9 1771.23,1215.21 1771.82,1216.19 1772.4,1215.07 1772.99,1214.87 1773.58,1210.86 1774.16,1209.86 1774.75,1209.92 1775.34,1209.97 1775.92,1212.69 1776.51,1212.7 1777.1,1212.96 1777.68,1214.22 1778.27,1215.6 1778.86,1215.23 1779.44,1212.77 1780.03,1214.05 1780.61,1216.54 1781.2,1217.65 1781.79,1217.72 1782.37,1218.64 1782.96,1216.88 1783.55,1216.47 1784.13,1219.94 1784.72,1215.86 1785.31,1214.64 1785.89,1218.22 1786.48,1215.62 1787.06,1216.77 1787.65,1216.4 1788.24,1213.59 1788.82,1212.36 1789.41,1212.1 1790,1212.22 1790.58,1213.26 1791.17,1210.58 1791.76,1208.18 1792.34,1206.01 1792.93,1210.1 1793.52,1210.05 1794.1,1212.64 1794.69,1212.57 1795.27,1212.58 1795.86,1212.59 1796.45,1212.39 1797.03,1215.1 1797.62,1216.18 1798.21,1214.62 1798.79,1217.17 1799.38,1216.87 1799.97,1215.4 1800.55,1215.4 1801.14,1213.98 1801.73,1214.96 1802.31,1213.57 1802.9,1213.2 1803.48,1213.2 1804.07,1213.14 1804.66,1211.92 1805.24,1211.8 1805.83,1211.94 1806.42,1212.06 1807,1212.1 1807.59,1210.91 1808.18,1207.22 1808.76,1208.54 1809.35,1209.85 1809.94,1210.08 1810.52,1210.06 1811.11,1210.2 1811.69,1211.37 1812.28,1212.83 1812.87,1207.98 1813.45,1210.23 1814.04,1207.94 1814.63,1208.09 1815.21,1209.56 1815.8,1211.01 1816.39,1209.91 1816.97,1209 1817.56,1210.14 1818.14,1212.61 1818.73,1213.93 1819.32,1215.21 1819.9,1213.76 1820.49,1212.44 1821.08,1213.76 1821.66,1215.05 1822.25,1217.48 1822.84,1217.25 1823.42,1218.14 1824.01,1216.51 1824.6,1215.01 1825.18,1216.21 1825.77,1214.82 1826.35,1217.32 1826.94,1215.77 1827.53,1215.65 1828.11,1220.7 1828.7,1221.21 1829.29,1219.35 1829.87,1217.96 1830.46,1217.9 1831.05,1217.72 1831.63,1215.11 1832.22,1213.67 1832.81,1214.81 1833.39,1214.91 1833.98,1212.6 1834.56,1213.71 1835.15,1216.1 1835.74,1215.83 1836.32,1214.17 1836.91,1213.85 1837.5,1215.02 1838.08,1217.55 1838.67,1217.57 1839.26,1214.93 1839.84,1216.14 1840.43,1214.68 1841.01,1213.38 1841.6,1210.65 1842.19,1209.37 1842.77,1209.41 1843.36,1210.53 1843.95,1210.79 1844.53,1211.09 1845.12,1209.94 1845.71,1209.83 1846.29,1209.71 1846.88,1208.38 1847.47,1208.58 1848.05,1210.09 1848.64,1207.73 1849.22,1209.19 1849.81,1208.07 1850.4,1209.46 1850.98,1208.33 1851.57,1210.01 1852.16,1210.39 1852.74,1210.94 1853.33,1212.32 1853.92,1211.03 1854.5,1211.02 1855.09,1211.13 1855.68,1209.78 1856.26,1209.95 1856.85,1211.15 1857.43,1212.54 1858.02,1211.17 1858.61,1210 1859.19,1210.01 1859.78,1211.29 1860.37,1211.41 1860.95,1212.5 1861.54,1212.48 1862.13,1210.01 1862.71,1211.34 1863.3,1210.27 1863.88,1207.65 1864.47,1205.55 1865.06,1205.83 1865.64,1205.01 1866.23,1205.31 1866.82,1207.16 1867.4,1208.73 1867.99,1211.31 1868.58,1210.24 1869.16,1212.86 1869.75,1215.26 1870.34,1214.99 1870.92,1214.8 1871.51,1213.55 1872.09,1213.6 1872.68,1215.05 1873.27,1214.71 1873.85,1214.87 1874.44,1214.7 1875.03,1213.24 1875.61,1213.11 1876.2,1212.86 1876.79,1212.88 1877.37,1214.01 1877.96,1213.94 1878.55,1211.48 1879.13,1211.87 1879.72,1213.32 1880.3,1213.37 1880.89,1210.86 1881.48,1214.4 1882.06,1214.6 1882.65,1214.54 1883.24,1214.36 1883.82,1215.72 1884.41,1215.66 1885,1215.58 1885.58,1216.87 1886.17,1216.4 1886.76,1215.02 1887.34,1213.59 1887.93,1213.74 1888.51,1208.81 1889.1,1206.57 1889.69,1209.34 1890.27,1206.1 1890.86,1205.3 1891.45,1206.75 1892.03,1206.82 1892.62,1208.4 1893.21,1207.17 1893.79,1208.74 1894.38,1212.5 1894.96,1215.01 1895.55,1217.49 1896.14,1217.07 1896.72,1215.56 1897.31,1215.61 1897.9,1215.54 1898.48,1216.62 1899.07,1217.76 1899.66,1217.41 1900.24,1215.78 1900.83,1215.52 1901.42,1215.36 1902,1219.06 1902.59,1221.18 1903.17,1216.97 1903.76,1215.39 1904.35,1215.13 1904.93,1215.17 1905.52,1217.49 1906.11,1218.28 1906.69,1216.68 1907.28,1217.55 1907.87,1217.05 1908.45,1217.78 1909.04,1217.65 1909.63,1215.1 1910.21,1213.82 1910.8,1212.53 1911.38,1212.52 1911.97,1216.12 1912.56,1216.08 1913.14,1217.14 1913.73,1215.75 1914.32,1216.88 1914.9,1216.38 1915.49,1217.35 1916.08,1214.69 1916.66,1214.54 1917.25,1212.06 1917.83,1212.4 1918.42,1209.97 1919.01,1211.26 1919.59,1209.99 1920.18,1210.16 1920.77,1212.84 1921.35,1212.95 1921.94,1215.11 1922.53,1213.69 1923.11,1214.76 1923.7,1214.39 1924.29,1214.43 1924.87,1214.31 1925.46,1214.2 1926.04,1213 1926.63,1213.09 1927.22,1215.58 1927.8,1215.35 1928.39,1217.5 1928.98,1215.87 1929.56,1216.97 1930.15,1217.76 1930.74,1216.03 1931.32,1215.96 1931.91,1210.78 1932.5,1212.1 1933.08,1213.35 1933.67,1214.4 1934.25,1213.18 1934.84,1214.12 1935.43,1214.07 1936.01,1213.85 1936.6,1213.85 1937.19,1213.83 1937.77,1211.6 1938.36,1211.67 1938.95,1210.44 1939.53,1210.67 1940.12,1212.87 1940.71,1215.2 1941.29,1215.08 1941.88,1217.15 1942.46,1215.56 1943.05,1217.81 1943.64,1217.37 1944.22,1217.19 1944.81,1216.95 1945.4,1217.96 1945.98,1216.52 1946.57,1215.27 1947.16,1215.28 1947.74,1220.05 1948.33,1215.98 1948.91,1215.9 1949.5,1216.9 1950.09,1214.31 1950.67,1215.4 1951.26,1217.51 1951.85,1217.18 1952.43,1217.17 1953.02,1215.67 1953.61,1214.41 1954.19,1214.31 1954.78,1212.98 1955.37,1214.19 1955.95,1214.25 1956.54,1214.1 1957.12,1215.16 1957.71,1213.76 1958.3,1213.98 1958.88,1215.17 1959.47,1213.86 1960.06,1217.52 1960.64,1213.58 1961.23,1214.62 1961.82,1213.34 1962.4,1213.28 1962.99,1214.75 1963.58,1217.16 1964.16,1219.39 1964.75,1220.44 1965.33,1220.03 1965.92,1217.24 1966.51,1218.12 1967.09,1217.92 1967.68,1216.4 1968.27,1213.87 1968.85,1215.14 1969.44,1211.66 1970.03,1211.72 1970.61,1211.64 1971.2,1210.62 1971.78,1209.54 1972.37,1206.92 1972.96,1206.12 1973.54,1203.82 1974.13,1204.36 1974.72,1205.87 1975.3,1207.19 1975.89,1208.62 1976.48,1210.25 1977.06,1211.8 1977.65,1210.43 1978.24,1210.56 1978.82,1209.32 1979.41,1210.64 1979.99,1212.43 1980.58,1212.42 1981.17,1212.63 1981.75,1211.7 1982.34,1209.27 1982.93,1210.57 1983.51,1209.25 1984.1,1211.84 1984.69,1212.1 1985.27,1211.13 1985.86,1213.79 1986.45,1213.62 1987.03,1214.67 1987.62,1213.33 1988.2,1214.76 1988.79,1214.52 1989.38,1214.58 1989.96,1215.65 1990.55,1215.82 1991.14,1214.68 1991.72,1216.15 1992.31,1215.77 1992.9,1214.21 1993.48,1215.46 1994.07,1211.64 1994.65,1210.7 1995.24,1209.63 1995.83,1207.45 1996.41,1208.88 1997,1209.06 1997.59,1209.03 1998.17,1209.12 1998.76,1208.49 1999.35,1206.42 1999.93,1206.81 2000.52,1207.15 2001.11,1208.82 2001.69,1210.2 2002.28,1210.26 2002.86,1207.85 2003.45,1209.59 2004.04,1208.78 2004.62,1212.57 2005.21,1212.46 2005.8,1212.54 2006.38,1211.33 2006.97,1211.61 2007.56,1211.87 2008.14,1211.94 2008.73,1210.69 2009.32,1210.56 2009.9,1211.91 2010.49,1214.54 2011.07,1213.55 2011.66,1214.59 2012.25,1215.86 2012.83,1217.01 2013.42,1215.75 2014.01,1214.41 2014.59,1213.01 2015.18,1213.18 2015.77,1214.37 2016.35,1216.61 2016.94,1216.51 2017.53,1217.59 2018.11,1214.87 2018.7,1212.18 2019.28,1211.93 2019.87,1211.84 2020.46,1211.85 2021.04,1209.7 2021.63,1209.82 2022.22,1211.03 2022.8,1211.35 2023.39,1211.25 2023.98,1209.84 2024.56,1210.02 2025.15,1209.8 2025.73,1208.77 2026.32,1210.24 2026.91,1211.39 2027.49,1212.94 2028.08,1210.33 2028.67,1209.26 2029.25,1208.09 2029.84,1208.57 2030.43,1209.67 2031.01,1207.32 2031.6,1207.93 2032.19,1208.12 2032.77,1208.39 2033.36,1208.45 2033.94,1208.68 2034.53,1210.45 2035.12,1209.42 2035.7,1210.87 2036.29,1208.67 2036.88,1208.96 2037.46,1209.3 2038.05,1208.01 2038.64,1208.29 2039.22,1209.71 2039.81,1208.79 2040.4,1211.78 2040.98,1210.71 2041.57,1209.53 2042.15,1211.03 2042.74,1209.82 2043.33,1208.82 2043.91,1210.64 2044.5,1210.65 2045.09,1212.21 2045.67,1212.26 2046.26,1212.15 2046.85,1212.29 2047.43,1211.39 2048.02,1212.66 2048.6,1213.72 2049.19,1213.57 2049.78,1213.48 2050.36,1215.59 2050.95,1215.59 2051.54,1217.99 2052.12,1217.71 2052.71,1216.28 2053.3,1216.29 2053.88,1218.47 2054.47,1215.55 2055.06,1215.49 2055.64,1219.17 2056.23,1219.88 2056.81,1215.76 2057.4,1212.84 2057.99,1212.91 2058.57,1211.57 2059.16,1211.8 2059.75,1209.44 2060.33,1211.07 2060.92,1211.25 2061.51,1211.19 2062.09,1210.06 2062.68,1212.53 2063.27,1211.23 2063.85,1212.57 2064.44,1213.84 2065.02,1214.97 2065.61,1218.59 2066.2,1217.2 2066.78,1210.57 2067.37,1210.69 2067.96,1212 2068.54,1214.3 2069.13,1215.2 2069.72,1217.37 2070.3,1219.51 2070.89,1219.17 2071.48,1219.98 2072.06,1218.11 2072.65,1217.89 2073.23,1217.78 2073.82,1216.49 2074.41,1215.05 2074.99,1215.18 2075.58,1216.16 2076.17,1217.1 2076.75,1215.53 2077.34,1214.15 2077.93,1213.92 2078.51,1215.46 2079.1,1216.4 2079.68,1217.76 2080.27,1212.77 2080.86,1211.45 2081.44,1212.94 2082.03,1210.36 2082.62,1212.99 2083.2,1214.31 2083.79,1213.81 2084.38,1213.68 2084.96,1212.48 2085.55,1210.24 2086.14,1209.2 2086.72,1209.25 2087.31,1209.77 2087.89,1208.73 2088.48,1207.62 2089.07,1210.39 2089.65,1211.75 2090.24,1211.57 2090.83,1212.63 2091.41,1212.91 2092,1215.29 2092.59,1217.31 2093.17,1213.24 2093.76,1213.33 2094.35,1215.71 2094.93,1216.86 2095.52,1216.53 2096.1,1216.26 2096.69,1215.93 2097.28,1215.62 2097.86,1216.55 2098.45,1217.61 2099.04,1217.42 2099.62,1216.21 2100.21,1217.36 2100.8,1214.65 2101.38,1214.68 2101.97,1215.87 2102.55,1215.41 2103.14,1216.52 2103.73,1215.08 2104.31,1214.74 2104.9,1215.68 2105.49,1215.46 2106.07,1215.4 2106.66,1214.23 2107.25,1216.51 2107.83,1211.28 2108.42,1210.03 2109.01,1211.14 2109.59,1207.42 2110.18,1209.99 2110.76,1211.14 2111.35,1210.07 2111.94,1211.26 2112.52,1210.13 2113.11,1210.28 2113.7,1208.97 2114.28,1209.14 2114.87,1210.69 2115.46,1213.3 2116.04,1213.31 2116.63,1213.34 2117.22,1214.57 2117.8,1214.61 2118.39,1214.31 2118.97,1214.02 2119.56,1216.3 2120.15,1217.36 2120.73,1216.94 2121.32,1216.9 2121.91,1216.42 2122.49,1216.06 2123.08,1214.76 2123.67,1213.59 2124.25,1213.6 2124.84,1213.74 2125.42,1214.74 2126.01,1214.54 2126.6,1216.87 2127.18,1216.52 2127.77,1216.5 2128.36,1215.11 2128.94,1215.13 2129.53,1215.96 2130.12,1217.08 2130.7,1218.26 2131.29,1220.63 2131.88,1218.79 2132.46,1218.64 2133.05,1219.52 2133.63,1216.8 2134.22,1212.79 2134.81,1211.47 2135.39,1209.22 2135.98,1210.6 2136.57,1211.01 2137.15,1211.05 2137.74,1209.96 2138.33,1208.54 2138.91,1210.16 2139.5,1213.99 2140.09,1217.7 2140.67,1212.51 2141.26,1212.61 2141.84,1211.29 2142.43,1212.67 2143.02,1211.42 2143.6,1212.71 2144.19,1214.26 2144.78,1211.92 2145.36,1210.74 2145.95,1212.3 2146.54,1213.4 2147.12,1214.31 2147.71,1211.73 2148.3,1211.55 2148.88,1210.36 2149.47,1210.79 2150.05,1206.22 2150.64,1206.6 2151.23,1208.23 2151.81,1207.2 2152.4,1207.51 2152.99,1207.67 2153.57,1206.55 2154.16,1204.29 2154.75,1207.33 2155.33,1207.5 2155.92,1207.8 2156.5,1208.21 2157.09,1207.45 2157.68,1210.37 2158.26,1206.9 \"/>\n<path clip-path=\"url(#clip252)\" d=\"M986.025 1213.23 L986.612 1213.23 L987.198 1213.23 L987.785 1213.23 L988.371 1213.23 L988.957 1213.23 L989.544 1213.23 L990.13 1213.23 L990.717 1213.23 L991.303 1213.23 L991.889 1213.23 L992.476 1213.23 L993.062 1213.23 L993.649 1213.23 L994.235 1213.23 L994.822 1213.23 L995.408 1213.23 L995.994 1213.23 L996.581 1213.23 L997.167 1213.23 L997.754 1213.23 L998.34 1213.23 L998.926 1213.23 L999.513 1213.23 L1000.1 1213.23 L1000.69 1213.23 L1001.27 1213.23 L1001.86 1213.23 L1002.44 1213.23 L1003.03 1213.23 L1003.62 1213.23 L1004.2 1213.23 L1004.79 1213.23 L1005.38 1213.23 L1005.96 1213.23 L1006.55 1213.23 L1007.14 1213.23 L1007.72 1213.23 L1008.31 1213.23 L1008.9 1213.23 L1009.48 1213.23 L1010.07 1213.23 L1010.65 1213.23 L1011.24 1213.23 L1011.83 1213.23 L1012.41 1213.23 L1013 1213.23 L1013.59 1213.23 L1014.17 1213.23 L1014.76 1213.23 L1015.35 1213.23 L1015.93 1213.23 L1016.52 1213.23 L1017.11 1213.23 L1017.69 1213.23 L1018.28 1213.23 L1018.86 1213.23 L1019.45 1213.23 L1020.04 1213.23 L1020.62 1213.23 L1021.21 1213.23 L1021.8 1213.23 L1022.38 1213.23 L1022.97 1213.23 L1023.56 1213.23 L1024.14 1213.23 L1024.73 1213.23 L1025.32 1213.23 L1025.9 1213.23 L1026.49 1213.23 L1027.07 1213.23 L1027.66 1213.23 L1028.25 1213.23 L1028.83 1213.23 L1029.42 1213.23 L1030.01 1213.23 L1030.59 1213.23 L1031.18 1213.23 L1031.77 1213.23 L1032.35 1213.23 L1032.94 1213.23 L1033.52 1213.23 L1034.11 1213.23 L1034.7 1213.23 L1035.28 1213.23 L1035.87 1213.23 L1036.46 1213.23 L1037.04 1213.23 L1037.63 1213.23 L1038.22 1213.23 L1038.8 1213.23 L1039.39 1213.23 L1039.98 1213.23 L1040.56 1213.23 L1041.15 1213.23 L1041.73 1213.23 L1042.32 1213.23 L1042.91 1213.23 L1043.49 1213.23 L1044.08 1213.23 L1044.67 1213.23 L1045.25 1213.23 L1045.84 1213.23 L1046.43 1213.23 L1047.01 1213.23 L1047.6 1213.23 L1048.19 1213.23 L1048.77 1213.23 L1049.36 1213.23 L1049.94 1213.23 L1050.53 1213.23 L1051.12 1213.23 L1051.7 1213.23 L1052.29 1213.23 L1052.88 1213.23 L1053.46 1213.23 L1054.05 1213.23 L1054.64 1213.23 L1055.22 1213.23 L1055.81 1213.23 L1056.39 1213.23 L1056.98 1213.23 L1057.57 1213.23 L1058.15 1213.23 L1058.74 1213.23 L1059.33 1213.23 L1059.91 1213.23 L1060.5 1213.23 L1061.09 1213.23 L1061.67 1213.23 L1062.26 1213.23 L1062.85 1213.23 L1063.43 1213.23 L1064.02 1213.23 L1064.6 1213.23 L1065.19 1213.23 L1065.78 1213.23 L1066.36 1213.23 L1066.95 1213.23 L1067.54 1213.23 L1068.12 1213.23 L1068.71 1213.23 L1069.3 1213.23 L1069.88 1213.23 L1070.47 1213.23 L1071.06 1213.23 L1071.64 1213.23 L1072.23 1213.23 L1072.81 1213.23 L1073.4 1213.23 L1073.99 1213.23 L1074.57 1213.23 L1075.16 1213.23 L1075.75 1213.23 L1076.33 1213.23 L1076.92 1213.23 L1077.51 1213.23 L1078.09 1213.23 L1078.68 1213.23 L1079.26 1213.23 L1079.85 1213.23 L1080.44 1213.23 L1081.02 1213.23 L1081.61 1213.23 L1082.2 1213.23 L1082.78 1213.23 L1083.37 1213.23 L1083.96 1213.23 L1084.54 1213.23 L1085.13 1213.23 L1085.72 1213.23 L1086.3 1213.23 L1086.89 1213.23 L1087.47 1213.23 L1088.06 1213.23 L1088.65 1213.23 L1089.23 1213.23 L1089.82 1213.23 L1090.41 1213.23 L1090.99 1213.23 L1091.58 1213.23 L1092.17 1213.23 L1092.75 1213.23 L1093.34 1213.23 L1093.93 1213.23 L1094.51 1213.23 L1095.1 1213.23 L1095.68 1213.23 L1096.27 1213.23 L1096.86 1213.23 L1097.44 1213.23 L1098.03 1213.23 L1098.62 1213.23 L1099.2 1213.23 L1099.79 1213.23 L1100.38 1213.23 L1100.96 1213.23 L1101.55 1213.23 L1102.14 1213.23 L1102.72 1213.23 L1103.31 1213.23 L1103.89 1213.23 L1104.48 1213.23 L1105.07 1213.23 L1105.65 1213.23 L1106.24 1213.23 L1106.83 1213.23 L1107.41 1213.23 L1108 1213.23 L1108.59 1213.23 L1109.17 1213.23 L1109.76 1213.23 L1110.34 1213.23 L1110.93 1213.23 L1111.52 1213.23 L1112.1 1213.23 L1112.69 1213.23 L1113.28 1213.23 L1113.86 1213.23 L1114.45 1213.23 L1115.04 1213.23 L1115.62 1213.23 L1116.21 1213.23 L1116.8 1213.23 L1117.38 1213.23 L1117.97 1213.23 L1118.55 1213.23 L1119.14 1213.23 L1119.73 1213.23 L1120.31 1213.23 L1120.9 1213.23 L1121.49 1213.23 L1122.07 1213.23 L1122.66 1213.23 L1123.25 1213.23 L1123.83 1213.23 L1124.42 1213.23 L1125.01 1213.23 L1125.59 1213.23 L1126.18 1213.23 L1126.76 1213.23 L1127.35 1213.23 L1127.94 1213.23 L1128.52 1213.23 L1129.11 1213.23 L1129.7 1213.23 L1130.28 1213.23 L1130.87 1213.23 L1131.46 1213.23 L1132.04 1213.23 L1132.63 1213.23 L1133.21 1213.23 L1133.8 1213.23 L1134.39 1213.23 L1134.97 1213.23 L1135.56 1213.23 L1136.15 1213.23 L1136.73 1213.23 L1137.32 1213.23 L1137.91 1213.23 L1138.49 1213.23 L1139.08 1213.23 L1139.67 1213.23 L1140.25 1213.23 L1140.84 1213.23 L1141.42 1213.23 L1142.01 1213.23 L1142.6 1213.23 L1143.18 1213.23 L1143.77 1213.23 L1144.36 1213.23 L1144.94 1213.23 L1145.53 1213.23 L1146.12 1213.23 L1146.7 1213.23 L1147.29 1213.23 L1147.88 1213.23 L1148.46 1213.23 L1149.05 1213.23 L1149.63 1213.23 L1150.22 1213.23 L1150.81 1213.23 L1151.39 1213.23 L1151.98 1213.23 L1152.57 1213.23 L1153.15 1213.23 L1153.74 1213.23 L1154.33 1213.23 L1154.91 1213.23 L1155.5 1213.23 L1156.09 1213.23 L1156.67 1213.23 L1157.26 1213.23 L1157.84 1213.23 L1158.43 1213.23 L1159.02 1213.23 L1159.6 1213.23 L1160.19 1213.23 L1160.78 1213.23 L1161.36 1213.23 L1161.95 1213.23 L1162.54 1213.23 L1163.12 1213.23 L1163.71 1213.23 L1164.29 1213.23 L1164.88 1213.23 L1165.47 1213.23 L1166.05 1213.23 L1166.64 1213.23 L1167.23 1213.23 L1167.81 1213.23 L1168.4 1213.23 L1168.99 1213.23 L1169.57 1213.23 L1170.16 1213.23 L1170.75 1213.23 L1171.33 1213.23 L1171.92 1213.23 L1172.5 1213.23 L1173.09 1213.23 L1173.68 1213.23 L1174.26 1213.23 L1174.85 1213.23 L1175.44 1213.23 L1176.02 1213.23 L1176.61 1213.23 L1177.2 1213.23 L1177.78 1213.23 L1178.37 1213.23 L1178.96 1213.23 L1179.54 1213.23 L1180.13 1213.23 L1180.71 1213.23 L1181.3 1213.23 L1181.89 1213.23 L1182.47 1213.23 L1183.06 1213.23 L1183.65 1213.23 L1184.23 1213.23 L1184.82 1213.23 L1185.41 1213.23 L1185.99 1213.23 L1186.58 1213.23 L1187.16 1213.23 L1187.75 1213.23 L1188.34 1213.23 L1188.92 1213.23 L1189.51 1213.23 L1190.1 1213.23 L1190.68 1213.23 L1191.27 1213.23 L1191.86 1213.23 L1192.44 1213.23 L1193.03 1213.23 L1193.62 1213.23 L1194.2 1213.23 L1194.79 1213.23 L1195.37 1213.23 L1195.96 1213.23 L1196.55 1213.23 L1197.13 1213.23 L1197.72 1213.23 L1198.31 1213.23 L1198.89 1213.23 L1199.48 1213.23 L1200.07 1213.23 L1200.65 1213.23 L1201.24 1213.23 L1201.83 1213.23 L1202.41 1213.23 L1203 1213.23 L1203.58 1213.23 L1204.17 1213.23 L1204.76 1213.23 L1205.34 1213.23 L1205.93 1213.23 L1206.52 1213.23 L1207.1 1213.23 L1207.69 1213.23 L1208.28 1213.23 L1208.86 1213.23 L1209.45 1213.23 L1210.03 1213.23 L1210.62 1213.23 L1211.21 1213.23 L1211.79 1213.23 L1212.38 1213.23 L1212.97 1213.23 L1213.55 1213.23 L1214.14 1213.23 L1214.73 1213.23 L1215.31 1213.23 L1215.9 1213.23 L1216.49 1213.23 L1217.07 1213.23 L1217.66 1213.23 L1218.24 1213.23 L1218.83 1213.23 L1219.42 1213.23 L1220 1213.23 L1220.59 1213.23 L1221.18 1213.23 L1221.76 1213.23 L1222.35 1213.23 L1222.94 1213.23 L1223.52 1213.23 L1224.11 1213.23 L1224.7 1213.23 L1225.28 1213.23 L1225.87 1213.23 L1226.45 1213.23 L1227.04 1213.23 L1227.63 1213.23 L1228.21 1213.23 L1228.8 1213.23 L1229.39 1213.23 L1229.97 1213.23 L1230.56 1213.23 L1231.15 1213.23 L1231.73 1213.23 L1232.32 1213.23 L1232.91 1213.23 L1233.49 1213.23 L1234.08 1213.23 L1234.66 1213.23 L1235.25 1213.23 L1235.84 1213.23 L1236.42 1213.23 L1237.01 1213.23 L1237.6 1213.23 L1238.18 1213.23 L1238.77 1213.23 L1239.36 1213.23 L1239.94 1213.23 L1240.53 1213.23 L1241.11 1213.23 L1241.7 1213.23 L1242.29 1213.23 L1242.87 1213.23 L1243.46 1213.23 L1244.05 1213.23 L1244.63 1213.23 L1245.22 1213.23 L1245.81 1213.23 L1246.39 1213.23 L1246.98 1213.23 L1247.57 1213.23 L1248.15 1213.23 L1248.74 1213.23 L1249.32 1213.23 L1249.91 1213.23 L1250.5 1213.23 L1251.08 1213.23 L1251.67 1213.23 L1252.26 1213.23 L1252.84 1213.23 L1253.43 1213.23 L1254.02 1213.23 L1254.6 1213.23 L1255.19 1213.23 L1255.78 1213.23 L1256.36 1213.23 L1256.95 1213.23 L1257.53 1213.23 L1258.12 1213.23 L1258.71 1213.23 L1259.29 1213.23 L1259.88 1213.23 L1260.47 1213.23 L1261.05 1213.23 L1261.64 1213.23 L1262.23 1213.23 L1262.81 1213.23 L1263.4 1213.23 L1263.98 1213.23 L1264.57 1213.23 L1265.16 1213.23 L1265.74 1213.23 L1266.33 1213.23 L1266.92 1213.23 L1267.5 1213.23 L1268.09 1213.23 L1268.68 1213.23 L1269.26 1213.23 L1269.85 1213.23 L1270.44 1213.23 L1271.02 1213.23 L1271.61 1213.23 L1272.19 1213.23 L1272.78 1213.23 L1273.37 1213.23 L1273.95 1213.23 L1274.54 1213.23 L1275.13 1213.23 L1275.71 1213.23 L1276.3 1213.23 L1276.89 1213.23 L1277.47 1213.23 L1278.06 1213.23 L1278.65 1213.23 L1279.23 1213.23 L1279.82 1213.23 L1280.4 1213.23 L1280.99 1213.23 L1281.58 1213.23 L1282.16 1213.23 L1282.75 1213.23 L1283.34 1213.23 L1283.92 1213.23 L1284.51 1213.23 L1285.1 1213.23 L1285.68 1213.23 L1286.27 1213.23 L1286.86 1213.23 L1287.44 1213.23 L1288.03 1213.23 L1288.61 1213.23 L1289.2 1213.23 L1289.79 1213.23 L1290.37 1213.23 L1290.96 1213.23 L1291.55 1213.23 L1292.13 1213.23 L1292.72 1213.23 L1293.31 1213.23 L1293.89 1213.23 L1294.48 1213.23 L1295.06 1213.23 L1295.65 1213.23 L1296.24 1213.23 L1296.82 1213.23 L1297.41 1213.23 L1298 1213.23 L1298.58 1213.23 L1299.17 1213.23 L1299.76 1213.23 L1300.34 1213.23 L1300.93 1213.23 L1301.52 1213.23 L1302.1 1213.23 L1302.69 1213.23 L1303.27 1213.23 L1303.86 1213.23 L1304.45 1213.23 L1305.03 1213.23 L1305.62 1213.23 L1306.21 1213.23 L1306.79 1213.23 L1307.38 1213.23 L1307.97 1213.23 L1308.55 1213.23 L1309.14 1213.23 L1309.73 1213.23 L1310.31 1213.23 L1310.9 1213.23 L1311.48 1213.23 L1312.07 1213.23 L1312.66 1213.23 L1313.24 1213.23 L1313.83 1213.23 L1314.42 1213.23 L1315 1213.23 L1315.59 1213.23 L1316.18 1213.23 L1316.76 1213.23 L1317.35 1213.23 L1317.93 1213.23 L1318.52 1213.23 L1319.11 1213.23 L1319.69 1213.23 L1320.28 1213.23 L1320.87 1213.23 L1321.45 1213.23 L1322.04 1213.23 L1322.63 1213.23 L1323.21 1213.23 L1323.8 1213.23 L1324.39 1213.23 L1324.97 1213.23 L1325.56 1213.23 L1326.14 1213.23 L1326.73 1213.23 L1327.32 1213.23 L1327.9 1213.23 L1328.49 1213.23 L1329.08 1213.23 L1329.66 1213.23 L1330.25 1213.23 L1330.84 1213.23 L1331.42 1213.23 L1332.01 1213.23 L1332.6 1213.23 L1333.18 1213.23 L1333.77 1213.23 L1334.35 1213.23 L1334.94 1213.23 L1335.53 1213.23 L1336.11 1213.23 L1336.7 1213.23 L1337.29 1213.23 L1337.87 1213.23 L1338.46 1213.23 L1339.05 1213.23 L1339.63 1213.23 L1340.22 1213.23 L1340.8 1213.23 L1341.39 1213.23 L1341.98 1213.23 L1342.56 1213.23 L1343.15 1213.23 L1343.74 1213.23 L1344.32 1213.23 L1344.91 1213.23 L1345.5 1213.23 L1346.08 1213.23 L1346.67 1213.23 L1347.26 1213.23 L1347.84 1213.23 L1348.43 1213.23 L1349.01 1213.23 L1349.6 1213.23 L1350.19 1213.23 L1350.77 1213.23 L1351.36 1213.23 L1351.95 1213.23 L1352.53 1213.23 L1353.12 1213.23 L1353.71 1213.23 L1354.29 1213.23 L1354.88 1213.23 L1355.47 1213.23 L1356.05 1213.23 L1356.64 1213.23 L1357.22 1213.23 L1357.81 1213.23 L1358.4 1213.23 L1358.98 1213.23 L1359.57 1213.23 L1360.16 1213.23 L1360.74 1213.23 L1361.33 1213.23 L1361.92 1213.23 L1362.5 1213.23 L1363.09 1213.23 L1363.68 1213.23 L1364.26 1213.23 L1364.85 1213.23 L1365.43 1213.23 L1366.02 1213.23 L1366.61 1213.23 L1367.19 1213.23 L1367.78 1213.23 L1368.37 1213.23 L1368.95 1213.23 L1369.54 1213.23 L1370.13 1213.23 L1370.71 1213.23 L1371.3 1213.23 L1371.88 1213.23 L1372.47 1213.23 L1373.06 1213.23 L1373.64 1213.23 L1374.23 1213.23 L1374.82 1213.23 L1375.4 1213.23 L1375.99 1213.23 L1376.58 1213.23 L1377.16 1213.23 L1377.75 1213.23 L1378.34 1213.23 L1378.92 1213.23 L1379.51 1213.23 L1380.09 1213.23 L1380.68 1213.23 L1381.27 1213.23 L1381.85 1213.23 L1382.44 1213.23 L1383.03 1213.23 L1383.61 1213.23 L1384.2 1213.23 L1384.79 1213.23 L1385.37 1213.23 L1385.96 1213.23 L1386.55 1213.23 L1387.13 1213.23 L1387.72 1213.23 L1388.3 1213.23 L1388.89 1213.23 L1389.48 1213.23 L1390.06 1213.23 L1390.65 1213.23 L1391.24 1213.23 L1391.82 1213.23 L1392.41 1213.23 L1393 1213.23 L1393.58 1213.23 L1394.17 1213.23 L1394.75 1213.23 L1395.34 1213.23 L1395.93 1213.23 L1396.51 1213.23 L1397.1 1213.23 L1397.69 1213.23 L1398.27 1213.23 L1398.86 1213.23 L1399.45 1213.23 L1400.03 1213.23 L1400.62 1213.23 L1401.21 1213.23 L1401.79 1213.23 L1402.38 1213.23 L1402.96 1213.23 L1403.55 1213.23 L1404.14 1213.23 L1404.72 1213.23 L1405.31 1213.23 L1405.9 1213.23 L1406.48 1213.23 L1407.07 1213.23 L1407.66 1213.23 L1408.24 1213.23 L1408.83 1213.23 L1409.42 1213.23 L1410 1213.23 L1410.59 1213.23 L1411.17 1213.23 L1411.76 1213.23 L1412.35 1213.23 L1412.93 1213.23 L1413.52 1213.23 L1414.11 1213.23 L1414.69 1213.23 L1415.28 1213.23 L1415.87 1213.23 L1416.45 1213.23 L1417.04 1213.23 L1417.63 1213.23 L1418.21 1213.23 L1418.8 1213.23 L1419.38 1213.23 L1419.97 1213.23 L1420.56 1213.23 L1421.14 1213.23 L1421.73 1213.23 L1422.32 1213.23 L1422.9 1213.23 L1423.49 1213.23 L1424.08 1213.23 L1424.66 1213.23 L1425.25 1213.23 L1425.83 1213.23 L1426.42 1213.23 L1427.01 1213.23 L1427.59 1213.23 L1428.18 1213.23 L1428.77 1213.23 L1429.35 1213.23 L1429.94 1213.23 L1430.53 1213.23 L1431.11 1213.23 L1431.7 1213.23 L1432.29 1213.23 L1432.87 1213.23 L1433.46 1213.23 L1434.04 1213.23 L1434.63 1213.23 L1435.22 1213.23 L1435.8 1213.23 L1436.39 1213.23 L1436.98 1213.23 L1437.56 1213.23 L1438.15 1213.23 L1438.74 1213.23 L1439.32 1213.23 L1439.91 1213.23 L1440.5 1213.23 L1441.08 1213.23 L1441.67 1213.23 L1442.25 1213.23 L1442.84 1213.23 L1443.43 1213.23 L1444.01 1213.23 L1444.6 1213.23 L1445.19 1213.23 L1445.77 1213.23 L1446.36 1213.23 L1446.95 1213.23 L1447.53 1213.23 L1448.12 1213.23 L1448.7 1213.23 L1449.29 1213.23 L1449.88 1213.23 L1450.46 1213.23 L1451.05 1213.23 L1451.64 1213.23 L1452.22 1213.23 L1452.81 1213.23 L1453.4 1213.23 L1453.98 1213.23 L1454.57 1213.23 L1455.16 1213.23 L1455.74 1213.23 L1456.33 1213.23 L1456.91 1213.23 L1457.5 1213.23 L1458.09 1213.23 L1458.67 1213.23 L1459.26 1213.23 L1459.85 1213.23 L1460.43 1213.23 L1461.02 1213.23 L1461.61 1213.23 L1462.19 1213.23 L1462.78 1213.23 L1463.37 1213.23 L1463.95 1213.23 L1464.54 1213.23 L1465.12 1213.23 L1465.71 1213.23 L1466.3 1213.23 L1466.88 1213.23 L1467.47 1213.23 L1468.06 1213.23 L1468.64 1213.23 L1469.23 1213.23 L1469.82 1213.23 L1470.4 1213.23 L1470.99 1213.23 L1471.57 1213.23 L1472.16 1213.23 L1472.75 1213.23 L1473.33 1213.23 L1473.92 1213.23 L1474.51 1213.23 L1475.09 1213.23 L1475.68 1213.23 L1476.27 1213.23 L1476.85 1213.23 L1477.44 1213.23 L1478.03 1213.23 L1478.61 1213.23 L1479.2 1213.23 L1479.78 1213.23 L1480.37 1213.23 L1480.96 1213.23 L1481.54 1213.23 L1482.13 1213.23 L1482.72 1213.23 L1483.3 1213.23 L1483.89 1213.23 L1484.48 1213.23 L1485.06 1213.23 L1485.65 1213.23 L1486.24 1213.23 L1486.82 1213.23 L1487.41 1213.23 L1487.99 1213.23 L1488.58 1213.23 L1489.17 1213.23 L1489.75 1213.23 L1490.34 1213.23 L1490.93 1213.23 L1491.51 1213.23 L1492.1 1213.23 L1492.69 1213.23 L1493.27 1213.23 L1493.86 1213.23 L1494.45 1213.23 L1495.03 1213.23 L1495.62 1213.23 L1496.2 1213.23 L1496.79 1213.23 L1497.38 1213.23 L1497.96 1213.23 L1498.55 1213.23 L1499.14 1213.23 L1499.72 1213.23 L1500.31 1213.23 L1500.9 1213.23 L1501.48 1213.23 L1502.07 1213.23 L1502.65 1213.23 L1503.24 1213.23 L1503.83 1213.23 L1504.41 1213.23 L1505 1213.23 L1505.59 1213.23 L1506.17 1213.23 L1506.76 1213.23 L1507.35 1213.23 L1507.93 1213.23 L1508.52 1213.23 L1509.11 1213.23 L1509.69 1213.23 L1510.28 1213.23 L1510.86 1213.23 L1511.45 1213.23 L1512.04 1213.23 L1512.62 1213.23 L1513.21 1213.23 L1513.8 1213.23 L1514.38 1213.23 L1514.97 1213.23 L1515.56 1213.23 L1516.14 1213.23 L1516.73 1213.23 L1517.32 1213.23 L1517.9 1213.23 L1518.49 1213.23 L1519.07 1213.23 L1519.66 1213.23 L1520.25 1213.23 L1520.83 1213.23 L1521.42 1213.23 L1522.01 1213.23 L1522.59 1213.23 L1523.18 1213.23 L1523.77 1213.23 L1524.35 1213.23 L1524.94 1213.23 L1525.52 1213.23 L1526.11 1213.23 L1526.7 1213.23 L1527.28 1213.23 L1527.87 1213.23 L1528.46 1213.23 L1529.04 1213.23 L1529.63 1213.23 L1530.22 1213.23 L1530.8 1213.23 L1531.39 1213.23 L1531.98 1213.23 L1532.56 1213.23 L1533.15 1213.23 L1533.73 1213.23 L1534.32 1213.23 L1534.91 1213.23 L1535.49 1213.23 L1536.08 1213.23 L1536.67 1213.23 L1537.25 1213.23 L1537.84 1213.23 L1538.43 1213.23 L1539.01 1213.23 L1539.6 1213.23 L1540.19 1213.23 L1540.77 1213.23 L1541.36 1213.23 L1541.94 1213.23 L1542.53 1213.23 L1543.12 1213.23 L1543.7 1213.23 L1544.29 1213.23 L1544.88 1213.23 L1545.46 1213.23 L1546.05 1213.23 L1546.64 1213.23 L1547.22 1213.23 L1547.81 1213.23 L1548.4 1213.23 L1548.98 1213.23 L1549.57 1213.23 L1550.15 1213.23 L1550.74 1213.23 L1551.33 1213.23 L1551.91 1213.23 L1552.5 1213.23 L1553.09 1213.23 L1553.67 1213.23 L1554.26 1213.23 L1554.85 1213.23 L1555.43 1213.23 L1556.02 1213.23 L1556.6 1213.23 L1557.19 1213.23 L1557.78 1213.23 L1558.36 1213.23 L1558.95 1213.23 L1559.54 1213.23 L1560.12 1213.23 L1560.71 1213.23 L1561.3 1213.23 L1561.88 1213.23 L1562.47 1213.23 L1563.06 1213.23 L1563.64 1213.23 L1564.23 1213.23 L1564.81 1213.23 L1565.4 1213.23 L1565.99 1213.23 L1566.57 1213.23 L1567.16 1213.23 L1567.75 1213.23 L1568.33 1213.23 L1568.92 1213.23 L1569.51 1213.23 L1570.09 1213.23 L1570.68 1213.23 L1571.27 1213.23 L1571.85 1213.23 L1572.44 1213.23 L1573.02 1213.23 L1573.61 1213.23 L1574.2 1213.23 L1574.78 1213.23 L1575.37 1213.23 L1575.96 1213.23 L1576.54 1213.23 L1577.13 1213.23 L1577.72 1213.23 L1578.3 1213.23 L1578.89 1213.23 L1579.47 1213.23 L1580.06 1213.23 L1580.65 1213.23 L1581.23 1213.23 L1581.82 1213.23 L1582.41 1213.23 L1582.99 1213.23 L1583.58 1213.23 L1584.17 1213.23 L1584.75 1213.23 L1585.34 1213.23 L1585.93 1213.23 L1586.51 1213.23 L1587.1 1213.23 L1587.68 1213.23 L1588.27 1213.23 L1588.86 1213.23 L1589.44 1213.23 L1590.03 1213.23 L1590.62 1213.23 L1591.2 1213.23 L1591.79 1213.23 L1592.38 1213.23 L1592.96 1213.23 L1593.55 1213.23 L1594.14 1213.23 L1594.72 1213.23 L1595.31 1213.23 L1595.89 1213.23 L1596.48 1213.23 L1597.07 1213.23 L1597.65 1213.23 L1598.24 1213.23 L1598.83 1213.23 L1599.41 1213.23 L1600 1213.23 L1600.59 1213.23 L1601.17 1213.23 L1601.76 1213.23 L1602.34 1213.23 L1602.93 1213.23 L1603.52 1213.23 L1604.1 1213.23 L1604.69 1213.23 L1605.28 1213.23 L1605.86 1213.23 L1606.45 1213.23 L1607.04 1213.23 L1607.62 1213.23 L1608.21 1213.23 L1608.8 1213.23 L1609.38 1213.23 L1609.97 1213.23 L1610.55 1213.23 L1611.14 1213.23 L1611.73 1213.23 L1612.31 1213.23 L1612.9 1213.23 L1613.49 1213.23 L1614.07 1213.23 L1614.66 1213.23 L1615.25 1213.23 L1615.83 1213.23 L1616.42 1213.23 L1617.01 1213.23 L1617.59 1213.23 L1618.18 1213.23 L1618.76 1213.23 L1619.35 1213.23 L1619.94 1213.23 L1620.52 1213.23 L1621.11 1213.23 L1621.7 1213.23 L1622.28 1213.23 L1622.87 1213.23 L1623.46 1213.23 L1624.04 1213.23 L1624.63 1213.23 L1625.22 1213.23 L1625.8 1213.23 L1626.39 1213.23 L1626.97 1213.23 L1627.56 1213.23 L1628.15 1213.23 L1628.73 1213.23 L1629.32 1213.23 L1629.91 1213.23 L1630.49 1213.23 L1631.08 1213.23 L1631.67 1213.23 L1632.25 1213.23 L1632.84 1213.23 L1633.42 1213.23 L1634.01 1213.23 L1634.6 1213.23 L1635.18 1213.23 L1635.77 1213.23 L1636.36 1213.23 L1636.94 1213.23 L1637.53 1213.23 L1638.12 1213.23 L1638.7 1213.23 L1639.29 1213.23 L1639.88 1213.23 L1640.46 1213.23 L1641.05 1213.23 L1641.63 1213.23 L1642.22 1213.23 L1642.81 1213.23 L1643.39 1213.23 L1643.98 1213.23 L1644.57 1213.23 L1645.15 1213.23 L1645.74 1213.23 L1646.33 1213.23 L1646.91 1213.23 L1647.5 1213.23 L1648.09 1213.23 L1648.67 1213.23 L1649.26 1213.23 L1649.84 1213.23 L1650.43 1213.23 L1651.02 1213.23 L1651.6 1213.23 L1652.19 1213.23 L1652.78 1213.23 L1653.36 1213.23 L1653.95 1213.23 L1654.54 1213.23 L1655.12 1213.23 L1655.71 1213.23 L1656.29 1213.23 L1656.88 1213.23 L1657.47 1213.23 L1658.05 1213.23 L1658.64 1213.23 L1659.23 1213.23 L1659.81 1213.23 L1660.4 1213.23 L1660.99 1213.23 L1661.57 1213.23 L1662.16 1213.23 L1662.75 1213.23 L1663.33 1213.23 L1663.92 1213.23 L1664.5 1213.23 L1665.09 1213.23 L1665.68 1213.23 L1666.26 1213.23 L1666.85 1213.23 L1667.44 1213.23 L1668.02 1213.23 L1668.61 1213.23 L1669.2 1213.23 L1669.78 1213.23 L1670.37 1213.23 L1670.96 1213.23 L1671.54 1213.23 L1672.13 1213.23 L1672.71 1213.23 L1673.3 1213.23 L1673.89 1213.23 L1674.47 1213.23 L1675.06 1213.23 L1675.65 1213.23 L1676.23 1213.23 L1676.82 1213.23 L1677.41 1213.23 L1677.99 1213.23 L1678.58 1213.23 L1679.17 1213.23 L1679.75 1213.23 L1680.34 1213.23 L1680.92 1213.23 L1681.51 1213.23 L1682.1 1213.23 L1682.68 1213.23 L1683.27 1213.23 L1683.86 1213.23 L1684.44 1213.23 L1685.03 1213.23 L1685.62 1213.23 L1686.2 1213.23 L1686.79 1213.23 L1687.37 1213.23 L1687.96 1213.23 L1688.55 1213.23 L1689.13 1213.23 L1689.72 1213.23 L1690.31 1213.23 L1690.89 1213.23 L1691.48 1213.23 L1692.07 1213.23 L1692.65 1213.23 L1693.24 1213.23 L1693.83 1213.23 L1694.41 1213.23 L1695 1213.23 L1695.58 1213.23 L1696.17 1213.23 L1696.76 1213.23 L1697.34 1213.23 L1697.93 1213.23 L1698.52 1213.23 L1699.1 1213.23 L1699.69 1213.23 L1700.28 1213.23 L1700.86 1213.23 L1701.45 1213.23 L1702.04 1213.23 L1702.62 1213.23 L1703.21 1213.23 L1703.79 1213.23 L1704.38 1213.23 L1704.97 1213.23 L1705.55 1213.23 L1706.14 1213.23 L1706.73 1213.23 L1707.31 1213.23 L1707.9 1213.23 L1708.49 1213.23 L1709.07 1213.23 L1709.66 1213.23 L1710.24 1213.23 L1710.83 1213.23 L1711.42 1213.23 L1712 1213.23 L1712.59 1213.23 L1713.18 1213.23 L1713.76 1213.23 L1714.35 1213.23 L1714.94 1213.23 L1715.52 1213.23 L1716.11 1213.23 L1716.7 1213.23 L1717.28 1213.23 L1717.87 1213.23 L1718.45 1213.23 L1719.04 1213.23 L1719.63 1213.23 L1720.21 1213.23 L1720.8 1213.23 L1721.39 1213.23 L1721.97 1213.23 L1722.56 1213.23 L1723.15 1213.23 L1723.73 1213.23 L1724.32 1213.23 L1724.91 1213.23 L1725.49 1213.23 L1726.08 1213.23 L1726.66 1213.23 L1727.25 1213.23 L1727.84 1213.23 L1728.42 1213.23 L1729.01 1213.23 L1729.6 1213.23 L1730.18 1213.23 L1730.77 1213.23 L1731.36 1213.23 L1731.94 1213.23 L1732.53 1213.23 L1733.11 1213.23 L1733.7 1213.23 L1734.29 1213.23 L1734.87 1213.23 L1735.46 1213.23 L1736.05 1213.23 L1736.63 1213.23 L1737.22 1213.23 L1737.81 1213.23 L1738.39 1213.23 L1738.98 1213.23 L1739.57 1213.23 L1740.15 1213.23 L1740.74 1213.23 L1741.32 1213.23 L1741.91 1213.23 L1742.5 1213.23 L1743.08 1213.23 L1743.67 1213.23 L1744.26 1213.23 L1744.84 1213.23 L1745.43 1213.23 L1746.02 1213.23 L1746.6 1213.23 L1747.19 1213.23 L1747.78 1213.23 L1748.36 1213.23 L1748.95 1213.23 L1749.53 1213.23 L1750.12 1213.23 L1750.71 1213.23 L1751.29 1213.23 L1751.88 1213.23 L1752.47 1213.23 L1753.05 1213.23 L1753.64 1213.23 L1754.23 1213.23 L1754.81 1213.23 L1755.4 1213.23 L1755.99 1213.23 L1756.57 1213.23 L1757.16 1213.23 L1757.74 1213.23 L1758.33 1213.23 L1758.92 1213.23 L1759.5 1213.23 L1760.09 1213.23 L1760.68 1213.23 L1761.26 1213.23 L1761.85 1213.23 L1762.44 1213.23 L1763.02 1213.23 L1763.61 1213.23 L1764.19 1213.23 L1764.78 1213.23 L1765.37 1213.23 L1765.95 1213.23 L1766.54 1213.23 L1767.13 1213.23 L1767.71 1213.23 L1768.3 1213.23 L1768.89 1213.23 L1769.47 1213.23 L1770.06 1213.23 L1770.65 1213.23 L1771.23 1213.23 L1771.82 1213.23 L1772.4 1213.23 L1772.99 1213.23 L1773.58 1213.23 L1774.16 1213.23 L1774.75 1213.23 L1775.34 1213.23 L1775.92 1213.23 L1776.51 1213.23 L1777.1 1213.23 L1777.68 1213.23 L1778.27 1213.23 L1778.86 1213.23 L1779.44 1213.23 L1780.03 1213.23 L1780.61 1213.23 L1781.2 1213.23 L1781.79 1213.23 L1782.37 1213.23 L1782.96 1213.23 L1783.55 1213.23 L1784.13 1213.23 L1784.72 1213.23 L1785.31 1213.23 L1785.89 1213.23 L1786.48 1213.23 L1787.06 1213.23 L1787.65 1213.23 L1788.24 1213.23 L1788.82 1213.23 L1789.41 1213.23 L1790 1213.23 L1790.58 1213.23 L1791.17 1213.23 L1791.76 1213.23 L1792.34 1213.23 L1792.93 1213.23 L1793.52 1213.23 L1794.1 1213.23 L1794.69 1213.23 L1795.27 1213.23 L1795.86 1213.23 L1796.45 1213.23 L1797.03 1213.23 L1797.62 1213.23 L1798.21 1213.23 L1798.79 1213.23 L1799.38 1213.23 L1799.97 1213.23 L1800.55 1213.23 L1801.14 1213.23 L1801.73 1213.23 L1802.31 1213.23 L1802.9 1213.23 L1803.48 1213.23 L1804.07 1213.23 L1804.66 1213.23 L1805.24 1213.23 L1805.83 1213.23 L1806.42 1213.23 L1807 1213.23 L1807.59 1213.23 L1808.18 1213.23 L1808.76 1213.23 L1809.35 1213.23 L1809.94 1213.23 L1810.52 1213.23 L1811.11 1213.23 L1811.69 1213.23 L1812.28 1213.23 L1812.87 1213.23 L1813.45 1213.23 L1814.04 1213.23 L1814.63 1213.23 L1815.21 1213.23 L1815.8 1213.23 L1816.39 1213.23 L1816.97 1213.23 L1817.56 1213.23 L1818.14 1213.23 L1818.73 1213.23 L1819.32 1213.23 L1819.9 1213.23 L1820.49 1213.23 L1821.08 1213.23 L1821.66 1213.23 L1822.25 1213.23 L1822.84 1213.23 L1823.42 1213.23 L1824.01 1213.23 L1824.6 1213.23 L1825.18 1213.23 L1825.77 1213.23 L1826.35 1213.23 L1826.94 1213.23 L1827.53 1213.23 L1828.11 1213.23 L1828.7 1213.23 L1829.29 1213.23 L1829.87 1213.23 L1830.46 1213.23 L1831.05 1213.23 L1831.63 1213.23 L1832.22 1213.23 L1832.81 1213.23 L1833.39 1213.23 L1833.98 1213.23 L1834.56 1213.23 L1835.15 1213.23 L1835.74 1213.23 L1836.32 1213.23 L1836.91 1213.23 L1837.5 1213.23 L1838.08 1213.23 L1838.67 1213.23 L1839.26 1213.23 L1839.84 1213.23 L1840.43 1213.23 L1841.01 1213.23 L1841.6 1213.23 L1842.19 1213.23 L1842.77 1213.23 L1843.36 1213.23 L1843.95 1213.23 L1844.53 1213.23 L1845.12 1213.23 L1845.71 1213.23 L1846.29 1213.23 L1846.88 1213.23 L1847.47 1213.23 L1848.05 1213.23 L1848.64 1213.23 L1849.22 1213.23 L1849.81 1213.23 L1850.4 1213.23 L1850.98 1213.23 L1851.57 1213.23 L1852.16 1213.23 L1852.74 1213.23 L1853.33 1213.23 L1853.92 1213.23 L1854.5 1213.23 L1855.09 1213.23 L1855.68 1213.23 L1856.26 1213.23 L1856.85 1213.23 L1857.43 1213.23 L1858.02 1213.23 L1858.61 1213.23 L1859.19 1213.23 L1859.78 1213.23 L1860.37 1213.23 L1860.95 1213.23 L1861.54 1213.23 L1862.13 1213.23 L1862.71 1213.23 L1863.3 1213.23 L1863.88 1213.23 L1864.47 1213.23 L1865.06 1213.23 L1865.64 1213.23 L1866.23 1213.23 L1866.82 1213.23 L1867.4 1213.23 L1867.99 1213.23 L1868.58 1213.23 L1869.16 1213.23 L1869.75 1213.23 L1870.34 1213.23 L1870.92 1213.23 L1871.51 1213.23 L1872.09 1213.23 L1872.68 1213.23 L1873.27 1213.23 L1873.85 1213.23 L1874.44 1213.23 L1875.03 1213.23 L1875.61 1213.23 L1876.2 1213.23 L1876.79 1213.23 L1877.37 1213.23 L1877.96 1213.23 L1878.55 1213.23 L1879.13 1213.23 L1879.72 1213.23 L1880.3 1213.23 L1880.89 1213.23 L1881.48 1213.23 L1882.06 1213.23 L1882.65 1213.23 L1883.24 1213.23 L1883.82 1213.23 L1884.41 1213.23 L1885 1213.23 L1885.58 1213.23 L1886.17 1213.23 L1886.76 1213.23 L1887.34 1213.23 L1887.93 1213.23 L1888.51 1213.23 L1889.1 1213.23 L1889.69 1213.23 L1890.27 1213.23 L1890.86 1213.23 L1891.45 1213.23 L1892.03 1213.23 L1892.62 1213.23 L1893.21 1213.23 L1893.79 1213.23 L1894.38 1213.23 L1894.96 1213.23 L1895.55 1213.23 L1896.14 1213.23 L1896.72 1213.23 L1897.31 1213.23 L1897.9 1213.23 L1898.48 1213.23 L1899.07 1213.23 L1899.66 1213.23 L1900.24 1213.23 L1900.83 1213.23 L1901.42 1213.23 L1902 1213.23 L1902.59 1213.23 L1903.17 1213.23 L1903.76 1213.23 L1904.35 1213.23 L1904.93 1213.23 L1905.52 1213.23 L1906.11 1213.23 L1906.69 1213.23 L1907.28 1213.23 L1907.87 1213.23 L1908.45 1213.23 L1909.04 1213.23 L1909.63 1213.23 L1910.21 1213.23 L1910.8 1213.23 L1911.38 1213.23 L1911.97 1213.23 L1912.56 1213.23 L1913.14 1213.23 L1913.73 1213.23 L1914.32 1213.23 L1914.9 1213.23 L1915.49 1213.23 L1916.08 1213.23 L1916.66 1213.23 L1917.25 1213.23 L1917.83 1213.23 L1918.42 1213.23 L1919.01 1213.23 L1919.59 1213.23 L1920.18 1213.23 L1920.77 1213.23 L1921.35 1213.23 L1921.94 1213.23 L1922.53 1213.23 L1923.11 1213.23 L1923.7 1213.23 L1924.29 1213.23 L1924.87 1213.23 L1925.46 1213.23 L1926.04 1213.23 L1926.63 1213.23 L1927.22 1213.23 L1927.8 1213.23 L1928.39 1213.23 L1928.98 1213.23 L1929.56 1213.23 L1930.15 1213.23 L1930.74 1213.23 L1931.32 1213.23 L1931.91 1213.23 L1932.5 1213.23 L1933.08 1213.23 L1933.67 1213.23 L1934.25 1213.23 L1934.84 1213.23 L1935.43 1213.23 L1936.01 1213.23 L1936.6 1213.23 L1937.19 1213.23 L1937.77 1213.23 L1938.36 1213.23 L1938.95 1213.23 L1939.53 1213.23 L1940.12 1213.23 L1940.71 1213.23 L1941.29 1213.23 L1941.88 1213.23 L1942.46 1213.23 L1943.05 1213.23 L1943.64 1213.23 L1944.22 1213.23 L1944.81 1213.23 L1945.4 1213.23 L1945.98 1213.23 L1946.57 1213.23 L1947.16 1213.23 L1947.74 1213.23 L1948.33 1213.23 L1948.91 1213.23 L1949.5 1213.23 L1950.09 1213.23 L1950.67 1213.23 L1951.26 1213.23 L1951.85 1213.23 L1952.43 1213.23 L1953.02 1213.23 L1953.61 1213.23 L1954.19 1213.23 L1954.78 1213.23 L1955.37 1213.23 L1955.95 1213.23 L1956.54 1213.23 L1957.12 1213.23 L1957.71 1213.23 L1958.3 1213.23 L1958.88 1213.23 L1959.47 1213.23 L1960.06 1213.23 L1960.64 1213.23 L1961.23 1213.23 L1961.82 1213.23 L1962.4 1213.23 L1962.99 1213.23 L1963.58 1213.23 L1964.16 1213.23 L1964.75 1213.23 L1965.33 1213.23 L1965.92 1213.23 L1966.51 1213.23 L1967.09 1213.23 L1967.68 1213.23 L1968.27 1213.23 L1968.85 1213.23 L1969.44 1213.23 L1970.03 1213.23 L1970.61 1213.23 L1971.2 1213.23 L1971.78 1213.23 L1972.37 1213.23 L1972.96 1213.23 L1973.54 1213.23 L1974.13 1213.23 L1974.72 1213.23 L1975.3 1213.23 L1975.89 1213.23 L1976.48 1213.23 L1977.06 1213.23 L1977.65 1213.23 L1978.24 1213.23 L1978.82 1213.23 L1979.41 1213.23 L1979.99 1213.23 L1980.58 1213.23 L1981.17 1213.23 L1981.75 1213.23 L1982.34 1213.23 L1982.93 1213.23 L1983.51 1213.23 L1984.1 1213.23 L1984.69 1213.23 L1985.27 1213.23 L1985.86 1213.23 L1986.45 1213.23 L1987.03 1213.23 L1987.62 1213.23 L1988.2 1213.23 L1988.79 1213.23 L1989.38 1213.23 L1989.96 1213.23 L1990.55 1213.23 L1991.14 1213.23 L1991.72 1213.23 L1992.31 1213.23 L1992.9 1213.23 L1993.48 1213.23 L1994.07 1213.23 L1994.65 1213.23 L1995.24 1213.23 L1995.83 1213.23 L1996.41 1213.23 L1997 1213.23 L1997.59 1213.23 L1998.17 1213.23 L1998.76 1213.23 L1999.35 1213.23 L1999.93 1213.23 L2000.52 1213.23 L2001.11 1213.23 L2001.69 1213.23 L2002.28 1213.23 L2002.86 1213.23 L2003.45 1213.23 L2004.04 1213.23 L2004.62 1213.23 L2005.21 1213.23 L2005.8 1213.23 L2006.38 1213.23 L2006.97 1213.23 L2007.56 1213.23 L2008.14 1213.23 L2008.73 1213.23 L2009.32 1213.23 L2009.9 1213.23 L2010.49 1213.23 L2011.07 1213.23 L2011.66 1213.23 L2012.25 1213.23 L2012.83 1213.23 L2013.42 1213.23 L2014.01 1213.23 L2014.59 1213.23 L2015.18 1213.23 L2015.77 1213.23 L2016.35 1213.23 L2016.94 1213.23 L2017.53 1213.23 L2018.11 1213.23 L2018.7 1213.23 L2019.28 1213.23 L2019.87 1213.23 L2020.46 1213.23 L2021.04 1213.23 L2021.63 1213.23 L2022.22 1213.23 L2022.8 1213.23 L2023.39 1213.23 L2023.98 1213.23 L2024.56 1213.23 L2025.15 1213.23 L2025.73 1213.23 L2026.32 1213.23 L2026.91 1213.23 L2027.49 1213.23 L2028.08 1213.23 L2028.67 1213.23 L2029.25 1213.23 L2029.84 1213.23 L2030.43 1213.23 L2031.01 1213.23 L2031.6 1213.23 L2032.19 1213.23 L2032.77 1213.23 L2033.36 1213.23 L2033.94 1213.23 L2034.53 1213.23 L2035.12 1213.23 L2035.7 1213.23 L2036.29 1213.23 L2036.88 1213.23 L2037.46 1213.23 L2038.05 1213.23 L2038.64 1213.23 L2039.22 1213.23 L2039.81 1213.23 L2040.4 1213.23 L2040.98 1213.23 L2041.57 1213.23 L2042.15 1213.23 L2042.74 1213.23 L2043.33 1213.23 L2043.91 1213.23 L2044.5 1213.23 L2045.09 1213.23 L2045.67 1213.23 L2046.26 1213.23 L2046.85 1213.23 L2047.43 1213.23 L2048.02 1213.23 L2048.6 1213.23 L2049.19 1213.23 L2049.78 1213.23 L2050.36 1213.23 L2050.95 1213.23 L2051.54 1213.23 L2052.12 1213.23 L2052.71 1213.23 L2053.3 1213.23 L2053.88 1213.23 L2054.47 1213.23 L2055.06 1213.23 L2055.64 1213.23 L2056.23 1213.23 L2056.81 1213.23 L2057.4 1213.23 L2057.99 1213.23 L2058.57 1213.23 L2059.16 1213.23 L2059.75 1213.23 L2060.33 1213.23 L2060.92 1213.23 L2061.51 1213.23 L2062.09 1213.23 L2062.68 1213.23 L2063.27 1213.23 L2063.85 1213.23 L2064.44 1213.23 L2065.02 1213.23 L2065.61 1213.23 L2066.2 1213.23 L2066.78 1213.23 L2067.37 1213.23 L2067.96 1213.23 L2068.54 1213.23 L2069.13 1213.23 L2069.72 1213.23 L2070.3 1213.23 L2070.89 1213.23 L2071.48 1213.23 L2072.06 1213.23 L2072.65 1213.23 L2073.23 1213.23 L2073.82 1213.23 L2074.41 1213.23 L2074.99 1213.23 L2075.58 1213.23 L2076.17 1213.23 L2076.75 1213.23 L2077.34 1213.23 L2077.93 1213.23 L2078.51 1213.23 L2079.1 1213.23 L2079.68 1213.23 L2080.27 1213.23 L2080.86 1213.23 L2081.44 1213.23 L2082.03 1213.23 L2082.62 1213.23 L2083.2 1213.23 L2083.79 1213.23 L2084.38 1213.23 L2084.96 1213.23 L2085.55 1213.23 L2086.14 1213.23 L2086.72 1213.23 L2087.31 1213.23 L2087.89 1213.23 L2088.48 1213.23 L2089.07 1213.23 L2089.65 1213.23 L2090.24 1213.23 L2090.83 1213.23 L2091.41 1213.23 L2092 1213.23 L2092.59 1213.23 L2093.17 1213.23 L2093.76 1213.23 L2094.35 1213.23 L2094.93 1213.23 L2095.52 1213.23 L2096.1 1213.23 L2096.69 1213.23 L2097.28 1213.23 L2097.86 1213.23 L2098.45 1213.23 L2099.04 1213.23 L2099.62 1213.23 L2100.21 1213.23 L2100.8 1213.23 L2101.38 1213.23 L2101.97 1213.23 L2102.55 1213.23 L2103.14 1213.23 L2103.73 1213.23 L2104.31 1213.23 L2104.9 1213.23 L2105.49 1213.23 L2106.07 1213.23 L2106.66 1213.23 L2107.25 1213.23 L2107.83 1213.23 L2108.42 1213.23 L2109.01 1213.23 L2109.59 1213.23 L2110.18 1213.23 L2110.76 1213.23 L2111.35 1213.23 L2111.94 1213.23 L2112.52 1213.23 L2113.11 1213.23 L2113.7 1213.23 L2114.28 1213.23 L2114.87 1213.23 L2115.46 1213.23 L2116.04 1213.23 L2116.63 1213.23 L2117.22 1213.23 L2117.8 1213.23 L2118.39 1213.23 L2118.97 1213.23 L2119.56 1213.23 L2120.15 1213.23 L2120.73 1213.23 L2121.32 1213.23 L2121.91 1213.23 L2122.49 1213.23 L2123.08 1213.23 L2123.67 1213.23 L2124.25 1213.23 L2124.84 1213.23 L2125.42 1213.23 L2126.01 1213.23 L2126.6 1213.23 L2127.18 1213.23 L2127.77 1213.23 L2128.36 1213.23 L2128.94 1213.23 L2129.53 1213.23 L2130.12 1213.23 L2130.7 1213.23 L2131.29 1213.23 L2131.88 1213.23 L2132.46 1213.23 L2133.05 1213.23 L2133.63 1213.23 L2134.22 1213.23 L2134.81 1213.23 L2135.39 1213.23 L2135.98 1213.23 L2136.57 1213.23 L2137.15 1213.23 L2137.74 1213.23 L2138.33 1213.23 L2138.91 1213.23 L2139.5 1213.23 L2140.09 1213.23 L2140.67 1213.23 L2141.26 1213.23 L2141.84 1213.23 L2142.43 1213.23 L2143.02 1213.23 L2143.6 1213.23 L2144.19 1213.23 L2144.78 1213.23 L2145.36 1213.23 L2145.95 1213.23 L2146.54 1213.23 L2147.12 1213.23 L2147.71 1213.23 L2148.3 1213.23 L2148.88 1213.23 L2149.47 1213.23 L2150.05 1213.23 L2150.64 1213.23 L2151.23 1213.23 L2151.81 1213.23 L2152.4 1213.23 L2152.99 1213.23 L2153.57 1213.23 L2154.16 1213.23 L2154.75 1213.23 L2155.33 1213.23 L2155.92 1213.23 L2156.5 1213.23 L2157.09 1213.23 L2157.68 1213.23 L2158.26 1213.23 L2158.26 1212.75 L2157.68 1212.75 L2157.09 1212.75 L2156.5 1212.75 L2155.92 1212.75 L2155.33 1212.75 L2154.75 1212.75 L2154.16 1212.75 L2153.57 1212.75 L2152.99 1212.75 L2152.4 1212.75 L2151.81 1212.75 L2151.23 1212.75 L2150.64 1212.75 L2150.05 1212.75 L2149.47 1212.75 L2148.88 1212.75 L2148.3 1212.75 L2147.71 1212.75 L2147.12 1212.75 L2146.54 1212.75 L2145.95 1212.75 L2145.36 1212.75 L2144.78 1212.75 L2144.19 1212.75 L2143.6 1212.75 L2143.02 1212.75 L2142.43 1212.75 L2141.84 1212.75 L2141.26 1212.75 L2140.67 1212.75 L2140.09 1212.75 L2139.5 1212.75 L2138.91 1212.75 L2138.33 1212.75 L2137.74 1212.75 L2137.15 1212.75 L2136.57 1212.75 L2135.98 1212.75 L2135.39 1212.75 L2134.81 1212.75 L2134.22 1212.75 L2133.63 1212.75 L2133.05 1212.75 L2132.46 1212.75 L2131.88 1212.75 L2131.29 1212.75 L2130.7 1212.75 L2130.12 1212.75 L2129.53 1212.75 L2128.94 1212.75 L2128.36 1212.75 L2127.77 1212.75 L2127.18 1212.75 L2126.6 1212.75 L2126.01 1212.75 L2125.42 1212.75 L2124.84 1212.75 L2124.25 1212.75 L2123.67 1212.75 L2123.08 1212.75 L2122.49 1212.75 L2121.91 1212.75 L2121.32 1212.75 L2120.73 1212.75 L2120.15 1212.75 L2119.56 1212.75 L2118.97 1212.75 L2118.39 1212.75 L2117.8 1212.75 L2117.22 1212.75 L2116.63 1212.75 L2116.04 1212.75 L2115.46 1212.75 L2114.87 1212.75 L2114.28 1212.75 L2113.7 1212.75 L2113.11 1212.75 L2112.52 1212.75 L2111.94 1212.75 L2111.35 1212.75 L2110.76 1212.75 L2110.18 1212.75 L2109.59 1212.75 L2109.01 1212.75 L2108.42 1212.75 L2107.83 1212.75 L2107.25 1212.75 L2106.66 1212.75 L2106.07 1212.75 L2105.49 1212.75 L2104.9 1212.75 L2104.31 1212.75 L2103.73 1212.75 L2103.14 1212.75 L2102.55 1212.75 L2101.97 1212.75 L2101.38 1212.75 L2100.8 1212.75 L2100.21 1212.75 L2099.62 1212.75 L2099.04 1212.75 L2098.45 1212.75 L2097.86 1212.75 L2097.28 1212.75 L2096.69 1212.75 L2096.1 1212.75 L2095.52 1212.75 L2094.93 1212.75 L2094.35 1212.75 L2093.76 1212.75 L2093.17 1212.75 L2092.59 1212.75 L2092 1212.75 L2091.41 1212.75 L2090.83 1212.75 L2090.24 1212.75 L2089.65 1212.75 L2089.07 1212.75 L2088.48 1212.75 L2087.89 1212.75 L2087.31 1212.75 L2086.72 1212.75 L2086.14 1212.75 L2085.55 1212.75 L2084.96 1212.75 L2084.38 1212.75 L2083.79 1212.75 L2083.2 1212.75 L2082.62 1212.75 L2082.03 1212.75 L2081.44 1212.75 L2080.86 1212.75 L2080.27 1212.75 L2079.68 1212.75 L2079.1 1212.75 L2078.51 1212.75 L2077.93 1212.75 L2077.34 1212.75 L2076.75 1212.75 L2076.17 1212.75 L2075.58 1212.75 L2074.99 1212.75 L2074.41 1212.75 L2073.82 1212.75 L2073.23 1212.75 L2072.65 1212.75 L2072.06 1212.75 L2071.48 1212.75 L2070.89 1212.75 L2070.3 1212.75 L2069.72 1212.75 L2069.13 1212.75 L2068.54 1212.75 L2067.96 1212.75 L2067.37 1212.75 L2066.78 1212.75 L2066.2 1212.75 L2065.61 1212.75 L2065.02 1212.75 L2064.44 1212.75 L2063.85 1212.75 L2063.27 1212.75 L2062.68 1212.75 L2062.09 1212.75 L2061.51 1212.75 L2060.92 1212.75 L2060.33 1212.75 L2059.75 1212.75 L2059.16 1212.75 L2058.57 1212.75 L2057.99 1212.75 L2057.4 1212.75 L2056.81 1212.75 L2056.23 1212.75 L2055.64 1212.75 L2055.06 1212.75 L2054.47 1212.75 L2053.88 1212.75 L2053.3 1212.75 L2052.71 1212.75 L2052.12 1212.75 L2051.54 1212.75 L2050.95 1212.75 L2050.36 1212.75 L2049.78 1212.75 L2049.19 1212.75 L2048.6 1212.75 L2048.02 1212.75 L2047.43 1212.75 L2046.85 1212.75 L2046.26 1212.75 L2045.67 1212.75 L2045.09 1212.75 L2044.5 1212.75 L2043.91 1212.75 L2043.33 1212.75 L2042.74 1212.75 L2042.15 1212.75 L2041.57 1212.75 L2040.98 1212.75 L2040.4 1212.75 L2039.81 1212.75 L2039.22 1212.75 L2038.64 1212.75 L2038.05 1212.75 L2037.46 1212.75 L2036.88 1212.75 L2036.29 1212.75 L2035.7 1212.75 L2035.12 1212.75 L2034.53 1212.75 L2033.94 1212.75 L2033.36 1212.75 L2032.77 1212.75 L2032.19 1212.75 L2031.6 1212.75 L2031.01 1212.75 L2030.43 1212.75 L2029.84 1212.75 L2029.25 1212.75 L2028.67 1212.75 L2028.08 1212.75 L2027.49 1212.75 L2026.91 1212.75 L2026.32 1212.75 L2025.73 1212.75 L2025.15 1212.75 L2024.56 1212.75 L2023.98 1212.75 L2023.39 1212.75 L2022.8 1212.75 L2022.22 1212.75 L2021.63 1212.75 L2021.04 1212.75 L2020.46 1212.75 L2019.87 1212.75 L2019.28 1212.75 L2018.7 1212.75 L2018.11 1212.75 L2017.53 1212.75 L2016.94 1212.75 L2016.35 1212.75 L2015.77 1212.75 L2015.18 1212.75 L2014.59 1212.75 L2014.01 1212.75 L2013.42 1212.75 L2012.83 1212.75 L2012.25 1212.75 L2011.66 1212.75 L2011.07 1212.75 L2010.49 1212.75 L2009.9 1212.75 L2009.32 1212.75 L2008.73 1212.75 L2008.14 1212.75 L2007.56 1212.75 L2006.97 1212.75 L2006.38 1212.75 L2005.8 1212.75 L2005.21 1212.75 L2004.62 1212.75 L2004.04 1212.75 L2003.45 1212.75 L2002.86 1212.75 L2002.28 1212.75 L2001.69 1212.75 L2001.11 1212.75 L2000.52 1212.75 L1999.93 1212.75 L1999.35 1212.75 L1998.76 1212.75 L1998.17 1212.75 L1997.59 1212.75 L1997 1212.75 L1996.41 1212.75 L1995.83 1212.75 L1995.24 1212.75 L1994.65 1212.75 L1994.07 1212.75 L1993.48 1212.75 L1992.9 1212.75 L1992.31 1212.75 L1991.72 1212.75 L1991.14 1212.75 L1990.55 1212.75 L1989.96 1212.75 L1989.38 1212.75 L1988.79 1212.75 L1988.2 1212.75 L1987.62 1212.75 L1987.03 1212.75 L1986.45 1212.75 L1985.86 1212.75 L1985.27 1212.75 L1984.69 1212.75 L1984.1 1212.75 L1983.51 1212.75 L1982.93 1212.75 L1982.34 1212.75 L1981.75 1212.75 L1981.17 1212.75 L1980.58 1212.75 L1979.99 1212.75 L1979.41 1212.75 L1978.82 1212.75 L1978.24 1212.75 L1977.65 1212.75 L1977.06 1212.75 L1976.48 1212.75 L1975.89 1212.75 L1975.3 1212.75 L1974.72 1212.75 L1974.13 1212.75 L1973.54 1212.75 L1972.96 1212.75 L1972.37 1212.75 L1971.78 1212.75 L1971.2 1212.75 L1970.61 1212.75 L1970.03 1212.75 L1969.44 1212.75 L1968.85 1212.75 L1968.27 1212.75 L1967.68 1212.75 L1967.09 1212.75 L1966.51 1212.75 L1965.92 1212.75 L1965.33 1212.75 L1964.75 1212.75 L1964.16 1212.75 L1963.58 1212.75 L1962.99 1212.75 L1962.4 1212.75 L1961.82 1212.75 L1961.23 1212.75 L1960.64 1212.75 L1960.06 1212.75 L1959.47 1212.75 L1958.88 1212.75 L1958.3 1212.75 L1957.71 1212.75 L1957.12 1212.75 L1956.54 1212.75 L1955.95 1212.75 L1955.37 1212.75 L1954.78 1212.75 L1954.19 1212.75 L1953.61 1212.75 L1953.02 1212.75 L1952.43 1212.75 L1951.85 1212.75 L1951.26 1212.75 L1950.67 1212.75 L1950.09 1212.75 L1949.5 1212.75 L1948.91 1212.75 L1948.33 1212.75 L1947.74 1212.75 L1947.16 1212.75 L1946.57 1212.75 L1945.98 1212.75 L1945.4 1212.75 L1944.81 1212.75 L1944.22 1212.75 L1943.64 1212.75 L1943.05 1212.75 L1942.46 1212.75 L1941.88 1212.75 L1941.29 1212.75 L1940.71 1212.75 L1940.12 1212.75 L1939.53 1212.75 L1938.95 1212.75 L1938.36 1212.75 L1937.77 1212.75 L1937.19 1212.75 L1936.6 1212.75 L1936.01 1212.75 L1935.43 1212.75 L1934.84 1212.75 L1934.25 1212.75 L1933.67 1212.75 L1933.08 1212.75 L1932.5 1212.75 L1931.91 1212.75 L1931.32 1212.75 L1930.74 1212.75 L1930.15 1212.75 L1929.56 1212.75 L1928.98 1212.75 L1928.39 1212.75 L1927.8 1212.75 L1927.22 1212.75 L1926.63 1212.75 L1926.04 1212.75 L1925.46 1212.75 L1924.87 1212.75 L1924.29 1212.75 L1923.7 1212.75 L1923.11 1212.75 L1922.53 1212.75 L1921.94 1212.75 L1921.35 1212.75 L1920.77 1212.75 L1920.18 1212.75 L1919.59 1212.75 L1919.01 1212.75 L1918.42 1212.75 L1917.83 1212.75 L1917.25 1212.75 L1916.66 1212.75 L1916.08 1212.75 L1915.49 1212.75 L1914.9 1212.75 L1914.32 1212.75 L1913.73 1212.75 L1913.14 1212.75 L1912.56 1212.75 L1911.97 1212.75 L1911.38 1212.75 L1910.8 1212.75 L1910.21 1212.75 L1909.63 1212.75 L1909.04 1212.75 L1908.45 1212.75 L1907.87 1212.75 L1907.28 1212.75 L1906.69 1212.75 L1906.11 1212.75 L1905.52 1212.75 L1904.93 1212.75 L1904.35 1212.75 L1903.76 1212.75 L1903.17 1212.75 L1902.59 1212.75 L1902 1212.75 L1901.42 1212.75 L1900.83 1212.75 L1900.24 1212.75 L1899.66 1212.75 L1899.07 1212.75 L1898.48 1212.75 L1897.9 1212.75 L1897.31 1212.75 L1896.72 1212.75 L1896.14 1212.75 L1895.55 1212.75 L1894.96 1212.75 L1894.38 1212.75 L1893.79 1212.75 L1893.21 1212.75 L1892.62 1212.75 L1892.03 1212.75 L1891.45 1212.75 L1890.86 1212.75 L1890.27 1212.75 L1889.69 1212.75 L1889.1 1212.75 L1888.51 1212.75 L1887.93 1212.75 L1887.34 1212.75 L1886.76 1212.75 L1886.17 1212.75 L1885.58 1212.75 L1885 1212.75 L1884.41 1212.75 L1883.82 1212.75 L1883.24 1212.75 L1882.65 1212.75 L1882.06 1212.75 L1881.48 1212.75 L1880.89 1212.75 L1880.3 1212.75 L1879.72 1212.75 L1879.13 1212.75 L1878.55 1212.75 L1877.96 1212.75 L1877.37 1212.75 L1876.79 1212.75 L1876.2 1212.75 L1875.61 1212.75 L1875.03 1212.75 L1874.44 1212.75 L1873.85 1212.75 L1873.27 1212.75 L1872.68 1212.75 L1872.09 1212.75 L1871.51 1212.75 L1870.92 1212.75 L1870.34 1212.75 L1869.75 1212.75 L1869.16 1212.75 L1868.58 1212.75 L1867.99 1212.75 L1867.4 1212.75 L1866.82 1212.75 L1866.23 1212.75 L1865.64 1212.75 L1865.06 1212.75 L1864.47 1212.75 L1863.88 1212.75 L1863.3 1212.75 L1862.71 1212.75 L1862.13 1212.75 L1861.54 1212.75 L1860.95 1212.75 L1860.37 1212.75 L1859.78 1212.75 L1859.19 1212.75 L1858.61 1212.75 L1858.02 1212.75 L1857.43 1212.75 L1856.85 1212.75 L1856.26 1212.75 L1855.68 1212.75 L1855.09 1212.75 L1854.5 1212.75 L1853.92 1212.75 L1853.33 1212.75 L1852.74 1212.75 L1852.16 1212.75 L1851.57 1212.75 L1850.98 1212.75 L1850.4 1212.75 L1849.81 1212.75 L1849.22 1212.75 L1848.64 1212.75 L1848.05 1212.75 L1847.47 1212.75 L1846.88 1212.75 L1846.29 1212.75 L1845.71 1212.75 L1845.12 1212.75 L1844.53 1212.75 L1843.95 1212.75 L1843.36 1212.75 L1842.77 1212.75 L1842.19 1212.75 L1841.6 1212.75 L1841.01 1212.75 L1840.43 1212.75 L1839.84 1212.75 L1839.26 1212.75 L1838.67 1212.75 L1838.08 1212.75 L1837.5 1212.75 L1836.91 1212.75 L1836.32 1212.75 L1835.74 1212.75 L1835.15 1212.75 L1834.56 1212.75 L1833.98 1212.75 L1833.39 1212.75 L1832.81 1212.75 L1832.22 1212.75 L1831.63 1212.75 L1831.05 1212.75 L1830.46 1212.75 L1829.87 1212.75 L1829.29 1212.75 L1828.7 1212.75 L1828.11 1212.75 L1827.53 1212.75 L1826.94 1212.75 L1826.35 1212.75 L1825.77 1212.75 L1825.18 1212.75 L1824.6 1212.75 L1824.01 1212.75 L1823.42 1212.75 L1822.84 1212.75 L1822.25 1212.75 L1821.66 1212.75 L1821.08 1212.75 L1820.49 1212.75 L1819.9 1212.75 L1819.32 1212.75 L1818.73 1212.75 L1818.14 1212.75 L1817.56 1212.75 L1816.97 1212.75 L1816.39 1212.75 L1815.8 1212.75 L1815.21 1212.75 L1814.63 1212.75 L1814.04 1212.75 L1813.45 1212.75 L1812.87 1212.75 L1812.28 1212.75 L1811.69 1212.75 L1811.11 1212.75 L1810.52 1212.75 L1809.94 1212.75 L1809.35 1212.75 L1808.76 1212.75 L1808.18 1212.75 L1807.59 1212.75 L1807 1212.75 L1806.42 1212.75 L1805.83 1212.75 L1805.24 1212.75 L1804.66 1212.75 L1804.07 1212.75 L1803.48 1212.75 L1802.9 1212.75 L1802.31 1212.75 L1801.73 1212.75 L1801.14 1212.75 L1800.55 1212.75 L1799.97 1212.75 L1799.38 1212.75 L1798.79 1212.75 L1798.21 1212.75 L1797.62 1212.75 L1797.03 1212.75 L1796.45 1212.75 L1795.86 1212.75 L1795.27 1212.75 L1794.69 1212.75 L1794.1 1212.75 L1793.52 1212.75 L1792.93 1212.75 L1792.34 1212.75 L1791.76 1212.75 L1791.17 1212.75 L1790.58 1212.75 L1790 1212.75 L1789.41 1212.75 L1788.82 1212.75 L1788.24 1212.75 L1787.65 1212.75 L1787.06 1212.75 L1786.48 1212.75 L1785.89 1212.75 L1785.31 1212.75 L1784.72 1212.75 L1784.13 1212.75 L1783.55 1212.75 L1782.96 1212.75 L1782.37 1212.75 L1781.79 1212.75 L1781.2 1212.75 L1780.61 1212.75 L1780.03 1212.75 L1779.44 1212.75 L1778.86 1212.75 L1778.27 1212.75 L1777.68 1212.75 L1777.1 1212.75 L1776.51 1212.75 L1775.92 1212.75 L1775.34 1212.75 L1774.75 1212.75 L1774.16 1212.75 L1773.58 1212.75 L1772.99 1212.75 L1772.4 1212.75 L1771.82 1212.75 L1771.23 1212.75 L1770.65 1212.75 L1770.06 1212.75 L1769.47 1212.75 L1768.89 1212.75 L1768.3 1212.75 L1767.71 1212.75 L1767.13 1212.75 L1766.54 1212.75 L1765.95 1212.75 L1765.37 1212.75 L1764.78 1212.75 L1764.19 1212.75 L1763.61 1212.75 L1763.02 1212.75 L1762.44 1212.75 L1761.85 1212.75 L1761.26 1212.75 L1760.68 1212.75 L1760.09 1212.75 L1759.5 1212.75 L1758.92 1212.75 L1758.33 1212.75 L1757.74 1212.75 L1757.16 1212.75 L1756.57 1212.75 L1755.99 1212.75 L1755.4 1212.75 L1754.81 1212.75 L1754.23 1212.75 L1753.64 1212.75 L1753.05 1212.75 L1752.47 1212.75 L1751.88 1212.75 L1751.29 1212.75 L1750.71 1212.75 L1750.12 1212.75 L1749.53 1212.75 L1748.95 1212.75 L1748.36 1212.75 L1747.78 1212.75 L1747.19 1212.75 L1746.6 1212.75 L1746.02 1212.75 L1745.43 1212.75 L1744.84 1212.75 L1744.26 1212.75 L1743.67 1212.75 L1743.08 1212.75 L1742.5 1212.75 L1741.91 1212.75 L1741.32 1212.75 L1740.74 1212.75 L1740.15 1212.75 L1739.57 1212.75 L1738.98 1212.75 L1738.39 1212.75 L1737.81 1212.75 L1737.22 1212.75 L1736.63 1212.75 L1736.05 1212.75 L1735.46 1212.75 L1734.87 1212.75 L1734.29 1212.75 L1733.7 1212.75 L1733.11 1212.75 L1732.53 1212.75 L1731.94 1212.75 L1731.36 1212.75 L1730.77 1212.75 L1730.18 1212.75 L1729.6 1212.75 L1729.01 1212.75 L1728.42 1212.75 L1727.84 1212.75 L1727.25 1212.75 L1726.66 1212.75 L1726.08 1212.75 L1725.49 1212.75 L1724.91 1212.75 L1724.32 1212.75 L1723.73 1212.75 L1723.15 1212.75 L1722.56 1212.75 L1721.97 1212.75 L1721.39 1212.75 L1720.8 1212.75 L1720.21 1212.75 L1719.63 1212.75 L1719.04 1212.75 L1718.45 1212.75 L1717.87 1212.75 L1717.28 1212.75 L1716.7 1212.75 L1716.11 1212.75 L1715.52 1212.75 L1714.94 1212.75 L1714.35 1212.75 L1713.76 1212.75 L1713.18 1212.75 L1712.59 1212.75 L1712 1212.75 L1711.42 1212.75 L1710.83 1212.75 L1710.24 1212.75 L1709.66 1212.75 L1709.07 1212.75 L1708.49 1212.75 L1707.9 1212.75 L1707.31 1212.75 L1706.73 1212.75 L1706.14 1212.75 L1705.55 1212.75 L1704.97 1212.75 L1704.38 1212.75 L1703.79 1212.75 L1703.21 1212.75 L1702.62 1212.75 L1702.04 1212.75 L1701.45 1212.75 L1700.86 1212.75 L1700.28 1212.75 L1699.69 1212.75 L1699.1 1212.75 L1698.52 1212.75 L1697.93 1212.75 L1697.34 1212.75 L1696.76 1212.75 L1696.17 1212.75 L1695.58 1212.75 L1695 1212.75 L1694.41 1212.75 L1693.83 1212.75 L1693.24 1212.75 L1692.65 1212.75 L1692.07 1212.75 L1691.48 1212.75 L1690.89 1212.75 L1690.31 1212.75 L1689.72 1212.75 L1689.13 1212.75 L1688.55 1212.75 L1687.96 1212.75 L1687.37 1212.75 L1686.79 1212.75 L1686.2 1212.75 L1685.62 1212.75 L1685.03 1212.75 L1684.44 1212.75 L1683.86 1212.75 L1683.27 1212.75 L1682.68 1212.75 L1682.1 1212.75 L1681.51 1212.75 L1680.92 1212.75 L1680.34 1212.75 L1679.75 1212.75 L1679.17 1212.75 L1678.58 1212.75 L1677.99 1212.75 L1677.41 1212.75 L1676.82 1212.75 L1676.23 1212.75 L1675.65 1212.75 L1675.06 1212.75 L1674.47 1212.75 L1673.89 1212.75 L1673.3 1212.75 L1672.71 1212.75 L1672.13 1212.75 L1671.54 1212.75 L1670.96 1212.75 L1670.37 1212.75 L1669.78 1212.75 L1669.2 1212.75 L1668.61 1212.75 L1668.02 1212.75 L1667.44 1212.75 L1666.85 1212.75 L1666.26 1212.75 L1665.68 1212.75 L1665.09 1212.75 L1664.5 1212.75 L1663.92 1212.75 L1663.33 1212.75 L1662.75 1212.75 L1662.16 1212.75 L1661.57 1212.75 L1660.99 1212.75 L1660.4 1212.75 L1659.81 1212.75 L1659.23 1212.75 L1658.64 1212.75 L1658.05 1212.75 L1657.47 1212.75 L1656.88 1212.75 L1656.29 1212.75 L1655.71 1212.75 L1655.12 1212.75 L1654.54 1212.75 L1653.95 1212.75 L1653.36 1212.75 L1652.78 1212.75 L1652.19 1212.75 L1651.6 1212.75 L1651.02 1212.75 L1650.43 1212.75 L1649.84 1212.75 L1649.26 1212.75 L1648.67 1212.75 L1648.09 1212.75 L1647.5 1212.75 L1646.91 1212.75 L1646.33 1212.75 L1645.74 1212.75 L1645.15 1212.75 L1644.57 1212.75 L1643.98 1212.75 L1643.39 1212.75 L1642.81 1212.75 L1642.22 1212.75 L1641.63 1212.75 L1641.05 1212.75 L1640.46 1212.75 L1639.88 1212.75 L1639.29 1212.75 L1638.7 1212.75 L1638.12 1212.75 L1637.53 1212.75 L1636.94 1212.75 L1636.36 1212.75 L1635.77 1212.75 L1635.18 1212.75 L1634.6 1212.75 L1634.01 1212.75 L1633.42 1212.75 L1632.84 1212.75 L1632.25 1212.75 L1631.67 1212.75 L1631.08 1212.75 L1630.49 1212.75 L1629.91 1212.75 L1629.32 1212.75 L1628.73 1212.75 L1628.15 1212.75 L1627.56 1212.75 L1626.97 1212.75 L1626.39 1212.75 L1625.8 1212.75 L1625.22 1212.75 L1624.63 1212.75 L1624.04 1212.75 L1623.46 1212.75 L1622.87 1212.75 L1622.28 1212.75 L1621.7 1212.75 L1621.11 1212.75 L1620.52 1212.75 L1619.94 1212.75 L1619.35 1212.75 L1618.76 1212.75 L1618.18 1212.75 L1617.59 1212.75 L1617.01 1212.75 L1616.42 1212.75 L1615.83 1212.75 L1615.25 1212.75 L1614.66 1212.75 L1614.07 1212.75 L1613.49 1212.75 L1612.9 1212.75 L1612.31 1212.75 L1611.73 1212.75 L1611.14 1212.75 L1610.55 1212.75 L1609.97 1212.75 L1609.38 1212.75 L1608.8 1212.75 L1608.21 1212.75 L1607.62 1212.75 L1607.04 1212.75 L1606.45 1212.75 L1605.86 1212.75 L1605.28 1212.75 L1604.69 1212.75 L1604.1 1212.75 L1603.52 1212.75 L1602.93 1212.75 L1602.34 1212.75 L1601.76 1212.75 L1601.17 1212.75 L1600.59 1212.75 L1600 1212.75 L1599.41 1212.75 L1598.83 1212.75 L1598.24 1212.75 L1597.65 1212.75 L1597.07 1212.75 L1596.48 1212.75 L1595.89 1212.75 L1595.31 1212.75 L1594.72 1212.75 L1594.14 1212.75 L1593.55 1212.75 L1592.96 1212.75 L1592.38 1212.75 L1591.79 1212.75 L1591.2 1212.75 L1590.62 1212.75 L1590.03 1212.75 L1589.44 1212.75 L1588.86 1212.75 L1588.27 1212.75 L1587.68 1212.75 L1587.1 1212.75 L1586.51 1212.75 L1585.93 1212.75 L1585.34 1212.75 L1584.75 1212.75 L1584.17 1212.75 L1583.58 1212.75 L1582.99 1212.75 L1582.41 1212.75 L1581.82 1212.75 L1581.23 1212.75 L1580.65 1212.75 L1580.06 1212.75 L1579.47 1212.75 L1578.89 1212.75 L1578.3 1212.75 L1577.72 1212.75 L1577.13 1212.75 L1576.54 1212.75 L1575.96 1212.75 L1575.37 1212.75 L1574.78 1212.75 L1574.2 1212.75 L1573.61 1212.75 L1573.02 1212.75 L1572.44 1212.75 L1571.85 1212.75 L1571.27 1212.75 L1570.68 1212.75 L1570.09 1212.75 L1569.51 1212.75 L1568.92 1212.75 L1568.33 1212.75 L1567.75 1212.75 L1567.16 1212.75 L1566.57 1212.75 L1565.99 1212.75 L1565.4 1212.75 L1564.81 1212.75 L1564.23 1212.75 L1563.64 1212.75 L1563.06 1212.75 L1562.47 1212.75 L1561.88 1212.75 L1561.3 1212.75 L1560.71 1212.75 L1560.12 1212.75 L1559.54 1212.75 L1558.95 1212.75 L1558.36 1212.75 L1557.78 1212.75 L1557.19 1212.75 L1556.6 1212.75 L1556.02 1212.75 L1555.43 1212.75 L1554.85 1212.75 L1554.26 1212.75 L1553.67 1212.75 L1553.09 1212.75 L1552.5 1212.75 L1551.91 1212.75 L1551.33 1212.75 L1550.74 1212.75 L1550.15 1212.75 L1549.57 1212.75 L1548.98 1212.75 L1548.4 1212.75 L1547.81 1212.75 L1547.22 1212.75 L1546.64 1212.75 L1546.05 1212.75 L1545.46 1212.75 L1544.88 1212.75 L1544.29 1212.75 L1543.7 1212.75 L1543.12 1212.75 L1542.53 1212.75 L1541.94 1212.75 L1541.36 1212.75 L1540.77 1212.75 L1540.19 1212.75 L1539.6 1212.75 L1539.01 1212.75 L1538.43 1212.75 L1537.84 1212.75 L1537.25 1212.75 L1536.67 1212.75 L1536.08 1212.75 L1535.49 1212.75 L1534.91 1212.75 L1534.32 1212.75 L1533.73 1212.75 L1533.15 1212.75 L1532.56 1212.75 L1531.98 1212.75 L1531.39 1212.75 L1530.8 1212.75 L1530.22 1212.75 L1529.63 1212.75 L1529.04 1212.75 L1528.46 1212.75 L1527.87 1212.75 L1527.28 1212.75 L1526.7 1212.75 L1526.11 1212.75 L1525.52 1212.75 L1524.94 1212.75 L1524.35 1212.75 L1523.77 1212.75 L1523.18 1212.75 L1522.59 1212.75 L1522.01 1212.75 L1521.42 1212.75 L1520.83 1212.75 L1520.25 1212.75 L1519.66 1212.75 L1519.07 1212.75 L1518.49 1212.75 L1517.9 1212.75 L1517.32 1212.75 L1516.73 1212.75 L1516.14 1212.75 L1515.56 1212.75 L1514.97 1212.75 L1514.38 1212.75 L1513.8 1212.75 L1513.21 1212.75 L1512.62 1212.75 L1512.04 1212.75 L1511.45 1212.75 L1510.86 1212.75 L1510.28 1212.75 L1509.69 1212.75 L1509.11 1212.75 L1508.52 1212.75 L1507.93 1212.75 L1507.35 1212.75 L1506.76 1212.75 L1506.17 1212.75 L1505.59 1212.75 L1505 1212.75 L1504.41 1212.75 L1503.83 1212.75 L1503.24 1212.75 L1502.65 1212.75 L1502.07 1212.75 L1501.48 1212.75 L1500.9 1212.75 L1500.31 1212.75 L1499.72 1212.75 L1499.14 1212.75 L1498.55 1212.75 L1497.96 1212.75 L1497.38 1212.75 L1496.79 1212.75 L1496.2 1212.75 L1495.62 1212.75 L1495.03 1212.75 L1494.45 1212.75 L1493.86 1212.75 L1493.27 1212.75 L1492.69 1212.75 L1492.1 1212.75 L1491.51 1212.75 L1490.93 1212.75 L1490.34 1212.75 L1489.75 1212.75 L1489.17 1212.75 L1488.58 1212.75 L1487.99 1212.75 L1487.41 1212.75 L1486.82 1212.75 L1486.24 1212.75 L1485.65 1212.75 L1485.06 1212.75 L1484.48 1212.75 L1483.89 1212.75 L1483.3 1212.75 L1482.72 1212.75 L1482.13 1212.75 L1481.54 1212.75 L1480.96 1212.75 L1480.37 1212.75 L1479.78 1212.75 L1479.2 1212.75 L1478.61 1212.75 L1478.03 1212.75 L1477.44 1212.75 L1476.85 1212.75 L1476.27 1212.75 L1475.68 1212.75 L1475.09 1212.75 L1474.51 1212.75 L1473.92 1212.75 L1473.33 1212.75 L1472.75 1212.75 L1472.16 1212.75 L1471.57 1212.75 L1470.99 1212.75 L1470.4 1212.75 L1469.82 1212.75 L1469.23 1212.75 L1468.64 1212.75 L1468.06 1212.75 L1467.47 1212.75 L1466.88 1212.75 L1466.3 1212.75 L1465.71 1212.75 L1465.12 1212.75 L1464.54 1212.75 L1463.95 1212.75 L1463.37 1212.75 L1462.78 1212.75 L1462.19 1212.75 L1461.61 1212.75 L1461.02 1212.75 L1460.43 1212.75 L1459.85 1212.75 L1459.26 1212.75 L1458.67 1212.75 L1458.09 1212.75 L1457.5 1212.75 L1456.91 1212.75 L1456.33 1212.75 L1455.74 1212.75 L1455.16 1212.75 L1454.57 1212.75 L1453.98 1212.75 L1453.4 1212.75 L1452.81 1212.75 L1452.22 1212.75 L1451.64 1212.75 L1451.05 1212.75 L1450.46 1212.75 L1449.88 1212.75 L1449.29 1212.75 L1448.7 1212.75 L1448.12 1212.75 L1447.53 1212.75 L1446.95 1212.75 L1446.36 1212.75 L1445.77 1212.75 L1445.19 1212.75 L1444.6 1212.75 L1444.01 1212.75 L1443.43 1212.75 L1442.84 1212.75 L1442.25 1212.75 L1441.67 1212.75 L1441.08 1212.75 L1440.5 1212.75 L1439.91 1212.75 L1439.32 1212.75 L1438.74 1212.75 L1438.15 1212.75 L1437.56 1212.75 L1436.98 1212.75 L1436.39 1212.75 L1435.8 1212.75 L1435.22 1212.75 L1434.63 1212.75 L1434.04 1212.75 L1433.46 1212.75 L1432.87 1212.75 L1432.29 1212.75 L1431.7 1212.75 L1431.11 1212.75 L1430.53 1212.75 L1429.94 1212.75 L1429.35 1212.75 L1428.77 1212.75 L1428.18 1212.75 L1427.59 1212.75 L1427.01 1212.75 L1426.42 1212.75 L1425.83 1212.75 L1425.25 1212.75 L1424.66 1212.75 L1424.08 1212.75 L1423.49 1212.75 L1422.9 1212.75 L1422.32 1212.75 L1421.73 1212.75 L1421.14 1212.75 L1420.56 1212.75 L1419.97 1212.75 L1419.38 1212.75 L1418.8 1212.75 L1418.21 1212.75 L1417.63 1212.75 L1417.04 1212.75 L1416.45 1212.75 L1415.87 1212.75 L1415.28 1212.75 L1414.69 1212.75 L1414.11 1212.75 L1413.52 1212.75 L1412.93 1212.75 L1412.35 1212.75 L1411.76 1212.75 L1411.17 1212.75 L1410.59 1212.75 L1410 1212.75 L1409.42 1212.75 L1408.83 1212.75 L1408.24 1212.75 L1407.66 1212.75 L1407.07 1212.75 L1406.48 1212.75 L1405.9 1212.75 L1405.31 1212.75 L1404.72 1212.75 L1404.14 1212.75 L1403.55 1212.75 L1402.96 1212.75 L1402.38 1212.75 L1401.79 1212.75 L1401.21 1212.75 L1400.62 1212.75 L1400.03 1212.75 L1399.45 1212.75 L1398.86 1212.75 L1398.27 1212.75 L1397.69 1212.75 L1397.1 1212.75 L1396.51 1212.75 L1395.93 1212.75 L1395.34 1212.75 L1394.75 1212.75 L1394.17 1212.75 L1393.58 1212.75 L1393 1212.75 L1392.41 1212.75 L1391.82 1212.75 L1391.24 1212.75 L1390.65 1212.75 L1390.06 1212.75 L1389.48 1212.75 L1388.89 1212.75 L1388.3 1212.75 L1387.72 1212.75 L1387.13 1212.75 L1386.55 1212.75 L1385.96 1212.75 L1385.37 1212.75 L1384.79 1212.75 L1384.2 1212.75 L1383.61 1212.75 L1383.03 1212.75 L1382.44 1212.75 L1381.85 1212.75 L1381.27 1212.75 L1380.68 1212.75 L1380.09 1212.75 L1379.51 1212.75 L1378.92 1212.75 L1378.34 1212.75 L1377.75 1212.75 L1377.16 1212.75 L1376.58 1212.75 L1375.99 1212.75 L1375.4 1212.75 L1374.82 1212.75 L1374.23 1212.75 L1373.64 1212.75 L1373.06 1212.75 L1372.47 1212.75 L1371.88 1212.75 L1371.3 1212.75 L1370.71 1212.75 L1370.13 1212.75 L1369.54 1212.75 L1368.95 1212.75 L1368.37 1212.75 L1367.78 1212.75 L1367.19 1212.75 L1366.61 1212.75 L1366.02 1212.75 L1365.43 1212.75 L1364.85 1212.75 L1364.26 1212.75 L1363.68 1212.75 L1363.09 1212.75 L1362.5 1212.75 L1361.92 1212.75 L1361.33 1212.75 L1360.74 1212.75 L1360.16 1212.75 L1359.57 1212.75 L1358.98 1212.75 L1358.4 1212.75 L1357.81 1212.75 L1357.22 1212.75 L1356.64 1212.75 L1356.05 1212.75 L1355.47 1212.75 L1354.88 1212.75 L1354.29 1212.75 L1353.71 1212.75 L1353.12 1212.75 L1352.53 1212.75 L1351.95 1212.75 L1351.36 1212.75 L1350.77 1212.75 L1350.19 1212.75 L1349.6 1212.75 L1349.01 1212.75 L1348.43 1212.75 L1347.84 1212.75 L1347.26 1212.75 L1346.67 1212.75 L1346.08 1212.75 L1345.5 1212.75 L1344.91 1212.75 L1344.32 1212.75 L1343.74 1212.75 L1343.15 1212.75 L1342.56 1212.75 L1341.98 1212.75 L1341.39 1212.75 L1340.8 1212.75 L1340.22 1212.75 L1339.63 1212.75 L1339.05 1212.75 L1338.46 1212.75 L1337.87 1212.75 L1337.29 1212.75 L1336.7 1212.75 L1336.11 1212.75 L1335.53 1212.75 L1334.94 1212.75 L1334.35 1212.75 L1333.77 1212.75 L1333.18 1212.75 L1332.6 1212.75 L1332.01 1212.75 L1331.42 1212.75 L1330.84 1212.75 L1330.25 1212.75 L1329.66 1212.75 L1329.08 1212.75 L1328.49 1212.75 L1327.9 1212.75 L1327.32 1212.75 L1326.73 1212.75 L1326.14 1212.75 L1325.56 1212.75 L1324.97 1212.75 L1324.39 1212.75 L1323.8 1212.75 L1323.21 1212.75 L1322.63 1212.75 L1322.04 1212.75 L1321.45 1212.75 L1320.87 1212.75 L1320.28 1212.75 L1319.69 1212.75 L1319.11 1212.75 L1318.52 1212.75 L1317.93 1212.75 L1317.35 1212.75 L1316.76 1212.75 L1316.18 1212.75 L1315.59 1212.75 L1315 1212.75 L1314.42 1212.75 L1313.83 1212.75 L1313.24 1212.75 L1312.66 1212.75 L1312.07 1212.75 L1311.48 1212.75 L1310.9 1212.75 L1310.31 1212.75 L1309.73 1212.75 L1309.14 1212.75 L1308.55 1212.75 L1307.97 1212.75 L1307.38 1212.75 L1306.79 1212.75 L1306.21 1212.75 L1305.62 1212.75 L1305.03 1212.75 L1304.45 1212.75 L1303.86 1212.75 L1303.27 1212.75 L1302.69 1212.75 L1302.1 1212.75 L1301.52 1212.75 L1300.93 1212.75 L1300.34 1212.75 L1299.76 1212.75 L1299.17 1212.75 L1298.58 1212.75 L1298 1212.75 L1297.41 1212.75 L1296.82 1212.75 L1296.24 1212.75 L1295.65 1212.75 L1295.06 1212.75 L1294.48 1212.75 L1293.89 1212.75 L1293.31 1212.75 L1292.72 1212.75 L1292.13 1212.75 L1291.55 1212.75 L1290.96 1212.75 L1290.37 1212.75 L1289.79 1212.75 L1289.2 1212.75 L1288.61 1212.75 L1288.03 1212.75 L1287.44 1212.75 L1286.86 1212.75 L1286.27 1212.75 L1285.68 1212.75 L1285.1 1212.75 L1284.51 1212.75 L1283.92 1212.75 L1283.34 1212.75 L1282.75 1212.75 L1282.16 1212.75 L1281.58 1212.75 L1280.99 1212.75 L1280.4 1212.75 L1279.82 1212.75 L1279.23 1212.75 L1278.65 1212.75 L1278.06 1212.75 L1277.47 1212.75 L1276.89 1212.75 L1276.3 1212.75 L1275.71 1212.75 L1275.13 1212.75 L1274.54 1212.75 L1273.95 1212.75 L1273.37 1212.75 L1272.78 1212.75 L1272.19 1212.75 L1271.61 1212.75 L1271.02 1212.75 L1270.44 1212.75 L1269.85 1212.75 L1269.26 1212.75 L1268.68 1212.75 L1268.09 1212.75 L1267.5 1212.75 L1266.92 1212.75 L1266.33 1212.75 L1265.74 1212.75 L1265.16 1212.75 L1264.57 1212.75 L1263.98 1212.75 L1263.4 1212.75 L1262.81 1212.75 L1262.23 1212.75 L1261.64 1212.75 L1261.05 1212.75 L1260.47 1212.75 L1259.88 1212.75 L1259.29 1212.75 L1258.71 1212.75 L1258.12 1212.75 L1257.53 1212.75 L1256.95 1212.75 L1256.36 1212.75 L1255.78 1212.75 L1255.19 1212.75 L1254.6 1212.75 L1254.02 1212.75 L1253.43 1212.75 L1252.84 1212.75 L1252.26 1212.75 L1251.67 1212.75 L1251.08 1212.75 L1250.5 1212.75 L1249.91 1212.75 L1249.32 1212.75 L1248.74 1212.75 L1248.15 1212.75 L1247.57 1212.75 L1246.98 1212.75 L1246.39 1212.75 L1245.81 1212.75 L1245.22 1212.75 L1244.63 1212.75 L1244.05 1212.75 L1243.46 1212.75 L1242.87 1212.75 L1242.29 1212.75 L1241.7 1212.75 L1241.11 1212.75 L1240.53 1212.75 L1239.94 1212.75 L1239.36 1212.75 L1238.77 1212.75 L1238.18 1212.75 L1237.6 1212.75 L1237.01 1212.75 L1236.42 1212.75 L1235.84 1212.75 L1235.25 1212.75 L1234.66 1212.75 L1234.08 1212.75 L1233.49 1212.75 L1232.91 1212.75 L1232.32 1212.75 L1231.73 1212.75 L1231.15 1212.75 L1230.56 1212.75 L1229.97 1212.75 L1229.39 1212.75 L1228.8 1212.75 L1228.21 1212.75 L1227.63 1212.75 L1227.04 1212.75 L1226.45 1212.75 L1225.87 1212.75 L1225.28 1212.75 L1224.7 1212.75 L1224.11 1212.75 L1223.52 1212.75 L1222.94 1212.75 L1222.35 1212.75 L1221.76 1212.75 L1221.18 1212.75 L1220.59 1212.75 L1220 1212.75 L1219.42 1212.75 L1218.83 1212.75 L1218.24 1212.75 L1217.66 1212.75 L1217.07 1212.75 L1216.49 1212.75 L1215.9 1212.75 L1215.31 1212.75 L1214.73 1212.75 L1214.14 1212.75 L1213.55 1212.75 L1212.97 1212.75 L1212.38 1212.75 L1211.79 1212.75 L1211.21 1212.75 L1210.62 1212.75 L1210.03 1212.75 L1209.45 1212.75 L1208.86 1212.75 L1208.28 1212.75 L1207.69 1212.75 L1207.1 1212.75 L1206.52 1212.75 L1205.93 1212.75 L1205.34 1212.75 L1204.76 1212.75 L1204.17 1212.75 L1203.58 1212.75 L1203 1212.75 L1202.41 1212.75 L1201.83 1212.75 L1201.24 1212.75 L1200.65 1212.75 L1200.07 1212.75 L1199.48 1212.75 L1198.89 1212.75 L1198.31 1212.75 L1197.72 1212.75 L1197.13 1212.75 L1196.55 1212.75 L1195.96 1212.75 L1195.37 1212.75 L1194.79 1212.75 L1194.2 1212.75 L1193.62 1212.75 L1193.03 1212.75 L1192.44 1212.75 L1191.86 1212.75 L1191.27 1212.75 L1190.68 1212.75 L1190.1 1212.75 L1189.51 1212.75 L1188.92 1212.75 L1188.34 1212.75 L1187.75 1212.75 L1187.16 1212.75 L1186.58 1212.75 L1185.99 1212.75 L1185.41 1212.75 L1184.82 1212.75 L1184.23 1212.75 L1183.65 1212.75 L1183.06 1212.75 L1182.47 1212.75 L1181.89 1212.75 L1181.3 1212.75 L1180.71 1212.75 L1180.13 1212.75 L1179.54 1212.75 L1178.96 1212.75 L1178.37 1212.75 L1177.78 1212.75 L1177.2 1212.75 L1176.61 1212.75 L1176.02 1212.75 L1175.44 1212.75 L1174.85 1212.75 L1174.26 1212.75 L1173.68 1212.75 L1173.09 1212.75 L1172.5 1212.75 L1171.92 1212.75 L1171.33 1212.75 L1170.75 1212.75 L1170.16 1212.75 L1169.57 1212.75 L1168.99 1212.75 L1168.4 1212.75 L1167.81 1212.75 L1167.23 1212.75 L1166.64 1212.75 L1166.05 1212.75 L1165.47 1212.75 L1164.88 1212.75 L1164.29 1212.75 L1163.71 1212.75 L1163.12 1212.75 L1162.54 1212.75 L1161.95 1212.75 L1161.36 1212.75 L1160.78 1212.75 L1160.19 1212.75 L1159.6 1212.75 L1159.02 1212.75 L1158.43 1212.75 L1157.84 1212.75 L1157.26 1212.75 L1156.67 1212.75 L1156.09 1212.75 L1155.5 1212.75 L1154.91 1212.75 L1154.33 1212.75 L1153.74 1212.75 L1153.15 1212.75 L1152.57 1212.75 L1151.98 1212.75 L1151.39 1212.75 L1150.81 1212.75 L1150.22 1212.75 L1149.63 1212.75 L1149.05 1212.75 L1148.46 1212.75 L1147.88 1212.75 L1147.29 1212.75 L1146.7 1212.75 L1146.12 1212.75 L1145.53 1212.75 L1144.94 1212.75 L1144.36 1212.75 L1143.77 1212.75 L1143.18 1212.75 L1142.6 1212.75 L1142.01 1212.75 L1141.42 1212.75 L1140.84 1212.75 L1140.25 1212.75 L1139.67 1212.75 L1139.08 1212.75 L1138.49 1212.75 L1137.91 1212.75 L1137.32 1212.75 L1136.73 1212.75 L1136.15 1212.75 L1135.56 1212.75 L1134.97 1212.75 L1134.39 1212.75 L1133.8 1212.75 L1133.21 1212.75 L1132.63 1212.75 L1132.04 1212.75 L1131.46 1212.75 L1130.87 1212.75 L1130.28 1212.75 L1129.7 1212.75 L1129.11 1212.75 L1128.52 1212.75 L1127.94 1212.75 L1127.35 1212.75 L1126.76 1212.75 L1126.18 1212.75 L1125.59 1212.75 L1125.01 1212.75 L1124.42 1212.75 L1123.83 1212.75 L1123.25 1212.75 L1122.66 1212.75 L1122.07 1212.75 L1121.49 1212.75 L1120.9 1212.75 L1120.31 1212.75 L1119.73 1212.75 L1119.14 1212.75 L1118.55 1212.75 L1117.97 1212.75 L1117.38 1212.75 L1116.8 1212.75 L1116.21 1212.75 L1115.62 1212.75 L1115.04 1212.75 L1114.45 1212.75 L1113.86 1212.75 L1113.28 1212.75 L1112.69 1212.75 L1112.1 1212.75 L1111.52 1212.75 L1110.93 1212.75 L1110.34 1212.75 L1109.76 1212.75 L1109.17 1212.75 L1108.59 1212.75 L1108 1212.75 L1107.41 1212.75 L1106.83 1212.75 L1106.24 1212.75 L1105.65 1212.75 L1105.07 1212.75 L1104.48 1212.75 L1103.89 1212.75 L1103.31 1212.75 L1102.72 1212.75 L1102.14 1212.75 L1101.55 1212.75 L1100.96 1212.75 L1100.38 1212.75 L1099.79 1212.75 L1099.2 1212.75 L1098.62 1212.75 L1098.03 1212.75 L1097.44 1212.75 L1096.86 1212.75 L1096.27 1212.75 L1095.68 1212.75 L1095.1 1212.75 L1094.51 1212.75 L1093.93 1212.75 L1093.34 1212.75 L1092.75 1212.75 L1092.17 1212.75 L1091.58 1212.75 L1090.99 1212.75 L1090.41 1212.75 L1089.82 1212.75 L1089.23 1212.75 L1088.65 1212.75 L1088.06 1212.75 L1087.47 1212.75 L1086.89 1212.75 L1086.3 1212.75 L1085.72 1212.75 L1085.13 1212.75 L1084.54 1212.75 L1083.96 1212.75 L1083.37 1212.75 L1082.78 1212.75 L1082.2 1212.75 L1081.61 1212.75 L1081.02 1212.75 L1080.44 1212.75 L1079.85 1212.75 L1079.26 1212.75 L1078.68 1212.75 L1078.09 1212.75 L1077.51 1212.75 L1076.92 1212.75 L1076.33 1212.75 L1075.75 1212.75 L1075.16 1212.75 L1074.57 1212.75 L1073.99 1212.75 L1073.4 1212.75 L1072.81 1212.75 L1072.23 1212.75 L1071.64 1212.75 L1071.06 1212.75 L1070.47 1212.75 L1069.88 1212.75 L1069.3 1212.75 L1068.71 1212.75 L1068.12 1212.75 L1067.54 1212.75 L1066.95 1212.75 L1066.36 1212.75 L1065.78 1212.75 L1065.19 1212.75 L1064.6 1212.75 L1064.02 1212.75 L1063.43 1212.75 L1062.85 1212.75 L1062.26 1212.75 L1061.67 1212.75 L1061.09 1212.75 L1060.5 1212.75 L1059.91 1212.75 L1059.33 1212.75 L1058.74 1212.75 L1058.15 1212.75 L1057.57 1212.75 L1056.98 1212.75 L1056.39 1212.75 L1055.81 1212.75 L1055.22 1212.75 L1054.64 1212.75 L1054.05 1212.75 L1053.46 1212.75 L1052.88 1212.75 L1052.29 1212.75 L1051.7 1212.75 L1051.12 1212.75 L1050.53 1212.75 L1049.94 1212.75 L1049.36 1212.75 L1048.77 1212.75 L1048.19 1212.75 L1047.6 1212.75 L1047.01 1212.75 L1046.43 1212.75 L1045.84 1212.75 L1045.25 1212.75 L1044.67 1212.75 L1044.08 1212.75 L1043.49 1212.75 L1042.91 1212.75 L1042.32 1212.75 L1041.73 1212.75 L1041.15 1212.75 L1040.56 1212.75 L1039.98 1212.75 L1039.39 1212.75 L1038.8 1212.75 L1038.22 1212.75 L1037.63 1212.75 L1037.04 1212.75 L1036.46 1212.75 L1035.87 1212.75 L1035.28 1212.75 L1034.7 1212.75 L1034.11 1212.75 L1033.52 1212.75 L1032.94 1212.75 L1032.35 1212.75 L1031.77 1212.75 L1031.18 1212.75 L1030.59 1212.75 L1030.01 1212.75 L1029.42 1212.75 L1028.83 1212.75 L1028.25 1212.75 L1027.66 1212.75 L1027.07 1212.75 L1026.49 1212.75 L1025.9 1212.75 L1025.32 1212.75 L1024.73 1212.75 L1024.14 1212.75 L1023.56 1212.75 L1022.97 1212.75 L1022.38 1212.75 L1021.8 1212.75 L1021.21 1212.75 L1020.62 1212.75 L1020.04 1212.75 L1019.45 1212.75 L1018.86 1212.75 L1018.28 1212.75 L1017.69 1212.75 L1017.11 1212.75 L1016.52 1212.75 L1015.93 1212.75 L1015.35 1212.75 L1014.76 1212.75 L1014.17 1212.75 L1013.59 1212.75 L1013 1212.75 L1012.41 1212.75 L1011.83 1212.75 L1011.24 1212.75 L1010.65 1212.75 L1010.07 1212.75 L1009.48 1212.75 L1008.9 1212.75 L1008.31 1212.75 L1007.72 1212.75 L1007.14 1212.75 L1006.55 1212.75 L1005.96 1212.75 L1005.38 1212.75 L1004.79 1212.75 L1004.2 1212.75 L1003.62 1212.75 L1003.03 1212.75 L1002.44 1212.75 L1001.86 1212.75 L1001.27 1212.75 L1000.69 1212.75 L1000.1 1212.75 L999.513 1212.75 L998.926 1212.75 L998.34 1212.75 L997.754 1212.75 L997.167 1212.75 L996.581 1212.75 L995.994 1212.75 L995.408 1212.75 L994.822 1212.75 L994.235 1212.75 L993.649 1212.75 L993.062 1212.75 L992.476 1212.75 L991.889 1212.75 L991.303 1212.75 L990.717 1212.75 L990.13 1212.75 L989.544 1212.75 L988.957 1212.75 L988.371 1212.75 L987.785 1212.75 L987.198 1212.75 L986.612 1212.75 L986.025 1212.75  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.99 986.612,1212.99 987.198,1212.99 987.785,1212.99 988.371,1212.99 988.957,1212.99 989.544,1212.99 990.13,1212.99 990.717,1212.99 991.303,1212.99 991.889,1212.99 992.476,1212.99 993.062,1212.99 993.649,1212.99 994.235,1212.99 994.822,1212.99 995.408,1212.99 995.994,1212.99 996.581,1212.99 997.167,1212.99 997.754,1212.99 998.34,1212.99 998.926,1212.99 999.513,1212.99 1000.1,1212.99 1000.69,1212.99 1001.27,1212.99 1001.86,1212.99 1002.44,1212.99 1003.03,1212.99 1003.62,1212.99 1004.2,1212.99 1004.79,1212.99 1005.38,1212.99 1005.96,1212.99 1006.55,1212.99 1007.14,1212.99 1007.72,1212.99 1008.31,1212.99 1008.9,1212.99 1009.48,1212.99 1010.07,1212.99 1010.65,1212.99 1011.24,1212.99 1011.83,1212.99 1012.41,1212.99 1013,1212.99 1013.59,1212.99 1014.17,1212.99 1014.76,1212.99 1015.35,1212.99 1015.93,1212.99 1016.52,1212.99 1017.11,1212.99 1017.69,1212.99 1018.28,1212.99 1018.86,1212.99 1019.45,1212.99 1020.04,1212.99 1020.62,1212.99 1021.21,1212.99 1021.8,1212.99 1022.38,1212.99 1022.97,1212.99 1023.56,1212.99 1024.14,1212.99 1024.73,1212.99 1025.32,1212.99 1025.9,1212.99 1026.49,1212.99 1027.07,1212.99 1027.66,1212.99 1028.25,1212.99 1028.83,1212.99 1029.42,1212.99 1030.01,1212.99 1030.59,1212.99 1031.18,1212.99 1031.77,1212.99 1032.35,1212.99 1032.94,1212.99 1033.52,1212.99 1034.11,1212.99 1034.7,1212.99 1035.28,1212.99 1035.87,1212.99 1036.46,1212.99 1037.04,1212.99 1037.63,1212.99 1038.22,1212.99 1038.8,1212.99 1039.39,1212.99 1039.98,1212.99 1040.56,1212.99 1041.15,1212.99 1041.73,1212.99 1042.32,1212.99 1042.91,1212.99 1043.49,1212.99 1044.08,1212.99 1044.67,1212.99 1045.25,1212.99 1045.84,1212.99 1046.43,1212.99 1047.01,1212.99 1047.6,1212.99 1048.19,1212.99 1048.77,1212.99 1049.36,1212.99 1049.94,1212.99 1050.53,1212.99 1051.12,1212.99 1051.7,1212.99 1052.29,1212.99 1052.88,1212.99 1053.46,1212.99 1054.05,1212.99 1054.64,1212.99 1055.22,1212.99 1055.81,1212.99 1056.39,1212.99 1056.98,1212.99 1057.57,1212.99 1058.15,1212.99 1058.74,1212.99 1059.33,1212.99 1059.91,1212.99 1060.5,1212.99 1061.09,1212.99 1061.67,1212.99 1062.26,1212.99 1062.85,1212.99 1063.43,1212.99 1064.02,1212.99 1064.6,1212.99 1065.19,1212.99 1065.78,1212.99 1066.36,1212.99 1066.95,1212.99 1067.54,1212.99 1068.12,1212.99 1068.71,1212.99 1069.3,1212.99 1069.88,1212.99 1070.47,1212.99 1071.06,1212.99 1071.64,1212.99 1072.23,1212.99 1072.81,1212.99 1073.4,1212.99 1073.99,1212.99 1074.57,1212.99 1075.16,1212.99 1075.75,1212.99 1076.33,1212.99 1076.92,1212.99 1077.51,1212.99 1078.09,1212.99 1078.68,1212.99 1079.26,1212.99 1079.85,1212.99 1080.44,1212.99 1081.02,1212.99 1081.61,1212.99 1082.2,1212.99 1082.78,1212.99 1083.37,1212.99 1083.96,1212.99 1084.54,1212.99 1085.13,1212.99 1085.72,1212.99 1086.3,1212.99 1086.89,1212.99 1087.47,1212.99 1088.06,1212.99 1088.65,1212.99 1089.23,1212.99 1089.82,1212.99 1090.41,1212.99 1090.99,1212.99 1091.58,1212.99 1092.17,1212.99 1092.75,1212.99 1093.34,1212.99 1093.93,1212.99 1094.51,1212.99 1095.1,1212.99 1095.68,1212.99 1096.27,1212.99 1096.86,1212.99 1097.44,1212.99 1098.03,1212.99 1098.62,1212.99 1099.2,1212.99 1099.79,1212.99 1100.38,1212.99 1100.96,1212.99 1101.55,1212.99 1102.14,1212.99 1102.72,1212.99 1103.31,1212.99 1103.89,1212.99 1104.48,1212.99 1105.07,1212.99 1105.65,1212.99 1106.24,1212.99 1106.83,1212.99 1107.41,1212.99 1108,1212.99 1108.59,1212.99 1109.17,1212.99 1109.76,1212.99 1110.34,1212.99 1110.93,1212.99 1111.52,1212.99 1112.1,1212.99 1112.69,1212.99 1113.28,1212.99 1113.86,1212.99 1114.45,1212.99 1115.04,1212.99 1115.62,1212.99 1116.21,1212.99 1116.8,1212.99 1117.38,1212.99 1117.97,1212.99 1118.55,1212.99 1119.14,1212.99 1119.73,1212.99 1120.31,1212.99 1120.9,1212.99 1121.49,1212.99 1122.07,1212.99 1122.66,1212.99 1123.25,1212.99 1123.83,1212.99 1124.42,1212.99 1125.01,1212.99 1125.59,1212.99 1126.18,1212.99 1126.76,1212.99 1127.35,1212.99 1127.94,1212.99 1128.52,1212.99 1129.11,1212.99 1129.7,1212.99 1130.28,1212.99 1130.87,1212.99 1131.46,1212.99 1132.04,1212.99 1132.63,1212.99 1133.21,1212.99 1133.8,1212.99 1134.39,1212.99 1134.97,1212.99 1135.56,1212.99 1136.15,1212.99 1136.73,1212.99 1137.32,1212.99 1137.91,1212.99 1138.49,1212.99 1139.08,1212.99 1139.67,1212.99 1140.25,1212.99 1140.84,1212.99 1141.42,1212.99 1142.01,1212.99 1142.6,1212.99 1143.18,1212.99 1143.77,1212.99 1144.36,1212.99 1144.94,1212.99 1145.53,1212.99 1146.12,1212.99 1146.7,1212.99 1147.29,1212.99 1147.88,1212.99 1148.46,1212.99 1149.05,1212.99 1149.63,1212.99 1150.22,1212.99 1150.81,1212.99 1151.39,1212.99 1151.98,1212.99 1152.57,1212.99 1153.15,1212.99 1153.74,1212.99 1154.33,1212.99 1154.91,1212.99 1155.5,1212.99 1156.09,1212.99 1156.67,1212.99 1157.26,1212.99 1157.84,1212.99 1158.43,1212.99 1159.02,1212.99 1159.6,1212.99 1160.19,1212.99 1160.78,1212.99 1161.36,1212.99 1161.95,1212.99 1162.54,1212.99 1163.12,1212.99 1163.71,1212.99 1164.29,1212.99 1164.88,1212.99 1165.47,1212.99 1166.05,1212.99 1166.64,1212.99 1167.23,1212.99 1167.81,1212.99 1168.4,1212.99 1168.99,1212.99 1169.57,1212.99 1170.16,1212.99 1170.75,1212.99 1171.33,1212.99 1171.92,1212.99 1172.5,1212.99 1173.09,1212.99 1173.68,1212.99 1174.26,1212.99 1174.85,1212.99 1175.44,1212.99 1176.02,1212.99 1176.61,1212.99 1177.2,1212.99 1177.78,1212.99 1178.37,1212.99 1178.96,1212.99 1179.54,1212.99 1180.13,1212.99 1180.71,1212.99 1181.3,1212.99 1181.89,1212.99 1182.47,1212.99 1183.06,1212.99 1183.65,1212.99 1184.23,1212.99 1184.82,1212.99 1185.41,1212.99 1185.99,1212.99 1186.58,1212.99 1187.16,1212.99 1187.75,1212.99 1188.34,1212.99 1188.92,1212.99 1189.51,1212.99 1190.1,1212.99 1190.68,1212.99 1191.27,1212.99 1191.86,1212.99 1192.44,1212.99 1193.03,1212.99 1193.62,1212.99 1194.2,1212.99 1194.79,1212.99 1195.37,1212.99 1195.96,1212.99 1196.55,1212.99 1197.13,1212.99 1197.72,1212.99 1198.31,1212.99 1198.89,1212.99 1199.48,1212.99 1200.07,1212.99 1200.65,1212.99 1201.24,1212.99 1201.83,1212.99 1202.41,1212.99 1203,1212.99 1203.58,1212.99 1204.17,1212.99 1204.76,1212.99 1205.34,1212.99 1205.93,1212.99 1206.52,1212.99 1207.1,1212.99 1207.69,1212.99 1208.28,1212.99 1208.86,1212.99 1209.45,1212.99 1210.03,1212.99 1210.62,1212.99 1211.21,1212.99 1211.79,1212.99 1212.38,1212.99 1212.97,1212.99 1213.55,1212.99 1214.14,1212.99 1214.73,1212.99 1215.31,1212.99 1215.9,1212.99 1216.49,1212.99 1217.07,1212.99 1217.66,1212.99 1218.24,1212.99 1218.83,1212.99 1219.42,1212.99 1220,1212.99 1220.59,1212.99 1221.18,1212.99 1221.76,1212.99 1222.35,1212.99 1222.94,1212.99 1223.52,1212.99 1224.11,1212.99 1224.7,1212.99 1225.28,1212.99 1225.87,1212.99 1226.45,1212.99 1227.04,1212.99 1227.63,1212.99 1228.21,1212.99 1228.8,1212.99 1229.39,1212.99 1229.97,1212.99 1230.56,1212.99 1231.15,1212.99 1231.73,1212.99 1232.32,1212.99 1232.91,1212.99 1233.49,1212.99 1234.08,1212.99 1234.66,1212.99 1235.25,1212.99 1235.84,1212.99 1236.42,1212.99 1237.01,1212.99 1237.6,1212.99 1238.18,1212.99 1238.77,1212.99 1239.36,1212.99 1239.94,1212.99 1240.53,1212.99 1241.11,1212.99 1241.7,1212.99 1242.29,1212.99 1242.87,1212.99 1243.46,1212.99 1244.05,1212.99 1244.63,1212.99 1245.22,1212.99 1245.81,1212.99 1246.39,1212.99 1246.98,1212.99 1247.57,1212.99 1248.15,1212.99 1248.74,1212.99 1249.32,1212.99 1249.91,1212.99 1250.5,1212.99 1251.08,1212.99 1251.67,1212.99 1252.26,1212.99 1252.84,1212.99 1253.43,1212.99 1254.02,1212.99 1254.6,1212.99 1255.19,1212.99 1255.78,1212.99 1256.36,1212.99 1256.95,1212.99 1257.53,1212.99 1258.12,1212.99 1258.71,1212.99 1259.29,1212.99 1259.88,1212.99 1260.47,1212.99 1261.05,1212.99 1261.64,1212.99 1262.23,1212.99 1262.81,1212.99 1263.4,1212.99 1263.98,1212.99 1264.57,1212.99 1265.16,1212.99 1265.74,1212.99 1266.33,1212.99 1266.92,1212.99 1267.5,1212.99 1268.09,1212.99 1268.68,1212.99 1269.26,1212.99 1269.85,1212.99 1270.44,1212.99 1271.02,1212.99 1271.61,1212.99 1272.19,1212.99 1272.78,1212.99 1273.37,1212.99 1273.95,1212.99 1274.54,1212.99 1275.13,1212.99 1275.71,1212.99 1276.3,1212.99 1276.89,1212.99 1277.47,1212.99 1278.06,1212.99 1278.65,1212.99 1279.23,1212.99 1279.82,1212.99 1280.4,1212.99 1280.99,1212.99 1281.58,1212.99 1282.16,1212.99 1282.75,1212.99 1283.34,1212.99 1283.92,1212.99 1284.51,1212.99 1285.1,1212.99 1285.68,1212.99 1286.27,1212.99 1286.86,1212.99 1287.44,1212.99 1288.03,1212.99 1288.61,1212.99 1289.2,1212.99 1289.79,1212.99 1290.37,1212.99 1290.96,1212.99 1291.55,1212.99 1292.13,1212.99 1292.72,1212.99 1293.31,1212.99 1293.89,1212.99 1294.48,1212.99 1295.06,1212.99 1295.65,1212.99 1296.24,1212.99 1296.82,1212.99 1297.41,1212.99 1298,1212.99 1298.58,1212.99 1299.17,1212.99 1299.76,1212.99 1300.34,1212.99 1300.93,1212.99 1301.52,1212.99 1302.1,1212.99 1302.69,1212.99 1303.27,1212.99 1303.86,1212.99 1304.45,1212.99 1305.03,1212.99 1305.62,1212.99 1306.21,1212.99 1306.79,1212.99 1307.38,1212.99 1307.97,1212.99 1308.55,1212.99 1309.14,1212.99 1309.73,1212.99 1310.31,1212.99 1310.9,1212.99 1311.48,1212.99 1312.07,1212.99 1312.66,1212.99 1313.24,1212.99 1313.83,1212.99 1314.42,1212.99 1315,1212.99 1315.59,1212.99 1316.18,1212.99 1316.76,1212.99 1317.35,1212.99 1317.93,1212.99 1318.52,1212.99 1319.11,1212.99 1319.69,1212.99 1320.28,1212.99 1320.87,1212.99 1321.45,1212.99 1322.04,1212.99 1322.63,1212.99 1323.21,1212.99 1323.8,1212.99 1324.39,1212.99 1324.97,1212.99 1325.56,1212.99 1326.14,1212.99 1326.73,1212.99 1327.32,1212.99 1327.9,1212.99 1328.49,1212.99 1329.08,1212.99 1329.66,1212.99 1330.25,1212.99 1330.84,1212.99 1331.42,1212.99 1332.01,1212.99 1332.6,1212.99 1333.18,1212.99 1333.77,1212.99 1334.35,1212.99 1334.94,1212.99 1335.53,1212.99 1336.11,1212.99 1336.7,1212.99 1337.29,1212.99 1337.87,1212.99 1338.46,1212.99 1339.05,1212.99 1339.63,1212.99 1340.22,1212.99 1340.8,1212.99 1341.39,1212.99 1341.98,1212.99 1342.56,1212.99 1343.15,1212.99 1343.74,1212.99 1344.32,1212.99 1344.91,1212.99 1345.5,1212.99 1346.08,1212.99 1346.67,1212.99 1347.26,1212.99 1347.84,1212.99 1348.43,1212.99 1349.01,1212.99 1349.6,1212.99 1350.19,1212.99 1350.77,1212.99 1351.36,1212.99 1351.95,1212.99 1352.53,1212.99 1353.12,1212.99 1353.71,1212.99 1354.29,1212.99 1354.88,1212.99 1355.47,1212.99 1356.05,1212.99 1356.64,1212.99 1357.22,1212.99 1357.81,1212.99 1358.4,1212.99 1358.98,1212.99 1359.57,1212.99 1360.16,1212.99 1360.74,1212.99 1361.33,1212.99 1361.92,1212.99 1362.5,1212.99 1363.09,1212.99 1363.68,1212.99 1364.26,1212.99 1364.85,1212.99 1365.43,1212.99 1366.02,1212.99 1366.61,1212.99 1367.19,1212.99 1367.78,1212.99 1368.37,1212.99 1368.95,1212.99 1369.54,1212.99 1370.13,1212.99 1370.71,1212.99 1371.3,1212.99 1371.88,1212.99 1372.47,1212.99 1373.06,1212.99 1373.64,1212.99 1374.23,1212.99 1374.82,1212.99 1375.4,1212.99 1375.99,1212.99 1376.58,1212.99 1377.16,1212.99 1377.75,1212.99 1378.34,1212.99 1378.92,1212.99 1379.51,1212.99 1380.09,1212.99 1380.68,1212.99 1381.27,1212.99 1381.85,1212.99 1382.44,1212.99 1383.03,1212.99 1383.61,1212.99 1384.2,1212.99 1384.79,1212.99 1385.37,1212.99 1385.96,1212.99 1386.55,1212.99 1387.13,1212.99 1387.72,1212.99 1388.3,1212.99 1388.89,1212.99 1389.48,1212.99 1390.06,1212.99 1390.65,1212.99 1391.24,1212.99 1391.82,1212.99 1392.41,1212.99 1393,1212.99 1393.58,1212.99 1394.17,1212.99 1394.75,1212.99 1395.34,1212.99 1395.93,1212.99 1396.51,1212.99 1397.1,1212.99 1397.69,1212.99 1398.27,1212.99 1398.86,1212.99 1399.45,1212.99 1400.03,1212.99 1400.62,1212.99 1401.21,1212.99 1401.79,1212.99 1402.38,1212.99 1402.96,1212.99 1403.55,1212.99 1404.14,1212.99 1404.72,1212.99 1405.31,1212.99 1405.9,1212.99 1406.48,1212.99 1407.07,1212.99 1407.66,1212.99 1408.24,1212.99 1408.83,1212.99 1409.42,1212.99 1410,1212.99 1410.59,1212.99 1411.17,1212.99 1411.76,1212.99 1412.35,1212.99 1412.93,1212.99 1413.52,1212.99 1414.11,1212.99 1414.69,1212.99 1415.28,1212.99 1415.87,1212.99 1416.45,1212.99 1417.04,1212.99 1417.63,1212.99 1418.21,1212.99 1418.8,1212.99 1419.38,1212.99 1419.97,1212.99 1420.56,1212.99 1421.14,1212.99 1421.73,1212.99 1422.32,1212.99 1422.9,1212.99 1423.49,1212.99 1424.08,1212.99 1424.66,1212.99 1425.25,1212.99 1425.83,1212.99 1426.42,1212.99 1427.01,1212.99 1427.59,1212.99 1428.18,1212.99 1428.77,1212.99 1429.35,1212.99 1429.94,1212.99 1430.53,1212.99 1431.11,1212.99 1431.7,1212.99 1432.29,1212.99 1432.87,1212.99 1433.46,1212.99 1434.04,1212.99 1434.63,1212.99 1435.22,1212.99 1435.8,1212.99 1436.39,1212.99 1436.98,1212.99 1437.56,1212.99 1438.15,1212.99 1438.74,1212.99 1439.32,1212.99 1439.91,1212.99 1440.5,1212.99 1441.08,1212.99 1441.67,1212.99 1442.25,1212.99 1442.84,1212.99 1443.43,1212.99 1444.01,1212.99 1444.6,1212.99 1445.19,1212.99 1445.77,1212.99 1446.36,1212.99 1446.95,1212.99 1447.53,1212.99 1448.12,1212.99 1448.7,1212.99 1449.29,1212.99 1449.88,1212.99 1450.46,1212.99 1451.05,1212.99 1451.64,1212.99 1452.22,1212.99 1452.81,1212.99 1453.4,1212.99 1453.98,1212.99 1454.57,1212.99 1455.16,1212.99 1455.74,1212.99 1456.33,1212.99 1456.91,1212.99 1457.5,1212.99 1458.09,1212.99 1458.67,1212.99 1459.26,1212.99 1459.85,1212.99 1460.43,1212.99 1461.02,1212.99 1461.61,1212.99 1462.19,1212.99 1462.78,1212.99 1463.37,1212.99 1463.95,1212.99 1464.54,1212.99 1465.12,1212.99 1465.71,1212.99 1466.3,1212.99 1466.88,1212.99 1467.47,1212.99 1468.06,1212.99 1468.64,1212.99 1469.23,1212.99 1469.82,1212.99 1470.4,1212.99 1470.99,1212.99 1471.57,1212.99 1472.16,1212.99 1472.75,1212.99 1473.33,1212.99 1473.92,1212.99 1474.51,1212.99 1475.09,1212.99 1475.68,1212.99 1476.27,1212.99 1476.85,1212.99 1477.44,1212.99 1478.03,1212.99 1478.61,1212.99 1479.2,1212.99 1479.78,1212.99 1480.37,1212.99 1480.96,1212.99 1481.54,1212.99 1482.13,1212.99 1482.72,1212.99 1483.3,1212.99 1483.89,1212.99 1484.48,1212.99 1485.06,1212.99 1485.65,1212.99 1486.24,1212.99 1486.82,1212.99 1487.41,1212.99 1487.99,1212.99 1488.58,1212.99 1489.17,1212.99 1489.75,1212.99 1490.34,1212.99 1490.93,1212.99 1491.51,1212.99 1492.1,1212.99 1492.69,1212.99 1493.27,1212.99 1493.86,1212.99 1494.45,1212.99 1495.03,1212.99 1495.62,1212.99 1496.2,1212.99 1496.79,1212.99 1497.38,1212.99 1497.96,1212.99 1498.55,1212.99 1499.14,1212.99 1499.72,1212.99 1500.31,1212.99 1500.9,1212.99 1501.48,1212.99 1502.07,1212.99 1502.65,1212.99 1503.24,1212.99 1503.83,1212.99 1504.41,1212.99 1505,1212.99 1505.59,1212.99 1506.17,1212.99 1506.76,1212.99 1507.35,1212.99 1507.93,1212.99 1508.52,1212.99 1509.11,1212.99 1509.69,1212.99 1510.28,1212.99 1510.86,1212.99 1511.45,1212.99 1512.04,1212.99 1512.62,1212.99 1513.21,1212.99 1513.8,1212.99 1514.38,1212.99 1514.97,1212.99 1515.56,1212.99 1516.14,1212.99 1516.73,1212.99 1517.32,1212.99 1517.9,1212.99 1518.49,1212.99 1519.07,1212.99 1519.66,1212.99 1520.25,1212.99 1520.83,1212.99 1521.42,1212.99 1522.01,1212.99 1522.59,1212.99 1523.18,1212.99 1523.77,1212.99 1524.35,1212.99 1524.94,1212.99 1525.52,1212.99 1526.11,1212.99 1526.7,1212.99 1527.28,1212.99 1527.87,1212.99 1528.46,1212.99 1529.04,1212.99 1529.63,1212.99 1530.22,1212.99 1530.8,1212.99 1531.39,1212.99 1531.98,1212.99 1532.56,1212.99 1533.15,1212.99 1533.73,1212.99 1534.32,1212.99 1534.91,1212.99 1535.49,1212.99 1536.08,1212.99 1536.67,1212.99 1537.25,1212.99 1537.84,1212.99 1538.43,1212.99 1539.01,1212.99 1539.6,1212.99 1540.19,1212.99 1540.77,1212.99 1541.36,1212.99 1541.94,1212.99 1542.53,1212.99 1543.12,1212.99 1543.7,1212.99 1544.29,1212.99 1544.88,1212.99 1545.46,1212.99 1546.05,1212.99 1546.64,1212.99 1547.22,1212.99 1547.81,1212.99 1548.4,1212.99 1548.98,1212.99 1549.57,1212.99 1550.15,1212.99 1550.74,1212.99 1551.33,1212.99 1551.91,1212.99 1552.5,1212.99 1553.09,1212.99 1553.67,1212.99 1554.26,1212.99 1554.85,1212.99 1555.43,1212.99 1556.02,1212.99 1556.6,1212.99 1557.19,1212.99 1557.78,1212.99 1558.36,1212.99 1558.95,1212.99 1559.54,1212.99 1560.12,1212.99 1560.71,1212.99 1561.3,1212.99 1561.88,1212.99 1562.47,1212.99 1563.06,1212.99 1563.64,1212.99 1564.23,1212.99 1564.81,1212.99 1565.4,1212.99 1565.99,1212.99 1566.57,1212.99 1567.16,1212.99 1567.75,1212.99 1568.33,1212.99 1568.92,1212.99 1569.51,1212.99 1570.09,1212.99 1570.68,1212.99 1571.27,1212.99 1571.85,1212.99 1572.44,1212.99 1573.02,1212.99 1573.61,1212.99 1574.2,1212.99 1574.78,1212.99 1575.37,1212.99 1575.96,1212.99 1576.54,1212.99 1577.13,1212.99 1577.72,1212.99 1578.3,1212.99 1578.89,1212.99 1579.47,1212.99 1580.06,1212.99 1580.65,1212.99 1581.23,1212.99 1581.82,1212.99 1582.41,1212.99 1582.99,1212.99 1583.58,1212.99 1584.17,1212.99 1584.75,1212.99 1585.34,1212.99 1585.93,1212.99 1586.51,1212.99 1587.1,1212.99 1587.68,1212.99 1588.27,1212.99 1588.86,1212.99 1589.44,1212.99 1590.03,1212.99 1590.62,1212.99 1591.2,1212.99 1591.79,1212.99 1592.38,1212.99 1592.96,1212.99 1593.55,1212.99 1594.14,1212.99 1594.72,1212.99 1595.31,1212.99 1595.89,1212.99 1596.48,1212.99 1597.07,1212.99 1597.65,1212.99 1598.24,1212.99 1598.83,1212.99 1599.41,1212.99 1600,1212.99 1600.59,1212.99 1601.17,1212.99 1601.76,1212.99 1602.34,1212.99 1602.93,1212.99 1603.52,1212.99 1604.1,1212.99 1604.69,1212.99 1605.28,1212.99 1605.86,1212.99 1606.45,1212.99 1607.04,1212.99 1607.62,1212.99 1608.21,1212.99 1608.8,1212.99 1609.38,1212.99 1609.97,1212.99 1610.55,1212.99 1611.14,1212.99 1611.73,1212.99 1612.31,1212.99 1612.9,1212.99 1613.49,1212.99 1614.07,1212.99 1614.66,1212.99 1615.25,1212.99 1615.83,1212.99 1616.42,1212.99 1617.01,1212.99 1617.59,1212.99 1618.18,1212.99 1618.76,1212.99 1619.35,1212.99 1619.94,1212.99 1620.52,1212.99 1621.11,1212.99 1621.7,1212.99 1622.28,1212.99 1622.87,1212.99 1623.46,1212.99 1624.04,1212.99 1624.63,1212.99 1625.22,1212.99 1625.8,1212.99 1626.39,1212.99 1626.97,1212.99 1627.56,1212.99 1628.15,1212.99 1628.73,1212.99 1629.32,1212.99 1629.91,1212.99 1630.49,1212.99 1631.08,1212.99 1631.67,1212.99 1632.25,1212.99 1632.84,1212.99 1633.42,1212.99 1634.01,1212.99 1634.6,1212.99 1635.18,1212.99 1635.77,1212.99 1636.36,1212.99 1636.94,1212.99 1637.53,1212.99 1638.12,1212.99 1638.7,1212.99 1639.29,1212.99 1639.88,1212.99 1640.46,1212.99 1641.05,1212.99 1641.63,1212.99 1642.22,1212.99 1642.81,1212.99 1643.39,1212.99 1643.98,1212.99 1644.57,1212.99 1645.15,1212.99 1645.74,1212.99 1646.33,1212.99 1646.91,1212.99 1647.5,1212.99 1648.09,1212.99 1648.67,1212.99 1649.26,1212.99 1649.84,1212.99 1650.43,1212.99 1651.02,1212.99 1651.6,1212.99 1652.19,1212.99 1652.78,1212.99 1653.36,1212.99 1653.95,1212.99 1654.54,1212.99 1655.12,1212.99 1655.71,1212.99 1656.29,1212.99 1656.88,1212.99 1657.47,1212.99 1658.05,1212.99 1658.64,1212.99 1659.23,1212.99 1659.81,1212.99 1660.4,1212.99 1660.99,1212.99 1661.57,1212.99 1662.16,1212.99 1662.75,1212.99 1663.33,1212.99 1663.92,1212.99 1664.5,1212.99 1665.09,1212.99 1665.68,1212.99 1666.26,1212.99 1666.85,1212.99 1667.44,1212.99 1668.02,1212.99 1668.61,1212.99 1669.2,1212.99 1669.78,1212.99 1670.37,1212.99 1670.96,1212.99 1671.54,1212.99 1672.13,1212.99 1672.71,1212.99 1673.3,1212.99 1673.89,1212.99 1674.47,1212.99 1675.06,1212.99 1675.65,1212.99 1676.23,1212.99 1676.82,1212.99 1677.41,1212.99 1677.99,1212.99 1678.58,1212.99 1679.17,1212.99 1679.75,1212.99 1680.34,1212.99 1680.92,1212.99 1681.51,1212.99 1682.1,1212.99 1682.68,1212.99 1683.27,1212.99 1683.86,1212.99 1684.44,1212.99 1685.03,1212.99 1685.62,1212.99 1686.2,1212.99 1686.79,1212.99 1687.37,1212.99 1687.96,1212.99 1688.55,1212.99 1689.13,1212.99 1689.72,1212.99 1690.31,1212.99 1690.89,1212.99 1691.48,1212.99 1692.07,1212.99 1692.65,1212.99 1693.24,1212.99 1693.83,1212.99 1694.41,1212.99 1695,1212.99 1695.58,1212.99 1696.17,1212.99 1696.76,1212.99 1697.34,1212.99 1697.93,1212.99 1698.52,1212.99 1699.1,1212.99 1699.69,1212.99 1700.28,1212.99 1700.86,1212.99 1701.45,1212.99 1702.04,1212.99 1702.62,1212.99 1703.21,1212.99 1703.79,1212.99 1704.38,1212.99 1704.97,1212.99 1705.55,1212.99 1706.14,1212.99 1706.73,1212.99 1707.31,1212.99 1707.9,1212.99 1708.49,1212.99 1709.07,1212.99 1709.66,1212.99 1710.24,1212.99 1710.83,1212.99 1711.42,1212.99 1712,1212.99 1712.59,1212.99 1713.18,1212.99 1713.76,1212.99 1714.35,1212.99 1714.94,1212.99 1715.52,1212.99 1716.11,1212.99 1716.7,1212.99 1717.28,1212.99 1717.87,1212.99 1718.45,1212.99 1719.04,1212.99 1719.63,1212.99 1720.21,1212.99 1720.8,1212.99 1721.39,1212.99 1721.97,1212.99 1722.56,1212.99 1723.15,1212.99 1723.73,1212.99 1724.32,1212.99 1724.91,1212.99 1725.49,1212.99 1726.08,1212.99 1726.66,1212.99 1727.25,1212.99 1727.84,1212.99 1728.42,1212.99 1729.01,1212.99 1729.6,1212.99 1730.18,1212.99 1730.77,1212.99 1731.36,1212.99 1731.94,1212.99 1732.53,1212.99 1733.11,1212.99 1733.7,1212.99 1734.29,1212.99 1734.87,1212.99 1735.46,1212.99 1736.05,1212.99 1736.63,1212.99 1737.22,1212.99 1737.81,1212.99 1738.39,1212.99 1738.98,1212.99 1739.57,1212.99 1740.15,1212.99 1740.74,1212.99 1741.32,1212.99 1741.91,1212.99 1742.5,1212.99 1743.08,1212.99 1743.67,1212.99 1744.26,1212.99 1744.84,1212.99 1745.43,1212.99 1746.02,1212.99 1746.6,1212.99 1747.19,1212.99 1747.78,1212.99 1748.36,1212.99 1748.95,1212.99 1749.53,1212.99 1750.12,1212.99 1750.71,1212.99 1751.29,1212.99 1751.88,1212.99 1752.47,1212.99 1753.05,1212.99 1753.64,1212.99 1754.23,1212.99 1754.81,1212.99 1755.4,1212.99 1755.99,1212.99 1756.57,1212.99 1757.16,1212.99 1757.74,1212.99 1758.33,1212.99 1758.92,1212.99 1759.5,1212.99 1760.09,1212.99 1760.68,1212.99 1761.26,1212.99 1761.85,1212.99 1762.44,1212.99 1763.02,1212.99 1763.61,1212.99 1764.19,1212.99 1764.78,1212.99 1765.37,1212.99 1765.95,1212.99 1766.54,1212.99 1767.13,1212.99 1767.71,1212.99 1768.3,1212.99 1768.89,1212.99 1769.47,1212.99 1770.06,1212.99 1770.65,1212.99 1771.23,1212.99 1771.82,1212.99 1772.4,1212.99 1772.99,1212.99 1773.58,1212.99 1774.16,1212.99 1774.75,1212.99 1775.34,1212.99 1775.92,1212.99 1776.51,1212.99 1777.1,1212.99 1777.68,1212.99 1778.27,1212.99 1778.86,1212.99 1779.44,1212.99 1780.03,1212.99 1780.61,1212.99 1781.2,1212.99 1781.79,1212.99 1782.37,1212.99 1782.96,1212.99 1783.55,1212.99 1784.13,1212.99 1784.72,1212.99 1785.31,1212.99 1785.89,1212.99 1786.48,1212.99 1787.06,1212.99 1787.65,1212.99 1788.24,1212.99 1788.82,1212.99 1789.41,1212.99 1790,1212.99 1790.58,1212.99 1791.17,1212.99 1791.76,1212.99 1792.34,1212.99 1792.93,1212.99 1793.52,1212.99 1794.1,1212.99 1794.69,1212.99 1795.27,1212.99 1795.86,1212.99 1796.45,1212.99 1797.03,1212.99 1797.62,1212.99 1798.21,1212.99 1798.79,1212.99 1799.38,1212.99 1799.97,1212.99 1800.55,1212.99 1801.14,1212.99 1801.73,1212.99 1802.31,1212.99 1802.9,1212.99 1803.48,1212.99 1804.07,1212.99 1804.66,1212.99 1805.24,1212.99 1805.83,1212.99 1806.42,1212.99 1807,1212.99 1807.59,1212.99 1808.18,1212.99 1808.76,1212.99 1809.35,1212.99 1809.94,1212.99 1810.52,1212.99 1811.11,1212.99 1811.69,1212.99 1812.28,1212.99 1812.87,1212.99 1813.45,1212.99 1814.04,1212.99 1814.63,1212.99 1815.21,1212.99 1815.8,1212.99 1816.39,1212.99 1816.97,1212.99 1817.56,1212.99 1818.14,1212.99 1818.73,1212.99 1819.32,1212.99 1819.9,1212.99 1820.49,1212.99 1821.08,1212.99 1821.66,1212.99 1822.25,1212.99 1822.84,1212.99 1823.42,1212.99 1824.01,1212.99 1824.6,1212.99 1825.18,1212.99 1825.77,1212.99 1826.35,1212.99 1826.94,1212.99 1827.53,1212.99 1828.11,1212.99 1828.7,1212.99 1829.29,1212.99 1829.87,1212.99 1830.46,1212.99 1831.05,1212.99 1831.63,1212.99 1832.22,1212.99 1832.81,1212.99 1833.39,1212.99 1833.98,1212.99 1834.56,1212.99 1835.15,1212.99 1835.74,1212.99 1836.32,1212.99 1836.91,1212.99 1837.5,1212.99 1838.08,1212.99 1838.67,1212.99 1839.26,1212.99 1839.84,1212.99 1840.43,1212.99 1841.01,1212.99 1841.6,1212.99 1842.19,1212.99 1842.77,1212.99 1843.36,1212.99 1843.95,1212.99 1844.53,1212.99 1845.12,1212.99 1845.71,1212.99 1846.29,1212.99 1846.88,1212.99 1847.47,1212.99 1848.05,1212.99 1848.64,1212.99 1849.22,1212.99 1849.81,1212.99 1850.4,1212.99 1850.98,1212.99 1851.57,1212.99 1852.16,1212.99 1852.74,1212.99 1853.33,1212.99 1853.92,1212.99 1854.5,1212.99 1855.09,1212.99 1855.68,1212.99 1856.26,1212.99 1856.85,1212.99 1857.43,1212.99 1858.02,1212.99 1858.61,1212.99 1859.19,1212.99 1859.78,1212.99 1860.37,1212.99 1860.95,1212.99 1861.54,1212.99 1862.13,1212.99 1862.71,1212.99 1863.3,1212.99 1863.88,1212.99 1864.47,1212.99 1865.06,1212.99 1865.64,1212.99 1866.23,1212.99 1866.82,1212.99 1867.4,1212.99 1867.99,1212.99 1868.58,1212.99 1869.16,1212.99 1869.75,1212.99 1870.34,1212.99 1870.92,1212.99 1871.51,1212.99 1872.09,1212.99 1872.68,1212.99 1873.27,1212.99 1873.85,1212.99 1874.44,1212.99 1875.03,1212.99 1875.61,1212.99 1876.2,1212.99 1876.79,1212.99 1877.37,1212.99 1877.96,1212.99 1878.55,1212.99 1879.13,1212.99 1879.72,1212.99 1880.3,1212.99 1880.89,1212.99 1881.48,1212.99 1882.06,1212.99 1882.65,1212.99 1883.24,1212.99 1883.82,1212.99 1884.41,1212.99 1885,1212.99 1885.58,1212.99 1886.17,1212.99 1886.76,1212.99 1887.34,1212.99 1887.93,1212.99 1888.51,1212.99 1889.1,1212.99 1889.69,1212.99 1890.27,1212.99 1890.86,1212.99 1891.45,1212.99 1892.03,1212.99 1892.62,1212.99 1893.21,1212.99 1893.79,1212.99 1894.38,1212.99 1894.96,1212.99 1895.55,1212.99 1896.14,1212.99 1896.72,1212.99 1897.31,1212.99 1897.9,1212.99 1898.48,1212.99 1899.07,1212.99 1899.66,1212.99 1900.24,1212.99 1900.83,1212.99 1901.42,1212.99 1902,1212.99 1902.59,1212.99 1903.17,1212.99 1903.76,1212.99 1904.35,1212.99 1904.93,1212.99 1905.52,1212.99 1906.11,1212.99 1906.69,1212.99 1907.28,1212.99 1907.87,1212.99 1908.45,1212.99 1909.04,1212.99 1909.63,1212.99 1910.21,1212.99 1910.8,1212.99 1911.38,1212.99 1911.97,1212.99 1912.56,1212.99 1913.14,1212.99 1913.73,1212.99 1914.32,1212.99 1914.9,1212.99 1915.49,1212.99 1916.08,1212.99 1916.66,1212.99 1917.25,1212.99 1917.83,1212.99 1918.42,1212.99 1919.01,1212.99 1919.59,1212.99 1920.18,1212.99 1920.77,1212.99 1921.35,1212.99 1921.94,1212.99 1922.53,1212.99 1923.11,1212.99 1923.7,1212.99 1924.29,1212.99 1924.87,1212.99 1925.46,1212.99 1926.04,1212.99 1926.63,1212.99 1927.22,1212.99 1927.8,1212.99 1928.39,1212.99 1928.98,1212.99 1929.56,1212.99 1930.15,1212.99 1930.74,1212.99 1931.32,1212.99 1931.91,1212.99 1932.5,1212.99 1933.08,1212.99 1933.67,1212.99 1934.25,1212.99 1934.84,1212.99 1935.43,1212.99 1936.01,1212.99 1936.6,1212.99 1937.19,1212.99 1937.77,1212.99 1938.36,1212.99 1938.95,1212.99 1939.53,1212.99 1940.12,1212.99 1940.71,1212.99 1941.29,1212.99 1941.88,1212.99 1942.46,1212.99 1943.05,1212.99 1943.64,1212.99 1944.22,1212.99 1944.81,1212.99 1945.4,1212.99 1945.98,1212.99 1946.57,1212.99 1947.16,1212.99 1947.74,1212.99 1948.33,1212.99 1948.91,1212.99 1949.5,1212.99 1950.09,1212.99 1950.67,1212.99 1951.26,1212.99 1951.85,1212.99 1952.43,1212.99 1953.02,1212.99 1953.61,1212.99 1954.19,1212.99 1954.78,1212.99 1955.37,1212.99 1955.95,1212.99 1956.54,1212.99 1957.12,1212.99 1957.71,1212.99 1958.3,1212.99 1958.88,1212.99 1959.47,1212.99 1960.06,1212.99 1960.64,1212.99 1961.23,1212.99 1961.82,1212.99 1962.4,1212.99 1962.99,1212.99 1963.58,1212.99 1964.16,1212.99 1964.75,1212.99 1965.33,1212.99 1965.92,1212.99 1966.51,1212.99 1967.09,1212.99 1967.68,1212.99 1968.27,1212.99 1968.85,1212.99 1969.44,1212.99 1970.03,1212.99 1970.61,1212.99 1971.2,1212.99 1971.78,1212.99 1972.37,1212.99 1972.96,1212.99 1973.54,1212.99 1974.13,1212.99 1974.72,1212.99 1975.3,1212.99 1975.89,1212.99 1976.48,1212.99 1977.06,1212.99 1977.65,1212.99 1978.24,1212.99 1978.82,1212.99 1979.41,1212.99 1979.99,1212.99 1980.58,1212.99 1981.17,1212.99 1981.75,1212.99 1982.34,1212.99 1982.93,1212.99 1983.51,1212.99 1984.1,1212.99 1984.69,1212.99 1985.27,1212.99 1985.86,1212.99 1986.45,1212.99 1987.03,1212.99 1987.62,1212.99 1988.2,1212.99 1988.79,1212.99 1989.38,1212.99 1989.96,1212.99 1990.55,1212.99 1991.14,1212.99 1991.72,1212.99 1992.31,1212.99 1992.9,1212.99 1993.48,1212.99 1994.07,1212.99 1994.65,1212.99 1995.24,1212.99 1995.83,1212.99 1996.41,1212.99 1997,1212.99 1997.59,1212.99 1998.17,1212.99 1998.76,1212.99 1999.35,1212.99 1999.93,1212.99 2000.52,1212.99 2001.11,1212.99 2001.69,1212.99 2002.28,1212.99 2002.86,1212.99 2003.45,1212.99 2004.04,1212.99 2004.62,1212.99 2005.21,1212.99 2005.8,1212.99 2006.38,1212.99 2006.97,1212.99 2007.56,1212.99 2008.14,1212.99 2008.73,1212.99 2009.32,1212.99 2009.9,1212.99 2010.49,1212.99 2011.07,1212.99 2011.66,1212.99 2012.25,1212.99 2012.83,1212.99 2013.42,1212.99 2014.01,1212.99 2014.59,1212.99 2015.18,1212.99 2015.77,1212.99 2016.35,1212.99 2016.94,1212.99 2017.53,1212.99 2018.11,1212.99 2018.7,1212.99 2019.28,1212.99 2019.87,1212.99 2020.46,1212.99 2021.04,1212.99 2021.63,1212.99 2022.22,1212.99 2022.8,1212.99 2023.39,1212.99 2023.98,1212.99 2024.56,1212.99 2025.15,1212.99 2025.73,1212.99 2026.32,1212.99 2026.91,1212.99 2027.49,1212.99 2028.08,1212.99 2028.67,1212.99 2029.25,1212.99 2029.84,1212.99 2030.43,1212.99 2031.01,1212.99 2031.6,1212.99 2032.19,1212.99 2032.77,1212.99 2033.36,1212.99 2033.94,1212.99 2034.53,1212.99 2035.12,1212.99 2035.7,1212.99 2036.29,1212.99 2036.88,1212.99 2037.46,1212.99 2038.05,1212.99 2038.64,1212.99 2039.22,1212.99 2039.81,1212.99 2040.4,1212.99 2040.98,1212.99 2041.57,1212.99 2042.15,1212.99 2042.74,1212.99 2043.33,1212.99 2043.91,1212.99 2044.5,1212.99 2045.09,1212.99 2045.67,1212.99 2046.26,1212.99 2046.85,1212.99 2047.43,1212.99 2048.02,1212.99 2048.6,1212.99 2049.19,1212.99 2049.78,1212.99 2050.36,1212.99 2050.95,1212.99 2051.54,1212.99 2052.12,1212.99 2052.71,1212.99 2053.3,1212.99 2053.88,1212.99 2054.47,1212.99 2055.06,1212.99 2055.64,1212.99 2056.23,1212.99 2056.81,1212.99 2057.4,1212.99 2057.99,1212.99 2058.57,1212.99 2059.16,1212.99 2059.75,1212.99 2060.33,1212.99 2060.92,1212.99 2061.51,1212.99 2062.09,1212.99 2062.68,1212.99 2063.27,1212.99 2063.85,1212.99 2064.44,1212.99 2065.02,1212.99 2065.61,1212.99 2066.2,1212.99 2066.78,1212.99 2067.37,1212.99 2067.96,1212.99 2068.54,1212.99 2069.13,1212.99 2069.72,1212.99 2070.3,1212.99 2070.89,1212.99 2071.48,1212.99 2072.06,1212.99 2072.65,1212.99 2073.23,1212.99 2073.82,1212.99 2074.41,1212.99 2074.99,1212.99 2075.58,1212.99 2076.17,1212.99 2076.75,1212.99 2077.34,1212.99 2077.93,1212.99 2078.51,1212.99 2079.1,1212.99 2079.68,1212.99 2080.27,1212.99 2080.86,1212.99 2081.44,1212.99 2082.03,1212.99 2082.62,1212.99 2083.2,1212.99 2083.79,1212.99 2084.38,1212.99 2084.96,1212.99 2085.55,1212.99 2086.14,1212.99 2086.72,1212.99 2087.31,1212.99 2087.89,1212.99 2088.48,1212.99 2089.07,1212.99 2089.65,1212.99 2090.24,1212.99 2090.83,1212.99 2091.41,1212.99 2092,1212.99 2092.59,1212.99 2093.17,1212.99 2093.76,1212.99 2094.35,1212.99 2094.93,1212.99 2095.52,1212.99 2096.1,1212.99 2096.69,1212.99 2097.28,1212.99 2097.86,1212.99 2098.45,1212.99 2099.04,1212.99 2099.62,1212.99 2100.21,1212.99 2100.8,1212.99 2101.38,1212.99 2101.97,1212.99 2102.55,1212.99 2103.14,1212.99 2103.73,1212.99 2104.31,1212.99 2104.9,1212.99 2105.49,1212.99 2106.07,1212.99 2106.66,1212.99 2107.25,1212.99 2107.83,1212.99 2108.42,1212.99 2109.01,1212.99 2109.59,1212.99 2110.18,1212.99 2110.76,1212.99 2111.35,1212.99 2111.94,1212.99 2112.52,1212.99 2113.11,1212.99 2113.7,1212.99 2114.28,1212.99 2114.87,1212.99 2115.46,1212.99 2116.04,1212.99 2116.63,1212.99 2117.22,1212.99 2117.8,1212.99 2118.39,1212.99 2118.97,1212.99 2119.56,1212.99 2120.15,1212.99 2120.73,1212.99 2121.32,1212.99 2121.91,1212.99 2122.49,1212.99 2123.08,1212.99 2123.67,1212.99 2124.25,1212.99 2124.84,1212.99 2125.42,1212.99 2126.01,1212.99 2126.6,1212.99 2127.18,1212.99 2127.77,1212.99 2128.36,1212.99 2128.94,1212.99 2129.53,1212.99 2130.12,1212.99 2130.7,1212.99 2131.29,1212.99 2131.88,1212.99 2132.46,1212.99 2133.05,1212.99 2133.63,1212.99 2134.22,1212.99 2134.81,1212.99 2135.39,1212.99 2135.98,1212.99 2136.57,1212.99 2137.15,1212.99 2137.74,1212.99 2138.33,1212.99 2138.91,1212.99 2139.5,1212.99 2140.09,1212.99 2140.67,1212.99 2141.26,1212.99 2141.84,1212.99 2142.43,1212.99 2143.02,1212.99 2143.6,1212.99 2144.19,1212.99 2144.78,1212.99 2145.36,1212.99 2145.95,1212.99 2146.54,1212.99 2147.12,1212.99 2147.71,1212.99 2148.3,1212.99 2148.88,1212.99 2149.47,1212.99 2150.05,1212.99 2150.64,1212.99 2151.23,1212.99 2151.81,1212.99 2152.4,1212.99 2152.99,1212.99 2153.57,1212.99 2154.16,1212.99 2154.75,1212.99 2155.33,1212.99 2155.92,1212.99 2156.5,1212.99 2157.09,1212.99 2157.68,1212.99 2158.26,1212.99 \"/>\n<path clip-path=\"url(#clip252)\" d=\"M986.025 1212.83 L986.612 1212.83 L987.198 1212.83 L987.785 1212.83 L988.371 1212.83 L988.957 1212.83 L989.544 1212.83 L990.13 1212.83 L990.717 1212.83 L991.303 1212.83 L991.889 1212.83 L992.476 1212.83 L993.062 1212.83 L993.649 1212.83 L994.235 1212.83 L994.822 1212.83 L995.408 1212.83 L995.994 1212.83 L996.581 1212.83 L997.167 1212.83 L997.754 1212.83 L998.34 1212.83 L998.926 1212.83 L999.513 1212.83 L1000.1 1212.83 L1000.69 1212.83 L1001.27 1212.83 L1001.86 1212.83 L1002.44 1212.83 L1003.03 1212.83 L1003.62 1212.83 L1004.2 1212.83 L1004.79 1212.83 L1005.38 1212.83 L1005.96 1212.83 L1006.55 1212.83 L1007.14 1212.83 L1007.72 1212.83 L1008.31 1212.83 L1008.9 1212.83 L1009.48 1212.83 L1010.07 1212.83 L1010.65 1212.83 L1011.24 1212.83 L1011.83 1212.83 L1012.41 1212.83 L1013 1212.83 L1013.59 1212.83 L1014.17 1212.83 L1014.76 1212.83 L1015.35 1212.83 L1015.93 1212.83 L1016.52 1212.83 L1017.11 1212.83 L1017.69 1212.83 L1018.28 1212.83 L1018.86 1212.83 L1019.45 1212.83 L1020.04 1212.83 L1020.62 1212.83 L1021.21 1212.83 L1021.8 1212.83 L1022.38 1212.83 L1022.97 1212.83 L1023.56 1212.83 L1024.14 1212.83 L1024.73 1212.83 L1025.32 1212.83 L1025.9 1212.83 L1026.49 1212.83 L1027.07 1212.83 L1027.66 1212.83 L1028.25 1212.83 L1028.83 1212.83 L1029.42 1212.83 L1030.01 1212.83 L1030.59 1212.83 L1031.18 1212.83 L1031.77 1212.83 L1032.35 1212.83 L1032.94 1212.83 L1033.52 1212.83 L1034.11 1212.83 L1034.7 1212.83 L1035.28 1212.83 L1035.87 1212.83 L1036.46 1212.83 L1037.04 1212.83 L1037.63 1212.83 L1038.22 1212.83 L1038.8 1212.83 L1039.39 1212.83 L1039.98 1212.83 L1040.56 1212.83 L1041.15 1212.83 L1041.73 1212.83 L1042.32 1212.83 L1042.91 1212.83 L1043.49 1212.83 L1044.08 1212.83 L1044.67 1212.83 L1045.25 1212.83 L1045.84 1212.83 L1046.43 1212.83 L1047.01 1212.83 L1047.6 1212.83 L1048.19 1212.83 L1048.77 1212.83 L1049.36 1212.83 L1049.94 1212.83 L1050.53 1212.83 L1051.12 1212.83 L1051.7 1212.83 L1052.29 1212.83 L1052.88 1212.83 L1053.46 1212.83 L1054.05 1212.83 L1054.64 1212.83 L1055.22 1212.83 L1055.81 1212.83 L1056.39 1212.83 L1056.98 1212.83 L1057.57 1212.83 L1058.15 1212.83 L1058.74 1212.83 L1059.33 1212.83 L1059.91 1212.83 L1060.5 1212.83 L1061.09 1212.83 L1061.67 1212.83 L1062.26 1212.83 L1062.85 1212.83 L1063.43 1212.83 L1064.02 1212.83 L1064.6 1212.83 L1065.19 1212.83 L1065.78 1212.83 L1066.36 1212.83 L1066.95 1212.83 L1067.54 1212.83 L1068.12 1212.83 L1068.71 1212.83 L1069.3 1212.83 L1069.88 1212.83 L1070.47 1212.83 L1071.06 1212.83 L1071.64 1212.83 L1072.23 1212.83 L1072.81 1212.83 L1073.4 1212.83 L1073.99 1212.83 L1074.57 1212.83 L1075.16 1212.83 L1075.75 1212.83 L1076.33 1212.83 L1076.92 1212.83 L1077.51 1212.83 L1078.09 1212.83 L1078.68 1212.83 L1079.26 1212.83 L1079.85 1212.83 L1080.44 1212.83 L1081.02 1212.83 L1081.61 1212.83 L1082.2 1212.83 L1082.78 1212.83 L1083.37 1212.83 L1083.96 1212.83 L1084.54 1212.83 L1085.13 1212.83 L1085.72 1212.83 L1086.3 1212.83 L1086.89 1212.83 L1087.47 1212.83 L1088.06 1212.83 L1088.65 1212.83 L1089.23 1212.83 L1089.82 1212.83 L1090.41 1212.83 L1090.99 1212.83 L1091.58 1212.83 L1092.17 1212.83 L1092.75 1212.83 L1093.34 1212.83 L1093.93 1212.83 L1094.51 1212.83 L1095.1 1212.83 L1095.68 1212.83 L1096.27 1212.83 L1096.86 1212.83 L1097.44 1212.83 L1098.03 1212.83 L1098.62 1212.83 L1099.2 1212.83 L1099.79 1212.83 L1100.38 1212.83 L1100.96 1212.83 L1101.55 1212.83 L1102.14 1212.83 L1102.72 1212.83 L1103.31 1212.83 L1103.89 1212.83 L1104.48 1212.83 L1105.07 1212.83 L1105.65 1212.83 L1106.24 1212.83 L1106.83 1212.83 L1107.41 1212.83 L1108 1212.83 L1108.59 1212.83 L1109.17 1212.83 L1109.76 1212.83 L1110.34 1212.83 L1110.93 1212.83 L1111.52 1212.83 L1112.1 1212.83 L1112.69 1212.83 L1113.28 1212.83 L1113.86 1212.83 L1114.45 1212.83 L1115.04 1212.83 L1115.62 1212.83 L1116.21 1212.83 L1116.8 1212.83 L1117.38 1212.83 L1117.97 1212.83 L1118.55 1212.83 L1119.14 1212.83 L1119.73 1212.83 L1120.31 1212.83 L1120.9 1212.83 L1121.49 1212.83 L1122.07 1212.83 L1122.66 1212.83 L1123.25 1212.83 L1123.83 1212.83 L1124.42 1212.83 L1125.01 1212.83 L1125.59 1212.83 L1126.18 1212.83 L1126.76 1212.83 L1127.35 1212.83 L1127.94 1212.83 L1128.52 1212.83 L1129.11 1212.83 L1129.7 1212.83 L1130.28 1212.83 L1130.87 1212.83 L1131.46 1212.83 L1132.04 1212.83 L1132.63 1212.83 L1133.21 1212.83 L1133.8 1212.83 L1134.39 1212.83 L1134.97 1212.83 L1135.56 1212.83 L1136.15 1212.83 L1136.73 1212.83 L1137.32 1212.83 L1137.91 1212.83 L1138.49 1212.83 L1139.08 1212.83 L1139.67 1212.83 L1140.25 1212.83 L1140.84 1212.83 L1141.42 1212.83 L1142.01 1212.83 L1142.6 1212.83 L1143.18 1212.83 L1143.77 1212.83 L1144.36 1212.83 L1144.94 1212.83 L1145.53 1212.83 L1146.12 1212.83 L1146.7 1212.83 L1147.29 1212.83 L1147.88 1212.83 L1148.46 1212.83 L1149.05 1212.83 L1149.63 1212.83 L1150.22 1212.83 L1150.81 1212.83 L1151.39 1212.83 L1151.98 1212.83 L1152.57 1212.83 L1153.15 1212.83 L1153.74 1212.83 L1154.33 1212.83 L1154.91 1212.83 L1155.5 1212.83 L1156.09 1212.83 L1156.67 1212.83 L1157.26 1212.83 L1157.84 1212.83 L1158.43 1212.83 L1159.02 1212.83 L1159.6 1212.83 L1160.19 1212.83 L1160.78 1212.83 L1161.36 1212.83 L1161.95 1212.83 L1162.54 1212.83 L1163.12 1212.83 L1163.71 1212.83 L1164.29 1212.83 L1164.88 1212.83 L1165.47 1212.83 L1166.05 1212.83 L1166.64 1212.83 L1167.23 1212.83 L1167.81 1212.83 L1168.4 1212.83 L1168.99 1212.83 L1169.57 1212.83 L1170.16 1212.83 L1170.75 1212.83 L1171.33 1212.83 L1171.92 1212.83 L1172.5 1212.83 L1173.09 1212.83 L1173.68 1212.83 L1174.26 1212.83 L1174.85 1212.83 L1175.44 1212.83 L1176.02 1212.83 L1176.61 1212.83 L1177.2 1212.83 L1177.78 1212.83 L1178.37 1212.83 L1178.96 1212.83 L1179.54 1212.83 L1180.13 1212.83 L1180.71 1212.83 L1181.3 1212.83 L1181.89 1212.83 L1182.47 1212.83 L1183.06 1212.83 L1183.65 1212.83 L1184.23 1212.83 L1184.82 1212.83 L1185.41 1212.83 L1185.99 1212.83 L1186.58 1212.83 L1187.16 1212.83 L1187.75 1212.83 L1188.34 1212.83 L1188.92 1212.83 L1189.51 1212.83 L1190.1 1212.83 L1190.68 1212.83 L1191.27 1212.83 L1191.86 1212.83 L1192.44 1212.83 L1193.03 1212.83 L1193.62 1212.83 L1194.2 1212.83 L1194.79 1212.83 L1195.37 1212.83 L1195.96 1212.83 L1196.55 1212.83 L1197.13 1212.83 L1197.72 1212.83 L1198.31 1212.83 L1198.89 1212.83 L1199.48 1212.83 L1200.07 1212.83 L1200.65 1212.83 L1201.24 1212.83 L1201.83 1212.83 L1202.41 1212.83 L1203 1212.83 L1203.58 1212.83 L1204.17 1212.83 L1204.76 1212.83 L1205.34 1212.83 L1205.93 1212.83 L1206.52 1212.83 L1207.1 1212.83 L1207.69 1212.83 L1208.28 1212.83 L1208.86 1212.83 L1209.45 1212.83 L1210.03 1212.83 L1210.62 1212.83 L1211.21 1212.83 L1211.79 1212.83 L1212.38 1212.83 L1212.97 1212.83 L1213.55 1212.83 L1214.14 1212.83 L1214.73 1212.83 L1215.31 1212.83 L1215.9 1212.83 L1216.49 1212.83 L1217.07 1212.83 L1217.66 1212.83 L1218.24 1212.83 L1218.83 1212.83 L1219.42 1212.83 L1220 1212.83 L1220.59 1212.83 L1221.18 1212.83 L1221.76 1212.83 L1222.35 1212.83 L1222.94 1212.83 L1223.52 1212.83 L1224.11 1212.83 L1224.7 1212.83 L1225.28 1212.83 L1225.87 1212.83 L1226.45 1212.83 L1227.04 1212.83 L1227.63 1212.83 L1228.21 1212.83 L1228.8 1212.83 L1229.39 1212.83 L1229.97 1212.83 L1230.56 1212.83 L1231.15 1212.83 L1231.73 1212.83 L1232.32 1212.83 L1232.91 1212.83 L1233.49 1212.83 L1234.08 1212.83 L1234.66 1212.83 L1235.25 1212.83 L1235.84 1212.83 L1236.42 1212.83 L1237.01 1212.83 L1237.6 1212.83 L1238.18 1212.83 L1238.77 1212.83 L1239.36 1212.83 L1239.94 1212.83 L1240.53 1212.83 L1241.11 1212.83 L1241.7 1212.83 L1242.29 1212.83 L1242.87 1212.83 L1243.46 1212.83 L1244.05 1212.83 L1244.63 1212.83 L1245.22 1212.83 L1245.81 1212.83 L1246.39 1212.83 L1246.98 1212.83 L1247.57 1212.83 L1248.15 1212.83 L1248.74 1212.83 L1249.32 1212.83 L1249.91 1212.83 L1250.5 1212.83 L1251.08 1212.83 L1251.67 1212.83 L1252.26 1212.83 L1252.84 1212.83 L1253.43 1212.83 L1254.02 1212.83 L1254.6 1212.83 L1255.19 1212.83 L1255.78 1212.83 L1256.36 1212.83 L1256.95 1212.83 L1257.53 1212.83 L1258.12 1212.83 L1258.71 1212.83 L1259.29 1212.83 L1259.88 1212.83 L1260.47 1212.83 L1261.05 1212.83 L1261.64 1212.83 L1262.23 1212.83 L1262.81 1212.83 L1263.4 1212.83 L1263.98 1212.83 L1264.57 1212.83 L1265.16 1212.83 L1265.74 1212.83 L1266.33 1212.83 L1266.92 1212.83 L1267.5 1212.83 L1268.09 1212.83 L1268.68 1212.83 L1269.26 1212.83 L1269.85 1212.83 L1270.44 1212.83 L1271.02 1212.83 L1271.61 1212.83 L1272.19 1212.83 L1272.78 1212.83 L1273.37 1212.83 L1273.95 1212.83 L1274.54 1212.83 L1275.13 1212.83 L1275.71 1212.83 L1276.3 1212.83 L1276.89 1212.83 L1277.47 1212.83 L1278.06 1212.83 L1278.65 1212.83 L1279.23 1212.83 L1279.82 1212.83 L1280.4 1212.83 L1280.99 1212.83 L1281.58 1212.83 L1282.16 1212.83 L1282.75 1212.83 L1283.34 1212.83 L1283.92 1212.83 L1284.51 1212.83 L1285.1 1212.83 L1285.68 1212.83 L1286.27 1212.83 L1286.86 1212.83 L1287.44 1212.83 L1288.03 1212.83 L1288.61 1212.83 L1289.2 1212.83 L1289.79 1212.83 L1290.37 1212.83 L1290.96 1212.83 L1291.55 1212.83 L1292.13 1212.83 L1292.72 1212.83 L1293.31 1212.83 L1293.89 1212.83 L1294.48 1212.83 L1295.06 1212.83 L1295.65 1212.83 L1296.24 1212.83 L1296.82 1212.83 L1297.41 1212.83 L1298 1212.83 L1298.58 1212.83 L1299.17 1212.83 L1299.76 1212.83 L1300.34 1212.83 L1300.93 1212.83 L1301.52 1212.83 L1302.1 1212.83 L1302.69 1212.83 L1303.27 1212.83 L1303.86 1212.83 L1304.45 1212.83 L1305.03 1212.83 L1305.62 1212.83 L1306.21 1212.83 L1306.79 1212.83 L1307.38 1212.83 L1307.97 1212.83 L1308.55 1212.83 L1309.14 1212.83 L1309.73 1212.83 L1310.31 1212.83 L1310.9 1212.83 L1311.48 1212.83 L1312.07 1212.83 L1312.66 1212.83 L1313.24 1212.83 L1313.83 1212.83 L1314.42 1212.83 L1315 1212.83 L1315.59 1212.83 L1316.18 1212.83 L1316.76 1212.83 L1317.35 1212.83 L1317.93 1212.83 L1318.52 1212.83 L1319.11 1212.83 L1319.69 1212.83 L1320.28 1212.83 L1320.87 1212.83 L1321.45 1212.83 L1322.04 1212.83 L1322.63 1212.83 L1323.21 1212.83 L1323.8 1212.83 L1324.39 1212.83 L1324.97 1212.83 L1325.56 1212.83 L1326.14 1212.83 L1326.73 1212.83 L1327.32 1212.83 L1327.9 1212.83 L1328.49 1212.83 L1329.08 1212.83 L1329.66 1212.83 L1330.25 1212.83 L1330.84 1212.83 L1331.42 1212.83 L1332.01 1212.83 L1332.6 1212.83 L1333.18 1212.83 L1333.77 1212.83 L1334.35 1212.83 L1334.94 1212.83 L1335.53 1212.83 L1336.11 1212.83 L1336.7 1212.83 L1337.29 1212.83 L1337.87 1212.83 L1338.46 1212.83 L1339.05 1212.83 L1339.63 1212.83 L1340.22 1212.83 L1340.8 1212.83 L1341.39 1212.83 L1341.98 1212.83 L1342.56 1212.83 L1343.15 1212.83 L1343.74 1212.83 L1344.32 1212.83 L1344.91 1212.83 L1345.5 1212.83 L1346.08 1212.83 L1346.67 1212.83 L1347.26 1212.83 L1347.84 1212.83 L1348.43 1212.83 L1349.01 1212.83 L1349.6 1212.83 L1350.19 1212.83 L1350.77 1212.83 L1351.36 1212.83 L1351.95 1212.83 L1352.53 1212.83 L1353.12 1212.83 L1353.71 1212.83 L1354.29 1212.83 L1354.88 1212.83 L1355.47 1212.83 L1356.05 1212.83 L1356.64 1212.83 L1357.22 1212.83 L1357.81 1212.83 L1358.4 1212.83 L1358.98 1212.83 L1359.57 1212.83 L1360.16 1212.83 L1360.74 1212.83 L1361.33 1212.83 L1361.92 1212.83 L1362.5 1212.83 L1363.09 1212.83 L1363.68 1212.83 L1364.26 1212.83 L1364.85 1212.83 L1365.43 1212.83 L1366.02 1212.83 L1366.61 1212.83 L1367.19 1212.83 L1367.78 1212.83 L1368.37 1212.83 L1368.95 1212.83 L1369.54 1212.83 L1370.13 1212.83 L1370.71 1212.83 L1371.3 1212.83 L1371.88 1212.83 L1372.47 1212.83 L1373.06 1212.83 L1373.64 1212.83 L1374.23 1212.83 L1374.82 1212.83 L1375.4 1212.83 L1375.99 1212.83 L1376.58 1212.83 L1377.16 1212.83 L1377.75 1212.83 L1378.34 1212.83 L1378.92 1212.83 L1379.51 1212.83 L1380.09 1212.83 L1380.68 1212.83 L1381.27 1212.83 L1381.85 1212.83 L1382.44 1212.83 L1383.03 1212.83 L1383.61 1212.83 L1384.2 1212.83 L1384.79 1212.83 L1385.37 1212.83 L1385.96 1212.83 L1386.55 1212.83 L1387.13 1212.83 L1387.72 1212.83 L1388.3 1212.83 L1388.89 1212.83 L1389.48 1212.83 L1390.06 1212.83 L1390.65 1212.83 L1391.24 1212.83 L1391.82 1212.83 L1392.41 1212.83 L1393 1212.83 L1393.58 1212.83 L1394.17 1212.83 L1394.75 1212.83 L1395.34 1212.83 L1395.93 1212.83 L1396.51 1212.83 L1397.1 1212.83 L1397.69 1212.83 L1398.27 1212.83 L1398.86 1212.83 L1399.45 1212.83 L1400.03 1212.83 L1400.62 1212.83 L1401.21 1212.83 L1401.79 1212.83 L1402.38 1212.83 L1402.96 1212.83 L1403.55 1212.83 L1404.14 1212.83 L1404.72 1212.83 L1405.31 1212.83 L1405.9 1212.83 L1406.48 1212.83 L1407.07 1212.83 L1407.66 1212.83 L1408.24 1212.83 L1408.83 1212.83 L1409.42 1212.83 L1410 1212.83 L1410.59 1212.83 L1411.17 1212.83 L1411.76 1212.83 L1412.35 1212.83 L1412.93 1212.83 L1413.52 1212.83 L1414.11 1212.83 L1414.69 1212.83 L1415.28 1212.83 L1415.87 1212.83 L1416.45 1212.83 L1417.04 1212.83 L1417.63 1212.83 L1418.21 1212.83 L1418.8 1212.83 L1419.38 1212.83 L1419.97 1212.83 L1420.56 1212.83 L1421.14 1212.83 L1421.73 1212.83 L1422.32 1212.83 L1422.9 1212.83 L1423.49 1212.83 L1424.08 1212.83 L1424.66 1212.83 L1425.25 1212.83 L1425.83 1212.83 L1426.42 1212.83 L1427.01 1212.83 L1427.59 1212.83 L1428.18 1212.83 L1428.77 1212.83 L1429.35 1212.83 L1429.94 1212.83 L1430.53 1212.83 L1431.11 1212.83 L1431.7 1212.83 L1432.29 1212.83 L1432.87 1212.83 L1433.46 1212.83 L1434.04 1212.83 L1434.63 1212.83 L1435.22 1212.83 L1435.8 1212.83 L1436.39 1212.83 L1436.98 1212.83 L1437.56 1212.83 L1438.15 1212.83 L1438.74 1212.83 L1439.32 1212.83 L1439.91 1212.83 L1440.5 1212.83 L1441.08 1212.83 L1441.67 1212.83 L1442.25 1212.83 L1442.84 1212.83 L1443.43 1212.83 L1444.01 1212.83 L1444.6 1212.83 L1445.19 1212.83 L1445.77 1212.83 L1446.36 1212.83 L1446.95 1212.83 L1447.53 1212.83 L1448.12 1212.83 L1448.7 1212.83 L1449.29 1212.83 L1449.88 1212.83 L1450.46 1212.83 L1451.05 1212.83 L1451.64 1212.83 L1452.22 1212.83 L1452.81 1212.83 L1453.4 1212.83 L1453.98 1212.83 L1454.57 1212.83 L1455.16 1212.83 L1455.74 1212.83 L1456.33 1212.83 L1456.91 1212.83 L1457.5 1212.83 L1458.09 1212.83 L1458.67 1212.83 L1459.26 1212.83 L1459.85 1212.83 L1460.43 1212.83 L1461.02 1212.83 L1461.61 1212.83 L1462.19 1212.83 L1462.78 1212.83 L1463.37 1212.83 L1463.95 1212.83 L1464.54 1212.83 L1465.12 1212.83 L1465.71 1212.83 L1466.3 1212.83 L1466.88 1212.83 L1467.47 1212.83 L1468.06 1212.83 L1468.64 1212.83 L1469.23 1212.83 L1469.82 1212.83 L1470.4 1212.83 L1470.99 1212.83 L1471.57 1212.83 L1472.16 1212.83 L1472.75 1212.83 L1473.33 1212.83 L1473.92 1212.83 L1474.51 1212.83 L1475.09 1212.83 L1475.68 1212.83 L1476.27 1212.83 L1476.85 1212.83 L1477.44 1212.83 L1478.03 1212.83 L1478.61 1212.83 L1479.2 1212.83 L1479.78 1212.83 L1480.37 1212.83 L1480.96 1212.83 L1481.54 1212.83 L1482.13 1212.83 L1482.72 1212.83 L1483.3 1212.83 L1483.89 1212.83 L1484.48 1212.83 L1485.06 1212.83 L1485.65 1212.83 L1486.24 1212.83 L1486.82 1212.83 L1487.41 1212.83 L1487.99 1212.83 L1488.58 1212.83 L1489.17 1212.83 L1489.75 1212.83 L1490.34 1212.83 L1490.93 1212.83 L1491.51 1212.83 L1492.1 1212.83 L1492.69 1212.83 L1493.27 1212.83 L1493.86 1212.83 L1494.45 1212.83 L1495.03 1212.83 L1495.62 1212.83 L1496.2 1212.83 L1496.79 1212.83 L1497.38 1212.83 L1497.96 1212.83 L1498.55 1212.83 L1499.14 1212.83 L1499.72 1212.83 L1500.31 1212.83 L1500.9 1212.83 L1501.48 1212.83 L1502.07 1212.83 L1502.65 1212.83 L1503.24 1212.83 L1503.83 1212.83 L1504.41 1212.83 L1505 1212.83 L1505.59 1212.83 L1506.17 1212.83 L1506.76 1212.83 L1507.35 1212.83 L1507.93 1212.83 L1508.52 1212.83 L1509.11 1212.83 L1509.69 1212.83 L1510.28 1212.83 L1510.86 1212.83 L1511.45 1212.83 L1512.04 1212.83 L1512.62 1212.83 L1513.21 1212.83 L1513.8 1212.83 L1514.38 1212.83 L1514.97 1212.83 L1515.56 1212.83 L1516.14 1212.83 L1516.73 1212.83 L1517.32 1212.83 L1517.9 1212.83 L1518.49 1212.83 L1519.07 1212.83 L1519.66 1212.83 L1520.25 1212.83 L1520.83 1212.83 L1521.42 1212.83 L1522.01 1212.83 L1522.59 1212.83 L1523.18 1212.83 L1523.77 1212.83 L1524.35 1212.83 L1524.94 1212.83 L1525.52 1212.83 L1526.11 1212.83 L1526.7 1212.83 L1527.28 1212.83 L1527.87 1212.83 L1528.46 1212.83 L1529.04 1212.83 L1529.63 1212.83 L1530.22 1212.83 L1530.8 1212.83 L1531.39 1212.83 L1531.98 1212.83 L1532.56 1212.83 L1533.15 1212.83 L1533.73 1212.83 L1534.32 1212.83 L1534.91 1212.83 L1535.49 1212.83 L1536.08 1212.83 L1536.67 1212.83 L1537.25 1212.83 L1537.84 1212.83 L1538.43 1212.83 L1539.01 1212.83 L1539.6 1212.83 L1540.19 1212.83 L1540.77 1212.83 L1541.36 1212.83 L1541.94 1212.83 L1542.53 1212.83 L1543.12 1212.83 L1543.7 1212.83 L1544.29 1212.83 L1544.88 1212.83 L1545.46 1212.83 L1546.05 1212.83 L1546.64 1212.83 L1547.22 1212.83 L1547.81 1212.83 L1548.4 1212.83 L1548.98 1212.83 L1549.57 1212.83 L1550.15 1212.83 L1550.74 1212.83 L1551.33 1212.83 L1551.91 1212.83 L1552.5 1212.83 L1553.09 1212.83 L1553.67 1212.83 L1554.26 1212.83 L1554.85 1212.83 L1555.43 1212.83 L1556.02 1212.83 L1556.6 1212.83 L1557.19 1212.83 L1557.78 1212.83 L1558.36 1212.83 L1558.95 1212.83 L1559.54 1212.83 L1560.12 1212.83 L1560.71 1212.83 L1561.3 1212.83 L1561.88 1212.83 L1562.47 1212.83 L1563.06 1212.83 L1563.64 1212.83 L1564.23 1212.83 L1564.81 1212.83 L1565.4 1212.83 L1565.99 1212.83 L1566.57 1212.83 L1567.16 1212.83 L1567.75 1212.83 L1568.33 1212.83 L1568.92 1212.83 L1569.51 1212.83 L1570.09 1212.83 L1570.68 1212.83 L1571.27 1212.83 L1571.85 1212.83 L1572.44 1212.83 L1573.02 1212.83 L1573.61 1212.83 L1574.2 1212.83 L1574.78 1212.83 L1575.37 1212.83 L1575.96 1212.83 L1576.54 1212.83 L1577.13 1212.83 L1577.72 1212.83 L1578.3 1212.83 L1578.89 1212.83 L1579.47 1212.83 L1580.06 1212.83 L1580.65 1212.83 L1581.23 1212.83 L1581.82 1212.83 L1582.41 1212.83 L1582.99 1212.83 L1583.58 1212.83 L1584.17 1212.83 L1584.75 1212.83 L1585.34 1212.83 L1585.93 1212.83 L1586.51 1212.83 L1587.1 1212.83 L1587.68 1212.83 L1588.27 1212.83 L1588.86 1212.83 L1589.44 1212.83 L1590.03 1212.83 L1590.62 1212.83 L1591.2 1212.83 L1591.79 1212.83 L1592.38 1212.83 L1592.96 1212.83 L1593.55 1212.83 L1594.14 1212.83 L1594.72 1212.83 L1595.31 1212.83 L1595.89 1212.83 L1596.48 1212.83 L1597.07 1212.83 L1597.65 1212.83 L1598.24 1212.83 L1598.83 1212.83 L1599.41 1212.83 L1600 1212.83 L1600.59 1212.83 L1601.17 1212.83 L1601.76 1212.83 L1602.34 1212.83 L1602.93 1212.83 L1603.52 1212.83 L1604.1 1212.83 L1604.69 1212.83 L1605.28 1212.83 L1605.86 1212.83 L1606.45 1212.83 L1607.04 1212.83 L1607.62 1212.83 L1608.21 1212.83 L1608.8 1212.83 L1609.38 1212.83 L1609.97 1212.83 L1610.55 1212.83 L1611.14 1212.83 L1611.73 1212.83 L1612.31 1212.83 L1612.9 1212.83 L1613.49 1212.83 L1614.07 1212.83 L1614.66 1212.83 L1615.25 1212.83 L1615.83 1212.83 L1616.42 1212.83 L1617.01 1212.83 L1617.59 1212.83 L1618.18 1212.83 L1618.76 1212.83 L1619.35 1212.83 L1619.94 1212.83 L1620.52 1212.83 L1621.11 1212.83 L1621.7 1212.83 L1622.28 1212.83 L1622.87 1212.83 L1623.46 1212.83 L1624.04 1212.83 L1624.63 1212.83 L1625.22 1212.83 L1625.8 1212.83 L1626.39 1212.83 L1626.97 1212.83 L1627.56 1212.83 L1628.15 1212.83 L1628.73 1212.83 L1629.32 1212.83 L1629.91 1212.83 L1630.49 1212.83 L1631.08 1212.83 L1631.67 1212.83 L1632.25 1212.83 L1632.84 1212.83 L1633.42 1212.83 L1634.01 1212.83 L1634.6 1212.83 L1635.18 1212.83 L1635.77 1212.83 L1636.36 1212.83 L1636.94 1212.83 L1637.53 1212.83 L1638.12 1212.83 L1638.7 1212.83 L1639.29 1212.83 L1639.88 1212.83 L1640.46 1212.83 L1641.05 1212.83 L1641.63 1212.83 L1642.22 1212.83 L1642.81 1212.83 L1643.39 1212.83 L1643.98 1212.83 L1644.57 1212.83 L1645.15 1212.83 L1645.74 1212.83 L1646.33 1212.83 L1646.91 1212.83 L1647.5 1212.83 L1648.09 1212.83 L1648.67 1212.83 L1649.26 1212.83 L1649.84 1212.83 L1650.43 1212.83 L1651.02 1212.83 L1651.6 1212.83 L1652.19 1212.83 L1652.78 1212.83 L1653.36 1212.83 L1653.95 1212.83 L1654.54 1212.83 L1655.12 1212.83 L1655.71 1212.83 L1656.29 1212.83 L1656.88 1212.83 L1657.47 1212.83 L1658.05 1212.83 L1658.64 1212.83 L1659.23 1212.83 L1659.81 1212.83 L1660.4 1212.83 L1660.99 1212.83 L1661.57 1212.83 L1662.16 1212.83 L1662.75 1212.83 L1663.33 1212.83 L1663.92 1212.83 L1664.5 1212.83 L1665.09 1212.83 L1665.68 1212.83 L1666.26 1212.83 L1666.85 1212.83 L1667.44 1212.83 L1668.02 1212.83 L1668.61 1212.83 L1669.2 1212.83 L1669.78 1212.83 L1670.37 1212.83 L1670.96 1212.83 L1671.54 1212.83 L1672.13 1212.83 L1672.71 1212.83 L1673.3 1212.83 L1673.89 1212.83 L1674.47 1212.83 L1675.06 1212.83 L1675.65 1212.83 L1676.23 1212.83 L1676.82 1212.83 L1677.41 1212.83 L1677.99 1212.83 L1678.58 1212.83 L1679.17 1212.83 L1679.75 1212.83 L1680.34 1212.83 L1680.92 1212.83 L1681.51 1212.83 L1682.1 1212.83 L1682.68 1212.83 L1683.27 1212.83 L1683.86 1212.83 L1684.44 1212.83 L1685.03 1212.83 L1685.62 1212.83 L1686.2 1212.83 L1686.79 1212.83 L1687.37 1212.83 L1687.96 1212.83 L1688.55 1212.83 L1689.13 1212.83 L1689.72 1212.83 L1690.31 1212.83 L1690.89 1212.83 L1691.48 1212.83 L1692.07 1212.83 L1692.65 1212.83 L1693.24 1212.83 L1693.83 1212.83 L1694.41 1212.83 L1695 1212.83 L1695.58 1212.83 L1696.17 1212.83 L1696.76 1212.83 L1697.34 1212.83 L1697.93 1212.83 L1698.52 1212.83 L1699.1 1212.83 L1699.69 1212.83 L1700.28 1212.83 L1700.86 1212.83 L1701.45 1212.83 L1702.04 1212.83 L1702.62 1212.83 L1703.21 1212.83 L1703.79 1212.83 L1704.38 1212.83 L1704.97 1212.83 L1705.55 1212.83 L1706.14 1212.83 L1706.73 1212.83 L1707.31 1212.83 L1707.9 1212.83 L1708.49 1212.83 L1709.07 1212.83 L1709.66 1212.83 L1710.24 1212.83 L1710.83 1212.83 L1711.42 1212.83 L1712 1212.83 L1712.59 1212.83 L1713.18 1212.83 L1713.76 1212.83 L1714.35 1212.83 L1714.94 1212.83 L1715.52 1212.83 L1716.11 1212.83 L1716.7 1212.83 L1717.28 1212.83 L1717.87 1212.83 L1718.45 1212.83 L1719.04 1212.83 L1719.63 1212.83 L1720.21 1212.83 L1720.8 1212.83 L1721.39 1212.83 L1721.97 1212.83 L1722.56 1212.83 L1723.15 1212.83 L1723.73 1212.83 L1724.32 1212.83 L1724.91 1212.83 L1725.49 1212.83 L1726.08 1212.83 L1726.66 1212.83 L1727.25 1212.83 L1727.84 1212.83 L1728.42 1212.83 L1729.01 1212.83 L1729.6 1212.83 L1730.18 1212.83 L1730.77 1212.83 L1731.36 1212.83 L1731.94 1212.83 L1732.53 1212.83 L1733.11 1212.83 L1733.7 1212.83 L1734.29 1212.83 L1734.87 1212.83 L1735.46 1212.83 L1736.05 1212.83 L1736.63 1212.83 L1737.22 1212.83 L1737.81 1212.83 L1738.39 1212.83 L1738.98 1212.83 L1739.57 1212.83 L1740.15 1212.83 L1740.74 1212.83 L1741.32 1212.83 L1741.91 1212.83 L1742.5 1212.83 L1743.08 1212.83 L1743.67 1212.83 L1744.26 1212.83 L1744.84 1212.83 L1745.43 1212.83 L1746.02 1212.83 L1746.6 1212.83 L1747.19 1212.83 L1747.78 1212.83 L1748.36 1212.83 L1748.95 1212.83 L1749.53 1212.83 L1750.12 1212.83 L1750.71 1212.83 L1751.29 1212.83 L1751.88 1212.83 L1752.47 1212.83 L1753.05 1212.83 L1753.64 1212.83 L1754.23 1212.83 L1754.81 1212.83 L1755.4 1212.83 L1755.99 1212.83 L1756.57 1212.83 L1757.16 1212.83 L1757.74 1212.83 L1758.33 1212.83 L1758.92 1212.83 L1759.5 1212.83 L1760.09 1212.83 L1760.68 1212.83 L1761.26 1212.83 L1761.85 1212.83 L1762.44 1212.83 L1763.02 1212.83 L1763.61 1212.83 L1764.19 1212.83 L1764.78 1212.83 L1765.37 1212.83 L1765.95 1212.83 L1766.54 1212.83 L1767.13 1212.83 L1767.71 1212.83 L1768.3 1212.83 L1768.89 1212.83 L1769.47 1212.83 L1770.06 1212.83 L1770.65 1212.83 L1771.23 1212.83 L1771.82 1212.83 L1772.4 1212.83 L1772.99 1212.83 L1773.58 1212.83 L1774.16 1212.83 L1774.75 1212.83 L1775.34 1212.83 L1775.92 1212.83 L1776.51 1212.83 L1777.1 1212.83 L1777.68 1212.83 L1778.27 1212.83 L1778.86 1212.83 L1779.44 1212.83 L1780.03 1212.83 L1780.61 1212.83 L1781.2 1212.83 L1781.79 1212.83 L1782.37 1212.83 L1782.96 1212.83 L1783.55 1212.83 L1784.13 1212.83 L1784.72 1212.83 L1785.31 1212.83 L1785.89 1212.83 L1786.48 1212.83 L1787.06 1212.83 L1787.65 1212.83 L1788.24 1212.83 L1788.82 1212.83 L1789.41 1212.83 L1790 1212.83 L1790.58 1212.83 L1791.17 1212.83 L1791.76 1212.83 L1792.34 1212.83 L1792.93 1212.83 L1793.52 1212.83 L1794.1 1212.83 L1794.69 1212.83 L1795.27 1212.83 L1795.86 1212.83 L1796.45 1212.83 L1797.03 1212.83 L1797.62 1212.83 L1798.21 1212.83 L1798.79 1212.83 L1799.38 1212.83 L1799.97 1212.83 L1800.55 1212.83 L1801.14 1212.83 L1801.73 1212.83 L1802.31 1212.83 L1802.9 1212.83 L1803.48 1212.83 L1804.07 1212.83 L1804.66 1212.83 L1805.24 1212.83 L1805.83 1212.83 L1806.42 1212.83 L1807 1212.83 L1807.59 1212.83 L1808.18 1212.83 L1808.76 1212.83 L1809.35 1212.83 L1809.94 1212.83 L1810.52 1212.83 L1811.11 1212.83 L1811.69 1212.83 L1812.28 1212.83 L1812.87 1212.83 L1813.45 1212.83 L1814.04 1212.83 L1814.63 1212.83 L1815.21 1212.83 L1815.8 1212.83 L1816.39 1212.83 L1816.97 1212.83 L1817.56 1212.83 L1818.14 1212.83 L1818.73 1212.83 L1819.32 1212.83 L1819.9 1212.83 L1820.49 1212.83 L1821.08 1212.83 L1821.66 1212.83 L1822.25 1212.83 L1822.84 1212.83 L1823.42 1212.83 L1824.01 1212.83 L1824.6 1212.83 L1825.18 1212.83 L1825.77 1212.83 L1826.35 1212.83 L1826.94 1212.83 L1827.53 1212.83 L1828.11 1212.83 L1828.7 1212.83 L1829.29 1212.83 L1829.87 1212.83 L1830.46 1212.83 L1831.05 1212.83 L1831.63 1212.83 L1832.22 1212.83 L1832.81 1212.83 L1833.39 1212.83 L1833.98 1212.83 L1834.56 1212.83 L1835.15 1212.83 L1835.74 1212.83 L1836.32 1212.83 L1836.91 1212.83 L1837.5 1212.83 L1838.08 1212.83 L1838.67 1212.83 L1839.26 1212.83 L1839.84 1212.83 L1840.43 1212.83 L1841.01 1212.83 L1841.6 1212.83 L1842.19 1212.83 L1842.77 1212.83 L1843.36 1212.83 L1843.95 1212.83 L1844.53 1212.83 L1845.12 1212.83 L1845.71 1212.83 L1846.29 1212.83 L1846.88 1212.83 L1847.47 1212.83 L1848.05 1212.83 L1848.64 1212.83 L1849.22 1212.83 L1849.81 1212.83 L1850.4 1212.83 L1850.98 1212.83 L1851.57 1212.83 L1852.16 1212.83 L1852.74 1212.83 L1853.33 1212.83 L1853.92 1212.83 L1854.5 1212.83 L1855.09 1212.83 L1855.68 1212.83 L1856.26 1212.83 L1856.85 1212.83 L1857.43 1212.83 L1858.02 1212.83 L1858.61 1212.83 L1859.19 1212.83 L1859.78 1212.83 L1860.37 1212.83 L1860.95 1212.83 L1861.54 1212.83 L1862.13 1212.83 L1862.71 1212.83 L1863.3 1212.83 L1863.88 1212.83 L1864.47 1212.83 L1865.06 1212.83 L1865.64 1212.83 L1866.23 1212.83 L1866.82 1212.83 L1867.4 1212.83 L1867.99 1212.83 L1868.58 1212.83 L1869.16 1212.83 L1869.75 1212.83 L1870.34 1212.83 L1870.92 1212.83 L1871.51 1212.83 L1872.09 1212.83 L1872.68 1212.83 L1873.27 1212.83 L1873.85 1212.83 L1874.44 1212.83 L1875.03 1212.83 L1875.61 1212.83 L1876.2 1212.83 L1876.79 1212.83 L1877.37 1212.83 L1877.96 1212.83 L1878.55 1212.83 L1879.13 1212.83 L1879.72 1212.83 L1880.3 1212.83 L1880.89 1212.83 L1881.48 1212.83 L1882.06 1212.83 L1882.65 1212.83 L1883.24 1212.83 L1883.82 1212.83 L1884.41 1212.83 L1885 1212.83 L1885.58 1212.83 L1886.17 1212.83 L1886.76 1212.83 L1887.34 1212.83 L1887.93 1212.83 L1888.51 1212.83 L1889.1 1212.83 L1889.69 1212.83 L1890.27 1212.83 L1890.86 1212.83 L1891.45 1212.83 L1892.03 1212.83 L1892.62 1212.83 L1893.21 1212.83 L1893.79 1212.83 L1894.38 1212.83 L1894.96 1212.83 L1895.55 1212.83 L1896.14 1212.83 L1896.72 1212.83 L1897.31 1212.83 L1897.9 1212.83 L1898.48 1212.83 L1899.07 1212.83 L1899.66 1212.83 L1900.24 1212.83 L1900.83 1212.83 L1901.42 1212.83 L1902 1212.83 L1902.59 1212.83 L1903.17 1212.83 L1903.76 1212.83 L1904.35 1212.83 L1904.93 1212.83 L1905.52 1212.83 L1906.11 1212.83 L1906.69 1212.83 L1907.28 1212.83 L1907.87 1212.83 L1908.45 1212.83 L1909.04 1212.83 L1909.63 1212.83 L1910.21 1212.83 L1910.8 1212.83 L1911.38 1212.83 L1911.97 1212.83 L1912.56 1212.83 L1913.14 1212.83 L1913.73 1212.83 L1914.32 1212.83 L1914.9 1212.83 L1915.49 1212.83 L1916.08 1212.83 L1916.66 1212.83 L1917.25 1212.83 L1917.83 1212.83 L1918.42 1212.83 L1919.01 1212.83 L1919.59 1212.83 L1920.18 1212.83 L1920.77 1212.83 L1921.35 1212.83 L1921.94 1212.83 L1922.53 1212.83 L1923.11 1212.83 L1923.7 1212.83 L1924.29 1212.83 L1924.87 1212.83 L1925.46 1212.83 L1926.04 1212.83 L1926.63 1212.83 L1927.22 1212.83 L1927.8 1212.83 L1928.39 1212.83 L1928.98 1212.83 L1929.56 1212.83 L1930.15 1212.83 L1930.74 1212.83 L1931.32 1212.83 L1931.91 1212.83 L1932.5 1212.83 L1933.08 1212.83 L1933.67 1212.83 L1934.25 1212.83 L1934.84 1212.83 L1935.43 1212.83 L1936.01 1212.83 L1936.6 1212.83 L1937.19 1212.83 L1937.77 1212.83 L1938.36 1212.83 L1938.95 1212.83 L1939.53 1212.83 L1940.12 1212.83 L1940.71 1212.83 L1941.29 1212.83 L1941.88 1212.83 L1942.46 1212.83 L1943.05 1212.83 L1943.64 1212.83 L1944.22 1212.83 L1944.81 1212.83 L1945.4 1212.83 L1945.98 1212.83 L1946.57 1212.83 L1947.16 1212.83 L1947.74 1212.83 L1948.33 1212.83 L1948.91 1212.83 L1949.5 1212.83 L1950.09 1212.83 L1950.67 1212.83 L1951.26 1212.83 L1951.85 1212.83 L1952.43 1212.83 L1953.02 1212.83 L1953.61 1212.83 L1954.19 1212.83 L1954.78 1212.83 L1955.37 1212.83 L1955.95 1212.83 L1956.54 1212.83 L1957.12 1212.83 L1957.71 1212.83 L1958.3 1212.83 L1958.88 1212.83 L1959.47 1212.83 L1960.06 1212.83 L1960.64 1212.83 L1961.23 1212.83 L1961.82 1212.83 L1962.4 1212.83 L1962.99 1212.83 L1963.58 1212.83 L1964.16 1212.83 L1964.75 1212.83 L1965.33 1212.83 L1965.92 1212.83 L1966.51 1212.83 L1967.09 1212.83 L1967.68 1212.83 L1968.27 1212.83 L1968.85 1212.83 L1969.44 1212.83 L1970.03 1212.83 L1970.61 1212.83 L1971.2 1212.83 L1971.78 1212.83 L1972.37 1212.83 L1972.96 1212.83 L1973.54 1212.83 L1974.13 1212.83 L1974.72 1212.83 L1975.3 1212.83 L1975.89 1212.83 L1976.48 1212.83 L1977.06 1212.83 L1977.65 1212.83 L1978.24 1212.83 L1978.82 1212.83 L1979.41 1212.83 L1979.99 1212.83 L1980.58 1212.83 L1981.17 1212.83 L1981.75 1212.83 L1982.34 1212.83 L1982.93 1212.83 L1983.51 1212.83 L1984.1 1212.83 L1984.69 1212.83 L1985.27 1212.83 L1985.86 1212.83 L1986.45 1212.83 L1987.03 1212.83 L1987.62 1212.83 L1988.2 1212.83 L1988.79 1212.83 L1989.38 1212.83 L1989.96 1212.83 L1990.55 1212.83 L1991.14 1212.83 L1991.72 1212.83 L1992.31 1212.83 L1992.9 1212.83 L1993.48 1212.83 L1994.07 1212.83 L1994.65 1212.83 L1995.24 1212.83 L1995.83 1212.83 L1996.41 1212.83 L1997 1212.83 L1997.59 1212.83 L1998.17 1212.83 L1998.76 1212.83 L1999.35 1212.83 L1999.93 1212.83 L2000.52 1212.83 L2001.11 1212.83 L2001.69 1212.83 L2002.28 1212.83 L2002.86 1212.83 L2003.45 1212.83 L2004.04 1212.83 L2004.62 1212.83 L2005.21 1212.83 L2005.8 1212.83 L2006.38 1212.83 L2006.97 1212.83 L2007.56 1212.83 L2008.14 1212.83 L2008.73 1212.83 L2009.32 1212.83 L2009.9 1212.83 L2010.49 1212.83 L2011.07 1212.83 L2011.66 1212.83 L2012.25 1212.83 L2012.83 1212.83 L2013.42 1212.83 L2014.01 1212.83 L2014.59 1212.83 L2015.18 1212.83 L2015.77 1212.83 L2016.35 1212.83 L2016.94 1212.83 L2017.53 1212.83 L2018.11 1212.83 L2018.7 1212.83 L2019.28 1212.83 L2019.87 1212.83 L2020.46 1212.83 L2021.04 1212.83 L2021.63 1212.83 L2022.22 1212.83 L2022.8 1212.83 L2023.39 1212.83 L2023.98 1212.83 L2024.56 1212.83 L2025.15 1212.83 L2025.73 1212.83 L2026.32 1212.83 L2026.91 1212.83 L2027.49 1212.83 L2028.08 1212.83 L2028.67 1212.83 L2029.25 1212.83 L2029.84 1212.83 L2030.43 1212.83 L2031.01 1212.83 L2031.6 1212.83 L2032.19 1212.83 L2032.77 1212.83 L2033.36 1212.83 L2033.94 1212.83 L2034.53 1212.83 L2035.12 1212.83 L2035.7 1212.83 L2036.29 1212.83 L2036.88 1212.83 L2037.46 1212.83 L2038.05 1212.83 L2038.64 1212.83 L2039.22 1212.83 L2039.81 1212.83 L2040.4 1212.83 L2040.98 1212.83 L2041.57 1212.83 L2042.15 1212.83 L2042.74 1212.83 L2043.33 1212.83 L2043.91 1212.83 L2044.5 1212.83 L2045.09 1212.83 L2045.67 1212.83 L2046.26 1212.83 L2046.85 1212.83 L2047.43 1212.83 L2048.02 1212.83 L2048.6 1212.83 L2049.19 1212.83 L2049.78 1212.83 L2050.36 1212.83 L2050.95 1212.83 L2051.54 1212.83 L2052.12 1212.83 L2052.71 1212.83 L2053.3 1212.83 L2053.88 1212.83 L2054.47 1212.83 L2055.06 1212.83 L2055.64 1212.83 L2056.23 1212.83 L2056.81 1212.83 L2057.4 1212.83 L2057.99 1212.83 L2058.57 1212.83 L2059.16 1212.83 L2059.75 1212.83 L2060.33 1212.83 L2060.92 1212.83 L2061.51 1212.83 L2062.09 1212.83 L2062.68 1212.83 L2063.27 1212.83 L2063.85 1212.83 L2064.44 1212.83 L2065.02 1212.83 L2065.61 1212.83 L2066.2 1212.83 L2066.78 1212.83 L2067.37 1212.83 L2067.96 1212.83 L2068.54 1212.83 L2069.13 1212.83 L2069.72 1212.83 L2070.3 1212.83 L2070.89 1212.83 L2071.48 1212.83 L2072.06 1212.83 L2072.65 1212.83 L2073.23 1212.83 L2073.82 1212.83 L2074.41 1212.83 L2074.99 1212.83 L2075.58 1212.83 L2076.17 1212.83 L2076.75 1212.83 L2077.34 1212.83 L2077.93 1212.83 L2078.51 1212.83 L2079.1 1212.83 L2079.68 1212.83 L2080.27 1212.83 L2080.86 1212.83 L2081.44 1212.83 L2082.03 1212.83 L2082.62 1212.83 L2083.2 1212.83 L2083.79 1212.83 L2084.38 1212.83 L2084.96 1212.83 L2085.55 1212.83 L2086.14 1212.83 L2086.72 1212.83 L2087.31 1212.83 L2087.89 1212.83 L2088.48 1212.83 L2089.07 1212.83 L2089.65 1212.83 L2090.24 1212.83 L2090.83 1212.83 L2091.41 1212.83 L2092 1212.83 L2092.59 1212.83 L2093.17 1212.83 L2093.76 1212.83 L2094.35 1212.83 L2094.93 1212.83 L2095.52 1212.83 L2096.1 1212.83 L2096.69 1212.83 L2097.28 1212.83 L2097.86 1212.83 L2098.45 1212.83 L2099.04 1212.83 L2099.62 1212.83 L2100.21 1212.83 L2100.8 1212.83 L2101.38 1212.83 L2101.97 1212.83 L2102.55 1212.83 L2103.14 1212.83 L2103.73 1212.83 L2104.31 1212.83 L2104.9 1212.83 L2105.49 1212.83 L2106.07 1212.83 L2106.66 1212.83 L2107.25 1212.83 L2107.83 1212.83 L2108.42 1212.83 L2109.01 1212.83 L2109.59 1212.83 L2110.18 1212.83 L2110.76 1212.83 L2111.35 1212.83 L2111.94 1212.83 L2112.52 1212.83 L2113.11 1212.83 L2113.7 1212.83 L2114.28 1212.83 L2114.87 1212.83 L2115.46 1212.83 L2116.04 1212.83 L2116.63 1212.83 L2117.22 1212.83 L2117.8 1212.83 L2118.39 1212.83 L2118.97 1212.83 L2119.56 1212.83 L2120.15 1212.83 L2120.73 1212.83 L2121.32 1212.83 L2121.91 1212.83 L2122.49 1212.83 L2123.08 1212.83 L2123.67 1212.83 L2124.25 1212.83 L2124.84 1212.83 L2125.42 1212.83 L2126.01 1212.83 L2126.6 1212.83 L2127.18 1212.83 L2127.77 1212.83 L2128.36 1212.83 L2128.94 1212.83 L2129.53 1212.83 L2130.12 1212.83 L2130.7 1212.83 L2131.29 1212.83 L2131.88 1212.83 L2132.46 1212.83 L2133.05 1212.83 L2133.63 1212.83 L2134.22 1212.83 L2134.81 1212.83 L2135.39 1212.83 L2135.98 1212.83 L2136.57 1212.83 L2137.15 1212.83 L2137.74 1212.83 L2138.33 1212.83 L2138.91 1212.83 L2139.5 1212.83 L2140.09 1212.83 L2140.67 1212.83 L2141.26 1212.83 L2141.84 1212.83 L2142.43 1212.83 L2143.02 1212.83 L2143.6 1212.83 L2144.19 1212.83 L2144.78 1212.83 L2145.36 1212.83 L2145.95 1212.83 L2146.54 1212.83 L2147.12 1212.83 L2147.71 1212.83 L2148.3 1212.83 L2148.88 1212.83 L2149.47 1212.83 L2150.05 1212.83 L2150.64 1212.83 L2151.23 1212.83 L2151.81 1212.83 L2152.4 1212.83 L2152.99 1212.83 L2153.57 1212.83 L2154.16 1212.83 L2154.75 1212.83 L2155.33 1212.83 L2155.92 1212.83 L2156.5 1212.83 L2157.09 1212.83 L2157.68 1212.83 L2158.26 1212.83 L2158.26 1212.69 L2157.68 1212.69 L2157.09 1212.69 L2156.5 1212.69 L2155.92 1212.69 L2155.33 1212.69 L2154.75 1212.69 L2154.16 1212.69 L2153.57 1212.69 L2152.99 1212.69 L2152.4 1212.69 L2151.81 1212.69 L2151.23 1212.69 L2150.64 1212.69 L2150.05 1212.69 L2149.47 1212.69 L2148.88 1212.69 L2148.3 1212.69 L2147.71 1212.69 L2147.12 1212.69 L2146.54 1212.69 L2145.95 1212.69 L2145.36 1212.69 L2144.78 1212.69 L2144.19 1212.69 L2143.6 1212.69 L2143.02 1212.69 L2142.43 1212.69 L2141.84 1212.69 L2141.26 1212.69 L2140.67 1212.69 L2140.09 1212.69 L2139.5 1212.69 L2138.91 1212.69 L2138.33 1212.69 L2137.74 1212.69 L2137.15 1212.69 L2136.57 1212.69 L2135.98 1212.69 L2135.39 1212.69 L2134.81 1212.69 L2134.22 1212.69 L2133.63 1212.69 L2133.05 1212.69 L2132.46 1212.69 L2131.88 1212.69 L2131.29 1212.69 L2130.7 1212.69 L2130.12 1212.69 L2129.53 1212.69 L2128.94 1212.69 L2128.36 1212.69 L2127.77 1212.69 L2127.18 1212.69 L2126.6 1212.69 L2126.01 1212.69 L2125.42 1212.69 L2124.84 1212.69 L2124.25 1212.69 L2123.67 1212.69 L2123.08 1212.69 L2122.49 1212.69 L2121.91 1212.69 L2121.32 1212.69 L2120.73 1212.69 L2120.15 1212.69 L2119.56 1212.69 L2118.97 1212.69 L2118.39 1212.69 L2117.8 1212.69 L2117.22 1212.69 L2116.63 1212.69 L2116.04 1212.69 L2115.46 1212.69 L2114.87 1212.69 L2114.28 1212.69 L2113.7 1212.69 L2113.11 1212.69 L2112.52 1212.69 L2111.94 1212.69 L2111.35 1212.69 L2110.76 1212.69 L2110.18 1212.69 L2109.59 1212.69 L2109.01 1212.69 L2108.42 1212.69 L2107.83 1212.69 L2107.25 1212.69 L2106.66 1212.69 L2106.07 1212.69 L2105.49 1212.69 L2104.9 1212.69 L2104.31 1212.69 L2103.73 1212.69 L2103.14 1212.69 L2102.55 1212.69 L2101.97 1212.69 L2101.38 1212.69 L2100.8 1212.69 L2100.21 1212.69 L2099.62 1212.69 L2099.04 1212.69 L2098.45 1212.69 L2097.86 1212.69 L2097.28 1212.69 L2096.69 1212.69 L2096.1 1212.69 L2095.52 1212.69 L2094.93 1212.69 L2094.35 1212.69 L2093.76 1212.69 L2093.17 1212.69 L2092.59 1212.69 L2092 1212.69 L2091.41 1212.69 L2090.83 1212.69 L2090.24 1212.69 L2089.65 1212.69 L2089.07 1212.69 L2088.48 1212.69 L2087.89 1212.69 L2087.31 1212.69 L2086.72 1212.69 L2086.14 1212.69 L2085.55 1212.69 L2084.96 1212.69 L2084.38 1212.69 L2083.79 1212.69 L2083.2 1212.69 L2082.62 1212.69 L2082.03 1212.69 L2081.44 1212.69 L2080.86 1212.69 L2080.27 1212.69 L2079.68 1212.69 L2079.1 1212.69 L2078.51 1212.69 L2077.93 1212.69 L2077.34 1212.69 L2076.75 1212.69 L2076.17 1212.69 L2075.58 1212.69 L2074.99 1212.69 L2074.41 1212.69 L2073.82 1212.69 L2073.23 1212.69 L2072.65 1212.69 L2072.06 1212.69 L2071.48 1212.69 L2070.89 1212.69 L2070.3 1212.69 L2069.72 1212.69 L2069.13 1212.69 L2068.54 1212.69 L2067.96 1212.69 L2067.37 1212.69 L2066.78 1212.69 L2066.2 1212.69 L2065.61 1212.69 L2065.02 1212.69 L2064.44 1212.69 L2063.85 1212.69 L2063.27 1212.69 L2062.68 1212.69 L2062.09 1212.69 L2061.51 1212.69 L2060.92 1212.69 L2060.33 1212.69 L2059.75 1212.69 L2059.16 1212.69 L2058.57 1212.69 L2057.99 1212.69 L2057.4 1212.69 L2056.81 1212.69 L2056.23 1212.69 L2055.64 1212.69 L2055.06 1212.69 L2054.47 1212.69 L2053.88 1212.69 L2053.3 1212.69 L2052.71 1212.69 L2052.12 1212.69 L2051.54 1212.69 L2050.95 1212.69 L2050.36 1212.69 L2049.78 1212.69 L2049.19 1212.69 L2048.6 1212.69 L2048.02 1212.69 L2047.43 1212.69 L2046.85 1212.69 L2046.26 1212.69 L2045.67 1212.69 L2045.09 1212.69 L2044.5 1212.69 L2043.91 1212.69 L2043.33 1212.69 L2042.74 1212.69 L2042.15 1212.69 L2041.57 1212.69 L2040.98 1212.69 L2040.4 1212.69 L2039.81 1212.69 L2039.22 1212.69 L2038.64 1212.69 L2038.05 1212.69 L2037.46 1212.69 L2036.88 1212.69 L2036.29 1212.69 L2035.7 1212.69 L2035.12 1212.69 L2034.53 1212.69 L2033.94 1212.69 L2033.36 1212.69 L2032.77 1212.69 L2032.19 1212.69 L2031.6 1212.69 L2031.01 1212.69 L2030.43 1212.69 L2029.84 1212.69 L2029.25 1212.69 L2028.67 1212.69 L2028.08 1212.69 L2027.49 1212.69 L2026.91 1212.69 L2026.32 1212.69 L2025.73 1212.69 L2025.15 1212.69 L2024.56 1212.69 L2023.98 1212.69 L2023.39 1212.69 L2022.8 1212.69 L2022.22 1212.69 L2021.63 1212.69 L2021.04 1212.69 L2020.46 1212.69 L2019.87 1212.69 L2019.28 1212.69 L2018.7 1212.69 L2018.11 1212.69 L2017.53 1212.69 L2016.94 1212.69 L2016.35 1212.69 L2015.77 1212.69 L2015.18 1212.69 L2014.59 1212.69 L2014.01 1212.69 L2013.42 1212.69 L2012.83 1212.69 L2012.25 1212.69 L2011.66 1212.69 L2011.07 1212.69 L2010.49 1212.69 L2009.9 1212.69 L2009.32 1212.69 L2008.73 1212.69 L2008.14 1212.69 L2007.56 1212.69 L2006.97 1212.69 L2006.38 1212.69 L2005.8 1212.69 L2005.21 1212.69 L2004.62 1212.69 L2004.04 1212.69 L2003.45 1212.69 L2002.86 1212.69 L2002.28 1212.69 L2001.69 1212.69 L2001.11 1212.69 L2000.52 1212.69 L1999.93 1212.69 L1999.35 1212.69 L1998.76 1212.69 L1998.17 1212.69 L1997.59 1212.69 L1997 1212.69 L1996.41 1212.69 L1995.83 1212.69 L1995.24 1212.69 L1994.65 1212.69 L1994.07 1212.69 L1993.48 1212.69 L1992.9 1212.69 L1992.31 1212.69 L1991.72 1212.69 L1991.14 1212.69 L1990.55 1212.69 L1989.96 1212.69 L1989.38 1212.69 L1988.79 1212.69 L1988.2 1212.69 L1987.62 1212.69 L1987.03 1212.69 L1986.45 1212.69 L1985.86 1212.69 L1985.27 1212.69 L1984.69 1212.69 L1984.1 1212.69 L1983.51 1212.69 L1982.93 1212.69 L1982.34 1212.69 L1981.75 1212.69 L1981.17 1212.69 L1980.58 1212.69 L1979.99 1212.69 L1979.41 1212.69 L1978.82 1212.69 L1978.24 1212.69 L1977.65 1212.69 L1977.06 1212.69 L1976.48 1212.69 L1975.89 1212.69 L1975.3 1212.69 L1974.72 1212.69 L1974.13 1212.69 L1973.54 1212.69 L1972.96 1212.69 L1972.37 1212.69 L1971.78 1212.69 L1971.2 1212.69 L1970.61 1212.69 L1970.03 1212.69 L1969.44 1212.69 L1968.85 1212.69 L1968.27 1212.69 L1967.68 1212.69 L1967.09 1212.69 L1966.51 1212.69 L1965.92 1212.69 L1965.33 1212.69 L1964.75 1212.69 L1964.16 1212.69 L1963.58 1212.69 L1962.99 1212.69 L1962.4 1212.69 L1961.82 1212.69 L1961.23 1212.69 L1960.64 1212.69 L1960.06 1212.69 L1959.47 1212.69 L1958.88 1212.69 L1958.3 1212.69 L1957.71 1212.69 L1957.12 1212.69 L1956.54 1212.69 L1955.95 1212.69 L1955.37 1212.69 L1954.78 1212.69 L1954.19 1212.69 L1953.61 1212.69 L1953.02 1212.69 L1952.43 1212.69 L1951.85 1212.69 L1951.26 1212.69 L1950.67 1212.69 L1950.09 1212.69 L1949.5 1212.69 L1948.91 1212.69 L1948.33 1212.69 L1947.74 1212.69 L1947.16 1212.69 L1946.57 1212.69 L1945.98 1212.69 L1945.4 1212.69 L1944.81 1212.69 L1944.22 1212.69 L1943.64 1212.69 L1943.05 1212.69 L1942.46 1212.69 L1941.88 1212.69 L1941.29 1212.69 L1940.71 1212.69 L1940.12 1212.69 L1939.53 1212.69 L1938.95 1212.69 L1938.36 1212.69 L1937.77 1212.69 L1937.19 1212.69 L1936.6 1212.69 L1936.01 1212.69 L1935.43 1212.69 L1934.84 1212.69 L1934.25 1212.69 L1933.67 1212.69 L1933.08 1212.69 L1932.5 1212.69 L1931.91 1212.69 L1931.32 1212.69 L1930.74 1212.69 L1930.15 1212.69 L1929.56 1212.69 L1928.98 1212.69 L1928.39 1212.69 L1927.8 1212.69 L1927.22 1212.69 L1926.63 1212.69 L1926.04 1212.69 L1925.46 1212.69 L1924.87 1212.69 L1924.29 1212.69 L1923.7 1212.69 L1923.11 1212.69 L1922.53 1212.69 L1921.94 1212.69 L1921.35 1212.69 L1920.77 1212.69 L1920.18 1212.69 L1919.59 1212.69 L1919.01 1212.69 L1918.42 1212.69 L1917.83 1212.69 L1917.25 1212.69 L1916.66 1212.69 L1916.08 1212.69 L1915.49 1212.69 L1914.9 1212.69 L1914.32 1212.69 L1913.73 1212.69 L1913.14 1212.69 L1912.56 1212.69 L1911.97 1212.69 L1911.38 1212.69 L1910.8 1212.69 L1910.21 1212.69 L1909.63 1212.69 L1909.04 1212.69 L1908.45 1212.69 L1907.87 1212.69 L1907.28 1212.69 L1906.69 1212.69 L1906.11 1212.69 L1905.52 1212.69 L1904.93 1212.69 L1904.35 1212.69 L1903.76 1212.69 L1903.17 1212.69 L1902.59 1212.69 L1902 1212.69 L1901.42 1212.69 L1900.83 1212.69 L1900.24 1212.69 L1899.66 1212.69 L1899.07 1212.69 L1898.48 1212.69 L1897.9 1212.69 L1897.31 1212.69 L1896.72 1212.69 L1896.14 1212.69 L1895.55 1212.69 L1894.96 1212.69 L1894.38 1212.69 L1893.79 1212.69 L1893.21 1212.69 L1892.62 1212.69 L1892.03 1212.69 L1891.45 1212.69 L1890.86 1212.69 L1890.27 1212.69 L1889.69 1212.69 L1889.1 1212.69 L1888.51 1212.69 L1887.93 1212.69 L1887.34 1212.69 L1886.76 1212.69 L1886.17 1212.69 L1885.58 1212.69 L1885 1212.69 L1884.41 1212.69 L1883.82 1212.69 L1883.24 1212.69 L1882.65 1212.69 L1882.06 1212.69 L1881.48 1212.69 L1880.89 1212.69 L1880.3 1212.69 L1879.72 1212.69 L1879.13 1212.69 L1878.55 1212.69 L1877.96 1212.69 L1877.37 1212.69 L1876.79 1212.69 L1876.2 1212.69 L1875.61 1212.69 L1875.03 1212.69 L1874.44 1212.69 L1873.85 1212.69 L1873.27 1212.69 L1872.68 1212.69 L1872.09 1212.69 L1871.51 1212.69 L1870.92 1212.69 L1870.34 1212.69 L1869.75 1212.69 L1869.16 1212.69 L1868.58 1212.69 L1867.99 1212.69 L1867.4 1212.69 L1866.82 1212.69 L1866.23 1212.69 L1865.64 1212.69 L1865.06 1212.69 L1864.47 1212.69 L1863.88 1212.69 L1863.3 1212.69 L1862.71 1212.69 L1862.13 1212.69 L1861.54 1212.69 L1860.95 1212.69 L1860.37 1212.69 L1859.78 1212.69 L1859.19 1212.69 L1858.61 1212.69 L1858.02 1212.69 L1857.43 1212.69 L1856.85 1212.69 L1856.26 1212.69 L1855.68 1212.69 L1855.09 1212.69 L1854.5 1212.69 L1853.92 1212.69 L1853.33 1212.69 L1852.74 1212.69 L1852.16 1212.69 L1851.57 1212.69 L1850.98 1212.69 L1850.4 1212.69 L1849.81 1212.69 L1849.22 1212.69 L1848.64 1212.69 L1848.05 1212.69 L1847.47 1212.69 L1846.88 1212.69 L1846.29 1212.69 L1845.71 1212.69 L1845.12 1212.69 L1844.53 1212.69 L1843.95 1212.69 L1843.36 1212.69 L1842.77 1212.69 L1842.19 1212.69 L1841.6 1212.69 L1841.01 1212.69 L1840.43 1212.69 L1839.84 1212.69 L1839.26 1212.69 L1838.67 1212.69 L1838.08 1212.69 L1837.5 1212.69 L1836.91 1212.69 L1836.32 1212.69 L1835.74 1212.69 L1835.15 1212.69 L1834.56 1212.69 L1833.98 1212.69 L1833.39 1212.69 L1832.81 1212.69 L1832.22 1212.69 L1831.63 1212.69 L1831.05 1212.69 L1830.46 1212.69 L1829.87 1212.69 L1829.29 1212.69 L1828.7 1212.69 L1828.11 1212.69 L1827.53 1212.69 L1826.94 1212.69 L1826.35 1212.69 L1825.77 1212.69 L1825.18 1212.69 L1824.6 1212.69 L1824.01 1212.69 L1823.42 1212.69 L1822.84 1212.69 L1822.25 1212.69 L1821.66 1212.69 L1821.08 1212.69 L1820.49 1212.69 L1819.9 1212.69 L1819.32 1212.69 L1818.73 1212.69 L1818.14 1212.69 L1817.56 1212.69 L1816.97 1212.69 L1816.39 1212.69 L1815.8 1212.69 L1815.21 1212.69 L1814.63 1212.69 L1814.04 1212.69 L1813.45 1212.69 L1812.87 1212.69 L1812.28 1212.69 L1811.69 1212.69 L1811.11 1212.69 L1810.52 1212.69 L1809.94 1212.69 L1809.35 1212.69 L1808.76 1212.69 L1808.18 1212.69 L1807.59 1212.69 L1807 1212.69 L1806.42 1212.69 L1805.83 1212.69 L1805.24 1212.69 L1804.66 1212.69 L1804.07 1212.69 L1803.48 1212.69 L1802.9 1212.69 L1802.31 1212.69 L1801.73 1212.69 L1801.14 1212.69 L1800.55 1212.69 L1799.97 1212.69 L1799.38 1212.69 L1798.79 1212.69 L1798.21 1212.69 L1797.62 1212.69 L1797.03 1212.69 L1796.45 1212.69 L1795.86 1212.69 L1795.27 1212.69 L1794.69 1212.69 L1794.1 1212.69 L1793.52 1212.69 L1792.93 1212.69 L1792.34 1212.69 L1791.76 1212.69 L1791.17 1212.69 L1790.58 1212.69 L1790 1212.69 L1789.41 1212.69 L1788.82 1212.69 L1788.24 1212.69 L1787.65 1212.69 L1787.06 1212.69 L1786.48 1212.69 L1785.89 1212.69 L1785.31 1212.69 L1784.72 1212.69 L1784.13 1212.69 L1783.55 1212.69 L1782.96 1212.69 L1782.37 1212.69 L1781.79 1212.69 L1781.2 1212.69 L1780.61 1212.69 L1780.03 1212.69 L1779.44 1212.69 L1778.86 1212.69 L1778.27 1212.69 L1777.68 1212.69 L1777.1 1212.69 L1776.51 1212.69 L1775.92 1212.69 L1775.34 1212.69 L1774.75 1212.69 L1774.16 1212.69 L1773.58 1212.69 L1772.99 1212.69 L1772.4 1212.69 L1771.82 1212.69 L1771.23 1212.69 L1770.65 1212.69 L1770.06 1212.69 L1769.47 1212.69 L1768.89 1212.69 L1768.3 1212.69 L1767.71 1212.69 L1767.13 1212.69 L1766.54 1212.69 L1765.95 1212.69 L1765.37 1212.69 L1764.78 1212.69 L1764.19 1212.69 L1763.61 1212.69 L1763.02 1212.69 L1762.44 1212.69 L1761.85 1212.69 L1761.26 1212.69 L1760.68 1212.69 L1760.09 1212.69 L1759.5 1212.69 L1758.92 1212.69 L1758.33 1212.69 L1757.74 1212.69 L1757.16 1212.69 L1756.57 1212.69 L1755.99 1212.69 L1755.4 1212.69 L1754.81 1212.69 L1754.23 1212.69 L1753.64 1212.69 L1753.05 1212.69 L1752.47 1212.69 L1751.88 1212.69 L1751.29 1212.69 L1750.71 1212.69 L1750.12 1212.69 L1749.53 1212.69 L1748.95 1212.69 L1748.36 1212.69 L1747.78 1212.69 L1747.19 1212.69 L1746.6 1212.69 L1746.02 1212.69 L1745.43 1212.69 L1744.84 1212.69 L1744.26 1212.69 L1743.67 1212.69 L1743.08 1212.69 L1742.5 1212.69 L1741.91 1212.69 L1741.32 1212.69 L1740.74 1212.69 L1740.15 1212.69 L1739.57 1212.69 L1738.98 1212.69 L1738.39 1212.69 L1737.81 1212.69 L1737.22 1212.69 L1736.63 1212.69 L1736.05 1212.69 L1735.46 1212.69 L1734.87 1212.69 L1734.29 1212.69 L1733.7 1212.69 L1733.11 1212.69 L1732.53 1212.69 L1731.94 1212.69 L1731.36 1212.69 L1730.77 1212.69 L1730.18 1212.69 L1729.6 1212.69 L1729.01 1212.69 L1728.42 1212.69 L1727.84 1212.69 L1727.25 1212.69 L1726.66 1212.69 L1726.08 1212.69 L1725.49 1212.69 L1724.91 1212.69 L1724.32 1212.69 L1723.73 1212.69 L1723.15 1212.69 L1722.56 1212.69 L1721.97 1212.69 L1721.39 1212.69 L1720.8 1212.69 L1720.21 1212.69 L1719.63 1212.69 L1719.04 1212.69 L1718.45 1212.69 L1717.87 1212.69 L1717.28 1212.69 L1716.7 1212.69 L1716.11 1212.69 L1715.52 1212.69 L1714.94 1212.69 L1714.35 1212.69 L1713.76 1212.69 L1713.18 1212.69 L1712.59 1212.69 L1712 1212.69 L1711.42 1212.69 L1710.83 1212.69 L1710.24 1212.69 L1709.66 1212.69 L1709.07 1212.69 L1708.49 1212.69 L1707.9 1212.69 L1707.31 1212.69 L1706.73 1212.69 L1706.14 1212.69 L1705.55 1212.69 L1704.97 1212.69 L1704.38 1212.69 L1703.79 1212.69 L1703.21 1212.69 L1702.62 1212.69 L1702.04 1212.69 L1701.45 1212.69 L1700.86 1212.69 L1700.28 1212.69 L1699.69 1212.69 L1699.1 1212.69 L1698.52 1212.69 L1697.93 1212.69 L1697.34 1212.69 L1696.76 1212.69 L1696.17 1212.69 L1695.58 1212.69 L1695 1212.69 L1694.41 1212.69 L1693.83 1212.69 L1693.24 1212.69 L1692.65 1212.69 L1692.07 1212.69 L1691.48 1212.69 L1690.89 1212.69 L1690.31 1212.69 L1689.72 1212.69 L1689.13 1212.69 L1688.55 1212.69 L1687.96 1212.69 L1687.37 1212.69 L1686.79 1212.69 L1686.2 1212.69 L1685.62 1212.69 L1685.03 1212.69 L1684.44 1212.69 L1683.86 1212.69 L1683.27 1212.69 L1682.68 1212.69 L1682.1 1212.69 L1681.51 1212.69 L1680.92 1212.69 L1680.34 1212.69 L1679.75 1212.69 L1679.17 1212.69 L1678.58 1212.69 L1677.99 1212.69 L1677.41 1212.69 L1676.82 1212.69 L1676.23 1212.69 L1675.65 1212.69 L1675.06 1212.69 L1674.47 1212.69 L1673.89 1212.69 L1673.3 1212.69 L1672.71 1212.69 L1672.13 1212.69 L1671.54 1212.69 L1670.96 1212.69 L1670.37 1212.69 L1669.78 1212.69 L1669.2 1212.69 L1668.61 1212.69 L1668.02 1212.69 L1667.44 1212.69 L1666.85 1212.69 L1666.26 1212.69 L1665.68 1212.69 L1665.09 1212.69 L1664.5 1212.69 L1663.92 1212.69 L1663.33 1212.69 L1662.75 1212.69 L1662.16 1212.69 L1661.57 1212.69 L1660.99 1212.69 L1660.4 1212.69 L1659.81 1212.69 L1659.23 1212.69 L1658.64 1212.69 L1658.05 1212.69 L1657.47 1212.69 L1656.88 1212.69 L1656.29 1212.69 L1655.71 1212.69 L1655.12 1212.69 L1654.54 1212.69 L1653.95 1212.69 L1653.36 1212.69 L1652.78 1212.69 L1652.19 1212.69 L1651.6 1212.69 L1651.02 1212.69 L1650.43 1212.69 L1649.84 1212.69 L1649.26 1212.69 L1648.67 1212.69 L1648.09 1212.69 L1647.5 1212.69 L1646.91 1212.69 L1646.33 1212.69 L1645.74 1212.69 L1645.15 1212.69 L1644.57 1212.69 L1643.98 1212.69 L1643.39 1212.69 L1642.81 1212.69 L1642.22 1212.69 L1641.63 1212.69 L1641.05 1212.69 L1640.46 1212.69 L1639.88 1212.69 L1639.29 1212.69 L1638.7 1212.69 L1638.12 1212.69 L1637.53 1212.69 L1636.94 1212.69 L1636.36 1212.69 L1635.77 1212.69 L1635.18 1212.69 L1634.6 1212.69 L1634.01 1212.69 L1633.42 1212.69 L1632.84 1212.69 L1632.25 1212.69 L1631.67 1212.69 L1631.08 1212.69 L1630.49 1212.69 L1629.91 1212.69 L1629.32 1212.69 L1628.73 1212.69 L1628.15 1212.69 L1627.56 1212.69 L1626.97 1212.69 L1626.39 1212.69 L1625.8 1212.69 L1625.22 1212.69 L1624.63 1212.69 L1624.04 1212.69 L1623.46 1212.69 L1622.87 1212.69 L1622.28 1212.69 L1621.7 1212.69 L1621.11 1212.69 L1620.52 1212.69 L1619.94 1212.69 L1619.35 1212.69 L1618.76 1212.69 L1618.18 1212.69 L1617.59 1212.69 L1617.01 1212.69 L1616.42 1212.69 L1615.83 1212.69 L1615.25 1212.69 L1614.66 1212.69 L1614.07 1212.69 L1613.49 1212.69 L1612.9 1212.69 L1612.31 1212.69 L1611.73 1212.69 L1611.14 1212.69 L1610.55 1212.69 L1609.97 1212.69 L1609.38 1212.69 L1608.8 1212.69 L1608.21 1212.69 L1607.62 1212.69 L1607.04 1212.69 L1606.45 1212.69 L1605.86 1212.69 L1605.28 1212.69 L1604.69 1212.69 L1604.1 1212.69 L1603.52 1212.69 L1602.93 1212.69 L1602.34 1212.69 L1601.76 1212.69 L1601.17 1212.69 L1600.59 1212.69 L1600 1212.69 L1599.41 1212.69 L1598.83 1212.69 L1598.24 1212.69 L1597.65 1212.69 L1597.07 1212.69 L1596.48 1212.69 L1595.89 1212.69 L1595.31 1212.69 L1594.72 1212.69 L1594.14 1212.69 L1593.55 1212.69 L1592.96 1212.69 L1592.38 1212.69 L1591.79 1212.69 L1591.2 1212.69 L1590.62 1212.69 L1590.03 1212.69 L1589.44 1212.69 L1588.86 1212.69 L1588.27 1212.69 L1587.68 1212.69 L1587.1 1212.69 L1586.51 1212.69 L1585.93 1212.69 L1585.34 1212.69 L1584.75 1212.69 L1584.17 1212.69 L1583.58 1212.69 L1582.99 1212.69 L1582.41 1212.69 L1581.82 1212.69 L1581.23 1212.69 L1580.65 1212.69 L1580.06 1212.69 L1579.47 1212.69 L1578.89 1212.69 L1578.3 1212.69 L1577.72 1212.69 L1577.13 1212.69 L1576.54 1212.69 L1575.96 1212.69 L1575.37 1212.69 L1574.78 1212.69 L1574.2 1212.69 L1573.61 1212.69 L1573.02 1212.69 L1572.44 1212.69 L1571.85 1212.69 L1571.27 1212.69 L1570.68 1212.69 L1570.09 1212.69 L1569.51 1212.69 L1568.92 1212.69 L1568.33 1212.69 L1567.75 1212.69 L1567.16 1212.69 L1566.57 1212.69 L1565.99 1212.69 L1565.4 1212.69 L1564.81 1212.69 L1564.23 1212.69 L1563.64 1212.69 L1563.06 1212.69 L1562.47 1212.69 L1561.88 1212.69 L1561.3 1212.69 L1560.71 1212.69 L1560.12 1212.69 L1559.54 1212.69 L1558.95 1212.69 L1558.36 1212.69 L1557.78 1212.69 L1557.19 1212.69 L1556.6 1212.69 L1556.02 1212.69 L1555.43 1212.69 L1554.85 1212.69 L1554.26 1212.69 L1553.67 1212.69 L1553.09 1212.69 L1552.5 1212.69 L1551.91 1212.69 L1551.33 1212.69 L1550.74 1212.69 L1550.15 1212.69 L1549.57 1212.69 L1548.98 1212.69 L1548.4 1212.69 L1547.81 1212.69 L1547.22 1212.69 L1546.64 1212.69 L1546.05 1212.69 L1545.46 1212.69 L1544.88 1212.69 L1544.29 1212.69 L1543.7 1212.69 L1543.12 1212.69 L1542.53 1212.69 L1541.94 1212.69 L1541.36 1212.69 L1540.77 1212.69 L1540.19 1212.69 L1539.6 1212.69 L1539.01 1212.69 L1538.43 1212.69 L1537.84 1212.69 L1537.25 1212.69 L1536.67 1212.69 L1536.08 1212.69 L1535.49 1212.69 L1534.91 1212.69 L1534.32 1212.69 L1533.73 1212.69 L1533.15 1212.69 L1532.56 1212.69 L1531.98 1212.69 L1531.39 1212.69 L1530.8 1212.69 L1530.22 1212.69 L1529.63 1212.69 L1529.04 1212.69 L1528.46 1212.69 L1527.87 1212.69 L1527.28 1212.69 L1526.7 1212.69 L1526.11 1212.69 L1525.52 1212.69 L1524.94 1212.69 L1524.35 1212.69 L1523.77 1212.69 L1523.18 1212.69 L1522.59 1212.69 L1522.01 1212.69 L1521.42 1212.69 L1520.83 1212.69 L1520.25 1212.69 L1519.66 1212.69 L1519.07 1212.69 L1518.49 1212.69 L1517.9 1212.69 L1517.32 1212.69 L1516.73 1212.69 L1516.14 1212.69 L1515.56 1212.69 L1514.97 1212.69 L1514.38 1212.69 L1513.8 1212.69 L1513.21 1212.69 L1512.62 1212.69 L1512.04 1212.69 L1511.45 1212.69 L1510.86 1212.69 L1510.28 1212.69 L1509.69 1212.69 L1509.11 1212.69 L1508.52 1212.69 L1507.93 1212.69 L1507.35 1212.69 L1506.76 1212.69 L1506.17 1212.69 L1505.59 1212.69 L1505 1212.69 L1504.41 1212.69 L1503.83 1212.69 L1503.24 1212.69 L1502.65 1212.69 L1502.07 1212.69 L1501.48 1212.69 L1500.9 1212.69 L1500.31 1212.69 L1499.72 1212.69 L1499.14 1212.69 L1498.55 1212.69 L1497.96 1212.69 L1497.38 1212.69 L1496.79 1212.69 L1496.2 1212.69 L1495.62 1212.69 L1495.03 1212.69 L1494.45 1212.69 L1493.86 1212.69 L1493.27 1212.69 L1492.69 1212.69 L1492.1 1212.69 L1491.51 1212.69 L1490.93 1212.69 L1490.34 1212.69 L1489.75 1212.69 L1489.17 1212.69 L1488.58 1212.69 L1487.99 1212.69 L1487.41 1212.69 L1486.82 1212.69 L1486.24 1212.69 L1485.65 1212.69 L1485.06 1212.69 L1484.48 1212.69 L1483.89 1212.69 L1483.3 1212.69 L1482.72 1212.69 L1482.13 1212.69 L1481.54 1212.69 L1480.96 1212.69 L1480.37 1212.69 L1479.78 1212.69 L1479.2 1212.69 L1478.61 1212.69 L1478.03 1212.69 L1477.44 1212.69 L1476.85 1212.69 L1476.27 1212.69 L1475.68 1212.69 L1475.09 1212.69 L1474.51 1212.69 L1473.92 1212.69 L1473.33 1212.69 L1472.75 1212.69 L1472.16 1212.69 L1471.57 1212.69 L1470.99 1212.69 L1470.4 1212.69 L1469.82 1212.69 L1469.23 1212.69 L1468.64 1212.69 L1468.06 1212.69 L1467.47 1212.69 L1466.88 1212.69 L1466.3 1212.69 L1465.71 1212.69 L1465.12 1212.69 L1464.54 1212.69 L1463.95 1212.69 L1463.37 1212.69 L1462.78 1212.69 L1462.19 1212.69 L1461.61 1212.69 L1461.02 1212.69 L1460.43 1212.69 L1459.85 1212.69 L1459.26 1212.69 L1458.67 1212.69 L1458.09 1212.69 L1457.5 1212.69 L1456.91 1212.69 L1456.33 1212.69 L1455.74 1212.69 L1455.16 1212.69 L1454.57 1212.69 L1453.98 1212.69 L1453.4 1212.69 L1452.81 1212.69 L1452.22 1212.69 L1451.64 1212.69 L1451.05 1212.69 L1450.46 1212.69 L1449.88 1212.69 L1449.29 1212.69 L1448.7 1212.69 L1448.12 1212.69 L1447.53 1212.69 L1446.95 1212.69 L1446.36 1212.69 L1445.77 1212.69 L1445.19 1212.69 L1444.6 1212.69 L1444.01 1212.69 L1443.43 1212.69 L1442.84 1212.69 L1442.25 1212.69 L1441.67 1212.69 L1441.08 1212.69 L1440.5 1212.69 L1439.91 1212.69 L1439.32 1212.69 L1438.74 1212.69 L1438.15 1212.69 L1437.56 1212.69 L1436.98 1212.69 L1436.39 1212.69 L1435.8 1212.69 L1435.22 1212.69 L1434.63 1212.69 L1434.04 1212.69 L1433.46 1212.69 L1432.87 1212.69 L1432.29 1212.69 L1431.7 1212.69 L1431.11 1212.69 L1430.53 1212.69 L1429.94 1212.69 L1429.35 1212.69 L1428.77 1212.69 L1428.18 1212.69 L1427.59 1212.69 L1427.01 1212.69 L1426.42 1212.69 L1425.83 1212.69 L1425.25 1212.69 L1424.66 1212.69 L1424.08 1212.69 L1423.49 1212.69 L1422.9 1212.69 L1422.32 1212.69 L1421.73 1212.69 L1421.14 1212.69 L1420.56 1212.69 L1419.97 1212.69 L1419.38 1212.69 L1418.8 1212.69 L1418.21 1212.69 L1417.63 1212.69 L1417.04 1212.69 L1416.45 1212.69 L1415.87 1212.69 L1415.28 1212.69 L1414.69 1212.69 L1414.11 1212.69 L1413.52 1212.69 L1412.93 1212.69 L1412.35 1212.69 L1411.76 1212.69 L1411.17 1212.69 L1410.59 1212.69 L1410 1212.69 L1409.42 1212.69 L1408.83 1212.69 L1408.24 1212.69 L1407.66 1212.69 L1407.07 1212.69 L1406.48 1212.69 L1405.9 1212.69 L1405.31 1212.69 L1404.72 1212.69 L1404.14 1212.69 L1403.55 1212.69 L1402.96 1212.69 L1402.38 1212.69 L1401.79 1212.69 L1401.21 1212.69 L1400.62 1212.69 L1400.03 1212.69 L1399.45 1212.69 L1398.86 1212.69 L1398.27 1212.69 L1397.69 1212.69 L1397.1 1212.69 L1396.51 1212.69 L1395.93 1212.69 L1395.34 1212.69 L1394.75 1212.69 L1394.17 1212.69 L1393.58 1212.69 L1393 1212.69 L1392.41 1212.69 L1391.82 1212.69 L1391.24 1212.69 L1390.65 1212.69 L1390.06 1212.69 L1389.48 1212.69 L1388.89 1212.69 L1388.3 1212.69 L1387.72 1212.69 L1387.13 1212.69 L1386.55 1212.69 L1385.96 1212.69 L1385.37 1212.69 L1384.79 1212.69 L1384.2 1212.69 L1383.61 1212.69 L1383.03 1212.69 L1382.44 1212.69 L1381.85 1212.69 L1381.27 1212.69 L1380.68 1212.69 L1380.09 1212.69 L1379.51 1212.69 L1378.92 1212.69 L1378.34 1212.69 L1377.75 1212.69 L1377.16 1212.69 L1376.58 1212.69 L1375.99 1212.69 L1375.4 1212.69 L1374.82 1212.69 L1374.23 1212.69 L1373.64 1212.69 L1373.06 1212.69 L1372.47 1212.69 L1371.88 1212.69 L1371.3 1212.69 L1370.71 1212.69 L1370.13 1212.69 L1369.54 1212.69 L1368.95 1212.69 L1368.37 1212.69 L1367.78 1212.69 L1367.19 1212.69 L1366.61 1212.69 L1366.02 1212.69 L1365.43 1212.69 L1364.85 1212.69 L1364.26 1212.69 L1363.68 1212.69 L1363.09 1212.69 L1362.5 1212.69 L1361.92 1212.69 L1361.33 1212.69 L1360.74 1212.69 L1360.16 1212.69 L1359.57 1212.69 L1358.98 1212.69 L1358.4 1212.69 L1357.81 1212.69 L1357.22 1212.69 L1356.64 1212.69 L1356.05 1212.69 L1355.47 1212.69 L1354.88 1212.69 L1354.29 1212.69 L1353.71 1212.69 L1353.12 1212.69 L1352.53 1212.69 L1351.95 1212.69 L1351.36 1212.69 L1350.77 1212.69 L1350.19 1212.69 L1349.6 1212.69 L1349.01 1212.69 L1348.43 1212.69 L1347.84 1212.69 L1347.26 1212.69 L1346.67 1212.69 L1346.08 1212.69 L1345.5 1212.69 L1344.91 1212.69 L1344.32 1212.69 L1343.74 1212.69 L1343.15 1212.69 L1342.56 1212.69 L1341.98 1212.69 L1341.39 1212.69 L1340.8 1212.69 L1340.22 1212.69 L1339.63 1212.69 L1339.05 1212.69 L1338.46 1212.69 L1337.87 1212.69 L1337.29 1212.69 L1336.7 1212.69 L1336.11 1212.69 L1335.53 1212.69 L1334.94 1212.69 L1334.35 1212.69 L1333.77 1212.69 L1333.18 1212.69 L1332.6 1212.69 L1332.01 1212.69 L1331.42 1212.69 L1330.84 1212.69 L1330.25 1212.69 L1329.66 1212.69 L1329.08 1212.69 L1328.49 1212.69 L1327.9 1212.69 L1327.32 1212.69 L1326.73 1212.69 L1326.14 1212.69 L1325.56 1212.69 L1324.97 1212.69 L1324.39 1212.69 L1323.8 1212.69 L1323.21 1212.69 L1322.63 1212.69 L1322.04 1212.69 L1321.45 1212.69 L1320.87 1212.69 L1320.28 1212.69 L1319.69 1212.69 L1319.11 1212.69 L1318.52 1212.69 L1317.93 1212.69 L1317.35 1212.69 L1316.76 1212.69 L1316.18 1212.69 L1315.59 1212.69 L1315 1212.69 L1314.42 1212.69 L1313.83 1212.69 L1313.24 1212.69 L1312.66 1212.69 L1312.07 1212.69 L1311.48 1212.69 L1310.9 1212.69 L1310.31 1212.69 L1309.73 1212.69 L1309.14 1212.69 L1308.55 1212.69 L1307.97 1212.69 L1307.38 1212.69 L1306.79 1212.69 L1306.21 1212.69 L1305.62 1212.69 L1305.03 1212.69 L1304.45 1212.69 L1303.86 1212.69 L1303.27 1212.69 L1302.69 1212.69 L1302.1 1212.69 L1301.52 1212.69 L1300.93 1212.69 L1300.34 1212.69 L1299.76 1212.69 L1299.17 1212.69 L1298.58 1212.69 L1298 1212.69 L1297.41 1212.69 L1296.82 1212.69 L1296.24 1212.69 L1295.65 1212.69 L1295.06 1212.69 L1294.48 1212.69 L1293.89 1212.69 L1293.31 1212.69 L1292.72 1212.69 L1292.13 1212.69 L1291.55 1212.69 L1290.96 1212.69 L1290.37 1212.69 L1289.79 1212.69 L1289.2 1212.69 L1288.61 1212.69 L1288.03 1212.69 L1287.44 1212.69 L1286.86 1212.69 L1286.27 1212.69 L1285.68 1212.69 L1285.1 1212.69 L1284.51 1212.69 L1283.92 1212.69 L1283.34 1212.69 L1282.75 1212.69 L1282.16 1212.69 L1281.58 1212.69 L1280.99 1212.69 L1280.4 1212.69 L1279.82 1212.69 L1279.23 1212.69 L1278.65 1212.69 L1278.06 1212.69 L1277.47 1212.69 L1276.89 1212.69 L1276.3 1212.69 L1275.71 1212.69 L1275.13 1212.69 L1274.54 1212.69 L1273.95 1212.69 L1273.37 1212.69 L1272.78 1212.69 L1272.19 1212.69 L1271.61 1212.69 L1271.02 1212.69 L1270.44 1212.69 L1269.85 1212.69 L1269.26 1212.69 L1268.68 1212.69 L1268.09 1212.69 L1267.5 1212.69 L1266.92 1212.69 L1266.33 1212.69 L1265.74 1212.69 L1265.16 1212.69 L1264.57 1212.69 L1263.98 1212.69 L1263.4 1212.69 L1262.81 1212.69 L1262.23 1212.69 L1261.64 1212.69 L1261.05 1212.69 L1260.47 1212.69 L1259.88 1212.69 L1259.29 1212.69 L1258.71 1212.69 L1258.12 1212.69 L1257.53 1212.69 L1256.95 1212.69 L1256.36 1212.69 L1255.78 1212.69 L1255.19 1212.69 L1254.6 1212.69 L1254.02 1212.69 L1253.43 1212.69 L1252.84 1212.69 L1252.26 1212.69 L1251.67 1212.69 L1251.08 1212.69 L1250.5 1212.69 L1249.91 1212.69 L1249.32 1212.69 L1248.74 1212.69 L1248.15 1212.69 L1247.57 1212.69 L1246.98 1212.69 L1246.39 1212.69 L1245.81 1212.69 L1245.22 1212.69 L1244.63 1212.69 L1244.05 1212.69 L1243.46 1212.69 L1242.87 1212.69 L1242.29 1212.69 L1241.7 1212.69 L1241.11 1212.69 L1240.53 1212.69 L1239.94 1212.69 L1239.36 1212.69 L1238.77 1212.69 L1238.18 1212.69 L1237.6 1212.69 L1237.01 1212.69 L1236.42 1212.69 L1235.84 1212.69 L1235.25 1212.69 L1234.66 1212.69 L1234.08 1212.69 L1233.49 1212.69 L1232.91 1212.69 L1232.32 1212.69 L1231.73 1212.69 L1231.15 1212.69 L1230.56 1212.69 L1229.97 1212.69 L1229.39 1212.69 L1228.8 1212.69 L1228.21 1212.69 L1227.63 1212.69 L1227.04 1212.69 L1226.45 1212.69 L1225.87 1212.69 L1225.28 1212.69 L1224.7 1212.69 L1224.11 1212.69 L1223.52 1212.69 L1222.94 1212.69 L1222.35 1212.69 L1221.76 1212.69 L1221.18 1212.69 L1220.59 1212.69 L1220 1212.69 L1219.42 1212.69 L1218.83 1212.69 L1218.24 1212.69 L1217.66 1212.69 L1217.07 1212.69 L1216.49 1212.69 L1215.9 1212.69 L1215.31 1212.69 L1214.73 1212.69 L1214.14 1212.69 L1213.55 1212.69 L1212.97 1212.69 L1212.38 1212.69 L1211.79 1212.69 L1211.21 1212.69 L1210.62 1212.69 L1210.03 1212.69 L1209.45 1212.69 L1208.86 1212.69 L1208.28 1212.69 L1207.69 1212.69 L1207.1 1212.69 L1206.52 1212.69 L1205.93 1212.69 L1205.34 1212.69 L1204.76 1212.69 L1204.17 1212.69 L1203.58 1212.69 L1203 1212.69 L1202.41 1212.69 L1201.83 1212.69 L1201.24 1212.69 L1200.65 1212.69 L1200.07 1212.69 L1199.48 1212.69 L1198.89 1212.69 L1198.31 1212.69 L1197.72 1212.69 L1197.13 1212.69 L1196.55 1212.69 L1195.96 1212.69 L1195.37 1212.69 L1194.79 1212.69 L1194.2 1212.69 L1193.62 1212.69 L1193.03 1212.69 L1192.44 1212.69 L1191.86 1212.69 L1191.27 1212.69 L1190.68 1212.69 L1190.1 1212.69 L1189.51 1212.69 L1188.92 1212.69 L1188.34 1212.69 L1187.75 1212.69 L1187.16 1212.69 L1186.58 1212.69 L1185.99 1212.69 L1185.41 1212.69 L1184.82 1212.69 L1184.23 1212.69 L1183.65 1212.69 L1183.06 1212.69 L1182.47 1212.69 L1181.89 1212.69 L1181.3 1212.69 L1180.71 1212.69 L1180.13 1212.69 L1179.54 1212.69 L1178.96 1212.69 L1178.37 1212.69 L1177.78 1212.69 L1177.2 1212.69 L1176.61 1212.69 L1176.02 1212.69 L1175.44 1212.69 L1174.85 1212.69 L1174.26 1212.69 L1173.68 1212.69 L1173.09 1212.69 L1172.5 1212.69 L1171.92 1212.69 L1171.33 1212.69 L1170.75 1212.69 L1170.16 1212.69 L1169.57 1212.69 L1168.99 1212.69 L1168.4 1212.69 L1167.81 1212.69 L1167.23 1212.69 L1166.64 1212.69 L1166.05 1212.69 L1165.47 1212.69 L1164.88 1212.69 L1164.29 1212.69 L1163.71 1212.69 L1163.12 1212.69 L1162.54 1212.69 L1161.95 1212.69 L1161.36 1212.69 L1160.78 1212.69 L1160.19 1212.69 L1159.6 1212.69 L1159.02 1212.69 L1158.43 1212.69 L1157.84 1212.69 L1157.26 1212.69 L1156.67 1212.69 L1156.09 1212.69 L1155.5 1212.69 L1154.91 1212.69 L1154.33 1212.69 L1153.74 1212.69 L1153.15 1212.69 L1152.57 1212.69 L1151.98 1212.69 L1151.39 1212.69 L1150.81 1212.69 L1150.22 1212.69 L1149.63 1212.69 L1149.05 1212.69 L1148.46 1212.69 L1147.88 1212.69 L1147.29 1212.69 L1146.7 1212.69 L1146.12 1212.69 L1145.53 1212.69 L1144.94 1212.69 L1144.36 1212.69 L1143.77 1212.69 L1143.18 1212.69 L1142.6 1212.69 L1142.01 1212.69 L1141.42 1212.69 L1140.84 1212.69 L1140.25 1212.69 L1139.67 1212.69 L1139.08 1212.69 L1138.49 1212.69 L1137.91 1212.69 L1137.32 1212.69 L1136.73 1212.69 L1136.15 1212.69 L1135.56 1212.69 L1134.97 1212.69 L1134.39 1212.69 L1133.8 1212.69 L1133.21 1212.69 L1132.63 1212.69 L1132.04 1212.69 L1131.46 1212.69 L1130.87 1212.69 L1130.28 1212.69 L1129.7 1212.69 L1129.11 1212.69 L1128.52 1212.69 L1127.94 1212.69 L1127.35 1212.69 L1126.76 1212.69 L1126.18 1212.69 L1125.59 1212.69 L1125.01 1212.69 L1124.42 1212.69 L1123.83 1212.69 L1123.25 1212.69 L1122.66 1212.69 L1122.07 1212.69 L1121.49 1212.69 L1120.9 1212.69 L1120.31 1212.69 L1119.73 1212.69 L1119.14 1212.69 L1118.55 1212.69 L1117.97 1212.69 L1117.38 1212.69 L1116.8 1212.69 L1116.21 1212.69 L1115.62 1212.69 L1115.04 1212.69 L1114.45 1212.69 L1113.86 1212.69 L1113.28 1212.69 L1112.69 1212.69 L1112.1 1212.69 L1111.52 1212.69 L1110.93 1212.69 L1110.34 1212.69 L1109.76 1212.69 L1109.17 1212.69 L1108.59 1212.69 L1108 1212.69 L1107.41 1212.69 L1106.83 1212.69 L1106.24 1212.69 L1105.65 1212.69 L1105.07 1212.69 L1104.48 1212.69 L1103.89 1212.69 L1103.31 1212.69 L1102.72 1212.69 L1102.14 1212.69 L1101.55 1212.69 L1100.96 1212.69 L1100.38 1212.69 L1099.79 1212.69 L1099.2 1212.69 L1098.62 1212.69 L1098.03 1212.69 L1097.44 1212.69 L1096.86 1212.69 L1096.27 1212.69 L1095.68 1212.69 L1095.1 1212.69 L1094.51 1212.69 L1093.93 1212.69 L1093.34 1212.69 L1092.75 1212.69 L1092.17 1212.69 L1091.58 1212.69 L1090.99 1212.69 L1090.41 1212.69 L1089.82 1212.69 L1089.23 1212.69 L1088.65 1212.69 L1088.06 1212.69 L1087.47 1212.69 L1086.89 1212.69 L1086.3 1212.69 L1085.72 1212.69 L1085.13 1212.69 L1084.54 1212.69 L1083.96 1212.69 L1083.37 1212.69 L1082.78 1212.69 L1082.2 1212.69 L1081.61 1212.69 L1081.02 1212.69 L1080.44 1212.69 L1079.85 1212.69 L1079.26 1212.69 L1078.68 1212.69 L1078.09 1212.69 L1077.51 1212.69 L1076.92 1212.69 L1076.33 1212.69 L1075.75 1212.69 L1075.16 1212.69 L1074.57 1212.69 L1073.99 1212.69 L1073.4 1212.69 L1072.81 1212.69 L1072.23 1212.69 L1071.64 1212.69 L1071.06 1212.69 L1070.47 1212.69 L1069.88 1212.69 L1069.3 1212.69 L1068.71 1212.69 L1068.12 1212.69 L1067.54 1212.69 L1066.95 1212.69 L1066.36 1212.69 L1065.78 1212.69 L1065.19 1212.69 L1064.6 1212.69 L1064.02 1212.69 L1063.43 1212.69 L1062.85 1212.69 L1062.26 1212.69 L1061.67 1212.69 L1061.09 1212.69 L1060.5 1212.69 L1059.91 1212.69 L1059.33 1212.69 L1058.74 1212.69 L1058.15 1212.69 L1057.57 1212.69 L1056.98 1212.69 L1056.39 1212.69 L1055.81 1212.69 L1055.22 1212.69 L1054.64 1212.69 L1054.05 1212.69 L1053.46 1212.69 L1052.88 1212.69 L1052.29 1212.69 L1051.7 1212.69 L1051.12 1212.69 L1050.53 1212.69 L1049.94 1212.69 L1049.36 1212.69 L1048.77 1212.69 L1048.19 1212.69 L1047.6 1212.69 L1047.01 1212.69 L1046.43 1212.69 L1045.84 1212.69 L1045.25 1212.69 L1044.67 1212.69 L1044.08 1212.69 L1043.49 1212.69 L1042.91 1212.69 L1042.32 1212.69 L1041.73 1212.69 L1041.15 1212.69 L1040.56 1212.69 L1039.98 1212.69 L1039.39 1212.69 L1038.8 1212.69 L1038.22 1212.69 L1037.63 1212.69 L1037.04 1212.69 L1036.46 1212.69 L1035.87 1212.69 L1035.28 1212.69 L1034.7 1212.69 L1034.11 1212.69 L1033.52 1212.69 L1032.94 1212.69 L1032.35 1212.69 L1031.77 1212.69 L1031.18 1212.69 L1030.59 1212.69 L1030.01 1212.69 L1029.42 1212.69 L1028.83 1212.69 L1028.25 1212.69 L1027.66 1212.69 L1027.07 1212.69 L1026.49 1212.69 L1025.9 1212.69 L1025.32 1212.69 L1024.73 1212.69 L1024.14 1212.69 L1023.56 1212.69 L1022.97 1212.69 L1022.38 1212.69 L1021.8 1212.69 L1021.21 1212.69 L1020.62 1212.69 L1020.04 1212.69 L1019.45 1212.69 L1018.86 1212.69 L1018.28 1212.69 L1017.69 1212.69 L1017.11 1212.69 L1016.52 1212.69 L1015.93 1212.69 L1015.35 1212.69 L1014.76 1212.69 L1014.17 1212.69 L1013.59 1212.69 L1013 1212.69 L1012.41 1212.69 L1011.83 1212.69 L1011.24 1212.69 L1010.65 1212.69 L1010.07 1212.69 L1009.48 1212.69 L1008.9 1212.69 L1008.31 1212.69 L1007.72 1212.69 L1007.14 1212.69 L1006.55 1212.69 L1005.96 1212.69 L1005.38 1212.69 L1004.79 1212.69 L1004.2 1212.69 L1003.62 1212.69 L1003.03 1212.69 L1002.44 1212.69 L1001.86 1212.69 L1001.27 1212.69 L1000.69 1212.69 L1000.1 1212.69 L999.513 1212.69 L998.926 1212.69 L998.34 1212.69 L997.754 1212.69 L997.167 1212.69 L996.581 1212.69 L995.994 1212.69 L995.408 1212.69 L994.822 1212.69 L994.235 1212.69 L993.649 1212.69 L993.062 1212.69 L992.476 1212.69 L991.889 1212.69 L991.303 1212.69 L990.717 1212.69 L990.13 1212.69 L989.544 1212.69 L988.957 1212.69 L988.371 1212.69 L987.785 1212.69 L987.198 1212.69 L986.612 1212.69 L986.025 1212.69  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.77 986.612,1212.77 987.198,1212.77 987.785,1212.77 988.371,1212.77 988.957,1212.77 989.544,1212.77 990.13,1212.77 990.717,1212.77 991.303,1212.77 991.889,1212.77 992.476,1212.77 993.062,1212.77 993.649,1212.77 994.235,1212.77 994.822,1212.77 995.408,1212.77 995.994,1212.77 996.581,1212.77 997.167,1212.77 997.754,1212.77 998.34,1212.77 998.926,1212.77 999.513,1212.77 1000.1,1212.77 1000.69,1212.77 1001.27,1212.77 1001.86,1212.77 1002.44,1212.77 1003.03,1212.77 1003.62,1212.77 1004.2,1212.77 1004.79,1212.77 1005.38,1212.77 1005.96,1212.77 1006.55,1212.77 1007.14,1212.77 1007.72,1212.77 1008.31,1212.77 1008.9,1212.77 1009.48,1212.77 1010.07,1212.77 1010.65,1212.77 1011.24,1212.77 1011.83,1212.77 1012.41,1212.77 1013,1212.77 1013.59,1212.77 1014.17,1212.77 1014.76,1212.77 1015.35,1212.77 1015.93,1212.77 1016.52,1212.77 1017.11,1212.77 1017.69,1212.77 1018.28,1212.77 1018.86,1212.77 1019.45,1212.77 1020.04,1212.77 1020.62,1212.77 1021.21,1212.77 1021.8,1212.77 1022.38,1212.77 1022.97,1212.77 1023.56,1212.77 1024.14,1212.77 1024.73,1212.77 1025.32,1212.77 1025.9,1212.77 1026.49,1212.77 1027.07,1212.77 1027.66,1212.77 1028.25,1212.77 1028.83,1212.77 1029.42,1212.77 1030.01,1212.77 1030.59,1212.77 1031.18,1212.77 1031.77,1212.77 1032.35,1212.77 1032.94,1212.77 1033.52,1212.77 1034.11,1212.77 1034.7,1212.77 1035.28,1212.77 1035.87,1212.77 1036.46,1212.77 1037.04,1212.77 1037.63,1212.77 1038.22,1212.77 1038.8,1212.77 1039.39,1212.77 1039.98,1212.77 1040.56,1212.77 1041.15,1212.77 1041.73,1212.77 1042.32,1212.77 1042.91,1212.77 1043.49,1212.77 1044.08,1212.77 1044.67,1212.77 1045.25,1212.77 1045.84,1212.77 1046.43,1212.77 1047.01,1212.77 1047.6,1212.77 1048.19,1212.77 1048.77,1212.77 1049.36,1212.77 1049.94,1212.77 1050.53,1212.77 1051.12,1212.77 1051.7,1212.77 1052.29,1212.77 1052.88,1212.77 1053.46,1212.77 1054.05,1212.77 1054.64,1212.77 1055.22,1212.77 1055.81,1212.77 1056.39,1212.77 1056.98,1212.77 1057.57,1212.77 1058.15,1212.77 1058.74,1212.77 1059.33,1212.77 1059.91,1212.77 1060.5,1212.77 1061.09,1212.77 1061.67,1212.77 1062.26,1212.77 1062.85,1212.77 1063.43,1212.77 1064.02,1212.77 1064.6,1212.77 1065.19,1212.77 1065.78,1212.77 1066.36,1212.77 1066.95,1212.77 1067.54,1212.77 1068.12,1212.77 1068.71,1212.77 1069.3,1212.77 1069.88,1212.77 1070.47,1212.77 1071.06,1212.77 1071.64,1212.77 1072.23,1212.77 1072.81,1212.77 1073.4,1212.77 1073.99,1212.77 1074.57,1212.77 1075.16,1212.77 1075.75,1212.77 1076.33,1212.77 1076.92,1212.77 1077.51,1212.77 1078.09,1212.77 1078.68,1212.77 1079.26,1212.77 1079.85,1212.77 1080.44,1212.77 1081.02,1212.77 1081.61,1212.77 1082.2,1212.77 1082.78,1212.77 1083.37,1212.77 1083.96,1212.77 1084.54,1212.77 1085.13,1212.77 1085.72,1212.77 1086.3,1212.77 1086.89,1212.77 1087.47,1212.77 1088.06,1212.77 1088.65,1212.77 1089.23,1212.77 1089.82,1212.77 1090.41,1212.77 1090.99,1212.77 1091.58,1212.77 1092.17,1212.77 1092.75,1212.77 1093.34,1212.77 1093.93,1212.77 1094.51,1212.77 1095.1,1212.77 1095.68,1212.77 1096.27,1212.77 1096.86,1212.77 1097.44,1212.77 1098.03,1212.77 1098.62,1212.77 1099.2,1212.77 1099.79,1212.77 1100.38,1212.77 1100.96,1212.77 1101.55,1212.77 1102.14,1212.77 1102.72,1212.77 1103.31,1212.77 1103.89,1212.77 1104.48,1212.77 1105.07,1212.77 1105.65,1212.77 1106.24,1212.77 1106.83,1212.77 1107.41,1212.77 1108,1212.77 1108.59,1212.77 1109.17,1212.77 1109.76,1212.77 1110.34,1212.77 1110.93,1212.77 1111.52,1212.77 1112.1,1212.77 1112.69,1212.77 1113.28,1212.77 1113.86,1212.77 1114.45,1212.77 1115.04,1212.77 1115.62,1212.77 1116.21,1212.77 1116.8,1212.77 1117.38,1212.77 1117.97,1212.77 1118.55,1212.77 1119.14,1212.77 1119.73,1212.77 1120.31,1212.77 1120.9,1212.77 1121.49,1212.77 1122.07,1212.77 1122.66,1212.77 1123.25,1212.77 1123.83,1212.77 1124.42,1212.77 1125.01,1212.77 1125.59,1212.77 1126.18,1212.77 1126.76,1212.77 1127.35,1212.77 1127.94,1212.77 1128.52,1212.77 1129.11,1212.77 1129.7,1212.77 1130.28,1212.77 1130.87,1212.77 1131.46,1212.77 1132.04,1212.77 1132.63,1212.77 1133.21,1212.77 1133.8,1212.77 1134.39,1212.77 1134.97,1212.77 1135.56,1212.77 1136.15,1212.77 1136.73,1212.77 1137.32,1212.77 1137.91,1212.77 1138.49,1212.77 1139.08,1212.77 1139.67,1212.77 1140.25,1212.77 1140.84,1212.77 1141.42,1212.77 1142.01,1212.77 1142.6,1212.77 1143.18,1212.77 1143.77,1212.77 1144.36,1212.77 1144.94,1212.77 1145.53,1212.77 1146.12,1212.77 1146.7,1212.77 1147.29,1212.77 1147.88,1212.77 1148.46,1212.77 1149.05,1212.77 1149.63,1212.77 1150.22,1212.77 1150.81,1212.77 1151.39,1212.77 1151.98,1212.77 1152.57,1212.77 1153.15,1212.77 1153.74,1212.77 1154.33,1212.77 1154.91,1212.77 1155.5,1212.77 1156.09,1212.77 1156.67,1212.77 1157.26,1212.77 1157.84,1212.77 1158.43,1212.77 1159.02,1212.77 1159.6,1212.77 1160.19,1212.77 1160.78,1212.77 1161.36,1212.77 1161.95,1212.77 1162.54,1212.77 1163.12,1212.77 1163.71,1212.77 1164.29,1212.77 1164.88,1212.77 1165.47,1212.77 1166.05,1212.77 1166.64,1212.77 1167.23,1212.77 1167.81,1212.77 1168.4,1212.77 1168.99,1212.77 1169.57,1212.77 1170.16,1212.77 1170.75,1212.77 1171.33,1212.77 1171.92,1212.77 1172.5,1212.77 1173.09,1212.77 1173.68,1212.77 1174.26,1212.77 1174.85,1212.77 1175.44,1212.77 1176.02,1212.77 1176.61,1212.77 1177.2,1212.77 1177.78,1212.77 1178.37,1212.77 1178.96,1212.77 1179.54,1212.77 1180.13,1212.77 1180.71,1212.77 1181.3,1212.77 1181.89,1212.77 1182.47,1212.77 1183.06,1212.77 1183.65,1212.77 1184.23,1212.77 1184.82,1212.77 1185.41,1212.77 1185.99,1212.77 1186.58,1212.77 1187.16,1212.77 1187.75,1212.77 1188.34,1212.77 1188.92,1212.77 1189.51,1212.77 1190.1,1212.77 1190.68,1212.77 1191.27,1212.77 1191.86,1212.77 1192.44,1212.77 1193.03,1212.77 1193.62,1212.77 1194.2,1212.77 1194.79,1212.77 1195.37,1212.77 1195.96,1212.77 1196.55,1212.77 1197.13,1212.77 1197.72,1212.77 1198.31,1212.77 1198.89,1212.77 1199.48,1212.77 1200.07,1212.77 1200.65,1212.77 1201.24,1212.77 1201.83,1212.77 1202.41,1212.77 1203,1212.77 1203.58,1212.77 1204.17,1212.77 1204.76,1212.77 1205.34,1212.77 1205.93,1212.77 1206.52,1212.77 1207.1,1212.77 1207.69,1212.77 1208.28,1212.77 1208.86,1212.77 1209.45,1212.77 1210.03,1212.77 1210.62,1212.77 1211.21,1212.77 1211.79,1212.77 1212.38,1212.77 1212.97,1212.77 1213.55,1212.77 1214.14,1212.77 1214.73,1212.77 1215.31,1212.77 1215.9,1212.77 1216.49,1212.77 1217.07,1212.77 1217.66,1212.77 1218.24,1212.77 1218.83,1212.77 1219.42,1212.77 1220,1212.77 1220.59,1212.77 1221.18,1212.77 1221.76,1212.77 1222.35,1212.77 1222.94,1212.77 1223.52,1212.77 1224.11,1212.77 1224.7,1212.77 1225.28,1212.77 1225.87,1212.77 1226.45,1212.77 1227.04,1212.77 1227.63,1212.77 1228.21,1212.77 1228.8,1212.77 1229.39,1212.77 1229.97,1212.77 1230.56,1212.77 1231.15,1212.77 1231.73,1212.77 1232.32,1212.77 1232.91,1212.77 1233.49,1212.77 1234.08,1212.77 1234.66,1212.77 1235.25,1212.77 1235.84,1212.77 1236.42,1212.77 1237.01,1212.77 1237.6,1212.77 1238.18,1212.77 1238.77,1212.77 1239.36,1212.77 1239.94,1212.77 1240.53,1212.77 1241.11,1212.77 1241.7,1212.77 1242.29,1212.77 1242.87,1212.77 1243.46,1212.77 1244.05,1212.77 1244.63,1212.77 1245.22,1212.77 1245.81,1212.77 1246.39,1212.77 1246.98,1212.77 1247.57,1212.77 1248.15,1212.77 1248.74,1212.77 1249.32,1212.77 1249.91,1212.77 1250.5,1212.77 1251.08,1212.77 1251.67,1212.77 1252.26,1212.77 1252.84,1212.77 1253.43,1212.77 1254.02,1212.77 1254.6,1212.77 1255.19,1212.77 1255.78,1212.77 1256.36,1212.77 1256.95,1212.77 1257.53,1212.77 1258.12,1212.77 1258.71,1212.77 1259.29,1212.77 1259.88,1212.77 1260.47,1212.77 1261.05,1212.77 1261.64,1212.77 1262.23,1212.77 1262.81,1212.77 1263.4,1212.77 1263.98,1212.77 1264.57,1212.77 1265.16,1212.77 1265.74,1212.77 1266.33,1212.77 1266.92,1212.77 1267.5,1212.77 1268.09,1212.77 1268.68,1212.77 1269.26,1212.77 1269.85,1212.77 1270.44,1212.77 1271.02,1212.77 1271.61,1212.77 1272.19,1212.77 1272.78,1212.77 1273.37,1212.77 1273.95,1212.77 1274.54,1212.77 1275.13,1212.77 1275.71,1212.77 1276.3,1212.77 1276.89,1212.77 1277.47,1212.77 1278.06,1212.77 1278.65,1212.77 1279.23,1212.77 1279.82,1212.77 1280.4,1212.77 1280.99,1212.77 1281.58,1212.77 1282.16,1212.77 1282.75,1212.77 1283.34,1212.77 1283.92,1212.77 1284.51,1212.77 1285.1,1212.77 1285.68,1212.77 1286.27,1212.77 1286.86,1212.77 1287.44,1212.77 1288.03,1212.77 1288.61,1212.77 1289.2,1212.77 1289.79,1212.77 1290.37,1212.77 1290.96,1212.77 1291.55,1212.77 1292.13,1212.77 1292.72,1212.77 1293.31,1212.77 1293.89,1212.77 1294.48,1212.77 1295.06,1212.77 1295.65,1212.77 1296.24,1212.77 1296.82,1212.77 1297.41,1212.77 1298,1212.77 1298.58,1212.77 1299.17,1212.77 1299.76,1212.77 1300.34,1212.77 1300.93,1212.77 1301.52,1212.77 1302.1,1212.77 1302.69,1212.77 1303.27,1212.77 1303.86,1212.77 1304.45,1212.77 1305.03,1212.77 1305.62,1212.77 1306.21,1212.77 1306.79,1212.77 1307.38,1212.77 1307.97,1212.77 1308.55,1212.77 1309.14,1212.77 1309.73,1212.77 1310.31,1212.77 1310.9,1212.77 1311.48,1212.77 1312.07,1212.77 1312.66,1212.77 1313.24,1212.77 1313.83,1212.77 1314.42,1212.77 1315,1212.77 1315.59,1212.77 1316.18,1212.77 1316.76,1212.77 1317.35,1212.77 1317.93,1212.77 1318.52,1212.77 1319.11,1212.77 1319.69,1212.77 1320.28,1212.77 1320.87,1212.77 1321.45,1212.77 1322.04,1212.77 1322.63,1212.77 1323.21,1212.77 1323.8,1212.77 1324.39,1212.77 1324.97,1212.77 1325.56,1212.77 1326.14,1212.77 1326.73,1212.77 1327.32,1212.77 1327.9,1212.77 1328.49,1212.77 1329.08,1212.77 1329.66,1212.77 1330.25,1212.77 1330.84,1212.77 1331.42,1212.77 1332.01,1212.77 1332.6,1212.77 1333.18,1212.77 1333.77,1212.77 1334.35,1212.77 1334.94,1212.77 1335.53,1212.77 1336.11,1212.77 1336.7,1212.77 1337.29,1212.77 1337.87,1212.77 1338.46,1212.77 1339.05,1212.77 1339.63,1212.77 1340.22,1212.77 1340.8,1212.77 1341.39,1212.77 1341.98,1212.77 1342.56,1212.77 1343.15,1212.77 1343.74,1212.77 1344.32,1212.77 1344.91,1212.77 1345.5,1212.77 1346.08,1212.77 1346.67,1212.77 1347.26,1212.77 1347.84,1212.77 1348.43,1212.77 1349.01,1212.77 1349.6,1212.77 1350.19,1212.77 1350.77,1212.77 1351.36,1212.77 1351.95,1212.77 1352.53,1212.77 1353.12,1212.77 1353.71,1212.77 1354.29,1212.77 1354.88,1212.77 1355.47,1212.77 1356.05,1212.77 1356.64,1212.77 1357.22,1212.77 1357.81,1212.77 1358.4,1212.77 1358.98,1212.77 1359.57,1212.77 1360.16,1212.77 1360.74,1212.77 1361.33,1212.77 1361.92,1212.77 1362.5,1212.77 1363.09,1212.77 1363.68,1212.77 1364.26,1212.77 1364.85,1212.77 1365.43,1212.77 1366.02,1212.77 1366.61,1212.77 1367.19,1212.77 1367.78,1212.77 1368.37,1212.77 1368.95,1212.77 1369.54,1212.77 1370.13,1212.77 1370.71,1212.77 1371.3,1212.77 1371.88,1212.77 1372.47,1212.77 1373.06,1212.77 1373.64,1212.77 1374.23,1212.77 1374.82,1212.77 1375.4,1212.77 1375.99,1212.77 1376.58,1212.77 1377.16,1212.77 1377.75,1212.77 1378.34,1212.77 1378.92,1212.77 1379.51,1212.77 1380.09,1212.77 1380.68,1212.77 1381.27,1212.77 1381.85,1212.77 1382.44,1212.77 1383.03,1212.77 1383.61,1212.77 1384.2,1212.77 1384.79,1212.77 1385.37,1212.77 1385.96,1212.77 1386.55,1212.77 1387.13,1212.77 1387.72,1212.77 1388.3,1212.77 1388.89,1212.77 1389.48,1212.77 1390.06,1212.77 1390.65,1212.77 1391.24,1212.77 1391.82,1212.77 1392.41,1212.77 1393,1212.77 1393.58,1212.77 1394.17,1212.77 1394.75,1212.77 1395.34,1212.77 1395.93,1212.77 1396.51,1212.77 1397.1,1212.77 1397.69,1212.77 1398.27,1212.77 1398.86,1212.77 1399.45,1212.77 1400.03,1212.77 1400.62,1212.77 1401.21,1212.77 1401.79,1212.77 1402.38,1212.77 1402.96,1212.77 1403.55,1212.77 1404.14,1212.77 1404.72,1212.77 1405.31,1212.77 1405.9,1212.77 1406.48,1212.77 1407.07,1212.77 1407.66,1212.77 1408.24,1212.77 1408.83,1212.77 1409.42,1212.77 1410,1212.77 1410.59,1212.77 1411.17,1212.77 1411.76,1212.77 1412.35,1212.77 1412.93,1212.77 1413.52,1212.77 1414.11,1212.77 1414.69,1212.77 1415.28,1212.77 1415.87,1212.77 1416.45,1212.77 1417.04,1212.77 1417.63,1212.77 1418.21,1212.77 1418.8,1212.77 1419.38,1212.77 1419.97,1212.77 1420.56,1212.77 1421.14,1212.77 1421.73,1212.77 1422.32,1212.77 1422.9,1212.77 1423.49,1212.77 1424.08,1212.77 1424.66,1212.77 1425.25,1212.77 1425.83,1212.77 1426.42,1212.77 1427.01,1212.77 1427.59,1212.77 1428.18,1212.77 1428.77,1212.77 1429.35,1212.77 1429.94,1212.77 1430.53,1212.77 1431.11,1212.77 1431.7,1212.77 1432.29,1212.77 1432.87,1212.77 1433.46,1212.77 1434.04,1212.77 1434.63,1212.77 1435.22,1212.77 1435.8,1212.77 1436.39,1212.77 1436.98,1212.77 1437.56,1212.77 1438.15,1212.77 1438.74,1212.77 1439.32,1212.77 1439.91,1212.77 1440.5,1212.77 1441.08,1212.77 1441.67,1212.77 1442.25,1212.77 1442.84,1212.77 1443.43,1212.77 1444.01,1212.77 1444.6,1212.77 1445.19,1212.77 1445.77,1212.77 1446.36,1212.77 1446.95,1212.77 1447.53,1212.77 1448.12,1212.77 1448.7,1212.77 1449.29,1212.77 1449.88,1212.77 1450.46,1212.77 1451.05,1212.77 1451.64,1212.77 1452.22,1212.77 1452.81,1212.77 1453.4,1212.77 1453.98,1212.77 1454.57,1212.77 1455.16,1212.77 1455.74,1212.77 1456.33,1212.77 1456.91,1212.77 1457.5,1212.77 1458.09,1212.77 1458.67,1212.77 1459.26,1212.77 1459.85,1212.77 1460.43,1212.77 1461.02,1212.77 1461.61,1212.77 1462.19,1212.77 1462.78,1212.77 1463.37,1212.77 1463.95,1212.77 1464.54,1212.77 1465.12,1212.77 1465.71,1212.77 1466.3,1212.77 1466.88,1212.77 1467.47,1212.77 1468.06,1212.77 1468.64,1212.77 1469.23,1212.77 1469.82,1212.77 1470.4,1212.77 1470.99,1212.77 1471.57,1212.77 1472.16,1212.77 1472.75,1212.77 1473.33,1212.77 1473.92,1212.77 1474.51,1212.77 1475.09,1212.77 1475.68,1212.77 1476.27,1212.77 1476.85,1212.77 1477.44,1212.77 1478.03,1212.77 1478.61,1212.77 1479.2,1212.77 1479.78,1212.77 1480.37,1212.77 1480.96,1212.77 1481.54,1212.77 1482.13,1212.77 1482.72,1212.77 1483.3,1212.77 1483.89,1212.77 1484.48,1212.77 1485.06,1212.77 1485.65,1212.77 1486.24,1212.77 1486.82,1212.77 1487.41,1212.77 1487.99,1212.77 1488.58,1212.77 1489.17,1212.77 1489.75,1212.77 1490.34,1212.77 1490.93,1212.77 1491.51,1212.77 1492.1,1212.77 1492.69,1212.77 1493.27,1212.77 1493.86,1212.77 1494.45,1212.77 1495.03,1212.77 1495.62,1212.77 1496.2,1212.77 1496.79,1212.77 1497.38,1212.77 1497.96,1212.77 1498.55,1212.77 1499.14,1212.77 1499.72,1212.77 1500.31,1212.77 1500.9,1212.77 1501.48,1212.77 1502.07,1212.77 1502.65,1212.77 1503.24,1212.77 1503.83,1212.77 1504.41,1212.77 1505,1212.77 1505.59,1212.77 1506.17,1212.77 1506.76,1212.77 1507.35,1212.77 1507.93,1212.77 1508.52,1212.77 1509.11,1212.77 1509.69,1212.77 1510.28,1212.77 1510.86,1212.77 1511.45,1212.77 1512.04,1212.77 1512.62,1212.77 1513.21,1212.77 1513.8,1212.77 1514.38,1212.77 1514.97,1212.77 1515.56,1212.77 1516.14,1212.77 1516.73,1212.77 1517.32,1212.77 1517.9,1212.77 1518.49,1212.77 1519.07,1212.77 1519.66,1212.77 1520.25,1212.77 1520.83,1212.77 1521.42,1212.77 1522.01,1212.77 1522.59,1212.77 1523.18,1212.77 1523.77,1212.77 1524.35,1212.77 1524.94,1212.77 1525.52,1212.77 1526.11,1212.77 1526.7,1212.77 1527.28,1212.77 1527.87,1212.77 1528.46,1212.77 1529.04,1212.77 1529.63,1212.77 1530.22,1212.77 1530.8,1212.77 1531.39,1212.77 1531.98,1212.77 1532.56,1212.77 1533.15,1212.77 1533.73,1212.77 1534.32,1212.77 1534.91,1212.77 1535.49,1212.77 1536.08,1212.77 1536.67,1212.77 1537.25,1212.77 1537.84,1212.77 1538.43,1212.77 1539.01,1212.77 1539.6,1212.77 1540.19,1212.77 1540.77,1212.77 1541.36,1212.77 1541.94,1212.77 1542.53,1212.77 1543.12,1212.77 1543.7,1212.77 1544.29,1212.77 1544.88,1212.77 1545.46,1212.77 1546.05,1212.77 1546.64,1212.77 1547.22,1212.77 1547.81,1212.77 1548.4,1212.77 1548.98,1212.77 1549.57,1212.77 1550.15,1212.77 1550.74,1212.77 1551.33,1212.77 1551.91,1212.77 1552.5,1212.77 1553.09,1212.77 1553.67,1212.77 1554.26,1212.77 1554.85,1212.77 1555.43,1212.77 1556.02,1212.77 1556.6,1212.77 1557.19,1212.77 1557.78,1212.77 1558.36,1212.77 1558.95,1212.77 1559.54,1212.77 1560.12,1212.77 1560.71,1212.77 1561.3,1212.77 1561.88,1212.77 1562.47,1212.77 1563.06,1212.77 1563.64,1212.77 1564.23,1212.77 1564.81,1212.77 1565.4,1212.77 1565.99,1212.77 1566.57,1212.77 1567.16,1212.77 1567.75,1212.77 1568.33,1212.77 1568.92,1212.77 1569.51,1212.77 1570.09,1212.77 1570.68,1212.77 1571.27,1212.77 1571.85,1212.77 1572.44,1212.77 1573.02,1212.77 1573.61,1212.77 1574.2,1212.77 1574.78,1212.77 1575.37,1212.77 1575.96,1212.77 1576.54,1212.77 1577.13,1212.77 1577.72,1212.77 1578.3,1212.77 1578.89,1212.77 1579.47,1212.77 1580.06,1212.77 1580.65,1212.77 1581.23,1212.77 1581.82,1212.77 1582.41,1212.77 1582.99,1212.77 1583.58,1212.77 1584.17,1212.77 1584.75,1212.77 1585.34,1212.77 1585.93,1212.77 1586.51,1212.77 1587.1,1212.77 1587.68,1212.77 1588.27,1212.77 1588.86,1212.77 1589.44,1212.77 1590.03,1212.77 1590.62,1212.77 1591.2,1212.77 1591.79,1212.77 1592.38,1212.77 1592.96,1212.77 1593.55,1212.77 1594.14,1212.77 1594.72,1212.77 1595.31,1212.77 1595.89,1212.77 1596.48,1212.77 1597.07,1212.77 1597.65,1212.77 1598.24,1212.77 1598.83,1212.77 1599.41,1212.77 1600,1212.77 1600.59,1212.77 1601.17,1212.77 1601.76,1212.77 1602.34,1212.77 1602.93,1212.77 1603.52,1212.77 1604.1,1212.77 1604.69,1212.77 1605.28,1212.77 1605.86,1212.77 1606.45,1212.77 1607.04,1212.77 1607.62,1212.77 1608.21,1212.77 1608.8,1212.77 1609.38,1212.77 1609.97,1212.77 1610.55,1212.77 1611.14,1212.77 1611.73,1212.77 1612.31,1212.77 1612.9,1212.77 1613.49,1212.77 1614.07,1212.77 1614.66,1212.77 1615.25,1212.77 1615.83,1212.77 1616.42,1212.77 1617.01,1212.77 1617.59,1212.77 1618.18,1212.77 1618.76,1212.77 1619.35,1212.77 1619.94,1212.77 1620.52,1212.77 1621.11,1212.77 1621.7,1212.77 1622.28,1212.77 1622.87,1212.77 1623.46,1212.77 1624.04,1212.77 1624.63,1212.77 1625.22,1212.77 1625.8,1212.77 1626.39,1212.77 1626.97,1212.77 1627.56,1212.77 1628.15,1212.77 1628.73,1212.77 1629.32,1212.77 1629.91,1212.77 1630.49,1212.77 1631.08,1212.77 1631.67,1212.77 1632.25,1212.77 1632.84,1212.77 1633.42,1212.77 1634.01,1212.77 1634.6,1212.77 1635.18,1212.77 1635.77,1212.77 1636.36,1212.77 1636.94,1212.77 1637.53,1212.77 1638.12,1212.77 1638.7,1212.77 1639.29,1212.77 1639.88,1212.77 1640.46,1212.77 1641.05,1212.77 1641.63,1212.77 1642.22,1212.77 1642.81,1212.77 1643.39,1212.77 1643.98,1212.77 1644.57,1212.77 1645.15,1212.77 1645.74,1212.77 1646.33,1212.77 1646.91,1212.77 1647.5,1212.77 1648.09,1212.77 1648.67,1212.77 1649.26,1212.77 1649.84,1212.77 1650.43,1212.77 1651.02,1212.77 1651.6,1212.77 1652.19,1212.77 1652.78,1212.77 1653.36,1212.77 1653.95,1212.77 1654.54,1212.77 1655.12,1212.77 1655.71,1212.77 1656.29,1212.77 1656.88,1212.77 1657.47,1212.77 1658.05,1212.77 1658.64,1212.77 1659.23,1212.77 1659.81,1212.77 1660.4,1212.77 1660.99,1212.77 1661.57,1212.77 1662.16,1212.77 1662.75,1212.77 1663.33,1212.77 1663.92,1212.77 1664.5,1212.77 1665.09,1212.77 1665.68,1212.77 1666.26,1212.77 1666.85,1212.77 1667.44,1212.77 1668.02,1212.77 1668.61,1212.77 1669.2,1212.77 1669.78,1212.77 1670.37,1212.77 1670.96,1212.77 1671.54,1212.77 1672.13,1212.77 1672.71,1212.77 1673.3,1212.77 1673.89,1212.77 1674.47,1212.77 1675.06,1212.77 1675.65,1212.77 1676.23,1212.77 1676.82,1212.77 1677.41,1212.77 1677.99,1212.77 1678.58,1212.77 1679.17,1212.77 1679.75,1212.77 1680.34,1212.77 1680.92,1212.77 1681.51,1212.77 1682.1,1212.77 1682.68,1212.77 1683.27,1212.77 1683.86,1212.77 1684.44,1212.77 1685.03,1212.77 1685.62,1212.77 1686.2,1212.77 1686.79,1212.77 1687.37,1212.77 1687.96,1212.77 1688.55,1212.77 1689.13,1212.77 1689.72,1212.77 1690.31,1212.77 1690.89,1212.77 1691.48,1212.77 1692.07,1212.77 1692.65,1212.77 1693.24,1212.77 1693.83,1212.77 1694.41,1212.77 1695,1212.77 1695.58,1212.77 1696.17,1212.77 1696.76,1212.77 1697.34,1212.77 1697.93,1212.77 1698.52,1212.77 1699.1,1212.77 1699.69,1212.77 1700.28,1212.77 1700.86,1212.77 1701.45,1212.77 1702.04,1212.77 1702.62,1212.77 1703.21,1212.77 1703.79,1212.77 1704.38,1212.77 1704.97,1212.77 1705.55,1212.77 1706.14,1212.77 1706.73,1212.77 1707.31,1212.77 1707.9,1212.77 1708.49,1212.77 1709.07,1212.77 1709.66,1212.77 1710.24,1212.77 1710.83,1212.77 1711.42,1212.77 1712,1212.77 1712.59,1212.77 1713.18,1212.77 1713.76,1212.77 1714.35,1212.77 1714.94,1212.77 1715.52,1212.77 1716.11,1212.77 1716.7,1212.77 1717.28,1212.77 1717.87,1212.77 1718.45,1212.77 1719.04,1212.77 1719.63,1212.77 1720.21,1212.77 1720.8,1212.77 1721.39,1212.77 1721.97,1212.77 1722.56,1212.77 1723.15,1212.77 1723.73,1212.77 1724.32,1212.77 1724.91,1212.77 1725.49,1212.77 1726.08,1212.77 1726.66,1212.77 1727.25,1212.77 1727.84,1212.77 1728.42,1212.77 1729.01,1212.77 1729.6,1212.77 1730.18,1212.77 1730.77,1212.77 1731.36,1212.77 1731.94,1212.77 1732.53,1212.77 1733.11,1212.77 1733.7,1212.77 1734.29,1212.77 1734.87,1212.77 1735.46,1212.77 1736.05,1212.77 1736.63,1212.77 1737.22,1212.77 1737.81,1212.77 1738.39,1212.77 1738.98,1212.77 1739.57,1212.77 1740.15,1212.77 1740.74,1212.77 1741.32,1212.77 1741.91,1212.77 1742.5,1212.77 1743.08,1212.77 1743.67,1212.77 1744.26,1212.77 1744.84,1212.77 1745.43,1212.77 1746.02,1212.77 1746.6,1212.77 1747.19,1212.77 1747.78,1212.77 1748.36,1212.77 1748.95,1212.77 1749.53,1212.77 1750.12,1212.77 1750.71,1212.77 1751.29,1212.77 1751.88,1212.77 1752.47,1212.77 1753.05,1212.77 1753.64,1212.77 1754.23,1212.77 1754.81,1212.77 1755.4,1212.77 1755.99,1212.77 1756.57,1212.77 1757.16,1212.77 1757.74,1212.77 1758.33,1212.77 1758.92,1212.77 1759.5,1212.77 1760.09,1212.77 1760.68,1212.77 1761.26,1212.77 1761.85,1212.77 1762.44,1212.77 1763.02,1212.77 1763.61,1212.77 1764.19,1212.77 1764.78,1212.77 1765.37,1212.77 1765.95,1212.77 1766.54,1212.77 1767.13,1212.77 1767.71,1212.77 1768.3,1212.77 1768.89,1212.77 1769.47,1212.77 1770.06,1212.77 1770.65,1212.77 1771.23,1212.77 1771.82,1212.77 1772.4,1212.77 1772.99,1212.77 1773.58,1212.77 1774.16,1212.77 1774.75,1212.77 1775.34,1212.77 1775.92,1212.77 1776.51,1212.77 1777.1,1212.77 1777.68,1212.77 1778.27,1212.77 1778.86,1212.77 1779.44,1212.77 1780.03,1212.77 1780.61,1212.77 1781.2,1212.77 1781.79,1212.77 1782.37,1212.77 1782.96,1212.77 1783.55,1212.77 1784.13,1212.77 1784.72,1212.77 1785.31,1212.77 1785.89,1212.77 1786.48,1212.77 1787.06,1212.77 1787.65,1212.77 1788.24,1212.77 1788.82,1212.77 1789.41,1212.77 1790,1212.77 1790.58,1212.77 1791.17,1212.77 1791.76,1212.77 1792.34,1212.77 1792.93,1212.77 1793.52,1212.77 1794.1,1212.77 1794.69,1212.77 1795.27,1212.77 1795.86,1212.77 1796.45,1212.77 1797.03,1212.77 1797.62,1212.77 1798.21,1212.77 1798.79,1212.77 1799.38,1212.77 1799.97,1212.77 1800.55,1212.77 1801.14,1212.77 1801.73,1212.77 1802.31,1212.77 1802.9,1212.77 1803.48,1212.77 1804.07,1212.77 1804.66,1212.77 1805.24,1212.77 1805.83,1212.77 1806.42,1212.77 1807,1212.77 1807.59,1212.77 1808.18,1212.77 1808.76,1212.77 1809.35,1212.77 1809.94,1212.77 1810.52,1212.77 1811.11,1212.77 1811.69,1212.77 1812.28,1212.77 1812.87,1212.77 1813.45,1212.77 1814.04,1212.77 1814.63,1212.77 1815.21,1212.77 1815.8,1212.77 1816.39,1212.77 1816.97,1212.77 1817.56,1212.77 1818.14,1212.77 1818.73,1212.77 1819.32,1212.77 1819.9,1212.77 1820.49,1212.77 1821.08,1212.77 1821.66,1212.77 1822.25,1212.77 1822.84,1212.77 1823.42,1212.77 1824.01,1212.77 1824.6,1212.77 1825.18,1212.77 1825.77,1212.77 1826.35,1212.77 1826.94,1212.77 1827.53,1212.77 1828.11,1212.77 1828.7,1212.77 1829.29,1212.77 1829.87,1212.77 1830.46,1212.77 1831.05,1212.77 1831.63,1212.77 1832.22,1212.77 1832.81,1212.77 1833.39,1212.77 1833.98,1212.77 1834.56,1212.77 1835.15,1212.77 1835.74,1212.77 1836.32,1212.77 1836.91,1212.77 1837.5,1212.77 1838.08,1212.77 1838.67,1212.77 1839.26,1212.77 1839.84,1212.77 1840.43,1212.77 1841.01,1212.77 1841.6,1212.77 1842.19,1212.77 1842.77,1212.77 1843.36,1212.77 1843.95,1212.77 1844.53,1212.77 1845.12,1212.77 1845.71,1212.77 1846.29,1212.77 1846.88,1212.77 1847.47,1212.77 1848.05,1212.77 1848.64,1212.77 1849.22,1212.77 1849.81,1212.77 1850.4,1212.77 1850.98,1212.77 1851.57,1212.77 1852.16,1212.77 1852.74,1212.77 1853.33,1212.77 1853.92,1212.77 1854.5,1212.77 1855.09,1212.77 1855.68,1212.77 1856.26,1212.77 1856.85,1212.77 1857.43,1212.77 1858.02,1212.77 1858.61,1212.77 1859.19,1212.77 1859.78,1212.77 1860.37,1212.77 1860.95,1212.77 1861.54,1212.77 1862.13,1212.77 1862.71,1212.77 1863.3,1212.77 1863.88,1212.77 1864.47,1212.77 1865.06,1212.77 1865.64,1212.77 1866.23,1212.77 1866.82,1212.77 1867.4,1212.77 1867.99,1212.77 1868.58,1212.77 1869.16,1212.77 1869.75,1212.77 1870.34,1212.77 1870.92,1212.77 1871.51,1212.77 1872.09,1212.77 1872.68,1212.77 1873.27,1212.77 1873.85,1212.77 1874.44,1212.77 1875.03,1212.77 1875.61,1212.77 1876.2,1212.77 1876.79,1212.77 1877.37,1212.77 1877.96,1212.77 1878.55,1212.77 1879.13,1212.77 1879.72,1212.77 1880.3,1212.77 1880.89,1212.77 1881.48,1212.77 1882.06,1212.77 1882.65,1212.77 1883.24,1212.77 1883.82,1212.77 1884.41,1212.77 1885,1212.77 1885.58,1212.77 1886.17,1212.77 1886.76,1212.77 1887.34,1212.77 1887.93,1212.77 1888.51,1212.77 1889.1,1212.77 1889.69,1212.77 1890.27,1212.77 1890.86,1212.77 1891.45,1212.77 1892.03,1212.77 1892.62,1212.77 1893.21,1212.77 1893.79,1212.77 1894.38,1212.77 1894.96,1212.77 1895.55,1212.77 1896.14,1212.77 1896.72,1212.77 1897.31,1212.77 1897.9,1212.77 1898.48,1212.77 1899.07,1212.77 1899.66,1212.77 1900.24,1212.77 1900.83,1212.77 1901.42,1212.77 1902,1212.77 1902.59,1212.77 1903.17,1212.77 1903.76,1212.77 1904.35,1212.77 1904.93,1212.77 1905.52,1212.77 1906.11,1212.77 1906.69,1212.77 1907.28,1212.77 1907.87,1212.77 1908.45,1212.77 1909.04,1212.77 1909.63,1212.77 1910.21,1212.77 1910.8,1212.77 1911.38,1212.77 1911.97,1212.77 1912.56,1212.77 1913.14,1212.77 1913.73,1212.77 1914.32,1212.77 1914.9,1212.77 1915.49,1212.77 1916.08,1212.77 1916.66,1212.77 1917.25,1212.77 1917.83,1212.77 1918.42,1212.77 1919.01,1212.77 1919.59,1212.77 1920.18,1212.77 1920.77,1212.77 1921.35,1212.77 1921.94,1212.77 1922.53,1212.77 1923.11,1212.77 1923.7,1212.77 1924.29,1212.77 1924.87,1212.77 1925.46,1212.77 1926.04,1212.77 1926.63,1212.77 1927.22,1212.77 1927.8,1212.77 1928.39,1212.77 1928.98,1212.77 1929.56,1212.77 1930.15,1212.77 1930.74,1212.77 1931.32,1212.77 1931.91,1212.77 1932.5,1212.77 1933.08,1212.77 1933.67,1212.77 1934.25,1212.77 1934.84,1212.77 1935.43,1212.77 1936.01,1212.77 1936.6,1212.77 1937.19,1212.77 1937.77,1212.77 1938.36,1212.77 1938.95,1212.77 1939.53,1212.77 1940.12,1212.77 1940.71,1212.77 1941.29,1212.77 1941.88,1212.77 1942.46,1212.77 1943.05,1212.77 1943.64,1212.77 1944.22,1212.77 1944.81,1212.77 1945.4,1212.77 1945.98,1212.77 1946.57,1212.77 1947.16,1212.77 1947.74,1212.77 1948.33,1212.77 1948.91,1212.77 1949.5,1212.77 1950.09,1212.77 1950.67,1212.77 1951.26,1212.77 1951.85,1212.77 1952.43,1212.77 1953.02,1212.77 1953.61,1212.77 1954.19,1212.77 1954.78,1212.77 1955.37,1212.77 1955.95,1212.77 1956.54,1212.77 1957.12,1212.77 1957.71,1212.77 1958.3,1212.77 1958.88,1212.77 1959.47,1212.77 1960.06,1212.77 1960.64,1212.77 1961.23,1212.77 1961.82,1212.77 1962.4,1212.77 1962.99,1212.77 1963.58,1212.77 1964.16,1212.77 1964.75,1212.77 1965.33,1212.77 1965.92,1212.77 1966.51,1212.77 1967.09,1212.77 1967.68,1212.77 1968.27,1212.77 1968.85,1212.77 1969.44,1212.77 1970.03,1212.77 1970.61,1212.77 1971.2,1212.77 1971.78,1212.77 1972.37,1212.77 1972.96,1212.77 1973.54,1212.77 1974.13,1212.77 1974.72,1212.77 1975.3,1212.77 1975.89,1212.77 1976.48,1212.77 1977.06,1212.77 1977.65,1212.77 1978.24,1212.77 1978.82,1212.77 1979.41,1212.77 1979.99,1212.77 1980.58,1212.77 1981.17,1212.77 1981.75,1212.77 1982.34,1212.77 1982.93,1212.77 1983.51,1212.77 1984.1,1212.77 1984.69,1212.77 1985.27,1212.77 1985.86,1212.77 1986.45,1212.77 1987.03,1212.77 1987.62,1212.77 1988.2,1212.77 1988.79,1212.77 1989.38,1212.77 1989.96,1212.77 1990.55,1212.77 1991.14,1212.77 1991.72,1212.77 1992.31,1212.77 1992.9,1212.77 1993.48,1212.77 1994.07,1212.77 1994.65,1212.77 1995.24,1212.77 1995.83,1212.77 1996.41,1212.77 1997,1212.77 1997.59,1212.77 1998.17,1212.77 1998.76,1212.77 1999.35,1212.77 1999.93,1212.77 2000.52,1212.77 2001.11,1212.77 2001.69,1212.77 2002.28,1212.77 2002.86,1212.77 2003.45,1212.77 2004.04,1212.77 2004.62,1212.77 2005.21,1212.77 2005.8,1212.77 2006.38,1212.77 2006.97,1212.77 2007.56,1212.77 2008.14,1212.77 2008.73,1212.77 2009.32,1212.77 2009.9,1212.77 2010.49,1212.77 2011.07,1212.77 2011.66,1212.77 2012.25,1212.77 2012.83,1212.77 2013.42,1212.77 2014.01,1212.77 2014.59,1212.77 2015.18,1212.77 2015.77,1212.77 2016.35,1212.77 2016.94,1212.77 2017.53,1212.77 2018.11,1212.77 2018.7,1212.77 2019.28,1212.77 2019.87,1212.77 2020.46,1212.77 2021.04,1212.77 2021.63,1212.77 2022.22,1212.77 2022.8,1212.77 2023.39,1212.77 2023.98,1212.77 2024.56,1212.77 2025.15,1212.77 2025.73,1212.77 2026.32,1212.77 2026.91,1212.77 2027.49,1212.77 2028.08,1212.77 2028.67,1212.77 2029.25,1212.77 2029.84,1212.77 2030.43,1212.77 2031.01,1212.77 2031.6,1212.77 2032.19,1212.77 2032.77,1212.77 2033.36,1212.77 2033.94,1212.77 2034.53,1212.77 2035.12,1212.77 2035.7,1212.77 2036.29,1212.77 2036.88,1212.77 2037.46,1212.77 2038.05,1212.77 2038.64,1212.77 2039.22,1212.77 2039.81,1212.77 2040.4,1212.77 2040.98,1212.77 2041.57,1212.77 2042.15,1212.77 2042.74,1212.77 2043.33,1212.77 2043.91,1212.77 2044.5,1212.77 2045.09,1212.77 2045.67,1212.77 2046.26,1212.77 2046.85,1212.77 2047.43,1212.77 2048.02,1212.77 2048.6,1212.77 2049.19,1212.77 2049.78,1212.77 2050.36,1212.77 2050.95,1212.77 2051.54,1212.77 2052.12,1212.77 2052.71,1212.77 2053.3,1212.77 2053.88,1212.77 2054.47,1212.77 2055.06,1212.77 2055.64,1212.77 2056.23,1212.77 2056.81,1212.77 2057.4,1212.77 2057.99,1212.77 2058.57,1212.77 2059.16,1212.77 2059.75,1212.77 2060.33,1212.77 2060.92,1212.77 2061.51,1212.77 2062.09,1212.77 2062.68,1212.77 2063.27,1212.77 2063.85,1212.77 2064.44,1212.77 2065.02,1212.77 2065.61,1212.77 2066.2,1212.77 2066.78,1212.77 2067.37,1212.77 2067.96,1212.77 2068.54,1212.77 2069.13,1212.77 2069.72,1212.77 2070.3,1212.77 2070.89,1212.77 2071.48,1212.77 2072.06,1212.77 2072.65,1212.77 2073.23,1212.77 2073.82,1212.77 2074.41,1212.77 2074.99,1212.77 2075.58,1212.77 2076.17,1212.77 2076.75,1212.77 2077.34,1212.77 2077.93,1212.77 2078.51,1212.77 2079.1,1212.77 2079.68,1212.77 2080.27,1212.77 2080.86,1212.77 2081.44,1212.77 2082.03,1212.77 2082.62,1212.77 2083.2,1212.77 2083.79,1212.77 2084.38,1212.77 2084.96,1212.77 2085.55,1212.77 2086.14,1212.77 2086.72,1212.77 2087.31,1212.77 2087.89,1212.77 2088.48,1212.77 2089.07,1212.77 2089.65,1212.77 2090.24,1212.77 2090.83,1212.77 2091.41,1212.77 2092,1212.77 2092.59,1212.77 2093.17,1212.77 2093.76,1212.77 2094.35,1212.77 2094.93,1212.77 2095.52,1212.77 2096.1,1212.77 2096.69,1212.77 2097.28,1212.77 2097.86,1212.77 2098.45,1212.77 2099.04,1212.77 2099.62,1212.77 2100.21,1212.77 2100.8,1212.77 2101.38,1212.77 2101.97,1212.77 2102.55,1212.77 2103.14,1212.77 2103.73,1212.77 2104.31,1212.77 2104.9,1212.77 2105.49,1212.77 2106.07,1212.77 2106.66,1212.77 2107.25,1212.77 2107.83,1212.77 2108.42,1212.77 2109.01,1212.77 2109.59,1212.77 2110.18,1212.77 2110.76,1212.77 2111.35,1212.77 2111.94,1212.77 2112.52,1212.77 2113.11,1212.77 2113.7,1212.77 2114.28,1212.77 2114.87,1212.77 2115.46,1212.77 2116.04,1212.77 2116.63,1212.77 2117.22,1212.77 2117.8,1212.77 2118.39,1212.77 2118.97,1212.77 2119.56,1212.77 2120.15,1212.77 2120.73,1212.77 2121.32,1212.77 2121.91,1212.77 2122.49,1212.77 2123.08,1212.77 2123.67,1212.77 2124.25,1212.77 2124.84,1212.77 2125.42,1212.77 2126.01,1212.77 2126.6,1212.77 2127.18,1212.77 2127.77,1212.77 2128.36,1212.77 2128.94,1212.77 2129.53,1212.77 2130.12,1212.77 2130.7,1212.77 2131.29,1212.77 2131.88,1212.77 2132.46,1212.77 2133.05,1212.77 2133.63,1212.77 2134.22,1212.77 2134.81,1212.77 2135.39,1212.77 2135.98,1212.77 2136.57,1212.77 2137.15,1212.77 2137.74,1212.77 2138.33,1212.77 2138.91,1212.77 2139.5,1212.77 2140.09,1212.77 2140.67,1212.77 2141.26,1212.77 2141.84,1212.77 2142.43,1212.77 2143.02,1212.77 2143.6,1212.77 2144.19,1212.77 2144.78,1212.77 2145.36,1212.77 2145.95,1212.77 2146.54,1212.77 2147.12,1212.77 2147.71,1212.77 2148.3,1212.77 2148.88,1212.77 2149.47,1212.77 2150.05,1212.77 2150.64,1212.77 2151.23,1212.77 2151.81,1212.77 2152.4,1212.77 2152.99,1212.77 2153.57,1212.77 2154.16,1212.77 2154.75,1212.77 2155.33,1212.77 2155.92,1212.77 2156.5,1212.77 2157.09,1212.77 2157.68,1212.77 2158.26,1212.77 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.69,1195.94 1399.24,899.083 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.21 985.439,1195.94 2158.26,1195.94 2158.26,1229.21 985.439,1229.21 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip253\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip253)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-9047.34 166.588,-9677.06 167.147,-10243.6 167.706,-10750.9 168.266,-10278.9 168.825,-10719.5 169.384,-11094.3 169.943,-11426.1 170.503,-11711.4 171.062,-11956.3 171.621,-12179.5 172.18,-11775.3 172.74,-11936.6 173.299,-12079.2 173.858,-12184.1 174.417,-12255.3 174.977,-12316 175.536,-12352.6 176.095,-12360.5 176.655,-12003.5 177.214,-11343.6 177.773,-11017.6 178.332,-10964.1 178.892,-10650.3 179.451,-10125 180.01,-10049.8 180.569,-9973.65 181.129,-9693.93 181.688,-9612.23 182.247,-9518.68 182.806,-8923.34 183.366,-8819.38 183.925,-8700.81 184.484,-8591.59 185.043,-8333.83 185.603,-8198.03 186.162,-8052.96 186.721,-7794.85 187.28,-7548.14 187.84,-7316.74 188.399,-7193.11 188.958,-6873.37 189.517,-6663.56 190.077,-6462.69 190.636,-6339.16 191.195,-6140.18 191.754,-5955.63 192.314,-5839.27 192.873,-5658.2 193.432,-5544.55 193.991,-5309.99 194.551,-5196.56 195.11,-4969.38 195.669,-4810.25 196.228,-4648.23 196.788,-4495.55 197.347,-4342.84 197.906,-4195.28 198.465,-4047.99 199.025,-3912.63 199.584,-3684.43 200.143,-3550.6 200.702,-3421.67 201.262,-3333.85 201.821,-3208.57 202.38,-3127.72 202.939,-2935.83 203.499,-2821.68 204.058,-2712.28 204.617,-2601.06 205.176,-2527.77 205.736,-2388.52 206.295,-2317.22 206.854,-2215.4 207.413,-2145.07 207.973,-2012.09 208.532,-1915.79 209.091,-1821.2 209.65,-1662.22 210.21,-1545.09 210.769,-1490.07 211.328,-1404.72 211.887,-1354.01 212.447,-1273.97 213.006,-1169.7 213.565,-1095.31 214.124,-1020.03 214.684,-951.22 215.243,-882.191 215.802,-838.912 216.361,-745.423 216.921,-702.445 217.48,-615.082 218.039,-526.915 218.598,-465.63 219.158,-433.455 219.717,-396.756 220.276,-363.722 220.835,-262.341 221.395,-207.167 221.954,-173.978 222.513,-118.779 223.072,-49.52 223.632,-4.76077 224.191,43.8974 224.75,70.9855 225.309,177.864 225.869,217.343 226.428,232.814 226.987,249.355 227.546,263.975 228.106,298.262 228.665,313.224 229.224,346.218 229.783,382.138 230.343,412.415 230.902,443.263 231.461,492.345 232.02,576.911 232.58,640.65 233.139,696.624 233.698,773.51 234.257,810.857 234.817,828.128 235.376,880.342 235.935,891.01 236.494,935.68 237.054,926.979 237.613,933.992 238.172,941.933 238.731,968.162 239.291,991.04 239.85,1015.1 240.409,984.61 240.968,1028.57 241.528,1072.58 242.087,1061.88 242.646,1063.12 243.205,1106.37 243.765,1079.18 244.324,1085.79 244.883,1072.92 245.442,1062.02 246.002,1125.29 246.561,1093.04 247.12,1101.06 247.679,1108.92 248.239,1097.8 248.798,1050.07 249.357,1037.63 249.916,1082.94 250.476,1056.5 251.035,1066.77 251.594,1114.76 252.153,1121.66 252.713,1162.07 253.272,1147.75 253.831,1149.36 254.39,1157.42 254.95,1143.8 255.509,1128.8 256.068,1135.09 256.627,1125.3 257.187,1120.05 257.746,1145.56 258.305,1151.16 258.864,1119.99 259.424,1111.54 259.983,1101.42 260.542,1128.09 261.101,1102.55 261.661,1127.02 262.22,1132.7 262.779,1155.58 263.338,1126.59 263.898,1133.94 264.457,1123.05 265.016,1097.21 265.575,1087.39 266.135,1094.46 266.694,1102.46 267.253,1088.75 267.812,1100.51 268.372,1092.8 268.931,1066.35 269.49,1074.24 270.049,1083.79 270.609,1043.03 271.168,1019.66 271.727,1034.09 272.286,1032.71 272.846,1028.09 273.405,1076.61 273.964,1089.02 274.523,1095.37 275.083,1169.66 275.642,1105.96 276.201,1115.43 276.76,1109.43 277.32,1102.14 277.879,1111.14 278.438,1090.82 278.997,1087.39 279.557,1097.29 280.116,1121.45 280.675,1111.17 281.234,1122.66 281.794,1117.41 282.353,1057.33 282.912,1100.04 283.471,1109.06 284.031,1135.96 284.59,1124.53 285.149,1099.07 285.708,1160.6 286.268,1150.3 286.827,1170.4 287.386,1176.26 287.945,1179.17 288.505,1146.52 289.064,1138.02 289.623,1146.9 290.182,1154.78 290.742,1109.21 291.301,1085.76 291.86,1059.67 292.419,1022.54 292.979,1051.23 293.538,1076.58 294.097,1070.01 294.656,1061.55 295.216,1071.83 295.775,1098.86 296.334,1071.75 296.893,1097.4 297.453,1086.07 298.012,1059.63 298.571,1081.17 299.13,1073.28 299.69,1068.88 300.249,1046.34 300.808,990.322 301.368,1002.57 301.927,977.878 302.486,940.362 303.045,923.512 303.605,934.985 304.164,912.831 304.723,930.439 305.282,929.896 305.842,912.303 306.401,932.109 306.96,963.86 307.519,960.642 308.079,973.765 308.638,987.207 309.197,964.486 309.756,946.41 310.316,927.715 310.875,943.769 311.434,942.034 311.993,955.808 312.553,954.615 313.112,935.796 313.671,932.325 314.23,963.239 314.79,972.836 315.349,970.798 315.908,947.644 316.467,945.486 317.027,957.679 317.586,938.375 318.145,935.28 318.704,917.679 319.264,931.698 319.823,941.574 320.382,940.522 320.941,941.459 321.501,938.475 322.06,950.87 322.619,949.349 323.178,947.191 323.738,991.865 324.297,1020.06 324.856,1013.25 325.415,1023.75 325.975,983.973 326.534,977.535 327.093,986.846 327.652,1010.8 328.212,1035.49 328.771,1044.39 329.33,1036.08 329.889,1058.79 330.449,1033.89 331.008,1039.83 331.567,1017.11 332.126,1010.54 332.686,986.529 333.245,980.997 333.804,962.378 334.363,938.833 334.923,935.938 335.482,977.778 336.041,952.726 336.6,932.357 337.16,945.846 337.719,942.066 338.278,935.919 338.837,919.012 339.397,898.908 339.956,895.769 340.515,876.469 341.074,872.936 341.634,853.054 342.193,867.289 342.752,866.776 343.311,867.826 343.871,883.92 344.43,878.861 344.989,863.358 345.548,882.641 346.108,898.968 346.667,912.354 347.226,910.114 347.785,906.499 348.345,903.429 348.904,888.47 349.463,868.533 350.022,883.292 350.582,876.237 351.141,857.731 351.7,856.827 352.259,836.827 352.819,851.756 353.378,870.817 353.937,882.195 354.496,897.204 355.056,893.867 355.615,906.2 356.174,914.348 356.733,959.33 357.293,952.38 357.852,897.707 358.411,893.955 358.97,940.284 359.53,933.654 360.089,943.273 360.648,937.409 361.207,967.253 361.767,974.55 362.326,952.746 362.885,946.811 363.444,941.48 364.004,900.142 364.563,880.609 365.122,892.617 365.681,889.121 366.241,901.815 366.8,898.554 367.359,880.044 367.918,871.495 368.478,884.159 369.037,865.623 369.596,895.238 370.155,893.442 370.715,873.04 371.274,855.757 371.833,852.835 372.392,883.469 372.952,901.937 373.511,896.86 374.07,908.035 374.629,920.005 375.189,925.803 375.748,919.461 376.307,949.836 376.866,929.619 377.426,923.771 377.985,886.605 378.544,900.684 379.103,910.365 379.663,918.341 380.222,892.659 380.781,904.524 381.34,878.369 381.9,885.803 382.459,877.016 383.018,885.88 383.577,896.886 384.137,908.463 384.696,890.013 385.255,933.509 385.814,925.63 386.374,918.22 386.933,927.646 387.492,918.584 388.051,911.213 388.611,906.291 389.17,898.048 389.729,923.738 390.288,914.933 390.848,907.7 391.407,886.096 391.966,898.1 392.525,907.529 393.085,888.701 393.644,846.34 394.203,825.594 394.762,790.181 395.322,789.231 395.881,791.223 396.44,773.032 396.999,772.69 397.559,770.419 398.118,773.074 398.677,790.317 399.236,807.292 399.796,835.548 400.355,817.937 400.914,814.87 401.473,799.505 402.033,812.486 402.592,829.611 403.151,843.933 403.71,857.931 404.27,855.271 404.829,851.965 405.388,844.42 405.947,826.56 406.507,795.021 407.066,790.745 407.625,794.879 408.184,795.106 408.744,779.757 409.303,829.781 409.862,812.082 410.421,828.356 410.981,823.767 411.54,822.606 412.099,803.897 412.658,787.925 413.218,755.413 413.777,755.997 414.336,790.127 414.895,790.205 415.455,758.473 416.014,761.878 416.573,780.632 417.132,763.494 417.692,796.76 418.251,778.149 418.81,777.897 419.369,762.467 419.929,745.277 420.488,764.07 421.047,797.454 421.606,780.042 422.166,761.413 422.725,760.443 423.284,745.492 423.843,795.541 424.403,840.701 424.962,818.987 425.521,814.095 426.08,810.92 426.64,823.956 427.199,804.46 427.758,771.131 428.318,758.864 428.877,773.728 429.436,789.089 429.995,788.351 430.555,788.945 431.114,803.986 431.673,835.177 432.232,800.091 432.792,817.117 433.351,764.735 433.91,768.455 434.469,783.8 435.029,786.416 435.588,783.954 436.147,798.669 436.706,809.269 437.266,855.619 437.825,833.367 438.384,825.957 438.943,839.221 439.503,836.25 440.062,847.938 440.621,860.728 441.18,885.947 441.74,876.504 442.299,855.126 442.858,850.929 443.417,831.337 443.977,831.803 444.536,862.596 445.095,841.22 445.654,822.38 446.214,821.296 446.773,782.965 447.332,793.543 447.891,790.321 448.451,807.384 449.01,801.644 449.569,797.443 450.128,747.005 450.688,781.133 451.247,766.59 451.806,766.729 452.365,765.207 452.925,759.326 453.484,772.774 454.043,788.28 454.602,787.307 455.162,785.634 455.721,765.393 456.28,781.574 456.839,812.964 457.399,827.872 457.958,836.627 458.517,815.634 459.076,847.956 459.636,843.119 460.195,869.66 460.754,862.705 461.313,857.972 461.873,832.669 462.432,813.052 462.991,761.113 463.55,726.402 464.11,726.445 464.669,725.596 465.228,744.378 465.787,761.423 466.347,778.025 466.906,771.46 467.465,801.584 468.024,813.502 468.584,855.954 469.143,834.312 469.702,779.851 470.261,778.646 470.821,763.377 471.38,714.433 471.939,717.79 472.498,717.587 473.058,755.16 473.617,753.695 474.176,721.277 474.735,722.232 475.295,705.259 475.854,740.788 476.413,774.491 476.972,741.391 477.532,772.381 478.091,804.451 478.65,790.407 479.209,789.997 479.769,791.091 480.328,774.462 480.887,789.567 481.446,786.648 482.006,801.125 482.565,843.521 483.124,852.792 483.683,862.382 484.243,853.852 484.802,844.878 485.361,839.25 485.92,831.835 486.48,809.924 487.039,835.971 487.598,815.231 488.157,826.953 488.717,839.339 489.276,802.637 489.835,798.117 490.394,825.585 490.954,824.343 491.513,788.119 492.072,819.654 492.631,800.219 493.191,811.038 493.75,806.701 494.309,816.743 494.868,781.517 495.428,810.798 495.987,826.183 496.546,821.612 497.105,834.774 497.665,813.671 498.224,808.384 498.783,803.651 499.342,816.715 499.902,813.443 500.461,839.484 501.02,848.94 501.579,844.108 502.139,822.726 502.698,833.196 503.257,829.529 503.816,807.996 504.376,834.053 504.935,825.778 505.494,821.574 506.053,799.482 506.613,784.102 507.172,778.434 507.731,795.741 508.29,741.571 508.85,739.918 509.409,720.18 509.968,739.087 510.527,723.155 511.087,674.771 511.646,644.819 512.205,665.038 512.764,667.698 513.324,637.894 513.883,659.5 514.442,694.624 515.001,696.545 515.561,696.385 516.12,681.883 516.679,735.269 517.238,784.167 517.798,795.695 518.357,779.199 518.916,744.336 519.475,712.835 520.035,719.247 520.594,706.033 521.153,739.446 521.712,737.53 522.272,770.428 522.831,765.122 523.39,778.522 523.949,775.314 524.509,758.806 525.068,738.228 525.627,737.199 526.186,733.921 526.746,700.588 527.305,671.497 527.864,711.066 528.423,677.381 528.983,694.18 529.542,712.162 530.101,682.899 530.66,686.664 531.22,739.184 531.779,758.754 532.338,739.118 532.897,771.946 533.457,766.527 534.016,761.739 534.575,764.627 535.134,779.312 535.694,743.235 536.253,759.574 536.812,754.615 537.371,707.405 537.931,708.319 538.49,708.485 539.049,708.68 539.608,712.457 540.168,727.41 540.727,744.017 541.286,739.905 541.845,787.002 542.405,765.906 542.964,776.059 543.523,783.476 544.082,778.001 544.642,760.631 545.201,756.945 545.76,705.219 546.319,722.047 546.879,724.564 547.438,743.55 547.997,725.15 548.556,724.853 549.116,776.127 549.675,771.681 550.234,769.362 550.793,733.365 551.353,734.369 551.912,701.673 552.471,655.737 553.031,623.889 553.59,648.066 554.149,637.908 554.708,644.103 555.268,648.22 555.827,668.794 556.386,687.324 556.945,707.325 557.505,645.936 558.064,617.552 558.623,655.539 559.182,624.257 559.742,626.599 560.301,647.355 560.86,652.966 561.419,656.619 561.979,674.069 562.538,676.541 563.097,680.98 563.656,650.327 564.216,655.122 564.775,627.356 565.334,662.509 565.893,680.765 566.453,683.294 567.012,716.015 567.571,696.762 568.13,681.904 568.69,668.044 569.249,653.691 569.808,652.396 570.367,626.367 570.927,629.572 571.486,662.722 572.045,682.13 572.604,685.516 573.164,688.167 573.723,703.44 574.282,688.984 574.841,689.521 575.401,691.29 575.96,659.244 576.519,664.963 577.078,700.617 577.638,720.242 578.197,738.834 578.756,759.467 579.315,757.794 579.875,773.415 580.434,768.642 580.993,715.819 581.552,685.868 582.112,688.457 582.671,706.225 583.23,719.954 583.789,813.629 584.349,809.32 584.908,807.784 585.467,818.695 586.026,843.873 586.586,870.579 587.145,862.927 587.704,838.647 588.263,846.213 588.823,804.93 589.382,816.351 589.941,828.433 590.5,840.197 591.06,834.136 591.619,845.628 592.178,853.706 592.737,845.586 593.297,843.36 593.856,834.441 594.415,825.339 594.974,787.869 595.534,797.094 596.093,790.907 596.652,783.876 597.211,793.23 597.771,771.481 598.33,752.902 598.889,750.963 599.448,730.961 600.008,714.262 600.567,715.166 601.126,710.2 601.685,709.548 602.245,758.714 602.804,771.233 603.363,768.213 603.922,795.992 604.482,855.274 605.041,846.45 605.6,827.311 606.159,836.898 606.719,829.838 607.278,790.714 607.837,799.648 608.396,794.602 608.956,758.953 609.515,755.815 610.074,752.367 610.633,749.205 611.193,711.625 611.752,707.927 612.311,723.679 612.87,738.241 613.43,738.652 613.989,719.515 614.548,767.095 615.107,762.403 615.667,777.897 616.226,758.225 616.785,774.687 617.344,769.817 617.904,731.39 618.463,712.924 619.022,699.73 619.581,682.606 620.141,684.136 620.7,686.485 621.259,741.316 621.818,739.755 622.378,735.603 622.937,715.859 623.496,716.804 624.055,733.321 624.615,701.723 625.174,651.672 625.733,655.785 626.292,659.921 626.852,642.484 627.411,626.71 627.97,649.132 628.529,651.745 629.089,656.274 629.648,657.424 630.207,710.902 630.766,710.384 631.326,722.807 631.885,708.458 632.444,708.64 633.003,707.229 633.563,688.792 634.122,672.678 634.681,690.521 635.24,657.803 635.8,607.422 636.359,597.05 636.918,619.22 637.477,639.173 638.037,641.663 638.596,646.678 639.155,667.844 639.714,651.43 640.274,655.661 640.833,656.386 641.392,657.008 641.951,659.795 642.511,647.547 643.07,634.398 643.629,637.552 644.188,656.583 644.748,612.449 645.307,601.922 645.866,585.991 646.425,592.664 646.985,616.858 647.544,624.352 648.103,630.146 648.662,619.757 649.222,671.981 649.781,674.505 650.34,643.62 650.899,632.493 651.459,683.548 652.018,701.698 652.577,734 653.136,734.161 653.696,701.655 654.255,685.589 654.814,690.298 655.373,707.981 655.933,726.281 656.492,695.111 657.051,722.882 657.61,705.937 658.17,690.169 658.729,657.645 659.288,695.061 659.847,682.815 660.407,697.983 660.966,712.323 661.525,694.91 662.084,728.532 662.644,738.794 663.203,701.914 663.762,734.436 664.321,716.973 664.881,732.437 665.44,779.345 665.999,791.641 666.558,786.924 667.118,798.737 667.677,809.451 668.236,802.692 668.795,813.283 669.355,807.671 669.914,801.108 670.473,762.22 671.032,776.63 671.592,772.399 672.151,718.602 672.71,718.929 673.269,688.208 673.829,704.197 674.388,688.411 674.947,672.787 675.506,675.056 676.066,658.172 676.625,674.139 677.184,674.781 677.743,658.181 678.303,646.309 678.862,648.059 679.421,616.466 679.981,654.66 680.54,672.803 681.099,659.982 681.658,648.915 682.218,654.492 682.777,675.483 683.336,694.489 683.895,676.019 684.455,708.661 685.014,690.613 685.573,673.428 686.132,688.369 686.692,688.012 687.251,691.068 687.81,694.464 688.369,677.433 688.929,696.428 689.488,682.944 690.047,635.587 690.606,620.792 691.166,611.098 691.725,616.627 692.284,623.197 692.843,677.708 693.403,680.782 693.962,668.546 694.521,653.252 695.08,638.935 695.64,658.956 696.199,661.706 696.758,661.8 697.317,681.716 697.877,701.793 698.436,683.845 698.995,702.52 699.554,703.542 700.114,734.724 700.673,732.219 701.232,730.892 701.791,726.967 702.351,746.961 702.91,745.801 703.469,741.779 704.028,675.161 704.588,662.64 705.147,649.305 705.706,650.408 706.265,650.991 706.825,653.835 707.384,653.671 707.943,638.381 708.502,643.263 709.062,664.587 709.621,665.595 710.18,653.263 710.739,623.107 711.299,676.283 711.858,696.216 712.417,678.883 712.976,699.777 713.536,686.241 714.095,701.208 714.654,699.902 715.213,734.215 715.773,701.356 716.332,685.111 716.891,686.165 717.45,651.926 718.01,669.564 718.569,684.159 719.128,699.097 719.687,747.164 720.247,762.535 720.806,744.451 721.365,726.765 721.924,741.207 722.484,757.447 723.043,753.304 723.602,750.161 724.161,777.486 724.721,760.215 725.28,772.497 725.839,798.302 726.398,793.569 726.958,788.017 727.517,799.552 728.076,779.728 728.635,760.812 729.195,790.518 729.754,801.27 730.313,814.132 730.872,824.756 731.432,819.38 731.991,796.818 732.55,757.797 733.109,785.753 733.669,779.883 734.228,773.747 734.787,736.776 735.346,766.07 735.906,778.318 736.465,741.106 737.024,737.231 737.583,736.156 738.143,718.8 738.702,717.361 739.261,711.126 739.82,680.487 740.38,662.146 740.939,662.371 741.498,663.533 742.057,649.706 742.617,604.772 743.176,624.202 743.735,628.757 744.294,662.609 744.854,646.306 745.413,633.639 745.972,637.93 746.531,624.858 747.091,644.871 747.65,646.472 748.209,651.747 748.768,634.298 749.328,638.33 749.887,656.016 750.446,671.345 751.005,685.532 751.565,667.742 752.124,699.242 752.683,698.834 753.242,697.404 753.802,667.6 754.361,653.437 754.92,641.926 755.479,661.602 756.039,678.279 756.598,680.017 757.157,632.692 757.716,635.929 758.276,654.766 758.835,658.003 759.394,641.824 759.953,629.554 760.513,616.51 761.072,619.89 761.631,638.301 762.19,642.4 762.75,661.039 763.309,663.657 763.868,666.018 764.427,634.075 764.987,640.019 765.546,658.407 766.105,641.919 766.664,658.722 767.224,660.767 767.783,646.524 768.342,646.396 768.901,665.285 769.461,679.653 770.02,664.485 770.579,680.529 771.138,696.755 771.698,710.995 772.257,692.569 772.816,706.931 773.375,693.229 773.935,694.592 774.494,660.774 775.053,681.911 775.612,731.966 776.172,729.673 776.731,747.374 777.29,762.007 777.849,728.693 778.409,696.035 778.968,710.129 779.527,708.72 780.086,706.524 780.646,724.004 781.205,706.074 781.764,736.015 782.323,748.502 782.883,762.073 783.442,774.361 784.001,752.35 784.56,781.726 785.12,761.726 785.679,776.293 786.238,788.097 786.797,795.533 787.357,806.622 787.916,846.705 788.475,821.085 789.034,843.191 789.594,833.177 790.153,795.756 790.712,758.67 791.271,720.656 791.831,700.987 792.39,681.435 792.949,697.378 793.508,682.646 794.068,633.556 794.627,589.052 795.186,624.377 795.745,628.374 796.305,624.803 796.864,628.555 797.423,627.731 797.982,633.492 798.542,622.873 799.101,641.343 799.66,628.644 800.219,632.132 800.779,662.231 801.338,678.105 801.897,660.577 802.456,646.293 803.016,632.883 803.575,652.33 804.134,619.45 804.693,604.541 805.253,607.68 805.812,629.456 806.371,631.575 806.931,635.188 807.49,671.129 808.049,707.399 808.608,675.861 809.168,679.351 809.727,679.647 810.286,696.282 810.845,685.024 811.405,671.058 811.964,636.67 812.523,626.508 813.082,646.229 813.642,652.279 814.201,641.241 814.76,643.58 815.319,676.166 815.879,725.508 816.438,742.03 816.997,739.549 817.556,738.531 818.116,737.243 818.675,748.359 819.234,729.65 819.793,727.541 820.353,728.72 820.912,712.267 821.471,709.252 822.03,665.804 822.59,653.616 823.149,654.007 823.708,671.733 824.267,655.157 824.827,640.633 825.386,641.904 825.945,643.818 826.504,632.624 827.064,636.606 827.623,640.17 828.182,627.81 828.741,615.506 829.301,617.362 829.86,621.207 830.419,593.258 830.978,599.697 831.538,604.674 832.097,608.961 832.656,597.891 833.215,616.69 833.775,606.297 834.334,596.415 834.893,634.473 835.452,620.522 836.012,655.762 836.571,643.394 837.13,645 837.689,663.68 838.249,647.359 838.808,637.509 839.367,655.15 839.926,688.462 840.486,689.35 841.045,689.062 841.604,689.982 842.163,692.397 842.723,754.124 843.282,735.294 843.841,750.246 844.4,763.204 844.96,791.403 845.519,786.387 846.078,782.338 846.637,760.308 847.197,710.248 847.756,707.344 848.315,675.461 848.874,673.612 849.434,661.075 849.993,679.596 850.552,680.66 851.111,681.795 851.671,701.424 852.23,667.938 852.789,668.481 853.348,682.962 853.908,700.342 854.467,698.456 855.026,685.523 855.585,686.877 856.145,688.624 856.704,656.706 857.263,643.269 857.822,661.087 858.382,679.76 858.941,665.466 859.5,648.059 860.059,649.097 860.619,650.7 861.178,655.765 861.737,656.247 862.296,654.374 862.856,660.68 863.415,692.152 863.974,692 864.533,689.162 865.093,692.075 865.652,707.312 866.211,708.674 866.77,704.717 867.33,748.509 867.889,714.116 868.448,714.783 869.007,732.93 869.567,701.477 870.126,720.915 870.685,704.001 871.244,688.114 871.804,670.556 872.363,674.401 872.922,661.915 873.481,646.036 874.041,695.165 874.6,706.885 875.159,725.076 875.718,721.008 876.278,721.152 876.837,734.101 877.396,697.472 877.955,711.715 878.515,710.36 879.074,708.337 879.633,675.2 880.192,690.73 880.752,703.144 881.311,665.734 881.87,668.569 882.429,636.698 882.989,625.188 883.548,627.26 884.107,662.436 884.666,661.973 885.226,628.157 885.785,648.454 886.344,668.827 886.903,669.664 887.463,683.966 888.022,635.006 888.581,641.421 889.14,625.397 889.7,627.231 890.259,711.038 890.818,710.623 891.377,726.411 891.937,693.331 892.496,678.017 893.055,711.621 893.614,692.007 894.174,711.179 894.733,728.004 895.292,690.997 895.851,705.887 896.411,689.185 896.97,720.113 897.529,720.491 898.088,718.335 898.648,717.495 899.207,713.432 899.766,710.478 900.325,692.089 900.885,724.846 901.444,721.11 902.003,704.169 902.562,703.801 903.122,635.239 903.681,621.952 904.24,611.338 904.799,635.219 905.359,618.901 905.918,605.243 906.477,624.499 907.036,643.808 907.596,660.546 908.155,674.783 908.714,674.826 909.273,676.655 909.833,692.072 910.392,724.508 910.951,756.755 911.51,733.479 912.07,749.023 912.629,748.598 913.188,714.39 913.747,725.97 914.307,705.935 914.866,706.142 915.425,720.455 915.984,717.316 916.544,650.888 917.103,650.128 917.662,651.345 918.221,653.382 918.781,686.838 919.34,685.944 919.899,672.031 920.458,706.688 921.018,703.663 921.577,669.675 922.136,673.412 922.695,690.603 923.255,691.051 923.814,724.516 924.373,705.073 924.932,721.569 925.492,717.916 926.051,667.656 926.61,638.496 927.169,656.002 927.729,661.534 928.288,678.899 928.847,695.576 929.406,648.287 929.966,648.037 930.525,650.396 931.084,653.022 931.644,654.671 932.203,654.153 932.762,638.946 933.321,672.352 933.881,655.68 934.44,691.005 934.999,706.418 935.558,718.54 936.118,718.033 936.677,716.762 937.236,713.979 937.795,679.64 938.355,661.32 938.914,656.989 939.473,657.925 940.032,641.699 940.592,645.875 941.151,645.493 941.71,647.303 942.269,632.35 942.829,665.177 943.388,700.599 943.947,712.518 944.506,709.854 945.066,708.684 945.625,695.132 946.184,697.087 946.743,682.924 947.303,700.528 947.862,666.159 948.421,684.6 948.98,703.444 949.54,685.542 950.099,688.215 950.658,653.605 951.217,651.121 951.777,703.118 952.336,701.327 952.895,717.564 953.454,716.555 954.014,728.188 954.573,745.112 955.132,758.892 955.691,752.124 956.251,764.16 956.81,759.978 957.369,742.208 957.928,756.494 958.488,719.563 959.047,735.902 959.606,728.352 960.165,727.566 960.725,744.854 961.284,739.137 961.843,719.864 962.402,683.153 962.962,696.577 963.521,697.944 964.08,698.14 964.639,765.054 965.199,776.193 965.758,787.519 966.317,779.444 966.876,773.955 967.436,769.887 967.995,763.595 968.554,724.32 969.113,720.226 969.673,734.594 970.232,731.803 970.791,697.71 971.35,698.368 971.91,683.372 972.469,684.325 973.028,664.736 973.587,648.202 974.147,650.592 974.706,650.234 975.265,670.974 975.824,702.955 976.384,750.268 976.943,744.921 977.502,758.576 978.061,754.823 978.621,738.561 979.18,754.02 979.739,762.107 980.298,741.941 980.858,715.55 981.417,713.78 981.976,646.868 982.535,616.684 983.095,654.642 983.654,643.576 984.213,662.483 984.772,661.178 985.332,660.693 985.891,661.039 986.45,660.185 987.009,649.586 987.569,650.839 988.128,635.662 988.687,669.755 989.246,653.198 989.806,653.444 990.365,620.021 990.924,639.793 991.483,643.523 992.043,630.639 992.602,664.228 993.161,663.8 993.72,666.123 994.28,669.748 994.839,655.028 995.398,673.009 995.957,643.021 996.517,663.857 997.076,697.553 997.635,691.762 998.194,677.713 998.754,693.742 999.313,690.6 999.872,658.201 1000.43,677.379 1000.99,695.262 1001.55,694.866 1002.11,725.954 1002.67,720.698 1003.23,719.012 1003.79,751.615 1004.35,746.119 1004.91,761.472 1005.46,774.919 1006.02,767.18 1006.58,765.536 1007.14,743.423 1007.7,740.831 1008.26,766.735 1008.82,761.352 1009.38,758.662 1009.94,776.348 1010.5,775.835 1011.06,785.172 1011.62,782.616 1012.18,760.026 1012.73,739.507 1013.29,723.179 1013.85,719.59 1014.41,733.369 1014.97,731.283 1015.53,729.819 1016.09,677.245 1016.65,647.53 1017.21,634.053 1017.77,639.017 1018.33,627.419 1018.89,597.505 1019.45,620.67 1020.01,621.904 1020.56,624.484 1021.12,641.685 1021.68,626.794 1022.24,629.224 1022.8,651.125 1023.36,617.322 1023.92,621.843 1024.48,640.14 1025.04,655.876 1025.6,641.437 1026.16,645.384 1026.72,632.352 1027.28,665.284 1027.83,665.911 1028.39,634.793 1028.95,636.11 1029.51,658.4 1030.07,657.834 1030.63,639.856 1031.19,624.471 1031.75,630.886 1032.31,630.203 1032.87,652.712 1033.43,671.37 1033.99,704.135 1034.55,717.932 1035.1,700.778 1035.66,714.939 1036.22,712.369 1036.78,680.694 1037.34,662.954 1037.9,682.333 1038.46,631.744 1039.02,616.243 1039.58,647.782 1040.14,668.581 1040.7,667.14 1041.26,652.523 1041.82,651.004 1042.38,654.309 1042.93,672.67 1043.49,672.587 1044.05,656.343 1044.61,671.779 1045.17,687.836 1045.73,704.798 1046.29,739.58 1046.85,707.184 1047.41,690.849 1047.97,657.163 1048.53,660.312 1049.09,662.264 1049.65,666.024 1050.2,698.458 1050.76,664.085 1051.32,680.486 1051.88,682.622 1052.44,680.615 1053,698.476 1053.56,697.928 1054.12,694.782 1054.68,725.626 1055.24,726.88 1055.8,710.85 1056.36,708.855 1056.92,708.32 1057.48,706.784 1058.03,705.914 1058.59,689.927 1059.15,671.924 1059.71,637.132 1060.27,659.35 1060.83,661.203 1061.39,660.415 1061.95,660.401 1062.51,677.084 1063.07,660.257 1063.63,660.681 1064.19,691.141 1064.75,653.013 1065.3,690.432 1065.86,694.863 1066.42,677.043 1066.98,675.271 1067.54,690.365 1068.1,706.958 1068.66,704.564 1069.22,687.415 1069.78,684.766 1070.34,703.269 1070.9,718.896 1071.46,701.428 1072.02,714.442 1072.57,714.579 1073.13,713.769 1073.69,731.718 1074.25,713.959 1074.81,728.932 1075.37,709.127 1075.93,659.384 1076.49,631.137 1077.05,619.463 1077.61,640.719 1078.17,594.32 1078.73,602.39 1079.29,608.405 1079.85,616.048 1080.4,617.008 1080.96,623.663 1081.52,680.874 1082.08,681.946 1082.64,666.966 1083.2,654.009 1083.76,670.836 1084.32,672.548 1084.88,640.764 1085.44,661.67 1086,637.156 1086.56,656.521 1087.12,646.09 1087.67,679.805 1088.23,695.802 1088.79,678.597 1089.35,713.393 1089.91,680.484 1090.47,665.536 1091.03,681.605 1091.59,695.643 1092.15,696.675 1092.71,714.911 1093.27,698.681 1093.83,716.24 1094.39,701.515 1094.94,733.958 1095.5,727.539 1096.06,726.338 1096.62,752.636 1097.18,719.189 1097.74,734.959 1098.3,779.068 1098.86,756.439 1099.42,722.668 1099.98,704.56 1100.54,717.665 1101.1,719.99 1101.66,699.739 1102.22,685.597 1102.77,652.942 1103.33,685.593 1103.89,668.588 1104.45,653.629 1105.01,632.021 1105.57,602.91 1106.13,640.176 1106.69,673.539 1107.25,656.374 1107.81,658.917 1108.37,691.787 1108.93,691.385 1109.49,678.136 1110.04,727.2 1110.6,728.873 1111.16,710.619 1111.72,709.551 1112.28,722.684 1112.84,704.018 1113.4,699.993 1113.96,713.987 1114.52,725.332 1115.08,717.823 1115.64,713.131 1116.2,724.9 1116.76,769.544 1117.31,751.845 1117.87,764.545 1118.43,793.723 1118.99,773.73 1119.55,799.996 1120.11,763.023 1120.67,742.489 1121.23,738.198 1121.79,704.598 1122.35,718.694 1122.91,684.642 1123.47,665.931 1124.03,683.537 1124.59,685.835 1125.14,670.474 1125.7,651.635 1126.26,634.93 1126.82,654.441 1127.38,640.327 1127.94,674.532 1128.5,691.003 1129.06,689.518 1129.62,706.303 1130.18,686.621 1130.74,701.655 1131.3,701.114 1131.86,733.004 1132.41,731.912 1132.97,731.766 1133.53,725.52 1134.09,721.374 1134.65,752.464 1135.21,713.08 1135.77,713.199 1136.33,730.261 1136.89,695.525 1137.45,675.985 1138.01,661.705 1138.57,630.737 1139.13,636.457 1139.68,655.925 1140.24,689.193 1140.8,702.216 1141.36,685.616 1141.92,687.464 1142.48,672.639 1143.04,690.121 1143.6,720.23 1144.16,701.054 1144.72,703.486 1145.28,734.518 1145.84,734.132 1146.4,715.394 1146.96,708.478 1147.51,687.521 1148.07,689.884 1148.63,689.439 1149.19,656.17 1149.75,658.366 1150.31,704.964 1150.87,687.476 1151.43,655.71 1151.99,660.218 1152.55,682.065 1153.11,636.114 1153.67,654.097 1154.23,673.214 1154.78,688.045 1155.34,676.025 1155.9,695.227 1156.46,694.49 1157.02,694.316 1157.58,679.519 1158.14,699.205 1158.7,682.297 1159.26,717.78 1159.82,715.008 1160.38,713.489 1160.94,744.858 1161.5,710.706 1162.05,725.151 1162.61,754.692 1163.17,704.048 1163.73,702.857 1164.29,702.729 1164.85,686.302 1165.41,669.852 1165.97,653.951 1166.53,670.589 1167.09,639.705 1167.65,626.535 1168.21,627.925 1168.77,615.102 1169.33,569.974 1169.88,576.488 1170.44,566.695 1171,637.384 1171.56,624.832 1172.12,647.884 1172.68,649.087 1173.24,652.873 1173.8,705.829 1174.36,738.205 1174.92,717.34 1175.48,682.515 1176.04,670.594 1176.6,637.113 1177.15,638.786 1177.71,639.515 1178.27,609.698 1178.83,580.18 1179.39,600.088 1179.95,604.234 1180.51,625.474 1181.07,629.951 1181.63,634.76 1182.19,673.066 1182.75,660.461 1183.31,626.603 1183.87,627.835 1184.43,632.464 1184.98,651.372 1185.54,653.891 1186.1,659.298 1186.66,676.67 1187.22,680.844 1187.78,713.578 1188.34,727.385 1188.9,739.522 1189.46,739.686 1190.02,720.078 1190.58,736.544 1191.14,751.824 1191.7,714.995 1192.25,681.369 1192.81,716.014 1193.37,698.218 1193.93,677.451 1194.49,725.949 1195.05,691.057 1195.61,690.38 1196.17,672.314 1196.73,667.365 1197.29,683.158 1197.85,687.061 1198.41,673.668 1198.97,692.352 1199.52,692.084 1200.08,691.982 1200.64,692.327 1201.2,690.832 1201.76,693.363 1202.32,740.506 1202.88,721.153 1203.44,687.765 1204,703.862 1204.56,688.802 1205.12,723.574 1205.68,720.472 1206.24,738.302 1206.8,755.712 1207.35,753.003 1207.91,747.62 1208.47,726.399 1209.03,687.842 1209.59,690.624 1210.15,690.303 1210.71,676.961 1211.27,677.15 1211.83,694.197 1212.39,678.861 1212.95,756.881 1213.51,753.296 1214.07,747.998 1214.62,761.484 1215.18,770.499 1215.74,763.585 1216.3,759.211 1216.86,738.106 1217.42,718.74 1217.98,730.914 1218.54,728.885 1219.1,711.353 1219.66,709.246 1220.22,677.955 1220.78,661.044 1221.34,692.782 1221.89,688.93 1222.45,717.362 1223.01,715.077 1223.57,693.662 1224.13,673.209 1224.69,672.7 1225.25,686.893 1225.81,636.896 1226.37,604.083 1226.93,607.184 1227.49,642.653 1228.05,676.282 1228.61,674.948 1229.17,672.443 1229.72,658.135 1230.28,640.365 1230.84,640.363 1231.4,675.241 1231.96,660.743 1232.52,674.611 1233.08,672.78 1233.64,675.915 1234.2,706.162 1234.76,724.615 1235.32,689.066 1235.88,656.183 1236.44,644.529 1236.99,643.55 1237.55,662.005 1238.11,679.133 1238.67,710.743 1239.23,674.913 1239.79,675.042 1240.35,628.72 1240.91,663.106 1241.47,695.097 1242.03,676.721 1242.59,705.64 1243.15,738.423 1243.71,720.362 1244.26,750.559 1244.82,763.014 1245.38,728.733 1245.94,724.798 1246.5,707.384 1247.06,690.178 1247.62,688.71 1248.18,670.509 1248.74,690.337 1249.3,688.585 1249.86,719.875 1250.42,701.476 1250.98,716.393 1251.54,685.089 1252.09,699.81 1252.65,716.578 1253.21,716.505 1253.77,696.949 1254.33,693.69 1254.89,693.637 1255.45,724.531 1256.01,721.908 1256.57,701.42 1257.13,705.922 1257.69,688.396 1258.25,686.763 1258.81,687.211 1259.36,675.043 1259.92,691.401 1260.48,691.959 1261.04,707.229 1261.6,701.819 1262.16,704.428 1262.72,689.319 1263.28,689.045 1263.84,658.1 1264.4,643.318 1264.96,617.006 1265.52,623.034 1266.08,626.141 1266.63,641.793 1267.19,595.037 1267.75,599.598 1268.31,600.107 1268.87,633.923 1269.43,637.688 1269.99,656.989 1270.55,706.249 1271.11,673.055 1271.67,673.955 1272.23,689.795 1272.79,689.186 1273.35,690.349 1273.91,677.111 1274.46,678.97 1275.02,711.401 1275.58,704.814 1276.14,718.976 1276.7,733.972 1277.26,700.905 1277.82,668.304 1278.38,701.334 1278.94,717.238 1279.5,716.817 1280.06,699.193 1280.62,700.475 1281.18,715.958 1281.73,685.055 1282.29,702.505 1282.85,700.565 1283.41,698.796 1283.97,714.612 1284.53,695.899 1285.09,694.841 1285.65,711.087 1286.21,754.856 1286.77,754.343 1287.33,749.782 1287.89,763.277 1288.45,775.154 1289,785.408 1289.56,761.91 1290.12,772.474 1290.68,769.31 1291.24,747.551 1291.8,741.229 1292.36,770.881 1292.92,764.61 1293.48,763.207 1294.04,728.051 1294.6,742.818 1295.16,754.608 1295.72,752.499 1296.28,763.334 1296.83,726.306 1297.39,691.408 1297.95,708.581 1298.51,708.396 1299.07,710.274 1299.63,705.112 1300.19,673.795 1300.75,660.694 1301.31,709.2 1301.87,655.671 1302.43,641.448 1302.99,597.806 1303.55,616.166 1304.1,623.248 1304.66,612.779 1305.22,619.434 1305.78,590.091 1306.34,611.005 1306.9,597.315 1307.46,586.632 1308.02,570.843 1308.58,575.48 1309.14,577.585 1309.7,548.611 1310.26,558.719 1310.82,618.418 1311.38,636.375 1311.93,641.324 1312.49,612.264 1313.05,650.457 1313.61,638.15 1314.17,640.857 1314.73,645.339 1315.29,644.705 1315.85,660.953 1316.41,676.79 1316.97,643.929 1317.53,645.227 1318.09,629.483 1318.65,633.184 1319.2,650.222 1319.76,634.202 1320.32,622.521 1320.88,675.561 1321.44,658.917 1322,659.228 1322.56,663.244 1323.12,663.429 1323.68,663.195 1324.24,667.152 1324.8,669.642 1325.36,690.026 1325.92,677.554 1326.47,708.8 1327.03,640.747 1327.59,658.679 1328.15,658.554 1328.71,659.084 1329.27,708.362 1329.83,708.12 1330.39,674.974 1330.95,691.444 1331.51,693.52 1332.07,691.252 1332.63,705.564 1333.19,719.129 1333.75,719.68 1334.3,682.591 1334.86,650.955 1335.42,683.757 1335.98,680.761 1336.54,682.415 1337.1,681.614 1337.66,697.725 1338.22,667.176 1338.78,666.835 1339.34,683.329 1339.9,639.504 1340.46,663.854 1341.02,679.051 1341.57,679.422 1342.13,696.385 1342.69,679.108 1343.25,680.355 1343.81,709.348 1344.37,726.041 1344.93,758.762 1345.49,801.157 1346.05,761.614 1346.61,743.892 1347.17,708.464 1347.73,674.019 1348.29,676.422 1348.84,648.633 1349.4,632.714 1349.96,606.307 1350.52,657.951 1351.08,643.694 1351.64,664.29 1352.2,633.163 1352.76,635.458 1353.32,640.308 1353.88,641.015 1354.44,641.411 1355,657.465 1355.56,706.582 1356.12,704.528 1356.67,719.347 1357.23,735.928 1357.79,714.411 1358.35,724.984 1358.91,752.076 1359.47,745.853 1360.03,742.384 1360.59,738.623 1361.15,736.829 1361.71,733.54 1362.27,713.471 1362.83,711.601 1363.39,730.322 1363.94,729.068 1364.5,694.474 1365.06,693.795 1365.62,659.088 1366.18,658.049 1366.74,662.058 1367.3,695.193 1367.86,742.359 1368.42,736.062 1368.98,717.393 1369.54,683.299 1370.1,699.261 1370.66,729.372 1371.21,743.558 1371.77,742.97 1372.33,708.727 1372.89,689.136 1373.45,671.684 1374.01,690.441 1374.57,692.929 1375.13,688.233 1375.69,703.798 1376.25,702.396 1376.81,669.534 1377.37,720.144 1377.93,718.005 1378.49,761.135 1379.04,740.077 1379.6,722.713 1380.16,702.626 1380.72,669.888 1381.28,667.53 1381.84,635.701 1382.4,686.822 1382.96,669.816 1383.52,657.561 1384.08,658.948 1384.64,644.004 1385.2,694.129 1385.76,725.531 1386.31,721.938 1386.87,719.506 1387.43,752.105 1387.99,718.04 1388.55,715.781 1389.11,698.712 1389.67,732.017 1390.23,711.287 1390.79,743.16 1391.35,741.158 1391.91,704.325 1392.47,704.198 1393.03,703.921 1393.58,681.899 1394.14,662.786 1394.7,660.482 1395.26,647.163 1395.82,650.455 1396.38,572.458 1396.94,560.563 1397.5,586.31 1398.06,590.527 1398.62,575.32 1399.18,630.714 1399.74,600.392 1400.3,589.78 1400.86,613.89 1401.41,631.23 1401.97,633.609 1402.53,620.254 1403.09,690.159 1403.65,692.71 1404.21,707.912 1404.77,689.091 1405.33,721.098 1405.89,718.224 1406.45,701.269 1407.01,683.04 1407.57,663.432 1408.13,684.666 1408.68,719.59 1409.24,716.034 1409.8,712.45 1410.36,679.125 1410.92,681.771 1411.48,716.413 1412.04,729.725 1412.6,757.634 1413.16,720.312 1413.72,700.422 1414.28,714.007 1414.84,716.176 1415.4,703.182 1415.95,699.937 1416.51,679.984 1417.07,699.581 1417.63,686.074 1418.19,670.267 1418.75,656.401 1419.31,627.191 1419.87,660.271 1420.43,644.412 1420.99,644.693 1421.55,614.387 1422.11,616.348 1422.67,665.383 1423.23,652.16 1423.78,653.435 1424.34,653.448 1424.9,670.212 1425.46,669.444 1426.02,669.338 1426.58,717.735 1427.14,687.18 1427.7,655.957 1428.26,658.797 1428.82,692.82 1429.38,673.951 1429.94,676.384 1430.5,661.35 1431.05,660.723 1431.61,613.258 1432.17,617.412 1432.73,621.675 1433.29,604.819 1433.85,593.617 1434.41,579.289 1434.97,590.05 1435.53,609.829 1436.09,597.251 1436.65,587.769 1437.21,582.087 1437.77,589.427 1438.33,596.476 1438.88,604.682 1439.44,608.135 1440,580.457 1440.56,638.118 1441.12,627.034 1441.68,643.745 1442.24,664.922 1442.8,652.699 1443.36,639.438 1443.92,622.535 1444.48,643.207 1445.04,629.672 1445.6,631.943 1446.15,632.089 1446.71,629.58 1447.27,613.659 1447.83,601.363 1448.39,640.115 1448.95,611.656 1449.51,587.428 1450.07,593.823 1450.63,569.452 1451.19,609.079 1451.75,628.98 1452.31,619.868 1452.87,628.15 1453.42,646.191 1453.98,665.232 1454.54,665.848 1455.1,683.694 1455.66,631.514 1456.22,652.453 1456.78,653.265 1457.34,654.62 1457.9,672.533 1458.46,691.163 1459.02,690.423 1459.58,705.041 1460.14,685.985 1460.7,685.155 1461.25,701.592 1461.81,712.209 1462.37,711.989 1462.93,741.621 1463.49,706.757 1464.05,724.221 1464.61,723.576 1465.17,738.836 1465.73,739.135 1466.29,733.099 1466.85,764.262 1467.41,806.252 1467.97,767.919 1468.52,750.47 1469.08,715.191 1469.64,728.09 1470.2,713.364 1470.76,710.718 1471.32,658.101 1471.88,644.941 1472.44,645.713 1473,646.342 1473.56,682.123 1474.12,682.206 1474.68,685.683 1475.24,702.192 1475.79,720.354 1476.35,715.499 1476.91,683.144 1477.47,699.892 1478.03,732.658 1478.59,747.198 1479.15,748.156 1479.71,760.178 1480.27,737.161 1480.83,731.69 1481.39,777.374 1481.95,723.724 1482.51,707.708 1483.07,754.711 1483.62,720.569 1484.18,735.615 1484.74,730.774 1485.3,693.963 1485.86,677.716 1486.42,674.29 1486.98,675.909 1487.54,689.567 1488.1,654.36 1488.66,622.807 1489.22,594.337 1489.78,648.089 1490.34,647.445 1490.89,681.426 1491.45,680.538 1492.01,680.587 1492.57,680.82 1493.13,678.096 1493.69,713.715 1494.25,727.934 1494.81,707.376 1495.37,740.935 1495.93,737.008 1496.49,717.683 1497.05,717.744 1497.61,698.963 1498.16,711.964 1498.72,693.575 1499.28,688.721 1499.84,688.737 1500.4,688.011 1500.96,671.937 1501.52,670.425 1502.08,672.288 1502.64,673.751 1503.2,674.343 1503.76,658.638 1504.32,610.243 1504.88,627.52 1505.44,644.802 1505.99,647.782 1506.55,647.501 1507.11,649.341 1507.67,664.719 1508.23,683.875 1508.79,620.258 1509.35,649.758 1509.91,619.704 1510.47,621.583 1511.03,640.997 1511.59,660.041 1512.15,645.524 1512.71,633.578 1513.26,648.582 1513.82,681.079 1514.38,698.308 1514.94,715.212 1515.5,696.171 1516.06,678.777 1516.62,696.102 1517.18,713.025 1517.74,745.067 1518.3,742.013 1518.86,753.722 1519.42,732.253 1519.98,712.54 1520.53,728.349 1521.09,710.116 1521.65,742.962 1522.21,722.59 1522.77,720.944 1523.33,787.328 1523.89,794.039 1524.45,769.584 1525.01,751.31 1525.57,750.533 1526.13,748.214 1526.69,713.855 1527.25,694.909 1527.81,709.877 1528.36,711.233 1528.92,680.935 1529.48,695.476 1530.04,726.88 1530.6,723.362 1531.16,701.576 1531.72,697.338 1532.28,712.661 1532.84,745.975 1533.4,746.145 1533.96,711.477 1534.52,727.369 1535.08,708.248 1535.63,691.158 1536.19,655.319 1536.75,638.405 1537.31,638.982 1537.87,653.737 1538.43,657.145 1538.99,661.116 1539.55,645.936 1540.11,644.503 1540.67,642.902 1541.23,625.408 1541.79,628.046 1542.35,647.864 1542.9,616.955 1543.46,636.085 1544.02,621.411 1544.58,639.705 1545.14,624.862 1545.7,646.885 1546.26,651.832 1546.82,659.112 1547.38,677.265 1547.94,660.297 1548.5,660.147 1549.06,661.559 1549.62,643.909 1550.18,646.101 1550.73,661.812 1551.29,680.145 1551.85,662.079 1552.41,646.707 1552.97,646.82 1553.53,663.657 1554.09,665.212 1554.65,679.555 1555.21,679.321 1555.77,646.841 1556.33,664.317 1556.89,650.241 1557.45,615.909 1558,588.248 1558.56,591.926 1559.12,581.148 1559.68,585.094 1560.24,609.464 1560.8,630.006 1561.36,663.941 1561.92,649.865 1562.48,684.279 1563.04,715.876 1563.6,712.311 1564.16,709.737 1564.72,693.363 1565.28,694.058 1565.83,713.025 1566.39,708.66 1566.95,710.697 1567.51,708.534 1568.07,689.365 1568.63,687.538 1569.19,684.289 1569.75,684.542 1570.31,699.452 1570.87,698.564 1571.43,666.21 1571.99,671.307 1572.55,690.327 1573.1,691.024 1573.66,658.008 1574.22,704.52 1574.78,707.186 1575.34,706.393 1575.9,703.957 1576.46,721.888 1577.02,721.075 1577.58,720.05 1578.14,737.011 1578.7,730.825 1579.26,712.716 1579.82,693.866 1580.37,695.897 1580.93,631.049 1581.49,601.668 1582.05,638.102 1582.61,595.546 1583.17,584.929 1583.73,603.992 1584.29,604.936 1584.85,625.676 1585.41,609.503 1585.97,630.244 1586.53,679.638 1587.09,712.533 1587.65,745.103 1588.2,739.651 1588.76,719.759 1589.32,720.383 1589.88,719.58 1590.44,733.666 1591,748.65 1591.56,744.108 1592.12,722.639 1592.68,719.32 1593.24,717.207 1593.8,765.699 1594.36,793.62 1594.92,738.26 1595.47,717.565 1596.03,714.107 1596.59,714.666 1597.15,745.082 1597.71,755.528 1598.27,734.472 1598.83,745.876 1599.39,739.338 1599.95,748.997 1600.51,747.247 1601.07,713.771 1601.63,696.877 1602.19,680.005 1602.74,679.872 1603.3,727.098 1603.86,726.553 1604.42,740.525 1604.98,722.312 1605.54,737.145 1606.1,730.57 1606.66,743.341 1607.22,708.37 1607.78,706.326 1608.34,673.81 1608.9,678.202 1609.46,646.39 1610.02,663.317 1610.57,646.638 1611.13,648.785 1611.69,683.99 1612.25,685.498 1612.81,713.875 1613.37,695.163 1613.93,709.213 1614.49,704.416 1615.05,704.994 1615.61,703.387 1616.17,701.93 1616.73,686.117 1617.29,687.341 1617.84,720.034 1618.4,717.078 1618.96,745.306 1619.52,723.906 1620.08,738.341 1620.64,748.664 1621.2,725.992 1621.76,725.068 1622.32,656.942 1622.88,674.314 1623.44,690.698 1624,704.477 1624.56,688.518 1625.11,700.871 1625.67,700.224 1626.23,697.282 1626.79,697.29 1627.35,697.073 1627.91,667.709 1628.47,668.71 1629.03,652.482 1629.59,655.541 1630.15,684.415 1630.71,715.019 1631.27,713.444 1631.83,740.629 1632.39,719.807 1632.94,749.323 1633.5,743.582 1634.06,741.19 1634.62,738.087 1635.18,751.321 1635.74,732.392 1636.3,715.944 1636.86,716.094 1637.42,778.732 1637.98,725.312 1638.54,724.29 1639.1,737.359 1639.66,703.385 1640.21,717.711 1640.77,745.458 1641.33,741.042 1641.89,740.907 1642.45,721.17 1643.01,704.653 1643.57,703.294 1644.13,685.913 1644.69,701.822 1645.25,702.552 1645.81,700.646 1646.37,714.587 1646.93,696.16 1647.48,699.044 1648.04,714.665 1648.6,697.451 1649.16,745.486 1649.72,693.833 1650.28,707.399 1650.84,690.57 1651.4,689.881 1651.96,709.084 1652.52,740.735 1653.08,770.075 1653.64,783.927 1654.2,778.483 1654.76,741.835 1655.31,753.423 1655.87,750.778 1656.43,730.757 1656.99,697.518 1657.55,714.27 1658.11,668.488 1658.67,669.376 1659.23,668.245 1659.79,654.825 1660.35,640.655 1660.91,606.291 1661.47,595.772 1662.03,565.51 1662.58,572.614 1663.14,592.494 1663.7,609.869 1664.26,628.643 1664.82,649.97 1665.38,670.423 1665.94,652.393 1666.5,654.121 1667.06,637.837 1667.62,655.157 1668.18,678.682 1668.74,678.595 1669.3,681.3 1669.85,669.105 1670.41,637.205 1670.97,654.234 1671.53,636.905 1672.09,670.975 1672.65,674.353 1673.21,661.589 1673.77,696.494 1674.33,694.284 1674.89,708.132 1675.45,690.466 1676.01,709.321 1676.57,706.119 1677.13,706.934 1677.68,720.96 1678.24,723.148 1678.8,708.252 1679.36,727.581 1679.92,722.482 1680.48,702.094 1681.04,718.489 1681.6,668.268 1682.16,655.959 1682.72,641.898 1683.28,613.252 1683.84,631.973 1684.4,634.4 1684.95,633.934 1685.51,635.207 1686.07,626.878 1686.63,599.701 1687.19,604.858 1687.75,609.307 1688.31,631.279 1688.87,649.426 1689.43,650.144 1689.99,618.543 1690.55,641.297 1691.11,630.706 1691.67,680.451 1692.23,679.002 1692.78,680.11 1693.34,664.161 1693.9,667.938 1694.46,671.322 1695.02,672.188 1695.58,655.785 1696.14,654.089 1696.7,671.807 1697.26,706.369 1697.82,693.317 1698.38,706.972 1698.94,723.7 1699.5,738.792 1700.05,722.276 1700.61,704.648 1701.17,686.332 1701.73,688.461 1702.29,704.102 1702.85,733.575 1703.41,732.293 1703.97,746.391 1704.53,710.772 1705.09,675.392 1705.65,672.093 1706.21,670.92 1706.77,670.982 1707.32,642.825 1707.88,644.383 1708.44,660.317 1709,664.509 1709.56,663.108 1710.12,644.575 1710.68,646.935 1711.24,644.108 1711.8,630.584 1712.36,649.857 1712.92,664.992 1713.48,685.406 1714.04,651.117 1714.6,636.964 1715.15,621.608 1715.71,627.888 1716.27,642.455 1716.83,611.591 1717.39,619.527 1717.95,622.065 1718.51,625.635 1719.07,626.314 1719.63,629.416 1720.19,652.665 1720.75,639.153 1721.31,658.13 1721.87,629.292 1722.42,633.061 1722.98,637.584 1723.54,620.543 1724.1,624.301 1724.66,642.977 1725.22,630.809 1725.78,670.168 1726.34,656.099 1726.9,640.578 1727.46,660.241 1728.02,644.429 1728.58,631.261 1729.14,655.08 1729.69,655.296 1730.25,675.731 1730.81,676.397 1731.37,674.983 1731.93,676.827 1732.49,664.961 1733.05,681.657 1733.61,695.61 1734.17,693.681 1734.73,692.509 1735.29,720.14 1735.85,720.167 1736.41,751.707 1736.97,748.008 1737.52,729.199 1738.08,729.405 1738.64,757.989 1739.2,719.641 1739.76,718.883 1740.32,767.189 1740.88,776.493 1741.44,722.408 1742,684.1 1742.56,684.99 1743.12,667.351 1743.68,670.341 1744.24,639.341 1744.79,660.742 1745.35,663.188 1745.91,662.375 1746.47,647.562 1747.03,680.013 1747.59,662.845 1748.15,680.546 1748.71,697.124 1749.27,712.056 1749.83,759.556 1750.39,741.292 1750.95,654.231 1751.51,655.812 1752.06,673.03 1752.62,703.201 1753.18,715.102 1753.74,743.564 1754.3,771.72 1754.86,767.224 1755.42,777.89 1755.98,753.331 1756.54,750.422 1757.1,748.884 1757.66,732.012 1758.22,713.097 1758.78,714.776 1759.34,727.646 1759.89,739.958 1760.45,719.323 1761.01,701.241 1761.57,698.191 1762.13,718.527 1762.69,730.807 1763.25,748.705 1763.81,683.16 1764.37,665.802 1764.93,685.341 1765.49,651.44 1766.05,685.963 1766.61,703.323 1767.16,696.776 1767.72,695.101 1768.28,679.383 1768.84,649.852 1769.4,636.187 1769.96,636.847 1770.52,643.724 1771.08,629.996 1771.64,615.466 1772.2,651.798 1772.76,669.723 1773.32,667.308 1773.88,681.252 1774.43,684.926 1774.99,716.275 1775.55,742.708 1776.11,689.294 1776.67,690.465 1777.23,721.739 1777.79,736.857 1778.35,732.475 1778.91,729.007 1779.47,724.593 1780.03,720.581 1780.59,732.796 1781.15,746.727 1781.71,744.169 1782.26,728.322 1782.82,743.402 1783.38,707.815 1783.94,708.244 1784.5,723.835 1785.06,717.863 1785.62,732.441 1786.18,713.473 1786.74,709.059 1787.3,721.296 1787.86,718.46 1788.42,717.744 1788.98,702.285 1789.53,732.313 1790.09,663.558 1790.65,647.095 1791.21,661.684 1791.77,612.789 1792.33,646.647 1792.89,661.741 1793.45,647.681 1794.01,663.26 1794.57,648.462 1795.13,650.474 1795.69,633.181 1796.25,635.481 1796.8,655.798 1797.36,690.131 1797.92,690.191 1798.48,690.629 1799.04,706.717 1799.6,707.297 1800.16,703.377 1800.72,699.492 1801.28,729.443 1801.84,743.492 1802.4,737.909 1802.96,737.322 1803.52,731.116 1804.08,726.341 1804.63,709.298 1805.19,693.882 1805.75,693.988 1806.31,695.873 1806.87,709.016 1807.43,706.416 1807.99,737.014 1808.55,732.369 1809.11,732.079 1809.67,713.847 1810.23,714.077 1810.79,725.096 1811.35,739.766 1811.9,755.206 1812.46,786.333 1813.02,762.19 1813.58,760.279 1814.14,771.834 1814.7,736.118 1815.26,683.442 1815.82,666.01 1816.38,636.454 1816.94,654.661 1817.5,659.959 1818.06,660.553 1818.62,646.251 1819.18,627.62 1819.73,648.884 1820.29,699.133 1820.85,747.941 1821.41,679.741 1821.97,680.969 1822.53,663.732 1823.09,681.778 1823.65,665.369 1824.21,682.3 1824.77,702.662 1825.33,671.955 1825.89,656.436 1826.45,676.897 1827,691.437 1827.56,703.328 1828.12,669.433 1828.68,667.057 1829.24,651.518 1829.8,657.175 1830.36,597.107 1830.92,602.082 1831.48,623.459 1832.04,609.969 1832.6,614 1833.16,616.08 1833.72,601.387 1834.27,571.756 1834.83,611.677 1835.39,613.937 1835.95,617.886 1836.51,623.202 1837.07,613.187 1837.63,651.605 1838.19,605.963 \"/>\n<path clip-path=\"url(#clip253)\" d=\"M720.247 689.176 L720.806 689.176 L721.365 689.176 L721.924 689.176 L722.484 689.176 L723.043 689.176 L723.602 689.176 L724.161 689.176 L724.721 689.176 L725.28 689.176 L725.839 689.176 L726.398 689.176 L726.958 689.176 L727.517 689.176 L728.076 689.176 L728.635 689.176 L729.195 689.176 L729.754 689.176 L730.313 689.176 L730.872 689.176 L731.432 689.176 L731.991 689.176 L732.55 689.176 L733.109 689.176 L733.669 689.176 L734.228 689.176 L734.787 689.176 L735.346 689.176 L735.906 689.176 L736.465 689.176 L737.024 689.176 L737.583 689.176 L738.143 689.176 L738.702 689.176 L739.261 689.176 L739.82 689.176 L740.38 689.176 L740.939 689.176 L741.498 689.176 L742.057 689.176 L742.617 689.176 L743.176 689.176 L743.735 689.176 L744.294 689.176 L744.854 689.176 L745.413 689.176 L745.972 689.176 L746.531 689.176 L747.091 689.176 L747.65 689.176 L748.209 689.176 L748.768 689.176 L749.328 689.176 L749.887 689.176 L750.446 689.176 L751.005 689.176 L751.565 689.176 L752.124 689.176 L752.683 689.176 L753.242 689.176 L753.802 689.176 L754.361 689.176 L754.92 689.176 L755.479 689.176 L756.039 689.176 L756.598 689.176 L757.157 689.176 L757.716 689.176 L758.276 689.176 L758.835 689.176 L759.394 689.176 L759.953 689.176 L760.513 689.176 L761.072 689.176 L761.631 689.176 L762.19 689.176 L762.75 689.176 L763.309 689.176 L763.868 689.176 L764.427 689.176 L764.987 689.176 L765.546 689.176 L766.105 689.176 L766.664 689.176 L767.224 689.176 L767.783 689.176 L768.342 689.176 L768.901 689.176 L769.461 689.176 L770.02 689.176 L770.579 689.176 L771.138 689.176 L771.698 689.176 L772.257 689.176 L772.816 689.176 L773.375 689.176 L773.935 689.176 L774.494 689.176 L775.053 689.176 L775.612 689.176 L776.172 689.176 L776.731 689.176 L777.29 689.176 L777.849 689.176 L778.409 689.176 L778.968 689.176 L779.527 689.176 L780.086 689.176 L780.646 689.176 L781.205 689.176 L781.764 689.176 L782.323 689.176 L782.883 689.176 L783.442 689.176 L784.001 689.176 L784.56 689.176 L785.12 689.176 L785.679 689.176 L786.238 689.176 L786.797 689.176 L787.357 689.176 L787.916 689.176 L788.475 689.176 L789.034 689.176 L789.594 689.176 L790.153 689.176 L790.712 689.176 L791.271 689.176 L791.831 689.176 L792.39 689.176 L792.949 689.176 L793.508 689.176 L794.068 689.176 L794.627 689.176 L795.186 689.176 L795.745 689.176 L796.305 689.176 L796.864 689.176 L797.423 689.176 L797.982 689.176 L798.542 689.176 L799.101 689.176 L799.66 689.176 L800.219 689.176 L800.779 689.176 L801.338 689.176 L801.897 689.176 L802.456 689.176 L803.016 689.176 L803.575 689.176 L804.134 689.176 L804.693 689.176 L805.253 689.176 L805.812 689.176 L806.371 689.176 L806.931 689.176 L807.49 689.176 L808.049 689.176 L808.608 689.176 L809.168 689.176 L809.727 689.176 L810.286 689.176 L810.845 689.176 L811.405 689.176 L811.964 689.176 L812.523 689.176 L813.082 689.176 L813.642 689.176 L814.201 689.176 L814.76 689.176 L815.319 689.176 L815.879 689.176 L816.438 689.176 L816.997 689.176 L817.556 689.176 L818.116 689.176 L818.675 689.176 L819.234 689.176 L819.793 689.176 L820.353 689.176 L820.912 689.176 L821.471 689.176 L822.03 689.176 L822.59 689.176 L823.149 689.176 L823.708 689.176 L824.267 689.176 L824.827 689.176 L825.386 689.176 L825.945 689.176 L826.504 689.176 L827.064 689.176 L827.623 689.176 L828.182 689.176 L828.741 689.176 L829.301 689.176 L829.86 689.176 L830.419 689.176 L830.978 689.176 L831.538 689.176 L832.097 689.176 L832.656 689.176 L833.215 689.176 L833.775 689.176 L834.334 689.176 L834.893 689.176 L835.452 689.176 L836.012 689.176 L836.571 689.176 L837.13 689.176 L837.689 689.176 L838.249 689.176 L838.808 689.176 L839.367 689.176 L839.926 689.176 L840.486 689.176 L841.045 689.176 L841.604 689.176 L842.163 689.176 L842.723 689.176 L843.282 689.176 L843.841 689.176 L844.4 689.176 L844.96 689.176 L845.519 689.176 L846.078 689.176 L846.637 689.176 L847.197 689.176 L847.756 689.176 L848.315 689.176 L848.874 689.176 L849.434 689.176 L849.993 689.176 L850.552 689.176 L851.111 689.176 L851.671 689.176 L852.23 689.176 L852.789 689.176 L853.348 689.176 L853.908 689.176 L854.467 689.176 L855.026 689.176 L855.585 689.176 L856.145 689.176 L856.704 689.176 L857.263 689.176 L857.822 689.176 L858.382 689.176 L858.941 689.176 L859.5 689.176 L860.059 689.176 L860.619 689.176 L861.178 689.176 L861.737 689.176 L862.296 689.176 L862.856 689.176 L863.415 689.176 L863.974 689.176 L864.533 689.176 L865.093 689.176 L865.652 689.176 L866.211 689.176 L866.77 689.176 L867.33 689.176 L867.889 689.176 L868.448 689.176 L869.007 689.176 L869.567 689.176 L870.126 689.176 L870.685 689.176 L871.244 689.176 L871.804 689.176 L872.363 689.176 L872.922 689.176 L873.481 689.176 L874.041 689.176 L874.6 689.176 L875.159 689.176 L875.718 689.176 L876.278 689.176 L876.837 689.176 L877.396 689.176 L877.955 689.176 L878.515 689.176 L879.074 689.176 L879.633 689.176 L880.192 689.176 L880.752 689.176 L881.311 689.176 L881.87 689.176 L882.429 689.176 L882.989 689.176 L883.548 689.176 L884.107 689.176 L884.666 689.176 L885.226 689.176 L885.785 689.176 L886.344 689.176 L886.903 689.176 L887.463 689.176 L888.022 689.176 L888.581 689.176 L889.14 689.176 L889.7 689.176 L890.259 689.176 L890.818 689.176 L891.377 689.176 L891.937 689.176 L892.496 689.176 L893.055 689.176 L893.614 689.176 L894.174 689.176 L894.733 689.176 L895.292 689.176 L895.851 689.176 L896.411 689.176 L896.97 689.176 L897.529 689.176 L898.088 689.176 L898.648 689.176 L899.207 689.176 L899.766 689.176 L900.325 689.176 L900.885 689.176 L901.444 689.176 L902.003 689.176 L902.562 689.176 L903.122 689.176 L903.681 689.176 L904.24 689.176 L904.799 689.176 L905.359 689.176 L905.918 689.176 L906.477 689.176 L907.036 689.176 L907.596 689.176 L908.155 689.176 L908.714 689.176 L909.273 689.176 L909.833 689.176 L910.392 689.176 L910.951 689.176 L911.51 689.176 L912.07 689.176 L912.629 689.176 L913.188 689.176 L913.747 689.176 L914.307 689.176 L914.866 689.176 L915.425 689.176 L915.984 689.176 L916.544 689.176 L917.103 689.176 L917.662 689.176 L918.221 689.176 L918.781 689.176 L919.34 689.176 L919.899 689.176 L920.458 689.176 L921.018 689.176 L921.577 689.176 L922.136 689.176 L922.695 689.176 L923.255 689.176 L923.814 689.176 L924.373 689.176 L924.932 689.176 L925.492 689.176 L926.051 689.176 L926.61 689.176 L927.169 689.176 L927.729 689.176 L928.288 689.176 L928.847 689.176 L929.406 689.176 L929.966 689.176 L930.525 689.176 L931.084 689.176 L931.644 689.176 L932.203 689.176 L932.762 689.176 L933.321 689.176 L933.881 689.176 L934.44 689.176 L934.999 689.176 L935.558 689.176 L936.118 689.176 L936.677 689.176 L937.236 689.176 L937.795 689.176 L938.355 689.176 L938.914 689.176 L939.473 689.176 L940.032 689.176 L940.592 689.176 L941.151 689.176 L941.71 689.176 L942.269 689.176 L942.829 689.176 L943.388 689.176 L943.947 689.176 L944.506 689.176 L945.066 689.176 L945.625 689.176 L946.184 689.176 L946.743 689.176 L947.303 689.176 L947.862 689.176 L948.421 689.176 L948.98 689.176 L949.54 689.176 L950.099 689.176 L950.658 689.176 L951.217 689.176 L951.777 689.176 L952.336 689.176 L952.895 689.176 L953.454 689.176 L954.014 689.176 L954.573 689.176 L955.132 689.176 L955.691 689.176 L956.251 689.176 L956.81 689.176 L957.369 689.176 L957.928 689.176 L958.488 689.176 L959.047 689.176 L959.606 689.176 L960.165 689.176 L960.725 689.176 L961.284 689.176 L961.843 689.176 L962.402 689.176 L962.962 689.176 L963.521 689.176 L964.08 689.176 L964.639 689.176 L965.199 689.176 L965.758 689.176 L966.317 689.176 L966.876 689.176 L967.436 689.176 L967.995 689.176 L968.554 689.176 L969.113 689.176 L969.673 689.176 L970.232 689.176 L970.791 689.176 L971.35 689.176 L971.91 689.176 L972.469 689.176 L973.028 689.176 L973.587 689.176 L974.147 689.176 L974.706 689.176 L975.265 689.176 L975.824 689.176 L976.384 689.176 L976.943 689.176 L977.502 689.176 L978.061 689.176 L978.621 689.176 L979.18 689.176 L979.739 689.176 L980.298 689.176 L980.858 689.176 L981.417 689.176 L981.976 689.176 L982.535 689.176 L983.095 689.176 L983.654 689.176 L984.213 689.176 L984.772 689.176 L985.332 689.176 L985.891 689.176 L986.45 689.176 L987.009 689.176 L987.569 689.176 L988.128 689.176 L988.687 689.176 L989.246 689.176 L989.806 689.176 L990.365 689.176 L990.924 689.176 L991.483 689.176 L992.043 689.176 L992.602 689.176 L993.161 689.176 L993.72 689.176 L994.28 689.176 L994.839 689.176 L995.398 689.176 L995.957 689.176 L996.517 689.176 L997.076 689.176 L997.635 689.176 L998.194 689.176 L998.754 689.176 L999.313 689.176 L999.872 689.176 L1000.43 689.176 L1000.99 689.176 L1001.55 689.176 L1002.11 689.176 L1002.67 689.176 L1003.23 689.176 L1003.79 689.176 L1004.35 689.176 L1004.91 689.176 L1005.46 689.176 L1006.02 689.176 L1006.58 689.176 L1007.14 689.176 L1007.7 689.176 L1008.26 689.176 L1008.82 689.176 L1009.38 689.176 L1009.94 689.176 L1010.5 689.176 L1011.06 689.176 L1011.62 689.176 L1012.18 689.176 L1012.73 689.176 L1013.29 689.176 L1013.85 689.176 L1014.41 689.176 L1014.97 689.176 L1015.53 689.176 L1016.09 689.176 L1016.65 689.176 L1017.21 689.176 L1017.77 689.176 L1018.33 689.176 L1018.89 689.176 L1019.45 689.176 L1020.01 689.176 L1020.56 689.176 L1021.12 689.176 L1021.68 689.176 L1022.24 689.176 L1022.8 689.176 L1023.36 689.176 L1023.92 689.176 L1024.48 689.176 L1025.04 689.176 L1025.6 689.176 L1026.16 689.176 L1026.72 689.176 L1027.28 689.176 L1027.83 689.176 L1028.39 689.176 L1028.95 689.176 L1029.51 689.176 L1030.07 689.176 L1030.63 689.176 L1031.19 689.176 L1031.75 689.176 L1032.31 689.176 L1032.87 689.176 L1033.43 689.176 L1033.99 689.176 L1034.55 689.176 L1035.1 689.176 L1035.66 689.176 L1036.22 689.176 L1036.78 689.176 L1037.34 689.176 L1037.9 689.176 L1038.46 689.176 L1039.02 689.176 L1039.58 689.176 L1040.14 689.176 L1040.7 689.176 L1041.26 689.176 L1041.82 689.176 L1042.38 689.176 L1042.93 689.176 L1043.49 689.176 L1044.05 689.176 L1044.61 689.176 L1045.17 689.176 L1045.73 689.176 L1046.29 689.176 L1046.85 689.176 L1047.41 689.176 L1047.97 689.176 L1048.53 689.176 L1049.09 689.176 L1049.65 689.176 L1050.2 689.176 L1050.76 689.176 L1051.32 689.176 L1051.88 689.176 L1052.44 689.176 L1053 689.176 L1053.56 689.176 L1054.12 689.176 L1054.68 689.176 L1055.24 689.176 L1055.8 689.176 L1056.36 689.176 L1056.92 689.176 L1057.48 689.176 L1058.03 689.176 L1058.59 689.176 L1059.15 689.176 L1059.71 689.176 L1060.27 689.176 L1060.83 689.176 L1061.39 689.176 L1061.95 689.176 L1062.51 689.176 L1063.07 689.176 L1063.63 689.176 L1064.19 689.176 L1064.75 689.176 L1065.3 689.176 L1065.86 689.176 L1066.42 689.176 L1066.98 689.176 L1067.54 689.176 L1068.1 689.176 L1068.66 689.176 L1069.22 689.176 L1069.78 689.176 L1070.34 689.176 L1070.9 689.176 L1071.46 689.176 L1072.02 689.176 L1072.57 689.176 L1073.13 689.176 L1073.69 689.176 L1074.25 689.176 L1074.81 689.176 L1075.37 689.176 L1075.93 689.176 L1076.49 689.176 L1077.05 689.176 L1077.61 689.176 L1078.17 689.176 L1078.73 689.176 L1079.29 689.176 L1079.85 689.176 L1080.4 689.176 L1080.96 689.176 L1081.52 689.176 L1082.08 689.176 L1082.64 689.176 L1083.2 689.176 L1083.76 689.176 L1084.32 689.176 L1084.88 689.176 L1085.44 689.176 L1086 689.176 L1086.56 689.176 L1087.12 689.176 L1087.67 689.176 L1088.23 689.176 L1088.79 689.176 L1089.35 689.176 L1089.91 689.176 L1090.47 689.176 L1091.03 689.176 L1091.59 689.176 L1092.15 689.176 L1092.71 689.176 L1093.27 689.176 L1093.83 689.176 L1094.39 689.176 L1094.94 689.176 L1095.5 689.176 L1096.06 689.176 L1096.62 689.176 L1097.18 689.176 L1097.74 689.176 L1098.3 689.176 L1098.86 689.176 L1099.42 689.176 L1099.98 689.176 L1100.54 689.176 L1101.1 689.176 L1101.66 689.176 L1102.22 689.176 L1102.77 689.176 L1103.33 689.176 L1103.89 689.176 L1104.45 689.176 L1105.01 689.176 L1105.57 689.176 L1106.13 689.176 L1106.69 689.176 L1107.25 689.176 L1107.81 689.176 L1108.37 689.176 L1108.93 689.176 L1109.49 689.176 L1110.04 689.176 L1110.6 689.176 L1111.16 689.176 L1111.72 689.176 L1112.28 689.176 L1112.84 689.176 L1113.4 689.176 L1113.96 689.176 L1114.52 689.176 L1115.08 689.176 L1115.64 689.176 L1116.2 689.176 L1116.76 689.176 L1117.31 689.176 L1117.87 689.176 L1118.43 689.176 L1118.99 689.176 L1119.55 689.176 L1120.11 689.176 L1120.67 689.176 L1121.23 689.176 L1121.79 689.176 L1122.35 689.176 L1122.91 689.176 L1123.47 689.176 L1124.03 689.176 L1124.59 689.176 L1125.14 689.176 L1125.7 689.176 L1126.26 689.176 L1126.82 689.176 L1127.38 689.176 L1127.94 689.176 L1128.5 689.176 L1129.06 689.176 L1129.62 689.176 L1130.18 689.176 L1130.74 689.176 L1131.3 689.176 L1131.86 689.176 L1132.41 689.176 L1132.97 689.176 L1133.53 689.176 L1134.09 689.176 L1134.65 689.176 L1135.21 689.176 L1135.77 689.176 L1136.33 689.176 L1136.89 689.176 L1137.45 689.176 L1138.01 689.176 L1138.57 689.176 L1139.13 689.176 L1139.68 689.176 L1140.24 689.176 L1140.8 689.176 L1141.36 689.176 L1141.92 689.176 L1142.48 689.176 L1143.04 689.176 L1143.6 689.176 L1144.16 689.176 L1144.72 689.176 L1145.28 689.176 L1145.84 689.176 L1146.4 689.176 L1146.96 689.176 L1147.51 689.176 L1148.07 689.176 L1148.63 689.176 L1149.19 689.176 L1149.75 689.176 L1150.31 689.176 L1150.87 689.176 L1151.43 689.176 L1151.99 689.176 L1152.55 689.176 L1153.11 689.176 L1153.67 689.176 L1154.23 689.176 L1154.78 689.176 L1155.34 689.176 L1155.9 689.176 L1156.46 689.176 L1157.02 689.176 L1157.58 689.176 L1158.14 689.176 L1158.7 689.176 L1159.26 689.176 L1159.82 689.176 L1160.38 689.176 L1160.94 689.176 L1161.5 689.176 L1162.05 689.176 L1162.61 689.176 L1163.17 689.176 L1163.73 689.176 L1164.29 689.176 L1164.85 689.176 L1165.41 689.176 L1165.97 689.176 L1166.53 689.176 L1167.09 689.176 L1167.65 689.176 L1168.21 689.176 L1168.77 689.176 L1169.33 689.176 L1169.88 689.176 L1170.44 689.176 L1171 689.176 L1171.56 689.176 L1172.12 689.176 L1172.68 689.176 L1173.24 689.176 L1173.8 689.176 L1174.36 689.176 L1174.92 689.176 L1175.48 689.176 L1176.04 689.176 L1176.6 689.176 L1177.15 689.176 L1177.71 689.176 L1178.27 689.176 L1178.83 689.176 L1179.39 689.176 L1179.95 689.176 L1180.51 689.176 L1181.07 689.176 L1181.63 689.176 L1182.19 689.176 L1182.75 689.176 L1183.31 689.176 L1183.87 689.176 L1184.43 689.176 L1184.98 689.176 L1185.54 689.176 L1186.1 689.176 L1186.66 689.176 L1187.22 689.176 L1187.78 689.176 L1188.34 689.176 L1188.9 689.176 L1189.46 689.176 L1190.02 689.176 L1190.58 689.176 L1191.14 689.176 L1191.7 689.176 L1192.25 689.176 L1192.81 689.176 L1193.37 689.176 L1193.93 689.176 L1194.49 689.176 L1195.05 689.176 L1195.61 689.176 L1196.17 689.176 L1196.73 689.176 L1197.29 689.176 L1197.85 689.176 L1198.41 689.176 L1198.97 689.176 L1199.52 689.176 L1200.08 689.176 L1200.64 689.176 L1201.2 689.176 L1201.76 689.176 L1202.32 689.176 L1202.88 689.176 L1203.44 689.176 L1204 689.176 L1204.56 689.176 L1205.12 689.176 L1205.68 689.176 L1206.24 689.176 L1206.8 689.176 L1207.35 689.176 L1207.91 689.176 L1208.47 689.176 L1209.03 689.176 L1209.59 689.176 L1210.15 689.176 L1210.71 689.176 L1211.27 689.176 L1211.83 689.176 L1212.39 689.176 L1212.95 689.176 L1213.51 689.176 L1214.07 689.176 L1214.62 689.176 L1215.18 689.176 L1215.74 689.176 L1216.3 689.176 L1216.86 689.176 L1217.42 689.176 L1217.98 689.176 L1218.54 689.176 L1219.1 689.176 L1219.66 689.176 L1220.22 689.176 L1220.78 689.176 L1221.34 689.176 L1221.89 689.176 L1222.45 689.176 L1223.01 689.176 L1223.57 689.176 L1224.13 689.176 L1224.69 689.176 L1225.25 689.176 L1225.81 689.176 L1226.37 689.176 L1226.93 689.176 L1227.49 689.176 L1228.05 689.176 L1228.61 689.176 L1229.17 689.176 L1229.72 689.176 L1230.28 689.176 L1230.84 689.176 L1231.4 689.176 L1231.96 689.176 L1232.52 689.176 L1233.08 689.176 L1233.64 689.176 L1234.2 689.176 L1234.76 689.176 L1235.32 689.176 L1235.88 689.176 L1236.44 689.176 L1236.99 689.176 L1237.55 689.176 L1238.11 689.176 L1238.67 689.176 L1239.23 689.176 L1239.79 689.176 L1240.35 689.176 L1240.91 689.176 L1241.47 689.176 L1242.03 689.176 L1242.59 689.176 L1243.15 689.176 L1243.71 689.176 L1244.26 689.176 L1244.82 689.176 L1245.38 689.176 L1245.94 689.176 L1246.5 689.176 L1247.06 689.176 L1247.62 689.176 L1248.18 689.176 L1248.74 689.176 L1249.3 689.176 L1249.86 689.176 L1250.42 689.176 L1250.98 689.176 L1251.54 689.176 L1252.09 689.176 L1252.65 689.176 L1253.21 689.176 L1253.77 689.176 L1254.33 689.176 L1254.89 689.176 L1255.45 689.176 L1256.01 689.176 L1256.57 689.176 L1257.13 689.176 L1257.69 689.176 L1258.25 689.176 L1258.81 689.176 L1259.36 689.176 L1259.92 689.176 L1260.48 689.176 L1261.04 689.176 L1261.6 689.176 L1262.16 689.176 L1262.72 689.176 L1263.28 689.176 L1263.84 689.176 L1264.4 689.176 L1264.96 689.176 L1265.52 689.176 L1266.08 689.176 L1266.63 689.176 L1267.19 689.176 L1267.75 689.176 L1268.31 689.176 L1268.87 689.176 L1269.43 689.176 L1269.99 689.176 L1270.55 689.176 L1271.11 689.176 L1271.67 689.176 L1272.23 689.176 L1272.79 689.176 L1273.35 689.176 L1273.91 689.176 L1274.46 689.176 L1275.02 689.176 L1275.58 689.176 L1276.14 689.176 L1276.7 689.176 L1277.26 689.176 L1277.82 689.176 L1278.38 689.176 L1278.94 689.176 L1279.5 689.176 L1280.06 689.176 L1280.62 689.176 L1281.18 689.176 L1281.73 689.176 L1282.29 689.176 L1282.85 689.176 L1283.41 689.176 L1283.97 689.176 L1284.53 689.176 L1285.09 689.176 L1285.65 689.176 L1286.21 689.176 L1286.77 689.176 L1287.33 689.176 L1287.89 689.176 L1288.45 689.176 L1289 689.176 L1289.56 689.176 L1290.12 689.176 L1290.68 689.176 L1291.24 689.176 L1291.8 689.176 L1292.36 689.176 L1292.92 689.176 L1293.48 689.176 L1294.04 689.176 L1294.6 689.176 L1295.16 689.176 L1295.72 689.176 L1296.28 689.176 L1296.83 689.176 L1297.39 689.176 L1297.95 689.176 L1298.51 689.176 L1299.07 689.176 L1299.63 689.176 L1300.19 689.176 L1300.75 689.176 L1301.31 689.176 L1301.87 689.176 L1302.43 689.176 L1302.99 689.176 L1303.55 689.176 L1304.1 689.176 L1304.66 689.176 L1305.22 689.176 L1305.78 689.176 L1306.34 689.176 L1306.9 689.176 L1307.46 689.176 L1308.02 689.176 L1308.58 689.176 L1309.14 689.176 L1309.7 689.176 L1310.26 689.176 L1310.82 689.176 L1311.38 689.176 L1311.93 689.176 L1312.49 689.176 L1313.05 689.176 L1313.61 689.176 L1314.17 689.176 L1314.73 689.176 L1315.29 689.176 L1315.85 689.176 L1316.41 689.176 L1316.97 689.176 L1317.53 689.176 L1318.09 689.176 L1318.65 689.176 L1319.2 689.176 L1319.76 689.176 L1320.32 689.176 L1320.88 689.176 L1321.44 689.176 L1322 689.176 L1322.56 689.176 L1323.12 689.176 L1323.68 689.176 L1324.24 689.176 L1324.8 689.176 L1325.36 689.176 L1325.92 689.176 L1326.47 689.176 L1327.03 689.176 L1327.59 689.176 L1328.15 689.176 L1328.71 689.176 L1329.27 689.176 L1329.83 689.176 L1330.39 689.176 L1330.95 689.176 L1331.51 689.176 L1332.07 689.176 L1332.63 689.176 L1333.19 689.176 L1333.75 689.176 L1334.3 689.176 L1334.86 689.176 L1335.42 689.176 L1335.98 689.176 L1336.54 689.176 L1337.1 689.176 L1337.66 689.176 L1338.22 689.176 L1338.78 689.176 L1339.34 689.176 L1339.9 689.176 L1340.46 689.176 L1341.02 689.176 L1341.57 689.176 L1342.13 689.176 L1342.69 689.176 L1343.25 689.176 L1343.81 689.176 L1344.37 689.176 L1344.93 689.176 L1345.49 689.176 L1346.05 689.176 L1346.61 689.176 L1347.17 689.176 L1347.73 689.176 L1348.29 689.176 L1348.84 689.176 L1349.4 689.176 L1349.96 689.176 L1350.52 689.176 L1351.08 689.176 L1351.64 689.176 L1352.2 689.176 L1352.76 689.176 L1353.32 689.176 L1353.88 689.176 L1354.44 689.176 L1355 689.176 L1355.56 689.176 L1356.12 689.176 L1356.67 689.176 L1357.23 689.176 L1357.79 689.176 L1358.35 689.176 L1358.91 689.176 L1359.47 689.176 L1360.03 689.176 L1360.59 689.176 L1361.15 689.176 L1361.71 689.176 L1362.27 689.176 L1362.83 689.176 L1363.39 689.176 L1363.94 689.176 L1364.5 689.176 L1365.06 689.176 L1365.62 689.176 L1366.18 689.176 L1366.74 689.176 L1367.3 689.176 L1367.86 689.176 L1368.42 689.176 L1368.98 689.176 L1369.54 689.176 L1370.1 689.176 L1370.66 689.176 L1371.21 689.176 L1371.77 689.176 L1372.33 689.176 L1372.89 689.176 L1373.45 689.176 L1374.01 689.176 L1374.57 689.176 L1375.13 689.176 L1375.69 689.176 L1376.25 689.176 L1376.81 689.176 L1377.37 689.176 L1377.93 689.176 L1378.49 689.176 L1379.04 689.176 L1379.6 689.176 L1380.16 689.176 L1380.72 689.176 L1381.28 689.176 L1381.84 689.176 L1382.4 689.176 L1382.96 689.176 L1383.52 689.176 L1384.08 689.176 L1384.64 689.176 L1385.2 689.176 L1385.76 689.176 L1386.31 689.176 L1386.87 689.176 L1387.43 689.176 L1387.99 689.176 L1388.55 689.176 L1389.11 689.176 L1389.67 689.176 L1390.23 689.176 L1390.79 689.176 L1391.35 689.176 L1391.91 689.176 L1392.47 689.176 L1393.03 689.176 L1393.58 689.176 L1394.14 689.176 L1394.7 689.176 L1395.26 689.176 L1395.82 689.176 L1396.38 689.176 L1396.94 689.176 L1397.5 689.176 L1398.06 689.176 L1398.62 689.176 L1399.18 689.176 L1399.74 689.176 L1400.3 689.176 L1400.86 689.176 L1401.41 689.176 L1401.97 689.176 L1402.53 689.176 L1403.09 689.176 L1403.65 689.176 L1404.21 689.176 L1404.77 689.176 L1405.33 689.176 L1405.89 689.176 L1406.45 689.176 L1407.01 689.176 L1407.57 689.176 L1408.13 689.176 L1408.68 689.176 L1409.24 689.176 L1409.8 689.176 L1410.36 689.176 L1410.92 689.176 L1411.48 689.176 L1412.04 689.176 L1412.6 689.176 L1413.16 689.176 L1413.72 689.176 L1414.28 689.176 L1414.84 689.176 L1415.4 689.176 L1415.95 689.176 L1416.51 689.176 L1417.07 689.176 L1417.63 689.176 L1418.19 689.176 L1418.75 689.176 L1419.31 689.176 L1419.87 689.176 L1420.43 689.176 L1420.99 689.176 L1421.55 689.176 L1422.11 689.176 L1422.67 689.176 L1423.23 689.176 L1423.78 689.176 L1424.34 689.176 L1424.9 689.176 L1425.46 689.176 L1426.02 689.176 L1426.58 689.176 L1427.14 689.176 L1427.7 689.176 L1428.26 689.176 L1428.82 689.176 L1429.38 689.176 L1429.94 689.176 L1430.5 689.176 L1431.05 689.176 L1431.61 689.176 L1432.17 689.176 L1432.73 689.176 L1433.29 689.176 L1433.85 689.176 L1434.41 689.176 L1434.97 689.176 L1435.53 689.176 L1436.09 689.176 L1436.65 689.176 L1437.21 689.176 L1437.77 689.176 L1438.33 689.176 L1438.88 689.176 L1439.44 689.176 L1440 689.176 L1440.56 689.176 L1441.12 689.176 L1441.68 689.176 L1442.24 689.176 L1442.8 689.176 L1443.36 689.176 L1443.92 689.176 L1444.48 689.176 L1445.04 689.176 L1445.6 689.176 L1446.15 689.176 L1446.71 689.176 L1447.27 689.176 L1447.83 689.176 L1448.39 689.176 L1448.95 689.176 L1449.51 689.176 L1450.07 689.176 L1450.63 689.176 L1451.19 689.176 L1451.75 689.176 L1452.31 689.176 L1452.87 689.176 L1453.42 689.176 L1453.98 689.176 L1454.54 689.176 L1455.1 689.176 L1455.66 689.176 L1456.22 689.176 L1456.78 689.176 L1457.34 689.176 L1457.9 689.176 L1458.46 689.176 L1459.02 689.176 L1459.58 689.176 L1460.14 689.176 L1460.7 689.176 L1461.25 689.176 L1461.81 689.176 L1462.37 689.176 L1462.93 689.176 L1463.49 689.176 L1464.05 689.176 L1464.61 689.176 L1465.17 689.176 L1465.73 689.176 L1466.29 689.176 L1466.85 689.176 L1467.41 689.176 L1467.97 689.176 L1468.52 689.176 L1469.08 689.176 L1469.64 689.176 L1470.2 689.176 L1470.76 689.176 L1471.32 689.176 L1471.88 689.176 L1472.44 689.176 L1473 689.176 L1473.56 689.176 L1474.12 689.176 L1474.68 689.176 L1475.24 689.176 L1475.79 689.176 L1476.35 689.176 L1476.91 689.176 L1477.47 689.176 L1478.03 689.176 L1478.59 689.176 L1479.15 689.176 L1479.71 689.176 L1480.27 689.176 L1480.83 689.176 L1481.39 689.176 L1481.95 689.176 L1482.51 689.176 L1483.07 689.176 L1483.62 689.176 L1484.18 689.176 L1484.74 689.176 L1485.3 689.176 L1485.86 689.176 L1486.42 689.176 L1486.98 689.176 L1487.54 689.176 L1488.1 689.176 L1488.66 689.176 L1489.22 689.176 L1489.78 689.176 L1490.34 689.176 L1490.89 689.176 L1491.45 689.176 L1492.01 689.176 L1492.57 689.176 L1493.13 689.176 L1493.69 689.176 L1494.25 689.176 L1494.81 689.176 L1495.37 689.176 L1495.93 689.176 L1496.49 689.176 L1497.05 689.176 L1497.61 689.176 L1498.16 689.176 L1498.72 689.176 L1499.28 689.176 L1499.84 689.176 L1500.4 689.176 L1500.96 689.176 L1501.52 689.176 L1502.08 689.176 L1502.64 689.176 L1503.2 689.176 L1503.76 689.176 L1504.32 689.176 L1504.88 689.176 L1505.44 689.176 L1505.99 689.176 L1506.55 689.176 L1507.11 689.176 L1507.67 689.176 L1508.23 689.176 L1508.79 689.176 L1509.35 689.176 L1509.91 689.176 L1510.47 689.176 L1511.03 689.176 L1511.59 689.176 L1512.15 689.176 L1512.71 689.176 L1513.26 689.176 L1513.82 689.176 L1514.38 689.176 L1514.94 689.176 L1515.5 689.176 L1516.06 689.176 L1516.62 689.176 L1517.18 689.176 L1517.74 689.176 L1518.3 689.176 L1518.86 689.176 L1519.42 689.176 L1519.98 689.176 L1520.53 689.176 L1521.09 689.176 L1521.65 689.176 L1522.21 689.176 L1522.77 689.176 L1523.33 689.176 L1523.89 689.176 L1524.45 689.176 L1525.01 689.176 L1525.57 689.176 L1526.13 689.176 L1526.69 689.176 L1527.25 689.176 L1527.81 689.176 L1528.36 689.176 L1528.92 689.176 L1529.48 689.176 L1530.04 689.176 L1530.6 689.176 L1531.16 689.176 L1531.72 689.176 L1532.28 689.176 L1532.84 689.176 L1533.4 689.176 L1533.96 689.176 L1534.52 689.176 L1535.08 689.176 L1535.63 689.176 L1536.19 689.176 L1536.75 689.176 L1537.31 689.176 L1537.87 689.176 L1538.43 689.176 L1538.99 689.176 L1539.55 689.176 L1540.11 689.176 L1540.67 689.176 L1541.23 689.176 L1541.79 689.176 L1542.35 689.176 L1542.9 689.176 L1543.46 689.176 L1544.02 689.176 L1544.58 689.176 L1545.14 689.176 L1545.7 689.176 L1546.26 689.176 L1546.82 689.176 L1547.38 689.176 L1547.94 689.176 L1548.5 689.176 L1549.06 689.176 L1549.62 689.176 L1550.18 689.176 L1550.73 689.176 L1551.29 689.176 L1551.85 689.176 L1552.41 689.176 L1552.97 689.176 L1553.53 689.176 L1554.09 689.176 L1554.65 689.176 L1555.21 689.176 L1555.77 689.176 L1556.33 689.176 L1556.89 689.176 L1557.45 689.176 L1558 689.176 L1558.56 689.176 L1559.12 689.176 L1559.68 689.176 L1560.24 689.176 L1560.8 689.176 L1561.36 689.176 L1561.92 689.176 L1562.48 689.176 L1563.04 689.176 L1563.6 689.176 L1564.16 689.176 L1564.72 689.176 L1565.28 689.176 L1565.83 689.176 L1566.39 689.176 L1566.95 689.176 L1567.51 689.176 L1568.07 689.176 L1568.63 689.176 L1569.19 689.176 L1569.75 689.176 L1570.31 689.176 L1570.87 689.176 L1571.43 689.176 L1571.99 689.176 L1572.55 689.176 L1573.1 689.176 L1573.66 689.176 L1574.22 689.176 L1574.78 689.176 L1575.34 689.176 L1575.9 689.176 L1576.46 689.176 L1577.02 689.176 L1577.58 689.176 L1578.14 689.176 L1578.7 689.176 L1579.26 689.176 L1579.82 689.176 L1580.37 689.176 L1580.93 689.176 L1581.49 689.176 L1582.05 689.176 L1582.61 689.176 L1583.17 689.176 L1583.73 689.176 L1584.29 689.176 L1584.85 689.176 L1585.41 689.176 L1585.97 689.176 L1586.53 689.176 L1587.09 689.176 L1587.65 689.176 L1588.2 689.176 L1588.76 689.176 L1589.32 689.176 L1589.88 689.176 L1590.44 689.176 L1591 689.176 L1591.56 689.176 L1592.12 689.176 L1592.68 689.176 L1593.24 689.176 L1593.8 689.176 L1594.36 689.176 L1594.92 689.176 L1595.47 689.176 L1596.03 689.176 L1596.59 689.176 L1597.15 689.176 L1597.71 689.176 L1598.27 689.176 L1598.83 689.176 L1599.39 689.176 L1599.95 689.176 L1600.51 689.176 L1601.07 689.176 L1601.63 689.176 L1602.19 689.176 L1602.74 689.176 L1603.3 689.176 L1603.86 689.176 L1604.42 689.176 L1604.98 689.176 L1605.54 689.176 L1606.1 689.176 L1606.66 689.176 L1607.22 689.176 L1607.78 689.176 L1608.34 689.176 L1608.9 689.176 L1609.46 689.176 L1610.02 689.176 L1610.57 689.176 L1611.13 689.176 L1611.69 689.176 L1612.25 689.176 L1612.81 689.176 L1613.37 689.176 L1613.93 689.176 L1614.49 689.176 L1615.05 689.176 L1615.61 689.176 L1616.17 689.176 L1616.73 689.176 L1617.29 689.176 L1617.84 689.176 L1618.4 689.176 L1618.96 689.176 L1619.52 689.176 L1620.08 689.176 L1620.64 689.176 L1621.2 689.176 L1621.76 689.176 L1622.32 689.176 L1622.88 689.176 L1623.44 689.176 L1624 689.176 L1624.56 689.176 L1625.11 689.176 L1625.67 689.176 L1626.23 689.176 L1626.79 689.176 L1627.35 689.176 L1627.91 689.176 L1628.47 689.176 L1629.03 689.176 L1629.59 689.176 L1630.15 689.176 L1630.71 689.176 L1631.27 689.176 L1631.83 689.176 L1632.39 689.176 L1632.94 689.176 L1633.5 689.176 L1634.06 689.176 L1634.62 689.176 L1635.18 689.176 L1635.74 689.176 L1636.3 689.176 L1636.86 689.176 L1637.42 689.176 L1637.98 689.176 L1638.54 689.176 L1639.1 689.176 L1639.66 689.176 L1640.21 689.176 L1640.77 689.176 L1641.33 689.176 L1641.89 689.176 L1642.45 689.176 L1643.01 689.176 L1643.57 689.176 L1644.13 689.176 L1644.69 689.176 L1645.25 689.176 L1645.81 689.176 L1646.37 689.176 L1646.93 689.176 L1647.48 689.176 L1648.04 689.176 L1648.6 689.176 L1649.16 689.176 L1649.72 689.176 L1650.28 689.176 L1650.84 689.176 L1651.4 689.176 L1651.96 689.176 L1652.52 689.176 L1653.08 689.176 L1653.64 689.176 L1654.2 689.176 L1654.76 689.176 L1655.31 689.176 L1655.87 689.176 L1656.43 689.176 L1656.99 689.176 L1657.55 689.176 L1658.11 689.176 L1658.67 689.176 L1659.23 689.176 L1659.79 689.176 L1660.35 689.176 L1660.91 689.176 L1661.47 689.176 L1662.03 689.176 L1662.58 689.176 L1663.14 689.176 L1663.7 689.176 L1664.26 689.176 L1664.82 689.176 L1665.38 689.176 L1665.94 689.176 L1666.5 689.176 L1667.06 689.176 L1667.62 689.176 L1668.18 689.176 L1668.74 689.176 L1669.3 689.176 L1669.85 689.176 L1670.41 689.176 L1670.97 689.176 L1671.53 689.176 L1672.09 689.176 L1672.65 689.176 L1673.21 689.176 L1673.77 689.176 L1674.33 689.176 L1674.89 689.176 L1675.45 689.176 L1676.01 689.176 L1676.57 689.176 L1677.13 689.176 L1677.68 689.176 L1678.24 689.176 L1678.8 689.176 L1679.36 689.176 L1679.92 689.176 L1680.48 689.176 L1681.04 689.176 L1681.6 689.176 L1682.16 689.176 L1682.72 689.176 L1683.28 689.176 L1683.84 689.176 L1684.4 689.176 L1684.95 689.176 L1685.51 689.176 L1686.07 689.176 L1686.63 689.176 L1687.19 689.176 L1687.75 689.176 L1688.31 689.176 L1688.87 689.176 L1689.43 689.176 L1689.99 689.176 L1690.55 689.176 L1691.11 689.176 L1691.67 689.176 L1692.23 689.176 L1692.78 689.176 L1693.34 689.176 L1693.9 689.176 L1694.46 689.176 L1695.02 689.176 L1695.58 689.176 L1696.14 689.176 L1696.7 689.176 L1697.26 689.176 L1697.82 689.176 L1698.38 689.176 L1698.94 689.176 L1699.5 689.176 L1700.05 689.176 L1700.61 689.176 L1701.17 689.176 L1701.73 689.176 L1702.29 689.176 L1702.85 689.176 L1703.41 689.176 L1703.97 689.176 L1704.53 689.176 L1705.09 689.176 L1705.65 689.176 L1706.21 689.176 L1706.77 689.176 L1707.32 689.176 L1707.88 689.176 L1708.44 689.176 L1709 689.176 L1709.56 689.176 L1710.12 689.176 L1710.68 689.176 L1711.24 689.176 L1711.8 689.176 L1712.36 689.176 L1712.92 689.176 L1713.48 689.176 L1714.04 689.176 L1714.6 689.176 L1715.15 689.176 L1715.71 689.176 L1716.27 689.176 L1716.83 689.176 L1717.39 689.176 L1717.95 689.176 L1718.51 689.176 L1719.07 689.176 L1719.63 689.176 L1720.19 689.176 L1720.75 689.176 L1721.31 689.176 L1721.87 689.176 L1722.42 689.176 L1722.98 689.176 L1723.54 689.176 L1724.1 689.176 L1724.66 689.176 L1725.22 689.176 L1725.78 689.176 L1726.34 689.176 L1726.9 689.176 L1727.46 689.176 L1728.02 689.176 L1728.58 689.176 L1729.14 689.176 L1729.69 689.176 L1730.25 689.176 L1730.81 689.176 L1731.37 689.176 L1731.93 689.176 L1732.49 689.176 L1733.05 689.176 L1733.61 689.176 L1734.17 689.176 L1734.73 689.176 L1735.29 689.176 L1735.85 689.176 L1736.41 689.176 L1736.97 689.176 L1737.52 689.176 L1738.08 689.176 L1738.64 689.176 L1739.2 689.176 L1739.76 689.176 L1740.32 689.176 L1740.88 689.176 L1741.44 689.176 L1742 689.176 L1742.56 689.176 L1743.12 689.176 L1743.68 689.176 L1744.24 689.176 L1744.79 689.176 L1745.35 689.176 L1745.91 689.176 L1746.47 689.176 L1747.03 689.176 L1747.59 689.176 L1748.15 689.176 L1748.71 689.176 L1749.27 689.176 L1749.83 689.176 L1750.39 689.176 L1750.95 689.176 L1751.51 689.176 L1752.06 689.176 L1752.62 689.176 L1753.18 689.176 L1753.74 689.176 L1754.3 689.176 L1754.86 689.176 L1755.42 689.176 L1755.98 689.176 L1756.54 689.176 L1757.1 689.176 L1757.66 689.176 L1758.22 689.176 L1758.78 689.176 L1759.34 689.176 L1759.89 689.176 L1760.45 689.176 L1761.01 689.176 L1761.57 689.176 L1762.13 689.176 L1762.69 689.176 L1763.25 689.176 L1763.81 689.176 L1764.37 689.176 L1764.93 689.176 L1765.49 689.176 L1766.05 689.176 L1766.61 689.176 L1767.16 689.176 L1767.72 689.176 L1768.28 689.176 L1768.84 689.176 L1769.4 689.176 L1769.96 689.176 L1770.52 689.176 L1771.08 689.176 L1771.64 689.176 L1772.2 689.176 L1772.76 689.176 L1773.32 689.176 L1773.88 689.176 L1774.43 689.176 L1774.99 689.176 L1775.55 689.176 L1776.11 689.176 L1776.67 689.176 L1777.23 689.176 L1777.79 689.176 L1778.35 689.176 L1778.91 689.176 L1779.47 689.176 L1780.03 689.176 L1780.59 689.176 L1781.15 689.176 L1781.71 689.176 L1782.26 689.176 L1782.82 689.176 L1783.38 689.176 L1783.94 689.176 L1784.5 689.176 L1785.06 689.176 L1785.62 689.176 L1786.18 689.176 L1786.74 689.176 L1787.3 689.176 L1787.86 689.176 L1788.42 689.176 L1788.98 689.176 L1789.53 689.176 L1790.09 689.176 L1790.65 689.176 L1791.21 689.176 L1791.77 689.176 L1792.33 689.176 L1792.89 689.176 L1793.45 689.176 L1794.01 689.176 L1794.57 689.176 L1795.13 689.176 L1795.69 689.176 L1796.25 689.176 L1796.8 689.176 L1797.36 689.176 L1797.92 689.176 L1798.48 689.176 L1799.04 689.176 L1799.6 689.176 L1800.16 689.176 L1800.72 689.176 L1801.28 689.176 L1801.84 689.176 L1802.4 689.176 L1802.96 689.176 L1803.52 689.176 L1804.08 689.176 L1804.63 689.176 L1805.19 689.176 L1805.75 689.176 L1806.31 689.176 L1806.87 689.176 L1807.43 689.176 L1807.99 689.176 L1808.55 689.176 L1809.11 689.176 L1809.67 689.176 L1810.23 689.176 L1810.79 689.176 L1811.35 689.176 L1811.9 689.176 L1812.46 689.176 L1813.02 689.176 L1813.58 689.176 L1814.14 689.176 L1814.7 689.176 L1815.26 689.176 L1815.82 689.176 L1816.38 689.176 L1816.94 689.176 L1817.5 689.176 L1818.06 689.176 L1818.62 689.176 L1819.18 689.176 L1819.73 689.176 L1820.29 689.176 L1820.85 689.176 L1821.41 689.176 L1821.97 689.176 L1822.53 689.176 L1823.09 689.176 L1823.65 689.176 L1824.21 689.176 L1824.77 689.176 L1825.33 689.176 L1825.89 689.176 L1826.45 689.176 L1827 689.176 L1827.56 689.176 L1828.12 689.176 L1828.68 689.176 L1829.24 689.176 L1829.8 689.176 L1830.36 689.176 L1830.92 689.176 L1831.48 689.176 L1832.04 689.176 L1832.6 689.176 L1833.16 689.176 L1833.72 689.176 L1834.27 689.176 L1834.83 689.176 L1835.39 689.176 L1835.95 689.176 L1836.51 689.176 L1837.07 689.176 L1837.63 689.176 L1838.19 689.176 L1838.19 682.859 L1837.63 682.859 L1837.07 682.859 L1836.51 682.859 L1835.95 682.859 L1835.39 682.859 L1834.83 682.859 L1834.27 682.859 L1833.72 682.859 L1833.16 682.859 L1832.6 682.859 L1832.04 682.859 L1831.48 682.859 L1830.92 682.859 L1830.36 682.859 L1829.8 682.859 L1829.24 682.859 L1828.68 682.859 L1828.12 682.859 L1827.56 682.859 L1827 682.859 L1826.45 682.859 L1825.89 682.859 L1825.33 682.859 L1824.77 682.859 L1824.21 682.859 L1823.65 682.859 L1823.09 682.859 L1822.53 682.859 L1821.97 682.859 L1821.41 682.859 L1820.85 682.859 L1820.29 682.859 L1819.73 682.859 L1819.18 682.859 L1818.62 682.859 L1818.06 682.859 L1817.5 682.859 L1816.94 682.859 L1816.38 682.859 L1815.82 682.859 L1815.26 682.859 L1814.7 682.859 L1814.14 682.859 L1813.58 682.859 L1813.02 682.859 L1812.46 682.859 L1811.9 682.859 L1811.35 682.859 L1810.79 682.859 L1810.23 682.859 L1809.67 682.859 L1809.11 682.859 L1808.55 682.859 L1807.99 682.859 L1807.43 682.859 L1806.87 682.859 L1806.31 682.859 L1805.75 682.859 L1805.19 682.859 L1804.63 682.859 L1804.08 682.859 L1803.52 682.859 L1802.96 682.859 L1802.4 682.859 L1801.84 682.859 L1801.28 682.859 L1800.72 682.859 L1800.16 682.859 L1799.6 682.859 L1799.04 682.859 L1798.48 682.859 L1797.92 682.859 L1797.36 682.859 L1796.8 682.859 L1796.25 682.859 L1795.69 682.859 L1795.13 682.859 L1794.57 682.859 L1794.01 682.859 L1793.45 682.859 L1792.89 682.859 L1792.33 682.859 L1791.77 682.859 L1791.21 682.859 L1790.65 682.859 L1790.09 682.859 L1789.53 682.859 L1788.98 682.859 L1788.42 682.859 L1787.86 682.859 L1787.3 682.859 L1786.74 682.859 L1786.18 682.859 L1785.62 682.859 L1785.06 682.859 L1784.5 682.859 L1783.94 682.859 L1783.38 682.859 L1782.82 682.859 L1782.26 682.859 L1781.71 682.859 L1781.15 682.859 L1780.59 682.859 L1780.03 682.859 L1779.47 682.859 L1778.91 682.859 L1778.35 682.859 L1777.79 682.859 L1777.23 682.859 L1776.67 682.859 L1776.11 682.859 L1775.55 682.859 L1774.99 682.859 L1774.43 682.859 L1773.88 682.859 L1773.32 682.859 L1772.76 682.859 L1772.2 682.859 L1771.64 682.859 L1771.08 682.859 L1770.52 682.859 L1769.96 682.859 L1769.4 682.859 L1768.84 682.859 L1768.28 682.859 L1767.72 682.859 L1767.16 682.859 L1766.61 682.859 L1766.05 682.859 L1765.49 682.859 L1764.93 682.859 L1764.37 682.859 L1763.81 682.859 L1763.25 682.859 L1762.69 682.859 L1762.13 682.859 L1761.57 682.859 L1761.01 682.859 L1760.45 682.859 L1759.89 682.859 L1759.34 682.859 L1758.78 682.859 L1758.22 682.859 L1757.66 682.859 L1757.1 682.859 L1756.54 682.859 L1755.98 682.859 L1755.42 682.859 L1754.86 682.859 L1754.3 682.859 L1753.74 682.859 L1753.18 682.859 L1752.62 682.859 L1752.06 682.859 L1751.51 682.859 L1750.95 682.859 L1750.39 682.859 L1749.83 682.859 L1749.27 682.859 L1748.71 682.859 L1748.15 682.859 L1747.59 682.859 L1747.03 682.859 L1746.47 682.859 L1745.91 682.859 L1745.35 682.859 L1744.79 682.859 L1744.24 682.859 L1743.68 682.859 L1743.12 682.859 L1742.56 682.859 L1742 682.859 L1741.44 682.859 L1740.88 682.859 L1740.32 682.859 L1739.76 682.859 L1739.2 682.859 L1738.64 682.859 L1738.08 682.859 L1737.52 682.859 L1736.97 682.859 L1736.41 682.859 L1735.85 682.859 L1735.29 682.859 L1734.73 682.859 L1734.17 682.859 L1733.61 682.859 L1733.05 682.859 L1732.49 682.859 L1731.93 682.859 L1731.37 682.859 L1730.81 682.859 L1730.25 682.859 L1729.69 682.859 L1729.14 682.859 L1728.58 682.859 L1728.02 682.859 L1727.46 682.859 L1726.9 682.859 L1726.34 682.859 L1725.78 682.859 L1725.22 682.859 L1724.66 682.859 L1724.1 682.859 L1723.54 682.859 L1722.98 682.859 L1722.42 682.859 L1721.87 682.859 L1721.31 682.859 L1720.75 682.859 L1720.19 682.859 L1719.63 682.859 L1719.07 682.859 L1718.51 682.859 L1717.95 682.859 L1717.39 682.859 L1716.83 682.859 L1716.27 682.859 L1715.71 682.859 L1715.15 682.859 L1714.6 682.859 L1714.04 682.859 L1713.48 682.859 L1712.92 682.859 L1712.36 682.859 L1711.8 682.859 L1711.24 682.859 L1710.68 682.859 L1710.12 682.859 L1709.56 682.859 L1709 682.859 L1708.44 682.859 L1707.88 682.859 L1707.32 682.859 L1706.77 682.859 L1706.21 682.859 L1705.65 682.859 L1705.09 682.859 L1704.53 682.859 L1703.97 682.859 L1703.41 682.859 L1702.85 682.859 L1702.29 682.859 L1701.73 682.859 L1701.17 682.859 L1700.61 682.859 L1700.05 682.859 L1699.5 682.859 L1698.94 682.859 L1698.38 682.859 L1697.82 682.859 L1697.26 682.859 L1696.7 682.859 L1696.14 682.859 L1695.58 682.859 L1695.02 682.859 L1694.46 682.859 L1693.9 682.859 L1693.34 682.859 L1692.78 682.859 L1692.23 682.859 L1691.67 682.859 L1691.11 682.859 L1690.55 682.859 L1689.99 682.859 L1689.43 682.859 L1688.87 682.859 L1688.31 682.859 L1687.75 682.859 L1687.19 682.859 L1686.63 682.859 L1686.07 682.859 L1685.51 682.859 L1684.95 682.859 L1684.4 682.859 L1683.84 682.859 L1683.28 682.859 L1682.72 682.859 L1682.16 682.859 L1681.6 682.859 L1681.04 682.859 L1680.48 682.859 L1679.92 682.859 L1679.36 682.859 L1678.8 682.859 L1678.24 682.859 L1677.68 682.859 L1677.13 682.859 L1676.57 682.859 L1676.01 682.859 L1675.45 682.859 L1674.89 682.859 L1674.33 682.859 L1673.77 682.859 L1673.21 682.859 L1672.65 682.859 L1672.09 682.859 L1671.53 682.859 L1670.97 682.859 L1670.41 682.859 L1669.85 682.859 L1669.3 682.859 L1668.74 682.859 L1668.18 682.859 L1667.62 682.859 L1667.06 682.859 L1666.5 682.859 L1665.94 682.859 L1665.38 682.859 L1664.82 682.859 L1664.26 682.859 L1663.7 682.859 L1663.14 682.859 L1662.58 682.859 L1662.03 682.859 L1661.47 682.859 L1660.91 682.859 L1660.35 682.859 L1659.79 682.859 L1659.23 682.859 L1658.67 682.859 L1658.11 682.859 L1657.55 682.859 L1656.99 682.859 L1656.43 682.859 L1655.87 682.859 L1655.31 682.859 L1654.76 682.859 L1654.2 682.859 L1653.64 682.859 L1653.08 682.859 L1652.52 682.859 L1651.96 682.859 L1651.4 682.859 L1650.84 682.859 L1650.28 682.859 L1649.72 682.859 L1649.16 682.859 L1648.6 682.859 L1648.04 682.859 L1647.48 682.859 L1646.93 682.859 L1646.37 682.859 L1645.81 682.859 L1645.25 682.859 L1644.69 682.859 L1644.13 682.859 L1643.57 682.859 L1643.01 682.859 L1642.45 682.859 L1641.89 682.859 L1641.33 682.859 L1640.77 682.859 L1640.21 682.859 L1639.66 682.859 L1639.1 682.859 L1638.54 682.859 L1637.98 682.859 L1637.42 682.859 L1636.86 682.859 L1636.3 682.859 L1635.74 682.859 L1635.18 682.859 L1634.62 682.859 L1634.06 682.859 L1633.5 682.859 L1632.94 682.859 L1632.39 682.859 L1631.83 682.859 L1631.27 682.859 L1630.71 682.859 L1630.15 682.859 L1629.59 682.859 L1629.03 682.859 L1628.47 682.859 L1627.91 682.859 L1627.35 682.859 L1626.79 682.859 L1626.23 682.859 L1625.67 682.859 L1625.11 682.859 L1624.56 682.859 L1624 682.859 L1623.44 682.859 L1622.88 682.859 L1622.32 682.859 L1621.76 682.859 L1621.2 682.859 L1620.64 682.859 L1620.08 682.859 L1619.52 682.859 L1618.96 682.859 L1618.4 682.859 L1617.84 682.859 L1617.29 682.859 L1616.73 682.859 L1616.17 682.859 L1615.61 682.859 L1615.05 682.859 L1614.49 682.859 L1613.93 682.859 L1613.37 682.859 L1612.81 682.859 L1612.25 682.859 L1611.69 682.859 L1611.13 682.859 L1610.57 682.859 L1610.02 682.859 L1609.46 682.859 L1608.9 682.859 L1608.34 682.859 L1607.78 682.859 L1607.22 682.859 L1606.66 682.859 L1606.1 682.859 L1605.54 682.859 L1604.98 682.859 L1604.42 682.859 L1603.86 682.859 L1603.3 682.859 L1602.74 682.859 L1602.19 682.859 L1601.63 682.859 L1601.07 682.859 L1600.51 682.859 L1599.95 682.859 L1599.39 682.859 L1598.83 682.859 L1598.27 682.859 L1597.71 682.859 L1597.15 682.859 L1596.59 682.859 L1596.03 682.859 L1595.47 682.859 L1594.92 682.859 L1594.36 682.859 L1593.8 682.859 L1593.24 682.859 L1592.68 682.859 L1592.12 682.859 L1591.56 682.859 L1591 682.859 L1590.44 682.859 L1589.88 682.859 L1589.32 682.859 L1588.76 682.859 L1588.2 682.859 L1587.65 682.859 L1587.09 682.859 L1586.53 682.859 L1585.97 682.859 L1585.41 682.859 L1584.85 682.859 L1584.29 682.859 L1583.73 682.859 L1583.17 682.859 L1582.61 682.859 L1582.05 682.859 L1581.49 682.859 L1580.93 682.859 L1580.37 682.859 L1579.82 682.859 L1579.26 682.859 L1578.7 682.859 L1578.14 682.859 L1577.58 682.859 L1577.02 682.859 L1576.46 682.859 L1575.9 682.859 L1575.34 682.859 L1574.78 682.859 L1574.22 682.859 L1573.66 682.859 L1573.1 682.859 L1572.55 682.859 L1571.99 682.859 L1571.43 682.859 L1570.87 682.859 L1570.31 682.859 L1569.75 682.859 L1569.19 682.859 L1568.63 682.859 L1568.07 682.859 L1567.51 682.859 L1566.95 682.859 L1566.39 682.859 L1565.83 682.859 L1565.28 682.859 L1564.72 682.859 L1564.16 682.859 L1563.6 682.859 L1563.04 682.859 L1562.48 682.859 L1561.92 682.859 L1561.36 682.859 L1560.8 682.859 L1560.24 682.859 L1559.68 682.859 L1559.12 682.859 L1558.56 682.859 L1558 682.859 L1557.45 682.859 L1556.89 682.859 L1556.33 682.859 L1555.77 682.859 L1555.21 682.859 L1554.65 682.859 L1554.09 682.859 L1553.53 682.859 L1552.97 682.859 L1552.41 682.859 L1551.85 682.859 L1551.29 682.859 L1550.73 682.859 L1550.18 682.859 L1549.62 682.859 L1549.06 682.859 L1548.5 682.859 L1547.94 682.859 L1547.38 682.859 L1546.82 682.859 L1546.26 682.859 L1545.7 682.859 L1545.14 682.859 L1544.58 682.859 L1544.02 682.859 L1543.46 682.859 L1542.9 682.859 L1542.35 682.859 L1541.79 682.859 L1541.23 682.859 L1540.67 682.859 L1540.11 682.859 L1539.55 682.859 L1538.99 682.859 L1538.43 682.859 L1537.87 682.859 L1537.31 682.859 L1536.75 682.859 L1536.19 682.859 L1535.63 682.859 L1535.08 682.859 L1534.52 682.859 L1533.96 682.859 L1533.4 682.859 L1532.84 682.859 L1532.28 682.859 L1531.72 682.859 L1531.16 682.859 L1530.6 682.859 L1530.04 682.859 L1529.48 682.859 L1528.92 682.859 L1528.36 682.859 L1527.81 682.859 L1527.25 682.859 L1526.69 682.859 L1526.13 682.859 L1525.57 682.859 L1525.01 682.859 L1524.45 682.859 L1523.89 682.859 L1523.33 682.859 L1522.77 682.859 L1522.21 682.859 L1521.65 682.859 L1521.09 682.859 L1520.53 682.859 L1519.98 682.859 L1519.42 682.859 L1518.86 682.859 L1518.3 682.859 L1517.74 682.859 L1517.18 682.859 L1516.62 682.859 L1516.06 682.859 L1515.5 682.859 L1514.94 682.859 L1514.38 682.859 L1513.82 682.859 L1513.26 682.859 L1512.71 682.859 L1512.15 682.859 L1511.59 682.859 L1511.03 682.859 L1510.47 682.859 L1509.91 682.859 L1509.35 682.859 L1508.79 682.859 L1508.23 682.859 L1507.67 682.859 L1507.11 682.859 L1506.55 682.859 L1505.99 682.859 L1505.44 682.859 L1504.88 682.859 L1504.32 682.859 L1503.76 682.859 L1503.2 682.859 L1502.64 682.859 L1502.08 682.859 L1501.52 682.859 L1500.96 682.859 L1500.4 682.859 L1499.84 682.859 L1499.28 682.859 L1498.72 682.859 L1498.16 682.859 L1497.61 682.859 L1497.05 682.859 L1496.49 682.859 L1495.93 682.859 L1495.37 682.859 L1494.81 682.859 L1494.25 682.859 L1493.69 682.859 L1493.13 682.859 L1492.57 682.859 L1492.01 682.859 L1491.45 682.859 L1490.89 682.859 L1490.34 682.859 L1489.78 682.859 L1489.22 682.859 L1488.66 682.859 L1488.1 682.859 L1487.54 682.859 L1486.98 682.859 L1486.42 682.859 L1485.86 682.859 L1485.3 682.859 L1484.74 682.859 L1484.18 682.859 L1483.62 682.859 L1483.07 682.859 L1482.51 682.859 L1481.95 682.859 L1481.39 682.859 L1480.83 682.859 L1480.27 682.859 L1479.71 682.859 L1479.15 682.859 L1478.59 682.859 L1478.03 682.859 L1477.47 682.859 L1476.91 682.859 L1476.35 682.859 L1475.79 682.859 L1475.24 682.859 L1474.68 682.859 L1474.12 682.859 L1473.56 682.859 L1473 682.859 L1472.44 682.859 L1471.88 682.859 L1471.32 682.859 L1470.76 682.859 L1470.2 682.859 L1469.64 682.859 L1469.08 682.859 L1468.52 682.859 L1467.97 682.859 L1467.41 682.859 L1466.85 682.859 L1466.29 682.859 L1465.73 682.859 L1465.17 682.859 L1464.61 682.859 L1464.05 682.859 L1463.49 682.859 L1462.93 682.859 L1462.37 682.859 L1461.81 682.859 L1461.25 682.859 L1460.7 682.859 L1460.14 682.859 L1459.58 682.859 L1459.02 682.859 L1458.46 682.859 L1457.9 682.859 L1457.34 682.859 L1456.78 682.859 L1456.22 682.859 L1455.66 682.859 L1455.1 682.859 L1454.54 682.859 L1453.98 682.859 L1453.42 682.859 L1452.87 682.859 L1452.31 682.859 L1451.75 682.859 L1451.19 682.859 L1450.63 682.859 L1450.07 682.859 L1449.51 682.859 L1448.95 682.859 L1448.39 682.859 L1447.83 682.859 L1447.27 682.859 L1446.71 682.859 L1446.15 682.859 L1445.6 682.859 L1445.04 682.859 L1444.48 682.859 L1443.92 682.859 L1443.36 682.859 L1442.8 682.859 L1442.24 682.859 L1441.68 682.859 L1441.12 682.859 L1440.56 682.859 L1440 682.859 L1439.44 682.859 L1438.88 682.859 L1438.33 682.859 L1437.77 682.859 L1437.21 682.859 L1436.65 682.859 L1436.09 682.859 L1435.53 682.859 L1434.97 682.859 L1434.41 682.859 L1433.85 682.859 L1433.29 682.859 L1432.73 682.859 L1432.17 682.859 L1431.61 682.859 L1431.05 682.859 L1430.5 682.859 L1429.94 682.859 L1429.38 682.859 L1428.82 682.859 L1428.26 682.859 L1427.7 682.859 L1427.14 682.859 L1426.58 682.859 L1426.02 682.859 L1425.46 682.859 L1424.9 682.859 L1424.34 682.859 L1423.78 682.859 L1423.23 682.859 L1422.67 682.859 L1422.11 682.859 L1421.55 682.859 L1420.99 682.859 L1420.43 682.859 L1419.87 682.859 L1419.31 682.859 L1418.75 682.859 L1418.19 682.859 L1417.63 682.859 L1417.07 682.859 L1416.51 682.859 L1415.95 682.859 L1415.4 682.859 L1414.84 682.859 L1414.28 682.859 L1413.72 682.859 L1413.16 682.859 L1412.6 682.859 L1412.04 682.859 L1411.48 682.859 L1410.92 682.859 L1410.36 682.859 L1409.8 682.859 L1409.24 682.859 L1408.68 682.859 L1408.13 682.859 L1407.57 682.859 L1407.01 682.859 L1406.45 682.859 L1405.89 682.859 L1405.33 682.859 L1404.77 682.859 L1404.21 682.859 L1403.65 682.859 L1403.09 682.859 L1402.53 682.859 L1401.97 682.859 L1401.41 682.859 L1400.86 682.859 L1400.3 682.859 L1399.74 682.859 L1399.18 682.859 L1398.62 682.859 L1398.06 682.859 L1397.5 682.859 L1396.94 682.859 L1396.38 682.859 L1395.82 682.859 L1395.26 682.859 L1394.7 682.859 L1394.14 682.859 L1393.58 682.859 L1393.03 682.859 L1392.47 682.859 L1391.91 682.859 L1391.35 682.859 L1390.79 682.859 L1390.23 682.859 L1389.67 682.859 L1389.11 682.859 L1388.55 682.859 L1387.99 682.859 L1387.43 682.859 L1386.87 682.859 L1386.31 682.859 L1385.76 682.859 L1385.2 682.859 L1384.64 682.859 L1384.08 682.859 L1383.52 682.859 L1382.96 682.859 L1382.4 682.859 L1381.84 682.859 L1381.28 682.859 L1380.72 682.859 L1380.16 682.859 L1379.6 682.859 L1379.04 682.859 L1378.49 682.859 L1377.93 682.859 L1377.37 682.859 L1376.81 682.859 L1376.25 682.859 L1375.69 682.859 L1375.13 682.859 L1374.57 682.859 L1374.01 682.859 L1373.45 682.859 L1372.89 682.859 L1372.33 682.859 L1371.77 682.859 L1371.21 682.859 L1370.66 682.859 L1370.1 682.859 L1369.54 682.859 L1368.98 682.859 L1368.42 682.859 L1367.86 682.859 L1367.3 682.859 L1366.74 682.859 L1366.18 682.859 L1365.62 682.859 L1365.06 682.859 L1364.5 682.859 L1363.94 682.859 L1363.39 682.859 L1362.83 682.859 L1362.27 682.859 L1361.71 682.859 L1361.15 682.859 L1360.59 682.859 L1360.03 682.859 L1359.47 682.859 L1358.91 682.859 L1358.35 682.859 L1357.79 682.859 L1357.23 682.859 L1356.67 682.859 L1356.12 682.859 L1355.56 682.859 L1355 682.859 L1354.44 682.859 L1353.88 682.859 L1353.32 682.859 L1352.76 682.859 L1352.2 682.859 L1351.64 682.859 L1351.08 682.859 L1350.52 682.859 L1349.96 682.859 L1349.4 682.859 L1348.84 682.859 L1348.29 682.859 L1347.73 682.859 L1347.17 682.859 L1346.61 682.859 L1346.05 682.859 L1345.49 682.859 L1344.93 682.859 L1344.37 682.859 L1343.81 682.859 L1343.25 682.859 L1342.69 682.859 L1342.13 682.859 L1341.57 682.859 L1341.02 682.859 L1340.46 682.859 L1339.9 682.859 L1339.34 682.859 L1338.78 682.859 L1338.22 682.859 L1337.66 682.859 L1337.1 682.859 L1336.54 682.859 L1335.98 682.859 L1335.42 682.859 L1334.86 682.859 L1334.3 682.859 L1333.75 682.859 L1333.19 682.859 L1332.63 682.859 L1332.07 682.859 L1331.51 682.859 L1330.95 682.859 L1330.39 682.859 L1329.83 682.859 L1329.27 682.859 L1328.71 682.859 L1328.15 682.859 L1327.59 682.859 L1327.03 682.859 L1326.47 682.859 L1325.92 682.859 L1325.36 682.859 L1324.8 682.859 L1324.24 682.859 L1323.68 682.859 L1323.12 682.859 L1322.56 682.859 L1322 682.859 L1321.44 682.859 L1320.88 682.859 L1320.32 682.859 L1319.76 682.859 L1319.2 682.859 L1318.65 682.859 L1318.09 682.859 L1317.53 682.859 L1316.97 682.859 L1316.41 682.859 L1315.85 682.859 L1315.29 682.859 L1314.73 682.859 L1314.17 682.859 L1313.61 682.859 L1313.05 682.859 L1312.49 682.859 L1311.93 682.859 L1311.38 682.859 L1310.82 682.859 L1310.26 682.859 L1309.7 682.859 L1309.14 682.859 L1308.58 682.859 L1308.02 682.859 L1307.46 682.859 L1306.9 682.859 L1306.34 682.859 L1305.78 682.859 L1305.22 682.859 L1304.66 682.859 L1304.1 682.859 L1303.55 682.859 L1302.99 682.859 L1302.43 682.859 L1301.87 682.859 L1301.31 682.859 L1300.75 682.859 L1300.19 682.859 L1299.63 682.859 L1299.07 682.859 L1298.51 682.859 L1297.95 682.859 L1297.39 682.859 L1296.83 682.859 L1296.28 682.859 L1295.72 682.859 L1295.16 682.859 L1294.6 682.859 L1294.04 682.859 L1293.48 682.859 L1292.92 682.859 L1292.36 682.859 L1291.8 682.859 L1291.24 682.859 L1290.68 682.859 L1290.12 682.859 L1289.56 682.859 L1289 682.859 L1288.45 682.859 L1287.89 682.859 L1287.33 682.859 L1286.77 682.859 L1286.21 682.859 L1285.65 682.859 L1285.09 682.859 L1284.53 682.859 L1283.97 682.859 L1283.41 682.859 L1282.85 682.859 L1282.29 682.859 L1281.73 682.859 L1281.18 682.859 L1280.62 682.859 L1280.06 682.859 L1279.5 682.859 L1278.94 682.859 L1278.38 682.859 L1277.82 682.859 L1277.26 682.859 L1276.7 682.859 L1276.14 682.859 L1275.58 682.859 L1275.02 682.859 L1274.46 682.859 L1273.91 682.859 L1273.35 682.859 L1272.79 682.859 L1272.23 682.859 L1271.67 682.859 L1271.11 682.859 L1270.55 682.859 L1269.99 682.859 L1269.43 682.859 L1268.87 682.859 L1268.31 682.859 L1267.75 682.859 L1267.19 682.859 L1266.63 682.859 L1266.08 682.859 L1265.52 682.859 L1264.96 682.859 L1264.4 682.859 L1263.84 682.859 L1263.28 682.859 L1262.72 682.859 L1262.16 682.859 L1261.6 682.859 L1261.04 682.859 L1260.48 682.859 L1259.92 682.859 L1259.36 682.859 L1258.81 682.859 L1258.25 682.859 L1257.69 682.859 L1257.13 682.859 L1256.57 682.859 L1256.01 682.859 L1255.45 682.859 L1254.89 682.859 L1254.33 682.859 L1253.77 682.859 L1253.21 682.859 L1252.65 682.859 L1252.09 682.859 L1251.54 682.859 L1250.98 682.859 L1250.42 682.859 L1249.86 682.859 L1249.3 682.859 L1248.74 682.859 L1248.18 682.859 L1247.62 682.859 L1247.06 682.859 L1246.5 682.859 L1245.94 682.859 L1245.38 682.859 L1244.82 682.859 L1244.26 682.859 L1243.71 682.859 L1243.15 682.859 L1242.59 682.859 L1242.03 682.859 L1241.47 682.859 L1240.91 682.859 L1240.35 682.859 L1239.79 682.859 L1239.23 682.859 L1238.67 682.859 L1238.11 682.859 L1237.55 682.859 L1236.99 682.859 L1236.44 682.859 L1235.88 682.859 L1235.32 682.859 L1234.76 682.859 L1234.2 682.859 L1233.64 682.859 L1233.08 682.859 L1232.52 682.859 L1231.96 682.859 L1231.4 682.859 L1230.84 682.859 L1230.28 682.859 L1229.72 682.859 L1229.17 682.859 L1228.61 682.859 L1228.05 682.859 L1227.49 682.859 L1226.93 682.859 L1226.37 682.859 L1225.81 682.859 L1225.25 682.859 L1224.69 682.859 L1224.13 682.859 L1223.57 682.859 L1223.01 682.859 L1222.45 682.859 L1221.89 682.859 L1221.34 682.859 L1220.78 682.859 L1220.22 682.859 L1219.66 682.859 L1219.1 682.859 L1218.54 682.859 L1217.98 682.859 L1217.42 682.859 L1216.86 682.859 L1216.3 682.859 L1215.74 682.859 L1215.18 682.859 L1214.62 682.859 L1214.07 682.859 L1213.51 682.859 L1212.95 682.859 L1212.39 682.859 L1211.83 682.859 L1211.27 682.859 L1210.71 682.859 L1210.15 682.859 L1209.59 682.859 L1209.03 682.859 L1208.47 682.859 L1207.91 682.859 L1207.35 682.859 L1206.8 682.859 L1206.24 682.859 L1205.68 682.859 L1205.12 682.859 L1204.56 682.859 L1204 682.859 L1203.44 682.859 L1202.88 682.859 L1202.32 682.859 L1201.76 682.859 L1201.2 682.859 L1200.64 682.859 L1200.08 682.859 L1199.52 682.859 L1198.97 682.859 L1198.41 682.859 L1197.85 682.859 L1197.29 682.859 L1196.73 682.859 L1196.17 682.859 L1195.61 682.859 L1195.05 682.859 L1194.49 682.859 L1193.93 682.859 L1193.37 682.859 L1192.81 682.859 L1192.25 682.859 L1191.7 682.859 L1191.14 682.859 L1190.58 682.859 L1190.02 682.859 L1189.46 682.859 L1188.9 682.859 L1188.34 682.859 L1187.78 682.859 L1187.22 682.859 L1186.66 682.859 L1186.1 682.859 L1185.54 682.859 L1184.98 682.859 L1184.43 682.859 L1183.87 682.859 L1183.31 682.859 L1182.75 682.859 L1182.19 682.859 L1181.63 682.859 L1181.07 682.859 L1180.51 682.859 L1179.95 682.859 L1179.39 682.859 L1178.83 682.859 L1178.27 682.859 L1177.71 682.859 L1177.15 682.859 L1176.6 682.859 L1176.04 682.859 L1175.48 682.859 L1174.92 682.859 L1174.36 682.859 L1173.8 682.859 L1173.24 682.859 L1172.68 682.859 L1172.12 682.859 L1171.56 682.859 L1171 682.859 L1170.44 682.859 L1169.88 682.859 L1169.33 682.859 L1168.77 682.859 L1168.21 682.859 L1167.65 682.859 L1167.09 682.859 L1166.53 682.859 L1165.97 682.859 L1165.41 682.859 L1164.85 682.859 L1164.29 682.859 L1163.73 682.859 L1163.17 682.859 L1162.61 682.859 L1162.05 682.859 L1161.5 682.859 L1160.94 682.859 L1160.38 682.859 L1159.82 682.859 L1159.26 682.859 L1158.7 682.859 L1158.14 682.859 L1157.58 682.859 L1157.02 682.859 L1156.46 682.859 L1155.9 682.859 L1155.34 682.859 L1154.78 682.859 L1154.23 682.859 L1153.67 682.859 L1153.11 682.859 L1152.55 682.859 L1151.99 682.859 L1151.43 682.859 L1150.87 682.859 L1150.31 682.859 L1149.75 682.859 L1149.19 682.859 L1148.63 682.859 L1148.07 682.859 L1147.51 682.859 L1146.96 682.859 L1146.4 682.859 L1145.84 682.859 L1145.28 682.859 L1144.72 682.859 L1144.16 682.859 L1143.6 682.859 L1143.04 682.859 L1142.48 682.859 L1141.92 682.859 L1141.36 682.859 L1140.8 682.859 L1140.24 682.859 L1139.68 682.859 L1139.13 682.859 L1138.57 682.859 L1138.01 682.859 L1137.45 682.859 L1136.89 682.859 L1136.33 682.859 L1135.77 682.859 L1135.21 682.859 L1134.65 682.859 L1134.09 682.859 L1133.53 682.859 L1132.97 682.859 L1132.41 682.859 L1131.86 682.859 L1131.3 682.859 L1130.74 682.859 L1130.18 682.859 L1129.62 682.859 L1129.06 682.859 L1128.5 682.859 L1127.94 682.859 L1127.38 682.859 L1126.82 682.859 L1126.26 682.859 L1125.7 682.859 L1125.14 682.859 L1124.59 682.859 L1124.03 682.859 L1123.47 682.859 L1122.91 682.859 L1122.35 682.859 L1121.79 682.859 L1121.23 682.859 L1120.67 682.859 L1120.11 682.859 L1119.55 682.859 L1118.99 682.859 L1118.43 682.859 L1117.87 682.859 L1117.31 682.859 L1116.76 682.859 L1116.2 682.859 L1115.64 682.859 L1115.08 682.859 L1114.52 682.859 L1113.96 682.859 L1113.4 682.859 L1112.84 682.859 L1112.28 682.859 L1111.72 682.859 L1111.16 682.859 L1110.6 682.859 L1110.04 682.859 L1109.49 682.859 L1108.93 682.859 L1108.37 682.859 L1107.81 682.859 L1107.25 682.859 L1106.69 682.859 L1106.13 682.859 L1105.57 682.859 L1105.01 682.859 L1104.45 682.859 L1103.89 682.859 L1103.33 682.859 L1102.77 682.859 L1102.22 682.859 L1101.66 682.859 L1101.1 682.859 L1100.54 682.859 L1099.98 682.859 L1099.42 682.859 L1098.86 682.859 L1098.3 682.859 L1097.74 682.859 L1097.18 682.859 L1096.62 682.859 L1096.06 682.859 L1095.5 682.859 L1094.94 682.859 L1094.39 682.859 L1093.83 682.859 L1093.27 682.859 L1092.71 682.859 L1092.15 682.859 L1091.59 682.859 L1091.03 682.859 L1090.47 682.859 L1089.91 682.859 L1089.35 682.859 L1088.79 682.859 L1088.23 682.859 L1087.67 682.859 L1087.12 682.859 L1086.56 682.859 L1086 682.859 L1085.44 682.859 L1084.88 682.859 L1084.32 682.859 L1083.76 682.859 L1083.2 682.859 L1082.64 682.859 L1082.08 682.859 L1081.52 682.859 L1080.96 682.859 L1080.4 682.859 L1079.85 682.859 L1079.29 682.859 L1078.73 682.859 L1078.17 682.859 L1077.61 682.859 L1077.05 682.859 L1076.49 682.859 L1075.93 682.859 L1075.37 682.859 L1074.81 682.859 L1074.25 682.859 L1073.69 682.859 L1073.13 682.859 L1072.57 682.859 L1072.02 682.859 L1071.46 682.859 L1070.9 682.859 L1070.34 682.859 L1069.78 682.859 L1069.22 682.859 L1068.66 682.859 L1068.1 682.859 L1067.54 682.859 L1066.98 682.859 L1066.42 682.859 L1065.86 682.859 L1065.3 682.859 L1064.75 682.859 L1064.19 682.859 L1063.63 682.859 L1063.07 682.859 L1062.51 682.859 L1061.95 682.859 L1061.39 682.859 L1060.83 682.859 L1060.27 682.859 L1059.71 682.859 L1059.15 682.859 L1058.59 682.859 L1058.03 682.859 L1057.48 682.859 L1056.92 682.859 L1056.36 682.859 L1055.8 682.859 L1055.24 682.859 L1054.68 682.859 L1054.12 682.859 L1053.56 682.859 L1053 682.859 L1052.44 682.859 L1051.88 682.859 L1051.32 682.859 L1050.76 682.859 L1050.2 682.859 L1049.65 682.859 L1049.09 682.859 L1048.53 682.859 L1047.97 682.859 L1047.41 682.859 L1046.85 682.859 L1046.29 682.859 L1045.73 682.859 L1045.17 682.859 L1044.61 682.859 L1044.05 682.859 L1043.49 682.859 L1042.93 682.859 L1042.38 682.859 L1041.82 682.859 L1041.26 682.859 L1040.7 682.859 L1040.14 682.859 L1039.58 682.859 L1039.02 682.859 L1038.46 682.859 L1037.9 682.859 L1037.34 682.859 L1036.78 682.859 L1036.22 682.859 L1035.66 682.859 L1035.1 682.859 L1034.55 682.859 L1033.99 682.859 L1033.43 682.859 L1032.87 682.859 L1032.31 682.859 L1031.75 682.859 L1031.19 682.859 L1030.63 682.859 L1030.07 682.859 L1029.51 682.859 L1028.95 682.859 L1028.39 682.859 L1027.83 682.859 L1027.28 682.859 L1026.72 682.859 L1026.16 682.859 L1025.6 682.859 L1025.04 682.859 L1024.48 682.859 L1023.92 682.859 L1023.36 682.859 L1022.8 682.859 L1022.24 682.859 L1021.68 682.859 L1021.12 682.859 L1020.56 682.859 L1020.01 682.859 L1019.45 682.859 L1018.89 682.859 L1018.33 682.859 L1017.77 682.859 L1017.21 682.859 L1016.65 682.859 L1016.09 682.859 L1015.53 682.859 L1014.97 682.859 L1014.41 682.859 L1013.85 682.859 L1013.29 682.859 L1012.73 682.859 L1012.18 682.859 L1011.62 682.859 L1011.06 682.859 L1010.5 682.859 L1009.94 682.859 L1009.38 682.859 L1008.82 682.859 L1008.26 682.859 L1007.7 682.859 L1007.14 682.859 L1006.58 682.859 L1006.02 682.859 L1005.46 682.859 L1004.91 682.859 L1004.35 682.859 L1003.79 682.859 L1003.23 682.859 L1002.67 682.859 L1002.11 682.859 L1001.55 682.859 L1000.99 682.859 L1000.43 682.859 L999.872 682.859 L999.313 682.859 L998.754 682.859 L998.194 682.859 L997.635 682.859 L997.076 682.859 L996.517 682.859 L995.957 682.859 L995.398 682.859 L994.839 682.859 L994.28 682.859 L993.72 682.859 L993.161 682.859 L992.602 682.859 L992.043 682.859 L991.483 682.859 L990.924 682.859 L990.365 682.859 L989.806 682.859 L989.246 682.859 L988.687 682.859 L988.128 682.859 L987.569 682.859 L987.009 682.859 L986.45 682.859 L985.891 682.859 L985.332 682.859 L984.772 682.859 L984.213 682.859 L983.654 682.859 L983.095 682.859 L982.535 682.859 L981.976 682.859 L981.417 682.859 L980.858 682.859 L980.298 682.859 L979.739 682.859 L979.18 682.859 L978.621 682.859 L978.061 682.859 L977.502 682.859 L976.943 682.859 L976.384 682.859 L975.824 682.859 L975.265 682.859 L974.706 682.859 L974.147 682.859 L973.587 682.859 L973.028 682.859 L972.469 682.859 L971.91 682.859 L971.35 682.859 L970.791 682.859 L970.232 682.859 L969.673 682.859 L969.113 682.859 L968.554 682.859 L967.995 682.859 L967.436 682.859 L966.876 682.859 L966.317 682.859 L965.758 682.859 L965.199 682.859 L964.639 682.859 L964.08 682.859 L963.521 682.859 L962.962 682.859 L962.402 682.859 L961.843 682.859 L961.284 682.859 L960.725 682.859 L960.165 682.859 L959.606 682.859 L959.047 682.859 L958.488 682.859 L957.928 682.859 L957.369 682.859 L956.81 682.859 L956.251 682.859 L955.691 682.859 L955.132 682.859 L954.573 682.859 L954.014 682.859 L953.454 682.859 L952.895 682.859 L952.336 682.859 L951.777 682.859 L951.217 682.859 L950.658 682.859 L950.099 682.859 L949.54 682.859 L948.98 682.859 L948.421 682.859 L947.862 682.859 L947.303 682.859 L946.743 682.859 L946.184 682.859 L945.625 682.859 L945.066 682.859 L944.506 682.859 L943.947 682.859 L943.388 682.859 L942.829 682.859 L942.269 682.859 L941.71 682.859 L941.151 682.859 L940.592 682.859 L940.032 682.859 L939.473 682.859 L938.914 682.859 L938.355 682.859 L937.795 682.859 L937.236 682.859 L936.677 682.859 L936.118 682.859 L935.558 682.859 L934.999 682.859 L934.44 682.859 L933.881 682.859 L933.321 682.859 L932.762 682.859 L932.203 682.859 L931.644 682.859 L931.084 682.859 L930.525 682.859 L929.966 682.859 L929.406 682.859 L928.847 682.859 L928.288 682.859 L927.729 682.859 L927.169 682.859 L926.61 682.859 L926.051 682.859 L925.492 682.859 L924.932 682.859 L924.373 682.859 L923.814 682.859 L923.255 682.859 L922.695 682.859 L922.136 682.859 L921.577 682.859 L921.018 682.859 L920.458 682.859 L919.899 682.859 L919.34 682.859 L918.781 682.859 L918.221 682.859 L917.662 682.859 L917.103 682.859 L916.544 682.859 L915.984 682.859 L915.425 682.859 L914.866 682.859 L914.307 682.859 L913.747 682.859 L913.188 682.859 L912.629 682.859 L912.07 682.859 L911.51 682.859 L910.951 682.859 L910.392 682.859 L909.833 682.859 L909.273 682.859 L908.714 682.859 L908.155 682.859 L907.596 682.859 L907.036 682.859 L906.477 682.859 L905.918 682.859 L905.359 682.859 L904.799 682.859 L904.24 682.859 L903.681 682.859 L903.122 682.859 L902.562 682.859 L902.003 682.859 L901.444 682.859 L900.885 682.859 L900.325 682.859 L899.766 682.859 L899.207 682.859 L898.648 682.859 L898.088 682.859 L897.529 682.859 L896.97 682.859 L896.411 682.859 L895.851 682.859 L895.292 682.859 L894.733 682.859 L894.174 682.859 L893.614 682.859 L893.055 682.859 L892.496 682.859 L891.937 682.859 L891.377 682.859 L890.818 682.859 L890.259 682.859 L889.7 682.859 L889.14 682.859 L888.581 682.859 L888.022 682.859 L887.463 682.859 L886.903 682.859 L886.344 682.859 L885.785 682.859 L885.226 682.859 L884.666 682.859 L884.107 682.859 L883.548 682.859 L882.989 682.859 L882.429 682.859 L881.87 682.859 L881.311 682.859 L880.752 682.859 L880.192 682.859 L879.633 682.859 L879.074 682.859 L878.515 682.859 L877.955 682.859 L877.396 682.859 L876.837 682.859 L876.278 682.859 L875.718 682.859 L875.159 682.859 L874.6 682.859 L874.041 682.859 L873.481 682.859 L872.922 682.859 L872.363 682.859 L871.804 682.859 L871.244 682.859 L870.685 682.859 L870.126 682.859 L869.567 682.859 L869.007 682.859 L868.448 682.859 L867.889 682.859 L867.33 682.859 L866.77 682.859 L866.211 682.859 L865.652 682.859 L865.093 682.859 L864.533 682.859 L863.974 682.859 L863.415 682.859 L862.856 682.859 L862.296 682.859 L861.737 682.859 L861.178 682.859 L860.619 682.859 L860.059 682.859 L859.5 682.859 L858.941 682.859 L858.382 682.859 L857.822 682.859 L857.263 682.859 L856.704 682.859 L856.145 682.859 L855.585 682.859 L855.026 682.859 L854.467 682.859 L853.908 682.859 L853.348 682.859 L852.789 682.859 L852.23 682.859 L851.671 682.859 L851.111 682.859 L850.552 682.859 L849.993 682.859 L849.434 682.859 L848.874 682.859 L848.315 682.859 L847.756 682.859 L847.197 682.859 L846.637 682.859 L846.078 682.859 L845.519 682.859 L844.96 682.859 L844.4 682.859 L843.841 682.859 L843.282 682.859 L842.723 682.859 L842.163 682.859 L841.604 682.859 L841.045 682.859 L840.486 682.859 L839.926 682.859 L839.367 682.859 L838.808 682.859 L838.249 682.859 L837.689 682.859 L837.13 682.859 L836.571 682.859 L836.012 682.859 L835.452 682.859 L834.893 682.859 L834.334 682.859 L833.775 682.859 L833.215 682.859 L832.656 682.859 L832.097 682.859 L831.538 682.859 L830.978 682.859 L830.419 682.859 L829.86 682.859 L829.301 682.859 L828.741 682.859 L828.182 682.859 L827.623 682.859 L827.064 682.859 L826.504 682.859 L825.945 682.859 L825.386 682.859 L824.827 682.859 L824.267 682.859 L823.708 682.859 L823.149 682.859 L822.59 682.859 L822.03 682.859 L821.471 682.859 L820.912 682.859 L820.353 682.859 L819.793 682.859 L819.234 682.859 L818.675 682.859 L818.116 682.859 L817.556 682.859 L816.997 682.859 L816.438 682.859 L815.879 682.859 L815.319 682.859 L814.76 682.859 L814.201 682.859 L813.642 682.859 L813.082 682.859 L812.523 682.859 L811.964 682.859 L811.405 682.859 L810.845 682.859 L810.286 682.859 L809.727 682.859 L809.168 682.859 L808.608 682.859 L808.049 682.859 L807.49 682.859 L806.931 682.859 L806.371 682.859 L805.812 682.859 L805.253 682.859 L804.693 682.859 L804.134 682.859 L803.575 682.859 L803.016 682.859 L802.456 682.859 L801.897 682.859 L801.338 682.859 L800.779 682.859 L800.219 682.859 L799.66 682.859 L799.101 682.859 L798.542 682.859 L797.982 682.859 L797.423 682.859 L796.864 682.859 L796.305 682.859 L795.745 682.859 L795.186 682.859 L794.627 682.859 L794.068 682.859 L793.508 682.859 L792.949 682.859 L792.39 682.859 L791.831 682.859 L791.271 682.859 L790.712 682.859 L790.153 682.859 L789.594 682.859 L789.034 682.859 L788.475 682.859 L787.916 682.859 L787.357 682.859 L786.797 682.859 L786.238 682.859 L785.679 682.859 L785.12 682.859 L784.56 682.859 L784.001 682.859 L783.442 682.859 L782.883 682.859 L782.323 682.859 L781.764 682.859 L781.205 682.859 L780.646 682.859 L780.086 682.859 L779.527 682.859 L778.968 682.859 L778.409 682.859 L777.849 682.859 L777.29 682.859 L776.731 682.859 L776.172 682.859 L775.612 682.859 L775.053 682.859 L774.494 682.859 L773.935 682.859 L773.375 682.859 L772.816 682.859 L772.257 682.859 L771.698 682.859 L771.138 682.859 L770.579 682.859 L770.02 682.859 L769.461 682.859 L768.901 682.859 L768.342 682.859 L767.783 682.859 L767.224 682.859 L766.664 682.859 L766.105 682.859 L765.546 682.859 L764.987 682.859 L764.427 682.859 L763.868 682.859 L763.309 682.859 L762.75 682.859 L762.19 682.859 L761.631 682.859 L761.072 682.859 L760.513 682.859 L759.953 682.859 L759.394 682.859 L758.835 682.859 L758.276 682.859 L757.716 682.859 L757.157 682.859 L756.598 682.859 L756.039 682.859 L755.479 682.859 L754.92 682.859 L754.361 682.859 L753.802 682.859 L753.242 682.859 L752.683 682.859 L752.124 682.859 L751.565 682.859 L751.005 682.859 L750.446 682.859 L749.887 682.859 L749.328 682.859 L748.768 682.859 L748.209 682.859 L747.65 682.859 L747.091 682.859 L746.531 682.859 L745.972 682.859 L745.413 682.859 L744.854 682.859 L744.294 682.859 L743.735 682.859 L743.176 682.859 L742.617 682.859 L742.057 682.859 L741.498 682.859 L740.939 682.859 L740.38 682.859 L739.82 682.859 L739.261 682.859 L738.702 682.859 L738.143 682.859 L737.583 682.859 L737.024 682.859 L736.465 682.859 L735.906 682.859 L735.346 682.859 L734.787 682.859 L734.228 682.859 L733.669 682.859 L733.109 682.859 L732.55 682.859 L731.991 682.859 L731.432 682.859 L730.872 682.859 L730.313 682.859 L729.754 682.859 L729.195 682.859 L728.635 682.859 L728.076 682.859 L727.517 682.859 L726.958 682.859 L726.398 682.859 L725.839 682.859 L725.28 682.859 L724.721 682.859 L724.161 682.859 L723.602 682.859 L723.043 682.859 L722.484 682.859 L721.924 682.859 L721.365 682.859 L720.806 682.859 L720.247 682.859  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.018 720.806,686.018 721.365,686.018 721.924,686.018 722.484,686.018 723.043,686.018 723.602,686.018 724.161,686.018 724.721,686.018 725.28,686.018 725.839,686.018 726.398,686.018 726.958,686.018 727.517,686.018 728.076,686.018 728.635,686.018 729.195,686.018 729.754,686.018 730.313,686.018 730.872,686.018 731.432,686.018 731.991,686.018 732.55,686.018 733.109,686.018 733.669,686.018 734.228,686.018 734.787,686.018 735.346,686.018 735.906,686.018 736.465,686.018 737.024,686.018 737.583,686.018 738.143,686.018 738.702,686.018 739.261,686.018 739.82,686.018 740.38,686.018 740.939,686.018 741.498,686.018 742.057,686.018 742.617,686.018 743.176,686.018 743.735,686.018 744.294,686.018 744.854,686.018 745.413,686.018 745.972,686.018 746.531,686.018 747.091,686.018 747.65,686.018 748.209,686.018 748.768,686.018 749.328,686.018 749.887,686.018 750.446,686.018 751.005,686.018 751.565,686.018 752.124,686.018 752.683,686.018 753.242,686.018 753.802,686.018 754.361,686.018 754.92,686.018 755.479,686.018 756.039,686.018 756.598,686.018 757.157,686.018 757.716,686.018 758.276,686.018 758.835,686.018 759.394,686.018 759.953,686.018 760.513,686.018 761.072,686.018 761.631,686.018 762.19,686.018 762.75,686.018 763.309,686.018 763.868,686.018 764.427,686.018 764.987,686.018 765.546,686.018 766.105,686.018 766.664,686.018 767.224,686.018 767.783,686.018 768.342,686.018 768.901,686.018 769.461,686.018 770.02,686.018 770.579,686.018 771.138,686.018 771.698,686.018 772.257,686.018 772.816,686.018 773.375,686.018 773.935,686.018 774.494,686.018 775.053,686.018 775.612,686.018 776.172,686.018 776.731,686.018 777.29,686.018 777.849,686.018 778.409,686.018 778.968,686.018 779.527,686.018 780.086,686.018 780.646,686.018 781.205,686.018 781.764,686.018 782.323,686.018 782.883,686.018 783.442,686.018 784.001,686.018 784.56,686.018 785.12,686.018 785.679,686.018 786.238,686.018 786.797,686.018 787.357,686.018 787.916,686.018 788.475,686.018 789.034,686.018 789.594,686.018 790.153,686.018 790.712,686.018 791.271,686.018 791.831,686.018 792.39,686.018 792.949,686.018 793.508,686.018 794.068,686.018 794.627,686.018 795.186,686.018 795.745,686.018 796.305,686.018 796.864,686.018 797.423,686.018 797.982,686.018 798.542,686.018 799.101,686.018 799.66,686.018 800.219,686.018 800.779,686.018 801.338,686.018 801.897,686.018 802.456,686.018 803.016,686.018 803.575,686.018 804.134,686.018 804.693,686.018 805.253,686.018 805.812,686.018 806.371,686.018 806.931,686.018 807.49,686.018 808.049,686.018 808.608,686.018 809.168,686.018 809.727,686.018 810.286,686.018 810.845,686.018 811.405,686.018 811.964,686.018 812.523,686.018 813.082,686.018 813.642,686.018 814.201,686.018 814.76,686.018 815.319,686.018 815.879,686.018 816.438,686.018 816.997,686.018 817.556,686.018 818.116,686.018 818.675,686.018 819.234,686.018 819.793,686.018 820.353,686.018 820.912,686.018 821.471,686.018 822.03,686.018 822.59,686.018 823.149,686.018 823.708,686.018 824.267,686.018 824.827,686.018 825.386,686.018 825.945,686.018 826.504,686.018 827.064,686.018 827.623,686.018 828.182,686.018 828.741,686.018 829.301,686.018 829.86,686.018 830.419,686.018 830.978,686.018 831.538,686.018 832.097,686.018 832.656,686.018 833.215,686.018 833.775,686.018 834.334,686.018 834.893,686.018 835.452,686.018 836.012,686.018 836.571,686.018 837.13,686.018 837.689,686.018 838.249,686.018 838.808,686.018 839.367,686.018 839.926,686.018 840.486,686.018 841.045,686.018 841.604,686.018 842.163,686.018 842.723,686.018 843.282,686.018 843.841,686.018 844.4,686.018 844.96,686.018 845.519,686.018 846.078,686.018 846.637,686.018 847.197,686.018 847.756,686.018 848.315,686.018 848.874,686.018 849.434,686.018 849.993,686.018 850.552,686.018 851.111,686.018 851.671,686.018 852.23,686.018 852.789,686.018 853.348,686.018 853.908,686.018 854.467,686.018 855.026,686.018 855.585,686.018 856.145,686.018 856.704,686.018 857.263,686.018 857.822,686.018 858.382,686.018 858.941,686.018 859.5,686.018 860.059,686.018 860.619,686.018 861.178,686.018 861.737,686.018 862.296,686.018 862.856,686.018 863.415,686.018 863.974,686.018 864.533,686.018 865.093,686.018 865.652,686.018 866.211,686.018 866.77,686.018 867.33,686.018 867.889,686.018 868.448,686.018 869.007,686.018 869.567,686.018 870.126,686.018 870.685,686.018 871.244,686.018 871.804,686.018 872.363,686.018 872.922,686.018 873.481,686.018 874.041,686.018 874.6,686.018 875.159,686.018 875.718,686.018 876.278,686.018 876.837,686.018 877.396,686.018 877.955,686.018 878.515,686.018 879.074,686.018 879.633,686.018 880.192,686.018 880.752,686.018 881.311,686.018 881.87,686.018 882.429,686.018 882.989,686.018 883.548,686.018 884.107,686.018 884.666,686.018 885.226,686.018 885.785,686.018 886.344,686.018 886.903,686.018 887.463,686.018 888.022,686.018 888.581,686.018 889.14,686.018 889.7,686.018 890.259,686.018 890.818,686.018 891.377,686.018 891.937,686.018 892.496,686.018 893.055,686.018 893.614,686.018 894.174,686.018 894.733,686.018 895.292,686.018 895.851,686.018 896.411,686.018 896.97,686.018 897.529,686.018 898.088,686.018 898.648,686.018 899.207,686.018 899.766,686.018 900.325,686.018 900.885,686.018 901.444,686.018 902.003,686.018 902.562,686.018 903.122,686.018 903.681,686.018 904.24,686.018 904.799,686.018 905.359,686.018 905.918,686.018 906.477,686.018 907.036,686.018 907.596,686.018 908.155,686.018 908.714,686.018 909.273,686.018 909.833,686.018 910.392,686.018 910.951,686.018 911.51,686.018 912.07,686.018 912.629,686.018 913.188,686.018 913.747,686.018 914.307,686.018 914.866,686.018 915.425,686.018 915.984,686.018 916.544,686.018 917.103,686.018 917.662,686.018 918.221,686.018 918.781,686.018 919.34,686.018 919.899,686.018 920.458,686.018 921.018,686.018 921.577,686.018 922.136,686.018 922.695,686.018 923.255,686.018 923.814,686.018 924.373,686.018 924.932,686.018 925.492,686.018 926.051,686.018 926.61,686.018 927.169,686.018 927.729,686.018 928.288,686.018 928.847,686.018 929.406,686.018 929.966,686.018 930.525,686.018 931.084,686.018 931.644,686.018 932.203,686.018 932.762,686.018 933.321,686.018 933.881,686.018 934.44,686.018 934.999,686.018 935.558,686.018 936.118,686.018 936.677,686.018 937.236,686.018 937.795,686.018 938.355,686.018 938.914,686.018 939.473,686.018 940.032,686.018 940.592,686.018 941.151,686.018 941.71,686.018 942.269,686.018 942.829,686.018 943.388,686.018 943.947,686.018 944.506,686.018 945.066,686.018 945.625,686.018 946.184,686.018 946.743,686.018 947.303,686.018 947.862,686.018 948.421,686.018 948.98,686.018 949.54,686.018 950.099,686.018 950.658,686.018 951.217,686.018 951.777,686.018 952.336,686.018 952.895,686.018 953.454,686.018 954.014,686.018 954.573,686.018 955.132,686.018 955.691,686.018 956.251,686.018 956.81,686.018 957.369,686.018 957.928,686.018 958.488,686.018 959.047,686.018 959.606,686.018 960.165,686.018 960.725,686.018 961.284,686.018 961.843,686.018 962.402,686.018 962.962,686.018 963.521,686.018 964.08,686.018 964.639,686.018 965.199,686.018 965.758,686.018 966.317,686.018 966.876,686.018 967.436,686.018 967.995,686.018 968.554,686.018 969.113,686.018 969.673,686.018 970.232,686.018 970.791,686.018 971.35,686.018 971.91,686.018 972.469,686.018 973.028,686.018 973.587,686.018 974.147,686.018 974.706,686.018 975.265,686.018 975.824,686.018 976.384,686.018 976.943,686.018 977.502,686.018 978.061,686.018 978.621,686.018 979.18,686.018 979.739,686.018 980.298,686.018 980.858,686.018 981.417,686.018 981.976,686.018 982.535,686.018 983.095,686.018 983.654,686.018 984.213,686.018 984.772,686.018 985.332,686.018 985.891,686.018 986.45,686.018 987.009,686.018 987.569,686.018 988.128,686.018 988.687,686.018 989.246,686.018 989.806,686.018 990.365,686.018 990.924,686.018 991.483,686.018 992.043,686.018 992.602,686.018 993.161,686.018 993.72,686.018 994.28,686.018 994.839,686.018 995.398,686.018 995.957,686.018 996.517,686.018 997.076,686.018 997.635,686.018 998.194,686.018 998.754,686.018 999.313,686.018 999.872,686.018 1000.43,686.018 1000.99,686.018 1001.55,686.018 1002.11,686.018 1002.67,686.018 1003.23,686.018 1003.79,686.018 1004.35,686.018 1004.91,686.018 1005.46,686.018 1006.02,686.018 1006.58,686.018 1007.14,686.018 1007.7,686.018 1008.26,686.018 1008.82,686.018 1009.38,686.018 1009.94,686.018 1010.5,686.018 1011.06,686.018 1011.62,686.018 1012.18,686.018 1012.73,686.018 1013.29,686.018 1013.85,686.018 1014.41,686.018 1014.97,686.018 1015.53,686.018 1016.09,686.018 1016.65,686.018 1017.21,686.018 1017.77,686.018 1018.33,686.018 1018.89,686.018 1019.45,686.018 1020.01,686.018 1020.56,686.018 1021.12,686.018 1021.68,686.018 1022.24,686.018 1022.8,686.018 1023.36,686.018 1023.92,686.018 1024.48,686.018 1025.04,686.018 1025.6,686.018 1026.16,686.018 1026.72,686.018 1027.28,686.018 1027.83,686.018 1028.39,686.018 1028.95,686.018 1029.51,686.018 1030.07,686.018 1030.63,686.018 1031.19,686.018 1031.75,686.018 1032.31,686.018 1032.87,686.018 1033.43,686.018 1033.99,686.018 1034.55,686.018 1035.1,686.018 1035.66,686.018 1036.22,686.018 1036.78,686.018 1037.34,686.018 1037.9,686.018 1038.46,686.018 1039.02,686.018 1039.58,686.018 1040.14,686.018 1040.7,686.018 1041.26,686.018 1041.82,686.018 1042.38,686.018 1042.93,686.018 1043.49,686.018 1044.05,686.018 1044.61,686.018 1045.17,686.018 1045.73,686.018 1046.29,686.018 1046.85,686.018 1047.41,686.018 1047.97,686.018 1048.53,686.018 1049.09,686.018 1049.65,686.018 1050.2,686.018 1050.76,686.018 1051.32,686.018 1051.88,686.018 1052.44,686.018 1053,686.018 1053.56,686.018 1054.12,686.018 1054.68,686.018 1055.24,686.018 1055.8,686.018 1056.36,686.018 1056.92,686.018 1057.48,686.018 1058.03,686.018 1058.59,686.018 1059.15,686.018 1059.71,686.018 1060.27,686.018 1060.83,686.018 1061.39,686.018 1061.95,686.018 1062.51,686.018 1063.07,686.018 1063.63,686.018 1064.19,686.018 1064.75,686.018 1065.3,686.018 1065.86,686.018 1066.42,686.018 1066.98,686.018 1067.54,686.018 1068.1,686.018 1068.66,686.018 1069.22,686.018 1069.78,686.018 1070.34,686.018 1070.9,686.018 1071.46,686.018 1072.02,686.018 1072.57,686.018 1073.13,686.018 1073.69,686.018 1074.25,686.018 1074.81,686.018 1075.37,686.018 1075.93,686.018 1076.49,686.018 1077.05,686.018 1077.61,686.018 1078.17,686.018 1078.73,686.018 1079.29,686.018 1079.85,686.018 1080.4,686.018 1080.96,686.018 1081.52,686.018 1082.08,686.018 1082.64,686.018 1083.2,686.018 1083.76,686.018 1084.32,686.018 1084.88,686.018 1085.44,686.018 1086,686.018 1086.56,686.018 1087.12,686.018 1087.67,686.018 1088.23,686.018 1088.79,686.018 1089.35,686.018 1089.91,686.018 1090.47,686.018 1091.03,686.018 1091.59,686.018 1092.15,686.018 1092.71,686.018 1093.27,686.018 1093.83,686.018 1094.39,686.018 1094.94,686.018 1095.5,686.018 1096.06,686.018 1096.62,686.018 1097.18,686.018 1097.74,686.018 1098.3,686.018 1098.86,686.018 1099.42,686.018 1099.98,686.018 1100.54,686.018 1101.1,686.018 1101.66,686.018 1102.22,686.018 1102.77,686.018 1103.33,686.018 1103.89,686.018 1104.45,686.018 1105.01,686.018 1105.57,686.018 1106.13,686.018 1106.69,686.018 1107.25,686.018 1107.81,686.018 1108.37,686.018 1108.93,686.018 1109.49,686.018 1110.04,686.018 1110.6,686.018 1111.16,686.018 1111.72,686.018 1112.28,686.018 1112.84,686.018 1113.4,686.018 1113.96,686.018 1114.52,686.018 1115.08,686.018 1115.64,686.018 1116.2,686.018 1116.76,686.018 1117.31,686.018 1117.87,686.018 1118.43,686.018 1118.99,686.018 1119.55,686.018 1120.11,686.018 1120.67,686.018 1121.23,686.018 1121.79,686.018 1122.35,686.018 1122.91,686.018 1123.47,686.018 1124.03,686.018 1124.59,686.018 1125.14,686.018 1125.7,686.018 1126.26,686.018 1126.82,686.018 1127.38,686.018 1127.94,686.018 1128.5,686.018 1129.06,686.018 1129.62,686.018 1130.18,686.018 1130.74,686.018 1131.3,686.018 1131.86,686.018 1132.41,686.018 1132.97,686.018 1133.53,686.018 1134.09,686.018 1134.65,686.018 1135.21,686.018 1135.77,686.018 1136.33,686.018 1136.89,686.018 1137.45,686.018 1138.01,686.018 1138.57,686.018 1139.13,686.018 1139.68,686.018 1140.24,686.018 1140.8,686.018 1141.36,686.018 1141.92,686.018 1142.48,686.018 1143.04,686.018 1143.6,686.018 1144.16,686.018 1144.72,686.018 1145.28,686.018 1145.84,686.018 1146.4,686.018 1146.96,686.018 1147.51,686.018 1148.07,686.018 1148.63,686.018 1149.19,686.018 1149.75,686.018 1150.31,686.018 1150.87,686.018 1151.43,686.018 1151.99,686.018 1152.55,686.018 1153.11,686.018 1153.67,686.018 1154.23,686.018 1154.78,686.018 1155.34,686.018 1155.9,686.018 1156.46,686.018 1157.02,686.018 1157.58,686.018 1158.14,686.018 1158.7,686.018 1159.26,686.018 1159.82,686.018 1160.38,686.018 1160.94,686.018 1161.5,686.018 1162.05,686.018 1162.61,686.018 1163.17,686.018 1163.73,686.018 1164.29,686.018 1164.85,686.018 1165.41,686.018 1165.97,686.018 1166.53,686.018 1167.09,686.018 1167.65,686.018 1168.21,686.018 1168.77,686.018 1169.33,686.018 1169.88,686.018 1170.44,686.018 1171,686.018 1171.56,686.018 1172.12,686.018 1172.68,686.018 1173.24,686.018 1173.8,686.018 1174.36,686.018 1174.92,686.018 1175.48,686.018 1176.04,686.018 1176.6,686.018 1177.15,686.018 1177.71,686.018 1178.27,686.018 1178.83,686.018 1179.39,686.018 1179.95,686.018 1180.51,686.018 1181.07,686.018 1181.63,686.018 1182.19,686.018 1182.75,686.018 1183.31,686.018 1183.87,686.018 1184.43,686.018 1184.98,686.018 1185.54,686.018 1186.1,686.018 1186.66,686.018 1187.22,686.018 1187.78,686.018 1188.34,686.018 1188.9,686.018 1189.46,686.018 1190.02,686.018 1190.58,686.018 1191.14,686.018 1191.7,686.018 1192.25,686.018 1192.81,686.018 1193.37,686.018 1193.93,686.018 1194.49,686.018 1195.05,686.018 1195.61,686.018 1196.17,686.018 1196.73,686.018 1197.29,686.018 1197.85,686.018 1198.41,686.018 1198.97,686.018 1199.52,686.018 1200.08,686.018 1200.64,686.018 1201.2,686.018 1201.76,686.018 1202.32,686.018 1202.88,686.018 1203.44,686.018 1204,686.018 1204.56,686.018 1205.12,686.018 1205.68,686.018 1206.24,686.018 1206.8,686.018 1207.35,686.018 1207.91,686.018 1208.47,686.018 1209.03,686.018 1209.59,686.018 1210.15,686.018 1210.71,686.018 1211.27,686.018 1211.83,686.018 1212.39,686.018 1212.95,686.018 1213.51,686.018 1214.07,686.018 1214.62,686.018 1215.18,686.018 1215.74,686.018 1216.3,686.018 1216.86,686.018 1217.42,686.018 1217.98,686.018 1218.54,686.018 1219.1,686.018 1219.66,686.018 1220.22,686.018 1220.78,686.018 1221.34,686.018 1221.89,686.018 1222.45,686.018 1223.01,686.018 1223.57,686.018 1224.13,686.018 1224.69,686.018 1225.25,686.018 1225.81,686.018 1226.37,686.018 1226.93,686.018 1227.49,686.018 1228.05,686.018 1228.61,686.018 1229.17,686.018 1229.72,686.018 1230.28,686.018 1230.84,686.018 1231.4,686.018 1231.96,686.018 1232.52,686.018 1233.08,686.018 1233.64,686.018 1234.2,686.018 1234.76,686.018 1235.32,686.018 1235.88,686.018 1236.44,686.018 1236.99,686.018 1237.55,686.018 1238.11,686.018 1238.67,686.018 1239.23,686.018 1239.79,686.018 1240.35,686.018 1240.91,686.018 1241.47,686.018 1242.03,686.018 1242.59,686.018 1243.15,686.018 1243.71,686.018 1244.26,686.018 1244.82,686.018 1245.38,686.018 1245.94,686.018 1246.5,686.018 1247.06,686.018 1247.62,686.018 1248.18,686.018 1248.74,686.018 1249.3,686.018 1249.86,686.018 1250.42,686.018 1250.98,686.018 1251.54,686.018 1252.09,686.018 1252.65,686.018 1253.21,686.018 1253.77,686.018 1254.33,686.018 1254.89,686.018 1255.45,686.018 1256.01,686.018 1256.57,686.018 1257.13,686.018 1257.69,686.018 1258.25,686.018 1258.81,686.018 1259.36,686.018 1259.92,686.018 1260.48,686.018 1261.04,686.018 1261.6,686.018 1262.16,686.018 1262.72,686.018 1263.28,686.018 1263.84,686.018 1264.4,686.018 1264.96,686.018 1265.52,686.018 1266.08,686.018 1266.63,686.018 1267.19,686.018 1267.75,686.018 1268.31,686.018 1268.87,686.018 1269.43,686.018 1269.99,686.018 1270.55,686.018 1271.11,686.018 1271.67,686.018 1272.23,686.018 1272.79,686.018 1273.35,686.018 1273.91,686.018 1274.46,686.018 1275.02,686.018 1275.58,686.018 1276.14,686.018 1276.7,686.018 1277.26,686.018 1277.82,686.018 1278.38,686.018 1278.94,686.018 1279.5,686.018 1280.06,686.018 1280.62,686.018 1281.18,686.018 1281.73,686.018 1282.29,686.018 1282.85,686.018 1283.41,686.018 1283.97,686.018 1284.53,686.018 1285.09,686.018 1285.65,686.018 1286.21,686.018 1286.77,686.018 1287.33,686.018 1287.89,686.018 1288.45,686.018 1289,686.018 1289.56,686.018 1290.12,686.018 1290.68,686.018 1291.24,686.018 1291.8,686.018 1292.36,686.018 1292.92,686.018 1293.48,686.018 1294.04,686.018 1294.6,686.018 1295.16,686.018 1295.72,686.018 1296.28,686.018 1296.83,686.018 1297.39,686.018 1297.95,686.018 1298.51,686.018 1299.07,686.018 1299.63,686.018 1300.19,686.018 1300.75,686.018 1301.31,686.018 1301.87,686.018 1302.43,686.018 1302.99,686.018 1303.55,686.018 1304.1,686.018 1304.66,686.018 1305.22,686.018 1305.78,686.018 1306.34,686.018 1306.9,686.018 1307.46,686.018 1308.02,686.018 1308.58,686.018 1309.14,686.018 1309.7,686.018 1310.26,686.018 1310.82,686.018 1311.38,686.018 1311.93,686.018 1312.49,686.018 1313.05,686.018 1313.61,686.018 1314.17,686.018 1314.73,686.018 1315.29,686.018 1315.85,686.018 1316.41,686.018 1316.97,686.018 1317.53,686.018 1318.09,686.018 1318.65,686.018 1319.2,686.018 1319.76,686.018 1320.32,686.018 1320.88,686.018 1321.44,686.018 1322,686.018 1322.56,686.018 1323.12,686.018 1323.68,686.018 1324.24,686.018 1324.8,686.018 1325.36,686.018 1325.92,686.018 1326.47,686.018 1327.03,686.018 1327.59,686.018 1328.15,686.018 1328.71,686.018 1329.27,686.018 1329.83,686.018 1330.39,686.018 1330.95,686.018 1331.51,686.018 1332.07,686.018 1332.63,686.018 1333.19,686.018 1333.75,686.018 1334.3,686.018 1334.86,686.018 1335.42,686.018 1335.98,686.018 1336.54,686.018 1337.1,686.018 1337.66,686.018 1338.22,686.018 1338.78,686.018 1339.34,686.018 1339.9,686.018 1340.46,686.018 1341.02,686.018 1341.57,686.018 1342.13,686.018 1342.69,686.018 1343.25,686.018 1343.81,686.018 1344.37,686.018 1344.93,686.018 1345.49,686.018 1346.05,686.018 1346.61,686.018 1347.17,686.018 1347.73,686.018 1348.29,686.018 1348.84,686.018 1349.4,686.018 1349.96,686.018 1350.52,686.018 1351.08,686.018 1351.64,686.018 1352.2,686.018 1352.76,686.018 1353.32,686.018 1353.88,686.018 1354.44,686.018 1355,686.018 1355.56,686.018 1356.12,686.018 1356.67,686.018 1357.23,686.018 1357.79,686.018 1358.35,686.018 1358.91,686.018 1359.47,686.018 1360.03,686.018 1360.59,686.018 1361.15,686.018 1361.71,686.018 1362.27,686.018 1362.83,686.018 1363.39,686.018 1363.94,686.018 1364.5,686.018 1365.06,686.018 1365.62,686.018 1366.18,686.018 1366.74,686.018 1367.3,686.018 1367.86,686.018 1368.42,686.018 1368.98,686.018 1369.54,686.018 1370.1,686.018 1370.66,686.018 1371.21,686.018 1371.77,686.018 1372.33,686.018 1372.89,686.018 1373.45,686.018 1374.01,686.018 1374.57,686.018 1375.13,686.018 1375.69,686.018 1376.25,686.018 1376.81,686.018 1377.37,686.018 1377.93,686.018 1378.49,686.018 1379.04,686.018 1379.6,686.018 1380.16,686.018 1380.72,686.018 1381.28,686.018 1381.84,686.018 1382.4,686.018 1382.96,686.018 1383.52,686.018 1384.08,686.018 1384.64,686.018 1385.2,686.018 1385.76,686.018 1386.31,686.018 1386.87,686.018 1387.43,686.018 1387.99,686.018 1388.55,686.018 1389.11,686.018 1389.67,686.018 1390.23,686.018 1390.79,686.018 1391.35,686.018 1391.91,686.018 1392.47,686.018 1393.03,686.018 1393.58,686.018 1394.14,686.018 1394.7,686.018 1395.26,686.018 1395.82,686.018 1396.38,686.018 1396.94,686.018 1397.5,686.018 1398.06,686.018 1398.62,686.018 1399.18,686.018 1399.74,686.018 1400.3,686.018 1400.86,686.018 1401.41,686.018 1401.97,686.018 1402.53,686.018 1403.09,686.018 1403.65,686.018 1404.21,686.018 1404.77,686.018 1405.33,686.018 1405.89,686.018 1406.45,686.018 1407.01,686.018 1407.57,686.018 1408.13,686.018 1408.68,686.018 1409.24,686.018 1409.8,686.018 1410.36,686.018 1410.92,686.018 1411.48,686.018 1412.04,686.018 1412.6,686.018 1413.16,686.018 1413.72,686.018 1414.28,686.018 1414.84,686.018 1415.4,686.018 1415.95,686.018 1416.51,686.018 1417.07,686.018 1417.63,686.018 1418.19,686.018 1418.75,686.018 1419.31,686.018 1419.87,686.018 1420.43,686.018 1420.99,686.018 1421.55,686.018 1422.11,686.018 1422.67,686.018 1423.23,686.018 1423.78,686.018 1424.34,686.018 1424.9,686.018 1425.46,686.018 1426.02,686.018 1426.58,686.018 1427.14,686.018 1427.7,686.018 1428.26,686.018 1428.82,686.018 1429.38,686.018 1429.94,686.018 1430.5,686.018 1431.05,686.018 1431.61,686.018 1432.17,686.018 1432.73,686.018 1433.29,686.018 1433.85,686.018 1434.41,686.018 1434.97,686.018 1435.53,686.018 1436.09,686.018 1436.65,686.018 1437.21,686.018 1437.77,686.018 1438.33,686.018 1438.88,686.018 1439.44,686.018 1440,686.018 1440.56,686.018 1441.12,686.018 1441.68,686.018 1442.24,686.018 1442.8,686.018 1443.36,686.018 1443.92,686.018 1444.48,686.018 1445.04,686.018 1445.6,686.018 1446.15,686.018 1446.71,686.018 1447.27,686.018 1447.83,686.018 1448.39,686.018 1448.95,686.018 1449.51,686.018 1450.07,686.018 1450.63,686.018 1451.19,686.018 1451.75,686.018 1452.31,686.018 1452.87,686.018 1453.42,686.018 1453.98,686.018 1454.54,686.018 1455.1,686.018 1455.66,686.018 1456.22,686.018 1456.78,686.018 1457.34,686.018 1457.9,686.018 1458.46,686.018 1459.02,686.018 1459.58,686.018 1460.14,686.018 1460.7,686.018 1461.25,686.018 1461.81,686.018 1462.37,686.018 1462.93,686.018 1463.49,686.018 1464.05,686.018 1464.61,686.018 1465.17,686.018 1465.73,686.018 1466.29,686.018 1466.85,686.018 1467.41,686.018 1467.97,686.018 1468.52,686.018 1469.08,686.018 1469.64,686.018 1470.2,686.018 1470.76,686.018 1471.32,686.018 1471.88,686.018 1472.44,686.018 1473,686.018 1473.56,686.018 1474.12,686.018 1474.68,686.018 1475.24,686.018 1475.79,686.018 1476.35,686.018 1476.91,686.018 1477.47,686.018 1478.03,686.018 1478.59,686.018 1479.15,686.018 1479.71,686.018 1480.27,686.018 1480.83,686.018 1481.39,686.018 1481.95,686.018 1482.51,686.018 1483.07,686.018 1483.62,686.018 1484.18,686.018 1484.74,686.018 1485.3,686.018 1485.86,686.018 1486.42,686.018 1486.98,686.018 1487.54,686.018 1488.1,686.018 1488.66,686.018 1489.22,686.018 1489.78,686.018 1490.34,686.018 1490.89,686.018 1491.45,686.018 1492.01,686.018 1492.57,686.018 1493.13,686.018 1493.69,686.018 1494.25,686.018 1494.81,686.018 1495.37,686.018 1495.93,686.018 1496.49,686.018 1497.05,686.018 1497.61,686.018 1498.16,686.018 1498.72,686.018 1499.28,686.018 1499.84,686.018 1500.4,686.018 1500.96,686.018 1501.52,686.018 1502.08,686.018 1502.64,686.018 1503.2,686.018 1503.76,686.018 1504.32,686.018 1504.88,686.018 1505.44,686.018 1505.99,686.018 1506.55,686.018 1507.11,686.018 1507.67,686.018 1508.23,686.018 1508.79,686.018 1509.35,686.018 1509.91,686.018 1510.47,686.018 1511.03,686.018 1511.59,686.018 1512.15,686.018 1512.71,686.018 1513.26,686.018 1513.82,686.018 1514.38,686.018 1514.94,686.018 1515.5,686.018 1516.06,686.018 1516.62,686.018 1517.18,686.018 1517.74,686.018 1518.3,686.018 1518.86,686.018 1519.42,686.018 1519.98,686.018 1520.53,686.018 1521.09,686.018 1521.65,686.018 1522.21,686.018 1522.77,686.018 1523.33,686.018 1523.89,686.018 1524.45,686.018 1525.01,686.018 1525.57,686.018 1526.13,686.018 1526.69,686.018 1527.25,686.018 1527.81,686.018 1528.36,686.018 1528.92,686.018 1529.48,686.018 1530.04,686.018 1530.6,686.018 1531.16,686.018 1531.72,686.018 1532.28,686.018 1532.84,686.018 1533.4,686.018 1533.96,686.018 1534.52,686.018 1535.08,686.018 1535.63,686.018 1536.19,686.018 1536.75,686.018 1537.31,686.018 1537.87,686.018 1538.43,686.018 1538.99,686.018 1539.55,686.018 1540.11,686.018 1540.67,686.018 1541.23,686.018 1541.79,686.018 1542.35,686.018 1542.9,686.018 1543.46,686.018 1544.02,686.018 1544.58,686.018 1545.14,686.018 1545.7,686.018 1546.26,686.018 1546.82,686.018 1547.38,686.018 1547.94,686.018 1548.5,686.018 1549.06,686.018 1549.62,686.018 1550.18,686.018 1550.73,686.018 1551.29,686.018 1551.85,686.018 1552.41,686.018 1552.97,686.018 1553.53,686.018 1554.09,686.018 1554.65,686.018 1555.21,686.018 1555.77,686.018 1556.33,686.018 1556.89,686.018 1557.45,686.018 1558,686.018 1558.56,686.018 1559.12,686.018 1559.68,686.018 1560.24,686.018 1560.8,686.018 1561.36,686.018 1561.92,686.018 1562.48,686.018 1563.04,686.018 1563.6,686.018 1564.16,686.018 1564.72,686.018 1565.28,686.018 1565.83,686.018 1566.39,686.018 1566.95,686.018 1567.51,686.018 1568.07,686.018 1568.63,686.018 1569.19,686.018 1569.75,686.018 1570.31,686.018 1570.87,686.018 1571.43,686.018 1571.99,686.018 1572.55,686.018 1573.1,686.018 1573.66,686.018 1574.22,686.018 1574.78,686.018 1575.34,686.018 1575.9,686.018 1576.46,686.018 1577.02,686.018 1577.58,686.018 1578.14,686.018 1578.7,686.018 1579.26,686.018 1579.82,686.018 1580.37,686.018 1580.93,686.018 1581.49,686.018 1582.05,686.018 1582.61,686.018 1583.17,686.018 1583.73,686.018 1584.29,686.018 1584.85,686.018 1585.41,686.018 1585.97,686.018 1586.53,686.018 1587.09,686.018 1587.65,686.018 1588.2,686.018 1588.76,686.018 1589.32,686.018 1589.88,686.018 1590.44,686.018 1591,686.018 1591.56,686.018 1592.12,686.018 1592.68,686.018 1593.24,686.018 1593.8,686.018 1594.36,686.018 1594.92,686.018 1595.47,686.018 1596.03,686.018 1596.59,686.018 1597.15,686.018 1597.71,686.018 1598.27,686.018 1598.83,686.018 1599.39,686.018 1599.95,686.018 1600.51,686.018 1601.07,686.018 1601.63,686.018 1602.19,686.018 1602.74,686.018 1603.3,686.018 1603.86,686.018 1604.42,686.018 1604.98,686.018 1605.54,686.018 1606.1,686.018 1606.66,686.018 1607.22,686.018 1607.78,686.018 1608.34,686.018 1608.9,686.018 1609.46,686.018 1610.02,686.018 1610.57,686.018 1611.13,686.018 1611.69,686.018 1612.25,686.018 1612.81,686.018 1613.37,686.018 1613.93,686.018 1614.49,686.018 1615.05,686.018 1615.61,686.018 1616.17,686.018 1616.73,686.018 1617.29,686.018 1617.84,686.018 1618.4,686.018 1618.96,686.018 1619.52,686.018 1620.08,686.018 1620.64,686.018 1621.2,686.018 1621.76,686.018 1622.32,686.018 1622.88,686.018 1623.44,686.018 1624,686.018 1624.56,686.018 1625.11,686.018 1625.67,686.018 1626.23,686.018 1626.79,686.018 1627.35,686.018 1627.91,686.018 1628.47,686.018 1629.03,686.018 1629.59,686.018 1630.15,686.018 1630.71,686.018 1631.27,686.018 1631.83,686.018 1632.39,686.018 1632.94,686.018 1633.5,686.018 1634.06,686.018 1634.62,686.018 1635.18,686.018 1635.74,686.018 1636.3,686.018 1636.86,686.018 1637.42,686.018 1637.98,686.018 1638.54,686.018 1639.1,686.018 1639.66,686.018 1640.21,686.018 1640.77,686.018 1641.33,686.018 1641.89,686.018 1642.45,686.018 1643.01,686.018 1643.57,686.018 1644.13,686.018 1644.69,686.018 1645.25,686.018 1645.81,686.018 1646.37,686.018 1646.93,686.018 1647.48,686.018 1648.04,686.018 1648.6,686.018 1649.16,686.018 1649.72,686.018 1650.28,686.018 1650.84,686.018 1651.4,686.018 1651.96,686.018 1652.52,686.018 1653.08,686.018 1653.64,686.018 1654.2,686.018 1654.76,686.018 1655.31,686.018 1655.87,686.018 1656.43,686.018 1656.99,686.018 1657.55,686.018 1658.11,686.018 1658.67,686.018 1659.23,686.018 1659.79,686.018 1660.35,686.018 1660.91,686.018 1661.47,686.018 1662.03,686.018 1662.58,686.018 1663.14,686.018 1663.7,686.018 1664.26,686.018 1664.82,686.018 1665.38,686.018 1665.94,686.018 1666.5,686.018 1667.06,686.018 1667.62,686.018 1668.18,686.018 1668.74,686.018 1669.3,686.018 1669.85,686.018 1670.41,686.018 1670.97,686.018 1671.53,686.018 1672.09,686.018 1672.65,686.018 1673.21,686.018 1673.77,686.018 1674.33,686.018 1674.89,686.018 1675.45,686.018 1676.01,686.018 1676.57,686.018 1677.13,686.018 1677.68,686.018 1678.24,686.018 1678.8,686.018 1679.36,686.018 1679.92,686.018 1680.48,686.018 1681.04,686.018 1681.6,686.018 1682.16,686.018 1682.72,686.018 1683.28,686.018 1683.84,686.018 1684.4,686.018 1684.95,686.018 1685.51,686.018 1686.07,686.018 1686.63,686.018 1687.19,686.018 1687.75,686.018 1688.31,686.018 1688.87,686.018 1689.43,686.018 1689.99,686.018 1690.55,686.018 1691.11,686.018 1691.67,686.018 1692.23,686.018 1692.78,686.018 1693.34,686.018 1693.9,686.018 1694.46,686.018 1695.02,686.018 1695.58,686.018 1696.14,686.018 1696.7,686.018 1697.26,686.018 1697.82,686.018 1698.38,686.018 1698.94,686.018 1699.5,686.018 1700.05,686.018 1700.61,686.018 1701.17,686.018 1701.73,686.018 1702.29,686.018 1702.85,686.018 1703.41,686.018 1703.97,686.018 1704.53,686.018 1705.09,686.018 1705.65,686.018 1706.21,686.018 1706.77,686.018 1707.32,686.018 1707.88,686.018 1708.44,686.018 1709,686.018 1709.56,686.018 1710.12,686.018 1710.68,686.018 1711.24,686.018 1711.8,686.018 1712.36,686.018 1712.92,686.018 1713.48,686.018 1714.04,686.018 1714.6,686.018 1715.15,686.018 1715.71,686.018 1716.27,686.018 1716.83,686.018 1717.39,686.018 1717.95,686.018 1718.51,686.018 1719.07,686.018 1719.63,686.018 1720.19,686.018 1720.75,686.018 1721.31,686.018 1721.87,686.018 1722.42,686.018 1722.98,686.018 1723.54,686.018 1724.1,686.018 1724.66,686.018 1725.22,686.018 1725.78,686.018 1726.34,686.018 1726.9,686.018 1727.46,686.018 1728.02,686.018 1728.58,686.018 1729.14,686.018 1729.69,686.018 1730.25,686.018 1730.81,686.018 1731.37,686.018 1731.93,686.018 1732.49,686.018 1733.05,686.018 1733.61,686.018 1734.17,686.018 1734.73,686.018 1735.29,686.018 1735.85,686.018 1736.41,686.018 1736.97,686.018 1737.52,686.018 1738.08,686.018 1738.64,686.018 1739.2,686.018 1739.76,686.018 1740.32,686.018 1740.88,686.018 1741.44,686.018 1742,686.018 1742.56,686.018 1743.12,686.018 1743.68,686.018 1744.24,686.018 1744.79,686.018 1745.35,686.018 1745.91,686.018 1746.47,686.018 1747.03,686.018 1747.59,686.018 1748.15,686.018 1748.71,686.018 1749.27,686.018 1749.83,686.018 1750.39,686.018 1750.95,686.018 1751.51,686.018 1752.06,686.018 1752.62,686.018 1753.18,686.018 1753.74,686.018 1754.3,686.018 1754.86,686.018 1755.42,686.018 1755.98,686.018 1756.54,686.018 1757.1,686.018 1757.66,686.018 1758.22,686.018 1758.78,686.018 1759.34,686.018 1759.89,686.018 1760.45,686.018 1761.01,686.018 1761.57,686.018 1762.13,686.018 1762.69,686.018 1763.25,686.018 1763.81,686.018 1764.37,686.018 1764.93,686.018 1765.49,686.018 1766.05,686.018 1766.61,686.018 1767.16,686.018 1767.72,686.018 1768.28,686.018 1768.84,686.018 1769.4,686.018 1769.96,686.018 1770.52,686.018 1771.08,686.018 1771.64,686.018 1772.2,686.018 1772.76,686.018 1773.32,686.018 1773.88,686.018 1774.43,686.018 1774.99,686.018 1775.55,686.018 1776.11,686.018 1776.67,686.018 1777.23,686.018 1777.79,686.018 1778.35,686.018 1778.91,686.018 1779.47,686.018 1780.03,686.018 1780.59,686.018 1781.15,686.018 1781.71,686.018 1782.26,686.018 1782.82,686.018 1783.38,686.018 1783.94,686.018 1784.5,686.018 1785.06,686.018 1785.62,686.018 1786.18,686.018 1786.74,686.018 1787.3,686.018 1787.86,686.018 1788.42,686.018 1788.98,686.018 1789.53,686.018 1790.09,686.018 1790.65,686.018 1791.21,686.018 1791.77,686.018 1792.33,686.018 1792.89,686.018 1793.45,686.018 1794.01,686.018 1794.57,686.018 1795.13,686.018 1795.69,686.018 1796.25,686.018 1796.8,686.018 1797.36,686.018 1797.92,686.018 1798.48,686.018 1799.04,686.018 1799.6,686.018 1800.16,686.018 1800.72,686.018 1801.28,686.018 1801.84,686.018 1802.4,686.018 1802.96,686.018 1803.52,686.018 1804.08,686.018 1804.63,686.018 1805.19,686.018 1805.75,686.018 1806.31,686.018 1806.87,686.018 1807.43,686.018 1807.99,686.018 1808.55,686.018 1809.11,686.018 1809.67,686.018 1810.23,686.018 1810.79,686.018 1811.35,686.018 1811.9,686.018 1812.46,686.018 1813.02,686.018 1813.58,686.018 1814.14,686.018 1814.7,686.018 1815.26,686.018 1815.82,686.018 1816.38,686.018 1816.94,686.018 1817.5,686.018 1818.06,686.018 1818.62,686.018 1819.18,686.018 1819.73,686.018 1820.29,686.018 1820.85,686.018 1821.41,686.018 1821.97,686.018 1822.53,686.018 1823.09,686.018 1823.65,686.018 1824.21,686.018 1824.77,686.018 1825.33,686.018 1825.89,686.018 1826.45,686.018 1827,686.018 1827.56,686.018 1828.12,686.018 1828.68,686.018 1829.24,686.018 1829.8,686.018 1830.36,686.018 1830.92,686.018 1831.48,686.018 1832.04,686.018 1832.6,686.018 1833.16,686.018 1833.72,686.018 1834.27,686.018 1834.83,686.018 1835.39,686.018 1835.95,686.018 1836.51,686.018 1837.07,686.018 1837.63,686.018 1838.19,686.018 \"/>\n<path clip-path=\"url(#clip253)\" d=\"M720.247 683.97 L720.806 683.97 L721.365 683.97 L721.924 683.97 L722.484 683.97 L723.043 683.97 L723.602 683.97 L724.161 683.97 L724.721 683.97 L725.28 683.97 L725.839 683.97 L726.398 683.97 L726.958 683.97 L727.517 683.97 L728.076 683.97 L728.635 683.97 L729.195 683.97 L729.754 683.97 L730.313 683.97 L730.872 683.97 L731.432 683.97 L731.991 683.97 L732.55 683.97 L733.109 683.97 L733.669 683.97 L734.228 683.97 L734.787 683.97 L735.346 683.97 L735.906 683.97 L736.465 683.97 L737.024 683.97 L737.583 683.97 L738.143 683.97 L738.702 683.97 L739.261 683.97 L739.82 683.97 L740.38 683.97 L740.939 683.97 L741.498 683.97 L742.057 683.97 L742.617 683.97 L743.176 683.97 L743.735 683.97 L744.294 683.97 L744.854 683.97 L745.413 683.97 L745.972 683.97 L746.531 683.97 L747.091 683.97 L747.65 683.97 L748.209 683.97 L748.768 683.97 L749.328 683.97 L749.887 683.97 L750.446 683.97 L751.005 683.97 L751.565 683.97 L752.124 683.97 L752.683 683.97 L753.242 683.97 L753.802 683.97 L754.361 683.97 L754.92 683.97 L755.479 683.97 L756.039 683.97 L756.598 683.97 L757.157 683.97 L757.716 683.97 L758.276 683.97 L758.835 683.97 L759.394 683.97 L759.953 683.97 L760.513 683.97 L761.072 683.97 L761.631 683.97 L762.19 683.97 L762.75 683.97 L763.309 683.97 L763.868 683.97 L764.427 683.97 L764.987 683.97 L765.546 683.97 L766.105 683.97 L766.664 683.97 L767.224 683.97 L767.783 683.97 L768.342 683.97 L768.901 683.97 L769.461 683.97 L770.02 683.97 L770.579 683.97 L771.138 683.97 L771.698 683.97 L772.257 683.97 L772.816 683.97 L773.375 683.97 L773.935 683.97 L774.494 683.97 L775.053 683.97 L775.612 683.97 L776.172 683.97 L776.731 683.97 L777.29 683.97 L777.849 683.97 L778.409 683.97 L778.968 683.97 L779.527 683.97 L780.086 683.97 L780.646 683.97 L781.205 683.97 L781.764 683.97 L782.323 683.97 L782.883 683.97 L783.442 683.97 L784.001 683.97 L784.56 683.97 L785.12 683.97 L785.679 683.97 L786.238 683.97 L786.797 683.97 L787.357 683.97 L787.916 683.97 L788.475 683.97 L789.034 683.97 L789.594 683.97 L790.153 683.97 L790.712 683.97 L791.271 683.97 L791.831 683.97 L792.39 683.97 L792.949 683.97 L793.508 683.97 L794.068 683.97 L794.627 683.97 L795.186 683.97 L795.745 683.97 L796.305 683.97 L796.864 683.97 L797.423 683.97 L797.982 683.97 L798.542 683.97 L799.101 683.97 L799.66 683.97 L800.219 683.97 L800.779 683.97 L801.338 683.97 L801.897 683.97 L802.456 683.97 L803.016 683.97 L803.575 683.97 L804.134 683.97 L804.693 683.97 L805.253 683.97 L805.812 683.97 L806.371 683.97 L806.931 683.97 L807.49 683.97 L808.049 683.97 L808.608 683.97 L809.168 683.97 L809.727 683.97 L810.286 683.97 L810.845 683.97 L811.405 683.97 L811.964 683.97 L812.523 683.97 L813.082 683.97 L813.642 683.97 L814.201 683.97 L814.76 683.97 L815.319 683.97 L815.879 683.97 L816.438 683.97 L816.997 683.97 L817.556 683.97 L818.116 683.97 L818.675 683.97 L819.234 683.97 L819.793 683.97 L820.353 683.97 L820.912 683.97 L821.471 683.97 L822.03 683.97 L822.59 683.97 L823.149 683.97 L823.708 683.97 L824.267 683.97 L824.827 683.97 L825.386 683.97 L825.945 683.97 L826.504 683.97 L827.064 683.97 L827.623 683.97 L828.182 683.97 L828.741 683.97 L829.301 683.97 L829.86 683.97 L830.419 683.97 L830.978 683.97 L831.538 683.97 L832.097 683.97 L832.656 683.97 L833.215 683.97 L833.775 683.97 L834.334 683.97 L834.893 683.97 L835.452 683.97 L836.012 683.97 L836.571 683.97 L837.13 683.97 L837.689 683.97 L838.249 683.97 L838.808 683.97 L839.367 683.97 L839.926 683.97 L840.486 683.97 L841.045 683.97 L841.604 683.97 L842.163 683.97 L842.723 683.97 L843.282 683.97 L843.841 683.97 L844.4 683.97 L844.96 683.97 L845.519 683.97 L846.078 683.97 L846.637 683.97 L847.197 683.97 L847.756 683.97 L848.315 683.97 L848.874 683.97 L849.434 683.97 L849.993 683.97 L850.552 683.97 L851.111 683.97 L851.671 683.97 L852.23 683.97 L852.789 683.97 L853.348 683.97 L853.908 683.97 L854.467 683.97 L855.026 683.97 L855.585 683.97 L856.145 683.97 L856.704 683.97 L857.263 683.97 L857.822 683.97 L858.382 683.97 L858.941 683.97 L859.5 683.97 L860.059 683.97 L860.619 683.97 L861.178 683.97 L861.737 683.97 L862.296 683.97 L862.856 683.97 L863.415 683.97 L863.974 683.97 L864.533 683.97 L865.093 683.97 L865.652 683.97 L866.211 683.97 L866.77 683.97 L867.33 683.97 L867.889 683.97 L868.448 683.97 L869.007 683.97 L869.567 683.97 L870.126 683.97 L870.685 683.97 L871.244 683.97 L871.804 683.97 L872.363 683.97 L872.922 683.97 L873.481 683.97 L874.041 683.97 L874.6 683.97 L875.159 683.97 L875.718 683.97 L876.278 683.97 L876.837 683.97 L877.396 683.97 L877.955 683.97 L878.515 683.97 L879.074 683.97 L879.633 683.97 L880.192 683.97 L880.752 683.97 L881.311 683.97 L881.87 683.97 L882.429 683.97 L882.989 683.97 L883.548 683.97 L884.107 683.97 L884.666 683.97 L885.226 683.97 L885.785 683.97 L886.344 683.97 L886.903 683.97 L887.463 683.97 L888.022 683.97 L888.581 683.97 L889.14 683.97 L889.7 683.97 L890.259 683.97 L890.818 683.97 L891.377 683.97 L891.937 683.97 L892.496 683.97 L893.055 683.97 L893.614 683.97 L894.174 683.97 L894.733 683.97 L895.292 683.97 L895.851 683.97 L896.411 683.97 L896.97 683.97 L897.529 683.97 L898.088 683.97 L898.648 683.97 L899.207 683.97 L899.766 683.97 L900.325 683.97 L900.885 683.97 L901.444 683.97 L902.003 683.97 L902.562 683.97 L903.122 683.97 L903.681 683.97 L904.24 683.97 L904.799 683.97 L905.359 683.97 L905.918 683.97 L906.477 683.97 L907.036 683.97 L907.596 683.97 L908.155 683.97 L908.714 683.97 L909.273 683.97 L909.833 683.97 L910.392 683.97 L910.951 683.97 L911.51 683.97 L912.07 683.97 L912.629 683.97 L913.188 683.97 L913.747 683.97 L914.307 683.97 L914.866 683.97 L915.425 683.97 L915.984 683.97 L916.544 683.97 L917.103 683.97 L917.662 683.97 L918.221 683.97 L918.781 683.97 L919.34 683.97 L919.899 683.97 L920.458 683.97 L921.018 683.97 L921.577 683.97 L922.136 683.97 L922.695 683.97 L923.255 683.97 L923.814 683.97 L924.373 683.97 L924.932 683.97 L925.492 683.97 L926.051 683.97 L926.61 683.97 L927.169 683.97 L927.729 683.97 L928.288 683.97 L928.847 683.97 L929.406 683.97 L929.966 683.97 L930.525 683.97 L931.084 683.97 L931.644 683.97 L932.203 683.97 L932.762 683.97 L933.321 683.97 L933.881 683.97 L934.44 683.97 L934.999 683.97 L935.558 683.97 L936.118 683.97 L936.677 683.97 L937.236 683.97 L937.795 683.97 L938.355 683.97 L938.914 683.97 L939.473 683.97 L940.032 683.97 L940.592 683.97 L941.151 683.97 L941.71 683.97 L942.269 683.97 L942.829 683.97 L943.388 683.97 L943.947 683.97 L944.506 683.97 L945.066 683.97 L945.625 683.97 L946.184 683.97 L946.743 683.97 L947.303 683.97 L947.862 683.97 L948.421 683.97 L948.98 683.97 L949.54 683.97 L950.099 683.97 L950.658 683.97 L951.217 683.97 L951.777 683.97 L952.336 683.97 L952.895 683.97 L953.454 683.97 L954.014 683.97 L954.573 683.97 L955.132 683.97 L955.691 683.97 L956.251 683.97 L956.81 683.97 L957.369 683.97 L957.928 683.97 L958.488 683.97 L959.047 683.97 L959.606 683.97 L960.165 683.97 L960.725 683.97 L961.284 683.97 L961.843 683.97 L962.402 683.97 L962.962 683.97 L963.521 683.97 L964.08 683.97 L964.639 683.97 L965.199 683.97 L965.758 683.97 L966.317 683.97 L966.876 683.97 L967.436 683.97 L967.995 683.97 L968.554 683.97 L969.113 683.97 L969.673 683.97 L970.232 683.97 L970.791 683.97 L971.35 683.97 L971.91 683.97 L972.469 683.97 L973.028 683.97 L973.587 683.97 L974.147 683.97 L974.706 683.97 L975.265 683.97 L975.824 683.97 L976.384 683.97 L976.943 683.97 L977.502 683.97 L978.061 683.97 L978.621 683.97 L979.18 683.97 L979.739 683.97 L980.298 683.97 L980.858 683.97 L981.417 683.97 L981.976 683.97 L982.535 683.97 L983.095 683.97 L983.654 683.97 L984.213 683.97 L984.772 683.97 L985.332 683.97 L985.891 683.97 L986.45 683.97 L987.009 683.97 L987.569 683.97 L988.128 683.97 L988.687 683.97 L989.246 683.97 L989.806 683.97 L990.365 683.97 L990.924 683.97 L991.483 683.97 L992.043 683.97 L992.602 683.97 L993.161 683.97 L993.72 683.97 L994.28 683.97 L994.839 683.97 L995.398 683.97 L995.957 683.97 L996.517 683.97 L997.076 683.97 L997.635 683.97 L998.194 683.97 L998.754 683.97 L999.313 683.97 L999.872 683.97 L1000.43 683.97 L1000.99 683.97 L1001.55 683.97 L1002.11 683.97 L1002.67 683.97 L1003.23 683.97 L1003.79 683.97 L1004.35 683.97 L1004.91 683.97 L1005.46 683.97 L1006.02 683.97 L1006.58 683.97 L1007.14 683.97 L1007.7 683.97 L1008.26 683.97 L1008.82 683.97 L1009.38 683.97 L1009.94 683.97 L1010.5 683.97 L1011.06 683.97 L1011.62 683.97 L1012.18 683.97 L1012.73 683.97 L1013.29 683.97 L1013.85 683.97 L1014.41 683.97 L1014.97 683.97 L1015.53 683.97 L1016.09 683.97 L1016.65 683.97 L1017.21 683.97 L1017.77 683.97 L1018.33 683.97 L1018.89 683.97 L1019.45 683.97 L1020.01 683.97 L1020.56 683.97 L1021.12 683.97 L1021.68 683.97 L1022.24 683.97 L1022.8 683.97 L1023.36 683.97 L1023.92 683.97 L1024.48 683.97 L1025.04 683.97 L1025.6 683.97 L1026.16 683.97 L1026.72 683.97 L1027.28 683.97 L1027.83 683.97 L1028.39 683.97 L1028.95 683.97 L1029.51 683.97 L1030.07 683.97 L1030.63 683.97 L1031.19 683.97 L1031.75 683.97 L1032.31 683.97 L1032.87 683.97 L1033.43 683.97 L1033.99 683.97 L1034.55 683.97 L1035.1 683.97 L1035.66 683.97 L1036.22 683.97 L1036.78 683.97 L1037.34 683.97 L1037.9 683.97 L1038.46 683.97 L1039.02 683.97 L1039.58 683.97 L1040.14 683.97 L1040.7 683.97 L1041.26 683.97 L1041.82 683.97 L1042.38 683.97 L1042.93 683.97 L1043.49 683.97 L1044.05 683.97 L1044.61 683.97 L1045.17 683.97 L1045.73 683.97 L1046.29 683.97 L1046.85 683.97 L1047.41 683.97 L1047.97 683.97 L1048.53 683.97 L1049.09 683.97 L1049.65 683.97 L1050.2 683.97 L1050.76 683.97 L1051.32 683.97 L1051.88 683.97 L1052.44 683.97 L1053 683.97 L1053.56 683.97 L1054.12 683.97 L1054.68 683.97 L1055.24 683.97 L1055.8 683.97 L1056.36 683.97 L1056.92 683.97 L1057.48 683.97 L1058.03 683.97 L1058.59 683.97 L1059.15 683.97 L1059.71 683.97 L1060.27 683.97 L1060.83 683.97 L1061.39 683.97 L1061.95 683.97 L1062.51 683.97 L1063.07 683.97 L1063.63 683.97 L1064.19 683.97 L1064.75 683.97 L1065.3 683.97 L1065.86 683.97 L1066.42 683.97 L1066.98 683.97 L1067.54 683.97 L1068.1 683.97 L1068.66 683.97 L1069.22 683.97 L1069.78 683.97 L1070.34 683.97 L1070.9 683.97 L1071.46 683.97 L1072.02 683.97 L1072.57 683.97 L1073.13 683.97 L1073.69 683.97 L1074.25 683.97 L1074.81 683.97 L1075.37 683.97 L1075.93 683.97 L1076.49 683.97 L1077.05 683.97 L1077.61 683.97 L1078.17 683.97 L1078.73 683.97 L1079.29 683.97 L1079.85 683.97 L1080.4 683.97 L1080.96 683.97 L1081.52 683.97 L1082.08 683.97 L1082.64 683.97 L1083.2 683.97 L1083.76 683.97 L1084.32 683.97 L1084.88 683.97 L1085.44 683.97 L1086 683.97 L1086.56 683.97 L1087.12 683.97 L1087.67 683.97 L1088.23 683.97 L1088.79 683.97 L1089.35 683.97 L1089.91 683.97 L1090.47 683.97 L1091.03 683.97 L1091.59 683.97 L1092.15 683.97 L1092.71 683.97 L1093.27 683.97 L1093.83 683.97 L1094.39 683.97 L1094.94 683.97 L1095.5 683.97 L1096.06 683.97 L1096.62 683.97 L1097.18 683.97 L1097.74 683.97 L1098.3 683.97 L1098.86 683.97 L1099.42 683.97 L1099.98 683.97 L1100.54 683.97 L1101.1 683.97 L1101.66 683.97 L1102.22 683.97 L1102.77 683.97 L1103.33 683.97 L1103.89 683.97 L1104.45 683.97 L1105.01 683.97 L1105.57 683.97 L1106.13 683.97 L1106.69 683.97 L1107.25 683.97 L1107.81 683.97 L1108.37 683.97 L1108.93 683.97 L1109.49 683.97 L1110.04 683.97 L1110.6 683.97 L1111.16 683.97 L1111.72 683.97 L1112.28 683.97 L1112.84 683.97 L1113.4 683.97 L1113.96 683.97 L1114.52 683.97 L1115.08 683.97 L1115.64 683.97 L1116.2 683.97 L1116.76 683.97 L1117.31 683.97 L1117.87 683.97 L1118.43 683.97 L1118.99 683.97 L1119.55 683.97 L1120.11 683.97 L1120.67 683.97 L1121.23 683.97 L1121.79 683.97 L1122.35 683.97 L1122.91 683.97 L1123.47 683.97 L1124.03 683.97 L1124.59 683.97 L1125.14 683.97 L1125.7 683.97 L1126.26 683.97 L1126.82 683.97 L1127.38 683.97 L1127.94 683.97 L1128.5 683.97 L1129.06 683.97 L1129.62 683.97 L1130.18 683.97 L1130.74 683.97 L1131.3 683.97 L1131.86 683.97 L1132.41 683.97 L1132.97 683.97 L1133.53 683.97 L1134.09 683.97 L1134.65 683.97 L1135.21 683.97 L1135.77 683.97 L1136.33 683.97 L1136.89 683.97 L1137.45 683.97 L1138.01 683.97 L1138.57 683.97 L1139.13 683.97 L1139.68 683.97 L1140.24 683.97 L1140.8 683.97 L1141.36 683.97 L1141.92 683.97 L1142.48 683.97 L1143.04 683.97 L1143.6 683.97 L1144.16 683.97 L1144.72 683.97 L1145.28 683.97 L1145.84 683.97 L1146.4 683.97 L1146.96 683.97 L1147.51 683.97 L1148.07 683.97 L1148.63 683.97 L1149.19 683.97 L1149.75 683.97 L1150.31 683.97 L1150.87 683.97 L1151.43 683.97 L1151.99 683.97 L1152.55 683.97 L1153.11 683.97 L1153.67 683.97 L1154.23 683.97 L1154.78 683.97 L1155.34 683.97 L1155.9 683.97 L1156.46 683.97 L1157.02 683.97 L1157.58 683.97 L1158.14 683.97 L1158.7 683.97 L1159.26 683.97 L1159.82 683.97 L1160.38 683.97 L1160.94 683.97 L1161.5 683.97 L1162.05 683.97 L1162.61 683.97 L1163.17 683.97 L1163.73 683.97 L1164.29 683.97 L1164.85 683.97 L1165.41 683.97 L1165.97 683.97 L1166.53 683.97 L1167.09 683.97 L1167.65 683.97 L1168.21 683.97 L1168.77 683.97 L1169.33 683.97 L1169.88 683.97 L1170.44 683.97 L1171 683.97 L1171.56 683.97 L1172.12 683.97 L1172.68 683.97 L1173.24 683.97 L1173.8 683.97 L1174.36 683.97 L1174.92 683.97 L1175.48 683.97 L1176.04 683.97 L1176.6 683.97 L1177.15 683.97 L1177.71 683.97 L1178.27 683.97 L1178.83 683.97 L1179.39 683.97 L1179.95 683.97 L1180.51 683.97 L1181.07 683.97 L1181.63 683.97 L1182.19 683.97 L1182.75 683.97 L1183.31 683.97 L1183.87 683.97 L1184.43 683.97 L1184.98 683.97 L1185.54 683.97 L1186.1 683.97 L1186.66 683.97 L1187.22 683.97 L1187.78 683.97 L1188.34 683.97 L1188.9 683.97 L1189.46 683.97 L1190.02 683.97 L1190.58 683.97 L1191.14 683.97 L1191.7 683.97 L1192.25 683.97 L1192.81 683.97 L1193.37 683.97 L1193.93 683.97 L1194.49 683.97 L1195.05 683.97 L1195.61 683.97 L1196.17 683.97 L1196.73 683.97 L1197.29 683.97 L1197.85 683.97 L1198.41 683.97 L1198.97 683.97 L1199.52 683.97 L1200.08 683.97 L1200.64 683.97 L1201.2 683.97 L1201.76 683.97 L1202.32 683.97 L1202.88 683.97 L1203.44 683.97 L1204 683.97 L1204.56 683.97 L1205.12 683.97 L1205.68 683.97 L1206.24 683.97 L1206.8 683.97 L1207.35 683.97 L1207.91 683.97 L1208.47 683.97 L1209.03 683.97 L1209.59 683.97 L1210.15 683.97 L1210.71 683.97 L1211.27 683.97 L1211.83 683.97 L1212.39 683.97 L1212.95 683.97 L1213.51 683.97 L1214.07 683.97 L1214.62 683.97 L1215.18 683.97 L1215.74 683.97 L1216.3 683.97 L1216.86 683.97 L1217.42 683.97 L1217.98 683.97 L1218.54 683.97 L1219.1 683.97 L1219.66 683.97 L1220.22 683.97 L1220.78 683.97 L1221.34 683.97 L1221.89 683.97 L1222.45 683.97 L1223.01 683.97 L1223.57 683.97 L1224.13 683.97 L1224.69 683.97 L1225.25 683.97 L1225.81 683.97 L1226.37 683.97 L1226.93 683.97 L1227.49 683.97 L1228.05 683.97 L1228.61 683.97 L1229.17 683.97 L1229.72 683.97 L1230.28 683.97 L1230.84 683.97 L1231.4 683.97 L1231.96 683.97 L1232.52 683.97 L1233.08 683.97 L1233.64 683.97 L1234.2 683.97 L1234.76 683.97 L1235.32 683.97 L1235.88 683.97 L1236.44 683.97 L1236.99 683.97 L1237.55 683.97 L1238.11 683.97 L1238.67 683.97 L1239.23 683.97 L1239.79 683.97 L1240.35 683.97 L1240.91 683.97 L1241.47 683.97 L1242.03 683.97 L1242.59 683.97 L1243.15 683.97 L1243.71 683.97 L1244.26 683.97 L1244.82 683.97 L1245.38 683.97 L1245.94 683.97 L1246.5 683.97 L1247.06 683.97 L1247.62 683.97 L1248.18 683.97 L1248.74 683.97 L1249.3 683.97 L1249.86 683.97 L1250.42 683.97 L1250.98 683.97 L1251.54 683.97 L1252.09 683.97 L1252.65 683.97 L1253.21 683.97 L1253.77 683.97 L1254.33 683.97 L1254.89 683.97 L1255.45 683.97 L1256.01 683.97 L1256.57 683.97 L1257.13 683.97 L1257.69 683.97 L1258.25 683.97 L1258.81 683.97 L1259.36 683.97 L1259.92 683.97 L1260.48 683.97 L1261.04 683.97 L1261.6 683.97 L1262.16 683.97 L1262.72 683.97 L1263.28 683.97 L1263.84 683.97 L1264.4 683.97 L1264.96 683.97 L1265.52 683.97 L1266.08 683.97 L1266.63 683.97 L1267.19 683.97 L1267.75 683.97 L1268.31 683.97 L1268.87 683.97 L1269.43 683.97 L1269.99 683.97 L1270.55 683.97 L1271.11 683.97 L1271.67 683.97 L1272.23 683.97 L1272.79 683.97 L1273.35 683.97 L1273.91 683.97 L1274.46 683.97 L1275.02 683.97 L1275.58 683.97 L1276.14 683.97 L1276.7 683.97 L1277.26 683.97 L1277.82 683.97 L1278.38 683.97 L1278.94 683.97 L1279.5 683.97 L1280.06 683.97 L1280.62 683.97 L1281.18 683.97 L1281.73 683.97 L1282.29 683.97 L1282.85 683.97 L1283.41 683.97 L1283.97 683.97 L1284.53 683.97 L1285.09 683.97 L1285.65 683.97 L1286.21 683.97 L1286.77 683.97 L1287.33 683.97 L1287.89 683.97 L1288.45 683.97 L1289 683.97 L1289.56 683.97 L1290.12 683.97 L1290.68 683.97 L1291.24 683.97 L1291.8 683.97 L1292.36 683.97 L1292.92 683.97 L1293.48 683.97 L1294.04 683.97 L1294.6 683.97 L1295.16 683.97 L1295.72 683.97 L1296.28 683.97 L1296.83 683.97 L1297.39 683.97 L1297.95 683.97 L1298.51 683.97 L1299.07 683.97 L1299.63 683.97 L1300.19 683.97 L1300.75 683.97 L1301.31 683.97 L1301.87 683.97 L1302.43 683.97 L1302.99 683.97 L1303.55 683.97 L1304.1 683.97 L1304.66 683.97 L1305.22 683.97 L1305.78 683.97 L1306.34 683.97 L1306.9 683.97 L1307.46 683.97 L1308.02 683.97 L1308.58 683.97 L1309.14 683.97 L1309.7 683.97 L1310.26 683.97 L1310.82 683.97 L1311.38 683.97 L1311.93 683.97 L1312.49 683.97 L1313.05 683.97 L1313.61 683.97 L1314.17 683.97 L1314.73 683.97 L1315.29 683.97 L1315.85 683.97 L1316.41 683.97 L1316.97 683.97 L1317.53 683.97 L1318.09 683.97 L1318.65 683.97 L1319.2 683.97 L1319.76 683.97 L1320.32 683.97 L1320.88 683.97 L1321.44 683.97 L1322 683.97 L1322.56 683.97 L1323.12 683.97 L1323.68 683.97 L1324.24 683.97 L1324.8 683.97 L1325.36 683.97 L1325.92 683.97 L1326.47 683.97 L1327.03 683.97 L1327.59 683.97 L1328.15 683.97 L1328.71 683.97 L1329.27 683.97 L1329.83 683.97 L1330.39 683.97 L1330.95 683.97 L1331.51 683.97 L1332.07 683.97 L1332.63 683.97 L1333.19 683.97 L1333.75 683.97 L1334.3 683.97 L1334.86 683.97 L1335.42 683.97 L1335.98 683.97 L1336.54 683.97 L1337.1 683.97 L1337.66 683.97 L1338.22 683.97 L1338.78 683.97 L1339.34 683.97 L1339.9 683.97 L1340.46 683.97 L1341.02 683.97 L1341.57 683.97 L1342.13 683.97 L1342.69 683.97 L1343.25 683.97 L1343.81 683.97 L1344.37 683.97 L1344.93 683.97 L1345.49 683.97 L1346.05 683.97 L1346.61 683.97 L1347.17 683.97 L1347.73 683.97 L1348.29 683.97 L1348.84 683.97 L1349.4 683.97 L1349.96 683.97 L1350.52 683.97 L1351.08 683.97 L1351.64 683.97 L1352.2 683.97 L1352.76 683.97 L1353.32 683.97 L1353.88 683.97 L1354.44 683.97 L1355 683.97 L1355.56 683.97 L1356.12 683.97 L1356.67 683.97 L1357.23 683.97 L1357.79 683.97 L1358.35 683.97 L1358.91 683.97 L1359.47 683.97 L1360.03 683.97 L1360.59 683.97 L1361.15 683.97 L1361.71 683.97 L1362.27 683.97 L1362.83 683.97 L1363.39 683.97 L1363.94 683.97 L1364.5 683.97 L1365.06 683.97 L1365.62 683.97 L1366.18 683.97 L1366.74 683.97 L1367.3 683.97 L1367.86 683.97 L1368.42 683.97 L1368.98 683.97 L1369.54 683.97 L1370.1 683.97 L1370.66 683.97 L1371.21 683.97 L1371.77 683.97 L1372.33 683.97 L1372.89 683.97 L1373.45 683.97 L1374.01 683.97 L1374.57 683.97 L1375.13 683.97 L1375.69 683.97 L1376.25 683.97 L1376.81 683.97 L1377.37 683.97 L1377.93 683.97 L1378.49 683.97 L1379.04 683.97 L1379.6 683.97 L1380.16 683.97 L1380.72 683.97 L1381.28 683.97 L1381.84 683.97 L1382.4 683.97 L1382.96 683.97 L1383.52 683.97 L1384.08 683.97 L1384.64 683.97 L1385.2 683.97 L1385.76 683.97 L1386.31 683.97 L1386.87 683.97 L1387.43 683.97 L1387.99 683.97 L1388.55 683.97 L1389.11 683.97 L1389.67 683.97 L1390.23 683.97 L1390.79 683.97 L1391.35 683.97 L1391.91 683.97 L1392.47 683.97 L1393.03 683.97 L1393.58 683.97 L1394.14 683.97 L1394.7 683.97 L1395.26 683.97 L1395.82 683.97 L1396.38 683.97 L1396.94 683.97 L1397.5 683.97 L1398.06 683.97 L1398.62 683.97 L1399.18 683.97 L1399.74 683.97 L1400.3 683.97 L1400.86 683.97 L1401.41 683.97 L1401.97 683.97 L1402.53 683.97 L1403.09 683.97 L1403.65 683.97 L1404.21 683.97 L1404.77 683.97 L1405.33 683.97 L1405.89 683.97 L1406.45 683.97 L1407.01 683.97 L1407.57 683.97 L1408.13 683.97 L1408.68 683.97 L1409.24 683.97 L1409.8 683.97 L1410.36 683.97 L1410.92 683.97 L1411.48 683.97 L1412.04 683.97 L1412.6 683.97 L1413.16 683.97 L1413.72 683.97 L1414.28 683.97 L1414.84 683.97 L1415.4 683.97 L1415.95 683.97 L1416.51 683.97 L1417.07 683.97 L1417.63 683.97 L1418.19 683.97 L1418.75 683.97 L1419.31 683.97 L1419.87 683.97 L1420.43 683.97 L1420.99 683.97 L1421.55 683.97 L1422.11 683.97 L1422.67 683.97 L1423.23 683.97 L1423.78 683.97 L1424.34 683.97 L1424.9 683.97 L1425.46 683.97 L1426.02 683.97 L1426.58 683.97 L1427.14 683.97 L1427.7 683.97 L1428.26 683.97 L1428.82 683.97 L1429.38 683.97 L1429.94 683.97 L1430.5 683.97 L1431.05 683.97 L1431.61 683.97 L1432.17 683.97 L1432.73 683.97 L1433.29 683.97 L1433.85 683.97 L1434.41 683.97 L1434.97 683.97 L1435.53 683.97 L1436.09 683.97 L1436.65 683.97 L1437.21 683.97 L1437.77 683.97 L1438.33 683.97 L1438.88 683.97 L1439.44 683.97 L1440 683.97 L1440.56 683.97 L1441.12 683.97 L1441.68 683.97 L1442.24 683.97 L1442.8 683.97 L1443.36 683.97 L1443.92 683.97 L1444.48 683.97 L1445.04 683.97 L1445.6 683.97 L1446.15 683.97 L1446.71 683.97 L1447.27 683.97 L1447.83 683.97 L1448.39 683.97 L1448.95 683.97 L1449.51 683.97 L1450.07 683.97 L1450.63 683.97 L1451.19 683.97 L1451.75 683.97 L1452.31 683.97 L1452.87 683.97 L1453.42 683.97 L1453.98 683.97 L1454.54 683.97 L1455.1 683.97 L1455.66 683.97 L1456.22 683.97 L1456.78 683.97 L1457.34 683.97 L1457.9 683.97 L1458.46 683.97 L1459.02 683.97 L1459.58 683.97 L1460.14 683.97 L1460.7 683.97 L1461.25 683.97 L1461.81 683.97 L1462.37 683.97 L1462.93 683.97 L1463.49 683.97 L1464.05 683.97 L1464.61 683.97 L1465.17 683.97 L1465.73 683.97 L1466.29 683.97 L1466.85 683.97 L1467.41 683.97 L1467.97 683.97 L1468.52 683.97 L1469.08 683.97 L1469.64 683.97 L1470.2 683.97 L1470.76 683.97 L1471.32 683.97 L1471.88 683.97 L1472.44 683.97 L1473 683.97 L1473.56 683.97 L1474.12 683.97 L1474.68 683.97 L1475.24 683.97 L1475.79 683.97 L1476.35 683.97 L1476.91 683.97 L1477.47 683.97 L1478.03 683.97 L1478.59 683.97 L1479.15 683.97 L1479.71 683.97 L1480.27 683.97 L1480.83 683.97 L1481.39 683.97 L1481.95 683.97 L1482.51 683.97 L1483.07 683.97 L1483.62 683.97 L1484.18 683.97 L1484.74 683.97 L1485.3 683.97 L1485.86 683.97 L1486.42 683.97 L1486.98 683.97 L1487.54 683.97 L1488.1 683.97 L1488.66 683.97 L1489.22 683.97 L1489.78 683.97 L1490.34 683.97 L1490.89 683.97 L1491.45 683.97 L1492.01 683.97 L1492.57 683.97 L1493.13 683.97 L1493.69 683.97 L1494.25 683.97 L1494.81 683.97 L1495.37 683.97 L1495.93 683.97 L1496.49 683.97 L1497.05 683.97 L1497.61 683.97 L1498.16 683.97 L1498.72 683.97 L1499.28 683.97 L1499.84 683.97 L1500.4 683.97 L1500.96 683.97 L1501.52 683.97 L1502.08 683.97 L1502.64 683.97 L1503.2 683.97 L1503.76 683.97 L1504.32 683.97 L1504.88 683.97 L1505.44 683.97 L1505.99 683.97 L1506.55 683.97 L1507.11 683.97 L1507.67 683.97 L1508.23 683.97 L1508.79 683.97 L1509.35 683.97 L1509.91 683.97 L1510.47 683.97 L1511.03 683.97 L1511.59 683.97 L1512.15 683.97 L1512.71 683.97 L1513.26 683.97 L1513.82 683.97 L1514.38 683.97 L1514.94 683.97 L1515.5 683.97 L1516.06 683.97 L1516.62 683.97 L1517.18 683.97 L1517.74 683.97 L1518.3 683.97 L1518.86 683.97 L1519.42 683.97 L1519.98 683.97 L1520.53 683.97 L1521.09 683.97 L1521.65 683.97 L1522.21 683.97 L1522.77 683.97 L1523.33 683.97 L1523.89 683.97 L1524.45 683.97 L1525.01 683.97 L1525.57 683.97 L1526.13 683.97 L1526.69 683.97 L1527.25 683.97 L1527.81 683.97 L1528.36 683.97 L1528.92 683.97 L1529.48 683.97 L1530.04 683.97 L1530.6 683.97 L1531.16 683.97 L1531.72 683.97 L1532.28 683.97 L1532.84 683.97 L1533.4 683.97 L1533.96 683.97 L1534.52 683.97 L1535.08 683.97 L1535.63 683.97 L1536.19 683.97 L1536.75 683.97 L1537.31 683.97 L1537.87 683.97 L1538.43 683.97 L1538.99 683.97 L1539.55 683.97 L1540.11 683.97 L1540.67 683.97 L1541.23 683.97 L1541.79 683.97 L1542.35 683.97 L1542.9 683.97 L1543.46 683.97 L1544.02 683.97 L1544.58 683.97 L1545.14 683.97 L1545.7 683.97 L1546.26 683.97 L1546.82 683.97 L1547.38 683.97 L1547.94 683.97 L1548.5 683.97 L1549.06 683.97 L1549.62 683.97 L1550.18 683.97 L1550.73 683.97 L1551.29 683.97 L1551.85 683.97 L1552.41 683.97 L1552.97 683.97 L1553.53 683.97 L1554.09 683.97 L1554.65 683.97 L1555.21 683.97 L1555.77 683.97 L1556.33 683.97 L1556.89 683.97 L1557.45 683.97 L1558 683.97 L1558.56 683.97 L1559.12 683.97 L1559.68 683.97 L1560.24 683.97 L1560.8 683.97 L1561.36 683.97 L1561.92 683.97 L1562.48 683.97 L1563.04 683.97 L1563.6 683.97 L1564.16 683.97 L1564.72 683.97 L1565.28 683.97 L1565.83 683.97 L1566.39 683.97 L1566.95 683.97 L1567.51 683.97 L1568.07 683.97 L1568.63 683.97 L1569.19 683.97 L1569.75 683.97 L1570.31 683.97 L1570.87 683.97 L1571.43 683.97 L1571.99 683.97 L1572.55 683.97 L1573.1 683.97 L1573.66 683.97 L1574.22 683.97 L1574.78 683.97 L1575.34 683.97 L1575.9 683.97 L1576.46 683.97 L1577.02 683.97 L1577.58 683.97 L1578.14 683.97 L1578.7 683.97 L1579.26 683.97 L1579.82 683.97 L1580.37 683.97 L1580.93 683.97 L1581.49 683.97 L1582.05 683.97 L1582.61 683.97 L1583.17 683.97 L1583.73 683.97 L1584.29 683.97 L1584.85 683.97 L1585.41 683.97 L1585.97 683.97 L1586.53 683.97 L1587.09 683.97 L1587.65 683.97 L1588.2 683.97 L1588.76 683.97 L1589.32 683.97 L1589.88 683.97 L1590.44 683.97 L1591 683.97 L1591.56 683.97 L1592.12 683.97 L1592.68 683.97 L1593.24 683.97 L1593.8 683.97 L1594.36 683.97 L1594.92 683.97 L1595.47 683.97 L1596.03 683.97 L1596.59 683.97 L1597.15 683.97 L1597.71 683.97 L1598.27 683.97 L1598.83 683.97 L1599.39 683.97 L1599.95 683.97 L1600.51 683.97 L1601.07 683.97 L1601.63 683.97 L1602.19 683.97 L1602.74 683.97 L1603.3 683.97 L1603.86 683.97 L1604.42 683.97 L1604.98 683.97 L1605.54 683.97 L1606.1 683.97 L1606.66 683.97 L1607.22 683.97 L1607.78 683.97 L1608.34 683.97 L1608.9 683.97 L1609.46 683.97 L1610.02 683.97 L1610.57 683.97 L1611.13 683.97 L1611.69 683.97 L1612.25 683.97 L1612.81 683.97 L1613.37 683.97 L1613.93 683.97 L1614.49 683.97 L1615.05 683.97 L1615.61 683.97 L1616.17 683.97 L1616.73 683.97 L1617.29 683.97 L1617.84 683.97 L1618.4 683.97 L1618.96 683.97 L1619.52 683.97 L1620.08 683.97 L1620.64 683.97 L1621.2 683.97 L1621.76 683.97 L1622.32 683.97 L1622.88 683.97 L1623.44 683.97 L1624 683.97 L1624.56 683.97 L1625.11 683.97 L1625.67 683.97 L1626.23 683.97 L1626.79 683.97 L1627.35 683.97 L1627.91 683.97 L1628.47 683.97 L1629.03 683.97 L1629.59 683.97 L1630.15 683.97 L1630.71 683.97 L1631.27 683.97 L1631.83 683.97 L1632.39 683.97 L1632.94 683.97 L1633.5 683.97 L1634.06 683.97 L1634.62 683.97 L1635.18 683.97 L1635.74 683.97 L1636.3 683.97 L1636.86 683.97 L1637.42 683.97 L1637.98 683.97 L1638.54 683.97 L1639.1 683.97 L1639.66 683.97 L1640.21 683.97 L1640.77 683.97 L1641.33 683.97 L1641.89 683.97 L1642.45 683.97 L1643.01 683.97 L1643.57 683.97 L1644.13 683.97 L1644.69 683.97 L1645.25 683.97 L1645.81 683.97 L1646.37 683.97 L1646.93 683.97 L1647.48 683.97 L1648.04 683.97 L1648.6 683.97 L1649.16 683.97 L1649.72 683.97 L1650.28 683.97 L1650.84 683.97 L1651.4 683.97 L1651.96 683.97 L1652.52 683.97 L1653.08 683.97 L1653.64 683.97 L1654.2 683.97 L1654.76 683.97 L1655.31 683.97 L1655.87 683.97 L1656.43 683.97 L1656.99 683.97 L1657.55 683.97 L1658.11 683.97 L1658.67 683.97 L1659.23 683.97 L1659.79 683.97 L1660.35 683.97 L1660.91 683.97 L1661.47 683.97 L1662.03 683.97 L1662.58 683.97 L1663.14 683.97 L1663.7 683.97 L1664.26 683.97 L1664.82 683.97 L1665.38 683.97 L1665.94 683.97 L1666.5 683.97 L1667.06 683.97 L1667.62 683.97 L1668.18 683.97 L1668.74 683.97 L1669.3 683.97 L1669.85 683.97 L1670.41 683.97 L1670.97 683.97 L1671.53 683.97 L1672.09 683.97 L1672.65 683.97 L1673.21 683.97 L1673.77 683.97 L1674.33 683.97 L1674.89 683.97 L1675.45 683.97 L1676.01 683.97 L1676.57 683.97 L1677.13 683.97 L1677.68 683.97 L1678.24 683.97 L1678.8 683.97 L1679.36 683.97 L1679.92 683.97 L1680.48 683.97 L1681.04 683.97 L1681.6 683.97 L1682.16 683.97 L1682.72 683.97 L1683.28 683.97 L1683.84 683.97 L1684.4 683.97 L1684.95 683.97 L1685.51 683.97 L1686.07 683.97 L1686.63 683.97 L1687.19 683.97 L1687.75 683.97 L1688.31 683.97 L1688.87 683.97 L1689.43 683.97 L1689.99 683.97 L1690.55 683.97 L1691.11 683.97 L1691.67 683.97 L1692.23 683.97 L1692.78 683.97 L1693.34 683.97 L1693.9 683.97 L1694.46 683.97 L1695.02 683.97 L1695.58 683.97 L1696.14 683.97 L1696.7 683.97 L1697.26 683.97 L1697.82 683.97 L1698.38 683.97 L1698.94 683.97 L1699.5 683.97 L1700.05 683.97 L1700.61 683.97 L1701.17 683.97 L1701.73 683.97 L1702.29 683.97 L1702.85 683.97 L1703.41 683.97 L1703.97 683.97 L1704.53 683.97 L1705.09 683.97 L1705.65 683.97 L1706.21 683.97 L1706.77 683.97 L1707.32 683.97 L1707.88 683.97 L1708.44 683.97 L1709 683.97 L1709.56 683.97 L1710.12 683.97 L1710.68 683.97 L1711.24 683.97 L1711.8 683.97 L1712.36 683.97 L1712.92 683.97 L1713.48 683.97 L1714.04 683.97 L1714.6 683.97 L1715.15 683.97 L1715.71 683.97 L1716.27 683.97 L1716.83 683.97 L1717.39 683.97 L1717.95 683.97 L1718.51 683.97 L1719.07 683.97 L1719.63 683.97 L1720.19 683.97 L1720.75 683.97 L1721.31 683.97 L1721.87 683.97 L1722.42 683.97 L1722.98 683.97 L1723.54 683.97 L1724.1 683.97 L1724.66 683.97 L1725.22 683.97 L1725.78 683.97 L1726.34 683.97 L1726.9 683.97 L1727.46 683.97 L1728.02 683.97 L1728.58 683.97 L1729.14 683.97 L1729.69 683.97 L1730.25 683.97 L1730.81 683.97 L1731.37 683.97 L1731.93 683.97 L1732.49 683.97 L1733.05 683.97 L1733.61 683.97 L1734.17 683.97 L1734.73 683.97 L1735.29 683.97 L1735.85 683.97 L1736.41 683.97 L1736.97 683.97 L1737.52 683.97 L1738.08 683.97 L1738.64 683.97 L1739.2 683.97 L1739.76 683.97 L1740.32 683.97 L1740.88 683.97 L1741.44 683.97 L1742 683.97 L1742.56 683.97 L1743.12 683.97 L1743.68 683.97 L1744.24 683.97 L1744.79 683.97 L1745.35 683.97 L1745.91 683.97 L1746.47 683.97 L1747.03 683.97 L1747.59 683.97 L1748.15 683.97 L1748.71 683.97 L1749.27 683.97 L1749.83 683.97 L1750.39 683.97 L1750.95 683.97 L1751.51 683.97 L1752.06 683.97 L1752.62 683.97 L1753.18 683.97 L1753.74 683.97 L1754.3 683.97 L1754.86 683.97 L1755.42 683.97 L1755.98 683.97 L1756.54 683.97 L1757.1 683.97 L1757.66 683.97 L1758.22 683.97 L1758.78 683.97 L1759.34 683.97 L1759.89 683.97 L1760.45 683.97 L1761.01 683.97 L1761.57 683.97 L1762.13 683.97 L1762.69 683.97 L1763.25 683.97 L1763.81 683.97 L1764.37 683.97 L1764.93 683.97 L1765.49 683.97 L1766.05 683.97 L1766.61 683.97 L1767.16 683.97 L1767.72 683.97 L1768.28 683.97 L1768.84 683.97 L1769.4 683.97 L1769.96 683.97 L1770.52 683.97 L1771.08 683.97 L1771.64 683.97 L1772.2 683.97 L1772.76 683.97 L1773.32 683.97 L1773.88 683.97 L1774.43 683.97 L1774.99 683.97 L1775.55 683.97 L1776.11 683.97 L1776.67 683.97 L1777.23 683.97 L1777.79 683.97 L1778.35 683.97 L1778.91 683.97 L1779.47 683.97 L1780.03 683.97 L1780.59 683.97 L1781.15 683.97 L1781.71 683.97 L1782.26 683.97 L1782.82 683.97 L1783.38 683.97 L1783.94 683.97 L1784.5 683.97 L1785.06 683.97 L1785.62 683.97 L1786.18 683.97 L1786.74 683.97 L1787.3 683.97 L1787.86 683.97 L1788.42 683.97 L1788.98 683.97 L1789.53 683.97 L1790.09 683.97 L1790.65 683.97 L1791.21 683.97 L1791.77 683.97 L1792.33 683.97 L1792.89 683.97 L1793.45 683.97 L1794.01 683.97 L1794.57 683.97 L1795.13 683.97 L1795.69 683.97 L1796.25 683.97 L1796.8 683.97 L1797.36 683.97 L1797.92 683.97 L1798.48 683.97 L1799.04 683.97 L1799.6 683.97 L1800.16 683.97 L1800.72 683.97 L1801.28 683.97 L1801.84 683.97 L1802.4 683.97 L1802.96 683.97 L1803.52 683.97 L1804.08 683.97 L1804.63 683.97 L1805.19 683.97 L1805.75 683.97 L1806.31 683.97 L1806.87 683.97 L1807.43 683.97 L1807.99 683.97 L1808.55 683.97 L1809.11 683.97 L1809.67 683.97 L1810.23 683.97 L1810.79 683.97 L1811.35 683.97 L1811.9 683.97 L1812.46 683.97 L1813.02 683.97 L1813.58 683.97 L1814.14 683.97 L1814.7 683.97 L1815.26 683.97 L1815.82 683.97 L1816.38 683.97 L1816.94 683.97 L1817.5 683.97 L1818.06 683.97 L1818.62 683.97 L1819.18 683.97 L1819.73 683.97 L1820.29 683.97 L1820.85 683.97 L1821.41 683.97 L1821.97 683.97 L1822.53 683.97 L1823.09 683.97 L1823.65 683.97 L1824.21 683.97 L1824.77 683.97 L1825.33 683.97 L1825.89 683.97 L1826.45 683.97 L1827 683.97 L1827.56 683.97 L1828.12 683.97 L1828.68 683.97 L1829.24 683.97 L1829.8 683.97 L1830.36 683.97 L1830.92 683.97 L1831.48 683.97 L1832.04 683.97 L1832.6 683.97 L1833.16 683.97 L1833.72 683.97 L1834.27 683.97 L1834.83 683.97 L1835.39 683.97 L1835.95 683.97 L1836.51 683.97 L1837.07 683.97 L1837.63 683.97 L1838.19 683.97 L1838.19 682.135 L1837.63 682.135 L1837.07 682.135 L1836.51 682.135 L1835.95 682.135 L1835.39 682.135 L1834.83 682.135 L1834.27 682.135 L1833.72 682.135 L1833.16 682.135 L1832.6 682.135 L1832.04 682.135 L1831.48 682.135 L1830.92 682.135 L1830.36 682.135 L1829.8 682.135 L1829.24 682.135 L1828.68 682.135 L1828.12 682.135 L1827.56 682.135 L1827 682.135 L1826.45 682.135 L1825.89 682.135 L1825.33 682.135 L1824.77 682.135 L1824.21 682.135 L1823.65 682.135 L1823.09 682.135 L1822.53 682.135 L1821.97 682.135 L1821.41 682.135 L1820.85 682.135 L1820.29 682.135 L1819.73 682.135 L1819.18 682.135 L1818.62 682.135 L1818.06 682.135 L1817.5 682.135 L1816.94 682.135 L1816.38 682.135 L1815.82 682.135 L1815.26 682.135 L1814.7 682.135 L1814.14 682.135 L1813.58 682.135 L1813.02 682.135 L1812.46 682.135 L1811.9 682.135 L1811.35 682.135 L1810.79 682.135 L1810.23 682.135 L1809.67 682.135 L1809.11 682.135 L1808.55 682.135 L1807.99 682.135 L1807.43 682.135 L1806.87 682.135 L1806.31 682.135 L1805.75 682.135 L1805.19 682.135 L1804.63 682.135 L1804.08 682.135 L1803.52 682.135 L1802.96 682.135 L1802.4 682.135 L1801.84 682.135 L1801.28 682.135 L1800.72 682.135 L1800.16 682.135 L1799.6 682.135 L1799.04 682.135 L1798.48 682.135 L1797.92 682.135 L1797.36 682.135 L1796.8 682.135 L1796.25 682.135 L1795.69 682.135 L1795.13 682.135 L1794.57 682.135 L1794.01 682.135 L1793.45 682.135 L1792.89 682.135 L1792.33 682.135 L1791.77 682.135 L1791.21 682.135 L1790.65 682.135 L1790.09 682.135 L1789.53 682.135 L1788.98 682.135 L1788.42 682.135 L1787.86 682.135 L1787.3 682.135 L1786.74 682.135 L1786.18 682.135 L1785.62 682.135 L1785.06 682.135 L1784.5 682.135 L1783.94 682.135 L1783.38 682.135 L1782.82 682.135 L1782.26 682.135 L1781.71 682.135 L1781.15 682.135 L1780.59 682.135 L1780.03 682.135 L1779.47 682.135 L1778.91 682.135 L1778.35 682.135 L1777.79 682.135 L1777.23 682.135 L1776.67 682.135 L1776.11 682.135 L1775.55 682.135 L1774.99 682.135 L1774.43 682.135 L1773.88 682.135 L1773.32 682.135 L1772.76 682.135 L1772.2 682.135 L1771.64 682.135 L1771.08 682.135 L1770.52 682.135 L1769.96 682.135 L1769.4 682.135 L1768.84 682.135 L1768.28 682.135 L1767.72 682.135 L1767.16 682.135 L1766.61 682.135 L1766.05 682.135 L1765.49 682.135 L1764.93 682.135 L1764.37 682.135 L1763.81 682.135 L1763.25 682.135 L1762.69 682.135 L1762.13 682.135 L1761.57 682.135 L1761.01 682.135 L1760.45 682.135 L1759.89 682.135 L1759.34 682.135 L1758.78 682.135 L1758.22 682.135 L1757.66 682.135 L1757.1 682.135 L1756.54 682.135 L1755.98 682.135 L1755.42 682.135 L1754.86 682.135 L1754.3 682.135 L1753.74 682.135 L1753.18 682.135 L1752.62 682.135 L1752.06 682.135 L1751.51 682.135 L1750.95 682.135 L1750.39 682.135 L1749.83 682.135 L1749.27 682.135 L1748.71 682.135 L1748.15 682.135 L1747.59 682.135 L1747.03 682.135 L1746.47 682.135 L1745.91 682.135 L1745.35 682.135 L1744.79 682.135 L1744.24 682.135 L1743.68 682.135 L1743.12 682.135 L1742.56 682.135 L1742 682.135 L1741.44 682.135 L1740.88 682.135 L1740.32 682.135 L1739.76 682.135 L1739.2 682.135 L1738.64 682.135 L1738.08 682.135 L1737.52 682.135 L1736.97 682.135 L1736.41 682.135 L1735.85 682.135 L1735.29 682.135 L1734.73 682.135 L1734.17 682.135 L1733.61 682.135 L1733.05 682.135 L1732.49 682.135 L1731.93 682.135 L1731.37 682.135 L1730.81 682.135 L1730.25 682.135 L1729.69 682.135 L1729.14 682.135 L1728.58 682.135 L1728.02 682.135 L1727.46 682.135 L1726.9 682.135 L1726.34 682.135 L1725.78 682.135 L1725.22 682.135 L1724.66 682.135 L1724.1 682.135 L1723.54 682.135 L1722.98 682.135 L1722.42 682.135 L1721.87 682.135 L1721.31 682.135 L1720.75 682.135 L1720.19 682.135 L1719.63 682.135 L1719.07 682.135 L1718.51 682.135 L1717.95 682.135 L1717.39 682.135 L1716.83 682.135 L1716.27 682.135 L1715.71 682.135 L1715.15 682.135 L1714.6 682.135 L1714.04 682.135 L1713.48 682.135 L1712.92 682.135 L1712.36 682.135 L1711.8 682.135 L1711.24 682.135 L1710.68 682.135 L1710.12 682.135 L1709.56 682.135 L1709 682.135 L1708.44 682.135 L1707.88 682.135 L1707.32 682.135 L1706.77 682.135 L1706.21 682.135 L1705.65 682.135 L1705.09 682.135 L1704.53 682.135 L1703.97 682.135 L1703.41 682.135 L1702.85 682.135 L1702.29 682.135 L1701.73 682.135 L1701.17 682.135 L1700.61 682.135 L1700.05 682.135 L1699.5 682.135 L1698.94 682.135 L1698.38 682.135 L1697.82 682.135 L1697.26 682.135 L1696.7 682.135 L1696.14 682.135 L1695.58 682.135 L1695.02 682.135 L1694.46 682.135 L1693.9 682.135 L1693.34 682.135 L1692.78 682.135 L1692.23 682.135 L1691.67 682.135 L1691.11 682.135 L1690.55 682.135 L1689.99 682.135 L1689.43 682.135 L1688.87 682.135 L1688.31 682.135 L1687.75 682.135 L1687.19 682.135 L1686.63 682.135 L1686.07 682.135 L1685.51 682.135 L1684.95 682.135 L1684.4 682.135 L1683.84 682.135 L1683.28 682.135 L1682.72 682.135 L1682.16 682.135 L1681.6 682.135 L1681.04 682.135 L1680.48 682.135 L1679.92 682.135 L1679.36 682.135 L1678.8 682.135 L1678.24 682.135 L1677.68 682.135 L1677.13 682.135 L1676.57 682.135 L1676.01 682.135 L1675.45 682.135 L1674.89 682.135 L1674.33 682.135 L1673.77 682.135 L1673.21 682.135 L1672.65 682.135 L1672.09 682.135 L1671.53 682.135 L1670.97 682.135 L1670.41 682.135 L1669.85 682.135 L1669.3 682.135 L1668.74 682.135 L1668.18 682.135 L1667.62 682.135 L1667.06 682.135 L1666.5 682.135 L1665.94 682.135 L1665.38 682.135 L1664.82 682.135 L1664.26 682.135 L1663.7 682.135 L1663.14 682.135 L1662.58 682.135 L1662.03 682.135 L1661.47 682.135 L1660.91 682.135 L1660.35 682.135 L1659.79 682.135 L1659.23 682.135 L1658.67 682.135 L1658.11 682.135 L1657.55 682.135 L1656.99 682.135 L1656.43 682.135 L1655.87 682.135 L1655.31 682.135 L1654.76 682.135 L1654.2 682.135 L1653.64 682.135 L1653.08 682.135 L1652.52 682.135 L1651.96 682.135 L1651.4 682.135 L1650.84 682.135 L1650.28 682.135 L1649.72 682.135 L1649.16 682.135 L1648.6 682.135 L1648.04 682.135 L1647.48 682.135 L1646.93 682.135 L1646.37 682.135 L1645.81 682.135 L1645.25 682.135 L1644.69 682.135 L1644.13 682.135 L1643.57 682.135 L1643.01 682.135 L1642.45 682.135 L1641.89 682.135 L1641.33 682.135 L1640.77 682.135 L1640.21 682.135 L1639.66 682.135 L1639.1 682.135 L1638.54 682.135 L1637.98 682.135 L1637.42 682.135 L1636.86 682.135 L1636.3 682.135 L1635.74 682.135 L1635.18 682.135 L1634.62 682.135 L1634.06 682.135 L1633.5 682.135 L1632.94 682.135 L1632.39 682.135 L1631.83 682.135 L1631.27 682.135 L1630.71 682.135 L1630.15 682.135 L1629.59 682.135 L1629.03 682.135 L1628.47 682.135 L1627.91 682.135 L1627.35 682.135 L1626.79 682.135 L1626.23 682.135 L1625.67 682.135 L1625.11 682.135 L1624.56 682.135 L1624 682.135 L1623.44 682.135 L1622.88 682.135 L1622.32 682.135 L1621.76 682.135 L1621.2 682.135 L1620.64 682.135 L1620.08 682.135 L1619.52 682.135 L1618.96 682.135 L1618.4 682.135 L1617.84 682.135 L1617.29 682.135 L1616.73 682.135 L1616.17 682.135 L1615.61 682.135 L1615.05 682.135 L1614.49 682.135 L1613.93 682.135 L1613.37 682.135 L1612.81 682.135 L1612.25 682.135 L1611.69 682.135 L1611.13 682.135 L1610.57 682.135 L1610.02 682.135 L1609.46 682.135 L1608.9 682.135 L1608.34 682.135 L1607.78 682.135 L1607.22 682.135 L1606.66 682.135 L1606.1 682.135 L1605.54 682.135 L1604.98 682.135 L1604.42 682.135 L1603.86 682.135 L1603.3 682.135 L1602.74 682.135 L1602.19 682.135 L1601.63 682.135 L1601.07 682.135 L1600.51 682.135 L1599.95 682.135 L1599.39 682.135 L1598.83 682.135 L1598.27 682.135 L1597.71 682.135 L1597.15 682.135 L1596.59 682.135 L1596.03 682.135 L1595.47 682.135 L1594.92 682.135 L1594.36 682.135 L1593.8 682.135 L1593.24 682.135 L1592.68 682.135 L1592.12 682.135 L1591.56 682.135 L1591 682.135 L1590.44 682.135 L1589.88 682.135 L1589.32 682.135 L1588.76 682.135 L1588.2 682.135 L1587.65 682.135 L1587.09 682.135 L1586.53 682.135 L1585.97 682.135 L1585.41 682.135 L1584.85 682.135 L1584.29 682.135 L1583.73 682.135 L1583.17 682.135 L1582.61 682.135 L1582.05 682.135 L1581.49 682.135 L1580.93 682.135 L1580.37 682.135 L1579.82 682.135 L1579.26 682.135 L1578.7 682.135 L1578.14 682.135 L1577.58 682.135 L1577.02 682.135 L1576.46 682.135 L1575.9 682.135 L1575.34 682.135 L1574.78 682.135 L1574.22 682.135 L1573.66 682.135 L1573.1 682.135 L1572.55 682.135 L1571.99 682.135 L1571.43 682.135 L1570.87 682.135 L1570.31 682.135 L1569.75 682.135 L1569.19 682.135 L1568.63 682.135 L1568.07 682.135 L1567.51 682.135 L1566.95 682.135 L1566.39 682.135 L1565.83 682.135 L1565.28 682.135 L1564.72 682.135 L1564.16 682.135 L1563.6 682.135 L1563.04 682.135 L1562.48 682.135 L1561.92 682.135 L1561.36 682.135 L1560.8 682.135 L1560.24 682.135 L1559.68 682.135 L1559.12 682.135 L1558.56 682.135 L1558 682.135 L1557.45 682.135 L1556.89 682.135 L1556.33 682.135 L1555.77 682.135 L1555.21 682.135 L1554.65 682.135 L1554.09 682.135 L1553.53 682.135 L1552.97 682.135 L1552.41 682.135 L1551.85 682.135 L1551.29 682.135 L1550.73 682.135 L1550.18 682.135 L1549.62 682.135 L1549.06 682.135 L1548.5 682.135 L1547.94 682.135 L1547.38 682.135 L1546.82 682.135 L1546.26 682.135 L1545.7 682.135 L1545.14 682.135 L1544.58 682.135 L1544.02 682.135 L1543.46 682.135 L1542.9 682.135 L1542.35 682.135 L1541.79 682.135 L1541.23 682.135 L1540.67 682.135 L1540.11 682.135 L1539.55 682.135 L1538.99 682.135 L1538.43 682.135 L1537.87 682.135 L1537.31 682.135 L1536.75 682.135 L1536.19 682.135 L1535.63 682.135 L1535.08 682.135 L1534.52 682.135 L1533.96 682.135 L1533.4 682.135 L1532.84 682.135 L1532.28 682.135 L1531.72 682.135 L1531.16 682.135 L1530.6 682.135 L1530.04 682.135 L1529.48 682.135 L1528.92 682.135 L1528.36 682.135 L1527.81 682.135 L1527.25 682.135 L1526.69 682.135 L1526.13 682.135 L1525.57 682.135 L1525.01 682.135 L1524.45 682.135 L1523.89 682.135 L1523.33 682.135 L1522.77 682.135 L1522.21 682.135 L1521.65 682.135 L1521.09 682.135 L1520.53 682.135 L1519.98 682.135 L1519.42 682.135 L1518.86 682.135 L1518.3 682.135 L1517.74 682.135 L1517.18 682.135 L1516.62 682.135 L1516.06 682.135 L1515.5 682.135 L1514.94 682.135 L1514.38 682.135 L1513.82 682.135 L1513.26 682.135 L1512.71 682.135 L1512.15 682.135 L1511.59 682.135 L1511.03 682.135 L1510.47 682.135 L1509.91 682.135 L1509.35 682.135 L1508.79 682.135 L1508.23 682.135 L1507.67 682.135 L1507.11 682.135 L1506.55 682.135 L1505.99 682.135 L1505.44 682.135 L1504.88 682.135 L1504.32 682.135 L1503.76 682.135 L1503.2 682.135 L1502.64 682.135 L1502.08 682.135 L1501.52 682.135 L1500.96 682.135 L1500.4 682.135 L1499.84 682.135 L1499.28 682.135 L1498.72 682.135 L1498.16 682.135 L1497.61 682.135 L1497.05 682.135 L1496.49 682.135 L1495.93 682.135 L1495.37 682.135 L1494.81 682.135 L1494.25 682.135 L1493.69 682.135 L1493.13 682.135 L1492.57 682.135 L1492.01 682.135 L1491.45 682.135 L1490.89 682.135 L1490.34 682.135 L1489.78 682.135 L1489.22 682.135 L1488.66 682.135 L1488.1 682.135 L1487.54 682.135 L1486.98 682.135 L1486.42 682.135 L1485.86 682.135 L1485.3 682.135 L1484.74 682.135 L1484.18 682.135 L1483.62 682.135 L1483.07 682.135 L1482.51 682.135 L1481.95 682.135 L1481.39 682.135 L1480.83 682.135 L1480.27 682.135 L1479.71 682.135 L1479.15 682.135 L1478.59 682.135 L1478.03 682.135 L1477.47 682.135 L1476.91 682.135 L1476.35 682.135 L1475.79 682.135 L1475.24 682.135 L1474.68 682.135 L1474.12 682.135 L1473.56 682.135 L1473 682.135 L1472.44 682.135 L1471.88 682.135 L1471.32 682.135 L1470.76 682.135 L1470.2 682.135 L1469.64 682.135 L1469.08 682.135 L1468.52 682.135 L1467.97 682.135 L1467.41 682.135 L1466.85 682.135 L1466.29 682.135 L1465.73 682.135 L1465.17 682.135 L1464.61 682.135 L1464.05 682.135 L1463.49 682.135 L1462.93 682.135 L1462.37 682.135 L1461.81 682.135 L1461.25 682.135 L1460.7 682.135 L1460.14 682.135 L1459.58 682.135 L1459.02 682.135 L1458.46 682.135 L1457.9 682.135 L1457.34 682.135 L1456.78 682.135 L1456.22 682.135 L1455.66 682.135 L1455.1 682.135 L1454.54 682.135 L1453.98 682.135 L1453.42 682.135 L1452.87 682.135 L1452.31 682.135 L1451.75 682.135 L1451.19 682.135 L1450.63 682.135 L1450.07 682.135 L1449.51 682.135 L1448.95 682.135 L1448.39 682.135 L1447.83 682.135 L1447.27 682.135 L1446.71 682.135 L1446.15 682.135 L1445.6 682.135 L1445.04 682.135 L1444.48 682.135 L1443.92 682.135 L1443.36 682.135 L1442.8 682.135 L1442.24 682.135 L1441.68 682.135 L1441.12 682.135 L1440.56 682.135 L1440 682.135 L1439.44 682.135 L1438.88 682.135 L1438.33 682.135 L1437.77 682.135 L1437.21 682.135 L1436.65 682.135 L1436.09 682.135 L1435.53 682.135 L1434.97 682.135 L1434.41 682.135 L1433.85 682.135 L1433.29 682.135 L1432.73 682.135 L1432.17 682.135 L1431.61 682.135 L1431.05 682.135 L1430.5 682.135 L1429.94 682.135 L1429.38 682.135 L1428.82 682.135 L1428.26 682.135 L1427.7 682.135 L1427.14 682.135 L1426.58 682.135 L1426.02 682.135 L1425.46 682.135 L1424.9 682.135 L1424.34 682.135 L1423.78 682.135 L1423.23 682.135 L1422.67 682.135 L1422.11 682.135 L1421.55 682.135 L1420.99 682.135 L1420.43 682.135 L1419.87 682.135 L1419.31 682.135 L1418.75 682.135 L1418.19 682.135 L1417.63 682.135 L1417.07 682.135 L1416.51 682.135 L1415.95 682.135 L1415.4 682.135 L1414.84 682.135 L1414.28 682.135 L1413.72 682.135 L1413.16 682.135 L1412.6 682.135 L1412.04 682.135 L1411.48 682.135 L1410.92 682.135 L1410.36 682.135 L1409.8 682.135 L1409.24 682.135 L1408.68 682.135 L1408.13 682.135 L1407.57 682.135 L1407.01 682.135 L1406.45 682.135 L1405.89 682.135 L1405.33 682.135 L1404.77 682.135 L1404.21 682.135 L1403.65 682.135 L1403.09 682.135 L1402.53 682.135 L1401.97 682.135 L1401.41 682.135 L1400.86 682.135 L1400.3 682.135 L1399.74 682.135 L1399.18 682.135 L1398.62 682.135 L1398.06 682.135 L1397.5 682.135 L1396.94 682.135 L1396.38 682.135 L1395.82 682.135 L1395.26 682.135 L1394.7 682.135 L1394.14 682.135 L1393.58 682.135 L1393.03 682.135 L1392.47 682.135 L1391.91 682.135 L1391.35 682.135 L1390.79 682.135 L1390.23 682.135 L1389.67 682.135 L1389.11 682.135 L1388.55 682.135 L1387.99 682.135 L1387.43 682.135 L1386.87 682.135 L1386.31 682.135 L1385.76 682.135 L1385.2 682.135 L1384.64 682.135 L1384.08 682.135 L1383.52 682.135 L1382.96 682.135 L1382.4 682.135 L1381.84 682.135 L1381.28 682.135 L1380.72 682.135 L1380.16 682.135 L1379.6 682.135 L1379.04 682.135 L1378.49 682.135 L1377.93 682.135 L1377.37 682.135 L1376.81 682.135 L1376.25 682.135 L1375.69 682.135 L1375.13 682.135 L1374.57 682.135 L1374.01 682.135 L1373.45 682.135 L1372.89 682.135 L1372.33 682.135 L1371.77 682.135 L1371.21 682.135 L1370.66 682.135 L1370.1 682.135 L1369.54 682.135 L1368.98 682.135 L1368.42 682.135 L1367.86 682.135 L1367.3 682.135 L1366.74 682.135 L1366.18 682.135 L1365.62 682.135 L1365.06 682.135 L1364.5 682.135 L1363.94 682.135 L1363.39 682.135 L1362.83 682.135 L1362.27 682.135 L1361.71 682.135 L1361.15 682.135 L1360.59 682.135 L1360.03 682.135 L1359.47 682.135 L1358.91 682.135 L1358.35 682.135 L1357.79 682.135 L1357.23 682.135 L1356.67 682.135 L1356.12 682.135 L1355.56 682.135 L1355 682.135 L1354.44 682.135 L1353.88 682.135 L1353.32 682.135 L1352.76 682.135 L1352.2 682.135 L1351.64 682.135 L1351.08 682.135 L1350.52 682.135 L1349.96 682.135 L1349.4 682.135 L1348.84 682.135 L1348.29 682.135 L1347.73 682.135 L1347.17 682.135 L1346.61 682.135 L1346.05 682.135 L1345.49 682.135 L1344.93 682.135 L1344.37 682.135 L1343.81 682.135 L1343.25 682.135 L1342.69 682.135 L1342.13 682.135 L1341.57 682.135 L1341.02 682.135 L1340.46 682.135 L1339.9 682.135 L1339.34 682.135 L1338.78 682.135 L1338.22 682.135 L1337.66 682.135 L1337.1 682.135 L1336.54 682.135 L1335.98 682.135 L1335.42 682.135 L1334.86 682.135 L1334.3 682.135 L1333.75 682.135 L1333.19 682.135 L1332.63 682.135 L1332.07 682.135 L1331.51 682.135 L1330.95 682.135 L1330.39 682.135 L1329.83 682.135 L1329.27 682.135 L1328.71 682.135 L1328.15 682.135 L1327.59 682.135 L1327.03 682.135 L1326.47 682.135 L1325.92 682.135 L1325.36 682.135 L1324.8 682.135 L1324.24 682.135 L1323.68 682.135 L1323.12 682.135 L1322.56 682.135 L1322 682.135 L1321.44 682.135 L1320.88 682.135 L1320.32 682.135 L1319.76 682.135 L1319.2 682.135 L1318.65 682.135 L1318.09 682.135 L1317.53 682.135 L1316.97 682.135 L1316.41 682.135 L1315.85 682.135 L1315.29 682.135 L1314.73 682.135 L1314.17 682.135 L1313.61 682.135 L1313.05 682.135 L1312.49 682.135 L1311.93 682.135 L1311.38 682.135 L1310.82 682.135 L1310.26 682.135 L1309.7 682.135 L1309.14 682.135 L1308.58 682.135 L1308.02 682.135 L1307.46 682.135 L1306.9 682.135 L1306.34 682.135 L1305.78 682.135 L1305.22 682.135 L1304.66 682.135 L1304.1 682.135 L1303.55 682.135 L1302.99 682.135 L1302.43 682.135 L1301.87 682.135 L1301.31 682.135 L1300.75 682.135 L1300.19 682.135 L1299.63 682.135 L1299.07 682.135 L1298.51 682.135 L1297.95 682.135 L1297.39 682.135 L1296.83 682.135 L1296.28 682.135 L1295.72 682.135 L1295.16 682.135 L1294.6 682.135 L1294.04 682.135 L1293.48 682.135 L1292.92 682.135 L1292.36 682.135 L1291.8 682.135 L1291.24 682.135 L1290.68 682.135 L1290.12 682.135 L1289.56 682.135 L1289 682.135 L1288.45 682.135 L1287.89 682.135 L1287.33 682.135 L1286.77 682.135 L1286.21 682.135 L1285.65 682.135 L1285.09 682.135 L1284.53 682.135 L1283.97 682.135 L1283.41 682.135 L1282.85 682.135 L1282.29 682.135 L1281.73 682.135 L1281.18 682.135 L1280.62 682.135 L1280.06 682.135 L1279.5 682.135 L1278.94 682.135 L1278.38 682.135 L1277.82 682.135 L1277.26 682.135 L1276.7 682.135 L1276.14 682.135 L1275.58 682.135 L1275.02 682.135 L1274.46 682.135 L1273.91 682.135 L1273.35 682.135 L1272.79 682.135 L1272.23 682.135 L1271.67 682.135 L1271.11 682.135 L1270.55 682.135 L1269.99 682.135 L1269.43 682.135 L1268.87 682.135 L1268.31 682.135 L1267.75 682.135 L1267.19 682.135 L1266.63 682.135 L1266.08 682.135 L1265.52 682.135 L1264.96 682.135 L1264.4 682.135 L1263.84 682.135 L1263.28 682.135 L1262.72 682.135 L1262.16 682.135 L1261.6 682.135 L1261.04 682.135 L1260.48 682.135 L1259.92 682.135 L1259.36 682.135 L1258.81 682.135 L1258.25 682.135 L1257.69 682.135 L1257.13 682.135 L1256.57 682.135 L1256.01 682.135 L1255.45 682.135 L1254.89 682.135 L1254.33 682.135 L1253.77 682.135 L1253.21 682.135 L1252.65 682.135 L1252.09 682.135 L1251.54 682.135 L1250.98 682.135 L1250.42 682.135 L1249.86 682.135 L1249.3 682.135 L1248.74 682.135 L1248.18 682.135 L1247.62 682.135 L1247.06 682.135 L1246.5 682.135 L1245.94 682.135 L1245.38 682.135 L1244.82 682.135 L1244.26 682.135 L1243.71 682.135 L1243.15 682.135 L1242.59 682.135 L1242.03 682.135 L1241.47 682.135 L1240.91 682.135 L1240.35 682.135 L1239.79 682.135 L1239.23 682.135 L1238.67 682.135 L1238.11 682.135 L1237.55 682.135 L1236.99 682.135 L1236.44 682.135 L1235.88 682.135 L1235.32 682.135 L1234.76 682.135 L1234.2 682.135 L1233.64 682.135 L1233.08 682.135 L1232.52 682.135 L1231.96 682.135 L1231.4 682.135 L1230.84 682.135 L1230.28 682.135 L1229.72 682.135 L1229.17 682.135 L1228.61 682.135 L1228.05 682.135 L1227.49 682.135 L1226.93 682.135 L1226.37 682.135 L1225.81 682.135 L1225.25 682.135 L1224.69 682.135 L1224.13 682.135 L1223.57 682.135 L1223.01 682.135 L1222.45 682.135 L1221.89 682.135 L1221.34 682.135 L1220.78 682.135 L1220.22 682.135 L1219.66 682.135 L1219.1 682.135 L1218.54 682.135 L1217.98 682.135 L1217.42 682.135 L1216.86 682.135 L1216.3 682.135 L1215.74 682.135 L1215.18 682.135 L1214.62 682.135 L1214.07 682.135 L1213.51 682.135 L1212.95 682.135 L1212.39 682.135 L1211.83 682.135 L1211.27 682.135 L1210.71 682.135 L1210.15 682.135 L1209.59 682.135 L1209.03 682.135 L1208.47 682.135 L1207.91 682.135 L1207.35 682.135 L1206.8 682.135 L1206.24 682.135 L1205.68 682.135 L1205.12 682.135 L1204.56 682.135 L1204 682.135 L1203.44 682.135 L1202.88 682.135 L1202.32 682.135 L1201.76 682.135 L1201.2 682.135 L1200.64 682.135 L1200.08 682.135 L1199.52 682.135 L1198.97 682.135 L1198.41 682.135 L1197.85 682.135 L1197.29 682.135 L1196.73 682.135 L1196.17 682.135 L1195.61 682.135 L1195.05 682.135 L1194.49 682.135 L1193.93 682.135 L1193.37 682.135 L1192.81 682.135 L1192.25 682.135 L1191.7 682.135 L1191.14 682.135 L1190.58 682.135 L1190.02 682.135 L1189.46 682.135 L1188.9 682.135 L1188.34 682.135 L1187.78 682.135 L1187.22 682.135 L1186.66 682.135 L1186.1 682.135 L1185.54 682.135 L1184.98 682.135 L1184.43 682.135 L1183.87 682.135 L1183.31 682.135 L1182.75 682.135 L1182.19 682.135 L1181.63 682.135 L1181.07 682.135 L1180.51 682.135 L1179.95 682.135 L1179.39 682.135 L1178.83 682.135 L1178.27 682.135 L1177.71 682.135 L1177.15 682.135 L1176.6 682.135 L1176.04 682.135 L1175.48 682.135 L1174.92 682.135 L1174.36 682.135 L1173.8 682.135 L1173.24 682.135 L1172.68 682.135 L1172.12 682.135 L1171.56 682.135 L1171 682.135 L1170.44 682.135 L1169.88 682.135 L1169.33 682.135 L1168.77 682.135 L1168.21 682.135 L1167.65 682.135 L1167.09 682.135 L1166.53 682.135 L1165.97 682.135 L1165.41 682.135 L1164.85 682.135 L1164.29 682.135 L1163.73 682.135 L1163.17 682.135 L1162.61 682.135 L1162.05 682.135 L1161.5 682.135 L1160.94 682.135 L1160.38 682.135 L1159.82 682.135 L1159.26 682.135 L1158.7 682.135 L1158.14 682.135 L1157.58 682.135 L1157.02 682.135 L1156.46 682.135 L1155.9 682.135 L1155.34 682.135 L1154.78 682.135 L1154.23 682.135 L1153.67 682.135 L1153.11 682.135 L1152.55 682.135 L1151.99 682.135 L1151.43 682.135 L1150.87 682.135 L1150.31 682.135 L1149.75 682.135 L1149.19 682.135 L1148.63 682.135 L1148.07 682.135 L1147.51 682.135 L1146.96 682.135 L1146.4 682.135 L1145.84 682.135 L1145.28 682.135 L1144.72 682.135 L1144.16 682.135 L1143.6 682.135 L1143.04 682.135 L1142.48 682.135 L1141.92 682.135 L1141.36 682.135 L1140.8 682.135 L1140.24 682.135 L1139.68 682.135 L1139.13 682.135 L1138.57 682.135 L1138.01 682.135 L1137.45 682.135 L1136.89 682.135 L1136.33 682.135 L1135.77 682.135 L1135.21 682.135 L1134.65 682.135 L1134.09 682.135 L1133.53 682.135 L1132.97 682.135 L1132.41 682.135 L1131.86 682.135 L1131.3 682.135 L1130.74 682.135 L1130.18 682.135 L1129.62 682.135 L1129.06 682.135 L1128.5 682.135 L1127.94 682.135 L1127.38 682.135 L1126.82 682.135 L1126.26 682.135 L1125.7 682.135 L1125.14 682.135 L1124.59 682.135 L1124.03 682.135 L1123.47 682.135 L1122.91 682.135 L1122.35 682.135 L1121.79 682.135 L1121.23 682.135 L1120.67 682.135 L1120.11 682.135 L1119.55 682.135 L1118.99 682.135 L1118.43 682.135 L1117.87 682.135 L1117.31 682.135 L1116.76 682.135 L1116.2 682.135 L1115.64 682.135 L1115.08 682.135 L1114.52 682.135 L1113.96 682.135 L1113.4 682.135 L1112.84 682.135 L1112.28 682.135 L1111.72 682.135 L1111.16 682.135 L1110.6 682.135 L1110.04 682.135 L1109.49 682.135 L1108.93 682.135 L1108.37 682.135 L1107.81 682.135 L1107.25 682.135 L1106.69 682.135 L1106.13 682.135 L1105.57 682.135 L1105.01 682.135 L1104.45 682.135 L1103.89 682.135 L1103.33 682.135 L1102.77 682.135 L1102.22 682.135 L1101.66 682.135 L1101.1 682.135 L1100.54 682.135 L1099.98 682.135 L1099.42 682.135 L1098.86 682.135 L1098.3 682.135 L1097.74 682.135 L1097.18 682.135 L1096.62 682.135 L1096.06 682.135 L1095.5 682.135 L1094.94 682.135 L1094.39 682.135 L1093.83 682.135 L1093.27 682.135 L1092.71 682.135 L1092.15 682.135 L1091.59 682.135 L1091.03 682.135 L1090.47 682.135 L1089.91 682.135 L1089.35 682.135 L1088.79 682.135 L1088.23 682.135 L1087.67 682.135 L1087.12 682.135 L1086.56 682.135 L1086 682.135 L1085.44 682.135 L1084.88 682.135 L1084.32 682.135 L1083.76 682.135 L1083.2 682.135 L1082.64 682.135 L1082.08 682.135 L1081.52 682.135 L1080.96 682.135 L1080.4 682.135 L1079.85 682.135 L1079.29 682.135 L1078.73 682.135 L1078.17 682.135 L1077.61 682.135 L1077.05 682.135 L1076.49 682.135 L1075.93 682.135 L1075.37 682.135 L1074.81 682.135 L1074.25 682.135 L1073.69 682.135 L1073.13 682.135 L1072.57 682.135 L1072.02 682.135 L1071.46 682.135 L1070.9 682.135 L1070.34 682.135 L1069.78 682.135 L1069.22 682.135 L1068.66 682.135 L1068.1 682.135 L1067.54 682.135 L1066.98 682.135 L1066.42 682.135 L1065.86 682.135 L1065.3 682.135 L1064.75 682.135 L1064.19 682.135 L1063.63 682.135 L1063.07 682.135 L1062.51 682.135 L1061.95 682.135 L1061.39 682.135 L1060.83 682.135 L1060.27 682.135 L1059.71 682.135 L1059.15 682.135 L1058.59 682.135 L1058.03 682.135 L1057.48 682.135 L1056.92 682.135 L1056.36 682.135 L1055.8 682.135 L1055.24 682.135 L1054.68 682.135 L1054.12 682.135 L1053.56 682.135 L1053 682.135 L1052.44 682.135 L1051.88 682.135 L1051.32 682.135 L1050.76 682.135 L1050.2 682.135 L1049.65 682.135 L1049.09 682.135 L1048.53 682.135 L1047.97 682.135 L1047.41 682.135 L1046.85 682.135 L1046.29 682.135 L1045.73 682.135 L1045.17 682.135 L1044.61 682.135 L1044.05 682.135 L1043.49 682.135 L1042.93 682.135 L1042.38 682.135 L1041.82 682.135 L1041.26 682.135 L1040.7 682.135 L1040.14 682.135 L1039.58 682.135 L1039.02 682.135 L1038.46 682.135 L1037.9 682.135 L1037.34 682.135 L1036.78 682.135 L1036.22 682.135 L1035.66 682.135 L1035.1 682.135 L1034.55 682.135 L1033.99 682.135 L1033.43 682.135 L1032.87 682.135 L1032.31 682.135 L1031.75 682.135 L1031.19 682.135 L1030.63 682.135 L1030.07 682.135 L1029.51 682.135 L1028.95 682.135 L1028.39 682.135 L1027.83 682.135 L1027.28 682.135 L1026.72 682.135 L1026.16 682.135 L1025.6 682.135 L1025.04 682.135 L1024.48 682.135 L1023.92 682.135 L1023.36 682.135 L1022.8 682.135 L1022.24 682.135 L1021.68 682.135 L1021.12 682.135 L1020.56 682.135 L1020.01 682.135 L1019.45 682.135 L1018.89 682.135 L1018.33 682.135 L1017.77 682.135 L1017.21 682.135 L1016.65 682.135 L1016.09 682.135 L1015.53 682.135 L1014.97 682.135 L1014.41 682.135 L1013.85 682.135 L1013.29 682.135 L1012.73 682.135 L1012.18 682.135 L1011.62 682.135 L1011.06 682.135 L1010.5 682.135 L1009.94 682.135 L1009.38 682.135 L1008.82 682.135 L1008.26 682.135 L1007.7 682.135 L1007.14 682.135 L1006.58 682.135 L1006.02 682.135 L1005.46 682.135 L1004.91 682.135 L1004.35 682.135 L1003.79 682.135 L1003.23 682.135 L1002.67 682.135 L1002.11 682.135 L1001.55 682.135 L1000.99 682.135 L1000.43 682.135 L999.872 682.135 L999.313 682.135 L998.754 682.135 L998.194 682.135 L997.635 682.135 L997.076 682.135 L996.517 682.135 L995.957 682.135 L995.398 682.135 L994.839 682.135 L994.28 682.135 L993.72 682.135 L993.161 682.135 L992.602 682.135 L992.043 682.135 L991.483 682.135 L990.924 682.135 L990.365 682.135 L989.806 682.135 L989.246 682.135 L988.687 682.135 L988.128 682.135 L987.569 682.135 L987.009 682.135 L986.45 682.135 L985.891 682.135 L985.332 682.135 L984.772 682.135 L984.213 682.135 L983.654 682.135 L983.095 682.135 L982.535 682.135 L981.976 682.135 L981.417 682.135 L980.858 682.135 L980.298 682.135 L979.739 682.135 L979.18 682.135 L978.621 682.135 L978.061 682.135 L977.502 682.135 L976.943 682.135 L976.384 682.135 L975.824 682.135 L975.265 682.135 L974.706 682.135 L974.147 682.135 L973.587 682.135 L973.028 682.135 L972.469 682.135 L971.91 682.135 L971.35 682.135 L970.791 682.135 L970.232 682.135 L969.673 682.135 L969.113 682.135 L968.554 682.135 L967.995 682.135 L967.436 682.135 L966.876 682.135 L966.317 682.135 L965.758 682.135 L965.199 682.135 L964.639 682.135 L964.08 682.135 L963.521 682.135 L962.962 682.135 L962.402 682.135 L961.843 682.135 L961.284 682.135 L960.725 682.135 L960.165 682.135 L959.606 682.135 L959.047 682.135 L958.488 682.135 L957.928 682.135 L957.369 682.135 L956.81 682.135 L956.251 682.135 L955.691 682.135 L955.132 682.135 L954.573 682.135 L954.014 682.135 L953.454 682.135 L952.895 682.135 L952.336 682.135 L951.777 682.135 L951.217 682.135 L950.658 682.135 L950.099 682.135 L949.54 682.135 L948.98 682.135 L948.421 682.135 L947.862 682.135 L947.303 682.135 L946.743 682.135 L946.184 682.135 L945.625 682.135 L945.066 682.135 L944.506 682.135 L943.947 682.135 L943.388 682.135 L942.829 682.135 L942.269 682.135 L941.71 682.135 L941.151 682.135 L940.592 682.135 L940.032 682.135 L939.473 682.135 L938.914 682.135 L938.355 682.135 L937.795 682.135 L937.236 682.135 L936.677 682.135 L936.118 682.135 L935.558 682.135 L934.999 682.135 L934.44 682.135 L933.881 682.135 L933.321 682.135 L932.762 682.135 L932.203 682.135 L931.644 682.135 L931.084 682.135 L930.525 682.135 L929.966 682.135 L929.406 682.135 L928.847 682.135 L928.288 682.135 L927.729 682.135 L927.169 682.135 L926.61 682.135 L926.051 682.135 L925.492 682.135 L924.932 682.135 L924.373 682.135 L923.814 682.135 L923.255 682.135 L922.695 682.135 L922.136 682.135 L921.577 682.135 L921.018 682.135 L920.458 682.135 L919.899 682.135 L919.34 682.135 L918.781 682.135 L918.221 682.135 L917.662 682.135 L917.103 682.135 L916.544 682.135 L915.984 682.135 L915.425 682.135 L914.866 682.135 L914.307 682.135 L913.747 682.135 L913.188 682.135 L912.629 682.135 L912.07 682.135 L911.51 682.135 L910.951 682.135 L910.392 682.135 L909.833 682.135 L909.273 682.135 L908.714 682.135 L908.155 682.135 L907.596 682.135 L907.036 682.135 L906.477 682.135 L905.918 682.135 L905.359 682.135 L904.799 682.135 L904.24 682.135 L903.681 682.135 L903.122 682.135 L902.562 682.135 L902.003 682.135 L901.444 682.135 L900.885 682.135 L900.325 682.135 L899.766 682.135 L899.207 682.135 L898.648 682.135 L898.088 682.135 L897.529 682.135 L896.97 682.135 L896.411 682.135 L895.851 682.135 L895.292 682.135 L894.733 682.135 L894.174 682.135 L893.614 682.135 L893.055 682.135 L892.496 682.135 L891.937 682.135 L891.377 682.135 L890.818 682.135 L890.259 682.135 L889.7 682.135 L889.14 682.135 L888.581 682.135 L888.022 682.135 L887.463 682.135 L886.903 682.135 L886.344 682.135 L885.785 682.135 L885.226 682.135 L884.666 682.135 L884.107 682.135 L883.548 682.135 L882.989 682.135 L882.429 682.135 L881.87 682.135 L881.311 682.135 L880.752 682.135 L880.192 682.135 L879.633 682.135 L879.074 682.135 L878.515 682.135 L877.955 682.135 L877.396 682.135 L876.837 682.135 L876.278 682.135 L875.718 682.135 L875.159 682.135 L874.6 682.135 L874.041 682.135 L873.481 682.135 L872.922 682.135 L872.363 682.135 L871.804 682.135 L871.244 682.135 L870.685 682.135 L870.126 682.135 L869.567 682.135 L869.007 682.135 L868.448 682.135 L867.889 682.135 L867.33 682.135 L866.77 682.135 L866.211 682.135 L865.652 682.135 L865.093 682.135 L864.533 682.135 L863.974 682.135 L863.415 682.135 L862.856 682.135 L862.296 682.135 L861.737 682.135 L861.178 682.135 L860.619 682.135 L860.059 682.135 L859.5 682.135 L858.941 682.135 L858.382 682.135 L857.822 682.135 L857.263 682.135 L856.704 682.135 L856.145 682.135 L855.585 682.135 L855.026 682.135 L854.467 682.135 L853.908 682.135 L853.348 682.135 L852.789 682.135 L852.23 682.135 L851.671 682.135 L851.111 682.135 L850.552 682.135 L849.993 682.135 L849.434 682.135 L848.874 682.135 L848.315 682.135 L847.756 682.135 L847.197 682.135 L846.637 682.135 L846.078 682.135 L845.519 682.135 L844.96 682.135 L844.4 682.135 L843.841 682.135 L843.282 682.135 L842.723 682.135 L842.163 682.135 L841.604 682.135 L841.045 682.135 L840.486 682.135 L839.926 682.135 L839.367 682.135 L838.808 682.135 L838.249 682.135 L837.689 682.135 L837.13 682.135 L836.571 682.135 L836.012 682.135 L835.452 682.135 L834.893 682.135 L834.334 682.135 L833.775 682.135 L833.215 682.135 L832.656 682.135 L832.097 682.135 L831.538 682.135 L830.978 682.135 L830.419 682.135 L829.86 682.135 L829.301 682.135 L828.741 682.135 L828.182 682.135 L827.623 682.135 L827.064 682.135 L826.504 682.135 L825.945 682.135 L825.386 682.135 L824.827 682.135 L824.267 682.135 L823.708 682.135 L823.149 682.135 L822.59 682.135 L822.03 682.135 L821.471 682.135 L820.912 682.135 L820.353 682.135 L819.793 682.135 L819.234 682.135 L818.675 682.135 L818.116 682.135 L817.556 682.135 L816.997 682.135 L816.438 682.135 L815.879 682.135 L815.319 682.135 L814.76 682.135 L814.201 682.135 L813.642 682.135 L813.082 682.135 L812.523 682.135 L811.964 682.135 L811.405 682.135 L810.845 682.135 L810.286 682.135 L809.727 682.135 L809.168 682.135 L808.608 682.135 L808.049 682.135 L807.49 682.135 L806.931 682.135 L806.371 682.135 L805.812 682.135 L805.253 682.135 L804.693 682.135 L804.134 682.135 L803.575 682.135 L803.016 682.135 L802.456 682.135 L801.897 682.135 L801.338 682.135 L800.779 682.135 L800.219 682.135 L799.66 682.135 L799.101 682.135 L798.542 682.135 L797.982 682.135 L797.423 682.135 L796.864 682.135 L796.305 682.135 L795.745 682.135 L795.186 682.135 L794.627 682.135 L794.068 682.135 L793.508 682.135 L792.949 682.135 L792.39 682.135 L791.831 682.135 L791.271 682.135 L790.712 682.135 L790.153 682.135 L789.594 682.135 L789.034 682.135 L788.475 682.135 L787.916 682.135 L787.357 682.135 L786.797 682.135 L786.238 682.135 L785.679 682.135 L785.12 682.135 L784.56 682.135 L784.001 682.135 L783.442 682.135 L782.883 682.135 L782.323 682.135 L781.764 682.135 L781.205 682.135 L780.646 682.135 L780.086 682.135 L779.527 682.135 L778.968 682.135 L778.409 682.135 L777.849 682.135 L777.29 682.135 L776.731 682.135 L776.172 682.135 L775.612 682.135 L775.053 682.135 L774.494 682.135 L773.935 682.135 L773.375 682.135 L772.816 682.135 L772.257 682.135 L771.698 682.135 L771.138 682.135 L770.579 682.135 L770.02 682.135 L769.461 682.135 L768.901 682.135 L768.342 682.135 L767.783 682.135 L767.224 682.135 L766.664 682.135 L766.105 682.135 L765.546 682.135 L764.987 682.135 L764.427 682.135 L763.868 682.135 L763.309 682.135 L762.75 682.135 L762.19 682.135 L761.631 682.135 L761.072 682.135 L760.513 682.135 L759.953 682.135 L759.394 682.135 L758.835 682.135 L758.276 682.135 L757.716 682.135 L757.157 682.135 L756.598 682.135 L756.039 682.135 L755.479 682.135 L754.92 682.135 L754.361 682.135 L753.802 682.135 L753.242 682.135 L752.683 682.135 L752.124 682.135 L751.565 682.135 L751.005 682.135 L750.446 682.135 L749.887 682.135 L749.328 682.135 L748.768 682.135 L748.209 682.135 L747.65 682.135 L747.091 682.135 L746.531 682.135 L745.972 682.135 L745.413 682.135 L744.854 682.135 L744.294 682.135 L743.735 682.135 L743.176 682.135 L742.617 682.135 L742.057 682.135 L741.498 682.135 L740.939 682.135 L740.38 682.135 L739.82 682.135 L739.261 682.135 L738.702 682.135 L738.143 682.135 L737.583 682.135 L737.024 682.135 L736.465 682.135 L735.906 682.135 L735.346 682.135 L734.787 682.135 L734.228 682.135 L733.669 682.135 L733.109 682.135 L732.55 682.135 L731.991 682.135 L731.432 682.135 L730.872 682.135 L730.313 682.135 L729.754 682.135 L729.195 682.135 L728.635 682.135 L728.076 682.135 L727.517 682.135 L726.958 682.135 L726.398 682.135 L725.839 682.135 L725.28 682.135 L724.721 682.135 L724.161 682.135 L723.602 682.135 L723.043 682.135 L722.484 682.135 L721.924 682.135 L721.365 682.135 L720.806 682.135 L720.247 682.135  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip253)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.074 720.806,683.074 721.365,683.074 721.924,683.074 722.484,683.074 723.043,683.074 723.602,683.074 724.161,683.074 724.721,683.074 725.28,683.074 725.839,683.074 726.398,683.074 726.958,683.074 727.517,683.074 728.076,683.074 728.635,683.074 729.195,683.074 729.754,683.074 730.313,683.074 730.872,683.074 731.432,683.074 731.991,683.074 732.55,683.074 733.109,683.074 733.669,683.074 734.228,683.074 734.787,683.074 735.346,683.074 735.906,683.074 736.465,683.074 737.024,683.074 737.583,683.074 738.143,683.074 738.702,683.074 739.261,683.074 739.82,683.074 740.38,683.074 740.939,683.074 741.498,683.074 742.057,683.074 742.617,683.074 743.176,683.074 743.735,683.074 744.294,683.074 744.854,683.074 745.413,683.074 745.972,683.074 746.531,683.074 747.091,683.074 747.65,683.074 748.209,683.074 748.768,683.074 749.328,683.074 749.887,683.074 750.446,683.074 751.005,683.074 751.565,683.074 752.124,683.074 752.683,683.074 753.242,683.074 753.802,683.074 754.361,683.074 754.92,683.074 755.479,683.074 756.039,683.074 756.598,683.074 757.157,683.074 757.716,683.074 758.276,683.074 758.835,683.074 759.394,683.074 759.953,683.074 760.513,683.074 761.072,683.074 761.631,683.074 762.19,683.074 762.75,683.074 763.309,683.074 763.868,683.074 764.427,683.074 764.987,683.074 765.546,683.074 766.105,683.074 766.664,683.074 767.224,683.074 767.783,683.074 768.342,683.074 768.901,683.074 769.461,683.074 770.02,683.074 770.579,683.074 771.138,683.074 771.698,683.074 772.257,683.074 772.816,683.074 773.375,683.074 773.935,683.074 774.494,683.074 775.053,683.074 775.612,683.074 776.172,683.074 776.731,683.074 777.29,683.074 777.849,683.074 778.409,683.074 778.968,683.074 779.527,683.074 780.086,683.074 780.646,683.074 781.205,683.074 781.764,683.074 782.323,683.074 782.883,683.074 783.442,683.074 784.001,683.074 784.56,683.074 785.12,683.074 785.679,683.074 786.238,683.074 786.797,683.074 787.357,683.074 787.916,683.074 788.475,683.074 789.034,683.074 789.594,683.074 790.153,683.074 790.712,683.074 791.271,683.074 791.831,683.074 792.39,683.074 792.949,683.074 793.508,683.074 794.068,683.074 794.627,683.074 795.186,683.074 795.745,683.074 796.305,683.074 796.864,683.074 797.423,683.074 797.982,683.074 798.542,683.074 799.101,683.074 799.66,683.074 800.219,683.074 800.779,683.074 801.338,683.074 801.897,683.074 802.456,683.074 803.016,683.074 803.575,683.074 804.134,683.074 804.693,683.074 805.253,683.074 805.812,683.074 806.371,683.074 806.931,683.074 807.49,683.074 808.049,683.074 808.608,683.074 809.168,683.074 809.727,683.074 810.286,683.074 810.845,683.074 811.405,683.074 811.964,683.074 812.523,683.074 813.082,683.074 813.642,683.074 814.201,683.074 814.76,683.074 815.319,683.074 815.879,683.074 816.438,683.074 816.997,683.074 817.556,683.074 818.116,683.074 818.675,683.074 819.234,683.074 819.793,683.074 820.353,683.074 820.912,683.074 821.471,683.074 822.03,683.074 822.59,683.074 823.149,683.074 823.708,683.074 824.267,683.074 824.827,683.074 825.386,683.074 825.945,683.074 826.504,683.074 827.064,683.074 827.623,683.074 828.182,683.074 828.741,683.074 829.301,683.074 829.86,683.074 830.419,683.074 830.978,683.074 831.538,683.074 832.097,683.074 832.656,683.074 833.215,683.074 833.775,683.074 834.334,683.074 834.893,683.074 835.452,683.074 836.012,683.074 836.571,683.074 837.13,683.074 837.689,683.074 838.249,683.074 838.808,683.074 839.367,683.074 839.926,683.074 840.486,683.074 841.045,683.074 841.604,683.074 842.163,683.074 842.723,683.074 843.282,683.074 843.841,683.074 844.4,683.074 844.96,683.074 845.519,683.074 846.078,683.074 846.637,683.074 847.197,683.074 847.756,683.074 848.315,683.074 848.874,683.074 849.434,683.074 849.993,683.074 850.552,683.074 851.111,683.074 851.671,683.074 852.23,683.074 852.789,683.074 853.348,683.074 853.908,683.074 854.467,683.074 855.026,683.074 855.585,683.074 856.145,683.074 856.704,683.074 857.263,683.074 857.822,683.074 858.382,683.074 858.941,683.074 859.5,683.074 860.059,683.074 860.619,683.074 861.178,683.074 861.737,683.074 862.296,683.074 862.856,683.074 863.415,683.074 863.974,683.074 864.533,683.074 865.093,683.074 865.652,683.074 866.211,683.074 866.77,683.074 867.33,683.074 867.889,683.074 868.448,683.074 869.007,683.074 869.567,683.074 870.126,683.074 870.685,683.074 871.244,683.074 871.804,683.074 872.363,683.074 872.922,683.074 873.481,683.074 874.041,683.074 874.6,683.074 875.159,683.074 875.718,683.074 876.278,683.074 876.837,683.074 877.396,683.074 877.955,683.074 878.515,683.074 879.074,683.074 879.633,683.074 880.192,683.074 880.752,683.074 881.311,683.074 881.87,683.074 882.429,683.074 882.989,683.074 883.548,683.074 884.107,683.074 884.666,683.074 885.226,683.074 885.785,683.074 886.344,683.074 886.903,683.074 887.463,683.074 888.022,683.074 888.581,683.074 889.14,683.074 889.7,683.074 890.259,683.074 890.818,683.074 891.377,683.074 891.937,683.074 892.496,683.074 893.055,683.074 893.614,683.074 894.174,683.074 894.733,683.074 895.292,683.074 895.851,683.074 896.411,683.074 896.97,683.074 897.529,683.074 898.088,683.074 898.648,683.074 899.207,683.074 899.766,683.074 900.325,683.074 900.885,683.074 901.444,683.074 902.003,683.074 902.562,683.074 903.122,683.074 903.681,683.074 904.24,683.074 904.799,683.074 905.359,683.074 905.918,683.074 906.477,683.074 907.036,683.074 907.596,683.074 908.155,683.074 908.714,683.074 909.273,683.074 909.833,683.074 910.392,683.074 910.951,683.074 911.51,683.074 912.07,683.074 912.629,683.074 913.188,683.074 913.747,683.074 914.307,683.074 914.866,683.074 915.425,683.074 915.984,683.074 916.544,683.074 917.103,683.074 917.662,683.074 918.221,683.074 918.781,683.074 919.34,683.074 919.899,683.074 920.458,683.074 921.018,683.074 921.577,683.074 922.136,683.074 922.695,683.074 923.255,683.074 923.814,683.074 924.373,683.074 924.932,683.074 925.492,683.074 926.051,683.074 926.61,683.074 927.169,683.074 927.729,683.074 928.288,683.074 928.847,683.074 929.406,683.074 929.966,683.074 930.525,683.074 931.084,683.074 931.644,683.074 932.203,683.074 932.762,683.074 933.321,683.074 933.881,683.074 934.44,683.074 934.999,683.074 935.558,683.074 936.118,683.074 936.677,683.074 937.236,683.074 937.795,683.074 938.355,683.074 938.914,683.074 939.473,683.074 940.032,683.074 940.592,683.074 941.151,683.074 941.71,683.074 942.269,683.074 942.829,683.074 943.388,683.074 943.947,683.074 944.506,683.074 945.066,683.074 945.625,683.074 946.184,683.074 946.743,683.074 947.303,683.074 947.862,683.074 948.421,683.074 948.98,683.074 949.54,683.074 950.099,683.074 950.658,683.074 951.217,683.074 951.777,683.074 952.336,683.074 952.895,683.074 953.454,683.074 954.014,683.074 954.573,683.074 955.132,683.074 955.691,683.074 956.251,683.074 956.81,683.074 957.369,683.074 957.928,683.074 958.488,683.074 959.047,683.074 959.606,683.074 960.165,683.074 960.725,683.074 961.284,683.074 961.843,683.074 962.402,683.074 962.962,683.074 963.521,683.074 964.08,683.074 964.639,683.074 965.199,683.074 965.758,683.074 966.317,683.074 966.876,683.074 967.436,683.074 967.995,683.074 968.554,683.074 969.113,683.074 969.673,683.074 970.232,683.074 970.791,683.074 971.35,683.074 971.91,683.074 972.469,683.074 973.028,683.074 973.587,683.074 974.147,683.074 974.706,683.074 975.265,683.074 975.824,683.074 976.384,683.074 976.943,683.074 977.502,683.074 978.061,683.074 978.621,683.074 979.18,683.074 979.739,683.074 980.298,683.074 980.858,683.074 981.417,683.074 981.976,683.074 982.535,683.074 983.095,683.074 983.654,683.074 984.213,683.074 984.772,683.074 985.332,683.074 985.891,683.074 986.45,683.074 987.009,683.074 987.569,683.074 988.128,683.074 988.687,683.074 989.246,683.074 989.806,683.074 990.365,683.074 990.924,683.074 991.483,683.074 992.043,683.074 992.602,683.074 993.161,683.074 993.72,683.074 994.28,683.074 994.839,683.074 995.398,683.074 995.957,683.074 996.517,683.074 997.076,683.074 997.635,683.074 998.194,683.074 998.754,683.074 999.313,683.074 999.872,683.074 1000.43,683.074 1000.99,683.074 1001.55,683.074 1002.11,683.074 1002.67,683.074 1003.23,683.074 1003.79,683.074 1004.35,683.074 1004.91,683.074 1005.46,683.074 1006.02,683.074 1006.58,683.074 1007.14,683.074 1007.7,683.074 1008.26,683.074 1008.82,683.074 1009.38,683.074 1009.94,683.074 1010.5,683.074 1011.06,683.074 1011.62,683.074 1012.18,683.074 1012.73,683.074 1013.29,683.074 1013.85,683.074 1014.41,683.074 1014.97,683.074 1015.53,683.074 1016.09,683.074 1016.65,683.074 1017.21,683.074 1017.77,683.074 1018.33,683.074 1018.89,683.074 1019.45,683.074 1020.01,683.074 1020.56,683.074 1021.12,683.074 1021.68,683.074 1022.24,683.074 1022.8,683.074 1023.36,683.074 1023.92,683.074 1024.48,683.074 1025.04,683.074 1025.6,683.074 1026.16,683.074 1026.72,683.074 1027.28,683.074 1027.83,683.074 1028.39,683.074 1028.95,683.074 1029.51,683.074 1030.07,683.074 1030.63,683.074 1031.19,683.074 1031.75,683.074 1032.31,683.074 1032.87,683.074 1033.43,683.074 1033.99,683.074 1034.55,683.074 1035.1,683.074 1035.66,683.074 1036.22,683.074 1036.78,683.074 1037.34,683.074 1037.9,683.074 1038.46,683.074 1039.02,683.074 1039.58,683.074 1040.14,683.074 1040.7,683.074 1041.26,683.074 1041.82,683.074 1042.38,683.074 1042.93,683.074 1043.49,683.074 1044.05,683.074 1044.61,683.074 1045.17,683.074 1045.73,683.074 1046.29,683.074 1046.85,683.074 1047.41,683.074 1047.97,683.074 1048.53,683.074 1049.09,683.074 1049.65,683.074 1050.2,683.074 1050.76,683.074 1051.32,683.074 1051.88,683.074 1052.44,683.074 1053,683.074 1053.56,683.074 1054.12,683.074 1054.68,683.074 1055.24,683.074 1055.8,683.074 1056.36,683.074 1056.92,683.074 1057.48,683.074 1058.03,683.074 1058.59,683.074 1059.15,683.074 1059.71,683.074 1060.27,683.074 1060.83,683.074 1061.39,683.074 1061.95,683.074 1062.51,683.074 1063.07,683.074 1063.63,683.074 1064.19,683.074 1064.75,683.074 1065.3,683.074 1065.86,683.074 1066.42,683.074 1066.98,683.074 1067.54,683.074 1068.1,683.074 1068.66,683.074 1069.22,683.074 1069.78,683.074 1070.34,683.074 1070.9,683.074 1071.46,683.074 1072.02,683.074 1072.57,683.074 1073.13,683.074 1073.69,683.074 1074.25,683.074 1074.81,683.074 1075.37,683.074 1075.93,683.074 1076.49,683.074 1077.05,683.074 1077.61,683.074 1078.17,683.074 1078.73,683.074 1079.29,683.074 1079.85,683.074 1080.4,683.074 1080.96,683.074 1081.52,683.074 1082.08,683.074 1082.64,683.074 1083.2,683.074 1083.76,683.074 1084.32,683.074 1084.88,683.074 1085.44,683.074 1086,683.074 1086.56,683.074 1087.12,683.074 1087.67,683.074 1088.23,683.074 1088.79,683.074 1089.35,683.074 1089.91,683.074 1090.47,683.074 1091.03,683.074 1091.59,683.074 1092.15,683.074 1092.71,683.074 1093.27,683.074 1093.83,683.074 1094.39,683.074 1094.94,683.074 1095.5,683.074 1096.06,683.074 1096.62,683.074 1097.18,683.074 1097.74,683.074 1098.3,683.074 1098.86,683.074 1099.42,683.074 1099.98,683.074 1100.54,683.074 1101.1,683.074 1101.66,683.074 1102.22,683.074 1102.77,683.074 1103.33,683.074 1103.89,683.074 1104.45,683.074 1105.01,683.074 1105.57,683.074 1106.13,683.074 1106.69,683.074 1107.25,683.074 1107.81,683.074 1108.37,683.074 1108.93,683.074 1109.49,683.074 1110.04,683.074 1110.6,683.074 1111.16,683.074 1111.72,683.074 1112.28,683.074 1112.84,683.074 1113.4,683.074 1113.96,683.074 1114.52,683.074 1115.08,683.074 1115.64,683.074 1116.2,683.074 1116.76,683.074 1117.31,683.074 1117.87,683.074 1118.43,683.074 1118.99,683.074 1119.55,683.074 1120.11,683.074 1120.67,683.074 1121.23,683.074 1121.79,683.074 1122.35,683.074 1122.91,683.074 1123.47,683.074 1124.03,683.074 1124.59,683.074 1125.14,683.074 1125.7,683.074 1126.26,683.074 1126.82,683.074 1127.38,683.074 1127.94,683.074 1128.5,683.074 1129.06,683.074 1129.62,683.074 1130.18,683.074 1130.74,683.074 1131.3,683.074 1131.86,683.074 1132.41,683.074 1132.97,683.074 1133.53,683.074 1134.09,683.074 1134.65,683.074 1135.21,683.074 1135.77,683.074 1136.33,683.074 1136.89,683.074 1137.45,683.074 1138.01,683.074 1138.57,683.074 1139.13,683.074 1139.68,683.074 1140.24,683.074 1140.8,683.074 1141.36,683.074 1141.92,683.074 1142.48,683.074 1143.04,683.074 1143.6,683.074 1144.16,683.074 1144.72,683.074 1145.28,683.074 1145.84,683.074 1146.4,683.074 1146.96,683.074 1147.51,683.074 1148.07,683.074 1148.63,683.074 1149.19,683.074 1149.75,683.074 1150.31,683.074 1150.87,683.074 1151.43,683.074 1151.99,683.074 1152.55,683.074 1153.11,683.074 1153.67,683.074 1154.23,683.074 1154.78,683.074 1155.34,683.074 1155.9,683.074 1156.46,683.074 1157.02,683.074 1157.58,683.074 1158.14,683.074 1158.7,683.074 1159.26,683.074 1159.82,683.074 1160.38,683.074 1160.94,683.074 1161.5,683.074 1162.05,683.074 1162.61,683.074 1163.17,683.074 1163.73,683.074 1164.29,683.074 1164.85,683.074 1165.41,683.074 1165.97,683.074 1166.53,683.074 1167.09,683.074 1167.65,683.074 1168.21,683.074 1168.77,683.074 1169.33,683.074 1169.88,683.074 1170.44,683.074 1171,683.074 1171.56,683.074 1172.12,683.074 1172.68,683.074 1173.24,683.074 1173.8,683.074 1174.36,683.074 1174.92,683.074 1175.48,683.074 1176.04,683.074 1176.6,683.074 1177.15,683.074 1177.71,683.074 1178.27,683.074 1178.83,683.074 1179.39,683.074 1179.95,683.074 1180.51,683.074 1181.07,683.074 1181.63,683.074 1182.19,683.074 1182.75,683.074 1183.31,683.074 1183.87,683.074 1184.43,683.074 1184.98,683.074 1185.54,683.074 1186.1,683.074 1186.66,683.074 1187.22,683.074 1187.78,683.074 1188.34,683.074 1188.9,683.074 1189.46,683.074 1190.02,683.074 1190.58,683.074 1191.14,683.074 1191.7,683.074 1192.25,683.074 1192.81,683.074 1193.37,683.074 1193.93,683.074 1194.49,683.074 1195.05,683.074 1195.61,683.074 1196.17,683.074 1196.73,683.074 1197.29,683.074 1197.85,683.074 1198.41,683.074 1198.97,683.074 1199.52,683.074 1200.08,683.074 1200.64,683.074 1201.2,683.074 1201.76,683.074 1202.32,683.074 1202.88,683.074 1203.44,683.074 1204,683.074 1204.56,683.074 1205.12,683.074 1205.68,683.074 1206.24,683.074 1206.8,683.074 1207.35,683.074 1207.91,683.074 1208.47,683.074 1209.03,683.074 1209.59,683.074 1210.15,683.074 1210.71,683.074 1211.27,683.074 1211.83,683.074 1212.39,683.074 1212.95,683.074 1213.51,683.074 1214.07,683.074 1214.62,683.074 1215.18,683.074 1215.74,683.074 1216.3,683.074 1216.86,683.074 1217.42,683.074 1217.98,683.074 1218.54,683.074 1219.1,683.074 1219.66,683.074 1220.22,683.074 1220.78,683.074 1221.34,683.074 1221.89,683.074 1222.45,683.074 1223.01,683.074 1223.57,683.074 1224.13,683.074 1224.69,683.074 1225.25,683.074 1225.81,683.074 1226.37,683.074 1226.93,683.074 1227.49,683.074 1228.05,683.074 1228.61,683.074 1229.17,683.074 1229.72,683.074 1230.28,683.074 1230.84,683.074 1231.4,683.074 1231.96,683.074 1232.52,683.074 1233.08,683.074 1233.64,683.074 1234.2,683.074 1234.76,683.074 1235.32,683.074 1235.88,683.074 1236.44,683.074 1236.99,683.074 1237.55,683.074 1238.11,683.074 1238.67,683.074 1239.23,683.074 1239.79,683.074 1240.35,683.074 1240.91,683.074 1241.47,683.074 1242.03,683.074 1242.59,683.074 1243.15,683.074 1243.71,683.074 1244.26,683.074 1244.82,683.074 1245.38,683.074 1245.94,683.074 1246.5,683.074 1247.06,683.074 1247.62,683.074 1248.18,683.074 1248.74,683.074 1249.3,683.074 1249.86,683.074 1250.42,683.074 1250.98,683.074 1251.54,683.074 1252.09,683.074 1252.65,683.074 1253.21,683.074 1253.77,683.074 1254.33,683.074 1254.89,683.074 1255.45,683.074 1256.01,683.074 1256.57,683.074 1257.13,683.074 1257.69,683.074 1258.25,683.074 1258.81,683.074 1259.36,683.074 1259.92,683.074 1260.48,683.074 1261.04,683.074 1261.6,683.074 1262.16,683.074 1262.72,683.074 1263.28,683.074 1263.84,683.074 1264.4,683.074 1264.96,683.074 1265.52,683.074 1266.08,683.074 1266.63,683.074 1267.19,683.074 1267.75,683.074 1268.31,683.074 1268.87,683.074 1269.43,683.074 1269.99,683.074 1270.55,683.074 1271.11,683.074 1271.67,683.074 1272.23,683.074 1272.79,683.074 1273.35,683.074 1273.91,683.074 1274.46,683.074 1275.02,683.074 1275.58,683.074 1276.14,683.074 1276.7,683.074 1277.26,683.074 1277.82,683.074 1278.38,683.074 1278.94,683.074 1279.5,683.074 1280.06,683.074 1280.62,683.074 1281.18,683.074 1281.73,683.074 1282.29,683.074 1282.85,683.074 1283.41,683.074 1283.97,683.074 1284.53,683.074 1285.09,683.074 1285.65,683.074 1286.21,683.074 1286.77,683.074 1287.33,683.074 1287.89,683.074 1288.45,683.074 1289,683.074 1289.56,683.074 1290.12,683.074 1290.68,683.074 1291.24,683.074 1291.8,683.074 1292.36,683.074 1292.92,683.074 1293.48,683.074 1294.04,683.074 1294.6,683.074 1295.16,683.074 1295.72,683.074 1296.28,683.074 1296.83,683.074 1297.39,683.074 1297.95,683.074 1298.51,683.074 1299.07,683.074 1299.63,683.074 1300.19,683.074 1300.75,683.074 1301.31,683.074 1301.87,683.074 1302.43,683.074 1302.99,683.074 1303.55,683.074 1304.1,683.074 1304.66,683.074 1305.22,683.074 1305.78,683.074 1306.34,683.074 1306.9,683.074 1307.46,683.074 1308.02,683.074 1308.58,683.074 1309.14,683.074 1309.7,683.074 1310.26,683.074 1310.82,683.074 1311.38,683.074 1311.93,683.074 1312.49,683.074 1313.05,683.074 1313.61,683.074 1314.17,683.074 1314.73,683.074 1315.29,683.074 1315.85,683.074 1316.41,683.074 1316.97,683.074 1317.53,683.074 1318.09,683.074 1318.65,683.074 1319.2,683.074 1319.76,683.074 1320.32,683.074 1320.88,683.074 1321.44,683.074 1322,683.074 1322.56,683.074 1323.12,683.074 1323.68,683.074 1324.24,683.074 1324.8,683.074 1325.36,683.074 1325.92,683.074 1326.47,683.074 1327.03,683.074 1327.59,683.074 1328.15,683.074 1328.71,683.074 1329.27,683.074 1329.83,683.074 1330.39,683.074 1330.95,683.074 1331.51,683.074 1332.07,683.074 1332.63,683.074 1333.19,683.074 1333.75,683.074 1334.3,683.074 1334.86,683.074 1335.42,683.074 1335.98,683.074 1336.54,683.074 1337.1,683.074 1337.66,683.074 1338.22,683.074 1338.78,683.074 1339.34,683.074 1339.9,683.074 1340.46,683.074 1341.02,683.074 1341.57,683.074 1342.13,683.074 1342.69,683.074 1343.25,683.074 1343.81,683.074 1344.37,683.074 1344.93,683.074 1345.49,683.074 1346.05,683.074 1346.61,683.074 1347.17,683.074 1347.73,683.074 1348.29,683.074 1348.84,683.074 1349.4,683.074 1349.96,683.074 1350.52,683.074 1351.08,683.074 1351.64,683.074 1352.2,683.074 1352.76,683.074 1353.32,683.074 1353.88,683.074 1354.44,683.074 1355,683.074 1355.56,683.074 1356.12,683.074 1356.67,683.074 1357.23,683.074 1357.79,683.074 1358.35,683.074 1358.91,683.074 1359.47,683.074 1360.03,683.074 1360.59,683.074 1361.15,683.074 1361.71,683.074 1362.27,683.074 1362.83,683.074 1363.39,683.074 1363.94,683.074 1364.5,683.074 1365.06,683.074 1365.62,683.074 1366.18,683.074 1366.74,683.074 1367.3,683.074 1367.86,683.074 1368.42,683.074 1368.98,683.074 1369.54,683.074 1370.1,683.074 1370.66,683.074 1371.21,683.074 1371.77,683.074 1372.33,683.074 1372.89,683.074 1373.45,683.074 1374.01,683.074 1374.57,683.074 1375.13,683.074 1375.69,683.074 1376.25,683.074 1376.81,683.074 1377.37,683.074 1377.93,683.074 1378.49,683.074 1379.04,683.074 1379.6,683.074 1380.16,683.074 1380.72,683.074 1381.28,683.074 1381.84,683.074 1382.4,683.074 1382.96,683.074 1383.52,683.074 1384.08,683.074 1384.64,683.074 1385.2,683.074 1385.76,683.074 1386.31,683.074 1386.87,683.074 1387.43,683.074 1387.99,683.074 1388.55,683.074 1389.11,683.074 1389.67,683.074 1390.23,683.074 1390.79,683.074 1391.35,683.074 1391.91,683.074 1392.47,683.074 1393.03,683.074 1393.58,683.074 1394.14,683.074 1394.7,683.074 1395.26,683.074 1395.82,683.074 1396.38,683.074 1396.94,683.074 1397.5,683.074 1398.06,683.074 1398.62,683.074 1399.18,683.074 1399.74,683.074 1400.3,683.074 1400.86,683.074 1401.41,683.074 1401.97,683.074 1402.53,683.074 1403.09,683.074 1403.65,683.074 1404.21,683.074 1404.77,683.074 1405.33,683.074 1405.89,683.074 1406.45,683.074 1407.01,683.074 1407.57,683.074 1408.13,683.074 1408.68,683.074 1409.24,683.074 1409.8,683.074 1410.36,683.074 1410.92,683.074 1411.48,683.074 1412.04,683.074 1412.6,683.074 1413.16,683.074 1413.72,683.074 1414.28,683.074 1414.84,683.074 1415.4,683.074 1415.95,683.074 1416.51,683.074 1417.07,683.074 1417.63,683.074 1418.19,683.074 1418.75,683.074 1419.31,683.074 1419.87,683.074 1420.43,683.074 1420.99,683.074 1421.55,683.074 1422.11,683.074 1422.67,683.074 1423.23,683.074 1423.78,683.074 1424.34,683.074 1424.9,683.074 1425.46,683.074 1426.02,683.074 1426.58,683.074 1427.14,683.074 1427.7,683.074 1428.26,683.074 1428.82,683.074 1429.38,683.074 1429.94,683.074 1430.5,683.074 1431.05,683.074 1431.61,683.074 1432.17,683.074 1432.73,683.074 1433.29,683.074 1433.85,683.074 1434.41,683.074 1434.97,683.074 1435.53,683.074 1436.09,683.074 1436.65,683.074 1437.21,683.074 1437.77,683.074 1438.33,683.074 1438.88,683.074 1439.44,683.074 1440,683.074 1440.56,683.074 1441.12,683.074 1441.68,683.074 1442.24,683.074 1442.8,683.074 1443.36,683.074 1443.92,683.074 1444.48,683.074 1445.04,683.074 1445.6,683.074 1446.15,683.074 1446.71,683.074 1447.27,683.074 1447.83,683.074 1448.39,683.074 1448.95,683.074 1449.51,683.074 1450.07,683.074 1450.63,683.074 1451.19,683.074 1451.75,683.074 1452.31,683.074 1452.87,683.074 1453.42,683.074 1453.98,683.074 1454.54,683.074 1455.1,683.074 1455.66,683.074 1456.22,683.074 1456.78,683.074 1457.34,683.074 1457.9,683.074 1458.46,683.074 1459.02,683.074 1459.58,683.074 1460.14,683.074 1460.7,683.074 1461.25,683.074 1461.81,683.074 1462.37,683.074 1462.93,683.074 1463.49,683.074 1464.05,683.074 1464.61,683.074 1465.17,683.074 1465.73,683.074 1466.29,683.074 1466.85,683.074 1467.41,683.074 1467.97,683.074 1468.52,683.074 1469.08,683.074 1469.64,683.074 1470.2,683.074 1470.76,683.074 1471.32,683.074 1471.88,683.074 1472.44,683.074 1473,683.074 1473.56,683.074 1474.12,683.074 1474.68,683.074 1475.24,683.074 1475.79,683.074 1476.35,683.074 1476.91,683.074 1477.47,683.074 1478.03,683.074 1478.59,683.074 1479.15,683.074 1479.71,683.074 1480.27,683.074 1480.83,683.074 1481.39,683.074 1481.95,683.074 1482.51,683.074 1483.07,683.074 1483.62,683.074 1484.18,683.074 1484.74,683.074 1485.3,683.074 1485.86,683.074 1486.42,683.074 1486.98,683.074 1487.54,683.074 1488.1,683.074 1488.66,683.074 1489.22,683.074 1489.78,683.074 1490.34,683.074 1490.89,683.074 1491.45,683.074 1492.01,683.074 1492.57,683.074 1493.13,683.074 1493.69,683.074 1494.25,683.074 1494.81,683.074 1495.37,683.074 1495.93,683.074 1496.49,683.074 1497.05,683.074 1497.61,683.074 1498.16,683.074 1498.72,683.074 1499.28,683.074 1499.84,683.074 1500.4,683.074 1500.96,683.074 1501.52,683.074 1502.08,683.074 1502.64,683.074 1503.2,683.074 1503.76,683.074 1504.32,683.074 1504.88,683.074 1505.44,683.074 1505.99,683.074 1506.55,683.074 1507.11,683.074 1507.67,683.074 1508.23,683.074 1508.79,683.074 1509.35,683.074 1509.91,683.074 1510.47,683.074 1511.03,683.074 1511.59,683.074 1512.15,683.074 1512.71,683.074 1513.26,683.074 1513.82,683.074 1514.38,683.074 1514.94,683.074 1515.5,683.074 1516.06,683.074 1516.62,683.074 1517.18,683.074 1517.74,683.074 1518.3,683.074 1518.86,683.074 1519.42,683.074 1519.98,683.074 1520.53,683.074 1521.09,683.074 1521.65,683.074 1522.21,683.074 1522.77,683.074 1523.33,683.074 1523.89,683.074 1524.45,683.074 1525.01,683.074 1525.57,683.074 1526.13,683.074 1526.69,683.074 1527.25,683.074 1527.81,683.074 1528.36,683.074 1528.92,683.074 1529.48,683.074 1530.04,683.074 1530.6,683.074 1531.16,683.074 1531.72,683.074 1532.28,683.074 1532.84,683.074 1533.4,683.074 1533.96,683.074 1534.52,683.074 1535.08,683.074 1535.63,683.074 1536.19,683.074 1536.75,683.074 1537.31,683.074 1537.87,683.074 1538.43,683.074 1538.99,683.074 1539.55,683.074 1540.11,683.074 1540.67,683.074 1541.23,683.074 1541.79,683.074 1542.35,683.074 1542.9,683.074 1543.46,683.074 1544.02,683.074 1544.58,683.074 1545.14,683.074 1545.7,683.074 1546.26,683.074 1546.82,683.074 1547.38,683.074 1547.94,683.074 1548.5,683.074 1549.06,683.074 1549.62,683.074 1550.18,683.074 1550.73,683.074 1551.29,683.074 1551.85,683.074 1552.41,683.074 1552.97,683.074 1553.53,683.074 1554.09,683.074 1554.65,683.074 1555.21,683.074 1555.77,683.074 1556.33,683.074 1556.89,683.074 1557.45,683.074 1558,683.074 1558.56,683.074 1559.12,683.074 1559.68,683.074 1560.24,683.074 1560.8,683.074 1561.36,683.074 1561.92,683.074 1562.48,683.074 1563.04,683.074 1563.6,683.074 1564.16,683.074 1564.72,683.074 1565.28,683.074 1565.83,683.074 1566.39,683.074 1566.95,683.074 1567.51,683.074 1568.07,683.074 1568.63,683.074 1569.19,683.074 1569.75,683.074 1570.31,683.074 1570.87,683.074 1571.43,683.074 1571.99,683.074 1572.55,683.074 1573.1,683.074 1573.66,683.074 1574.22,683.074 1574.78,683.074 1575.34,683.074 1575.9,683.074 1576.46,683.074 1577.02,683.074 1577.58,683.074 1578.14,683.074 1578.7,683.074 1579.26,683.074 1579.82,683.074 1580.37,683.074 1580.93,683.074 1581.49,683.074 1582.05,683.074 1582.61,683.074 1583.17,683.074 1583.73,683.074 1584.29,683.074 1584.85,683.074 1585.41,683.074 1585.97,683.074 1586.53,683.074 1587.09,683.074 1587.65,683.074 1588.2,683.074 1588.76,683.074 1589.32,683.074 1589.88,683.074 1590.44,683.074 1591,683.074 1591.56,683.074 1592.12,683.074 1592.68,683.074 1593.24,683.074 1593.8,683.074 1594.36,683.074 1594.92,683.074 1595.47,683.074 1596.03,683.074 1596.59,683.074 1597.15,683.074 1597.71,683.074 1598.27,683.074 1598.83,683.074 1599.39,683.074 1599.95,683.074 1600.51,683.074 1601.07,683.074 1601.63,683.074 1602.19,683.074 1602.74,683.074 1603.3,683.074 1603.86,683.074 1604.42,683.074 1604.98,683.074 1605.54,683.074 1606.1,683.074 1606.66,683.074 1607.22,683.074 1607.78,683.074 1608.34,683.074 1608.9,683.074 1609.46,683.074 1610.02,683.074 1610.57,683.074 1611.13,683.074 1611.69,683.074 1612.25,683.074 1612.81,683.074 1613.37,683.074 1613.93,683.074 1614.49,683.074 1615.05,683.074 1615.61,683.074 1616.17,683.074 1616.73,683.074 1617.29,683.074 1617.84,683.074 1618.4,683.074 1618.96,683.074 1619.52,683.074 1620.08,683.074 1620.64,683.074 1621.2,683.074 1621.76,683.074 1622.32,683.074 1622.88,683.074 1623.44,683.074 1624,683.074 1624.56,683.074 1625.11,683.074 1625.67,683.074 1626.23,683.074 1626.79,683.074 1627.35,683.074 1627.91,683.074 1628.47,683.074 1629.03,683.074 1629.59,683.074 1630.15,683.074 1630.71,683.074 1631.27,683.074 1631.83,683.074 1632.39,683.074 1632.94,683.074 1633.5,683.074 1634.06,683.074 1634.62,683.074 1635.18,683.074 1635.74,683.074 1636.3,683.074 1636.86,683.074 1637.42,683.074 1637.98,683.074 1638.54,683.074 1639.1,683.074 1639.66,683.074 1640.21,683.074 1640.77,683.074 1641.33,683.074 1641.89,683.074 1642.45,683.074 1643.01,683.074 1643.57,683.074 1644.13,683.074 1644.69,683.074 1645.25,683.074 1645.81,683.074 1646.37,683.074 1646.93,683.074 1647.48,683.074 1648.04,683.074 1648.6,683.074 1649.16,683.074 1649.72,683.074 1650.28,683.074 1650.84,683.074 1651.4,683.074 1651.96,683.074 1652.52,683.074 1653.08,683.074 1653.64,683.074 1654.2,683.074 1654.76,683.074 1655.31,683.074 1655.87,683.074 1656.43,683.074 1656.99,683.074 1657.55,683.074 1658.11,683.074 1658.67,683.074 1659.23,683.074 1659.79,683.074 1660.35,683.074 1660.91,683.074 1661.47,683.074 1662.03,683.074 1662.58,683.074 1663.14,683.074 1663.7,683.074 1664.26,683.074 1664.82,683.074 1665.38,683.074 1665.94,683.074 1666.5,683.074 1667.06,683.074 1667.62,683.074 1668.18,683.074 1668.74,683.074 1669.3,683.074 1669.85,683.074 1670.41,683.074 1670.97,683.074 1671.53,683.074 1672.09,683.074 1672.65,683.074 1673.21,683.074 1673.77,683.074 1674.33,683.074 1674.89,683.074 1675.45,683.074 1676.01,683.074 1676.57,683.074 1677.13,683.074 1677.68,683.074 1678.24,683.074 1678.8,683.074 1679.36,683.074 1679.92,683.074 1680.48,683.074 1681.04,683.074 1681.6,683.074 1682.16,683.074 1682.72,683.074 1683.28,683.074 1683.84,683.074 1684.4,683.074 1684.95,683.074 1685.51,683.074 1686.07,683.074 1686.63,683.074 1687.19,683.074 1687.75,683.074 1688.31,683.074 1688.87,683.074 1689.43,683.074 1689.99,683.074 1690.55,683.074 1691.11,683.074 1691.67,683.074 1692.23,683.074 1692.78,683.074 1693.34,683.074 1693.9,683.074 1694.46,683.074 1695.02,683.074 1695.58,683.074 1696.14,683.074 1696.7,683.074 1697.26,683.074 1697.82,683.074 1698.38,683.074 1698.94,683.074 1699.5,683.074 1700.05,683.074 1700.61,683.074 1701.17,683.074 1701.73,683.074 1702.29,683.074 1702.85,683.074 1703.41,683.074 1703.97,683.074 1704.53,683.074 1705.09,683.074 1705.65,683.074 1706.21,683.074 1706.77,683.074 1707.32,683.074 1707.88,683.074 1708.44,683.074 1709,683.074 1709.56,683.074 1710.12,683.074 1710.68,683.074 1711.24,683.074 1711.8,683.074 1712.36,683.074 1712.92,683.074 1713.48,683.074 1714.04,683.074 1714.6,683.074 1715.15,683.074 1715.71,683.074 1716.27,683.074 1716.83,683.074 1717.39,683.074 1717.95,683.074 1718.51,683.074 1719.07,683.074 1719.63,683.074 1720.19,683.074 1720.75,683.074 1721.31,683.074 1721.87,683.074 1722.42,683.074 1722.98,683.074 1723.54,683.074 1724.1,683.074 1724.66,683.074 1725.22,683.074 1725.78,683.074 1726.34,683.074 1726.9,683.074 1727.46,683.074 1728.02,683.074 1728.58,683.074 1729.14,683.074 1729.69,683.074 1730.25,683.074 1730.81,683.074 1731.37,683.074 1731.93,683.074 1732.49,683.074 1733.05,683.074 1733.61,683.074 1734.17,683.074 1734.73,683.074 1735.29,683.074 1735.85,683.074 1736.41,683.074 1736.97,683.074 1737.52,683.074 1738.08,683.074 1738.64,683.074 1739.2,683.074 1739.76,683.074 1740.32,683.074 1740.88,683.074 1741.44,683.074 1742,683.074 1742.56,683.074 1743.12,683.074 1743.68,683.074 1744.24,683.074 1744.79,683.074 1745.35,683.074 1745.91,683.074 1746.47,683.074 1747.03,683.074 1747.59,683.074 1748.15,683.074 1748.71,683.074 1749.27,683.074 1749.83,683.074 1750.39,683.074 1750.95,683.074 1751.51,683.074 1752.06,683.074 1752.62,683.074 1753.18,683.074 1753.74,683.074 1754.3,683.074 1754.86,683.074 1755.42,683.074 1755.98,683.074 1756.54,683.074 1757.1,683.074 1757.66,683.074 1758.22,683.074 1758.78,683.074 1759.34,683.074 1759.89,683.074 1760.45,683.074 1761.01,683.074 1761.57,683.074 1762.13,683.074 1762.69,683.074 1763.25,683.074 1763.81,683.074 1764.37,683.074 1764.93,683.074 1765.49,683.074 1766.05,683.074 1766.61,683.074 1767.16,683.074 1767.72,683.074 1768.28,683.074 1768.84,683.074 1769.4,683.074 1769.96,683.074 1770.52,683.074 1771.08,683.074 1771.64,683.074 1772.2,683.074 1772.76,683.074 1773.32,683.074 1773.88,683.074 1774.43,683.074 1774.99,683.074 1775.55,683.074 1776.11,683.074 1776.67,683.074 1777.23,683.074 1777.79,683.074 1778.35,683.074 1778.91,683.074 1779.47,683.074 1780.03,683.074 1780.59,683.074 1781.15,683.074 1781.71,683.074 1782.26,683.074 1782.82,683.074 1783.38,683.074 1783.94,683.074 1784.5,683.074 1785.06,683.074 1785.62,683.074 1786.18,683.074 1786.74,683.074 1787.3,683.074 1787.86,683.074 1788.42,683.074 1788.98,683.074 1789.53,683.074 1790.09,683.074 1790.65,683.074 1791.21,683.074 1791.77,683.074 1792.33,683.074 1792.89,683.074 1793.45,683.074 1794.01,683.074 1794.57,683.074 1795.13,683.074 1795.69,683.074 1796.25,683.074 1796.8,683.074 1797.36,683.074 1797.92,683.074 1798.48,683.074 1799.04,683.074 1799.6,683.074 1800.16,683.074 1800.72,683.074 1801.28,683.074 1801.84,683.074 1802.4,683.074 1802.96,683.074 1803.52,683.074 1804.08,683.074 1804.63,683.074 1805.19,683.074 1805.75,683.074 1806.31,683.074 1806.87,683.074 1807.43,683.074 1807.99,683.074 1808.55,683.074 1809.11,683.074 1809.67,683.074 1810.23,683.074 1810.79,683.074 1811.35,683.074 1811.9,683.074 1812.46,683.074 1813.02,683.074 1813.58,683.074 1814.14,683.074 1814.7,683.074 1815.26,683.074 1815.82,683.074 1816.38,683.074 1816.94,683.074 1817.5,683.074 1818.06,683.074 1818.62,683.074 1819.18,683.074 1819.73,683.074 1820.29,683.074 1820.85,683.074 1821.41,683.074 1821.97,683.074 1822.53,683.074 1823.09,683.074 1823.65,683.074 1824.21,683.074 1824.77,683.074 1825.33,683.074 1825.89,683.074 1826.45,683.074 1827,683.074 1827.56,683.074 1828.12,683.074 1828.68,683.074 1829.24,683.074 1829.8,683.074 1830.36,683.074 1830.92,683.074 1831.48,683.074 1832.04,683.074 1832.6,683.074 1833.16,683.074 1833.72,683.074 1834.27,683.074 1834.83,683.074 1835.39,683.074 1835.95,683.074 1836.51,683.074 1837.07,683.074 1837.63,683.074 1838.19,683.074 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027333900350171 ± 0.015900901932319616\nProjected Energy: -4.01251260308077 ± (0.004510606780820936, 0.004725240500033756)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.507121</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4677e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.0288e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.518e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.654e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.455e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.007e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.3631242916133584\n -0.7590191922770817\n  0.13584182219621255\n  0.15789998694608443\n  0.8767114411781325\n  1.5305929970973278\n  1.583573261186742\n  3.072870330325868\n  3.125672653951833\n  4.8621072215621775\n  6.260694850380599\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t,k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
